internal static class AssemblyRef : object {
    internal static string EcmaPublicKey;
    internal static string EcmaPublicKeyToken;
    internal static string EcmaPublicKeyFull;
    internal static string SilverlightPublicKey;
    internal static string SilverlightPublicKeyToken;
    internal static string SilverlightPublicKeyFull;
    internal static string SilverlightPlatformPublicKey;
    internal static string SilverlightPlatformPublicKeyToken;
    internal static string SilverlightPlatformPublicKeyFull;
    internal static string PlatformPublicKey;
    internal static string PlatformPublicKeyToken;
    internal static string PlatformPublicKeyFull;
    internal static string Mscorlib;
    internal static string SystemData;
    internal static string SystemDataOracleClient;
    internal static string System;
    internal static string SystemCore;
    internal static string SystemNumerics;
    internal static string SystemRuntimeRemoting;
    internal static string SystemThreadingTasksDataflow;
    internal static string SystemWindowsForms;
    internal static string SystemXml;
    internal static string MicrosoftPublicKey;
    internal static string MicrosoftPublicKeyToken;
    internal static string MicrosoftPublicKeyFull;
    internal static string SharedLibPublicKey;
    internal static string SharedLibPublicKeyToken;
    internal static string SharedLibPublicKeyFull;
    internal static string SystemComponentModelDataAnnotations;
    internal static string SystemConfiguration;
    internal static string SystemConfigurationInstall;
    internal static string SystemDeployment;
    internal static string SystemDesign;
    internal static string SystemDirectoryServices;
    internal static string SystemDrawingDesign;
    internal static string SystemDrawing;
    internal static string SystemEnterpriseServices;
    internal static string SystemManagement;
    internal static string SystemMessaging;
    internal static string SystemNetHttp;
    internal static string SystemNetHttpWebRequest;
    internal static string SystemRuntimeSerializationFormattersSoap;
    internal static string SystemRuntimeWindowsRuntime;
    internal static string SystemRuntimeWindowsRuntimeUIXaml;
    internal static string SystemSecurity;
    internal static string SystemServiceModelWeb;
    internal static string SystemServiceProcess;
    internal static string SystemWeb;
    internal static string SystemWebAbstractions;
    internal static string SystemWebDynamicData;
    internal static string SystemWebDynamicDataDesign;
    internal static string SystemWebEntityDesign;
    internal static string SystemWebExtensions;
    internal static string SystemWebExtensionsDesign;
    internal static string SystemWebMobile;
    internal static string SystemWebRegularExpressions;
    internal static string SystemWebRouting;
    internal static string SystemWebServices;
    internal static string WindowsBase;
    internal static string MicrosoftVisualStudio;
    internal static string MicrosoftVisualStudioWindowsForms;
    internal static string VJSharpCodeProvider;
    internal static string ASPBrowserCapsPublicKey;
    internal static string ASPBrowserCapsFactory;
    internal static string MicrosoftVSDesigner;
    internal static string MicrosoftVisualStudioWeb;
    internal static string MicrosoftWebDesign;
    internal static string MicrosoftVSDesignerMobile;
    internal static string MicrosoftJScript;
}
internal class ClientBuildManagerTypeDescriptionProviderBridge : MarshalByRefObject {
    internal ClientBuildManagerTypeDescriptionProviderBridge(TypeDescriptionProvider typeDescriptionProvider);
    public virtual object InitializeLifetimeService();
    internal bool HasProperty(Type type, string name, BindingFlags bindingAttr, Type returnType, Type[] types);
    internal bool HasField(Type type, string name, BindingFlags bindingAttr);
    internal bool HasEvent(Type type, string name);
    internal bool HasMethod(Type type, string name, BindingFlags bindingAttr);
    internal String[] GetFilteredProperties(Type type, BindingFlags bindingFlags);
    internal String[] GetFilteredEvents(Type type, BindingFlags bindingFlags);
}
internal static class FXAssembly : object {
    internal static string Version;
}
[SecurityCriticalAttribute]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("9FD93CCF-3280-4391-B3A9-96E1CDE77C8D")]
internal interface Microsoft.Runtime.Hosting.IClrStrongName {
    public abstract virtual int GetHashFromAssemblyFile(string pszFilePath, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int GetHashFromAssemblyFileW(string pwzFilePath, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int GetHashFromBlob(IntPtr pbBlob, int cchBlob, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int GetHashFromFile(string pszFilePath, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int GetHashFromFileW(string pwzFilePath, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int GetHashFromHandle(IntPtr hFile, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int StrongNameCompareAssemblies(string pwzAssembly1, string pwzAssembly2, Int32& dwResult);
    public abstract virtual int StrongNameFreeBuffer(IntPtr pbMemory);
    public abstract virtual int StrongNameGetBlob(string pwzFilePath, Byte[] pbBlob, Int32& pcbBlob);
    public abstract virtual int StrongNameGetBlobFromImage(IntPtr pbBase, int dwLength, Byte[] pbBlob, Int32& pcbBlob);
    public abstract virtual int StrongNameGetPublicKey(string pwzKeyContainer, Byte[] pbKeyBlob, int cbKeyBlob, IntPtr& ppbPublicKeyBlob, Int32& pcbPublicKeyBlob);
    public abstract virtual int StrongNameHashSize(int ulHashAlg, Int32& cbSize);
    public abstract virtual int StrongNameKeyDelete(string pwzKeyContainer);
    public abstract virtual int StrongNameKeyGen(string pwzKeyContainer, int dwFlags, IntPtr& ppbKeyBlob, Int32& pcbKeyBlob);
    public abstract virtual int StrongNameKeyGenEx(string pwzKeyContainer, int dwFlags, int dwKeySize, IntPtr& ppbKeyBlob, Int32& pcbKeyBlob);
    public abstract virtual int StrongNameKeyInstall(string pwzKeyContainer, Byte[] pbKeyBlob, int cbKeyBlob);
    public abstract virtual int StrongNameSignatureGeneration(string pwzFilePath, string pwzKeyContainer, Byte[] pbKeyBlob, int cbKeyBlob, IntPtr ppbSignatureBlob, Int32& pcbSignatureBlob);
    public abstract virtual int StrongNameSignatureGenerationEx(string wszFilePath, string wszKeyContainer, Byte[] pbKeyBlob, int cbKeyBlob, IntPtr ppbSignatureBlob, Int32& pcbSignatureBlob, int dwFlags);
    public abstract virtual int StrongNameSignatureSize(Byte[] pbPublicKeyBlob, int cbPublicKeyBlob, Int32& pcbSize);
    public abstract virtual int StrongNameSignatureVerification(string pwzFilePath, int dwInFlags, Int32& dwOutFlags);
    public abstract virtual int StrongNameSignatureVerificationEx(string pwzFilePath, bool fForceVerification, Boolean& fWasVerified);
    public abstract virtual int StrongNameSignatureVerificationFromImage(IntPtr pbBase, int dwLength, int dwInFlags, Int32& dwOutFlags);
    public abstract virtual int StrongNameTokenFromAssembly(string pwzFilePath, IntPtr& ppbStrongNameToken, Int32& pcbStrongNameToken);
    public abstract virtual int StrongNameTokenFromAssemblyEx(string pwzFilePath, IntPtr& ppbStrongNameToken, Int32& pcbStrongNameToken, IntPtr& ppbPublicKeyBlob, Int32& pcbPublicKeyBlob);
    public abstract virtual int StrongNameTokenFromPublicKey(Byte[] pbPublicKeyBlob, int cbPublicKeyBlob, IntPtr& ppbStrongNameToken, Int32& pcbStrongNameToken);
}
[SecurityCriticalAttribute]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("9FD93CCF-3280-4391-B3A9-96E1CDE77C8D")]
internal interface Microsoft.Runtime.Hosting.IClrStrongNameUsingIntPtr {
    public abstract virtual int GetHashFromAssemblyFile(string pszFilePath, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int GetHashFromAssemblyFileW(string pwzFilePath, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int GetHashFromBlob(IntPtr pbBlob, int cchBlob, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int GetHashFromFile(string pszFilePath, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int GetHashFromFileW(string pwzFilePath, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int GetHashFromHandle(IntPtr hFile, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int StrongNameCompareAssemblies(string pwzAssembly1, string pwzAssembly2, Int32& dwResult);
    public abstract virtual int StrongNameFreeBuffer(IntPtr pbMemory);
    public abstract virtual int StrongNameGetBlob(string pwzFilePath, Byte[] pbBlob, Int32& pcbBlob);
    public abstract virtual int StrongNameGetBlobFromImage(IntPtr pbBase, int dwLength, Byte[] pbBlob, Int32& pcbBlob);
    public abstract virtual int StrongNameGetPublicKey(string pwzKeyContainer, IntPtr pbKeyBlob, int cbKeyBlob, IntPtr& ppbPublicKeyBlob, Int32& pcbPublicKeyBlob);
    public abstract virtual int StrongNameHashSize(int ulHashAlg, Int32& cbSize);
    public abstract virtual int StrongNameKeyDelete(string pwzKeyContainer);
    public abstract virtual int StrongNameKeyGen(string pwzKeyContainer, int dwFlags, IntPtr& ppbKeyBlob, Int32& pcbKeyBlob);
    public abstract virtual int StrongNameKeyGenEx(string pwzKeyContainer, int dwFlags, int dwKeySize, IntPtr& ppbKeyBlob, Int32& pcbKeyBlob);
    public abstract virtual int StrongNameKeyInstall(string pwzKeyContainer, IntPtr pbKeyBlob, int cbKeyBlob);
    public abstract virtual int StrongNameSignatureGeneration(string pwzFilePath, string pwzKeyContainer, IntPtr pbKeyBlob, int cbKeyBlob, IntPtr ppbSignatureBlob, Int32& pcbSignatureBlob);
    public abstract virtual int StrongNameSignatureGenerationEx(string wszFilePath, string wszKeyContainer, IntPtr pbKeyBlob, int cbKeyBlob, IntPtr ppbSignatureBlob, Int32& pcbSignatureBlob, int dwFlags);
    public abstract virtual int StrongNameSignatureSize(IntPtr pbPublicKeyBlob, int cbPublicKeyBlob, Int32& pcbSize);
    public abstract virtual int StrongNameSignatureVerification(string pwzFilePath, int dwInFlags, Int32& dwOutFlags);
    public abstract virtual int StrongNameSignatureVerificationEx(string pwzFilePath, bool fForceVerification, Boolean& fWasVerified);
    public abstract virtual int StrongNameSignatureVerificationFromImage(IntPtr pbBase, int dwLength, int dwInFlags, Int32& dwOutFlags);
    public abstract virtual int StrongNameTokenFromAssembly(string pwzFilePath, IntPtr& ppbStrongNameToken, Int32& pcbStrongNameToken);
    public abstract virtual int StrongNameTokenFromAssemblyEx(string pwzFilePath, IntPtr& ppbStrongNameToken, Int32& pcbStrongNameToken, IntPtr& ppbPublicKeyBlob, Int32& pcbPublicKeyBlob);
    public abstract virtual int StrongNameTokenFromPublicKey(IntPtr pbPublicKeyBlob, int cbPublicKeyBlob, IntPtr& ppbStrongNameToken, Int32& pcbStrongNameToken);
}
internal static class Microsoft.Runtime.Hosting.StrongNameHelpers : object {
    [SecurityCriticalAttribute]
public static int StrongNameErrorInfo();
    [SecurityCriticalAttribute]
public static void StrongNameFreeBuffer(IntPtr pbMemory);
    [SecurityCriticalAttribute]
public static bool StrongNameGetPublicKey(string pwzKeyContainer, IntPtr pbKeyBlob, int cbKeyBlob, IntPtr& ppbPublicKeyBlob, Int32& pcbPublicKeyBlob);
    [SecurityCriticalAttribute]
public static bool StrongNameKeyDelete(string pwzKeyContainer);
    [SecurityCriticalAttribute]
public static bool StrongNameKeyGen(string pwzKeyContainer, int dwFlags, IntPtr& ppbKeyBlob, Int32& pcbKeyBlob);
    [SecurityCriticalAttribute]
public static bool StrongNameKeyInstall(string pwzKeyContainer, IntPtr pbKeyBlob, int cbKeyBlob);
    [SecurityCriticalAttribute]
public static bool StrongNameSignatureGeneration(string pwzFilePath, string pwzKeyContainer, IntPtr pbKeyBlob, int cbKeyBlob);
    [SecurityCriticalAttribute]
public static bool StrongNameSignatureGeneration(string pwzFilePath, string pwzKeyContainer, IntPtr pbKeyBlob, int cbKeyBlob, IntPtr& ppbSignatureBlob, Int32& pcbSignatureBlob);
    [SecurityCriticalAttribute]
public static bool StrongNameSignatureSize(IntPtr pbPublicKeyBlob, int cbPublicKeyBlob, Int32& pcbSize);
    [SecurityCriticalAttribute]
public static bool StrongNameSignatureVerification(string pwzFilePath, int dwInFlags, Int32& pdwOutFlags);
    [SecurityCriticalAttribute]
public static bool StrongNameSignatureVerificationEx(string pwzFilePath, bool fForceVerification, Boolean& pfWasVerified);
    [SecurityCriticalAttribute]
public static bool StrongNameTokenFromPublicKey(IntPtr pbPublicKeyBlob, int cbPublicKeyBlob, IntPtr& ppbStrongNameToken, Int32& pcbStrongNameToken);
    [SecurityCriticalAttribute]
public static bool StrongNameSignatureSize(Byte[] bPublicKeyBlob, int cbPublicKeyBlob, Int32& pcbSize);
    [SecurityCriticalAttribute]
public static bool StrongNameTokenFromPublicKey(Byte[] bPublicKeyBlob, int cbPublicKeyBlob, IntPtr& ppbStrongNameToken, Int32& pcbStrongNameToken);
    [SecurityCriticalAttribute]
public static bool StrongNameGetPublicKey(string pwzKeyContainer, Byte[] bKeyBlob, int cbKeyBlob, IntPtr& ppbPublicKeyBlob, Int32& pcbPublicKeyBlob);
    [SecurityCriticalAttribute]
public static bool StrongNameKeyInstall(string pwzKeyContainer, Byte[] bKeyBlob, int cbKeyBlob);
    [SecurityCriticalAttribute]
public static bool StrongNameSignatureGeneration(string pwzFilePath, string pwzKeyContainer, Byte[] bKeyBlob, int cbKeyBlob);
    [SecurityCriticalAttribute]
public static bool StrongNameSignatureGeneration(string pwzFilePath, string pwzKeyContainer, Byte[] bKeyBlob, int cbKeyBlob, IntPtr& ppbSignatureBlob, Int32& pcbSignatureBlob);
}
internal static class Microsoft.Web.Infrastructure.DynamicValidationHelper.DynamicValidationShim : object {
    internal static void EnableDynamicValidation(HttpContext context);
    internal static bool IsValidationEnabled(HttpContext context);
    internal static void GetUnvalidatedCollections(HttpContext context, Func`1& formGetter, Func`1& queryStringGetter);
}
internal class MTConfigUtil : object {
    private static MTConfigUtil();
    internal static ProfileSection GetProfileAppConfig();
    internal static PagesSection GetPagesAppConfig();
    internal static PagesSection GetPagesConfig();
    internal static PagesSection GetPagesConfig(string vpath);
    internal static PagesSection GetPagesConfig(VirtualPath vpath);
    internal static PagesSection GetPagesConfig(HttpContext context);
    internal static CompilationSection GetCompilationConfig();
    internal static CompilationSection GetCompilationAppConfig();
    internal static CompilationSection GetCompilationConfig(string vpath);
    internal static CompilationSection GetCompilationConfig(VirtualPath vpath);
    internal static CompilationSection GetCompilationConfig(HttpContext context);
}
internal class System.ComponentModel.DataAnnotations.LocalizableString : object {
    public string Value { get; public set; }
    public Type ResourceType { get; public set; }
    public LocalizableString(string propertyName);
    public string get_Value();
    public void set_Value(string value);
    public Type get_ResourceType();
    public void set_ResourceType(Type value);
    public string GetLocalizableValue();
}
internal static class System.Configuration.ConfigPathUtility : object {
    internal static bool IsValid(string configPath);
    internal static string GetParent(string configPath);
}
internal class System.InvariantComparer : object {
    internal static InvariantComparer Default;
    private static InvariantComparer();
    public sealed virtual int Compare(object a, object b);
}
internal class System.Web.Administration.WebAdminConfigurationHelper : MarshalByRefObject {
    public virtual object InitializeLifetimeService();
    public VirtualDirectory GetVirtualDirectory(string path);
    public object CallMembershipProviderMethod(string methodName, Object[] parameters, Type[] paramTypes);
    public object GetMembershipProviderProperty(string propertyName);
    public object CallRoleProviderMethod(string methodName, Object[] parameters, Type[] paramTypes);
    private sealed virtual override void System.Web.Hosting.IRegisteredObject.Stop(bool immediate);
}
internal class System.Web.AllocatorProvider : object {
    public IBufferAllocator`1<char> CharBufferAllocator { get; public set; }
    public IBufferAllocator`1<int> IntBufferAllocator { get; public set; }
    public IBufferAllocator`1<IntPtr> IntPtrBufferAllocator { get; public set; }
    public sealed virtual IBufferAllocator`1<char> get_CharBufferAllocator();
    public void set_CharBufferAllocator(IBufferAllocator`1<char> value);
    public sealed virtual IBufferAllocator`1<int> get_IntBufferAllocator();
    public void set_IntBufferAllocator(IBufferAllocator`1<int> value);
    public sealed virtual IBufferAllocator`1<IntPtr> get_IntPtrBufferAllocator();
    public void set_IntPtrBufferAllocator(IBufferAllocator`1<IntPtr> value);
    public sealed virtual void TrimMemory();
}
internal class System.Web.ApplicationImpersonationContext : ImpersonationContext {
}
public enum System.Web.ApplicationShutdownReason : Enum {
    public int value__;
    public static ApplicationShutdownReason None;
    public static ApplicationShutdownReason HostingEnvironment;
    public static ApplicationShutdownReason ChangeInGlobalAsax;
    public static ApplicationShutdownReason ConfigurationChange;
    public static ApplicationShutdownReason UnloadAppDomainCalled;
    public static ApplicationShutdownReason ChangeInSecurityPolicyFile;
    public static ApplicationShutdownReason BinDirChangeOrDirectoryRename;
    public static ApplicationShutdownReason BrowsersDirChangeOrDirectoryRename;
    public static ApplicationShutdownReason CodeDirChangeOrDirectoryRename;
    public static ApplicationShutdownReason ResourcesDirChangeOrDirectoryRename;
    public static ApplicationShutdownReason IdleTimeout;
    public static ApplicationShutdownReason PhysicalApplicationPathChanged;
    public static ApplicationShutdownReason HttpRuntimeClose;
    public static ApplicationShutdownReason InitializationError;
    public static ApplicationShutdownReason MaxRecompilationsReached;
    public static ApplicationShutdownReason BuildManagerChange;
}
internal enum System.Web.AppPerfCounter : Enum {
    public int value__;
    public static AppPerfCounter ANONYMOUS_REQUESTS;
    public static AppPerfCounter TOTAL_CACHE_ENTRIES;
    public static AppPerfCounter TOTAL_CACHE_TURNOVER_RATE;
    public static AppPerfCounter TOTAL_CACHE_HITS;
    public static AppPerfCounter TOTAL_CACHE_MISSES;
    public static AppPerfCounter TOTAL_CACHE_RATIO_BASE;
    public static AppPerfCounter API_CACHE_ENTRIES;
    public static AppPerfCounter API_CACHE_TURNOVER_RATE;
    public static AppPerfCounter API_CACHE_HITS;
    public static AppPerfCounter API_CACHE_MISSES;
    public static AppPerfCounter API_CACHE_RATIO_BASE;
    public static AppPerfCounter OUTPUT_CACHE_ENTRIES;
    public static AppPerfCounter OUTPUT_CACHE_TURNOVER_RATE;
    public static AppPerfCounter OUTPUT_CACHE_HITS;
    public static AppPerfCounter OUTPUT_CACHE_MISSES;
    public static AppPerfCounter OUTPUT_CACHE_RATIO_BASE;
    public static AppPerfCounter COMPILATIONS;
    public static AppPerfCounter DEBUGGING_REQUESTS;
    public static AppPerfCounter ERRORS_PRE_PROCESSING;
    public static AppPerfCounter ERRORS_COMPILING;
    public static AppPerfCounter ERRORS_DURING_REQUEST;
    public static AppPerfCounter ERRORS_UNHANDLED;
    public static AppPerfCounter ERRORS_TOTAL;
    public static AppPerfCounter PIPELINES;
    public static AppPerfCounter REQUEST_BYTES_IN;
    public static AppPerfCounter REQUEST_BYTES_OUT;
    public static AppPerfCounter REQUESTS_EXECUTING;
    public static AppPerfCounter REQUESTS_FAILED;
    public static AppPerfCounter REQUESTS_NOT_FOUND;
    public static AppPerfCounter REQUESTS_NOT_AUTHORIZED;
    public static AppPerfCounter REQUESTS_IN_APPLICATION_QUEUE;
    public static AppPerfCounter REQUESTS_TIMED_OUT;
    public static AppPerfCounter REQUESTS_SUCCEDED;
    public static AppPerfCounter REQUESTS_TOTAL;
    public static AppPerfCounter SESSIONS_ACTIVE;
    public static AppPerfCounter SESSIONS_ABANDONED;
    public static AppPerfCounter SESSIONS_TIMED_OUT;
    public static AppPerfCounter SESSIONS_TOTAL;
    public static AppPerfCounter TRANSACTIONS_ABORTED;
    public static AppPerfCounter TRANSACTIONS_COMMITTED;
    public static AppPerfCounter TRANSACTIONS_PENDING;
    public static AppPerfCounter TRANSACTIONS_TOTAL;
    public static AppPerfCounter SESSION_STATE_SERVER_CONNECTIONS;
    public static AppPerfCounter SESSION_SQL_SERVER_CONNECTIONS;
    public static AppPerfCounter EVENTS_TOTAL;
    public static AppPerfCounter EVENTS_APP;
    public static AppPerfCounter EVENTS_ERROR;
    public static AppPerfCounter EVENTS_HTTP_REQ_ERROR;
    public static AppPerfCounter EVENTS_HTTP_INFRA_ERROR;
    public static AppPerfCounter EVENTS_WEB_REQ;
    public static AppPerfCounter AUDIT_SUCCESS;
    public static AppPerfCounter AUDIT_FAIL;
    public static AppPerfCounter MEMBER_SUCCESS;
    public static AppPerfCounter MEMBER_FAIL;
    public static AppPerfCounter FORMS_AUTH_SUCCESS;
    public static AppPerfCounter FORMS_AUTH_FAIL;
    public static AppPerfCounter VIEWSTATE_MAC_FAIL;
    public static AppPerfCounter APP_REQUEST_EXEC_TIME;
    public static AppPerfCounter APP_REQUEST_DISCONNECTED;
    public static AppPerfCounter APP_REQUESTS_REJECTED;
    public static AppPerfCounter APP_REQUEST_WAIT_TIME;
    public static AppPerfCounter CACHE_PERCENT_MACH_MEM_LIMIT_USED;
    public static AppPerfCounter CACHE_PERCENT_MACH_MEM_LIMIT_USED_BASE;
    public static AppPerfCounter CACHE_PERCENT_PROC_MEM_LIMIT_USED;
    public static AppPerfCounter CACHE_PERCENT_PROC_MEM_LIMIT_USED_BASE;
    public static AppPerfCounter CACHE_TOTAL_TRIMS;
    public static AppPerfCounter CACHE_API_TRIMS;
    public static AppPerfCounter CACHE_OUTPUT_TRIMS;
    public static AppPerfCounter APP_CPU_USED;
    public static AppPerfCounter APP_CPU_USED_BASE;
    public static AppPerfCounter APP_MEMORY_USED;
    public static AppPerfCounter REQUEST_BYTES_IN_WEBSOCKETS;
    public static AppPerfCounter REQUEST_BYTES_OUT_WEBSOCKETS;
    public static AppPerfCounter REQUESTS_EXECUTING_WEBSOCKETS;
    public static AppPerfCounter REQUESTS_FAILED_WEBSOCKETS;
    public static AppPerfCounter REQUESTS_SUCCEEDED_WEBSOCKETS;
    public static AppPerfCounter REQUESTS_TOTAL_WEBSOCKETS;
}
[EventSourceAttribute]
internal class System.Web.AspNetEventSource : EventSource {
    public static AspNetEventSource Instance;
    private static AspNetEventSource();
    [NonEventAttribute]
public void RequestEnteredAspNetPipeline(IIS7WorkerRequest wr, Guid childActivityId);
    [NonEventAttribute]
public void RequestStarted(IIS7WorkerRequest wr);
    [EventAttribute("3")]
public void RequestCompleted();
}
internal class System.Web.AspNetSynchronizationContext : AspNetSynchronizationContextBase {
    internal bool AllowAsyncDuringSyncStages { get; internal set; }
    internal bool Enabled { get; }
    internal ExceptionDispatchInfo ExceptionDispatchInfo { get; }
    internal int PendingOperationsCount { get; }
    internal AspNetSynchronizationContext(ISyncContext syncContext);
    internal virtual bool get_AllowAsyncDuringSyncStages();
    internal virtual void set_AllowAsyncDuringSyncStages(bool value);
    internal virtual bool get_Enabled();
    internal virtual ExceptionDispatchInfo get_ExceptionDispatchInfo();
    internal virtual int get_PendingOperationsCount();
    internal virtual void AllowVoidAsyncOperations();
    internal virtual void AssociateWithCurrentThread();
    internal virtual void ClearError();
    public virtual SynchronizationContext CreateCopy();
    internal virtual void Disable();
    internal virtual void DisassociateFromCurrentThread();
    internal virtual void Enable();
    public virtual void OperationCompleted();
    public virtual void OperationStarted();
    internal virtual bool PendingCompletion(WaitCallback callback);
    public virtual void Post(SendOrPostCallback callback, object state);
    internal void PostAsync(Func`2<object, Task> callback, object state);
    internal virtual void ProhibitVoidAsyncOperations();
    internal virtual void ResetSyncCaller();
    internal virtual void SetSyncCaller();
    public virtual void Send(SendOrPostCallback callback, object state);
}
internal abstract class System.Web.AspNetSynchronizationContextBase : SynchronizationContext {
    internal bool AllowAsyncDuringSyncStages { get; internal set; }
    internal bool Enabled { get; }
    internal Exception Error { get; }
    internal ExceptionDispatchInfo ExceptionDispatchInfo { get; }
    internal int PendingOperationsCount { get; }
    internal abstract virtual bool get_AllowAsyncDuringSyncStages();
    internal abstract virtual void set_AllowAsyncDuringSyncStages(bool value);
    internal abstract virtual bool get_Enabled();
    internal Exception get_Error();
    internal abstract virtual ExceptionDispatchInfo get_ExceptionDispatchInfo();
    internal abstract virtual int get_PendingOperationsCount();
    internal abstract virtual void ClearError();
    internal abstract virtual void Disable();
    internal abstract virtual void Enable();
    internal abstract virtual bool PendingCompletion(WaitCallback callback);
    internal Task WaitForPendingOperationsAsync();
    internal abstract virtual void SetSyncCaller();
    internal abstract virtual void ResetSyncCaller();
    internal abstract virtual void AssociateWithCurrentThread();
    internal abstract virtual void DisassociateFromCurrentThread();
    internal virtual void AllowVoidAsyncOperations();
    internal virtual void ProhibitVoidAsyncOperations();
    internal IDisposable AllowVoidAsyncOperationsBlock();
    internal IDisposable AcquireThreadLock();
}
public class System.Web.BeginEventHandler : MulticastDelegate {
    public BeginEventHandler(object object, IntPtr method);
    public virtual IAsyncResult Invoke(object sender, EventArgs e, AsyncCallback cb, object extraData);
    public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback cb, object extraData, AsyncCallback callback, object object);
    public virtual IAsyncResult EndInvoke(IAsyncResult result);
}
internal abstract class System.Web.BufferAllocator : object {
    public int BufferSize { get; }
    private static BufferAllocator();
    internal BufferAllocator(int maxFree);
    public sealed virtual void ReleaseAllBuffers();
    public sealed virtual object GetBuffer();
    public sealed virtual void ReuseBuffer(object buffer);
    protected abstract virtual object AllocBuffer();
    public abstract virtual int get_BufferSize();
}
internal class System.Web.BufferAllocatorWrapper`1 : object {
    public int BufferSize { get; }
    public BufferAllocatorWrapper`1(IBufferAllocator allocator);
    public sealed virtual T[] GetBuffer();
    public sealed virtual T[] GetBuffer(int minSize);
    public sealed virtual void ReuseBuffer(T[] buffer);
    private sealed virtual override object System.Web.IBufferAllocator.GetBuffer();
    private sealed virtual override void System.Web.IBufferAllocator.ReuseBuffer(object buffer);
    public sealed virtual void ReleaseAllBuffers();
    public sealed virtual int get_BufferSize();
}
internal static class System.Web.BufferingParams : object {
    internal static int INTEGRATED_MODE_BUFFER_SIZE;
    internal static int OUTPUT_BUFFER_SIZE;
    internal static int MAX_FREE_BYTES_TO_CACHE;
    internal static int MAX_FREE_OUTPUT_BUFFERS;
    internal static int CHAR_BUFFER_SIZE;
    internal static int MAX_FREE_CHAR_BUFFERS;
    internal static int MAX_BYTES_TO_COPY;
    internal static int MAX_RESOURCE_BYTES_TO_COPY;
    internal static int INT_BUFFER_SIZE;
    internal static int INTPTR_BUFFER_SIZE;
    private static BufferingParams();
}
internal class System.Web.ByteRange : ValueType {
    internal long Offset;
    internal long Length;
}
internal enum System.Web.CacheDependencyType : Enum {
    public int value__;
    public static CacheDependencyType Files;
    public static CacheDependencyType CacheItems;
    public static CacheDependencyType VirtualPaths;
}
internal class System.Web.CachedPathData : object {
    internal static int FInited;
    internal static int FCompletedFirstRequest;
    internal static int FExists;
    internal static int FOwnsConfigRecord;
    internal static int FClosed;
    internal static int FCloseNeeded;
    internal static int FAnonymousAccessChecked;
    internal static int FAnonymousAccessAllowed;
    internal bool CompletedFirstRequest { get; internal set; }
    internal VirtualPath Path { get; }
    internal string PhysicalPath { get; }
    internal bool AnonymousAccessChecked { get; internal set; }
    internal bool AnonymousAccessAllowed { get; internal set; }
    internal bool Exists { get; }
    internal HandlerMappingMemo CachedHandler { get; internal set; }
    internal IInternalConfigRecord ConfigRecord { get; }
    internal RuntimeConfig RuntimeConfig { get; }
    internal static TimeSpan UrlMetadataSlidingExpiration { get; }
    internal static bool DoNotCacheUrlMetadata { get; }
    internal CachedPathData(string configPath, VirtualPath virtualPath, string physicalPath, bool exists);
    private static CachedPathData();
    internal static void InitializeUrlMetadataSlidingExpiration(HostingEnvironmentSection section);
    internal static CachedPathData GetMachinePathData();
    internal static CachedPathData GetRootWebPathData();
    internal static CachedPathData GetApplicationPathData();
    internal static CachedPathData GetVirtualPathData(VirtualPath virtualPath, bool permitPathsOutsideApp);
    internal static void RemoveBadPathData(CachedPathData pathData);
    internal static void MarkCompleted(CachedPathData pathData);
    internal void ValidatePath(string physicalPath);
    internal bool get_CompletedFirstRequest();
    internal void set_CompletedFirstRequest(bool value);
    internal VirtualPath get_Path();
    internal string get_PhysicalPath();
    internal bool get_AnonymousAccessChecked();
    internal void set_AnonymousAccessChecked(bool value);
    internal bool get_AnonymousAccessAllowed();
    internal void set_AnonymousAccessAllowed(bool value);
    internal bool get_Exists();
    internal HandlerMappingMemo get_CachedHandler();
    internal void set_CachedHandler(HandlerMappingMemo value);
    internal IInternalConfigRecord get_ConfigRecord();
    internal RuntimeConfig get_RuntimeConfig();
    internal static TimeSpan get_UrlMetadataSlidingExpiration();
    internal static bool get_DoNotCacheUrlMetadata();
}
public class System.Web.Caching.AggregateCacheDependency : CacheDependency {
    public void Add(CacheDependency[] dependencies);
    protected virtual void DependencyDispose();
    private sealed virtual override void System.Web.Caching.ICacheDependencyChanged.DependencyChanged(object sender, EventArgs e);
    public virtual string GetUniqueID();
    internal CacheDependency[] GetDependencyArray();
    internal virtual bool IsFileDependency();
    public virtual String[] GetFileDependencies();
}
internal class System.Web.Caching.AggregateEnumerator : object {
    public object Current { get; }
    public object Key { get; }
    public object Value { get; }
    public DictionaryEntry Entry { get; }
    internal AggregateEnumerator(IDictionaryEnumerator[] enumerators);
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual object get_Current();
    public sealed virtual object get_Key();
    public sealed virtual object get_Value();
    public sealed virtual DictionaryEntry get_Entry();
}
[DefaultMemberAttribute("Item")]
public class System.Web.Caching.Cache : object {
    public static DateTime NoAbsoluteExpiration;
    public static TimeSpan NoSlidingExpiration;
    public int Count { get; }
    public object Item { get; public set; }
    public long EffectivePrivateBytesLimit { get; }
    public long EffectivePercentagePhysicalMemoryLimit { get; }
    internal Cache(int dummy);
    private static Cache();
    internal void SetCacheInternal(CacheInternal cacheInternal);
    public int get_Count();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IDictionaryEnumerator GetEnumerator();
    public object get_Item(string key);
    public void set_Item(string key, object value);
    public object Get(string key);
    internal object Get(string key, CacheGetOptions getOptions);
    public void Insert(string key, object value);
    public void Insert(string key, object value, CacheDependency dependencies);
    public void Insert(string key, object value, CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration);
    public void Insert(string key, object value, CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, CacheItemPriority priority, CacheItemRemovedCallback onRemoveCallback);
    public void Insert(string key, object value, CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, CacheItemUpdateCallback onUpdateCallback);
    public object Add(string key, object value, CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, CacheItemPriority priority, CacheItemRemovedCallback onRemoveCallback);
    public object Remove(string key);
    public long get_EffectivePrivateBytesLimit();
    public long get_EffectivePercentagePhysicalMemoryLimit();
}
internal class System.Web.Caching.CacheCommon : object {
    internal CacheInternal _cacheInternal;
    internal Cache _cachePublic;
    protected internal CacheMemoryStats _cacheMemoryStats;
    internal int _inCacheManagerThread;
    internal bool _enableMemoryCollection;
    internal bool _enableExpiration;
    internal bool _internalConfigRead;
    internal SRefMultiple _srefMultiple;
    internal void Dispose(bool disposing);
    internal void AddSRefTarget(object o);
    internal void SetCacheInternal(CacheInternal cacheInternal);
    internal void ReadCacheInternalConfig(CacheSection cacheSection);
    internal void ResetFromConfigSettings();
    internal void EnableCacheMemoryTimer(bool enable);
    internal long CacheManagerThread(int minPercent);
}
public class System.Web.Caching.CacheDependency : object {
    public bool HasChanged { get; }
    public DateTime UtcLastModified { get; }
    internal CacheEntry[] CacheEntries { get; }
    private static CacheDependency();
    public CacheDependency(string filename);
    public CacheDependency(string filename, DateTime start);
    public CacheDependency(String[] filenames);
    public CacheDependency(String[] filenames, DateTime start);
    public CacheDependency(String[] filenames, String[] cachekeys);
    public CacheDependency(String[] filenames, String[] cachekeys, DateTime start);
    public CacheDependency(String[] filenames, String[] cachekeys, CacheDependency dependency);
    public CacheDependency(String[] filenames, String[] cachekeys, CacheDependency dependency, DateTime start);
    internal CacheDependency(int dummy, string filename);
    internal CacheDependency(int dummy, string filename, DateTime utcStart);
    internal CacheDependency(int dummy, String[] filenames);
    internal CacheDependency(int dummy, String[] filenames, DateTime utcStart);
    internal CacheDependency(int dummy, String[] filenames, String[] cachekeys);
    internal CacheDependency(int dummy, String[] filenames, String[] cachekeys, DateTime utcStart);
    internal CacheDependency(int dummy, String[] filenames, String[] cachekeys, CacheDependency dependency);
    internal CacheDependency(int dummy, String[] filenames, String[] cachekeys, CacheDependency dependency, DateTime utcStart);
    public sealed virtual void Dispose();
    protected internal void FinishInit();
    internal void DisposeInternal();
    protected virtual void DependencyDispose();
    internal bool Use();
    public bool get_HasChanged();
    public DateTime get_UtcLastModified();
    protected void SetUtcLastModified(DateTime utcLastModified);
    internal void SetCacheDependencyChanged(ICacheDependencyChanged objNotify);
    internal void AppendFileUniqueId(DepFileInfo depFileInfo, StringBuilder sb);
    public virtual string GetUniqueID();
    internal CacheEntry[] get_CacheEntries();
    protected void NotifyDependencyChanged(object sender, EventArgs e);
    internal void ItemRemoved();
    internal virtual bool IsFileDependency();
    public virtual String[] GetFileDependencies();
}
internal class System.Web.Caching.CachedRawResponse : object {
    internal Guid _cachedVaryId;
    internal HttpRawResponse _rawResponse;
    internal HttpCachePolicySettings _settings;
    internal string _kernelCacheUrl;
    internal CachedRawResponse(HttpRawResponse rawResponse, HttpCachePolicySettings settings, string kernelCacheUrl, Guid cachedVaryId);
}
internal class System.Web.Caching.CachedVary : object {
    internal String[] _contentEncodings;
    internal String[] _headers;
    internal String[] _params;
    internal string _varyByCustom;
    internal bool _varyByAllParams;
    internal Guid CachedVaryId { get; }
    internal CachedVary(String[] contentEncodings, String[] headers, String[] parameters, bool varyByAllParams, string varyByCustom);
    internal Guid get_CachedVaryId();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Web.Caching.CacheEntry : CacheKey {
    internal object Value { get; }
    internal DateTime UtcCreated { get; }
    internal EntryState State { get; internal set; }
    internal DateTime UtcExpires { get; internal set; }
    internal TimeSpan SlidingExpiration { get; }
    internal byte ExpiresBucket { get; internal set; }
    internal ExpiresEntryRef ExpiresEntryRef { get; internal set; }
    internal byte UsageBucket { get; }
    internal UsageEntryRef UsageEntryRef { get; internal set; }
    internal DateTime UtcLastUsageUpdate { get; internal set; }
    internal CacheDependency Dependency { get; }
    internal CacheEntry(string key, object value, CacheDependency dependency, CacheItemRemovedCallback onRemovedHandler, DateTime utcAbsoluteExpiration, TimeSpan slidingExpiration, CacheItemPriority priority, bool isPublic);
    private static CacheEntry();
    internal object get_Value();
    internal DateTime get_UtcCreated();
    internal EntryState get_State();
    internal void set_State(EntryState value);
    internal DateTime get_UtcExpires();
    internal void set_UtcExpires(DateTime value);
    internal TimeSpan get_SlidingExpiration();
    internal byte get_ExpiresBucket();
    internal void set_ExpiresBucket(byte value);
    internal ExpiresEntryRef get_ExpiresEntryRef();
    internal void set_ExpiresEntryRef(ExpiresEntryRef value);
    internal bool HasExpiration();
    internal bool InExpires();
    internal byte get_UsageBucket();
    internal UsageEntryRef get_UsageEntryRef();
    internal void set_UsageEntryRef(UsageEntryRef value);
    internal DateTime get_UtcLastUsageUpdate();
    internal void set_UtcLastUsageUpdate(DateTime value);
    internal bool HasUsage();
    internal bool InUsage();
    internal CacheDependency get_Dependency();
    internal void MonitorDependencyChanges();
    private sealed virtual override void System.Web.Caching.ICacheDependencyChanged.DependencyChanged(object sender, EventArgs e);
    internal void Close(CacheItemRemovedReason reason);
    internal void AddCacheDependencyNotify(CacheDependency dependency);
    internal void RemoveCacheDependencyNotify(CacheDependency dependency);
}
internal class System.Web.Caching.CacheExpires : object {
    internal static TimeSpan MIN_UPDATE_DELTA;
    internal static TimeSpan MIN_FLUSH_INTERVAL;
    internal static TimeSpan _tsPerBucket;
    internal CacheSingle CacheSingle { get; }
    internal CacheExpires(CacheSingle cacheSingle);
    private static CacheExpires();
    internal int FlushExpiredItems(bool useInsertBlock);
    internal void EnableExpirationTimer(bool enable);
    internal CacheSingle get_CacheSingle();
    internal void Add(CacheEntry cacheEntry);
    internal void Remove(CacheEntry cacheEntry);
    internal void UtcUpdate(CacheEntry cacheEntry, DateTime utcNewExpires);
}
internal enum System.Web.Caching.CacheGetOptions : Enum {
    public int value__;
    public static CacheGetOptions None;
    public static CacheGetOptions ReturnCacheEntry;
}
[DefaultMemberAttribute("Item")]
internal abstract class System.Web.Caching.CacheInternal : object {
    internal static string PrefixFIRST;
    internal static string PrefixResourceProvider;
    internal static string PrefixMapPathVPPFile;
    internal static string PrefixMapPathVPPDir;
    internal static string PrefixOutputCache;
    internal static string PrefixSqlCacheDependency;
    internal static string PrefixMemoryBuildResult;
    internal static string PrefixPathData;
    internal static string PrefixHttpCapabilities;
    internal static string PrefixMapPath;
    internal static string PrefixHttpSys;
    internal static string PrefixFileSecurity;
    internal static string PrefixInProcSessionState;
    internal static string PrefixStateApplication;
    internal static string PrefixPartialCachingControl;
    internal static string UNUSED;
    internal static string PrefixAdRotator;
    internal static string PrefixWebServiceDataSource;
    internal static string PrefixLoadXPath;
    internal static string PrefixLoadXml;
    internal static string PrefixLoadTransform;
    internal static string PrefixAspCompatThreading;
    internal static string PrefixDataSourceControl;
    internal static string PrefixValidationSentinel;
    internal static string PrefixWebEventResource;
    internal static string PrefixAssemblyPath;
    internal static string PrefixBrowserCapsHash;
    internal static string PrefixLAST;
    protected CacheCommon _cacheCommon;
    internal int PublicCount { get; }
    internal long TotalCount { get; }
    internal bool IsDisposed { get; }
    internal Cache CachePublic { get; }
    internal long EffectivePrivateBytesLimit { get; }
    internal long EffectivePercentagePhysicalMemoryLimit { get; }
    internal object Item { get; }
    protected CacheInternal(CacheCommon cacheCommon);
    internal abstract virtual int get_PublicCount();
    internal abstract virtual long get_TotalCount();
    internal abstract virtual IDictionaryEnumerator CreateEnumerator();
    internal abstract virtual CacheEntry UpdateCache(CacheKey cacheKey, CacheEntry newEntry, bool replace, CacheItemRemovedReason removedReason, Object& valueOld);
    internal abstract virtual long TrimIfNecessary(int percent);
    internal abstract virtual void EnableExpirationTimer(bool enable);
    internal static CacheInternal Create();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    internal bool get_IsDisposed();
    internal void ReadCacheInternalConfig(CacheSection cacheSection);
    internal long TrimCache(int percent);
    internal Cache get_CachePublic();
    internal long get_EffectivePrivateBytesLimit();
    internal long get_EffectivePercentagePhysicalMemoryLimit();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IDictionaryEnumerator GetEnumerator();
    internal object get_Item(string key);
    internal object Get(string key);
    internal object Get(string key, CacheGetOptions getOptions);
    internal object DoGet(bool isPublic, string key, CacheGetOptions getOptions);
    internal void UtcInsert(string key, object value);
    internal void UtcInsert(string key, object value, CacheDependency dependencies);
    internal void UtcInsert(string key, object value, CacheDependency dependencies, DateTime utcAbsoluteExpiration, TimeSpan slidingExpiration);
    internal void UtcInsert(string key, object value, CacheDependency dependencies, DateTime utcAbsoluteExpiration, TimeSpan slidingExpiration, CacheItemPriority priority, CacheItemRemovedCallback onRemoveCallback);
    internal object UtcAdd(string key, object value, CacheDependency dependencies, DateTime utcAbsoluteExpiration, TimeSpan slidingExpiration, CacheItemPriority priority, CacheItemRemovedCallback onRemoveCallback);
    internal object DoInsert(bool isPublic, string key, object value, CacheDependency dependencies, DateTime utcAbsoluteExpiration, TimeSpan slidingExpiration, CacheItemPriority priority, CacheItemRemovedCallback onRemoveCallback, bool replace);
    internal object Remove(string key);
    internal object Remove(CacheKey cacheKey, CacheItemRemovedReason reason);
    internal object DoRemove(CacheKey cacheKey, CacheItemRemovedReason reason);
}
public enum System.Web.Caching.CacheItemPriority : Enum {
    public int value__;
    public static CacheItemPriority Low;
    public static CacheItemPriority BelowNormal;
    public static CacheItemPriority Normal;
    public static CacheItemPriority AboveNormal;
    public static CacheItemPriority High;
    public static CacheItemPriority NotRemovable;
    public static CacheItemPriority Default;
}
public class System.Web.Caching.CacheItemRemovedCallback : MulticastDelegate {
    public CacheItemRemovedCallback(object object, IntPtr method);
    public virtual void Invoke(string key, object value, CacheItemRemovedReason reason);
    public virtual IAsyncResult BeginInvoke(string key, object value, CacheItemRemovedReason reason, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Web.Caching.CacheItemRemovedReason : Enum {
    public int value__;
    public static CacheItemRemovedReason Removed;
    public static CacheItemRemovedReason Expired;
    public static CacheItemRemovedReason Underused;
    public static CacheItemRemovedReason DependencyChanged;
}
public class System.Web.Caching.CacheItemUpdateCallback : MulticastDelegate {
    public CacheItemUpdateCallback(object object, IntPtr method);
    public virtual void Invoke(string key, CacheItemUpdateReason reason, Object& expensiveObject, CacheDependency& dependency, DateTime& absoluteExpiration, TimeSpan& slidingExpiration);
    public virtual IAsyncResult BeginInvoke(string key, CacheItemUpdateReason reason, Object& expensiveObject, CacheDependency& dependency, DateTime& absoluteExpiration, TimeSpan& slidingExpiration, AsyncCallback callback, object object);
    public virtual void EndInvoke(Object& expensiveObject, CacheDependency& dependency, DateTime& absoluteExpiration, TimeSpan& slidingExpiration, IAsyncResult result);
}
public enum System.Web.Caching.CacheItemUpdateReason : Enum {
    public int value__;
    public static CacheItemUpdateReason Expired;
    public static CacheItemUpdateReason DependencyChanged;
}
internal class System.Web.Caching.CacheKey : object {
    protected static byte BitPublic;
    protected static byte BitOutputCache;
    protected string _key;
    protected byte _bits;
    internal string Key { get; }
    internal bool IsOutputCache { get; }
    internal bool IsPublic { get; }
    internal CacheKey(string key, bool isPublic);
    internal string get_Key();
    internal bool get_IsOutputCache();
    internal bool get_IsPublic();
    public virtual int GetHashCode();
}
internal class System.Web.Caching.CacheKeyComparer : object {
    internal static CacheKeyComparer GetInstance();
    private sealed virtual override bool System.Collections.IEqualityComparer.Equals(object x, object y);
    private sealed virtual override int System.Collections.IEqualityComparer.GetHashCode(object obj);
}
internal abstract class System.Web.Caching.CacheMemoryPressure : object {
    protected static int TERABYTE_SHIFT;
    protected static long TERABYTE;
    protected static int GIGABYTE_SHIFT;
    protected static long GIGABYTE;
    protected static int MEGABYTE_SHIFT;
    protected static long MEGABYTE;
    protected static int KILOBYTE_SHIFT;
    protected static long KILOBYTE;
    protected static int HISTORY_COUNT;
    protected int _pressureHigh;
    protected int _pressureMiddle;
    protected int _pressureLow;
    protected int _i0;
    protected Int32[] _pressureHist;
    protected int _pressureTotal;
    protected int _pressureAvg;
    internal static long TotalPhysical { get; }
    internal static long TotalVirtual { get; }
    internal int PressureLast { get; }
    internal int PressureAvg { get; }
    internal int PressureHigh { get; }
    internal int PressureLow { get; }
    internal int PressureMiddle { get; }
    private static CacheMemoryPressure();
    internal static long get_TotalPhysical();
    internal static long get_TotalVirtual();
    protected abstract virtual int GetCurrentPressure();
    internal abstract virtual int GetPercentToTrim(DateTime lastTrimTime, int lastTrimPercent);
    internal virtual void ReadConfig(CacheSection cacheSection);
    protected void InitHistory();
    internal void Update();
    internal int get_PressureLast();
    internal int get_PressureAvg();
    internal int get_PressureHigh();
    internal int get_PressureLow();
    internal int get_PressureMiddle();
    internal bool IsAboveHighPressure();
    internal bool IsAboveMediumPressure();
}
internal class System.Web.Caching.CacheMemorySizePressure : CacheMemoryPressure {
    internal static long EffectiveProcessMemoryLimit { get; }
    internal static long WorkerProcessMemoryLimit { get; }
    internal long MemoryLimit { get; }
    internal static int PollInterval { get; }
    internal CacheMemorySizePressure(SRefMultiple sizedRef);
    private static CacheMemorySizePressure();
    internal static long get_EffectiveProcessMemoryLimit();
    internal static long get_WorkerProcessMemoryLimit();
    internal void Dispose();
    internal virtual void ReadConfig(CacheSection cacheSection);
    internal long get_MemoryLimit();
    internal static int get_PollInterval();
    protected virtual int GetCurrentPressure();
    internal virtual int GetPercentToTrim(DateTime lastTrimTime, int lastTrimPercent);
    internal bool HasLimit();
}
internal class System.Web.Caching.CacheMemoryStats : object {
    internal CacheMemorySizePressure CacheSizePressure { get; }
    internal CacheMemoryTotalMemoryPressure TotalMemoryPressure { get; }
    internal CacheMemoryStats(SRefMultiple sizedRef);
    internal CacheMemorySizePressure get_CacheSizePressure();
    internal CacheMemoryTotalMemoryPressure get_TotalMemoryPressure();
    internal bool IsAboveHighPressure();
    internal bool IsAboveMediumPressure();
    internal void ReadConfig(CacheSection cacheSection);
    internal void Update();
    internal void Dispose();
    internal int GetPercentToTrim();
    internal void SetTrimStats(long trimDurationTicks, long totalCountBeforeTrim, long trimCount);
}
internal class System.Web.Caching.CacheMemoryTotalMemoryPressure : CacheMemoryPressure {
    internal long MemoryLimit { get; }
    private static CacheMemoryTotalMemoryPressure();
    internal virtual void ReadConfig(CacheSection cacheSection);
    protected virtual int GetCurrentPressure();
    internal virtual int GetPercentToTrim(DateTime lastTrimTime, int lastTrimPercent);
    internal long get_MemoryLimit();
}
internal class System.Web.Caching.CacheMultiple : CacheInternal {
    internal int PublicCount { get; }
    internal long TotalCount { get; }
    internal CacheMultiple(CacheCommon cacheCommon, int numSingleCaches);
    protected virtual void Dispose(bool disposing);
    internal virtual int get_PublicCount();
    internal virtual long get_TotalCount();
    internal virtual IDictionaryEnumerator CreateEnumerator();
    internal CacheSingle GetCacheSingle(int hashCode);
    internal virtual CacheEntry UpdateCache(CacheKey cacheKey, CacheEntry newEntry, bool replace, CacheItemRemovedReason removedReason, Object& valueOld);
    internal virtual long TrimIfNecessary(int percent);
    internal virtual void EnableExpirationTimer(bool enable);
}
internal class System.Web.Caching.CacheSingle : CacheInternal {
    internal int PublicCount { get; }
    internal long TotalCount { get; }
    internal CacheSingle(CacheCommon cacheCommon, CacheMultiple cacheMultiple, int iSubCache);
    private static CacheSingle();
    protected virtual void Dispose(bool disposing);
    internal void BlockInsertIfNeeded();
    internal void UnblockInsert();
    internal virtual int get_PublicCount();
    internal virtual long get_TotalCount();
    internal virtual IDictionaryEnumerator CreateEnumerator();
    internal virtual CacheEntry UpdateCache(CacheKey cacheKey, CacheEntry newEntry, bool replace, CacheItemRemovedReason removedReason, Object& valueOld);
    internal virtual long TrimIfNecessary(int percent);
    internal virtual void EnableExpirationTimer(bool enable);
}
internal class System.Web.Caching.CacheUsage : object {
    internal static TimeSpan NEWADD_INTERVAL;
    internal static TimeSpan CORRELATED_REQUEST_TIMEOUT;
    internal static TimeSpan MIN_LIFETIME_FOR_USAGE;
    internal UsageBucket[] _buckets;
    internal CacheSingle CacheSingle { get; }
    internal CacheUsage(CacheSingle cacheSingle);
    private static CacheUsage();
    internal CacheSingle get_CacheSingle();
    internal void Add(CacheEntry cacheEntry);
    internal void Remove(CacheEntry cacheEntry);
    internal void Update(CacheEntry cacheEntry);
    internal int FlushUnderUsedItems(int toFlush, Int32& publicEntriesFlushed, Int32& ocEntriesFlushed);
}
public class System.Web.Caching.DatabaseNotEnabledForNotificationException : SystemException {
    public DatabaseNotEnabledForNotificationException(string message);
    public DatabaseNotEnabledForNotificationException(string message, Exception innerException);
    internal DatabaseNotEnabledForNotificationException(SerializationInfo info, StreamingContext context);
}
internal class System.Web.Caching.DatabaseNotifState : object {
    internal string _database;
    internal string _connectionString;
    internal int _rqInCallback;
    internal bool _notifEnabled;
    internal bool _init;
    internal Timer _timer;
    internal Hashtable _tables;
    internal Exception _pollExpt;
    internal int _pollSqlError;
    internal SqlConnection _sqlConn;
    internal SqlCommand _sqlCmd;
    internal bool _poolConn;
    internal DateTime _utcTablesUpdated;
    internal int _refCount;
    internal DatabaseNotifState(string database, string connection, int polltime);
    public sealed virtual void Dispose();
    internal void GetConnection(SqlConnection& sqlConn, SqlCommand& sqlCmd);
    internal void ReleaseConnection(SqlConnection& sqlConn, SqlCommand& sqlCmd, bool error);
}
internal class System.Web.Caching.DependencyCacheEntry : object {
    internal string ProviderName { get; }
    internal string OutputCacheEntryKey { get; }
    internal string KernelCacheEntryKey { get; }
    internal DependencyCacheEntry(string oceKey, string kernelCacheEntryKey, string providerName);
    internal string get_ProviderName();
    internal string get_OutputCacheEntryKey();
    internal string get_KernelCacheEntryKey();
}
internal class System.Web.Caching.ExpiresBucket : object {
    internal static int NUM_ENTRIES;
    internal ExpiresBucket(CacheExpires cacheExpires, byte bucket, DateTime utcNow);
    private static ExpiresBucket();
    internal void AddCacheEntry(CacheEntry cacheEntry);
    internal void RemoveCacheEntry(CacheEntry cacheEntry);
    internal void UtcUpdateCacheEntry(CacheEntry cacheEntry, DateTime utcExpires);
    internal int FlushExpiredItems(DateTime utcNow, bool useInsertBlock);
}
internal class System.Web.Caching.ExpiresEntry : ValueType {
    internal DateTime _utcExpires;
    internal ExpiresEntryRef _next;
    internal int _cFree;
    internal CacheEntry _cacheEntry;
}
internal class System.Web.Caching.ExpiresEntryRef : ValueType {
    internal static ExpiresEntryRef INVALID;
    private static UInt32 ENTRY_MASK;
    private static UInt32 PAGE_MASK;
    private static int PAGE_SHIFT;
    private UInt32 _ref;
    internal int PageIndex { get; }
    internal int Index { get; }
    internal bool IsInvalid { get; }
    internal ExpiresEntryRef(int pageIndex, int entryIndex);
    private static ExpiresEntryRef();
    public virtual bool Equals(object value);
    public static bool op_Inequality(ExpiresEntryRef r1, ExpiresEntryRef r2);
    public static bool op_Equality(ExpiresEntryRef r1, ExpiresEntryRef r2);
    public virtual int GetHashCode();
    internal int get_PageIndex();
    internal int get_Index();
    internal bool get_IsInvalid();
}
internal class System.Web.Caching.ExpiresPage : ValueType {
    internal ExpiresEntry[] _entries;
    internal int _pageNext;
    internal int _pagePrev;
}
internal class System.Web.Caching.ExpiresPageList : ValueType {
    internal int _head;
    internal int _tail;
}
public class System.Web.Caching.FileResponseElement : ResponseElement {
    public string Path { get; }
    public long Offset { get; }
    public long Length { get; }
    public FileResponseElement(string path, long offset, long length);
    public string get_Path();
    public long get_Offset();
    public long get_Length();
}
public class System.Web.Caching.HeaderElement : object {
    public string Name { get; }
    public string Value { get; }
    public HeaderElement(string name, string value);
    public string get_Name();
    public string get_Value();
}
internal interface System.Web.Caching.ICacheDependencyChanged {
    public abstract virtual void DependencyChanged(object sender, EventArgs e);
}
public interface System.Web.Caching.IOutputCacheEntry {
    public List`1<HeaderElement> HeaderElements { get; public set; }
    public List`1<ResponseElement> ResponseElements { get; public set; }
    public abstract virtual List`1<HeaderElement> get_HeaderElements();
    public abstract virtual void set_HeaderElements(List`1<HeaderElement> value);
    public abstract virtual List`1<ResponseElement> get_ResponseElements();
    public abstract virtual void set_ResponseElements(List`1<ResponseElement> value);
}
public class System.Web.Caching.MemoryResponseElement : ResponseElement {
    public Byte[] Buffer { get; }
    public long Length { get; }
    public MemoryResponseElement(Byte[] buffer, long length);
    public Byte[] get_Buffer();
    public long get_Length();
}
public static class System.Web.Caching.OutputCache : object {
    internal static string ASPNET_INTERNAL_PROVIDER_NAME;
    public static string DefaultProviderName { get; }
    public static OutputCacheProviderCollection Providers { get; }
    internal static bool InUse { get; }
    private static OutputCache();
    public static string get_DefaultProviderName();
    public static OutputCacheProviderCollection get_Providers();
    internal static bool get_InUse();
    internal static void ThrowIfProviderNotFound(string providerName);
    internal static bool HasDependencyChanged(bool isFragment, string depKey, String[] fileDeps, string kernelKey, string oceKey, string providerName);
    public static void Serialize(Stream stream, object data);
    public static object Deserialize(Stream stream);
    internal static object Get(string key);
    internal static object GetFragment(string key, string providerName);
    internal static void Remove(string key, HttpContext context);
    internal static void RemoveFromProvider(string key, string providerName);
    internal static void RemoveFragment(string key, string providerName);
    internal static void InsertFragment(string cachedVaryKey, ControlCachedVary cachedVary, string fragmentKey, PartialCachingCacheEntry fragment, CacheDependency dependencies, DateTime absExp, TimeSpan slidingExp, string providerName);
    internal static void InsertResponse(string cachedVaryKey, CachedVary cachedVary, string rawResponseKey, CachedRawResponse rawResponse, CacheDependency dependencies, DateTime absExp, TimeSpan slidingExp);
}
internal class System.Web.Caching.OutputCacheEntry : object {
    internal Guid CachedVaryId { get; }
    internal HttpCachePolicySettings Settings { get; }
    internal string KernelCacheUrl { get; }
    internal string DependenciesKey { get; }
    internal String[] Dependencies { get; }
    internal int StatusCode { get; }
    internal string StatusDescription { get; }
    public List`1<HeaderElement> HeaderElements { get; public set; }
    public List`1<ResponseElement> ResponseElements { get; public set; }
    internal OutputCacheEntry(Guid cachedVaryId, HttpCachePolicySettings settings, string kernelCacheUrl, string dependenciesKey, String[] dependencies, int statusCode, string statusDescription, List`1<HeaderElement> headerElements, List`1<ResponseElement> responseElements);
    internal Guid get_CachedVaryId();
    internal HttpCachePolicySettings get_Settings();
    internal string get_KernelCacheUrl();
    internal string get_DependenciesKey();
    internal String[] get_Dependencies();
    internal int get_StatusCode();
    internal string get_StatusDescription();
    public sealed virtual List`1<HeaderElement> get_HeaderElements();
    public sealed virtual void set_HeaderElements(List`1<HeaderElement> value);
    public sealed virtual List`1<ResponseElement> get_ResponseElements();
    public sealed virtual void set_ResponseElements(List`1<ResponseElement> value);
}
internal class System.Web.Caching.OutputCacheModule : object {
    internal static string TAG_OUTPUTCACHE;
    internal static Char[] s_fieldSeparators;
    private static OutputCacheModule();
    internal static string CreateOutputCachedItemKey(string path, HttpVerb verb, HttpContext context, CachedVary cachedVary);
    private sealed virtual override void System.Web.IHttpModule.Init(HttpApplication app);
    private sealed virtual override void System.Web.IHttpModule.Dispose();
    internal void OnEnter(object source, EventArgs eventArgs);
    internal void OnLeave(object source, EventArgs eventArgs);
}
public abstract class System.Web.Caching.OutputCacheProvider : ProviderBase {
    public abstract virtual object Get(string key);
    public abstract virtual object Add(string key, object entry, DateTime utcExpiry);
    public abstract virtual void Set(string key, object entry, DateTime utcExpiry);
    public abstract virtual void Remove(string key);
}
public abstract class System.Web.Caching.OutputCacheProviderAsync : OutputCacheProvider {
    public abstract virtual Task`1<object> GetAsync(string key);
    public abstract virtual Task`1<object> AddAsync(string key, object entry, DateTime utcExpiry);
    public abstract virtual Task SetAsync(string key, object entry, DateTime utcExpiry);
    public abstract virtual Task RemoveAsync(string key);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Caching.OutputCacheProviderCollection : ProviderCollection {
    public OutputCacheProvider Item { get; }
    public OutputCacheProvider get_Item(string name);
    public virtual void Add(ProviderBase provider);
    public void CopyTo(OutputCacheProvider[] array, int index);
}
public static class System.Web.Caching.OutputCacheUtility : object {
    public static string SetupKernelCaching(string originalCacheUrl, HttpResponse response);
    public static CacheDependency CreateCacheDependency(HttpResponse response);
    public static ArrayList GetContentBuffers(HttpResponse response);
    public static void SetContentBuffers(HttpResponse response, ArrayList buffers);
    public static IEnumerable`1<KeyValuePair`2<HttpCacheValidateHandler, object>> GetValidationCallbacks(HttpResponse response);
}
public abstract class System.Web.Caching.ResponseElement : object {
}
public class System.Web.Caching.SqlCacheDependency : CacheDependency {
    internal static bool s_hasSqlClientPermission;
    internal static bool s_hasSqlClientPermissionInited;
    internal static string SQL9_OUTPUT_CACHE_DEPENDENCY_COOKIE;
    public SqlCacheDependency(string databaseEntryName, string tableName);
    public SqlCacheDependency(SqlCommand sqlCmd);
    protected virtual void DependencyDispose();
    public virtual string GetUniqueID();
    internal static void ValidateOutputCacheDependencyString(string depString, bool page);
    public static CacheDependency CreateOutputCacheDependency(string dependency);
    internal static ArrayList ParseSql7OutputCacheDependency(string outputCacheString);
}
public static class System.Web.Caching.SqlCacheDependencyAdmin : object {
    internal static string SQL_CREATE_ENABLE_DATABASE_SP;
    internal static string SQL_DISABLE_DATABASE;
    internal static string DROP_MEMBERS;
    internal static string SQL_REGISTER_TABLE_SP;
    internal static string SQL_REGISTER_TABLE_SP_DBO;
    internal static string SQL_UNREGISTER_TABLE_SP;
    internal static string SQL_UNREGISTER_TABLE_SP_DBO;
    internal static string SQL_TRIGGER_NAME_POSTFIX;
    internal static string SQL_QUERY_REGISTERED_TABLES_SP;
    internal static string SQL_QUERY_REGISTERED_TABLES_SP_DBO;
    internal static string SQL_UPDATE_CHANGE_ID_SP;
    internal static void SetupNotifications(int flags, string table, string connectionString);
    public static void EnableNotifications(string connectionString);
    public static void DisableNotifications(string connectionString);
    public static void EnableTableForNotifications(string connectionString, string table);
    public static void EnableTableForNotifications(string connectionString, String[] tables);
    public static void DisableTableForNotifications(string connectionString, string table);
    public static void DisableTableForNotifications(string connectionString, String[] tables);
    public static String[] GetTablesEnabledForNotifications(string connectionString);
}
internal static class System.Web.Caching.SqlCacheDependencyManager : object {
    internal static bool ENABLED_DEFAULT;
    internal static int POLLTIME_DEFAULT;
    internal static int TABLE_NAME_LENGTH;
    internal static int SQL_EXCEPTION_SP_NOT_FOUND;
    internal static int SQL_EXCEPTION_PERMISSION_DENIED_ON_OBJECT;
    internal static int SQL_EXCEPTION_PERMISSION_DENIED_ON_DATABASE;
    internal static int SQL_EXCEPTION_PERMISSION_DENIED_ON_USER;
    internal static int SQL_EXCEPTION_NO_GRANT_PERMISSION;
    internal static int SQL_EXCEPTION_ADHOC;
    internal static string SQL_CUSTOM_ERROR_TABLE_NOT_FOUND;
    internal static string SQL_NOTIF_TABLE;
    internal static string SQL_POLLING_SP;
    internal static string SQL_POLLING_SP_DBO;
    internal static TimeSpan OneSec;
    internal static Hashtable s_DatabaseNotifStates;
    private static SqlCacheDependencyManager();
    internal static string GetMoniterKey(string database, string table);
    internal static void Dispose(int waitTimeoutMs);
    internal static SqlCacheDependencyDatabase GetDatabaseConfig(string database);
    internal static void InitPolling(string database);
    internal static void PollDatabaseForChanges(DatabaseNotifState dbState, bool fromTimer);
    internal static void EnsureTableIsRegisteredAndPolled(string database, string table);
    internal static void UpdateDatabaseNotifState(string database);
    internal static void UpdateAllDatabaseNotifState();
    internal static DatabaseNotifState AddRef(string database);
    internal static void Release(DatabaseNotifState dbState);
}
internal class System.Web.Caching.SRef : object {
    internal long ApproximateSize { get; }
    internal SRef(object target);
    private static SRef();
    internal long get_ApproximateSize();
    internal void Dispose();
}
internal class System.Web.Caching.SRefMultiple : object {
    internal long ApproximateSize { get; }
    internal void AddSRefTarget(object o);
    internal long get_ApproximateSize();
    internal void Dispose();
}
public class System.Web.Caching.SubstitutionResponseElement : ResponseElement {
    public HttpResponseSubstitutionCallback Callback { get; }
    public SubstitutionResponseElement(HttpResponseSubstitutionCallback callback);
    public HttpResponseSubstitutionCallback get_Callback();
}
public class System.Web.Caching.TableNotEnabledForNotificationException : SystemException {
    public TableNotEnabledForNotificationException(string message);
    public TableNotEnabledForNotificationException(string message, Exception innerException);
    internal TableNotEnabledForNotificationException(SerializationInfo info, StreamingContext context);
}
internal class System.Web.Caching.UsageBucket : object {
    internal static int NUM_ENTRIES;
    internal UsageBucket(CacheUsage cacheUsage, byte bucket);
    internal void AddCacheEntry(CacheEntry cacheEntry);
    internal void RemoveCacheEntry(CacheEntry cacheEntry);
    internal void UpdateCacheEntry(CacheEntry cacheEntry);
    internal int FlushUnderUsedItems(int maxFlush, bool force, Int32& publicEntriesFlushed, Int32& ocEntriesFlushed);
}
internal class System.Web.Caching.UsageEntry : ValueType {
    internal UsageEntryLink _ref1;
    internal int _cFree;
    internal UsageEntryLink _ref2;
    internal DateTime _utcDate;
    internal CacheEntry _cacheEntry;
}
internal class System.Web.Caching.UsageEntryLink : ValueType {
    internal UsageEntryRef _next;
    internal UsageEntryRef _prev;
}
internal class System.Web.Caching.UsageEntryRef : ValueType {
    internal static UsageEntryRef INVALID;
    private static UInt32 ENTRY_MASK;
    private static UInt32 PAGE_MASK;
    private static int PAGE_SHIFT;
    private UInt32 _ref;
    internal int PageIndex { get; }
    internal int Ref1Index { get; }
    internal int Ref2Index { get; }
    internal bool IsRef1 { get; }
    internal bool IsRef2 { get; }
    internal bool IsInvalid { get; }
    internal UsageEntryRef(int pageIndex, int entryIndex);
    private static UsageEntryRef();
    public virtual bool Equals(object value);
    public static bool op_Equality(UsageEntryRef r1, UsageEntryRef r2);
    public static bool op_Inequality(UsageEntryRef r1, UsageEntryRef r2);
    public virtual int GetHashCode();
    internal int get_PageIndex();
    internal int get_Ref1Index();
    internal int get_Ref2Index();
    internal bool get_IsRef1();
    internal bool get_IsRef2();
    internal bool get_IsInvalid();
}
internal class System.Web.Caching.UsagePage : ValueType {
    internal UsageEntry[] _entries;
    internal int _pageNext;
    internal int _pagePrev;
}
internal class System.Web.Caching.UsagePageList : ValueType {
    internal int _head;
    internal int _tail;
}
internal class System.Web.CharBufferAllocator : BufferAllocator {
    public int BufferSize { get; }
    internal CharBufferAllocator(int bufferSize, int maxFree);
    protected virtual object AllocBuffer();
    public virtual int get_BufferSize();
}
internal class System.Web.ClientImpersonationContext : ImpersonationContext {
    internal ClientImpersonationContext(HttpContext context);
    internal ClientImpersonationContext(HttpContext context, bool throwOnError);
}
internal class System.Web.Compilation.ApplicationBrowserCapabilitiesBuildProvider : BuildProvider {
    internal void AddFile(string virtualPath);
    public virtual void GenerateCode(AssemblyBuilder assemblyBuilder);
}
internal class System.Web.Compilation.ApplicationBrowserCapabilitiesCodeGenerator : BrowserCapabilitiesCodeGenerator {
    internal static string FactoryTypeName;
    internal bool GenerateOverrides { get; }
    internal string TypeName { get; }
    internal ApplicationBrowserCapabilitiesCodeGenerator(BuildProvider buildProvider);
    internal virtual bool get_GenerateOverrides();
    internal virtual string get_TypeName();
    public virtual void Create();
    internal virtual void HandleUnRecognizedParentElement(BrowserDefinition bd, bool isDefault);
    internal void GenerateCode(AssemblyBuilder assemblyBuilder);
    internal virtual void ProcessBrowserNode(XmlNode node, BrowserTree browserTree);
}
internal class System.Web.Compilation.ApplicationBuildProvider : BaseTemplateBuildProvider {
    internal static BuildResultCompiledGlobalAsaxType GetGlobalAsaxBuildResult(bool isPrecompiledApp);
    protected virtual TemplateParser CreateParser();
    internal virtual BaseCodeDomTreeGenerator CreateCodeDomTreeGenerator(TemplateParser parser);
    internal virtual BuildResultCompiledType CreateBuildResult(Type t);
}
internal class System.Web.Compilation.ApplicationFileCodeDomTreeGenerator : BaseCodeDomTreeGenerator {
    protected ApplicationFileParser _appParser;
    protected bool IsGlobalAsaxGenerator { get; }
    internal ApplicationFileCodeDomTreeGenerator(ApplicationFileParser appParser);
    protected virtual bool get_IsGlobalAsaxGenerator();
}
[ExpressionPrefixAttribute("AppSettings")]
[ExpressionEditorAttribute("System.Web.UI.Design.AppSettingsExpressionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.Compilation.AppSettingsExpressionBuilder : ExpressionBuilder {
    public bool SupportsEvaluate { get; }
    public virtual bool get_SupportsEvaluate();
    public virtual CodeExpression GetCodeExpression(BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context);
    public virtual object EvaluateExpression(object target, BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context);
    public static object GetAppSetting(string key);
    public static object GetAppSetting(string key, Type targetType, string propertyName);
}
public class System.Web.Compilation.AssemblyBuilder : object {
    internal CodeDomProvider _codeProvider;
    internal ICollection BuildProviders { get; }
    internal Type CodeDomProviderType { get; }
    internal StringResourceBuilder StringResourceBuilder { get; }
    internal string CultureName { get; internal set; }
    internal bool IsBatchFull { get; }
    public CodeDomProvider CodeDomProvider { get; }
    internal AssemblyBuilder(CompilationSection compConfig, ICollection referencedAssemblies, CompilerType compilerType, string outputAssemblyName);
    private static AssemblyBuilder();
    internal ICollection get_BuildProviders();
    internal Type get_CodeDomProviderType();
    internal StringResourceBuilder get_StringResourceBuilder();
    internal string get_CultureName();
    internal void set_CultureName(string value);
    internal bool ContainsTypeNames(ICollection typeNames);
    internal void AddTypeNames(ICollection typeNames);
    public void AddAssemblyReference(Assembly a);
    internal void AddAssemblyReference(Assembly a, CodeCompileUnit ccu);
    internal virtual TextWriter CreateCodeFile(BuildProvider buildProvider, String& filename);
    public TextWriter CreateCodeFile(BuildProvider buildProvider);
    internal bool get_IsBatchFull();
    public void AddCodeCompileUnit(BuildProvider buildProvider, CodeCompileUnit compileUnit);
    public void GenerateTypeFactory(string typeName);
    public Stream CreateEmbeddedResource(BuildProvider buildProvider, string name);
    public CodeDomProvider get_CodeDomProvider();
    public string GetTempFilePhysicalPath(string extension);
    internal string GetTempFilePhysicalPathWithAssert(string extension);
    internal virtual void AddBuildProvider(BuildProvider buildProvider);
    internal CompilerParameters GetCompilerParameters();
    internal static void FixUpCompilerParameters(CompilationSection compilationSection, Type codeDomProviderType, CompilerParameters compilParams);
    internal static void FixTreatWarningsAsErrors(Type codeDomProviderType, CompilerParameters compilParams);
    internal CompilerResults Compile();
    internal string GetGeneratedSourceFromBuildProvider(BuildProvider buildProvider);
    internal BuildProvider GetBuildProviderFromLinePragma(string linePragma);
}
internal class System.Web.Compilation.AssemblyReferenceInfo : object {
    internal Assembly Assembly;
    internal int ReferenceIndex;
    internal AssemblyReferenceInfo(int referenceIndex);
}
internal class System.Web.Compilation.AssemblyResolutionResult : object {
    internal ICollection`1<string> ResolvedFiles { get; internal set; }
    internal ICollection`1<string> ResolvedFilesWithWarnings { get; internal set; }
    internal ICollection`1<Assembly> UnresolvedAssemblies { get; internal set; }
    internal ICollection`1<BuildErrorEventArgs> Errors { get; internal set; }
    internal ICollection`1<BuildWarningEventArgs> Warnings { get; internal set; }
    [CompilerGeneratedAttribute]
internal ICollection`1<string> get_ResolvedFiles();
    [CompilerGeneratedAttribute]
internal void set_ResolvedFiles(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
internal ICollection`1<string> get_ResolvedFilesWithWarnings();
    [CompilerGeneratedAttribute]
internal void set_ResolvedFilesWithWarnings(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
internal ICollection`1<Assembly> get_UnresolvedAssemblies();
    [CompilerGeneratedAttribute]
internal void set_UnresolvedAssemblies(ICollection`1<Assembly> value);
    [CompilerGeneratedAttribute]
internal ICollection`1<BuildErrorEventArgs> get_Errors();
    [CompilerGeneratedAttribute]
internal void set_Errors(ICollection`1<BuildErrorEventArgs> value);
    [CompilerGeneratedAttribute]
internal ICollection`1<BuildWarningEventArgs> get_Warnings();
    [CompilerGeneratedAttribute]
internal void set_Warnings(ICollection`1<BuildWarningEventArgs> value);
}
internal class System.Web.Compilation.AssemblyResolver : object {
    private static AssemblyResolver();
    internal static ReferenceAssemblyType GetPathToReferenceAssembly(Assembly a, String& path);
    internal static ReferenceAssemblyType GetPathToReferenceAssembly(Assembly a, String& path, ICollection`1<BuildErrorEventArgs> errors, ICollection`1<BuildWarningEventArgs> warnings);
    internal static ReferenceAssemblyType GetPathToReferenceAssembly(Assembly a, String& path, ICollection`1<BuildErrorEventArgs> errors, ICollection`1<BuildWarningEventArgs> warnings, bool checkDependencies);
}
internal abstract class System.Web.Compilation.BaseCodeDomTreeGenerator : object {
    protected CodeDomProvider _codeDomProvider;
    protected CodeCompileUnit _codeCompileUnit;
    protected CodeTypeDeclaration _sourceDataClass;
    protected CodeTypeDeclaration _intermediateClass;
    protected StringResourceBuilder _stringResourceBuilder;
    protected bool _usingVJSCompiler;
    protected CodeConstructor _ctor;
    protected CodeTypeReferenceExpression _classTypeExpr;
    internal static string defaultNamespace;
    internal static string internalAspNamespace;
    protected bool _designerMode;
    internal IDictionary LinePragmasTable { get; }
    protected CompilerParameters CompilParams { get; }
    protected bool NeedProfileProperty { get; }
    protected bool IsGlobalAsaxGenerator { get; }
    private static BaseCodeDomTreeGenerator();
    protected BaseCodeDomTreeGenerator(TemplateParser parser);
    internal void SetDesignerMode();
    internal IDictionary get_LinePragmasTable();
    internal CodeCompileUnit GetCodeDomTree(CodeDomProvider codeDomProvider, StringResourceBuilder stringResourceBuilder, VirtualPath virtualPath);
    protected CompilerParameters get_CompilParams();
    internal string GetInstantiatableFullTypeName();
    internal string GetIntermediateFullTypeName();
    protected void ApplyEditorBrowsableCustomAttribute(CodeTypeMember member);
    protected virtual string GetGeneratedClassName();
    internal static bool IsAspNetNamespace(string ns);
    protected virtual void GenerateClassAttributes();
    protected virtual void GenerateInterfaces();
    protected virtual void BuildInitStatements(CodeStatementCollection trueStatements, CodeStatementCollection topLevelStatements);
    protected virtual void BuildDefaultConstructor();
    protected virtual void BuildMiscClassMembers();
    protected virtual bool get_NeedProfileProperty();
    protected void BuildAccessorProperty(string propName, CodeFieldReferenceExpression fieldRef, Type propType, MemberAttributes attributes, CodeAttributeDeclarationCollection attrDeclarations);
    protected void BuildFieldAndAccessorProperty(string propName, string fieldName, Type propType, bool fStatic, CodeAttributeDeclarationCollection attrDeclarations);
    protected virtual bool get_IsGlobalAsaxGenerator();
    protected CodeLinePragma CreateCodeLinePragma(ControlBuilder builder);
    internal static int GetGeneratedColumnOffset(CodeDomProvider codeDomProvider);
    protected CodeLinePragma CreateCodeLinePragma(string virtualPath, int lineNumber);
    protected CodeLinePragma CreateCodeLinePragma(string virtualPath, int lineNumber, int column, int generatedColumn, int codeLength);
    protected CodeLinePragma CreateCodeLinePragma(string virtualPath, int lineNumber, int column, int generatedColumn, int codeLength, bool isCodeNugget);
    internal static CodeLinePragma CreateCodeLinePragmaHelper(string virtualPath, int lineNumber);
    protected void AddDebuggerNonUserCodeAttribute(CodeMemberMethod method);
}
[BuildProviderAppliesToAttribute("4")]
internal abstract class System.Web.Compilation.BaseResourcesBuildProvider : BuildProvider {
    internal static string DefaultResourcesNamespace;
    internal void DontGenerateStronglyTypedClass();
    public virtual void GenerateCode(AssemblyBuilder assemblyBuilder);
    protected abstract virtual IResourceReader GetResourceReader(Stream inputStream);
}
internal abstract class System.Web.Compilation.BaseResXResourceProvider : object {
    public IResourceReader ResourceReader { get; }
    public virtual object GetObject(string resourceKey, CultureInfo culture);
    public virtual IResourceReader get_ResourceReader();
    protected abstract virtual ResourceManager CreateResourceManager();
}
internal abstract class System.Web.Compilation.BaseTemplateBuildProvider : InternalBuildProvider {
    internal TemplateParser Parser { get; }
    internal IAssemblyDependencyParser AssemblyDependencyParser { get; }
    public CompilerType CodeCompilerType { get; }
    public ICollection VirtualPathDependencies { get; }
    internal TemplateParser get_Parser();
    internal virtual IAssemblyDependencyParser get_AssemblyDependencyParser();
    protected abstract virtual TemplateParser CreateParser();
    internal abstract virtual BaseCodeDomTreeGenerator CreateCodeDomTreeGenerator(TemplateParser parser);
    protected internal virtual CodeCompileUnit GetCodeCompileUnit(IDictionary& linePragmasTable);
    public virtual CompilerType get_CodeCompilerType();
    internal virtual ICollection GetCompileWithDependencies();
    public virtual void GenerateCode(AssemblyBuilder assemblyBuilder);
    public virtual Type GetGeneratedType(CompilerResults results);
    internal Type GetGeneratedType(CompilerResults results, bool useDelayLoadTypeIfEnabled);
    internal virtual BuildResultCompiledType CreateBuildResult(Type t);
    public virtual ICollection get_VirtualPathDependencies();
    internal virtual ICollection GetGeneratedTypeNames();
}
internal abstract class System.Web.Compilation.BaseTemplateCodeDomTreeGenerator : BaseCodeDomTreeGenerator {
    protected static string buildMethodPrefix;
    protected static string extractTemplateValuesMethodPrefix;
    protected static string templateSourceDirectoryName;
    protected static string applyStyleSheetMethodName;
    protected static string pagePropertyName;
    internal static string skinIDPropertyName;
    internal static string tempObjectVariable;
    internal BaseTemplateCodeDomTreeGenerator(TemplateParser parser);
    private static BaseTemplateCodeDomTreeGenerator();
    internal virtual CodeExpression BuildPagePropertyReferenceExpression();
    protected CodeMemberMethod BuildBuildMethod(ControlBuilder builder, bool fTemplate, bool fInTemplate, bool topLevelControlInTemplate, PropertyEntry pse, bool fControlSkin);
    protected void BuildExtractMethod(ControlBuilder builder);
    protected CodeMemberMethod BuildPropertyBindingMethod(ControlBuilder builder, bool fControlSkin);
    internal void BuildRenderMethod(ControlBuilder builder, bool fTemplate);
    protected virtual void BuildSourceDataTreeFromBuilder(ControlBuilder builder, bool fInTemplate, bool topLevelControlInTemplate, PropertyEntry pse);
    internal virtual CodeExpression BuildStringPropertyExpression(PropertyEntry pse);
    protected virtual CodeAssignStatement BuildTemplatePropertyStatement(CodeExpression ctrlRefExpr);
    protected string GetMethodNameForBuilder(string prefix, ControlBuilder builder);
    protected virtual bool UseResourceLiteralString(string s);
}
internal static class System.Web.Compilation.BrowserCapabilitiesCompiler : object {
    internal static VirtualPath AppBrowsersVirtualDir;
    internal static Assembly AspBrowserCapsFactoryAssembly { get; internal set; }
    internal static BrowserCapabilitiesFactoryBase BrowserCapabilitiesFactory { get; }
    private static BrowserCapabilitiesCompiler();
    [CompilerGeneratedAttribute]
internal static Assembly get_AspBrowserCapsFactoryAssembly();
    [CompilerGeneratedAttribute]
internal static void set_AspBrowserCapsFactoryAssembly(Assembly value);
    internal static BrowserCapabilitiesFactoryBase get_BrowserCapabilitiesFactory();
    internal static Type GetBrowserCapabilitiesFactoryBaseType();
    internal static Type GetBrowserCapabilitiesType();
}
public class System.Web.Compilation.BuildDependencySet : object {
    public string HashCode { get; }
    public IEnumerable VirtualPaths { get; }
    internal BuildDependencySet(BuildResult result);
    public string get_HashCode();
    public IEnumerable get_VirtualPaths();
}
public class System.Web.Compilation.BuildManager : object {
    internal static string AssemblyNamePrefix;
    internal static string WebAssemblyNamePrefix;
    internal static string AppThemeAssemblyNamePrefix;
    internal static string GlobalThemeAssemblyNamePrefix;
    internal static string AppBrowserCapAssemblyNamePrefix;
    internal static string SubCodeDirectoryAssemblyNamePrefix;
    internal static string GlobalAsaxAssemblyName;
    internal static string UpdatableInheritReplacementToken;
    internal static BuildManager TheBuildManager { get; }
    internal static bool OptimizeCompilations { get; }
    internal static string WebHashFilePath { get; }
    internal static CompilationStage CompilationStage { get; }
    internal static VirtualPath ScriptVirtualDir { get; }
    internal static VirtualPath GlobalAsaxVirtualPath { get; }
    internal static ClientBuildManagerCallback CBMCallback { get; }
    internal static Dictionary`2<string, string> GenerateFileTable { get; }
    public static IList CodeAssemblies { get; }
    internal static Assembly AppResourcesAssembly { get; }
    internal static bool ThrowOnFirstParseError { get; internal set; }
    internal static bool PerformingPrecompilation { get; internal set; }
    internal static bool SkipTopLevelCompilationExceptions { get; internal set; }
    internal static PreStartInitStage PreStartInitStage { get; private set; }
    public static Nullable`1<bool> BatchCompilationEnabled { get; public set; }
    internal static bool PrecompilingForDeployment { get; }
    internal static bool PrecompilingForUpdatableDeployment { get; }
    internal static bool PrecompilingWithDebugInfo { get; }
    internal static bool PrecompilingWithCodeAnalysisSymbol { get; }
    internal static bool CompileWithAllowPartiallyTrustedCallersAttribute { get; }
    internal static bool CompileWithDelaySignAttribute { get; }
    internal static bool IgnoreBadImageFormatException { get; }
    internal static string StrongNameKeyFile { get; }
    internal static string StrongNameKeyContainer { get; }
    public static bool IsPrecompiledApp { get; }
    public static bool IsUpdatablePrecompiledApp { get; }
    public static FrameworkName TargetFramework { get; }
    internal static string CodegenResourceDir { get; }
    private static BuildManager();
    internal static BuildManager get_TheBuildManager();
    internal static bool get_OptimizeCompilations();
    internal static string get_WebHashFilePath();
    internal static CompilationStage get_CompilationStage();
    internal static VirtualPath get_ScriptVirtualDir();
    internal static VirtualPath get_GlobalAsaxVirtualPath();
    internal static bool InitializeBuildManager();
    internal static ClientBuildManagerCallback get_CBMCallback();
    internal static void ReportParseError(ParserError parseError);
    internal static Dictionary`2<string, string> get_GenerateFileTable();
    public static IList get_CodeAssemblies();
    internal static Assembly get_AppResourcesAssembly();
    internal static bool get_ThrowOnFirstParseError();
    internal static void set_ThrowOnFirstParseError(bool value);
    internal static bool get_PerformingPrecompilation();
    internal static void set_PerformingPrecompilation(bool value);
    internal static bool get_SkipTopLevelCompilationExceptions();
    internal static void set_SkipTopLevelCompilationExceptions(bool value);
    public static void AddReferencedAssembly(Assembly assembly);
    internal static ICollection GetReferencedAssemblies(CompilationSection compConfig, int removeIndex);
    internal static ICollection GetReferencedAssemblies(CompilationSection compConfig);
    public static ICollection GetReferencedAssemblies();
    public static void AddCompilationDependency(string dependency);
    internal static bool IsReservedAssemblyName(string assemblyName);
    internal static void ThrowIfPreAppStartNotRunning();
    [CompilerGeneratedAttribute]
internal static PreStartInitStage get_PreStartInitStage();
    [CompilerGeneratedAttribute]
private static void set_PreStartInitStage(PreStartInitStage value);
    internal static void ExecutePreAppStart();
    internal static ISet`1<string> GetPreStartInitAssembliesFromFile(string path);
    internal static void SavePreStartInitAssembliesToFile(string path, ISet`1<string> assemblies);
    internal static ICollection`1<Assembly> LoadCachedPreAppStartAssemblies(string preStartInitListPath);
    internal static void InvokePreStartInitMethodsCore(ICollection`1<MethodInfo> methods, Func`1<IDisposable> setHostingEnvironmentCultures);
    internal static ICollection`1<MethodInfo> GetPreStartInitMethodsFromAssemblyCollection(IEnumerable`1<Assembly> assemblies, bool buildingFromCache);
    internal static MethodInfo FindPreStartInitMethod(Type type, string methodName);
    internal static void CallAppInitializeMethod();
    internal void EnsureTopLevelFilesCompiled();
    internal static string GenerateRandomAssemblyName(string baseName);
    internal static string GenerateRandomAssemblyName(string baseName, bool topLevel);
    public static Type GetType(string typeName, bool throwOnError);
    public static Type GetType(string typeName, bool throwOnError, bool ignoreCase);
    internal static Type GetTypeFromCodeAssembly(string typeName, bool ignoreCase);
    internal static BuildProvider CreateBuildProvider(VirtualPath virtualPath, CompilationSection compConfig, ICollection referencedAssemblies, bool failIfUnknown);
    internal static BuildProvider CreateBuildProvider(VirtualPath virtualPath, BuildProviderAppliesTo neededFor, CompilationSection compConfig, ICollection referencedAssemblies, bool failIfUnknown);
    internal static void AddFolderLevelBuildProviders(BuildProviderSet buildProviders, VirtualPath virtualPath, FolderLevelBuildProviderAppliesTo appliesTo, CompilationSection compConfig, ICollection referencedAssemblies);
    internal static void ValidateCodeFileVirtualPath(VirtualPath virtualPath);
    internal static long GetBuildResultHashCodeIfCached(HttpContext context, string virtualPath);
    internal static BuildResult GetVPathBuildResult(VirtualPath virtualPath);
    internal static BuildResult GetVPathBuildResult(HttpContext context, VirtualPath virtualPath);
    internal static BuildResult GetVPathBuildResult(HttpContext context, VirtualPath virtualPath, bool noBuild, bool allowCrossApp);
    internal static BuildResult GetVPathBuildResult(HttpContext context, VirtualPath virtualPath, bool noBuild, bool allowCrossApp, bool allowBuildInPrecompile, bool ensureIsUpToDate);
    internal static BuildResult GetVPathBuildResultWithAssert(HttpContext context, VirtualPath virtualPath, bool noBuild, bool allowCrossApp, bool allowBuildInPrecompile);
    internal static BuildResult GetVPathBuildResultWithAssert(HttpContext context, VirtualPath virtualPath, bool noBuild, bool allowCrossApp, bool allowBuildInPrecompile, bool throwIfNotFound, bool ensureIsUpToDate);
    internal static BuildResult GetVPathBuildResultWithNoAssert(HttpContext context, VirtualPath virtualPath, bool noBuild, bool allowCrossApp, bool allowBuildInPrecompile);
    internal static BuildResult GetVPathBuildResultWithNoAssert(HttpContext context, VirtualPath virtualPath, bool noBuild, bool allowCrossApp, bool allowBuildInPrecompile, bool throwIfNotFound, bool ensureIsUpToDate);
    internal static Assembly GetLocalResourcesAssembly(VirtualPath virtualDir);
    internal static string GetLocalResourcesAssemblyName(VirtualPath virtualDir);
    public static Nullable`1<bool> get_BatchCompilationEnabled();
    public static void set_BatchCompilationEnabled(Nullable`1<bool> value);
    public static Type GetGlobalAsaxType();
    internal static BuildResultCompiledGlobalAsaxType GetGlobalAsaxBuildResult();
    internal String[] GetCodeDirectories();
    internal void GetCodeDirectoryInformation(VirtualPath virtualCodeDir, Type& codeDomProviderType, CompilerParameters& compilerParameters, String& generatedFilesDir);
    internal static Type GetProfileType();
    public static ICollection GetVirtualPathDependencies(string virtualPath);
    internal static string GetCacheKeyFromVirtualPath(VirtualPath virtualPath);
    internal static BuildResult GetVPathBuildResultFromCache(VirtualPath virtualPath);
    internal static BuildResult GetBuildResultFromCache(string cacheKey);
    internal static BuildResult GetBuildResultFromCache(string cacheKey, VirtualPath virtualPath);
    internal static bool CacheVPathBuildResult(VirtualPath virtualPath, BuildResult result, DateTime utcStart);
    internal static bool CacheBuildResult(string cacheKey, BuildResult result, DateTime utcStart);
    internal void SetPrecompilationInfo(HostingEnvironmentParameters hostingParameters);
    internal void PrecompileApp(ClientBuildManagerCallback callback, IEnumerable`1<string> excludedVirtualPaths);
    internal static bool get_PrecompilingForDeployment();
    internal static bool get_PrecompilingForUpdatableDeployment();
    internal static bool get_PrecompilingWithDebugInfo();
    internal static bool get_PrecompilingWithCodeAnalysisSymbol();
    internal static bool get_CompileWithAllowPartiallyTrustedCallersAttribute();
    internal static bool get_CompileWithDelaySignAttribute();
    internal static bool get_IgnoreBadImageFormatException();
    internal static string get_StrongNameKeyFile();
    internal static string get_StrongNameKeyContainer();
    internal static TextWriter GetUpdatableDeploymentTargetWriter(VirtualPath virtualPath, Encoding fileEncoding);
    public static bool get_IsPrecompiledApp();
    public static bool get_IsUpdatablePrecompiledApp();
    internal static void ReportDirectoryCompilationProgress(VirtualPath virtualDir);
    public static Type GetCompiledType(string virtualPath);
    internal static Type GetCompiledType(VirtualPath virtualPath, ClientBuildManagerCallback callback);
    internal static Type GetCompiledType(VirtualPath virtualPath);
    public static object CreateInstanceFromVirtualPath(string virtualPath, Type requiredBaseType);
    internal static object CreateInstanceFromVirtualPath(VirtualPath virtualPath, Type requiredBaseType, HttpContext context, bool allowCrossApp);
    public static IWebObjectFactory GetObjectFactory(string virtualPath, bool throwIfNotFound);
    public static Assembly GetCompiledAssembly(string virtualPath);
    public static string GetCompiledCustomString(string virtualPath);
    public static BuildDependencySet GetCachedBuildDependencySet(HttpContext context, string virtualPath);
    public static BuildDependencySet GetCachedBuildDependencySet(HttpContext context, string virtualPath, bool ensureIsUpToDate);
    public static FrameworkName get_TargetFramework();
    internal static string GetNormalizedCodeAssemblyName(string assemblyName);
    internal static string GetNormalizedTypeName(Type t);
    internal static string get_CodegenResourceDir();
    public static Stream CreateCachedFile(string fileName);
    public static Stream ReadCachedFile(string fileName);
}
internal class System.Web.Compilation.BuildManagerHost : MarshalByRefObject {
    internal static bool InClientBuildManager { get; internal set; }
    internal static bool SupportsMultiTargeting { get; internal set; }
    internal IApplicationHost ApplicationHost { get; }
    internal string CodeGenDir { get; }
    internal Exception InitializationException { get; }
    internal static bool get_InClientBuildManager();
    internal static void set_InClientBuildManager(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_SupportsMultiTargeting();
    [CompilerGeneratedAttribute]
internal static void set_SupportsMultiTargeting(bool value);
    private sealed virtual override void System.Web.Hosting.IRegisteredObject.Stop(bool immediate);
    internal IApplicationHost get_ApplicationHost();
    internal string get_CodeGenDir();
    internal void RegisterAssembly(string assemblyName, string assemblyLocation);
    internal void AddPendingCall();
    internal void RemovePendingCall();
    internal void CompileApplicationDependencies();
    internal void PrecompileApp(ClientBuildManagerCallback callback, List`1<string> excludedVirtualPaths);
    internal IDictionary GetBrowserDefinitions();
    internal String[] GetVirtualCodeDirectories();
    internal void GetCodeDirectoryInformation(VirtualPath virtualCodeDir, Type& codeDomProviderType, CompilerParameters& compParams, String& generatedFilesDir);
    internal void GetCompilerParams(VirtualPath virtualPath, Type& codeDomProviderType, CompilerParameters& compParams);
    internal String[] GetCompiledTypeAndAssemblyName(VirtualPath virtualPath, ClientBuildManagerCallback callback);
    internal string GetGeneratedSourceFile(VirtualPath virtualPath);
    internal string GetGeneratedFileVirtualPath(string filePath);
    internal String[] GetTopLevelAssemblyReferences(VirtualPath virtualPath);
    internal string GenerateCode(VirtualPath virtualPath, string virtualFileString, IDictionary& linePragmasTable);
    internal CodeCompileUnit GenerateCodeCompileUnit(VirtualPath virtualPath, string virtualFileString, Type& codeDomProviderType, CompilerParameters& compilerParameters, IDictionary& linePragmasTable);
    internal bool IsCodeAssembly(string assemblyName);
    public virtual object InitializeLifetimeService();
    internal void Configure(ClientBuildManager client);
    internal Exception get_InitializationException();
    internal bool UnloadAppDomain();
}
public class System.Web.Compilation.BuildManagerHostUnloadEventArgs : EventArgs {
    public ApplicationShutdownReason Reason { get; }
    public BuildManagerHostUnloadEventArgs(ApplicationShutdownReason reason);
    public ApplicationShutdownReason get_Reason();
}
public class System.Web.Compilation.BuildManagerHostUnloadEventHandler : MulticastDelegate {
    public BuildManagerHostUnloadEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BuildManagerHostUnloadEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BuildManagerHostUnloadEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class System.Web.Compilation.BuildProvider : object {
    internal SimpleBitVector32 flags;
    internal static int isDependedOn;
    internal static int noBuildResult;
    internal static int ignoreParseErrors;
    internal static int ignoreControlProperties;
    internal static int dontThrowOnFirstParseError;
    internal static int contributedCode;
    public CompilerType CodeCompilerType { get; }
    public ICollection VirtualPathDependencies { get; }
    protected internal string VirtualPath { get; }
    internal VirtualPath VirtualPathObject { get; }
    protected ICollection ReferencedAssemblies { get; }
    internal BuildProviderSet BuildProviderDependencies { get; }
    internal bool IsDependedOn { get; }
    internal bool IgnoreParseErrors { get; internal set; }
    internal bool IgnoreControlProperties { get; internal set; }
    internal bool ThrowOnFirstParseError { get; internal set; }
    internal IAssemblyDependencyParser AssemblyDependencyParser { get; }
    private static BuildProvider();
    public virtual CompilerType get_CodeCompilerType();
    public virtual void GenerateCode(AssemblyBuilder assemblyBuilder);
    public virtual Type GetGeneratedType(CompilerResults results);
    public virtual string GetCustomString(CompilerResults results);
    public virtual BuildProviderResultFlags GetResultFlags(CompilerResults results);
    public virtual void ProcessCompileErrors(CompilerResults results);
    internal virtual ICollection GetBuildResultVirtualPathDependencies();
    public virtual ICollection get_VirtualPathDependencies();
    protected internal string get_VirtualPath();
    internal VirtualPath get_VirtualPathObject();
    protected Stream OpenStream();
    protected Stream OpenStream(string virtualPath);
    internal Stream OpenStream(VirtualPath virtualPath);
    protected TextReader OpenReader();
    protected TextReader OpenReader(string virtualPath);
    internal TextReader OpenReader(VirtualPath virtualPath);
    public static void RegisterBuildProvider(string extension, Type providerType);
    internal static BuildProviderInfo GetBuildProviderInfo(CompilationSection config, string extension);
    protected ICollection get_ReferencedAssemblies();
    protected CompilerType GetDefaultCompilerTypeForLanguage(string language);
    protected CompilerType GetDefaultCompilerType();
    internal BuildProviderSet get_BuildProviderDependencies();
    internal bool get_IsDependedOn();
    internal void SetNoBuildResult();
    internal void SetContributedCode();
    internal void SetVirtualPath(VirtualPath virtualPath);
    internal void SetReferencedAssemblies(ICollection referencedAssemblies);
    internal void AddBuildProviderDependency(BuildProvider dependentBuildProvider);
    internal string GetCultureName();
    internal BuildResult GetBuildResult(CompilerResults results);
    internal virtual BuildResult CreateBuildResult(CompilerResults results);
    internal virtual BuildResultCompiledType CreateBuildResult(Type t);
    internal void SetBuildResultDependencies(BuildResult result);
    internal static CompilerType GetCompilerTypeFromBuildProvider(BuildProvider buildProvider);
    internal static string GetDisplayName(BuildProvider buildProvider);
    internal virtual ICollection GetGeneratedTypeNames();
    internal virtual bool get_IgnoreParseErrors();
    internal virtual void set_IgnoreParseErrors(bool value);
    internal bool get_IgnoreControlProperties();
    internal void set_IgnoreControlProperties(bool value);
    internal bool get_ThrowOnFirstParseError();
    internal void set_ThrowOnFirstParseError(bool value);
    internal virtual IAssemblyDependencyParser get_AssemblyDependencyParser();
    protected internal virtual CodeCompileUnit GetCodeCompileUnit(IDictionary& linePragmasTable);
    internal virtual ICollection GetCompileWithDependencies();
}
[FlagsAttribute]
public enum System.Web.Compilation.BuildProviderAppliesTo : Enum {
    public int value__;
    public static BuildProviderAppliesTo Web;
    public static BuildProviderAppliesTo Code;
    public static BuildProviderAppliesTo Resources;
    public static BuildProviderAppliesTo All;
}
[AttributeUsageAttribute("4")]
public class System.Web.Compilation.BuildProviderAppliesToAttribute : Attribute {
    public BuildProviderAppliesTo AppliesTo { get; }
    public BuildProviderAppliesToAttribute(BuildProviderAppliesTo appliesTo);
    public BuildProviderAppliesTo get_AppliesTo();
}
internal abstract class System.Web.Compilation.BuildProviderInfo : object {
    internal Type Type { get; }
    internal BuildProviderAppliesTo AppliesTo { get; }
    internal abstract virtual Type get_Type();
    internal BuildProviderAppliesTo get_AppliesTo();
}
[FlagsAttribute]
public enum System.Web.Compilation.BuildProviderResultFlags : Enum {
    public int value__;
    public static BuildProviderResultFlags Default;
    public static BuildProviderResultFlags ShutdownAppDomainOnChange;
}
internal class System.Web.Compilation.BuildProvidersCompiler : object {
    internal ICollection ReferencedAssemblies { get; }
    internal CompilationSection CompConfig { get; }
    internal string OutputAssemblyName { get; }
    internal BuildProvidersCompiler(VirtualPath configPath, string outputAssemblyName);
    internal BuildProvidersCompiler(VirtualPath configPath, bool supportLocalization, string outputAssemblyName);
    internal BuildProvidersCompiler(VirtualPath configPath, bool supportLocalization, string generatedFilesDir, int index);
    internal ICollection get_ReferencedAssemblies();
    internal CompilationSection get_CompConfig();
    internal string get_OutputAssemblyName();
    internal void SetBuildProviders(ICollection buildProviders);
    internal CompilerResults PerformBuild();
    internal void GenerateSources(Type& codeDomProviderType, CompilerParameters& compilerParameters);
}
internal abstract class System.Web.Compilation.BuildResult : object {
    protected static int usesCacheDependency;
    protected static int usesExistingAssembly;
    protected static int hasAppOrSessionObjects;
    protected static int dependenciesHashComputed;
    protected SimpleBitVector32 _flags;
    internal int Flags { get; internal set; }
    internal VirtualPath VirtualPath { get; internal set; }
    internal bool UsesCacheDependency { get; internal set; }
    internal bool ShutdownAppDomainOnChange { get; }
    internal ICollection VirtualPathDependencies { get; }
    internal string VirtualPathDependenciesHash { get; internal set; }
    internal bool DependenciesHashComputed { get; }
    internal bool IsUnloadable { get; }
    internal bool CacheToDisk { get; }
    internal bool CacheToMemory { get; internal set; }
    internal DateTime MemoryCacheExpiration { get; }
    internal TimeSpan MemoryCacheSlidingExpiration { get; }
    internal static BuildResult CreateBuildResultFromCode(BuildResultTypeCode code, VirtualPath virtualPath);
    internal virtual BuildResultTypeCode GetCode();
    internal int get_Flags();
    internal void set_Flags(int value);
    internal VirtualPath get_VirtualPath();
    internal void set_VirtualPath(VirtualPath value);
    internal bool get_UsesCacheDependency();
    internal void set_UsesCacheDependency(bool value);
    internal bool get_ShutdownAppDomainOnChange();
    internal ICollection get_VirtualPathDependencies();
    internal string get_VirtualPathDependenciesHash();
    internal void set_VirtualPathDependenciesHash(string value);
    internal bool get_DependenciesHashComputed();
    internal void EnsureVirtualPathDependenciesHashComputed();
    internal void SetVirtualPathDependencies(ArrayList sourceDependencies);
    internal void AddVirtualPathDependencies(ICollection sourceDependencies);
    internal virtual bool get_IsUnloadable();
    internal virtual bool get_CacheToDisk();
    internal bool get_CacheToMemory();
    internal void set_CacheToMemory(bool value);
    internal virtual DateTime get_MemoryCacheExpiration();
    internal virtual TimeSpan get_MemoryCacheSlidingExpiration();
    protected void ReadPreservedFlags(PreservationFileReader pfr);
    internal virtual void GetPreservedAttributes(PreservationFileReader pfr);
    internal virtual void SetPreservedAttributes(PreservationFileWriter pfw);
    internal virtual void RemoveOutOfDateResources(PreservationFileReader pfw);
    internal long ComputeHashCode(long hashCode);
    internal long ComputeHashCode(long hashCode1, long hashCode2);
    protected virtual void ComputeHashCode(HashCodeCombiner hashCodeCombiner);
    internal virtual string ComputeSourceDependenciesHashCode(VirtualPath virtualPath);
    internal bool IsUpToDate(VirtualPath virtualPath, bool ensureIsUpToDate);
}
internal abstract class System.Web.Compilation.BuildResultCache : object {
    internal BuildResult GetBuildResult(string cacheKey);
    internal abstract virtual BuildResult GetBuildResult(string cacheKey, VirtualPath virtualPath, long hashCode, bool ensureIsUpToDate);
    internal void CacheBuildResult(string cacheKey, BuildResult result, DateTime utcStart);
    internal abstract virtual void CacheBuildResult(string cacheKey, BuildResult result, long hashCode, DateTime utcStart);
    internal static string GetAssemblyCacheKey(string assemblyPath);
    internal static string GetAssemblyCacheKey(Assembly assembly);
    internal static string GetAssemblyCacheKeyFromName(string assemblyName);
}
internal class System.Web.Compilation.BuildResultCodeCompileUnit : BuildResult {
    internal Type CodeDomProviderType { get; }
    internal CodeCompileUnit CodeCompileUnit { get; }
    internal CompilerParameters CompilerParameters { get; }
    internal IDictionary LinePragmasTable { get; }
    internal bool CacheToDisk { get; }
    internal BuildResultCodeCompileUnit(Type codeDomProviderType, CodeCompileUnit codeCompileUnit, CompilerParameters compilerParameters, IDictionary linePragmasTable);
    internal Type get_CodeDomProviderType();
    internal CodeCompileUnit get_CodeCompileUnit();
    internal CompilerParameters get_CompilerParameters();
    internal IDictionary get_LinePragmasTable();
    internal virtual bool get_CacheToDisk();
    internal virtual BuildResultTypeCode GetCode();
    protected virtual void ComputeHashCode(HashCodeCombiner hashCodeCombiner);
    internal virtual void GetPreservedAttributes(PreservationFileReader pfr);
    internal void SetCacheKey(string cacheKey);
    internal virtual void SetPreservedAttributes(PreservationFileWriter pfw);
    internal virtual void RemoveOutOfDateResources(PreservationFileReader pfr);
}
internal class System.Web.Compilation.BuildResultCompiledAssembly : BuildResultCompiledAssemblyBase {
    internal Assembly ResultAssembly { get; internal set; }
    internal BuildResultCompiledAssembly(Assembly a);
    internal virtual BuildResultTypeCode GetCode();
    internal virtual Assembly get_ResultAssembly();
    internal virtual void set_ResultAssembly(Assembly value);
    internal virtual void GetPreservedAttributes(PreservationFileReader pfr);
}
internal abstract class System.Web.Compilation.BuildResultCompiledAssemblyBase : BuildResult {
    internal bool UsesExistingAssembly { get; internal set; }
    internal bool IsUnloadable { get; }
    internal Assembly ResultAssembly { get; internal set; }
    internal bool HasResultAssembly { get; }
    protected bool IsGacAssembly { get; }
    protected string ShortAssemblyName { get; }
    private static BuildResultCompiledAssemblyBase();
    internal bool get_UsesExistingAssembly();
    internal void set_UsesExistingAssembly(bool value);
    internal virtual bool get_IsUnloadable();
    internal abstract virtual Assembly get_ResultAssembly();
    internal abstract virtual void set_ResultAssembly(Assembly value);
    internal virtual bool get_HasResultAssembly();
    protected virtual bool get_IsGacAssembly();
    protected virtual string get_ShortAssemblyName();
    internal static Assembly GetPreservedAssembly(PreservationFileReader pfr);
    internal static bool AssemblyIsInCodegenDir(Assembly a);
    internal virtual void SetPreservedAttributes(PreservationFileWriter pfw);
    internal virtual void RemoveOutOfDateResources(PreservationFileReader pfr);
    protected virtual void ComputeHashCode(HashCodeCombiner hashCodeCombiner);
}
internal class System.Web.Compilation.BuildResultCompiledGlobalAsaxType : BuildResultCompiledType {
    internal bool HasAppOrSessionObjects { get; internal set; }
    public BuildResultCompiledGlobalAsaxType(Type t);
    internal virtual BuildResultTypeCode GetCode();
    internal bool get_HasAppOrSessionObjects();
    internal void set_HasAppOrSessionObjects(bool value);
}
internal class System.Web.Compilation.BuildResultCompiledTemplateType : BuildResultCompiledType {
    public BuildResultCompiledTemplateType(Type t);
    internal virtual BuildResultTypeCode GetCode();
    protected virtual void ComputeHashCode(HashCodeCombiner hashCodeCombiner);
}
internal class System.Web.Compilation.BuildResultCompiledType : BuildResultCompiledAssemblyBase {
    internal Assembly ResultAssembly { get; internal set; }
    internal bool HasResultAssembly { get; }
    protected bool IsGacAssembly { get; }
    protected string ShortAssemblyName { get; }
    internal Type ResultType { get; internal set; }
    internal bool IsDelayLoadType { get; }
    public Type InstantiatedType { get; }
    internal BuildResultCompiledType(Type t);
    internal virtual BuildResultTypeCode GetCode();
    internal virtual Assembly get_ResultAssembly();
    internal virtual void set_ResultAssembly(Assembly value);
    internal virtual bool get_HasResultAssembly();
    protected virtual bool get_IsGacAssembly();
    protected virtual string get_ShortAssemblyName();
    internal Type get_ResultType();
    internal void set_ResultType(Type value);
    internal bool get_IsDelayLoadType();
    internal static bool UsesDelayLoadType(BuildResult result);
    public sealed virtual object CreateInstance();
    public virtual Type get_InstantiatedType();
    protected virtual void ComputeHashCode(HashCodeCombiner hashCodeCombiner);
    internal virtual void GetPreservedAttributes(PreservationFileReader pfr);
    internal virtual void SetPreservedAttributes(PreservationFileWriter pfw);
}
internal class System.Web.Compilation.BuildResultCompileError : BuildResult {
    internal HttpCompileException CompileException { get; }
    internal bool CacheToDisk { get; }
    internal DateTime MemoryCacheExpiration { get; }
    internal BuildResultCompileError(VirtualPath virtualPath, HttpCompileException compileException);
    internal HttpCompileException get_CompileException();
    internal virtual bool get_CacheToDisk();
    internal virtual DateTime get_MemoryCacheExpiration();
}
internal class System.Web.Compilation.BuildResultCustomString : BuildResultCompiledAssembly {
    internal string CustomString { get; }
    internal BuildResultCustomString(Assembly a, string customString);
    internal virtual BuildResultTypeCode GetCode();
    internal virtual void GetPreservedAttributes(PreservationFileReader pfr);
    internal virtual void SetPreservedAttributes(PreservationFileWriter pfw);
    internal string get_CustomString();
}
internal class System.Web.Compilation.BuildResultMainCodeAssembly : BuildResultCompiledAssembly {
    internal BuildResultMainCodeAssembly(Assembly a);
    internal virtual BuildResultTypeCode GetCode();
    internal virtual void GetPreservedAttributes(PreservationFileReader pfr);
    internal virtual void SetPreservedAttributes(PreservationFileWriter pfw);
    internal void CallAppInitializeMethod();
}
internal class System.Web.Compilation.BuildResultNoCompileMasterPage : BuildResultNoCompileUserControl {
    internal BuildResultNoCompileMasterPage(Type baseType, TemplateParser parser);
    public virtual object CreateInstance();
}
internal class System.Web.Compilation.BuildResultNoCompilePage : BuildResultNoCompileTemplateControl {
    internal BuildResultNoCompilePage(Type baseType, TemplateParser parser);
    internal virtual void FrameworkInitialize(TemplateControl templateControl);
}
internal abstract class System.Web.Compilation.BuildResultNoCompileTemplateControl : BuildResult {
    protected Type _baseType;
    protected RootBuilder _rootBuilder;
    protected bool _initialized;
    internal bool CacheToDisk { get; }
    internal TimeSpan MemoryCacheSlidingExpiration { get; }
    internal Type BaseType { get; }
    public Type InstantiatedType { get; }
    internal BuildResultNoCompileTemplateControl(Type baseType, TemplateParser parser);
    internal virtual BuildResultTypeCode GetCode();
    internal virtual bool get_CacheToDisk();
    internal virtual TimeSpan get_MemoryCacheSlidingExpiration();
    internal Type get_BaseType();
    public virtual object CreateInstance();
    public virtual Type get_InstantiatedType();
    internal virtual void FrameworkInitialize(TemplateControl templateControl);
}
internal class System.Web.Compilation.BuildResultNoCompileUserControl : BuildResultNoCompileTemplateControl {
    internal PartialCachingAttribute CachingAttribute { get; }
    internal BuildResultNoCompileUserControl(Type baseType, TemplateParser parser);
    internal PartialCachingAttribute get_CachingAttribute();
}
internal class System.Web.Compilation.BuildResultResourceAssembly : BuildResultCompiledAssembly {
    internal string ResourcesDependenciesHash { get; internal set; }
    internal BuildResultResourceAssembly(Assembly a);
    internal virtual BuildResultTypeCode GetCode();
    internal virtual string ComputeSourceDependenciesHashCode(VirtualPath virtualPath);
    internal string get_ResourcesDependenciesHash();
    internal void set_ResourcesDependenciesHash(string value);
    internal virtual void GetPreservedAttributes(PreservationFileReader pfr);
    internal virtual void SetPreservedAttributes(PreservationFileWriter pfw);
}
internal enum System.Web.Compilation.BuildResultTypeCode : Enum {
    public int value__;
    public static BuildResultTypeCode Invalid;
    public static BuildResultTypeCode BuildResultCompiledAssembly;
    public static BuildResultTypeCode BuildResultCompiledType;
    public static BuildResultTypeCode BuildResultCompiledTemplateType;
    public static BuildResultTypeCode BuildResultCustomString;
    public static BuildResultTypeCode BuildResultMainCodeAssembly;
    public static BuildResultTypeCode BuildResultCodeCompileUnit;
    public static BuildResultTypeCode BuildResultCompiledGlobalAsaxType;
    public static BuildResultTypeCode BuildResultResourceAssembly;
}
internal class System.Web.Compilation.CbmCodeGeneratorBuildProviderHost : AssemblyBuilder {
    internal CbmCodeGeneratorBuildProviderHost(CompilationSection compConfig, ICollection referencedAssemblies, CompilerType compilerType, string generatedFilesDir, string outputAssemblyName);
    internal virtual TextWriter CreateCodeFile(BuildProvider buildProvider, String& filename);
    internal virtual void AddBuildProvider(BuildProvider buildProvider);
}
public class System.Web.Compilation.ClientBuildManager : MarshalByRefObject {
    public string CodeGenDir { get; }
    public bool IsHostCreated { get; }
    internal ClientBuildManagerTypeDescriptionProviderBridge CBMTypeDescriptionProviderBridge { get; }
    public ClientBuildManager(string appVirtualDir, string appPhysicalSourceDir);
    public ClientBuildManager(string appVirtualDir, string appPhysicalSourceDir, string appPhysicalTargetDir);
    public ClientBuildManager(string appVirtualDir, string appPhysicalSourceDir, string appPhysicalTargetDir, ClientBuildManagerParameter parameter);
    public ClientBuildManager(string appVirtualDir, string appPhysicalSourceDir, string appPhysicalTargetDir, ClientBuildManagerParameter parameter, TypeDescriptionProvider typeDescriptionProvider);
    [CompilerGeneratedAttribute]
public void add_AppDomainUnloaded(BuildManagerHostUnloadEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AppDomainUnloaded(BuildManagerHostUnloadEventHandler value);
    [CompilerGeneratedAttribute]
public void add_AppDomainStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AppDomainStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_AppDomainShutdown(BuildManagerHostUnloadEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AppDomainShutdown(BuildManagerHostUnloadEventHandler value);
    public string get_CodeGenDir();
    public bool get_IsHostCreated();
    public IRegisteredObject CreateObject(Type type, bool failIfExists);
    public String[] GetAppDomainShutdownDirectories();
    public void CompileApplicationDependencies();
    public IDictionary GetBrowserDefinitions();
    public string GetGeneratedSourceFile(string virtualPath);
    public string GetGeneratedFileVirtualPath(string filePath);
    public String[] GetVirtualCodeDirectories();
    public String[] GetTopLevelAssemblyReferences(string virtualPath);
    public void GetCodeDirectoryInformation(string virtualCodeDir, Type& codeDomProviderType, CompilerParameters& compilerParameters, String& generatedFilesDir);
    public void GetCompilerParameters(string virtualPath, Type& codeDomProviderType, CompilerParameters& compilerParameters);
    public CodeCompileUnit GenerateCodeCompileUnit(string virtualPath, Type& codeDomProviderType, CompilerParameters& compilerParameters, IDictionary& linePragmasTable);
    public CodeCompileUnit GenerateCodeCompileUnit(string virtualPath, string virtualFileString, Type& codeDomProviderType, CompilerParameters& compilerParameters, IDictionary& linePragmasTable);
    public string GenerateCode(string virtualPath, string virtualFileString, IDictionary& linePragmasTable);
    public Type GetCompiledType(string virtualPath);
    public void CompileFile(string virtualPath);
    public void CompileFile(string virtualPath, ClientBuildManagerCallback callback);
    public bool IsCodeAssembly(string assemblyName);
    public bool Unload();
    public void PrecompileApplication();
    public void PrecompileApplication(ClientBuildManagerCallback callback);
    public void PrecompileApplication(ClientBuildManagerCallback callback, bool forceCleanBuild);
    public virtual object InitializeLifetimeService();
    internal void Initialize(VirtualPath virtualPath, string physicalPath);
    internal void OnAppDomainUnloaded(ApplicationShutdownReason reason);
    internal void ResetHost();
    internal void OnAppDomainShutdown(ApplicationShutdownReason reason);
    internal ClientBuildManagerTypeDescriptionProviderBridge get_CBMTypeDescriptionProviderBridge();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class System.Web.Compilation.ClientBuildManagerCallback : MarshalByRefObject {
    public virtual void ReportCompilerError(CompilerError error);
    public virtual void ReportParseError(ParserError error);
    public virtual void ReportProgress(string message);
    public virtual object InitializeLifetimeService();
}
public class System.Web.Compilation.ClientBuildManagerParameter : object {
    public List`1<string> ExcludedVirtualPaths { get; }
    public PrecompilationFlags PrecompilationFlags { get; public set; }
    public string StrongNameKeyFile { get; public set; }
    public string StrongNameKeyContainer { get; public set; }
    public List`1<string> get_ExcludedVirtualPaths();
    public PrecompilationFlags get_PrecompilationFlags();
    public void set_PrecompilationFlags(PrecompilationFlags value);
    public string get_StrongNameKeyFile();
    public void set_StrongNameKeyFile(string value);
    public string get_StrongNameKeyContainer();
    public void set_StrongNameKeyContainer(string value);
}
internal class System.Web.Compilation.CodeDirectoryCompiler : object {
    internal static BuildResultMainCodeAssembly _mainCodeBuildResult;
    internal static string sourcesDirectoryPrefix;
    internal static bool IsResourceCodeDirectoryType(CodeDirectoryType dirType);
    internal static Assembly GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, string assemblyName, StringSet excludedSubdirectories, bool isDirectoryAllowed);
    internal static void CallAppInitializeMethod();
    internal static void GetCodeDirectoryInformation(VirtualPath virtualDir, CodeDirectoryType dirType, StringSet excludedSubdirectories, int index, Type& codeDomProviderType, CompilerParameters& compilerParameters, String& generatedFilesDir);
}
internal enum System.Web.Compilation.CodeDirectoryType : Enum {
    public int value__;
    public static CodeDirectoryType MainCode;
    public static CodeDirectoryType SubCode;
    public static CodeDirectoryType AppResources;
    public static CodeDirectoryType LocalResources;
    public static CodeDirectoryType WebReferences;
}
internal static class System.Web.Compilation.CodeDomUtility : object {
    internal static BooleanSwitch WebFormsCompilation;
    private static CodeDomUtility();
    internal static CodeExpression GenerateExpressionForValue(PropertyInfo propertyInfo, object value, Type valueType);
    internal static void CreatePropertySetStatements(CodeStatementCollection methodStatements, CodeStatementCollection statements, CodeExpression target, string targetPropertyName, Type destinationType, CodeExpression value, CodeLinePragma linePragma);
    internal static CodeExpression GenerateConvertToString(CodeExpression value);
    internal static void PrependCompilerOption(CompilerParameters compilParams, string compilerOptions);
    internal static void AppendCompilerOption(CompilerParameters compilParams, string compilerOptions);
    internal static CodeExpression BuildPropertyReferenceExpression(CodeExpression objRefExpr, string propName);
    internal static CodeCastExpression BuildJSharpCastExpression(Type castType, CodeExpression expression);
    internal static CodeTypeReference BuildGlobalCodeTypeReference(string typeName);
    internal static CodeTypeReference BuildGlobalCodeTypeReference(Type type);
}
internal static class System.Web.Compilation.CompilationLock : object {
    private static CompilationLock();
    internal static void GetLock(Boolean& gotLock);
    internal static void ReleaseLock();
}
internal class System.Web.Compilation.CompilationMutex : object {
    internal CompilationMutex(string name, string comment);
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    internal void Close();
    internal void WaitOne();
    internal void ReleaseMutex();
}
internal enum System.Web.Compilation.CompilationStage : Enum {
    public int value__;
    public static CompilationStage PreTopLevelFiles;
    public static CompilationStage TopLevelFiles;
    public static CompilationStage GlobalAsax;
    public static CompilationStage BrowserCapabilities;
    public static CompilationStage AfterTopLevelFiles;
}
internal static class System.Web.Compilation.CompilationUtil : object {
    internal static string CodeDomProviderOptionPath;
    internal static int MaxConcurrentCompilations { get; }
    internal static bool IsDebuggingEnabled(HttpContext context);
    internal static bool IsBatchingEnabled(string configPath);
    internal static int GetRecompilationsBeforeAppRestarts();
    internal static CompilerType GetCodeDefaultLanguageCompilerInfo();
    internal static CompilerType GetDefaultLanguageCompilerInfo(CompilationSection compConfig, VirtualPath configPath);
    internal static CompilerType GetCompilerInfoFromVirtualPath(VirtualPath virtualPath);
    internal static CompilerType GetCompilerInfoFromLanguage(VirtualPath configPath, string language);
    internal static CompilerType GetCSharpCompilerInfo(CompilationSection compConfig, VirtualPath configPath);
    internal static CodeSubDirectoriesCollection GetCodeSubDirectories();
    internal static long GetRecompilationHash(CompilationSection ps);
    internal static Type GetBuildProviderTypeFromExtension(VirtualPath configPath, string extension, BuildProviderAppliesTo neededFor, bool failIfUnknown);
    internal static Type GetBuildProviderTypeFromExtension(CompilationSection config, string extension, BuildProviderAppliesTo neededFor, bool failIfUnknown);
    internal static List`1<Type> GetFolderLevelBuildProviderTypes(CompilationSection config, FolderLevelBuildProviderAppliesTo appliesTo);
    internal static void CheckCompilerDirectoryPathAllowed(IDictionary`2<string, string> providerOptions);
    internal static void CheckCompilerOptionsAllowed(string compilerOptions, bool config, string file, int line);
    internal static bool NeedToCopyFile(VirtualPath virtualPath, bool updatable, Boolean& createStub);
    internal static Type LoadTypeWithChecks(string typeName, Type requiredBaseType, Type requiredBaseType2, ConfigurationElement elem, string propertyName);
    internal static CodeDomProvider CreateCodeDomProvider(Type codeDomProviderType);
    internal static CodeDomProvider CreateCodeDomProviderNonPublic(Type codeDomProviderType);
    internal static IDictionary`2<string, string> GetProviderOptions(Type codeDomProviderType);
    internal static string GetCompilerVersion(Type codeDomProviderType);
    internal static string GetProviderOption(Type codeDomProviderType, string providerOption);
    internal static bool IsCompilerVersion35(string compilerVersion);
    internal static bool IsCompilerVersion35(Type codeDomProviderType);
    internal static bool IsCompilerVersion35OrAbove(Type codeDomProviderType);
    internal static bool WarnAsError(Type codeDomProviderType);
    internal static Version GetVersionFromVString(string version);
    internal static int get_MaxConcurrentCompilations();
}
public class System.Web.Compilation.CompilerType : object {
    public Type CodeDomProviderType { get; }
    public CompilerParameters CompilerParameters { get; }
    internal CompilerType(Type codeDomProviderType, CompilerParameters compilParams);
    public Type get_CodeDomProviderType();
    public CompilerParameters get_CompilerParameters();
    internal CompilerType Clone();
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
    internal AssemblyBuilder CreateAssemblyBuilder(CompilationSection compConfig, ICollection referencedAssemblies);
    internal AssemblyBuilder CreateAssemblyBuilder(CompilationSection compConfig, ICollection referencedAssemblies, string generatedFilesDir, string outputAssemblyName);
    internal static AssemblyBuilder GetDefaultAssemblyBuilder(CompilationSection compConfig, ICollection referencedAssemblies, VirtualPath configPath, string outputAssemblyName);
    internal static AssemblyBuilder GetDefaultAssemblyBuilder(CompilationSection compConfig, ICollection referencedAssemblies, VirtualPath configPath, string generatedFilesDir, string outputAssemblyName);
}
[ExpressionPrefixAttribute("ConnectionStrings")]
[ExpressionEditorAttribute("System.Web.UI.Design.ConnectionStringsExpressionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.Compilation.ConnectionStringsExpressionBuilder : ExpressionBuilder {
    public bool SupportsEvaluate { get; }
    public virtual bool get_SupportsEvaluate();
    public virtual object ParseExpression(string expression, Type propertyType, ExpressionBuilderContext context);
    public virtual CodeExpression GetCodeExpression(BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context);
    public virtual object EvaluateExpression(object target, BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context);
    public static string GetConnectionStringProviderName(string connectionStringName);
    public static string GetConnectionString(string connectionStringName);
}
public abstract class System.Web.Compilation.ControlBuilderInterceptor : object {
    public virtual void PreControlBuilderInit(ControlBuilder controlBuilder, TemplateParser parser, ControlBuilder parentBuilder, Type type, string tagName, string id, IDictionary attributes, IDictionary additionalState);
    public virtual void OnProcessGeneratedCode(ControlBuilder controlBuilder, CodeCompileUnit codeCompileUnit, CodeTypeDeclaration baseType, CodeTypeDeclaration derivedType, CodeMemberMethod buildMethod, CodeMemberMethod dataBindingMethod, IDictionary additionalState);
}
internal class System.Web.Compilation.DataBindingExpressionBuilder : ExpressionBuilder {
    internal static EventInfo Event { get; }
    internal static EventInfo get_Event();
    internal static void BuildEvalExpression(string field, string formatString, string propertyName, Type propertyType, ControlBuilder controlBuilder, CodeStatementCollection methodStatements, CodeStatementCollection statements, CodeLinePragma linePragma, bool isEncoded, Boolean& hasTempObject);
    internal static void BuildExpressionSetup(ControlBuilder controlBuilder, CodeStatementCollection methodStatements, CodeStatementCollection statements, CodeLinePragma linePragma, bool isTwoWayBound, bool designerMode);
    internal static void GenerateItemTypeExpressions(ControlBuilder controlBuilder, CodeStatementCollection declarationStatements, CodeStatementCollection codeStatements, CodeLinePragma linePragma, string variableName);
    internal virtual void BuildExpression(BoundPropertyEntry bpe, ControlBuilder controlBuilder, CodeExpression controlReference, CodeStatementCollection methodStatements, CodeStatementCollection statements, CodeLinePragma linePragma, Boolean& hasTempObject);
    internal static void BuildExpressionStatic(BoundPropertyEntry bpe, ControlBuilder controlBuilder, CodeExpression controlReference, CodeStatementCollection methodStatements, CodeStatementCollection statements, CodeLinePragma linePragma, bool isEncoded, Boolean& hasTempObject);
    public virtual CodeExpression GetCodeExpression(BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context);
}
internal class System.Web.Compilation.DefaultImplicitResourceProvider : object {
    internal DefaultImplicitResourceProvider(IResourceProvider resourceProvider);
    public virtual object GetObject(ImplicitResourceKey entry, CultureInfo culture);
    public virtual ICollection GetImplicitResourceKeys(string keyPrefix);
    internal void EnsureGetPageResources();
}
internal class System.Web.Compilation.DelayLoadType : Type {
    internal static bool Enabled { get; }
    public Type Type { get; }
    public string AssemblyName { get; }
    public string TypeName { get; }
    public Assembly Assembly { get; }
    public string AssemblyQualifiedName { get; }
    public Type BaseType { get; }
    public string FullName { get; }
    public Guid GUID { get; }
    public Module Module { get; }
    public string Namespace { get; }
    public Type UnderlyingSystemType { get; }
    public string Name { get; }
    public DelayLoadType(string assemblyName, string typeName);
    internal static bool get_Enabled();
    public Type get_Type();
    public string get_AssemblyName();
    public string get_TypeName();
    public virtual Assembly get_Assembly();
    public virtual string get_AssemblyQualifiedName();
    public virtual Type get_BaseType();
    public virtual string get_FullName();
    public virtual Guid get_GUID();
    protected virtual TypeAttributes GetAttributeFlagsImpl();
    protected virtual ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    public virtual ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
    public virtual Type GetElementType();
    public virtual EventInfo GetEvent(string name, BindingFlags bindingAttr);
    public virtual EventInfo[] GetEvents(BindingFlags bindingAttr);
    public virtual FieldInfo GetField(string name, BindingFlags bindingAttr);
    public virtual FieldInfo[] GetFields(BindingFlags bindingAttr);
    public virtual Type GetInterface(string name, bool ignoreCase);
    public virtual Type[] GetInterfaces();
    public virtual MemberInfo[] GetMembers(BindingFlags bindingAttr);
    protected virtual MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    public virtual MethodInfo[] GetMethods(BindingFlags bindingAttr);
    public virtual Type GetNestedType(string name, BindingFlags bindingAttr);
    public virtual Type[] GetNestedTypes(BindingFlags bindingAttr);
    public virtual PropertyInfo[] GetProperties(BindingFlags bindingAttr);
    protected virtual PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    protected virtual bool HasElementTypeImpl();
    public virtual object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters);
    protected virtual bool IsArrayImpl();
    protected virtual bool IsByRefImpl();
    protected virtual bool IsCOMObjectImpl();
    protected virtual bool IsPointerImpl();
    protected virtual bool IsPrimitiveImpl();
    public virtual Module get_Module();
    public virtual string get_Namespace();
    public virtual Type get_UnderlyingSystemType();
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual string get_Name();
}
[AttributeUsageAttribute("4")]
public class System.Web.Compilation.DesignTimeResourceProviderFactoryAttribute : Attribute {
    public string FactoryTypeName { get; }
    public DesignTimeResourceProviderFactoryAttribute(Type factoryType);
    public DesignTimeResourceProviderFactoryAttribute(string factoryTypeName);
    public string get_FactoryTypeName();
    public virtual bool IsDefaultAttribute();
}
internal abstract class System.Web.Compilation.DiskBuildResultCache : BuildResultCache {
    protected static string preservationFileExtension;
    protected string _cacheDir;
    protected static string dotDelete;
    protected bool PrecompilationMode { get; }
    internal static bool InUseAssemblyWasDeleted { get; }
    internal DiskBuildResultCache(string cacheDir);
    private static DiskBuildResultCache();
    protected void EnsureDiskCacheDirectoryCreated();
    internal virtual BuildResult GetBuildResult(string cacheKey, VirtualPath virtualPath, long hashCode, bool ensureIsUpToDate);
    internal virtual void CacheBuildResult(string cacheKey, BuildResult result, long hashCode, DateTime utcStart);
    protected virtual bool get_PrecompilationMode();
    internal static bool get_InUseAssemblyWasDeleted();
    internal static void ResetAssemblyDeleted();
    internal virtual void RemoveAssemblyAndRelatedFiles(string assemblyName);
    internal static void RemoveAssembly(FileInfo f);
    internal static void ShutDownAppDomainIfRequired();
    internal static bool TryDeleteFile(string s);
    internal static bool TryDeleteFile(FileInfo f);
    internal static bool CheckAndRemoveDotDeleteFile(FileInfo f);
    internal static bool HasDotDeleteFile(string s);
}
public abstract class System.Web.Compilation.ExpressionBuilder : object {
    public bool SupportsEvaluate { get; }
    internal virtual void BuildExpression(BoundPropertyEntry bpe, ControlBuilder controlBuilder, CodeExpression controlReference, CodeStatementCollection methodStatements, CodeStatementCollection statements, CodeLinePragma linePragma, Boolean& hasTempObject);
    internal static ExpressionBuilder GetExpressionBuilder(string expressionPrefix, VirtualPath virtualPath);
    internal static ExpressionBuilder GetExpressionBuilder(string expressionPrefix, VirtualPath virtualPath, IDesignerHost host);
    public virtual bool get_SupportsEvaluate();
    public virtual object ParseExpression(string expression, Type propertyType, ExpressionBuilderContext context);
    public abstract virtual CodeExpression GetCodeExpression(BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context);
    public virtual object EvaluateExpression(object target, BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context);
}
public class System.Web.Compilation.ExpressionBuilderContext : object {
    public TemplateControl TemplateControl { get; }
    public string VirtualPath { get; }
    internal VirtualPath VirtualPathObject { get; }
    internal ExpressionBuilderContext(VirtualPath virtualPath);
    public ExpressionBuilderContext(string virtualPath);
    public ExpressionBuilderContext(TemplateControl templateControl);
    public TemplateControl get_TemplateControl();
    public string get_VirtualPath();
    internal VirtualPath get_VirtualPathObject();
}
[AttributeUsageAttribute("4")]
public class System.Web.Compilation.ExpressionEditorAttribute : Attribute {
    public string EditorTypeName { get; }
    public ExpressionEditorAttribute(Type type);
    public ExpressionEditorAttribute(string typeName);
    public string get_EditorTypeName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("4")]
public class System.Web.Compilation.ExpressionPrefixAttribute : Attribute {
    public string ExpressionPrefix { get; }
    public ExpressionPrefixAttribute(string expressionPrefix);
    public string get_ExpressionPrefix();
}
[FlagsAttribute]
public enum System.Web.Compilation.FolderLevelBuildProviderAppliesTo : Enum {
    public int value__;
    public static FolderLevelBuildProviderAppliesTo None;
    public static FolderLevelBuildProviderAppliesTo Code;
    public static FolderLevelBuildProviderAppliesTo WebReferences;
    public static FolderLevelBuildProviderAppliesTo LocalResources;
    public static FolderLevelBuildProviderAppliesTo GlobalResources;
}
[AttributeUsageAttribute("4")]
public class System.Web.Compilation.FolderLevelBuildProviderAppliesToAttribute : Attribute {
    public FolderLevelBuildProviderAppliesTo AppliesTo { get; }
    public FolderLevelBuildProviderAppliesToAttribute(FolderLevelBuildProviderAppliesTo appliesTo);
    public FolderLevelBuildProviderAppliesTo get_AppliesTo();
}
internal class System.Web.Compilation.ForceCopyBuildProvider : BuildProvider {
}
internal class System.Web.Compilation.GlobalPageThemeBuildProvider : PageThemeBuildProvider {
    internal string AssemblyNamePrefix { get; }
    public ICollection VirtualPathDependencies { get; }
    internal GlobalPageThemeBuildProvider(VirtualPath virtualDirPath);
    internal virtual string get_AssemblyNamePrefix();
    public virtual ICollection get_VirtualPathDependencies();
}
internal class System.Web.Compilation.GlobalResXResourceProvider : BaseResXResourceProvider {
    public IResourceReader ResourceReader { get; }
    internal GlobalResXResourceProvider(string classKey);
    protected virtual ResourceManager CreateResourceManager();
    public virtual IResourceReader get_ResourceReader();
}
public interface System.Web.Compilation.IAssemblyPostProcessor {
    public abstract virtual void PostProcessAssembly(string path);
}
internal class System.Web.Compilation.IgnoreFileBuildProvider : BuildProvider {
}
public interface System.Web.Compilation.IImplicitResourceProvider {
    public abstract virtual object GetObject(ImplicitResourceKey key, CultureInfo culture);
    public abstract virtual ICollection GetImplicitResourceKeys(string keyPrefix);
}
public class System.Web.Compilation.ImplicitResourceKey : object {
    public string Filter { get; public set; }
    public string KeyPrefix { get; public set; }
    public string Property { get; public set; }
    public ImplicitResourceKey(string filter, string keyPrefix, string property);
    public string get_Filter();
    public void set_Filter(string value);
    public string get_KeyPrefix();
    public void set_KeyPrefix(string value);
    public string get_Property();
    public void set_Property(string value);
}
internal class System.Web.Compilation.InstantiateObject : MulticastDelegate {
    public InstantiateObject(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal abstract class System.Web.Compilation.InternalBuildProvider : BuildProvider {
}
public interface System.Web.Compilation.IResourceProvider {
    public IResourceReader ResourceReader { get; }
    public abstract virtual object GetObject(string resourceKey, CultureInfo culture);
    public abstract virtual IResourceReader get_ResourceReader();
}
public class System.Web.Compilation.LinePragmaCodeInfo : object {
    internal int _startLine;
    internal int _startColumn;
    internal int _startGeneratedColumn;
    internal int _codeLength;
    internal bool _isCodeNugget;
    public int StartLine { get; }
    public int StartColumn { get; }
    public int StartGeneratedColumn { get; }
    public int CodeLength { get; }
    public bool IsCodeNugget { get; }
    public LinePragmaCodeInfo(int startLine, int startColumn, int startGeneratedColumn, int codeLength, bool isCodeNugget);
    public int get_StartLine();
    public int get_StartColumn();
    public int get_StartGeneratedColumn();
    public int get_CodeLength();
    public bool get_IsCodeNugget();
}
internal class System.Web.Compilation.LocalResXResourceProvider : BaseResXResourceProvider {
    public IResourceReader ResourceReader { get; }
    internal LocalResXResourceProvider(VirtualPath virtualPath);
    protected virtual ResourceManager CreateResourceManager();
    public virtual IResourceReader get_ResourceReader();
}
[BuildProviderAppliesToAttribute("3")]
internal class System.Web.Compilation.MasterPageBuildProvider : UserControlBuildProvider {
    internal virtual DependencyParser CreateDependencyParser();
    protected virtual TemplateParser CreateParser();
    internal virtual BaseCodeDomTreeGenerator CreateCodeDomTreeGenerator(TemplateParser parser);
    internal virtual BuildResultNoCompileTemplateControl CreateNoCompileBuildResult();
}
internal class System.Web.Compilation.MasterPageCodeDomTreeGenerator : TemplateControlCodeDomTreeGenerator {
    protected MasterPageParser _masterPageParser;
    internal MasterPageCodeDomTreeGenerator(MasterPageParser parser);
    protected virtual void BuildDefaultConstructor();
    protected virtual void BuildMiscClassMembers();
}
internal class System.Web.Compilation.MemoryBuildResultCache : BuildResultCache {
    internal MemoryBuildResultCache(CacheInternal cache);
    internal virtual BuildResult GetBuildResult(string cacheKey, VirtualPath virtualPath, long hashCode, bool ensureIsUpToDate);
    internal virtual void CacheBuildResult(string cacheKey, BuildResult result, long hashCode, DateTime utcStart);
    internal void RemoveAssemblyAndCleanupDependenciesShuttingDown(BuildResultCompiledAssemblyBase compiledResult);
    internal void RemoveAssemblyAndCleanupDependencies(BuildResultCompiledAssemblyBase compiledResult);
}
internal class System.Web.Compilation.MockEngine : object {
    internal ICollection`1<BuildMessageEventArgs> Messages { get; }
    internal ICollection`1<BuildWarningEventArgs> Warnings { get; }
    internal ICollection`1<BuildErrorEventArgs> Errors { get; }
    internal ICollection`1<CustomBuildEventArgs> CustomEvents { get; }
    public bool ContinueOnError { get; }
    public string ProjectFileOfTaskNode { get; }
    public int LineNumberOfTaskNode { get; }
    public int ColumnNumberOfTaskNode { get; }
    internal ICollection`1<BuildMessageEventArgs> get_Messages();
    internal ICollection`1<BuildWarningEventArgs> get_Warnings();
    internal ICollection`1<BuildErrorEventArgs> get_Errors();
    internal ICollection`1<CustomBuildEventArgs> get_CustomEvents();
    public virtual void LogErrorEvent(BuildErrorEventArgs eventArgs);
    public virtual void LogWarningEvent(BuildWarningEventArgs eventArgs);
    public virtual void LogCustomEvent(CustomBuildEventArgs eventArgs);
    public virtual void LogMessageEvent(BuildMessageEventArgs eventArgs);
    public sealed virtual bool get_ContinueOnError();
    public sealed virtual string get_ProjectFileOfTaskNode();
    public sealed virtual int get_LineNumberOfTaskNode();
    public sealed virtual int get_ColumnNumberOfTaskNode();
    public sealed virtual bool BuildProjectFile(string projectFileName, String[] targetNames, IDictionary globalProperties, IDictionary targetOutputs);
}
internal class System.Web.Compilation.MultiTargetingUtil : object {
    internal static FrameworkName FrameworkNameV20;
    internal static FrameworkName FrameworkNameV30;
    internal static FrameworkName FrameworkNameV35;
    internal static FrameworkName FrameworkNameV40;
    internal static FrameworkName FrameworkNameV45;
    internal static Version Version40;
    internal static Version Version35;
    internal static FrameworkName TargetFrameworkName { get; internal set; }
    internal static FrameworkName LatestFrameworkName { get; }
    internal static List`1<FrameworkName> KnownFrameworkNames { get; }
    internal static string ConfigTargetFrameworkMoniker { get; }
    internal static bool IsTargetFramework35 { get; }
    internal static bool IsTargetFramework20 { get; }
    internal static Version TargetFrameworkVersion { get; }
    internal static bool IsTargetFramework40OrAbove { get; }
    internal static bool IsTargetFramework45OrAbove { get; }
    internal static bool EnableReferenceAssemblyResolution { get; }
    private static MultiTargetingUtil();
    internal static FrameworkName get_TargetFrameworkName();
    internal static void set_TargetFrameworkName(FrameworkName value);
    internal static FrameworkName get_LatestFrameworkName();
    internal static List`1<FrameworkName> get_KnownFrameworkNames();
    internal static void EnsureFrameworkNamesInitialized();
    internal static string get_ConfigTargetFrameworkMoniker();
    internal static bool get_IsTargetFramework35();
    internal static bool get_IsTargetFramework20();
    internal static Version get_TargetFrameworkVersion();
    internal static bool get_IsTargetFramework40OrAbove();
    internal static bool get_IsTargetFramework45OrAbove();
    internal static bool get_EnableReferenceAssemblyResolution();
    internal static FrameworkName CreateFrameworkName(string name);
}
internal class System.Web.Compilation.NonBatchDirectoryCompiler : object {
    internal NonBatchDirectoryCompiler(VirtualDirectory vdir);
    internal void Process();
}
internal class System.Web.Compilation.ObjectFactoryCodeDomTreeGenerator : object {
    internal CodeCompileUnit CodeCompileUnit { get; }
    internal ObjectFactoryCodeDomTreeGenerator(string outputAssemblyName);
    internal void AddFactoryMethod(string typeToCreate);
    internal CodeCompileUnit get_CodeCompileUnit();
    internal static InstantiateObject GetFastObjectCreationDelegate(Type t);
}
[BuildProviderAppliesToAttribute("1")]
internal class System.Web.Compilation.PageBuildProvider : TemplateControlBuildProvider {
    internal virtual DependencyParser CreateDependencyParser();
    protected virtual TemplateParser CreateParser();
    internal virtual BaseCodeDomTreeGenerator CreateCodeDomTreeGenerator(TemplateParser parser);
    internal virtual BuildResultNoCompileTemplateControl CreateNoCompileBuildResult();
}
internal class System.Web.Compilation.PageCodeDomTreeGenerator : TemplateControlCodeDomTreeGenerator {
    internal static int DebugScriptTimeout;
    internal PageCodeDomTreeGenerator(PageParser pageParser);
    protected virtual void GenerateInterfaces();
    protected virtual void BuildInitStatements(CodeStatementCollection trueStatements, CodeStatementCollection topLevelStatements);
    protected virtual void BuildDefaultConstructor();
    protected virtual void BuildMiscClassMembers();
    internal virtual CodeExpression BuildPagePropertyReferenceExpression();
    protected virtual void BuildFrameworkInitializeMethodContents(CodeMemberMethod method);
}
internal class System.Web.Compilation.PageThemeBuildProvider : BaseTemplateBuildProvider {
    internal string AssemblyNamePrefix { get; }
    internal PageThemeBuildProvider(VirtualPath virtualDirPath);
    internal virtual string get_AssemblyNamePrefix();
    internal void AddSkinFile(VirtualPath virtualPath);
    internal void AddCssFile(VirtualPath virtualPath);
    protected virtual TemplateParser CreateParser();
    internal virtual BaseCodeDomTreeGenerator CreateCodeDomTreeGenerator(TemplateParser parser);
}
internal class System.Web.Compilation.PageThemeCodeDomTreeGenerator : BaseTemplateCodeDomTreeGenerator {
    protected bool NeedProfileProperty { get; }
    internal PageThemeCodeDomTreeGenerator(PageThemeParser parser);
    protected virtual void BuildInitStatements(CodeStatementCollection trueStatements, CodeStatementCollection topLevelStatements);
    protected virtual void BuildMiscClassMembers();
    protected virtual void BuildSourceDataTreeFromBuilder(ControlBuilder builder, bool fInTemplate, bool topLevelControlInTemplate, PropertyEntry pse);
    internal virtual CodeExpression BuildStringPropertyExpression(PropertyEntry pse);
    protected virtual CodeAssignStatement BuildTemplatePropertyStatement(CodeExpression ctrlRefExpr);
    protected virtual string GetGeneratedClassName();
    protected virtual bool UseResourceLiteralString(string s);
    protected virtual bool get_NeedProfileProperty();
}
internal abstract class System.Web.Compilation.PrecompBaseDiskBuildResultCache : DiskBuildResultCache {
    internal PrecompBaseDiskBuildResultCache(string cacheDir);
}
[FlagsAttribute]
public enum System.Web.Compilation.PrecompilationFlags : Enum {
    public int value__;
    public static PrecompilationFlags Default;
    public static PrecompilationFlags Updatable;
    public static PrecompilationFlags OverwriteTarget;
    public static PrecompilationFlags ForceDebug;
    public static PrecompilationFlags Clean;
    public static PrecompilationFlags CodeAnalysis;
    public static PrecompilationFlags AllowPartiallyTrustedCallers;
    public static PrecompilationFlags DelaySign;
    public static PrecompilationFlags FixedNames;
    public static PrecompilationFlags IgnoreBadImageFormatException;
}
internal class System.Web.Compilation.PrecompiledSiteDiskBuildResultCache : PrecompBaseDiskBuildResultCache {
    protected bool PrecompilationMode { get; }
    internal PrecompiledSiteDiskBuildResultCache(string cacheDir);
    protected virtual bool get_PrecompilationMode();
    internal virtual void CacheBuildResult(string cacheKey, BuildResult result, long hashCode, DateTime utcStart);
    internal virtual void RemoveAssemblyAndRelatedFiles(string baseName);
}
internal class System.Web.Compilation.PrecompilerDiskBuildResultCache : PrecompBaseDiskBuildResultCache {
    internal PrecompilerDiskBuildResultCache(string cacheDir);
}
internal class System.Web.Compilation.PreservationFileReader : object {
    internal DiskBuildResultCache DiskCache { get; }
    internal PreservationFileReader(DiskBuildResultCache diskCache, bool precompilationMode);
    internal BuildResult ReadBuildResultFromFile(VirtualPath virtualPath, string preservationFile, long hashCode, bool ensureIsUpToDate);
    internal string GetAttribute(string name);
    internal DiskBuildResultCache get_DiskCache();
}
internal class System.Web.Compilation.PreservationFileWriter : object {
    internal static string fileDependenciesTagName;
    internal static string fileDependencyTagName;
    internal static string buildResultDependenciesTagName;
    internal static string buildResultDependencyTagName;
    internal PreservationFileWriter(bool precompilationMode);
    internal void SaveBuildResultToFile(string preservationFile, BuildResult result, long hashCode);
    internal void SetAttribute(string name, string value);
}
internal enum System.Web.Compilation.PreStartInitStage : Enum {
    public int value__;
    public static PreStartInitStage BeforePreStartInit;
    public static PreStartInitStage DuringPreStartInit;
    public static PreStartInitStage AfterPreStartInit;
}
internal class System.Web.Compilation.ProfileBuildProvider : BuildProvider {
    internal static bool HasCompilableProfile { get; }
    internal static ProfileBuildProvider Create();
    internal static bool get_HasCompilableProfile();
    internal static Type GetProfileTypeFromAssembly(Assembly assembly, bool isPrecompiledApp);
    public virtual void GenerateCode(AssemblyBuilder assemblyBuilder);
}
internal enum System.Web.Compilation.ReferenceAssemblyType : Enum {
    public int value__;
    public static ReferenceAssemblyType FrameworkAssembly;
    public static ReferenceAssemblyType FrameworkAssemblyOnlyPresentInHigherVersion;
    public static ReferenceAssemblyType NonFrameworkAssembly;
}
[ExpressionPrefixAttribute("Resources")]
[ExpressionEditorAttribute("System.Web.UI.Design.ResourceExpressionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.Compilation.ResourceExpressionBuilder : ExpressionBuilder {
    public bool SupportsEvaluate { get; }
    public virtual bool get_SupportsEvaluate();
    public static ResourceExpressionFields ParseExpression(string expression);
    public virtual object ParseExpression(string expression, Type propertyType, ExpressionBuilderContext context);
    public virtual CodeExpression GetCodeExpression(BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context);
    public virtual object EvaluateExpression(object target, BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context);
    internal static object GetGlobalResourceObject(string classKey, string resourceKey);
    internal static object GetGlobalResourceObject(string classKey, string resourceKey, Type objType, string propName, CultureInfo culture);
    internal static object GetResourceObject(IResourceProvider resourceProvider, string resourceKey, CultureInfo culture);
    internal static object GetResourceObject(IResourceProvider resourceProvider, string resourceKey, CultureInfo culture, Type objType, string propName);
    internal static IResourceProvider GetLocalResourceProvider(TemplateControl templateControl);
    internal static IResourceProvider GetLocalResourceProvider(VirtualPath virtualPath);
    internal static object GetParsedData(string resourceKey);
}
public class System.Web.Compilation.ResourceExpressionFields : object {
    public string ClassKey { get; }
    public string ResourceKey { get; }
    internal ResourceExpressionFields(string classKey, string resourceKey);
    public string get_ClassKey();
    public string get_ResourceKey();
}
public abstract class System.Web.Compilation.ResourceProviderFactory : object {
    public abstract virtual IResourceProvider CreateGlobalResourceProvider(string classKey);
    public abstract virtual IResourceProvider CreateLocalResourceProvider(string virtualPath);
}
internal class System.Web.Compilation.ResourcesBuildProvider : BaseResourcesBuildProvider {
    protected virtual IResourceReader GetResourceReader(Stream inputStream);
}
internal class System.Web.Compilation.ResXBuildProvider : BaseResourcesBuildProvider {
    protected virtual IResourceReader GetResourceReader(Stream inputStream);
}
internal class System.Web.Compilation.ResXResourceProviderFactory : ResourceProviderFactory {
    public virtual IResourceProvider CreateGlobalResourceProvider(string classKey);
    public virtual IResourceProvider CreateLocalResourceProvider(string virtualPath);
}
[ExpressionPrefixAttribute("Routes")]
[ExpressionEditorAttribute("System.Web.UI.Design.RouteUrlExpressionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.Compilation.RouteUrlExpressionBuilder : ExpressionBuilder {
    public bool SupportsEvaluate { get; }
    public virtual bool get_SupportsEvaluate();
    public virtual CodeExpression GetCodeExpression(BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context);
    public virtual object EvaluateExpression(object target, BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context);
    public static bool TryParseRouteExpression(string expression, RouteValueDictionary routeValues, String& routeName);
    public static string GetRouteUrl(Control control, string expression);
}
[ExpressionPrefixAttribute("Routes")]
[ExpressionEditorAttribute("System.Web.UI.Design.RouteValueExpressionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.Compilation.RouteValueExpressionBuilder : ExpressionBuilder {
    public bool SupportsEvaluate { get; }
    public virtual bool get_SupportsEvaluate();
    public virtual CodeExpression GetCodeExpression(BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context);
    public virtual object EvaluateExpression(object target, BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context);
    internal static object ConvertRouteValue(object value, Type controlType, string propertyName);
    public static object GetRouteValue(Page page, string key, Type controlType, string propertyName);
}
[BuildProviderAppliesToAttribute("1")]
internal abstract class System.Web.Compilation.SimpleHandlerBuildProvider : InternalBuildProvider {
    internal IAssemblyDependencyParser AssemblyDependencyParser { get; }
    public CompilerType CodeCompilerType { get; }
    public ICollection VirtualPathDependencies { get; }
    internal virtual IAssemblyDependencyParser get_AssemblyDependencyParser();
    protected abstract virtual SimpleWebHandlerParser CreateParser();
    public virtual CompilerType get_CodeCompilerType();
    protected internal virtual CodeCompileUnit GetCodeCompileUnit(IDictionary& linePragmasTable);
    public virtual void GenerateCode(AssemblyBuilder assemblyBuilder);
    public virtual Type GetGeneratedType(CompilerResults results);
    public virtual ICollection get_VirtualPathDependencies();
    internal CompilerType GetDefaultCompilerTypeForLanguageInternal(string language);
    internal CompilerType GetDefaultCompilerTypeInternal();
    internal TextReader OpenReaderInternal();
    internal virtual ICollection GetGeneratedTypeNames();
}
internal class System.Web.Compilation.SourceFileBuildProvider : InternalBuildProvider {
    public CompilerType CodeCompilerType { get; }
    internal BuildProvider OwningBuildProvider { get; internal set; }
    public virtual CompilerType get_CodeCompilerType();
    public virtual void GenerateCode(AssemblyBuilder assemblyBuilder);
    protected internal virtual CodeCompileUnit GetCodeCompileUnit(IDictionary& linePragmasTable);
    internal BuildProvider get_OwningBuildProvider();
    internal void set_OwningBuildProvider(BuildProvider value);
}
internal class System.Web.Compilation.StandardDiskBuildResultCache : DiskBuildResultCache {
    internal StandardDiskBuildResultCache(string cacheDir);
    internal Tuple`2<long, long> GetPreservedSpecialFilesCombinedHash();
    internal static Tuple`2<long, long> GetPreservedSpecialFilesCombinedHash(string fileName);
    internal void SavePreservedSpecialFilesCombinedHash(Tuple`2<long, long> hash);
    internal static void SavePreservedSpecialFilesCombinedHash(string hashFilePath, Tuple`2<long, long> hash);
    internal static void RemoveSatelliteAssemblies(string baseAssemblyName);
    internal void RemoveOldTempFiles();
    internal void RemoveAllCodegenFiles();
    internal void DeleteFilesInDirectory(string path);
}
internal abstract class System.Web.Compilation.TemplateControlBuildProvider : BaseTemplateBuildProvider {
    internal virtual DependencyParser CreateDependencyParser();
    internal virtual ICollection GetBuildResultVirtualPathDependencies();
    internal virtual BuildResult CreateBuildResult(CompilerResults results);
    public virtual Type GetGeneratedType(CompilerResults results);
    internal abstract virtual BuildResultNoCompileTemplateControl CreateNoCompileBuildResult();
}
internal abstract class System.Web.Compilation.TemplateControlCodeDomTreeGenerator : BaseTemplateCodeDomTreeGenerator {
    internal static int badBaseClassLineMarker;
    internal TemplateControlCodeDomTreeGenerator(TemplateControlParser tcParser);
    protected virtual void BuildInitStatements(CodeStatementCollection trueStatements, CodeStatementCollection topLevelStatements);
    protected virtual void BuildMiscClassMembers();
    internal void BuildStronglyTypedProperty(string propertyName, Type propertyType);
    protected virtual void BuildFrameworkInitializeMethodContents(CodeMemberMethod method);
}
internal static class System.Web.Compilation.ThemeDirectoryCompiler : object {
    internal static string skinExtension;
    internal static VirtualPath GetAppThemeVirtualDir(string themeName);
    internal static VirtualPath GetGlobalThemeVirtualDir(string themeName);
    internal static BuildResultCompiledType GetThemeBuildResultType(HttpContext context, string themeName);
}
internal class System.Web.Compilation.TimeStampChecker : object {
    internal static string CallContextSlotName;
    internal static void AddFile(string virtualPath, string path);
    internal static bool CheckFilesStillValid(string key, ICollection virtualPaths);
}
internal class System.Web.Compilation.UpdatablePrecompilerDiskBuildResultCache : PrecompilerDiskBuildResultCache {
    internal UpdatablePrecompilerDiskBuildResultCache(string cacheDir);
    internal virtual void CacheBuildResult(string cacheKey, BuildResult result, long hashCode, DateTime utcStart);
}
[BuildProviderAppliesToAttribute("3")]
internal class System.Web.Compilation.UserControlBuildProvider : TemplateControlBuildProvider {
    internal virtual DependencyParser CreateDependencyParser();
    protected virtual TemplateParser CreateParser();
    internal virtual BaseCodeDomTreeGenerator CreateCodeDomTreeGenerator(TemplateParser parser);
    internal virtual BuildResultNoCompileTemplateControl CreateNoCompileBuildResult();
}
internal class System.Web.Compilation.UserControlCodeDomTreeGenerator : TemplateControlCodeDomTreeGenerator {
    protected UserControlParser _ucParser;
    internal UserControlCodeDomTreeGenerator(UserControlParser ucParser);
    protected virtual void GenerateClassAttributes();
}
internal class System.Web.Compilation.WebDirectoryBatchCompiler : object {
    internal WebDirectoryBatchCompiler(VirtualDirectory vdir);
    internal void SetIgnoreErrors();
    internal void Process();
}
internal class System.Web.Compilation.WebHandlerBuildProvider : SimpleHandlerBuildProvider {
    protected virtual SimpleWebHandlerParser CreateParser();
}
internal class System.Web.Compilation.WebReferencesBuildProvider : BuildProvider {
    internal WebReferencesBuildProvider(VirtualDirectory vdir);
    public virtual void GenerateCode(AssemblyBuilder assemblyBuilder);
}
internal class System.Web.Compilation.WebServiceBuildProvider : SimpleHandlerBuildProvider {
    protected virtual SimpleWebHandlerParser CreateParser();
}
[BuildProviderAppliesToAttribute("2")]
internal class System.Web.Compilation.WsdlBuildProvider : BuildProvider {
    public virtual void GenerateCode(AssemblyBuilder assemblyBuilder);
}
[BuildProviderAppliesToAttribute("2")]
internal class System.Web.Compilation.XsdBuildProvider : BuildProvider {
    public virtual void GenerateCode(AssemblyBuilder assemblyBuilder);
}
internal class System.Web.ConfigErrorFormatter : FormatterWithFileInfo {
    protected string _message;
    public bool AllowSourceCode { get; public set; }
    protected Encoding SourceFileEncoding { get; }
    protected Exception Exception { get; }
    protected string ErrorTitle { get; }
    protected string Description { get; }
    protected string MiscSectionTitle { get; }
    protected string MiscSectionContent { get; }
    protected string ColoredSquareTitle { get; }
    protected StringCollection AdaptiveMiscContent { get; }
    protected string ColoredSquareContent { get; }
    internal ConfigErrorFormatter(ConfigurationException e);
    public bool get_AllowSourceCode();
    public void set_AllowSourceCode(bool value);
    protected virtual Encoding get_SourceFileEncoding();
    protected virtual Exception get_Exception();
    protected virtual string get_ErrorTitle();
    protected virtual string get_Description();
    protected virtual string get_MiscSectionTitle();
    protected virtual string get_MiscSectionContent();
    protected virtual string get_ColoredSquareTitle();
    protected virtual StringCollection get_AdaptiveMiscContent();
    protected virtual string get_ColoredSquareContent();
}
[DefaultMemberAttribute("Item")]
public class System.Web.Configuration.AdapterDictionary : OrderedDictionary {
    public string Item { get; public set; }
    public string get_Item(string key);
    public void set_Item(string key, string value);
}
public class System.Web.Configuration.AnonymousIdentificationSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("enabled")]
public bool Enabled { get; public set; }
    [ConfigurationPropertyAttribute("cookieName")]
[StringValidatorAttribute]
public string CookieName { get; public set; }
    [ConfigurationPropertyAttribute("cookieTimeout")]
[TimeSpanValidatorAttribute]
[TypeConverterAttribute("System.Configuration.TimeSpanMinutesOrInfiniteConverter")]
public TimeSpan CookieTimeout { get; public set; }
    [ConfigurationPropertyAttribute("cookiePath")]
[StringValidatorAttribute]
public string CookiePath { get; public set; }
    [ConfigurationPropertyAttribute("cookieRequireSSL")]
public bool CookieRequireSSL { get; public set; }
    [ConfigurationPropertyAttribute("cookieSlidingExpiration")]
public bool CookieSlidingExpiration { get; public set; }
    [ConfigurationPropertyAttribute("cookieProtection")]
public CookieProtection CookieProtection { get; public set; }
    [ConfigurationPropertyAttribute("cookieless")]
public HttpCookieMode Cookieless { get; public set; }
    [ConfigurationPropertyAttribute("domain")]
public string Domain { get; public set; }
    private static AnonymousIdentificationSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public string get_CookieName();
    public void set_CookieName(string value);
    public TimeSpan get_CookieTimeout();
    public void set_CookieTimeout(TimeSpan value);
    public string get_CookiePath();
    public void set_CookiePath(string value);
    public bool get_CookieRequireSSL();
    public void set_CookieRequireSSL(bool value);
    public bool get_CookieSlidingExpiration();
    public void set_CookieSlidingExpiration(bool value);
    public CookieProtection get_CookieProtection();
    public void set_CookieProtection(CookieProtection value);
    public HttpCookieMode get_Cookieless();
    public void set_Cookieless(HttpCookieMode value);
    public string get_Domain();
    public void set_Domain(string value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.AssemblyInfo")]
public class System.Web.Configuration.AssemblyCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public AssemblyInfo Item { get; public set; }
    public AssemblyInfo Item { get; }
    private static AssemblyCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public AssemblyInfo get_Item(int index);
    public void set_Item(int index, AssemblyInfo value);
    public AssemblyInfo get_Item(string assemblyName);
    public void Add(AssemblyInfo assemblyInformation);
    public void Remove(string key);
    public void RemoveAt(int index);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public void Clear();
    internal bool IsRemoved(string key);
}
public class System.Web.Configuration.AssemblyInfo : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("assembly")]
[StringValidatorAttribute]
public string Assembly { get; public set; }
    internal Assembly[] AssemblyInternal { get; internal set; }
    private static AssemblyInfo();
    public AssemblyInfo(string assemblyName);
    internal void SetCompilationReference(CompilationSection compSection);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Assembly();
    public void set_Assembly(string value);
    internal Assembly[] get_AssemblyInternal();
    internal void set_AssemblyInternal(Assembly[] value);
}
[FlagsAttribute]
public enum System.Web.Configuration.AsyncPreloadModeFlags : Enum {
    public int value__;
    public static AsyncPreloadModeFlags None;
    public static AsyncPreloadModeFlags Form;
    public static AsyncPreloadModeFlags FormMultiPart;
    public static AsyncPreloadModeFlags NonForm;
    public static AsyncPreloadModeFlags AllFormTypes;
    public static AsyncPreloadModeFlags All;
}
internal static class System.Web.Configuration.AuthenticationConfig : object {
    internal static AuthenticationMode Mode { get; internal set; }
    internal static AuthenticationMode get_Mode();
    internal static void set_Mode(AuthenticationMode value);
    internal static string GetCompleteLoginUrl(HttpContext context, string loginUrl);
    internal static bool AccessingLoginPage(HttpContext context, string loginUrl);
}
public enum System.Web.Configuration.AuthenticationMode : Enum {
    public int value__;
    public static AuthenticationMode None;
    public static AuthenticationMode Windows;
    [ObsoleteAttribute("This field is obsolete. The Passport authentication product is no longer supported and has been superseded by Live ID.")]
public static AuthenticationMode Passport;
    public static AuthenticationMode Forms;
}
public class System.Web.Configuration.AuthenticationSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("forms")]
public FormsAuthenticationConfiguration Forms { get; }
    [ConfigurationPropertyAttribute("passport")]
[ObsoleteAttribute("This property is obsolete. The Passport authentication product is no longer supported and has been superseded by Live ID.")]
public PassportAuthentication Passport { get; }
    [ConfigurationPropertyAttribute("mode")]
public AuthenticationMode Mode { get; public set; }
    private static AuthenticationSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public FormsAuthenticationConfiguration get_Forms();
    public PassportAuthentication get_Passport();
    public AuthenticationMode get_Mode();
    public void set_Mode(AuthenticationMode value);
    protected virtual void Reset(ConfigurationElement parentElement);
    internal void ValidateAuthenticationMode();
}
public class System.Web.Configuration.AuthorizationRule : ConfigurationElement {
    internal string _ActionString;
    internal bool Everyone { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    public AuthorizationRuleAction Action { get; public set; }
    [ConfigurationPropertyAttribute("verbs")]
[TypeConverterAttribute("System.Configuration.CommaDelimitedStringCollectionConverter")]
public StringCollection Verbs { get; }
    [ConfigurationPropertyAttribute("users")]
[TypeConverterAttribute("System.Configuration.CommaDelimitedStringCollectionConverter")]
public StringCollection Users { get; }
    [ConfigurationPropertyAttribute("roles")]
[TypeConverterAttribute("System.Configuration.CommaDelimitedStringCollectionConverter")]
public StringCollection Roles { get; }
    internal StringCollection UsersExpanded { get; }
    internal StringCollection RolesExpanded { get; }
    internal bool IncludesAnonymous { get; }
    private static AuthorizationRule();
    public AuthorizationRule(AuthorizationRuleAction action);
    internal bool get_Everyone();
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected virtual void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    protected virtual void Reset(ConfigurationElement parentElement);
    internal void AddRole(string role);
    internal void AddUser(string user);
    protected virtual bool IsModified();
    protected virtual void ResetModified();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual void SetReadOnly();
    public AuthorizationRuleAction get_Action();
    public void set_Action(AuthorizationRuleAction value);
    public StringCollection get_Verbs();
    public StringCollection get_Users();
    public StringCollection get_Roles();
    internal StringCollection get_UsersExpanded();
    internal StringCollection get_RolesExpanded();
    protected virtual bool SerializeElement(XmlWriter writer, bool serializeCollectionKey);
    internal bool get_IncludesAnonymous();
    protected virtual void PreSerialize(XmlWriter writer);
    protected virtual void PostDeserialize();
    internal int IsUserAllowed(IPrincipal user, string verb);
}
public enum System.Web.Configuration.AuthorizationRuleAction : Enum {
    public int value__;
    public static AuthorizationRuleAction Deny;
    public static AuthorizationRuleAction Allow;
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.AuthorizationRule")]
public class System.Web.Configuration.AuthorizationRuleCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public AuthorizationRule Item { get; public set; }
    protected string ElementName { get; }
    public ConfigurationElementCollectionType CollectionType { get; }
    private static AuthorizationRuleCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public AuthorizationRule get_Item(int index);
    public void set_Item(int index, AuthorizationRule value);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual ConfigurationElement CreateNewElement(string elementName);
    protected virtual object GetElementKey(ConfigurationElement element);
    protected virtual string get_ElementName();
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual bool IsElementName(string elementname);
    internal bool IsUserAllowed(IPrincipal user, string verb);
    public void Add(AuthorizationRule rule);
    public void Clear();
    public AuthorizationRule Get(int index);
    public void RemoveAt(int index);
    public void Set(int index, AuthorizationRule rule);
    public int IndexOf(AuthorizationRule rule);
    public void Remove(AuthorizationRule rule);
}
public class System.Web.Configuration.AuthorizationSection : ConfigurationSection {
    internal bool EveryoneAllowed { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("")]
public AuthorizationRuleCollection Rules { get; }
    private static AuthorizationSection();
    internal bool get_EveryoneAllowed();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public AuthorizationRuleCollection get_Rules();
    protected virtual void PostDeserialize();
    internal bool IsUserAllowed(IPrincipal user, string verb);
}
public class System.Web.Configuration.BrowserCapabilitiesCodeGenerator : object {
    internal static string browserCapsVariable;
    internal static string IgnoreApplicationBrowserVariableName;
    internal BrowserTree BrowserTree { get; }
    internal BrowserTree DefaultTree { get; }
    internal ArrayList CustomTreeList { get; }
    internal ArrayList CustomTreeNames { get; }
    internal static string BrowserCapAssemblyPublicKeyToken { get; }
    internal bool GenerateOverrides { get; }
    internal string TypeName { get; }
    private static BrowserCapabilitiesCodeGenerator();
    internal BrowserTree get_BrowserTree();
    internal BrowserTree get_DefaultTree();
    internal ArrayList get_CustomTreeList();
    internal ArrayList get_CustomTreeNames();
    internal static string get_BrowserCapAssemblyPublicKeyToken();
    internal virtual bool get_GenerateOverrides();
    internal virtual string get_TypeName();
    internal void AddFile(string filePath);
    internal void AddCustomFile(string filePath);
    public virtual void Create();
    internal bool UninstallInternal();
    public bool Uninstall();
    internal void ProcessBrowserFiles();
    internal virtual void ProcessBrowserNode(XmlNode node, BrowserTree browserTree);
    protected void ProcessBrowserFiles(bool useVirtualPath, string virtualDir);
    internal void ProcessCustomBrowserFiles();
    internal void ProcessCustomBrowserFiles(bool useVirtualPath, string virtualDir);
    internal void AddCustomBrowserToCollectionRecursive(BrowserDefinition bd, int depth, int index);
    internal void AddBrowserToCollectionRecursive(BrowserDefinition bd, int depth);
    internal virtual void HandleUnRecognizedParentElement(BrowserDefinition bd, bool isDefault);
    internal void GenerateOverrideBrowserElements(CodeTypeDeclaration typeDeclaration);
    internal void GenerateOverrideMatchedHeaders(CodeTypeDeclaration typeDeclaration);
    internal void GenerateProcessMethod(BrowserDefinition bd, CodeTypeDeclaration ctd);
    internal void GenerateProcessMethod(BrowserDefinition bd, CodeTypeDeclaration ctd, string prefix);
    internal void GenerateSetAdaptersCode(BrowserDefinition bd, CodeMemberMethod cmm);
    internal void AddComment(string comment, CodeMemberMethod cmm);
    internal CodeStatementCollection GenerateTrackedSingleProcessCall(CodeStatementCollection stmts, BrowserDefinition bd, CodeMemberMethod cmm);
    internal CodeStatementCollection GenerateTrackedSingleProcessCall(CodeStatementCollection stmts, BrowserDefinition bd, CodeMemberMethod cmm, string prefix);
    internal void GenerateSingleProcessCall(BrowserDefinition bd, CodeMemberMethod cmm);
    internal void GenerateSingleProcessCall(BrowserDefinition bd, CodeMemberMethod cmm, string prefix);
}
public class System.Web.Configuration.BrowserCapabilitiesFactory : BrowserCapabilitiesFactoryBase {
    public virtual void ConfigureBrowserCapabilities(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void IeProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void IeProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Ie6plusProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Ie6plusProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Ie6to9ProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Ie6to9ProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Ie7ProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Ie7ProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Ie8ProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Ie8ProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Ie9ProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Ie9ProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Ie10plusProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Ie10plusProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void IebetaProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void IebetaProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void InternetexplorerProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void InternetexplorerProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void BlackberryProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void BlackberryProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void OperaProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void OperaProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void OperaminiProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void OperaminiProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void OperamobileProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void OperamobileProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Opera8plusProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Opera8plusProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Opera8to9ProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Opera8to9ProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Opera10ProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Opera10ProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void ChromeProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void ChromeProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void DefaultProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void DefaultProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void FirefoxProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void FirefoxProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Firefox3plusProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Firefox3plusProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Firefox3ProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Firefox3ProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Firefox35ProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Firefox35ProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void CrawlerProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void CrawlerProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void PlatformProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void PlatformProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void PlatformwinntProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void PlatformwinntProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void PlatformwinxpProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void PlatformwinxpProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Platformwin2000aProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Platformwin2000aProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Platformwin2000bProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Platformwin2000bProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Platformwin95ProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Platformwin95ProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Platformwin98ProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Platformwin98ProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Platformwin16ProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Platformwin16ProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void PlatformwinceProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void PlatformwinceProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Platformmac68kProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Platformmac68kProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void PlatformmacppcProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void PlatformmacppcProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void PlatformunixProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void PlatformunixProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void PlatformwebtvProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void PlatformwebtvProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void WinProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void WinProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Win32ProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Win32ProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Win16ProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Win16ProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void GenericdownlevelProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void GenericdownlevelProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void MozillaProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void MozillaProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void WebkitProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void WebkitProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void WebkitmobileProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void WebkitmobileProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void IemobileProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void IemobileProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void WindowsphoneProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void WindowsphoneProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void MonoProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void MonoProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void PixelsProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void PixelsProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void OSProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void OSProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void CpuProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void CpuProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void VoiceProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void VoiceProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void IphoneProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void IphoneProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void IpodProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void IpodProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void IpadProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void IpadProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void SafariProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void SafariProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Safari3plusProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Safari3plusProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Safari3to4ProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Safari3to4ProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Safari4ProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void Safari4ProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void UcbrowserProcessGateways(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void UcbrowserProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void DefaultDefaultProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void DefaultWmlProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void DefaultXhtmlmpProcessBrowsers(bool ignoreApplicationBrowsers, NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    protected virtual void PopulateMatchedHeaders(IDictionary dictionary);
    protected virtual void PopulateBrowserElements(IDictionary dictionary);
}
internal class System.Web.Configuration.BrowserCapabilitiesFactory35 : BrowserCapabilitiesFactoryBase {
    protected virtual void PopulateBrowserElements(IDictionary dictionary);
}
public class System.Web.Configuration.BrowserCapabilitiesFactoryBase : object {
    [EditorBrowsableAttribute("2")]
protected IDictionary BrowserElements { get; }
    [EditorBrowsableAttribute("2")]
protected IDictionary MatchedHeaders { get; }
    protected IDictionary get_BrowserElements();
    [EditorBrowsableAttribute("2")]
protected virtual void PopulateBrowserElements(IDictionary dictionary);
    internal IDictionary InternalGetMatchedHeaders();
    internal IDictionary InternalGetBrowserElements();
    protected IDictionary get_MatchedHeaders();
    [EditorBrowsableAttribute("2")]
protected virtual void PopulateMatchedHeaders(IDictionary dictionary);
    internal int CompareFilters(string filter1, string filter2);
    public virtual void ConfigureBrowserCapabilities(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    public virtual void ConfigureCustomCapabilities(NameValueCollection headers, HttpBrowserCapabilities browserCaps);
    internal static string GetBrowserCapKey(IDictionary headers, HttpRequest request);
    internal HttpBrowserCapabilities GetHttpBrowserCapabilities(HttpRequest request);
    protected bool IsBrowserUnknown(HttpCapabilitiesBase browserCaps);
}
internal enum System.Web.Configuration.BrowserCapsElementType : Enum {
    public int value__;
    public static BrowserCapsElementType Capabilities;
    public static BrowserCapsElementType Capture;
    public static BrowserCapsElementType ControlAdapters;
    public static BrowserCapsElementType Identification;
    public static BrowserCapsElementType SampleHeaders;
}
internal class System.Web.Configuration.BrowserDefinition : object {
    public bool IsDefaultBrowser { get; }
    public BrowserDefinitionCollection Browsers { get; }
    public BrowserDefinitionCollection RefBrowsers { get; }
    public BrowserDefinitionCollection RefGateways { get; }
    public BrowserDefinitionCollection Gateways { get; }
    public string ID { get; }
    public string Name { get; }
    public string ParentName { get; }
    internal bool IsDeviceNode { get; internal set; }
    internal int Depth { get; internal set; }
    public string ParentID { get; }
    internal bool IsRefID { get; }
    public NameValueCollection Capabilities { get; }
    public ArrayList IdHeaderChecks { get; }
    public ArrayList CaptureHeaderChecks { get; }
    public ArrayList IdCapabilityChecks { get; }
    public ArrayList CaptureCapabilityChecks { get; }
    public AdapterDictionary Adapters { get; }
    internal XmlNode XmlNode { get; }
    public string HtmlTextWriterString { get; }
    internal BrowserDefinition(XmlNode node);
    internal BrowserDefinition(XmlNode node, bool isDefaultBrowser);
    internal static string MakeValidTypeNameFromString(string s);
    public bool get_IsDefaultBrowser();
    public BrowserDefinitionCollection get_Browsers();
    public BrowserDefinitionCollection get_RefBrowsers();
    public BrowserDefinitionCollection get_RefGateways();
    public BrowserDefinitionCollection get_Gateways();
    public string get_ID();
    public string get_Name();
    public string get_ParentName();
    internal bool get_IsDeviceNode();
    internal void set_IsDeviceNode(bool value);
    internal int get_Depth();
    internal void set_Depth(int value);
    public string get_ParentID();
    internal bool get_IsRefID();
    public NameValueCollection get_Capabilities();
    public ArrayList get_IdHeaderChecks();
    public ArrayList get_CaptureHeaderChecks();
    public ArrayList get_IdCapabilityChecks();
    public ArrayList get_CaptureCapabilityChecks();
    public AdapterDictionary get_Adapters();
    internal XmlNode get_XmlNode();
    public string get_HtmlTextWriterString();
    internal void ProcessIdentificationNode(XmlNode node, BrowserCapsElementType elementType);
    internal void ProcessCaptureNode(XmlNode node, BrowserCapsElementType elementType);
    internal void ProcessCapabilitiesNode(XmlNode node);
    internal void ProcessControlAdaptersNode(XmlNode node);
    internal void MergeWithDefinition(BrowserDefinition definition);
}
internal class System.Web.Configuration.BrowserDefinitionCollection : ArrayList {
}
internal class System.Web.Configuration.BrowserTree : OrderedDictionary {
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.BufferModeSettings")]
public class System.Web.Configuration.BufferModesCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public BufferModeSettings Item { get; }
    public BufferModeSettings Item { get; public set; }
    private static BufferModesCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public void Add(BufferModeSettings bufferModeSettings);
    public void Remove(string s);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public BufferModeSettings get_Item(string key);
    public BufferModeSettings get_Item(int index);
    public void set_Item(int index, BufferModeSettings value);
}
public class System.Web.Configuration.BufferModeSettings : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
[StringValidatorAttribute]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("maxBufferSize")]
[TypeConverterAttribute("System.Configuration.InfiniteIntConverter")]
[IntegerValidatorAttribute]
public int MaxBufferSize { get; public set; }
    [ConfigurationPropertyAttribute("maxFlushSize")]
[TypeConverterAttribute("System.Configuration.InfiniteIntConverter")]
[IntegerValidatorAttribute]
public int MaxFlushSize { get; public set; }
    [ConfigurationPropertyAttribute("urgentFlushThreshold")]
[TypeConverterAttribute("System.Configuration.InfiniteIntConverter")]
[IntegerValidatorAttribute]
public int UrgentFlushThreshold { get; public set; }
    [ConfigurationPropertyAttribute("regularFlushInterval")]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
[TimeSpanValidatorAttribute]
public TimeSpan RegularFlushInterval { get; public set; }
    [ConfigurationPropertyAttribute("urgentFlushInterval")]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
public TimeSpan UrgentFlushInterval { get; public set; }
    [ConfigurationPropertyAttribute("maxBufferThreads")]
[TypeConverterAttribute("System.Configuration.InfiniteIntConverter")]
[IntegerValidatorAttribute]
public int MaxBufferThreads { get; public set; }
    protected ConfigurationElementProperty ElementProperty { get; }
    private static BufferModeSettings();
    public BufferModeSettings(string name, int maxBufferSize, int maxFlushSize, int urgentFlushThreshold, TimeSpan regularFlushInterval, TimeSpan urgentFlushInterval, int maxBufferThreads);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public void set_Name(string value);
    public int get_MaxBufferSize();
    public void set_MaxBufferSize(int value);
    public int get_MaxFlushSize();
    public void set_MaxFlushSize(int value);
    public int get_UrgentFlushThreshold();
    public void set_UrgentFlushThreshold(int value);
    public TimeSpan get_RegularFlushInterval();
    public void set_RegularFlushInterval(TimeSpan value);
    public TimeSpan get_UrgentFlushInterval();
    public void set_UrgentFlushInterval(TimeSpan value);
    public int get_MaxBufferThreads();
    public void set_MaxBufferThreads(int value);
    protected virtual ConfigurationElementProperty get_ElementProperty();
}
public class System.Web.Configuration.BuildProvider : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("extension")]
[StringValidatorAttribute]
public string Extension { get; public set; }
    [ConfigurationPropertyAttribute("type")]
[StringValidatorAttribute]
public string Type { get; public set; }
    internal BuildProviderInfo BuildProviderInfo { get; }
    private static BuildProvider();
    public BuildProvider(string extension, string type);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public virtual bool Equals(object provider);
    public virtual int GetHashCode();
    public string get_Extension();
    public void set_Extension(string value);
    public string get_Type();
    public void set_Type(string value);
    internal BuildProviderInfo get_BuildProviderInfo();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.BuildProvider")]
public class System.Web.Configuration.BuildProviderCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public BuildProvider Item { get; }
    public BuildProvider Item { get; public set; }
    private static BuildProviderCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public BuildProvider get_Item(string name);
    public BuildProvider get_Item(int index);
    public void set_Item(int index, BuildProvider value);
    public void Add(BuildProvider buildProvider);
    public void Remove(string name);
    public void RemoveAt(int index);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
public class System.Web.Configuration.CacheSection : ConfigurationSection {
    internal static TimeSpan DefaultPrivateBytesPollTime;
    [ConfigurationPropertyAttribute("disableMemoryCollection")]
public bool DisableMemoryCollection { get; public set; }
    [ConfigurationPropertyAttribute("disableExpiration")]
public bool DisableExpiration { get; public set; }
    [ConfigurationPropertyAttribute("privateBytesLimit")]
[LongValidatorAttribute]
public long PrivateBytesLimit { get; public set; }
    [ConfigurationPropertyAttribute("percentagePhysicalMemoryUsedLimit")]
[IntegerValidatorAttribute]
public int PercentagePhysicalMemoryUsedLimit { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("privateBytesPollTime")]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
public TimeSpan PrivateBytesPollTime { get; public set; }
    private static CacheSection();
    public bool get_DisableMemoryCollection();
    public void set_DisableMemoryCollection(bool value);
    public bool get_DisableExpiration();
    public void set_DisableExpiration(bool value);
    public long get_PrivateBytesLimit();
    public void set_PrivateBytesLimit(long value);
    public int get_PercentagePhysicalMemoryUsedLimit();
    public void set_PercentagePhysicalMemoryUsedLimit(int value);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public TimeSpan get_PrivateBytesPollTime();
    public void set_PrivateBytesPollTime(TimeSpan value);
}
internal class System.Web.Configuration.CapabilitiesAssignment : CapabilitiesRule {
    internal string _var;
    internal CapabilitiesPattern _pat;
    internal CapabilitiesAssignment(string var, CapabilitiesPattern pat);
    internal virtual void Evaluate(CapabilitiesState state);
}
internal class System.Web.Configuration.CapabilitiesPattern : object {
    internal String[] _strings;
    internal Int32[] _rules;
    internal static int Literal;
    internal static int Reference;
    internal static int Variable;
    internal static Regex refPat;
    internal static Regex varPat;
    internal static Regex textPat;
    internal static Regex errorPat;
    internal static CapabilitiesPattern Default;
    internal CapabilitiesPattern(string text);
    private static CapabilitiesPattern();
    internal virtual string Expand(CapabilitiesState matchstate);
}
internal abstract class System.Web.Configuration.CapabilitiesRule : object {
    internal static int Use;
    internal static int Assign;
    internal static int Filter;
    internal static int Case;
    internal int _type;
    internal int Type { get; }
    internal virtual int get_Type();
    internal abstract virtual void Evaluate(CapabilitiesState state);
}
internal class System.Web.Configuration.CapabilitiesSection : CapabilitiesRule {
    internal CapabilitiesPattern _expr;
    internal DelayedRegex _regex;
    internal CapabilitiesRule[] _rules;
    internal CapabilitiesSection(int type, DelayedRegex regex, CapabilitiesPattern expr, ArrayList rulelist);
    internal virtual void Evaluate(CapabilitiesState state);
}
internal class System.Web.Configuration.CapabilitiesState : object {
    internal HttpRequest _request;
    internal IDictionary _values;
    internal ArrayList _matchlist;
    internal ArrayList _regexlist;
    internal bool _exit;
    internal bool _evaluateOnlyUserAgent;
    internal bool EvaluateOnlyUserAgent { get; internal set; }
    internal bool Exit { get; internal set; }
    internal CapabilitiesState(HttpRequest request, IDictionary values);
    internal bool get_EvaluateOnlyUserAgent();
    internal void set_EvaluateOnlyUserAgent(bool value);
    internal virtual void ClearMatch();
    internal virtual void AddMatch(DelayedRegex regex, Match match);
    internal virtual void PopMatch();
    internal virtual string ResolveReference(string refname);
    internal virtual string ResolveServerVariable(string varname);
    internal virtual string ResolveVariable(string varname);
    internal virtual void SetVariable(string varname, string value);
    internal virtual bool get_Exit();
    internal virtual void set_Exit(bool value);
}
internal class System.Web.Configuration.CapabilitiesUse : CapabilitiesRule {
    internal string _var;
    internal string _as;
    internal CapabilitiesUse(string var, string asParam);
    internal virtual void Evaluate(CapabilitiesState state);
}
internal class System.Web.Configuration.CheckPair : object {
    public string Header { get; }
    public string MatchString { get; }
    public bool NonMatch { get; }
    internal CheckPair(string header, string match, bool nonMatch);
    internal CheckPair(string header, string match);
    public string get_Header();
    public string get_MatchString();
    public bool get_NonMatch();
}
internal class System.Web.Configuration.ClientRuntimeConfig : RuntimeConfig {
    protected virtual object GetSectionObject(string sectionName);
}
public class System.Web.Configuration.ClientTarget : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("alias")]
[StringValidatorAttribute]
public string Alias { get; }
    [ConfigurationPropertyAttribute("userAgent")]
[StringValidatorAttribute]
public string UserAgent { get; }
    private static ClientTarget();
    public ClientTarget(string alias, string userAgent);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Alias();
    public string get_UserAgent();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.ClientTarget")]
public class System.Web.Configuration.ClientTargetCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public String[] AllKeys { get; }
    public ClientTarget Item { get; }
    public ClientTarget Item { get; public set; }
    private static ClientTargetCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public String[] get_AllKeys();
    public string GetKey(int index);
    public void Add(ClientTarget clientTarget);
    public void Remove(string name);
    public void Remove(ClientTarget clientTarget);
    public void RemoveAt(int index);
    public ClientTarget get_Item(string name);
    public ClientTarget get_Item(int index);
    public void set_Item(int index, ClientTarget value);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
public class System.Web.Configuration.ClientTargetSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("")]
public ClientTargetCollection ClientTargets { get; }
    private static ClientTargetSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public ClientTargetCollection get_ClientTargets();
}
internal enum System.Web.Configuration.ClsCtx : Enum {
    public int value__;
    public static ClsCtx Inproc;
    public static ClsCtx Server;
    public static ClsCtx All;
    public static ClsCtx InprocServer;
    public static ClsCtx InprocHandler;
    public static ClsCtx LocalServer;
    public static ClsCtx InprocServer16;
    public static ClsCtx RemoteServer;
    public static ClsCtx InprocHandler16;
    public static ClsCtx InprocServerX86;
    public static ClsCtx InprocHandlerX86;
    public static ClsCtx EServerHandler;
    public static ClsCtx Reserved;
    public static ClsCtx NoCodeDownload;
    public static ClsCtx NoWX86Translation;
    public static ClsCtx NoCustomMarshal;
    public static ClsCtx EnableCodeDownload;
    public static ClsCtx NoFailureLog;
    public static ClsCtx DisableAAA;
    public static ClsCtx EnableAAA;
    public static ClsCtx FromDefaultContext;
}
internal class System.Web.Configuration.COAUTHIDENTITY : object {
    internal string user;
    internal int userlen;
    internal string domain;
    internal int domainlen;
    internal string password;
    internal int passwordlen;
    internal int flags;
    internal COAUTHIDENTITY(string usr, string dom, string pwd);
}
internal class System.Web.Configuration.COAUTHIDENTITY_X64 : object {
    internal string user;
    internal int userlen;
    internal int padding1;
    internal string domain;
    internal int domainlen;
    internal int padding2;
    internal string password;
    internal int passwordlen;
    internal int flags;
    internal COAUTHIDENTITY_X64(string usr, string dom, string pwd);
}
internal class System.Web.Configuration.COAUTHINFO : object {
    internal RpcAuthent authnsvc;
    internal RpcAuthor authzsvc;
    internal string serverprincname;
    internal RpcLevel authnlevel;
    internal RpcImpers impersonationlevel;
    internal IntPtr authidentitydata;
    internal int capabilities;
    internal COAUTHINFO(RpcAuthent authent, RpcAuthor author, string serverprinc, RpcLevel level, RpcImpers impers, IntPtr ciptr);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual override void Finalize();
}
internal class System.Web.Configuration.COAUTHINFO_X64 : object {
    internal RpcAuthent authnsvc;
    internal RpcAuthor authzsvc;
    internal string serverprincname;
    internal RpcLevel authnlevel;
    internal RpcImpers impersonationlevel;
    internal IntPtr authidentitydata;
    internal int capabilities;
    internal int padding;
    internal COAUTHINFO_X64(RpcAuthent authent, RpcAuthor author, string serverprinc, RpcLevel level, RpcImpers impers, IntPtr ciptr);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual override void Finalize();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.CodeSubDirectory")]
public class System.Web.Configuration.CodeSubDirectoriesCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public CodeSubDirectory Item { get; public set; }
    public ConfigurationElementCollectionType CollectionType { get; }
    protected string ElementName { get; }
    private static CodeSubDirectoriesCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public CodeSubDirectory get_Item(int index);
    public void set_Item(int index, CodeSubDirectory value);
    public void Add(CodeSubDirectory codeSubDirectory);
    public void Clear();
    public void Remove(string directoryName);
    public void RemoveAt(int index);
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual string get_ElementName();
    protected virtual object GetElementKey(ConfigurationElement element);
    internal void EnsureRuntimeValidation();
}
public class System.Web.Configuration.CodeSubDirectory : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("directoryName")]
[TypeConverterAttribute("System.Configuration.WhiteSpaceTrimStringConverter")]
public string DirectoryName { get; public set; }
    internal string AssemblyName { get; }
    private static CodeSubDirectory();
    public CodeSubDirectory(string directoryName);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_DirectoryName();
    public void set_DirectoryName(string value);
    internal string get_AssemblyName();
    internal void DoRuntimeValidation();
}
internal class System.Web.Configuration.Common.ModulesEntry : object {
    internal string ModuleName { get; }
    internal ModulesEntry(string name, string typeName, string propertyName, ConfigurationElement configElement);
    internal static bool IsTypeMatch(Type type, string typeName);
    internal string get_ModuleName();
    internal IHttpModule Create();
}
public class System.Web.Configuration.CompilationSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("tempDirectory")]
public string TempDirectory { get; public set; }
    [ConfigurationPropertyAttribute("debug")]
public bool Debug { get; public set; }
    [ConfigurationPropertyAttribute("strict")]
public bool Strict { get; public set; }
    [ConfigurationPropertyAttribute("explicit")]
public bool Explicit { get; public set; }
    [ConfigurationPropertyAttribute("batch")]
public bool Batch { get; public set; }
    [ConfigurationPropertyAttribute("optimizeCompilations")]
public bool OptimizeCompilations { get; public set; }
    [ConfigurationPropertyAttribute("urlLinePragmas")]
public bool UrlLinePragmas { get; public set; }
    [ConfigurationPropertyAttribute("batchTimeout")]
[TimeSpanValidatorAttribute]
[TypeConverterAttribute("System.Configuration.TimeSpanSecondsOrInfiniteConverter")]
public TimeSpan BatchTimeout { get; public set; }
    [ConfigurationPropertyAttribute("maxBatchSize")]
public int MaxBatchSize { get; public set; }
    [ConfigurationPropertyAttribute("maxBatchGeneratedFileSize")]
public int MaxBatchGeneratedFileSize { get; public set; }
    [ConfigurationPropertyAttribute("numRecompilesBeforeAppRestart")]
public int NumRecompilesBeforeAppRestart { get; public set; }
    [ConfigurationPropertyAttribute("defaultLanguage")]
public string DefaultLanguage { get; public set; }
    [ConfigurationPropertyAttribute("targetFramework")]
public string TargetFramework { get; public set; }
    [ConfigurationPropertyAttribute("compilers")]
public CompilerCollection Compilers { get; }
    [ConfigurationPropertyAttribute("assemblies")]
public AssemblyCollection Assemblies { get; }
    [ConfigurationPropertyAttribute("buildProviders")]
public BuildProviderCollection BuildProviders { get; }
    [ConfigurationPropertyAttribute("folderLevelBuildProviders")]
public FolderLevelBuildProviderCollection FolderLevelBuildProviders { get; }
    [ConfigurationPropertyAttribute("expressionBuilders")]
public ExpressionBuilderCollection ExpressionBuilders { get; }
    [ConfigurationPropertyAttribute("assemblyPostProcessorType")]
public string AssemblyPostProcessorType { get; public set; }
    internal Type AssemblyPostProcessorTypeInternal { get; }
    [ConfigurationPropertyAttribute("codeSubDirectories")]
public CodeSubDirectoriesCollection CodeSubDirectories { get; }
    [ConfigurationPropertyAttribute("enablePrefetchOptimization")]
public bool EnablePrefetchOptimization { get; public set; }
    [ConfigurationPropertyAttribute("profileGuidedOptimizations")]
public ProfileGuidedOptimizationsFlags ProfileGuidedOptimizations { get; public set; }
    [ConfigurationPropertyAttribute("controlBuilderInterceptorType")]
public string ControlBuilderInterceptorType { get; public set; }
    [ConfigurationPropertyAttribute("disableObsoleteWarnings")]
public bool DisableObsoleteWarnings { get; public set; }
    [ConfigurationPropertyAttribute("maxConcurrentCompilations")]
public int MaxConcurrentCompilations { get; public set; }
    internal long RecompilationHash { get; }
    internal Type ControlBuilderInterceptorTypeInternal { get; }
    private static CompilationSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected virtual object GetRuntimeObject();
    public string get_TempDirectory();
    public void set_TempDirectory(string value);
    internal void GetTempDirectoryErrorInfo(String& tempDirAttribName, String& configFileName, Int32& configLineNumber);
    public bool get_Debug();
    public void set_Debug(bool value);
    public bool get_Strict();
    public void set_Strict(bool value);
    public bool get_Explicit();
    public void set_Explicit(bool value);
    public bool get_Batch();
    public void set_Batch(bool value);
    public bool get_OptimizeCompilations();
    public void set_OptimizeCompilations(bool value);
    public bool get_UrlLinePragmas();
    public void set_UrlLinePragmas(bool value);
    public TimeSpan get_BatchTimeout();
    public void set_BatchTimeout(TimeSpan value);
    public int get_MaxBatchSize();
    public void set_MaxBatchSize(int value);
    public int get_MaxBatchGeneratedFileSize();
    public void set_MaxBatchGeneratedFileSize(int value);
    public int get_NumRecompilesBeforeAppRestart();
    public void set_NumRecompilesBeforeAppRestart(int value);
    public string get_DefaultLanguage();
    public void set_DefaultLanguage(string value);
    public string get_TargetFramework();
    public void set_TargetFramework(string value);
    public CompilerCollection get_Compilers();
    public AssemblyCollection get_Assemblies();
    public BuildProviderCollection get_BuildProviders();
    public FolderLevelBuildProviderCollection get_FolderLevelBuildProviders();
    public ExpressionBuilderCollection get_ExpressionBuilders();
    public string get_AssemblyPostProcessorType();
    public void set_AssemblyPostProcessorType(string value);
    internal Type get_AssemblyPostProcessorTypeInternal();
    public CodeSubDirectoriesCollection get_CodeSubDirectories();
    public bool get_EnablePrefetchOptimization();
    public void set_EnablePrefetchOptimization(bool value);
    public ProfileGuidedOptimizationsFlags get_ProfileGuidedOptimizations();
    public void set_ProfileGuidedOptimizations(ProfileGuidedOptimizationsFlags value);
    public string get_ControlBuilderInterceptorType();
    public void set_ControlBuilderInterceptorType(string value);
    public bool get_DisableObsoleteWarnings();
    public void set_DisableObsoleteWarnings(bool value);
    public int get_MaxConcurrentCompilations();
    public void set_MaxConcurrentCompilations(int value);
    internal CompilerType GetCompilerInfoFromExtension(string extension, bool throwOnFail);
    internal CompilerType GetCompilerInfoFromLanguage(string language);
    internal static string GetOriginalAssemblyName(Assembly a);
    internal Assembly[] LoadAssembly(AssemblyInfo ai);
    internal static Assembly LoadAndRecordAssembly(AssemblyName name);
    internal static void RecordAssembly(string assemblyName, Assembly a);
    internal Assembly LoadAssembly(string assemblyName, bool throwOnFail);
    internal Assembly[] LoadAllAssembliesFromAppDomainBinDirectory();
    internal long get_RecompilationHash();
    protected virtual void PostDeserialize();
    internal Type get_ControlBuilderInterceptorTypeInternal();
    protected virtual void SetReadOnly();
}
public class System.Web.Configuration.Compiler : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("language")]
public string Language { get; }
    [ConfigurationPropertyAttribute("extension")]
public string Extension { get; }
    [ConfigurationPropertyAttribute("type")]
public string Type { get; }
    internal CompilerType CompilerTypeInternal { get; }
    [ConfigurationPropertyAttribute("warningLevel")]
[IntegerValidatorAttribute]
public int WarningLevel { get; }
    [ConfigurationPropertyAttribute("compilerOptions")]
public string CompilerOptions { get; }
    private static Compiler();
    public Compiler(string compilerOptions, string extension, string language, string type, int warningLevel);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Language();
    public string get_Extension();
    public string get_Type();
    internal CompilerType get_CompilerTypeInternal();
    public int get_WarningLevel();
    public string get_CompilerOptions();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.Compiler")]
public class System.Web.Configuration.CompilerCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public String[] AllKeys { get; }
    public Compiler Item { get; }
    public Compiler Item { get; }
    protected string ElementName { get; }
    public ConfigurationElementCollectionType CollectionType { get; }
    private static CompilerCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public String[] get_AllKeys();
    public Compiler get_Item(string language);
    public Compiler get_Item(int index);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    protected virtual string get_ElementName();
    public virtual ConfigurationElementCollectionType get_CollectionType();
    public Compiler Get(int index);
    public Compiler Get(string language);
    public string GetKey(int index);
}
internal class System.Web.Configuration.ConfigsHelper : object {
    internal static void GetRegistryStringAttribute(String& val, ConfigurationElement config, string propName);
}
internal class System.Web.Configuration.ConfigUtil : object {
    internal static void CheckBaseType(Type expectedBaseType, Type userBaseType, string propertyName, ConfigurationElement configElement);
    internal static Type GetType(string typeName, string propertyName, ConfigurationElement configElement, XmlNode node, bool checkAptcaBit, bool ignoreCase);
    internal static Type GetType(string typeName, string propertyName, ConfigurationElement configElement);
    internal static Type GetType(string typeName, string propertyName, ConfigurationElement configElement, bool checkAptcaBit);
    internal static Type GetType(string typeName, string propertyName, ConfigurationElement configElement, bool checkAptcaBit, bool ignoreCase);
    internal static Type GetType(string typeName, XmlNode node);
    internal static Type GetType(string typeName, XmlNode node, bool ignoreCase);
    internal static void CheckAssignableType(Type baseType, Type type, ConfigurationElement configElement, string propertyName);
    internal static void CheckAssignableType(Type baseType, Type baseType2, Type type, ConfigurationElement configElement, string propertyName);
    internal static bool IsTypeHandlerOrFactory(Type t);
    internal static ConfigurationErrorsException MakeConfigurationErrorsException(string message, Exception innerException, PropertyInformation configProperty);
    internal static void SetFX45DefaultValue(ConfigurationSection configSection, ConfigurationProperty property, object newDefaultValue);
}
internal class System.Web.Configuration.COSERVERINFO : object {
    internal int reserved1;
    internal string servername;
    internal IntPtr authinfo;
    internal int reserved2;
    internal COSERVERINFO(string srvname, IntPtr authinf);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual override void Finalize();
}
internal class System.Web.Configuration.COSERVERINFO_X64 : object {
    internal int reserved1;
    internal int padding1;
    internal string servername;
    internal IntPtr authinfo;
    internal int reserved2;
    internal int padding2;
    internal COSERVERINFO_X64(string srvname, IntPtr authinf);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual override void Finalize();
}
public class System.Web.Configuration.CustomError : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("statusCode")]
[IntegerValidatorAttribute]
public int StatusCode { get; public set; }
    [ConfigurationPropertyAttribute("redirect")]
[StringValidatorAttribute]
public string Redirect { get; public set; }
    private static CustomError();
    public CustomError(int statusCode, string redirect);
    public virtual bool Equals(object customError);
    public virtual int GetHashCode();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public int get_StatusCode();
    public void set_StatusCode(int value);
    public string get_Redirect();
    public void set_Redirect(string value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.CustomError")]
public class System.Web.Configuration.CustomErrorCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public String[] AllKeys { get; }
    public CustomError Item { get; }
    public CustomError Item { get; public set; }
    protected string ElementName { get; }
    public ConfigurationElementCollectionType CollectionType { get; }
    private static CustomErrorCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public String[] get_AllKeys();
    public CustomError get_Item(string statusCode);
    public CustomError get_Item(int index);
    public void set_Item(int index, CustomError value);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    protected virtual string get_ElementName();
    public virtual ConfigurationElementCollectionType get_CollectionType();
    public void Add(CustomError customError);
    public void Clear();
    public CustomError Get(int index);
    public CustomError Get(string statusCode);
    public string GetKey(int index);
    public void Remove(string statusCode);
    public void RemoveAt(int index);
    public void Set(CustomError customError);
}
public enum System.Web.Configuration.CustomErrorsMode : Enum {
    public int value__;
    public static CustomErrorsMode RemoteOnly;
    public static CustomErrorsMode On;
    public static CustomErrorsMode Off;
}
public enum System.Web.Configuration.CustomErrorsRedirectMode : Enum {
    public int value__;
    public static CustomErrorsRedirectMode ResponseRedirect;
    public static CustomErrorsRedirectMode ResponseRewrite;
}
public class System.Web.Configuration.CustomErrorsSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("allowNestedErrors")]
public bool AllowNestedErrors { get; public set; }
    [ConfigurationPropertyAttribute("defaultRedirect")]
public string DefaultRedirect { get; public set; }
    [ConfigurationPropertyAttribute("redirectMode")]
public CustomErrorsRedirectMode RedirectMode { get; public set; }
    [ConfigurationPropertyAttribute("mode")]
public CustomErrorsMode Mode { get; public set; }
    [ConfigurationPropertyAttribute("")]
public CustomErrorCollection Errors { get; }
    internal string DefaultAbsolutePath { get; }
    private static CustomErrorsSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public bool get_AllowNestedErrors();
    public void set_AllowNestedErrors(bool value);
    public string get_DefaultRedirect();
    public void set_DefaultRedirect(string value);
    public CustomErrorsRedirectMode get_RedirectMode();
    public void set_RedirectMode(CustomErrorsRedirectMode value);
    public CustomErrorsMode get_Mode();
    public void set_Mode(CustomErrorsMode value);
    public CustomErrorCollection get_Errors();
    internal string get_DefaultAbsolutePath();
    internal string GetRedirectString(int code);
    protected virtual void Reset(ConfigurationElement parentElement);
    protected virtual void DeserializeSection(XmlReader reader);
    internal static string GetAbsoluteRedirect(string path, string basePath);
    internal static CustomErrorsSection GetSettings(HttpContext context);
    internal static CustomErrorsSection GetSettings(HttpContext context, bool canThrow);
    internal bool CustomErrorsEnabled(HttpRequest request);
}
internal class System.Web.Configuration.CustomWebEventKey : object {
    internal Type _type;
    internal int _eventCode;
    internal CustomWebEventKey(Type eventType, int eventCode);
}
internal class System.Web.Configuration.DelayedRegex : object {
    internal DelayedRegex(string s);
    internal Match Match(string s);
    internal int GroupNumberFromName(string name);
    internal void EnsureRegex();
}
public class System.Web.Configuration.DeploymentSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("retail")]
public bool Retail { get; public set; }
    internal static bool RetailInternal { get; }
    private static DeploymentSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public bool get_Retail();
    public void set_Retail(bool value);
    internal static bool get_RetailInternal();
}
internal class System.Web.Configuration.ErrorRuntimeConfig : RuntimeConfig {
    protected virtual object GetSectionObject(string sectionName);
}
public class System.Web.Configuration.EventMappingSettings : ConfigurationElement {
    internal Type RealType { get; internal set; }
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("type")]
public string Type { get; public set; }
    [ConfigurationPropertyAttribute("startEventCode")]
[IntegerValidatorAttribute]
public int StartEventCode { get; public set; }
    [ConfigurationPropertyAttribute("endEventCode")]
[IntegerValidatorAttribute]
public int EndEventCode { get; public set; }
    private static EventMappingSettings();
    public EventMappingSettings(string name, string type, int startEventCode, int endEventCode);
    public EventMappingSettings(string name, string type);
    internal Type get_RealType();
    internal void set_RealType(Type value);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public void set_Name(string value);
    public string get_Type();
    public void set_Type(string value);
    public int get_StartEventCode();
    public void set_StartEventCode(int value);
    public int get_EndEventCode();
    public void set_EndEventCode(int value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.EventMappingSettings")]
public class System.Web.Configuration.EventMappingSettingsCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public EventMappingSettings Item { get; }
    public EventMappingSettings Item { get; public set; }
    private static EventMappingSettingsCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public EventMappingSettings get_Item(string key);
    public EventMappingSettings get_Item(int index);
    public void set_Item(int index, EventMappingSettings value);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public void Add(EventMappingSettings eventMappingSettings);
    public void Clear();
    public void RemoveAt(int index);
    public void Insert(int index, EventMappingSettings eventMappingSettings);
    public int IndexOf(string name);
    public void Remove(string name);
    public bool Contains(string name);
}
public class System.Web.Configuration.ExpressionBuilder : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("expressionPrefix")]
[StringValidatorAttribute]
public string ExpressionPrefix { get; public set; }
    [ConfigurationPropertyAttribute("type")]
[StringValidatorAttribute]
public string Type { get; public set; }
    internal Type TypeInternal { get; }
    private static ExpressionBuilder();
    public ExpressionBuilder(string expressionPrefix, string theType);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_ExpressionPrefix();
    public void set_ExpressionPrefix(string value);
    public string get_Type();
    public void set_Type(string value);
    internal Type get_TypeInternal();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.ExpressionBuilder")]
public class System.Web.Configuration.ExpressionBuilderCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public ExpressionBuilder Item { get; }
    public ExpressionBuilder Item { get; public set; }
    private static ExpressionBuilderCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public ExpressionBuilder get_Item(string name);
    public ExpressionBuilder get_Item(int index);
    public void set_Item(int index, ExpressionBuilder value);
    public void Add(ExpressionBuilder buildProvider);
    public void Remove(string name);
    public void RemoveAt(int index);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
internal class System.Web.Configuration.ExpressServerConfig : object {
    private static ExpressServerConfig();
    internal ExpressServerConfig(string version);
    internal static IServerConfig GetInstance(string version);
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override string System.Web.Configuration.IServerConfig.GetSiteNameFromSiteID(string siteID);
    private sealed virtual override string System.Web.Configuration.IServerConfig.MapPath(IApplicationHost appHost, VirtualPath path);
    private sealed virtual override String[] System.Web.Configuration.IServerConfig.GetVirtualSubdirs(VirtualPath path, bool inApp);
    private sealed virtual override bool System.Web.Configuration.IServerConfig2.IsWithinApp(string virtualPath);
    private sealed virtual override bool System.Web.Configuration.IServerConfig.GetUncUser(IApplicationHost appHost, VirtualPath path, String& username, String& password);
    private sealed virtual override long System.Web.Configuration.IServerConfig.GetW3WPMemoryLimitInKB();
    private sealed virtual override string System.Web.Configuration.IConfigMapPath.GetMachineConfigFilename();
    private sealed virtual override string System.Web.Configuration.IConfigMapPath.GetRootWebConfigFilename();
    private sealed virtual override void System.Web.Configuration.IConfigMapPath.GetPathConfigFilename(string siteID, string path, String& directory, String& baseName);
    private sealed virtual override void System.Web.Configuration.IConfigMapPath2.GetPathConfigFilename(string siteID, VirtualPath path, String& directory, String& baseName);
    private sealed virtual override void System.Web.Configuration.IConfigMapPath.GetDefaultSiteNameAndID(String& siteName, String& siteID);
    private sealed virtual override void System.Web.Configuration.IConfigMapPath.ResolveSiteArgument(string siteArgument, String& siteName, String& siteID);
    private sealed virtual override string System.Web.Configuration.IConfigMapPath2.MapPath(string siteID, VirtualPath path);
    private sealed virtual override string System.Web.Configuration.IConfigMapPath.MapPath(string siteID, string path);
    private sealed virtual override string System.Web.Configuration.IConfigMapPath.GetAppPathForPath(string siteID, string path);
    private sealed virtual override VirtualPath System.Web.Configuration.IConfigMapPath2.GetAppPathForPath(string siteID, VirtualPath path);
}
public enum System.Web.Configuration.FcnMode : Enum {
    public int value__;
    public static FcnMode NotSet;
    public static FcnMode Default;
    public static FcnMode Disabled;
    public static FcnMode Single;
}
internal class System.Web.Configuration.FileDetails : object {
    internal FileDetails(bool exists, long fileSize, DateTime utcCreationTime, DateTime utcLastWriteTime);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Web.Configuration.FolderLevelBuildProvider : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
[StringValidatorAttribute]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("type")]
[StringValidatorAttribute]
public string Type { get; public set; }
    internal Type TypeInternal { get; }
    internal FolderLevelBuildProviderAppliesTo AppliesToInternal { get; }
    private static FolderLevelBuildProvider();
    public FolderLevelBuildProvider(string name, string type);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public virtual bool Equals(object provider);
    public virtual int GetHashCode();
    public string get_Name();
    public void set_Name(string value);
    public string get_Type();
    public void set_Type(string value);
    internal Type get_TypeInternal();
    internal FolderLevelBuildProviderAppliesTo get_AppliesToInternal();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.FolderLevelBuildProvider")]
public class System.Web.Configuration.FolderLevelBuildProviderCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public BuildProvider Item { get; }
    public FolderLevelBuildProvider Item { get; public set; }
    private static FolderLevelBuildProviderCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public BuildProvider get_Item(string name);
    public FolderLevelBuildProvider get_Item(int index);
    public void set_Item(int index, FolderLevelBuildProvider value);
    public void Add(FolderLevelBuildProvider buildProvider);
    public void Remove(string name);
    public void RemoveAt(int index);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    internal List`1<Type> GetBuildProviderTypes(FolderLevelBuildProviderAppliesTo appliesTo);
    internal bool IsFolderLevelBuildProvider(Type t);
}
public class System.Web.Configuration.FormsAuthenticationConfiguration : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("credentials")]
public FormsAuthenticationCredentials Credentials { get; }
    [ConfigurationPropertyAttribute("name")]
[StringValidatorAttribute]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("loginUrl")]
[StringValidatorAttribute]
public string LoginUrl { get; public set; }
    [ConfigurationPropertyAttribute("defaultUrl")]
[StringValidatorAttribute]
public string DefaultUrl { get; public set; }
    [ConfigurationPropertyAttribute("protection")]
public FormsProtectionEnum Protection { get; public set; }
    [ConfigurationPropertyAttribute("timeout")]
[TimeSpanValidatorAttribute]
[TypeConverterAttribute("System.Configuration.TimeSpanMinutesConverter")]
public TimeSpan Timeout { get; public set; }
    [ConfigurationPropertyAttribute("path")]
[StringValidatorAttribute]
public string Path { get; public set; }
    [ConfigurationPropertyAttribute("requireSSL")]
public bool RequireSSL { get; public set; }
    [ConfigurationPropertyAttribute("slidingExpiration")]
public bool SlidingExpiration { get; public set; }
    [ConfigurationPropertyAttribute("enableCrossAppRedirects")]
public bool EnableCrossAppRedirects { get; public set; }
    [ConfigurationPropertyAttribute("cookieless")]
public HttpCookieMode Cookieless { get; public set; }
    [ConfigurationPropertyAttribute("domain")]
public string Domain { get; public set; }
    [ConfigurationPropertyAttribute("ticketCompatibilityMode")]
public TicketCompatibilityMode TicketCompatibilityMode { get; public set; }
    protected ConfigurationElementProperty ElementProperty { get; }
    private static FormsAuthenticationConfiguration();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public FormsAuthenticationCredentials get_Credentials();
    public string get_Name();
    public void set_Name(string value);
    public string get_LoginUrl();
    public void set_LoginUrl(string value);
    public string get_DefaultUrl();
    public void set_DefaultUrl(string value);
    public FormsProtectionEnum get_Protection();
    public void set_Protection(FormsProtectionEnum value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public string get_Path();
    public void set_Path(string value);
    public bool get_RequireSSL();
    public void set_RequireSSL(bool value);
    public bool get_SlidingExpiration();
    public void set_SlidingExpiration(bool value);
    public bool get_EnableCrossAppRedirects();
    public void set_EnableCrossAppRedirects(bool value);
    public HttpCookieMode get_Cookieless();
    public void set_Cookieless(HttpCookieMode value);
    public string get_Domain();
    public void set_Domain(string value);
    public TicketCompatibilityMode get_TicketCompatibilityMode();
    public void set_TicketCompatibilityMode(TicketCompatibilityMode value);
    protected virtual ConfigurationElementProperty get_ElementProperty();
}
public class System.Web.Configuration.FormsAuthenticationCredentials : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("")]
public FormsAuthenticationUserCollection Users { get; }
    [ConfigurationPropertyAttribute("passwordFormat")]
public FormsAuthPasswordFormat PasswordFormat { get; public set; }
    private static FormsAuthenticationCredentials();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public FormsAuthenticationUserCollection get_Users();
    public FormsAuthPasswordFormat get_PasswordFormat();
    public void set_PasswordFormat(FormsAuthPasswordFormat value);
}
public class System.Web.Configuration.FormsAuthenticationUser : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
[TypeConverterAttribute("System.Web.Configuration.LowerCaseStringConverter")]
[StringValidatorAttribute]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("password")]
[StringValidatorAttribute]
public string Password { get; public set; }
    private static FormsAuthenticationUser();
    public FormsAuthenticationUser(string name, string password);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public void set_Name(string value);
    public string get_Password();
    public void set_Password(string value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.FormsAuthenticationUser")]
public class System.Web.Configuration.FormsAuthenticationUserCollection : ConfigurationElementCollection {
    public String[] AllKeys { get; }
    public FormsAuthenticationUser Item { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    public FormsAuthenticationUser Item { get; public set; }
    protected string ElementName { get; }
    protected bool ThrowOnDuplicate { get; }
    public ConfigurationElementCollectionType CollectionType { get; }
    private static FormsAuthenticationUserCollection();
    public String[] get_AllKeys();
    public FormsAuthenticationUser get_Item(string name);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public FormsAuthenticationUser get_Item(int index);
    public void set_Item(int index, FormsAuthenticationUser value);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    protected virtual string get_ElementName();
    protected virtual bool get_ThrowOnDuplicate();
    public virtual ConfigurationElementCollectionType get_CollectionType();
    public void Add(FormsAuthenticationUser user);
    public void Clear();
    public FormsAuthenticationUser Get(int index);
    public FormsAuthenticationUser Get(string name);
    public string GetKey(int index);
    public void Remove(string name);
    public void RemoveAt(int index);
    public void Set(FormsAuthenticationUser user);
}
public enum System.Web.Configuration.FormsAuthPasswordFormat : Enum {
    public int value__;
    public static FormsAuthPasswordFormat Clear;
    public static FormsAuthPasswordFormat SHA1;
    public static FormsAuthPasswordFormat MD5;
}
public enum System.Web.Configuration.FormsProtectionEnum : Enum {
    public int value__;
    public static FormsProtectionEnum All;
    public static FormsProtectionEnum None;
    public static FormsProtectionEnum Encryption;
    public static FormsProtectionEnum Validation;
}
public class System.Web.Configuration.FullTrustAssembliesSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("")]
public FullTrustAssemblyCollection FullTrustAssemblies { get; }
    private static FullTrustAssembliesSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public FullTrustAssemblyCollection get_FullTrustAssemblies();
}
public class System.Web.Configuration.FullTrustAssembly : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("assemblyName")]
[StringValidatorAttribute]
public string AssemblyName { get; public set; }
    [ConfigurationPropertyAttribute("version")]
[StringValidatorAttribute]
public string Version { get; public set; }
    [ConfigurationPropertyAttribute("publicKey")]
[StringValidatorAttribute]
public string PublicKey { get; public set; }
    private static FullTrustAssembly();
    public FullTrustAssembly(string assemblyName, string version, string publicKey);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
    public string get_Version();
    public void set_Version(string value);
    public string get_PublicKey();
    public void set_PublicKey(string value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.String")]
public class System.Web.Configuration.FullTrustAssemblyCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public FullTrustAssembly Item { get; public set; }
    private static FullTrustAssemblyCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public FullTrustAssembly get_Item(int index);
    public void set_Item(int index, FullTrustAssembly value);
    public void Add(FullTrustAssembly fullTrustAssembly);
    public void Remove(string key);
    public void RemoveAt(int index);
    protected virtual ConfigurationElement CreateNewElement();
    public void Clear();
    protected virtual object GetElementKey(ConfigurationElement element);
    internal bool IsRemoved(string key);
}
internal class System.Web.Configuration.GacUtil : object {
    public sealed virtual void GacInstall(string assemblyPath);
    public bool GacUnInstall(string assemblyName);
}
internal class System.Web.Configuration.GatewayDefinition : BrowserDefinition {
    internal GatewayDefinition(XmlNode node);
}
public class System.Web.Configuration.GlobalizationSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("requestEncoding")]
public Encoding RequestEncoding { get; public set; }
    [ConfigurationPropertyAttribute("responseEncoding")]
public Encoding ResponseEncoding { get; public set; }
    [ConfigurationPropertyAttribute("responseHeaderEncoding")]
public Encoding ResponseHeaderEncoding { get; public set; }
    [ConfigurationPropertyAttribute("fileEncoding")]
public Encoding FileEncoding { get; public set; }
    [ConfigurationPropertyAttribute("culture")]
public string Culture { get; public set; }
    [ConfigurationPropertyAttribute("uiCulture")]
public string UICulture { get; public set; }
    [ConfigurationPropertyAttribute("enableClientBasedCulture")]
public bool EnableClientBasedCulture { get; public set; }
    [ConfigurationPropertyAttribute("resourceProviderFactoryType")]
public string ResourceProviderFactoryType { get; public set; }
    [ConfigurationPropertyAttribute("enableBestFitResponseEncoding")]
public bool EnableBestFitResponseEncoding { get; public set; }
    internal Type ResourceProviderFactoryTypeInternal { get; }
    private static GlobalizationSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public Encoding get_RequestEncoding();
    public void set_RequestEncoding(Encoding value);
    public Encoding get_ResponseEncoding();
    public void set_ResponseEncoding(Encoding value);
    public Encoding get_ResponseHeaderEncoding();
    public void set_ResponseHeaderEncoding(Encoding value);
    public Encoding get_FileEncoding();
    public void set_FileEncoding(Encoding value);
    public string get_Culture();
    public void set_Culture(string value);
    public string get_UICulture();
    public void set_UICulture(string value);
    public bool get_EnableClientBasedCulture();
    public void set_EnableClientBasedCulture(bool value);
    public string get_ResourceProviderFactoryType();
    public void set_ResourceProviderFactoryType(string value);
    public bool get_EnableBestFitResponseEncoding();
    public void set_EnableBestFitResponseEncoding(bool value);
    internal Type get_ResourceProviderFactoryTypeInternal();
    protected virtual void PreSerialize(XmlWriter writer);
    protected virtual void PostDeserialize();
}
internal static class System.Web.Configuration.HandlerBase : object {
    internal static XmlNode GetAndRemoveStringAttribute(XmlNode node, string attrib, String& val);
    internal static XmlNode GetAndRemoveRequiredStringAttribute(XmlNode node, string attrib, String& val);
    internal static XmlNode GetAndRemoveNonEmptyStringAttribute(XmlNode node, string attrib, String& val);
    internal static XmlNode GetAndRemoveRequiredNonEmptyStringAttribute(XmlNode node, string attrib, String& val);
    internal static XmlNode GetAndRemoveBooleanAttribute(XmlNode node, string attrib, Boolean& val);
    internal static XmlNode GetAndRemovePositiveIntegerAttribute(XmlNode node, string attrib, Int32& val);
    internal static XmlNode GetAndRemoveTypeAttribute(XmlNode node, string attrib, Type& val);
    internal static void CheckForbiddenAttribute(XmlNode node, string attrib);
    internal static void CheckForUnrecognizedAttributes(XmlNode node);
    internal static string RemoveAttribute(XmlNode node, string name);
    internal static string RemoveRequiredAttribute(XmlNode node, string name);
    internal static string RemoveRequiredAttribute(XmlNode node, string name, bool allowEmpty);
    internal static void CheckForNonCommentChildNodes(XmlNode node);
    internal static void ThrowUnrecognizedElement(XmlNode node);
    internal static void CheckAssignableType(XmlNode node, Type baseType, Type type);
    internal static void CheckAssignableType(string filename, int lineNumber, Type baseType, Type type);
    internal static bool IsServerConfiguration(object context);
    internal static bool CheckAndReadRegistryValue(String& value, bool throwIfError);
    internal static bool CheckAndReadConnectionString(String& connectionString, bool throwIfError);
}
internal class System.Web.Configuration.HandlerFactoryCache : object {
    internal IHttpHandlerFactory Factory { get; }
    internal HandlerFactoryCache(string type);
    internal HandlerFactoryCache(HttpHandlerAction mapping);
    internal IHttpHandlerFactory get_Factory();
    internal Type GetHandlerType(HttpHandlerAction handlerAction);
    internal Type GetHandlerType(string type);
    internal object Create(string type);
}
internal class System.Web.Configuration.HandlerFactoryWrapper : object {
    internal HandlerFactoryWrapper(IHttpHandler handler, Type handlerType);
    public sealed virtual IHttpHandler GetHandler(HttpContext context, string requestType, string url, string pathTranslated);
    public sealed virtual void ReleaseHandler(IHttpHandler handler);
}
internal class System.Web.Configuration.HandlerMappingMemo : object {
    internal HttpHandlerAction Mapping { get; }
    internal HandlerMappingMemo(HttpHandlerAction mapping, string verb, VirtualPath path);
    internal bool IsMatch(string verb, VirtualPath path);
    internal HttpHandlerAction get_Mapping();
}
internal class System.Web.Configuration.HandlerWithFactory : object {
    internal HandlerWithFactory(IHttpHandler handler, IHttpHandlerFactory factory);
    internal void Recycle();
}
public class System.Web.Configuration.HealthMonitoringSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("heartbeatInterval")]
[TypeConverterAttribute("System.Configuration.TimeSpanSecondsConverter")]
[TimeSpanValidatorAttribute]
public TimeSpan HeartbeatInterval { get; public set; }
    [ConfigurationPropertyAttribute("enabled")]
public bool Enabled { get; public set; }
    [ConfigurationPropertyAttribute("bufferModes")]
public BufferModesCollection BufferModes { get; }
    [ConfigurationPropertyAttribute("providers")]
public ProviderSettingsCollection Providers { get; }
    [ConfigurationPropertyAttribute("profiles")]
public ProfileSettingsCollection Profiles { get; }
    [ConfigurationPropertyAttribute("rules")]
public RuleSettingsCollection Rules { get; }
    [ConfigurationPropertyAttribute("eventMappings")]
public EventMappingSettingsCollection EventMappings { get; }
    private static HealthMonitoringSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public TimeSpan get_HeartbeatInterval();
    public void set_HeartbeatInterval(TimeSpan value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public BufferModesCollection get_BufferModes();
    public ProviderSettingsCollection get_Providers();
    public ProfileSettingsCollection get_Profiles();
    public RuleSettingsCollection get_Rules();
    public EventMappingSettingsCollection get_EventMappings();
}
internal class System.Web.Configuration.HealthMonitoringSectionHelper : object {
    internal ProviderInstances _providerInstances;
    internal Hashtable _customEvaluatorInstances;
    internal ArrayList _ruleInfos;
    internal bool Enabled { get; }
    internal HealthMonitoringSection HealthMonitoringSection { get; }
    private static HealthMonitoringSectionHelper();
    internal static HealthMonitoringSectionHelper GetHelper();
    internal bool get_Enabled();
    internal HealthMonitoringSection get_HealthMonitoringSection();
    internal ArrayList FindFiringRuleInfos(Type eventType, int eventCode);
}
public class System.Web.Configuration.HostingEnvironmentSection : ConfigurationSection {
    internal static int DefaultShutdownTimeout;
    internal static TimeSpan DefaultIdleTimeout;
    internal static TimeSpan DefaultUrlMetadataSlidingExpiration;
    internal static string sectionName;
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("shutdownTimeout")]
[TypeConverterAttribute("System.Configuration.TimeSpanSecondsConverter")]
[TimeSpanValidatorAttribute]
public TimeSpan ShutdownTimeout { get; public set; }
    [ConfigurationPropertyAttribute("idleTimeout")]
[TypeConverterAttribute("System.Configuration.TimeSpanMinutesOrInfiniteConverter")]
[TimeSpanValidatorAttribute]
public TimeSpan IdleTimeout { get; public set; }
    [ConfigurationPropertyAttribute("shadowCopyBinAssemblies")]
public bool ShadowCopyBinAssemblies { get; public set; }
    [ConfigurationPropertyAttribute("urlMetadataSlidingExpiration")]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
[TimeSpanValidatorAttribute]
public TimeSpan UrlMetadataSlidingExpiration { get; public set; }
    private static HostingEnvironmentSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public TimeSpan get_ShutdownTimeout();
    public void set_ShutdownTimeout(TimeSpan value);
    public TimeSpan get_IdleTimeout();
    public void set_IdleTimeout(TimeSpan value);
    public bool get_ShadowCopyBinAssemblies();
    public void set_ShadowCopyBinAssemblies(bool value);
    public TimeSpan get_UrlMetadataSlidingExpiration();
    public void set_UrlMetadataSlidingExpiration(TimeSpan value);
}
internal class System.Web.Configuration.HostingPreferredMapPath : object {
    internal static IConfigMapPath GetInstance();
    public sealed virtual string GetMachineConfigFilename();
    public sealed virtual string GetRootWebConfigFilename();
    public sealed virtual void GetPathConfigFilename(string siteID, string path, String& directory, String& baseName);
    public sealed virtual void GetDefaultSiteNameAndID(String& siteName, String& siteID);
    public sealed virtual void ResolveSiteArgument(string siteArgument, String& siteName, String& siteID);
    public sealed virtual string MapPath(string siteID, string path);
    public sealed virtual string GetAppPathForPath(string siteID, string path);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Configuration.HttpCapabilitiesBase : object {
    internal static HttpCapabilitiesBase EmptyHttpCapabilitiesBase { get; }
    public static HttpCapabilitiesProvider BrowserCapabilitiesProvider { get; public set; }
    public bool UseOptimizedCacheKey { get; }
    public string Item { get; }
    public IDictionary Capabilities { get; public set; }
    public IDictionary Adapters { get; }
    public string HtmlTextWriter { get; public set; }
    public string Id { get; }
    public ArrayList Browsers { get; }
    public Version ClrVersion { get; }
    public string Type { get; }
    public string Browser { get; }
    public string Version { get; }
    public int MajorVersion { get; }
    public string MinorVersionString { get; }
    public double MinorVersion { get; }
    public string Platform { get; }
    public Type TagWriter { get; }
    public Version EcmaScriptVersion { get; }
    public Version MSDomVersion { get; }
    public Version W3CDomVersion { get; }
    public bool Beta { get; }
    public bool Crawler { get; }
    public bool AOL { get; }
    public bool Win16 { get; }
    public bool Win32 { get; }
    public bool Frames { get; }
    public bool RequiresControlStateInSession { get; }
    public bool Tables { get; }
    public bool Cookies { get; }
    public bool VBScript { get; }
    [ObsoleteAttribute("The recommended alternative is the EcmaScriptVersion property. A Major version value greater than or equal to 1 implies JavaScript support. http://go.microsoft.com/fwlink/?linkid=14202")]
public bool JavaScript { get; }
    public bool JavaApplets { get; }
    public Version JScriptVersion { get; }
    public bool ActiveXControls { get; }
    public bool BackgroundSounds { get; }
    public bool CDF { get; }
    public string MobileDeviceManufacturer { get; }
    public string MobileDeviceModel { get; }
    public string GatewayVersion { get; }
    public int GatewayMajorVersion { get; }
    public double GatewayMinorVersion { get; }
    public string PreferredRenderingType { get; }
    public string PreferredRequestEncoding { get; }
    public string PreferredResponseEncoding { get; }
    public string PreferredRenderingMime { get; }
    public string PreferredImageMime { get; }
    public int ScreenCharactersWidth { get; }
    public int ScreenCharactersHeight { get; }
    public int ScreenPixelsWidth { get; }
    public int ScreenPixelsHeight { get; }
    public int ScreenBitDepth { get; }
    public bool IsColor { get; }
    public string InputType { get; }
    public int NumberOfSoftkeys { get; }
    public int MaximumSoftkeyLabelLength { get; }
    public bool CanInitiateVoiceCall { get; }
    public bool CanSendMail { get; }
    public bool HasBackButton { get; }
    public bool RendersWmlDoAcceptsInline { get; }
    public bool RendersWmlSelectsAsMenuCards { get; }
    public bool RendersBreaksAfterWmlAnchor { get; }
    public bool RendersBreaksAfterWmlInput { get; }
    public bool RendersBreakBeforeWmlSelectAndInput { get; }
    public bool RequiresPhoneNumbersAsPlainText { get; }
    public bool RequiresUrlEncodedPostfieldValues { get; }
    public string RequiredMetaTagNameValue { get; }
    public bool RendersBreaksAfterHtmlLists { get; }
    public bool RequiresUniqueHtmlInputNames { get; }
    public bool RequiresUniqueHtmlCheckboxNames { get; }
    public bool SupportsCss { get; }
    public bool HidesRightAlignedMultiselectScrollbars { get; }
    public bool IsMobileDevice { get; }
    public bool RequiresAttributeColonSubstitution { get; }
    public bool CanRenderOneventAndPrevElementsTogether { get; }
    public bool CanRenderInputAndSelectElementsTogether { get; }
    public bool CanRenderAfterInputOrSelectElement { get; }
    public bool CanRenderPostBackCards { get; }
    public bool CanRenderMixedSelects { get; }
    public bool CanCombineFormsInDeck { get; }
    public bool CanRenderSetvarZeroWithMultiSelectionList { get; }
    public bool SupportsImageSubmit { get; }
    public bool RequiresUniqueFilePathSuffix { get; }
    public bool RequiresNoBreakInFormatting { get; }
    public bool RequiresLeadingPageBreak { get; }
    public bool SupportsSelectMultiple { get; }
    public bool SupportsBold { get; }
    public bool SupportsItalic { get; }
    public bool SupportsFontSize { get; }
    public bool SupportsFontName { get; }
    public bool SupportsFontColor { get; }
    public bool SupportsBodyColor { get; }
    public bool SupportsDivAlign { get; }
    public bool SupportsDivNoWrap { get; }
    internal bool SupportsMaintainScrollPositionOnPostback { get; }
    public bool RequiresContentTypeMetaTag { get; }
    public bool RequiresDBCSCharacter { get; }
    public bool RequiresHtmlAdaptiveErrorReporting { get; }
    public bool RequiresOutputOptimization { get; }
    public bool SupportsAccesskeyAttribute { get; }
    public bool SupportsInputIStyle { get; }
    public bool SupportsInputMode { get; }
    public bool SupportsIModeSymbols { get; }
    public bool SupportsJPhoneSymbols { get; }
    public bool SupportsJPhoneMultiMediaAttributes { get; }
    public int MaximumRenderedPageSize { get; }
    public bool RequiresSpecialViewStateEncoding { get; }
    public bool SupportsQueryStringInFormAction { get; }
    public bool SupportsCacheControlMetaTag { get; }
    public bool SupportsUncheck { get; }
    public bool CanRenderEmptySelects { get; }
    public bool SupportsRedirectWithCookie { get; }
    public bool SupportsEmptyStringInCookieValue { get; }
    public int DefaultSubmitButtonLimit { get; }
    public bool SupportsXmlHttp { get; }
    public bool SupportsCallback { get; }
    public int MaximumHrefLength { get; }
    private static HttpCapabilitiesBase();
    internal static HttpCapabilitiesBase get_EmptyHttpCapabilitiesBase();
    public static HttpCapabilitiesProvider get_BrowserCapabilitiesProvider();
    public static void set_BrowserCapabilitiesProvider(HttpCapabilitiesProvider value);
    public bool get_UseOptimizedCacheKey();
    public void DisableOptimizedCacheKey();
    public static HttpCapabilitiesBase GetConfigCapabilities(string configKey, HttpRequest request);
    internal static HttpBrowserCapabilities GetBrowserCapabilities(HttpRequest request);
    public virtual string get_Item(string key);
    public HtmlTextWriter CreateHtmlTextWriter(TextWriter w);
    internal HtmlTextWriter CreateHtmlTextWriterInternal(TextWriter tw);
    protected virtual void Init();
    internal void InitInternal(HttpBrowserCapabilities browserCaps);
    internal ControlAdapter GetAdapter(Control control);
    public IDictionary get_Capabilities();
    public void set_Capabilities(IDictionary value);
    public IDictionary get_Adapters();
    public string get_HtmlTextWriter();
    public void set_HtmlTextWriter(string value);
    public string get_Id();
    public ArrayList get_Browsers();
    public Version get_ClrVersion();
    public Version[] GetClrVersions();
    public string get_Type();
    public string get_Browser();
    public string get_Version();
    public int get_MajorVersion();
    public string get_MinorVersionString();
    public double get_MinorVersion();
    public string get_Platform();
    public Type get_TagWriter();
    public Version get_EcmaScriptVersion();
    public Version get_MSDomVersion();
    public Version get_W3CDomVersion();
    public bool get_Beta();
    public bool get_Crawler();
    public bool get_AOL();
    public bool get_Win16();
    public bool get_Win32();
    public bool get_Frames();
    public bool get_RequiresControlStateInSession();
    public bool get_Tables();
    public bool get_Cookies();
    public bool get_VBScript();
    public bool get_JavaScript();
    public bool get_JavaApplets();
    public Version get_JScriptVersion();
    public bool get_ActiveXControls();
    public bool get_BackgroundSounds();
    public bool get_CDF();
    public virtual string get_MobileDeviceManufacturer();
    public virtual string get_MobileDeviceModel();
    public virtual string get_GatewayVersion();
    public virtual int get_GatewayMajorVersion();
    public virtual double get_GatewayMinorVersion();
    public virtual string get_PreferredRenderingType();
    public virtual string get_PreferredRequestEncoding();
    public virtual string get_PreferredResponseEncoding();
    public virtual string get_PreferredRenderingMime();
    public virtual string get_PreferredImageMime();
    public virtual int get_ScreenCharactersWidth();
    public virtual int get_ScreenCharactersHeight();
    public virtual int get_ScreenPixelsWidth();
    public virtual int get_ScreenPixelsHeight();
    public virtual int get_ScreenBitDepth();
    public virtual bool get_IsColor();
    public virtual string get_InputType();
    public virtual int get_NumberOfSoftkeys();
    public virtual int get_MaximumSoftkeyLabelLength();
    public virtual bool get_CanInitiateVoiceCall();
    public virtual bool get_CanSendMail();
    public virtual bool get_HasBackButton();
    public virtual bool get_RendersWmlDoAcceptsInline();
    public virtual bool get_RendersWmlSelectsAsMenuCards();
    public virtual bool get_RendersBreaksAfterWmlAnchor();
    public virtual bool get_RendersBreaksAfterWmlInput();
    public virtual bool get_RendersBreakBeforeWmlSelectAndInput();
    public virtual bool get_RequiresPhoneNumbersAsPlainText();
    public virtual bool get_RequiresUrlEncodedPostfieldValues();
    public virtual string get_RequiredMetaTagNameValue();
    public virtual bool get_RendersBreaksAfterHtmlLists();
    public virtual bool get_RequiresUniqueHtmlInputNames();
    public virtual bool get_RequiresUniqueHtmlCheckboxNames();
    public virtual bool get_SupportsCss();
    public virtual bool get_HidesRightAlignedMultiselectScrollbars();
    public virtual bool get_IsMobileDevice();
    public virtual bool get_RequiresAttributeColonSubstitution();
    public virtual bool get_CanRenderOneventAndPrevElementsTogether();
    public virtual bool get_CanRenderInputAndSelectElementsTogether();
    public virtual bool get_CanRenderAfterInputOrSelectElement();
    public virtual bool get_CanRenderPostBackCards();
    public virtual bool get_CanRenderMixedSelects();
    public virtual bool get_CanCombineFormsInDeck();
    public virtual bool get_CanRenderSetvarZeroWithMultiSelectionList();
    public virtual bool get_SupportsImageSubmit();
    public virtual bool get_RequiresUniqueFilePathSuffix();
    public virtual bool get_RequiresNoBreakInFormatting();
    public virtual bool get_RequiresLeadingPageBreak();
    public virtual bool get_SupportsSelectMultiple();
    public virtual bool get_SupportsBold();
    public virtual bool get_SupportsItalic();
    public virtual bool get_SupportsFontSize();
    public virtual bool get_SupportsFontName();
    public virtual bool get_SupportsFontColor();
    public virtual bool get_SupportsBodyColor();
    public virtual bool get_SupportsDivAlign();
    public virtual bool get_SupportsDivNoWrap();
    internal bool get_SupportsMaintainScrollPositionOnPostback();
    public virtual bool get_RequiresContentTypeMetaTag();
    public virtual bool get_RequiresDBCSCharacter();
    public virtual bool get_RequiresHtmlAdaptiveErrorReporting();
    public virtual bool get_RequiresOutputOptimization();
    public virtual bool get_SupportsAccesskeyAttribute();
    public virtual bool get_SupportsInputIStyle();
    public virtual bool get_SupportsInputMode();
    public virtual bool get_SupportsIModeSymbols();
    public virtual bool get_SupportsJPhoneSymbols();
    public virtual bool get_SupportsJPhoneMultiMediaAttributes();
    public virtual int get_MaximumRenderedPageSize();
    public virtual bool get_RequiresSpecialViewStateEncoding();
    public virtual bool get_SupportsQueryStringInFormAction();
    public virtual bool get_SupportsCacheControlMetaTag();
    public virtual bool get_SupportsUncheck();
    public virtual bool get_CanRenderEmptySelects();
    public virtual bool get_SupportsRedirectWithCookie();
    public virtual bool get_SupportsEmptyStringInCookieValue();
    public virtual int get_DefaultSubmitButtonLimit();
    public virtual bool get_SupportsXmlHttp();
    public virtual bool get_SupportsCallback();
    public virtual int get_MaximumHrefLength();
    public bool IsBrowser(string browserName);
    public void AddBrowser(string browserName);
    private sealed virtual override bool System.Web.UI.IFilterResolutionService.EvaluateFilter(string filterName);
    private sealed virtual override int System.Web.UI.IFilterResolutionService.CompareFilters(string filter1, string filter2);
}
public class System.Web.Configuration.HttpCapabilitiesDefaultProvider : HttpCapabilitiesProvider {
    internal CapabilitiesRule _rule;
    internal Hashtable _variables;
    internal Type _resultType;
    internal TimeSpan _cachetime;
    internal string _cacheKeyPrefix;
    public int UserAgentCacheKeyLength { get; public set; }
    public Type ResultType { get; public set; }
    public TimeSpan CacheTime { get; public set; }
    internal string BrowserCapabilitiesProviderType { get; internal set; }
    internal HttpCapabilitiesProvider BrowserCapabilitiesProvider { get; internal set; }
    internal BrowserCapabilitiesFactoryBase BrowserCapFactory { get; }
    public HttpCapabilitiesDefaultProvider(HttpCapabilitiesDefaultProvider parent);
    private static HttpCapabilitiesDefaultProvider();
    public int get_UserAgentCacheKeyLength();
    public void set_UserAgentCacheKeyLength(int value);
    public Type get_ResultType();
    public void set_ResultType(Type value);
    public TimeSpan get_CacheTime();
    public void set_CacheTime(TimeSpan value);
    internal string get_BrowserCapabilitiesProviderType();
    internal void set_BrowserCapabilitiesProviderType(string value);
    internal HttpCapabilitiesProvider get_BrowserCapabilitiesProvider();
    internal void set_BrowserCapabilitiesProvider(HttpCapabilitiesProvider value);
    internal BrowserCapabilitiesFactoryBase get_BrowserCapFactory();
    internal void ClearParent();
    public void AddDependency(string variable);
    public virtual void AddRuleList(ArrayList ruleList);
    internal static string GetUserAgent(HttpRequest request);
    internal static string GetUserAgentFromClientTarget(VirtualPath configPath, string clientTarget);
    public virtual HttpBrowserCapabilities GetBrowserCapabilities(HttpRequest request);
    internal HttpCapabilitiesBase Evaluate(HttpRequest request);
    internal HttpCapabilitiesBase EvaluateFinal(HttpRequest request, bool onlyEvaluateUserAgent);
}
public abstract class System.Web.Configuration.HttpCapabilitiesProvider : object {
    public abstract virtual HttpBrowserCapabilities GetBrowserCapabilities(HttpRequest request);
}
public class System.Web.Configuration.HttpCapabilitiesSectionHandler : object {
    private static HttpCapabilitiesSectionHandler();
    public sealed virtual object Create(object parent, object configurationContext, XmlNode section);
}
public class System.Web.Configuration.HttpConfigurationContext : object {
    public string VirtualPath { get; }
    internal HttpConfigurationContext(string vpath);
    public string get_VirtualPath();
}
internal class System.Web.Configuration.HttpConfigurationSystem : object {
    internal static string ConfigSystemTypeString;
    internal static string MachineConfigSubdirectory;
    internal static string MachineConfigFilename;
    internal static string RootWebConfigFilename;
    internal static string WebConfigFileName;
    internal static string InetsrvDirectoryName;
    internal static string ApplicationHostConfigFileName;
    internal static bool UseHttpConfigurationSystem { get; }
    internal static bool IsSet { get; }
    private bool System.Configuration.Internal.IInternalConfigSystem.SupportsUserConfig { get; }
    internal static string MsCorLibDirectory { get; }
    internal static string MachineConfigurationDirectory { get; }
    internal static string MachineConfigurationFilePath { get; }
    internal static string RootWebConfigurationFilePath { get; internal set; }
    private static HttpConfigurationSystem();
    internal static void EnsureInit(IConfigMapPath configMapPath, bool listenToFileChanges, bool initComplete);
    internal static void CompleteInit();
    internal static bool get_UseHttpConfigurationSystem();
    internal static bool get_IsSet();
    private sealed virtual override object System.Configuration.Internal.IInternalConfigSystem.GetSection(string configKey);
    private sealed virtual override void System.Configuration.Internal.IInternalConfigSystem.RefreshConfig(string sectionName);
    private sealed virtual override bool System.Configuration.Internal.IInternalConfigSystem.get_SupportsUserConfig();
    internal static object GetSection(string sectionName);
    internal static object GetSection(string sectionName, VirtualPath path);
    internal static object GetSection(string sectionName, string path);
    internal static object GetApplicationSection(string sectionName);
    internal static IInternalConfigRecord GetUniqueConfigRecord(string configPath);
    internal static void AddFileDependency(string file);
    internal void OnConfigurationChanged(object sender, InternalConfigEventArgs e);
    internal void OnConfigFileChanged(object sender, FileChangeEvent e);
    internal static string get_MsCorLibDirectory();
    internal static string get_MachineConfigurationDirectory();
    internal static string get_MachineConfigurationFilePath();
    internal static string get_RootWebConfigurationFilePath();
    internal static void set_RootWebConfigurationFilePath(string value);
}
public class System.Web.Configuration.HttpCookiesSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("httpOnlyCookies")]
public bool HttpOnlyCookies { get; public set; }
    [ConfigurationPropertyAttribute("requireSSL")]
public bool RequireSSL { get; public set; }
    [ConfigurationPropertyAttribute("domain")]
public string Domain { get; public set; }
    private static HttpCookiesSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public bool get_HttpOnlyCookies();
    public void set_HttpOnlyCookies(bool value);
    public bool get_RequireSSL();
    public void set_RequireSSL(bool value);
    public string get_Domain();
    public void set_Domain(string value);
}
public class System.Web.Configuration.HttpHandlerAction : ConfigurationElement {
    internal string Key { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("path")]
public string Path { get; public set; }
    [ConfigurationPropertyAttribute("verb")]
public string Verb { get; public set; }
    [ConfigurationPropertyAttribute("type")]
public string Type { get; public set; }
    internal Type TypeInternal { get; }
    [ConfigurationPropertyAttribute("validate")]
public bool Validate { get; public set; }
    private static HttpHandlerAction();
    public HttpHandlerAction(string path, string type, string verb);
    public HttpHandlerAction(string path, string type, string verb, bool validate);
    internal string get_Key();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Path();
    public void set_Path(string value);
    public string get_Verb();
    public void set_Verb(string value);
    public string get_Type();
    public void set_Type(string value);
    internal Type get_TypeInternal();
    public bool get_Validate();
    public void set_Validate(bool value);
    internal void InitValidateInternal();
    internal bool IsMatch(string verb, VirtualPath path);
    internal object Create();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.HttpHandlerAction")]
public class System.Web.Configuration.HttpHandlerActionCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public ConfigurationElementCollectionType CollectionType { get; }
    protected bool ThrowOnDuplicate { get; }
    public HttpHandlerAction Item { get; public set; }
    private static HttpHandlerActionCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual bool get_ThrowOnDuplicate();
    public HttpHandlerAction get_Item(int index);
    public void set_Item(int index, HttpHandlerAction value);
    public int IndexOf(HttpHandlerAction action);
    public void Add(HttpHandlerAction httpHandlerAction);
    public void Remove(HttpHandlerAction action);
    public void RemoveAt(int index);
    public void Remove(string verb, string path);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public void Clear();
}
public class System.Web.Configuration.HttpHandlersSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("")]
public HttpHandlerActionCollection Handlers { get; }
    private static HttpHandlersSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public HttpHandlerActionCollection get_Handlers();
    internal bool ValidateHandlers();
    internal HttpHandlerAction FindMapping(string verb, VirtualPath path);
}
public class System.Web.Configuration.HttpModuleAction : ConfigurationElement {
    internal string Key { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
[StringValidatorAttribute]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("type")]
public string Type { get; public set; }
    internal string FileName { get; }
    internal int LineNumber { get; }
    internal ModulesEntry Entry { get; }
    protected ConfigurationElementProperty ElementProperty { get; }
    private static HttpModuleAction();
    public HttpModuleAction(string name, string type);
    internal string get_Key();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public void set_Name(string value);
    public string get_Type();
    public void set_Type(string value);
    internal string get_FileName();
    internal int get_LineNumber();
    internal ModulesEntry get_Entry();
    internal static bool IsSpecialModule(string className);
    internal static bool IsSpecialModuleName(string name);
    protected virtual ConfigurationElementProperty get_ElementProperty();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.HttpModuleAction")]
public class System.Web.Configuration.HttpModuleActionCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public HttpModuleAction Item { get; public set; }
    private static HttpModuleActionCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public HttpModuleAction get_Item(int index);
    public void set_Item(int index, HttpModuleAction value);
    public int IndexOf(HttpModuleAction action);
    public void Add(HttpModuleAction httpModule);
    public void Remove(HttpModuleAction action);
    public void Remove(string name);
    public void RemoveAt(int index);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    protected virtual bool IsElementRemovable(ConfigurationElement element);
    public void Clear();
}
public class System.Web.Configuration.HttpModulesSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("")]
public HttpModuleActionCollection Modules { get; }
    private static HttpModulesSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public HttpModuleActionCollection get_Modules();
    internal HttpModuleCollection CreateModules();
}
public class System.Web.Configuration.HttpRuntimeSection : ConfigurationSection {
    internal static int DefaultExecutionTimeout;
    internal static int DefaultMaxRequestLength;
    internal static int DefaultRequestLengthDiskThreshold;
    internal static int DefaultMinFreeThreads;
    internal static int DefaultMinLocalRequestFreeThreads;
    internal static int DefaultAppRequestQueueLimit;
    internal static int DefaultShutdownTimeout;
    internal static int DefaultDelayNotificationTimeout;
    internal static int DefaultWaitChangeNotification;
    internal static int DefaultMaxWaitChangeNotification;
    internal static bool DefaultAllowDynamicModuleRegistration;
    internal static bool DefaultEnableKernelOutputCache;
    internal static bool DefaultRequireRootedSaveAsPath;
    internal static bool DefaultSendCacheControlHeader;
    internal static string DefaultEncoderType;
    internal static Version DefaultRequestValidationMode;
    internal static string DefaultRequestValidationModeString;
    internal static string DefaultRequestValidationType;
    internal static string DefaultRequestPathInvalidCharacters;
    internal static int DefaultMaxUrlLength;
    internal static int DefaultMaxQueryStringLength;
    internal static bool DefaultRelaxedUrlToFileSystemMapping;
    internal static string DefaultTargetFramework;
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("asyncPreloadMode")]
public AsyncPreloadModeFlags AsyncPreloadMode { get; public set; }
    [ConfigurationPropertyAttribute("fcnMode")]
public FcnMode FcnMode { get; public set; }
    [ConfigurationPropertyAttribute("executionTimeout")]
[TypeConverterAttribute("System.Configuration.TimeSpanSecondsConverter")]
[TimeSpanValidatorAttribute]
public TimeSpan ExecutionTimeout { get; public set; }
    [ConfigurationPropertyAttribute("maxRequestLength")]
[IntegerValidatorAttribute]
public int MaxRequestLength { get; public set; }
    [ConfigurationPropertyAttribute("requestLengthDiskThreshold")]
[IntegerValidatorAttribute]
public int RequestLengthDiskThreshold { get; public set; }
    [ConfigurationPropertyAttribute("useFullyQualifiedRedirectUrl")]
public bool UseFullyQualifiedRedirectUrl { get; public set; }
    [ConfigurationPropertyAttribute("minFreeThreads")]
[IntegerValidatorAttribute]
public int MinFreeThreads { get; public set; }
    [ConfigurationPropertyAttribute("minLocalRequestFreeThreads")]
[IntegerValidatorAttribute]
public int MinLocalRequestFreeThreads { get; public set; }
    [ConfigurationPropertyAttribute("appRequestQueueLimit")]
[IntegerValidatorAttribute]
public int AppRequestQueueLimit { get; public set; }
    [ConfigurationPropertyAttribute("enableKernelOutputCache")]
public bool EnableKernelOutputCache { get; public set; }
    [ConfigurationPropertyAttribute("enableVersionHeader")]
public bool EnableVersionHeader { get; public set; }
    [ConfigurationPropertyAttribute("apartmentThreading")]
public bool ApartmentThreading { get; public set; }
    [ConfigurationPropertyAttribute("requireRootedSaveAsPath")]
public bool RequireRootedSaveAsPath { get; public set; }
    [ConfigurationPropertyAttribute("enable")]
public bool Enable { get; public set; }
    [ConfigurationPropertyAttribute("targetFramework")]
public string TargetFramework { get; public set; }
    [ConfigurationPropertyAttribute("sendCacheControlHeader")]
public bool SendCacheControlHeader { get; public set; }
    [ConfigurationPropertyAttribute("defaultRegexMatchTimeout")]
[RegexMatchTimeoutValidatorAttribute]
public TimeSpan DefaultRegexMatchTimeout { get; public set; }
    [ConfigurationPropertyAttribute("shutdownTimeout")]
[TypeConverterAttribute("System.Configuration.TimeSpanSecondsConverter")]
public TimeSpan ShutdownTimeout { get; public set; }
    [ConfigurationPropertyAttribute("delayNotificationTimeout")]
[TypeConverterAttribute("System.Configuration.TimeSpanSecondsConverter")]
public TimeSpan DelayNotificationTimeout { get; public set; }
    [ConfigurationPropertyAttribute("waitChangeNotification")]
[IntegerValidatorAttribute]
public int WaitChangeNotification { get; public set; }
    [ConfigurationPropertyAttribute("maxWaitChangeNotification")]
[IntegerValidatorAttribute]
public int MaxWaitChangeNotification { get; public set; }
    [ConfigurationPropertyAttribute("enableHeaderChecking")]
public bool EnableHeaderChecking { get; public set; }
    [ConfigurationPropertyAttribute("encoderType")]
[StringValidatorAttribute]
public string EncoderType { get; public set; }
    [ConfigurationPropertyAttribute("requestValidationMode")]
[TypeConverterAttribute("System.Web.Configuration.VersionConverter")]
public Version RequestValidationMode { get; public set; }
    [ConfigurationPropertyAttribute("requestValidationType")]
[StringValidatorAttribute]
public string RequestValidationType { get; public set; }
    [ConfigurationPropertyAttribute("requestPathInvalidCharacters")]
public string RequestPathInvalidCharacters { get; public set; }
    [ConfigurationPropertyAttribute("maxUrlLength")]
[IntegerValidatorAttribute]
public int MaxUrlLength { get; public set; }
    [ConfigurationPropertyAttribute("maxQueryStringLength")]
[IntegerValidatorAttribute]
public int MaxQueryStringLength { get; public set; }
    [ConfigurationPropertyAttribute("relaxedUrlToFileSystemMapping")]
public bool RelaxedUrlToFileSystemMapping { get; public set; }
    [ConfigurationPropertyAttribute("allowDynamicModuleRegistration")]
public bool AllowDynamicModuleRegistration { get; public set; }
    internal int MaxRequestLengthBytes { get; }
    internal int RequestLengthDiskThresholdBytes { get; }
    internal string VersionHeader { get; }
    internal Char[] RequestPathInvalidCharactersArray { get; }
    private static HttpRuntimeSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public AsyncPreloadModeFlags get_AsyncPreloadMode();
    public void set_AsyncPreloadMode(AsyncPreloadModeFlags value);
    public FcnMode get_FcnMode();
    public void set_FcnMode(FcnMode value);
    public TimeSpan get_ExecutionTimeout();
    public void set_ExecutionTimeout(TimeSpan value);
    public int get_MaxRequestLength();
    public void set_MaxRequestLength(int value);
    public int get_RequestLengthDiskThreshold();
    public void set_RequestLengthDiskThreshold(int value);
    public bool get_UseFullyQualifiedRedirectUrl();
    public void set_UseFullyQualifiedRedirectUrl(bool value);
    public int get_MinFreeThreads();
    public void set_MinFreeThreads(int value);
    public int get_MinLocalRequestFreeThreads();
    public void set_MinLocalRequestFreeThreads(int value);
    public int get_AppRequestQueueLimit();
    public void set_AppRequestQueueLimit(int value);
    public bool get_EnableKernelOutputCache();
    public void set_EnableKernelOutputCache(bool value);
    public bool get_EnableVersionHeader();
    public void set_EnableVersionHeader(bool value);
    public bool get_ApartmentThreading();
    public void set_ApartmentThreading(bool value);
    public bool get_RequireRootedSaveAsPath();
    public void set_RequireRootedSaveAsPath(bool value);
    public bool get_Enable();
    public void set_Enable(bool value);
    public string get_TargetFramework();
    public void set_TargetFramework(string value);
    internal FrameworkName GetTargetFrameworkName();
    public bool get_SendCacheControlHeader();
    public void set_SendCacheControlHeader(bool value);
    public TimeSpan get_DefaultRegexMatchTimeout();
    public void set_DefaultRegexMatchTimeout(TimeSpan value);
    public TimeSpan get_ShutdownTimeout();
    public void set_ShutdownTimeout(TimeSpan value);
    public TimeSpan get_DelayNotificationTimeout();
    public void set_DelayNotificationTimeout(TimeSpan value);
    public int get_WaitChangeNotification();
    public void set_WaitChangeNotification(int value);
    public int get_MaxWaitChangeNotification();
    public void set_MaxWaitChangeNotification(int value);
    public bool get_EnableHeaderChecking();
    public void set_EnableHeaderChecking(bool value);
    public string get_EncoderType();
    public void set_EncoderType(string value);
    public Version get_RequestValidationMode();
    public void set_RequestValidationMode(Version value);
    public string get_RequestValidationType();
    public void set_RequestValidationType(string value);
    public string get_RequestPathInvalidCharacters();
    public void set_RequestPathInvalidCharacters(string value);
    public int get_MaxUrlLength();
    public void set_MaxUrlLength(int value);
    public int get_MaxQueryStringLength();
    public void set_MaxQueryStringLength(int value);
    public bool get_RelaxedUrlToFileSystemMapping();
    public void set_RelaxedUrlToFileSystemMapping(bool value);
    public bool get_AllowDynamicModuleRegistration();
    public void set_AllowDynamicModuleRegistration(bool value);
    internal int get_MaxRequestLengthBytes();
    internal int get_RequestLengthDiskThresholdBytes();
    internal string get_VersionHeader();
    internal Char[] get_RequestPathInvalidCharactersArray();
    protected virtual void SetReadOnly();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7c23ff90-33af-11d3-95da-00a024a85b51")]
internal interface System.Web.Configuration.IApplicationContext {
    public abstract virtual void SetContextNameObject(IAssemblyName pName);
    public abstract virtual void GetContextNameObject(IAssemblyName& ppName);
    public abstract virtual void Set(string szName, int pvValue, UInt32 cbValue, UInt32 dwFlags);
    public abstract virtual void Get(string szName, Int32& pvValue, UInt32& pcbValue, UInt32 dwFlags);
    public abstract virtual void GetDynamicDirectory(Int32& wzDynamicDir, UInt32& pdwSize);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("e707dcde-d1cd-11d2-bab9-00c04f8eceae")]
internal interface System.Web.Configuration.IAssemblyCache {
    public abstract virtual int UninstallAssembly(UInt32 dwFlags, string pszAssemblyName, IntPtr pvReserved, UInt32& pulDisposition);
    public abstract virtual int QueryAssemblyInfo(UInt32 dwFlags, string pszAssemblyName, IntPtr pAsmInfo);
    public abstract virtual int CreateAssemblyCacheItem(UInt32 dwFlags, IntPtr pvReserved, IAssemblyCacheItem& ppAsmItem, string pszAssemblyName);
    public abstract virtual int CreateAssemblyScavenger(Object& ppAsmScavenger);
    public abstract virtual int InstallAssembly(UInt32 dwFlags, string pszManifestFilePath, IntPtr pvReserved);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9e3aaeb4-d1cd-11d2-bab9-00c04f8eceae")]
internal interface System.Web.Configuration.IAssemblyCacheItem {
    public abstract virtual void CreateStream(string pszName, UInt32 dwFormat, UInt32 dwFlags, UInt32 dwMaxSize, IStream& ppStream);
    public abstract virtual void IsNameEqual(IAssemblyName pName);
    public abstract virtual void Commit(UInt32 dwFlags);
    public abstract virtual void MarkAssemblyVisible(UInt32 dwFlags);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CD193BC0-B4BC-11d2-9833-00C04FC31D2E")]
internal interface System.Web.Configuration.IAssemblyName {
    public abstract virtual int SetProperty(UInt32 PropertyId, IntPtr pvProperty, UInt32 cbProperty);
    public abstract virtual int GetProperty(UInt32 PropertyId, IntPtr pvProperty, UInt32& pcbProperty);
    public abstract virtual int Finalize();
    public abstract virtual int GetDisplayName(IntPtr szDisplayName, UInt32& pccDisplayName, UInt32 dwDisplayFlags);
    public abstract virtual int BindToObject(object refIID, object pAsmBindSink, IApplicationContext pApplicationContext, string szCodeBase, long llFlags, int pvReserved, UInt32 cbReserved, Int32& ppv);
    public abstract virtual int GetName(UInt32& lpcwBuffer, Int32& pwzName);
    public abstract virtual int GetVersion(UInt32& pdwVersionHi, UInt32& pdwVersionLow);
    public abstract virtual int IsEqual(IAssemblyName pName, UInt32 dwCmpFlags);
    public abstract virtual int Clone(IAssemblyName& pName);
}
public interface System.Web.Configuration.IConfigMapPath {
    public abstract virtual string GetMachineConfigFilename();
    public abstract virtual string GetRootWebConfigFilename();
    public abstract virtual void GetPathConfigFilename(string siteID, string path, String& directory, String& baseName);
    public abstract virtual void GetDefaultSiteNameAndID(String& siteName, String& siteID);
    public abstract virtual void ResolveSiteArgument(string siteArgument, String& siteName, String& siteID);
    public abstract virtual string MapPath(string siteID, string path);
    public abstract virtual string GetAppPathForPath(string siteID, string path);
}
internal interface System.Web.Configuration.IConfigMapPath2 {
    public abstract virtual void GetPathConfigFilename(string siteID, VirtualPath path, String& directory, String& baseName);
    public abstract virtual string MapPath(string siteID, VirtualPath path);
    public abstract virtual VirtualPath GetAppPathForPath(string siteID, VirtualPath path);
}
public interface System.Web.Configuration.IConfigMapPathFactory {
    public abstract virtual IConfigMapPath Create(string virtualPath, string physicalPath);
}
public class System.Web.Configuration.IdentitySection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("impersonate")]
public bool Impersonate { get; public set; }
    [ConfigurationPropertyAttribute("userName")]
public string UserName { get; public set; }
    [ConfigurationPropertyAttribute("password")]
public string Password { get; public set; }
    internal IntPtr ImpersonateToken { get; }
    internal ContextInformation ProtectedEvaluationContext { get; }
    private static IdentitySection();
    protected virtual object GetRuntimeObject();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public bool get_Impersonate();
    public void set_Impersonate(bool value);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_Password();
    public void set_Password(string value);
    protected virtual void Reset(ConfigurationElement parentElement);
    protected virtual void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    internal IntPtr get_ImpersonateToken();
    internal static IntPtr CreateUserToken(string name, string password, String& error);
    internal ContextInformation get_ProtectedEvaluationContext();
}
internal interface System.Web.Configuration.IGac {
    [DispIdAttribute("13")]
public abstract virtual void GacInstall(string assemblyPath);
}
public class System.Web.Configuration.IgnoreDeviceFilterElement : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
[StringValidatorAttribute]
public string Name { get; }
    protected ConfigurationElementProperty ElementProperty { get; }
    private static IgnoreDeviceFilterElement();
    public IgnoreDeviceFilterElement(string name);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    protected virtual ConfigurationElementProperty get_ElementProperty();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.IgnoreDeviceFilterElement")]
public class System.Web.Configuration.IgnoreDeviceFilterElementCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public IgnoreDeviceFilterElement Item { get; }
    public IgnoreDeviceFilterElement Item { get; public set; }
    protected string ElementName { get; }
    public ConfigurationElementCollectionType CollectionType { get; }
    private static IgnoreDeviceFilterElementCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public void Add(IgnoreDeviceFilterElement deviceFilter);
    public void Remove(string name);
    public void Remove(IgnoreDeviceFilterElement deviceFilter);
    public void RemoveAt(int index);
    public IgnoreDeviceFilterElement get_Item(string name);
    public IgnoreDeviceFilterElement get_Item(int index);
    public void set_Item(int index, IgnoreDeviceFilterElement value);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    protected virtual string get_ElementName();
    public virtual ConfigurationElementCollectionType get_CollectionType();
}
internal static class System.Web.Configuration.IISMapPath : object {
    internal static IConfigMapPath GetInstance();
    internal static bool IsSiteId(string siteName);
}
internal class System.Web.Configuration.IISVersionHelper : object {
    internal IISVersionHelper(string version);
    public sealed virtual void Dispose();
}
internal class System.Web.Configuration.ImpersonateTokenRef : object {
    internal IntPtr Handle { get; }
    internal ImpersonateTokenRef(IntPtr token);
    internal IntPtr get_Handle();
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
}
[ComVisibleAttribute("False")]
public interface System.Web.Configuration.Internal.IInternalConfigWebHost {
    public abstract virtual void GetSiteIDAndVPathFromConfigPath(string configPath, String& siteID, String& vpath);
    public abstract virtual string GetConfigPathFromSiteIDAndVPath(string siteID, string vpath);
}
[ComVisibleAttribute("True")]
[GuidAttribute("A99B591A-23C6-4238-8452-C7B0E895063D")]
public interface System.Web.Configuration.IRemoteWebConfigurationHostServer {
    public abstract virtual Byte[] GetData(string fileName, bool getReadTimeOnly, Int64& readTime);
    public abstract virtual void WriteData(string fileName, string templateFileName, Byte[] data, Int64& readTime);
    public abstract virtual string GetFilePaths(int webLevel, string path, string site, string locationSubPath);
    public abstract virtual string DoEncryptOrDecrypt(bool doEncrypt, string xmlString, string protectionProviderName, string protectionProviderType, String[] parameterKeys, String[] parameterValues);
    public abstract virtual void GetFileDetails(string name, Boolean& exists, Int64& size, Int64& createDate, Int64& lastWriteDate);
}
internal interface System.Web.Configuration.IServerConfig {
    public abstract virtual string MapPath(IApplicationHost appHost, VirtualPath path);
    public abstract virtual string GetSiteNameFromSiteID(string siteID);
    public abstract virtual bool GetUncUser(IApplicationHost appHost, VirtualPath path, String& username, String& password);
    public abstract virtual String[] GetVirtualSubdirs(VirtualPath path, bool inApp);
    public abstract virtual long GetW3WPMemoryLimitInKB();
}
internal interface System.Web.Configuration.IServerConfig2 {
    public abstract virtual bool IsWithinApp(string virtualPath);
}
internal enum System.Web.Configuration.IVType : Enum {
    public int value__;
    public static IVType None;
    public static IVType Random;
    public static IVType Hash;
}
public class System.Web.Configuration.LowerCaseStringConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext ctx, Type type);
    public virtual bool CanConvertFrom(ITypeDescriptorContext ctx, Type type);
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
public enum System.Web.Configuration.MachineKeyCompatibilityMode : Enum {
    public int value__;
    public static MachineKeyCompatibilityMode Framework20SP1;
    public static MachineKeyCompatibilityMode Framework20SP2;
    public static MachineKeyCompatibilityMode Framework45;
}
public class System.Web.Configuration.MachineKeySection : ConfigurationSection {
    internal static string DefaultValidationAlgorithm;
    internal static MachineKeyValidation DefaultValidation;
    internal static string DefaultDataProtectorType;
    internal static string DefaultApplicationName;
    internal static bool IsDecryptionKeyAutogenerated { get; }
    internal bool AutogenKey { get; }
    internal Byte[] ValidationKeyInternal { get; }
    internal Byte[] DecryptionKeyInternal { get; }
    internal static int HashSize { get; }
    internal static int ValidationKeySize { get; }
    internal static MachineKeyCompatibilityMode CompatMode { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("validationKey")]
[TypeConverterAttribute("System.Configuration.WhiteSpaceTrimStringConverter")]
[StringValidatorAttribute]
public string ValidationKey { get; public set; }
    [ConfigurationPropertyAttribute("decryptionKey")]
[TypeConverterAttribute("System.Configuration.WhiteSpaceTrimStringConverter")]
[StringValidatorAttribute]
public string DecryptionKey { get; public set; }
    [ConfigurationPropertyAttribute("decryption")]
[TypeConverterAttribute("System.Configuration.WhiteSpaceTrimStringConverter")]
[StringValidatorAttribute]
public string Decryption { get; public set; }
    [ConfigurationPropertyAttribute("validation")]
[TypeConverterAttribute("System.Configuration.WhiteSpaceTrimStringConverter")]
[StringValidatorAttribute]
public string ValidationAlgorithm { get; public set; }
    public MachineKeyValidation Validation { get; public set; }
    [ConfigurationPropertyAttribute("dataProtectorType")]
[TypeConverterAttribute("System.Configuration.WhiteSpaceTrimStringConverter")]
public string DataProtectorType { get; public set; }
    [ConfigurationPropertyAttribute("applicationName")]
[TypeConverterAttribute("System.Configuration.WhiteSpaceTrimStringConverter")]
public string ApplicationName { get; public set; }
    [ConfigurationPropertyAttribute("compatibilityMode")]
public MachineKeyCompatibilityMode CompatibilityMode { get; public set; }
    internal static bool UsingCustomEncryption { get; }
    private static MachineKeySection();
    internal static bool get_IsDecryptionKeyAutogenerated();
    internal bool get_AutogenKey();
    internal Byte[] get_ValidationKeyInternal();
    internal Byte[] get_DecryptionKeyInternal();
    internal static int get_HashSize();
    internal static int get_ValidationKeySize();
    internal static MachineKeyCompatibilityMode get_CompatMode();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_ValidationKey();
    public void set_ValidationKey(string value);
    public string get_DecryptionKey();
    public void set_DecryptionKey(string value);
    public string get_Decryption();
    public void set_Decryption(string value);
    internal string GetDecryptionAttributeSkipValidation();
    public string get_ValidationAlgorithm();
    public void set_ValidationAlgorithm(string value);
    internal string GetValidationAttributeSkipValidation();
    public MachineKeyValidation get_Validation();
    public void set_Validation(MachineKeyValidation value);
    public string get_DataProtectorType();
    public void set_DataProtectorType(string value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public MachineKeyCompatibilityMode get_CompatibilityMode();
    public void set_CompatibilityMode(MachineKeyCompatibilityMode value);
    protected virtual void Reset(ConfigurationElement parentElement);
    [ObsoleteAttribute("This API exists only for backward compatibility; new framework features that require cryptographic services MUST NOT call it. New features should use the AspNetCryptoServiceProvider class instead.")]
internal static Byte[] EncryptOrDecryptData(bool fEncrypt, Byte[] buf, Byte[] modifier, int start, int length);
    [ObsoleteAttribute("This API exists only for backward compatibility; new framework features that require cryptographic services MUST NOT call it. New features should use the AspNetCryptoServiceProvider class instead.")]
internal static Byte[] EncryptOrDecryptData(bool fEncrypt, Byte[] buf, Byte[] modifier, int start, int length, bool useValidationSymAlgo);
    [ObsoleteAttribute("This API exists only for backward compatibility; new framework features that require cryptographic services MUST NOT call it. New features should use the AspNetCryptoServiceProvider class instead.")]
internal static Byte[] EncryptOrDecryptData(bool fEncrypt, Byte[] buf, Byte[] modifier, int start, int length, bool useValidationSymAlgo, bool useLegacyMode, IVType ivType);
    [ObsoleteAttribute("This API exists only for backward compatibility; new framework features that require cryptographic services MUST NOT call it. New features should use the AspNetCryptoServiceProvider class instead.")]
internal static Byte[] EncryptOrDecryptData(bool fEncrypt, Byte[] buf, Byte[] modifier, int start, int length, bool useValidationSymAlgo, bool useLegacyMode, IVType ivType, bool signData);
    [ObsoleteAttribute("This API exists only for backward compatibility; new framework features that require cryptographic services MUST NOT call it. New features should use the AspNetCryptoServiceProvider class instead.")]
internal static string HashAndBase64EncodeString(string s);
    internal static void DestroyByteArray(Byte[] buf);
    internal void DestroyKeys();
    internal static MachineKeySection GetApplicationConfig();
    [ObsoleteAttribute("This API exists only for backward compatibility; new framework features that require cryptographic services MUST NOT call it. New features should use the AspNetCryptoServiceProvider class instead.")]
internal static Byte[] GetEncodedData(Byte[] buf, Byte[] modifier, int start, Int32& length);
    [ObsoleteAttribute("This API exists only for backward compatibility; new framework features that require cryptographic services MUST NOT call it. New features should use the AspNetCryptoServiceProvider class instead.")]
internal static Byte[] GetDecodedData(Byte[] buf, Byte[] modifier, int start, int length, Int32& dataLength);
    [ObsoleteAttribute("This API exists only for backward compatibility; new framework features that require cryptographic services MUST NOT call it. New features should use the AspNetCryptoServiceProvider class instead.")]
internal static Byte[] HashData(Byte[] buf, Byte[] modifier, int start, int length);
    [ObsoleteAttribute("This API exists only for backward compatibility; new framework features that require cryptographic services MUST NOT call it. New features should use the AspNetCryptoServiceProvider class instead.")]
internal static Byte[] HexStringToByteArray(string str);
    internal static int RoundupNumBitsToNumBytes(int numBits);
    [ObsoleteAttribute("This API exists only for backward compatibility; new framework features that require cryptographic services MUST NOT call it. New features should use the AspNetCryptoServiceProvider class instead.")]
internal static Byte[] GetUnHashedData(Byte[] bufHashed);
    [ObsoleteAttribute("This API exists only for backward compatibility; new framework features that require cryptographic services MUST NOT call it. New features should use the AspNetCryptoServiceProvider class instead.")]
internal static bool VerifyHashedData(Byte[] bufHashed);
    internal static bool get_UsingCustomEncryption();
    protected virtual void SetReadOnly();
}
public enum System.Web.Configuration.MachineKeyValidation : Enum {
    public int value__;
    public static MachineKeyValidation MD5;
    public static MachineKeyValidation SHA1;
    public static MachineKeyValidation TripleDES;
    public static MachineKeyValidation AES;
    public static MachineKeyValidation HMACSHA256;
    public static MachineKeyValidation HMACSHA384;
    public static MachineKeyValidation HMACSHA512;
    public static MachineKeyValidation Custom;
}
public class System.Web.Configuration.MachineKeyValidationConverter : ConfigurationConverterBase {
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
    internal static string ConvertFromEnum(MachineKeyValidation enumValue);
    internal static MachineKeyValidation ConvertToEnum(string strValue);
}
internal class System.Web.Configuration.MapPathCacheInfo : object {
    internal string MapPathResult;
    internal bool Evaluated;
    internal Exception CachedException;
}
public class System.Web.Configuration.MembershipSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("providers")]
public ProviderSettingsCollection Providers { get; }
    [ConfigurationPropertyAttribute("defaultProvider")]
[StringValidatorAttribute]
public string DefaultProvider { get; public set; }
    [ConfigurationPropertyAttribute("hashAlgorithmType")]
public string HashAlgorithmType { get; public set; }
    [ConfigurationPropertyAttribute("userIsOnlineTimeWindow")]
[TypeConverterAttribute("System.Configuration.TimeSpanMinutesConverter")]
[TimeSpanValidatorAttribute]
public TimeSpan UserIsOnlineTimeWindow { get; public set; }
    private static MembershipSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public ProviderSettingsCollection get_Providers();
    public string get_DefaultProvider();
    public void set_DefaultProvider(string value);
    public string get_HashAlgorithmType();
    public void set_HashAlgorithmType(string value);
    internal void ThrowHashAlgorithmException();
    public TimeSpan get_UserIsOnlineTimeWindow();
    public void set_UserIsOnlineTimeWindow(TimeSpan value);
}
internal class System.Web.Configuration.MetabaseServerConfig : object {
    private static MetabaseServerConfig();
    internal static IServerConfig GetInstance();
    private sealed virtual override string System.Web.Configuration.IServerConfig.GetSiteNameFromSiteID(string siteID);
    private sealed virtual override string System.Web.Configuration.IServerConfig.MapPath(IApplicationHost appHost, VirtualPath path);
    private sealed virtual override String[] System.Web.Configuration.IServerConfig.GetVirtualSubdirs(VirtualPath path, bool inApp);
    private sealed virtual override bool System.Web.Configuration.IServerConfig.GetUncUser(IApplicationHost appHost, VirtualPath path, String& username, String& password);
    private sealed virtual override long System.Web.Configuration.IServerConfig.GetW3WPMemoryLimitInKB();
    private sealed virtual override string System.Web.Configuration.IConfigMapPath.GetMachineConfigFilename();
    private sealed virtual override string System.Web.Configuration.IConfigMapPath.GetRootWebConfigFilename();
    private sealed virtual override void System.Web.Configuration.IConfigMapPath.GetPathConfigFilename(string siteID, string path, String& directory, String& baseName);
    private sealed virtual override void System.Web.Configuration.IConfigMapPath2.GetPathConfigFilename(string siteID, VirtualPath path, String& directory, String& baseName);
    private sealed virtual override void System.Web.Configuration.IConfigMapPath.GetDefaultSiteNameAndID(String& siteName, String& siteID);
    private sealed virtual override void System.Web.Configuration.IConfigMapPath.ResolveSiteArgument(string siteArgument, String& siteName, String& siteID);
    private sealed virtual override string System.Web.Configuration.IConfigMapPath.MapPath(string siteID, string vpath);
    private sealed virtual override string System.Web.Configuration.IConfigMapPath2.MapPath(string siteID, VirtualPath vpath);
    private sealed virtual override string System.Web.Configuration.IConfigMapPath.GetAppPathForPath(string siteID, string vpath);
    private sealed virtual override VirtualPath System.Web.Configuration.IConfigMapPath2.GetAppPathForPath(string siteID, VirtualPath vpath);
}
internal class System.Web.Configuration.MULTI_QI : ValueType {
    internal IntPtr piid;
    internal IntPtr pItf;
    internal int hr;
    internal MULTI_QI(IntPtr pid);
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class System.Web.Configuration.MULTI_QI_X64 : ValueType {
    internal IntPtr piid;
    internal IntPtr pItf;
    internal int hr;
    internal int padding;
    internal MULTI_QI_X64(IntPtr pid);
    private sealed virtual override void System.IDisposable.Dispose();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.NamespaceInfo")]
public class System.Web.Configuration.NamespaceCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("autoImportVBNamespace")]
public bool AutoImportVBNamespace { get; public set; }
    public NamespaceInfo Item { get; public set; }
    internal Hashtable NamespaceEntries { get; }
    private static NamespaceCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public bool get_AutoImportVBNamespace();
    public void set_AutoImportVBNamespace(bool value);
    public NamespaceInfo get_Item(int index);
    public void set_Item(int index, NamespaceInfo value);
    public void Add(NamespaceInfo namespaceInformation);
    public void Remove(string s);
    public void RemoveAt(int index);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public void Clear();
    internal Hashtable get_NamespaceEntries();
}
public class System.Web.Configuration.NamespaceInfo : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("namespace")]
[StringValidatorAttribute]
public string Namespace { get; public set; }
    private static NamespaceInfo();
    public NamespaceInfo(string name);
    public virtual bool Equals(object namespaceInformation);
    public virtual int GetHashCode();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Namespace();
    public void set_Namespace(string value);
}
internal class System.Web.Configuration.NativeConfig : CriticalFinalizerObject {
    internal NativeConfig(string version);
    [ReliabilityContractAttribute("3", "2")]
protected virtual override void Finalize();
    public sealed virtual void Dispose();
    internal string GetSiteNameFromId(UInt32 siteID);
    internal string MapPathDirect(string siteName, VirtualPath path);
    internal int MgdGetAppCollection(string siteName, string virtualPath, IntPtr& pBstr, Int32& cBstr, IntPtr& pAppCollection, Int32& count);
    internal bool MgdIsWithinApp(string siteName, string appPath, string virtualPath);
    internal int MgdGetVrPathCreds(string siteName, string virtualPath, IntPtr& bstrUserName, Int32& cchUserName, IntPtr& bstrPassword, Int32& cchPassword);
    internal UInt32 MgdResolveSiteName(string siteName);
    internal int MgdGetAppPathForPath(UInt32 siteId, string virtualPath, IntPtr& bstrPath, Int32& cchPath);
}
internal class System.Web.Configuration.NullRuntimeConfig : RuntimeConfig {
    protected virtual object GetSectionObject(string sectionName);
}
public class System.Web.Configuration.OutputCacheProfile : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
[TypeConverterAttribute("System.Configuration.WhiteSpaceTrimStringConverter")]
[StringValidatorAttribute]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("enabled")]
public bool Enabled { get; public set; }
    [ConfigurationPropertyAttribute("duration")]
public int Duration { get; public set; }
    [ConfigurationPropertyAttribute("location")]
public OutputCacheLocation Location { get; public set; }
    [ConfigurationPropertyAttribute("sqlDependency")]
public string SqlDependency { get; public set; }
    [ConfigurationPropertyAttribute("varyByCustom")]
public string VaryByCustom { get; public set; }
    [ConfigurationPropertyAttribute("varyByControl")]
public string VaryByControl { get; public set; }
    [ConfigurationPropertyAttribute("varyByContentEncoding")]
public string VaryByContentEncoding { get; public set; }
    [ConfigurationPropertyAttribute("varyByHeader")]
public string VaryByHeader { get; public set; }
    [ConfigurationPropertyAttribute("varyByParam")]
public string VaryByParam { get; public set; }
    [ConfigurationPropertyAttribute("noStore")]
public bool NoStore { get; public set; }
    private static OutputCacheProfile();
    public OutputCacheProfile(string name);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public void set_Name(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public int get_Duration();
    public void set_Duration(int value);
    public OutputCacheLocation get_Location();
    public void set_Location(OutputCacheLocation value);
    public string get_SqlDependency();
    public void set_SqlDependency(string value);
    public string get_VaryByCustom();
    public void set_VaryByCustom(string value);
    public string get_VaryByControl();
    public void set_VaryByControl(string value);
    public string get_VaryByContentEncoding();
    public void set_VaryByContentEncoding(string value);
    public string get_VaryByHeader();
    public void set_VaryByHeader(string value);
    public string get_VaryByParam();
    public void set_VaryByParam(string value);
    public bool get_NoStore();
    public void set_NoStore(bool value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.OutputCacheProfile")]
public class System.Web.Configuration.OutputCacheProfileCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public String[] AllKeys { get; }
    public OutputCacheProfile Item { get; }
    public OutputCacheProfile Item { get; public set; }
    private static OutputCacheProfileCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public String[] get_AllKeys();
    public OutputCacheProfile get_Item(string name);
    public OutputCacheProfile get_Item(int index);
    public void set_Item(int index, OutputCacheProfile value);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public void Add(OutputCacheProfile name);
    public void Clear();
    public OutputCacheProfile Get(int index);
    public OutputCacheProfile Get(string name);
    public string GetKey(int index);
    public void Remove(string name);
    public void RemoveAt(int index);
    public void Set(OutputCacheProfile user);
}
public class System.Web.Configuration.OutputCacheSection : ConfigurationSection {
    internal static bool DefaultOmitVaryStar;
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("enableOutputCache")]
public bool EnableOutputCache { get; public set; }
    [ConfigurationPropertyAttribute("enableFragmentCache")]
public bool EnableFragmentCache { get; public set; }
    [ConfigurationPropertyAttribute("sendCacheControlHeader")]
public bool SendCacheControlHeader { get; public set; }
    [ConfigurationPropertyAttribute("omitVaryStar")]
public bool OmitVaryStar { get; public set; }
    [ConfigurationPropertyAttribute("enableKernelCacheForVaryByStar")]
public bool EnableKernelCacheForVaryByStar { get; public set; }
    [ConfigurationPropertyAttribute("defaultProvider")]
[StringValidatorAttribute]
public string DefaultProviderName { get; public set; }
    [ConfigurationPropertyAttribute("providers")]
public ProviderSettingsCollection Providers { get; }
    private static OutputCacheSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public bool get_EnableOutputCache();
    public void set_EnableOutputCache(bool value);
    public bool get_EnableFragmentCache();
    public void set_EnableFragmentCache(bool value);
    public bool get_SendCacheControlHeader();
    public void set_SendCacheControlHeader(bool value);
    public bool get_OmitVaryStar();
    public void set_OmitVaryStar(bool value);
    public bool get_EnableKernelCacheForVaryByStar();
    public void set_EnableKernelCacheForVaryByStar(bool value);
    public string get_DefaultProviderName();
    public void set_DefaultProviderName(string value);
    public ProviderSettingsCollection get_Providers();
    internal OutputCacheProviderCollection CreateProviderCollection();
    internal OutputCacheProvider GetDefaultProvider(OutputCacheProviderCollection providers);
}
public class System.Web.Configuration.OutputCacheSettingsSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("outputCacheProfiles")]
public OutputCacheProfileCollection OutputCacheProfiles { get; }
    private static OutputCacheSettingsSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public OutputCacheProfileCollection get_OutputCacheProfiles();
}
public enum System.Web.Configuration.PagesEnableSessionState : Enum {
    public int value__;
    public static PagesEnableSessionState False;
    public static PagesEnableSessionState ReadOnly;
    public static PagesEnableSessionState True;
}
public class System.Web.Configuration.PagesSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("buffer")]
public bool Buffer { get; public set; }
    [ConfigurationPropertyAttribute("enableSessionState")]
public PagesEnableSessionState EnableSessionState { get; public set; }
    [ConfigurationPropertyAttribute("enableViewState")]
public bool EnableViewState { get; public set; }
    [ConfigurationPropertyAttribute("enableViewStateMac")]
public bool EnableViewStateMac { get; public set; }
    [ConfigurationPropertyAttribute("enableEventValidation")]
public bool EnableEventValidation { get; public set; }
    [ConfigurationPropertyAttribute("smartNavigation")]
public bool SmartNavigation { get; public set; }
    [ConfigurationPropertyAttribute("autoEventWireup")]
public bool AutoEventWireup { get; public set; }
    [ConfigurationPropertyAttribute("maintainScrollPositionOnPostBack")]
public bool MaintainScrollPositionOnPostBack { get; public set; }
    [ConfigurationPropertyAttribute("pageBaseType")]
public string PageBaseType { get; public set; }
    [ConfigurationPropertyAttribute("userControlBaseType")]
public string UserControlBaseType { get; public set; }
    internal Type PageBaseTypeInternal { get; }
    internal Type UserControlBaseTypeInternal { get; }
    [ConfigurationPropertyAttribute("pageParserFilterType")]
public string PageParserFilterType { get; public set; }
    internal Type PageParserFilterTypeInternal { get; }
    [ConfigurationPropertyAttribute("validateRequest")]
public bool ValidateRequest { get; public set; }
    [ConfigurationPropertyAttribute("masterPageFile")]
public string MasterPageFile { get; public set; }
    internal string MasterPageFileInternal { get; }
    [ConfigurationPropertyAttribute("theme")]
public string Theme { get; public set; }
    internal string ThemeInternal { get; }
    [ConfigurationPropertyAttribute("styleSheetTheme")]
public string StyleSheetTheme { get; public set; }
    internal string StyleSheetThemeInternal { get; }
    [ConfigurationPropertyAttribute("namespaces")]
public NamespaceCollection Namespaces { get; }
    [ConfigurationPropertyAttribute("controls")]
public TagPrefixCollection Controls { get; }
    [ConfigurationPropertyAttribute("maxPageStateFieldLength")]
public int MaxPageStateFieldLength { get; public set; }
    [ConfigurationPropertyAttribute("tagMapping")]
public TagMapCollection TagMapping { get; }
    [ConfigurationPropertyAttribute("compilationMode")]
public CompilationMode CompilationMode { get; public set; }
    [ConfigurationPropertyAttribute("viewStateEncryptionMode")]
public ViewStateEncryptionMode ViewStateEncryptionMode { get; public set; }
    [ConfigurationPropertyAttribute("asyncTimeout")]
[TimeSpanValidatorAttribute]
[TypeConverterAttribute("System.Configuration.TimeSpanSecondsConverter")]
public TimeSpan AsyncTimeout { get; public set; }
    [ConfigurationPropertyAttribute("renderAllHiddenFieldsAtTopOfForm")]
public bool RenderAllHiddenFieldsAtTopOfForm { get; public set; }
    [ConfigurationPropertyAttribute("clientIDMode")]
public ClientIDMode ClientIDMode { get; public set; }
    [ConfigurationPropertyAttribute("controlRenderingCompatibilityVersion")]
[ConfigurationValidatorAttribute("System.Web.Configuration.VersionValidator")]
[TypeConverterAttribute("System.Web.Configuration.VersionConverter")]
public Version ControlRenderingCompatibilityVersion { get; public set; }
    [ConfigurationPropertyAttribute("ignoreDeviceFilters")]
public IgnoreDeviceFilterElementCollection IgnoreDeviceFilters { get; }
    internal TagNamespaceRegisterEntryTable TagNamespaceRegisterEntriesInternal { get; }
    internal static ICollection DefaultTagNamespaceRegisterEntries { get; }
    internal Hashtable UserControlRegisterEntriesInternal { get; }
    private static PagesSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public bool get_Buffer();
    public void set_Buffer(bool value);
    public PagesEnableSessionState get_EnableSessionState();
    public void set_EnableSessionState(PagesEnableSessionState value);
    public bool get_EnableViewState();
    public void set_EnableViewState(bool value);
    public bool get_EnableViewStateMac();
    public void set_EnableViewStateMac(bool value);
    public bool get_EnableEventValidation();
    public void set_EnableEventValidation(bool value);
    public bool get_SmartNavigation();
    public void set_SmartNavigation(bool value);
    public bool get_AutoEventWireup();
    public void set_AutoEventWireup(bool value);
    public bool get_MaintainScrollPositionOnPostBack();
    public void set_MaintainScrollPositionOnPostBack(bool value);
    public string get_PageBaseType();
    public void set_PageBaseType(string value);
    public string get_UserControlBaseType();
    public void set_UserControlBaseType(string value);
    internal Type get_PageBaseTypeInternal();
    internal Type get_UserControlBaseTypeInternal();
    public string get_PageParserFilterType();
    public void set_PageParserFilterType(string value);
    internal Type get_PageParserFilterTypeInternal();
    internal PageParserFilter CreateControlTypeFilter();
    public bool get_ValidateRequest();
    public void set_ValidateRequest(bool value);
    public string get_MasterPageFile();
    public void set_MasterPageFile(string value);
    internal string get_MasterPageFileInternal();
    public string get_Theme();
    public void set_Theme(string value);
    internal string get_ThemeInternal();
    public string get_StyleSheetTheme();
    public void set_StyleSheetTheme(string value);
    internal string get_StyleSheetThemeInternal();
    public NamespaceCollection get_Namespaces();
    public TagPrefixCollection get_Controls();
    public int get_MaxPageStateFieldLength();
    public void set_MaxPageStateFieldLength(int value);
    public TagMapCollection get_TagMapping();
    public CompilationMode get_CompilationMode();
    public void set_CompilationMode(CompilationMode value);
    public ViewStateEncryptionMode get_ViewStateEncryptionMode();
    public void set_ViewStateEncryptionMode(ViewStateEncryptionMode value);
    public TimeSpan get_AsyncTimeout();
    public void set_AsyncTimeout(TimeSpan value);
    public bool get_RenderAllHiddenFieldsAtTopOfForm();
    public void set_RenderAllHiddenFieldsAtTopOfForm(bool value);
    public ClientIDMode get_ClientIDMode();
    public void set_ClientIDMode(ClientIDMode value);
    public Version get_ControlRenderingCompatibilityVersion();
    public void set_ControlRenderingCompatibilityVersion(Version value);
    public IgnoreDeviceFilterElementCollection get_IgnoreDeviceFilters();
    internal TagNamespaceRegisterEntryTable get_TagNamespaceRegisterEntriesInternal();
    internal void FillInRegisterEntries();
    internal static ICollection get_DefaultTagNamespaceRegisterEntries();
    internal Hashtable get_UserControlRegisterEntriesInternal();
    protected virtual void DeserializeSection(XmlReader reader);
    protected virtual void SetReadOnly();
}
public class System.Web.Configuration.PartialTrustVisibleAssembliesSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("")]
public PartialTrustVisibleAssemblyCollection PartialTrustVisibleAssemblies { get; }
    private static PartialTrustVisibleAssembliesSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public PartialTrustVisibleAssemblyCollection get_PartialTrustVisibleAssemblies();
}
public class System.Web.Configuration.PartialTrustVisibleAssembly : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("assemblyName")]
[StringValidatorAttribute]
public string AssemblyName { get; public set; }
    [ConfigurationPropertyAttribute("publicKey")]
[StringValidatorAttribute]
public string PublicKey { get; public set; }
    private static PartialTrustVisibleAssembly();
    public PartialTrustVisibleAssembly(string assemblyName, string publicKey);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
    public string get_PublicKey();
    public void set_PublicKey(string value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.String")]
public class System.Web.Configuration.PartialTrustVisibleAssemblyCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public PartialTrustVisibleAssembly Item { get; public set; }
    private static PartialTrustVisibleAssemblyCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public PartialTrustVisibleAssembly get_Item(int index);
    public void set_Item(int index, PartialTrustVisibleAssembly value);
    public void Add(PartialTrustVisibleAssembly partialTrustVisibleAssembly);
    public void Remove(string key);
    public void RemoveAt(int index);
    protected virtual ConfigurationElement CreateNewElement();
    public void Clear();
    protected virtual object GetElementKey(ConfigurationElement element);
    internal bool IsRemoved(string key);
}
[ObsoleteAttribute("This type is obsolete. The Passport authentication product is no longer supported and has been superseded by Live ID.")]
public class System.Web.Configuration.PassportAuthentication : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("redirectUrl")]
[StringValidatorAttribute]
public string RedirectUrl { get; public set; }
    protected ConfigurationElementProperty ElementProperty { get; }
    private static PassportAuthentication();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_RedirectUrl();
    public void set_RedirectUrl(string value);
    protected virtual ConfigurationElementProperty get_ElementProperty();
}
internal static class System.Web.Configuration.ProcessHostConfigUtils : object {
    internal static UInt32 DEFAULT_SITE_ID_UINT;
    internal static string DEFAULT_SITE_ID_STRING;
    private static ProcessHostConfigUtils();
    internal static void InitStandaloneConfig();
    internal static string MapPathActual(string siteName, VirtualPath path);
    internal static string GetSiteNameFromId(UInt32 siteId);
}
internal class System.Web.Configuration.ProcessHostMapPath : object {
    internal static string _DefaultPhysicalPathOnMapPathFailure;
    private static ProcessHostMapPath();
    internal ProcessHostMapPath(IProcessHostSupportFunctions functions);
    private sealed virtual override string System.Web.Configuration.IConfigMapPath.GetMachineConfigFilename();
    private sealed virtual override string System.Web.Configuration.IConfigMapPath.GetRootWebConfigFilename();
    private sealed virtual override void System.Web.Configuration.IConfigMapPath.GetPathConfigFilename(string siteID, string path, String& directory, String& baseName);
    private sealed virtual override void System.Web.Configuration.IConfigMapPath2.GetPathConfigFilename(string siteID, VirtualPath path, String& directory, String& baseName);
    private sealed virtual override void System.Web.Configuration.IConfigMapPath.GetDefaultSiteNameAndID(String& siteName, String& siteID);
    private sealed virtual override void System.Web.Configuration.IConfigMapPath.ResolveSiteArgument(string siteArgument, String& siteName, String& siteID);
    private sealed virtual override string System.Web.Configuration.IConfigMapPath2.MapPath(string siteID, VirtualPath path);
    private sealed virtual override string System.Web.Configuration.IConfigMapPath.MapPath(string siteID, string path);
    private sealed virtual override string System.Web.Configuration.IConfigMapPath.GetAppPathForPath(string siteID, string path);
    private sealed virtual override VirtualPath System.Web.Configuration.IConfigMapPath2.GetAppPathForPath(string siteID, VirtualPath path);
}
internal class System.Web.Configuration.ProcessHostServerConfig : object {
    private static ProcessHostServerConfig();
    internal static IServerConfig GetInstance();
    private sealed virtual override string System.Web.Configuration.IServerConfig.GetSiteNameFromSiteID(string siteID);
    private sealed virtual override string System.Web.Configuration.IServerConfig.MapPath(IApplicationHost appHost, VirtualPath path);
    private sealed virtual override String[] System.Web.Configuration.IServerConfig.GetVirtualSubdirs(VirtualPath path, bool inApp);
    private sealed virtual override bool System.Web.Configuration.IServerConfig2.IsWithinApp(string virtualPath);
    private sealed virtual override bool System.Web.Configuration.IServerConfig.GetUncUser(IApplicationHost appHost, VirtualPath path, String& username, String& password);
    private sealed virtual override long System.Web.Configuration.IServerConfig.GetW3WPMemoryLimitInKB();
}
public enum System.Web.Configuration.ProcessModelComAuthenticationLevel : Enum {
    public int value__;
    public static ProcessModelComAuthenticationLevel None;
    public static ProcessModelComAuthenticationLevel Call;
    public static ProcessModelComAuthenticationLevel Connect;
    public static ProcessModelComAuthenticationLevel Default;
    public static ProcessModelComAuthenticationLevel Pkt;
    public static ProcessModelComAuthenticationLevel PktIntegrity;
    public static ProcessModelComAuthenticationLevel PktPrivacy;
}
public enum System.Web.Configuration.ProcessModelComImpersonationLevel : Enum {
    public int value__;
    public static ProcessModelComImpersonationLevel Default;
    public static ProcessModelComImpersonationLevel Anonymous;
    public static ProcessModelComImpersonationLevel Delegate;
    public static ProcessModelComImpersonationLevel Identify;
    public static ProcessModelComImpersonationLevel Impersonate;
}
public enum System.Web.Configuration.ProcessModelLogLevel : Enum {
    public int value__;
    public static ProcessModelLogLevel None;
    public static ProcessModelLogLevel All;
    public static ProcessModelLogLevel Errors;
}
public class System.Web.Configuration.ProcessModelSection : ConfigurationSection {
    internal static TimeSpan DefaultClientConnectedCheck;
    internal static string sectionName;
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("enable")]
public bool Enable { get; public set; }
    [ConfigurationPropertyAttribute("timeout")]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
public TimeSpan Timeout { get; public set; }
    [ConfigurationPropertyAttribute("idleTimeout")]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
public TimeSpan IdleTimeout { get; public set; }
    [ConfigurationPropertyAttribute("shutdownTimeout")]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
[TimeSpanValidatorAttribute]
public TimeSpan ShutdownTimeout { get; public set; }
    [ConfigurationPropertyAttribute("requestLimit")]
[TypeConverterAttribute("System.Configuration.InfiniteIntConverter")]
[IntegerValidatorAttribute]
public int RequestLimit { get; public set; }
    [ConfigurationPropertyAttribute("requestQueueLimit")]
[TypeConverterAttribute("System.Configuration.InfiniteIntConverter")]
[IntegerValidatorAttribute]
public int RequestQueueLimit { get; public set; }
    [ConfigurationPropertyAttribute("restartQueueLimit")]
[TypeConverterAttribute("System.Configuration.InfiniteIntConverter")]
[IntegerValidatorAttribute]
public int RestartQueueLimit { get; public set; }
    [ConfigurationPropertyAttribute("memoryLimit")]
public int MemoryLimit { get; public set; }
    [ConfigurationPropertyAttribute("webGarden")]
public bool WebGarden { get; public set; }
    [ConfigurationPropertyAttribute("cpuMask")]
public int CpuMask { get; public set; }
    [ConfigurationPropertyAttribute("userName")]
public string UserName { get; public set; }
    [ConfigurationPropertyAttribute("password")]
public string Password { get; public set; }
    [ConfigurationPropertyAttribute("logLevel")]
public ProcessModelLogLevel LogLevel { get; public set; }
    [ConfigurationPropertyAttribute("clientConnectedCheck")]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
public TimeSpan ClientConnectedCheck { get; public set; }
    [ConfigurationPropertyAttribute("comAuthenticationLevel")]
public ProcessModelComAuthenticationLevel ComAuthenticationLevel { get; public set; }
    [ConfigurationPropertyAttribute("comImpersonationLevel")]
public ProcessModelComImpersonationLevel ComImpersonationLevel { get; public set; }
    [ConfigurationPropertyAttribute("responseDeadlockInterval")]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
[TimeSpanValidatorAttribute]
public TimeSpan ResponseDeadlockInterval { get; public set; }
    [ConfigurationPropertyAttribute("responseRestartDeadlockInterval")]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
public TimeSpan ResponseRestartDeadlockInterval { get; public set; }
    [ConfigurationPropertyAttribute("autoConfig")]
public bool AutoConfig { get; public set; }
    [ConfigurationPropertyAttribute("maxWorkerThreads")]
[IntegerValidatorAttribute]
public int MaxWorkerThreads { get; public set; }
    [ConfigurationPropertyAttribute("maxIoThreads")]
[IntegerValidatorAttribute]
public int MaxIOThreads { get; public set; }
    [ConfigurationPropertyAttribute("minWorkerThreads")]
[IntegerValidatorAttribute]
public int MinWorkerThreads { get; public set; }
    [ConfigurationPropertyAttribute("minIoThreads")]
[IntegerValidatorAttribute]
public int MinIOThreads { get; public set; }
    [ConfigurationPropertyAttribute("serverErrorMessageFile")]
public string ServerErrorMessageFile { get; public set; }
    [ConfigurationPropertyAttribute("pingFrequency")]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
public TimeSpan PingFrequency { get; public set; }
    [ConfigurationPropertyAttribute("pingTimeout")]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
public TimeSpan PingTimeout { get; public set; }
    [ConfigurationPropertyAttribute("maxAppDomains")]
[IntegerValidatorAttribute]
public int MaxAppDomains { get; public set; }
    internal int CpuCount { get; }
    internal int DefaultMaxWorkerThreadsForAutoConfig { get; }
    internal int DefaultMaxIoThreadsForAutoConfig { get; }
    internal int MaxWorkerThreadsTimesCpuCount { get; }
    internal int MaxIoThreadsTimesCpuCount { get; }
    internal int MinWorkerThreadsTimesCpuCount { get; }
    internal int MinIoThreadsTimesCpuCount { get; }
    protected ConfigurationElementProperty ElementProperty { get; }
    private static ProcessModelSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public bool get_Enable();
    public void set_Enable(bool value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public TimeSpan get_IdleTimeout();
    public void set_IdleTimeout(TimeSpan value);
    public TimeSpan get_ShutdownTimeout();
    public void set_ShutdownTimeout(TimeSpan value);
    public int get_RequestLimit();
    public void set_RequestLimit(int value);
    public int get_RequestQueueLimit();
    public void set_RequestQueueLimit(int value);
    public int get_RestartQueueLimit();
    public void set_RestartQueueLimit(int value);
    public int get_MemoryLimit();
    public void set_MemoryLimit(int value);
    public bool get_WebGarden();
    public void set_WebGarden(bool value);
    public int get_CpuMask();
    public void set_CpuMask(int value);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_Password();
    public void set_Password(string value);
    public ProcessModelLogLevel get_LogLevel();
    public void set_LogLevel(ProcessModelLogLevel value);
    public TimeSpan get_ClientConnectedCheck();
    public void set_ClientConnectedCheck(TimeSpan value);
    public ProcessModelComAuthenticationLevel get_ComAuthenticationLevel();
    public void set_ComAuthenticationLevel(ProcessModelComAuthenticationLevel value);
    public ProcessModelComImpersonationLevel get_ComImpersonationLevel();
    public void set_ComImpersonationLevel(ProcessModelComImpersonationLevel value);
    public TimeSpan get_ResponseDeadlockInterval();
    public void set_ResponseDeadlockInterval(TimeSpan value);
    public TimeSpan get_ResponseRestartDeadlockInterval();
    public void set_ResponseRestartDeadlockInterval(TimeSpan value);
    public bool get_AutoConfig();
    public void set_AutoConfig(bool value);
    public int get_MaxWorkerThreads();
    public void set_MaxWorkerThreads(int value);
    public int get_MaxIOThreads();
    public void set_MaxIOThreads(int value);
    public int get_MinWorkerThreads();
    public void set_MinWorkerThreads(int value);
    public int get_MinIOThreads();
    public void set_MinIOThreads(int value);
    public string get_ServerErrorMessageFile();
    public void set_ServerErrorMessageFile(string value);
    public TimeSpan get_PingFrequency();
    public void set_PingFrequency(TimeSpan value);
    public TimeSpan get_PingTimeout();
    public void set_PingTimeout(TimeSpan value);
    public int get_MaxAppDomains();
    public void set_MaxAppDomains(int value);
    internal int get_CpuCount();
    internal int get_DefaultMaxWorkerThreadsForAutoConfig();
    internal int get_DefaultMaxIoThreadsForAutoConfig();
    internal int get_MaxWorkerThreadsTimesCpuCount();
    internal int get_MaxIoThreadsTimesCpuCount();
    internal int get_MinWorkerThreadsTimesCpuCount();
    internal int get_MinIoThreadsTimesCpuCount();
    protected virtual ConfigurationElementProperty get_ElementProperty();
}
public class System.Web.Configuration.ProfileGroupSettings : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
public string Name { get; }
    [ConfigurationPropertyAttribute("")]
public ProfilePropertySettingsCollection PropertySettings { get; }
    private static ProfileGroupSettings();
    public ProfileGroupSettings(string name);
    internal void InternalDeserialize(XmlReader reader, bool serializeCollectionKey);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public ProfilePropertySettingsCollection get_PropertySettings();
    internal void InternalReset(ProfileGroupSettings parentSettings);
    internal void InternalUnmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.ProfileGroupSettings")]
public class System.Web.Configuration.ProfileGroupSettingsCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public String[] AllKeys { get; }
    public ProfileGroupSettings Item { get; }
    public ProfileGroupSettings Item { get; public set; }
    private static ProfileGroupSettingsCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public String[] get_AllKeys();
    public ProfileGroupSettings get_Item(string name);
    public ProfileGroupSettings get_Item(int index);
    public void set_Item(int index, ProfileGroupSettings value);
    internal void AddOrReplace(ProfileGroupSettings groupSettings);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    internal bool InternalIsModified();
    internal void InternalResetModified();
    internal void InternalReset(ConfigurationElement parentElement);
    internal void InternalUnMerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    internal bool InternalSerialize(XmlWriter writer, bool serializeCollectionKey);
    public void Add(ProfileGroupSettings group);
    public ProfileGroupSettings Get(int index);
    public ProfileGroupSettings Get(string name);
    public string GetKey(int index);
    public void Set(ProfileGroupSettings group);
    public int IndexOf(ProfileGroupSettings group);
    public void Remove(string name);
    public void RemoveAt(int index);
    public void Clear();
    protected virtual void ResetModified();
    protected virtual bool IsModified();
}
[FlagsAttribute]
public enum System.Web.Configuration.ProfileGuidedOptimizationsFlags : Enum {
    public int value__;
    public static ProfileGuidedOptimizationsFlags None;
    public static ProfileGuidedOptimizationsFlags All;
}
internal class System.Web.Configuration.ProfilePropertyNameValidator : ConfigurationValidatorBase {
    internal static ProfilePropertyNameValidator SingletonInstance;
    private static ProfilePropertyNameValidator();
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
public class System.Web.Configuration.ProfilePropertySettings : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("readOnly")]
public bool ReadOnly { get; public set; }
    [ConfigurationPropertyAttribute("serializeAs")]
public SerializationMode SerializeAs { get; public set; }
    [ConfigurationPropertyAttribute("provider")]
public string Provider { get; public set; }
    internal SettingsProvider ProviderInternal { get; internal set; }
    [ConfigurationPropertyAttribute("defaultValue")]
public string DefaultValue { get; public set; }
    [ConfigurationPropertyAttribute("type")]
public string Type { get; public set; }
    internal Type TypeInternal { get; internal set; }
    [ConfigurationPropertyAttribute("allowAnonymous")]
public bool AllowAnonymous { get; public set; }
    [ConfigurationPropertyAttribute("customProviderData")]
public string CustomProviderData { get; public set; }
    private static ProfilePropertySettings();
    public ProfilePropertySettings(string name);
    public ProfilePropertySettings(string name, bool readOnly, SerializationMode serializeAs, string providerName, string defaultValue, string profileType, bool allowAnonymous, string customProviderData);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public void set_Name(string value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public SerializationMode get_SerializeAs();
    public void set_SerializeAs(SerializationMode value);
    public string get_Provider();
    public void set_Provider(string value);
    internal SettingsProvider get_ProviderInternal();
    internal void set_ProviderInternal(SettingsProvider value);
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
    public string get_Type();
    public void set_Type(string value);
    internal Type get_TypeInternal();
    internal void set_TypeInternal(Type value);
    public bool get_AllowAnonymous();
    public void set_AllowAnonymous(bool value);
    public string get_CustomProviderData();
    public void set_CustomProviderData(string value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.ProfilePropertySettings")]
public class System.Web.Configuration.ProfilePropertySettingsCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    protected bool AllowClear { get; }
    protected bool ThrowOnDuplicate { get; }
    public String[] AllKeys { get; }
    public ProfilePropertySettings Item { get; }
    public ProfilePropertySettings Item { get; public set; }
    private static ProfilePropertySettingsCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected virtual bool get_AllowClear();
    protected virtual bool get_ThrowOnDuplicate();
    protected virtual bool OnDeserializeUnrecognizedElement(string elementName, XmlReader reader);
    public String[] get_AllKeys();
    public ProfilePropertySettings get_Item(string name);
    public ProfilePropertySettings get_Item(int index);
    public void set_Item(int index, ProfilePropertySettings value);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public void Add(ProfilePropertySettings propertySettings);
    public ProfilePropertySettings Get(int index);
    public ProfilePropertySettings Get(string name);
    public string GetKey(int index);
    public void Remove(string name);
    public void RemoveAt(int index);
    public void Set(ProfilePropertySettings propertySettings);
    public int IndexOf(ProfilePropertySettings propertySettings);
    public void Clear();
}
public class System.Web.Configuration.ProfileSection : ConfigurationSection {
    internal long RecompilationHash { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("automaticSaveEnabled")]
public bool AutomaticSaveEnabled { get; public set; }
    [ConfigurationPropertyAttribute("enabled")]
public bool Enabled { get; public set; }
    [ConfigurationPropertyAttribute("defaultProvider")]
[StringValidatorAttribute]
public string DefaultProvider { get; public set; }
    [ConfigurationPropertyAttribute("inherits")]
public string Inherits { get; public set; }
    [ConfigurationPropertyAttribute("providers")]
public ProviderSettingsCollection Providers { get; }
    [ConfigurationPropertyAttribute("properties")]
public RootProfilePropertySettingsCollection PropertySettings { get; }
    private static ProfileSection();
    internal long get_RecompilationHash();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public bool get_AutomaticSaveEnabled();
    public void set_AutomaticSaveEnabled(bool value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public string get_DefaultProvider();
    public void set_DefaultProvider(string value);
    public string get_Inherits();
    public void set_Inherits(string value);
    public ProviderSettingsCollection get_Providers();
    public RootProfilePropertySettingsCollection get_PropertySettings();
}
public class System.Web.Configuration.ProfileSettings : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
[StringValidatorAttribute]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("minInstances")]
[IntegerValidatorAttribute]
public int MinInstances { get; public set; }
    [ConfigurationPropertyAttribute("maxLimit")]
[TypeConverterAttribute("System.Configuration.InfiniteIntConverter")]
[IntegerValidatorAttribute]
public int MaxLimit { get; public set; }
    [ConfigurationPropertyAttribute("minInterval")]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
public TimeSpan MinInterval { get; public set; }
    [ConfigurationPropertyAttribute("custom")]
public string Custom { get; public set; }
    private static ProfileSettings();
    public ProfileSettings(string name);
    public ProfileSettings(string name, int minInstances, int maxLimit, TimeSpan minInterval);
    public ProfileSettings(string name, int minInstances, int maxLimit, TimeSpan minInterval, string custom);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public void set_Name(string value);
    public int get_MinInstances();
    public void set_MinInstances(int value);
    public int get_MaxLimit();
    public void set_MaxLimit(int value);
    public TimeSpan get_MinInterval();
    public void set_MinInterval(TimeSpan value);
    public string get_Custom();
    public void set_Custom(string value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.ProfileSettings")]
public class System.Web.Configuration.ProfileSettingsCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public ProfileSettings Item { get; public set; }
    public ProfileSettings Item { get; }
    private static ProfileSettingsCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public ProfileSettings get_Item(int index);
    public void set_Item(int index, ProfileSettings value);
    public ProfileSettings get_Item(string key);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public void Add(ProfileSettings profilesSettings);
    public void Clear();
    public void RemoveAt(int index);
    public void Insert(int index, ProfileSettings authorizationSettings);
    public int IndexOf(string name);
    public void Remove(string name);
    public bool Contains(string name);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.ProtocolElement")]
public class System.Web.Configuration.ProtocolCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public String[] AllKeys { get; }
    public ProtocolElement Item { get; }
    public ProtocolElement Item { get; public set; }
    private static ProtocolCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public String[] get_AllKeys();
    public void Add(ProtocolElement protocolElement);
    public void Remove(string name);
    public void Remove(ProtocolElement protocolElement);
    public void RemoveAt(int index);
    public ProtocolElement get_Item(string name);
    public ProtocolElement get_Item(int index);
    public void set_Item(int index, ProtocolElement value);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
public class System.Web.Configuration.ProtocolElement : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
[StringValidatorAttribute]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("processHandlerType")]
public string ProcessHandlerType { get; public set; }
    [ConfigurationPropertyAttribute("appDomainHandlerType")]
public string AppDomainHandlerType { get; public set; }
    [ConfigurationPropertyAttribute("validate")]
public bool Validate { get; public set; }
    private static ProtocolElement();
    public ProtocolElement(string name);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public void set_Name(string value);
    public string get_ProcessHandlerType();
    public void set_ProcessHandlerType(string value);
    public string get_AppDomainHandlerType();
    public void set_AppDomainHandlerType(string value);
    public bool get_Validate();
    public void set_Validate(bool value);
    protected virtual void PostDeserialize();
}
internal class System.Web.Configuration.ProtocolsConfiguration : object {
    internal ProtocolsConfiguration(XmlNode section);
}
internal class System.Web.Configuration.ProtocolsConfigurationEntry : object {
    internal ProtocolsConfigurationEntry(string id, string processHandlerType, string appDomainHandlerType, bool validate, string configFileName, int configFileLine);
}
public class System.Web.Configuration.ProtocolsConfigurationHandler : object {
    public sealed virtual object Create(object parent, object configContextObj, XmlNode section);
}
public class System.Web.Configuration.ProtocolsSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("protocols")]
public ProtocolCollection Protocols { get; }
    private static ProtocolsSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public ProtocolCollection get_Protocols();
}
public static class System.Web.Configuration.ProvidersHelper : object {
    public static ProviderBase InstantiateProvider(ProviderSettings providerSettings, Type providerType);
    public static void InstantiateProviders(ProviderSettingsCollection configProviders, ProviderCollection providers, Type providerType);
}
internal class System.Web.Configuration.RegexMatchTimeoutValidator : TimeSpanValidator {
    private static RegexMatchTimeoutValidator();
}
[AttributeUsageAttribute("128")]
internal class System.Web.Configuration.RegexMatchTimeoutValidatorAttribute : ConfigurationValidatorAttribute {
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
}
[DefaultMemberAttribute("Item")]
public class System.Web.Configuration.RegexWorker : object {
    internal static Regex RefPat;
    public string Item { get; }
    public RegexWorker(HttpBrowserCapabilities browserCaps);
    private static RegexWorker();
    public string get_Item(string key);
    public bool ProcessRegex(string target, string regexExpression);
}
internal class System.Web.Configuration.RemoteWebConfigurationHost : DelegatingConfigHost {
    public bool IsRemote { get; }
    private static RemoteWebConfigurationHost();
    public virtual void Init(IInternalConfigRoot configRoot, Object[] hostInitParams);
    public virtual void InitForConfiguration(String& locationSubPath, String& configPath, String& locationConfigPath, IInternalConfigRoot root, Object[] hostInitConfigurationParams);
    public virtual bool IsConfigRecordRequired(string configPath);
    public virtual string GetStreamName(string configPath);
    public virtual object GetStreamVersion(string streamName);
    public virtual Stream OpenStreamForRead(string streamName);
    public virtual Stream OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext);
    public virtual void DeleteStream(string StreamName);
    public virtual void WriteCompleted(string streamName, bool success, object writeContext);
    public virtual bool IsFile(string StreamName);
    public virtual bool PrefetchAll(string configPath, string StreamName);
    public virtual bool PrefetchSection(string sectionGroupName, string sectionName);
    public virtual void GetRestrictedPermissions(IInternalConfigRecord configRecord, PermissionSet& permissionSet, Boolean& isHostReady);
    public virtual bool get_IsRemote();
    public virtual string DecryptSection(string encryptedXmlString, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedConfigSection);
    public virtual string EncryptSection(string clearTextXmlString, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedConfigSection);
    internal static IRemoteWebConfigurationHostServer CreateRemoteObject(string server, string username, string domain, string password);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("2")]
[GuidAttribute("9FDB6D2C-90EA-4e42-99E6-38B96E28698E")]
[ProgIdAttribute("System.Web.Configuration.RemoteWebConfigurationHostServerV4_32")]
public class System.Web.Configuration.RemoteWebConfigurationHostServer : object {
    internal static char FilePathsSeparatorChar;
    internal static Char[] FilePathsSeparatorParams;
    private static RemoteWebConfigurationHostServer();
    public sealed virtual Byte[] GetData(string fileName, bool getReadTimeOnly, Int64& readTime);
    public sealed virtual void WriteData(string fileName, string templateFileName, Byte[] data, Int64& readTime);
    public sealed virtual string GetFilePaths(int webLevelAsInt, string path, string site, string locationSubPath);
    public sealed virtual string DoEncryptOrDecrypt(bool doEncrypt, string xmlString, string protectionProviderName, string protectionProviderType, String[] paramKeys, String[] paramValues);
    public sealed virtual void GetFileDetails(string name, Boolean& exists, Int64& size, Int64& createDate, Int64& lastWriteDate);
}
internal class System.Web.Configuration.RemoteWebConfigurationHostStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal RemoteWebConfigurationHostStream(bool streamForWrite, string serverName, string streamName, string templateStreamName, string username, string domain, string password, WindowsIdentity identity);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    protected virtual void Dispose(bool disposing);
    public virtual ObjRef CreateObjRef(Type requestedType);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void Flush();
    internal void FlushForWriteCompleted();
    public virtual object InitializeLifetimeService();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long val);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte val);
}
public class System.Web.Configuration.RoleManagerSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("enabled")]
public bool Enabled { get; public set; }
    [ConfigurationPropertyAttribute("createPersistentCookie")]
public bool CreatePersistentCookie { get; public set; }
    [ConfigurationPropertyAttribute("cacheRolesInCookie")]
public bool CacheRolesInCookie { get; public set; }
    [ConfigurationPropertyAttribute("cookieName")]
[TypeConverterAttribute("System.Configuration.WhiteSpaceTrimStringConverter")]
[StringValidatorAttribute]
public string CookieName { get; public set; }
    [ConfigurationPropertyAttribute("cookieTimeout")]
[TypeConverterAttribute("System.Configuration.TimeSpanMinutesOrInfiniteConverter")]
[TimeSpanValidatorAttribute]
public TimeSpan CookieTimeout { get; public set; }
    [ConfigurationPropertyAttribute("cookiePath")]
[TypeConverterAttribute("System.Configuration.WhiteSpaceTrimStringConverter")]
[StringValidatorAttribute]
public string CookiePath { get; public set; }
    [ConfigurationPropertyAttribute("cookieRequireSSL")]
public bool CookieRequireSSL { get; public set; }
    [ConfigurationPropertyAttribute("cookieSlidingExpiration")]
public bool CookieSlidingExpiration { get; public set; }
    [ConfigurationPropertyAttribute("cookieProtection")]
public CookieProtection CookieProtection { get; public set; }
    [ConfigurationPropertyAttribute("defaultProvider")]
[TypeConverterAttribute("System.Configuration.WhiteSpaceTrimStringConverter")]
[StringValidatorAttribute]
public string DefaultProvider { get; public set; }
    [ConfigurationPropertyAttribute("providers")]
public ProviderSettingsCollection Providers { get; }
    [ConfigurationPropertyAttribute("domain")]
public string Domain { get; public set; }
    [ConfigurationPropertyAttribute("maxCachedResults")]
public int MaxCachedResults { get; public set; }
    private static RoleManagerSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_CreatePersistentCookie();
    public void set_CreatePersistentCookie(bool value);
    public bool get_CacheRolesInCookie();
    public void set_CacheRolesInCookie(bool value);
    public string get_CookieName();
    public void set_CookieName(string value);
    public TimeSpan get_CookieTimeout();
    public void set_CookieTimeout(TimeSpan value);
    public string get_CookiePath();
    public void set_CookiePath(string value);
    public bool get_CookieRequireSSL();
    public void set_CookieRequireSSL(bool value);
    public bool get_CookieSlidingExpiration();
    public void set_CookieSlidingExpiration(bool value);
    public CookieProtection get_CookieProtection();
    public void set_CookieProtection(CookieProtection value);
    public string get_DefaultProvider();
    public void set_DefaultProvider(string value);
    public ProviderSettingsCollection get_Providers();
    public string get_Domain();
    public void set_Domain(string value);
    public int get_MaxCachedResults();
    public void set_MaxCachedResults(int value);
}
[ConfigurationCollectionAttribute("System.Web.Configuration.ProfilePropertySettings")]
public class System.Web.Configuration.RootProfilePropertySettingsCollection : ProfilePropertySettingsCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    protected bool AllowClear { get; }
    protected bool ThrowOnDuplicate { get; }
    [ConfigurationPropertyAttribute("group")]
public ProfileGroupSettingsCollection GroupSettings { get; }
    private static RootProfilePropertySettingsCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected virtual bool get_AllowClear();
    protected virtual bool get_ThrowOnDuplicate();
    protected virtual bool OnDeserializeUnrecognizedElement(string elementName, XmlReader reader);
    protected virtual bool IsModified();
    protected virtual void ResetModified();
    public virtual bool Equals(object rootProfilePropertySettingsCollection);
    public virtual int GetHashCode();
    protected virtual void Reset(ConfigurationElement parentElement);
    protected virtual void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    protected virtual bool SerializeElement(XmlWriter writer, bool serializeCollectionKey);
    public ProfileGroupSettingsCollection get_GroupSettings();
}
internal enum System.Web.Configuration.RpcAuthent : Enum {
    public int value__;
    public static RpcAuthent None;
    public static RpcAuthent DcePrivate;
    public static RpcAuthent DcePublic;
    public static RpcAuthent DecPublic;
    public static RpcAuthent GssNegotiate;
    public static RpcAuthent WinNT;
    public static RpcAuthent GssSchannel;
    public static RpcAuthent GssKerberos;
    public static RpcAuthent DPA;
    public static RpcAuthent MSN;
    public static RpcAuthent Digest;
    public static RpcAuthent MQ;
    public static RpcAuthent Default;
}
internal enum System.Web.Configuration.RpcAuthor : Enum {
    public int value__;
    public static RpcAuthor None;
    public static RpcAuthor Name;
    public static RpcAuthor DCE;
    public static RpcAuthor Default;
}
internal enum System.Web.Configuration.RpcImpers : Enum {
    public int value__;
    public static RpcImpers Default;
    public static RpcImpers Anonymous;
    public static RpcImpers Identify;
    public static RpcImpers Impersonate;
    public static RpcImpers Delegate;
}
internal enum System.Web.Configuration.RpcLevel : Enum {
    public int value__;
    public static RpcLevel Default;
    public static RpcLevel None;
    public static RpcLevel Connect;
    public static RpcLevel Call;
    public static RpcLevel Pkt;
    public static RpcLevel PktIntegrity;
    public static RpcLevel PktPrivacy;
}
internal class System.Web.Configuration.RuleInfoComparer : object {
    public sealed virtual int Compare(object x, object y);
}
public class System.Web.Configuration.RuleSettings : ConfigurationElement {
    internal static int DEFAULT_MIN_INSTANCES;
    internal static int DEFAULT_MAX_LIMIT;
    internal static TimeSpan DEFAULT_MIN_INTERVAL;
    internal static string DEFAULT_CUSTOM_EVAL;
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
[StringValidatorAttribute]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("eventName")]
public string EventName { get; public set; }
    [ConfigurationPropertyAttribute("custom")]
public string Custom { get; public set; }
    [ConfigurationPropertyAttribute("profile")]
public string Profile { get; public set; }
    [ConfigurationPropertyAttribute("provider")]
public string Provider { get; public set; }
    [ConfigurationPropertyAttribute("minInstances")]
[IntegerValidatorAttribute]
public int MinInstances { get; public set; }
    [ConfigurationPropertyAttribute("maxLimit")]
[TypeConverterAttribute("System.Configuration.InfiniteIntConverter")]
[IntegerValidatorAttribute]
public int MaxLimit { get; public set; }
    [ConfigurationPropertyAttribute("minInterval")]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
public TimeSpan MinInterval { get; public set; }
    private static RuleSettings();
    public RuleSettings(string name, string eventName, string provider);
    public RuleSettings(string name, string eventName, string provider, string profile, int minInstances, int maxLimit, TimeSpan minInterval);
    public RuleSettings(string name, string eventName, string provider, string profile, int minInstances, int maxLimit, TimeSpan minInterval, string custom);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public void set_Name(string value);
    public string get_EventName();
    public void set_EventName(string value);
    public string get_Custom();
    public void set_Custom(string value);
    public string get_Profile();
    public void set_Profile(string value);
    public string get_Provider();
    public void set_Provider(string value);
    public int get_MinInstances();
    public void set_MinInstances(int value);
    public int get_MaxLimit();
    public void set_MaxLimit(int value);
    public TimeSpan get_MinInterval();
    public void set_MinInterval(TimeSpan value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.RuleSettings")]
public class System.Web.Configuration.RuleSettingsCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public RuleSettings Item { get; public set; }
    public RuleSettings Item { get; }
    private static RuleSettingsCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public RuleSettings get_Item(int index);
    public void set_Item(int index, RuleSettings value);
    public RuleSettings get_Item(string key);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public void Add(RuleSettings ruleSettings);
    public void Clear();
    public void RemoveAt(int index);
    public void Insert(int index, RuleSettings eventSettings);
    public void Remove(string name);
    public int IndexOf(string name);
    public bool Contains(string name);
}
internal class System.Web.Configuration.RuntimeConfig : object {
    protected IInternalConfigRecord _configRecord;
    internal ConnectionStringsSection ConnectionStrings { get; }
    internal SmtpSection Smtp { get; }
    internal AnonymousIdentificationSection AnonymousIdentification { get; }
    internal ProtocolsSection Protocols { get; }
    internal AuthenticationSection Authentication { get; }
    internal AuthorizationSection Authorization { get; }
    internal HttpCapabilitiesDefaultProvider BrowserCaps { get; }
    internal ClientTargetSection ClientTarget { get; }
    internal CompilationSection Compilation { get; }
    internal CustomErrorsSection CustomErrors { get; }
    internal GlobalizationSection Globalization { get; }
    internal DeploymentSection Deployment { get; }
    internal FullTrustAssembliesSection FullTrustAssemblies { get; }
    internal HealthMonitoringSection HealthMonitoring { get; }
    internal HostingEnvironmentSection HostingEnvironment { get; }
    internal HttpCookiesSection HttpCookies { get; }
    internal HttpHandlersSection HttpHandlers { get; }
    internal HttpModulesSection HttpModules { get; }
    internal HttpRuntimeSection HttpRuntime { get; }
    internal IdentitySection Identity { get; }
    internal MachineKeySection MachineKey { get; }
    internal MembershipSection Membership { get; }
    internal PagesSection Pages { get; }
    internal PartialTrustVisibleAssembliesSection PartialTrustVisibleAssemblies { get; }
    internal ProcessModelSection ProcessModel { get; }
    internal ProfileSection Profile { get; }
    internal RoleManagerSection RoleManager { get; }
    internal SecurityPolicySection SecurityPolicy { get; }
    internal SessionPageStateSection SessionPageState { get; }
    internal SessionStateSection SessionState { get; }
    internal SiteMapSection SiteMap { get; }
    internal TraceSection Trace { get; }
    internal TrustSection Trust { get; }
    internal UrlMappingsSection UrlMappings { get; }
    internal Hashtable WebControls { get; }
    internal WebPartsSection WebParts { get; }
    internal XhtmlConformanceSection XhtmlConformance { get; }
    internal CacheSection Cache { get; }
    internal OutputCacheSection OutputCache { get; }
    internal OutputCacheSettingsSection OutputCacheSettings { get; }
    internal SqlCacheDependencySection SqlCacheDependency { get; }
    internal IInternalConfigRecord ConfigRecord { get; }
    private static RuntimeConfig();
    internal RuntimeConfig(IInternalConfigRecord configRecord);
    protected RuntimeConfig(IInternalConfigRecord configRecord, bool permitNull);
    internal static RuntimeConfig GetConfig();
    internal static RuntimeConfig GetConfig(HttpContext context);
    internal static RuntimeConfig GetConfig(HttpContext context, VirtualPath path);
    internal static RuntimeConfig GetConfig(string path);
    internal static RuntimeConfig GetConfig(VirtualPath path);
    internal static RuntimeConfig GetAppConfig();
    internal static RuntimeConfig GetRootWebConfig();
    internal static RuntimeConfig GetMachineConfig();
    internal static RuntimeConfig GetLKGConfig(HttpContext context);
    internal static RuntimeConfig GetAppLKGConfig();
    internal ConnectionStringsSection get_ConnectionStrings();
    internal SmtpSection get_Smtp();
    internal AnonymousIdentificationSection get_AnonymousIdentification();
    internal ProtocolsSection get_Protocols();
    internal AuthenticationSection get_Authentication();
    internal AuthorizationSection get_Authorization();
    internal HttpCapabilitiesDefaultProvider get_BrowserCaps();
    internal ClientTargetSection get_ClientTarget();
    internal CompilationSection get_Compilation();
    internal CustomErrorsSection get_CustomErrors();
    internal GlobalizationSection get_Globalization();
    internal DeploymentSection get_Deployment();
    internal FullTrustAssembliesSection get_FullTrustAssemblies();
    internal HealthMonitoringSection get_HealthMonitoring();
    internal HostingEnvironmentSection get_HostingEnvironment();
    internal HttpCookiesSection get_HttpCookies();
    internal HttpHandlersSection get_HttpHandlers();
    internal HttpModulesSection get_HttpModules();
    internal HttpRuntimeSection get_HttpRuntime();
    internal IdentitySection get_Identity();
    internal MachineKeySection get_MachineKey();
    internal MembershipSection get_Membership();
    internal PagesSection get_Pages();
    internal PartialTrustVisibleAssembliesSection get_PartialTrustVisibleAssemblies();
    internal ProcessModelSection get_ProcessModel();
    internal ProfileSection get_Profile();
    internal RoleManagerSection get_RoleManager();
    internal SecurityPolicySection get_SecurityPolicy();
    internal SessionPageStateSection get_SessionPageState();
    internal SessionStateSection get_SessionState();
    internal SiteMapSection get_SiteMap();
    internal TraceSection get_Trace();
    internal TrustSection get_Trust();
    internal UrlMappingsSection get_UrlMappings();
    internal Hashtable get_WebControls();
    internal WebPartsSection get_WebParts();
    internal XhtmlConformanceSection get_XhtmlConformance();
    internal CacheSection get_Cache();
    internal OutputCacheSection get_OutputCache();
    internal OutputCacheSettingsSection get_OutputCacheSettings();
    internal SqlCacheDependencySection get_SqlCacheDependency();
    internal IInternalConfigRecord get_ConfigRecord();
    internal static RuntimeConfig GetErrorRuntimeConfig();
    protected virtual object GetSectionObject(string sectionName);
}
internal class System.Web.Configuration.RuntimeConfigLKG : RuntimeConfig {
    internal RuntimeConfigLKG(IInternalConfigRecord configRecord);
    protected virtual object GetSectionObject(string sectionName);
}
public class System.Web.Configuration.SecurityPolicySection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("")]
public TrustLevelCollection TrustLevels { get; }
    private static SecurityPolicySection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public TrustLevelCollection get_TrustLevels();
}
public enum System.Web.Configuration.SerializationMode : Enum {
    public int value__;
    public static SerializationMode String;
    public static SerializationMode Xml;
    public static SerializationMode Binary;
    public static SerializationMode ProviderSpecific;
}
internal static class System.Web.Configuration.ServerConfig : object {
    internal static string IISExpressVersion { get; internal set; }
    internal static bool UseMetabase { get; }
    internal static bool UseServerConfig { get; }
    private static ServerConfig();
    internal static string get_IISExpressVersion();
    internal static void set_IISExpressVersion(string value);
    internal static bool get_UseMetabase();
    internal static IServerConfig GetInstance();
    internal static IServerConfig GetDefaultDomainInstance(string version);
    internal static bool get_UseServerConfig();
}
public class System.Web.Configuration.SessionPageStateSection : ConfigurationSection {
    public static int DefaultHistorySize;
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("historySize")]
[IntegerValidatorAttribute]
public int HistorySize { get; public set; }
    private static SessionPageStateSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public int get_HistorySize();
    public void set_HistorySize(int value);
}
public class System.Web.Configuration.SessionStateSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("mode")]
public SessionStateMode Mode { get; public set; }
    [ConfigurationPropertyAttribute("stateConnectionString")]
public string StateConnectionString { get; public set; }
    [ConfigurationPropertyAttribute("stateNetworkTimeout")]
[TypeConverterAttribute("System.Configuration.TimeSpanSecondsOrInfiniteConverter")]
public TimeSpan StateNetworkTimeout { get; public set; }
    [ConfigurationPropertyAttribute("sqlConnectionString")]
public string SqlConnectionString { get; public set; }
    [ConfigurationPropertyAttribute("sqlCommandTimeout")]
[TypeConverterAttribute("System.Configuration.TimeSpanSecondsOrInfiniteConverter")]
public TimeSpan SqlCommandTimeout { get; public set; }
    [ConfigurationPropertyAttribute("sqlConnectionRetryInterval")]
[TypeConverterAttribute("System.Configuration.TimeSpanSecondsOrInfiniteConverter")]
public TimeSpan SqlConnectionRetryInterval { get; public set; }
    [ConfigurationPropertyAttribute("customProvider")]
public string CustomProvider { get; public set; }
    [ConfigurationPropertyAttribute("cookieless")]
public HttpCookieMode Cookieless { get; public set; }
    [ConfigurationPropertyAttribute("cookieName")]
public string CookieName { get; public set; }
    [ConfigurationPropertyAttribute("timeout")]
[TypeConverterAttribute("System.Configuration.TimeSpanMinutesOrInfiniteConverter")]
[TimeSpanValidatorAttribute]
public TimeSpan Timeout { get; public set; }
    [ConfigurationPropertyAttribute("allowCustomSqlDatabase")]
public bool AllowCustomSqlDatabase { get; public set; }
    [ConfigurationPropertyAttribute("compressionEnabled")]
public bool CompressionEnabled { get; public set; }
    [ConfigurationPropertyAttribute("regenerateExpiredSessionId")]
public bool RegenerateExpiredSessionId { get; public set; }
    [ConfigurationPropertyAttribute("providers")]
public ProviderSettingsCollection Providers { get; }
    [ConfigurationPropertyAttribute("partitionResolverType")]
public string PartitionResolverType { get; public set; }
    [ConfigurationPropertyAttribute("useHostingIdentity")]
public bool UseHostingIdentity { get; public set; }
    [ConfigurationPropertyAttribute("sessionIDManagerType")]
public string SessionIDManagerType { get; public set; }
    protected ConfigurationElementProperty ElementProperty { get; }
    private static SessionStateSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public SessionStateMode get_Mode();
    public void set_Mode(SessionStateMode value);
    public string get_StateConnectionString();
    public void set_StateConnectionString(string value);
    public TimeSpan get_StateNetworkTimeout();
    public void set_StateNetworkTimeout(TimeSpan value);
    public string get_SqlConnectionString();
    public void set_SqlConnectionString(string value);
    public TimeSpan get_SqlCommandTimeout();
    public void set_SqlCommandTimeout(TimeSpan value);
    public TimeSpan get_SqlConnectionRetryInterval();
    public void set_SqlConnectionRetryInterval(TimeSpan value);
    public string get_CustomProvider();
    public void set_CustomProvider(string value);
    public HttpCookieMode get_Cookieless();
    public void set_Cookieless(HttpCookieMode value);
    public string get_CookieName();
    public void set_CookieName(string value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public bool get_AllowCustomSqlDatabase();
    public void set_AllowCustomSqlDatabase(bool value);
    public bool get_CompressionEnabled();
    public void set_CompressionEnabled(bool value);
    public bool get_RegenerateExpiredSessionId();
    public void set_RegenerateExpiredSessionId(bool value);
    public ProviderSettingsCollection get_Providers();
    public string get_PartitionResolverType();
    public void set_PartitionResolverType(string value);
    public bool get_UseHostingIdentity();
    public void set_UseHostingIdentity(bool value);
    public string get_SessionIDManagerType();
    public void set_SessionIDManagerType(string value);
    protected virtual void PostDeserialize();
    protected virtual ConfigurationElementProperty get_ElementProperty();
}
public class System.Web.Configuration.SiteMapSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("defaultProvider")]
[StringValidatorAttribute]
public string DefaultProvider { get; public set; }
    [ConfigurationPropertyAttribute("enabled")]
public bool Enabled { get; public set; }
    [ConfigurationPropertyAttribute("providers")]
public ProviderSettingsCollection Providers { get; }
    internal SiteMapProviderCollection ProvidersInternal { get; }
    private static SiteMapSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_DefaultProvider();
    public void set_DefaultProvider(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public ProviderSettingsCollection get_Providers();
    internal SiteMapProviderCollection get_ProvidersInternal();
    internal void ValidateDefaultProvider();
}
public class System.Web.Configuration.SqlCacheDependencyDatabase : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    protected ConfigurationElementProperty ElementProperty { get; }
    [ConfigurationPropertyAttribute("name")]
[StringValidatorAttribute]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("connectionStringName")]
[StringValidatorAttribute]
public string ConnectionStringName { get; public set; }
    [ConfigurationPropertyAttribute("pollTime")]
public int PollTime { get; public set; }
    private static SqlCacheDependencyDatabase();
    public SqlCacheDependencyDatabase(string name, string connectionStringName, int pollTime);
    public SqlCacheDependencyDatabase(string name, string connectionStringName);
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected virtual ConfigurationElementProperty get_ElementProperty();
    internal void CheckDefaultPollTime(int value);
    public string get_Name();
    public void set_Name(string value);
    public string get_ConnectionStringName();
    public void set_ConnectionStringName(string value);
    public int get_PollTime();
    public void set_PollTime(int value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.SqlCacheDependencyDatabase")]
public class System.Web.Configuration.SqlCacheDependencyDatabaseCollection : ConfigurationElementCollection {
    public String[] AllKeys { get; }
    public SqlCacheDependencyDatabase Item { get; }
    public SqlCacheDependencyDatabase Item { get; public set; }
    private static SqlCacheDependencyDatabaseCollection();
    public String[] get_AllKeys();
    public SqlCacheDependencyDatabase get_Item(string name);
    public SqlCacheDependencyDatabase get_Item(int index);
    public void set_Item(int index, SqlCacheDependencyDatabase value);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public void Add(SqlCacheDependencyDatabase name);
    public void Clear();
    public SqlCacheDependencyDatabase Get(int index);
    public SqlCacheDependencyDatabase Get(string name);
    public string GetKey(int index);
    public void Remove(string name);
    public void RemoveAt(int index);
    public void Set(SqlCacheDependencyDatabase user);
}
public class System.Web.Configuration.SqlCacheDependencySection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    protected ConfigurationElementProperty ElementProperty { get; }
    [ConfigurationPropertyAttribute("enabled")]
public bool Enabled { get; public set; }
    [ConfigurationPropertyAttribute("pollTime")]
public int PollTime { get; public set; }
    [ConfigurationPropertyAttribute("databases")]
public SqlCacheDependencyDatabaseCollection Databases { get; }
    private static SqlCacheDependencySection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected virtual ConfigurationElementProperty get_ElementProperty();
    protected virtual void PostDeserialize();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public int get_PollTime();
    public void set_PollTime(int value);
    public SqlCacheDependencyDatabaseCollection get_Databases();
}
internal static class System.Web.Configuration.StdValidatorsAndConverters : object {
    internal static TypeConverter InfiniteTimeSpanConverter { get; }
    internal static TypeConverter TimeSpanMinutesConverter { get; }
    internal static TypeConverter TimeSpanMinutesOrInfiniteConverter { get; }
    internal static TypeConverter TimeSpanSecondsConverter { get; }
    internal static TypeConverter TimeSpanSecondsOrInfiniteConverter { get; }
    internal static TypeConverter WhiteSpaceTrimStringConverter { get; }
    internal static TypeConverter VersionConverter { get; }
    internal static ConfigurationValidatorBase RegexMatchTimeoutValidator { get; }
    internal static ConfigurationValidatorBase PositiveTimeSpanValidator { get; }
    internal static ConfigurationValidatorBase NonEmptyStringValidator { get; }
    internal static ConfigurationValidatorBase NonZeroPositiveIntegerValidator { get; }
    internal static ConfigurationValidatorBase PositiveIntegerValidator { get; }
    internal static TypeConverter get_InfiniteTimeSpanConverter();
    internal static TypeConverter get_TimeSpanMinutesConverter();
    internal static TypeConverter get_TimeSpanMinutesOrInfiniteConverter();
    internal static TypeConverter get_TimeSpanSecondsConverter();
    internal static TypeConverter get_TimeSpanSecondsOrInfiniteConverter();
    internal static TypeConverter get_WhiteSpaceTrimStringConverter();
    internal static TypeConverter get_VersionConverter();
    internal static ConfigurationValidatorBase get_RegexMatchTimeoutValidator();
    internal static ConfigurationValidatorBase get_PositiveTimeSpanValidator();
    internal static ConfigurationValidatorBase get_NonEmptyStringValidator();
    internal static ConfigurationValidatorBase get_NonZeroPositiveIntegerValidator();
    internal static ConfigurationValidatorBase get_PositiveIntegerValidator();
}
internal class System.Web.Configuration.StrongNameUtility : object {
    internal static bool GenerateStrongNameFile(string filename);
}
public class System.Web.Configuration.SystemWebCachingSectionGroup : ConfigurationSectionGroup {
    [ConfigurationPropertyAttribute("cache")]
public CacheSection Cache { get; }
    [ConfigurationPropertyAttribute("outputCache")]
public OutputCacheSection OutputCache { get; }
    [ConfigurationPropertyAttribute("outputCacheSettings")]
public OutputCacheSettingsSection OutputCacheSettings { get; }
    [ConfigurationPropertyAttribute("sqlCacheDependency")]
public SqlCacheDependencySection SqlCacheDependency { get; }
    public CacheSection get_Cache();
    public OutputCacheSection get_OutputCache();
    public OutputCacheSettingsSection get_OutputCacheSettings();
    public SqlCacheDependencySection get_SqlCacheDependency();
}
public class System.Web.Configuration.SystemWebSectionGroup : ConfigurationSectionGroup {
    [ConfigurationPropertyAttribute("anonymousIdentification")]
public AnonymousIdentificationSection AnonymousIdentification { get; }
    [ConfigurationPropertyAttribute("authentication")]
public AuthenticationSection Authentication { get; }
    [ConfigurationPropertyAttribute("authorization")]
public AuthorizationSection Authorization { get; }
    [ConfigurationPropertyAttribute("browserCaps")]
public DefaultSection BrowserCaps { get; }
    [ConfigurationPropertyAttribute("clientTarget")]
public ClientTargetSection ClientTarget { get; }
    [ConfigurationPropertyAttribute("compilation")]
public CompilationSection Compilation { get; }
    [ConfigurationPropertyAttribute("customErrors")]
public CustomErrorsSection CustomErrors { get; }
    [ConfigurationPropertyAttribute("deployment")]
public DeploymentSection Deployment { get; }
    [ConfigurationPropertyAttribute("deviceFilters")]
public DefaultSection DeviceFilters { get; }
    [ConfigurationPropertyAttribute("fullTrustAssemblies")]
public FullTrustAssembliesSection FullTrustAssemblies { get; }
    [ConfigurationPropertyAttribute("globalization")]
public GlobalizationSection Globalization { get; }
    [ConfigurationPropertyAttribute("healthMonitoring")]
public HealthMonitoringSection HealthMonitoring { get; }
    [ConfigurationPropertyAttribute("hostingEnvironment")]
public HostingEnvironmentSection HostingEnvironment { get; }
    [ConfigurationPropertyAttribute("httpCookies")]
public HttpCookiesSection HttpCookies { get; }
    [ConfigurationPropertyAttribute("httpHandlers")]
public HttpHandlersSection HttpHandlers { get; }
    [ConfigurationPropertyAttribute("httpModules")]
public HttpModulesSection HttpModules { get; }
    [ConfigurationPropertyAttribute("httpRuntime")]
public HttpRuntimeSection HttpRuntime { get; }
    [ConfigurationPropertyAttribute("identity")]
public IdentitySection Identity { get; }
    [ConfigurationPropertyAttribute("machineKey")]
public MachineKeySection MachineKey { get; }
    [ConfigurationPropertyAttribute("membership")]
public MembershipSection Membership { get; }
    [ConfigurationPropertyAttribute("mobileControls")]
[ObsoleteAttribute("System.Web.Mobile.dll is obsolete.")]
public ConfigurationSection MobileControls { get; }
    [ConfigurationPropertyAttribute("pages")]
public PagesSection Pages { get; }
    [ConfigurationPropertyAttribute("partialTrustVisibleAssemblies")]
public PartialTrustVisibleAssembliesSection PartialTrustVisibleAssemblies { get; }
    [ConfigurationPropertyAttribute("processModel")]
public ProcessModelSection ProcessModel { get; }
    [ConfigurationPropertyAttribute("profile")]
public ProfileSection Profile { get; }
    [ConfigurationPropertyAttribute("protocols")]
public DefaultSection Protocols { get; }
    [ConfigurationPropertyAttribute("roleManager")]
public RoleManagerSection RoleManager { get; }
    [ConfigurationPropertyAttribute("securityPolicy")]
public SecurityPolicySection SecurityPolicy { get; }
    [ConfigurationPropertyAttribute("sessionState")]
public SessionStateSection SessionState { get; }
    [ConfigurationPropertyAttribute("siteMap")]
public SiteMapSection SiteMap { get; }
    [ConfigurationPropertyAttribute("trace")]
public TraceSection Trace { get; }
    [ConfigurationPropertyAttribute("trust")]
public TrustSection Trust { get; }
    [ConfigurationPropertyAttribute("urlMappings")]
public UrlMappingsSection UrlMappings { get; }
    [ConfigurationPropertyAttribute("webControls")]
public WebControlsSection WebControls { get; }
    [ConfigurationPropertyAttribute("webParts")]
public WebPartsSection WebParts { get; }
    [ConfigurationPropertyAttribute("webServices")]
public WebServicesSection WebServices { get; }
    [ConfigurationPropertyAttribute("xhtmlConformance")]
public XhtmlConformanceSection XhtmlConformance { get; }
    public AnonymousIdentificationSection get_AnonymousIdentification();
    public AuthenticationSection get_Authentication();
    public AuthorizationSection get_Authorization();
    public DefaultSection get_BrowserCaps();
    public ClientTargetSection get_ClientTarget();
    public CompilationSection get_Compilation();
    public CustomErrorsSection get_CustomErrors();
    public DeploymentSection get_Deployment();
    public DefaultSection get_DeviceFilters();
    public FullTrustAssembliesSection get_FullTrustAssemblies();
    public GlobalizationSection get_Globalization();
    public HealthMonitoringSection get_HealthMonitoring();
    public HostingEnvironmentSection get_HostingEnvironment();
    public HttpCookiesSection get_HttpCookies();
    public HttpHandlersSection get_HttpHandlers();
    public HttpModulesSection get_HttpModules();
    public HttpRuntimeSection get_HttpRuntime();
    public IdentitySection get_Identity();
    public MachineKeySection get_MachineKey();
    public MembershipSection get_Membership();
    public ConfigurationSection get_MobileControls();
    public PagesSection get_Pages();
    public PartialTrustVisibleAssembliesSection get_PartialTrustVisibleAssemblies();
    public ProcessModelSection get_ProcessModel();
    public ProfileSection get_Profile();
    public DefaultSection get_Protocols();
    public RoleManagerSection get_RoleManager();
    public SecurityPolicySection get_SecurityPolicy();
    public SessionStateSection get_SessionState();
    public SiteMapSection get_SiteMap();
    public TraceSection get_Trace();
    public TrustSection get_Trust();
    public UrlMappingsSection get_UrlMappings();
    public WebControlsSection get_WebControls();
    public WebPartsSection get_WebParts();
    public WebServicesSection get_WebServices();
    public XhtmlConformanceSection get_XhtmlConformance();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.TagMapInfo")]
public class System.Web.Configuration.TagMapCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public TagMapInfo Item { get; public set; }
    internal Hashtable TagTypeMappingInternal { get; }
    private static TagMapCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public TagMapInfo get_Item(int index);
    public void set_Item(int index, TagMapInfo value);
    public void Add(TagMapInfo tagMapInformation);
    public void Remove(TagMapInfo tagMapInformation);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    internal Hashtable get_TagTypeMappingInternal();
}
public class System.Web.Configuration.TagMapInfo : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("mappedTagType")]
[StringValidatorAttribute]
public string MappedTagType { get; public set; }
    [ConfigurationPropertyAttribute("tagType")]
[StringValidatorAttribute]
public string TagType { get; public set; }
    private static TagMapInfo();
    public TagMapInfo(string tagTypeName, string mappedTagTypeName);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_MappedTagType();
    public void set_MappedTagType(string value);
    public string get_TagType();
    public void set_TagType(string value);
    protected virtual bool SerializeElement(XmlWriter writer, bool serializeCollectionKey);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.TagPrefixInfo")]
public class System.Web.Configuration.TagPrefixCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public TagPrefixInfo Item { get; public set; }
    public ConfigurationElementCollectionType CollectionType { get; }
    protected bool ThrowOnDuplicate { get; }
    protected string ElementName { get; }
    private static TagPrefixCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public TagPrefixInfo get_Item(int index);
    public void set_Item(int index, TagPrefixInfo value);
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual bool get_ThrowOnDuplicate();
    public void Add(TagPrefixInfo tagPrefixInformation);
    public void Remove(TagPrefixInfo tagPrefixInformation);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual string get_ElementName();
    protected virtual object GetElementKey(ConfigurationElement element);
}
public class System.Web.Configuration.TagPrefixInfo : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("tagPrefix")]
[StringValidatorAttribute]
public string TagPrefix { get; public set; }
    [ConfigurationPropertyAttribute("tagName")]
public string TagName { get; public set; }
    [ConfigurationPropertyAttribute("namespace")]
public string Namespace { get; public set; }
    [ConfigurationPropertyAttribute("assembly")]
public string Assembly { get; public set; }
    [ConfigurationPropertyAttribute("src")]
public string Source { get; public set; }
    protected ConfigurationElementProperty ElementProperty { get; }
    private static TagPrefixInfo();
    public TagPrefixInfo(string tagPrefix, string nameSpace, string assembly, string tagName, string source);
    public virtual bool Equals(object prefix);
    public virtual int GetHashCode();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_TagPrefix();
    public void set_TagPrefix(string value);
    public string get_TagName();
    public void set_TagName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_Assembly();
    public void set_Assembly(string value);
    public string get_Source();
    public void set_Source(string value);
    protected virtual ConfigurationElementProperty get_ElementProperty();
}
public enum System.Web.Configuration.TicketCompatibilityMode : Enum {
    public int value__;
    public static TicketCompatibilityMode Framework20;
    public static TicketCompatibilityMode Framework40;
}
public enum System.Web.Configuration.TraceDisplayMode : Enum {
    public int value__;
    public static TraceDisplayMode SortByTime;
    public static TraceDisplayMode SortByCategory;
}
public class System.Web.Configuration.TraceSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("enabled")]
public bool Enabled { get; public set; }
    [ConfigurationPropertyAttribute("mostRecent")]
public bool MostRecent { get; public set; }
    [ConfigurationPropertyAttribute("localOnly")]
public bool LocalOnly { get; public set; }
    [ConfigurationPropertyAttribute("pageOutput")]
public bool PageOutput { get; public set; }
    [ConfigurationPropertyAttribute("requestLimit")]
[IntegerValidatorAttribute]
public int RequestLimit { get; public set; }
    [ConfigurationPropertyAttribute("traceMode")]
public TraceDisplayMode TraceMode { get; public set; }
    [ConfigurationPropertyAttribute("writeToDiagnosticsTrace")]
public bool WriteToDiagnosticsTrace { get; public set; }
    private static TraceSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_MostRecent();
    public void set_MostRecent(bool value);
    public bool get_LocalOnly();
    public void set_LocalOnly(bool value);
    public bool get_PageOutput();
    public void set_PageOutput(bool value);
    public int get_RequestLimit();
    public void set_RequestLimit(int value);
    public TraceDisplayMode get_TraceMode();
    public void set_TraceMode(TraceDisplayMode value);
    public bool get_WriteToDiagnosticsTrace();
    public void set_WriteToDiagnosticsTrace(bool value);
}
public class System.Web.Configuration.TransformerInfo : ConfigurationElement {
    [ConfigurationPropertyAttribute("name")]
[StringValidatorAttribute]
public string Name { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("type")]
[StringValidatorAttribute]
public string Type { get; public set; }
    private static TransformerInfo();
    public TransformerInfo(string name, string type);
    public string get_Name();
    public void set_Name(string value);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Type();
    public void set_Type(string value);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.TransformerInfo")]
public class System.Web.Configuration.TransformerInfoCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public TransformerInfo Item { get; public set; }
    private static TransformerInfoCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public TransformerInfo get_Item(int index);
    public void set_Item(int index, TransformerInfo value);
    public void Add(TransformerInfo transformerInfo);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    public void Remove(string s);
    public void RemoveAt(int index);
    protected virtual object GetElementKey(ConfigurationElement element);
    internal Hashtable GetTransformerEntries();
}
public class System.Web.Configuration.TrustLevel : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
[StringValidatorAttribute]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("policyFile")]
public string PolicyFile { get; public set; }
    internal string PolicyFileExpanded { get; }
    internal string LegacyPolicyFileExpanded { get; }
    private static TrustLevel();
    public TrustLevel(string name, string policyFile);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public void set_Name(string value);
    public string get_PolicyFile();
    public void set_PolicyFile(string value);
    internal string get_PolicyFileExpanded();
    internal string get_LegacyPolicyFileExpanded();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.TrustLevel")]
public class System.Web.Configuration.TrustLevelCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public TrustLevel Item { get; public set; }
    public TrustLevel Item { get; }
    protected string ElementName { get; }
    protected bool ThrowOnDuplicate { get; }
    public ConfigurationElementCollectionType CollectionType { get; }
    private static TrustLevelCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public TrustLevel get_Item(int index);
    public void set_Item(int index, TrustLevel value);
    public TrustLevel get_Item(string key);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    protected virtual string get_ElementName();
    protected virtual bool get_ThrowOnDuplicate();
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual bool IsElementName(string elementname);
    public void Add(TrustLevel trustLevel);
    public void Clear();
    public TrustLevel Get(int index);
    public void RemoveAt(int index);
    public void Remove(TrustLevel trustLevel);
    public void Set(int index, TrustLevel trustLevel);
}
public class System.Web.Configuration.TrustSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("level")]
[StringValidatorAttribute]
public string Level { get; public set; }
    [ConfigurationPropertyAttribute("originUrl")]
public string OriginUrl { get; public set; }
    [ConfigurationPropertyAttribute("processRequestInApplicationTrust")]
public bool ProcessRequestInApplicationTrust { get; public set; }
    [ConfigurationPropertyAttribute("legacyCasModel")]
public bool LegacyCasModel { get; public set; }
    [ConfigurationPropertyAttribute("permissionSetName")]
public string PermissionSetName { get; public set; }
    [ConfigurationPropertyAttribute("hostSecurityPolicyResolverType")]
public string HostSecurityPolicyResolverType { get; public set; }
    private static TrustSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Level();
    public void set_Level(string value);
    public string get_OriginUrl();
    public void set_OriginUrl(string value);
    public bool get_ProcessRequestInApplicationTrust();
    public void set_ProcessRequestInApplicationTrust(bool value);
    public bool get_LegacyCasModel();
    public void set_LegacyCasModel(bool value);
    public string get_PermissionSetName();
    public void set_PermissionSetName(string value);
    public string get_HostSecurityPolicyResolverType();
    public void set_HostSecurityPolicyResolverType(string value);
}
internal class System.Web.Configuration.UrlAuthFailedErrorFormatter : ErrorFormatter {
    protected string ErrorTitle { get; }
    protected string Description { get; }
    protected string MiscSectionTitle { get; }
    protected string MiscSectionContent { get; }
    protected string ColoredSquareTitle { get; }
    protected string ColoredSquareContent { get; }
    protected StringCollection AdaptiveMiscContent { get; }
    protected bool ShowSourceFileInfo { get; }
    internal static string GetErrorText();
    internal static string GetErrorText(HttpContext context);
    protected virtual string get_ErrorTitle();
    protected virtual string get_Description();
    protected virtual string get_MiscSectionTitle();
    protected virtual string get_MiscSectionContent();
    protected virtual string get_ColoredSquareTitle();
    protected virtual string get_ColoredSquareContent();
    protected virtual StringCollection get_AdaptiveMiscContent();
    protected virtual bool get_ShowSourceFileInfo();
}
public class System.Web.Configuration.UrlMapping : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("url")]
public string Url { get; }
    [ConfigurationPropertyAttribute("mappedUrl")]
public string MappedUrl { get; }
    private static UrlMapping();
    public UrlMapping(string url, string mappedUrl);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Url();
    public string get_MappedUrl();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.UrlMapping")]
public class System.Web.Configuration.UrlMappingCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public String[] AllKeys { get; }
    public UrlMapping Item { get; }
    public UrlMapping Item { get; public set; }
    private static UrlMappingCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public String[] get_AllKeys();
    public string GetKey(int index);
    public void Add(UrlMapping urlMapping);
    public void Remove(string name);
    public void Remove(UrlMapping urlMapping);
    public void RemoveAt(int index);
    public UrlMapping get_Item(string name);
    public UrlMapping get_Item(int index);
    public void set_Item(int index, UrlMapping value);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
public class System.Web.Configuration.UrlMappingsSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("")]
public UrlMappingCollection UrlMappings { get; }
    [ConfigurationPropertyAttribute("enabled")]
public bool IsEnabled { get; public set; }
    private static UrlMappingsSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public UrlMappingCollection get_UrlMappings();
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    internal string HttpResolveMapping(string path);
}
public class System.Web.Configuration.UserMapPath : object {
    public UserMapPath(ConfigurationFileMap fileMap);
    internal UserMapPath(ConfigurationFileMap fileMap, bool pathsAreLocal);
    public sealed virtual string GetMachineConfigFilename();
    public sealed virtual string GetRootWebConfigFilename();
    public sealed virtual void GetPathConfigFilename(string siteID, string path, String& directory, String& baseName);
    public sealed virtual void GetDefaultSiteNameAndID(String& siteName, String& siteID);
    public sealed virtual void ResolveSiteArgument(string siteArgument, String& siteName, String& siteID);
    public sealed virtual string MapPath(string siteID, string path);
    public sealed virtual string GetAppPathForPath(string siteID, string path);
}
internal class System.Web.Configuration.VersionConverter : ConfigurationConverterBase {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Web.Configuration.VersionValidator : ConfigurationValidatorBase {
    public VersionValidator(Version minimumVersion);
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
public class System.Web.Configuration.VirtualDirectoryMapping : object {
    public string VirtualDirectory { get; }
    internal VirtualPath VirtualDirectoryObject { get; }
    public string PhysicalDirectory { get; public set; }
    public bool IsAppRoot { get; public set; }
    public string ConfigFileBaseName { get; public set; }
    public VirtualDirectoryMapping(string physicalDirectory, bool isAppRoot);
    public VirtualDirectoryMapping(string physicalDirectory, bool isAppRoot, string configFileBaseName);
    internal VirtualDirectoryMapping Clone();
    public string get_VirtualDirectory();
    internal VirtualPath get_VirtualDirectoryObject();
    internal void SetVirtualDirectory(VirtualPath virtualDirectory);
    public string get_PhysicalDirectory();
    public void set_PhysicalDirectory(string value);
    public bool get_IsAppRoot();
    public void set_IsAppRoot(bool value);
    public string get_ConfigFileBaseName();
    public void set_ConfigFileBaseName(string value);
    internal void Validate();
}
[DefaultMemberAttribute("Item")]
public class System.Web.Configuration.VirtualDirectoryMappingCollection : NameObjectCollectionBase {
    public ICollection AllKeys { get; }
    public VirtualDirectoryMapping Item { get; }
    public VirtualDirectoryMapping Item { get; }
    public ICollection get_AllKeys();
    public VirtualDirectoryMapping get_Item(string virtualDirectory);
    public VirtualDirectoryMapping get_Item(int index);
    public void Add(string virtualDirectory, VirtualDirectoryMapping mapping);
    public void Clear();
    public void CopyTo(VirtualDirectoryMapping[] array, int index);
    public VirtualDirectoryMapping Get(int index);
    public VirtualDirectoryMapping Get(string virtualDirectory);
    public string GetKey(int index);
    public void Remove(string virtualDirectory);
    public void RemoveAt(int index);
    internal VirtualDirectoryMappingCollection Clone();
}
public enum System.Web.Configuration.WebApplicationLevel : Enum {
    public int value__;
    public static WebApplicationLevel AboveApplication;
    public static WebApplicationLevel AtApplication;
    public static WebApplicationLevel BelowApplication;
}
internal class System.Web.Configuration.WebBaseEventKeyComparer : object {
    public sealed virtual bool Equals(object x, object y);
    public sealed virtual int GetHashCode(object obj);
    public int Compare(object x, object y);
}
public class System.Web.Configuration.WebConfigurationFileMap : ConfigurationFileMap {
    internal string Site { get; internal set; }
    public VirtualDirectoryMappingCollection VirtualDirectories { get; }
    public WebConfigurationFileMap(string machineConfigFileName);
    public virtual object Clone();
    internal string get_Site();
    internal void set_Site(string value);
    public VirtualDirectoryMappingCollection get_VirtualDirectories();
}
internal class System.Web.Configuration.WebConfigurationHost : DelegatingConfigHost {
    internal static string MachineConfigName;
    internal static string MachineConfigPath;
    internal static string RootWebConfigName;
    internal static string RootWebConfigPath;
    internal static char PathSeparator;
    internal static string DefaultSiteID;
    internal static Char[] s_slashSplit;
    internal static string DefaultSiteName { get; }
    public bool SupportsChangeNotifications { get; }
    public bool SupportsPath { get; }
    public bool SupportsLocation { get; }
    internal static IInternalConfigConfigurationFactory ConfigurationFactory { get; }
    private static WebConfigurationHost();
    internal static string get_DefaultSiteName();
    internal static void GetConfigPaths(IConfigMapPath configMapPath, WebLevel webLevel, VirtualPath virtualPath, string site, string locationSubPath, VirtualPath& appPath, String& appSiteName, String& appSiteID, String& configPath, String& locationConfigPath);
    public virtual void Init(IInternalConfigRoot configRoot, Object[] hostInitParams);
    public virtual void InitForConfiguration(String& locationSubPath, String& configPath, String& locationConfigPath, IInternalConfigRoot configRoot, Object[] hostInitConfigurationParams);
    internal static bool IsMachineConfigPath(string configPath);
    internal static bool IsRootWebConfigPath(string configPath);
    internal static bool IsVirtualPathConfigPath(string configPath);
    internal static bool IsValidSiteArgument(string site);
    internal static string VPathFromConfigPath(string configPath);
    private sealed virtual override void System.Web.Configuration.Internal.IInternalConfigWebHost.GetSiteIDAndVPathFromConfigPath(string configPath, String& siteID, String& vpath);
    internal static void GetSiteIDAndVPathFromConfigPath(string configPath, String& siteID, VirtualPath& vpath);
    private sealed virtual override string System.Web.Configuration.Internal.IInternalConfigWebHost.GetConfigPathFromSiteIDAndVPath(string siteID, string vpath);
    internal static string GetConfigPathFromSiteIDAndVPath(string siteID, VirtualPath vpath);
    internal static string CombineConfigPath(string parentConfigPath, string childConfigPath);
    public virtual bool IsConfigRecordRequired(string configPath);
    public virtual string GetStreamName(string configPath);
    public virtual bool get_SupportsChangeNotifications();
    public virtual object StartMonitoringStreamForChanges(string streamName, StreamChangeCallback callback);
    public virtual void StopMonitoringStreamForChanges(string streamName, StreamChangeCallback callback);
    public virtual bool IsDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition);
    public virtual void VerifyDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition, IConfigErrorInfo errorInfo);
    public virtual bool get_SupportsPath();
    public virtual bool get_SupportsLocation();
    public virtual bool IsAboveApplication(string configPath);
    internal static string GetConfigPathFromLocationSubPathBasic(string configPath, string locationSubPath);
    public virtual string GetConfigPathFromLocationSubPath(string configPath, string locationSubPath);
    public virtual bool IsLocationApplicable(string configPath);
    internal static void StaticGetRestrictedPermissions(IInternalConfigRecord configRecord, PermissionSet& permissionSet, Boolean& isHostReady);
    public virtual bool IsTrustedConfigPath(string configPath);
    public virtual bool IsFullTrustSectionWithoutAptcaAllowed(IInternalConfigRecord configRecord);
    public virtual void GetRestrictedPermissions(IInternalConfigRecord configRecord, PermissionSet& permissionSet, Boolean& isHostReady);
    public virtual IDisposable Impersonate();
    public virtual bool PrefetchAll(string configPath, string streamName);
    public virtual bool PrefetchSection(string sectionGroupName, string sectionName);
    public virtual object CreateDeprecatedConfigContext(string configPath);
    public virtual object CreateConfigurationContext(string configPath, string locationSubPath);
    public virtual Type GetConfigType(string typeName, bool throwOnError);
    public virtual string GetConfigTypeName(Type t);
    internal static IInternalConfigConfigurationFactory get_ConfigurationFactory();
    internal static Configuration OpenConfiguration(WebLevel webLevel, ConfigurationFileMap fileMap, VirtualPath path, string site, string locationSubPath, string server, string userName, string password, IntPtr tokenHandle);
}
internal class System.Web.Configuration.WebConfigurationHostFileChange : object {
    internal StreamChangeCallback Callback { get; }
    internal WebConfigurationHostFileChange(StreamChangeCallback callback);
    internal void OnFileChanged(object sender, FileChangeEvent e);
    internal StreamChangeCallback get_Callback();
}
public static class System.Web.Configuration.WebConfigurationManager : object {
    public static NameValueCollection AppSettings { get; }
    public static ConnectionStringSettingsCollection ConnectionStrings { get; }
    public static NameValueCollection get_AppSettings();
    public static ConnectionStringSettingsCollection get_ConnectionStrings();
    public static object GetSection(string sectionName);
    public static object GetSection(string sectionName, string path);
    public static object GetWebApplicationSection(string sectionName);
    public static Configuration OpenMachineConfiguration();
    public static Configuration OpenMachineConfiguration(string locationSubPath);
    public static Configuration OpenMachineConfiguration(string locationSubPath, string server);
    public static Configuration OpenMachineConfiguration(string locationSubPath, string server, string userName, string password);
    public static Configuration OpenMachineConfiguration(string locationSubPath, string server, IntPtr userToken);
    public static Configuration OpenMappedMachineConfiguration(ConfigurationFileMap fileMap);
    public static Configuration OpenMappedMachineConfiguration(ConfigurationFileMap fileMap, string locationSubPath);
    public static Configuration OpenWebConfiguration(string path);
    public static Configuration OpenWebConfiguration(string path, string site);
    public static Configuration OpenWebConfiguration(string path, string site, string locationSubPath);
    public static Configuration OpenWebConfiguration(string path, string site, string locationSubPath, string server);
    public static Configuration OpenWebConfiguration(string path, string site, string locationSubPath, string server, string userName, string password);
    public static Configuration OpenWebConfiguration(string path, string site, string locationSubPath, string server, IntPtr userToken);
    public static Configuration OpenMappedWebConfiguration(WebConfigurationFileMap fileMap, string path);
    public static Configuration OpenMappedWebConfiguration(WebConfigurationFileMap fileMap, string path, string site);
    public static Configuration OpenMappedWebConfiguration(WebConfigurationFileMap fileMap, string path, string site, string locationSubPath);
}
public class System.Web.Configuration.WebContext : object {
    public WebApplicationLevel ApplicationLevel { get; }
    public string Site { get; }
    public string ApplicationPath { get; }
    public string Path { get; }
    public string LocationSubPath { get; }
    public WebContext(WebApplicationLevel pathLevel, string site, string applicationPath, string path, string locationSubPath, string appConfigPath);
    public WebApplicationLevel get_ApplicationLevel();
    public string get_Site();
    public string get_ApplicationPath();
    public string get_Path();
    public string get_LocationSubPath();
    public virtual string ToString();
}
public class System.Web.Configuration.WebControlsSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("clientScriptsLocation")]
[StringValidatorAttribute]
public string ClientScriptsLocation { get; }
    private static WebControlsSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected virtual object GetRuntimeObject();
    public string get_ClientScriptsLocation();
}
internal enum System.Web.Configuration.WebLevel : Enum {
    public int value__;
    public static WebLevel Machine;
    public static WebLevel Path;
}
public class System.Web.Configuration.WebPartsPersonalization : ConfigurationElement {
    [ConfigurationPropertyAttribute("authorization")]
public WebPartsPersonalizationAuthorization Authorization { get; }
    [ConfigurationPropertyAttribute("defaultProvider")]
[StringValidatorAttribute]
public string DefaultProvider { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("providers")]
public ProviderSettingsCollection Providers { get; }
    private static WebPartsPersonalization();
    public WebPartsPersonalizationAuthorization get_Authorization();
    public string get_DefaultProvider();
    public void set_DefaultProvider(string value);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public ProviderSettingsCollection get_Providers();
    internal void ValidateAuthorization();
}
public class System.Web.Configuration.WebPartsPersonalizationAuthorization : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("")]
public AuthorizationRuleCollection Rules { get; }
    private static WebPartsPersonalizationAuthorization();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public AuthorizationRuleCollection get_Rules();
    internal bool IsUserAllowed(IPrincipal user, string verb);
}
public class System.Web.Configuration.WebPartsSection : ConfigurationSection {
    [ConfigurationPropertyAttribute("enableExport")]
public bool EnableExport { get; public set; }
    [ConfigurationPropertyAttribute("personalization")]
public WebPartsPersonalization Personalization { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("transformers")]
public TransformerInfoCollection Transformers { get; }
    private static WebPartsSection();
    public bool get_EnableExport();
    public void set_EnableExport(bool value);
    public WebPartsPersonalization get_Personalization();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public TransformerInfoCollection get_Transformers();
    protected virtual object GetRuntimeObject();
}
public enum System.Web.Configuration.XhtmlConformanceMode : Enum {
    public int value__;
    public static XhtmlConformanceMode Transitional;
    public static XhtmlConformanceMode Legacy;
    public static XhtmlConformanceMode Strict;
}
public class System.Web.Configuration.XhtmlConformanceSection : ConfigurationSection {
    internal static XhtmlConformanceMode DefaultMode;
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("mode")]
public XhtmlConformanceMode Mode { get; public set; }
    private static XhtmlConformanceSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public XhtmlConformanceMode get_Mode();
    public void set_Mode(XhtmlConformanceMode value);
}
internal class System.Web.CreatePartitionInfo : MulticastDelegate {
    public CreatePartitionInfo(object object, IntPtr method);
    public virtual IPartitionInfo Invoke(string connectionString);
    public virtual IAsyncResult BeginInvoke(string connectionString, AsyncCallback callback, object object);
    public virtual IPartitionInfo EndInvoke(IAsyncResult result);
}
internal static class System.Web.CrossSiteScriptingValidation : object {
    private static CrossSiteScriptingValidation();
    internal static bool IsDangerousUrl(string s);
    internal static bool IsValidJavascriptId(string id);
    internal static bool IsDangerousString(string s, Int32& matchIndex);
}
internal class System.Web.CustomErrorFailedErrorFormatter : ErrorFormatter {
    protected string ErrorTitle { get; }
    protected string Description { get; }
    protected string MiscSectionTitle { get; }
    protected string MiscSectionContent { get; }
    protected bool ShowSourceFileInfo { get; }
    internal bool CanBeShownToAllUsers { get; }
    protected virtual string get_ErrorTitle();
    protected virtual string get_Description();
    protected virtual string get_MiscSectionTitle();
    protected virtual string get_MiscSectionContent();
    protected virtual bool get_ShowSourceFileInfo();
    internal virtual bool get_CanBeShownToAllUsers();
}
internal static class System.Web.DataAccess.ActiveDirectoryConnectionHelper : object {
    internal static DirectoryEntryHolder GetDirectoryEntry(DirectoryInformation directoryInfo, string objectDN, bool revertImpersonation);
}
internal enum System.Web.DataAccess.DataConnectionErrorEnum : Enum {
    public int value__;
    public static DataConnectionErrorEnum CanNotCreateDataDir;
    public static DataConnectionErrorEnum CanNotWriteToDataDir;
    public static DataConnectionErrorEnum CanNotWriteToDBFile;
}
internal class System.Web.DataAccess.DataConnectionErrorFormatter : ErrorFormatter {
    protected static NameValueCollection s_errMessages;
    protected static object s_Lock;
    protected string _UserName;
    protected DataConnectionErrorEnum _Error;
    protected string ErrorTitle { get; }
    protected string Description { get; }
    protected string MiscSectionTitle { get; }
    protected string MiscSectionContent { get; }
    protected string ColoredSquareTitle { get; }
    protected string ColoredSquareContent { get; }
    protected bool ShowSourceFileInfo { get; }
    private static DataConnectionErrorFormatter();
    protected virtual string get_ErrorTitle();
    protected virtual string get_Description();
    protected virtual string get_MiscSectionTitle();
    protected virtual string get_MiscSectionContent();
    protected virtual string get_ColoredSquareTitle();
    protected virtual string get_ColoredSquareContent();
    protected virtual bool get_ShowSourceFileInfo();
}
internal static class System.Web.DataAccess.DataConnectionHelper : object {
    internal static string GetCurrentName();
}
internal class System.Web.DataAccess.DirectoryEntryHolder : object {
    internal DirectoryEntry DirectoryEntry { get; }
    internal DirectoryEntryHolder(DirectoryEntry entry);
    internal void Open(HttpContext context, bool revertImpersonate);
    internal void Close();
    internal void RestoreImpersonation();
    internal DirectoryEntry get_DirectoryEntry();
}
internal static class System.Web.DataAccess.SqlConnectionHelper : object {
    internal static string s_strDataDir;
    internal static string s_strUpperDataDirWithToken;
    internal static string s_strSqlExprFileExt;
    internal static string s_strUpperUserInstance;
    private static SqlConnectionHelper();
    internal static void EnsureNoUserInstance(string connectionString);
    internal static SqlConnectionHolder GetConnection(string connectionString, bool revertImpersonation);
    internal static string GetConnectionString(string specifiedConnectionString, bool lookupConnectionString, bool appLevel);
    internal static string GetDataDirectory();
}
internal class System.Web.DataAccess.SqlConnectionHolder : object {
    internal SqlConnection _Connection;
    internal SqlConnection Connection { get; }
    internal SqlConnectionHolder(string connectionString);
    internal SqlConnection get_Connection();
    internal void Open(HttpContext context, bool revertImpersonate);
    internal void Close();
}
internal class System.Web.DataAccess.SqlExpressConnectionErrorFormatter : DataConnectionErrorFormatter {
    protected string ErrorTitle { get; }
    protected string Description { get; }
    internal SqlExpressConnectionErrorFormatter(DataConnectionErrorEnum error);
    internal SqlExpressConnectionErrorFormatter(string userName, DataConnectionErrorEnum error);
    protected virtual string get_ErrorTitle();
    protected virtual string get_Description();
}
internal class System.Web.DataAccess.SqlExpressDBFileAutoCreationErrorFormatter : UnhandledErrorFormatter {
    protected string MiscSectionTitle { get; }
    protected string MiscSectionContent { get; }
    internal static string CustomErrorMessage { get; }
    internal SqlExpressDBFileAutoCreationErrorFormatter(Exception exception);
    private static SqlExpressDBFileAutoCreationErrorFormatter();
    protected virtual string get_MiscSectionTitle();
    protected virtual string get_MiscSectionContent();
    internal static string get_CustomErrorMessage();
}
public class System.Web.DefaultHttpHandler : object {
    protected HttpContext Context { get; }
    protected NameValueCollection ExecuteUrlHeaders { get; }
    public bool IsReusable { get; }
    protected HttpContext get_Context();
    protected NameValueCollection get_ExecuteUrlHeaders();
    public virtual void OnExecuteUrlPreconditionFailure();
    public virtual string OverrideExecuteUrlPath();
    internal static bool IsClassicAspRequest(string filePath);
    public virtual IAsyncResult BeginProcessRequest(HttpContext context, AsyncCallback callback, object state);
    public virtual void EndProcessRequest(IAsyncResult result);
    public virtual void ProcessRequest(HttpContext context);
    public virtual bool get_IsReusable();
}
internal class System.Web.DirectoryMonitor : object {
    internal string Directory;
    internal int FcnMode { get; internal set; }
    internal DirectoryMonitor(string appPathInternal, int fcnMode);
    internal DirectoryMonitor(string dir, bool watchSubtree, UInt32 notifyFilter, int fcnMode);
    internal DirectoryMonitor(string dir, bool watchSubtree, UInt32 notifyFilter, bool ignoreSubdirChange, int fcnMode);
    private static DirectoryMonitor();
    [CompilerGeneratedAttribute]
internal int get_FcnMode();
    [CompilerGeneratedAttribute]
internal void set_FcnMode(int value);
    private sealed virtual override void System.IDisposable.Dispose();
    internal bool IsMonitoring();
    internal void StopMonitoring();
    internal FileMonitor StartMonitoringFileWithAssert(string file, FileChangeEventHandler callback, string alias);
    internal void StopMonitoringFile(string file, object target);
    internal bool GetFileAttributes(string file, FileAttributesData& fad);
    internal void OnFileChange(FileAction action, string fileName, DateTime utcCompletion);
}
internal class System.Web.DirMonCompletion : object {
    internal static int ActiveDirMonCompletions { get; }
    internal DirMonCompletion(DirectoryMonitor dirMon, string dir, bool watchSubtree, UInt32 notifyFilter);
    private static DirMonCompletion();
    internal static int get_ActiveDirMonCompletions();
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class System.Web.DisposableHttpContextWrapper : object {
    internal DisposableHttpContextWrapper(HttpContext context);
    internal static HttpContext SwitchContext(HttpContext context);
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class System.Web.DynamicCompileErrorFormatter : ErrorFormatter {
    protected bool _hideDetailedCompilerOutput;
    protected Exception Exception { get; }
    protected bool ShowSourceFileInfo { get; }
    protected string ErrorTitle { get; }
    protected string Description { get; }
    protected string MiscSectionTitle { get; }
    protected string MiscSectionContent { get; }
    protected string PhysicalPath { get; }
    protected int SourceFileLineNumber { get; }
    internal DynamicCompileErrorFormatter(HttpCompileException excep);
    protected virtual Exception get_Exception();
    protected virtual bool get_ShowSourceFileInfo();
    protected virtual string get_ErrorTitle();
    protected virtual string get_Description();
    protected virtual string get_MiscSectionTitle();
    protected virtual string get_MiscSectionContent();
    protected virtual string get_PhysicalPath();
    protected virtual int get_SourceFileLineNumber();
}
internal class System.Web.DynamicModuleRegistry : object {
    public void Add(Type moduleType);
    public ICollection`1<DynamicModuleRegistryEntry> LockAndFetchList();
}
internal class System.Web.DynamicModuleRegistryEntry : ValueType {
    public string Name;
    public string Type;
    public DynamicModuleRegistryEntry(string name, string type);
}
internal enum System.Web.DynamicServerVariable : Enum {
    public int value__;
    public static DynamicServerVariable AUTH_TYPE;
    public static DynamicServerVariable AUTH_USER;
    public static DynamicServerVariable PATH_INFO;
    public static DynamicServerVariable PATH_TRANSLATED;
    public static DynamicServerVariable QUERY_STRING;
    public static DynamicServerVariable SCRIPT_NAME;
}
public class System.Web.EndEventHandler : MulticastDelegate {
    public EndEventHandler(object object, IntPtr method);
    public virtual void Invoke(IAsyncResult ar);
    public virtual IAsyncResult BeginInvoke(IAsyncResult ar, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal abstract class System.Web.ErrorFormatter : object {
    protected bool _dontShowVersion;
    protected static string BeginLeftToRightTag;
    protected static string EndLeftToRightTag;
    protected Exception Exception { get; }
    protected string ErrorTitle { get; }
    protected string Description { get; }
    protected string MiscSectionTitle { get; }
    protected string MiscSectionContent { get; }
    protected string ColoredSquareTitle { get; }
    protected string ColoredSquareDescription { get; }
    protected string ColoredSquareContent { get; }
    protected bool WrapColoredSquareContentLines { get; }
    protected string ColoredSquare2Title { get; }
    protected string ColoredSquare2Description { get; }
    protected string ColoredSquare2Content { get; }
    protected StringCollection AdaptiveMiscContent { get; }
    protected StringCollection AdaptiveStackTrace { get; }
    protected bool ShowSourceFileInfo { get; }
    protected string PhysicalPath { get; }
    protected string VirtualPath { get; }
    protected int SourceFileLineNumber { get; }
    protected string PostMessage { get; }
    internal bool CanBeShownToAllUsers { get; }
    protected static bool IsTextRightToLeft { get; }
    internal static bool RequiresAdaptiveErrorReporting(HttpContext context);
    internal virtual string GetAdaptiveErrorMessage(HttpContext context, bool dontShowSensitiveInfo);
    internal string GetErrorMessage();
    internal virtual string GetErrorMessage(HttpContext context, bool dontShowSensitiveInfo);
    internal string GetHtmlErrorMessage();
    internal string GetHtmlErrorMessage(bool dontShowSensitiveInfo);
    internal virtual void PrepareFormatter();
    protected virtual Exception get_Exception();
    protected abstract virtual string get_ErrorTitle();
    protected abstract virtual string get_Description();
    protected abstract virtual string get_MiscSectionTitle();
    protected abstract virtual string get_MiscSectionContent();
    protected virtual string get_ColoredSquareTitle();
    protected virtual string get_ColoredSquareDescription();
    protected virtual string get_ColoredSquareContent();
    protected virtual bool get_WrapColoredSquareContentLines();
    protected virtual string get_ColoredSquare2Title();
    protected virtual string get_ColoredSquare2Description();
    protected virtual string get_ColoredSquare2Content();
    protected virtual StringCollection get_AdaptiveMiscContent();
    protected virtual StringCollection get_AdaptiveStackTrace();
    protected abstract virtual bool get_ShowSourceFileInfo();
    protected virtual string get_PhysicalPath();
    protected virtual string get_VirtualPath();
    protected virtual int get_SourceFileLineNumber();
    protected virtual string get_PostMessage();
    internal virtual bool get_CanBeShownToAllUsers();
    protected static bool get_IsTextRightToLeft();
    protected string WrapWithLeftToRightTextFormatIfNeeded(string content);
    internal static string MakeHttpLinePragma(string virtualPath);
    internal static string GetSafePath(string linePragma);
    internal static string GetVirtualPathFromHttpLinePragma(string linePragma);
    internal static string ResolveHttpFileName(string linePragma);
}
internal abstract class System.Web.ErrorFormatterGenerator : object {
    internal abstract virtual ErrorFormatter GetErrorFormatter(Exception e);
}
internal static class System.Web.EtwTrace : object {
    private static EtwTrace();
    internal static int InferVerbosity(IntegratedTraceType traceType);
    internal static bool IsTraceEnabled(int level, int flag);
    internal static void TraceEnableCheck(EtwTraceConfigType configType, IntPtr p);
    internal static void Trace(EtwTraceType traceType, HttpWorkerRequest workerRequest);
    internal static void Trace(EtwTraceType traceType, HttpWorkerRequest workerRequest, string data1);
    internal static void Trace(EtwTraceType traceType, HttpWorkerRequest workerRequest, string data1, string data2);
    internal static void Trace(EtwTraceType traceType, HttpWorkerRequest workerRequest, string data1, string data2, string data3, string data4);
    internal static void Trace(EtwTraceType traceType, IntPtr ecb, string data1, string data2, bool inProc);
}
internal enum System.Web.EtwTraceConfigType : Enum {
    public int value__;
    public static EtwTraceConfigType DOWNLEVEL;
    public static EtwTraceConfigType IIS7_ISAPI;
    public static EtwTraceConfigType IIS7_INTEGRATED;
}
internal class System.Web.EtwTraceFlags : ValueType {
    internal static int None;
    internal static int Infrastructure;
    internal static int Module;
    internal static int Page;
    internal static int AppSvc;
}
internal class System.Web.EtwTraceLevel : ValueType {
    internal static int None;
    internal static int Fatal;
    internal static int Error;
    internal static int Warning;
    internal static int Information;
    internal static int Verbose;
}
internal enum System.Web.EtwTraceType : Enum {
    public int value__;
    public static EtwTraceType ETW_TYPE_START;
    public static EtwTraceType ETW_TYPE_END;
    public static EtwTraceType ETW_TYPE_REQ_QUEUED;
    public static EtwTraceType ETW_TYPE_REQ_DEQUEUED;
    public static EtwTraceType ETW_TYPE_GETAPPDOMAIN_ENTER;
    public static EtwTraceType ETW_TYPE_GETAPPDOMAIN_LEAVE;
    public static EtwTraceType ETW_TYPE_APPDOMAIN_ENTER;
    public static EtwTraceType ETW_TYPE_START_HANDLER;
    public static EtwTraceType ETW_TYPE_END_HANDLER;
    public static EtwTraceType ETW_TYPE_PIPELINE_ENTER;
    public static EtwTraceType ETW_TYPE_PIPELINE_LEAVE;
    public static EtwTraceType ETW_TYPE_MAPHANDLER_ENTER;
    public static EtwTraceType ETW_TYPE_MAPHANDLER_LEAVE;
    public static EtwTraceType ETW_TYPE_PARSE_ENTER;
    public static EtwTraceType ETW_TYPE_PARSE_LEAVE;
    public static EtwTraceType ETW_TYPE_COMPILE_ENTER;
    public static EtwTraceType ETW_TYPE_COMPILE_LEAVE;
    public static EtwTraceType ETW_TYPE_HTTPHANDLER_ENTER;
    public static EtwTraceType ETW_TYPE_HTTPHANDLER_LEAVE;
    public static EtwTraceType ETW_TYPE_SESSIONSTATE_PARTITION_START;
    public static EtwTraceType ETW_TYPE_SESSIONSTATE_PARTITION_END;
    public static EtwTraceType ETW_TYPE_PAGE_PRE_INIT_ENTER;
    public static EtwTraceType ETW_TYPE_PAGE_PRE_INIT_LEAVE;
    public static EtwTraceType ETW_TYPE_PAGE_INIT_ENTER;
    public static EtwTraceType ETW_TYPE_PAGE_INIT_LEAVE;
    public static EtwTraceType ETW_TYPE_PAGE_LOAD_VIEWSTATE_ENTER;
    public static EtwTraceType ETW_TYPE_PAGE_LOAD_VIEWSTATE_LEAVE;
    public static EtwTraceType ETW_TYPE_PAGE_LOAD_POSTDATA_ENTER;
    public static EtwTraceType ETW_TYPE_PAGE_LOAD_POSTDATA_LEAVE;
    public static EtwTraceType ETW_TYPE_PAGE_LOAD_ENTER;
    public static EtwTraceType ETW_TYPE_PAGE_LOAD_LEAVE;
    public static EtwTraceType ETW_TYPE_PAGE_POST_DATA_CHANGED_ENTER;
    public static EtwTraceType ETW_TYPE_PAGE_POST_DATA_CHANGED_LEAVE;
    public static EtwTraceType ETW_TYPE_PAGE_RAISE_POSTBACK_ENTER;
    public static EtwTraceType ETW_TYPE_PAGE_RAISE_POSTBACK_LEAVE;
    public static EtwTraceType ETW_TYPE_PAGE_PRE_RENDER_ENTER;
    public static EtwTraceType ETW_TYPE_PAGE_PRE_RENDER_LEAVE;
    public static EtwTraceType ETW_TYPE_PAGE_SAVE_VIEWSTATE_ENTER;
    public static EtwTraceType ETW_TYPE_PAGE_SAVE_VIEWSTATE_LEAVE;
    public static EtwTraceType ETW_TYPE_PAGE_RENDER_ENTER;
    public static EtwTraceType ETW_TYPE_PAGE_RENDER_LEAVE;
    public static EtwTraceType ETW_TYPE_SESSION_DATA_BEGIN;
    public static EtwTraceType ETW_TYPE_SESSION_DATA_END;
    public static EtwTraceType ETW_TYPE_PROFILE_BEGIN;
    public static EtwTraceType ETW_TYPE_PROFILE_END;
    public static EtwTraceType ETW_TYPE_ROLE_IS_USER_IN_ROLE;
    public static EtwTraceType ETW_TYPE_ROLE_GET_USER_ROLES;
    public static EtwTraceType ETW_TYPE_ROLE_BEGIN;
    public static EtwTraceType ETW_TYPE_ROLE_END;
    public static EtwTraceType ETW_TYPE_WEB_EVENT_RAISE_START;
    public static EtwTraceType ETW_TYPE_WEB_EVENT_RAISE_END;
    public static EtwTraceType ETW_TYPE_WEB_EVENT_DELIVER_START;
    public static EtwTraceType ETW_TYPE_WEB_EVENT_DELIVER_END;
}
internal enum System.Web.EtwWorkerRequestType : Enum {
    public int value__;
    public static EtwWorkerRequestType Undefined;
    public static EtwWorkerRequestType InProc;
    public static EtwWorkerRequestType OutOfProc;
    public static EtwWorkerRequestType IIS7Integrated;
    public static EtwWorkerRequestType Unknown;
}
public class System.Web.EventHandlerTaskAsyncHelper : object {
    public BeginEventHandler BeginEventHandler { get; private set; }
    public EndEventHandler EndEventHandler { get; private set; }
    public EventHandlerTaskAsyncHelper(TaskEventHandler handler);
    [CompilerGeneratedAttribute]
public BeginEventHandler get_BeginEventHandler();
    [CompilerGeneratedAttribute]
private void set_BeginEventHandler(BeginEventHandler value);
    [CompilerGeneratedAttribute]
public EndEventHandler get_EndEventHandler();
    [CompilerGeneratedAttribute]
private void set_EndEventHandler(EndEventHandler value);
}
internal enum System.Web.FileAction : Enum {
    public int value__;
    public static FileAction Dispose;
    public static FileAction Error;
    public static FileAction Overwhelming;
    public static FileAction Added;
    public static FileAction Removed;
    public static FileAction Modified;
    public static FileAction RenamedOldName;
    public static FileAction RenamedNewName;
}
internal class System.Web.FileChangeEvent : EventArgs {
    internal FileAction Action;
    internal string FileName;
    internal FileChangeEvent(FileAction action, string fileName);
}
internal class System.Web.FileChangeEventHandler : MulticastDelegate {
    public FileChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FileChangeEvent e);
    public virtual IAsyncResult BeginInvoke(object sender, FileChangeEvent e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Web.FileChangesMonitor : object {
    internal static String[] s_dirsToMonitor;
    internal static int MAX_PATH;
    internal FileChangesMonitor(FcnMode mode);
    private static FileChangesMonitor();
    internal static string GenerateErrorMessage(FileAction action, string fileName);
    internal static HttpException CreateFileMonitoringException(int hr, string path);
    internal static string GetFullPath(string alias);
    internal bool IsDirNameMonitored(string fullPath, string dirName);
    internal void RemoveAliases(FileMonitor fileMon);
    internal DateTime StartMonitoringFile(string alias, FileChangeEventHandler callback);
    internal DateTime StartMonitoringPath(string alias, FileChangeEventHandler callback, FileAttributesData& fad);
    internal void StartMonitoringDirectoryRenamesAndBinDirectory(string dir, FileChangeEventHandler callback);
    internal void StartListeningToLocalResourcesDirectory(VirtualPath virtualDir);
    internal void StopMonitoringFile(string alias, object target);
    internal void StopMonitoringPath(string alias, object target);
    internal FileAttributesData GetFileAttributes(string alias);
    internal void Stop();
}
internal class System.Web.FileMonitor : object {
    internal DirectoryMonitor DirectoryMonitor;
    internal HybridDictionary Aliases;
    internal string FileNameLong { get; }
    internal string FileNameShort { get; }
    internal bool Exists { get; }
    internal bool IsDirectory { get; }
    internal FileAction LastAction { get; internal set; }
    internal DateTime UtcLastCompletion { get; internal set; }
    internal FileAttributesData Attributes { get; }
    internal Byte[] Dacl { get; }
    internal ICollection Targets { get; }
    internal FileMonitor(DirectoryMonitor dirMon, string fileNameLong, string fileNameShort, bool exists, FileAttributesData fad, Byte[] dacl);
    internal string get_FileNameLong();
    internal string get_FileNameShort();
    internal bool get_Exists();
    internal bool get_IsDirectory();
    internal FileAction get_LastAction();
    internal void set_LastAction(FileAction value);
    internal DateTime get_UtcLastCompletion();
    internal void set_UtcLastCompletion(DateTime value);
    internal FileAttributesData get_Attributes();
    internal Byte[] get_Dacl();
    internal void ResetCachedAttributes();
    internal void UpdateCachedAttributes();
    internal void MakeExist(FindFileData ffd, Byte[] dacl);
    internal void MakeExtinct();
    internal void RemoveFileNameShort();
    internal ICollection get_Targets();
    internal void AddTarget(FileChangeEventHandler callback, string alias, bool newAlias);
    internal int RemoveTarget(object callbackTarget);
}
internal class System.Web.FileMonitorTarget : object {
    internal FileChangeEventHandler Callback;
    internal string Alias;
    internal DateTime UtcStartMonitoring;
    internal FileMonitorTarget(FileChangeEventHandler callback, string alias);
    internal int AddRef();
    internal int Release();
}
internal class System.Web.FileSecurity : object {
    private static FileSecurity();
    internal static Byte[] GetDacl(string filename);
}
internal abstract class System.Web.FormatterWithFileInfo : ErrorFormatter {
    protected string _virtualPath;
    protected string _physicalPath;
    protected string _sourceCode;
    protected int _line;
    protected Encoding SourceFileEncoding { get; }
    protected string ColoredSquareContent { get; }
    protected bool ShowSourceFileInfo { get; }
    protected string PhysicalPath { get; }
    protected string VirtualPath { get; }
    protected int SourceFileLineNumber { get; }
    internal FormatterWithFileInfo(string virtualPath, string physicalPath, string sourceCode, int line);
    internal static string GetSourceFileLines(string fileName, Encoding encoding, string sourceCode, int lineNumber);
    protected virtual Encoding get_SourceFileEncoding();
    protected virtual string get_ColoredSquareContent();
    protected virtual bool get_ShowSourceFileInfo();
    protected virtual string get_PhysicalPath();
    protected virtual string get_VirtualPath();
    protected virtual int get_SourceFileLineNumber();
}
internal class System.Web.GenericApplicationErrorFormatter : ErrorFormatter {
    protected string ErrorTitle { get; }
    protected string Description { get; }
    protected string MiscSectionTitle { get; }
    protected string MiscSectionContent { get; }
    protected string ColoredSquareTitle { get; }
    protected string ColoredSquareDescription { get; }
    protected string ColoredSquareContent { get; }
    protected string ColoredSquare2Title { get; }
    protected string ColoredSquare2Description { get; }
    protected string ColoredSquare2Content { get; }
    protected bool ShowSourceFileInfo { get; }
    internal bool CanBeShownToAllUsers { get; }
    internal GenericApplicationErrorFormatter(bool local);
    protected virtual string get_ErrorTitle();
    protected virtual string get_Description();
    protected virtual string get_MiscSectionTitle();
    protected virtual string get_MiscSectionContent();
    protected virtual string get_ColoredSquareTitle();
    protected virtual string get_ColoredSquareDescription();
    protected virtual string get_ColoredSquareContent();
    protected virtual string get_ColoredSquare2Title();
    protected virtual string get_ColoredSquare2Description();
    protected virtual string get_ColoredSquare2Content();
    protected virtual bool get_ShowSourceFileInfo();
    internal virtual bool get_CanBeShownToAllUsers();
}
public interface System.Web.Globalization.IStringLocalizerProvider {
    public abstract virtual string GetLocalizedString(CultureInfo culture, string name, Object[] arguments);
}
public class System.Web.Globalization.ResourceFileStringLocalizerProvider : object {
    public static string ResourceFileName;
    public sealed virtual string GetLocalizedString(CultureInfo culture, string name, Object[] arguments);
}
public static class System.Web.Globalization.StringLocalizerProviders : object {
    public static IStringLocalizerProvider DataAnnotationStringLocalizerProvider { get; public set; }
    private static StringLocalizerProviders();
    public static IStringLocalizerProvider get_DataAnnotationStringLocalizerProvider();
    public static void set_DataAnnotationStringLocalizerProvider(IStringLocalizerProvider value);
}
internal enum System.Web.GlobalPerfCounter : Enum {
    public int value__;
    public static GlobalPerfCounter APPLICATION_RESTARTS;
    public static GlobalPerfCounter APPLICATIONS_RUNNING;
    public static GlobalPerfCounter REQUESTS_DISCONNECTED;
    public static GlobalPerfCounter REQUEST_EXECUTION_TIME;
    public static GlobalPerfCounter REQUESTS_REJECTED;
    public static GlobalPerfCounter REQUESTS_QUEUED;
    public static GlobalPerfCounter WPS_RUNNING;
    public static GlobalPerfCounter WPS_RESTARTS;
    public static GlobalPerfCounter REQUEST_WAIT_TIME;
    public static GlobalPerfCounter STATE_SERVER_SESSIONS_ACTIVE;
    public static GlobalPerfCounter STATE_SERVER_SESSIONS_ABANDONED;
    public static GlobalPerfCounter STATE_SERVER_SESSIONS_TIMED_OUT;
    public static GlobalPerfCounter STATE_SERVER_SESSIONS_TOTAL;
    public static GlobalPerfCounter REQUESTS_CURRENT;
    public static GlobalPerfCounter GLOBAL_AUDIT_SUCCESS;
    public static GlobalPerfCounter GLOBAL_AUDIT_FAIL;
    public static GlobalPerfCounter GLOBAL_EVENTS_ERROR;
    public static GlobalPerfCounter GLOBAL_EVENTS_HTTP_REQ_ERROR;
    public static GlobalPerfCounter GLOBAL_EVENTS_HTTP_INFRA_ERROR;
    public static GlobalPerfCounter REQUESTS_IN_NATIVE_QUEUE;
}
public class System.Web.Handlers.AssemblyResourceLoader : object {
    internal static string _applicationRootPath;
    private bool System.Web.IHttpHandler.IsReusable { get; }
    private static AssemblyResourceLoader();
    internal static Assembly GetAssemblyFromType(Type type);
    internal static string GetWebResourceUrl(Type type, string resourceName);
    internal static string GetWebResourceUrl(Type type, string resourceName, bool htmlEncoded);
    internal static string GetWebResourceUrl(Type type, string resourceName, bool htmlEncoded, IScriptManager scriptManager);
    internal static string GetWebResourceUrl(Type type, string resourceName, bool htmlEncoded, IScriptManager scriptManager, bool enableCdn);
    internal static string FormatCdnUrl(Assembly assembly, string cdnPath);
    internal static string GetWebResourceUrlInternal(Assembly assembly, string resourceName, bool htmlEncoded, bool forSubstitution, IScriptManager scriptManager);
    internal static string GetWebResourceUrlInternal(Assembly assembly, string resourceName, bool htmlEncoded, bool forSubstitution, IScriptManager scriptManager, bool enableCdn);
    internal static bool IsValidWebResourceRequest(HttpContext context);
    internal static void LogWebResourceFailure(string decryptedData, Exception exception);
    private sealed virtual override bool System.Web.IHttpHandler.get_IsReusable();
    private sealed virtual override void System.Web.IHttpHandler.ProcessRequest(HttpContext context);
}
public class System.Web.Handlers.TraceHandler : object {
    protected bool IsReusable { get; }
    private bool System.Web.IHttpHandler.IsReusable { get; }
    internal static string StyleSheet { get; }
    protected void ProcessRequest(HttpContext context);
    protected bool get_IsReusable();
    private sealed virtual override void System.Web.IHttpHandler.ProcessRequest(HttpContext context);
    private sealed virtual override bool System.Web.IHttpHandler.get_IsReusable();
    protected void ShowDetails(DataSet data);
    protected void ShowVersionDetails();
    protected void ShowRequests(IList data);
    internal static string get_StyleSheet();
    internal static Table CreateControlTable(DataTable datatable);
    internal static Table CreateTraceTable(DataTable datatable);
    internal static Table CreateTable(DataTable datatable);
    internal static Table CreateTable(DataTable datatable, bool encodeSpaces);
    internal static Table CreateDetailsTable(DataTable datatable);
}
internal class System.Web.Handlers.TraceHandlerErrorFormatter : ErrorFormatter {
    protected string ErrorTitle { get; }
    protected string Description { get; }
    protected string MiscSectionTitle { get; }
    protected string MiscSectionContent { get; }
    protected string ColoredSquareTitle { get; }
    protected string ColoredSquareDescription { get; }
    protected string ColoredSquareContent { get; }
    protected bool ShowSourceFileInfo { get; }
    internal bool CanBeShownToAllUsers { get; }
    internal TraceHandlerErrorFormatter(bool isRemote);
    protected virtual string get_ErrorTitle();
    protected virtual string get_Description();
    protected virtual string get_MiscSectionTitle();
    protected virtual string get_MiscSectionContent();
    protected virtual string get_ColoredSquareTitle();
    protected virtual string get_ColoredSquareDescription();
    protected virtual string get_ColoredSquareContent();
    protected virtual bool get_ShowSourceFileInfo();
    internal virtual bool get_CanBeShownToAllUsers();
}
internal class System.Web.Handlers.TransferRequestHandler : object {
    public bool IsReusable { get; }
    public sealed virtual IAsyncResult BeginProcessRequest(HttpContext context, AsyncCallback cb, object extraData);
    public sealed virtual void EndProcessRequest(IAsyncResult result);
    public sealed virtual void ProcessRequest(HttpContext context);
    public sealed virtual bool get_IsReusable();
}
public class System.Web.Hosting.AppDomainFactory : object {
    public sealed virtual object Create(string module, string typeName, string appId, string appPath, string strUrlOfAppOrigin, int iZone);
}
public class System.Web.Hosting.AppDomainInfo : object {
    internal AppDomainInfo(string id, string vpath, string physPath, int siteId, bool isIdle);
    public sealed virtual string GetId();
    public sealed virtual string GetVirtualPath();
    public sealed virtual string GetPhysicalPath();
    public sealed virtual int GetSiteId();
    public sealed virtual bool IsIdle();
}
public class System.Web.Hosting.AppDomainInfoEnum : object {
    internal AppDomainInfoEnum(AppDomainInfo[] appDomainInfos);
    public sealed virtual int Count();
    public sealed virtual IAppDomainInfo GetData();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public abstract class System.Web.Hosting.AppDomainProtocolHandler : MarshalByRefObject {
    public virtual object InitializeLifetimeService();
    public abstract virtual void StartListenerChannel(IListenerChannelCallback listenerChannelCallback);
    public abstract virtual void StopListenerChannel(int listenerChannelId, bool immediate);
    public abstract virtual void StopProtocol(bool immediate);
    public virtual void Stop(bool immediate);
}
public class System.Web.Hosting.ApplicationHost : object {
    public static object CreateApplicationHost(Type hostType, string virtualDir, string physicalDir);
}
public class System.Web.Hosting.ApplicationInfo : object {
    public string ID { get; }
    public string VirtualPath { get; }
    public string PhysicalPath { get; }
    internal ApplicationInfo(string id, VirtualPath virtualPath, string physicalPath);
    public string get_ID();
    public string get_VirtualPath();
    public string get_PhysicalPath();
}
public class System.Web.Hosting.ApplicationManager : MarshalByRefObject {
    internal bool ShutdownInProgress { get; }
    internal int AppDomainsCount { get; }
    private static ApplicationManager();
    internal long GetUpdatedTotalCacheSize(long sizeUpdate);
    internal long TrimCaches(int percent);
    internal bool get_ShutdownInProgress();
    internal static void RecordFatalException(Exception e);
    internal static void RecordFatalException(AppDomain appDomain, Exception e);
    internal static void OnUnhandledException(object sender, UnhandledExceptionEventArgs eventArgs);
    public virtual object InitializeLifetimeService();
    public static ApplicationManager GetApplicationManager();
    public void Open();
    public void Close();
    public IRegisteredObject CreateObject(IApplicationHost appHost, Type type);
    public IRegisteredObject CreateObject(string appId, Type type, string virtualPath, string physicalPath, bool failIfExists);
    public IRegisteredObject CreateObject(string appId, Type type, string virtualPath, string physicalPath, bool failIfExists, bool throwOnError);
    internal IRegisteredObject CreateObjectInternal(string appId, Type type, IApplicationHost appHost, bool failIfExists);
    internal IRegisteredObject CreateObjectInternal(string appId, Type type, IApplicationHost appHost, bool failIfExists, HostingEnvironmentParameters hostingParameters);
    internal IRegisteredObject CreateObjectWithDefaultAppHostAndAppId(string physicalPath, string virtualPath, Type type, String& appId, IApplicationHost& appHost);
    internal IRegisteredObject CreateObjectWithDefaultAppHostAndAppId(string physicalPath, VirtualPath virtualPath, Type type, String& appId, IApplicationHost& appHost);
    internal IRegisteredObject CreateObjectWithDefaultAppHostAndAppId(string physicalPath, VirtualPath virtualPath, Type type, bool failIfExists, HostingEnvironmentParameters hostingParameters, String& appId, IApplicationHost& appHost);
    public IRegisteredObject GetObject(string appId, Type type);
    public AppDomain GetAppDomain(string appId);
    public AppDomain GetAppDomain(IApplicationHost appHost);
    internal void RemoveFromTableIfRuntimeExists(string appId, Type runtimeType);
    public void StopObject(string appId, Type type);
    public bool IsIdle();
    public void ShutdownApplication(string appId);
    public void ShutdownAll();
    public ApplicationInfo[] GetRunningApplications();
    internal AppDomainInfo[] GetAppDomainInfos();
    internal object SuspendAllApplications();
    internal void ResumeAllApplications(object state);
    internal void Ping(IProcessPingCallback callback);
    internal void OnRespondToPingWaitCallback(object state);
    internal void RespondToPingIfNeeded();
    internal int GetNonRandomizedStringComparerHashCode(string s, bool ignoreCase);
    internal void HostingEnvironmentActivated(long privateBytesLimit);
    internal void HostingEnvironmentShutdownComplete(string appId, IApplicationHost appHost);
    internal void HostingEnvironmentShutdownInitiated(string appId, HostingEnvironment env);
    internal int get_AppDomainsCount();
    internal void ReduceAppDomainsCount(int limit);
    internal ObjectHandle CreateInstanceInNewWorkerAppDomain(Type type, string appId, VirtualPath virtualPath, string physicalPath);
    internal LockableAppDomainContext GetLockableAppDomainContext(string appId);
}
public class System.Web.Hosting.AppManagerAppDomainFactory : object {
    public sealed virtual object Create(string appId, string appPath);
    public sealed virtual void Stop();
    internal static string ConstructSimpleAppName(string virtPath, bool isDevEnvironment);
}
internal class System.Web.Hosting.AspNetHostExecutionContextManager : HostExecutionContextManager {
    public virtual HostExecutionContext Capture();
    public virtual void Revert(object previousState);
    public virtual object SetHostExecutionContext(HostExecutionContext hostExecutionContext);
}
internal class System.Web.Hosting.AsyncCompletionCallback : MulticastDelegate {
    public AsyncCompletionCallback(object object, IntPtr method);
    public virtual void Invoke(int bytesCompleted, int hresult, IntPtr pbAsyncReceiveBuffer);
    public virtual IAsyncResult BeginInvoke(int bytesCompleted, int hresult, IntPtr pbAsyncReceiveBuffer, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Web.Hosting.AsyncCompletionDelegate : MulticastDelegate {
    public AsyncCompletionDelegate(object object, IntPtr method);
    public virtual void Invoke(IntPtr rootedObjectsPointer, int bytesRead, int hresult, IntPtr pAsyncCompletionContext);
    public virtual IAsyncResult BeginInvoke(IntPtr rootedObjectsPointer, int bytesRead, int hresult, IntPtr pAsyncCompletionContext, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Web.Hosting.AsyncDisconnectNotificationDelegate : MulticastDelegate {
    public AsyncDisconnectNotificationDelegate(object object, IntPtr method);
    public virtual void Invoke(IntPtr pManagedRootedObjects);
    public virtual IAsyncResult BeginInvoke(IntPtr pManagedRootedObjects, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal abstract class System.Web.Hosting.AsyncResultBase : object {
    internal int HResult { get; internal set; }
    internal ExceptionDispatchInfo Error { get; }
    public bool IsCompleted { get; }
    public bool CompletedSynchronously { get; }
    public object AsyncState { get; }
    public WaitHandle AsyncWaitHandle { get; }
    protected AsyncResultBase(AsyncCallback cb, object state);
    internal abstract virtual void Complete(int bytesCompleted, int hresult, IntPtr pAsyncCompletionContext, bool synchronous);
    protected void Complete(int hresult, bool synchronous);
    internal void MarkCallToBeginMethodStarted();
    internal void MarkCallToBeginMethodCompleted();
    internal void ReleaseWaitHandleWhenSignaled();
    internal void SetError(Exception error);
    internal int get_HResult();
    internal void set_HResult(int value);
    internal ExceptionDispatchInfo get_Error();
    public sealed virtual bool get_IsCompleted();
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual object get_AsyncState();
    public sealed virtual WaitHandle get_AsyncWaitHandle();
}
internal class System.Web.Hosting.BackgroundWorkScheduler : object {
    internal BackgroundWorkScheduler(Action`1<BackgroundWorkScheduler> unregisterCallback, Action`2<AppDomain, Exception> logCallback, Action workItemCompleteCallback);
    public void ScheduleWorkItem(Func`2<CancellationToken, Task> workItem);
    public sealed virtual void Stop(bool immediate);
}
internal enum System.Web.Hosting.BufferType : Enum {
    public byte value__;
    public static BufferType Managed;
    public static BufferType UnmanagedPool;
    public static BufferType IISAllocatedRequestMemory;
    public static BufferType TransmitFile;
}
internal class System.Web.Hosting.CacheManager : object {
    internal CacheManager(ApplicationManager appManager, long privateBytesLimit);
    internal long GetUpdatedTotalCacheSize(long sizeUpdate);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class System.Web.Hosting.ContextBase : object {
    internal static object Current { get; internal set; }
    internal static object get_Current();
    internal static void set_Current(object value);
    internal static object SwitchContext(object newContext);
}
internal class System.Web.Hosting.CustomRuntimeManager : object {
    public sealed virtual ICustomRuntimeRegistrationToken Register(ICustomRuntime customRuntime);
    public Action SuspendAllCustomRuntimes();
}
internal class System.Web.Hosting.DisposeFunctionDelegate : MulticastDelegate {
    public DisposeFunctionDelegate(object object, IntPtr method);
    public virtual void Invoke(IntPtr rootedObjectsPointer);
    public virtual IAsyncResult BeginInvoke(IntPtr rootedObjectsPointer, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Web.Hosting.ExecuteFunctionDelegate : MulticastDelegate {
    public ExecuteFunctionDelegate(object object, IntPtr method);
    public virtual int Invoke(IntPtr rootedObjectsPointer, IntPtr nativeRequestContext, IntPtr moduleData, int flags);
    public virtual IAsyncResult BeginInvoke(IntPtr rootedObjectsPointer, IntPtr nativeRequestContext, IntPtr moduleData, int flags, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class System.Web.Hosting.FlushAsyncResult : AsyncResultBase {
    internal FlushAsyncResult(AsyncCallback cb, object state);
    internal virtual void Complete(int bytesSent, int hresult, IntPtr pAsyncCompletionContext, bool synchronous);
}
public class System.Web.Hosting.HostingEnvironment : MarshalByRefObject {
    internal static FcnMode FcnMode { get; }
    internal static bool FcnSkipReadAndCacheDacls { get; }
    public static Exception InitializationException { get; }
    internal bool HasBeenRemovedFromAppManagerTable { get; internal set; }
    internal int LruScore { get; }
    public static bool InClientBuildManager { get; }
    public static bool IsHosted { get; }
    internal static bool IsUnderIISProcess { get; }
    internal static bool IsUnderIIS6Process { get; }
    public static IApplicationHost ApplicationHost { get; }
    internal static IApplicationHost ApplicationHostInternal { get; }
    internal IApplicationHost InternalApplicationHost { get; }
    internal static int BusyCount { get; }
    internal static bool ShutdownInitiated { get; }
    internal static bool ShutdownInProgress { get; }
    public static string ApplicationID { get; }
    internal static string ApplicationIDNoDemand { get; }
    public static string ApplicationPhysicalPath { get; }
    public static string ApplicationVirtualPath { get; }
    internal static VirtualPath ApplicationVirtualPathObject { get; }
    public static string SiteName { get; }
    internal static string SiteNameNoDemand { get; }
    internal static string SiteID { get; }
    internal static IConfigMapPath ConfigMapPath { get; }
    internal static string AppConfigPath { get; }
    public static bool IsDevelopmentEnvironment { get; }
    public static Cache Cache { get; }
    internal static int AppDomainsCount { get; }
    internal static HostingEnvironmentParameters HostingParameters { get; }
    internal static int AppDomainUniqueInteger { get; }
    public static ApplicationShutdownReason ShutdownReason { get; }
    internal static bool StopListeningWasCalled { get; }
    internal static IntPtr ApplicationIdentityToken { get; }
    internal static bool HasHostingIdentity { get; }
    public static VirtualPathProvider VirtualPathProvider { get; }
    internal static bool UsingMapPathBasedVirtualPathProvider { get; }
    internal static IProcessHostSupportFunctions SupportFunctions { get; internal set; }
    public static int MaxConcurrentRequestsPerCPU { get; public set; }
    public static int MaxConcurrentThreadsPerCPU { get; public set; }
    internal AppDomain HostedAppDomain { get; }
    private static HostingEnvironment();
    internal static FcnMode get_FcnMode();
    internal static bool get_FcnSkipReadAndCacheDacls();
    public virtual object InitializeLifetimeService();
    internal long TrimCache(int percent);
    internal void Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters, PolicyLevel policyLevel);
    internal void Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters, PolicyLevel policyLevel, Exception appDomainCreationException);
    internal static void InitializeObjectCacheHost();
    public static Exception get_InitializationException();
    internal ApplicationInfo GetApplicationInfo();
    internal void InitiateShutdownInternal();
    internal bool get_HasBeenRemovedFromAppManagerTable();
    internal void set_HasBeenRemovedFromAppManagerTable(bool value);
    internal ObjectHandle CreateInstance(string assemblyQualifiedName);
    internal ObjectHandle CreateWellKnownObjectInstance(string assemblyQualifiedName, bool failIfExists);
    internal ObjectHandle FindWellKnownObject(string assemblyQualifiedName);
    internal void StopWellKnownObject(string assemblyQualifiedName);
    internal bool IsIdle();
    internal bool GetIdleValue();
    internal void IncrementBusyCountInternal();
    internal void DecrementBusyCountInternal();
    internal void IsUnloaded();
    internal int get_LruScore();
    internal static ApplicationManager GetApplicationManager();
    internal static object AddVirtualPathToFileMapping(VirtualPath virtualPath, string physicalPath);
    internal static void ClearVirtualPathToFileMapping(object state);
    public static void RegisterObject(IRegisteredObject obj);
    public static void UnregisterObject(IRegisteredObject obj);
    public static void QueueBackgroundWorkItem(Action`1<CancellationToken> workItem);
    public static void QueueBackgroundWorkItem(Func`2<CancellationToken, Task> workItem);
    [CompilerGeneratedAttribute]
public static void add_StopListening(EventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_StopListening(EventHandler value);
    public static void IncrementBusyCount();
    public static void DecrementBusyCount();
    public static void MessageReceived();
    public static bool get_InClientBuildManager();
    public static bool get_IsHosted();
    internal static bool get_IsUnderIISProcess();
    internal static bool get_IsUnderIIS6Process();
    public static IApplicationHost get_ApplicationHost();
    internal static IApplicationHost get_ApplicationHostInternal();
    internal IApplicationHost get_InternalApplicationHost();
    internal static int get_BusyCount();
    internal static bool get_ShutdownInitiated();
    internal static bool get_ShutdownInProgress();
    public static string get_ApplicationID();
    internal static string get_ApplicationIDNoDemand();
    public static string get_ApplicationPhysicalPath();
    public static string get_ApplicationVirtualPath();
    internal static VirtualPath get_ApplicationVirtualPathObject();
    public static string get_SiteName();
    internal static string get_SiteNameNoDemand();
    internal static string get_SiteID();
    internal static IConfigMapPath get_ConfigMapPath();
    internal static string get_AppConfigPath();
    public static bool get_IsDevelopmentEnvironment();
    public static Cache get_Cache();
    internal static int get_AppDomainsCount();
    internal static HostingEnvironmentParameters get_HostingParameters();
    internal static int get_AppDomainUniqueInteger();
    public static ApplicationShutdownReason get_ShutdownReason();
    internal static bool get_StopListeningWasCalled();
    internal static void SetupStopListeningHandler();
    public static void InitiateShutdown();
    internal static void InitiateShutdownWithoutDemand();
    internal IntPtr SuspendApplication();
    internal void ResumeApplication(IntPtr state);
    public static string MapPath(string virtualPath);
    internal static string MapPath(VirtualPath virtualPath);
    internal static string MapPathInternal(string virtualPath);
    internal static string MapPathInternal(VirtualPath virtualPath);
    internal static string MapPathInternal(string virtualPath, bool permitNull);
    internal static string MapPathInternal(VirtualPath virtualPath, bool permitNull);
    internal static string MapPathInternal(string virtualPath, string baseVirtualDir, bool allowCrossAppMapping);
    internal static string MapPathInternal(VirtualPath virtualPath, VirtualPath baseVirtualDir, bool allowCrossAppMapping);
    internal static WebApplicationLevel GetPathLevel(string path);
    internal static IntPtr get_ApplicationIdentityToken();
    internal static bool get_HasHostingIdentity();
    public static IDisposable Impersonate();
    public static IDisposable Impersonate(IntPtr token);
    public static IDisposable Impersonate(IntPtr userToken, string virtualPath);
    public static IDisposable SetCultures();
    public static IDisposable SetCultures(string virtualPath);
    public static VirtualPathProvider get_VirtualPathProvider();
    internal static bool get_UsingMapPathBasedVirtualPathProvider();
    public static void RegisterVirtualPathProvider(VirtualPathProvider virtualPathProvider);
    internal static void RegisterVirtualPathProviderInternal(VirtualPathProvider virtualPathProvider);
    internal static IProcessHostSupportFunctions get_SupportFunctions();
    internal static void set_SupportFunctions(IProcessHostSupportFunctions value);
    public static int get_MaxConcurrentRequestsPerCPU();
    public static void set_MaxConcurrentRequestsPerCPU(int value);
    public static int get_MaxConcurrentThreadsPerCPU();
    public static void set_MaxConcurrentThreadsPerCPU(int value);
    internal AppDomain get_HostedAppDomain();
}
internal class System.Web.Hosting.HostingEnvironmentException : Exception {
    internal string Details { get; }
    protected HostingEnvironmentException(SerializationInfo info, StreamingContext context);
    internal HostingEnvironmentException(string message, string details);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal string get_Details();
}
[FlagsAttribute]
internal enum System.Web.Hosting.HostingEnvironmentFlags : Enum {
    public int value__;
    public static HostingEnvironmentFlags Default;
    public static HostingEnvironmentFlags HideFromAppManager;
    public static HostingEnvironmentFlags ThrowHostingInitErrors;
    public static HostingEnvironmentFlags DontCallAppInitialize;
    public static HostingEnvironmentFlags ClientBuildManager;
    public static HostingEnvironmentFlags SupportsMultiTargeting;
}
internal class System.Web.Hosting.HostingEnvironmentParameters : object {
    public HostingEnvironmentFlags HostingFlags { get; public set; }
    public string PrecompilationTargetPhysicalDirectory { get; public set; }
    public ClientBuildManagerParameter ClientBuildManagerParameter { get; public set; }
    public string IISExpressVersion { get; public set; }
    public FcnMode FcnMode { get; public set; }
    public bool FcnSkipReadAndCacheDacls { get; public set; }
    public KeyValuePair`2[] ClrQuirksSwitches { get; public set; }
    public HostingEnvironmentFlags get_HostingFlags();
    public void set_HostingFlags(HostingEnvironmentFlags value);
    public string get_PrecompilationTargetPhysicalDirectory();
    public void set_PrecompilationTargetPhysicalDirectory(string value);
    public ClientBuildManagerParameter get_ClientBuildManagerParameter();
    public void set_ClientBuildManagerParameter(ClientBuildManagerParameter value);
    public string get_IISExpressVersion();
    public void set_IISExpressVersion(string value);
    [CompilerGeneratedAttribute]
public FcnMode get_FcnMode();
    [CompilerGeneratedAttribute]
public void set_FcnMode(FcnMode value);
    [CompilerGeneratedAttribute]
public bool get_FcnSkipReadAndCacheDacls();
    [CompilerGeneratedAttribute]
public void set_FcnSkipReadAndCacheDacls(bool value);
    [CompilerGeneratedAttribute]
public KeyValuePair`2[] get_ClrQuirksSwitches();
    [CompilerGeneratedAttribute]
public void set_ClrQuirksSwitches(KeyValuePair`2[] value);
}
public class System.Web.Hosting.HostSecurityPolicyResolver : object {
    public virtual HostSecurityPolicyResults ResolvePolicy(Evidence evidence);
}
public enum System.Web.Hosting.HostSecurityPolicyResults : Enum {
    public int value__;
    public static HostSecurityPolicyResults DefaultPolicy;
    public static HostSecurityPolicyResults FullTrust;
    public static HostSecurityPolicyResults AppDomainTrust;
    public static HostSecurityPolicyResults Nothing;
}
internal class System.Web.Hosting.HTTP_COOKED_URL : ValueType {
    internal ushort FullUrlLength;
    internal ushort HostLength;
    internal ushort AbsPathLength;
    internal ushort QueryStringLength;
    internal Char* pFullUrl;
    internal Char* pHost;
    internal Char* pAbsPath;
    internal Char* pQueryString;
}
public interface System.Web.Hosting.IAdphManager {
    public abstract virtual void StartAppDomainProtocolListenerChannel(string appId, string protocolId, IListenerChannelCallback listenerChannelCallback);
    public abstract virtual void StopAppDomainProtocolListenerChannel(string appId, string protocolId, int listenerChannelId, bool immediate);
    public abstract virtual void StopAppDomainProtocol(string appId, string protocolId, bool immediate);
}
[GuidAttribute("e6e21054-a7dc-4378-877d-b7f4a2d7e8ba")]
[InterfaceTypeAttribute("1")]
public interface System.Web.Hosting.IAppDomainFactory {
    public abstract virtual object Create(string module, string typeName, string appId, string appPath, string strUrlOfAppOrigin, int iZone);
}
[GuidAttribute("5BC9C234-6CD7-49bf-A07A-6FDB7F22DFFF")]
[InterfaceTypeAttribute("1")]
public interface System.Web.Hosting.IAppDomainInfo {
    public abstract virtual string GetId();
    public abstract virtual string GetVirtualPath();
    public abstract virtual string GetPhysicalPath();
    public abstract virtual int GetSiteId();
    public abstract virtual bool IsIdle();
}
[GuidAttribute("F79648FB-558B-4a09-88F1-1E3BCB30E34F")]
[InterfaceTypeAttribute("1")]
public interface System.Web.Hosting.IAppDomainInfoEnum {
    public abstract virtual IAppDomainInfo GetData();
    public abstract virtual int Count();
    public abstract virtual bool MoveNext();
    public abstract virtual void Reset();
}
public interface System.Web.Hosting.IApplicationHost {
    public abstract virtual string GetVirtualPath();
    public abstract virtual string GetPhysicalPath();
    public abstract virtual IConfigMapPathFactory GetConfigMapPathFactory();
    public abstract virtual IntPtr GetConfigToken();
    public abstract virtual string GetSiteName();
    public abstract virtual string GetSiteID();
    public abstract virtual void MessageReceived();
}
[GuidAttribute("AE54F424-71BC-4da5-AA2F-8C0CD53496FC")]
[InterfaceTypeAttribute("1")]
public interface System.Web.Hosting.IApplicationPreloadManager {
    public abstract virtual void SetApplicationPreloadUtil(IApplicationPreloadUtil preloadUtil);
    public abstract virtual void SetApplicationPreloadState(string context, string appId, bool enabled);
}
[GuidAttribute("940D8ADD-9E40-4475-9A67-2CDCDF57995C")]
[InterfaceTypeAttribute("1")]
public interface System.Web.Hosting.IApplicationPreloadUtil {
    public abstract virtual void GetApplicationPreloadInfo(string context, Boolean& enabled, String& startupObjType, String[]& parametersForStartupObj);
    public abstract virtual void ReportApplicationPreloadFailure(string context, int errorCode, string errorMessage);
}
[GuidAttribute("02998279-7175-4d59-aa5a-fb8e44d4ca9d")]
[InterfaceTypeAttribute("1")]
public interface System.Web.Hosting.IAppManagerAppDomainFactory {
    public abstract virtual object Create(string appId, string appPath);
    public abstract virtual void Stop();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("50A3CE65-2F9F-44E9-9094-32C6C928F966")]
internal interface System.Web.Hosting.ICustomLoader {
    public abstract virtual IObjectHandle LoadApplication(string appId, string appConfigPath, IProcessHostSupportFunctions supportFunctions, IntPtr pLoadAppData, int loadAppDataSize);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("692D0723-C338-4D09-9057-C71F0F47DA87")]
internal interface System.Web.Hosting.ICustomRuntime {
    public abstract virtual void Start(IntPtr reserved0, int reserved1);
    public abstract virtual void ResolveModules(IntPtr pResolveModuleData, int resolveModuleDataSize);
    public abstract virtual void Stop(IntPtr reserved0, int reserved1);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A0BBBDFF-5AF5-42E3-9753-34441F764A6B")]
internal interface System.Web.Hosting.ICustomRuntimeManager {
    public abstract virtual ICustomRuntimeRegistrationToken Register(ICustomRuntime customRuntime);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3A8E9CED-D3C9-4C4B-8956-6F15E2F559D9")]
internal interface System.Web.Hosting.ICustomRuntimeRegistrationToken {
    public abstract virtual void Unregister();
}
internal class System.Web.Hosting.IIS7UserPrincipal : object {
    public IIdentity Identity { get; }
    internal IIS7UserPrincipal(IIS7WorkerRequest wr, IIdentity identity);
    public sealed virtual IIdentity get_Identity();
    public sealed virtual bool IsInRole(string role);
}
internal class System.Web.Hosting.IIS7WorkerRequest : HttpWorkerRequest {
    internal IntPtr RequestContext { get; }
    public bool SupportsAsyncFlush { get; }
    public bool SupportsAsyncRead { get; }
    internal bool SupportsLongTransmitFile { get; }
    public Guid RequestTraceIdentifier { get; }
    internal bool TrySkipIisCustomErrors { get; internal set; }
    internal bool SupportsExecuteUrl { get; }
    public string MachineConfigPath { get; }
    public string RootWebConfigPath { get; }
    public string MachineInstallDirectory { get; }
    internal ChannelBinding HttpChannelBindingToken { get; }
    private IAllocatorProvider AllocatorProvider { get; internal set; }
    internal IIS7WorkerRequest(IntPtr requestContext, bool etwProviderEnabled);
    private static IIS7WorkerRequest();
    internal IntPtr get_RequestContext();
    internal void ReadRequestBasics();
    internal static IIS7WorkerRequest CreateWorkerRequest(IntPtr requestContext, bool etwProviderEnabled);
    internal void InitAppVars();
    internal void Initialize();
    internal void Dispose();
    internal virtual void RaiseTraceEvent(IntegratedTraceType traceType, string eventData);
    internal virtual void RaiseTraceEvent(WebBaseEvent webEvent);
    internal string GetUriPathInternal(bool includePathInfo, bool useParentContext);
    public virtual string GetUriPath();
    public virtual string GetQueryString();
    internal string GetCacheUrl();
    public virtual string GetRawUrl();
    public virtual string GetHttpVerbName();
    public virtual string GetHttpVersion();
    public virtual string GetRemoteAddress();
    public virtual string GetRemoteName();
    public virtual int GetRemotePort();
    public virtual string GetLocalAddress();
    public virtual int GetLocalPort();
    public virtual string GetServerName();
    internal virtual string GetLocalPortAsString();
    public virtual bool IsSecure();
    public virtual string GetFilePath();
    public virtual string GetFilePathTranslated();
    public virtual string GetPathInfo();
    public virtual string GetAppPath();
    public virtual string GetAppPathTranslated();
    public virtual int GetPreloadedEntityBodyLength();
    public virtual Byte[] GetPreloadedEntityBody();
    public virtual bool IsEntireEntityBodyIsPreloaded();
    public virtual int GetTotalEntityBodyLength();
    public virtual int ReadEntityBody(Byte[] buffer, int size);
    public virtual int ReadEntityBody(Byte[] buffer, int offset, int size);
    public virtual long GetBytesRead();
    public virtual bool get_SupportsAsyncFlush();
    public virtual IAsyncResult BeginFlush(AsyncCallback callback, object state);
    public virtual void EndFlush(IAsyncResult asyncResult);
    public virtual bool get_SupportsAsyncRead();
    internal void OnAsyncCompletion(int bytesCompleted, int hresult, IntPtr pAsyncCompletionContext);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    internal Guid GetRequestCorrelationId();
    public virtual string GetKnownRequestHeader(int index);
    public virtual string GetUnknownRequestHeader(string name);
    public virtual String[][] GetUnknownRequestHeaders();
    public virtual string GetServerVariable(string name);
    internal virtual void SendStatus(int statusCode, int subStatusCode, string statusDescription);
    public virtual void SendStatus(int statusCode, string statusDescription);
    internal virtual void SetHeaderEncoding(Encoding encoding);
    public virtual void SendKnownResponseHeader(int index, string value);
    public virtual void SendUnknownResponseHeader(string name, string value);
    public virtual void SendCalculatedContentLength(int contentLength);
    public virtual bool HeadersSent();
    public virtual bool IsClientConnected();
    internal bool TryGetClientDisconnectedCancellationToken(CancellationToken& cancellationToken);
    internal void NotifyOfAsyncDisconnect();
    internal bool IsHandlerExecutionDenied();
    internal void AbortConnection();
    public virtual void CloseConnection();
    public virtual IntPtr GetUserToken();
    public virtual IntPtr GetVirtualPathToken();
    public virtual void SendResponseFromMemory(Byte[] data, int length);
    public virtual void SendResponseFromMemory(IntPtr data, int length);
    internal virtual void SendResponseFromMemory(IntPtr data, int length, bool isBufferFromUnmanagedPool);
    internal void SendResponseFromIISAllocatedRequestMemory(IntPtr data, int length);
    internal virtual void TransmitFile(string filename, long offset, long length, bool isImpersonating);
    internal virtual bool get_SupportsLongTransmitFile();
    public virtual void SendResponseFromFile(string name, long offset, long length);
    public virtual void SendResponseFromFile(IntPtr handle, long offset, long length);
    public virtual void FlushResponse(bool finalFlush);
    public virtual void EndOfRequest();
    public virtual Guid get_RequestTraceIdentifier();
    internal void PushPromise(string virtualPath, string queryString, string method, NameValueCollection headers);
    internal HTTP_COOKED_URL* GetCookedUrl();
    internal string GetCurrentModuleName();
    internal void UnlockCachedResponseBytes();
    internal virtual string SetupKernelCaching(int secondsToLive, string originalCacheUrl, bool enableKernelCacheForVaryByStar);
    internal virtual void DisableKernelCache();
    internal virtual void DisableUserCache();
    internal virtual bool get_TrySkipIisCustomErrors();
    internal virtual void set_TrySkipIisCustomErrors(bool value);
    internal string ReMapHandlerAndGetHandlerTypeString(HttpContext httpContext, string path, Boolean& handlerExists);
    internal string MapHandlerAndGetHandlerTypeString(string method, string path, bool convertNativeStaticFileModule, bool ignoreWildcardMappings);
    internal string GetManagedHandlerType();
    internal void SetRemapHandler(string handlerType, string handlerName);
    internal void SetScriptMapForRemapHandler();
    internal void RewriteNotifyPipeline(string newPath, string newQueryString, bool rebaseClientPath);
    internal void DisableNotifications(RequestNotification notifications, RequestNotification postNotifications);
    internal void SuppressSendResponseNotifications();
    internal void PushResponseToNative();
    internal void ClearResponse(bool clearEntity, bool clearHeaders);
    internal IntPtr AllocateRequestMemory(int size);
    internal ArrayList GetBufferedResponseChunks(bool disableRecycling, ArrayList substElements, Boolean& hasSubstBlocks);
    internal bool IsResponseBuffered();
    internal void SetPrincipal(IPrincipal user);
    internal void ResponseFilterInstalled();
    internal void ExplicitFlush();
    internal void SetServerVariable(string name, string value);
    internal void SetRequestHeader(string name, string value, bool replace);
    internal void SetResponseHeader(string name, string value, bool replace);
    internal bool IsUserInRole(string role);
    internal void SynchronizeVariables(HttpContext context);
    internal virtual bool get_SupportsExecuteUrl();
    internal void ScheduleExecuteUrl(string url, string queryString, string method, bool preserveForm, Byte[] entity, NameValueCollection headers, bool preserveUser);
    public virtual Byte[] GetQueryStringRawBytes();
    public virtual Byte[] GetClientCertificate();
    public virtual DateTime GetClientCertificateValidFrom();
    public virtual DateTime GetClientCertificateValidUntil();
    public virtual Byte[] GetClientCertificateBinaryIssuer();
    public virtual int GetClientCertificateEncoding();
    public virtual Byte[] GetClientCertificatePublicKey();
    internal ITlsTokenBindingInfo GetTlsTokenBindingInfo();
    public virtual string MapPath(string path);
    public virtual string get_MachineConfigPath();
    public virtual string get_RootWebConfigPath();
    public virtual string get_MachineInstallDirectory();
    internal ChannelBinding get_HttpChannelBindingToken();
    internal void InsertEntityBody(Byte[] buffer, int offset, int count);
    internal bool IsWebSocketModuleActive();
    internal bool IsWebSocketRequest();
    internal void AcceptWebSocket();
    internal UnmanagedWebSocketContext GetWebSocketContext();
    internal bool GetIsChildRequest();
    private IAllocatorProvider get_AllocatorProvider();
    internal void set_AllocatorProvider(IAllocatorProvider value);
}
[GuidAttribute("08a2c56f-7c16-41c1-a8be-432917a1a2d1")]
[InterfaceTypeAttribute("1")]
public interface System.Web.Hosting.IISAPIRuntime {
    public abstract virtual void StartProcessing();
    public abstract virtual void StopProcessing();
    public abstract virtual int ProcessRequest(IntPtr ecb, int useProcessModel);
    public abstract virtual void DoGCCollect();
}
[GuidAttribute("15eb8d20-d4ed-4855-a276-91a75a696955")]
[InterfaceTypeAttribute("1")]
internal interface System.Web.Hosting.IISAPIRuntime2 {
    public abstract virtual void StartProcessing();
    public abstract virtual void StopProcessing();
    public abstract virtual int ProcessRequest(IntPtr ecb, int useProcessModel);
    public abstract virtual void DoGCCollect();
}
[GuidAttribute("dc3b0a85-9da7-47e4-ba1b-e27da9db8a1e")]
[InterfaceTypeAttribute("1")]
public interface System.Web.Hosting.IListenerChannelCallback {
    public abstract virtual void ReportStarted();
    public abstract virtual void ReportStopped(int hr);
    public abstract virtual void ReportMessageReceived();
    public abstract virtual int GetId();
    public abstract virtual int GetBlobLength();
    public abstract virtual void GetBlob(Byte[] buffer, Int32& bufferSize);
}
[GuidAttribute("c96cb854-aec2-4208-9ada-a86a96860cb6")]
[InterfaceTypeAttribute("1")]
internal interface System.Web.Hosting.IPipelineRuntime {
    public abstract virtual void StartProcessing();
    public abstract virtual void StopProcessing();
    public abstract virtual void InitializeApplication(IntPtr appContext);
    public abstract virtual IntPtr GetAsyncCompletionDelegate();
    public abstract virtual IntPtr GetAsyncDisconnectNotificationDelegate();
    public abstract virtual IntPtr GetExecuteDelegate();
    public abstract virtual IntPtr GetDisposeDelegate();
    public abstract virtual IntPtr GetRoleDelegate();
    public abstract virtual IntPtr GetPrincipalDelegate();
}
[GuidAttribute("1cc9099d-0a8d-41cb-87d6-845e4f8c4e91")]
[InterfaceTypeAttribute("1")]
public interface System.Web.Hosting.IPphManager {
    public abstract virtual void StartProcessProtocolListenerChannel(string protocolId, IListenerChannelCallback listenerChannelCallback);
    public abstract virtual void StopProcessProtocolListenerChannel(string protocolId, int listenerChannelId, bool immediate);
    public abstract virtual void StopProcessProtocol(string protocolId, bool immediate);
}
[GuidAttribute("0ccd465e-3114-4ca3-ad50-cea561307e93")]
[InterfaceTypeAttribute("1")]
public interface System.Web.Hosting.IProcessHost {
    public abstract virtual void StartApplication(string appId, string appPath, Object& runtimeInterface);
    public abstract virtual void ShutdownApplication(string appId);
    public abstract virtual void Shutdown();
    public abstract virtual void EnumerateAppDomains(IAppDomainInfoEnum& appDomainInfoEnum);
}
[GuidAttribute("02fd465d-5c5d-4b7e-95b6-82faa031b74a")]
[InterfaceTypeAttribute("1")]
public interface System.Web.Hosting.IProcessHostFactoryHelper {
    public abstract virtual object GetProcessHost(IProcessHostSupportFunctions functions);
}
[GuidAttribute("9d98b251-453e-44f6-9cec-8b5aed970129")]
[InterfaceTypeAttribute("1")]
public interface System.Web.Hosting.IProcessHostIdleAndHealthCheck {
    public abstract virtual bool IsIdle();
    public abstract virtual void Ping(IProcessPingCallback callback);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E2A1F244-70EB-483A-ACC8-DE6ACE5BF8B1")]
internal interface System.Web.Hosting.IProcessHostLite {
    public abstract virtual IObjectHandle GetCustomLoader(string appId, string appConfigPath, IProcessHostSupportFunctions& supportFunctions, AppDomain& newlyCreatedAppDomain);
    public abstract virtual void ReportCustomLoaderError(string appId, int hr, AppDomain newlyCreatedAppDomain);
    public abstract virtual string GetFullExceptionMessage(int hr, IntPtr pErrorInfo);
}
public interface System.Web.Hosting.IProcessHostPreloadClient {
    public abstract virtual void Preload(String[] parameters);
}
[GuidAttribute("35f9c4c1-3800-4d17-99bc-018a62243687")]
[InterfaceTypeAttribute("1")]
[SuppressUnmanagedCodeSecurityAttribute]
public interface System.Web.Hosting.IProcessHostSupportFunctions {
    public abstract virtual void GetApplicationProperties(string appId, String& virtualPath, String& physicalPath, String& siteName, String& siteId);
    public abstract virtual void MapPath(string appId, string virtualPath, String& physicalPath);
    public abstract virtual IntPtr GetConfigToken(string appId);
    public abstract virtual string GetAppHostConfigFilename();
    public abstract virtual string GetRootWebConfigFilename();
    public abstract virtual IntPtr GetNativeConfigurationSystem();
}
[GuidAttribute("f11dc4c9-ddd1-4566-ad53-cf6f3a28fefe")]
[InterfaceTypeAttribute("1")]
public interface System.Web.Hosting.IProcessPingCallback {
    public abstract virtual void Respond();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BB1AEEC0-E4EC-47BA-8724-D26AC4F16604")]
internal interface System.Web.Hosting.IProcessResumeCallback {
    public abstract virtual void Resume();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("406E6C4C-1C5D-4357-9DFE-EF4BE00D654B")]
internal interface System.Web.Hosting.IProcessSuspendListener {
    public abstract virtual IProcessResumeCallback Suspend();
}
public interface System.Web.Hosting.IRegisteredObject {
    public abstract virtual void Stop(bool immediate);
}
internal class System.Web.Hosting.ISAPIApplicationHost : MarshalByRefObject {
    internal string AppId { get; }
    internal IProcessHostSupportFunctions SupportFunctions { get; }
    internal ISAPIApplicationHost(string appIdOrVirtualPath, string physicalPath, bool validatePhysicalPath, IProcessHostSupportFunctions functions, string iisVersion);
    internal ISAPIApplicationHost(string appIdOrVirtualPath, string physicalPath, bool validatePhysicalPath);
    public virtual object InitializeLifetimeService();
    private sealed virtual override string System.Web.Hosting.IApplicationHost.GetVirtualPath();
    private sealed virtual override string System.Web.Hosting.IApplicationHost.GetPhysicalPath();
    private sealed virtual override IConfigMapPathFactory System.Web.Hosting.IApplicationHost.GetConfigMapPathFactory();
    private sealed virtual override IntPtr System.Web.Hosting.IApplicationHost.GetConfigToken();
    private sealed virtual override string System.Web.Hosting.IApplicationHost.GetSiteName();
    private sealed virtual override string System.Web.Hosting.IApplicationHost.GetSiteID();
    private sealed virtual override void System.Web.Hosting.IApplicationHost.MessageReceived();
    internal string get_AppId();
    internal IProcessHostSupportFunctions get_SupportFunctions();
    internal string ResolveRootWebConfigPath();
}
internal class System.Web.Hosting.ISAPIAsyncCompletionCallback : MulticastDelegate {
    public ISAPIAsyncCompletionCallback(object object, IntPtr method);
    public virtual void Invoke(IntPtr ecb, int byteCount, int error);
    public virtual IAsyncResult BeginInvoke(IntPtr ecb, int byteCount, int error, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Web.Hosting.ISAPIConfigMapPathFactory : object {
    private sealed virtual override IConfigMapPath System.Web.Configuration.IConfigMapPathFactory.Create(string virtualPath, string physicalPath);
}
public class System.Web.Hosting.ISAPIRuntime : MarshalByRefObject {
    public virtual object InitializeLifetimeService();
    public sealed virtual void StartProcessing();
    private sealed virtual override void System.Web.Hosting.IISAPIRuntime2.StartProcessing();
    public sealed virtual void StopProcessing();
    private sealed virtual override void System.Web.Hosting.IISAPIRuntime2.StopProcessing();
    public sealed virtual int ProcessRequest(IntPtr ecb, int iWRType);
    private sealed virtual override int System.Web.Hosting.IISAPIRuntime2.ProcessRequest(IntPtr ecb, int iWRType);
    public sealed virtual void DoGCCollect();
    private sealed virtual override void System.Web.Hosting.IISAPIRuntime2.DoGCCollect();
    private sealed virtual override void System.Web.Hosting.IRegisteredObject.Stop(bool immediate);
    internal static void RemoveThisAppDomainFromUnmanagedTable();
}
internal abstract class System.Web.Hosting.ISAPIWorkerRequest : HttpWorkerRequest {
    protected IntPtr _ecb;
    protected IntPtr _token;
    protected Guid _traceId;
    protected AsyncResultBase _asyncResultBase;
    protected AsyncCompletionCallback _asyncCompletionCallback;
    protected string _method;
    protected string _path;
    protected string _filePath;
    protected string _pathInfo;
    protected string _pathTranslated;
    protected string _appPath;
    protected string _appPathTranslated;
    protected int _contentType;
    protected int _contentTotalLength;
    protected int _contentAvailLength;
    protected int _queryStringLength;
    protected bool _ignoreMinAsyncSize;
    protected bool _requiresAsyncFlushCallback;
    public Guid RequestTraceIdentifier { get; }
    internal IntPtr Ecb { get; }
    public string MachineConfigPath { get; }
    public string RootWebConfigPath { get; }
    public string MachineInstallDirectory { get; }
    internal ISAPIWorkerRequest(IntPtr ecb);
    private static ISAPIWorkerRequest();
    internal void UnlockCachedResponseBytesOnceAfterIoComplete();
    internal void CallEndOfRequestCallbackOnceAfterAllIoComplete();
    public virtual Guid get_RequestTraceIdentifier();
    internal IntPtr get_Ecb();
    internal void Initialize();
    internal virtual void ReadRequestBasics();
    internal static ISAPIWorkerRequest CreateWorkerRequest(IntPtr ecb, bool useOOP);
    public virtual string GetUriPath();
    public virtual string GetQueryString();
    public virtual Byte[] GetQueryStringRawBytes();
    public virtual string GetRawUrl();
    public virtual string GetHttpVerbName();
    public virtual string GetHttpVersion();
    public virtual string GetRemoteAddress();
    public virtual string GetRemoteName();
    public virtual int GetRemotePort();
    public virtual string GetLocalAddress();
    public virtual int GetLocalPort();
    internal virtual string GetLocalPortAsString();
    public virtual string GetServerName();
    public virtual bool IsSecure();
    public virtual string GetFilePath();
    public virtual string GetFilePathTranslated();
    public virtual string GetPathInfo();
    public virtual string GetAppPath();
    public virtual string GetAppPathTranslated();
    public virtual int GetPreloadedEntityBodyLength();
    public virtual Byte[] GetPreloadedEntityBody();
    public virtual bool IsEntireEntityBodyIsPreloaded();
    public virtual int GetTotalEntityBodyLength();
    public virtual int ReadEntityBody(Byte[] buffer, int size);
    public virtual int ReadEntityBody(Byte[] buffer, int offset, int size);
    public virtual long GetBytesRead();
    public virtual string GetKnownRequestHeader(int index);
    public virtual string GetUnknownRequestHeader(string name);
    public virtual String[][] GetUnknownRequestHeaders();
    public virtual void SendStatus(int statusCode, string statusDescription);
    internal virtual void SetHeaderEncoding(Encoding encoding);
    public virtual void SendKnownResponseHeader(int index, string value);
    public virtual void SendUnknownResponseHeader(string name, string value);
    public virtual void SendCalculatedContentLength(int contentLength);
    public virtual void SendCalculatedContentLength(long contentLength);
    public virtual bool HeadersSent();
    public virtual bool IsClientConnected();
    public virtual void CloseConnection();
    public virtual void SendResponseFromMemory(Byte[] data, int length);
    public virtual void SendResponseFromMemory(IntPtr data, int length);
    internal virtual void SendResponseFromMemory(IntPtr data, int length, bool isBufferFromUnmanagedPool);
    internal virtual MemoryBytes PackageFile(string filename, long offset64, long length64, bool isImpersonating);
    internal virtual void TransmitFile(string filename, long offset, long length, bool isImpersonating);
    public virtual void SendResponseFromFile(string filename, long offset, long length);
    public virtual void SendResponseFromFile(IntPtr handle, long offset, long length);
    public virtual void FlushResponse(bool finalFlush);
    public virtual void EndOfRequest();
    public virtual void SetEndOfSendNotification(EndOfSendNotification callback, object extraData);
    public virtual string MapPath(string path);
    public virtual string get_MachineConfigPath();
    public virtual string get_RootWebConfigPath();
    public virtual string get_MachineInstallDirectory();
    public virtual IntPtr GetUserToken();
    public virtual IntPtr GetVirtualPathToken();
    public virtual Byte[] GetClientCertificate();
    public virtual DateTime GetClientCertificateValidFrom();
    public virtual DateTime GetClientCertificateValidUntil();
    public virtual Byte[] GetClientCertificateBinaryIssuer();
    public virtual int GetClientCertificateEncoding();
    public virtual Byte[] GetClientCertificatePublicKey();
    internal void AppendLogParameter(string logParam);
    internal virtual void SendEmptyResponse();
    internal abstract virtual int GetBasicsCore(Byte[] buffer, int size, Int32[] contentInfo);
    internal abstract virtual int GetQueryStringCore(int encode, StringBuilder buffer, int size);
    internal abstract virtual int GetQueryStringRawBytesCore(Byte[] buffer, int size);
    internal abstract virtual int GetPreloadedPostedContentCore(Byte[] bytes, int offset, int numBytesToRead);
    internal abstract virtual int GetAdditionalPostedContentCore(Byte[] bytes, int offset, int bufferSize);
    internal abstract virtual void FlushCore(Byte[] status, Byte[] header, int keepConnected, int totalBodySize, int numBodyFragments, IntPtr[] bodyFragments, Int32[] bodyFragmentLengths, int doneWithSession, int finalStatus, Boolean& async);
    internal abstract virtual int IsClientConnectedCore();
    internal abstract virtual int CloseConnectionCore();
    internal abstract virtual int MapUrlToPathCore(string url, Byte[] buffer, int size);
    internal abstract virtual IntPtr GetUserTokenCore();
    internal abstract virtual IntPtr GetVirtualPathTokenCore();
    internal abstract virtual int AppendLogParameterCore(string logParam);
    internal abstract virtual int GetClientCertificateCore(Byte[] buffer, Int32[] pInts, Int64[] pDates);
    internal abstract virtual int CallISAPI(CallISAPIFunc iFunction, Byte[] bufIn, Byte[] bufOut);
    internal virtual void Close();
}
internal class System.Web.Hosting.ISAPIWorkerRequestInProc : ISAPIWorkerRequest {
    protected static int NUM_SERVER_VARIABLES;
    protected static int NUM_BASIC_SERVER_VARIABLES;
    protected static int NUM_ADDITIONAL_SERVER_VARIABLES;
    protected static int LOGON_USER;
    protected static int AUTH_TYPE;
    protected static int APPL_PHYSICAL_PATH;
    protected static int REQUEST_METHOD;
    protected static int PATH_INFO;
    protected static int PATH_TRANSLATED;
    protected static int URL;
    protected static int CACHE_URL;
    protected static int SERVER_NAME;
    protected static int SERVER_PORT;
    protected static int HTTPS;
    protected static int ALL_RAW;
    protected static int REMOTE_ADDR;
    protected static int AUTH_PASSWORD;
    protected static int CERT_COOKIE;
    protected static int CERT_FLAGS;
    protected static int CERT_ISSUER;
    protected static int CERT_KEYSIZE;
    protected static int CERT_SECRETKEYSIZE;
    protected static int CERT_SERIALNUMBER;
    protected static int CERT_SERVER_ISSUER;
    protected static int CERT_SERVER_SUBJECT;
    protected static int CERT_SUBJECT;
    protected static int GATEWAY_INTERFACE;
    protected static int HTTPS_KEYSIZE;
    protected static int HTTPS_SECRETKEYSIZE;
    protected static int HTTPS_SERVER_ISSUER;
    protected static int HTTPS_SERVER_SUBJECT;
    protected static int INSTANCE_ID;
    protected static int INSTANCE_META_PATH;
    protected static int LOCAL_ADDR;
    protected static int REMOTE_HOST;
    protected static int REMOTE_PORT;
    protected static int SERVER_PROTOCOL;
    protected static int SERVER_SOFTWARE;
    protected String[] _basicServerVars;
    protected String[] _additionalServerVars;
    internal ChannelBinding HttpChannelBindingToken { get; }
    internal ISAPIWorkerRequestInProc(IntPtr ecb);
    internal virtual int GetBasicsCore(Byte[] buffer, int size, Int32[] contentInfo);
    internal virtual int GetQueryStringCore(int encode, StringBuilder buffer, int size);
    internal virtual int GetQueryStringRawBytesCore(Byte[] buffer, int size);
    internal virtual int GetPreloadedPostedContentCore(Byte[] bytes, int offset, int numBytesToRead);
    internal virtual int GetAdditionalPostedContentCore(Byte[] bytes, int offset, int bufferSize);
    internal virtual int GetClientCertificateCore(Byte[] buffer, Int32[] pInts, Int64[] pDates);
    internal virtual int IsClientConnectedCore();
    internal virtual void FlushCore(Byte[] status, Byte[] header, int keepConnected, int totalBodySize, int numBodyFragments, IntPtr[] bodyFragments, Int32[] bodyFragmentLengths, int doneWithSession, int finalStatus, Boolean& async);
    internal virtual int CloseConnectionCore();
    internal virtual int MapUrlToPathCore(string url, Byte[] buffer, int size);
    internal virtual IntPtr GetUserTokenCore();
    internal virtual IntPtr GetVirtualPathTokenCore();
    internal virtual int AppendLogParameterCore(string logParam);
    protected virtual string GetServerVariableCore(string name);
    protected virtual void GetAdditionalServerVariables();
    public virtual string GetServerVariable(string name);
    internal virtual int CallISAPI(CallISAPIFunc iFunction, Byte[] bufIn, Byte[] bufOut);
    internal virtual void Close();
    internal ChannelBinding get_HttpChannelBindingToken();
}
internal class System.Web.Hosting.ISAPIWorkerRequestInProcForIIS6 : ISAPIWorkerRequestInProc {
    protected bool _trySkipIisCustomErrors;
    internal bool SupportsLongTransmitFile { get; }
    public bool SupportsAsyncFlush { get; }
    public bool SupportsAsyncRead { get; }
    internal bool SupportsExecuteUrl { get; }
    internal ISAPIWorkerRequestInProcForIIS6(IntPtr ecb);
    internal static void WaitForPendingAsyncIo();
    internal virtual void SendEmptyResponse();
    public virtual string GetRawUrl();
    internal virtual void ReadRequestBasics();
    protected virtual void GetAdditionalServerVariables();
    protected virtual string GetServerVariableCore(string name);
    internal virtual MemoryBytes PackageFile(string filename, long offset, long size, bool isImpersonating);
    internal virtual bool get_SupportsLongTransmitFile();
    internal virtual void FlushCore(Byte[] status, Byte[] header, int keepConnected, int totalBodySize, int numBodyFragments, IntPtr[] bodyFragments, Int32[] bodyFragmentLengths, int doneWithSession, int finalStatus, Boolean& async);
    internal virtual string SetupKernelCaching(int secondsToLive, string originalCacheUrl, bool enableKernelCacheForVaryByStar);
    internal virtual void DisableKernelCache();
    public virtual bool get_SupportsAsyncFlush();
    public virtual IAsyncResult BeginFlush(AsyncCallback callback, object state);
    public virtual void EndFlush(IAsyncResult asyncResult);
    public virtual bool get_SupportsAsyncRead();
    internal void OnAsyncCompletion(int bytesCompleted, int hresult, IntPtr pAsyncCompletionContext);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    internal virtual bool get_SupportsExecuteUrl();
    internal virtual IAsyncResult BeginExecuteUrl(string url, string method, string childHeaders, bool sendHeaders, bool addUserIndo, IntPtr token, string name, string authType, Byte[] entity, AsyncCallback cb, object state);
    internal virtual void EndExecuteUrl(IAsyncResult result);
}
internal class System.Web.Hosting.ISAPIWorkerRequestInProcForIIS7 : ISAPIWorkerRequestInProcForIIS6 {
    internal bool TrySkipIisCustomErrors { get; internal set; }
    internal ISAPIWorkerRequestInProcForIIS7(IntPtr ecb);
    internal virtual bool get_TrySkipIisCustomErrors();
    internal virtual void set_TrySkipIisCustomErrors(bool value);
    internal virtual void RaiseTraceEvent(IntegratedTraceType traceType, string eventData);
    internal virtual void RaiseTraceEvent(WebBaseEvent webEvent);
}
internal class System.Web.Hosting.ISAPIWorkerRequestOutOfProc : ISAPIWorkerRequest {
    internal ISAPIWorkerRequestOutOfProc(IntPtr ecb);
    private static ISAPIWorkerRequestOutOfProc();
    internal virtual int GetBasicsCore(Byte[] buffer, int size, Int32[] contentInfo);
    internal virtual int GetQueryStringCore(int encode, StringBuilder buffer, int size);
    internal virtual int GetQueryStringRawBytesCore(Byte[] buffer, int size);
    internal virtual int GetPreloadedPostedContentCore(Byte[] bytes, int offset, int numBytesToRead);
    internal virtual int GetAdditionalPostedContentCore(Byte[] bytes, int offset, int bufferSize);
    internal virtual int IsClientConnectedCore();
    internal virtual MemoryBytes PackageFile(string filename, long offset64, long length64, bool isImpersonating);
    internal virtual void FlushCore(Byte[] status, Byte[] header, int keepConnected, int totalBodySize, int numBodyFragments, IntPtr[] bodyFragments, Int32[] bodyFragmentLengths, int doneWithSession, int finalStatus, Boolean& async);
    internal virtual int CloseConnectionCore();
    internal virtual int MapUrlToPathCore(string url, Byte[] buffer, int size);
    internal virtual IntPtr GetUserTokenCore();
    internal virtual IntPtr GetVirtualPathTokenCore();
    internal virtual int AppendLogParameterCore(string logParam);
    internal virtual int GetClientCertificateCore(Byte[] buffer, Int32[] pInts, Int64[] pDates);
    public virtual string GetServerVariable(string name);
    internal virtual int CallISAPI(CallISAPIFunc iFunction, Byte[] bufIn, Byte[] bufOut);
    internal virtual void SendEmptyResponse();
    internal virtual DateTime GetStartTime();
    internal virtual void ResetStartTime();
}
public interface System.Web.Hosting.IStopListeningRegisteredObject {
    public abstract virtual void StopListening();
}
public interface System.Web.Hosting.ISuspendibleRegisteredObject {
    public abstract virtual Action Suspend();
}
internal class System.Web.Hosting.ListenerAdapterDispatchShim : MarshalByRefObject {
    private sealed virtual override void System.Web.Hosting.IRegisteredObject.Stop(bool immediate);
    internal void StartListenerChannel(AppDomainProtocolHandler handler, IListenerChannelCallback listenerCallback);
    internal IListenerChannelCallback MarshalComProxy(IListenerChannelCallback defaultDomainCallback);
}
internal class System.Web.Hosting.LockableAppDomainContext : object {
    internal HostingEnvironment HostEnv { get; internal set; }
    internal string PreloadContext { get; internal set; }
    internal bool RetryingPreload { get; internal set; }
    [CompilerGeneratedAttribute]
internal HostingEnvironment get_HostEnv();
    [CompilerGeneratedAttribute]
internal void set_HostEnv(HostingEnvironment value);
    [CompilerGeneratedAttribute]
internal string get_PreloadContext();
    [CompilerGeneratedAttribute]
internal void set_PreloadContext(string value);
    [CompilerGeneratedAttribute]
internal bool get_RetryingPreload();
    [CompilerGeneratedAttribute]
internal void set_RetryingPreload(bool value);
}
internal class System.Web.Hosting.MapPathBasedVirtualDirectory : VirtualDirectory {
    public IEnumerable Directories { get; }
    public IEnumerable Files { get; }
    public IEnumerable Children { get; }
    public MapPathBasedVirtualDirectory(string virtualPath);
    public virtual IEnumerable get_Directories();
    public virtual IEnumerable get_Files();
    public virtual IEnumerable get_Children();
}
internal class System.Web.Hosting.MapPathBasedVirtualFile : VirtualFile {
    public string Name { get; }
    internal string PhysicalPath { get; }
    internal MapPathBasedVirtualFile(string virtualPath);
    internal MapPathBasedVirtualFile(string virtualPath, string physicalPath, FindFileData ffd);
    public virtual string get_Name();
    public virtual Stream Open();
    internal string get_PhysicalPath();
}
internal class System.Web.Hosting.MapPathBasedVirtualPathCollection : MarshalByRefObject {
    internal MapPathBasedVirtualPathCollection(VirtualPath virtualPath, RequestedEntryType requestedEntryType);
    public virtual object InitializeLifetimeService();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.Web.Hosting.MapPathBasedVirtualPathEnumerator : MarshalByRefObject {
    internal VirtualFileBase Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal MapPathBasedVirtualPathEnumerator(VirtualPath virtualPath, RequestedEntryType requestedEntryType);
    public virtual object InitializeLifetimeService();
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    internal VirtualFileBase get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
}
internal class System.Web.Hosting.MapPathBasedVirtualPathProvider : VirtualPathProvider {
    public virtual string GetFileHash(string virtualPath, IEnumerable virtualPathDependencies);
    public virtual CacheDependency GetCacheDependency(string virtualPath, IEnumerable virtualPathDependencies, DateTime utcStart);
    public virtual bool FileExists(string virtualPath);
    public virtual bool DirectoryExists(string virtualDir);
    public virtual VirtualFile GetFile(string virtualPath);
    public virtual VirtualDirectory GetDirectory(string virtualDir);
}
internal class System.Web.Hosting.MemoryBytes : object {
    internal long FileSize { get; }
    internal bool IsBufferFromUnmanagedPool { get; }
    internal BufferType BufferType { get; }
    internal int Size { get; }
    internal bool UseTransmitFile { get; }
    internal MemoryBytes(string fileName, long offset, long fileSize);
    internal MemoryBytes(Byte[] data, int size);
    internal MemoryBytes(Byte[] data, int size, bool useTransmitFile, long fileSize);
    internal MemoryBytes(IntPtr data, int size, BufferType bufferType);
    internal long get_FileSize();
    internal bool get_IsBufferFromUnmanagedPool();
    internal BufferType get_BufferType();
    internal int get_Size();
    internal bool get_UseTransmitFile();
    internal IntPtr LockMemory();
    internal void UnlockMemory();
}
internal class System.Web.Hosting.ObjectCacheHost : object {
    private sealed virtual override object System.IServiceProvider.GetService(Type service);
    private sealed virtual override string System.Runtime.Caching.Hosting.IApplicationIdentifier.GetApplicationId();
    private sealed virtual override void System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring(string filePath, OnChangedCallback onChangedCallback, Object& state, DateTimeOffset& lastWrite, Int64& fileSize);
    private sealed virtual override void System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring(string filePath, object state);
    private sealed virtual override void System.Runtime.Caching.Hosting.IMemoryCacheManager.ReleaseCache(MemoryCache memoryCache);
    private sealed virtual override void System.Runtime.Caching.Hosting.IMemoryCacheManager.UpdateCacheSize(long size, MemoryCache memoryCache);
    internal long TrimCache(int percent);
}
internal class System.Web.Hosting.PipelineRuntime : MarshalByRefObject {
    internal static string InitExceptionModuleName;
    internal bool HostingShutdownInitiated { get; }
    private static PipelineRuntime();
    public sealed virtual IntPtr GetAsyncCompletionDelegate();
    public sealed virtual IntPtr GetAsyncDisconnectNotificationDelegate();
    public sealed virtual IntPtr GetExecuteDelegate();
    public sealed virtual IntPtr GetDisposeDelegate();
    public sealed virtual IntPtr GetRoleDelegate();
    public sealed virtual IntPtr GetPrincipalDelegate();
    public virtual object InitializeLifetimeService();
    public sealed virtual void StartProcessing();
    public sealed virtual void StopProcessing();
    internal static void WaitForRequestsToDrain();
    public sealed virtual void InitializeApplication(IntPtr appContext);
    internal bool get_HostingShutdownInitiated();
    internal static void AsyncCompletionHandler(IntPtr rootedObjectsPointer, int bytesCompleted, int hresult, IntPtr pAsyncCompletionContext);
    internal static void AsyncDisconnectNotificationHandler(IntPtr pManagedRootedObjects);
    internal static int RoleHandler(IntPtr pRootedObjects, IntPtr pszRole, int cchRole, Boolean& isInRole);
    internal static IntPtr GetManagedPrincipalHandler(IntPtr pRootedObjects, int requestingAppDomainId);
    internal static void DisposeHandler(IntPtr rootedObjectsPointer);
    internal static void DisposeHandler(HttpContext context, IntPtr nativeRequestContext, RequestNotificationStatus status);
    internal static int ProcessRequestNotification(IntPtr rootedObjectsPointer, IntPtr nativeRequestContext, IntPtr moduleData, int flags);
    internal static int ProcessRequestNotificationHelper(IntPtr rootedObjectsPointer, IntPtr nativeRequestContext, IntPtr moduleData, int flags);
    private sealed virtual override void System.Web.Hosting.IRegisteredObject.Stop(bool immediate);
    internal void SetThisAppDomainsIsapiAppId(string appId);
    internal static void RemoveThisAppDomainFromUnmanagedTable();
    internal static bool ShouldRethrowException(Exception ex);
}
internal class System.Web.Hosting.PreloadHost : MarshalByRefObject {
    internal Exception InitializationException { get; }
    public void CreateIProcessHostPreloadClientInstanceAndCallPreload(string preloadObjTypeName, String[] paramsForStartupObj);
    internal Exception get_InitializationException();
    private sealed virtual override void System.Web.Hosting.IRegisteredObject.Stop(bool immediate);
    public virtual object InitializeLifetimeService();
}
internal class System.Web.Hosting.PrincipalFunctionDelegate : MulticastDelegate {
    public PrincipalFunctionDelegate(object object, IntPtr method);
    public virtual IntPtr Invoke(IntPtr rootedObjectsPointer, int requestingAppDomainId);
    public virtual IAsyncResult BeginInvoke(IntPtr rootedObjectsPointer, int requestingAppDomainId, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(IAsyncResult result);
}
public class System.Web.Hosting.ProcessHost : MarshalByRefObject {
    internal static ProcessHost DefaultHost { get; }
    internal IProcessHostSupportFunctions SupportFunctions { get; }
    private static ProcessHost();
    public virtual object InitializeLifetimeService();
    internal static ProcessHost GetProcessHost(IProcessHostSupportFunctions functions);
    internal static ProcessHost get_DefaultHost();
    internal IProcessHostSupportFunctions get_SupportFunctions();
    public sealed virtual void StartProcessProtocolListenerChannel(string protocolId, IListenerChannelCallback listenerChannelCallback);
    public sealed virtual void StopProcessProtocolListenerChannel(string protocolId, int listenerChannelId, bool immediate);
    public sealed virtual void StopProcessProtocol(string protocolId, bool immediate);
    public sealed virtual void StartAppDomainProtocolListenerChannel(string appId, string protocolId, IListenerChannelCallback listenerChannelCallback);
    public sealed virtual void StopAppDomainProtocolListenerChannel(string appId, string protocolId, int listenerChannelId, bool immediate);
    public sealed virtual void StopAppDomainProtocol(string appId, string protocolId, bool immediate);
    public sealed virtual void StartApplication(string appId, string appPath, Object& runtimeInterface);
    public sealed virtual void ShutdownApplication(string appId);
    public sealed virtual void Shutdown();
    private sealed virtual override IProcessResumeCallback System.Web.Hosting.IProcessSuspendListener.Suspend();
    private sealed virtual override ICustomRuntimeRegistrationToken System.Web.Hosting.ICustomRuntimeManager.Register(ICustomRuntime customRuntime);
    public sealed virtual void EnumerateAppDomains(IAppDomainInfoEnum& appDomainInfoEnum);
    public sealed virtual bool IsIdle();
    public sealed virtual void Ping(IProcessPingCallback callback);
    public sealed virtual void SetApplicationPreloadUtil(IApplicationPreloadUtil applicationPreloadUtil);
    public sealed virtual void SetApplicationPreloadState(string context, string appId, bool enabled);
    internal static void PreloadApplicationIfNotShuttingdown(string appId, LockableAppDomainContext ac);
    internal void PreloadApplicationIfRequired(string appId, IApplicationHost appHostParameter, HostingEnvironmentParameters hostingParameters, LockableAppDomainContext ac);
    internal static ExceptionDispatchInfo GetExistingCustomLoaderFailureAndClear(string appId);
    private sealed virtual override IObjectHandle System.Web.Hosting.IProcessHostLite.GetCustomLoader(string appId, string appConfigPath, IProcessHostSupportFunctions& supportFunctions, AppDomain& newlyCreatedAppDomain);
    private sealed virtual override void System.Web.Hosting.IProcessHostLite.ReportCustomLoaderError(string appId, int hr, AppDomain newlyCreatedAppDomain);
    private sealed virtual override string System.Web.Hosting.IProcessHostLite.GetFullExceptionMessage(int hr, IntPtr pErrorInfo);
}
public class System.Web.Hosting.ProcessHostFactoryHelper : MarshalByRefObject {
    public virtual object InitializeLifetimeService();
    public sealed virtual object GetProcessHost(IProcessHostSupportFunctions functions);
}
[ExtensionAttribute]
internal static class System.Web.Hosting.ProcessHostSupportFunctionsExtensions : object {
    [ExtensionAttribute]
public static string MapPathInternal(IProcessHostSupportFunctions supportFunctions, string appId, string appVirtualPath, string relativePath);
}
public abstract class System.Web.Hosting.ProcessProtocolHandler : MarshalByRefObject {
    public virtual object InitializeLifetimeService();
    public abstract virtual void StartListenerChannel(IListenerChannelCallback listenerChannelCallback, IAdphManager AdphManager);
    public abstract virtual void StopListenerChannel(int listenerChannelId, bool immediate);
    public abstract virtual void StopProtocol(bool immediate);
}
internal class System.Web.Hosting.ReadAsyncResult : AsyncResultBase {
    internal int BytesRead { get; internal set; }
    internal ReadAsyncResult(AsyncCallback cb, object state, Byte[] buffer, int offset, int count, bool updatePerfCounter);
    internal virtual void Complete(int bytesRead, int hresult, IntPtr pbAsyncReceiveBuffer, bool synchronous);
    internal int get_BytesRead();
    internal void set_BytesRead(int value);
}
internal class System.Web.Hosting.RecyclableArrayHelper : object {
    private static RecyclableArrayHelper();
    internal static Int32[] GetIntegerArray(int minimumLength);
    internal static IntPtr[] GetIntPtrArray(int minimumLength);
    internal static void ReuseIntegerArray(Int32[] array);
    internal static void ReuseIntPtrArray(IntPtr[] array);
}
internal class System.Web.Hosting.RecyclableByteBuffer : object {
    internal Byte[] Buffer { get; }
    private static RecyclableByteBuffer();
    internal void Dispose();
    internal Byte[] get_Buffer();
    internal void Resize(int newSize);
    internal string GetDecodedString(Encoding encoding, int len);
    internal String[] GetDecodedTabSeparatedStrings(Encoding encoding, int numStrings, int numSkipStrings);
}
internal class System.Web.Hosting.RecyclableCharBuffer : object {
    private static RecyclableCharBuffer();
    internal void Dispose();
    internal void Append(char ch);
    internal void Append(string s);
    internal Byte[] GetEncodedBytesBuffer();
    internal Byte[] GetEncodedBytesBuffer(Encoding encoding);
    public virtual string ToString();
}
internal enum System.Web.Hosting.RequestedEntryType : Enum {
    public int value__;
    public static RequestedEntryType Files;
    public static RequestedEntryType Directories;
    public static RequestedEntryType All;
}
internal class System.Web.Hosting.RoleFunctionDelegate : MulticastDelegate {
    public RoleFunctionDelegate(object object, IntPtr method);
    public virtual int Invoke(IntPtr pRootedObjects, IntPtr pszRole, int cchRole, Boolean& isInRole);
    public virtual IAsyncResult BeginInvoke(IntPtr pRootedObjects, IntPtr pszRole, int cchRole, Boolean& isInRole, AsyncCallback callback, object object);
    public virtual int EndInvoke(Boolean& isInRole, IAsyncResult result);
}
internal class System.Web.Hosting.ServerVarCharBuffer : object {
    internal IntPtr PinnedAddress { get; }
    internal int Length { get; }
    private static ServerVarCharBuffer();
    internal void Dispose();
    internal IntPtr get_PinnedAddress();
    internal int get_Length();
    internal void Resize(int newSize);
}
internal class System.Web.Hosting.SimpleApplicationHost : MarshalByRefObject {
    internal SimpleApplicationHost(VirtualPath virtualPath, string physicalPath);
    public virtual object InitializeLifetimeService();
    public sealed virtual string GetVirtualPath();
    private sealed virtual override string System.Web.Hosting.IApplicationHost.GetPhysicalPath();
    private sealed virtual override IConfigMapPathFactory System.Web.Hosting.IApplicationHost.GetConfigMapPathFactory();
    private sealed virtual override IntPtr System.Web.Hosting.IApplicationHost.GetConfigToken();
    private sealed virtual override string System.Web.Hosting.IApplicationHost.GetSiteName();
    private sealed virtual override string System.Web.Hosting.IApplicationHost.GetSiteID();
    public sealed virtual void MessageReceived();
}
internal class System.Web.Hosting.SimpleConfigMapPathFactory : object {
    private sealed virtual override IConfigMapPath System.Web.Configuration.IConfigMapPathFactory.Create(string virtualPath, string physicalPath);
}
[ComVisibleAttribute("False")]
public class System.Web.Hosting.SimpleWorkerRequest : HttpWorkerRequest {
    public string MachineConfigPath { get; }
    public string RootWebConfigPath { get; }
    public string MachineInstallDirectory { get; }
    public SimpleWorkerRequest(string page, string query, TextWriter output);
    public SimpleWorkerRequest(string appVirtualDir, string appPhysicalDir, string page, string query, TextWriter output);
    public virtual string GetUriPath();
    public virtual string GetQueryString();
    public virtual string GetRawUrl();
    public virtual string GetHttpVerbName();
    public virtual string GetHttpVersion();
    public virtual string GetRemoteAddress();
    public virtual int GetRemotePort();
    public virtual string GetLocalAddress();
    public virtual int GetLocalPort();
    public virtual IntPtr GetUserToken();
    public virtual string GetFilePath();
    public virtual string GetFilePathTranslated();
    public virtual string GetPathInfo();
    public virtual string GetAppPath();
    public virtual string GetAppPathTranslated();
    public virtual string GetServerVariable(string name);
    public virtual string MapPath(string path);
    public virtual string get_MachineConfigPath();
    public virtual string get_RootWebConfigPath();
    public virtual string get_MachineInstallDirectory();
    public virtual void SendStatus(int statusCode, string statusDescription);
    public virtual void SendKnownResponseHeader(int index, string value);
    public virtual void SendUnknownResponseHeader(string name, string value);
    public virtual void SendResponseFromMemory(Byte[] data, int length);
    public virtual void SendResponseFromFile(string filename, long offset, long length);
    public virtual void SendResponseFromFile(IntPtr handle, long offset, long length);
    public virtual void FlushResponse(bool finalFlush);
    public virtual void EndOfRequest();
    internal virtual void UpdateInitialCounters();
    internal virtual void UpdateResponseCounters(bool finalFlush, int bytesOut);
    internal virtual void UpdateRequestCounters(int bytesIn);
}
internal class System.Web.Hosting.SuspendManager : object {
    private static SuspendManager();
    public void RegisterObject(ISuspendibleRegisteredObject o);
    public void UnregisterObject(ISuspendibleRegisteredObject o);
    public object Suspend();
    public void Resume(object state);
}
internal class System.Web.Hosting.TlsTokenBindingInfo : object {
    internal TlsTokenBindingInfo(Byte[] providedTokenBindingId, Byte[] referredTokenBindingId);
    public sealed virtual Byte[] GetProvidedTokenBindingId();
    public sealed virtual Byte[] GetReferredTokenBindingId();
}
[ComVisibleAttribute("False")]
[SuppressUnmanagedCodeSecurityAttribute]
internal static class System.Web.Hosting.UnsafeIISMethods : object {
    internal static IntPtr INVALID_HANDLE_VALUE;
    private static UnsafeIISMethods();
    internal static int MgdGetRequestBasics(IntPtr pRequestContext, Int32& pContentType, Int32& pContentTotalLength, IntPtr& pPathTranslated, Int32& pcchPathTranslated, IntPtr& pCacheUrl, Int32& pcchCacheUrl, IntPtr& pHttpMethod, IntPtr& pCookedUrl);
    internal static int MgdGetHeaderChanges(IntPtr pRequestContext, bool fResponse, IntPtr& knownHeaderSnapshot, Int32& unknownHeaderSnapshotCount, IntPtr& unknownHeaderSnapshotNames, IntPtr& unknownHeaderSnapshotValues, IntPtr& diffKnownIndicies, Int32& diffUnknownCount, IntPtr& diffUnknownIndicies);
    internal static int MgdGetServerVarChanges(IntPtr pRequestContext, Int32& count, IntPtr& names, IntPtr& values, Int32& diffCount, IntPtr& diffIndicies);
    internal static int MgdGetServerVariableW(IntPtr pHandler, string pszVarName, IntPtr& ppBuffer, Int32& pcchBufferSize);
    internal static int MgdGetServerVariableA(IntPtr pHandler, string pszVarName, IntPtr& ppBuffer, Int32& pcchBufferSize);
    internal static IntPtr MgdGetStopListeningEventHandle();
    internal static void MgdSetBadRequestStatus(IntPtr pHandler);
    internal static void MgdSetManagedHttpContext(IntPtr pHandler, IntPtr pManagedHttpContext);
    internal static int MgdSetStatusW(IntPtr pRequestContext, int dwStatusCode, int dwSubStatusCode, string pszReason, string pszErrorDescription, bool fTrySkipCustomErrors);
    internal static int MgdSetKnownHeader(IntPtr pRequestContext, bool fRequest, bool fReplace, ushort uHeaderIndex, Byte[] value, ushort valueSize);
    internal static int MgdSetUnknownHeader(IntPtr pRequestContext, bool fRequest, bool fReplace, Byte[] header, Byte[] value, ushort valueSize);
    internal static int MgdFlushCore(IntPtr pRequestContext, bool keepConnected, int numBodyFragments, IntPtr[] bodyFragments, Int32[] bodyFragmentLengths, Int32[] fragmentsNative);
    internal static int MgdSetKernelCachePolicy(IntPtr pHandler, int secondsToLive);
    internal static int MgdFlushKernelCache(string cacheKey);
    internal static void MgdDisableKernelCache(IntPtr pHandler);
    internal static void MgdDisableUserCache(IntPtr pHandler);
    internal static int MgdRegisterEventSubscription(IntPtr pAppContext, string pszModuleName, RequestNotification requestNotifications, RequestNotification postRequestNotifications, string pszModuleType, string pszModulePrecondition, IntPtr moduleSpecificData, bool useHighPriority);
    internal static void MgdIndicateCompletion(IntPtr pHandler, RequestNotificationStatus& notificationStatus);
    internal static int MgdInsertEntityBody(IntPtr pHandler, Byte[] buffer, int offset, int count);
    internal static int MgdPostCompletion(IntPtr pHandler, RequestNotificationStatus notificationStatus);
    internal static int MgdReadEntityBody(IntPtr pHandler, Byte[] pBuffer, int dwOffset, int dwBytesToRead, bool fAsync, Int32& pBytesRead, IntPtr& ppAsyncReceiveBuffer);
    internal static int MgdGetCorrelationIdHeader(IntPtr pHandler, IntPtr& correlationId, UInt16& correlationIdLength, Boolean& base64BinaryFormat);
    internal static int MgdGetUserToken(IntPtr pHandler, IntPtr& pToken);
    internal static int MgdGetVirtualToken(IntPtr pHandler, IntPtr& pToken);
    internal static bool MgdIsClientConnected(IntPtr pHandler);
    internal static bool MgdIsHandlerExecutionDenied(IntPtr pHandler);
    internal static void MgdAbortConnection(IntPtr pHandler);
    internal static void MgdCloseConnection(IntPtr pHandler);
    internal static int MgdGetHandlerTypeString(IntPtr pHandler, IntPtr& ppszTypeString, Int32& pcchTypeString);
    internal static int MgdGetApplicationInfo(IntPtr pHandler, IntPtr& pVirtualPath, Int32& cchVirtualPath, IntPtr& pPhysPath, Int32& cchPhysPath);
    internal static int MgdGetUriPath(IntPtr pHandler, IntPtr& ppPath, Int32& pcchPath, bool fIncludePathInfo, bool fUseParentContext);
    internal static int MgdGetPreloadedContent(IntPtr pHandler, Byte[] pBuffer, int lOffset, int cbLen, Int32& pcbReceived);
    internal static int MgdGetPreloadedSize(IntPtr pHandler, Int32& pcbAvailable);
    internal static int MgdGetPrincipal(IntPtr pHandler, int dwRequestingAppDomainId, IntPtr& pToken, IntPtr& ppAuthType, Int32& pcchAuthType, IntPtr& ppUserName, Int32& pcchUserName, IntPtr& pManagedPrincipal);
    internal static int MgdIsInRole(IntPtr pHandler, string pszRoleName, Boolean& pfIsInRole);
    internal static IntPtr MgdAllocateRequestMemory(IntPtr pHandler, int cbSize);
    internal static int MgdAppDomainShutdown(IntPtr appContext);
    internal static IntPtr MgdGetBufferPool(int cbBufferSize);
    internal static IntPtr MgdGetBuffer(IntPtr pPool);
    internal static IntPtr MgdReturnBuffer(IntPtr pBuffer);
    internal static int MgdGetLocalPort(IntPtr context);
    internal static int MgdGetRemotePort(IntPtr context);
    internal static int MgdGetUserAgent(IntPtr pRequestContext, IntPtr& pBuffer, Int32& cbBufferSize);
    internal static int MgdGetCookieHeader(IntPtr pRequestContext, IntPtr& pBuffer, Int32& cbBufferSize);
    internal static int MgdRewriteUrl(IntPtr pRequestContext, string pszUrl, bool fResetQueryString);
    internal static int MgdGetMaxConcurrentRequestsPerCPU();
    internal static int MgdGetMaxConcurrentThreadsPerCPU();
    internal static int MgdSetMaxConcurrentRequestsPerCPU(int value);
    internal static int MgdSetMaxConcurrentThreadsPerCPU(int value);
    internal static int MgdGetCurrentModuleName(IntPtr pHandler, IntPtr& pBuffer, Int32& cbBufferSize);
    internal static int MgdGetCurrentNotification(IntPtr pRequestContext);
    internal static void MgdDisableNotifications(IntPtr pRequestContext, RequestNotification notifications, RequestNotification postNotifications);
    internal static void MgdSuppressSendResponseNotifications(IntPtr pRequestContext);
    internal static int MgdGetNextNotification(IntPtr pRequestContext, RequestNotificationStatus dwStatus);
    internal static int MgdClearResponse(IntPtr pRequestContext, bool fClearEntity, bool fClearHeaders);
    internal static int MgdCreateNativeConfigSystem(IntPtr& ppConfigSystem);
    internal static int MgdReleaseNativeConfigSystem(IntPtr pConfigSystem);
    internal static int MgdGetRequestTraceGuid(IntPtr pRequestContext, Guid& traceContextId);
    internal static int MgdGetStatusChanges(IntPtr pRequestContext, UInt16& statusCode, UInt16& subStatusCode, IntPtr& pBuffer, UInt16& cbBufferSize);
    internal static int MgdGetResponseChunks(IntPtr pRequestContext, Int32& fragmentCount, IntPtr[] bodyFragments, Int32[] bodyFragmentLengths, Int32[] fragmentChunkType);
    internal static int MgdEtwGetTraceConfig(IntPtr pRequestContext, Boolean& providerEnabled, Int32& flags, Int32& level);
    internal static int MgdEmitSimpleTrace(IntPtr pRequestContext, int type, string eventData);
    internal static int MgdEmitWebEventTrace(IntPtr pRequestContext, int webEventType, int fieldCount, String[] fieldNames, Int32[] fieldTypes, String[] fieldData);
    internal static int MgdSetRequestPrincipal(IntPtr pRequestContext, string userName, string authType, IntPtr token);
    internal static bool MgdCanDisposeManagedContext(IntPtr pRequestContext, RequestNotificationStatus dwStatus);
    internal static bool MgdIsLastNotification(IntPtr pRequestContext, RequestNotificationStatus dwStatus);
    internal static bool MgdIsWithinApp(IntPtr pConfigSystem, string siteName, string appPath, string virtualPath);
    internal static int MgdGetSiteNameFromId(IntPtr pConfigSystem, UInt32 siteId, IntPtr& bstrSiteName, Int32& cchSiteName);
    internal static int MgdGetAppPathForPath(IntPtr pConfigSystem, UInt32 siteId, string virtualPath, IntPtr& bstrPath, Int32& cchPath);
    internal static int MgdGetMemoryLimitKB(Int64& limit);
    internal static int MgdGetMimeMapCollection(IntPtr pConfigSystem, IntPtr appContext, IntPtr& pMimeMapCollection, Int32& count);
    internal static int MgdGetModuleCollection(IntPtr pConfigSystem, IntPtr appContext, IntPtr& pModuleCollection, Int32& count);
    internal static int MgdGetNextMimeMap(IntPtr pMimeMapCollection, UInt32 dwIndex, IntPtr& bstrFileExtension, Int32& cchFileExtension, IntPtr& bstrMimeType, Int32& cchMimeType);
    internal static int MgdGetNextModule(IntPtr pModuleCollection, UInt32& dwIndex, IntPtr& bstrModuleName, Int32& cchModuleName, IntPtr& bstrModuleType, Int32& cchModuleType, IntPtr& bstrModulePrecondition, Int32& cchModulePrecondition);
    internal static int MgdGetVrPathCreds(IntPtr pConfigSystem, string siteName, string virtualPath, IntPtr& bstrUserName, Int32& cchUserName, IntPtr& bstrPassword, Int32& cchPassword);
    internal static int MgdGetAppCollection(IntPtr pConfigSystem, string siteName, string virtualPath, IntPtr& bstrPath, Int32& cchPath, IntPtr& pAppCollection, Int32& count);
    internal static int MgdGetNextVPath(IntPtr pAppCollection, UInt32 dwIndex, IntPtr& bstrPath, Int32& cchPath);
    internal static int MgdInitNativeConfig();
    internal static void MgdTerminateNativeConfig();
    internal static int MgdMapPathDirect(IntPtr pConfigSystem, string siteName, string virtualPath, IntPtr& bstrPhysicalPath, Int32& cchPath);
    internal static int MgdMapHandler(IntPtr pHandler, string method, string virtualPath, IntPtr& ppszTypeString, Int32& pcchTypeString, bool convertNativeStaticFileModule, bool ignoreWildcardMappings);
    internal static int MgdReMapHandler(IntPtr pHandler, string pszVirtualPath, IntPtr& ppszTypeString, Int32& pcchTypeString, Boolean& pfHandlerExists);
    internal static int MgdSetRemapHandler(IntPtr pHandler, string pszName, string ppszType);
    internal static int MgdSetScriptMapForRemapHandler(IntPtr pHandler);
    internal static int MgdSetNativeConfiguration(IntPtr nativeConfig);
    internal static UInt32 MgdResolveSiteName(IntPtr pConfigSystem, string siteName);
    internal static void MgdSetResponseFilter(IntPtr context);
    internal static int MgdGetFileChunkInfo(IntPtr context, int chunkOffset, Int64& offset, Int64& length);
    internal static int MgdReadChunkHandle(IntPtr context, IntPtr FileHandle, long startOffset, Int32& length, IntPtr chunkEntity);
    internal static int MgdExplicitFlush(IntPtr context, bool async, Boolean& completedSynchronously);
    internal static int MgdSetServerVariableW(IntPtr context, string variableName, string variableValue);
    internal static int MgdExecuteUrl(IntPtr context, string url, bool resetQuerystring, bool preserveForm, Byte[] entityBody, UInt32 entityBodySize, string method, int numHeaders, String[] headersNames, String[] headersValues, bool preserveUser);
    internal static int MgdGetClientCertificate(IntPtr pHandler, IntPtr& ppbClientCert, Int32& pcbClientCert, IntPtr& ppbClientCertIssuer, Int32& pcbClientCertIssuer, IntPtr& ppbClientCertPublicKey, Int32& pcbClientCertPublicKey, UInt32& pdwCertEncodingType, Int64& ftNotBefore, Int64& ftNotAfter);
    internal static int MgdGetChannelBindingToken(IntPtr pHandler, IntPtr& ppbToken, Int32& pcbTokenSize);
    internal static void MgdGetCurrentNotificationInfo(IntPtr pHandler, Int32& currentModuleIndex, Boolean& isPostNotification, Int32& currentNotification);
    internal static int MgdAcceptWebSocket(IntPtr pHandler);
    internal static int MgdGetWebSocketContext(IntPtr pHandler, IntPtr& ppWebSocketContext);
    internal static int MgdGetAnonymousUserToken(IntPtr pHandler, IntPtr& pToken);
    internal static void MgdGetIISVersionInformation(UInt32& pdwVersion, Boolean& pfIsIntegratedMode);
    internal static int MgdConfigureAsyncDisconnectNotification(IntPtr pHandler, bool fEnable, Boolean& pfIsClientConnected);
    internal static int MgdGetIsChildContext(IntPtr pHandler, Boolean& pfIsChildContext);
    internal static int MgdGetConfigProperty(string appConfigMetabasePath, string sectionName, string propertyName, Object& value);
    internal static int MgdPushPromise(IntPtr context, string path, string queryString, string method, int numHeaders, String[] headersNames, String[] headersValues);
    internal static bool MgdIsAppPoolShuttingDown();
    internal static int MgdGetTlsTokenBindingIdentifiers(IntPtr pHandler, IntPtr& tokenBindingHandle, IntPtr& providedToken, UInt32& providedTokenSize, IntPtr& referredToken, UInt32& referredTokenSize);
}
public abstract class System.Web.Hosting.VirtualDirectory : VirtualFileBase {
    public bool IsDirectory { get; }
    public IEnumerable Directories { get; }
    public IEnumerable Files { get; }
    public IEnumerable Children { get; }
    protected VirtualDirectory(string virtualPath);
    public virtual bool get_IsDirectory();
    public abstract virtual IEnumerable get_Directories();
    public abstract virtual IEnumerable get_Files();
    public abstract virtual IEnumerable get_Children();
}
public abstract class System.Web.Hosting.VirtualFile : VirtualFileBase {
    public bool IsDirectory { get; }
    protected VirtualFile(string virtualPath);
    public virtual bool get_IsDirectory();
    public abstract virtual Stream Open();
}
public abstract class System.Web.Hosting.VirtualFileBase : MarshalByRefObject {
    internal VirtualPath _virtualPath;
    public string Name { get; }
    public string VirtualPath { get; }
    internal VirtualPath VirtualPathObject { get; }
    public bool IsDirectory { get; }
    public virtual object InitializeLifetimeService();
    public virtual string get_Name();
    public string get_VirtualPath();
    internal VirtualPath get_VirtualPathObject();
    public abstract virtual bool get_IsDirectory();
}
public abstract class System.Web.Hosting.VirtualPathProvider : MarshalByRefObject {
    protected internal VirtualPathProvider Previous { get; }
    public virtual object InitializeLifetimeService();
    internal virtual void Initialize(VirtualPathProvider previous);
    protected virtual void Initialize();
    protected internal VirtualPathProvider get_Previous();
    public virtual string GetFileHash(string virtualPath, IEnumerable virtualPathDependencies);
    internal string GetFileHash(VirtualPath virtualPath, IEnumerable virtualPathDependencies);
    public virtual CacheDependency GetCacheDependency(string virtualPath, IEnumerable virtualPathDependencies, DateTime utcStart);
    internal CacheDependency GetCacheDependency(VirtualPath virtualPath, IEnumerable virtualPathDependencies, DateTime utcStart);
    public virtual bool FileExists(string virtualPath);
    internal bool FileExists(VirtualPath virtualPath);
    public virtual bool DirectoryExists(string virtualDir);
    internal bool DirectoryExists(VirtualPath virtualDir);
    public virtual VirtualFile GetFile(string virtualPath);
    internal VirtualFile GetFile(VirtualPath virtualPath);
    internal VirtualFile GetFileWithCheck(string virtualPath);
    public virtual VirtualDirectory GetDirectory(string virtualDir);
    internal VirtualDirectory GetDirectory(VirtualPath virtualDir);
    internal VirtualDirectory GetDirectoryWithCheck(string virtualPath);
    public virtual string GetCacheKey(string virtualPath);
    internal string GetCacheKey(VirtualPath virtualPath);
    public virtual string CombineVirtualPaths(string basePath, string relativePath);
    internal VirtualPath CombineVirtualPaths(VirtualPath basePath, VirtualPath relativePath);
    public static Stream OpenFile(string virtualPath);
    internal static Stream OpenFile(VirtualPath virtualPath);
    internal static CacheDependency GetCacheDependency(VirtualPath virtualPath);
    internal static VirtualPath CombineVirtualPathsInternal(VirtualPath basePath, VirtualPath relativePath);
    internal static bool DirectoryExistsNoThrow(string virtualDir);
    internal static bool DirectoryExistsNoThrow(VirtualPath virtualDir);
}
public class System.Web.HtmlString : object {
    public HtmlString(string value);
    public sealed virtual string ToHtmlString();
    public virtual string ToString();
}
[ToolboxItemAttribute("False")]
public class System.Web.HttpApplication : object {
    internal static string AutoCulture;
    internal static string MANAGED_PRECONDITION;
    internal static string IMPLICIT_FILTER_MODULE;
    internal static string IMPLICIT_HANDLER;
    internal CountdownTask ApplicationInstanceConsumersCounter;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HttpContext Context { get; }
    protected EventHandlerList Events { get; }
    internal Exception LastError { get; }
    internal Byte[] EntityBuffer { get; }
    internal IAllocatorProvider AllocatorProvider { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HttpRequest Request { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HttpResponse Response { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HttpSessionState Session { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HttpApplicationState Application { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HttpServerUtility Server { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IPrincipal User { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HttpModuleCollection Modules { get; }
    internal EventArgs AppEvent { get; internal set; }
    internal bool IsRequestCompleted { get; }
    private bool System.Web.IRequestCompletedNotifier.IsRequestCompleted { get; }
    internal HttpAsyncResult AsyncResult { get; internal set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ISite Site { get; public set; }
    private bool System.Web.IHttpHandler.IsReusable { get; }
    private HttpContext System.Web.Util.ISyncContext.HttpContext { get; }
    internal string CurrentModuleCollectionKey { get; }
    internal static List`1<ModuleConfigurationInfo> IntegratedModuleList { get; }
    private static HttpApplication();
    public HttpContext get_Context();
    public sealed virtual void add_Disposed(EventHandler value);
    public sealed virtual void remove_Disposed(EventHandler value);
    protected EventHandlerList get_Events();
    internal IExecutionStep CreateImplicitAsyncPreloadExecutionStep();
    internal Exception get_LastError();
    internal Byte[] get_EntityBuffer();
    internal IAllocatorProvider get_AllocatorProvider();
    internal void ClearError();
    public HttpRequest get_Request();
    public HttpResponse get_Response();
    public HttpSessionState get_Session();
    public HttpApplicationState get_Application();
    public HttpServerUtility get_Server();
    public IPrincipal get_User();
    public HttpModuleCollection get_Modules();
    internal EventArgs get_AppEvent();
    internal void set_AppEvent(EventArgs value);
    internal void EnsureReleaseState();
    internal Task EnsureReleaseStateAsync();
    public void CompleteRequest();
    internal bool get_IsRequestCompleted();
    private sealed virtual override bool System.Web.IRequestCompletedNotifier.get_IsRequestCompleted();
    internal void AcquireNotifcationContextLock(Boolean& locked);
    internal void ReleaseNotifcationContextLock();
    internal void RaiseOnPreSendRequestHeaders();
    internal void RaiseOnPreSendRequestContent();
    internal HttpAsyncResult get_AsyncResult();
    internal void set_AsyncResult(HttpAsyncResult value);
    internal void AddSyncEventHookup(object key, Delegate handler, RequestNotification notification);
    internal void RemoveSyncEventHookup(object key, Delegate handler, RequestNotification notification);
    internal void RemoveSyncEventHookup(object key, Delegate handler, RequestNotification notification, bool isPostNotification);
    public void add_BeginRequest(EventHandler value);
    public void remove_BeginRequest(EventHandler value);
    public void add_AuthenticateRequest(EventHandler value);
    public void remove_AuthenticateRequest(EventHandler value);
    internal void add_DefaultAuthentication(EventHandler value);
    internal void remove_DefaultAuthentication(EventHandler value);
    public void add_PostAuthenticateRequest(EventHandler value);
    public void remove_PostAuthenticateRequest(EventHandler value);
    public void add_AuthorizeRequest(EventHandler value);
    public void remove_AuthorizeRequest(EventHandler value);
    public void add_PostAuthorizeRequest(EventHandler value);
    public void remove_PostAuthorizeRequest(EventHandler value);
    public void add_ResolveRequestCache(EventHandler value);
    public void remove_ResolveRequestCache(EventHandler value);
    public void add_PostResolveRequestCache(EventHandler value);
    public void remove_PostResolveRequestCache(EventHandler value);
    public void add_MapRequestHandler(EventHandler value);
    public void remove_MapRequestHandler(EventHandler value);
    public void add_PostMapRequestHandler(EventHandler value);
    public void remove_PostMapRequestHandler(EventHandler value);
    public void add_AcquireRequestState(EventHandler value);
    public void remove_AcquireRequestState(EventHandler value);
    public void add_PostAcquireRequestState(EventHandler value);
    public void remove_PostAcquireRequestState(EventHandler value);
    public void add_PreRequestHandlerExecute(EventHandler value);
    public void remove_PreRequestHandlerExecute(EventHandler value);
    public void add_PostRequestHandlerExecute(EventHandler value);
    public void remove_PostRequestHandlerExecute(EventHandler value);
    public void add_ReleaseRequestState(EventHandler value);
    public void remove_ReleaseRequestState(EventHandler value);
    public void add_PostReleaseRequestState(EventHandler value);
    public void remove_PostReleaseRequestState(EventHandler value);
    public void add_UpdateRequestCache(EventHandler value);
    public void remove_UpdateRequestCache(EventHandler value);
    public void add_PostUpdateRequestCache(EventHandler value);
    public void remove_PostUpdateRequestCache(EventHandler value);
    public void add_LogRequest(EventHandler value);
    public void remove_LogRequest(EventHandler value);
    public void add_PostLogRequest(EventHandler value);
    public void remove_PostLogRequest(EventHandler value);
    public void add_EndRequest(EventHandler value);
    public void remove_EndRequest(EventHandler value);
    public void add_Error(EventHandler value);
    public void remove_Error(EventHandler value);
    public void add_RequestCompleted(EventHandler value);
    public void remove_RequestCompleted(EventHandler value);
    public void add_PreSendRequestHeaders(EventHandler value);
    public void remove_PreSendRequestHeaders(EventHandler value);
    public void add_PreSendRequestContent(EventHandler value);
    public void remove_PreSendRequestContent(EventHandler value);
    public void AddOnBeginRequestAsync(BeginEventHandler bh, EndEventHandler eh);
    public void AddOnBeginRequestAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public void AddOnAuthenticateRequestAsync(BeginEventHandler bh, EndEventHandler eh);
    public void AddOnAuthenticateRequestAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public void AddOnPostAuthenticateRequestAsync(BeginEventHandler bh, EndEventHandler eh);
    public void AddOnPostAuthenticateRequestAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public void AddOnAuthorizeRequestAsync(BeginEventHandler bh, EndEventHandler eh);
    public void AddOnAuthorizeRequestAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public void AddOnPostAuthorizeRequestAsync(BeginEventHandler bh, EndEventHandler eh);
    public void AddOnPostAuthorizeRequestAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public void AddOnResolveRequestCacheAsync(BeginEventHandler bh, EndEventHandler eh);
    public void AddOnResolveRequestCacheAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public void AddOnPostResolveRequestCacheAsync(BeginEventHandler bh, EndEventHandler eh);
    public void AddOnPostResolveRequestCacheAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public void AddOnMapRequestHandlerAsync(BeginEventHandler bh, EndEventHandler eh);
    public void AddOnMapRequestHandlerAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public void AddOnPostMapRequestHandlerAsync(BeginEventHandler bh, EndEventHandler eh);
    public void AddOnPostMapRequestHandlerAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public void AddOnAcquireRequestStateAsync(BeginEventHandler bh, EndEventHandler eh);
    public void AddOnAcquireRequestStateAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public void AddOnPostAcquireRequestStateAsync(BeginEventHandler bh, EndEventHandler eh);
    public void AddOnPostAcquireRequestStateAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public void AddOnPreRequestHandlerExecuteAsync(BeginEventHandler bh, EndEventHandler eh);
    public void AddOnPreRequestHandlerExecuteAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public void AddOnPostRequestHandlerExecuteAsync(BeginEventHandler bh, EndEventHandler eh);
    public void AddOnPostRequestHandlerExecuteAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public void AddOnReleaseRequestStateAsync(BeginEventHandler bh, EndEventHandler eh);
    public void AddOnReleaseRequestStateAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public void AddOnPostReleaseRequestStateAsync(BeginEventHandler bh, EndEventHandler eh);
    public void AddOnPostReleaseRequestStateAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public void AddOnUpdateRequestCacheAsync(BeginEventHandler bh, EndEventHandler eh);
    public void AddOnUpdateRequestCacheAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public void AddOnPostUpdateRequestCacheAsync(BeginEventHandler bh, EndEventHandler eh);
    public void AddOnPostUpdateRequestCacheAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public void AddOnLogRequestAsync(BeginEventHandler bh, EndEventHandler eh);
    public void AddOnLogRequestAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public void AddOnPostLogRequestAsync(BeginEventHandler bh, EndEventHandler eh);
    public void AddOnPostLogRequestAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public void AddOnEndRequestAsync(BeginEventHandler bh, EndEventHandler eh);
    public void AddOnEndRequestAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public virtual void Init();
    public virtual void Dispose();
    internal static void SetCurrentPrincipalWithAssert(IPrincipal user);
    internal static WindowsIdentity GetCurrentWindowsIdentityWithAssert();
    internal IHttpHandler MapIntegratedHttpHandler(HttpContext context, string requestType, VirtualPath path, string pathTranslated, bool useAppConfig, bool convertNativeStaticFileModule);
    internal IHttpHandler MapHttpHandler(HttpContext context, string requestType, VirtualPath path, string pathTranslated, bool useAppConfig);
    public virtual string GetVaryByCustomString(HttpContext context, string custom);
    public virtual string GetOutputCacheProviderName(HttpContext context);
    public sealed virtual ISite get_Site();
    public sealed virtual void set_Site(ISite value);
    private sealed virtual override IAsyncResult System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext context, AsyncCallback cb, object extraData);
    private sealed virtual override void System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult result);
    private sealed virtual override void System.Web.IHttpHandler.ProcessRequest(HttpContext context);
    private sealed virtual override bool System.Web.IHttpHandler.get_IsReusable();
    internal void ProcessSpecialRequest(HttpContext context, MethodInfo method, int paramCount, object eventSource, EventArgs eventArgs, HttpSessionState session);
    internal void RaiseErrorWithoutContext(Exception error);
    internal void InitInternal(HttpContext context, HttpApplicationState state, MethodInfo[] handlers);
    internal void InitSpecial(HttpApplicationState state, MethodInfo[] handlers, IntPtr appContext, HttpContext context);
    internal void DisposeInternal();
    private sealed virtual override HttpContext System.Web.Util.ISyncContext.get_HttpContext();
    private sealed virtual override ISyncContextLock System.Web.Util.ISyncContext.Enter();
    internal ThreadContext OnThreadEnter();
    internal ThreadContext OnThreadEnter(bool setImpersonationContext);
    internal Exception ExecuteStep(IExecutionStep step, Boolean& completedSynchronously);
    internal string get_CurrentModuleCollectionKey();
    internal static void RegisterModuleInternal(Type moduleType);
    public static void RegisterModule(Type moduleType);
    internal static string GetFallbackCulture(string culture);
    internal void AssignContext(HttpContext context);
    internal IAsyncResult BeginProcessRequestNotification(HttpContext context, AsyncCallback cb);
    internal RequestNotificationStatus EndProcessRequestNotification(IAsyncResult result);
    internal void ReleaseAppInstance();
    internal static List`1<ModuleConfigurationInfo> get_IntegratedModuleList();
}
internal class System.Web.HttpApplicationFactory : object {
    internal static string applicationFileName;
    internal static HttpApplicationState ApplicationState { get; }
    private static HttpApplicationFactory();
    internal static void ThrowIfApplicationOnStartCalled();
    internal static void SetupFileChangeNotifications();
    internal static void EnsureAppStartCalledForIntegratedMode(HttpContext context, HttpApplication app);
    internal static string GetApplicationFile();
    internal static HttpApplication GetPipelineApplicationInstance(IntPtr appContext, HttpContext context);
    internal static void RecyclePipelineApplicationInstance(HttpApplication app);
    internal static void SetCustomApplication(IHttpHandler customApplication);
    internal static IHttpHandler GetApplicationInstance(HttpContext context);
    internal static void RecycleApplicationInstance(HttpApplication app);
    internal static void TrimApplicationInstances(bool removeAll);
    internal static void EndApplication();
    internal static void EndSession(HttpSessionState session, object eventSource, EventArgs eventArgs);
    internal static void RaiseError(Exception error);
    internal static HttpApplicationState get_ApplicationState();
}
[DefaultMemberAttribute("Item")]
public class System.Web.HttpApplicationState : NameObjectCollectionBase {
    internal HttpStaticObjectsCollection SessionStaticObjects { get; }
    public int Count { get; }
    public object Item { get; public set; }
    public object Item { get; }
    public String[] AllKeys { get; }
    public HttpApplicationState Contents { get; }
    public HttpStaticObjectsCollection StaticObjects { get; }
    internal HttpApplicationState(HttpStaticObjectsCollection applicationStaticObjects, HttpStaticObjectsCollection sessionStaticObjects);
    internal HttpStaticObjectsCollection get_SessionStaticObjects();
    public virtual int get_Count();
    public void Add(string name, object value);
    public void Set(string name, object value);
    public void Remove(string name);
    public void RemoveAt(int index);
    public void Clear();
    public void RemoveAll();
    public object Get(string name);
    public object get_Item(string name);
    public void set_Item(string name, object value);
    public object Get(int index);
    public string GetKey(int index);
    public object get_Item(int index);
    public String[] get_AllKeys();
    public HttpApplicationState get_Contents();
    public HttpStaticObjectsCollection get_StaticObjects();
    public void Lock();
    public void UnLock();
    internal void EnsureUnLock();
}
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public abstract class System.Web.HttpApplicationStateBase : NameObjectCollectionBase {
    public String[] AllKeys { get; }
    public HttpApplicationStateBase Contents { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public object Item { get; }
    public object Item { get; public set; }
    public HttpStaticObjectsCollectionBase StaticObjects { get; }
    public virtual String[] get_AllKeys();
    public virtual HttpApplicationStateBase get_Contents();
    public virtual int get_Count();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual object get_Item(int index);
    public virtual object get_Item(string name);
    public virtual void set_Item(string name, object value);
    public virtual HttpStaticObjectsCollectionBase get_StaticObjects();
    public virtual void Add(string name, object value);
    public virtual void Clear();
    public virtual void CopyTo(Array array, int index);
    public virtual object Get(int index);
    public virtual object Get(string name);
    public virtual IEnumerator GetEnumerator();
    public virtual string GetKey(int index);
    public virtual void Lock();
    public virtual void Remove(string name);
    public virtual void RemoveAll();
    public virtual void RemoveAt(int index);
    public virtual void Set(string name, object value);
    public virtual void UnLock();
}
internal class System.Web.HttpApplicationStateLock : ReadWriteObjectLock {
    internal virtual void AcquireRead();
    internal virtual void ReleaseRead();
    internal virtual void AcquireWrite();
    internal virtual void ReleaseWrite();
    internal void EnsureReleaseWrite();
}
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.HttpApplicationStateWrapper : HttpApplicationStateBase {
    public String[] AllKeys { get; }
    public HttpApplicationStateBase Contents { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public KeysCollection Keys { get; }
    public object SyncRoot { get; }
    public object Item { get; }
    public object Item { get; public set; }
    public HttpStaticObjectsCollectionBase StaticObjects { get; }
    public HttpApplicationStateWrapper(HttpApplicationState httpApplicationState);
    public virtual String[] get_AllKeys();
    public virtual HttpApplicationStateBase get_Contents();
    public virtual int get_Count();
    public virtual bool get_IsSynchronized();
    public virtual KeysCollection get_Keys();
    public virtual object get_SyncRoot();
    public virtual object get_Item(int index);
    public virtual object get_Item(string name);
    public virtual void set_Item(string name, object value);
    public virtual HttpStaticObjectsCollectionBase get_StaticObjects();
    public virtual void Add(string name, object value);
    public virtual void Clear();
    public virtual void CopyTo(Array array, int index);
    public virtual object Get(int index);
    public virtual object Get(string name);
    public virtual IEnumerator GetEnumerator();
    public virtual string GetKey(int index);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual void Lock();
    public virtual void OnDeserialization(object sender);
    public virtual void Remove(string name);
    public virtual void RemoveAll();
    public virtual void RemoveAt(int index);
    public virtual void Set(string name, object value);
    public virtual void UnLock();
}
internal class System.Web.HttpAsyncResult : object {
    internal Exception Error { get; }
    internal RequestNotificationStatus Status { get; }
    public bool IsCompleted { get; }
    public bool CompletedSynchronously { get; }
    public object AsyncState { get; }
    public WaitHandle AsyncWaitHandle { get; }
    internal HttpAsyncResult(AsyncCallback cb, object state);
    internal HttpAsyncResult(AsyncCallback cb, object state, bool completed, object result, Exception error);
    internal void SetComplete();
    internal void Complete(bool synchronous, object result, Exception error, RequestNotificationStatus status);
    internal void Complete(bool synchronous, object result, Exception error);
    internal object End();
    internal void MarkCallToBeginMethodStarted();
    internal void MarkCallToBeginMethodCompleted();
    internal Exception get_Error();
    internal RequestNotificationStatus get_Status();
    public sealed virtual bool get_IsCompleted();
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual object get_AsyncState();
    public sealed virtual WaitHandle get_AsyncWaitHandle();
}
internal abstract class System.Web.HttpBaseMemoryResponseBufferElement : object {
    protected int _size;
    protected int _free;
    protected bool _recycle;
    internal int FreeBytes { get; }
    internal int get_FreeBytes();
    internal void DisableRecycling();
    internal abstract virtual void Recycle();
    internal abstract virtual HttpResponseBufferElement Clone();
    internal abstract virtual int Append(Byte[] data, int offset, int size);
    internal abstract virtual int Append(IntPtr data, int offset, int size);
    internal abstract virtual void AppendEncodedChars(Char[] data, int offset, int size, Encoder encoder, bool flushEncoder);
}
public class System.Web.HttpBrowserCapabilities : HttpCapabilitiesBase {
}
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public abstract class System.Web.HttpBrowserCapabilitiesBase : object {
    public bool ActiveXControls { get; }
    public IDictionary Adapters { get; }
    public bool AOL { get; }
    public bool BackgroundSounds { get; }
    public bool Beta { get; }
    public string Browser { get; }
    public ArrayList Browsers { get; }
    public bool CanCombineFormsInDeck { get; }
    public bool CanInitiateVoiceCall { get; }
    public bool CanRenderAfterInputOrSelectElement { get; }
    public bool CanRenderEmptySelects { get; }
    public bool CanRenderInputAndSelectElementsTogether { get; }
    public bool CanRenderMixedSelects { get; }
    public bool CanRenderOneventAndPrevElementsTogether { get; }
    public bool CanRenderPostBackCards { get; }
    public bool CanRenderSetvarZeroWithMultiSelectionList { get; }
    public bool CanSendMail { get; }
    public IDictionary Capabilities { get; public set; }
    public bool CDF { get; }
    public Version ClrVersion { get; }
    public bool Cookies { get; }
    public bool Crawler { get; }
    public int DefaultSubmitButtonLimit { get; }
    public Version EcmaScriptVersion { get; }
    public bool Frames { get; }
    public int GatewayMajorVersion { get; }
    public double GatewayMinorVersion { get; }
    public string GatewayVersion { get; }
    public bool HasBackButton { get; }
    public bool HidesRightAlignedMultiselectScrollbars { get; }
    public string HtmlTextWriter { get; public set; }
    public string Id { get; }
    public string InputType { get; }
    public bool IsColor { get; }
    public bool IsMobileDevice { get; }
    public bool JavaApplets { get; }
    public Version JScriptVersion { get; }
    public int MajorVersion { get; }
    public int MaximumHrefLength { get; }
    public int MaximumRenderedPageSize { get; }
    public int MaximumSoftkeyLabelLength { get; }
    public double MinorVersion { get; }
    public string MinorVersionString { get; }
    public string MobileDeviceManufacturer { get; }
    public string MobileDeviceModel { get; }
    public Version MSDomVersion { get; }
    public int NumberOfSoftkeys { get; }
    public string Platform { get; }
    public string PreferredImageMime { get; }
    public string PreferredRenderingMime { get; }
    public string PreferredRenderingType { get; }
    public string PreferredRequestEncoding { get; }
    public string PreferredResponseEncoding { get; }
    public bool RendersBreakBeforeWmlSelectAndInput { get; }
    public bool RendersBreaksAfterHtmlLists { get; }
    public bool RendersBreaksAfterWmlAnchor { get; }
    public bool RendersBreaksAfterWmlInput { get; }
    public bool RendersWmlDoAcceptsInline { get; }
    public bool RendersWmlSelectsAsMenuCards { get; }
    public string RequiredMetaTagNameValue { get; }
    public bool RequiresAttributeColonSubstitution { get; }
    public bool RequiresContentTypeMetaTag { get; }
    public bool RequiresControlStateInSession { get; }
    public bool RequiresDBCSCharacter { get; }
    public bool RequiresHtmlAdaptiveErrorReporting { get; }
    public bool RequiresLeadingPageBreak { get; }
    public bool RequiresNoBreakInFormatting { get; }
    public bool RequiresOutputOptimization { get; }
    public bool RequiresPhoneNumbersAsPlainText { get; }
    public bool RequiresSpecialViewStateEncoding { get; }
    public bool RequiresUniqueFilePathSuffix { get; }
    public bool RequiresUniqueHtmlCheckboxNames { get; }
    public bool RequiresUniqueHtmlInputNames { get; }
    public bool RequiresUrlEncodedPostfieldValues { get; }
    public int ScreenBitDepth { get; }
    public int ScreenCharactersHeight { get; }
    public int ScreenCharactersWidth { get; }
    public int ScreenPixelsHeight { get; }
    public int ScreenPixelsWidth { get; }
    public bool SupportsAccesskeyAttribute { get; }
    public bool SupportsBodyColor { get; }
    public bool SupportsBold { get; }
    public bool SupportsCacheControlMetaTag { get; }
    public bool SupportsCallback { get; }
    public bool SupportsCss { get; }
    public bool SupportsDivAlign { get; }
    public bool SupportsDivNoWrap { get; }
    public bool SupportsEmptyStringInCookieValue { get; }
    public bool SupportsFontColor { get; }
    public bool SupportsFontName { get; }
    public bool SupportsFontSize { get; }
    public bool SupportsImageSubmit { get; }
    public bool SupportsIModeSymbols { get; }
    public bool SupportsInputIStyle { get; }
    public bool SupportsInputMode { get; }
    public bool SupportsItalic { get; }
    public bool SupportsJPhoneMultiMediaAttributes { get; }
    public bool SupportsJPhoneSymbols { get; }
    public bool SupportsQueryStringInFormAction { get; }
    public bool SupportsRedirectWithCookie { get; }
    public bool SupportsSelectMultiple { get; }
    public bool SupportsUncheck { get; }
    public bool SupportsXmlHttp { get; }
    public bool Tables { get; }
    public Type TagWriter { get; }
    public string Type { get; }
    public bool UseOptimizedCacheKey { get; }
    public bool VBScript { get; }
    public string Version { get; }
    public Version W3CDomVersion { get; }
    public bool Win16 { get; }
    public bool Win32 { get; }
    public string Item { get; }
    public virtual bool get_ActiveXControls();
    public virtual IDictionary get_Adapters();
    public virtual bool get_AOL();
    public virtual bool get_BackgroundSounds();
    public virtual bool get_Beta();
    public virtual string get_Browser();
    public virtual ArrayList get_Browsers();
    public virtual bool get_CanCombineFormsInDeck();
    public virtual bool get_CanInitiateVoiceCall();
    public virtual bool get_CanRenderAfterInputOrSelectElement();
    public virtual bool get_CanRenderEmptySelects();
    public virtual bool get_CanRenderInputAndSelectElementsTogether();
    public virtual bool get_CanRenderMixedSelects();
    public virtual bool get_CanRenderOneventAndPrevElementsTogether();
    public virtual bool get_CanRenderPostBackCards();
    public virtual bool get_CanRenderSetvarZeroWithMultiSelectionList();
    public virtual bool get_CanSendMail();
    public virtual IDictionary get_Capabilities();
    public virtual void set_Capabilities(IDictionary value);
    public virtual bool get_CDF();
    public virtual Version get_ClrVersion();
    public virtual bool get_Cookies();
    public virtual bool get_Crawler();
    public virtual int get_DefaultSubmitButtonLimit();
    public virtual Version get_EcmaScriptVersion();
    public virtual bool get_Frames();
    public virtual int get_GatewayMajorVersion();
    public virtual double get_GatewayMinorVersion();
    public virtual string get_GatewayVersion();
    public virtual bool get_HasBackButton();
    public virtual bool get_HidesRightAlignedMultiselectScrollbars();
    public virtual string get_HtmlTextWriter();
    public virtual void set_HtmlTextWriter(string value);
    public virtual string get_Id();
    public virtual string get_InputType();
    public virtual bool get_IsColor();
    public virtual bool get_IsMobileDevice();
    public virtual bool get_JavaApplets();
    public virtual Version get_JScriptVersion();
    public virtual int get_MajorVersion();
    public virtual int get_MaximumHrefLength();
    public virtual int get_MaximumRenderedPageSize();
    public virtual int get_MaximumSoftkeyLabelLength();
    public virtual double get_MinorVersion();
    public virtual string get_MinorVersionString();
    public virtual string get_MobileDeviceManufacturer();
    public virtual string get_MobileDeviceModel();
    public virtual Version get_MSDomVersion();
    public virtual int get_NumberOfSoftkeys();
    public virtual string get_Platform();
    public virtual string get_PreferredImageMime();
    public virtual string get_PreferredRenderingMime();
    public virtual string get_PreferredRenderingType();
    public virtual string get_PreferredRequestEncoding();
    public virtual string get_PreferredResponseEncoding();
    public virtual bool get_RendersBreakBeforeWmlSelectAndInput();
    public virtual bool get_RendersBreaksAfterHtmlLists();
    public virtual bool get_RendersBreaksAfterWmlAnchor();
    public virtual bool get_RendersBreaksAfterWmlInput();
    public virtual bool get_RendersWmlDoAcceptsInline();
    public virtual bool get_RendersWmlSelectsAsMenuCards();
    public virtual string get_RequiredMetaTagNameValue();
    public virtual bool get_RequiresAttributeColonSubstitution();
    public virtual bool get_RequiresContentTypeMetaTag();
    public virtual bool get_RequiresControlStateInSession();
    public virtual bool get_RequiresDBCSCharacter();
    public virtual bool get_RequiresHtmlAdaptiveErrorReporting();
    public virtual bool get_RequiresLeadingPageBreak();
    public virtual bool get_RequiresNoBreakInFormatting();
    public virtual bool get_RequiresOutputOptimization();
    public virtual bool get_RequiresPhoneNumbersAsPlainText();
    public virtual bool get_RequiresSpecialViewStateEncoding();
    public virtual bool get_RequiresUniqueFilePathSuffix();
    public virtual bool get_RequiresUniqueHtmlCheckboxNames();
    public virtual bool get_RequiresUniqueHtmlInputNames();
    public virtual bool get_RequiresUrlEncodedPostfieldValues();
    public virtual int get_ScreenBitDepth();
    public virtual int get_ScreenCharactersHeight();
    public virtual int get_ScreenCharactersWidth();
    public virtual int get_ScreenPixelsHeight();
    public virtual int get_ScreenPixelsWidth();
    public virtual bool get_SupportsAccesskeyAttribute();
    public virtual bool get_SupportsBodyColor();
    public virtual bool get_SupportsBold();
    public virtual bool get_SupportsCacheControlMetaTag();
    public virtual bool get_SupportsCallback();
    public virtual bool get_SupportsCss();
    public virtual bool get_SupportsDivAlign();
    public virtual bool get_SupportsDivNoWrap();
    public virtual bool get_SupportsEmptyStringInCookieValue();
    public virtual bool get_SupportsFontColor();
    public virtual bool get_SupportsFontName();
    public virtual bool get_SupportsFontSize();
    public virtual bool get_SupportsImageSubmit();
    public virtual bool get_SupportsIModeSymbols();
    public virtual bool get_SupportsInputIStyle();
    public virtual bool get_SupportsInputMode();
    public virtual bool get_SupportsItalic();
    public virtual bool get_SupportsJPhoneMultiMediaAttributes();
    public virtual bool get_SupportsJPhoneSymbols();
    public virtual bool get_SupportsQueryStringInFormAction();
    public virtual bool get_SupportsRedirectWithCookie();
    public virtual bool get_SupportsSelectMultiple();
    public virtual bool get_SupportsUncheck();
    public virtual bool get_SupportsXmlHttp();
    public virtual bool get_Tables();
    public virtual Type get_TagWriter();
    public virtual string get_Type();
    public virtual bool get_UseOptimizedCacheKey();
    public virtual bool get_VBScript();
    public virtual string get_Version();
    public virtual Version get_W3CDomVersion();
    public virtual bool get_Win16();
    public virtual bool get_Win32();
    public virtual string get_Item(string key);
    public virtual void AddBrowser(string browserName);
    public virtual HtmlTextWriter CreateHtmlTextWriter(TextWriter w);
    public virtual void DisableOptimizedCacheKey();
    public virtual Version[] GetClrVersions();
    public virtual bool IsBrowser(string browserName);
    public virtual int CompareFilters(string filter1, string filter2);
    public virtual bool EvaluateFilter(string filterName);
}
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.HttpBrowserCapabilitiesWrapper : HttpBrowserCapabilitiesBase {
    public string Browser { get; }
    public Version EcmaScriptVersion { get; }
    public Version JScriptVersion { get; }
    public bool SupportsCallback { get; }
    public Version W3CDomVersion { get; }
    public bool ActiveXControls { get; }
    public IDictionary Adapters { get; }
    public bool AOL { get; }
    public bool BackgroundSounds { get; }
    public bool Beta { get; }
    public ArrayList Browsers { get; }
    public bool CanCombineFormsInDeck { get; }
    public bool CanInitiateVoiceCall { get; }
    public bool CanRenderAfterInputOrSelectElement { get; }
    public bool CanRenderEmptySelects { get; }
    public bool CanRenderInputAndSelectElementsTogether { get; }
    public bool CanRenderMixedSelects { get; }
    public bool CanRenderOneventAndPrevElementsTogether { get; }
    public bool CanRenderPostBackCards { get; }
    public bool CanRenderSetvarZeroWithMultiSelectionList { get; }
    public bool CanSendMail { get; }
    public IDictionary Capabilities { get; public set; }
    public bool CDF { get; }
    public Version ClrVersion { get; }
    public bool Cookies { get; }
    public bool Crawler { get; }
    public int DefaultSubmitButtonLimit { get; }
    public bool Frames { get; }
    public int GatewayMajorVersion { get; }
    public double GatewayMinorVersion { get; }
    public string GatewayVersion { get; }
    public bool HasBackButton { get; }
    public bool HidesRightAlignedMultiselectScrollbars { get; }
    public string HtmlTextWriter { get; public set; }
    public string Id { get; }
    public string InputType { get; }
    public bool IsColor { get; }
    public bool IsMobileDevice { get; }
    public bool JavaApplets { get; }
    public int MajorVersion { get; }
    public int MaximumHrefLength { get; }
    public int MaximumRenderedPageSize { get; }
    public int MaximumSoftkeyLabelLength { get; }
    public double MinorVersion { get; }
    public string MinorVersionString { get; }
    public string MobileDeviceManufacturer { get; }
    public string MobileDeviceModel { get; }
    public Version MSDomVersion { get; }
    public int NumberOfSoftkeys { get; }
    public string Platform { get; }
    public string PreferredImageMime { get; }
    public string PreferredRenderingMime { get; }
    public string PreferredRenderingType { get; }
    public string PreferredRequestEncoding { get; }
    public string PreferredResponseEncoding { get; }
    public bool RendersBreakBeforeWmlSelectAndInput { get; }
    public bool RendersBreaksAfterHtmlLists { get; }
    public bool RendersBreaksAfterWmlAnchor { get; }
    public bool RendersBreaksAfterWmlInput { get; }
    public bool RendersWmlDoAcceptsInline { get; }
    public bool RendersWmlSelectsAsMenuCards { get; }
    public string RequiredMetaTagNameValue { get; }
    public bool RequiresAttributeColonSubstitution { get; }
    public bool RequiresContentTypeMetaTag { get; }
    public bool RequiresControlStateInSession { get; }
    public bool RequiresDBCSCharacter { get; }
    public bool RequiresHtmlAdaptiveErrorReporting { get; }
    public bool RequiresLeadingPageBreak { get; }
    public bool RequiresNoBreakInFormatting { get; }
    public bool RequiresOutputOptimization { get; }
    public bool RequiresPhoneNumbersAsPlainText { get; }
    public bool RequiresSpecialViewStateEncoding { get; }
    public bool RequiresUniqueFilePathSuffix { get; }
    public bool RequiresUniqueHtmlCheckboxNames { get; }
    public bool RequiresUniqueHtmlInputNames { get; }
    public bool RequiresUrlEncodedPostfieldValues { get; }
    public int ScreenBitDepth { get; }
    public int ScreenCharactersHeight { get; }
    public int ScreenCharactersWidth { get; }
    public int ScreenPixelsHeight { get; }
    public int ScreenPixelsWidth { get; }
    public bool SupportsAccesskeyAttribute { get; }
    public bool SupportsBodyColor { get; }
    public bool SupportsBold { get; }
    public bool SupportsCacheControlMetaTag { get; }
    public bool SupportsCss { get; }
    public bool SupportsDivAlign { get; }
    public bool SupportsDivNoWrap { get; }
    public bool SupportsEmptyStringInCookieValue { get; }
    public bool SupportsFontColor { get; }
    public bool SupportsFontName { get; }
    public bool SupportsFontSize { get; }
    public bool SupportsImageSubmit { get; }
    public bool SupportsIModeSymbols { get; }
    public bool SupportsInputIStyle { get; }
    public bool SupportsInputMode { get; }
    public bool SupportsItalic { get; }
    public bool SupportsJPhoneMultiMediaAttributes { get; }
    public bool SupportsJPhoneSymbols { get; }
    public bool SupportsQueryStringInFormAction { get; }
    public bool SupportsRedirectWithCookie { get; }
    public bool SupportsSelectMultiple { get; }
    public bool SupportsUncheck { get; }
    public bool SupportsXmlHttp { get; }
    public bool Tables { get; }
    public Type TagWriter { get; }
    public string Type { get; }
    public bool UseOptimizedCacheKey { get; }
    public bool VBScript { get; }
    public string Version { get; }
    public bool Win16 { get; }
    public bool Win32 { get; }
    public string Item { get; }
    public HttpBrowserCapabilitiesWrapper(HttpBrowserCapabilities httpBrowserCapabilities);
    public virtual string get_Browser();
    public virtual Version get_EcmaScriptVersion();
    public virtual Version get_JScriptVersion();
    public virtual bool get_SupportsCallback();
    public virtual Version get_W3CDomVersion();
    public virtual bool get_ActiveXControls();
    public virtual IDictionary get_Adapters();
    public virtual bool get_AOL();
    public virtual bool get_BackgroundSounds();
    public virtual bool get_Beta();
    public virtual ArrayList get_Browsers();
    public virtual bool get_CanCombineFormsInDeck();
    public virtual bool get_CanInitiateVoiceCall();
    public virtual bool get_CanRenderAfterInputOrSelectElement();
    public virtual bool get_CanRenderEmptySelects();
    public virtual bool get_CanRenderInputAndSelectElementsTogether();
    public virtual bool get_CanRenderMixedSelects();
    public virtual bool get_CanRenderOneventAndPrevElementsTogether();
    public virtual bool get_CanRenderPostBackCards();
    public virtual bool get_CanRenderSetvarZeroWithMultiSelectionList();
    public virtual bool get_CanSendMail();
    public virtual IDictionary get_Capabilities();
    public virtual void set_Capabilities(IDictionary value);
    public virtual bool get_CDF();
    public virtual Version get_ClrVersion();
    public virtual bool get_Cookies();
    public virtual bool get_Crawler();
    public virtual int get_DefaultSubmitButtonLimit();
    public virtual bool get_Frames();
    public virtual int get_GatewayMajorVersion();
    public virtual double get_GatewayMinorVersion();
    public virtual string get_GatewayVersion();
    public virtual bool get_HasBackButton();
    public virtual bool get_HidesRightAlignedMultiselectScrollbars();
    public virtual string get_HtmlTextWriter();
    public virtual void set_HtmlTextWriter(string value);
    public virtual string get_Id();
    public virtual string get_InputType();
    public virtual bool get_IsColor();
    public virtual bool get_IsMobileDevice();
    public virtual bool get_JavaApplets();
    public virtual int get_MajorVersion();
    public virtual int get_MaximumHrefLength();
    public virtual int get_MaximumRenderedPageSize();
    public virtual int get_MaximumSoftkeyLabelLength();
    public virtual double get_MinorVersion();
    public virtual string get_MinorVersionString();
    public virtual string get_MobileDeviceManufacturer();
    public virtual string get_MobileDeviceModel();
    public virtual Version get_MSDomVersion();
    public virtual int get_NumberOfSoftkeys();
    public virtual string get_Platform();
    public virtual string get_PreferredImageMime();
    public virtual string get_PreferredRenderingMime();
    public virtual string get_PreferredRenderingType();
    public virtual string get_PreferredRequestEncoding();
    public virtual string get_PreferredResponseEncoding();
    public virtual bool get_RendersBreakBeforeWmlSelectAndInput();
    public virtual bool get_RendersBreaksAfterHtmlLists();
    public virtual bool get_RendersBreaksAfterWmlAnchor();
    public virtual bool get_RendersBreaksAfterWmlInput();
    public virtual bool get_RendersWmlDoAcceptsInline();
    public virtual bool get_RendersWmlSelectsAsMenuCards();
    public virtual string get_RequiredMetaTagNameValue();
    public virtual bool get_RequiresAttributeColonSubstitution();
    public virtual bool get_RequiresContentTypeMetaTag();
    public virtual bool get_RequiresControlStateInSession();
    public virtual bool get_RequiresDBCSCharacter();
    public virtual bool get_RequiresHtmlAdaptiveErrorReporting();
    public virtual bool get_RequiresLeadingPageBreak();
    public virtual bool get_RequiresNoBreakInFormatting();
    public virtual bool get_RequiresOutputOptimization();
    public virtual bool get_RequiresPhoneNumbersAsPlainText();
    public virtual bool get_RequiresSpecialViewStateEncoding();
    public virtual bool get_RequiresUniqueFilePathSuffix();
    public virtual bool get_RequiresUniqueHtmlCheckboxNames();
    public virtual bool get_RequiresUniqueHtmlInputNames();
    public virtual bool get_RequiresUrlEncodedPostfieldValues();
    public virtual int get_ScreenBitDepth();
    public virtual int get_ScreenCharactersHeight();
    public virtual int get_ScreenCharactersWidth();
    public virtual int get_ScreenPixelsHeight();
    public virtual int get_ScreenPixelsWidth();
    public virtual bool get_SupportsAccesskeyAttribute();
    public virtual bool get_SupportsBodyColor();
    public virtual bool get_SupportsBold();
    public virtual bool get_SupportsCacheControlMetaTag();
    public virtual bool get_SupportsCss();
    public virtual bool get_SupportsDivAlign();
    public virtual bool get_SupportsDivNoWrap();
    public virtual bool get_SupportsEmptyStringInCookieValue();
    public virtual bool get_SupportsFontColor();
    public virtual bool get_SupportsFontName();
    public virtual bool get_SupportsFontSize();
    public virtual bool get_SupportsImageSubmit();
    public virtual bool get_SupportsIModeSymbols();
    public virtual bool get_SupportsInputIStyle();
    public virtual bool get_SupportsInputMode();
    public virtual bool get_SupportsItalic();
    public virtual bool get_SupportsJPhoneMultiMediaAttributes();
    public virtual bool get_SupportsJPhoneSymbols();
    public virtual bool get_SupportsQueryStringInFormAction();
    public virtual bool get_SupportsRedirectWithCookie();
    public virtual bool get_SupportsSelectMultiple();
    public virtual bool get_SupportsUncheck();
    public virtual bool get_SupportsXmlHttp();
    public virtual bool get_Tables();
    public virtual Type get_TagWriter();
    public virtual string get_Type();
    public virtual bool get_UseOptimizedCacheKey();
    public virtual bool get_VBScript();
    public virtual string get_Version();
    public virtual bool get_Win16();
    public virtual bool get_Win32();
    public virtual string get_Item(string key);
    public virtual void AddBrowser(string browserName);
    public virtual HtmlTextWriter CreateHtmlTextWriter(TextWriter w);
    public virtual void DisableOptimizedCacheKey();
    public virtual Version[] GetClrVersions();
    public virtual bool IsBrowser(string browserName);
    public virtual int CompareFilters(string filter1, string filter2);
    public virtual bool EvaluateFilter(string filterName);
}
internal class System.Web.HttpBufferlessInputStream : Stream {
    internal bool PersistEntityBody { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal HttpBufferlessInputStream(HttpContext context, bool persistEntityBody, bool disableMaxRequestLength);
    internal bool get_PersistEntityBody();
    protected virtual void Dispose(bool disposing);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual void SetLength(long length);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual int Read(Byte[] buffer, int offset, int count);
}
public enum System.Web.HttpCacheability : Enum {
    public int value__;
    public static HttpCacheability NoCache;
    public static HttpCacheability Private;
    public static HttpCacheability Server;
    public static HttpCacheability ServerAndNoCache;
    public static HttpCacheability Public;
    public static HttpCacheability ServerAndPrivate;
}
internal enum System.Web.HttpCacheabilityLimits : Enum {
    public int value__;
    public static HttpCacheabilityLimits MinValue;
    public static HttpCacheabilityLimits MaxValue;
    public static HttpCacheabilityLimits None;
}
public class System.Web.HttpCachePolicy : object {
    internal bool IsVaryByStar { get; }
    public HttpCacheVaryByContentEncodings VaryByContentEncodings { get; }
    public HttpCacheVaryByHeaders VaryByHeaders { get; }
    public HttpCacheVaryByParams VaryByParams { get; }
    public DateTime UtcTimestampCreated { get; public set; }
    private static HttpCachePolicy();
    internal void Reset();
    internal void ResetFromHttpCachePolicySettings(HttpCachePolicySettings settings, DateTime utcTimestampRequest);
    public bool IsModified();
    internal static void AppendValueToHeader(StringBuilder s, string value);
    internal void GetHeaders(ArrayList headers, HttpResponse response);
    internal HttpCachePolicySettings GetCurrentSettings(HttpResponse response);
    internal bool HasValidationPolicy();
    internal bool HasExpirationPolicy();
    internal bool IsKernelCacheable(HttpRequest request, bool enableKernelCacheForVaryByStar);
    internal bool get_IsVaryByStar();
    internal DateTime UtcGetAbsoluteExpiration();
    internal IEnumerable GetValidationCallbacks();
    public void SetNoServerCaching();
    public bool GetNoServerCaching();
    internal void SetHasSetCookieHeader();
    public void SetVaryByCustom(string custom);
    public string GetVaryByCustom();
    public void AppendCacheExtension(string extension);
    public string GetCacheExtensions();
    public void SetNoTransforms();
    public bool GetNoTransforms();
    internal void SetIgnoreRangeRequests();
    public bool GetIgnoreRangeRequests();
    public HttpCacheVaryByContentEncodings get_VaryByContentEncodings();
    public HttpCacheVaryByHeaders get_VaryByHeaders();
    public HttpCacheVaryByParams get_VaryByParams();
    public void SetCacheability(HttpCacheability cacheability);
    public HttpCacheability GetCacheability();
    public void SetCacheability(HttpCacheability cacheability, string field);
    public void SetNoStore();
    internal void SetDependencies(bool hasUserProvidedDependencies);
    public bool GetNoStore();
    public void SetExpires(DateTime date);
    public DateTime GetExpires();
    public void SetMaxAge(TimeSpan delta);
    public TimeSpan GetMaxAge();
    internal void SetNoMaxAgeInCacheControl();
    public void SetProxyMaxAge(TimeSpan delta);
    public TimeSpan GetProxyMaxAge();
    public void SetSlidingExpiration(bool slide);
    public bool HasSlidingExpiration();
    public void SetValidUntilExpires(bool validUntilExpires);
    public bool IsValidUntilExpires();
    public void SetAllowResponseInBrowserHistory(bool allow);
    public void SetRevalidation(HttpCacheRevalidation revalidation);
    public HttpCacheRevalidation GetRevalidation();
    public void SetETag(string etag);
    public string GetETag();
    public void SetLastModified(DateTime date);
    public DateTime GetUtcLastModified();
    public void SetLastModifiedFromFileDependencies();
    public bool GetLastModifiedFromFileDependencies();
    public void SetETagFromFileDependencies();
    public bool GetETagFromFileDependencies();
    public void SetOmitVaryStar(bool omit);
    public int GetOmitVaryStar();
    public void AddValidationCallback(HttpCacheValidateHandler handler, object data);
    public DateTime get_UtcTimestampCreated();
    public void set_UtcTimestampCreated(DateTime value);
}
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public abstract class System.Web.HttpCachePolicyBase : object {
    public HttpCacheVaryByContentEncodings VaryByContentEncodings { get; }
    public HttpCacheVaryByHeaders VaryByHeaders { get; }
    public HttpCacheVaryByParams VaryByParams { get; }
    public virtual HttpCacheVaryByContentEncodings get_VaryByContentEncodings();
    public virtual HttpCacheVaryByHeaders get_VaryByHeaders();
    public virtual HttpCacheVaryByParams get_VaryByParams();
    public virtual void AddValidationCallback(HttpCacheValidateHandler handler, object data);
    public virtual void AppendCacheExtension(string extension);
    public virtual void SetAllowResponseInBrowserHistory(bool allow);
    public virtual void SetCacheability(HttpCacheability cacheability);
    public virtual void SetCacheability(HttpCacheability cacheability, string field);
    public virtual void SetETag(string etag);
    public virtual void SetETagFromFileDependencies();
    public virtual void SetExpires(DateTime date);
    public virtual void SetLastModified(DateTime date);
    public virtual void SetLastModifiedFromFileDependencies();
    public virtual void SetMaxAge(TimeSpan delta);
    public virtual void SetNoServerCaching();
    public virtual void SetNoStore();
    public virtual void SetNoTransforms();
    public virtual void SetOmitVaryStar(bool omit);
    public virtual void SetProxyMaxAge(TimeSpan delta);
    public virtual void SetRevalidation(HttpCacheRevalidation revalidation);
    public virtual void SetSlidingExpiration(bool slide);
    public virtual void SetValidUntilExpires(bool validUntilExpires);
    public virtual void SetVaryByCustom(string custom);
}
internal class System.Web.HttpCachePolicySettings : object {
    internal bool _isModified;
    internal ValidationCallbackInfo[] _validationCallbackInfo;
    internal HttpResponseHeader _headerCacheControl;
    internal HttpResponseHeader _headerPragma;
    internal HttpResponseHeader _headerExpires;
    internal HttpResponseHeader _headerLastModified;
    internal HttpResponseHeader _headerEtag;
    internal HttpResponseHeader _headerVaryBy;
    internal bool _hasSetCookieHeader;
    internal bool _noServerCaching;
    internal string _cacheExtension;
    internal bool _noTransforms;
    internal bool _ignoreRangeRequests;
    internal String[] _varyByContentEncodings;
    internal String[] _varyByHeaderValues;
    internal String[] _varyByParamValues;
    internal string _varyByCustom;
    internal HttpCacheability _cacheability;
    internal bool _noStore;
    internal String[] _privateFields;
    internal String[] _noCacheFields;
    internal DateTime _utcExpires;
    internal bool _isExpiresSet;
    internal TimeSpan _maxAge;
    internal bool _isMaxAgeSet;
    internal TimeSpan _proxyMaxAge;
    internal bool _isProxyMaxAgeSet;
    internal int _slidingExpiration;
    internal TimeSpan _slidingDelta;
    internal DateTime _utcTimestampCreated;
    internal int _validUntilExpires;
    internal int _allowInHistory;
    internal HttpCacheRevalidation _revalidation;
    internal DateTime _utcLastModified;
    internal bool _isLastModifiedSet;
    internal string _etag;
    internal bool _generateLastModifiedFromFiles;
    internal bool _generateEtagFromFiles;
    internal int _omitVaryStar;
    internal bool _hasUserProvidedDependencies;
    internal bool IsModified { get; }
    internal ValidationCallbackInfo[] ValidationCallbackInfo { get; }
    internal HttpResponseHeader HeaderCacheControl { get; }
    internal HttpResponseHeader HeaderPragma { get; }
    internal HttpResponseHeader HeaderExpires { get; }
    internal HttpResponseHeader HeaderLastModified { get; }
    internal HttpResponseHeader HeaderEtag { get; }
    internal HttpResponseHeader HeaderVaryBy { get; }
    internal bool hasSetCookieHeader { get; }
    internal bool NoServerCaching { get; }
    internal string CacheExtension { get; }
    internal bool NoTransforms { get; }
    internal bool IgnoreRangeRequests { get; }
    internal String[] VaryByContentEncodings { get; }
    internal String[] VaryByHeaders { get; }
    internal String[] VaryByParams { get; }
    internal bool IgnoreParams { get; }
    internal HttpCacheability CacheabilityInternal { get; }
    internal bool NoStore { get; }
    internal String[] PrivateFields { get; }
    internal String[] NoCacheFields { get; }
    internal DateTime UtcExpires { get; }
    internal bool IsExpiresSet { get; }
    internal TimeSpan MaxAge { get; }
    internal bool IsMaxAgeSet { get; }
    internal TimeSpan ProxyMaxAge { get; }
    internal bool IsProxyMaxAgeSet { get; }
    internal int SlidingExpirationInternal { get; }
    internal bool SlidingExpiration { get; }
    internal TimeSpan SlidingDelta { get; }
    internal DateTime UtcTimestampCreated { get; }
    internal int ValidUntilExpiresInternal { get; }
    internal bool ValidUntilExpires { get; }
    internal int AllowInHistoryInternal { get; }
    internal HttpCacheRevalidation Revalidation { get; }
    internal DateTime UtcLastModified { get; }
    internal bool IsLastModifiedSet { get; }
    internal string ETag { get; }
    internal bool GenerateLastModifiedFromFiles { get; }
    internal bool GenerateEtagFromFiles { get; }
    internal string VaryByCustom { get; }
    internal bool HasUserProvidedDependencies { get; }
    internal int OmitVaryStarInternal { get; }
    internal HttpCachePolicySettings(bool isModified, ValidationCallbackInfo[] validationCallbackInfo, bool hasSetCookieHeader, bool noServerCaching, string cacheExtension, bool noTransforms, bool ignoreRangeRequests, String[] varyByContentEncodings, String[] varyByHeaderValues, String[] varyByParamValues, string varyByCustom, HttpCacheability cacheability, bool noStore, String[] privateFields, String[] noCacheFields, DateTime utcExpires, bool isExpiresSet, TimeSpan maxAge, bool isMaxAgeSet, TimeSpan proxyMaxAge, bool isProxyMaxAgeSet, int slidingExpiration, TimeSpan slidingDelta, DateTime utcTimestampCreated, int validUntilExpires, int allowInHistory, HttpCacheRevalidation revalidation, DateTime utcLastModified, bool isLastModifiedSet, string etag, bool generateLastModifiedFromFiles, bool generateEtagFromFiles, int omitVaryStar, HttpResponseHeader headerCacheControl, HttpResponseHeader headerPragma, HttpResponseHeader headerExpires, HttpResponseHeader headerLastModified, HttpResponseHeader headerEtag, HttpResponseHeader headerVaryBy, bool hasUserProvidedDependencies);
    internal bool get_IsModified();
    internal ValidationCallbackInfo[] get_ValidationCallbackInfo();
    internal HttpResponseHeader get_HeaderCacheControl();
    internal HttpResponseHeader get_HeaderPragma();
    internal HttpResponseHeader get_HeaderExpires();
    internal HttpResponseHeader get_HeaderLastModified();
    internal HttpResponseHeader get_HeaderEtag();
    internal HttpResponseHeader get_HeaderVaryBy();
    internal bool get_hasSetCookieHeader();
    internal bool get_NoServerCaching();
    internal string get_CacheExtension();
    internal bool get_NoTransforms();
    internal bool get_IgnoreRangeRequests();
    internal String[] get_VaryByContentEncodings();
    internal String[] get_VaryByHeaders();
    internal String[] get_VaryByParams();
    internal bool get_IgnoreParams();
    internal HttpCacheability get_CacheabilityInternal();
    internal bool get_NoStore();
    internal String[] get_PrivateFields();
    internal String[] get_NoCacheFields();
    internal DateTime get_UtcExpires();
    internal bool get_IsExpiresSet();
    internal TimeSpan get_MaxAge();
    internal bool get_IsMaxAgeSet();
    internal TimeSpan get_ProxyMaxAge();
    internal bool get_IsProxyMaxAgeSet();
    internal int get_SlidingExpirationInternal();
    internal bool get_SlidingExpiration();
    internal TimeSpan get_SlidingDelta();
    internal DateTime get_UtcTimestampCreated();
    internal int get_ValidUntilExpiresInternal();
    internal bool get_ValidUntilExpires();
    internal int get_AllowInHistoryInternal();
    internal HttpCacheRevalidation get_Revalidation();
    internal DateTime get_UtcLastModified();
    internal bool get_IsLastModifiedSet();
    internal string get_ETag();
    internal bool get_GenerateLastModifiedFromFiles();
    internal bool get_GenerateEtagFromFiles();
    internal string get_VaryByCustom();
    internal bool get_HasUserProvidedDependencies();
    internal bool IsValidationCallbackSerializable();
    internal bool HasValidationPolicy();
    internal int get_OmitVaryStarInternal();
}
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.HttpCachePolicyWrapper : HttpCachePolicyBase {
    public HttpCacheVaryByContentEncodings VaryByContentEncodings { get; }
    public HttpCacheVaryByHeaders VaryByHeaders { get; }
    public HttpCacheVaryByParams VaryByParams { get; }
    public HttpCachePolicyWrapper(HttpCachePolicy httpCachePolicy);
    public virtual HttpCacheVaryByContentEncodings get_VaryByContentEncodings();
    public virtual HttpCacheVaryByHeaders get_VaryByHeaders();
    public virtual HttpCacheVaryByParams get_VaryByParams();
    public virtual void AddValidationCallback(HttpCacheValidateHandler handler, object data);
    public virtual void AppendCacheExtension(string extension);
    public virtual void SetAllowResponseInBrowserHistory(bool allow);
    public virtual void SetCacheability(HttpCacheability cacheability);
    public virtual void SetCacheability(HttpCacheability cacheability, string field);
    public virtual void SetETag(string etag);
    public virtual void SetETagFromFileDependencies();
    public virtual void SetExpires(DateTime date);
    public virtual void SetLastModified(DateTime date);
    public virtual void SetLastModifiedFromFileDependencies();
    public virtual void SetMaxAge(TimeSpan delta);
    public virtual void SetNoServerCaching();
    public virtual void SetNoStore();
    public virtual void SetNoTransforms();
    public virtual void SetOmitVaryStar(bool omit);
    public virtual void SetProxyMaxAge(TimeSpan delta);
    public virtual void SetRevalidation(HttpCacheRevalidation revalidation);
    public virtual void SetSlidingExpiration(bool slide);
    public virtual void SetValidUntilExpires(bool validUntilExpires);
    public virtual void SetVaryByCustom(string custom);
}
public enum System.Web.HttpCacheRevalidation : Enum {
    public int value__;
    public static HttpCacheRevalidation AllCaches;
    public static HttpCacheRevalidation ProxyCaches;
    public static HttpCacheRevalidation None;
}
internal enum System.Web.HttpCacheRevalidationLimits : Enum {
    public int value__;
    public static HttpCacheRevalidationLimits MinValue;
    public static HttpCacheRevalidationLimits MaxValue;
}
public class System.Web.HttpCacheValidateHandler : MulticastDelegate {
    public HttpCacheValidateHandler(object object, IntPtr method);
    public virtual void Invoke(HttpContext context, object data, HttpValidationStatus& validationStatus);
    public virtual IAsyncResult BeginInvoke(HttpContext context, object data, HttpValidationStatus& validationStatus, AsyncCallback callback, object object);
    public virtual void EndInvoke(HttpValidationStatus& validationStatus, IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class System.Web.HttpCacheVaryByContentEncodings : object {
    public bool Item { get; public set; }
    internal void Reset();
    public void SetContentEncodings(String[] contentEncodings);
    internal bool IsCacheableEncoding(string coding);
    internal bool IsModified();
    public String[] GetContentEncodings();
    public bool get_Item(string contentEncoding);
    public void set_Item(string contentEncoding, bool value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.HttpCacheVaryByHeaders : object {
    public bool AcceptTypes { get; public set; }
    public bool UserLanguage { get; public set; }
    public bool UserAgent { get; public set; }
    public bool UserCharSet { get; public set; }
    public bool Item { get; public set; }
    internal void Reset();
    public void SetHeaders(String[] headers);
    internal bool IsModified();
    internal string ToHeaderString();
    public String[] GetHeaders();
    public void VaryByUnspecifiedParameters();
    internal bool GetVaryByUnspecifiedParameters();
    public bool get_AcceptTypes();
    public void set_AcceptTypes(bool value);
    public bool get_UserLanguage();
    public void set_UserLanguage(bool value);
    public bool get_UserAgent();
    public void set_UserAgent(bool value);
    public bool get_UserCharSet();
    public void set_UserCharSet(bool value);
    public bool get_Item(string header);
    public void set_Item(string header, bool value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.HttpCacheVaryByParams : object {
    public bool Item { get; public set; }
    public bool IgnoreParams { get; public set; }
    internal bool IsVaryByStar { get; }
    internal void Reset();
    public void SetParams(String[] parameters);
    internal bool IsModified();
    internal bool AcceptsParams();
    public String[] GetParams();
    public bool get_Item(string header);
    public void set_Item(string header, bool value);
    public bool get_IgnoreParams();
    public void set_IgnoreParams(bool value);
    internal bool get_IsVaryByStar();
}
internal class System.Web.HttpChannelBindingToken : ChannelBinding {
    public int Size { get; }
    internal HttpChannelBindingToken(IntPtr token, int tokenSize);
    protected virtual bool ReleaseHandle();
    public virtual int get_Size();
}
public class System.Web.HttpClientCertificate : NameValueCollection {
    public string Cookie { get; }
    public Byte[] Certificate { get; }
    public int Flags { get; }
    public int KeySize { get; }
    public int SecretKeySize { get; }
    public string Issuer { get; }
    public string ServerIssuer { get; }
    public string Subject { get; }
    public string ServerSubject { get; }
    public string SerialNumber { get; }
    public DateTime ValidFrom { get; }
    public DateTime ValidUntil { get; }
    public int CertEncoding { get; }
    public Byte[] PublicKey { get; }
    public Byte[] BinaryIssuer { get; }
    public bool IsPresent { get; }
    public bool IsValid { get; }
    internal HttpClientCertificate(HttpContext context);
    public string get_Cookie();
    public Byte[] get_Certificate();
    public int get_Flags();
    public int get_KeySize();
    public int get_SecretKeySize();
    public string get_Issuer();
    public string get_ServerIssuer();
    public string get_Subject();
    public string get_ServerSubject();
    public string get_SerialNumber();
    public DateTime get_ValidFrom();
    public DateTime get_ValidUntil();
    public int get_CertEncoding();
    public Byte[] get_PublicKey();
    public Byte[] get_BinaryIssuer();
    public bool get_IsPresent();
    public bool get_IsValid();
    public virtual string Get(string field);
}
public class System.Web.HttpCompileException : HttpException {
    internal bool DontCache { get; internal set; }
    internal ICollection VirtualPathDependencies { get; internal set; }
    public string Message { get; }
    public CompilerResults Results { get; }
    internal CompilerResults ResultsWithoutDemand { get; }
    public string SourceCode { get; }
    internal string SourceCodeWithoutDemand { get; }
    internal CompilerError FirstCompileError { get; }
    public HttpCompileException(string message);
    public HttpCompileException(string message, Exception innerException);
    public HttpCompileException(CompilerResults results, string sourceCode);
    private HttpCompileException(SerializationInfo info, StreamingContext context);
    internal bool get_DontCache();
    internal void set_DontCache(bool value);
    internal ICollection get_VirtualPathDependencies();
    internal void set_VirtualPathDependencies(ICollection value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
    public CompilerResults get_Results();
    internal CompilerResults get_ResultsWithoutDemand();
    public string get_SourceCode();
    internal string get_SourceCodeWithoutDemand();
    internal CompilerError get_FirstCompileError();
}
public class System.Web.HttpContext : object {
    internal static Assembly SystemWebAssembly;
    [DoNotResetAttribute]
internal ProfileBase _Profile;
    internal bool _skipAuthorization;
    internal static int FLAG_ETW_PROVIDER_ENABLED;
    internal bool HideRequestResponse;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) InIndicateCompletion;
    internal ThreadContext modreq(System.Runtime.CompilerServices.IsVolatile) IndicateCompletionContext;
    internal Thread modreq(System.Runtime.CompilerServices.IsVolatile) ThreadInsideIndicateCompletion;
    [DoNotResetAttribute]
internal object ThreadContextId;
    internal Thread _threadWhichStartedWebSocketTransition;
    internal bool InAspCompatMode;
    [DoNotResetAttribute]
internal bool _ProfileDelayLoad;
    public bool IsWebSocketRequest { get; }
    public bool IsWebSocketRequestUpgrading { get; }
    internal bool HasWebSocketRequestTransitionStarted { get; }
    internal bool HasWebSocketRequestTransitionCompleted { get; }
    internal WebSocketTransitionState WebSocketTransitionState { get; private set; }
    public IList`1<string> WebSocketRequestedProtocols { get; }
    public string WebSocketNegotiatedProtocol { get; }
    internal bool DidCurrentThreadStartWebSocketTransition { get; }
    internal bool FirstRequest { get; internal set; }
    internal bool RequiresSessionState { get; }
    internal bool ReadOnlySessionState { get; }
    public static HttpContext Current { get; public set; }
    internal IHttpAsyncHandler AsyncAppHandler { get; internal set; }
    public AsyncPreloadModeFlags AsyncPreloadMode { get; public set; }
    [EditorBrowsableAttribute("2")]
public bool AllowAsyncDuringSyncStages { get; public set; }
    public HttpApplication ApplicationInstance { get; public set; }
    public HttpApplicationState Application { get; }
    internal bool DisableCustomHttpEncoder { get; internal set; }
    public IHttpHandler Handler { get; public set; }
    public IHttpHandler PreviousHandler { get; }
    public IHttpHandler CurrentHandler { get; }
    internal IHttpHandler RemapHandlerInstance { get; }
    public HttpRequest Request { get; }
    public HttpResponse Response { get; }
    internal IHttpHandler TopHandler { get; }
    public TraceContext Trace { get; }
    internal bool TraceIsEnabled { get; internal set; }
    public IDictionary Items { get; }
    public HttpSessionState Session { get; }
    public HttpServerUtility Server { get; }
    public Exception Error { get; }
    internal Exception TempError { get; internal set; }
    public Exception[] AllErrors { get; }
    public IPrincipal User { get; public set; }
    private IPrincipal System.Web.IPrincipalContainer.Principal { get; private set; }
    public ProfileBase Profile { get; }
    internal SessionStateBehavior SessionStateBehavior { get; internal set; }
    public bool SkipAuthorization { get; public set; }
    internal RootedObjects RootedObjects { get; internal set; }
    public bool IsDebuggingEnabled { get; }
    public bool IsCustomErrorEnabled { get; }
    internal TemplateControl TemplateControl { get; internal set; }
    public DateTime Timestamp { get; }
    internal DateTime UtcTimestamp { get; }
    internal HttpWorkerRequest WorkerRequest { get; }
    public Cache Cache { get; }
    public PageInstrumentationService PageInstrumentation { get; }
    internal VirtualPath ConfigurationPath { get; internal set; }
    internal CultureInfo DynamicCulture { get; internal set; }
    internal CultureInfo DynamicUICulture { get; internal set; }
    internal int ServerExecuteDepth { get; internal set; }
    internal bool PreventPostback { get; internal set; }
    internal Thread CurrentThread { get; internal set; }
    internal TimeSpan Timeout { get; internal set; }
    internal CancellationToken TimedOutToken { get; }
    public bool ThreadAbortOnTimeout { get; public set; }
    internal DoubleLink TimeoutLink { get; internal set; }
    internal bool IsInCancellablePeriod { get; }
    internal bool HasTimeoutExpired { get; }
    internal CookielessHelperClass CookielessHelper { get; }
    internal string SqlDependencyCookie { get; internal set; }
    internal NotificationContext NotificationContext { get; internal set; }
    public RequestNotification CurrentNotification { get; internal set; }
    internal bool IsChangeInServerVars { get; }
    internal bool IsChangeInRequestHeaders { get; }
    internal bool IsChangeInResponseHeaders { get; }
    internal bool IsChangeInResponseStatus { get; }
    internal bool IsChangeInUserPrincipal { get; }
    internal bool IsSendResponseHeaders { get; }
    internal bool UsesImpersonation { get; }
    internal bool AreResponseHeadersSent { get; }
    internal int CurrentNotificationFlags { get; internal set; }
    internal int CurrentModuleIndex { get; internal set; }
    internal int CurrentModuleEventIndex { get; internal set; }
    public bool IsPostNotification { get; internal set; }
    internal IntPtr ClientIdentityToken { get; }
    internal bool IsClientImpersonationConfigured { get; }
    internal IntPtr ImpersonationToken { get; }
    internal AspNetSynchronizationContextBase SyncContext { get; internal set; }
    public HttpContext(HttpRequest request, HttpResponse response);
    public HttpContext(HttpWorkerRequest wr);
    internal HttpContext(HttpWorkerRequest wr, bool initResponseWriter);
    private static HttpContext();
    public bool get_IsWebSocketRequest();
    public bool get_IsWebSocketRequestUpgrading();
    internal bool get_HasWebSocketRequestTransitionStarted();
    internal bool get_HasWebSocketRequestTransitionCompleted();
    internal WebSocketTransitionState get_WebSocketTransitionState();
    private void set_WebSocketTransitionState(WebSocketTransitionState value);
    public IList`1<string> get_WebSocketRequestedProtocols();
    public string get_WebSocketNegotiatedProtocol();
    public void AcceptWebSocketRequest(Func`2<AspNetWebSocketContext, Task> userFunc);
    public void AcceptWebSocketRequest(Func`2<AspNetWebSocketContext, Task> userFunc, AspNetWebSocketOptions options);
    internal void TransitionToWebSocketState(WebSocketTransitionState newState);
    internal bool get_DidCurrentThreadStartWebSocketTransition();
    internal void EnsureHasNotTransitionedToWebSocket();
    [CompilerGeneratedAttribute]
internal bool get_FirstRequest();
    [CompilerGeneratedAttribute]
internal void set_FirstRequest(bool value);
    internal bool get_RequiresSessionState();
    internal bool get_ReadOnlySessionState();
    public static HttpContext get_Current();
    public static void set_Current(HttpContext value);
    internal void Root();
    internal void Unroot();
    internal void FinishPipelineRequest();
    public ISubscriptionToken AddOnRequestCompleted(Action`1<HttpContext> callback);
    internal void RaiseOnRequestCompleted();
    public ISubscriptionToken DisposeOnPipelineCompleted(IDisposable target);
    internal void RaiseOnPipelineCompleted();
    internal void ValidatePath();
    private sealed virtual override object System.IServiceProvider.GetService(Type service);
    internal IHttpAsyncHandler get_AsyncAppHandler();
    internal void set_AsyncAppHandler(IHttpAsyncHandler value);
    public AsyncPreloadModeFlags get_AsyncPreloadMode();
    public void set_AsyncPreloadMode(AsyncPreloadModeFlags value);
    public bool get_AllowAsyncDuringSyncStages();
    public void set_AllowAsyncDuringSyncStages(bool value);
    public HttpApplication get_ApplicationInstance();
    public void set_ApplicationInstance(HttpApplication value);
    public HttpApplicationState get_Application();
    [CompilerGeneratedAttribute]
internal bool get_DisableCustomHttpEncoder();
    [CompilerGeneratedAttribute]
internal void set_DisableCustomHttpEncoder(bool value);
    public IHttpHandler get_Handler();
    public void set_Handler(IHttpHandler value);
    public IHttpHandler get_PreviousHandler();
    public IHttpHandler get_CurrentHandler();
    internal void RestoreCurrentHandler();
    internal void SetCurrentHandler(IHttpHandler newtHandler);
    public void RemapHandler(IHttpHandler handler);
    internal IHttpHandler get_RemapHandlerInstance();
    public HttpRequest get_Request();
    public HttpResponse get_Response();
    internal IHttpHandler get_TopHandler();
    public TraceContext get_Trace();
    internal bool get_TraceIsEnabled();
    internal void set_TraceIsEnabled(bool value);
    public IDictionary get_Items();
    public HttpSessionState get_Session();
    internal void EnsureSessionStateIfNecessary();
    internal void AddHttpSessionStateModule(SessionStateModule module, bool delayed);
    internal void RemoveHttpSessionStateModule();
    public HttpServerUtility get_Server();
    internal void ReportRuntimeErrorIfExists(RequestNotificationStatus& status);
    public Exception get_Error();
    internal Exception get_TempError();
    internal void set_TempError(Exception value);
    public Exception[] get_AllErrors();
    public void AddError(Exception errorInfo);
    public void ClearError();
    public IPrincipal get_User();
    public void set_User(IPrincipal value);
    [CompilerGeneratedAttribute]
private sealed virtual override IPrincipal System.Web.IPrincipalContainer.get_Principal();
    [CompilerGeneratedAttribute]
private sealed virtual override void System.Web.IPrincipalContainer.set_Principal(IPrincipal value);
    internal void SetPrincipalNoDemand(IPrincipal principal, bool needToSetNativePrincipal);
    internal void SetPrincipalNoDemand(IPrincipal principal);
    public ProfileBase get_Profile();
    [CompilerGeneratedAttribute]
internal SessionStateBehavior get_SessionStateBehavior();
    [CompilerGeneratedAttribute]
internal void set_SessionStateBehavior(SessionStateBehavior value);
    public void SetSessionStateBehavior(SessionStateBehavior sessionStateBehavior);
    public bool get_SkipAuthorization();
    public void set_SkipAuthorization(bool value);
    internal void SetSkipAuthorizationNoDemand(bool value, bool managedOnly);
    internal RootedObjects get_RootedObjects();
    internal void set_RootedObjects(RootedObjects value);
    public bool get_IsDebuggingEnabled();
    public bool get_IsCustomErrorEnabled();
    internal TemplateControl get_TemplateControl();
    internal void set_TemplateControl(TemplateControl value);
    public DateTime get_Timestamp();
    internal DateTime get_UtcTimestamp();
    internal HttpWorkerRequest get_WorkerRequest();
    public Cache get_Cache();
    public PageInstrumentationService get_PageInstrumentation();
    internal VirtualPath get_ConfigurationPath();
    internal void set_ConfigurationPath(VirtualPath value);
    internal CachedPathData GetFilePathData();
    internal CachedPathData GetConfigurationPathData();
    internal CachedPathData GetPathData(VirtualPath path);
    internal void FinishRequestForCachedPathData(int statusCode);
    [ObsoleteAttribute("The recommended alternative is System.Web.Configuration.WebConfigurationManager.GetWebApplicationSection in System.Web.dll. http://go.microsoft.com/fwlink/?linkid=14202")]
public static object GetAppConfig(string name);
    [ObsoleteAttribute("The recommended alternative is System.Web.HttpContext.GetSection in System.Web.dll. http://go.microsoft.com/fwlink/?linkid=14202")]
public object GetConfig(string name);
    public object GetSection(string sectionName);
    internal RuntimeConfig GetRuntimeConfig();
    internal RuntimeConfig GetRuntimeConfig(VirtualPath path);
    public void RewritePath(string path);
    public void RewritePath(string path, bool rebaseClientPath);
    public void RewritePath(string filePath, string pathInfo, string queryString);
    public void RewritePath(string filePath, string pathInfo, string queryString, bool setClientFilePath);
    internal void RewritePath(VirtualPath filePath, VirtualPath pathInfo, string queryString, bool setClientFilePath);
    internal CultureInfo get_DynamicCulture();
    internal void set_DynamicCulture(CultureInfo value);
    internal CultureInfo get_DynamicUICulture();
    internal void set_DynamicUICulture(CultureInfo value);
    public static object GetGlobalResourceObject(string classKey, string resourceKey);
    public static object GetGlobalResourceObject(string classKey, string resourceKey, CultureInfo culture);
    public static object GetLocalResourceObject(string virtualPath, string resourceKey);
    public static object GetLocalResourceObject(string virtualPath, string resourceKey, CultureInfo culture);
    internal int get_ServerExecuteDepth();
    internal void set_ServerExecuteDepth(int value);
    internal bool get_PreventPostback();
    internal void set_PreventPostback(bool value);
    internal Thread get_CurrentThread();
    internal void set_CurrentThread(Thread value);
    internal TimeSpan get_Timeout();
    internal void set_Timeout(TimeSpan value);
    internal CancellationToken get_TimedOutToken();
    public bool get_ThreadAbortOnTimeout();
    public void set_ThreadAbortOnTimeout(bool value);
    internal long EnsureTimeout();
    internal DoubleLink get_TimeoutLink();
    internal void set_TimeoutLink(DoubleLink value);
    internal void BeginCancellablePeriod();
    internal void SetStartTime();
    internal void EndCancellablePeriod();
    internal void WaitForExceptionIfCancelled();
    internal bool get_IsInCancellablePeriod();
    internal Thread MustTimeout(DateTime utcNow);
    internal bool get_HasTimeoutExpired();
    internal void InvokeCancellableCallback(WaitCallback callback, object state);
    internal void PushTraceContext();
    internal void PopTraceContext();
    internal bool RequestRequiresAuthorization();
    internal int CallISAPI(CallISAPIFunc iFunction, Byte[] bufIn, Byte[] bufOut);
    internal void SendEmptyResponse();
    internal CookielessHelperClass get_CookielessHelper();
    internal void ResetSqlDependencyCookie();
    internal void RemoveSqlDependencyCookie();
    internal string get_SqlDependencyCookie();
    internal void set_SqlDependencyCookie(string value);
    internal NotificationContext get_NotificationContext();
    internal void set_NotificationContext(NotificationContext value);
    public RequestNotification get_CurrentNotification();
    internal void set_CurrentNotification(RequestNotification value);
    internal bool get_IsChangeInServerVars();
    internal bool get_IsChangeInRequestHeaders();
    internal bool get_IsChangeInResponseHeaders();
    internal bool get_IsChangeInResponseStatus();
    internal bool get_IsChangeInUserPrincipal();
    internal bool get_IsSendResponseHeaders();
    internal void SetImpersonationEnabled();
    internal bool get_UsesImpersonation();
    internal bool get_AreResponseHeadersSent();
    internal bool NeedToInitializeApp();
    internal int get_CurrentNotificationFlags();
    internal void set_CurrentNotificationFlags(int value);
    internal int get_CurrentModuleIndex();
    internal void set_CurrentModuleIndex(int value);
    internal int get_CurrentModuleEventIndex();
    internal void set_CurrentModuleEventIndex(int value);
    internal void DisableNotifications(RequestNotification notifications, RequestNotification postNotifications);
    public bool get_IsPostNotification();
    internal void set_IsPostNotification(bool value);
    internal IntPtr get_ClientIdentityToken();
    internal bool get_IsClientImpersonationConfigured();
    internal IntPtr get_ImpersonationToken();
    internal AspNetSynchronizationContextBase get_SyncContext();
    internal void set_SyncContext(AspNetSynchronizationContextBase value);
    internal AspNetSynchronizationContextBase InstallNewAspNetSynchronizationContext();
    internal void RestoreSavedAspNetSynchronizationContext(AspNetSynchronizationContextBase syncContext);
    internal String[] UserLanguagesFromContext();
    internal void ClearReferences();
    internal void CompleteTransitionToWebSocket();
    internal CultureInfo CultureFromConfig(string configString, bool requireSpecific);
}
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public abstract class System.Web.HttpContextBase : object {
    public Exception[] AllErrors { get; }
    [EditorBrowsableAttribute("2")]
public bool AllowAsyncDuringSyncStages { get; public set; }
    public HttpApplicationStateBase Application { get; }
    public HttpApplication ApplicationInstance { get; public set; }
    public AsyncPreloadModeFlags AsyncPreloadMode { get; public set; }
    public Cache Cache { get; }
    public IHttpHandler CurrentHandler { get; }
    public RequestNotification CurrentNotification { get; }
    public Exception Error { get; }
    public IHttpHandler Handler { get; public set; }
    public bool IsCustomErrorEnabled { get; }
    public bool IsDebuggingEnabled { get; }
    public bool IsPostNotification { get; }
    public bool IsWebSocketRequest { get; }
    public bool IsWebSocketRequestUpgrading { get; }
    public IDictionary Items { get; }
    public PageInstrumentationService PageInstrumentation { get; }
    public IHttpHandler PreviousHandler { get; }
    public ProfileBase Profile { get; }
    public HttpRequestBase Request { get; }
    public HttpResponseBase Response { get; }
    public HttpServerUtilityBase Server { get; }
    public HttpSessionStateBase Session { get; }
    public bool SkipAuthorization { get; public set; }
    public DateTime Timestamp { get; }
    public bool ThreadAbortOnTimeout { get; public set; }
    public TraceContext Trace { get; }
    public IPrincipal User { get; public set; }
    public string WebSocketNegotiatedProtocol { get; }
    public IList`1<string> WebSocketRequestedProtocols { get; }
    public virtual ISubscriptionToken AddOnRequestCompleted(Action`1<HttpContextBase> callback);
    public virtual Exception[] get_AllErrors();
    public virtual bool get_AllowAsyncDuringSyncStages();
    public virtual void set_AllowAsyncDuringSyncStages(bool value);
    public virtual HttpApplicationStateBase get_Application();
    public virtual HttpApplication get_ApplicationInstance();
    public virtual void set_ApplicationInstance(HttpApplication value);
    public virtual AsyncPreloadModeFlags get_AsyncPreloadMode();
    public virtual void set_AsyncPreloadMode(AsyncPreloadModeFlags value);
    public virtual Cache get_Cache();
    public virtual IHttpHandler get_CurrentHandler();
    public virtual RequestNotification get_CurrentNotification();
    public virtual Exception get_Error();
    public virtual IHttpHandler get_Handler();
    public virtual void set_Handler(IHttpHandler value);
    public virtual bool get_IsCustomErrorEnabled();
    public virtual bool get_IsDebuggingEnabled();
    public virtual bool get_IsPostNotification();
    public virtual bool get_IsWebSocketRequest();
    public virtual bool get_IsWebSocketRequestUpgrading();
    public virtual IDictionary get_Items();
    public virtual PageInstrumentationService get_PageInstrumentation();
    public virtual IHttpHandler get_PreviousHandler();
    public virtual ProfileBase get_Profile();
    public virtual HttpRequestBase get_Request();
    public virtual HttpResponseBase get_Response();
    public virtual HttpServerUtilityBase get_Server();
    public virtual HttpSessionStateBase get_Session();
    public virtual bool get_SkipAuthorization();
    public virtual void set_SkipAuthorization(bool value);
    public virtual DateTime get_Timestamp();
    public virtual bool get_ThreadAbortOnTimeout();
    public virtual void set_ThreadAbortOnTimeout(bool value);
    public virtual TraceContext get_Trace();
    public virtual IPrincipal get_User();
    public virtual void set_User(IPrincipal value);
    public virtual string get_WebSocketNegotiatedProtocol();
    public virtual IList`1<string> get_WebSocketRequestedProtocols();
    public virtual void AcceptWebSocketRequest(Func`2<AspNetWebSocketContext, Task> userFunc);
    public virtual void AcceptWebSocketRequest(Func`2<AspNetWebSocketContext, Task> userFunc, AspNetWebSocketOptions options);
    public virtual void AddError(Exception errorInfo);
    public virtual void ClearError();
    public virtual ISubscriptionToken DisposeOnPipelineCompleted(IDisposable target);
    public virtual object GetGlobalResourceObject(string classKey, string resourceKey);
    public virtual object GetGlobalResourceObject(string classKey, string resourceKey, CultureInfo culture);
    public virtual object GetLocalResourceObject(string virtualPath, string resourceKey);
    public virtual object GetLocalResourceObject(string virtualPath, string resourceKey, CultureInfo culture);
    public virtual object GetSection(string sectionName);
    public virtual void RemapHandler(IHttpHandler handler);
    public virtual void RewritePath(string path);
    public virtual void RewritePath(string path, bool rebaseClientPath);
    public virtual void RewritePath(string filePath, string pathInfo, string queryString);
    public virtual void RewritePath(string filePath, string pathInfo, string queryString, bool setClientFilePath);
    public virtual void SetSessionStateBehavior(SessionStateBehavior sessionStateBehavior);
    public virtual object GetService(Type serviceType);
}
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.HttpContextWrapper : HttpContextBase {
    public Exception[] AllErrors { get; }
    [EditorBrowsableAttribute("2")]
public bool AllowAsyncDuringSyncStages { get; public set; }
    public HttpApplicationStateBase Application { get; }
    public HttpApplication ApplicationInstance { get; public set; }
    public AsyncPreloadModeFlags AsyncPreloadMode { get; public set; }
    public Cache Cache { get; }
    public IHttpHandler CurrentHandler { get; }
    public RequestNotification CurrentNotification { get; }
    public Exception Error { get; }
    public IHttpHandler Handler { get; public set; }
    public bool IsCustomErrorEnabled { get; }
    public bool IsDebuggingEnabled { get; }
    public bool IsPostNotification { get; }
    public bool IsWebSocketRequest { get; }
    public bool IsWebSocketRequestUpgrading { get; }
    public IDictionary Items { get; }
    public PageInstrumentationService PageInstrumentation { get; }
    public IHttpHandler PreviousHandler { get; }
    public ProfileBase Profile { get; }
    public HttpRequestBase Request { get; }
    public HttpResponseBase Response { get; }
    public HttpServerUtilityBase Server { get; }
    public HttpSessionStateBase Session { get; }
    public bool SkipAuthorization { get; public set; }
    public DateTime Timestamp { get; }
    public bool ThreadAbortOnTimeout { get; public set; }
    public TraceContext Trace { get; }
    public IPrincipal User { get; public set; }
    public string WebSocketNegotiatedProtocol { get; }
    public IList`1<string> WebSocketRequestedProtocols { get; }
    public HttpContextWrapper(HttpContext httpContext);
    public virtual ISubscriptionToken AddOnRequestCompleted(Action`1<HttpContextBase> callback);
    public virtual Exception[] get_AllErrors();
    public virtual bool get_AllowAsyncDuringSyncStages();
    public virtual void set_AllowAsyncDuringSyncStages(bool value);
    public virtual HttpApplicationStateBase get_Application();
    public virtual HttpApplication get_ApplicationInstance();
    public virtual void set_ApplicationInstance(HttpApplication value);
    public virtual AsyncPreloadModeFlags get_AsyncPreloadMode();
    public virtual void set_AsyncPreloadMode(AsyncPreloadModeFlags value);
    public virtual Cache get_Cache();
    public virtual IHttpHandler get_CurrentHandler();
    public virtual RequestNotification get_CurrentNotification();
    public virtual Exception get_Error();
    public virtual IHttpHandler get_Handler();
    public virtual void set_Handler(IHttpHandler value);
    public virtual bool get_IsCustomErrorEnabled();
    public virtual bool get_IsDebuggingEnabled();
    public virtual bool get_IsPostNotification();
    public virtual bool get_IsWebSocketRequest();
    public virtual bool get_IsWebSocketRequestUpgrading();
    public virtual IDictionary get_Items();
    public virtual PageInstrumentationService get_PageInstrumentation();
    public virtual IHttpHandler get_PreviousHandler();
    public virtual ProfileBase get_Profile();
    public virtual HttpRequestBase get_Request();
    public virtual HttpResponseBase get_Response();
    public virtual HttpServerUtilityBase get_Server();
    public virtual HttpSessionStateBase get_Session();
    public virtual bool get_SkipAuthorization();
    public virtual void set_SkipAuthorization(bool value);
    public virtual DateTime get_Timestamp();
    public virtual bool get_ThreadAbortOnTimeout();
    public virtual void set_ThreadAbortOnTimeout(bool value);
    public virtual TraceContext get_Trace();
    public virtual IPrincipal get_User();
    public virtual void set_User(IPrincipal value);
    public virtual string get_WebSocketNegotiatedProtocol();
    public virtual IList`1<string> get_WebSocketRequestedProtocols();
    public virtual void AcceptWebSocketRequest(Func`2<AspNetWebSocketContext, Task> userFunc);
    public virtual void AcceptWebSocketRequest(Func`2<AspNetWebSocketContext, Task> userFunc, AspNetWebSocketOptions options);
    public virtual void AddError(Exception errorInfo);
    public virtual void ClearError();
    public virtual ISubscriptionToken DisposeOnPipelineCompleted(IDisposable target);
    public virtual object GetGlobalResourceObject(string classKey, string resourceKey);
    public virtual object GetGlobalResourceObject(string classKey, string resourceKey, CultureInfo culture);
    public virtual object GetLocalResourceObject(string virtualPath, string resourceKey);
    public virtual object GetLocalResourceObject(string virtualPath, string resourceKey, CultureInfo culture);
    public virtual object GetSection(string sectionName);
    public virtual void RemapHandler(IHttpHandler handler);
    public virtual void RewritePath(string path);
    public virtual void RewritePath(string path, bool rebaseClientPath);
    public virtual void RewritePath(string filePath, string pathInfo, string queryString);
    public virtual void RewritePath(string filePath, string pathInfo, string queryString, bool setClientFilePath);
    public virtual void SetSessionStateBehavior(SessionStateBehavior sessionStateBehavior);
    public virtual object GetService(Type serviceType);
    internal static Action`1<HttpContext> WrapCallback(Action`1<HttpContextBase> callback);
}
[DefaultMemberAttribute("Item")]
public class System.Web.HttpCookie : object {
    internal bool Changed { get; internal set; }
    internal bool Added { get; internal set; }
    internal bool FromHeader { get; internal set; }
    public string Name { get; public set; }
    public string Path { get; public set; }
    public bool Secure { get; public set; }
    public bool Shareable { get; public set; }
    public bool HttpOnly { get; public set; }
    public string Domain { get; public set; }
    public DateTime Expires { get; public set; }
    public string Value { get; public set; }
    public bool HasKeys { get; }
    public NameValueCollection Values { get; }
    public string Item { get; public set; }
    public HttpCookie(string name);
    public HttpCookie(string name, string value);
    internal bool get_Changed();
    internal void set_Changed(bool value);
    internal bool get_Added();
    internal void set_Added(bool value);
    [CompilerGeneratedAttribute]
internal bool get_FromHeader();
    [CompilerGeneratedAttribute]
internal void set_FromHeader(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Path();
    public void set_Path(string value);
    public bool get_Secure();
    public void set_Secure(bool value);
    [CompilerGeneratedAttribute]
public bool get_Shareable();
    [CompilerGeneratedAttribute]
public void set_Shareable(bool value);
    public bool get_HttpOnly();
    public void set_HttpOnly(bool value);
    public string get_Domain();
    public void set_Domain(string value);
    public DateTime get_Expires();
    public void set_Expires(DateTime value);
    public string get_Value();
    public void set_Value(string value);
    public bool get_HasKeys();
    public NameValueCollection get_Values();
    public string get_Item(string key);
    public void set_Item(string key, string value);
    internal HttpResponseHeader GetSetCookieHeader(HttpContext context);
}
[DefaultMemberAttribute("Item")]
public class System.Web.HttpCookieCollection : NameObjectCollectionBase {
    internal bool Changed { get; internal set; }
    public HttpCookie Item { get; }
    public HttpCookie Item { get; }
    public String[] AllKeys { get; }
    internal HttpCookieCollection(HttpResponse response, bool readOnly);
    internal HttpCookieCollection(HttpCookieCollection col);
    internal bool get_Changed();
    internal void set_Changed(bool value);
    internal void AddCookie(HttpCookie cookie, bool append);
    internal void EnableGranularValidation(ValidateStringCallback validationCallback);
    internal void MakeReadOnly();
    internal void RemoveCookie(string name);
    internal void Reset();
    public void Add(HttpCookie cookie);
    public void CopyTo(Array dest, int index);
    public void Set(HttpCookie cookie);
    public void Remove(string name);
    public void Clear();
    public HttpCookie Get(string name);
    public HttpCookie get_Item(string name);
    public HttpCookie Get(int index);
    public string GetKey(int index);
    public HttpCookie get_Item(int index);
    public String[] get_AllKeys();
}
public enum System.Web.HttpCookieMode : Enum {
    public int value__;
    public static HttpCookieMode UseUri;
    public static HttpCookieMode UseCookies;
    public static HttpCookieMode AutoDetect;
    public static HttpCookieMode UseDeviceProfile;
}
internal class System.Web.HttpDebugHandler : object {
    public bool IsReusable { get; }
    private static HttpDebugHandler();
    public sealed virtual void ProcessRequest(HttpContext context);
    public sealed virtual bool get_IsReusable();
}
internal class System.Web.HttpDictionary : NameObjectCollectionBase {
    internal int Size { get; }
    internal int get_Size();
    internal object GetValue(string key);
    internal void SetValue(string key, object value);
    internal object GetValue(int index);
    internal string GetKey(int index);
    internal String[] GetAllKeys();
}
public class System.Web.HttpException : ExternalException {
    public int WebEventCode { get; internal set; }
    public HttpException(string message);
    internal HttpException(string message, Exception innerException, int code);
    public HttpException(string message, int hr);
    public HttpException(string message, Exception innerException);
    public HttpException(int httpCode, string message, Exception innerException);
    public HttpException(int httpCode, string message);
    public HttpException(int httpCode, string message, int hr);
    protected HttpException(SerializationInfo info, StreamingContext context);
    internal static int HResultFromLastError(int lastError);
    public static HttpException CreateFromLastError(string message);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public int GetHttpCode();
    internal void SetFormatter(ErrorFormatter errorFormatter);
    internal static int GetHttpCodeForException(Exception e);
    internal static ErrorFormatter GetErrorFormatter(Exception e);
    public string GetHtmlErrorMessage();
    public int get_WebEventCode();
    internal void set_WebEventCode(int value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.HttpFileCollection : NameObjectCollectionBase {
    public HttpPostedFile Item { get; }
    public HttpPostedFile Item { get; }
    public String[] AllKeys { get; }
    internal HttpFileCollection(HttpFileCollection col);
    public void CopyTo(Array dest, int index);
    internal void AddFile(string key, HttpPostedFile file);
    internal void EnableGranularValidation(ValidateStringCallback validationCallback);
    public HttpPostedFile Get(string name);
    public IList`1<HttpPostedFile> GetMultiple(string name);
    public HttpPostedFile get_Item(string name);
    public HttpPostedFile Get(int index);
    public string GetKey(int index);
    public HttpPostedFile get_Item(int index);
    public String[] get_AllKeys();
}
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public abstract class System.Web.HttpFileCollectionBase : NameObjectCollectionBase {
    public String[] AllKeys { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public HttpPostedFileBase Item { get; }
    public HttpPostedFileBase Item { get; }
    public virtual String[] get_AllKeys();
    public virtual int get_Count();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual HttpPostedFileBase get_Item(string name);
    public virtual HttpPostedFileBase get_Item(int index);
    public virtual void CopyTo(Array dest, int index);
    public virtual HttpPostedFileBase Get(int index);
    public virtual HttpPostedFileBase Get(string name);
    public virtual IList`1<HttpPostedFileBase> GetMultiple(string name);
    public virtual IEnumerator GetEnumerator();
    public virtual string GetKey(int index);
}
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.HttpFileCollectionWrapper : HttpFileCollectionBase {
    public String[] AllKeys { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public KeysCollection Keys { get; }
    public object SyncRoot { get; }
    public HttpPostedFileBase Item { get; }
    public HttpPostedFileBase Item { get; }
    public HttpFileCollectionWrapper(HttpFileCollection httpFileCollection);
    public virtual String[] get_AllKeys();
    public virtual int get_Count();
    public virtual bool get_IsSynchronized();
    public virtual KeysCollection get_Keys();
    public virtual object get_SyncRoot();
    public virtual HttpPostedFileBase get_Item(string name);
    public virtual HttpPostedFileBase get_Item(int index);
    public virtual void CopyTo(Array dest, int index);
    public virtual HttpPostedFileBase Get(int index);
    public virtual HttpPostedFileBase Get(string name);
    public virtual IList`1<HttpPostedFileBase> GetMultiple(string name);
    public virtual IEnumerator GetEnumerator();
    public virtual string GetKey(int index);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual void OnDeserialization(object sender);
}
internal class System.Web.HttpFileResponseElement : object {
    internal string FileName { get; }
    internal long Offset { get; }
    internal HttpFileResponseElement(string filename, long offset, long size, bool isImpersonating, bool supportsLongTransmitFile);
    internal HttpFileResponseElement(string filename, long offset, long size);
    internal string get_FileName();
    internal long get_Offset();
    private sealed virtual override long System.Web.IHttpResponseElement.GetSize();
    private sealed virtual override Byte[] System.Web.IHttpResponseElement.GetBytes();
    private sealed virtual override void System.Web.IHttpResponseElement.Send(HttpWorkerRequest wr);
}
internal class System.Web.HttpForbiddenHandler : object {
    public bool IsReusable { get; }
    public sealed virtual void ProcessRequest(HttpContext context);
    public sealed virtual bool get_IsReusable();
}
internal class System.Web.HttpHeaderCollection : HttpValueCollection {
    internal HttpHeaderCollection(HttpWorkerRequest wr, HttpRequest request, int capacity);
    internal HttpHeaderCollection(HttpWorkerRequest wr, HttpResponse response, int capacity);
    internal HttpHeaderCollection(HttpHeaderCollection col);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual void Add(string name, string value);
    public virtual void Clear();
    internal void ClearInternal();
    public virtual void Set(string name, string value);
    internal void SetHeader(string name, string value, bool replace);
    internal void SynchronizeHeader(string name, string value);
    public virtual void Remove(string name);
}
internal class System.Web.HttpInputStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal HttpInputStream(HttpRawUploadedContent data, int offset, int length);
    protected void Init(HttpRawUploadedContent data, int offset, int length);
    protected void Uninit();
    internal Byte[] GetAsByteArray();
    internal void WriteTo(Stream s);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long length);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class System.Web.HttpInputStreamFilterSource : HttpInputStream {
    internal void SetContent(HttpRawUploadedContent data);
}
internal class System.Web.HttpMethodNotAllowedHandler : object {
    public bool IsReusable { get; }
    public sealed virtual void ProcessRequest(HttpContext context);
    public sealed virtual bool get_IsReusable();
}
[DefaultMemberAttribute("Item")]
public class System.Web.HttpModuleCollection : NameObjectCollectionBase {
    public IHttpModule Item { get; }
    public IHttpModule Item { get; }
    public String[] AllKeys { get; }
    public void CopyTo(Array dest, int index);
    internal void AddModule(string name, IHttpModule m);
    internal void AppendCollection(HttpModuleCollection other);
    public IHttpModule Get(string name);
    public IHttpModule get_Item(string name);
    public IHttpModule Get(int index);
    public string GetKey(int index);
    public IHttpModule get_Item(int index);
    public String[] get_AllKeys();
}
internal class System.Web.HttpMultipartContentTemplateParser : object {
    internal static MultipartContentElement[] Parse(HttpRawUploadedContent data, int length, Byte[] boundary, Encoding encoding);
}
internal class System.Web.HttpNotFoundHandler : object {
    public bool IsReusable { get; }
    public sealed virtual void ProcessRequest(HttpContext context);
    public sealed virtual bool get_IsReusable();
}
internal class System.Web.HttpNotImplementedHandler : object {
    public bool IsReusable { get; }
    public sealed virtual void ProcessRequest(HttpContext context);
    public sealed virtual bool get_IsReusable();
}
public class System.Web.HttpParseException : HttpException {
    public string FileName { get; }
    public string VirtualPath { get; }
    internal VirtualPath VirtualPathObject { get; }
    public int Line { get; }
    public ParserErrorCollection ParserErrors { get; }
    public HttpParseException(string message);
    public HttpParseException(string message, Exception innerException);
    public HttpParseException(string message, Exception innerException, string virtualPath, string sourceCode, int line);
    internal HttpParseException(string message, Exception innerException, VirtualPath virtualPath, string sourceCode, int line);
    private HttpParseException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_FileName();
    public string get_VirtualPath();
    internal VirtualPath get_VirtualPathObject();
    public int get_Line();
    public ParserErrorCollection get_ParserErrors();
}
public class System.Web.HttpPostedFile : object {
    public string FileName { get; }
    public string ContentType { get; }
    public int ContentLength { get; }
    public Stream InputStream { get; }
    internal HttpPostedFile(string filename, string contentType, HttpInputStream stream);
    public string get_FileName();
    public string get_ContentType();
    public int get_ContentLength();
    public Stream get_InputStream();
    public void SaveAs(string filename);
}
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public abstract class System.Web.HttpPostedFileBase : object {
    public int ContentLength { get; }
    public string ContentType { get; }
    public string FileName { get; }
    public Stream InputStream { get; }
    public virtual int get_ContentLength();
    public virtual string get_ContentType();
    public virtual string get_FileName();
    public virtual Stream get_InputStream();
    public virtual void SaveAs(string filename);
}
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.HttpPostedFileWrapper : HttpPostedFileBase {
    public int ContentLength { get; }
    public string ContentType { get; }
    public string FileName { get; }
    public Stream InputStream { get; }
    public HttpPostedFileWrapper(HttpPostedFile httpPostedFile);
    public virtual int get_ContentLength();
    public virtual string get_ContentType();
    public virtual string get_FileName();
    public virtual Stream get_InputStream();
    public virtual void SaveAs(string filename);
}
internal class System.Web.HttpRawResponse : object {
    internal int StatusCode { get; }
    internal string StatusDescription { get; }
    internal ArrayList Headers { get; }
    internal ArrayList Buffers { get; }
    internal bool HasSubstBlocks { get; }
    internal HttpRawResponse(int statusCode, string statusDescription, ArrayList headers, ArrayList buffers, bool hasSubstBlocks);
    internal int get_StatusCode();
    internal string get_StatusDescription();
    internal ArrayList get_Headers();
    internal ArrayList get_Buffers();
    internal bool get_HasSubstBlocks();
}
[DefaultMemberAttribute("Item")]
internal class System.Web.HttpRawUploadedContent : object {
    internal int Length { get; }
    internal byte Item { get; }
    internal HttpRawUploadedContent(int fileThreshold, int expectedLength);
    public sealed virtual void Dispose();
    internal void AddBytes(Byte[] data, int offset, int length);
    internal void DoneAddingBytes();
    internal int get_Length();
    internal byte get_Item(int index);
    internal void CopyBytes(int offset, Byte[] buffer, int bufferOffset, int length);
    internal void WriteBytes(int offset, int length, Stream stream);
    internal Byte[] GetAsByteArray();
    internal Byte[] GetAsByteArray(int offset, int length);
}
[DefaultMemberAttribute("Item")]
public class System.Web.HttpRequest : object {
    internal static object s_browserLock;
    internal static bool s_browserCapsEvaled;
    internal bool NeedToInsertEntityBody { get; internal set; }
    internal Byte[] EntityBody { get; }
    internal string ClientTarget { get; internal set; }
    internal HttpContext Context { get; internal set; }
    public RequestContext RequestContext { get; public set; }
    internal HttpResponse Response { get; }
    public bool IsLocal { get; }
    public string HttpMethod { get; }
    internal HttpVerb HttpVerb { get; }
    internal bool IsDebuggingRequest { get; }
    public string RequestType { get; public set; }
    public string ContentType { get; public set; }
    public int ContentLength { get; }
    public Encoding ContentEncoding { get; public set; }
    internal Encoding QueryStringEncoding { get; }
    public String[] AcceptTypes { get; }
    public bool IsAuthenticated { get; }
    public bool IsSecureConnection { get; }
    public string Path { get; }
    internal VirtualPath PathObject { get; }
    public string AnonymousID { get; internal set; }
    internal string PathWithQueryString { get; }
    internal VirtualPath ClientFilePath { get; internal set; }
    internal VirtualPath ClientBaseDir { get; }
    public string FilePath { get; }
    internal VirtualPath FilePathObject { get; }
    public string CurrentExecutionFilePath { get; }
    public string CurrentExecutionFilePathExtension { get; }
    internal VirtualPath CurrentExecutionFilePathObject { get; }
    public string AppRelativeCurrentExecutionFilePath { get; }
    public string PathInfo { get; }
    internal VirtualPath PathInfoObject { get; }
    public string PhysicalPath { get; }
    internal string PhysicalPathInternal { get; }
    public string ApplicationPath { get; }
    internal VirtualPath ApplicationPathObject { get; }
    public string PhysicalApplicationPath { get; }
    public string UserAgent { get; }
    public String[] UserLanguages { get; }
    public HttpBrowserCapabilities Browser { get; public set; }
    public string UserHostName { get; }
    public string UserHostAddress { get; }
    public string RawUrl { get; internal set; }
    internal string UrlInternal { get; }
    public Uri Url { get; }
    public Uri UrlReferrer { get; }
    internal string IfModifiedSince { get; }
    internal string IfNoneMatch { get; }
    public NameValueCollection Params { get; }
    public string Item { get; }
    internal string QueryStringText { get; internal set; }
    internal Byte[] QueryStringBytes { get; }
    public NameValueCollection QueryString { get; }
    internal bool HasQueryString { get; }
    public NameValueCollection Form { get; }
    internal bool HasForm { get; }
    public NameValueCollection Headers { get; }
    public UnvalidatedRequestValues Unvalidated { get; }
    public NameValueCollection ServerVariables { get; }
    public HttpCookieCollection Cookies { get; }
    public HttpFileCollection Files { get; }
    public Stream InputStream { get; }
    public int TotalBytes { get; }
    public Stream Filter { get; public set; }
    public HttpClientCertificate ClientCertificate { get; }
    public WindowsIdentity LogonUserIdentity { get; }
    internal bool ValidateInputWasCalled { get; }
    internal string RewrittenUrl { get; }
    public ChannelBinding HttpChannelBinding { get; }
    public ITlsTokenBindingInfo TlsTokenBindingInfo { get; }
    public ReadEntityBodyMode ReadEntityBodyMode { get; }
    public CancellationToken TimedOutToken { get; }
    internal HttpRequest(HttpWorkerRequest wr, HttpContext context);
    public HttpRequest(string filename, string url, string queryString);
    internal HttpRequest(VirtualPath virtualPath, string queryString);
    private static HttpRequest();
    internal bool get_NeedToInsertEntityBody();
    internal void set_NeedToInsertEntityBody(bool value);
    internal void SetRawContent(HttpRawUploadedContent rawContent);
    internal Byte[] get_EntityBody();
    internal string get_ClientTarget();
    internal void set_ClientTarget(string value);
    internal HttpContext get_Context();
    internal void set_Context(HttpContext value);
    public RequestContext get_RequestContext();
    public void set_RequestContext(RequestContext value);
    internal HttpResponse get_Response();
    public bool get_IsLocal();
    internal void Dispose();
    internal static String[] ParseMultivalueHeader(string s);
    internal string CalcDynamicServerVariable(DynamicServerVariable var);
    internal void FillInServerVariablesCollection();
    internal static HttpCookie CreateCookieFromString(string s);
    internal void FillInCookiesCollection(HttpCookieCollection cookieCollection, bool includeResponse);
    internal void StoreReferenceToResponseCookies(HttpCookieCollection responseCookies);
    internal void AddResponseCookie(HttpCookie cookie);
    internal void ResetCookies();
    public string get_HttpMethod();
    internal HttpVerb get_HttpVerb();
    internal bool get_IsDebuggingRequest();
    public string get_RequestType();
    public void set_RequestType(string value);
    public string get_ContentType();
    public void set_ContentType(string value);
    public int get_ContentLength();
    public Encoding get_ContentEncoding();
    public void set_ContentEncoding(Encoding value);
    internal Encoding get_QueryStringEncoding();
    public String[] get_AcceptTypes();
    public bool get_IsAuthenticated();
    public bool get_IsSecureConnection();
    public string get_Path();
    internal VirtualPath get_PathObject();
    internal string GetUnvalidatedPath();
    public string get_AnonymousID();
    internal void set_AnonymousID(string value);
    internal string get_PathWithQueryString();
    internal VirtualPath get_ClientFilePath();
    internal void set_ClientFilePath(VirtualPath value);
    internal VirtualPath get_ClientBaseDir();
    public string get_FilePath();
    internal VirtualPath get_FilePathObject();
    public string get_CurrentExecutionFilePath();
    public string get_CurrentExecutionFilePathExtension();
    internal VirtualPath get_CurrentExecutionFilePathObject();
    internal VirtualPath SwitchCurrentExecutionFilePath(VirtualPath path);
    public string get_AppRelativeCurrentExecutionFilePath();
    public string get_PathInfo();
    internal VirtualPath get_PathInfoObject();
    internal string GetUnvalidatedPathInfo();
    public string get_PhysicalPath();
    internal string get_PhysicalPathInternal();
    public string get_ApplicationPath();
    internal VirtualPath get_ApplicationPathObject();
    public string get_PhysicalApplicationPath();
    public string get_UserAgent();
    public String[] get_UserLanguages();
    public HttpBrowserCapabilities get_Browser();
    public void set_Browser(HttpBrowserCapabilities value);
    public string get_UserHostName();
    public string get_UserHostAddress();
    public string get_RawUrl();
    internal void set_RawUrl(string value);
    internal string EnsureRawUrl();
    internal string get_UrlInternal();
    public Uri get_Url();
    internal Uri BuildUrl(Func`1<string> pathAccessor);
    public Uri get_UrlReferrer();
    internal string get_IfModifiedSince();
    internal string get_IfNoneMatch();
    public NameValueCollection get_Params();
    internal void InvalidateParams();
    public string get_Item(string key);
    internal string get_QueryStringText();
    internal void set_QueryStringText(string value);
    internal Byte[] get_QueryStringBytes();
    public NameValueCollection get_QueryString();
    internal HttpValueCollection EnsureQueryString();
    internal bool get_HasQueryString();
    public NameValueCollection get_Form();
    internal HttpValueCollection EnsureForm();
    internal bool get_HasForm();
    internal HttpValueCollection SwitchForm(HttpValueCollection form);
    public NameValueCollection get_Headers();
    internal HttpHeaderCollection EnsureHeaders();
    public UnvalidatedRequestValues get_Unvalidated();
    public NameValueCollection get_ServerVariables();
    internal NameValueCollection GetServerVarsWithoutDemand();
    internal void SetSkipAuthorization(bool value);
    internal void SetDynamicCompression(bool enable);
    internal void AppendToLogQueryString(string logData);
    public HttpCookieCollection get_Cookies();
    internal HttpCookieCollection EnsureCookies();
    public HttpFileCollection get_Files();
    internal HttpFileCollection EnsureFiles();
    public Stream get_InputStream();
    public int get_TotalBytes();
    public Byte[] BinaryRead(int count);
    public Stream get_Filter();
    public void set_Filter(Stream value);
    public HttpClientCertificate get_ClientCertificate();
    public WindowsIdentity get_LogonUserIdentity();
    public void ValidateInput();
    internal bool get_ValidateInputWasCalled();
    internal void ValidateInputIfRequiredByConfig();
    internal void ValidateCookielessHeaderIfRequiredByConfig(string header);
    internal void EnableGranularRequestValidation();
    internal void ClearReferencesForWebSocketProcessing();
    public Int32[] MapImageCoordinates(string imageFieldName);
    public Double[] MapRawImageCoordinates(string imageFieldName);
    internal static Double[] MapImageCoordinatatesInternal(string imageFieldName, HttpVerb verb, NameValueCollection queryString, NameValueCollection form);
    public void SaveAs(string filename, bool includeHeaders);
    public string MapPath(string virtualPath);
    internal string MapPath(VirtualPath virtualPath);
    public string MapPath(string virtualPath, string baseVirtualDir, bool allowCrossAppMapping);
    internal string MapPath(VirtualPath virtualPath, VirtualPath baseVirtualDir, bool allowCrossAppMapping);
    internal void InternalRewritePath(VirtualPath newPath, string newQueryString, bool rebaseClientPath);
    internal void InternalRewritePath(VirtualPath newFilePath, VirtualPath newPathInfo, string newQueryString, bool setClientFilePath);
    internal string get_RewrittenUrl();
    internal string FetchServerVariable(string variable);
    internal void SynchronizeServerVariable(string name, string value);
    internal void SynchronizeHeader(string name, string value);
    public ChannelBinding get_HttpChannelBinding();
    public ITlsTokenBindingInfo get_TlsTokenBindingInfo();
    public void InsertEntityBody(Byte[] buffer, int offset, int count);
    public void InsertEntityBody();
    public ReadEntityBodyMode get_ReadEntityBodyMode();
    public Stream GetBufferlessInputStream();
    public Stream GetBufferlessInputStream(bool disableMaxRequestLength);
    public Stream GetBufferedInputStream();
    public void Abort();
    internal void EnsureHasNotTransitionedToWebSocket();
    public CancellationToken get_TimedOutToken();
}
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public abstract class System.Web.HttpRequestBase : object {
    public String[] AcceptTypes { get; }
    public string ApplicationPath { get; }
    public string AnonymousID { get; }
    public string AppRelativeCurrentExecutionFilePath { get; }
    public HttpBrowserCapabilitiesBase Browser { get; }
    public ChannelBinding HttpChannelBinding { get; }
    public HttpClientCertificate ClientCertificate { get; }
    public Encoding ContentEncoding { get; public set; }
    public int ContentLength { get; }
    public string ContentType { get; public set; }
    public HttpCookieCollection Cookies { get; }
    public string CurrentExecutionFilePath { get; }
    public string CurrentExecutionFilePathExtension { get; }
    public string FilePath { get; }
    public HttpFileCollectionBase Files { get; }
    public Stream Filter { get; public set; }
    public NameValueCollection Form { get; }
    public string HttpMethod { get; }
    public Stream InputStream { get; }
    public bool IsAuthenticated { get; }
    public bool IsLocal { get; }
    public bool IsSecureConnection { get; }
    public WindowsIdentity LogonUserIdentity { get; }
    public NameValueCollection Params { get; }
    public string Path { get; }
    public string PathInfo { get; }
    public string PhysicalApplicationPath { get; }
    public string PhysicalPath { get; }
    public string RawUrl { get; }
    public ReadEntityBodyMode ReadEntityBodyMode { get; }
    public RequestContext RequestContext { get; public set; }
    public string RequestType { get; public set; }
    public NameValueCollection ServerVariables { get; }
    public CancellationToken TimedOutToken { get; }
    public ITlsTokenBindingInfo TlsTokenBindingInfo { get; }
    public int TotalBytes { get; }
    public UnvalidatedRequestValuesBase Unvalidated { get; }
    public Uri Url { get; }
    public Uri UrlReferrer { get; }
    public string UserAgent { get; }
    public String[] UserLanguages { get; }
    public string UserHostAddress { get; }
    public string UserHostName { get; }
    public NameValueCollection Headers { get; }
    public NameValueCollection QueryString { get; }
    public string Item { get; }
    public virtual String[] get_AcceptTypes();
    public virtual string get_ApplicationPath();
    public virtual string get_AnonymousID();
    public virtual string get_AppRelativeCurrentExecutionFilePath();
    public virtual HttpBrowserCapabilitiesBase get_Browser();
    public virtual ChannelBinding get_HttpChannelBinding();
    public virtual HttpClientCertificate get_ClientCertificate();
    public virtual Encoding get_ContentEncoding();
    public virtual void set_ContentEncoding(Encoding value);
    public virtual int get_ContentLength();
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public virtual HttpCookieCollection get_Cookies();
    public virtual string get_CurrentExecutionFilePath();
    public virtual string get_CurrentExecutionFilePathExtension();
    public virtual string get_FilePath();
    public virtual HttpFileCollectionBase get_Files();
    public virtual Stream get_Filter();
    public virtual void set_Filter(Stream value);
    public virtual NameValueCollection get_Form();
    public virtual string get_HttpMethod();
    public virtual Stream get_InputStream();
    public virtual bool get_IsAuthenticated();
    public virtual bool get_IsLocal();
    public virtual bool get_IsSecureConnection();
    public virtual WindowsIdentity get_LogonUserIdentity();
    public virtual NameValueCollection get_Params();
    public virtual string get_Path();
    public virtual string get_PathInfo();
    public virtual string get_PhysicalApplicationPath();
    public virtual string get_PhysicalPath();
    public virtual string get_RawUrl();
    public virtual ReadEntityBodyMode get_ReadEntityBodyMode();
    public virtual RequestContext get_RequestContext();
    public virtual void set_RequestContext(RequestContext value);
    public virtual string get_RequestType();
    public virtual void set_RequestType(string value);
    public virtual NameValueCollection get_ServerVariables();
    public virtual CancellationToken get_TimedOutToken();
    public virtual ITlsTokenBindingInfo get_TlsTokenBindingInfo();
    public virtual int get_TotalBytes();
    public virtual UnvalidatedRequestValuesBase get_Unvalidated();
    public virtual Uri get_Url();
    public virtual Uri get_UrlReferrer();
    public virtual string get_UserAgent();
    public virtual String[] get_UserLanguages();
    public virtual string get_UserHostAddress();
    public virtual string get_UserHostName();
    public virtual NameValueCollection get_Headers();
    public virtual NameValueCollection get_QueryString();
    public virtual string get_Item(string key);
    public virtual void Abort();
    public virtual Byte[] BinaryRead(int count);
    public virtual Stream GetBufferedInputStream();
    public virtual Stream GetBufferlessInputStream();
    public virtual Stream GetBufferlessInputStream(bool disableMaxRequestLength);
    public virtual void InsertEntityBody();
    public virtual void InsertEntityBody(Byte[] buffer, int offset, int count);
    public virtual Int32[] MapImageCoordinates(string imageFieldName);
    public virtual Double[] MapRawImageCoordinates(string imageFieldName);
    public virtual string MapPath(string virtualPath);
    public virtual string MapPath(string virtualPath, string baseVirtualDir, bool allowCrossAppMapping);
    public virtual void ValidateInput();
    public virtual void SaveAs(string filename, bool includeHeaders);
}
public class System.Web.HttpRequestValidationException : HttpException {
    public HttpRequestValidationException(string message);
    public HttpRequestValidationException(string message, Exception innerException);
    private HttpRequestValidationException(SerializationInfo info, StreamingContext context);
}
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.HttpRequestWrapper : HttpRequestBase {
    public HttpBrowserCapabilitiesBase Browser { get; }
    public NameValueCollection Params { get; }
    public string Path { get; }
    public string FilePath { get; }
    public NameValueCollection Headers { get; }
    public NameValueCollection QueryString { get; }
    public String[] AcceptTypes { get; }
    public string ApplicationPath { get; }
    public string AnonymousID { get; }
    public string AppRelativeCurrentExecutionFilePath { get; }
    public ChannelBinding HttpChannelBinding { get; }
    public HttpClientCertificate ClientCertificate { get; }
    public Encoding ContentEncoding { get; public set; }
    public int ContentLength { get; }
    public string ContentType { get; public set; }
    public HttpCookieCollection Cookies { get; }
    public string CurrentExecutionFilePath { get; }
    public string CurrentExecutionFilePathExtension { get; }
    public HttpFileCollectionBase Files { get; }
    public Stream Filter { get; public set; }
    public NameValueCollection Form { get; }
    public string HttpMethod { get; }
    public Stream InputStream { get; }
    public bool IsAuthenticated { get; }
    public bool IsLocal { get; }
    public bool IsSecureConnection { get; }
    public WindowsIdentity LogonUserIdentity { get; }
    public string PathInfo { get; }
    public string PhysicalApplicationPath { get; }
    public string PhysicalPath { get; }
    public string RawUrl { get; }
    public ReadEntityBodyMode ReadEntityBodyMode { get; }
    public RequestContext RequestContext { get; public set; }
    public string RequestType { get; public set; }
    public NameValueCollection ServerVariables { get; }
    public CancellationToken TimedOutToken { get; }
    public ITlsTokenBindingInfo TlsTokenBindingInfo { get; }
    public int TotalBytes { get; }
    public UnvalidatedRequestValuesBase Unvalidated { get; }
    public Uri Url { get; }
    public Uri UrlReferrer { get; }
    public string UserAgent { get; }
    public String[] UserLanguages { get; }
    public string UserHostAddress { get; }
    public string UserHostName { get; }
    public string Item { get; }
    public HttpRequestWrapper(HttpRequest httpRequest);
    public virtual HttpBrowserCapabilitiesBase get_Browser();
    public virtual NameValueCollection get_Params();
    public virtual string get_Path();
    public virtual string get_FilePath();
    public virtual NameValueCollection get_Headers();
    public virtual NameValueCollection get_QueryString();
    public virtual String[] get_AcceptTypes();
    public virtual string get_ApplicationPath();
    public virtual string get_AnonymousID();
    public virtual string get_AppRelativeCurrentExecutionFilePath();
    public virtual ChannelBinding get_HttpChannelBinding();
    public virtual HttpClientCertificate get_ClientCertificate();
    public virtual Encoding get_ContentEncoding();
    public virtual void set_ContentEncoding(Encoding value);
    public virtual int get_ContentLength();
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public virtual HttpCookieCollection get_Cookies();
    public virtual string get_CurrentExecutionFilePath();
    public virtual string get_CurrentExecutionFilePathExtension();
    public virtual HttpFileCollectionBase get_Files();
    public virtual Stream get_Filter();
    public virtual void set_Filter(Stream value);
    public virtual NameValueCollection get_Form();
    public virtual string get_HttpMethod();
    public virtual Stream get_InputStream();
    public virtual bool get_IsAuthenticated();
    public virtual bool get_IsLocal();
    public virtual bool get_IsSecureConnection();
    public virtual WindowsIdentity get_LogonUserIdentity();
    public virtual string get_PathInfo();
    public virtual string get_PhysicalApplicationPath();
    public virtual string get_PhysicalPath();
    public virtual string get_RawUrl();
    public virtual ReadEntityBodyMode get_ReadEntityBodyMode();
    public virtual RequestContext get_RequestContext();
    public virtual void set_RequestContext(RequestContext value);
    public virtual string get_RequestType();
    public virtual void set_RequestType(string value);
    public virtual NameValueCollection get_ServerVariables();
    public virtual CancellationToken get_TimedOutToken();
    public virtual ITlsTokenBindingInfo get_TlsTokenBindingInfo();
    public virtual int get_TotalBytes();
    public virtual UnvalidatedRequestValuesBase get_Unvalidated();
    public virtual Uri get_Url();
    public virtual Uri get_UrlReferrer();
    public virtual string get_UserAgent();
    public virtual String[] get_UserLanguages();
    public virtual string get_UserHostAddress();
    public virtual string get_UserHostName();
    public virtual string get_Item(string key);
    public virtual void Abort();
    public virtual Byte[] BinaryRead(int count);
    public virtual Stream GetBufferedInputStream();
    public virtual Stream GetBufferlessInputStream();
    public virtual Stream GetBufferlessInputStream(bool disableMaxRequestLength);
    public virtual void InsertEntityBody();
    public virtual void InsertEntityBody(Byte[] buffer, int offset, int count);
    public virtual Int32[] MapImageCoordinates(string imageFieldName);
    public virtual Double[] MapRawImageCoordinates(string imageFieldName);
    public virtual string MapPath(string virtualPath);
    public virtual string MapPath(string virtualPath, string baseVirtualDir, bool allowCrossAppMapping);
    public virtual void ValidateInput();
    public virtual void SaveAs(string filename, bool includeHeaders);
}
internal class System.Web.HttpResourceResponseElement : object {
    internal HttpResourceResponseElement(IntPtr data, int offset, int size);
    private sealed virtual override long System.Web.IHttpResponseElement.GetSize();
    private sealed virtual override Byte[] System.Web.IHttpResponseElement.GetBytes();
    private sealed virtual override void System.Web.IHttpResponseElement.Send(HttpWorkerRequest wr);
}
public class System.Web.HttpResponse : object {
    internal static string RedirectQueryStringVariable;
    internal static string RedirectQueryStringValue;
    internal static string RedirectQueryStringAssignment;
    internal HttpContext Context { get; internal set; }
    internal HttpRequest Request { get; }
    public bool HeadersWritten { get; internal set; }
    internal bool UseAdaptiveError { get; internal set; }
    public bool SupportsAsyncFlush { get; }
    public HttpCookieCollection Cookies { get; }
    public NameValueCollection Headers { get; }
    public int StatusCode { get; public set; }
    public int SubStatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public bool TrySkipIisCustomErrors { get; public set; }
    public bool SuppressFormsAuthenticationRedirect { get; public set; }
    public bool SuppressDefaultCacheControlHeader { get; public set; }
    public bool BufferOutput { get; public set; }
    public string ContentType { get; public set; }
    public string Charset { get; public set; }
    public Encoding ContentEncoding { get; public set; }
    public Encoding HeaderEncoding { get; public set; }
    internal Encoder ContentEncoder { get; }
    public HttpCachePolicy Cache { get; }
    internal bool HasCachePolicy { get; }
    public bool IsClientConnected { get; }
    public CancellationToken ClientDisconnectedToken { get; }
    public bool IsRequestBeingRedirected { get; internal set; }
    public string RedirectLocation { get; public set; }
    public TextWriter Output { get; public set; }
    public Stream OutputStream { get; }
    public Stream Filter { get; public set; }
    public bool SuppressContent { get; public set; }
    internal bool CanExecuteUrlForEntireResponse { get; }
    public string Status { get; public set; }
    public bool Buffer { get; public set; }
    public int Expires { get; public set; }
    public DateTime ExpiresAbsolute { get; public set; }
    public string CacheControl { get; public set; }
    internal bool UsePathModifier { get; }
    internal HttpResponse(HttpWorkerRequest wr, HttpContext context);
    public HttpResponse(TextWriter writer);
    private static HttpResponse();
    [CompilerGeneratedAttribute]
internal static void add_Redirecting(EventHandler value);
    [CompilerGeneratedAttribute]
internal static void remove_Redirecting(EventHandler value);
    internal HttpContext get_Context();
    internal void set_Context(HttpContext value);
    internal HttpRequest get_Request();
    internal void SetAllocatorProvider(IAllocatorProvider allocator);
    internal void Dispose();
    internal void InitResponseWriter();
    public bool get_HeadersWritten();
    internal void set_HeadersWritten(bool value);
    internal ArrayList GenerateResponseHeadersIntegrated(bool forCache);
    internal void GenerateResponseHeadersForCookies();
    internal void GenerateResponseHeadersForHandler();
    internal ArrayList GenerateResponseHeaders(bool forCache);
    internal string AppendCharSetToContentType(string contentType);
    internal bool get_UseAdaptiveError();
    internal void set_UseAdaptiveError(bool value);
    internal int GetBufferedLength();
    internal void FinalFlushAtTheEndOfRequestProcessing();
    internal void FinalFlushAtTheEndOfRequestProcessing(bool needPipelineCompletion);
    public bool get_SupportsAsyncFlush();
    public IAsyncResult BeginFlush(AsyncCallback callback, object state);
    public void EndFlush(IAsyncResult asyncResult);
    public Task FlushAsync();
    internal string SetupKernelCaching(string originalCacheUrl);
    public void DisableKernelCache();
    public void DisableUserCache();
    internal void FilterOutput();
    internal void IgnoreFurtherWrites();
    internal bool IsBuffered();
    public HttpCookieCollection get_Cookies();
    internal bool ContainsNonShareableCookies();
    internal HttpCookieCollection GetCookiesNoCreate();
    public NameValueCollection get_Headers();
    public void AddFileDependency(string filename);
    public void AddFileDependencies(ArrayList filenames);
    public void AddFileDependencies(String[] filenames);
    internal void AddVirtualPathDependencies(String[] virtualPaths);
    internal void AddFileDependencies(String[] filenames, DateTime utcTime);
    public void AddCacheItemDependency(string cacheKey);
    public void AddCacheItemDependencies(ArrayList cacheKeys);
    public void AddCacheItemDependencies(String[] cacheKeys);
    public void AddCacheDependency(CacheDependency[] dependencies);
    public static void RemoveOutputCacheItem(string path);
    public static void RemoveOutputCacheItem(string path, string providerName);
    internal bool HasFileDependencies();
    internal bool HasCacheItemDependencies();
    internal CacheDependency CreateCacheDependencyForResponse();
    internal HttpRawResponse GetSnapshot();
    internal void UseSnapshot(HttpRawResponse rawResponse, bool sendBody);
    internal void SetResponseBuffers(ArrayList buffers);
    internal void CloseConnectionAfterError();
    internal void SetOverrideErrorFormatter(ErrorFormatter errorFormatter);
    internal ErrorFormatter GetErrorFormatter(Exception e);
    internal void ReportRuntimeError(Exception e, bool canThrow, bool localExecute);
    internal void SynchronizeStatus(int statusCode, int subStatusCode, string description);
    internal void SynchronizeHeader(int knownHeaderIndex, string name, string value);
    internal void SyncStatusIntegrated();
    public int get_StatusCode();
    public void set_StatusCode(int value);
    public int get_SubStatusCode();
    public void set_SubStatusCode(int value);
    internal void SetStatusCode(int statusCode, int subStatus);
    public string get_StatusDescription();
    public void set_StatusDescription(string value);
    public bool get_TrySkipIisCustomErrors();
    public void set_TrySkipIisCustomErrors(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressFormsAuthenticationRedirect();
    [CompilerGeneratedAttribute]
public void set_SuppressFormsAuthenticationRedirect(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressDefaultCacheControlHeader();
    [CompilerGeneratedAttribute]
public void set_SuppressDefaultCacheControlHeader(bool value);
    public bool get_BufferOutput();
    public void set_BufferOutput(bool value);
    internal string GetHttpHeaderContentEncoding();
    public string get_ContentType();
    public void set_ContentType(string value);
    public string get_Charset();
    public void set_Charset(string value);
    public Encoding get_ContentEncoding();
    public void set_ContentEncoding(Encoding value);
    public Encoding get_HeaderEncoding();
    public void set_HeaderEncoding(Encoding value);
    internal Encoder get_ContentEncoder();
    public HttpCachePolicy get_Cache();
    internal bool get_HasCachePolicy();
    public bool get_IsClientConnected();
    public CancellationToken get_ClientDisconnectedToken();
    public bool get_IsRequestBeingRedirected();
    internal void set_IsRequestBeingRedirected(bool value);
    public string get_RedirectLocation();
    public void set_RedirectLocation(string value);
    public void Close();
    public TextWriter get_Output();
    public void set_Output(TextWriter value);
    internal TextWriter SwitchWriter(TextWriter writer);
    public Stream get_OutputStream();
    public void BinaryWrite(Byte[] buffer);
    public void Pics(string value);
    public Stream get_Filter();
    public void set_Filter(Stream value);
    public bool get_SuppressContent();
    public void set_SuppressContent(bool value);
    public void AppendHeader(string name, string value);
    public void AppendCookie(HttpCookie cookie);
    public void SetCookie(HttpCookie cookie);
    internal void BeforeCookieCollectionChange();
    internal void OnCookieAdd(HttpCookie cookie);
    internal void OnCookieCollectionChange();
    public void ClearHeaders();
    public void ClearContent();
    public void Clear();
    internal void ClearAll();
    public void Flush();
    public ISubscriptionToken AddOnSendingHeaders(Action`1<HttpContext> callback);
    public void AppendToLog(string param);
    public void Redirect(string url);
    public void Redirect(string url, bool endResponse);
    public void RedirectToRoute(object routeValues);
    public void RedirectToRoute(string routeName);
    public void RedirectToRoute(RouteValueDictionary routeValues);
    public void RedirectToRoute(string routeName, object routeValues);
    public void RedirectToRoute(string routeName, RouteValueDictionary routeValues);
    public void RedirectToRoutePermanent(object routeValues);
    public void RedirectToRoutePermanent(string routeName);
    public void RedirectToRoutePermanent(RouteValueDictionary routeValues);
    public void RedirectToRoutePermanent(string routeName, object routeValues);
    public void RedirectToRoutePermanent(string routeName, RouteValueDictionary routeValues);
    public void RedirectPermanent(string url);
    public void RedirectPermanent(string url, bool endResponse);
    internal void Redirect(string url, bool endResponse, bool permanent);
    internal string ApplyRedirectQueryStringIfRequired(string url);
    internal RedirectToErrorPageStatus RedirectToErrorPage(string url, CustomErrorsRedirectMode redirectMode);
    internal bool get_CanExecuteUrlForEntireResponse();
    internal IAsyncResult BeginExecuteUrlForEntireResponse(string pathOverride, NameValueCollection requestHeaders, AsyncCallback cb, object state);
    internal void EndExecuteUrlForEntireResponse(IAsyncResult result);
    public void Write(string s);
    public void Write(object obj);
    public void Write(char ch);
    public void Write(Char[] buffer, int index, int count);
    public void WriteSubstitution(HttpResponseSubstitutionCallback callback);
    internal void WriteVirtualFile(VirtualFile vf);
    public void WriteFile(string filename);
    public void WriteFile(string filename, bool readIntoMemory);
    public void TransmitFile(string filename);
    public void TransmitFile(string filename, long offset, long length);
    public void WriteFile(string filename, long offset, long size);
    public void WriteFile(IntPtr fileHandle, long offset, long size);
    public void PushPromise(string path);
    public void PushPromise(string path, string method, NameValueCollection headers);
    public string get_Status();
    public void set_Status(string value);
    public bool get_Buffer();
    public void set_Buffer(bool value);
    public void AddHeader(string name, string value);
    public void End();
    internal void ObserveResponseEndCalled();
    public int get_Expires();
    public void set_Expires(int value);
    public DateTime get_ExpiresAbsolute();
    public void set_ExpiresAbsolute(DateTime value);
    public string get_CacheControl();
    public void set_CacheControl(string value);
    internal void SetAppPathModifier(string appPathModifier);
    public string ApplyAppPathModifier(string virtualPath);
    internal string RemoveAppPathModifier(string virtualPath);
    internal bool get_UsePathModifier();
    internal void UpdateNativeResponse(bool sendHeaders);
}
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public abstract class System.Web.HttpResponseBase : object {
    public bool Buffer { get; public set; }
    public bool BufferOutput { get; public set; }
    public HttpCachePolicyBase Cache { get; }
    public string CacheControl { get; public set; }
    public string Charset { get; public set; }
    public CancellationToken ClientDisconnectedToken { get; }
    public Encoding ContentEncoding { get; public set; }
    public string ContentType { get; public set; }
    public HttpCookieCollection Cookies { get; }
    public int Expires { get; public set; }
    public DateTime ExpiresAbsolute { get; public set; }
    public Stream Filter { get; public set; }
    public NameValueCollection Headers { get; }
    public bool HeadersWritten { get; }
    public Encoding HeaderEncoding { get; public set; }
    public bool IsClientConnected { get; }
    public bool IsRequestBeingRedirected { get; }
    public TextWriter Output { get; public set; }
    public Stream OutputStream { get; }
    public string RedirectLocation { get; public set; }
    public string Status { get; public set; }
    public int StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public int SubStatusCode { get; public set; }
    public bool SupportsAsyncFlush { get; }
    public bool SuppressContent { get; public set; }
    public bool SuppressDefaultCacheControlHeader { get; public set; }
    public bool SuppressFormsAuthenticationRedirect { get; public set; }
    public bool TrySkipIisCustomErrors { get; public set; }
    public virtual bool get_Buffer();
    public virtual void set_Buffer(bool value);
    public virtual bool get_BufferOutput();
    public virtual void set_BufferOutput(bool value);
    public virtual HttpCachePolicyBase get_Cache();
    public virtual string get_CacheControl();
    public virtual void set_CacheControl(string value);
    public virtual string get_Charset();
    public virtual void set_Charset(string value);
    public virtual CancellationToken get_ClientDisconnectedToken();
    public virtual void set_ContentEncoding(Encoding value);
    public virtual Encoding get_ContentEncoding();
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public virtual HttpCookieCollection get_Cookies();
    public virtual int get_Expires();
    public virtual void set_Expires(int value);
    public virtual DateTime get_ExpiresAbsolute();
    public virtual void set_ExpiresAbsolute(DateTime value);
    public virtual Stream get_Filter();
    public virtual void set_Filter(Stream value);
    public virtual NameValueCollection get_Headers();
    public virtual bool get_HeadersWritten();
    public virtual void set_HeaderEncoding(Encoding value);
    public virtual Encoding get_HeaderEncoding();
    public virtual bool get_IsClientConnected();
    public virtual bool get_IsRequestBeingRedirected();
    public virtual TextWriter get_Output();
    public virtual void set_Output(TextWriter value);
    public virtual Stream get_OutputStream();
    public virtual string get_RedirectLocation();
    public virtual void set_RedirectLocation(string value);
    public virtual string get_Status();
    public virtual void set_Status(string value);
    public virtual int get_StatusCode();
    public virtual void set_StatusCode(int value);
    public virtual string get_StatusDescription();
    public virtual void set_StatusDescription(string value);
    public virtual int get_SubStatusCode();
    public virtual void set_SubStatusCode(int value);
    public virtual bool get_SupportsAsyncFlush();
    public virtual bool get_SuppressContent();
    public virtual void set_SuppressContent(bool value);
    public virtual bool get_SuppressDefaultCacheControlHeader();
    public virtual void set_SuppressDefaultCacheControlHeader(bool value);
    public virtual bool get_SuppressFormsAuthenticationRedirect();
    public virtual void set_SuppressFormsAuthenticationRedirect(bool value);
    public virtual bool get_TrySkipIisCustomErrors();
    public virtual void set_TrySkipIisCustomErrors(bool value);
    public virtual void AddCacheItemDependency(string cacheKey);
    public virtual void AddCacheItemDependencies(ArrayList cacheKeys);
    public virtual void AddCacheItemDependencies(String[] cacheKeys);
    public virtual void AddCacheDependency(CacheDependency[] dependencies);
    public virtual void AddFileDependency(string filename);
    public virtual void AddFileDependencies(ArrayList filenames);
    public virtual void AddFileDependencies(String[] filenames);
    public virtual void AddHeader(string name, string value);
    public virtual ISubscriptionToken AddOnSendingHeaders(Action`1<HttpContextBase> callback);
    public virtual void AppendCookie(HttpCookie cookie);
    public virtual void AppendHeader(string name, string value);
    public virtual void AppendToLog(string param);
    public virtual string ApplyAppPathModifier(string virtualPath);
    public virtual IAsyncResult BeginFlush(AsyncCallback callback, object state);
    public virtual void BinaryWrite(Byte[] buffer);
    public virtual void Clear();
    public virtual void ClearContent();
    public virtual void ClearHeaders();
    public virtual void Close();
    public virtual void DisableKernelCache();
    public virtual void DisableUserCache();
    public virtual void End();
    public virtual void EndFlush(IAsyncResult asyncResult);
    public virtual void Flush();
    public virtual Task FlushAsync();
    public virtual void Pics(string value);
    public virtual void Redirect(string url);
    public virtual void Redirect(string url, bool endResponse);
    public virtual void RedirectToRoute(object routeValues);
    public virtual void RedirectToRoute(string routeName);
    public virtual void RedirectToRoute(RouteValueDictionary routeValues);
    public virtual void RedirectToRoute(string routeName, object routeValues);
    public virtual void RedirectToRoute(string routeName, RouteValueDictionary routeValues);
    public virtual void RedirectToRoutePermanent(object routeValues);
    public virtual void RedirectToRoutePermanent(string routeName);
    public virtual void RedirectToRoutePermanent(RouteValueDictionary routeValues);
    public virtual void RedirectToRoutePermanent(string routeName, object routeValues);
    public virtual void RedirectToRoutePermanent(string routeName, RouteValueDictionary routeValues);
    public virtual void RedirectPermanent(string url);
    public virtual void RedirectPermanent(string url, bool endResponse);
    public virtual void RemoveOutputCacheItem(string path);
    public virtual void RemoveOutputCacheItem(string path, string providerName);
    public virtual void SetCookie(HttpCookie cookie);
    public virtual void TransmitFile(string filename);
    public virtual void TransmitFile(string filename, long offset, long length);
    public virtual void Write(char ch);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void Write(object obj);
    public virtual void Write(string s);
    public virtual void WriteFile(string filename);
    public virtual void WriteFile(string filename, bool readIntoMemory);
    public virtual void WriteFile(string filename, long offset, long size);
    public virtual void WriteFile(IntPtr fileHandle, long offset, long size);
    public virtual void WriteSubstitution(HttpResponseSubstitutionCallback callback);
    public virtual void PushPromise(string path);
    public virtual void PushPromise(string path, string method, NameValueCollection headers);
}
internal class System.Web.HttpResponseBufferElement : HttpBaseMemoryResponseBufferElement {
    internal HttpResponseBufferElement(Byte[] data, int size);
    internal virtual HttpResponseBufferElement Clone();
    internal virtual void Recycle();
    internal virtual int Append(Byte[] data, int offset, int size);
    internal virtual int Append(IntPtr data, int offset, int size);
    internal virtual void AppendEncodedChars(Char[] data, int offset, int size, Encoder encoder, bool flushEncoder);
    private sealed virtual override long System.Web.IHttpResponseElement.GetSize();
    private sealed virtual override Byte[] System.Web.IHttpResponseElement.GetBytes();
    private sealed virtual override void System.Web.IHttpResponseElement.Send(HttpWorkerRequest wr);
}
internal class System.Web.HttpResponseHeader : object {
    internal string Name { get; }
    internal string Value { get; }
    internal HttpResponseHeader(int knownHeaderIndex, string value);
    internal HttpResponseHeader(int knownHeaderIndex, string value, bool enableHeaderChecking);
    internal HttpResponseHeader(string unknownHeader, string value);
    internal HttpResponseHeader(string unknownHeader, string value, bool enableHeaderChecking);
    internal string get_Name();
    internal string get_Value();
    internal void Send(HttpWorkerRequest wr);
}
internal class System.Web.HttpResponseStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal HttpResponseStream(HttpWriter writer);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class System.Web.HttpResponseStreamFilterSink : HttpResponseStream {
    internal bool Filtering { get; internal set; }
    internal HttpResponseStreamFilterSink(HttpWriter writer);
    internal bool get_Filtering();
    internal void set_Filtering(bool value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual void Write(Byte[] buffer, int offset, int count);
}
public class System.Web.HttpResponseSubstitutionCallback : MulticastDelegate {
    public HttpResponseSubstitutionCallback(object object, IntPtr method);
    public virtual string Invoke(HttpContext context);
    public virtual IAsyncResult BeginInvoke(HttpContext context, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
internal class System.Web.HttpResponseUnmanagedBufferElement : HttpBaseMemoryResponseBufferElement {
    internal IntPtr FreeLocation { get; }
    private static HttpResponseUnmanagedBufferElement();
    protected virtual override void Finalize();
    internal virtual HttpResponseBufferElement Clone();
    internal virtual void Recycle();
    internal virtual int Append(Byte[] data, int offset, int size);
    internal virtual int Append(IntPtr data, int offset, int size);
    internal void AdjustSize(int size);
    internal virtual void AppendEncodedChars(Char[] data, int offset, int size, Encoder encoder, bool flushEncoder);
    private sealed virtual override long System.Web.IHttpResponseElement.GetSize();
    private sealed virtual override Byte[] System.Web.IHttpResponseElement.GetBytes();
    private sealed virtual override void System.Web.IHttpResponseElement.Send(HttpWorkerRequest wr);
    internal IntPtr get_FreeLocation();
}
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.HttpResponseWrapper : HttpResponseBase {
    public bool Buffer { get; public set; }
    public bool BufferOutput { get; public set; }
    public HttpCachePolicyBase Cache { get; }
    public string CacheControl { get; public set; }
    public string Charset { get; public set; }
    public CancellationToken ClientDisconnectedToken { get; }
    public Encoding ContentEncoding { get; public set; }
    public string ContentType { get; public set; }
    public HttpCookieCollection Cookies { get; }
    public int Expires { get; public set; }
    public DateTime ExpiresAbsolute { get; public set; }
    public Stream Filter { get; public set; }
    public NameValueCollection Headers { get; }
    public bool HeadersWritten { get; }
    public Encoding HeaderEncoding { get; public set; }
    public bool IsClientConnected { get; }
    public bool IsRequestBeingRedirected { get; }
    public TextWriter Output { get; public set; }
    public Stream OutputStream { get; }
    public string RedirectLocation { get; public set; }
    public string Status { get; public set; }
    public int StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public int SubStatusCode { get; public set; }
    public bool SupportsAsyncFlush { get; }
    public bool SuppressContent { get; public set; }
    public bool SuppressDefaultCacheControlHeader { get; public set; }
    public bool SuppressFormsAuthenticationRedirect { get; public set; }
    public bool TrySkipIisCustomErrors { get; public set; }
    public HttpResponseWrapper(HttpResponse httpResponse);
    public virtual bool get_Buffer();
    public virtual void set_Buffer(bool value);
    public virtual bool get_BufferOutput();
    public virtual void set_BufferOutput(bool value);
    public virtual HttpCachePolicyBase get_Cache();
    public virtual string get_CacheControl();
    public virtual void set_CacheControl(string value);
    public virtual string get_Charset();
    public virtual void set_Charset(string value);
    public virtual CancellationToken get_ClientDisconnectedToken();
    public virtual Encoding get_ContentEncoding();
    public virtual void set_ContentEncoding(Encoding value);
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public virtual HttpCookieCollection get_Cookies();
    public virtual int get_Expires();
    public virtual void set_Expires(int value);
    public virtual DateTime get_ExpiresAbsolute();
    public virtual void set_ExpiresAbsolute(DateTime value);
    public virtual Stream get_Filter();
    public virtual void set_Filter(Stream value);
    public virtual NameValueCollection get_Headers();
    public virtual bool get_HeadersWritten();
    public virtual Encoding get_HeaderEncoding();
    public virtual void set_HeaderEncoding(Encoding value);
    public virtual bool get_IsClientConnected();
    public virtual bool get_IsRequestBeingRedirected();
    public virtual TextWriter get_Output();
    public virtual void set_Output(TextWriter value);
    public virtual Stream get_OutputStream();
    public virtual string get_RedirectLocation();
    public virtual void set_RedirectLocation(string value);
    public virtual string get_Status();
    public virtual void set_Status(string value);
    public virtual int get_StatusCode();
    public virtual void set_StatusCode(int value);
    public virtual string get_StatusDescription();
    public virtual void set_StatusDescription(string value);
    public virtual int get_SubStatusCode();
    public virtual void set_SubStatusCode(int value);
    public virtual bool get_SupportsAsyncFlush();
    public virtual bool get_SuppressContent();
    public virtual void set_SuppressContent(bool value);
    public virtual bool get_SuppressDefaultCacheControlHeader();
    public virtual void set_SuppressDefaultCacheControlHeader(bool value);
    public virtual bool get_SuppressFormsAuthenticationRedirect();
    public virtual void set_SuppressFormsAuthenticationRedirect(bool value);
    public virtual bool get_TrySkipIisCustomErrors();
    public virtual void set_TrySkipIisCustomErrors(bool value);
    public virtual void AddCacheItemDependency(string cacheKey);
    public virtual void AddCacheItemDependencies(ArrayList cacheKeys);
    public virtual void AddCacheItemDependencies(String[] cacheKeys);
    public virtual void AddCacheDependency(CacheDependency[] dependencies);
    public virtual void AddFileDependency(string filename);
    public virtual ISubscriptionToken AddOnSendingHeaders(Action`1<HttpContextBase> callback);
    public virtual void AddFileDependencies(ArrayList filenames);
    public virtual void AddFileDependencies(String[] filenames);
    public virtual void AddHeader(string name, string value);
    public virtual void AppendCookie(HttpCookie cookie);
    public virtual void AppendHeader(string name, string value);
    public virtual void AppendToLog(string param);
    public virtual string ApplyAppPathModifier(string virtualPath);
    public virtual IAsyncResult BeginFlush(AsyncCallback callback, object state);
    public virtual void BinaryWrite(Byte[] buffer);
    public virtual void Clear();
    public virtual void ClearContent();
    public virtual void ClearHeaders();
    public virtual void Close();
    public virtual void DisableKernelCache();
    public virtual void DisableUserCache();
    public virtual void End();
    public virtual void EndFlush(IAsyncResult asyncResult);
    public virtual void Flush();
    public virtual Task FlushAsync();
    public virtual void Pics(string value);
    public virtual void Redirect(string url);
    public virtual void Redirect(string url, bool endResponse);
    public virtual void RedirectPermanent(string url);
    public virtual void RedirectPermanent(string url, bool endResponse);
    public virtual void RedirectToRoute(object routeValues);
    public virtual void RedirectToRoute(string routeName);
    public virtual void RedirectToRoute(RouteValueDictionary routeValues);
    public virtual void RedirectToRoute(string routeName, object routeValues);
    public virtual void RedirectToRoute(string routeName, RouteValueDictionary routeValues);
    public virtual void RedirectToRoutePermanent(object routeValues);
    public virtual void RedirectToRoutePermanent(string routeName);
    public virtual void RedirectToRoutePermanent(RouteValueDictionary routeValues);
    public virtual void RedirectToRoutePermanent(string routeName, object routeValues);
    public virtual void RedirectToRoutePermanent(string routeName, RouteValueDictionary routeValues);
    public virtual void RemoveOutputCacheItem(string path);
    public virtual void RemoveOutputCacheItem(string path, string providerName);
    public virtual void SetCookie(HttpCookie cookie);
    public virtual void TransmitFile(string filename);
    public virtual void TransmitFile(string filename, long offset, long length);
    public virtual void Write(string s);
    public virtual void Write(char ch);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void Write(object obj);
    public virtual void WriteFile(string filename);
    public virtual void WriteFile(string filename, bool readIntoMemory);
    public virtual void WriteFile(string filename, long offset, long size);
    public virtual void WriteFile(IntPtr fileHandle, long offset, long size);
    public virtual void WriteSubstitution(HttpResponseSubstitutionCallback callback);
    public virtual void PushPromise(string path);
    public virtual void PushPromise(string path, string method, NameValueCollection headers);
}
public class System.Web.HttpRuntime : object {
    internal static string codegenDirName;
    internal static string profileFileName;
    internal static Byte[] s_autogenKeys;
    internal static string BinDirectoryName;
    internal static string CodeDirectoryName;
    internal static string WebRefDirectoryName;
    internal static string ResourcesDirectoryName;
    internal static string LocalResourcesDirectoryName;
    internal static string DataDirectoryName;
    internal static string ThemesDirectoryName;
    internal static string GlobalThemesDirectoryName;
    internal static string BrowsersDirectoryName;
    internal static Exception InitializationException { get; internal set; }
    internal static bool HostingInitFailed { get; }
    internal static bool EnableHeaderChecking { get; }
    internal static bool ProcessRequestInApplicationTrust { get; }
    internal static bool DisableProcessRequestInApplicationTrust { get; }
    internal static bool IsLegacyCas { get; }
    internal static Byte[] AppOfflineMessage { get; }
    public static Version IISVersion { get; }
    public static bool UsingIntegratedPipeline { get; }
    internal static bool UseIntegratedPipeline { get; }
    internal static bool EnablePrefetchOptimization { get; }
    internal static ApplicationShutdownReason ShutdownReason { get; }
    internal static Profiler Profile { get; }
    internal static bool IsTrustLevelInitialized { get; }
    internal static NamedPermissionSet NamedPermissionSet { get; }
    internal static PolicyLevel PolicyLevel { get; }
    internal static string HostSecurityPolicyResolverType { get; }
    internal static bool IsFullTrust { get; }
    internal static FileChangesMonitor FileChangesMonitor { get; }
    internal static RequestTimeoutManager RequestTimeoutManager { get; }
    public static Cache Cache { get; }
    internal static CacheInternal CacheInternal { get; }
    public static string AspInstallDirectory { get; }
    internal static string AspInstallDirectoryInternal { get; }
    public static string AspClientScriptVirtualPath { get; }
    public static string AspClientScriptPhysicalPath { get; }
    internal static string AspClientScriptPhysicalPathInternal { get; }
    public static string ClrInstallDirectory { get; }
    internal static string ClrInstallDirectoryInternal { get; }
    public static string MachineConfigurationDirectory { get; }
    internal static string MachineConfigurationDirectoryInternal { get; }
    internal static bool IsEngineLoaded { get; }
    public static string CodegenDir { get; }
    internal static string CodegenDirInternal { get; }
    internal static string TempDirInternal { get; }
    public static string AppDomainAppId { get; }
    internal static bool IsAspNetAppDomain { get; }
    public static string AppDomainAppPath { get; }
    internal static string AppDomainAppPathInternal { get; }
    public static string AppDomainAppVirtualPath { get; }
    internal static string AppDomainAppVirtualPathString { get; }
    internal static VirtualPath AppDomainAppVirtualPathObject { get; }
    public static string AppDomainId { get; }
    internal static string AppDomainIdInternal { get; }
    public static string BinDirectory { get; }
    internal static string BinDirectoryInternal { get; }
    internal static VirtualPath CodeDirectoryVirtualPath { get; }
    internal static VirtualPath ResourcesDirectoryVirtualPath { get; }
    internal static VirtualPath WebRefDirectoryVirtualPath { get; }
    public static bool IsOnUNCShare { get; }
    internal static bool IsOnUNCShareInternal { get; }
    public static Version TargetFramework { get; }
    internal static bool DebuggingEnabled { get; }
    internal static bool ConfigInited { get; }
    internal static bool FusionInited { get; }
    internal static bool ApartmentThreading { get; }
    internal static bool ShutdownInProgress { get; }
    internal static string TrustLevel { get; }
    internal static string WpUserId { get; }
    internal static bool IsMapPathRelaxed { get; }
    private static HttpRuntime();
    internal static void ForceStaticInit();
    internal static Exception get_InitializationException();
    internal static void set_InitializationException(Exception value);
    internal static bool get_HostingInitFailed();
    internal static void InitializeHostingFeatures(HostingEnvironmentFlags hostingFlags, PolicyLevel policyLevel, Exception appDomainCreationException);
    internal static bool get_EnableHeaderChecking();
    internal static bool get_ProcessRequestInApplicationTrust();
    internal static bool get_DisableProcessRequestInApplicationTrust();
    internal static bool get_IsLegacyCas();
    internal static Byte[] get_AppOfflineMessage();
    internal static void SetCurrentThreadCultureWithAssert(CultureInfo cultureInfo);
    internal static void StartListeningToLocalResourcesDirectory(VirtualPath virtualDir);
    internal static void CheckApplicationEnabled();
    internal static void IncrementActivePipelineCount();
    internal static void DecrementActivePipelineCount();
    internal static void PopulateIISVersionInformation();
    public static Version get_IISVersion();
    public static bool get_UsingIntegratedPipeline();
    internal static bool get_UseIntegratedPipeline();
    internal static bool get_EnablePrefetchOptimization();
    internal static RequestNotificationStatus ProcessRequestNotification(IIS7WorkerRequest wr, HttpContext context);
    internal static void FinishPipelineRequest(HttpContext context);
    internal static void ReportAppOfflineErrorMessage(HttpResponse response, Byte[] appOfflineMessage);
    internal static void CoalesceNotifications();
    [CompilerGeneratedAttribute]
internal static void add_AppDomainShutdown(BuildManagerHostUnloadEventHandler value);
    [CompilerGeneratedAttribute]
internal static void remove_AppDomainShutdown(BuildManagerHostUnloadEventHandler value);
    internal static void OnAppDomainShutdown(BuildManagerHostUnloadEventArgs e);
    internal static void SetUserForcedShutdown();
    internal static bool ShutdownAppDomain(ApplicationShutdownReason reason, string message);
    internal static bool ShutdownAppDomainWithStackTrace(ApplicationShutdownReason reason, string message, string stackTrace);
    internal static void RecoverFromUnexceptedAppDomainUnload();
    internal static void OnConfigChange(string message);
    internal static void SetShutdownReason(ApplicationShutdownReason reason, string message);
    internal static void SetShutdownMessage(string message);
    internal static ApplicationShutdownReason get_ShutdownReason();
    public static void ProcessRequest(HttpWorkerRequest wr);
    internal static void ProcessRequestNoDemand(HttpWorkerRequest wr);
    internal static void ProcessRequestNow(HttpWorkerRequest wr);
    internal static void RejectRequestNow(HttpWorkerRequest wr, bool silent);
    public static void Close();
    public static void UnloadAppDomain();
    internal static Profiler get_Profile();
    internal static bool get_IsTrustLevelInitialized();
    internal static NamedPermissionSet get_NamedPermissionSet();
    internal static PolicyLevel get_PolicyLevel();
    internal static string get_HostSecurityPolicyResolverType();
    public static NamedPermissionSet GetNamedPermissionSet();
    internal static bool get_IsFullTrust();
    internal static void CheckVirtualFilePermission(string virtualPath);
    internal static void CheckFilePermission(string path);
    internal static void CheckFilePermission(string path, bool writePermissions);
    internal static bool HasFilePermission(string path);
    internal static bool HasFilePermission(string path, bool writePermissions);
    internal static bool HasWebPermission(Uri uri);
    internal static bool HasDbPermission(DbProviderFactory factory);
    internal static bool HasPathDiscoveryPermission(string path);
    internal static bool HasAppPathDiscoveryPermission();
    internal static string GetSafePath(string path);
    internal static bool HasUnmanagedPermission();
    internal static bool HasAspNetHostingPermission(AspNetHostingPermissionLevel level);
    internal static void CheckAspNetHostingPermission(AspNetHostingPermissionLevel level, string errorMessageId);
    internal static void FailIfNoAPTCABit(Type t, ElementInformation elemInfo, string propertyName);
    internal static void FailIfNoAPTCABit(Type t, XmlNode node);
    internal static bool IsTypeAllowedInConfig(Type t);
    internal static bool IsTypeAccessibleFromPartialTrust(Type t);
    internal static FileChangesMonitor get_FileChangesMonitor();
    internal static RequestTimeoutManager get_RequestTimeoutManager();
    public static Cache get_Cache();
    internal static CacheInternal GetCacheInternal(bool createIfDoesNotExist);
    internal static CacheInternal get_CacheInternal();
    public static string get_AspInstallDirectory();
    internal static string get_AspInstallDirectoryInternal();
    public static string get_AspClientScriptVirtualPath();
    public static string get_AspClientScriptPhysicalPath();
    internal static string get_AspClientScriptPhysicalPathInternal();
    public static string get_ClrInstallDirectory();
    internal static string get_ClrInstallDirectoryInternal();
    public static string get_MachineConfigurationDirectory();
    internal static string get_MachineConfigurationDirectoryInternal();
    internal static bool get_IsEngineLoaded();
    public static string get_CodegenDir();
    internal static string get_CodegenDirInternal();
    internal static string get_TempDirInternal();
    public static string get_AppDomainAppId();
    internal static bool get_IsAspNetAppDomain();
    public static string get_AppDomainAppPath();
    internal static string get_AppDomainAppPathInternal();
    public static string get_AppDomainAppVirtualPath();
    internal static string get_AppDomainAppVirtualPathString();
    internal static VirtualPath get_AppDomainAppVirtualPathObject();
    internal static bool IsPathWithinAppRoot(string path);
    public static string get_AppDomainId();
    internal static string get_AppDomainIdInternal();
    public static string get_BinDirectory();
    internal static string get_BinDirectoryInternal();
    internal static VirtualPath get_CodeDirectoryVirtualPath();
    internal static VirtualPath get_ResourcesDirectoryVirtualPath();
    internal static VirtualPath get_WebRefDirectoryVirtualPath();
    public static bool get_IsOnUNCShare();
    internal static bool get_IsOnUNCShareInternal();
    internal static void AddAppDomainTraceMessage(string message);
    public static Version get_TargetFramework();
    internal static bool get_DebuggingEnabled();
    internal static bool get_ConfigInited();
    internal static bool get_FusionInited();
    internal static bool get_ApartmentThreading();
    internal static bool get_ShutdownInProgress();
    internal static string get_TrustLevel();
    internal static string get_WpUserId();
    internal static string MakeFileUrl(string path);
    internal static string GetGacLocation();
    internal static void RestrictIISFolders(HttpContext context);
    internal static object CreateNonPublicInstance(Type type);
    internal static object CreateNonPublicInstance(Type type, Object[] args);
    internal static object CreatePublicInstance(Type type);
    internal static object FastCreatePublicInstance(Type type);
    internal static object CreatePublicInstance(Type type, Object[] args);
    internal static bool get_IsMapPathRelaxed();
    internal static string GetRelaxedMapPathResult(string originalResult);
}
public class System.Web.HttpServerUtility : object {
    public string MachineName { get; }
    public int ScriptTimeout { get; public set; }
    internal HttpServerUtility(HttpContext context);
    internal HttpServerUtility(HttpApplication application);
    private static HttpServerUtility();
    public object CreateObject(string progID);
    public object CreateObject(Type type);
    public object CreateObjectFromClsid(string clsid);
    internal static CultureInfo CreateReadOnlyCultureInfo(string name);
    internal static CultureInfo CreateReadOnlySpecificCultureInfo(string name);
    internal static CultureInfo CreateReadOnlyCultureInfo(int culture);
    public string MapPath(string path);
    public Exception GetLastError();
    public void ClearError();
    public void Execute(string path);
    public void Execute(string path, TextWriter writer);
    public void Execute(string path, bool preserveForm);
    public void Execute(string path, TextWriter writer, bool preserveForm);
    public void Execute(IHttpHandler handler, TextWriter writer, bool preserveForm);
    internal void Execute(IHttpHandler handler, TextWriter writer, bool preserveForm, bool setPreviousPage);
    public void Transfer(string path, bool preserveForm);
    public void Transfer(string path);
    public void Transfer(IHttpHandler handler, bool preserveForm);
    public void TransferRequest(string path);
    public void TransferRequest(string path, bool preserveForm);
    public void TransferRequest(string path, bool preserveForm, string method, NameValueCollection headers);
    public void TransferRequest(string path, bool preserveForm, string method, NameValueCollection headers, bool preserveUser);
    internal static void ExecuteLocalRequestAndCaptureResponse(string path, TextWriter writer, ErrorFormatterGenerator errorFormatterGenerator);
    public string get_MachineName();
    internal static string GetMachineNameInternal();
    public int get_ScriptTimeout();
    public void set_ScriptTimeout(int value);
    public string HtmlDecode(string s);
    public void HtmlDecode(string s, TextWriter output);
    public string HtmlEncode(string s);
    public void HtmlEncode(string s, TextWriter output);
    public string UrlEncode(string s);
    public string UrlPathEncode(string s);
    public void UrlEncode(string s, TextWriter output);
    public string UrlDecode(string s);
    public void UrlDecode(string s, TextWriter output);
    public static string UrlTokenEncode(Byte[] input);
    public static Byte[] UrlTokenDecode(string input);
    internal void EnsureHasNotTransitionedToWebSocket();
}
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public abstract class System.Web.HttpServerUtilityBase : object {
    public string MachineName { get; }
    public int ScriptTimeout { get; public set; }
    public virtual string get_MachineName();
    public virtual int get_ScriptTimeout();
    public virtual void set_ScriptTimeout(int value);
    public virtual void ClearError();
    public virtual object CreateObject(string progID);
    public virtual object CreateObject(Type type);
    public virtual object CreateObjectFromClsid(string clsid);
    public virtual void Execute(string path);
    public virtual void Execute(string path, TextWriter writer);
    public virtual void Execute(string path, bool preserveForm);
    public virtual void Execute(string path, TextWriter writer, bool preserveForm);
    public virtual void Execute(IHttpHandler handler, TextWriter writer, bool preserveForm);
    public virtual Exception GetLastError();
    public virtual string HtmlDecode(string s);
    public virtual void HtmlDecode(string s, TextWriter output);
    public virtual string HtmlEncode(string s);
    public virtual void HtmlEncode(string s, TextWriter output);
    public virtual string MapPath(string path);
    public virtual void Transfer(string path, bool preserveForm);
    public virtual void Transfer(string path);
    public virtual void Transfer(IHttpHandler handler, bool preserveForm);
    public virtual void TransferRequest(string path);
    public virtual void TransferRequest(string path, bool preserveForm);
    public virtual void TransferRequest(string path, bool preserveForm, string method, NameValueCollection headers);
    public virtual void TransferRequest(string path, bool preserveForm, string method, NameValueCollection headers, bool preserveUser);
    public virtual string UrlDecode(string s);
    public virtual void UrlDecode(string s, TextWriter output);
    public virtual string UrlEncode(string s);
    public virtual void UrlEncode(string s, TextWriter output);
    public virtual string UrlPathEncode(string s);
    public virtual Byte[] UrlTokenDecode(string input);
    public virtual string UrlTokenEncode(Byte[] input);
}
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.HttpServerUtilityWrapper : HttpServerUtilityBase {
    public string MachineName { get; }
    public int ScriptTimeout { get; public set; }
    public HttpServerUtilityWrapper(HttpServerUtility httpServerUtility);
    public virtual Exception GetLastError();
    public virtual string get_MachineName();
    public virtual int get_ScriptTimeout();
    public virtual void set_ScriptTimeout(int value);
    public virtual void ClearError();
    public virtual object CreateObject(string progID);
    public virtual object CreateObject(Type type);
    public virtual object CreateObjectFromClsid(string clsid);
    public virtual void Execute(string path);
    public virtual void Execute(string path, TextWriter writer);
    public virtual void Execute(string path, bool preserveForm);
    public virtual void Execute(string path, TextWriter writer, bool preserveForm);
    public virtual void Execute(IHttpHandler handler, TextWriter writer, bool preserveForm);
    public virtual string HtmlDecode(string s);
    public virtual void HtmlDecode(string s, TextWriter output);
    public virtual string HtmlEncode(string s);
    public virtual void HtmlEncode(string s, TextWriter output);
    public virtual string MapPath(string path);
    public virtual void Transfer(string path, bool preserveForm);
    public virtual void Transfer(string path);
    public virtual void Transfer(IHttpHandler handler, bool preserveForm);
    public virtual void TransferRequest(string path);
    public virtual void TransferRequest(string path, bool preserveForm);
    public virtual void TransferRequest(string path, bool preserveForm, string method, NameValueCollection headers);
    public virtual void TransferRequest(string path, bool preserveForm, string method, NameValueCollection headers, bool preserveUser);
    public virtual string UrlDecode(string s);
    public virtual void UrlDecode(string s, TextWriter output);
    public virtual string UrlEncode(string s);
    public virtual void UrlEncode(string s, TextWriter output);
    public virtual string UrlPathEncode(string s);
    public virtual Byte[] UrlTokenDecode(string input);
    public virtual string UrlTokenEncode(Byte[] input);
}
internal class System.Web.HttpServerVarsCollection : HttpValueCollection {
    public int Count { get; }
    public String[] AllKeys { get; }
    internal HttpServerVarsCollection(HttpWorkerRequest wr, HttpRequest request);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal void Dispose();
    internal void AddStatic(string name, string value);
    internal void AddDynamic(string name, DynamicServerVariable var);
    public virtual IEnumerator GetEnumerator();
    public virtual int get_Count();
    public virtual void Add(string name, string value);
    public virtual void Clear();
    public virtual string Get(string name);
    public virtual String[] GetValues(string name);
    public virtual void Set(string name, string value);
    internal void SetNoDemand(string name, string value);
    internal void SynchronizeServerVariable(string name, string value, bool ensurePopulated);
    public virtual void Remove(string name);
    internal void RemoveNoDemand(string name);
    public virtual string Get(int index);
    public virtual String[] GetValues(int index);
    public virtual string GetKey(int index);
    public virtual String[] get_AllKeys();
    internal virtual string ToString(bool urlencoded);
}
internal class System.Web.HttpServerVarsCollectionEntry : object {
    internal string Name;
    internal bool IsDynamic;
    internal string Value;
    internal DynamicServerVariable Var;
    internal HttpServerVarsCollectionEntry(string name, string value);
    internal HttpServerVarsCollectionEntry(string name, DynamicServerVariable var);
    internal string GetValue(HttpRequest request);
}
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public abstract class System.Web.HttpSessionStateBase : object {
    public int CodePage { get; public set; }
    public HttpSessionStateBase Contents { get; }
    public HttpCookieMode CookieMode { get; }
    public bool IsCookieless { get; }
    public bool IsNewSession { get; }
    public bool IsReadOnly { get; }
    public KeysCollection Keys { get; }
    public int LCID { get; public set; }
    public SessionStateMode Mode { get; }
    public string SessionID { get; }
    public HttpStaticObjectsCollectionBase StaticObjects { get; }
    public int Timeout { get; public set; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public virtual int get_CodePage();
    public virtual void set_CodePage(int value);
    public virtual HttpSessionStateBase get_Contents();
    public virtual HttpCookieMode get_CookieMode();
    public virtual bool get_IsCookieless();
    public virtual bool get_IsNewSession();
    public virtual bool get_IsReadOnly();
    public virtual KeysCollection get_Keys();
    public virtual int get_LCID();
    public virtual void set_LCID(int value);
    public virtual SessionStateMode get_Mode();
    public virtual string get_SessionID();
    public virtual HttpStaticObjectsCollectionBase get_StaticObjects();
    public virtual int get_Timeout();
    public virtual void set_Timeout(int value);
    public virtual object get_Item(int index);
    public virtual void set_Item(int index, object value);
    public virtual object get_Item(string name);
    public virtual void set_Item(string name, object value);
    public virtual void Abandon();
    public virtual void Add(string name, object value);
    public virtual void Clear();
    public virtual void Remove(string name);
    public virtual void RemoveAll();
    public virtual void RemoveAt(int index);
    public virtual void CopyTo(Array array, int index);
    public virtual int get_Count();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.HttpSessionStateWrapper : HttpSessionStateBase {
    public int CodePage { get; public set; }
    public HttpSessionStateBase Contents { get; }
    public HttpCookieMode CookieMode { get; }
    public bool IsCookieless { get; }
    public bool IsNewSession { get; }
    public bool IsReadOnly { get; }
    public KeysCollection Keys { get; }
    public int LCID { get; public set; }
    public SessionStateMode Mode { get; }
    public string SessionID { get; }
    public HttpStaticObjectsCollectionBase StaticObjects { get; }
    public int Timeout { get; public set; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public HttpSessionStateWrapper(HttpSessionState httpSessionState);
    public virtual int get_CodePage();
    public virtual void set_CodePage(int value);
    public virtual HttpSessionStateBase get_Contents();
    public virtual HttpCookieMode get_CookieMode();
    public virtual bool get_IsCookieless();
    public virtual bool get_IsNewSession();
    public virtual bool get_IsReadOnly();
    public virtual KeysCollection get_Keys();
    public virtual int get_LCID();
    public virtual void set_LCID(int value);
    public virtual SessionStateMode get_Mode();
    public virtual string get_SessionID();
    public virtual HttpStaticObjectsCollectionBase get_StaticObjects();
    public virtual int get_Timeout();
    public virtual void set_Timeout(int value);
    public virtual object get_Item(int index);
    public virtual void set_Item(int index, object value);
    public virtual object get_Item(string name);
    public virtual void set_Item(string name, object value);
    public virtual void Abandon();
    public virtual void Add(string name, object value);
    public virtual void Clear();
    public virtual void Remove(string name);
    public virtual void RemoveAll();
    public virtual void RemoveAt(int index);
    public virtual void CopyTo(Array array, int index);
    public virtual int get_Count();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class System.Web.HttpStaticObjectsCollection : object {
    internal IDictionary Objects { get; }
    public bool NeverAccessed { get; }
    public object Item { get; }
    public int Count { get; }
    public object SyncRoot { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    internal void Add(string name, Type t, bool lateBound);
    internal IDictionary get_Objects();
    internal HttpStaticObjectsCollection Clone();
    internal int GetInstanceCount();
    public bool get_NeverAccessed();
    public object get_Item(string name);
    public object GetObject(string name);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual object get_SyncRoot();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public void Serialize(BinaryWriter writer);
    public static HttpStaticObjectsCollection Deserialize(BinaryReader reader);
}
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public abstract class System.Web.HttpStaticObjectsCollectionBase : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object Item { get; }
    public bool NeverAccessed { get; }
    public object SyncRoot { get; }
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public virtual object get_Item(string name);
    public virtual bool get_NeverAccessed();
    public virtual object get_SyncRoot();
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    public virtual object GetObject(string name);
    public virtual void Serialize(BinaryWriter writer);
}
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System.Web.Abstractions, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.HttpStaticObjectsCollectionWrapper : HttpStaticObjectsCollectionBase {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object Item { get; }
    public bool NeverAccessed { get; }
    public object SyncRoot { get; }
    public HttpStaticObjectsCollectionWrapper(HttpStaticObjectsCollection httpStaticObjectsCollection);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public virtual object get_Item(string name);
    public virtual bool get_NeverAccessed();
    public virtual object get_SyncRoot();
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    public virtual object GetObject(string name);
    public virtual void Serialize(BinaryWriter writer);
}
internal class System.Web.HttpStaticObjectsEntry : object {
    internal string Name { get; }
    internal Type ObjectType { get; }
    internal bool LateBound { get; }
    internal Type DeclaredType { get; }
    internal bool HasInstance { get; }
    internal object Instance { get; }
    internal HttpStaticObjectsEntry(string name, Type t, bool lateBound);
    internal HttpStaticObjectsEntry(string name, object instance, int dummy);
    internal string get_Name();
    internal Type get_ObjectType();
    internal bool get_LateBound();
    internal Type get_DeclaredType();
    internal bool get_HasInstance();
    internal object get_Instance();
}
internal class System.Web.HttpStaticObjectsEnumerator : object {
    public object Key { get; }
    public object Value { get; }
    public object Current { get; }
    public DictionaryEntry Entry { get; }
    internal HttpStaticObjectsEnumerator(IDictionaryEnumerator e);
    public sealed virtual void Reset();
    public sealed virtual bool MoveNext();
    public sealed virtual object get_Key();
    public sealed virtual object get_Value();
    public sealed virtual object get_Current();
    public sealed virtual DictionaryEntry get_Entry();
}
internal static class System.Web.HttpStatus : object {
    internal static int Unauthorized;
    internal static int Forbidden;
    internal static int NotFound;
}
internal class System.Web.HttpSubstBlockResponseElement : object {
    internal HttpResponseSubstitutionCallback Callback { get; }
    internal HttpSubstBlockResponseElement(HttpResponseSubstitutionCallback callback, Encoding encoding, Encoder encoder, IIS7WorkerRequest iis7WorkerRequest);
    internal HttpSubstBlockResponseElement(HttpResponseSubstitutionCallback callback);
    internal HttpResponseSubstitutionCallback get_Callback();
    internal IHttpResponseElement Substitute(Encoding e);
    internal bool PointerEquals(IntPtr ptr);
    private sealed virtual override long System.Web.IHttpResponseElement.GetSize();
    private sealed virtual override Byte[] System.Web.IHttpResponseElement.GetBytes();
    private sealed virtual override void System.Web.IHttpResponseElement.Send(HttpWorkerRequest wr);
}
public abstract class System.Web.HttpTaskAsyncHandler : object {
    public bool IsReusable { get; }
    public virtual bool get_IsReusable();
    [EditorBrowsableAttribute("1")]
public virtual void ProcessRequest(HttpContext context);
    public abstract virtual Task ProcessRequestAsync(HttpContext context);
    private sealed virtual override IAsyncResult System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext context, AsyncCallback cb, object extraData);
    private sealed virtual override void System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult result);
}
public class System.Web.HttpUnhandledException : HttpException {
    public HttpUnhandledException(string message);
    public HttpUnhandledException(string message, Exception innerException);
    internal HttpUnhandledException(string message, string postMessage, Exception innerException);
    private HttpUnhandledException(SerializationInfo info, StreamingContext context);
}
public class System.Web.HttpUtility : object {
    public static string HtmlDecode(string s);
    public static void HtmlDecode(string s, TextWriter output);
    public static string HtmlEncode(string s);
    public static string HtmlEncode(object value);
    public static void HtmlEncode(string s, TextWriter output);
    public static string HtmlAttributeEncode(string s);
    public static void HtmlAttributeEncode(string s, TextWriter output);
    internal static string FormatPlainTextSpacesAsHtml(string s);
    internal static string FormatPlainTextAsHtml(string s);
    internal static void FormatPlainTextAsHtml(string s, TextWriter output);
    public static NameValueCollection ParseQueryString(string query);
    public static NameValueCollection ParseQueryString(string query, Encoding encoding);
    public static string UrlEncode(string str);
    public static string UrlPathEncode(string str);
    internal static string AspCompatUrlEncode(string s);
    public static string UrlEncode(string str, Encoding e);
    internal static string UrlEncodeNonAscii(string str, Encoding e);
    public static string UrlEncode(Byte[] bytes);
    public static string UrlEncode(Byte[] bytes, int offset, int count);
    public static Byte[] UrlEncodeToBytes(string str);
    public static Byte[] UrlEncodeToBytes(string str, Encoding e);
    public static Byte[] UrlEncodeToBytes(Byte[] bytes);
    public static Byte[] UrlEncodeToBytes(Byte[] bytes, int offset, int count);
    [ObsoleteAttribute("This method produces non-standards-compliant output and has interoperability issues. The preferred alternative is UrlEncode(String).")]
public static string UrlEncodeUnicode(string str);
    [ObsoleteAttribute("This method produces non-standards-compliant output and has interoperability issues. The preferred alternative is UrlEncodeToBytes(String).")]
public static Byte[] UrlEncodeUnicodeToBytes(string str);
    public static string UrlDecode(string str);
    public static string UrlDecode(string str, Encoding e);
    public static string UrlDecode(Byte[] bytes, Encoding e);
    public static string UrlDecode(Byte[] bytes, int offset, int count, Encoding e);
    public static Byte[] UrlDecodeToBytes(string str);
    public static Byte[] UrlDecodeToBytes(string str, Encoding e);
    public static Byte[] UrlDecodeToBytes(Byte[] bytes);
    public static Byte[] UrlDecodeToBytes(Byte[] bytes, int offset, int count);
    internal static string FormatHttpDateTime(DateTime dt);
    internal static string FormatHttpDateTimeUtc(DateTime dt);
    internal static string FormatHttpCookieDateTime(DateTime dt);
    public static string JavaScriptStringEncode(string value);
    public static string JavaScriptStringEncode(string value, bool addDoubleQuotes);
    internal static bool TryParseCoordinates(string value, Double& doubleValue);
}
public enum System.Web.HttpValidationStatus : Enum {
    public int value__;
    public static HttpValidationStatus Invalid;
    public static HttpValidationStatus IgnoreThisRequest;
    public static HttpValidationStatus Valid;
}
internal class System.Web.HttpValueCollection : NameValueCollection {
    internal HttpValueCollection(HttpValueCollection col);
    internal HttpValueCollection(string str, bool readOnly, bool urlencoded, Encoding encoding);
    internal HttpValueCollection(int capacity);
    protected HttpValueCollection(SerializationInfo info, StreamingContext context);
    internal void EnableGranularValidation(ValidateStringCallback validationCallback);
    internal static bool KeyIsCandidateForValidation(string key);
    public virtual string Get(int index);
    public virtual string Get(string name);
    public virtual String[] GetValues(int index);
    public virtual String[] GetValues(string name);
    internal void MakeReadOnly();
    internal void MakeReadWrite();
    internal void FillFromString(string s);
    internal void FillFromString(string s, bool urlencoded, Encoding encoding);
    internal void FillFromEncodedBytes(Byte[] bytes, Encoding encoding);
    internal void Add(HttpCookieCollection c);
    internal void ThrowIfMaxHttpCollectionKeysExceeded();
    internal void Reset();
    public virtual string ToString();
    internal virtual string ToString(bool urlencoded);
    internal virtual string ToString(bool urlencoded, IDictionary excludeKeys);
    internal static string UrlEncodeForToString(string input);
}
internal enum System.Web.HttpVerb : Enum {
    public int value__;
    public static HttpVerb Unparsed;
    public static HttpVerb Unknown;
    public static HttpVerb GET;
    public static HttpVerb PUT;
    public static HttpVerb HEAD;
    public static HttpVerb POST;
    public static HttpVerb DEBUG;
    public static HttpVerb DELETE;
}
[ComVisibleAttribute("False")]
public abstract class System.Web.HttpWorkerRequest : object {
    public static int HeaderCacheControl;
    public static int HeaderConnection;
    public static int HeaderDate;
    public static int HeaderKeepAlive;
    public static int HeaderPragma;
    public static int HeaderTrailer;
    public static int HeaderTransferEncoding;
    public static int HeaderUpgrade;
    public static int HeaderVia;
    public static int HeaderWarning;
    public static int HeaderAllow;
    public static int HeaderContentLength;
    public static int HeaderContentType;
    public static int HeaderContentEncoding;
    public static int HeaderContentLanguage;
    public static int HeaderContentLocation;
    public static int HeaderContentMd5;
    public static int HeaderContentRange;
    public static int HeaderExpires;
    public static int HeaderLastModified;
    public static int HeaderAccept;
    public static int HeaderAcceptCharset;
    public static int HeaderAcceptEncoding;
    public static int HeaderAcceptLanguage;
    public static int HeaderAuthorization;
    public static int HeaderCookie;
    public static int HeaderExpect;
    public static int HeaderFrom;
    public static int HeaderHost;
    public static int HeaderIfMatch;
    public static int HeaderIfModifiedSince;
    public static int HeaderIfNoneMatch;
    public static int HeaderIfRange;
    public static int HeaderIfUnmodifiedSince;
    public static int HeaderMaxForwards;
    public static int HeaderProxyAuthorization;
    public static int HeaderReferer;
    public static int HeaderRange;
    public static int HeaderTe;
    public static int HeaderUserAgent;
    public static int RequestHeaderMaximum;
    public static int HeaderAcceptRanges;
    public static int HeaderAge;
    public static int HeaderEtag;
    public static int HeaderLocation;
    public static int HeaderProxyAuthenticate;
    public static int HeaderRetryAfter;
    public static int HeaderServer;
    public static int HeaderSetCookie;
    public static int HeaderVary;
    public static int HeaderWwwAuthenticate;
    public static int ResponseHeaderMaximum;
    public static int ReasonResponseCacheMiss;
    public static int ReasonFileHandleCacheMiss;
    public static int ReasonCachePolicy;
    public static int ReasonCacheSecurity;
    public static int ReasonClientDisconnect;
    public static int ReasonDefault;
    internal bool IsInReadEntitySync { get; internal set; }
    public bool SupportsAsyncFlush { get; }
    public bool SupportsAsyncRead { get; }
    public string MachineConfigPath { get; }
    public string RootWebConfigPath { get; }
    public string MachineInstallDirectory { get; }
    public Guid RequestTraceIdentifier { get; }
    internal bool SupportsLongTransmitFile { get; }
    internal bool TrySkipIisCustomErrors { get; internal set; }
    internal bool SupportsExecuteUrl { get; }
    private static HttpWorkerRequest();
    public abstract virtual string GetUriPath();
    public abstract virtual string GetQueryString();
    public abstract virtual string GetRawUrl();
    public abstract virtual string GetHttpVerbName();
    public abstract virtual string GetHttpVersion();
    public abstract virtual string GetRemoteAddress();
    public abstract virtual int GetRemotePort();
    public abstract virtual string GetLocalAddress();
    public abstract virtual int GetLocalPort();
    internal virtual string GetLocalPortAsString();
    internal bool IsLocal();
    internal static string GetRawUrlHelper(string cacheUrl);
    internal bool get_IsInReadEntitySync();
    internal void set_IsInReadEntitySync(bool value);
    public virtual Byte[] GetQueryStringRawBytes();
    public virtual string GetRemoteName();
    public virtual string GetServerName();
    public virtual long GetConnectionID();
    public virtual long GetUrlContextID();
    public virtual string GetAppPoolID();
    public virtual int GetRequestReason();
    public virtual IntPtr GetUserToken();
    internal WindowsIdentity GetLogonUserIdentity();
    public virtual IntPtr GetVirtualPathToken();
    public virtual bool IsSecure();
    public virtual string GetProtocol();
    public virtual string GetFilePath();
    internal VirtualPath GetFilePathObject();
    public virtual string GetFilePathTranslated();
    public virtual string GetPathInfo();
    public virtual string GetAppPath();
    public virtual string GetAppPathTranslated();
    public virtual int GetPreloadedEntityBodyLength();
    public virtual int GetPreloadedEntityBody(Byte[] buffer, int offset);
    public virtual Byte[] GetPreloadedEntityBody();
    public virtual bool IsEntireEntityBodyIsPreloaded();
    public virtual int GetTotalEntityBodyLength();
    public virtual int ReadEntityBody(Byte[] buffer, int size);
    public virtual int ReadEntityBody(Byte[] buffer, int offset, int size);
    public virtual bool get_SupportsAsyncFlush();
    public virtual IAsyncResult BeginFlush(AsyncCallback callback, object state);
    public virtual void EndFlush(IAsyncResult asyncResult);
    public virtual bool get_SupportsAsyncRead();
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual string GetKnownRequestHeader(int index);
    public virtual string GetUnknownRequestHeader(string name);
    [CLSCompliantAttribute("False")]
public virtual String[][] GetUnknownRequestHeaders();
    public virtual string GetServerVariable(string name);
    public virtual long GetBytesRead();
    internal virtual DateTime GetStartTime();
    internal virtual void ResetStartTime();
    public virtual string MapPath(string virtualPath);
    public virtual string get_MachineConfigPath();
    public virtual string get_RootWebConfigPath();
    public virtual string get_MachineInstallDirectory();
    internal virtual void RaiseTraceEvent(IntegratedTraceType traceType, string eventData);
    internal virtual void RaiseTraceEvent(WebBaseEvent webEvent);
    public virtual Guid get_RequestTraceIdentifier();
    public abstract virtual void SendStatus(int statusCode, string statusDescription);
    internal virtual void SendStatus(int statusCode, int subStatusCode, string statusDescription);
    public abstract virtual void SendKnownResponseHeader(int index, string value);
    public abstract virtual void SendUnknownResponseHeader(string name, string value);
    internal virtual void SetHeaderEncoding(Encoding encoding);
    public abstract virtual void SendResponseFromMemory(Byte[] data, int length);
    public virtual void SendResponseFromMemory(IntPtr data, int length);
    internal virtual void SendResponseFromMemory(IntPtr data, int length, bool isBufferFromUnmanagedPool);
    public abstract virtual void SendResponseFromFile(string filename, long offset, long length);
    public abstract virtual void SendResponseFromFile(IntPtr handle, long offset, long length);
    internal virtual void TransmitFile(string filename, long length, bool isImpersonating);
    internal virtual void TransmitFile(string filename, long offset, long length, bool isImpersonating);
    internal virtual bool get_SupportsLongTransmitFile();
    internal virtual string SetupKernelCaching(int secondsToLive, string originalCacheUrl, bool enableKernelCacheForVaryByStar);
    internal virtual void DisableKernelCache();
    internal virtual void DisableUserCache();
    internal virtual bool get_TrySkipIisCustomErrors();
    internal virtual void set_TrySkipIisCustomErrors(bool value);
    internal virtual bool get_SupportsExecuteUrl();
    internal virtual IAsyncResult BeginExecuteUrl(string url, string method, string headers, bool sendHeaders, bool addUserIndo, IntPtr token, string name, string authType, Byte[] entity, AsyncCallback cb, object state);
    internal virtual void EndExecuteUrl(IAsyncResult result);
    internal virtual void UpdateInitialCounters();
    internal virtual void UpdateResponseCounters(bool finalFlush, int bytesOut);
    internal virtual void UpdateRequestCounters(int bytesIn);
    public abstract virtual void FlushResponse(bool finalFlush);
    public abstract virtual void EndOfRequest();
    public virtual void SetEndOfSendNotification(EndOfSendNotification callback, object extraData);
    public virtual void SendCalculatedContentLength(int contentLength);
    public virtual void SendCalculatedContentLength(long contentLength);
    public virtual bool HeadersSent();
    public virtual bool IsClientConnected();
    public virtual void CloseConnection();
    public virtual Byte[] GetClientCertificate();
    public virtual DateTime GetClientCertificateValidFrom();
    public virtual DateTime GetClientCertificateValidUntil();
    public virtual Byte[] GetClientCertificateBinaryIssuer();
    public virtual int GetClientCertificateEncoding();
    public virtual Byte[] GetClientCertificatePublicKey();
    public bool HasEntityBody();
    public static string GetStatusDescription(int code);
    public static int GetKnownRequestHeaderIndex(string header);
    public static string GetKnownRequestHeaderName(int index);
    internal static string GetServerVariableNameFromKnownRequestHeaderIndex(int index);
    public static int GetKnownResponseHeaderIndex(string header);
    public static string GetKnownResponseHeaderName(int index);
}
public class System.Web.HttpWriter : TextWriter {
    internal ArrayList SubstElements { get; }
    internal bool IgnoringFurtherWrites { get; }
    public Encoding Encoding { get; }
    internal Encoder Encoder { get; }
    private IAllocatorProvider AllocatorProvider { get; internal set; }
    internal bool HasBeenClearedRecently { get; internal set; }
    internal bool ResponseEncodingUsed { get; }
    internal bool FilterInstalled { get; }
    public Stream OutputStream { get; }
    internal HttpWriter(HttpResponse response);
    private static HttpWriter();
    internal ArrayList get_SubstElements();
    internal bool get_IgnoringFurtherWrites();
    internal void IgnoreFurtherWrites();
    internal void UpdateResponseBuffering();
    internal void UpdateResponseEncoding();
    public virtual Encoding get_Encoding();
    internal Encoder get_Encoder();
    internal void DisposeIntegratedBuffers();
    internal void RecycleBuffers();
    internal static void ReleaseAllPooledBuffers();
    internal void ClearSubstitutionBlocks();
    private IAllocatorProvider get_AllocatorProvider();
    internal void set_AllocatorProvider(IAllocatorProvider value);
    internal void WriteFromStream(Byte[] data, int offset, int size);
    internal void WriteUTF8ResourceString(IntPtr pv, int offset, int size, bool asciiOnly);
    internal void TransmitFile(string filename, long offset, long size, bool isImpersonating, bool supportsLongTransmitFile);
    internal void WriteFile(string filename, long offset, long size);
    internal void WriteSubstBlock(HttpResponseSubstitutionCallback callback, IIS7WorkerRequest iis7WorkerRequest);
    internal bool get_HasBeenClearedRecently();
    internal void set_HasBeenClearedRecently(bool value);
    internal int GetResponseBufferCountAfterFlush();
    internal void MoveResponseBufferRangeForward(int srcIndex, int srcCount, int dstIndex);
    internal void ClearBuffers();
    internal long GetBufferedLength();
    internal bool get_ResponseEncodingUsed();
    internal ArrayList GetIntegratedSnapshot(Boolean& hasSubstBlocks, IIS7WorkerRequest wr);
    internal ArrayList GetSnapshot(Boolean& hasSubstBlocks);
    internal void UseSnapshot(ArrayList buffers);
    internal Stream GetCurrentFilter();
    internal bool get_FilterInstalled();
    internal void InstallFilter(Stream filter);
    internal void Filter(bool finalFiltering);
    internal void FilterIntegrated(bool finalFiltering, IIS7WorkerRequest wr);
    internal void Send(HttpWorkerRequest wr);
    public virtual void Close();
    public virtual void Flush();
    public virtual void Write(char ch);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void Write(string s);
    public void WriteString(string s, int index, int count);
    public virtual void Write(object obj);
    public void WriteBytes(Byte[] buffer, int index, int count);
    public virtual void WriteLine();
    public Stream get_OutputStream();
}
internal interface System.Web.IAllocatorProvider {
    public IBufferAllocator`1<char> CharBufferAllocator { get; }
    public IBufferAllocator`1<int> IntBufferAllocator { get; }
    public IBufferAllocator`1<IntPtr> IntPtrBufferAllocator { get; }
    public abstract virtual IBufferAllocator`1<char> get_CharBufferAllocator();
    public abstract virtual IBufferAllocator`1<int> get_IntBufferAllocator();
    public abstract virtual IBufferAllocator`1<IntPtr> get_IntPtrBufferAllocator();
    public abstract virtual void TrimMemory();
}
internal interface System.Web.IBufferAllocator {
    public int BufferSize { get; }
    public abstract virtual object GetBuffer();
    public abstract virtual void ReuseBuffer(object buffer);
    public abstract virtual void ReleaseAllBuffers();
    public abstract virtual int get_BufferSize();
}
internal interface System.Web.IBufferAllocator`1 {
    public abstract virtual T[] GetBuffer();
    public abstract virtual T[] GetBuffer(int minSize);
    public abstract virtual void ReuseBuffer(T[] buffer);
}
internal class System.Web.IdleTimeoutMonitor : object {
    internal DateTime LastEvent { get; internal set; }
    internal IdleTimeoutMonitor(TimeSpan timeout);
    internal void Stop();
    internal DateTime get_LastEvent();
    internal void set_LastEvent(DateTime value);
}
public interface System.Web.IHtmlString {
    public abstract virtual string ToHtmlString();
}
public interface System.Web.IHttpAsyncHandler {
    public abstract virtual IAsyncResult BeginProcessRequest(HttpContext context, AsyncCallback cb, object extraData);
    public abstract virtual void EndProcessRequest(IAsyncResult result);
}
public interface System.Web.IHttpHandler {
    public bool IsReusable { get; }
    public abstract virtual void ProcessRequest(HttpContext context);
    public abstract virtual bool get_IsReusable();
}
public interface System.Web.IHttpHandlerFactory {
    public abstract virtual IHttpHandler GetHandler(HttpContext context, string requestType, string url, string pathTranslated);
    public abstract virtual void ReleaseHandler(IHttpHandler handler);
}
internal interface System.Web.IHttpHandlerFactory2 {
    public abstract virtual IHttpHandler GetHandler(HttpContext context, string requestType, VirtualPath virtualPath, string physicalPath);
}
public interface System.Web.IHttpModule {
    public abstract virtual void Init(HttpApplication context);
    public abstract virtual void Dispose();
}
internal interface System.Web.IHttpResponseElement {
    public abstract virtual long GetSize();
    public abstract virtual Byte[] GetBytes();
    public abstract virtual void Send(HttpWorkerRequest wr);
}
public class System.Web.IisTraceListener : TraceListener {
    public virtual void Write(string message);
    public virtual void Write(string message, string category);
    public virtual void WriteLine(string message);
    public virtual void WriteLine(string message, string category);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, Object[] data);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType severity, int id, string message);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType severity, int id, string format, Object[] args);
    private bool IsEnabled(TraceOptions opts);
}
internal class System.Web.ImpersonationContext : object {
    internal static bool CurrentThreadTokenExists { get; }
    internal ImpersonationContext(IntPtr token);
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    protected void ImpersonateToken(HandleRef token);
    internal void Undo();
    internal static bool get_CurrentThreadTokenExists();
}
internal class System.Web.ImplicitAsyncPreloadModule : object {
    internal void GetEventHandlers(BeginEventHandler& beginHandler, EndEventHandler& endHandler);
}
public class System.Web.Instrumentation.PageExecutionContext : object {
    public bool IsLiteral { get; public set; }
    public int Length { get; public set; }
    public int StartPosition { get; public set; }
    public TextWriter TextWriter { get; public set; }
    public string VirtualPath { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsLiteral();
    [CompilerGeneratedAttribute]
public void set_IsLiteral(bool value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
    [CompilerGeneratedAttribute]
public int get_StartPosition();
    [CompilerGeneratedAttribute]
public void set_StartPosition(int value);
    [CompilerGeneratedAttribute]
public TextWriter get_TextWriter();
    [CompilerGeneratedAttribute]
public void set_TextWriter(TextWriter value);
    [CompilerGeneratedAttribute]
public string get_VirtualPath();
    [CompilerGeneratedAttribute]
public void set_VirtualPath(string value);
}
public abstract class System.Web.Instrumentation.PageExecutionListener : object {
    public abstract virtual void BeginContext(PageExecutionContext context);
    public abstract virtual void EndContext(PageExecutionContext context);
}
public class System.Web.Instrumentation.PageInstrumentationService : object {
    public static bool IsEnabled { get; public set; }
    public IList`1<PageExecutionListener> ExecutionListeners { get; }
    [CompilerGeneratedAttribute]
public static bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public static void set_IsEnabled(bool value);
    public IList`1<PageExecutionListener> get_ExecutionListeners();
}
internal class System.Web.IntegerArrayAllocator : BufferAllocator {
    public int BufferSize { get; }
    internal IntegerArrayAllocator(int arraySize, int maxFree);
    protected virtual object AllocBuffer();
    public virtual int get_BufferSize();
}
internal enum System.Web.IntegratedTraceType : Enum {
    public int value__;
    public static IntegratedTraceType TraceWrite;
    public static IntegratedTraceType TraceWarn;
    public static IntegratedTraceType DiagCritical;
    public static IntegratedTraceType DiagError;
    public static IntegratedTraceType DiagWarning;
    public static IntegratedTraceType DiagInfo;
    public static IntegratedTraceType DiagVerbose;
    public static IntegratedTraceType DiagStart;
    public static IntegratedTraceType DiagStop;
    public static IntegratedTraceType DiagSuspend;
    public static IntegratedTraceType DiagResume;
    public static IntegratedTraceType DiagTransfer;
}
internal static class System.Web.InternalSecurityPermissions : object {
    internal static IStackWalk Unrestricted { get; }
    internal static IStackWalk UnmanagedCode { get; }
    internal static IStackWalk ControlPrincipal { get; }
    internal static IStackWalk Reflection { get; }
    internal static IStackWalk AppPathDiscovery { get; }
    internal static IStackWalk ControlThread { get; }
    internal static IStackWalk AspNetHostingPermissionLevelLow { get; }
    internal static IStackWalk AspNetHostingPermissionLevelMedium { get; }
    internal static IStackWalk AspNetHostingPermissionLevelHigh { get; }
    internal static IStackWalk get_Unrestricted();
    internal static IStackWalk get_UnmanagedCode();
    internal static IStackWalk get_ControlPrincipal();
    internal static IStackWalk get_Reflection();
    internal static IStackWalk get_AppPathDiscovery();
    internal static IStackWalk get_ControlThread();
    internal static IStackWalk get_AspNetHostingPermissionLevelLow();
    internal static IStackWalk get_AspNetHostingPermissionLevelMedium();
    internal static IStackWalk get_AspNetHostingPermissionLevelHigh();
    internal static IStackWalk FileReadAccess(string filename);
    internal static IStackWalk FileWriteAccess(string filename);
    internal static IStackWalk PathDiscovery(string path);
}
internal class System.Web.IntPtrArrayAllocator : BufferAllocator {
    public int BufferSize { get; }
    internal IntPtrArrayAllocator(int arraySize, int maxFree);
    protected virtual object AllocBuffer();
    public virtual int get_BufferSize();
}
internal interface System.Web.IPartitionInfo {
    public abstract virtual string GetTracingPartitionString();
}
public interface System.Web.IPartitionResolver {
    public abstract virtual void Initialize();
    public abstract virtual string ResolvePartition(object key);
}
internal interface System.Web.IPrincipalContainer {
    public IPrincipal Principal { get; public set; }
    public abstract virtual IPrincipal get_Principal();
    public abstract virtual void set_Principal(IPrincipal value);
}
internal interface System.Web.IRequestCompletedNotifier {
    public bool IsRequestCompleted { get; }
    public abstract virtual bool get_IsRequestCompleted();
}
public interface System.Web.ISubscriptionToken {
    public bool IsActive { get; }
    public abstract virtual bool get_IsActive();
    public abstract virtual void Unsubscribe();
}
public interface System.Web.ITlsTokenBindingInfo {
    public abstract virtual Byte[] GetProvidedTokenBindingId();
    public abstract virtual Byte[] GetReferredTokenBindingId();
}
internal class System.Web.LegacyAspNetSynchronizationContext : AspNetSynchronizationContextBase {
    internal bool AllowAsyncDuringSyncStages { get; internal set; }
    internal int PendingOperationsCount { get; }
    internal ExceptionDispatchInfo ExceptionDispatchInfo { get; }
    internal bool Enabled { get; }
    internal LegacyAspNetSynchronizationContext(HttpApplication app);
    [CompilerGeneratedAttribute]
internal virtual bool get_AllowAsyncDuringSyncStages();
    [CompilerGeneratedAttribute]
internal virtual void set_AllowAsyncDuringSyncStages(bool value);
    internal virtual int get_PendingOperationsCount();
    internal virtual ExceptionDispatchInfo get_ExceptionDispatchInfo();
    internal virtual void ClearError();
    internal virtual bool PendingCompletion(WaitCallback callback);
    public virtual void Send(SendOrPostCallback callback, object state);
    public virtual void Post(SendOrPostCallback callback, object state);
    public virtual SynchronizationContext CreateCopy();
    public virtual void OperationStarted();
    public virtual void OperationCompleted();
    internal virtual bool get_Enabled();
    internal virtual void Enable();
    internal virtual void Disable();
    internal virtual void SetSyncCaller();
    internal virtual void ResetSyncCaller();
    internal virtual void AssociateWithCurrentThread();
    internal virtual void DisassociateFromCurrentThread();
}
[ObsoleteAttribute("The recommended alternative is System.Net.Mail.Attachment. http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.Web.Mail.MailAttachment : object {
    public string Filename { get; }
    public MailEncoding Encoding { get; }
    public MailAttachment(string filename);
    public MailAttachment(string filename, MailEncoding encoding);
    public string get_Filename();
    public MailEncoding get_Encoding();
}
[ObsoleteAttribute("The recommended alternative is System.Net.Mime.TransferEncoding. http://go.microsoft.com/fwlink/?linkid=14202")]
public enum System.Web.Mail.MailEncoding : Enum {
    public int value__;
    public static MailEncoding UUEncode;
    public static MailEncoding Base64;
}
[ObsoleteAttribute("The recommended alternative is System.Net.Mail.MailMessage.IsBodyHtml. http://go.microsoft.com/fwlink/?linkid=14202")]
public enum System.Web.Mail.MailFormat : Enum {
    public int value__;
    public static MailFormat Text;
    public static MailFormat Html;
}
[ObsoleteAttribute("The recommended alternative is System.Net.Mail.MailMessage. http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.Web.Mail.MailMessage : object {
    public string From { get; public set; }
    public string To { get; public set; }
    public string Cc { get; public set; }
    public string Bcc { get; public set; }
    public string Subject { get; public set; }
    public MailPriority Priority { get; public set; }
    public string UrlContentBase { get; public set; }
    public string UrlContentLocation { get; public set; }
    public string Body { get; public set; }
    public MailFormat BodyFormat { get; public set; }
    public Encoding BodyEncoding { get; public set; }
    public IDictionary Headers { get; }
    public IDictionary Fields { get; }
    public IList Attachments { get; }
    public string get_From();
    public void set_From(string value);
    public string get_To();
    public void set_To(string value);
    public string get_Cc();
    public void set_Cc(string value);
    public string get_Bcc();
    public void set_Bcc(string value);
    public string get_Subject();
    public void set_Subject(string value);
    public MailPriority get_Priority();
    public void set_Priority(MailPriority value);
    public string get_UrlContentBase();
    public void set_UrlContentBase(string value);
    public string get_UrlContentLocation();
    public void set_UrlContentLocation(string value);
    public string get_Body();
    public void set_Body(string value);
    public MailFormat get_BodyFormat();
    public void set_BodyFormat(MailFormat value);
    public Encoding get_BodyEncoding();
    public void set_BodyEncoding(Encoding value);
    public IDictionary get_Headers();
    public IDictionary get_Fields();
    public IList get_Attachments();
}
[ObsoleteAttribute("The recommended alternative is System.Net.Mail.MailPriority. http://go.microsoft.com/fwlink/?linkid=14202")]
public enum System.Web.Mail.MailPriority : Enum {
    public int value__;
    public static MailPriority Normal;
    public static MailPriority Low;
    public static MailPriority High;
}
[ObsoleteAttribute("The recommended alternative is System.Net.Mail.SmtpClient. http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.Web.Mail.SmtpMail : object {
    public static string SmtpServer { get; public set; }
    private static SmtpMail();
    public static string get_SmtpServer();
    public static void set_SmtpServer(string value);
    public static void Send(string from, string to, string subject, string messageText);
    public static void Send(MailMessage message);
}
internal class System.Web.Management.AppDomainResourcePerfCounters : object {
    private static AppDomainResourcePerfCounters();
    internal static void Init();
    internal static void Stop();
}
public abstract class System.Web.Management.BufferedWebEventProvider : WebEventProvider {
    public bool UseBuffering { get; }
    public string BufferMode { get; }
    public virtual void Initialize(string name, NameValueCollection config);
    public bool get_UseBuffering();
    public string get_BufferMode();
    public virtual void ProcessEvent(WebBaseEvent eventRaised);
    public abstract virtual void ProcessEventFlush(WebEventBufferFlushInfo flushInfo);
    public virtual void Flush();
    public virtual void Shutdown();
}
internal class System.Web.Management.ConversionEventSink : object {
    public sealed virtual void ReportEvent(ExporterEventKind eventKind, int eventCode, string eventMsg);
    public sealed virtual object ResolveRef(Assembly assemblyReference);
}
public class System.Web.Management.EventLogWebEventProvider : WebEventProvider {
    public virtual void Initialize(string name, NameValueCollection config);
    public virtual void ProcessEvent(WebBaseEvent eventRaised);
    public virtual void Flush();
    public virtual void Shutdown();
}
public enum System.Web.Management.EventNotificationType : Enum {
    public int value__;
    public static EventNotificationType Regular;
    public static EventNotificationType Urgent;
    public static EventNotificationType Flush;
    public static EventNotificationType Unbuffered;
}
internal enum System.Web.Management.FlushCallReason : Enum {
    public int value__;
    public static FlushCallReason UrgentFlushThresholdExceeded;
    public static FlushCallReason Timer;
    public static FlushCallReason StaticFlush;
}
internal class System.Web.Management.HealthMonitoringManager : object {
    internal HealthMonitoringSectionHelper _sectionHelper;
    internal bool _enabled;
    internal static bool Enabled { get; }
    internal static ProviderInstances ProviderInstances { get; }
    private static HealthMonitoringManager();
    internal static HealthMonitoringManager Manager();
    internal static bool get_Enabled();
    internal static void StartHealthMonitoringHeartbeat();
    internal static void Shutdown();
    internal static void Dispose();
    internal void HeartbeatCallback(object state);
    internal void StartHeartbeatTimer();
    internal static ProviderInstances get_ProviderInstances();
}
internal interface System.Web.Management.IInternalWebEventProvider {
}
public class System.Web.Management.IisTraceWebEventProvider : WebEventProvider {
    public virtual void Initialize(string name, NameValueCollection config);
    public virtual void ProcessEvent(WebBaseEvent eventRaised);
    public virtual void Flush();
    public virtual void Shutdown();
}
[GuidAttribute("c84f668a-cc3f-11d7-b79e-505054503030")]
[InterfaceTypeAttribute("1")]
public interface System.Web.Management.IRegiisUtility {
    public abstract virtual void ProtectedConfigAction(long actionToPerform, string firstArgument, string secondArgument, string providerName, string appPath, string site, string cspOrLocation, int keySize, IntPtr& exception);
    public abstract virtual void RegisterSystemWebAssembly(int doReg, IntPtr& exception);
    public abstract virtual void RegisterAsnetMmcAssembly(int doReg, string assemblyName, string binaryDirectory, IntPtr& exception);
    public abstract virtual void RemoveBrowserCaps(IntPtr& exception);
}
public interface System.Web.Management.IWebEventCustomEvaluator {
    public abstract virtual bool CanFire(WebBaseEvent raisedEvent, RuleFiringRecord record);
}
public class System.Web.Management.MailEventNotificationInfo : object {
    public WebBaseEventCollection Events { get; }
    public EventNotificationType NotificationType { get; }
    public int EventsInNotification { get; }
    public int EventsRemaining { get; }
    public int MessagesInNotification { get; }
    public int EventsInBuffer { get; }
    public int EventsDiscardedByBuffer { get; }
    public int EventsDiscardedDueToMessageLimit { get; }
    public int NotificationSequence { get; }
    public int MessageSequence { get; }
    public DateTime LastNotificationUtc { get; }
    public MailMessage Message { get; }
    internal MailEventNotificationInfo(MailMessage msg, WebBaseEventCollection events, DateTime lastNotificationUtc, int discardedSinceLastNotification, int eventsInBuffer, int notificationSequence, EventNotificationType notificationType, int eventsInNotification, int eventsRemaining, int messagesInNotification, int eventsLostDueToMessageLimit, int messageSequence);
    public WebBaseEventCollection get_Events();
    public EventNotificationType get_NotificationType();
    public int get_EventsInNotification();
    public int get_EventsRemaining();
    public int get_MessagesInNotification();
    public int get_EventsInBuffer();
    public int get_EventsDiscardedByBuffer();
    public int get_EventsDiscardedDueToMessageLimit();
    public int get_NotificationSequence();
    public int get_MessageSequence();
    public DateTime get_LastNotificationUtc();
    public MailMessage get_Message();
}
public abstract class System.Web.Management.MailWebEventProvider : BufferedWebEventProvider {
    internal static int DefaultMaxMessagesPerNotification;
    internal static int DefaultMaxEventsPerMessage;
    internal static int MessageSequenceBase;
    internal string SubjectPrefix { get; }
    internal int MaxMessagesPerNotification { get; }
    internal int MaxEventsPerMessage { get; }
    public virtual void Initialize(string name, NameValueCollection config);
    internal static SmtpClient CreateSmtpClientWithAssert();
    internal string get_SubjectPrefix();
    internal string GenerateSubject(int notificationSequence, int messageSequence, WebBaseEventCollection events, int count);
    internal MailMessage GetMessage();
    internal void SendMail(MailMessage msg);
    internal abstract virtual void SendMessage(WebBaseEvent eventRaised);
    public virtual void ProcessEvent(WebBaseEvent eventRaised);
    public virtual void Shutdown();
    public virtual void ProcessEventFlush(WebEventBufferFlushInfo flushInfo);
    internal abstract virtual void SendMessage(WebBaseEventCollection events, WebEventBufferFlushInfo flushInfo, int eventsInNotification, int eventsRemaining, int messagesInNotification, int eventsLostDueToMessageLimit, int messageSequence, int eventsSent, Boolean& fatalError);
    internal int get_MaxMessagesPerNotification();
    internal int get_MaxEventsPerMessage();
}
public class System.Web.Management.RegiisUtility : object {
    public sealed virtual void RegisterSystemWebAssembly(int doReg, IntPtr& exception);
    public sealed virtual void RegisterAsnetMmcAssembly(int doReg, string typeName, string binaryDirectory, IntPtr& exception);
    public sealed virtual void ProtectedConfigAction(long options, string firstArgument, string secondArgument, string providerName, string appPath, string site, string cspOrLocation, int keySize, IntPtr& exception);
    public sealed virtual void RemoveBrowserCaps(IntPtr& exception);
}
public class System.Web.Management.RuleFiringRecord : object {
    internal DateTime _lastFired;
    internal int _timesRaised;
    internal int _updatingLastFired;
    internal RuleInfo _ruleInfo;
    public DateTime LastFired { get; }
    public int TimesRaised { get; }
    internal RuleFiringRecord(RuleInfo ruleInfo);
    private static RuleFiringRecord();
    public DateTime get_LastFired();
    public int get_TimesRaised();
    internal bool CheckAndUpdate(WebBaseEvent eventRaised);
}
public enum System.Web.Management.SessionStateType : Enum {
    public int value__;
    public static SessionStateType Temporary;
    public static SessionStateType Persisted;
    public static SessionStateType Custom;
}
public class System.Web.Management.SimpleMailWebEventProvider : MailWebEventProvider {
    private static SimpleMailWebEventProvider();
    public virtual void Initialize(string name, NameValueCollection config);
    internal virtual void SendMessage(WebBaseEvent eventRaised);
    internal virtual void SendMessage(WebBaseEventCollection events, WebEventBufferFlushInfo flushInfo, int eventsInNotification, int eventsRemaining, int messagesInNotification, int eventsLostDueToMessageLimit, int messageSequence, int eventsSent, Boolean& fatalError);
}
public class System.Web.Management.SqlExecutionException : SystemException {
    public string Server { get; }
    public string Database { get; }
    public string SqlFile { get; }
    public string Commands { get; }
    public SqlException Exception { get; }
    public SqlExecutionException(string message, string server, string database, string sqlFile, string commands, SqlException sqlException);
    public SqlExecutionException(string message);
    public SqlExecutionException(string message, Exception innerException);
    private SqlExecutionException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_Server();
    public string get_Database();
    public string get_SqlFile();
    public string get_Commands();
    public SqlException get_Exception();
}
[FlagsAttribute]
public enum System.Web.Management.SqlFeatures : Enum {
    public int value__;
    public static SqlFeatures None;
    public static SqlFeatures Membership;
    public static SqlFeatures Profile;
    public static SqlFeatures RoleManager;
    public static SqlFeatures Personalization;
    public static SqlFeatures SqlWebEventProvider;
    public static SqlFeatures All;
}
public static class System.Web.Management.SqlServices : object {
    internal static ArrayList ApplicationServiceTables { get; }
    private static SqlServices();
    public static void Install(string server, string user, string password, string database, SqlFeatures features);
    public static void Install(string server, string database, SqlFeatures features);
    internal static void Install(string database, string dbFileName, string connectionString);
    public static void Install(string database, SqlFeatures features, string connectionString);
    public static void Uninstall(string server, string user, string password, string database, SqlFeatures features);
    public static void Uninstall(string server, string database, SqlFeatures features);
    public static void Uninstall(string database, SqlFeatures features, string connectionString);
    public static void InstallSessionState(string server, string user, string password, string customDatabase, SessionStateType type);
    public static void InstallSessionState(string server, string customDatabase, SessionStateType type);
    public static void InstallSessionState(string customDatabase, SessionStateType type, string connectionString);
    public static void UninstallSessionState(string server, string user, string password, string customDatabase, SessionStateType type);
    public static void UninstallSessionState(string server, string customDatabase, SessionStateType type);
    public static void UninstallSessionState(string customDatabase, SessionStateType type, string connectionString);
    internal static ArrayList get_ApplicationServiceTables();
    public static string GenerateSessionStateScripts(bool install, SessionStateType type, string customDatabase);
    public static string GenerateApplicationServicesScripts(bool install, SqlFeatures features, string database);
}
public class System.Web.Management.SqlWebEventProvider : BufferedWebEventProvider {
    public virtual void Initialize(string name, NameValueCollection config);
    public virtual void ProcessEventFlush(WebEventBufferFlushInfo flushInfo);
    public virtual void ProcessEvent(WebBaseEvent eventRaised);
    protected virtual void EventProcessingComplete(WebBaseEventCollection raisedEvents);
    public virtual void Shutdown();
}
internal class System.Web.Management.TemplatedMailCompileErrorFormatter : DynamicCompileErrorFormatter {
    protected string ErrorTitle { get; }
    protected string Description { get; }
    protected string MiscSectionTitle { get; }
    protected string MiscSectionContent { get; }
    internal TemplatedMailCompileErrorFormatter(HttpCompileException e, int eventsRemaining, bool showDetails);
    protected virtual string get_ErrorTitle();
    protected virtual string get_Description();
    protected virtual string get_MiscSectionTitle();
    protected virtual string get_MiscSectionContent();
}
internal class System.Web.Management.TemplatedMailRuntimeErrorFormatter : UnhandledErrorFormatter {
    protected string ErrorTitle { get; }
    protected string ColoredSquareTitle { get; }
    protected string ColoredSquareContent { get; }
    protected string Description { get; }
    protected string MiscSectionTitle { get; }
    protected string MiscSectionContent { get; }
    protected string ColoredSquare2Title { get; }
    protected string ColoredSquare2Content { get; }
    internal TemplatedMailRuntimeErrorFormatter(Exception e, int eventsRemaining, bool showDetails);
    protected virtual string get_ErrorTitle();
    protected virtual string get_ColoredSquareTitle();
    protected virtual string get_ColoredSquareContent();
    protected virtual string get_Description();
    protected virtual string get_MiscSectionTitle();
    protected virtual string get_MiscSectionContent();
    protected virtual string get_ColoredSquare2Title();
    protected virtual string get_ColoredSquare2Content();
}
public class System.Web.Management.TemplatedMailWebEventProvider : MailWebEventProvider {
    internal static string CurrentEventsName;
    public static MailEventNotificationInfo CurrentNotification { get; }
    public virtual void Initialize(string name, NameValueCollection config);
    internal virtual void SendMessage(WebBaseEvent eventRaised);
    internal virtual void SendMessage(WebBaseEventCollection events, WebEventBufferFlushInfo flushInfo, int eventsInNotification, int eventsRemaining, int messagesInNotification, int eventsLostDueToMessageLimit, int messageSequence, int eventsSent, Boolean& fatalError);
    public static MailEventNotificationInfo get_CurrentNotification();
}
public class System.Web.Management.TraceWebEventProvider : WebEventProvider {
    public virtual void Initialize(string name, NameValueCollection config);
    public virtual void ProcessEvent(WebBaseEvent eventRaised);
    public virtual void Flush();
    public virtual void Shutdown();
}
public class System.Web.Management.WebApplicationInformation : object {
    public string ApplicationDomain { get; }
    public string TrustLevel { get; }
    public string ApplicationVirtualPath { get; }
    public string ApplicationPath { get; }
    public string MachineName { get; }
    public string get_ApplicationDomain();
    public string get_TrustLevel();
    public string get_ApplicationVirtualPath();
    public string get_ApplicationPath();
    public string get_MachineName();
    public void FormatToString(WebEventFormatter formatter);
    public virtual string ToString();
}
public class System.Web.Management.WebApplicationLifetimeEvent : WebManagementEvent {
    protected internal WebApplicationLifetimeEvent(string message, object eventSource, int eventCode);
    protected internal WebApplicationLifetimeEvent(string message, object eventSource, int eventCode, int eventDetailCode);
    internal static int DetailCodeFromShutdownReason(ApplicationShutdownReason reason);
    protected internal virtual void IncrementPerfCounters();
}
public class System.Web.Management.WebAuditEvent : WebManagementEvent {
    public WebRequestInformation RequestInformation { get; }
    protected internal WebAuditEvent(string message, object eventSource, int eventCode);
    protected internal WebAuditEvent(string message, object eventSource, int eventCode, int eventDetailCode);
    internal virtual void PreProcessEventInit();
    public WebRequestInformation get_RequestInformation();
    internal virtual void GenerateFieldsForMarshal(List`1<WebEventFieldData> fields);
    internal virtual void FormatToString(WebEventFormatter formatter, bool includeAppInfo);
}
public class System.Web.Management.WebAuthenticationFailureAuditEvent : WebFailureAuditEvent {
    public string NameToAuthenticate { get; }
    protected internal WebAuthenticationFailureAuditEvent(string message, object eventSource, int eventCode, string nameToAuthenticate);
    protected internal WebAuthenticationFailureAuditEvent(string message, object eventSource, int eventCode, int eventDetailCode, string nameToAuthenticate);
    public string get_NameToAuthenticate();
    internal virtual void GenerateFieldsForMarshal(List`1<WebEventFieldData> fields);
    internal virtual void FormatToString(WebEventFormatter formatter, bool includeAppInfo);
}
public class System.Web.Management.WebAuthenticationSuccessAuditEvent : WebSuccessAuditEvent {
    public string NameToAuthenticate { get; }
    protected internal WebAuthenticationSuccessAuditEvent(string message, object eventSource, int eventCode, string nameToAuthenticate);
    protected internal WebAuthenticationSuccessAuditEvent(string message, object eventSource, int eventCode, int eventDetailCode, string nameToAuthenticate);
    public string get_NameToAuthenticate();
    internal virtual void GenerateFieldsForMarshal(List`1<WebEventFieldData> fields);
    internal virtual void FormatToString(WebEventFormatter formatter, bool includeAppInfo);
}
public class System.Web.Management.WebBaseErrorEvent : WebManagementEvent {
    public Exception ErrorException { get; }
    protected internal WebBaseErrorEvent(string message, object eventSource, int eventCode, Exception e);
    protected internal WebBaseErrorEvent(string message, object eventSource, int eventCode, int eventDetailCode, Exception e);
    public Exception get_ErrorException();
    internal virtual void FormatToString(WebEventFormatter formatter, bool includeAppInfo);
    internal virtual void GenerateFieldsForMarshal(List`1<WebEventFieldData> fields);
    protected internal virtual void IncrementPerfCounters();
}
public class System.Web.Management.WebBaseEvent : object {
    internal bool IsSystemEvent { get; }
    public DateTime EventTime { get; }
    public DateTime EventTimeUtc { get; }
    public string Message { get; }
    public object EventSource { get; }
    public long EventSequence { get; }
    public long EventOccurrence { get; }
    public int EventCode { get; }
    public int EventDetailCode { get; }
    public Guid EventID { get; }
    public static WebApplicationInformation ApplicationInformation { get; }
    private static WebBaseEvent();
    protected internal WebBaseEvent(string message, object eventSource, int eventCode);
    protected internal WebBaseEvent(string message, object eventSource, int eventCode, int eventDetailCode);
    internal bool get_IsSystemEvent();
    public DateTime get_EventTime();
    public DateTime get_EventTimeUtc();
    public string get_Message();
    public object get_EventSource();
    public long get_EventSequence();
    public long get_EventOccurrence();
    public int get_EventCode();
    public int get_EventDetailCode();
    public Guid get_EventID();
    public static WebApplicationInformation get_ApplicationInformation();
    internal virtual void FormatToString(WebEventFormatter formatter, bool includeAppInfo);
    public virtual string ToString();
    public virtual string ToString(bool includeAppInfo, bool includeCustomEventDetails);
    public virtual void FormatCustomEventDetails(WebEventFormatter formatter);
    internal int InferEtwTraceVerbosity();
    internal void DeconstructWebEvent(Int32& eventType, Int32& fieldCount, String[]& fieldNames, Int32[]& fieldTypes, String[]& fieldData);
    internal virtual void GenerateFieldsForMarshal(List`1<WebEventFieldData> fields);
    internal virtual void PreProcessEventInit();
    internal static void RaiseRuntimeError(Exception e, object source);
    protected internal virtual void IncrementPerfCounters();
    internal void IncrementTotalCounters(int index0, int index1);
    public virtual void Raise();
    public static void Raise(WebBaseEvent eventRaised);
    internal static void RaiseInternal(WebBaseEvent eventRaised, ArrayList firingRuleInfos, int index0, int index1);
    internal static void RaiseSystemEvent(string message, object source, int eventCode, int eventDetailCode, Exception exception);
    internal static void RaiseSystemEvent(object source, int eventCode);
    internal static void RaiseSystemEvent(object source, int eventCode, int eventDetailCode);
    internal static void RaiseSystemEvent(object source, int eventCode, int eventDetailCode, Exception exception);
    internal static void RaiseSystemEvent(object source, int eventCode, string nameToAuthenticate);
    internal static string FormatResourceStringWithCache(string key);
    internal static string FormatResourceStringWithCache(string key, string arg0);
    internal static WebEventType WebEventTypeFromWebEvent(WebBaseEvent eventRaised);
    internal static void RaisePropertyDeserializationWebErrorEvent(SettingsProperty property, object source, Exception exception);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Management.WebBaseEventCollection : ReadOnlyCollectionBase {
    public WebBaseEvent Item { get; }
    public WebBaseEventCollection(ICollection events);
    internal WebBaseEventCollection(WebBaseEvent eventRaised);
    public WebBaseEvent get_Item(int index);
    public int IndexOf(WebBaseEvent value);
    public bool Contains(WebBaseEvent value);
}
public class System.Web.Management.WebErrorEvent : WebBaseErrorEvent {
    public WebRequestInformation RequestInformation { get; }
    public WebThreadInformation ThreadInformation { get; }
    protected internal WebErrorEvent(string message, object eventSource, int eventCode, Exception exception);
    protected internal WebErrorEvent(string message, object eventSource, int eventCode, int eventDetailCode, Exception exception);
    internal virtual void PreProcessEventInit();
    public WebRequestInformation get_RequestInformation();
    public WebThreadInformation get_ThreadInformation();
    internal virtual void FormatToString(WebEventFormatter formatter, bool includeAppInfo);
    internal virtual void GenerateFieldsForMarshal(List`1<WebEventFieldData> fields);
    protected internal virtual void IncrementPerfCounters();
}
internal class System.Web.Management.WebEventBuffer : object {
    internal WebEventBuffer(BufferedWebEventProvider provider, string bufferMode, WebEventBufferFlushCallback callback);
    private static WebEventBuffer();
    internal void Flush(int max, FlushCallReason reason);
    internal void AddEvent(WebBaseEvent webEvent);
    internal void Shutdown();
}
internal class System.Web.Management.WebEventBufferFlushCallback : MulticastDelegate {
    public WebEventBufferFlushCallback(object object, IntPtr method);
    public virtual void Invoke(WebEventBufferFlushInfo flushInfo);
    public virtual IAsyncResult BeginInvoke(WebEventBufferFlushInfo flushInfo, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.Management.WebEventBufferFlushInfo : object {
    public WebBaseEventCollection Events { get; }
    public DateTime LastNotificationUtc { get; }
    public int EventsDiscardedSinceLastNotification { get; }
    public int EventsInBuffer { get; }
    public int NotificationSequence { get; }
    public EventNotificationType NotificationType { get; }
    internal WebEventBufferFlushInfo(WebBaseEventCollection events, EventNotificationType notificationType, int notificationSequence, DateTime lastNotification, int eventsDiscardedSinceLastNotification, int eventsInBuffer);
    public WebBaseEventCollection get_Events();
    public DateTime get_LastNotificationUtc();
    public int get_EventsDiscardedSinceLastNotification();
    public int get_EventsInBuffer();
    public int get_NotificationSequence();
    public EventNotificationType get_NotificationType();
}
public class System.Web.Management.WebEventCodes : object {
    public static int InvalidEventCode;
    public static int UndefinedEventCode;
    public static int UndefinedEventDetailCode;
    public static int ApplicationCodeBase;
    public static int ApplicationStart;
    public static int ApplicationShutdown;
    public static int ApplicationCompilationStart;
    public static int ApplicationCompilationEnd;
    public static int ApplicationHeartbeat;
    internal static int ApplicationCodeBaseLast;
    public static int RequestCodeBase;
    public static int RequestTransactionComplete;
    public static int RequestTransactionAbort;
    internal static int RequestCodeBaseLast;
    public static int ErrorCodeBase;
    public static int RuntimeErrorRequestAbort;
    public static int RuntimeErrorViewStateFailure;
    public static int RuntimeErrorValidationFailure;
    public static int RuntimeErrorPostTooLarge;
    public static int RuntimeErrorUnhandledException;
    public static int WebErrorParserError;
    public static int WebErrorCompilationError;
    public static int WebErrorConfigurationError;
    public static int WebErrorOtherError;
    public static int WebErrorPropertyDeserializationError;
    public static int WebErrorObjectStateFormatterDeserializationError;
    public static int RuntimeErrorWebResourceFailure;
    internal static int ErrorCodeBaseLast;
    public static int AuditCodeBase;
    public static int AuditFormsAuthenticationSuccess;
    public static int AuditMembershipAuthenticationSuccess;
    public static int AuditUrlAuthorizationSuccess;
    public static int AuditFileAuthorizationSuccess;
    public static int AuditFormsAuthenticationFailure;
    public static int AuditMembershipAuthenticationFailure;
    public static int AuditUrlAuthorizationFailure;
    public static int AuditFileAuthorizationFailure;
    public static int AuditInvalidViewStateFailure;
    public static int AuditUnhandledSecurityException;
    public static int AuditUnhandledAccessException;
    internal static int AuditCodeBaseLast;
    public static int MiscCodeBase;
    public static int WebEventProviderInformation;
    internal static int MiscCodeBaseLast;
    internal static int LastCodeBase;
    public static int ApplicationDetailCodeBase;
    public static int ApplicationShutdownUnknown;
    public static int ApplicationShutdownHostingEnvironment;
    public static int ApplicationShutdownChangeInGlobalAsax;
    public static int ApplicationShutdownConfigurationChange;
    public static int ApplicationShutdownUnloadAppDomainCalled;
    public static int ApplicationShutdownChangeInSecurityPolicyFile;
    public static int ApplicationShutdownBinDirChangeOrDirectoryRename;
    public static int ApplicationShutdownBrowsersDirChangeOrDirectoryRename;
    public static int ApplicationShutdownCodeDirChangeOrDirectoryRename;
    public static int ApplicationShutdownResourcesDirChangeOrDirectoryRename;
    public static int ApplicationShutdownIdleTimeout;
    public static int ApplicationShutdownPhysicalApplicationPathChanged;
    public static int ApplicationShutdownHttpRuntimeClose;
    public static int ApplicationShutdownInitializationError;
    public static int ApplicationShutdownMaxRecompilationsReached;
    public static int StateServerConnectionError;
    public static int ApplicationShutdownBuildManagerChange;
    public static int AuditDetailCodeBase;
    public static int InvalidTicketFailure;
    public static int ExpiredTicketFailure;
    public static int InvalidViewStateMac;
    public static int InvalidViewState;
    public static int WebEventDetailCodeBase;
    public static int SqlProviderEventsDropped;
    public static int WebExtendedBase;
    internal static Int32[] s_eventArrayDimensionSizes;
    private static WebEventCodes();
    internal static string MessageFromEventCode(int eventCode, int eventDetailCode);
    internal static int GetEventArrayDimensionSize(int dim);
    internal static void GetEventArrayIndexsFromEventCode(int eventCode, Int32& index0, Int32& index1);
}
internal class System.Web.Management.WebEventFieldData : object {
    public string Name { get; }
    public string Data { get; }
    public WebEventFieldType Type { get; }
    public WebEventFieldData(string name, string data, WebEventFieldType type);
    public string get_Name();
    public string get_Data();
    public WebEventFieldType get_Type();
}
internal enum System.Web.Management.WebEventFieldType : Enum {
    public int value__;
    public static WebEventFieldType String;
    public static WebEventFieldType Int;
    public static WebEventFieldType Bool;
    public static WebEventFieldType Long;
    public static WebEventFieldType Date;
}
public class System.Web.Management.WebEventFormatter : object {
    public int IndentationLevel { get; public set; }
    public int TabSize { get; public set; }
    public void AppendLine(string s);
    public string ToString();
    public int get_IndentationLevel();
    public void set_IndentationLevel(int value);
    public int get_TabSize();
    public void set_TabSize(int value);
}
public static class System.Web.Management.WebEventManager : object {
    public static void Flush(string providerName);
    public static void Flush();
    internal static void Shutdown();
}
public abstract class System.Web.Management.WebEventProvider : ProviderBase {
    public abstract virtual void ProcessEvent(WebBaseEvent raisedEvent);
    public abstract virtual void Shutdown();
    public abstract virtual void Flush();
    internal void LogException(Exception e);
}
internal enum System.Web.Management.WebEventType : Enum {
    public int value__;
    public static WebEventType WEBEVENT_BASE_EVENT;
    public static WebEventType WEBEVENT_MANAGEMENT_EVENT;
    public static WebEventType WEBEVENT_APP_LIFETIME_EVENT;
    public static WebEventType WEBEVENT_REQUEST_EVENT;
    public static WebEventType WEBEVENT_HEARTBEAT_EVENT;
    public static WebEventType WEBEVENT_BASE_ERROR_EVENT;
    public static WebEventType WEBEVENT_REQUEST_ERROR_EVENT;
    public static WebEventType WEBEVENT_ERROR_EVENT;
    public static WebEventType WEBEVENT_AUDIT_EVENT;
    public static WebEventType WEBEVENT_SUCCESS_AUDIT_EVENT;
    public static WebEventType WEBEVENT_AUTHENTICATION_SUCCESS_AUDIT_EVENT;
    public static WebEventType WEBEVENT_FAILURE_AUDIT_EVENT;
    public static WebEventType WEBEVENT_AUTHENTICATION_FAILURE_AUDIT_EVENT;
    public static WebEventType WEBEVENT_VIEWSTATE_FAILURE_AUDIT_EVENT;
}
public class System.Web.Management.WebFailureAuditEvent : WebAuditEvent {
    protected internal WebFailureAuditEvent(string message, object eventSource, int eventCode);
    protected internal WebFailureAuditEvent(string message, object eventSource, int eventCode, int eventDetailCode);
    protected internal virtual void IncrementPerfCounters();
}
public class System.Web.Management.WebHeartbeatEvent : WebManagementEvent {
    public WebProcessStatistics ProcessStatistics { get; }
    protected internal WebHeartbeatEvent(string message, int eventCode);
    private static WebHeartbeatEvent();
    public WebProcessStatistics get_ProcessStatistics();
    internal virtual void FormatToString(WebEventFormatter formatter, bool includeAppInfo);
}
public class System.Web.Management.WebManagementEvent : WebBaseEvent {
    public WebProcessInformation ProcessInformation { get; }
    protected internal WebManagementEvent(string message, object eventSource, int eventCode);
    protected internal WebManagementEvent(string message, object eventSource, int eventCode, int eventDetailCode);
    private static WebManagementEvent();
    public WebProcessInformation get_ProcessInformation();
    internal virtual void GenerateFieldsForMarshal(List`1<WebEventFieldData> fields);
    internal virtual void FormatToString(WebEventFormatter formatter, bool includeAppInfo);
}
public class System.Web.Management.WebProcessInformation : object {
    public int ProcessID { get; }
    public string ProcessName { get; }
    public string AccountName { get; }
    public int get_ProcessID();
    public string get_ProcessName();
    public string get_AccountName();
    public void FormatToString(WebEventFormatter formatter);
}
public class System.Web.Management.WebProcessStatistics : object {
    public DateTime ProcessStartTime { get; }
    public int ThreadCount { get; }
    public long WorkingSet { get; }
    public long PeakWorkingSet { get; }
    public long ManagedHeapSize { get; }
    public int AppDomainCount { get; }
    public int RequestsExecuting { get; }
    public int RequestsQueued { get; }
    public int RequestsRejected { get; }
    private static WebProcessStatistics();
    public DateTime get_ProcessStartTime();
    public int get_ThreadCount();
    public long get_WorkingSet();
    public long get_PeakWorkingSet();
    public long get_ManagedHeapSize();
    public int get_AppDomainCount();
    public int get_RequestsExecuting();
    public int get_RequestsQueued();
    public int get_RequestsRejected();
    public virtual void FormatToString(WebEventFormatter formatter);
}
public class System.Web.Management.WebRequestErrorEvent : WebBaseErrorEvent {
    public WebRequestInformation RequestInformation { get; }
    public WebThreadInformation ThreadInformation { get; }
    protected internal WebRequestErrorEvent(string message, object eventSource, int eventCode, Exception exception);
    protected internal WebRequestErrorEvent(string message, object eventSource, int eventCode, int eventDetailCode, Exception exception);
    internal virtual void PreProcessEventInit();
    public WebRequestInformation get_RequestInformation();
    public WebThreadInformation get_ThreadInformation();
    internal virtual void FormatToString(WebEventFormatter formatter, bool includeAppInfo);
    internal virtual void GenerateFieldsForMarshal(List`1<WebEventFieldData> fields);
    protected internal virtual void IncrementPerfCounters();
}
public class System.Web.Management.WebRequestEvent : WebManagementEvent {
    public WebRequestInformation RequestInformation { get; }
    protected internal WebRequestEvent(string message, object eventSource, int eventCode);
    protected internal WebRequestEvent(string message, object eventSource, int eventCode, int eventDetailCode);
    internal virtual void PreProcessEventInit();
    public WebRequestInformation get_RequestInformation();
    internal virtual void GenerateFieldsForMarshal(List`1<WebEventFieldData> fields);
    internal virtual void FormatToString(WebEventFormatter formatter, bool includeAppInfo);
    protected internal virtual void IncrementPerfCounters();
}
public class System.Web.Management.WebRequestInformation : object {
    public string RequestUrl { get; }
    public string RequestPath { get; }
    public IPrincipal Principal { get; }
    public string UserHostAddress { get; }
    public string ThreadAccountName { get; }
    public string get_RequestUrl();
    public string get_RequestPath();
    public IPrincipal get_Principal();
    public string get_UserHostAddress();
    public string get_ThreadAccountName();
    public void FormatToString(WebEventFormatter formatter);
}
public class System.Web.Management.WebSuccessAuditEvent : WebAuditEvent {
    protected internal WebSuccessAuditEvent(string message, object eventSource, int eventCode);
    protected internal WebSuccessAuditEvent(string message, object eventSource, int eventCode, int eventDetailCode);
    protected internal virtual void IncrementPerfCounters();
}
public class System.Web.Management.WebThreadInformation : object {
    internal static string IsImpersonatingKey;
    public int ThreadID { get; }
    public string ThreadAccountName { get; }
    public string StackTrace { get; }
    public bool IsImpersonating { get; }
    internal WebThreadInformation(Exception exception);
    public int get_ThreadID();
    public string get_ThreadAccountName();
    public string get_StackTrace();
    public bool get_IsImpersonating();
    public void FormatToString(WebEventFormatter formatter);
}
public class System.Web.Management.WebViewStateFailureAuditEvent : WebFailureAuditEvent {
    public ViewStateException ViewStateException { get; }
    protected internal WebViewStateFailureAuditEvent(string message, object eventSource, int eventCode, ViewStateException viewStateException);
    protected internal WebViewStateFailureAuditEvent(string message, object eventSource, int eventCode, int eventDetailCode, ViewStateException viewStateException);
    public ViewStateException get_ViewStateException();
    internal virtual void GenerateFieldsForMarshal(List`1<WebEventFieldData> fields);
    internal virtual void FormatToString(WebEventFormatter formatter, bool includeAppInfo);
}
public class System.Web.Management.WmiWebEventProvider : WebEventProvider {
    public virtual void Initialize(string name, NameValueCollection config);
    public virtual void ProcessEvent(WebBaseEvent eventRaised);
    public virtual void Flush();
    public virtual void Shutdown();
}
public static class System.Web.MimeMapping : object {
    private static MimeMapping();
    public static string GetMimeMapping(string fileName);
    internal static void SetIntegratedApplicationContext(IntPtr appContext);
}
public class System.Web.ModelBinding.ArrayModelBinder`1 : CollectionModelBinder`1<TElement> {
    protected virtual bool CreateOrReplaceCollection(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext, IList`1<TElement> newCollection);
}
public class System.Web.ModelBinding.ArrayModelBinderProvider : ModelBinderProvider {
    public virtual IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
}
public abstract class System.Web.ModelBinding.AssociatedMetadataProvider : ModelMetadataProvider {
    protected abstract virtual ModelMetadata CreateMetadata(IEnumerable`1<Attribute> attributes, Type containerType, Func`1<object> modelAccessor, Type modelType, string propertyName);
    protected virtual IEnumerable`1<Attribute> FilterAttributes(Type containerType, PropertyDescriptor propertyDescriptor, IEnumerable`1<Attribute> attributes);
    public virtual IEnumerable`1<ModelMetadata> GetMetadataForProperties(object container, Type containerType);
    public virtual ModelMetadata GetMetadataForProperty(Func`1<object> modelAccessor, Type containerType, string propertyName);
    protected virtual ModelMetadata GetMetadataForProperty(Func`1<object> modelAccessor, Type containerType, PropertyDescriptor propertyDescriptor);
    public virtual ModelMetadata GetMetadataForType(Func`1<object> modelAccessor, Type modelType);
    protected virtual ICustomTypeDescriptor GetTypeDescriptor(Type type);
}
public abstract class System.Web.ModelBinding.AssociatedValidatorProvider : ModelValidatorProvider {
    protected virtual ICustomTypeDescriptor GetTypeDescriptor(Type type);
    public sealed virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, ModelBindingExecutionContext context);
    protected abstract virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, ModelBindingExecutionContext context, IEnumerable`1<Attribute> attributes);
}
public class System.Web.ModelBinding.BinaryDataModelBinderProvider : ModelBinderProvider {
    private static BinaryDataModelBinderProvider();
    public virtual IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
}
public enum System.Web.ModelBinding.BindingBehavior : Enum {
    public int value__;
    public static BindingBehavior Optional;
    public static BindingBehavior Never;
    public static BindingBehavior Required;
}
[AttributeUsageAttribute("132")]
public class System.Web.ModelBinding.BindingBehaviorAttribute : Attribute {
    public BindingBehavior Behavior { get; private set; }
    public object TypeId { get; }
    public BindingBehaviorAttribute(BindingBehavior behavior);
    private static BindingBehaviorAttribute();
    [CompilerGeneratedAttribute]
public BindingBehavior get_Behavior();
    [CompilerGeneratedAttribute]
private void set_Behavior(BindingBehavior value);
    public virtual object get_TypeId();
}
[AttributeUsageAttribute("132")]
public class System.Web.ModelBinding.BindNeverAttribute : BindingBehaviorAttribute {
}
[AttributeUsageAttribute("132")]
public class System.Web.ModelBinding.BindRequiredAttribute : BindingBehaviorAttribute {
}
public class System.Web.ModelBinding.CollectionModelBinder`1 : object {
    internal static List`1<TElement> BindComplexCollectionFromIndexes(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext, IEnumerable`1<string> indexNames);
    public virtual bool BindModel(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
    internal static List`1<TElement> BindSimpleCollection(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext, object rawValue, CultureInfo culture);
    protected virtual bool CreateOrReplaceCollection(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext, IList`1<TElement> newCollection);
}
public class System.Web.ModelBinding.CollectionModelBinderProvider : ModelBinderProvider {
    public virtual IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
}
internal static class System.Web.ModelBinding.CollectionModelBinderUtil : object {
    public static void CreateOrReplaceCollection(ModelBindingContext bindingContext, IEnumerable`1<TElement> incomingElements, Func`1<ICollection`1<TElement>> creator);
    public static void CreateOrReplaceDictionary(ModelBindingContext bindingContext, IEnumerable`1<KeyValuePair`2<TKey, TValue>> incomingElements, Func`1<IDictionary`2<TKey, TValue>> creator);
    public static IModelBinder GetGenericBinder(Type supportedInterfaceType, Type newInstanceType, Type openBinderType, ModelMetadata modelMetadata);
    public static IEnumerable`1<string> GetIndexNamesFromValueProviderResult(ValueProviderResult vpResultIndex);
    [IteratorStateMachineAttribute("System.Web.ModelBinding.CollectionModelBinderUtil/<GetZeroBasedIndexes>d__4")]
public static IEnumerable`1<string> GetZeroBasedIndexes();
    public static Type[] GetTypeArgumentsForUpdatableGenericCollection(Type supportedInterfaceType, Type newInstanceType, ModelMetadata modelMetadata);
}
public class System.Web.ModelBinding.ComplexModel : object {
    public ModelMetadata ModelMetadata { get; private set; }
    public ReadOnlyCollection`1<ModelMetadata> PropertyMetadata { get; private set; }
    public IDictionary`2<ModelMetadata, ComplexModelResult> Results { get; private set; }
    public ComplexModel(ModelMetadata modelMetadata, IEnumerable`1<ModelMetadata> propertyMetadata);
    [CompilerGeneratedAttribute]
public ModelMetadata get_ModelMetadata();
    [CompilerGeneratedAttribute]
private void set_ModelMetadata(ModelMetadata value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<ModelMetadata> get_PropertyMetadata();
    [CompilerGeneratedAttribute]
private void set_PropertyMetadata(ReadOnlyCollection`1<ModelMetadata> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<ModelMetadata, ComplexModelResult> get_Results();
    [CompilerGeneratedAttribute]
private void set_Results(IDictionary`2<ModelMetadata, ComplexModelResult> value);
}
public class System.Web.ModelBinding.ComplexModelBinder : object {
    public sealed virtual bool BindModel(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
}
public class System.Web.ModelBinding.ComplexModelBinderProvider : ModelBinderProvider {
    private static ComplexModelBinderProvider();
    public virtual IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
}
public class System.Web.ModelBinding.ComplexModelResult : object {
    public object Model { get; private set; }
    public ModelValidationNode ValidationNode { get; private set; }
    public ComplexModelResult(object model, ModelValidationNode validationNode);
    [CompilerGeneratedAttribute]
public object get_Model();
    [CompilerGeneratedAttribute]
private void set_Model(object value);
    [CompilerGeneratedAttribute]
public ModelValidationNode get_ValidationNode();
    [CompilerGeneratedAttribute]
private void set_ValidationNode(ModelValidationNode value);
}
[AttributeUsageAttribute("2048")]
public class System.Web.ModelBinding.ControlAttribute : ValueProviderSourceAttribute {
    public string ControlID { get; private set; }
    public string PropertyName { get; private set; }
    public ControlAttribute(string controlID);
    public ControlAttribute(string controlID, string propertyName);
    [CompilerGeneratedAttribute]
public string get_ControlID();
    [CompilerGeneratedAttribute]
private void set_ControlID(string value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    public virtual IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext);
    public virtual string GetModelName();
}
public class System.Web.ModelBinding.ControlValueProvider : SimpleValueProvider {
    public string PropertyName { get; private set; }
    public ControlValueProvider(ModelBindingExecutionContext modelBindingExecutionContext, string propertyName);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    protected virtual object FetchValue(string controlId);
}
[AttributeUsageAttribute("2048")]
public class System.Web.ModelBinding.CookieAttribute : ValueProviderSourceAttribute {
    public string Name { get; private set; }
    public bool ValidateInput { get; public set; }
    public CookieAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public virtual IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext);
    public virtual string GetModelName();
    public sealed virtual bool get_ValidateInput();
    public sealed virtual void set_ValidateInput(bool value);
}
public class System.Web.ModelBinding.CookieValueProvider : object {
    public CookieValueProvider(ModelBindingExecutionContext modelBindingExecutionContext);
    internal CookieValueProvider(ModelBindingExecutionContext modelBindingExecutionContext, UnvalidatedRequestValuesBase unvalidatedValues);
    internal CookieValueProvider(HttpCookieCollection collection, HttpCookieCollection unvalidatedCollection, CultureInfo culture);
    public sealed virtual bool ContainsPrefix(string prefix);
    public sealed virtual ValueProviderResult GetValue(string key);
    public sealed virtual ValueProviderResult GetValue(string key, bool skipValidation);
}
public class System.Web.ModelBinding.DataAnnotationsModelMetadata : ModelMetadata {
    public DataAnnotationsModelMetadata(DataAnnotationsModelMetadataProvider provider, Type containerType, Func`1<object> modelAccessor, Type modelType, string propertyName, DisplayColumnAttribute displayColumnAttribute);
    protected virtual string GetSimpleDisplayText();
}
public class System.Web.ModelBinding.DataAnnotationsModelMetadataProvider : AssociatedMetadataProvider {
    protected virtual ModelMetadata CreateMetadata(IEnumerable`1<Attribute> attributes, Type containerType, Func`1<object> modelAccessor, Type modelType, string propertyName);
}
public class System.Web.ModelBinding.DataAnnotationsModelValidationFactory : MulticastDelegate {
    public DataAnnotationsModelValidationFactory(object object, IntPtr method);
    public virtual ModelValidator Invoke(ModelMetadata metadata, ModelBindingExecutionContext context, ValidationAttribute attribute);
    public virtual IAsyncResult BeginInvoke(ModelMetadata metadata, ModelBindingExecutionContext context, ValidationAttribute attribute, AsyncCallback callback, object object);
    public virtual ModelValidator EndInvoke(IAsyncResult result);
}
public class System.Web.ModelBinding.DataAnnotationsModelValidator : ModelValidator {
    protected internal ValidationAttribute Attribute { get; private set; }
    protected internal string ErrorMessage { get; }
    public bool IsRequired { get; }
    public DataAnnotationsModelValidator(ModelMetadata metadata, ModelBindingExecutionContext context, ValidationAttribute attribute);
    [CompilerGeneratedAttribute]
protected internal ValidationAttribute get_Attribute();
    [CompilerGeneratedAttribute]
private void set_Attribute(ValidationAttribute value);
    protected internal string get_ErrorMessage();
    protected string GetLocalizedString(string name, Object[] arguments);
    public virtual bool get_IsRequired();
    internal static ModelValidator Create(ModelMetadata metadata, ModelBindingExecutionContext context, ValidationAttribute attribute);
    [IteratorStateMachineAttribute("System.Web.ModelBinding.DataAnnotationsModelValidator/<Validate>d__11")]
public virtual IEnumerable`1<ModelValidationResult> Validate(object container);
    protected virtual string GetLocalizedErrorMessage(string errorMessage);
}
public class System.Web.ModelBinding.DataAnnotationsModelValidator`1 : DataAnnotationsModelValidator {
    protected TAttribute Attribute { get; }
    public DataAnnotationsModelValidator`1(ModelMetadata metadata, ModelBindingExecutionContext context, TAttribute attribute);
    protected TAttribute get_Attribute();
}
public class System.Web.ModelBinding.DataAnnotationsModelValidatorProvider : AssociatedValidatorProvider {
    internal static DataAnnotationsModelValidationFactory DefaultAttributeFactory;
    internal static Dictionary`2<Type, DataAnnotationsModelValidationFactory> AttributeFactories;
    internal static DataAnnotationsValidatableObjectAdapterFactory DefaultValidatableFactory;
    internal static Dictionary`2<Type, DataAnnotationsValidatableObjectAdapterFactory> ValidatableFactories;
    public static bool AddImplicitRequiredAttributeForValueTypes { get; public set; }
    private static DataAnnotationsModelValidatorProvider();
    public static bool get_AddImplicitRequiredAttributeForValueTypes();
    public static void set_AddImplicitRequiredAttributeForValueTypes(bool value);
    protected virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, ModelBindingExecutionContext context, IEnumerable`1<Attribute> attributes);
    public static void RegisterAdapter(Type attributeType, Type adapterType);
    public static void RegisterAdapterFactory(Type attributeType, DataAnnotationsModelValidationFactory factory);
    public static void RegisterDefaultAdapter(Type adapterType);
    public static void RegisterDefaultAdapterFactory(DataAnnotationsModelValidationFactory factory);
    public static void RegisterValidatableObjectAdapter(Type modelType, Type adapterType);
    public static void RegisterValidatableObjectAdapterFactory(Type modelType, DataAnnotationsValidatableObjectAdapterFactory factory);
    public static void RegisterDefaultValidatableObjectAdapter(Type adapterType);
    public static void RegisterDefaultValidatableObjectAdapterFactory(DataAnnotationsValidatableObjectAdapterFactory factory);
}
public class System.Web.ModelBinding.DataAnnotationsValidatableObjectAdapterFactory : MulticastDelegate {
    public DataAnnotationsValidatableObjectAdapterFactory(object object, IntPtr method);
    public virtual ModelValidator Invoke(ModelMetadata metadata, ModelBindingExecutionContext context);
    public virtual IAsyncResult BeginInvoke(ModelMetadata metadata, ModelBindingExecutionContext context, AsyncCallback callback, object object);
    public virtual ModelValidator EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
internal static class System.Web.ModelBinding.DataTypeUtil : object {
    internal static string CurrencyTypeName;
    internal static string DateTypeName;
    internal static string DateTimeTypeName;
    internal static string DurationTypeName;
    internal static string EmailAddressTypeName;
    internal static string HtmlTypeName;
    internal static string ImageUrlTypeName;
    internal static string MultiLineTextTypeName;
    internal static string PasswordTypeName;
    internal static string PhoneNumberTypeName;
    internal static string TextTypeName;
    internal static string TimeTypeName;
    internal static string UrlTypeName;
    internal static string CreditCardTypeName;
    internal static string PostalCodeTypeName;
    internal static string UploadTypeName;
    private static DataTypeUtil();
    [ExtensionAttribute]
internal static string ToDataTypeName(DataTypeAttribute attribute, Func`2<DataTypeAttribute, bool> isDataType);
}
public class System.Web.ModelBinding.DefaultModelBinder : object {
    public ModelBinderProviderCollection Providers { get; private set; }
    [CompilerGeneratedAttribute]
public ModelBinderProviderCollection get_Providers();
    [CompilerGeneratedAttribute]
private void set_Providers(ModelBinderProviderCollection value);
    public sealed virtual bool BindModel(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
}
internal static class System.Web.ModelBinding.DictionaryHelpers : object {
    [IteratorStateMachineAttribute("System.Web.ModelBinding.DictionaryHelpers/<FindKeysWithPrefix>d__0`1")]
public static IEnumerable`1<KeyValuePair`2<string, TValue>> FindKeysWithPrefix(IDictionary`2<string, TValue> dictionary, string prefix);
    public static bool DoesAnyKeyHavePrefix(IDictionary`2<string, TValue> dictionary, string prefix);
}
public class System.Web.ModelBinding.DictionaryModelBinder`2 : CollectionModelBinder`1<KeyValuePair`2<TKey, TValue>> {
    protected virtual bool CreateOrReplaceCollection(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext, IList`1<KeyValuePair`2<TKey, TValue>> newCollection);
}
public class System.Web.ModelBinding.DictionaryModelBinderProvider : ModelBinderProvider {
    public virtual IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
}
public class System.Web.ModelBinding.DictionaryValueProvider`1 : object {
    public DictionaryValueProvider`1(IDictionary`2<string, TValue> dictionary, CultureInfo culture);
    public virtual bool ContainsPrefix(string prefix);
    public virtual ValueProviderResult GetValue(string key);
}
internal class System.Web.ModelBinding.DisplayAttributeAdapter : object {
    public DisplayAttributeAdapter(DisplayAttribute displayAttribute);
    public string GetDescription();
    public string GetShortName();
    public string GetPrompt();
    public string GetName();
    public Nullable`1<int> GetOrder();
}
internal class System.Web.ModelBinding.ElementalValueProvider : object {
    public CultureInfo Culture { get; private set; }
    public string Name { get; private set; }
    public object RawValue { get; private set; }
    public ElementalValueProvider(string name, object rawValue, CultureInfo culture);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
private void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_RawValue();
    [CompilerGeneratedAttribute]
private void set_RawValue(object value);
    public sealed virtual bool ContainsPrefix(string prefix);
    public sealed virtual ValueProviderResult GetValue(string key);
}
public class System.Web.ModelBinding.EmptyModelMetadataProvider : AssociatedMetadataProvider {
    protected virtual ModelMetadata CreateMetadata(IEnumerable`1<Attribute> attributes, Type containerType, Func`1<object> modelAccessor, Type modelType, string propertyName);
}
internal static class System.Web.ModelBinding.Error : object {
    public static InvalidOperationException BindingBehavior_ValueNotFound(string fieldName);
    public static ArgumentException Common_TypeMustImplementInterface(Type providedType, Type requiredInterfaceType, string parameterName);
    public static ArgumentException GenericModelBinderProvider_ParameterMustSpecifyOpenGenericType(Type specifiedType, string parameterName);
    public static ArgumentException GenericModelBinderProvider_TypeArgumentCountMismatch(Type modelType, Type modelBinderType);
    public static InvalidOperationException ModelBinderProviderCollection_BinderForTypeNotFound(Type modelType);
    public static ArgumentException ModelBinderUtil_ModelCannotBeNull(Type expectedType);
    public static ArgumentException ModelBinderUtil_ModelInstanceIsWrong(Type actualType, Type expectedType);
    public static ArgumentException ModelBinderUtil_ModelMetadataCannotBeNull();
    public static ArgumentException ModelBinderUtil_ModelTypeIsWrong(Type actualType, Type expectedType);
    public static InvalidOperationException ModelBindingContext_ModelMetadataMustBeSet();
}
[AttributeUsageAttribute("1028")]
public class System.Web.ModelBinding.ExtensibleModelBinderAttribute : Attribute {
    public Type BinderType { get; private set; }
    public bool SuppressPrefixCheck { get; public set; }
    public ExtensibleModelBinderAttribute(Type binderType);
    [CompilerGeneratedAttribute]
public Type get_BinderType();
    [CompilerGeneratedAttribute]
private void set_BinderType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SuppressPrefixCheck();
    [CompilerGeneratedAttribute]
public void set_SuppressPrefixCheck(bool value);
}
[AttributeUsageAttribute("2048")]
public class System.Web.ModelBinding.FormAttribute : ValueProviderSourceAttribute {
    public string FieldName { get; private set; }
    public bool ValidateInput { get; public set; }
    public FormAttribute(string fieldName);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
private void set_FieldName(string value);
    public virtual IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext);
    public virtual string GetModelName();
    public sealed virtual bool get_ValidateInput();
    public sealed virtual void set_ValidateInput(bool value);
}
public class System.Web.ModelBinding.FormValueProvider : NameValueCollectionValueProvider {
    public FormValueProvider(ModelBindingExecutionContext modelBindingExecutionContext);
    internal FormValueProvider(ModelBindingExecutionContext modelBindingExecutionContext, UnvalidatedRequestValuesBase unvalidatedValues);
}
public class System.Web.ModelBinding.GenericModelBinderProvider : ModelBinderProvider {
    public Type ModelType { get; }
    public bool SuppressPrefixCheck { get; public set; }
    public GenericModelBinderProvider(Type modelType, IModelBinder modelBinder);
    public GenericModelBinderProvider(Type modelType, Type modelBinderType);
    public GenericModelBinderProvider(Type modelType, Func`2<Type[], IModelBinder> modelBinderFactory);
    public Type get_ModelType();
    [CompilerGeneratedAttribute]
public bool get_SuppressPrefixCheck();
    [CompilerGeneratedAttribute]
public void set_SuppressPrefixCheck(bool value);
    public virtual IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
}
public interface System.Web.ModelBinding.IMetadataAware {
    public abstract virtual void OnMetadataCreated(ModelMetadata metadata);
}
public interface System.Web.ModelBinding.IModelBinder {
    public abstract virtual bool BindModel(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
}
public interface System.Web.ModelBinding.IModelNameProvider {
    public abstract virtual string GetModelName();
}
public interface System.Web.ModelBinding.IUnvalidatedValueProvider {
    public abstract virtual ValueProviderResult GetValue(string key, bool skipValidation);
}
public interface System.Web.ModelBinding.IUnvalidatedValueProviderSource {
    public bool ValidateInput { get; public set; }
    public abstract virtual bool get_ValidateInput();
    public abstract virtual void set_ValidateInput(bool value);
}
public interface System.Web.ModelBinding.IValueProvider {
    public abstract virtual bool ContainsPrefix(string prefix);
    public abstract virtual ValueProviderResult GetValue(string key);
}
public interface System.Web.ModelBinding.IValueProviderSource {
    public abstract virtual IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext);
}
public class System.Web.ModelBinding.KeyValuePairModelBinder`2 : object {
    internal ModelMetadataProvider MetadataProvider { get; internal set; }
    internal ModelMetadataProvider get_MetadataProvider();
    internal void set_MetadataProvider(ModelMetadataProvider value);
    public sealed virtual bool BindModel(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
}
public class System.Web.ModelBinding.KeyValuePairModelBinderProvider : ModelBinderProvider {
    public virtual IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
}
internal static class System.Web.ModelBinding.KeyValuePairModelBinderUtil : object {
    public static bool TryBindStrongModel(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext parentBindingContext, string propertyName, ModelMetadataProvider metadataProvider, TModel& model);
}
public class System.Web.ModelBinding.MaxLengthAttributeAdapter : DataAnnotationsModelValidator`1<MaxLengthAttribute> {
    public MaxLengthAttributeAdapter(ModelMetadata metadata, ModelBindingExecutionContext context, MaxLengthAttribute attribute);
    protected virtual string GetLocalizedErrorMessage(string errorMessage);
}
public class System.Web.ModelBinding.MinLengthAttributeAdapter : DataAnnotationsModelValidator`1<MinLengthAttribute> {
    public MinLengthAttributeAdapter(ModelMetadata metadata, ModelBindingExecutionContext context, MinLengthAttribute attribute);
    protected virtual string GetLocalizedErrorMessage(string errorMessage);
}
[DefaultMemberAttribute("Item")]
public class System.Web.ModelBinding.ModelBinderDictionary : object {
    public int Count { get; }
    public IModelBinder DefaultBinder { get; public set; }
    public bool IsReadOnly { get; }
    public ICollection`1<Type> Keys { get; }
    public IModelBinder Item { get; public set; }
    public ICollection`1<IModelBinder> Values { get; }
    internal ModelBinderDictionary(ModelBinderProviderCollection modelBinderProviders);
    public sealed virtual int get_Count();
    public IModelBinder get_DefaultBinder();
    public void set_DefaultBinder(IModelBinder value);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICollection`1<Type> get_Keys();
    public sealed virtual IModelBinder get_Item(Type key);
    public sealed virtual void set_Item(Type key, IModelBinder value);
    public sealed virtual ICollection`1<IModelBinder> get_Values();
    public sealed virtual void Add(KeyValuePair`2<Type, IModelBinder> item);
    public sealed virtual void Add(Type key, IModelBinder value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<Type, IModelBinder> item);
    public sealed virtual bool ContainsKey(Type key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<KeyValuePair`2<Type, IModelBinder>> GetEnumerator();
    public sealed virtual bool Remove(KeyValuePair`2<Type, IModelBinder> item);
    public sealed virtual bool Remove(Type key);
    public sealed virtual bool TryGetValue(Type key, IModelBinder& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Web.ModelBinding.ModelBinderErrorMessageProvider : MulticastDelegate {
    public ModelBinderErrorMessageProvider(object object, IntPtr method);
    public virtual string Invoke(ModelBindingExecutionContext modelBindingExecutionContext, ModelMetadata modelMetadata, object incomingValue);
    public virtual IAsyncResult BeginInvoke(ModelBindingExecutionContext modelBindingExecutionContext, ModelMetadata modelMetadata, object incomingValue, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public static class System.Web.ModelBinding.ModelBinderErrorMessageProviders : object {
    public static ModelBinderErrorMessageProvider TypeConversionErrorMessageProvider { get; public set; }
    public static ModelBinderErrorMessageProvider ValueRequiredErrorMessageProvider { get; public set; }
    public static ModelBinderErrorMessageProvider get_TypeConversionErrorMessageProvider();
    public static void set_TypeConversionErrorMessageProvider(ModelBinderErrorMessageProvider value);
    public static ModelBinderErrorMessageProvider get_ValueRequiredErrorMessageProvider();
    public static void set_ValueRequiredErrorMessageProvider(ModelBinderErrorMessageProvider value);
    internal static string GetUserResourceString(ModelBindingExecutionContext modelBindingExecutionContext, string resourceName, string resourceClassKey);
}
public abstract class System.Web.ModelBinding.ModelBinderProvider : object {
    public abstract virtual IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
}
public class System.Web.ModelBinding.ModelBinderProviderCollection : Collection`1<ModelBinderProvider> {
    public ModelBinderProviderCollection(IList`1<ModelBinderProvider> list);
    public IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
    internal IModelBinder GetRequiredBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
    protected virtual void InsertItem(int index, ModelBinderProvider item);
    public void RegisterBinderForGenericType(Type modelType, IModelBinder modelBinder);
    public void RegisterBinderForGenericType(Type modelType, Func`2<Type[], IModelBinder> modelBinderFactory);
    public void RegisterBinderForGenericType(Type modelType, Type modelBinderType);
    public void RegisterBinderForType(Type modelType, IModelBinder modelBinder);
    internal void RegisterBinderForType(Type modelType, IModelBinder modelBinder, bool suppressPrefixCheck);
    public void RegisterBinderForType(Type modelType, Func`1<IModelBinder> modelBinderFactory);
    protected virtual void SetItem(int index, ModelBinderProvider item);
}
[AttributeUsageAttribute("4")]
public class System.Web.ModelBinding.ModelBinderProviderOptionsAttribute : Attribute {
    public bool FrontOfList { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_FrontOfList();
    [CompilerGeneratedAttribute]
public void set_FrontOfList(bool value);
}
public static class System.Web.ModelBinding.ModelBinderProviders : object {
    public static ModelBinderProviderCollection Providers { get; }
    private static ModelBinderProviders();
    public static ModelBinderProviderCollection get_Providers();
}
public static class System.Web.ModelBinding.ModelBinders : object {
    public static ModelBinderDictionary Binders { get; }
    private static ModelBinders();
    public static ModelBinderDictionary get_Binders();
}
internal static class System.Web.ModelBinding.ModelBinderUtil : object {
    public static TModel CastOrDefault(object model);
    public static string CreateIndexModelName(string parentName, int index);
    public static string CreateIndexModelName(string parentName, string index);
    public static string CreatePropertyModelName(string prefix, string propertyName);
    public static IModelBinder GetPossibleBinderInstance(Type closedModelType, Type openModelType, Type openBinderType);
    public static Object[] RawValueToObjectArray(object rawValue);
    public static void ReplaceEmptyStringWithNull(ModelMetadata modelMetadata, Object& model);
    public static void ValidateBindingContext(ModelBindingContext bindingContext);
    public static void ValidateBindingContext(ModelBindingContext bindingContext, Type requiredType, bool allowNullModel);
}
public class System.Web.ModelBinding.ModelBindingContext : object {
    public object Model { get; public set; }
    public ModelBinderProviderCollection ModelBinderProviders { get; public set; }
    public ModelMetadata ModelMetadata { get; public set; }
    public string ModelName { get; public set; }
    public bool ValidateRequest { get; public set; }
    public ModelStateDictionary ModelState { get; public set; }
    public Type ModelType { get; }
    public IDictionary`2<string, ModelMetadata> PropertyMetadata { get; }
    public ModelValidationNode ValidationNode { get; public set; }
    public IValueProvider ValueProvider { get; public set; }
    internal IUnvalidatedValueProvider UnvalidatedValueProvider { get; }
    public ModelBindingContext(ModelBindingContext bindingContext);
    public object get_Model();
    public void set_Model(object value);
    public ModelBinderProviderCollection get_ModelBinderProviders();
    public void set_ModelBinderProviders(ModelBinderProviderCollection value);
    public ModelMetadata get_ModelMetadata();
    public void set_ModelMetadata(ModelMetadata value);
    public string get_ModelName();
    public void set_ModelName(string value);
    [CompilerGeneratedAttribute]
public bool get_ValidateRequest();
    [CompilerGeneratedAttribute]
public void set_ValidateRequest(bool value);
    public ModelStateDictionary get_ModelState();
    public void set_ModelState(ModelStateDictionary value);
    public Type get_ModelType();
    public IDictionary`2<string, ModelMetadata> get_PropertyMetadata();
    public ModelValidationNode get_ValidationNode();
    public void set_ValidationNode(ModelValidationNode value);
    public IValueProvider get_ValueProvider();
    public void set_ValueProvider(IValueProvider value);
    internal IUnvalidatedValueProvider get_UnvalidatedValueProvider();
}
public class System.Web.ModelBinding.ModelBindingExecutionContext : object {
    public HttpContextBase HttpContext { get; }
    public ModelStateDictionary ModelState { get; }
    public ModelBindingExecutionContext(HttpContextBase httpContext, ModelStateDictionary modelState);
    public virtual HttpContextBase get_HttpContext();
    public virtual ModelStateDictionary get_ModelState();
    public virtual void PublishService(TService service);
    public virtual TService GetService();
    public virtual TService TryGetService();
}
public class System.Web.ModelBinding.ModelError : object {
    public Exception Exception { get; private set; }
    public string ErrorMessage { get; private set; }
    public ModelError(Exception exception);
    public ModelError(Exception exception, string errorMessage);
    public ModelError(string errorMessage);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
}
public class System.Web.ModelBinding.ModelErrorCollection : Collection`1<ModelError> {
    public void Add(Exception exception);
    public void Add(string errorMessage);
}
public class System.Web.ModelBinding.ModelMetadata : object {
    public static int DefaultOrder;
    public Dictionary`2<string, object> AdditionalValues { get; }
    public Type ContainerType { get; }
    public bool ConvertEmptyStringToNull { get; public set; }
    public string DataTypeName { get; public set; }
    public string Description { get; public set; }
    public string DisplayFormatString { get; public set; }
    public string DisplayName { get; public set; }
    public string EditFormatString { get; public set; }
    public bool HideSurroundingHtml { get; public set; }
    public bool IsComplexType { get; }
    public bool IsNullableValueType { get; }
    public bool IsReadOnly { get; public set; }
    public bool IsRequired { get; public set; }
    public object Model { get; public set; }
    public Type ModelType { get; }
    public string NullDisplayText { get; public set; }
    public int Order { get; public set; }
    public IEnumerable`1<ModelMetadata> Properties { get; }
    public string PropertyName { get; }
    protected ModelMetadataProvider Provider { get; protected set; }
    internal Type RealModelType { get; }
    public bool RequestValidationEnabled { get; public set; }
    public string ShortDisplayName { get; public set; }
    public bool ShowForDisplay { get; public set; }
    public bool ShowForEdit { get; public set; }
    public string SimpleDisplayText { get; public set; }
    public string TemplateHint { get; public set; }
    public string Watermark { get; public set; }
    public ModelMetadata(ModelMetadataProvider provider, Type containerType, Func`1<object> modelAccessor, Type modelType, string propertyName);
    public virtual Dictionary`2<string, object> get_AdditionalValues();
    public Type get_ContainerType();
    public virtual bool get_ConvertEmptyStringToNull();
    public virtual void set_ConvertEmptyStringToNull(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_DataTypeName();
    [CompilerGeneratedAttribute]
public virtual void set_DataTypeName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DisplayFormatString();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayFormatString(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_EditFormatString();
    [CompilerGeneratedAttribute]
public virtual void set_EditFormatString(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_HideSurroundingHtml();
    [CompilerGeneratedAttribute]
public virtual void set_HideSurroundingHtml(bool value);
    public virtual bool get_IsComplexType();
    public bool get_IsNullableValueType();
    [CompilerGeneratedAttribute]
public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public virtual void set_IsReadOnly(bool value);
    public virtual bool get_IsRequired();
    public virtual void set_IsRequired(bool value);
    public object get_Model();
    public void set_Model(object value);
    public Type get_ModelType();
    [CompilerGeneratedAttribute]
public virtual string get_NullDisplayText();
    [CompilerGeneratedAttribute]
public virtual void set_NullDisplayText(string value);
    public virtual int get_Order();
    public virtual void set_Order(int value);
    public virtual IEnumerable`1<ModelMetadata> get_Properties();
    public string get_PropertyName();
    [CompilerGeneratedAttribute]
protected ModelMetadataProvider get_Provider();
    [CompilerGeneratedAttribute]
protected void set_Provider(ModelMetadataProvider value);
    internal Type get_RealModelType();
    public virtual bool get_RequestValidationEnabled();
    public virtual void set_RequestValidationEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_ShortDisplayName();
    [CompilerGeneratedAttribute]
public virtual void set_ShortDisplayName(string value);
    public virtual bool get_ShowForDisplay();
    public virtual void set_ShowForDisplay(bool value);
    public virtual bool get_ShowForEdit();
    public virtual void set_ShowForEdit(bool value);
    public virtual string get_SimpleDisplayText();
    public virtual void set_SimpleDisplayText(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TemplateHint();
    [CompilerGeneratedAttribute]
public virtual void set_TemplateHint(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Watermark();
    [CompilerGeneratedAttribute]
public virtual void set_Watermark(string value);
    public string GetDisplayName();
    protected virtual string GetSimpleDisplayText();
    public virtual IEnumerable`1<ModelValidator> GetValidators(ModelBindingExecutionContext context);
}
public abstract class System.Web.ModelBinding.ModelMetadataProvider : object {
    public abstract virtual IEnumerable`1<ModelMetadata> GetMetadataForProperties(object container, Type containerType);
    public abstract virtual ModelMetadata GetMetadataForProperty(Func`1<object> modelAccessor, Type containerType, string propertyName);
    public abstract virtual ModelMetadata GetMetadataForType(Func`1<object> modelAccessor, Type modelType);
}
public static class System.Web.ModelBinding.ModelMetadataProviders : object {
    public static ModelMetadataProvider Current { get; public set; }
    private static ModelMetadataProviders();
    public static ModelMetadataProvider get_Current();
    public static void set_Current(ModelMetadataProvider value);
}
public class System.Web.ModelBinding.ModelState : object {
    public ValueProviderResult Value { get; public set; }
    public ModelErrorCollection Errors { get; }
    [CompilerGeneratedAttribute]
public ValueProviderResult get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(ValueProviderResult value);
    public ModelErrorCollection get_Errors();
}
[DefaultMemberAttribute("Item")]
public class System.Web.ModelBinding.ModelStateDictionary : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsValid { get; }
    public ICollection`1<string> Keys { get; }
    public ModelState Item { get; public set; }
    public ICollection`1<ModelState> Values { get; }
    public ModelStateDictionary(ModelStateDictionary dictionary);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public bool get_IsValid();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ModelState get_Item(string key);
    public sealed virtual void set_Item(string key, ModelState value);
    public sealed virtual ICollection`1<ModelState> get_Values();
    public sealed virtual void Add(KeyValuePair`2<string, ModelState> item);
    public sealed virtual void Add(string key, ModelState value);
    public void AddModelError(string key, Exception exception);
    public void AddModelError(string key, string errorMessage);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, ModelState> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, ModelState>> GetEnumerator();
    public bool IsValidField(string key);
    public void Merge(ModelStateDictionary dictionary);
    public sealed virtual bool Remove(KeyValuePair`2<string, ModelState> item);
    public sealed virtual bool Remove(string key);
    public void SetModelValue(string key, ValueProviderResult value);
    public sealed virtual bool TryGetValue(string key, ModelState& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Web.ModelBinding.ModelValidatedEventArgs : EventArgs {
    public ModelBindingExecutionContext ModelBindingExecutionContext { get; private set; }
    public ModelValidationNode ParentNode { get; private set; }
    public ModelValidatedEventArgs(ModelBindingExecutionContext modelBindingExecutionContext, ModelValidationNode parentNode);
    [CompilerGeneratedAttribute]
public ModelBindingExecutionContext get_ModelBindingExecutionContext();
    [CompilerGeneratedAttribute]
private void set_ModelBindingExecutionContext(ModelBindingExecutionContext value);
    [CompilerGeneratedAttribute]
public ModelValidationNode get_ParentNode();
    [CompilerGeneratedAttribute]
private void set_ParentNode(ModelValidationNode value);
}
public class System.Web.ModelBinding.ModelValidatingEventArgs : CancelEventArgs {
    public ModelBindingExecutionContext ModelBindingExecutionContext { get; private set; }
    public ModelValidationNode ParentNode { get; private set; }
    public ModelValidatingEventArgs(ModelBindingExecutionContext modelBindingExecutionContext, ModelValidationNode parentNode);
    [CompilerGeneratedAttribute]
public ModelBindingExecutionContext get_ModelBindingExecutionContext();
    [CompilerGeneratedAttribute]
private void set_ModelBindingExecutionContext(ModelBindingExecutionContext value);
    [CompilerGeneratedAttribute]
public ModelValidationNode get_ParentNode();
    [CompilerGeneratedAttribute]
private void set_ParentNode(ModelValidationNode value);
}
public class System.Web.ModelBinding.ModelValidationNode : object {
    public ICollection`1<ModelValidationNode> ChildNodes { get; private set; }
    public ModelMetadata ModelMetadata { get; private set; }
    public string ModelStateKey { get; private set; }
    public bool ValidateAllProperties { get; public set; }
    public bool SuppressValidation { get; public set; }
    public ModelValidationNode(ModelMetadata modelMetadata, string modelStateKey);
    public ModelValidationNode(ModelMetadata modelMetadata, string modelStateKey, IEnumerable`1<ModelValidationNode> childNodes);
    [CompilerGeneratedAttribute]
public ICollection`1<ModelValidationNode> get_ChildNodes();
    [CompilerGeneratedAttribute]
private void set_ChildNodes(ICollection`1<ModelValidationNode> value);
    [CompilerGeneratedAttribute]
public ModelMetadata get_ModelMetadata();
    [CompilerGeneratedAttribute]
private void set_ModelMetadata(ModelMetadata value);
    [CompilerGeneratedAttribute]
public string get_ModelStateKey();
    [CompilerGeneratedAttribute]
private void set_ModelStateKey(string value);
    [CompilerGeneratedAttribute]
public bool get_ValidateAllProperties();
    [CompilerGeneratedAttribute]
public void set_ValidateAllProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressValidation();
    [CompilerGeneratedAttribute]
public void set_SuppressValidation(bool value);
    [CompilerGeneratedAttribute]
public void add_Validated(EventHandler`1<ModelValidatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Validated(EventHandler`1<ModelValidatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Validating(EventHandler`1<ModelValidatingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Validating(EventHandler`1<ModelValidatingEventArgs> value);
    public void CombineWith(ModelValidationNode otherNode);
    public void Validate(ModelBindingExecutionContext modelBindingExecutionContext);
    public void Validate(ModelBindingExecutionContext modelBindingExecutionContext, ModelValidationNode parentNode);
}
public class System.Web.ModelBinding.ModelValidationResult : object {
    public string MemberName { get; public set; }
    public string Message { get; public set; }
    public string get_MemberName();
    public void set_MemberName(string value);
    public string get_Message();
    public void set_Message(string value);
}
public abstract class System.Web.ModelBinding.ModelValidator : object {
    protected internal ModelBindingExecutionContext ModelBindingExecutionContext { get; private set; }
    public bool IsRequired { get; }
    protected internal ModelMetadata Metadata { get; private set; }
    protected ModelValidator(ModelMetadata metadata, ModelBindingExecutionContext modelBindingExecutionContext);
    [CompilerGeneratedAttribute]
protected internal ModelBindingExecutionContext get_ModelBindingExecutionContext();
    [CompilerGeneratedAttribute]
private void set_ModelBindingExecutionContext(ModelBindingExecutionContext value);
    public virtual bool get_IsRequired();
    [CompilerGeneratedAttribute]
protected internal ModelMetadata get_Metadata();
    [CompilerGeneratedAttribute]
private void set_Metadata(ModelMetadata value);
    public static ModelValidator GetModelValidator(ModelMetadata metadata, ModelBindingExecutionContext context);
    public abstract virtual IEnumerable`1<ModelValidationResult> Validate(object container);
}
public abstract class System.Web.ModelBinding.ModelValidatorProvider : object {
    public abstract virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, ModelBindingExecutionContext context);
}
public class System.Web.ModelBinding.ModelValidatorProviderCollection : Collection`1<ModelValidatorProvider> {
    public ModelValidatorProviderCollection(IList`1<ModelValidatorProvider> list);
    protected virtual void InsertItem(int index, ModelValidatorProvider item);
    protected virtual void SetItem(int index, ModelValidatorProvider item);
    public IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, ModelBindingExecutionContext context);
}
public static class System.Web.ModelBinding.ModelValidatorProviders : object {
    public static ModelValidatorProviderCollection Providers { get; }
    private static ModelValidatorProviders();
    public static ModelValidatorProviderCollection get_Providers();
}
public class System.Web.ModelBinding.MutableObjectModelBinder : object {
    internal ModelMetadataProvider MetadataProvider { get; internal set; }
    internal ModelMetadataProvider get_MetadataProvider();
    internal void set_MetadataProvider(ModelMetadataProvider value);
    public virtual bool BindModel(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
    protected virtual bool CanUpdateProperty(ModelMetadata propertyMetadata);
    internal static bool CanUpdatePropertyInternal(ModelMetadata propertyMetadata);
    protected virtual object CreateModel(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
    internal static EventHandler`1<ModelValidatedEventArgs> CreateNullCheckFailedHandler(ModelBindingExecutionContext modelBindingExecutionContext, ModelMetadata modelMetadata, object incomingValue);
    protected virtual void EnsureModel(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
    protected virtual IEnumerable`1<ModelMetadata> GetMetadataForProperties(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
    internal static void GetRequiredPropertiesCollection(Type modelType, HashSet`1& requiredProperties, HashSet`1& skipProperties);
    internal void ProcessComplexModel(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext, ComplexModel complexModel);
    protected virtual void SetProperty(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext, ModelMetadata propertyMetadata, ComplexModelResult complexModelResult);
}
public class System.Web.ModelBinding.MutableObjectModelBinderProvider : ModelBinderProvider {
    public virtual IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
}
public class System.Web.ModelBinding.NameValueCollectionValueProvider : object {
    public NameValueCollectionValueProvider(NameValueCollection collection, CultureInfo culture);
    public NameValueCollectionValueProvider(NameValueCollection collection, NameValueCollection unvalidatedCollection, CultureInfo culture);
    public virtual bool ContainsPrefix(string prefix);
    public virtual ValueProviderResult GetValue(string key);
    public virtual ValueProviderResult GetValue(string key, bool skipValidation);
}
internal class System.Web.ModelBinding.PrefixContainer : object {
    internal PrefixContainer(IEnumerable`1<string> values);
    internal bool ContainsPrefix(string prefix);
    internal static bool IsPrefixMatch(string prefix, string testString);
}
[AttributeUsageAttribute("2048")]
public class System.Web.ModelBinding.ProfileAttribute : ValueProviderSourceAttribute {
    public string Key { get; private set; }
    public ProfileAttribute(string key);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    public virtual IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext);
    public virtual string GetModelName();
}
public class System.Web.ModelBinding.ProfileValueProvider : SimpleValueProvider {
    public ProfileValueProvider(ModelBindingExecutionContext modelBindingExecutionContext);
    protected virtual object FetchValue(string key);
}
[AttributeUsageAttribute("2048")]
public class System.Web.ModelBinding.QueryStringAttribute : ValueProviderSourceAttribute {
    public string Key { get; private set; }
    public bool ValidateInput { get; public set; }
    public QueryStringAttribute(string key);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    public virtual IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext);
    public virtual string GetModelName();
    public sealed virtual bool get_ValidateInput();
    public sealed virtual void set_ValidateInput(bool value);
}
public class System.Web.ModelBinding.QueryStringValueProvider : NameValueCollectionValueProvider {
    public QueryStringValueProvider(ModelBindingExecutionContext modelBindingExecutionContext);
    internal QueryStringValueProvider(ModelBindingExecutionContext modelBindingExecutionContext, UnvalidatedRequestValuesBase unvalidatedValues);
}
public class System.Web.ModelBinding.RangeAttributeAdapter : DataAnnotationsModelValidator`1<RangeAttribute> {
    public RangeAttributeAdapter(ModelMetadata metadata, ModelBindingExecutionContext context, RangeAttribute attribute);
    protected virtual string GetLocalizedErrorMessage(string errorMessage);
}
public class System.Web.ModelBinding.RegularExpressionAttributeAdapter : DataAnnotationsModelValidator`1<RegularExpressionAttribute> {
    public RegularExpressionAttributeAdapter(ModelMetadata metadata, ModelBindingExecutionContext context, RegularExpressionAttribute attribute);
    protected virtual string GetLocalizedErrorMessage(string errorMessage);
}
public class System.Web.ModelBinding.RequiredAttributeAdapter : DataAnnotationsModelValidator`1<RequiredAttribute> {
    public RequiredAttributeAdapter(ModelMetadata metadata, ModelBindingExecutionContext context, RequiredAttribute attribute);
}
[AttributeUsageAttribute("2048")]
public class System.Web.ModelBinding.RouteDataAttribute : ValueProviderSourceAttribute {
    public string Key { get; private set; }
    public RouteDataAttribute(string key);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    public virtual IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext);
    public virtual string GetModelName();
}
public class System.Web.ModelBinding.RouteDataValueProvider : DictionaryValueProvider`1<object> {
    public RouteDataValueProvider(ModelBindingExecutionContext modelBindingExecutionContext);
}
[AttributeUsageAttribute("2048")]
public class System.Web.ModelBinding.SessionAttribute : ValueProviderSourceAttribute {
    public string Name { get; private set; }
    public SessionAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public virtual IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext);
    public virtual string GetModelName();
}
public class System.Web.ModelBinding.SimpleModelBinderProvider : ModelBinderProvider {
    public Type ModelType { get; }
    public bool SuppressPrefixCheck { get; public set; }
    public SimpleModelBinderProvider(Type modelType, IModelBinder modelBinder);
    public SimpleModelBinderProvider(Type modelType, Func`1<IModelBinder> modelBinderFactory);
    public Type get_ModelType();
    [CompilerGeneratedAttribute]
public bool get_SuppressPrefixCheck();
    [CompilerGeneratedAttribute]
public void set_SuppressPrefixCheck(bool value);
    public virtual IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
}
public abstract class System.Web.ModelBinding.SimpleValueProvider : object {
    protected ModelBindingExecutionContext ModelBindingExecutionContext { get; private set; }
    protected SimpleValueProvider(ModelBindingExecutionContext modelBindingExecutionContext);
    protected SimpleValueProvider(ModelBindingExecutionContext modelBindingExecutionContext, CultureInfo cultureInfo);
    [CompilerGeneratedAttribute]
protected ModelBindingExecutionContext get_ModelBindingExecutionContext();
    [CompilerGeneratedAttribute]
private void set_ModelBindingExecutionContext(ModelBindingExecutionContext value);
    public virtual bool ContainsPrefix(string prefix);
    public virtual ValueProviderResult GetValue(string key);
    protected abstract virtual object FetchValue(string key);
}
public class System.Web.ModelBinding.StringLengthAttributeAdapter : DataAnnotationsModelValidator`1<StringLengthAttribute> {
    public StringLengthAttributeAdapter(ModelMetadata metadata, ModelBindingExecutionContext context, StringLengthAttribute attribute);
    protected virtual string GetLocalizedErrorMessage(string errorMessage);
}
public class System.Web.ModelBinding.TypeConverterModelBinder : object {
    public sealed virtual bool BindModel(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
}
public class System.Web.ModelBinding.TypeConverterModelBinderProvider : ModelBinderProvider {
    public virtual IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
}
internal static class System.Web.ModelBinding.TypeDescriptorHelper : object {
    public static ICustomTypeDescriptor Get(Type type);
}
internal static class System.Web.ModelBinding.TypeHelpers : object {
    public static Type ExtractGenericInterface(Type queryType, Type interfaceType);
    public static Type[] GetTypeArgumentsIfMatch(Type closedType, Type matchingOpenType);
    public static bool IsCompatibleObject(Type type, object value);
    public static bool IsNullableValueType(Type type);
    public static bool TypeAllowsNullValue(Type type);
}
public class System.Web.ModelBinding.TypeMatchModelBinder : object {
    public sealed virtual bool BindModel(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
    internal static ValueProviderResult GetCompatibleValueProviderResult(ModelBindingContext bindingContext);
}
[ModelBinderProviderOptionsAttribute]
public class System.Web.ModelBinding.TypeMatchModelBinderProvider : ModelBinderProvider {
    public virtual IModelBinder GetBinder(ModelBindingExecutionContext modelBindingExecutionContext, ModelBindingContext bindingContext);
}
internal class System.Web.ModelBinding.UnvalidatedRequestValuesAccessor : MulticastDelegate {
    public UnvalidatedRequestValuesAccessor(object object, IntPtr method);
    public virtual UnvalidatedRequestValuesBase Invoke(ModelBindingExecutionContext modelBindingExecutionContext);
    public virtual IAsyncResult BeginInvoke(ModelBindingExecutionContext modelBindingExecutionContext, AsyncCallback callback, object object);
    public virtual UnvalidatedRequestValuesBase EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("2048")]
public class System.Web.ModelBinding.UserProfileAttribute : Attribute {
    public sealed virtual IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext);
}
public class System.Web.ModelBinding.UserProfileValueProvider : SimpleValueProvider {
    public UserProfileValueProvider(ModelBindingExecutionContext modelBindingExecutionContext);
    protected virtual object FetchValue(string key);
}
public class System.Web.ModelBinding.ValidatableObjectAdapter : ModelValidator {
    public ValidatableObjectAdapter(ModelMetadata metadata, ModelBindingExecutionContext context);
    public virtual IEnumerable`1<ModelValidationResult> Validate(object container);
}
public class System.Web.ModelBinding.ValueProviderCollection : Collection`1<IValueProvider> {
    public ValueProviderCollection(IList`1<IValueProvider> list);
    public virtual bool ContainsPrefix(string prefix);
    public virtual ValueProviderResult GetValue(string key);
    public virtual ValueProviderResult GetValue(string key, bool skipValidation);
    internal static ValueProviderResult GetValueFromProvider(IValueProvider provider, string key, bool skipValidation);
    protected virtual void InsertItem(int index, IValueProvider item);
    protected virtual void SetItem(int index, IValueProvider item);
}
public class System.Web.ModelBinding.ValueProviderResult : object {
    public string AttemptedValue { get; protected set; }
    public CultureInfo Culture { get; protected set; }
    public object RawValue { get; protected set; }
    public ValueProviderResult(object rawValue, string attemptedValue, CultureInfo culture);
    private static ValueProviderResult();
    [CompilerGeneratedAttribute]
public string get_AttemptedValue();
    [CompilerGeneratedAttribute]
protected void set_AttemptedValue(string value);
    public CultureInfo get_Culture();
    protected void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public object get_RawValue();
    [CompilerGeneratedAttribute]
protected void set_RawValue(object value);
    public object ConvertTo(Type type);
    public virtual object ConvertTo(Type type, CultureInfo culture);
}
public abstract class System.Web.ModelBinding.ValueProviderSourceAttribute : Attribute {
    public abstract virtual IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext);
    public virtual string GetModelName();
}
internal static class System.Web.ModelBinding.ValueProviderUtil : object {
    public static string CreateSubPropertyName(string prefix, string propertyName);
}
[AttributeUsageAttribute("2048")]
public class System.Web.ModelBinding.ViewStateAttribute : ValueProviderSourceAttribute {
    public string Key { get; private set; }
    public ViewStateAttribute(string key);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    public virtual IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext);
    public virtual string GetModelName();
}
public class System.Web.ModelBinding.ViewStateValueProvider : SimpleValueProvider {
    public ViewStateValueProvider(ModelBindingExecutionContext modelBindingExecutionContext);
    protected virtual object FetchValue(string key);
}
internal class System.Web.ModName : object {
    internal static string ENGINE_FULL_NAME;
    internal static string ENGINE_BASE_NAME;
    internal static string FILTER_FULL_NAME;
    internal static string ISAPI_FULL_NAME;
    internal static string ISAPI_BASE_NAME;
    internal static string WP_FULL_NAME;
    internal static string WP_BASE_NAME;
    internal static string STATE_FULL_NAME;
    internal static string STATE_BASE_NAME;
    internal static string PERF_FULL_NAME;
    internal static string PERF_BASE_NAME;
    internal static string RC_FULL_NAME;
    internal static string RC_BASE_NAME;
    internal static string WEB_FULL_NAME;
    internal static string WEB_BASE_NAME;
    internal static string MGDENG_FULL_NAME;
    internal static string MGDENG_BASE_NAME;
    internal static string ADVAPI32_FULL_NAME;
    internal static string KERNEL32_FULL_NAME;
    internal static string USER32_FULL_NAME;
    internal static string WININET_FULL_NAME;
    internal static string MSCORWKS_FULL_NAME;
    internal static string REG_MACHINE_APP;
    internal static string W3WP_FULL_NAME;
    internal static string NETAPI32_FULL_NAME;
    internal static string OLE32_FULL_NAME;
}
internal class System.Web.ModuleConfigurationInfo : object {
    internal string Type { get; }
    internal string Name { get; }
    internal string Precondition { get; }
    internal ModuleConfigurationInfo(string name, string type, string condition);
    internal string get_Type();
    internal string get_Name();
    internal string get_Precondition();
}
internal class System.Web.MultipartContentElement : object {
    internal bool IsFile { get; }
    internal bool IsFormItem { get; }
    internal string Name { get; }
    internal MultipartContentElement(string name, string filename, string contentType, HttpRawUploadedContent data, int offset, int length);
    internal bool get_IsFile();
    internal bool get_IsFormItem();
    internal string get_Name();
    internal HttpPostedFile GetAsPostedFile();
    internal string GetAsString(Encoding encoding);
}
internal class System.Web.NativeFileChangeNotification : MulticastDelegate {
    public NativeFileChangeNotification(object object, IntPtr method);
    public virtual void Invoke(FileAction action, string fileName, long ticks);
    public virtual IAsyncResult BeginInvoke(FileAction action, string fileName, long ticks, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
internal class System.Web.NativeMethods : object {
    internal static int CreateAssemblyCache(IAssemblyCache& ppAsmCache, UInt32 dwReserved);
}
internal class System.Web.NotificationContext : object {
    internal bool IsPostNotification;
    internal RequestNotification CurrentNotification;
    internal int CurrentModuleIndex;
    internal int CurrentModuleEventIndex;
    internal int CurrentNotificationFlags;
    internal HttpAsyncResult AsyncResult;
    internal bool PendingAsyncCompletion;
    internal Exception Error;
    internal bool RequestCompleted;
    internal bool IsReEntry;
    internal NotificationContext(int flags, bool isReEntry);
}
internal class System.Web.NotificationQueueItem : object {
    internal FileChangeEventHandler Callback;
    internal string Filename;
    internal FileAction Action;
    internal NotificationQueueItem(FileChangeEventHandler callback, FileAction action, string filename);
}
internal class System.Web.PageForbiddenErrorFormatter : ErrorFormatter {
    protected string _htmlEncodedUrl;
    protected string ErrorTitle { get; }
    protected string Description { get; }
    protected string MiscSectionTitle { get; }
    protected string MiscSectionContent { get; }
    protected StringCollection AdaptiveMiscContent { get; }
    protected bool ShowSourceFileInfo { get; }
    internal bool CanBeShownToAllUsers { get; }
    internal PageForbiddenErrorFormatter(string url);
    internal PageForbiddenErrorFormatter(string url, string description);
    protected virtual string get_ErrorTitle();
    protected virtual string get_Description();
    protected virtual string get_MiscSectionTitle();
    protected virtual string get_MiscSectionContent();
    protected virtual StringCollection get_AdaptiveMiscContent();
    protected virtual bool get_ShowSourceFileInfo();
    internal virtual bool get_CanBeShownToAllUsers();
}
internal class System.Web.PageNotFoundErrorFormatter : ErrorFormatter {
    protected string _htmlEncodedUrl;
    protected string ErrorTitle { get; }
    protected string Description { get; }
    protected string MiscSectionTitle { get; }
    protected string MiscSectionContent { get; }
    protected StringCollection AdaptiveMiscContent { get; }
    protected bool ShowSourceFileInfo { get; }
    internal bool CanBeShownToAllUsers { get; }
    internal PageNotFoundErrorFormatter(string url);
    protected virtual string get_ErrorTitle();
    protected virtual string get_Description();
    protected virtual string get_MiscSectionTitle();
    protected virtual string get_MiscSectionContent();
    protected virtual StringCollection get_AdaptiveMiscContent();
    protected virtual bool get_ShowSourceFileInfo();
    internal virtual bool get_CanBeShownToAllUsers();
}
internal class System.Web.ParseErrorFormatter : FormatterWithFileInfo {
    protected string _message;
    protected Exception Exception { get; }
    protected string ErrorTitle { get; }
    protected string Description { get; }
    protected string MiscSectionTitle { get; }
    protected string MiscSectionContent { get; }
    protected string ColoredSquareTitle { get; }
    protected StringCollection AdaptiveMiscContent { get; }
    internal ParseErrorFormatter(HttpParseException e, string virtualPath, string sourceCode, int line, string message);
    protected virtual Exception get_Exception();
    protected virtual string get_ErrorTitle();
    protected virtual string get_Description();
    protected virtual string get_MiscSectionTitle();
    protected virtual string get_MiscSectionContent();
    protected virtual string get_ColoredSquareTitle();
    protected virtual StringCollection get_AdaptiveMiscContent();
}
public class System.Web.ParserError : object {
    internal Exception Exception { get; internal set; }
    public string VirtualPath { get; public set; }
    public string ErrorText { get; public set; }
    public int Line { get; public set; }
    public ParserError(string errorText, string virtualPath, int line);
    internal ParserError(string errorText, VirtualPath virtualPath, int line);
    internal Exception get_Exception();
    internal void set_Exception(Exception value);
    public string get_VirtualPath();
    public void set_VirtualPath(string value);
    public string get_ErrorText();
    public void set_ErrorText(string value);
    public int get_Line();
    public void set_Line(int value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.ParserErrorCollection : CollectionBase {
    public ParserError Item { get; public set; }
    public ParserErrorCollection(ParserError[] value);
    public ParserError get_Item(int index);
    public void set_Item(int index, ParserError value);
    public int Add(ParserError value);
    public void AddRange(ParserError[] value);
    public void AddRange(ParserErrorCollection value);
    public bool Contains(ParserError value);
    public void CopyTo(ParserError[] array, int index);
    public int IndexOf(ParserError value);
    public void Insert(int index, ParserError value);
    public void Remove(ParserError value);
}
internal class System.Web.PartitionInfo : object {
    protected string TracingPartitionString { get; }
    internal PartitionInfo(ResourcePool rpool);
    internal object RetrieveResource();
    internal void StoreResource(IDisposable o);
    protected virtual string get_TracingPartitionString();
    private sealed virtual override string System.Web.IPartitionInfo.GetTracingPartitionString();
    public sealed virtual void Dispose();
}
internal class System.Web.PartitionManager : object {
    internal PartitionManager(CreatePartitionInfo createCallback);
    internal object GetPartition(IPartitionResolver partitionResolver, string id);
    public sealed virtual void Dispose();
}
internal class System.Web.PerfCounters : object {
    internal static IPerfCounters Instance;
    private static PerfCounters();
    internal static void Open(string appName);
    internal static void OpenStateCounters();
    internal static void IncrementCounter(AppPerfCounter counter);
    internal static void DecrementCounter(AppPerfCounter counter);
    internal static void IncrementCounterEx(AppPerfCounter counter, int delta);
    internal static void SetCounter(AppPerfCounter counter, int value);
    internal static int GetGlobalCounter(GlobalPerfCounter counter);
    internal static void IncrementGlobalCounter(GlobalPerfCounter counter);
    internal static void DecrementGlobalCounter(GlobalPerfCounter counter);
    internal static void SetGlobalCounter(GlobalPerfCounter counter, int value);
    internal static void IncrementStateServiceCounter(StateServicePerfCounter counter);
    internal static void DecrementStateServiceCounter(StateServicePerfCounter counter);
    internal static void SetStateServiceCounter(StateServicePerfCounter counter, int value);
}
internal class System.Web.PerfInstanceDataHandle : SafeHandle {
    internal IntPtr UnsafeHandle { get; }
    public bool IsInvalid { get; }
    internal IntPtr get_UnsafeHandle();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal class System.Web.PipelineModuleStepContainer : object {
    internal int GetEventCount(RequestNotification notification, bool isPostEvent);
    internal IExecutionStep GetNextEvent(RequestNotification notification, bool isPostEvent, int eventIndex);
    internal void RemoveEvent(RequestNotification notification, bool isPostEvent, Delegate handler);
    internal void AddEvent(RequestNotification notification, bool isPostEvent, IExecutionStep step);
}
[AttributeUsageAttribute("1")]
public class System.Web.PreApplicationStartMethodAttribute : Attribute {
    public Type Type { get; }
    public string MethodName { get; }
    public PreApplicationStartMethodAttribute(Type type, string methodName);
    public Type get_Type();
    public string get_MethodName();
}
internal class System.Web.ProcessImpersonationContext : ImpersonationContext {
}
public class System.Web.ProcessInfo : object {
    public DateTime StartTime { get; }
    public TimeSpan Age { get; }
    public int ProcessID { get; }
    public int RequestCount { get; }
    public ProcessStatus Status { get; }
    public ProcessShutdownReason ShutdownReason { get; }
    public int PeakMemoryUsed { get; }
    public ProcessInfo(DateTime startTime, TimeSpan age, int processID, int requestCount, ProcessStatus status, ProcessShutdownReason shutdownReason, int peakMemoryUsed);
    public DateTime get_StartTime();
    public TimeSpan get_Age();
    public int get_ProcessID();
    public int get_RequestCount();
    public ProcessStatus get_Status();
    public ProcessShutdownReason get_ShutdownReason();
    public int get_PeakMemoryUsed();
    public void SetAll(DateTime startTime, TimeSpan age, int processID, int requestCount, ProcessStatus status, ProcessShutdownReason shutdownReason, int peakMemoryUsed);
}
public class System.Web.ProcessModelInfo : object {
    public static ProcessInfo GetCurrentProcessInfo();
    public static ProcessInfo[] GetHistory(int numRecords);
}
public enum System.Web.ProcessShutdownReason : Enum {
    public int value__;
    public static ProcessShutdownReason None;
    public static ProcessShutdownReason Unexpected;
    public static ProcessShutdownReason RequestsLimit;
    public static ProcessShutdownReason RequestQueueLimit;
    public static ProcessShutdownReason Timeout;
    public static ProcessShutdownReason IdleTimeout;
    public static ProcessShutdownReason MemoryLimitExceeded;
    public static ProcessShutdownReason PingFailed;
    public static ProcessShutdownReason DeadlockSuspected;
}
public enum System.Web.ProcessStatus : Enum {
    public int value__;
    public static ProcessStatus Alive;
    public static ProcessStatus ShuttingDown;
    public static ProcessStatus ShutDown;
    public static ProcessStatus Terminated;
}
[AttributeUsageAttribute("128")]
public class System.Web.Profile.CustomProviderDataAttribute : Attribute {
    public string CustomProviderData { get; }
    public CustomProviderDataAttribute(string customProviderData);
    public string get_CustomProviderData();
    public virtual bool IsDefaultAttribute();
}
public class System.Web.Profile.DefaultProfile : ProfileBase {
}
public enum System.Web.Profile.ProfileAuthenticationOption : Enum {
    public int value__;
    public static ProfileAuthenticationOption Anonymous;
    public static ProfileAuthenticationOption Authenticated;
    public static ProfileAuthenticationOption All;
}
public class System.Web.Profile.ProfileAutoSaveEventArgs : EventArgs {
    public HttpContext Context { get; }
    public bool ContinueWithProfileAutoSave { get; public set; }
    public ProfileAutoSaveEventArgs(HttpContext context);
    public HttpContext get_Context();
    public bool get_ContinueWithProfileAutoSave();
    public void set_ContinueWithProfileAutoSave(bool value);
}
public class System.Web.Profile.ProfileAutoSaveEventHandler : MulticastDelegate {
    public ProfileAutoSaveEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ProfileAutoSaveEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ProfileAutoSaveEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Profile.ProfileBase : SettingsBase {
    public object Item { get; public set; }
    public string UserName { get; }
    public bool IsAnonymous { get; }
    public bool IsDirty { get; }
    public DateTime LastActivityDate { get; }
    public DateTime LastUpdatedDate { get; }
    public static SettingsPropertyCollection Properties { get; }
    internal static Type InheritsFromType { get; }
    internal static string InheritsFromTypeString { get; }
    internal static bool InheritsFromCustomType { get; }
    internal static ProfileBase SingletonInstance { get; }
    private static ProfileBase();
    public virtual object get_Item(string propertyName);
    public virtual void set_Item(string propertyName, object value);
    public object GetPropertyValue(string propertyName);
    public void SetPropertyValue(string propertyName, object propertyValue);
    public ProfileGroupBase GetProfileGroup(string groupName);
    public void Initialize(string username, bool isAuthenticated);
    public virtual void Save();
    public string get_UserName();
    public bool get_IsAnonymous();
    public bool get_IsDirty();
    public DateTime get_LastActivityDate();
    public DateTime get_LastUpdatedDate();
    public static ProfileBase Create(string username);
    public static ProfileBase Create(string username, bool isAuthenticated);
    public static SettingsPropertyCollection get_Properties();
    internal static Type get_InheritsFromType();
    internal static string get_InheritsFromTypeString();
    internal static bool get_InheritsFromCustomType();
    internal static ProfileBase get_SingletonInstance();
    internal static Hashtable GetPropertiesForCompilation();
    internal static string GetProfileClassName();
}
public class System.Web.Profile.ProfileEventArgs : EventArgs {
    public HttpContext Context { get; }
    public ProfileBase Profile { get; public set; }
    public ProfileEventArgs(HttpContext context);
    public HttpContext get_Context();
    public ProfileBase get_Profile();
    public void set_Profile(ProfileBase value);
}
public class System.Web.Profile.ProfileEventHandler : MulticastDelegate {
    public ProfileEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ProfileEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ProfileEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Profile.ProfileGroupBase : object {
    public object Item { get; public set; }
    public object get_Item(string propertyName);
    public void set_Item(string propertyName, object value);
    public object GetPropertyValue(string propertyName);
    public void SetPropertyValue(string propertyName, object propertyValue);
    public void Init(ProfileBase parent, string myName);
}
public class System.Web.Profile.ProfileInfo : object {
    public string UserName { get; }
    public DateTime LastActivityDate { get; }
    public DateTime LastUpdatedDate { get; }
    public bool IsAnonymous { get; }
    public int Size { get; }
    public ProfileInfo(string username, bool isAnonymous, DateTime lastActivityDate, DateTime lastUpdatedDate, int size);
    public virtual string get_UserName();
    public virtual DateTime get_LastActivityDate();
    public virtual DateTime get_LastUpdatedDate();
    public virtual bool get_IsAnonymous();
    public virtual int get_Size();
}
[DefaultMemberAttribute("Item")]
public class System.Web.Profile.ProfileInfoCollection : object {
    public ProfileInfo Item { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public void Add(ProfileInfo profileInfo);
    public void Remove(string name);
    public ProfileInfo get_Item(string name);
    public sealed virtual IEnumerator GetEnumerator();
    public void SetReadOnly();
    public void Clear();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(ProfileInfo[] array, int index);
}
public static class System.Web.Profile.ProfileManager : object {
    internal static ProfilePropertySettingsCollection DynamicProfileProperties { get; }
    public static bool Enabled { get; }
    public static string ApplicationName { get; public set; }
    public static bool AutomaticSaveEnabled { get; }
    public static ProfileProvider Provider { get; }
    public static ProfileProviderCollection Providers { get; }
    private static ProfileManager();
    internal static ProfilePropertySettingsCollection get_DynamicProfileProperties();
    public static void AddDynamicProfileProperty(ProfilePropertySettings property);
    public static bool DeleteProfile(string username);
    public static int DeleteProfiles(ProfileInfoCollection profiles);
    public static int DeleteProfiles(String[] usernames);
    public static int DeleteInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate);
    public static int GetNumberOfProfiles(ProfileAuthenticationOption authenticationOption);
    public static int GetNumberOfInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate);
    public static ProfileInfoCollection GetAllProfiles(ProfileAuthenticationOption authenticationOption);
    public static ProfileInfoCollection GetAllProfiles(ProfileAuthenticationOption authenticationOption, int pageIndex, int pageSize, Int32& totalRecords);
    public static ProfileInfoCollection GetAllInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate);
    public static ProfileInfoCollection GetAllInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate, int pageIndex, int pageSize, Int32& totalRecords);
    public static ProfileInfoCollection FindProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch);
    public static ProfileInfoCollection FindProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch, int pageIndex, int pageSize, Int32& totalRecords);
    public static ProfileInfoCollection FindInactiveProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch, DateTime userInactiveSinceDate);
    public static ProfileInfoCollection FindInactiveProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch, DateTime userInactiveSinceDate, int pageIndex, int pageSize, Int32& totalRecords);
    public static bool get_Enabled();
    public static string get_ApplicationName();
    public static void set_ApplicationName(string value);
    public static bool get_AutomaticSaveEnabled();
    public static ProfileProvider get_Provider();
    public static ProfileProviderCollection get_Providers();
}
public class System.Web.Profile.ProfileMigrateEventArgs : EventArgs {
    public HttpContext Context { get; }
    public string AnonymousID { get; }
    public ProfileMigrateEventArgs(HttpContext context, string anonymousId);
    public HttpContext get_Context();
    public string get_AnonymousID();
}
public class System.Web.Profile.ProfileMigrateEventHandler : MulticastDelegate {
    public ProfileMigrateEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ProfileMigrateEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ProfileMigrateEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.Profile.ProfileModule : object {
    private static ProfileModule();
    public void add_Personalize(ProfileEventHandler value);
    public void remove_Personalize(ProfileEventHandler value);
    public void add_MigrateAnonymous(ProfileMigrateEventHandler value);
    public void remove_MigrateAnonymous(ProfileMigrateEventHandler value);
    public void add_ProfileAutoSaving(ProfileAutoSaveEventHandler value);
    public void remove_ProfileAutoSaving(ProfileAutoSaveEventHandler value);
    public sealed virtual void Dispose();
    public sealed virtual void Init(HttpApplication app);
    internal static void ParseDataFromDB(String[] names, string values, Byte[] buf, SettingsPropertyValueCollection properties);
    internal static void PrepareDataForSaving(String& allNames, String& allValues, Byte[]& buf, bool binarySupported, SettingsPropertyValueCollection properties, bool userIsAuthenticated);
}
internal class System.Web.Profile.ProfileNameTypeStruct : object {
    internal string Name;
    internal CodeTypeReference PropertyCodeRefType;
    internal Type PropertyType;
    internal bool IsReadOnly;
    internal int LineNumber;
    internal string FileName;
}
public abstract class System.Web.Profile.ProfileProvider : SettingsProvider {
    public abstract virtual int DeleteProfiles(ProfileInfoCollection profiles);
    public abstract virtual int DeleteProfiles(String[] usernames);
    public abstract virtual int DeleteInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate);
    public abstract virtual int GetNumberOfInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate);
    public abstract virtual ProfileInfoCollection GetAllProfiles(ProfileAuthenticationOption authenticationOption, int pageIndex, int pageSize, Int32& totalRecords);
    public abstract virtual ProfileInfoCollection GetAllInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate, int pageIndex, int pageSize, Int32& totalRecords);
    public abstract virtual ProfileInfoCollection FindProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch, int pageIndex, int pageSize, Int32& totalRecords);
    public abstract virtual ProfileInfoCollection FindInactiveProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch, DateTime userInactiveSinceDate, int pageIndex, int pageSize, Int32& totalRecords);
}
[AttributeUsageAttribute("128")]
public class System.Web.Profile.ProfileProviderAttribute : Attribute {
    public string ProviderName { get; }
    public ProfileProviderAttribute(string providerName);
    public string get_ProviderName();
}
[DefaultMemberAttribute("Item")]
public class System.Web.Profile.ProfileProviderCollection : SettingsProviderCollection {
    public ProfileProvider Item { get; }
    public virtual void Add(ProviderBase provider);
    public ProfileProvider get_Item(string name);
}
[AttributeUsageAttribute("128")]
public class System.Web.Profile.SettingsAllowAnonymousAttribute : Attribute {
    public bool Allow { get; }
    public SettingsAllowAnonymousAttribute(bool allow);
    public bool get_Allow();
    public virtual bool IsDefaultAttribute();
}
public class System.Web.Profile.SqlProfileProvider : ProfileProvider {
    public string ApplicationName { get; public set; }
    public virtual void Initialize(string name, NameValueCollection config);
    public virtual string get_ApplicationName();
    public virtual void set_ApplicationName(string value);
    public virtual SettingsPropertyValueCollection GetPropertyValues(SettingsContext sc, SettingsPropertyCollection properties);
    public virtual void SetPropertyValues(SettingsContext sc, SettingsPropertyValueCollection properties);
    public virtual int DeleteProfiles(ProfileInfoCollection profiles);
    public virtual int DeleteProfiles(String[] usernames);
    public virtual int DeleteInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate);
    public virtual int GetNumberOfInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate);
    public virtual ProfileInfoCollection GetAllProfiles(ProfileAuthenticationOption authenticationOption, int pageIndex, int pageSize, Int32& totalRecords);
    public virtual ProfileInfoCollection GetAllInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate, int pageIndex, int pageSize, Int32& totalRecords);
    public virtual ProfileInfoCollection FindProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch, int pageIndex, int pageSize, Int32& totalRecords);
    public virtual ProfileInfoCollection FindInactiveProfilesByUserName(ProfileAuthenticationOption authenticationOption, string usernameToMatch, DateTime userInactiveSinceDate, int pageIndex, int pageSize, Int32& totalRecords);
}
public enum System.Web.ReadEntityBodyMode : Enum {
    public int value__;
    public static ReadEntityBodyMode None;
    public static ReadEntityBodyMode Classic;
    public static ReadEntityBodyMode Bufferless;
    public static ReadEntityBodyMode Buffered;
}
[FlagsAttribute]
public enum System.Web.RequestNotification : Enum {
    public int value__;
    public static RequestNotification BeginRequest;
    public static RequestNotification AuthenticateRequest;
    public static RequestNotification AuthorizeRequest;
    public static RequestNotification ResolveRequestCache;
    public static RequestNotification MapRequestHandler;
    public static RequestNotification AcquireRequestState;
    public static RequestNotification PreExecuteRequestHandler;
    public static RequestNotification ExecuteRequestHandler;
    public static RequestNotification ReleaseRequestState;
    public static RequestNotification UpdateRequestCache;
    public static RequestNotification LogRequest;
    public static RequestNotification EndRequest;
    public static RequestNotification SendResponse;
}
public enum System.Web.RequestNotificationStatus : Enum {
    public int value__;
    public static RequestNotificationStatus Continue;
    public static RequestNotificationStatus Pending;
    public static RequestNotificationStatus FinishRequest;
}
internal class System.Web.RequestQueue : object {
    internal bool IsEmpty { get; }
    internal RequestQueue(int minExternFreeThreads, int minLocalFreeThreads, int queueLimit, TimeSpan clientConnectedTime);
    internal HttpWorkerRequest GetRequestToExecute(HttpWorkerRequest wr);
    internal void ScheduleMoreWorkIfNeeded();
    internal bool get_IsEmpty();
    internal void Drain();
}
internal class System.Web.RequestTimeoutManager : object {
    internal void Stop();
    internal void Add(HttpContext context);
    internal void Remove(HttpContext context);
}
internal class System.Web.ResponseDependencyInfo : object {
    internal String[] items;
    internal DateTime utcDate;
    internal ResponseDependencyInfo(String[] items, DateTime utcDate);
}
internal class System.Web.ResponseDependencyList : ValueType {
    private ArrayList _dependencies;
    private String[] _dependencyArray;
    private DateTime _oldestDependency;
    private string _requestVirtualPath;
    internal void AddDependency(string item, string argname);
    internal void AddDependencies(ArrayList items, string argname);
    internal void AddDependencies(String[] items, string argname);
    internal void AddDependencies(String[] items, string argname, bool cloneArray);
    internal void AddDependencies(String[] items, string argname, bool cloneArray, string requestVirtualPath);
    internal void AddDependencies(String[] items, string argname, bool cloneArray, DateTime utcDepTime);
    internal bool HasDependencies();
    internal String[] GetDependencies();
    internal CacheDependency CreateCacheDependency(CacheDependencyType dependencyType, CacheDependency dependency);
}
internal class System.Web.RootedObjects : object {
    public HttpContext HttpContext { get; public set; }
    public IPrincipal Principal { get; public set; }
    public IntPtr Pointer { get; private set; }
    public WebSocketPipeline WebSocketPipeline { get; public set; }
    public IIS7WorkerRequest WorkerRequest { get; public set; }
    [CompilerGeneratedAttribute]
public HttpContext get_HttpContext();
    [CompilerGeneratedAttribute]
public void set_HttpContext(HttpContext value);
    [CompilerGeneratedAttribute]
public sealed virtual IPrincipal get_Principal();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Principal(IPrincipal value);
    [CompilerGeneratedAttribute]
public IntPtr get_Pointer();
    [CompilerGeneratedAttribute]
private void set_Pointer(IntPtr value);
    [CompilerGeneratedAttribute]
public WebSocketPipeline get_WebSocketPipeline();
    [CompilerGeneratedAttribute]
public void set_WebSocketPipeline(WebSocketPipeline value);
    [CompilerGeneratedAttribute]
public IIS7WorkerRequest get_WorkerRequest();
    [CompilerGeneratedAttribute]
public void set_WorkerRequest(IIS7WorkerRequest value);
    public static RootedObjects Create();
    public void Destroy();
    internal ISubscriptionToken DisposeOnPipelineCompleted(IDisposable target);
    public static RootedObjects FromPointer(IntPtr pointer);
    internal void RaiseOnPipelineCompleted();
    public void ReleaseHttpContext();
    public void ReleasePrincipal();
    public void ReleaseWebSocketPipeline();
    public void ReleaseWorkerRequest();
    public ActivityIdToken WithinTraceBlock();
    public void WriteTransferEventIfNecessary();
}
internal class System.Web.Routing.BoundUrl : object {
    public string Url { get; public set; }
    public RouteValueDictionary Values { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(RouteValueDictionary value);
}
internal class System.Web.Routing.ContentPathSegment : PathSegment {
    public bool IsCatchAll { get; }
    public IList`1<PathSubsegment> Subsegments { get; private set; }
    public ContentPathSegment(IList`1<PathSubsegment> subsegments);
    public bool get_IsCatchAll();
    [CompilerGeneratedAttribute]
public IList`1<PathSubsegment> get_Subsegments();
    [CompilerGeneratedAttribute]
private void set_Subsegments(IList`1<PathSubsegment> value);
}
[TypeForwardedFromAttribute("System.Web.Routing, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Routing.HttpMethodConstraint : object {
    public ICollection`1<string> AllowedMethods { get; private set; }
    public HttpMethodConstraint(String[] allowedMethods);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_AllowedMethods();
    [CompilerGeneratedAttribute]
private void set_AllowedMethods(ICollection`1<string> value);
    protected virtual bool Match(HttpContextBase httpContext, Route route, string parameterName, RouteValueDictionary values, RouteDirection routeDirection);
    private sealed virtual override bool System.Web.Routing.IRouteConstraint.Match(HttpContextBase httpContext, Route route, string parameterName, RouteValueDictionary values, RouteDirection routeDirection);
}
[TypeForwardedFromAttribute("System.Web.Routing, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public interface System.Web.Routing.IRouteConstraint {
    public abstract virtual bool Match(HttpContextBase httpContext, Route route, string parameterName, RouteValueDictionary values, RouteDirection routeDirection);
}
[TypeForwardedFromAttribute("System.Web.Routing, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public interface System.Web.Routing.IRouteHandler {
    public abstract virtual IHttpHandler GetHttpHandler(RequestContext requestContext);
}
internal class System.Web.Routing.LiteralSubsegment : PathSubsegment {
    public string Literal { get; private set; }
    public LiteralSubsegment(string literal);
    [CompilerGeneratedAttribute]
public string get_Literal();
    [CompilerGeneratedAttribute]
private void set_Literal(string value);
}
public class System.Web.Routing.PageRouteHandler : object {
    public string VirtualPath { get; private set; }
    public bool CheckPhysicalUrlAccess { get; private set; }
    public PageRouteHandler(string virtualPath);
    public PageRouteHandler(string virtualPath, bool checkPhysicalUrlAccess);
    [CompilerGeneratedAttribute]
public string get_VirtualPath();
    [CompilerGeneratedAttribute]
private void set_VirtualPath(string value);
    [CompilerGeneratedAttribute]
public bool get_CheckPhysicalUrlAccess();
    [CompilerGeneratedAttribute]
private void set_CheckPhysicalUrlAccess(bool value);
    public virtual IHttpHandler GetHttpHandler(RequestContext requestContext);
    public string GetSubstitutedVirtualPath(RequestContext requestContext);
}
internal class System.Web.Routing.ParameterSubsegment : PathSubsegment {
    public bool IsCatchAll { get; private set; }
    public string ParameterName { get; private set; }
    public ParameterSubsegment(string parameterName);
    [CompilerGeneratedAttribute]
public bool get_IsCatchAll();
    [CompilerGeneratedAttribute]
private void set_IsCatchAll(bool value);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
private void set_ParameterName(string value);
}
internal class System.Web.Routing.ParsedRoute : object {
    public ParsedRoute(IList`1<PathSegment> pathSegments);
    public BoundUrl Bind(RouteValueDictionary currentValues, RouteValueDictionary values, RouteValueDictionary defaultValues, RouteValueDictionary constraints);
    public RouteValueDictionary Match(string virtualPath, RouteValueDictionary defaultValues);
}
internal abstract class System.Web.Routing.PathSegment : object {
}
internal abstract class System.Web.Routing.PathSubsegment : object {
}
[TypeForwardedFromAttribute("System.Web.Routing, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Routing.RequestContext : object {
    public HttpContextBase HttpContext { get; public set; }
    public RouteData RouteData { get; public set; }
    public RequestContext(HttpContextBase httpContext, RouteData routeData);
    [CompilerGeneratedAttribute]
public virtual HttpContextBase get_HttpContext();
    [CompilerGeneratedAttribute]
public virtual void set_HttpContext(HttpContextBase value);
    [CompilerGeneratedAttribute]
public virtual RouteData get_RouteData();
    [CompilerGeneratedAttribute]
public virtual void set_RouteData(RouteData value);
}
[TypeForwardedFromAttribute("System.Web.Routing, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Routing.Route : RouteBase {
    public RouteValueDictionary Constraints { get; public set; }
    public RouteValueDictionary DataTokens { get; public set; }
    public RouteValueDictionary Defaults { get; public set; }
    public IRouteHandler RouteHandler { get; public set; }
    public string Url { get; public set; }
    public Route(string url, IRouteHandler routeHandler);
    public Route(string url, RouteValueDictionary defaults, IRouteHandler routeHandler);
    public Route(string url, RouteValueDictionary defaults, RouteValueDictionary constraints, IRouteHandler routeHandler);
    public Route(string url, RouteValueDictionary defaults, RouteValueDictionary constraints, RouteValueDictionary dataTokens, IRouteHandler routeHandler);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_Constraints();
    [CompilerGeneratedAttribute]
public void set_Constraints(RouteValueDictionary value);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_DataTokens();
    [CompilerGeneratedAttribute]
public void set_DataTokens(RouteValueDictionary value);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_Defaults();
    [CompilerGeneratedAttribute]
public void set_Defaults(RouteValueDictionary value);
    [CompilerGeneratedAttribute]
public IRouteHandler get_RouteHandler();
    [CompilerGeneratedAttribute]
public void set_RouteHandler(IRouteHandler value);
    public string get_Url();
    public void set_Url(string value);
    public virtual RouteData GetRouteData(HttpContextBase httpContext);
    public virtual VirtualPathData GetVirtualPath(RequestContext requestContext, RouteValueDictionary values);
    protected virtual bool ProcessConstraint(HttpContextBase httpContext, object constraint, string parameterName, RouteValueDictionary values, RouteDirection routeDirection);
}
[TypeForwardedFromAttribute("System.Web.Routing, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public abstract class System.Web.Routing.RouteBase : object {
    public bool RouteExistingFiles { get; public set; }
    public abstract virtual RouteData GetRouteData(HttpContextBase httpContext);
    public abstract virtual VirtualPathData GetVirtualPath(RequestContext requestContext, RouteValueDictionary values);
    public bool get_RouteExistingFiles();
    public void set_RouteExistingFiles(bool value);
}
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System.Web.Routing, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Routing.RouteCollection : Collection`1<RouteBase> {
    public bool AppendTrailingSlash { get; public set; }
    public bool LowercaseUrls { get; public set; }
    public bool RouteExistingFiles { get; public set; }
    public RouteBase Item { get; }
    public RouteCollection(VirtualPathProvider virtualPathProvider);
    [CompilerGeneratedAttribute]
public bool get_AppendTrailingSlash();
    [CompilerGeneratedAttribute]
public void set_AppendTrailingSlash(bool value);
    [CompilerGeneratedAttribute]
public bool get_LowercaseUrls();
    [CompilerGeneratedAttribute]
public void set_LowercaseUrls(bool value);
    [CompilerGeneratedAttribute]
public bool get_RouteExistingFiles();
    [CompilerGeneratedAttribute]
public void set_RouteExistingFiles(bool value);
    public RouteBase get_Item(string name);
    public void Add(string name, RouteBase item);
    public Route MapPageRoute(string routeName, string routeUrl, string physicalFile);
    public Route MapPageRoute(string routeName, string routeUrl, string physicalFile, bool checkPhysicalUrlAccess);
    public Route MapPageRoute(string routeName, string routeUrl, string physicalFile, bool checkPhysicalUrlAccess, RouteValueDictionary defaults);
    public Route MapPageRoute(string routeName, string routeUrl, string physicalFile, bool checkPhysicalUrlAccess, RouteValueDictionary defaults, RouteValueDictionary constraints);
    public Route MapPageRoute(string routeName, string routeUrl, string physicalFile, bool checkPhysicalUrlAccess, RouteValueDictionary defaults, RouteValueDictionary constraints, RouteValueDictionary dataTokens);
    protected virtual void ClearItems();
    public IDisposable GetReadLock();
    public RouteData GetRouteData(HttpContextBase httpContext);
    public VirtualPathData GetVirtualPath(RequestContext requestContext, RouteValueDictionary values);
    public VirtualPathData GetVirtualPath(RequestContext requestContext, string name, RouteValueDictionary values);
    public IDisposable GetWriteLock();
    public void Ignore(string url);
    public void Ignore(string url, object constraints);
    protected virtual void InsertItem(int index, RouteBase item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, RouteBase item);
}
[TypeForwardedFromAttribute("System.Web.Routing, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Routing.RouteData : object {
    public RouteValueDictionary DataTokens { get; }
    public RouteBase Route { get; public set; }
    public IRouteHandler RouteHandler { get; public set; }
    public RouteValueDictionary Values { get; }
    public RouteData(RouteBase route, IRouteHandler routeHandler);
    public RouteValueDictionary get_DataTokens();
    [CompilerGeneratedAttribute]
public RouteBase get_Route();
    [CompilerGeneratedAttribute]
public void set_Route(RouteBase value);
    public IRouteHandler get_RouteHandler();
    public void set_RouteHandler(IRouteHandler value);
    public RouteValueDictionary get_Values();
    public string GetRequiredString(string valueName);
}
[TypeForwardedFromAttribute("System.Web.Routing, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public enum System.Web.Routing.RouteDirection : Enum {
    public int value__;
    public static RouteDirection IncomingRequest;
    public static RouteDirection UrlGeneration;
}
internal static class System.Web.Routing.RouteParser : object {
    internal static bool IsSeparator(string s);
    internal static bool IsInvalidRouteUrl(string routeUrl);
    public static ParsedRoute Parse(string routeUrl);
    internal static IList`1<string> SplitUrlToPathSegmentStrings(string url);
}
[TypeForwardedFromAttribute("System.Web.Routing, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Routing.RouteTable : object {
    public static RouteCollection Routes { get; }
    private static RouteTable();
    public static RouteCollection get_Routes();
}
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System.Web.Routing, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Routing.RouteValueDictionary : object {
    public int Count { get; }
    public KeyCollection<string, object> Keys { get; }
    public ValueCollection<string, object> Values { get; }
    public object Item { get; public set; }
    private ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Object>.Keys { get; }
    private ICollection`1<object> System.Collections.Generic.IDictionary<System.String,System.Object>.Values { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly { get; }
    public RouteValueDictionary(object values);
    public RouteValueDictionary(IDictionary`2<string, object> dictionary);
    public sealed virtual int get_Count();
    public KeyCollection<string, object> get_Keys();
    public ValueCollection<string, object> get_Values();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual void Add(string key, object value);
    public sealed virtual void Clear();
    public sealed virtual bool ContainsKey(string key);
    public bool ContainsValue(object value);
    public Enumerator<string, object> GetEnumerator();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    private sealed virtual override ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Object>.get_Keys();
    private sealed virtual override ICollection`1<object> System.Collections.Generic.IDictionary<System.String,System.Object>.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair`2<string, object> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair`2<string, object> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair`2<string, object> item);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.Web.Routing.SeparatorPathSegment : PathSegment {
}
[TypeForwardedFromAttribute("System.Web.Routing, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Routing.StopRoutingHandler : object {
    protected virtual IHttpHandler GetHttpHandler(RequestContext requestContext);
    private sealed virtual override IHttpHandler System.Web.Routing.IRouteHandler.GetHttpHandler(RequestContext requestContext);
}
internal class System.Web.Routing.UrlAuthFailureHandler : object {
    public bool IsReusable { get; }
    public sealed virtual void ProcessRequest(HttpContext context);
    public sealed virtual bool get_IsReusable();
}
[TypeForwardedFromAttribute("System.Web.Routing, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public abstract class System.Web.Routing.UrlRoutingHandler : object {
    protected bool IsReusable { get; }
    public RouteCollection RouteCollection { get; public set; }
    private bool System.Web.IHttpHandler.IsReusable { get; }
    protected virtual bool get_IsReusable();
    public RouteCollection get_RouteCollection();
    public void set_RouteCollection(RouteCollection value);
    protected virtual void ProcessRequest(HttpContext httpContext);
    protected virtual void ProcessRequest(HttpContextBase httpContext);
    protected abstract virtual void VerifyAndProcessRequest(IHttpHandler httpHandler, HttpContextBase httpContext);
    private sealed virtual override bool System.Web.IHttpHandler.get_IsReusable();
    private sealed virtual override void System.Web.IHttpHandler.ProcessRequest(HttpContext context);
}
[TypeForwardedFromAttribute("System.Web.Routing, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Routing.UrlRoutingModule : object {
    public RouteCollection RouteCollection { get; public set; }
    private static UrlRoutingModule();
    public RouteCollection get_RouteCollection();
    public void set_RouteCollection(RouteCollection value);
    protected virtual void Dispose();
    protected virtual void Init(HttpApplication application);
    [ObsoleteAttribute("This method is obsolete. Override the Init method to use the PostMapRequestHandler event.")]
public virtual void PostMapRequestHandler(HttpContextBase context);
    public virtual void PostResolveRequestCache(HttpContextBase context);
    private sealed virtual override void System.Web.IHttpModule.Dispose();
    private sealed virtual override void System.Web.IHttpModule.Init(HttpApplication application);
}
[TypeForwardedFromAttribute("System.Web.Routing, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Routing.VirtualPathData : object {
    public RouteValueDictionary DataTokens { get; }
    public RouteBase Route { get; public set; }
    public string VirtualPath { get; public set; }
    public VirtualPathData(RouteBase route, string virtualPath);
    public RouteValueDictionary get_DataTokens();
    [CompilerGeneratedAttribute]
public RouteBase get_Route();
    [CompilerGeneratedAttribute]
public void set_Route(RouteBase value);
    public string get_VirtualPath();
    public void set_VirtualPath(string value);
}
[ComVisibleAttribute("False")]
[SuppressUnmanagedCodeSecurityAttribute]
internal class System.Web.SafeNativeMethods : object {
    internal static int GetCurrentProcessId();
    internal static int GetCurrentThreadId();
    internal static bool QueryPerformanceCounter(Int64& lpPerformanceCount);
    internal static bool QueryPerformanceFrequency(Int64& lpFrequency);
}
internal class System.Web.SafeStringResource : object {
    internal IntPtr StringResourcePointer { get; }
    internal int ResourceSize { get; }
    internal SafeStringResource(IntPtr stringResourcePointer, int resourceSize);
    internal IntPtr get_StringResourcePointer();
    internal int get_ResourceSize();
}
public enum System.Web.Security.ActiveDirectoryConnectionProtection : Enum {
    public int value__;
    public static ActiveDirectoryConnectionProtection None;
    public static ActiveDirectoryConnectionProtection Ssl;
    public static ActiveDirectoryConnectionProtection SignAndSeal;
}
public class System.Web.Security.ActiveDirectoryMembershipProvider : MembershipProvider {
    public string ApplicationName { get; public set; }
    public ActiveDirectoryConnectionProtection CurrentConnectionProtection { get; }
    public MembershipPasswordFormat PasswordFormat { get; }
    public bool EnablePasswordRetrieval { get; }
    public bool EnablePasswordReset { get; }
    public bool EnableSearchMethods { get; }
    public bool RequiresQuestionAndAnswer { get; }
    public bool RequiresUniqueEmail { get; }
    public int MaxInvalidPasswordAttempts { get; }
    public int PasswordAttemptWindow { get; }
    public int PasswordAnswerAttemptLockoutDuration { get; }
    public int MinRequiredPasswordLength { get; }
    public int MinRequiredNonAlphanumericCharacters { get; }
    public string PasswordStrengthRegularExpression { get; }
    public virtual string get_ApplicationName();
    public virtual void set_ApplicationName(string value);
    public ActiveDirectoryConnectionProtection get_CurrentConnectionProtection();
    public virtual MembershipPasswordFormat get_PasswordFormat();
    public virtual bool get_EnablePasswordRetrieval();
    public virtual bool get_EnablePasswordReset();
    public bool get_EnableSearchMethods();
    public virtual bool get_RequiresQuestionAndAnswer();
    public virtual bool get_RequiresUniqueEmail();
    public virtual int get_MaxInvalidPasswordAttempts();
    public virtual int get_PasswordAttemptWindow();
    public int get_PasswordAnswerAttemptLockoutDuration();
    public virtual int get_MinRequiredPasswordLength();
    public virtual int get_MinRequiredNonAlphanumericCharacters();
    public virtual string get_PasswordStrengthRegularExpression();
    public virtual void Initialize(string name, NameValueCollection config);
    public virtual MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, MembershipCreateStatus& status);
    public virtual bool ChangePasswordQuestionAndAnswer(string username, string password, string newPasswordQuestion, string newPasswordAnswer);
    public virtual string GetPassword(string username, string passwordAnswer);
    public virtual bool ChangePassword(string username, string oldPassword, string newPassword);
    public virtual string ResetPassword(string username, string passwordAnswer);
    public virtual bool UnlockUser(string username);
    public virtual void UpdateUser(MembershipUser user);
    public virtual bool ValidateUser(string username, string password);
    public virtual MembershipUser GetUser(object providerUserKey, bool userIsOnline);
    public virtual MembershipUser GetUser(string username, bool userIsOnline);
    public virtual string GetUserNameByEmail(string email);
    public virtual bool DeleteUser(string username, bool deleteAllRelatedData);
    public virtual string GeneratePassword();
    public virtual MembershipUserCollection GetAllUsers(int pageIndex, int pageSize, Int32& totalRecords);
    public virtual int GetNumberOfUsersOnline();
    public virtual MembershipUserCollection FindUsersByName(string usernameToMatch, int pageIndex, int pageSize, Int32& totalRecords);
    public virtual MembershipUserCollection FindUsersByEmail(string emailToMatch, int pageIndex, int pageSize, Int32& totalRecords);
    internal string GetEscapedFilterValue(string filterValue);
    internal string GetEscapedFilterValue(string filterValue, bool escapeWildChar);
}
public class System.Web.Security.ActiveDirectoryMembershipUser : MembershipUser {
    internal bool emailModified;
    internal bool commentModified;
    internal bool isApprovedModified;
    public DateTime LastLoginDate { get; public set; }
    public DateTime LastActivityDate { get; public set; }
    public string Email { get; public set; }
    public string Comment { get; public set; }
    public bool IsApproved { get; public set; }
    public object ProviderUserKey { get; }
    public ActiveDirectoryMembershipUser(string providerName, string name, object providerUserKey, string email, string passwordQuestion, string comment, bool isApproved, bool isLockedOut, DateTime creationDate, DateTime lastLoginDate, DateTime lastActivityDate, DateTime lastPasswordChangedDate, DateTime lastLockoutDate);
    internal ActiveDirectoryMembershipUser(string providerName, string name, Byte[] sidBinaryForm, object providerUserKey, string email, string passwordQuestion, string comment, bool isApproved, bool isLockedOut, DateTime creationDate, DateTime lastLoginDate, DateTime lastActivityDate, DateTime lastPasswordChangedDate, DateTime lastLockoutDate, bool valuesAreUpdated);
    public virtual DateTime get_LastLoginDate();
    public virtual void set_LastLoginDate(DateTime value);
    public virtual DateTime get_LastActivityDate();
    public virtual void set_LastActivityDate(DateTime value);
    public virtual string get_Email();
    public virtual void set_Email(string value);
    public virtual string get_Comment();
    public virtual void set_Comment(string value);
    public virtual bool get_IsApproved();
    public virtual void set_IsApproved(bool value);
    public virtual object get_ProviderUserKey();
}
internal class System.Web.Security.AnonymousIdData : object {
    internal string AnonymousId;
    internal DateTime ExpireDate;
    internal AnonymousIdData(string id, DateTime dt);
}
public class System.Web.Security.AnonymousIdentificationEventArgs : EventArgs {
    public string AnonymousID { get; public set; }
    public HttpContext Context { get; }
    public AnonymousIdentificationEventArgs(HttpContext context);
    public string get_AnonymousID();
    public void set_AnonymousID(string value);
    public HttpContext get_Context();
}
public class System.Web.Security.AnonymousIdentificationEventHandler : MulticastDelegate {
    public AnonymousIdentificationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AnonymousIdentificationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AnonymousIdentificationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.Security.AnonymousIdentificationModule : object {
    public static bool Enabled { get; }
    private static AnonymousIdentificationModule();
    public void add_Creating(AnonymousIdentificationEventHandler value);
    public void remove_Creating(AnonymousIdentificationEventHandler value);
    public static void ClearAnonymousIdentifier();
    public sealed virtual void Dispose();
    public sealed virtual void Init(HttpApplication app);
    public static bool get_Enabled();
}
public class System.Web.Security.AntiXss.AntiXssEncoder : HttpEncoder {
    protected internal virtual void HtmlAttributeEncode(string value, TextWriter output);
    protected internal virtual void HtmlEncode(string value, TextWriter output);
    protected internal virtual Byte[] UrlEncode(Byte[] bytes, int offset, int count);
    protected internal virtual string UrlPathEncode(string value);
    public static void MarkAsSafe(LowerCodeCharts lowerCodeCharts, LowerMidCodeCharts lowerMidCodeCharts, MidCodeCharts midCodeCharts, UpperMidCodeCharts upperMidCodeCharts, UpperCodeCharts upperCodeCharts);
    public static string CssEncode(string input);
    public static string HtmlEncode(string input, bool useNamedEntities);
    public static string UrlEncode(string input);
    public static string HtmlFormUrlEncode(string input);
    public static string UrlEncode(string input, int codePage);
    public static string HtmlFormUrlEncode(string input, int codePage);
    public static string UrlEncode(string input, Encoding inputEncoding);
    public static string HtmlFormUrlEncode(string input, Encoding inputEncoding);
    public static string XmlEncode(string input);
    public static string XmlAttributeEncode(string input);
}
internal static class System.Web.Security.AntiXss.CodeCharts.CodeChartHelper : object {
    internal static IEnumerable`1<int> GetRange(int min, int max, Func`2<int, bool> exclusionFilter);
    internal static IEnumerable`1<int> GetRange(int min, int max);
}
internal static class System.Web.Security.AntiXss.CodeCharts.Lower : object {
    public static bool IsFlagSet(LowerCodeCharts flags, LowerCodeCharts flagToCheck);
    public static IEnumerable BasicLatin();
    public static IEnumerable Latin1Supplement();
    public static IEnumerable LatinExtendedA();
    public static IEnumerable LatinExtendedB();
    public static IEnumerable IpaExtensions();
    public static IEnumerable SpacingModifierLetters();
    public static IEnumerable CombiningDiacriticalMarks();
    public static IEnumerable GreekAndCoptic();
    public static IEnumerable Cyrillic();
    public static IEnumerable CyrillicSupplement();
    public static IEnumerable Armenian();
    public static IEnumerable Hebrew();
    public static IEnumerable Arabic();
    public static IEnumerable Syriac();
    public static IEnumerable ArabicSupplement();
    public static IEnumerable Thaana();
    public static IEnumerable Nko();
    public static IEnumerable Samaritan();
    public static IEnumerable Devanagari();
    public static IEnumerable Bengali();
    public static IEnumerable Gurmukhi();
    public static IEnumerable Gujarati();
    public static IEnumerable Oriya();
    public static IEnumerable Tamil();
    public static IEnumerable Telugu();
    public static IEnumerable Kannada();
    public static IEnumerable Malayalam();
    public static IEnumerable Sinhala();
    public static IEnumerable Thai();
    public static IEnumerable Lao();
    public static IEnumerable Tibetan();
}
internal static class System.Web.Security.AntiXss.CodeCharts.LowerMiddle : object {
    public static bool IsFlagSet(LowerMidCodeCharts flags, LowerMidCodeCharts flagToCheck);
    public static IEnumerable Myanmar();
    public static IEnumerable Georgian();
    public static IEnumerable HangulJamo();
    public static IEnumerable Ethiopic();
    public static IEnumerable EthiopicSupplement();
    public static IEnumerable Cherokee();
    public static IEnumerable UnifiedCanadianAboriginalSyllabics();
    public static IEnumerable Ogham();
    public static IEnumerable Runic();
    public static IEnumerable Tagalog();
    public static IEnumerable Hanunoo();
    public static IEnumerable Buhid();
    public static IEnumerable Tagbanwa();
    public static IEnumerable Khmer();
    public static IEnumerable Mongolian();
    public static IEnumerable UnifiedCanadianAboriginalSyllabicsExtended();
    public static IEnumerable Limbu();
    public static IEnumerable TaiLe();
    public static IEnumerable NewTaiLue();
    public static IEnumerable KhmerSymbols();
    public static IEnumerable Buginese();
    public static IEnumerable TaiTham();
    public static IEnumerable Balinese();
    public static IEnumerable Sudanese();
    public static IEnumerable Lepcha();
    public static IEnumerable OlChiki();
    public static IEnumerable VedicExtensions();
    public static IEnumerable PhoneticExtensions();
    public static IEnumerable PhoneticExtensionsSupplement();
    public static IEnumerable CombiningDiacriticalMarksSupplement();
    public static IEnumerable LatinExtendedAdditional();
}
internal static class System.Web.Security.AntiXss.CodeCharts.Middle : object {
    public static bool IsFlagSet(MidCodeCharts flags, MidCodeCharts flagToCheck);
    public static IEnumerable GreekExtended();
    public static IEnumerable GeneralPunctuation();
    public static IEnumerable SuperscriptsAndSubscripts();
    public static IEnumerable CurrencySymbols();
    public static IEnumerable CombiningDiacriticalMarksForSymbols();
    public static IEnumerable LetterlikeSymbols();
    public static IEnumerable NumberForms();
    public static IEnumerable Arrows();
    public static IEnumerable MathematicalOperators();
    public static IEnumerable MiscellaneousTechnical();
    public static IEnumerable ControlPictures();
    public static IEnumerable OpticalCharacterRecognition();
    public static IEnumerable EnclosedAlphanumerics();
    public static IEnumerable BoxDrawing();
    public static IEnumerable BlockElements();
    public static IEnumerable GeometricShapes();
    public static IEnumerable MiscellaneousSymbols();
    public static IEnumerable Dingbats();
    public static IEnumerable MiscellaneousMathematicalSymbolsA();
    public static IEnumerable SupplementalArrowsA();
    public static IEnumerable BraillePatterns();
    public static IEnumerable SupplementalArrowsB();
    public static IEnumerable MiscellaneousMathematicalSymbolsB();
    public static IEnumerable SupplementalMathematicalOperators();
    public static IEnumerable MiscellaneousSymbolsAndArrows();
    public static IEnumerable Glagolitic();
    public static IEnumerable LatinExtendedC();
    public static IEnumerable Coptic();
    public static IEnumerable GeorgianSupplement();
    public static IEnumerable Tifinagh();
    public static IEnumerable EthiopicExtended();
}
internal static class System.Web.Security.AntiXss.CodeCharts.Upper : object {
    public static bool IsFlagSet(UpperCodeCharts flags, UpperCodeCharts flagToCheck);
    public static IEnumerable DevanagariExtended();
    public static IEnumerable KayahLi();
    public static IEnumerable Rejang();
    public static IEnumerable HangulJamoExtendedA();
    public static IEnumerable Javanese();
    public static IEnumerable Cham();
    public static IEnumerable MyanmarExtendedA();
    public static IEnumerable TaiViet();
    public static IEnumerable MeeteiMayek();
    public static IEnumerable HangulSyllables();
    public static IEnumerable HangulJamoExtendedB();
    public static IEnumerable CjkCompatibilityIdeographs();
    public static IEnumerable AlphabeticPresentationForms();
    public static IEnumerable ArabicPresentationFormsA();
    public static IEnumerable VariationSelectors();
    public static IEnumerable VerticalForms();
    public static IEnumerable CombiningHalfMarks();
    public static IEnumerable CjkCompatibilityForms();
    public static IEnumerable SmallFormVariants();
    public static IEnumerable ArabicPresentationFormsB();
    public static IEnumerable HalfWidthAndFullWidthForms();
    public static IEnumerable Specials();
}
internal static class System.Web.Security.AntiXss.CodeCharts.UpperMiddle : object {
    public static bool IsFlagSet(UpperMidCodeCharts flags, UpperMidCodeCharts flagToCheck);
    public static IEnumerable CyrillicExtendedA();
    public static IEnumerable SupplementalPunctuation();
    public static IEnumerable CjkRadicalsSupplement();
    public static IEnumerable KangxiRadicals();
    public static IEnumerable IdeographicDescriptionCharacters();
    public static IEnumerable CjkSymbolsAndPunctuation();
    public static IEnumerable Hiragana();
    public static IEnumerable Katakana();
    public static IEnumerable Bopomofo();
    public static IEnumerable HangulCompatibilityJamo();
    public static IEnumerable Kanbun();
    public static IEnumerable BopomofoExtended();
    public static IEnumerable CjkStrokes();
    public static IEnumerable KatakanaPhoneticExtensions();
    public static IEnumerable EnclosedCjkLettersAndMonths();
    public static IEnumerable CjkCompatibility();
    public static IEnumerable CjkUnifiedIdeographsExtensionA();
    public static IEnumerable YijingHexagramSymbols();
    public static IEnumerable CjkUnifiedIdeographs();
    public static IEnumerable YiSyllables();
    public static IEnumerable YiRadicals();
    public static IEnumerable Lisu();
    public static IEnumerable Vai();
    public static IEnumerable CyrillicExtendedB();
    public static IEnumerable Bamum();
    public static IEnumerable ModifierToneLetters();
    public static IEnumerable LatinExtendedD();
    public static IEnumerable SylotiNagri();
    public static IEnumerable CommonIndicNumberForms();
    public static IEnumerable Phagspa();
    public static IEnumerable Saurashtra();
}
internal static class System.Web.Security.AntiXss.CssEncoder : object {
    private static CssEncoder();
    internal static string Encode(string input);
}
internal static class System.Web.Security.AntiXss.EncoderUtil : object {
    internal static StringBuilder GetOutputStringBuilder(int inputLength, int worstCaseOutputCharsPerInputChar);
}
internal enum System.Web.Security.AntiXss.EncodingType : Enum {
    public int value__;
    public static EncodingType QueryString;
    public static EncodingType HtmlForm;
}
internal static class System.Web.Security.AntiXss.HtmlParameterEncoder : object {
    private static HtmlParameterEncoder();
    internal static string QueryStringParameterEncode(string s, Encoding encoding);
    internal static string FormStringParameterEncode(string s, Encoding encoding);
    internal static string UrlPathEncode(string s, Encoding encoding);
}
[FlagsAttribute]
public enum System.Web.Security.AntiXss.LowerCodeCharts : Enum {
    public long value__;
    public static LowerCodeCharts None;
    public static LowerCodeCharts BasicLatin;
    public static LowerCodeCharts C1ControlsAndLatin1Supplement;
    public static LowerCodeCharts LatinExtendedA;
    public static LowerCodeCharts LatinExtendedB;
    public static LowerCodeCharts IpaExtensions;
    public static LowerCodeCharts SpacingModifierLetters;
    public static LowerCodeCharts CombiningDiacriticalMarks;
    public static LowerCodeCharts GreekAndCoptic;
    public static LowerCodeCharts Cyrillic;
    public static LowerCodeCharts CyrillicSupplement;
    public static LowerCodeCharts Armenian;
    public static LowerCodeCharts Hebrew;
    public static LowerCodeCharts Arabic;
    public static LowerCodeCharts Syriac;
    public static LowerCodeCharts ArabicSupplement;
    public static LowerCodeCharts Thaana;
    public static LowerCodeCharts Nko;
    public static LowerCodeCharts Samaritan;
    public static LowerCodeCharts Devanagari;
    public static LowerCodeCharts Bengali;
    public static LowerCodeCharts Gurmukhi;
    public static LowerCodeCharts Gujarati;
    public static LowerCodeCharts Oriya;
    public static LowerCodeCharts Tamil;
    public static LowerCodeCharts Telugu;
    public static LowerCodeCharts Kannada;
    public static LowerCodeCharts Malayalam;
    public static LowerCodeCharts Sinhala;
    public static LowerCodeCharts Thai;
    public static LowerCodeCharts Lao;
    public static LowerCodeCharts Tibetan;
    public static LowerCodeCharts Default;
}
[FlagsAttribute]
public enum System.Web.Security.AntiXss.LowerMidCodeCharts : Enum {
    public long value__;
    public static LowerMidCodeCharts None;
    public static LowerMidCodeCharts Myanmar;
    public static LowerMidCodeCharts Georgian;
    public static LowerMidCodeCharts HangulJamo;
    public static LowerMidCodeCharts Ethiopic;
    public static LowerMidCodeCharts EthiopicSupplement;
    public static LowerMidCodeCharts Cherokee;
    public static LowerMidCodeCharts UnifiedCanadianAboriginalSyllabics;
    public static LowerMidCodeCharts Ogham;
    public static LowerMidCodeCharts Runic;
    public static LowerMidCodeCharts Tagalog;
    public static LowerMidCodeCharts Hanunoo;
    public static LowerMidCodeCharts Buhid;
    public static LowerMidCodeCharts Tagbanwa;
    public static LowerMidCodeCharts Khmer;
    public static LowerMidCodeCharts Mongolian;
    public static LowerMidCodeCharts UnifiedCanadianAboriginalSyllabicsExtended;
    public static LowerMidCodeCharts Limbu;
    public static LowerMidCodeCharts TaiLe;
    public static LowerMidCodeCharts NewTaiLue;
    public static LowerMidCodeCharts KhmerSymbols;
    public static LowerMidCodeCharts Buginese;
    public static LowerMidCodeCharts TaiTham;
    public static LowerMidCodeCharts Balinese;
    public static LowerMidCodeCharts Sudanese;
    public static LowerMidCodeCharts Lepcha;
    public static LowerMidCodeCharts OlChiki;
    public static LowerMidCodeCharts VedicExtensions;
    public static LowerMidCodeCharts PhoneticExtensions;
    public static LowerMidCodeCharts PhoneticExtensionsSupplement;
    public static LowerMidCodeCharts CombiningDiacriticalMarksSupplement;
    public static LowerMidCodeCharts LatinExtendedAdditional;
}
[FlagsAttribute]
public enum System.Web.Security.AntiXss.MidCodeCharts : Enum {
    public long value__;
    public static MidCodeCharts None;
    public static MidCodeCharts GreekExtended;
    public static MidCodeCharts GeneralPunctuation;
    public static MidCodeCharts SuperscriptsAndSubscripts;
    public static MidCodeCharts CurrencySymbols;
    public static MidCodeCharts CombiningDiacriticalMarksForSymbols;
    public static MidCodeCharts LetterlikeSymbols;
    public static MidCodeCharts NumberForms;
    public static MidCodeCharts Arrows;
    public static MidCodeCharts MathematicalOperators;
    public static MidCodeCharts MiscellaneousTechnical;
    public static MidCodeCharts ControlPictures;
    public static MidCodeCharts OpticalCharacterRecognition;
    public static MidCodeCharts EnclosedAlphanumerics;
    public static MidCodeCharts BoxDrawing;
    public static MidCodeCharts BlockElements;
    public static MidCodeCharts GeometricShapes;
    public static MidCodeCharts MiscellaneousSymbols;
    public static MidCodeCharts Dingbats;
    public static MidCodeCharts MiscellaneousMathematicalSymbolsA;
    public static MidCodeCharts SupplementalArrowsA;
    public static MidCodeCharts BraillePatterns;
    public static MidCodeCharts SupplementalArrowsB;
    public static MidCodeCharts MiscellaneousMathematicalSymbolsB;
    public static MidCodeCharts SupplementalMathematicalOperators;
    public static MidCodeCharts MiscellaneousSymbolsAndArrows;
    public static MidCodeCharts Glagolitic;
    public static MidCodeCharts LatinExtendedC;
    public static MidCodeCharts Coptic;
    public static MidCodeCharts GeorgianSupplement;
    public static MidCodeCharts Tifinagh;
    public static MidCodeCharts EthiopicExtended;
}
internal static class System.Web.Security.AntiXss.SafeList : object {
    internal static Char[][] Generate(int length, GenerateSafeValue generateSafeValue);
    internal static void PunchUnicodeThrough(Char[][]& safeList, LowerCodeCharts lowerCodeCharts, LowerMidCodeCharts lowerMidCodeCharts, MidCodeCharts midCodeCharts, UpperMidCodeCharts upperMidCodeCharts, UpperCodeCharts upperCodeCharts);
    internal static void PunchSafeList(Char[][]& safeList, IEnumerable whiteListedCharacters);
    internal static Char[] HashThenValueGenerator(int value);
    internal static Char[] HashThenHexValueGenerator(int value);
    internal static Char[] PercentThenHexValueGenerator(int value);
    internal static Char[] SlashThenHexValueGenerator(int value);
    internal static Char[] SlashThenSixDigitHexValueGenerator(long value);
    internal static Char[] SlashThenSixDigitHexValueGenerator(int value);
    internal static Char[] HashThenValueGenerator(long value);
}
internal static class System.Web.Security.AntiXss.UnicodeCharacterEncoder : object {
    private static UnicodeCharacterEncoder();
    public static void MarkAsSafe(LowerCodeCharts lowerCodeCharts, LowerMidCodeCharts lowerMidCodeCharts, MidCodeCharts midCodeCharts, UpperMidCodeCharts upperMidCodeCharts, UpperCodeCharts upperCodeCharts);
    internal static string XmlEncode(string input);
    internal static string XmlAttributeEncode(string input);
    internal static string HtmlAttributeEncode(string input);
    internal static string HtmlEncode(string input, bool useNamedEntities);
}
[FlagsAttribute]
public enum System.Web.Security.AntiXss.UpperCodeCharts : Enum {
    public int value__;
    public static UpperCodeCharts None;
    public static UpperCodeCharts DevanagariExtended;
    public static UpperCodeCharts KayahLi;
    public static UpperCodeCharts Rejang;
    public static UpperCodeCharts HangulJamoExtendedA;
    public static UpperCodeCharts Javanese;
    public static UpperCodeCharts Cham;
    public static UpperCodeCharts MyanmarExtendedA;
    public static UpperCodeCharts TaiViet;
    public static UpperCodeCharts MeeteiMayek;
    public static UpperCodeCharts HangulSyllables;
    public static UpperCodeCharts HangulJamoExtendedB;
    public static UpperCodeCharts CjkCompatibilityIdeographs;
    public static UpperCodeCharts AlphabeticPresentationForms;
    public static UpperCodeCharts ArabicPresentationFormsA;
    public static UpperCodeCharts VariationSelectors;
    public static UpperCodeCharts VerticalForms;
    public static UpperCodeCharts CombiningHalfMarks;
    public static UpperCodeCharts CjkCompatibilityForms;
    public static UpperCodeCharts SmallFormVariants;
    public static UpperCodeCharts ArabicPresentationFormsB;
    public static UpperCodeCharts HalfWidthAndFullWidthForms;
    public static UpperCodeCharts Specials;
}
[FlagsAttribute]
public enum System.Web.Security.AntiXss.UpperMidCodeCharts : Enum {
    public long value__;
    public static UpperMidCodeCharts None;
    public static UpperMidCodeCharts CyrillicExtendedA;
    public static UpperMidCodeCharts SupplementalPunctuation;
    public static UpperMidCodeCharts CjkRadicalsSupplement;
    public static UpperMidCodeCharts KangxiRadicals;
    public static UpperMidCodeCharts IdeographicDescriptionCharacters;
    public static UpperMidCodeCharts CjkSymbolsAndPunctuation;
    public static UpperMidCodeCharts Hiragana;
    public static UpperMidCodeCharts Katakana;
    public static UpperMidCodeCharts Bopomofo;
    public static UpperMidCodeCharts HangulCompatibilityJamo;
    public static UpperMidCodeCharts Kanbun;
    public static UpperMidCodeCharts BopomofoExtended;
    public static UpperMidCodeCharts CjkStrokes;
    public static UpperMidCodeCharts KatakanaPhoneticExtensions;
    public static UpperMidCodeCharts EnclosedCjkLettersAndMonths;
    public static UpperMidCodeCharts CjkCompatibility;
    public static UpperMidCodeCharts CjkUnifiedIdeographsExtensionA;
    public static UpperMidCodeCharts YijingHexagramSymbols;
    public static UpperMidCodeCharts CjkUnifiedIdeographs;
    public static UpperMidCodeCharts YiSyllables;
    public static UpperMidCodeCharts YiRadicals;
    public static UpperMidCodeCharts Lisu;
    public static UpperMidCodeCharts Vai;
    public static UpperMidCodeCharts CyrillicExtendedB;
    public static UpperMidCodeCharts Bamum;
    public static UpperMidCodeCharts ModifierToneLetters;
    public static UpperMidCodeCharts LatinExtendedD;
    public static UpperMidCodeCharts SylotiNagri;
    public static UpperMidCodeCharts CommonIndicNumberForms;
    public static UpperMidCodeCharts Phagspa;
    public static UpperMidCodeCharts Saurashtra;
}
internal class System.Web.Security.AntiXss.Utf16StringReader : ValueType {
    private static char LeadingSurrogateStart;
    private static char TrailingSurrogateStart;
    private static int UnicodeReplacementCharacterCodePoint;
    private int _currentOffset;
    private string _input;
    public Utf16StringReader(string input);
    public int ReadNextScalarValue();
}
internal class System.Web.Security.AuthFailedErrorFormatter : ErrorFormatter {
    protected string ErrorTitle { get; }
    protected string Description { get; }
    protected string MiscSectionTitle { get; }
    protected string MiscSectionContent { get; }
    protected string ColoredSquareTitle { get; }
    protected string ColoredSquareContent { get; }
    protected bool ShowSourceFileInfo { get; }
    private static AuthFailedErrorFormatter();
    internal static string GetErrorText();
    protected virtual string get_ErrorTitle();
    protected virtual string get_Description();
    protected virtual string get_MiscSectionTitle();
    protected virtual string get_MiscSectionContent();
    protected virtual string get_ColoredSquareTitle();
    protected virtual string get_ColoredSquareContent();
    protected virtual bool get_ShowSourceFileInfo();
}
public class System.Web.Security.AuthorizationStoreRoleProvider : RoleProvider {
    public string ApplicationName { get; public set; }
    public string ScopeName { get; public set; }
    public int CacheRefreshInterval { get; }
    public virtual string get_ApplicationName();
    public virtual void set_ApplicationName(string value);
    public string get_ScopeName();
    public void set_ScopeName(string value);
    public int get_CacheRefreshInterval();
    public virtual void Initialize(string name, NameValueCollection config);
    public virtual bool IsUserInRole(string username, string roleName);
    public virtual String[] GetRolesForUser(string username);
    public virtual void CreateRole(string roleName);
    public virtual bool DeleteRole(string roleName, bool throwOnPopulatedRole);
    public virtual bool RoleExists(string roleName);
    public virtual void AddUsersToRoles(String[] usernames, String[] roleNames);
    public virtual void RemoveUsersFromRoles(String[] userNames, String[] roleNames);
    public virtual String[] GetUsersInRole(string roleName);
    public virtual String[] GetAllRoles();
    public virtual String[] FindUsersInRole(string roleName, string usernameToMatch);
}
internal class System.Web.Security.AuthStoreErrorFormatter : ErrorFormatter {
    protected string ErrorTitle { get; }
    protected string Description { get; }
    protected string MiscSectionTitle { get; }
    protected string MiscSectionContent { get; }
    protected string ColoredSquareTitle { get; }
    protected string ColoredSquareContent { get; }
    protected bool ShowSourceFileInfo { get; }
    private static AuthStoreErrorFormatter();
    internal static string GetErrorText();
    protected virtual string get_ErrorTitle();
    protected virtual string get_Description();
    protected virtual string get_MiscSectionTitle();
    protected virtual string get_MiscSectionContent();
    protected virtual string get_ColoredSquareTitle();
    protected virtual string get_ColoredSquareContent();
    protected virtual bool get_ShowSourceFileInfo();
}
internal class System.Web.Security.CookielessHelperClass : object {
    internal static string COOKIELESS_SESSION_FILTER_HEADER;
    internal CookielessHelperClass(HttpContext context);
    internal void RemoveCookielessValuesFromPath();
    internal string GetCookieValue(char identifier);
    internal bool DoesCookieValueExistInOriginal(char identifier);
    internal void SetCookieValue(char identifier, string cookieValue);
    internal static bool UseCookieless(HttpContext context, bool doRedirect, HttpCookieMode cookieMode);
    internal void RedirectWithDetection(string redirectPath);
    internal void RedirectWithDetectionIfRequired(string redirectPath, HttpCookieMode cookieMode);
}
public enum System.Web.Security.CookieProtection : Enum {
    public int value__;
    public static CookieProtection None;
    public static CookieProtection Validation;
    public static CookieProtection Encryption;
    public static CookieProtection All;
}
internal class System.Web.Security.CookieProtectionHelper : object {
    internal static string Encode(CookieProtection cookieProtection, Byte[] buf, Purpose purpose);
    internal static Byte[] Decode(CookieProtection cookieProtection, string data, Purpose purpose);
}
internal enum System.Web.Security.CookiesSupported : Enum {
    public int value__;
    public static CookiesSupported Supported;
    public static CookiesSupported NotSupported;
    public static CookiesSupported Unknown;
}
internal enum System.Web.Security.CredentialsType : Enum {
    public int value__;
    public static CredentialsType Windows;
    public static CredentialsType NonWindows;
}
internal class System.Web.Security.Cryptography.AspNetCryptoServiceProvider : object {
    internal static AspNetCryptoServiceProvider Instance { get; }
    internal bool IsDefaultProvider { get; private set; }
    internal AspNetCryptoServiceProvider(MachineKeySection machineKeySection, ICryptoAlgorithmFactory cryptoAlgorithmFactory, IMasterKeyProvider masterKeyProvider, IDataProtectorFactory dataProtectorFactory, KeyDerivationFunction keyDerivationFunction);
    private static AspNetCryptoServiceProvider();
    internal static AspNetCryptoServiceProvider get_Instance();
    [CompilerGeneratedAttribute]
internal bool get_IsDefaultProvider();
    [CompilerGeneratedAttribute]
private void set_IsDefaultProvider(bool value);
    public sealed virtual ICryptoService GetCryptoService(Purpose purpose, CryptoServiceOptions options);
}
internal static class System.Web.Security.Cryptography.CryptoAlgorithms : object {
    internal static Aes CreateAes();
    [ObsoleteAttribute("DES is deprecated and MUST NOT be used by new features. Consider using AES instead.")]
internal static DES CreateDES();
    internal static HMACSHA1 CreateHMACSHA1();
    internal static HMACSHA256 CreateHMACSHA256();
    internal static HMACSHA384 CreateHMACSHA384();
    internal static HMACSHA512 CreateHMACSHA512();
    internal static HMACSHA512 CreateHMACSHA512(Byte[] key);
    [ObsoleteAttribute("MD5 is deprecated and MUST NOT be used by new features. Consider using a SHA-2 algorithm instead.")]
internal static MD5 CreateMD5();
    [ObsoleteAttribute("SHA1 is deprecated and MUST NOT be used by new features. Consider using a SHA-2 algorithm instead.")]
internal static SHA1 CreateSHA1();
    internal static SHA256 CreateSHA256();
    [ObsoleteAttribute("3DES is deprecated and MUST NOT be used by new features. Consider using AES instead.")]
internal static TripleDES CreateTripleDES();
}
internal class System.Web.Security.Cryptography.CryptographicKey : object {
    public int KeyLength { get; }
    public CryptographicKey(Byte[] keyMaterial);
    public int get_KeyLength();
    public CryptographicKey ExtractBits(int offset, int count);
    public Byte[] GetKeyMaterial();
}
internal enum System.Web.Security.Cryptography.CryptoServiceOptions : Enum {
    public int value__;
    public static CryptoServiceOptions None;
    public static CryptoServiceOptions CacheableOutput;
}
internal static class System.Web.Security.Cryptography.CryptoUtil : object {
    public static UTF8Encoding SecureUTF8Encoding;
    private static CryptoUtil();
    public static string BinaryToHex(Byte[] data);
    public static bool BuffersAreEqual(Byte[] buffer1, int buffer1Offset, int buffer1Count, Byte[] buffer2, int buffer2Offset, int buffer2Count);
    public static Byte[] ComputeSHA256Hash(Byte[] input);
    public static Byte[] ComputeSHA256Hash(Byte[] buffer, int offset, int count);
    public static Byte[] CreatePredictableIV(Byte[] buffer, int ivBitLength);
    public static Byte[] HexToBinary(string data);
}
internal class System.Web.Security.Cryptography.DataProtectorCryptoService : object {
    public DataProtectorCryptoService(IDataProtectorFactory dataProtectorFactory, Purpose purpose);
    public sealed virtual Byte[] Protect(Byte[] clearData);
    public sealed virtual Byte[] Unprotect(Byte[] protectedData);
}
internal class System.Web.Security.Cryptography.HomogenizingCryptoServiceWrapper : object {
    internal ICryptoService WrappedCryptoService { get; private set; }
    public HomogenizingCryptoServiceWrapper(ICryptoService wrapped);
    [CompilerGeneratedAttribute]
internal ICryptoService get_WrappedCryptoService();
    [CompilerGeneratedAttribute]
private void set_WrappedCryptoService(ICryptoService value);
    public sealed virtual Byte[] Protect(Byte[] clearData);
    public sealed virtual Byte[] Unprotect(Byte[] protectedData);
}
internal interface System.Web.Security.Cryptography.ICryptoAlgorithmFactory {
    public abstract virtual SymmetricAlgorithm GetEncryptionAlgorithm();
    public abstract virtual KeyedHashAlgorithm GetValidationAlgorithm();
}
internal interface System.Web.Security.Cryptography.ICryptoService {
    public abstract virtual Byte[] Protect(Byte[] clearData);
    public abstract virtual Byte[] Unprotect(Byte[] protectedData);
}
internal interface System.Web.Security.Cryptography.ICryptoServiceProvider {
    public abstract virtual ICryptoService GetCryptoService(Purpose purpose, CryptoServiceOptions options);
}
internal interface System.Web.Security.Cryptography.IDataProtectorFactory {
    public abstract virtual DataProtector GetDataProtector(Purpose purpose);
}
internal interface System.Web.Security.Cryptography.IMasterKeyProvider {
    public abstract virtual CryptographicKey GetEncryptionKey();
    public abstract virtual CryptographicKey GetValidationKey();
}
internal class System.Web.Security.Cryptography.KeyDerivationFunction : MulticastDelegate {
    public KeyDerivationFunction(object object, IntPtr method);
    public virtual CryptographicKey Invoke(CryptographicKey keyDerivationKey, Purpose purpose);
    public virtual IAsyncResult BeginInvoke(CryptographicKey keyDerivationKey, Purpose purpose, AsyncCallback callback, object object);
    public virtual CryptographicKey EndInvoke(IAsyncResult result);
}
internal class System.Web.Security.Cryptography.MachineKeyCryptoAlgorithmFactory : object {
    public MachineKeyCryptoAlgorithmFactory(MachineKeySection machineKeySection);
    public sealed virtual SymmetricAlgorithm GetEncryptionAlgorithm();
    public sealed virtual KeyedHashAlgorithm GetValidationAlgorithm();
}
internal class System.Web.Security.Cryptography.MachineKeyDataProtectorFactory : object {
    public MachineKeyDataProtectorFactory(MachineKeySection machineKeySection);
    private static MachineKeyDataProtectorFactory();
    public sealed virtual DataProtector GetDataProtector(Purpose purpose);
}
internal class System.Web.Security.Cryptography.MachineKeyMasterKeyProvider : object {
    internal string ApplicationName { get; }
    internal string ApplicationId { get; }
    internal CryptographicKey AutogenKeys { get; }
    internal KeyDerivationFunction KeyDerivationFunction { get; }
    internal MachineKeyMasterKeyProvider(MachineKeySection machineKeySection, string applicationId, string applicationName, CryptographicKey autogenKeys, KeyDerivationFunction keyDerivationFunction);
    internal string get_ApplicationName();
    internal string get_ApplicationId();
    internal CryptographicKey get_AutogenKeys();
    internal KeyDerivationFunction get_KeyDerivationFunction();
    public sealed virtual CryptographicKey GetEncryptionKey();
    public sealed virtual CryptographicKey GetValidationKey();
}
internal class System.Web.Security.Cryptography.NetFXCryptoService : object {
    public NetFXCryptoService(ICryptoAlgorithmFactory cryptoAlgorithmFactory, CryptographicKey encryptionKey, CryptographicKey validationKey, bool predictableIV);
    public sealed virtual Byte[] Protect(Byte[] clearData);
    public sealed virtual Byte[] Unprotect(Byte[] protectedData);
}
internal class System.Web.Security.Cryptography.Purpose : object {
    public static Purpose AnonymousIdentificationModule_Ticket;
    public static Purpose AssemblyResourceLoader_WebResourceUrl;
    public static Purpose FormsAuthentication_Ticket;
    public static Purpose WebForms_Page_PreviousPageID;
    public static Purpose RolePrincipal_Ticket;
    public static Purpose ScriptResourceHandler_ScriptResourceUrl;
    public static Purpose WebForms_ClientScriptManager_EventValidation;
    public static Purpose WebForms_DetailsView_KeyTable;
    public static Purpose WebForms_GridView_DataKeys;
    public static Purpose WebForms_GridView_SortExpression;
    public static Purpose WebForms_HiddenFieldPageStatePersister_ClientState;
    public static Purpose WebForms_ScriptManager_HistoryState;
    public static Purpose WebForms_SessionPageStatePersister_ClientState;
    public static Purpose User_MachineKey_Protect;
    public static Purpose User_ObjectStateFormatter_Serialize;
    public string PrimaryPurpose;
    public String[] SpecificPurposes;
    internal CryptographicKey DerivedEncryptionKey { get; private set; }
    internal CryptographicKey DerivedValidationKey { get; private set; }
    internal bool SaveDerivedKeys { get; internal set; }
    public Purpose(string primaryPurpose, String[] specificPurposes);
    internal Purpose(string primaryPurpose, String[] specificPurposes, CryptographicKey derivedEncryptionKey, CryptographicKey derivedValidationKey);
    private static Purpose();
    [CompilerGeneratedAttribute]
internal CryptographicKey get_DerivedEncryptionKey();
    [CompilerGeneratedAttribute]
private void set_DerivedEncryptionKey(CryptographicKey value);
    [CompilerGeneratedAttribute]
internal CryptographicKey get_DerivedValidationKey();
    [CompilerGeneratedAttribute]
private void set_DerivedValidationKey(CryptographicKey value);
    [CompilerGeneratedAttribute]
internal bool get_SaveDerivedKeys();
    [CompilerGeneratedAttribute]
internal void set_SaveDerivedKeys(bool value);
    internal Purpose AppendSpecificPurpose(string specificPurpose);
    internal Purpose AppendSpecificPurposes(IList`1<string> specificPurposes);
    public CryptographicKey GetDerivedEncryptionKey(IMasterKeyProvider masterKeyProvider, KeyDerivationFunction keyDerivationFunction);
    public CryptographicKey GetDerivedValidationKey(IMasterKeyProvider masterKeyProvider, KeyDerivationFunction keyDerivationFunction);
    internal void GetKeyDerivationParameters(Byte[]& label, Byte[]& context);
}
internal static class System.Web.Security.Cryptography.SP800_108 : object {
    public static CryptographicKey DeriveKey(CryptographicKey keyDerivationKey, Purpose purpose);
}
public class System.Web.Security.DefaultAuthenticationEventArgs : EventArgs {
    public HttpContext Context { get; }
    public DefaultAuthenticationEventArgs(HttpContext context);
    public HttpContext get_Context();
}
public class System.Web.Security.DefaultAuthenticationEventHandler : MulticastDelegate {
    public DefaultAuthenticationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DefaultAuthenticationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DefaultAuthenticationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.Security.DefaultAuthenticationModule : object {
    internal static DefaultAuthenticationModule CreateDefaultAuthenticationModuleWithAssert();
    public void add_Authenticate(DefaultAuthenticationEventHandler value);
    public void remove_Authenticate(DefaultAuthenticationEventHandler value);
    public sealed virtual void Dispose();
    public sealed virtual void Init(HttpApplication app);
}
internal class System.Web.Security.DirectoryInformation : object {
    internal static int SSL_PORT;
    internal bool ConcurrentBindSupported { get; }
    internal string ContainerDN { get; }
    internal string CreationContainerDN { get; }
    internal int Port { get; }
    internal bool PortSpecified { get; }
    internal DirectoryType DirectoryType { get; }
    internal ActiveDirectoryConnectionProtection ConnectionProtection { get; }
    internal AuthenticationTypes AuthenticationTypes { get; }
    internal int ClientSearchTimeout { get; }
    internal int ServerSearchTimeout { get; }
    internal string ADAMPartitionDN { get; }
    internal TimeSpan ADLockoutDuration { get; }
    internal string ForestName { get; }
    internal string DomainName { get; }
    internal DirectoryInformation(string adspath, NetworkCredential credentials, string connProtection, int clientSearchTimeout, int serverSearchTimeout, bool enablePasswordReset);
    internal bool get_ConcurrentBindSupported();
    internal string get_ContainerDN();
    internal string get_CreationContainerDN();
    internal int get_Port();
    internal bool get_PortSpecified();
    internal DirectoryType get_DirectoryType();
    internal ActiveDirectoryConnectionProtection get_ConnectionProtection();
    internal AuthenticationTypes get_AuthenticationTypes();
    internal int get_ClientSearchTimeout();
    internal int get_ServerSearchTimeout();
    internal string get_ADAMPartitionDN();
    internal TimeSpan get_ADLockoutDuration();
    internal string get_ForestName();
    internal string get_DomainName();
    internal void InitializeDomainAndForestName();
    internal void SelectServer();
    internal LdapConnection CreateNewLdapConnection(AuthType authType);
    internal string GetADsPath(string dn);
    internal void SetSessionOptionsForSecureConnection(LdapConnection connection, bool useConcurrentBind);
    internal string GetUsername();
    internal string GetPassword();
    internal AuthenticationTypes GetAuthenticationTypes(ActiveDirectoryConnectionProtection connectionProtection, CredentialsType type);
    internal AuthType GetLdapAuthenticationTypes(ActiveDirectoryConnectionProtection connectionProtection, CredentialsType type);
    internal bool IsDefaultCredential();
    internal static NetworkCredential GetCredentialsWithDomain(NetworkCredential credentials);
    internal string GetPdcIfDomain(string name);
    internal string GetNetbiosDomainNameIfAvailable(string dnsDomainName);
}
internal enum System.Web.Security.DirectoryType : Enum {
    public int value__;
    public static DirectoryType AD;
    public static DirectoryType ADAM;
    public static DirectoryType Unknown;
}
internal class System.Web.Security.DomainControllerInfo : object {
    public string DomainControllerName;
    public string DomainControllerAddress;
    public int DomainControllerAddressType;
    public Guid DomainGuid;
    public string DomainName;
    public string DnsForestName;
    public int Flags;
    public string DcSiteName;
    public string ClientSiteName;
}
internal class System.Web.Security.FileAccessFailedErrorFormatter : ErrorFormatter {
    protected string ErrorTitle { get; }
    protected string Description { get; }
    protected string MiscSectionTitle { get; }
    protected string MiscSectionContent { get; }
    protected string ColoredSquareTitle { get; }
    protected string ColoredSquareContent { get; }
    protected bool ShowSourceFileInfo { get; }
    internal FileAccessFailedErrorFormatter(string strFile);
    protected virtual string get_ErrorTitle();
    protected virtual string get_Description();
    protected virtual string get_MiscSectionTitle();
    protected virtual string get_MiscSectionContent();
    protected virtual string get_ColoredSquareTitle();
    protected virtual string get_ColoredSquareContent();
    protected virtual bool get_ShowSourceFileInfo();
}
public class System.Web.Security.FileAuthorizationModule : object {
    public static bool CheckFileAccessForUser(string virtualPath, IntPtr token, string verb);
    public sealed virtual void Init(HttpApplication app);
    public sealed virtual void Dispose();
    internal static bool IsWindowsIdentity(HttpContext context);
    internal static bool RequestRequiresAuthorization(HttpContext context);
    internal static bool IsUserAllowedToPath(HttpContext context, VirtualPath virtualPath);
}
internal class System.Web.Security.FileSecurityDescriptorWrapper : object {
    internal bool _AnonymousAccessChecked;
    internal bool _AnonymousAccess;
    internal FileSecurityDescriptorWrapper(string strFile);
    private static FileSecurityDescriptorWrapper();
    protected virtual override void Finalize();
    internal bool IsAccessAllowed(IntPtr iToken, int iAccess);
    internal void OnCacheItemRemoved(string key, object value, CacheItemRemovedReason reason);
    internal void FreeSecurityDescriptor();
    internal bool IsSecurityDescriptorValid();
    internal string GetCacheDependencyPath();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class System.Web.Security.FormsAuthentication : object {
    public static bool IsEnabled { get; }
    public static string FormsCookieName { get; }
    public static string FormsCookiePath { get; }
    public static bool RequireSSL { get; }
    public static TimeSpan Timeout { get; }
    public static bool SlidingExpiration { get; }
    public static HttpCookieMode CookieMode { get; }
    public static string CookieDomain { get; }
    public static bool EnableCrossAppRedirects { get; }
    public static TicketCompatibilityMode TicketCompatibilityMode { get; }
    public static bool CookiesSupported { get; }
    public static string LoginUrl { get; }
    public static string DefaultUrl { get; }
    internal static string ReturnUrlVar { get; }
    private static FormsAuthentication();
    [ObsoleteAttribute("The recommended alternative is to use the Membership APIs, such as Membership.CreateUser. For more information, see http://go.microsoft.com/fwlink/?LinkId=252463.")]
public static string HashPasswordForStoringInConfigFile(string password, string passwordFormat);
    public static void Initialize();
    public static FormsAuthenticationTicket Decrypt(string encryptedTicket);
    public static string Encrypt(FormsAuthenticationTicket ticket);
    internal static string Encrypt(FormsAuthenticationTicket ticket, bool hexEncodedTicket);
    [ObsoleteAttribute("The recommended alternative is to use the Membership APIs, such as Membership.ValidateUser. For more information, see http://go.microsoft.com/fwlink/?LinkId=252463.")]
public static bool Authenticate(string name, string password);
    public static void SignOut();
    public static void SetAuthCookie(string userName, bool createPersistentCookie);
    public static void SetAuthCookie(string userName, bool createPersistentCookie, string strCookiePath);
    public static HttpCookie GetAuthCookie(string userName, bool createPersistentCookie);
    public static HttpCookie GetAuthCookie(string userName, bool createPersistentCookie, string strCookiePath);
    internal static string GetReturnUrl(bool useDefaultIfAbsent);
    public static string GetRedirectUrl(string userName, bool createPersistentCookie);
    public static void RedirectFromLoginPage(string userName, bool createPersistentCookie);
    public static void RedirectFromLoginPage(string userName, bool createPersistentCookie, string strCookiePath);
    public static FormsAuthenticationTicket RenewTicketIfOld(FormsAuthenticationTicket tOld);
    public static void EnableFormsAuthentication(NameValueCollection configurationData);
    public static bool get_IsEnabled();
    public static string get_FormsCookieName();
    public static string get_FormsCookiePath();
    public static bool get_RequireSSL();
    public static TimeSpan get_Timeout();
    public static bool get_SlidingExpiration();
    public static HttpCookieMode get_CookieMode();
    public static string get_CookieDomain();
    public static bool get_EnableCrossAppRedirects();
    public static TicketCompatibilityMode get_TicketCompatibilityMode();
    public static bool get_CookiesSupported();
    public static string get_LoginUrl();
    public static string get_DefaultUrl();
    internal static string get_ReturnUrlVar();
    internal static string GetLoginPage(string extraQueryString);
    internal static string GetLoginPage(string extraQueryString, bool reuseReturnUrl);
    public static void RedirectToLoginPage();
    public static void RedirectToLoginPage(string extraQueryString);
    internal static string RemoveQueryStringVariableFromUrl(string strUrl, string QSVar);
}
public class System.Web.Security.FormsAuthenticationEventArgs : EventArgs {
    public IPrincipal User { get; public set; }
    public HttpContext Context { get; }
    public FormsAuthenticationEventArgs(HttpContext context);
    public IPrincipal get_User();
    public void set_User(IPrincipal value);
    public HttpContext get_Context();
}
public class System.Web.Security.FormsAuthenticationEventHandler : MulticastDelegate {
    public FormsAuthenticationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FormsAuthenticationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FormsAuthenticationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.Security.FormsAuthenticationModule : object {
    internal static bool FormsAuthRequired { get; }
    internal static bool get_FormsAuthRequired();
    public void add_Authenticate(FormsAuthenticationEventHandler value);
    public void remove_Authenticate(FormsAuthenticationEventHandler value);
    public sealed virtual void Dispose();
    public sealed virtual void Init(HttpApplication app);
}
public class System.Web.Security.FormsAuthenticationTicket : object {
    public int Version { get; }
    public string Name { get; }
    public DateTime Expiration { get; }
    public DateTime IssueDate { get; }
    public bool IsPersistent { get; }
    public bool Expired { get; }
    public string UserData { get; }
    public string CookiePath { get; }
    internal DateTime ExpirationUtc { get; }
    internal DateTime IssueDateUtc { get; }
    public FormsAuthenticationTicket(int version, string name, DateTime issueDate, DateTime expiration, bool isPersistent, string userData);
    public FormsAuthenticationTicket(int version, string name, DateTime issueDate, DateTime expiration, bool isPersistent, string userData, string cookiePath);
    public FormsAuthenticationTicket(string name, bool isPersistent, int timeout);
    public int get_Version();
    public string get_Name();
    public DateTime get_Expiration();
    public DateTime get_IssueDate();
    public bool get_IsPersistent();
    public bool get_Expired();
    public string get_UserData();
    public string get_CookiePath();
    internal DateTime get_ExpirationUtc();
    internal DateTime get_IssueDateUtc();
    internal static FormsAuthenticationTicket FromUtc(int version, string name, DateTime issueDateUtc, DateTime expirationUtc, bool isPersistent, string userData, string cookiePath);
}
internal static class System.Web.Security.FormsAuthenticationTicketSerializer : object {
    public static FormsAuthenticationTicket Deserialize(Byte[] serializedTicket, int serializedTicketLength);
    public static Byte[] Serialize(FormsAuthenticationTicket ticket);
}
[ComVisibleAttribute("False")]
public class System.Web.Security.FormsIdentity : ClaimsIdentity {
    public string Name { get; }
    public string AuthenticationType { get; }
    public bool IsAuthenticated { get; }
    public FormsAuthenticationTicket Ticket { get; }
    public IEnumerable`1<Claim> Claims { get; }
    public FormsIdentity(FormsAuthenticationTicket ticket);
    protected FormsIdentity(FormsIdentity identity);
    public virtual string get_Name();
    public virtual string get_AuthenticationType();
    public virtual bool get_IsAuthenticated();
    public FormsAuthenticationTicket get_Ticket();
    public virtual IEnumerable`1<Claim> get_Claims();
    public virtual ClaimsIdentity Clone();
}
public static class System.Web.Security.MachineKey : object {
    [ObsoleteAttribute("This method is obsolete and is only provided for compatibility with existing code. It is recommended that new code use the Protect and Unprotect methods instead.")]
public static string Encode(Byte[] data, MachineKeyProtection protectionOption);
    [ObsoleteAttribute("This method is obsolete and is only provided for compatibility with existing code. It is recommended that new code use the Protect and Unprotect methods instead.")]
public static Byte[] Decode(string encodedData, MachineKeyProtection protectionOption);
    public static Byte[] Protect(Byte[] userData, String[] purposes);
    internal static Byte[] Protect(ICryptoServiceProvider cryptoServiceProvider, Byte[] userData, String[] purposes);
    public static Byte[] Unprotect(Byte[] protectedData, String[] purposes);
    internal static Byte[] Unprotect(ICryptoServiceProvider cryptoServiceProvider, Byte[] protectedData, String[] purposes);
}
public enum System.Web.Security.MachineKeyProtection : Enum {
    public int value__;
    public static MachineKeyProtection All;
    public static MachineKeyProtection Encryption;
    public static MachineKeyProtection Validation;
}
public static class System.Web.Security.Membership : object {
    public static bool EnablePasswordRetrieval { get; }
    public static bool EnablePasswordReset { get; }
    public static bool RequiresQuestionAndAnswer { get; }
    public static int UserIsOnlineTimeWindow { get; }
    public static MembershipProviderCollection Providers { get; }
    public static MembershipProvider Provider { get; }
    public static string HashAlgorithmType { get; }
    internal static bool IsHashAlgorithmFromMembershipConfig { get; }
    public static int MaxInvalidPasswordAttempts { get; }
    public static int PasswordAttemptWindow { get; }
    public static int MinRequiredPasswordLength { get; }
    public static int MinRequiredNonAlphanumericCharacters { get; }
    public static string PasswordStrengthRegularExpression { get; }
    public static string ApplicationName { get; public set; }
    private static Membership();
    public static bool get_EnablePasswordRetrieval();
    public static bool get_EnablePasswordReset();
    public static bool get_RequiresQuestionAndAnswer();
    public static int get_UserIsOnlineTimeWindow();
    public static MembershipProviderCollection get_Providers();
    public static MembershipProvider get_Provider();
    public static string get_HashAlgorithmType();
    internal static bool get_IsHashAlgorithmFromMembershipConfig();
    public static int get_MaxInvalidPasswordAttempts();
    public static int get_PasswordAttemptWindow();
    public static int get_MinRequiredPasswordLength();
    public static int get_MinRequiredNonAlphanumericCharacters();
    public static string get_PasswordStrengthRegularExpression();
    public static string get_ApplicationName();
    public static void set_ApplicationName(string value);
    public static MembershipUser CreateUser(string username, string password);
    public static MembershipUser CreateUser(string username, string password, string email);
    public static MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, MembershipCreateStatus& status);
    public static MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, MembershipCreateStatus& status);
    public static bool ValidateUser(string username, string password);
    public static MembershipUser GetUser();
    public static MembershipUser GetUser(bool userIsOnline);
    public static MembershipUser GetUser(string username);
    public static MembershipUser GetUser(string username, bool userIsOnline);
    public static MembershipUser GetUser(object providerUserKey);
    public static MembershipUser GetUser(object providerUserKey, bool userIsOnline);
    public static string GetUserNameByEmail(string emailToMatch);
    public static bool DeleteUser(string username);
    public static bool DeleteUser(string username, bool deleteAllRelatedData);
    public static void UpdateUser(MembershipUser user);
    public static MembershipUserCollection GetAllUsers();
    public static MembershipUserCollection GetAllUsers(int pageIndex, int pageSize, Int32& totalRecords);
    public static int GetNumberOfUsersOnline();
    public static string GeneratePassword(int length, int numberOfNonAlphanumericCharacters);
    public static MembershipUserCollection FindUsersByName(string usernameToMatch, int pageIndex, int pageSize, Int32& totalRecords);
    public static MembershipUserCollection FindUsersByName(string usernameToMatch);
    public static MembershipUserCollection FindUsersByEmail(string emailToMatch, int pageIndex, int pageSize, Int32& totalRecords);
    public static MembershipUserCollection FindUsersByEmail(string emailToMatch);
    public static void add_ValidatingPassword(MembershipValidatePasswordEventHandler value);
    public static void remove_ValidatingPassword(MembershipValidatePasswordEventHandler value);
}
internal class System.Web.Security.MembershipAdapter : object {
    public MembershipProviderCollection Providers { get; }
    public int UserIsOnlineTimeWindow { get; }
    public bool IsDecryptionKeyAutogenerated { get; }
    public bool UsingCustomEncryption { get; }
    public sealed virtual MembershipProviderCollection get_Providers();
    public sealed virtual int get_UserIsOnlineTimeWindow();
    public sealed virtual bool get_IsDecryptionKeyAutogenerated();
    public sealed virtual bool get_UsingCustomEncryption();
    public sealed virtual Byte[] EncryptOrDecryptData(bool encrypt, Byte[] buffer, bool useLegacyMode);
}
[AttributeUsageAttribute("2432")]
public class System.Web.Security.MembershipPasswordAttribute : ValidationAttribute {
    public int MinRequiredPasswordLength { get; public set; }
    public int MinRequiredNonAlphanumericCharacters { get; public set; }
    public string PasswordStrengthRegularExpression { get; public set; }
    public Type ResourceType { get; public set; }
    public string MinPasswordLengthError { get; public set; }
    public string MinNonAlphanumericCharactersError { get; public set; }
    public string PasswordStrengthError { get; public set; }
    public Nullable`1<int> PasswordStrengthRegexTimeout { get; public set; }
    public int get_MinRequiredPasswordLength();
    public void set_MinRequiredPasswordLength(int value);
    public int get_MinRequiredNonAlphanumericCharacters();
    public void set_MinRequiredNonAlphanumericCharacters(int value);
    public string get_PasswordStrengthRegularExpression();
    public void set_PasswordStrengthRegularExpression(string value);
    public Type get_ResourceType();
    public void set_ResourceType(Type value);
    public string get_MinPasswordLengthError();
    public void set_MinPasswordLengthError(string value);
    public string get_MinNonAlphanumericCharactersError();
    public void set_MinNonAlphanumericCharactersError(string value);
    public string get_PasswordStrengthError();
    public void set_PasswordStrengthError(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PasswordStrengthRegexTimeout();
    [CompilerGeneratedAttribute]
public void set_PasswordStrengthRegexTimeout(Nullable`1<int> value);
    protected virtual ValidationResult IsValid(object value, ValidationContext validationContext);
    public virtual string FormatErrorMessage(string name);
}
[ComVisibleAttribute("False")]
[SuppressUnmanagedCodeSecurityAttribute]
internal static class System.Web.Security.NativeComInterfaces : object {
    internal static int ADS_SETTYPE_FULL;
    internal static int ADS_SETTYPE_DN;
    internal static int ADS_FORMAT_PROVIDER;
    internal static int ADS_FORMAT_SERVER;
    internal static int ADS_FORMAT_X500_DN;
    internal static int ADS_ESCAPEDMODE_ON;
    internal static int ADS_ESCAPEDMODE_OFF;
}
[SuppressUnmanagedCodeSecurityAttribute]
internal static class System.Web.Security.NativeMethods : object {
    internal static int ERROR_NO_SUCH_DOMAIN;
    internal static int FORMAT_MESSAGE_IGNORE_INSERTS;
    internal static int FORMAT_MESSAGE_FROM_SYSTEM;
    internal static int FORMAT_MESSAGE_ARGUMENT_ARRAY;
    internal static int DsGetDcName(string computerName, string domainName, IntPtr domainGuid, string siteName, UInt32 flags, IntPtr& domainControllerInfo);
    internal static int NetApiBufferFree(IntPtr buffer);
    public static int FormatMessageW(int dwFlags, int lpSource, int dwMessageId, int dwLanguageId, StringBuilder lpBuffer, int nSize, int arguments);
}
[ObsoleteAttribute("This type is obsolete. The Passport authentication product is no longer supported and has been superseded by Live ID.")]
public class System.Web.Security.PassportAuthenticationEventArgs : EventArgs {
    public IPrincipal User { get; public set; }
    public HttpContext Context { get; }
    public PassportIdentity Identity { get; }
    public PassportAuthenticationEventArgs(PassportIdentity identity, HttpContext context);
    public IPrincipal get_User();
    public void set_User(IPrincipal value);
    public HttpContext get_Context();
    public PassportIdentity get_Identity();
}
[ObsoleteAttribute("This type is obsolete. The Passport authentication product is no longer supported and has been superseded by Live ID.")]
public class System.Web.Security.PassportAuthenticationEventHandler : MulticastDelegate {
    public PassportAuthenticationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PassportAuthenticationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PassportAuthenticationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("This type is obsolete. The Passport authentication product is no longer supported and has been superseded by Live ID.")]
public class System.Web.Security.PassportAuthenticationModule : object {
    private static PassportAuthenticationModule();
    public void add_Authenticate(PassportAuthenticationEventHandler value);
    public void remove_Authenticate(PassportAuthenticationEventHandler value);
    public sealed virtual void Dispose();
    public sealed virtual void Init(HttpApplication app);
}
internal class System.Web.Security.PassportAuthFailedErrorFormatter : ErrorFormatter {
    protected string ErrorTitle { get; }
    protected string Description { get; }
    protected string MiscSectionTitle { get; }
    protected string MiscSectionContent { get; }
    protected string ColoredSquareTitle { get; }
    protected string ColoredSquareContent { get; }
    protected bool ShowSourceFileInfo { get; }
    protected virtual string get_ErrorTitle();
    protected virtual string get_Description();
    protected virtual string get_MiscSectionTitle();
    protected virtual string get_MiscSectionContent();
    protected virtual string get_ColoredSquareTitle();
    protected virtual string get_ColoredSquareContent();
    protected virtual bool get_ShowSourceFileInfo();
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("This type is obsolete. The Passport authentication product is no longer supported and has been superseded by Live ID.")]
public class System.Web.Security.PassportIdentity : object {
    internal bool WWWAuthHeaderSet { get; }
    public string Name { get; }
    public string AuthenticationType { get; }
    public bool IsAuthenticated { get; }
    public string Item { get; }
    public int Error { get; }
    public bool GetFromNetworkServer { get; }
    public bool HasSavedPassword { get; }
    public bool HasTicket { get; }
    public int TicketAge { get; }
    public int TimeSinceSignIn { get; }
    public string HexPUID { get; }
    private static PassportIdentity();
    internal bool get_WWWAuthHeaderSet();
    protected virtual override void Finalize();
    public sealed virtual string get_Name();
    public sealed virtual string get_AuthenticationType();
    public sealed virtual bool get_IsAuthenticated();
    public string get_Item(string strProfileName);
    public bool GetIsAuthenticated(int iTimeWindow, bool bForceLogin, bool bCheckSecure);
    public bool GetIsAuthenticated(int iTimeWindow, int iForceLogin, int iCheckSecure);
    public object GetProfileObject(string strProfileName);
    public int get_Error();
    public bool get_GetFromNetworkServer();
    public string GetDomainFromMemberName(string strMemberName);
    public bool HasProfile(string strProfile);
    public bool HasFlag(int iFlagMask);
    public bool HaveConsent(bool bNeedFullConsent, bool bNeedBirthdate);
    public object GetOption(string strOpt);
    public void SetOption(string strOpt, object vOpt);
    public string LogoutURL();
    public string LogoutURL(string szReturnURL, string szCOBrandArgs, int iLangID, string strDomain, int iUseSecureAuth);
    public bool get_HasSavedPassword();
    public bool get_HasTicket();
    public int get_TicketAge();
    public int get_TimeSinceSignIn();
    public string LogoTag();
    public string LogoTag(string strReturnUrl);
    public string LogoTag2();
    public string LogoTag2(string strReturnUrl);
    public string LogoTag(string strReturnUrl, int iTimeWindow, bool fForceLogin, string strCoBrandedArgs, int iLangID, bool fSecure, string strNameSpace, int iKPP, bool bUseSecureAuth);
    public string LogoTag(string strReturnUrl, int iTimeWindow, int iForceLogin, string strCoBrandedArgs, int iLangID, int iSecure, string strNameSpace, int iKPP, int iUseSecureAuth);
    public string LogoTag2(string strReturnUrl, int iTimeWindow, bool fForceLogin, string strCoBrandedArgs, int iLangID, bool fSecure, string strNameSpace, int iKPP, bool bUseSecureAuth);
    public string LogoTag2(string strReturnUrl, int iTimeWindow, int iForceLogin, string strCoBrandedArgs, int iLangID, int iSecure, string strNameSpace, int iKPP, int iUseSecureAuth);
    public string AuthUrl();
    public string AuthUrl(string strReturnUrl);
    public string AuthUrl2();
    public string AuthUrl2(string strReturnUrl);
    public string AuthUrl(string strReturnUrl, int iTimeWindow, bool fForceLogin, string strCoBrandedArgs, int iLangID, string strNameSpace, int iKPP, bool bUseSecureAuth);
    public string AuthUrl2(string strReturnUrl, int iTimeWindow, bool fForceLogin, string strCoBrandedArgs, int iLangID, string strNameSpace, int iKPP, bool bUseSecureAuth);
    public string AuthUrl(string strReturnUrl, int iTimeWindow, int iForceLogin, string strCoBrandedArgs, int iLangID, string strNameSpace, int iKPP, int iUseSecureAuth);
    public string AuthUrl2(string strReturnUrl, int iTimeWindow, int iForceLogin, string strCoBrandedArgs, int iLangID, string strNameSpace, int iKPP, int iUseSecureAuth);
    public int LoginUser(string szRetURL, int iTimeWindow, bool fForceLogin, string szCOBrandArgs, int iLangID, string strNameSpace, int iKPP, bool fUseSecureAuth, object oExtraParams);
    public int LoginUser(string szRetURL, int iTimeWindow, int fForceLogin, string szCOBrandArgs, int iLangID, string strNameSpace, int iKPP, int iUseSecureAuth, object oExtraParams);
    public int LoginUser();
    public int LoginUser(string strReturnUrl);
    public string GetLoginChallenge();
    public string GetLoginChallenge(string strReturnUrl);
    public string GetLoginChallenge(string szRetURL, int iTimeWindow, int fForceLogin, string szCOBrandArgs, int iLangID, string strNameSpace, int iKPP, int iUseSecureAuth, object oExtraParams);
    public string GetDomainAttribute(string strAttribute, int iLCID, string strDomain);
    public object Ticket(string strAttribute);
    public object GetCurrentConfig(string strAttribute);
    public string get_HexPUID();
    private sealed virtual override void System.IDisposable.Dispose();
    public static void SignOut(string strSignOutDotGifFileName);
    public static string Encrypt(string strData);
    public static string Decrypt(string strData);
    public static string Compress(string strData);
    public static string Decompress(string strData);
    public static int CryptPutHost(string strHost);
    public static int CryptPutSite(string strSite);
    public static bool CryptIsValid();
}
[ObsoleteAttribute("This type is obsolete. The Passport authentication product is no longer supported and has been superseded by Live ID.")]
public class System.Web.Security.PassportPrincipal : GenericPrincipal {
    public PassportPrincipal(PassportIdentity identity, String[] roles);
}
internal static class System.Web.Security.PropertyManager : object {
    public static object GetPropertyValue(DirectoryEntry directoryEntry, string propertyName);
    public static object GetSearchResultPropertyValue(SearchResult res, string propertyName);
}
internal class System.Web.Security.RoleClaimProvider : object {
    public IEnumerable`1<Claim> Claims { get; }
    public RoleClaimProvider(RolePrincipal rolePrincipal, ClaimsIdentity subject);
    [IteratorStateMachineAttribute("System.Web.Security.RoleClaimProvider/<get_Claims>d__4")]
public IEnumerable`1<Claim> get_Claims();
}
public class System.Web.Security.RoleManagerEventArgs : EventArgs {
    public bool RolesPopulated { get; public set; }
    public HttpContext Context { get; }
    public RoleManagerEventArgs(HttpContext context);
    public bool get_RolesPopulated();
    public void set_RolesPopulated(bool value);
    public HttpContext get_Context();
}
public class System.Web.Security.RoleManagerEventHandler : MulticastDelegate {
    public RoleManagerEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RoleManagerEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RoleManagerEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.Security.RoleManagerModule : object {
    public void add_GetRoles(RoleManagerEventHandler value);
    public void remove_GetRoles(RoleManagerEventHandler value);
    public sealed virtual void Dispose();
    public sealed virtual void Init(HttpApplication app);
}
public class System.Web.Security.RolePrincipal : ClaimsPrincipal {
    public int Version { get; }
    public DateTime ExpireDate { get; }
    public DateTime IssueDate { get; }
    public bool Expired { get; }
    public string CookiePath { get; }
    public IIdentity Identity { get; }
    public bool IsRoleListCached { get; }
    public bool CachedListChanged { get; }
    public string ProviderName { get; }
    public RolePrincipal(IIdentity identity, string encryptedTicket);
    public RolePrincipal(IIdentity identity);
    public RolePrincipal(string providerName, IIdentity identity);
    public RolePrincipal(string providerName, IIdentity identity, string encryptedTicket);
    protected RolePrincipal(SerializationInfo info, StreamingContext context);
    public int get_Version();
    public DateTime get_ExpireDate();
    public DateTime get_IssueDate();
    public bool get_Expired();
    public string get_CookiePath();
    public virtual IIdentity get_Identity();
    public bool get_IsRoleListCached();
    public bool get_CachedListChanged();
    public string get_ProviderName();
    public string ToEncryptedTicket();
    public String[] GetRoles();
    public virtual bool IsInRole(string role);
    public void SetDirty();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Security.RoleProviderCollection : ProviderCollection {
    public RoleProvider Item { get; }
    public virtual void Add(ProviderBase provider);
    public RoleProvider get_Item(string name);
    public void CopyTo(RoleProvider[] array, int index);
}
public static class System.Web.Security.Roles : object {
    public static RoleProvider Provider { get; }
    public static RoleProviderCollection Providers { get; }
    public static string CookieName { get; }
    public static bool CacheRolesInCookie { get; }
    public static int CookieTimeout { get; }
    public static string CookiePath { get; }
    public static bool CookieRequireSSL { get; }
    public static bool CookieSlidingExpiration { get; }
    public static CookieProtection CookieProtectionValue { get; }
    public static bool CreatePersistentCookie { get; }
    public static string Domain { get; }
    public static int MaxCachedResults { get; }
    public static bool Enabled { get; public set; }
    public static string ApplicationName { get; public set; }
    private static Roles();
    public static RoleProvider get_Provider();
    public static RoleProviderCollection get_Providers();
    public static string get_CookieName();
    public static bool get_CacheRolesInCookie();
    public static int get_CookieTimeout();
    public static string get_CookiePath();
    public static bool get_CookieRequireSSL();
    public static bool get_CookieSlidingExpiration();
    public static CookieProtection get_CookieProtectionValue();
    public static bool get_CreatePersistentCookie();
    public static string get_Domain();
    public static int get_MaxCachedResults();
    public static bool get_Enabled();
    public static void set_Enabled(bool value);
    public static string get_ApplicationName();
    public static void set_ApplicationName(string value);
    public static bool IsUserInRole(string username, string roleName);
    public static bool IsUserInRole(string roleName);
    public static String[] GetRolesForUser(string username);
    public static String[] GetRolesForUser();
    public static String[] GetUsersInRole(string roleName);
    public static void CreateRole(string roleName);
    public static bool DeleteRole(string roleName, bool throwOnPopulatedRole);
    public static bool DeleteRole(string roleName);
    public static bool RoleExists(string roleName);
    public static void AddUserToRole(string username, string roleName);
    public static void AddUserToRoles(string username, String[] roleNames);
    public static void AddUsersToRole(String[] usernames, string roleName);
    public static void AddUsersToRoles(String[] usernames, String[] roleNames);
    public static void RemoveUserFromRole(string username, string roleName);
    public static void RemoveUserFromRoles(string username, String[] roleNames);
    public static void RemoveUsersFromRole(String[] usernames, string roleName);
    public static void RemoveUsersFromRoles(String[] usernames, String[] roleNames);
    public static String[] GetAllRoles();
    public static void DeleteCookie();
    public static String[] FindUsersInRole(string roleName, string usernameToMatch);
}
public class System.Web.Security.SqlMembershipProvider : MembershipProvider {
    internal static int SALT_SIZE;
    public bool EnablePasswordRetrieval { get; }
    public bool EnablePasswordReset { get; }
    public bool RequiresQuestionAndAnswer { get; }
    public bool RequiresUniqueEmail { get; }
    public MembershipPasswordFormat PasswordFormat { get; }
    public int MaxInvalidPasswordAttempts { get; }
    public int PasswordAttemptWindow { get; }
    public int MinRequiredPasswordLength { get; }
    public int MinRequiredNonAlphanumericCharacters { get; }
    public string PasswordStrengthRegularExpression { get; }
    public string ApplicationName { get; public set; }
    public virtual bool get_EnablePasswordRetrieval();
    public virtual bool get_EnablePasswordReset();
    public virtual bool get_RequiresQuestionAndAnswer();
    public virtual bool get_RequiresUniqueEmail();
    public virtual MembershipPasswordFormat get_PasswordFormat();
    public virtual int get_MaxInvalidPasswordAttempts();
    public virtual int get_PasswordAttemptWindow();
    public virtual int get_MinRequiredPasswordLength();
    public virtual int get_MinRequiredNonAlphanumericCharacters();
    public virtual string get_PasswordStrengthRegularExpression();
    public virtual string get_ApplicationName();
    public virtual void set_ApplicationName(string value);
    public virtual void Initialize(string name, NameValueCollection config);
    public virtual MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, MembershipCreateStatus& status);
    public virtual bool ChangePasswordQuestionAndAnswer(string username, string password, string newPasswordQuestion, string newPasswordAnswer);
    public virtual string GetPassword(string username, string passwordAnswer);
    public virtual bool ChangePassword(string username, string oldPassword, string newPassword);
    public virtual string ResetPassword(string username, string passwordAnswer);
    public virtual void UpdateUser(MembershipUser user);
    public virtual bool ValidateUser(string username, string password);
    public virtual bool UnlockUser(string username);
    public virtual MembershipUser GetUser(object providerUserKey, bool userIsOnline);
    public virtual MembershipUser GetUser(string username, bool userIsOnline);
    public virtual string GetUserNameByEmail(string email);
    public virtual bool DeleteUser(string username, bool deleteAllRelatedData);
    public virtual MembershipUserCollection GetAllUsers(int pageIndex, int pageSize, Int32& totalRecords);
    public virtual int GetNumberOfUsersOnline();
    public virtual MembershipUserCollection FindUsersByName(string usernameToMatch, int pageIndex, int pageSize, Int32& totalRecords);
    public virtual MembershipUserCollection FindUsersByEmail(string emailToMatch, int pageIndex, int pageSize, Int32& totalRecords);
    public virtual string GeneratePassword();
    internal static string GetExceptionText(int status);
    internal static bool IsStatusDueToBadPassword(int status);
}
public class System.Web.Security.SqlRoleProvider : RoleProvider {
    public string ApplicationName { get; public set; }
    public virtual void Initialize(string name, NameValueCollection config);
    public virtual bool IsUserInRole(string username, string roleName);
    public virtual String[] GetRolesForUser(string username);
    public virtual void CreateRole(string roleName);
    public virtual bool DeleteRole(string roleName, bool throwOnPopulatedRole);
    public virtual bool RoleExists(string roleName);
    public virtual void AddUsersToRoles(String[] usernames, String[] roleNames);
    public virtual void RemoveUsersFromRoles(String[] usernames, String[] roleNames);
    public virtual String[] GetUsersInRole(string roleName);
    public virtual String[] GetAllRoles();
    public virtual String[] FindUsersInRole(string roleName, string usernameToMatch);
    public virtual string get_ApplicationName();
    public virtual void set_ApplicationName(string value);
}
public class System.Web.Security.UrlAuthorizationModule : object {
    public sealed virtual void Init(HttpApplication app);
    public sealed virtual void Dispose();
    public static bool CheckUrlAccessForPrincipal(string virtualPath, IPrincipal user, string verb);
    internal static void ReportUrlAuthorizationFailure(HttpContext context, object webEventSource);
    internal static bool RequestRequiresAuthorization(HttpContext context);
    internal static bool IsUserAllowedToPath(HttpContext context, VirtualPath virtualPath);
}
public class System.Web.Security.WindowsAuthenticationEventArgs : EventArgs {
    public IPrincipal User { get; public set; }
    public HttpContext Context { get; }
    public WindowsIdentity Identity { get; }
    public WindowsAuthenticationEventArgs(WindowsIdentity identity, HttpContext context);
    public IPrincipal get_User();
    public void set_User(IPrincipal value);
    public HttpContext get_Context();
    public WindowsIdentity get_Identity();
}
public class System.Web.Security.WindowsAuthenticationEventHandler : MulticastDelegate {
    public WindowsAuthenticationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WindowsAuthenticationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WindowsAuthenticationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.Security.WindowsAuthenticationModule : object {
    internal static WindowsPrincipal AnonymousPrincipal;
    internal static bool IsEnabled { get; }
    private static WindowsAuthenticationModule();
    public void add_Authenticate(WindowsAuthenticationEventHandler value);
    public void remove_Authenticate(WindowsAuthenticationEventHandler value);
    public sealed virtual void Dispose();
    public sealed virtual void Init(HttpApplication app);
    internal static bool get_IsEnabled();
}
public class System.Web.Security.WindowsTokenRoleProvider : RoleProvider {
    public string ApplicationName { get; public set; }
    private static WindowsTokenRoleProvider();
    public virtual string get_ApplicationName();
    public virtual void set_ApplicationName(string value);
    public virtual void Initialize(string name, NameValueCollection config);
    public bool IsUserInRole(string username, WindowsBuiltInRole role);
    public virtual bool IsUserInRole(string username, string roleName);
    public virtual String[] GetRolesForUser(string username);
    public virtual void CreateRole(string roleName);
    public virtual bool DeleteRole(string roleName, bool throwOnPopulatedRole);
    public virtual bool RoleExists(string roleName);
    public virtual void AddUsersToRoles(String[] usernames, String[] roleNames);
    public virtual void RemoveUsersFromRoles(String[] usernames, String[] roleNames);
    public virtual String[] GetUsersInRole(string roleName);
    public virtual String[] GetAllRoles();
    public virtual String[] FindUsersInRole(string roleName, string usernameToMatch);
}
internal class System.Web.SecurityErrorFormatter : UnhandledErrorFormatter {
    protected string ErrorTitle { get; }
    protected string Description { get; }
    internal SecurityErrorFormatter(Exception e);
    protected virtual string get_ErrorTitle();
    protected virtual string get_Description();
}
internal static class System.Web.SecurityUtils : object {
    private static SecurityUtils();
    internal static object SecureCreateInstance(Type type);
    internal static object SecureCreateInstance(Type type, Object[] args, bool allowNonPublic);
    internal static object SecureCreateInstance(Type type, Object[] args);
    internal static object SecureConstructorInvoke(Type type, Type[] argTypes, Object[] args, bool allowNonPublic);
    internal static object SecureConstructorInvoke(Type type, Type[] argTypes, Object[] args, bool allowNonPublic, BindingFlags extraFlags);
    internal static object FieldInfoGetValue(FieldInfo field, object target);
    internal static object MethodInfoInvoke(MethodInfo method, object target, Object[] args);
    internal static object ConstructorInfoInvoke(ConstructorInfo ctor, Object[] args);
    internal static object ArrayCreateInstance(Type type, int length);
}
internal class System.Web.SessionState.CachedContent : object {
    internal Byte[] _content;
    internal IntPtr _stateItem;
    internal bool _locked;
    internal DateTime _utcLockDate;
    internal int _lockCookie;
    internal int _extraFlags;
    internal ReadWriteSpinLock _spinLock;
    internal CachedContent(Byte[] content, IntPtr stateItem, bool locked, DateTime utcLockDate, int lockCookie, int extraFlags);
}
[DefaultMemberAttribute("Item")]
public class System.Web.SessionState.HttpSessionState : object {
    internal IHttpSessionState Container { get; }
    public string SessionID { get; }
    public int Timeout { get; public set; }
    public bool IsNewSession { get; }
    public SessionStateMode Mode { get; }
    public bool IsCookieless { get; }
    public HttpCookieMode CookieMode { get; }
    public int LCID { get; public set; }
    public int CodePage { get; public set; }
    public HttpSessionState Contents { get; }
    public HttpStaticObjectsCollection StaticObjects { get; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    public int Count { get; }
    public KeysCollection Keys { get; }
    public object SyncRoot { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    internal HttpSessionState(IHttpSessionState container);
    internal IHttpSessionState get_Container();
    public string get_SessionID();
    public int get_Timeout();
    public void set_Timeout(int value);
    public bool get_IsNewSession();
    public SessionStateMode get_Mode();
    public bool get_IsCookieless();
    public HttpCookieMode get_CookieMode();
    public void Abandon();
    public int get_LCID();
    public void set_LCID(int value);
    public int get_CodePage();
    public void set_CodePage(int value);
    public HttpSessionState get_Contents();
    public HttpStaticObjectsCollection get_StaticObjects();
    public object get_Item(string name);
    public void set_Item(string name, object value);
    public object get_Item(int index);
    public void set_Item(int index, object value);
    public void Add(string name, object value);
    public void Remove(string name);
    public void RemoveAt(int index);
    public void Clear();
    public void RemoveAll();
    public sealed virtual int get_Count();
    public KeysCollection get_Keys();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual object get_SyncRoot();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
}
[DefaultMemberAttribute("Item")]
public class System.Web.SessionState.HttpSessionStateContainer : object {
    public string SessionID { get; }
    public int Timeout { get; public set; }
    public bool IsNewSession { get; }
    public SessionStateMode Mode { get; }
    public bool IsCookieless { get; }
    public HttpCookieMode CookieMode { get; }
    public int LCID { get; public set; }
    public int CodePage { get; public set; }
    public bool IsAbandoned { get; }
    public HttpStaticObjectsCollection StaticObjects { get; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    public int Count { get; }
    public KeysCollection Keys { get; }
    public object SyncRoot { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public HttpSessionStateContainer(string id, ISessionStateItemCollection sessionItems, HttpStaticObjectsCollection staticObjects, int timeout, bool newSession, HttpCookieMode cookieMode, SessionStateMode mode, bool isReadonly);
    internal HttpSessionStateContainer(SessionStateModule stateModule, string id, ISessionStateItemCollection sessionItems, HttpStaticObjectsCollection staticObjects, int timeout, bool newSession, HttpCookieMode cookieMode, SessionStateMode mode, bool isReadonly);
    public sealed virtual string get_SessionID();
    public sealed virtual int get_Timeout();
    public sealed virtual void set_Timeout(int value);
    public sealed virtual bool get_IsNewSession();
    public sealed virtual SessionStateMode get_Mode();
    public sealed virtual bool get_IsCookieless();
    public sealed virtual HttpCookieMode get_CookieMode();
    public sealed virtual void Abandon();
    public sealed virtual int get_LCID();
    public sealed virtual void set_LCID(int value);
    public sealed virtual int get_CodePage();
    public sealed virtual void set_CodePage(int value);
    public bool get_IsAbandoned();
    public sealed virtual HttpStaticObjectsCollection get_StaticObjects();
    public sealed virtual object get_Item(string name);
    public sealed virtual void set_Item(string name, object value);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void Add(string name, object value);
    public sealed virtual void Remove(string name);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Clear();
    public sealed virtual void RemoveAll();
    public sealed virtual int get_Count();
    public sealed virtual KeysCollection get_Keys();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
}
[DefaultMemberAttribute("Item")]
public interface System.Web.SessionState.IHttpSessionState {
    public string SessionID { get; }
    public int Timeout { get; public set; }
    public bool IsNewSession { get; }
    public SessionStateMode Mode { get; }
    public bool IsCookieless { get; }
    public HttpCookieMode CookieMode { get; }
    public int LCID { get; public set; }
    public int CodePage { get; public set; }
    public HttpStaticObjectsCollection StaticObjects { get; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    public int Count { get; }
    public KeysCollection Keys { get; }
    public object SyncRoot { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public abstract virtual string get_SessionID();
    public abstract virtual int get_Timeout();
    public abstract virtual void set_Timeout(int value);
    public abstract virtual bool get_IsNewSession();
    public abstract virtual SessionStateMode get_Mode();
    public abstract virtual bool get_IsCookieless();
    public abstract virtual HttpCookieMode get_CookieMode();
    public abstract virtual void Abandon();
    public abstract virtual int get_LCID();
    public abstract virtual void set_LCID(int value);
    public abstract virtual int get_CodePage();
    public abstract virtual void set_CodePage(int value);
    public abstract virtual HttpStaticObjectsCollection get_StaticObjects();
    public abstract virtual object get_Item(string name);
    public abstract virtual void set_Item(string name, object value);
    public abstract virtual object get_Item(int index);
    public abstract virtual void set_Item(int index, object value);
    public abstract virtual void Add(string name, object value);
    public abstract virtual void Remove(string name);
    public abstract virtual void RemoveAt(int index);
    public abstract virtual void Clear();
    public abstract virtual void RemoveAll();
    public abstract virtual int get_Count();
    public abstract virtual KeysCollection get_Keys();
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual void CopyTo(Array array, int index);
    public abstract virtual object get_SyncRoot();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual bool get_IsSynchronized();
}
internal class System.Web.SessionState.InProcSessionState : object {
    internal ISessionStateItemCollection _sessionItems;
    internal HttpStaticObjectsCollection _staticObjects;
    internal int _timeout;
    internal bool _locked;
    internal DateTime _utcLockDate;
    internal int _lockCookie;
    internal ReadWriteSpinLock _spinLock;
    internal int _flags;
    internal InProcSessionState(ISessionStateItemCollection sessionItems, HttpStaticObjectsCollection staticObjects, int timeout, bool locked, DateTime utcLockDate, int lockCookie, int flags);
    internal void Copy(ISessionStateItemCollection sessionItems, HttpStaticObjectsCollection staticObjects, int timeout, bool locked, DateTime utcLockDate, int lockCookie, int flags);
}
internal class System.Web.SessionState.InProcSessionStateStore : SessionStateStoreProviderBase {
    internal static int CACHEKEYPREFIXLENGTH;
    internal static int NewLockCookie;
    private static InProcSessionStateStore();
    public void OnCacheItemRemoved(string key, object value, CacheItemRemovedReason reason);
    public virtual void Initialize(string name, NameValueCollection config);
    public virtual bool SetItemExpireCallback(SessionStateItemExpireCallback expireCallback);
    public virtual void Dispose();
    public virtual void InitializeRequest(HttpContext context);
    public virtual SessionStateStoreData GetItem(HttpContext context, string id, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actionFlags);
    public virtual SessionStateStoreData GetItemExclusive(HttpContext context, string id, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actionFlags);
    public virtual void ReleaseItemExclusive(HttpContext context, string id, object lockId);
    public virtual void SetAndReleaseItemExclusive(HttpContext context, string id, SessionStateStoreData item, object lockId, bool newItem);
    public virtual void CreateUninitializedItem(HttpContext context, string id, int timeout);
    public virtual void RemoveItem(HttpContext context, string id, object lockId, SessionStateStoreData item);
    public virtual void ResetItemTimeout(HttpContext context, string id);
    public virtual SessionStateStoreData CreateNewStoreData(HttpContext context, int timeout);
    public virtual void EndRequest(HttpContext context);
    [ConditionalAttribute("DBG")]
internal static void TraceSessionStats();
}
public interface System.Web.SessionState.IPartialSessionState {
    public IList`1<string> PartialSessionStateKeys { get; }
    public abstract virtual IList`1<string> get_PartialSessionStateKeys();
}
public interface System.Web.SessionState.IReadOnlySessionState {
}
public interface System.Web.SessionState.IRequiresSessionState {
}
public interface System.Web.SessionState.ISessionIDManager {
    public abstract virtual bool InitializeRequest(HttpContext context, bool suppressAutoDetectRedirect, Boolean& supportSessionIDReissue);
    public abstract virtual string GetSessionID(HttpContext context);
    public abstract virtual string CreateSessionID(HttpContext context);
    public abstract virtual void SaveSessionID(HttpContext context, string id, Boolean& redirected, Boolean& cookieAdded);
    public abstract virtual void RemoveSessionID(HttpContext context);
    public abstract virtual bool Validate(string id);
    public abstract virtual void Initialize();
}
[DefaultMemberAttribute("Item")]
public interface System.Web.SessionState.ISessionStateItemCollection {
    public object Item { get; public set; }
    public object Item { get; public set; }
    public KeysCollection Keys { get; }
    public bool Dirty { get; public set; }
    public abstract virtual object get_Item(string name);
    public abstract virtual void set_Item(string name, object value);
    public abstract virtual object get_Item(int index);
    public abstract virtual void set_Item(int index, object value);
    public abstract virtual void Remove(string name);
    public abstract virtual void RemoveAt(int index);
    public abstract virtual void Clear();
    public abstract virtual KeysCollection get_Keys();
    public abstract virtual bool get_Dirty();
    public abstract virtual void set_Dirty(bool value);
}
public interface System.Web.SessionState.ISessionStateModule {
    public abstract virtual void ReleaseSessionState(HttpContext context);
    public abstract virtual Task ReleaseSessionStateAsync(HttpContext context);
}
[GuidAttribute("7297744b-e188-40bf-b7e9-56698d25cf44")]
[InterfaceTypeAttribute("1")]
public interface System.Web.SessionState.IStateRuntime {
    public abstract virtual void StopProcessing();
    public abstract virtual void ProcessRequest(IntPtr tracker, int verb, string uri, int exclusive, int timeout, int lockCookieExists, int lockCookie, int contentLength, IntPtr content);
    public abstract virtual void ProcessRequest(IntPtr tracker, int verb, string uri, int exclusive, int extraFlags, int timeout, int lockCookieExists, int lockCookie, int contentLength, IntPtr content);
}
internal class System.Web.SessionState.OutOfProcSessionStateStore : SessionStateStoreProviderBase {
    internal static IntPtr INVALID_SOCKET;
    internal static int WHIDBEY_MAJOR_VERSION;
    internal static int STATE_NETWORK_TIMEOUT_DEFAULT;
    private static OutOfProcSessionStateStore();
    internal virtual void Initialize(string name, NameValueCollection config, IPartitionResolver partitionResolver);
    public virtual void Initialize(string name, NameValueCollection config);
    internal IPartitionInfo CreatePartitionInfo(string stateConnectionString);
    internal static void ParseStateConnectionString(string stateConnectionString, String& server, Boolean& serverIsIPv6NumericAddress, Int32& port);
    internal static HttpException CreateConnectionException(string server, int port, int hr);
    public virtual bool SetItemExpireCallback(SessionStateItemExpireCallback expireCallback);
    public virtual void Dispose();
    public virtual void InitializeRequest(HttpContext context);
    internal SessionStateStoreData DoGet(HttpContext context, string id, StateProtocolExclusive exclusiveAccess, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actionFlags);
    public virtual SessionStateStoreData GetItem(HttpContext context, string id, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actionFlags);
    public virtual SessionStateStoreData GetItemExclusive(HttpContext context, string id, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actionFlags);
    public virtual void ReleaseItemExclusive(HttpContext context, string id, object lockId);
    public virtual void SetAndReleaseItemExclusive(HttpContext context, string id, SessionStateStoreData item, object lockId, bool newItem);
    public virtual void RemoveItem(HttpContext context, string id, object lockId, SessionStateStoreData item);
    public virtual void ResetItemTimeout(HttpContext context, string id);
    public virtual SessionStateStoreData CreateNewStoreData(HttpContext context, int timeout);
    public virtual void CreateUninitializedItem(HttpContext context, string id, int timeout);
    public virtual void EndRequest(HttpContext context);
}
internal static class System.Web.SessionState.SessionId : object {
    internal static int NUM_CHARS_IN_ENCODING;
    internal static int ENCODING_BITS_PER_CHAR;
    internal static int ID_LENGTH_BITS;
    internal static int ID_LENGTH_BYTES;
    internal static int ID_LENGTH_CHARS;
    private static SessionId();
    internal static bool IsLegit(string s);
    internal static string Create(RandomNumberGenerator& randgen);
}
public class System.Web.SessionState.SessionIDManager : object {
    internal static string COOKIELESS_SESSION_KEY;
    internal static string COOKIELESS_BOOL_SESSION_KEY;
    internal static string ASP_SESSIONID_MANAGER_INITIALIZEREQUEST_CALLED_KEY;
    internal static HttpCookieMode COOKIEMODE_DEFAULT;
    internal static string SESSION_COOKIE_DEFAULT;
    internal static int SESSION_ID_LENGTH_LIMIT;
    public static int SessionIDMaxLength { get; }
    public static int get_SessionIDMaxLength();
    public sealed virtual void Initialize();
    internal void GetCookielessSessionID(HttpContext context, bool allowRedirect, Boolean& cookieless);
    internal static bool CheckIdLength(string id, bool throwOnFail);
    public virtual bool Validate(string id);
    public virtual string Encode(string id);
    public virtual string Decode(string id);
    internal bool UseCookieless(HttpContext context);
    public sealed virtual bool InitializeRequest(HttpContext context, bool suppressAutoDetectRedirect, Boolean& supportSessionIDReissue);
    public sealed virtual string GetSessionID(HttpContext context);
    public virtual string CreateSessionID(HttpContext context);
    public sealed virtual void SaveSessionID(HttpContext context, string id, Boolean& redirected, Boolean& cookieAdded);
    public sealed virtual void RemoveSessionID(HttpContext context);
}
internal class System.Web.SessionState.SessionOnEndTarget : object {
    internal int _sessionEndEventHandlerCount;
    internal int SessionEndEventHandlerCount { get; internal set; }
    internal int get_SessionEndEventHandlerCount();
    internal void set_SessionEndEventHandlerCount(int value);
    internal void RaiseOnEnd(HttpSessionState sessionState);
    internal void RaiseSessionOnEnd(string id, SessionStateStoreData item);
}
internal class System.Web.SessionState.SessionOnEndTargetWorkItem : object {
    internal SessionOnEndTargetWorkItem(SessionOnEndTarget target, HttpSessionState sessionState);
    internal void RaiseOnEndCallback();
}
[FlagsAttribute]
public enum System.Web.SessionState.SessionStateActions : Enum {
    public int value__;
    public static SessionStateActions None;
    public static SessionStateActions InitializeItem;
}
public enum System.Web.SessionState.SessionStateBehavior : Enum {
    public int value__;
    public static SessionStateBehavior Default;
    public static SessionStateBehavior Required;
    public static SessionStateBehavior ReadOnly;
    public static SessionStateBehavior Disabled;
}
[DefaultMemberAttribute("Item")]
public class System.Web.SessionState.SessionStateItemCollection : NameObjectCollectionBase {
    public bool Dirty { get; public set; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    public KeysCollection Keys { get; }
    private static SessionStateItemCollection();
    internal static bool IsImmutable(object o);
    internal void DeserializeAllItems();
    public sealed virtual bool get_Dirty();
    public sealed virtual void set_Dirty(bool value);
    public sealed virtual object get_Item(string name);
    public sealed virtual void set_Item(string name, object value);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void Remove(string name);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Clear();
    public virtual IEnumerator GetEnumerator();
    public virtual KeysCollection get_Keys();
    public void Serialize(BinaryWriter writer);
    public static SessionStateItemCollection Deserialize(BinaryReader reader);
}
public class System.Web.SessionState.SessionStateItemExpireCallback : MulticastDelegate {
    public SessionStateItemExpireCallback(object object, IntPtr method);
    public virtual void Invoke(string id, SessionStateStoreData item);
    public virtual IAsyncResult BeginInvoke(string id, SessionStateStoreData item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
internal enum System.Web.SessionState.SessionStateItemFlags : Enum {
    public int value__;
    public static SessionStateItemFlags None;
    public static SessionStateItemFlags Uninitialized;
    public static SessionStateItemFlags IgnoreCacheItemRemoved;
}
public enum System.Web.SessionState.SessionStateMode : Enum {
    public int value__;
    public static SessionStateMode Off;
    public static SessionStateMode InProc;
    public static SessionStateMode StateServer;
    public static SessionStateMode SQLServer;
    public static SessionStateMode Custom;
}
public class System.Web.SessionState.SessionStateModule : object {
    internal static string SQL_CONNECTION_STRING_DEFAULT;
    internal static string STATE_CONNECTION_STRING_DEFAULT;
    internal static int TIMEOUT_DEFAULT;
    internal static SessionStateMode MODE_DEFAULT;
    internal static int MAX_CACHE_BASED_TIMEOUT_MINUTES;
    internal static HttpCookieMode s_configCookieless;
    internal static SessionStateMode s_configMode;
    internal int _rqChangeImpersonationRefCount;
    internal bool SessionIDManagerUseCookieless { get; }
    private static SessionStateModule();
    public sealed virtual void Init(HttpApplication app);
    public sealed virtual void Dispose();
    public void add_Start(EventHandler value);
    public void remove_Start(EventHandler value);
    public void add_End(EventHandler value);
    public void remove_End(EventHandler value);
    internal bool CreateSessionId();
    internal void EnsureStateStoreItemLocked();
    internal void InitStateStoreItem(bool addToContext);
    internal string DelayedGetSessionId();
    internal static void ReadConnectionString(SessionStateSection config, String& cntString, string propName);
    internal bool get_SessionIDManagerUseCookieless();
    public sealed virtual void ReleaseSessionState(HttpContext context);
    public sealed virtual Task ReleaseSessionStateAsync(HttpContext context);
}
public class System.Web.SessionState.SessionStateStoreData : object {
    public ISessionStateItemCollection Items { get; }
    public HttpStaticObjectsCollection StaticObjects { get; }
    public int Timeout { get; public set; }
    public SessionStateStoreData(ISessionStateItemCollection sessionItems, HttpStaticObjectsCollection staticObjects, int timeout);
    public virtual ISessionStateItemCollection get_Items();
    public virtual HttpStaticObjectsCollection get_StaticObjects();
    public virtual int get_Timeout();
    public virtual void set_Timeout(int value);
}
public abstract class System.Web.SessionState.SessionStateStoreProviderBase : ProviderBase {
    public abstract virtual void Dispose();
    public abstract virtual bool SetItemExpireCallback(SessionStateItemExpireCallback expireCallback);
    public abstract virtual void InitializeRequest(HttpContext context);
    public abstract virtual SessionStateStoreData GetItem(HttpContext context, string id, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actions);
    public abstract virtual SessionStateStoreData GetItemExclusive(HttpContext context, string id, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actions);
    public abstract virtual void ReleaseItemExclusive(HttpContext context, string id, object lockId);
    public abstract virtual void SetAndReleaseItemExclusive(HttpContext context, string id, SessionStateStoreData item, object lockId, bool newItem);
    public abstract virtual void RemoveItem(HttpContext context, string id, object lockId, SessionStateStoreData item);
    public abstract virtual void ResetItemTimeout(HttpContext context, string id);
    public abstract virtual SessionStateStoreData CreateNewStoreData(HttpContext context, int timeout);
    public abstract virtual void CreateUninitializedItem(HttpContext context, string id, int timeout);
    public abstract virtual void EndRequest(HttpContext context);
    internal virtual void Initialize(string name, NameValueCollection config, IPartitionResolver partitionResolver);
}
public static class System.Web.SessionState.SessionStateUtility : object {
    internal static string SESSION_KEY;
    public static ISurrogateSelector SerializationSurrogateSelector { get; public set; }
    [CompilerGeneratedAttribute]
public static ISurrogateSelector get_SerializationSurrogateSelector();
    [CompilerGeneratedAttribute]
public static void set_SerializationSurrogateSelector(ISurrogateSelector value);
    public static void RaiseSessionEnd(IHttpSessionState session, object eventSource, EventArgs eventArgs);
    public static void AddHttpSessionStateToContext(HttpContext context, IHttpSessionState container);
    internal static void AddHttpSessionStateModuleToContext(HttpContext context, SessionStateModule module, bool delayed);
    internal static void RemoveHttpSessionStateFromContext(HttpContext context, bool delayed);
    public static void RemoveHttpSessionStateFromContext(HttpContext context);
    public static IHttpSessionState GetHttpSessionStateFromContext(HttpContext context);
    public static HttpStaticObjectsCollection GetSessionStaticObjects(HttpContext context);
    public static bool IsSessionStateRequired(HttpContext context);
    public static bool IsSessionStateReadOnly(HttpContext context);
    internal static SessionStateStoreData CreateLegitStoreData(HttpContext context, ISessionStateItemCollection sessionItems, HttpStaticObjectsCollection staticObjects, int timeout);
    internal static void Serialize(SessionStateStoreData item, Stream stream);
    internal static SessionStateStoreData Deserialize(HttpContext context, Stream stream);
    internal static void SerializeStoreData(SessionStateStoreData item, int initialStreamSize, Byte[]& buf, Int32& length, bool compressionEnabled);
    internal static SessionStateStoreData DeserializeStoreData(HttpContext context, Stream stream, bool compressionEnabled);
}
internal class System.Web.SessionState.SqlSessionStateStore : SessionStateStoreProviderBase {
    internal static int SQL_COMMAND_TIMEOUT_DEFAULT;
    public bool KnowForSureNotUsingIntegratedSecurity { get; }
    private static SqlSessionStateStore();
    internal virtual void Initialize(string name, NameValueCollection config, IPartitionResolver partitionResolver);
    public virtual void Initialize(string name, NameValueCollection config);
    internal IPartitionInfo CreatePartitionInfo(string sqlConnectionString);
    public virtual bool SetItemExpireCallback(SessionStateItemExpireCallback expireCallback);
    public virtual void Dispose();
    public virtual void InitializeRequest(HttpContext context);
    public virtual void EndRequest(HttpContext context);
    public bool get_KnowForSureNotUsingIntegratedSecurity();
    internal static void ThrowSqlConnectionException(SqlConnection conn, Exception e);
    public virtual SessionStateStoreData GetItem(HttpContext context, string id, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actionFlags);
    public virtual SessionStateStoreData GetItemExclusive(HttpContext context, string id, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actionFlags);
    public virtual void ReleaseItemExclusive(HttpContext context, string id, object lockId);
    public virtual void SetAndReleaseItemExclusive(HttpContext context, string id, SessionStateStoreData item, object lockId, bool newItem);
    public virtual void RemoveItem(HttpContext context, string id, object lockId, SessionStateStoreData item);
    public virtual void ResetItemTimeout(HttpContext context, string id);
    public virtual SessionStateStoreData CreateNewStoreData(HttpContext context, int timeout);
    public virtual void CreateUninitializedItem(HttpContext context, string id, int timeout);
}
internal class System.Web.SessionState.StateApplication : object {
    public bool IsReusable { get; }
    public sealed virtual void ProcessRequest(HttpContext context);
    public sealed virtual bool get_IsReusable();
    internal void DoGet(HttpContext context);
    internal void DoPut(HttpContext context);
    internal void DoDelete(HttpContext context);
    internal void DoHead(HttpContext context);
    internal void DoUnknown(HttpContext context);
}
internal static class System.Web.SessionState.StateHeaders : object {
    internal static string EXCLUSIVE_NAME;
    internal static string EXCLUSIVE_VALUE_ACQUIRE;
    internal static string EXCLUSIVE_VALUE_RELEASE;
    internal static string TIMEOUT_NAME;
    internal static string TIMEOUT_NAME_RAW;
    internal static string LOCKCOOKIE_NAME;
    internal static string LOCKCOOKIE_NAME_RAW;
    internal static string LOCKDATE_NAME;
    internal static string LOCKDATE_NAME_RAW;
    internal static string LOCKAGE_NAME;
    internal static string LOCKAGE_NAME_RAW;
    internal static string EXTRAFLAGS_NAME;
    internal static string EXTRAFLAGS_NAME_RAW;
    internal static string ACTIONFLAGS_NAME;
    internal static string ACTIONFLAGS_NAME_RAW;
}
internal class System.Web.SessionState.StateHttpWorkerRequest : HttpWorkerRequest {
    internal StateHttpWorkerRequest(IntPtr tracker, StateProtocolVerb methodIndex, string uri, StateProtocolExclusive exclusive, int extraFlags, int timeout, int lockCookieExists, int lockCookie, int contentLength, IntPtr content);
    public virtual string GetUriPath();
    public virtual string GetFilePath();
    public virtual string GetQueryString();
    public virtual string GetRawUrl();
    public virtual string GetHttpVerbName();
    public virtual string GetHttpVersion();
    public virtual string GetRemoteAddress();
    public virtual int GetRemotePort();
    public virtual string GetLocalAddress();
    public virtual int GetLocalPort();
    public virtual Byte[] GetPreloadedEntityBody();
    public virtual bool IsEntireEntityBodyIsPreloaded();
    public virtual string MapPath(string virtualPath);
    public virtual int ReadEntityBody(Byte[] buffer, int size);
    public virtual long GetBytesRead();
    public virtual string GetKnownRequestHeader(int index);
    public virtual string GetUnknownRequestHeader(string name);
    public virtual String[][] GetUnknownRequestHeaders();
    public virtual void SendStatus(int statusCode, string statusDescription);
    public virtual void SendKnownResponseHeader(int index, string value);
    public virtual void SendUnknownResponseHeader(string name, string value);
    public virtual void SendCalculatedContentLength(int contentLength);
    public virtual bool HeadersSent();
    public virtual bool IsClientConnected();
    public virtual void CloseConnection();
    public virtual void SendResponseFromMemory(Byte[] data, int length);
    public virtual void SendResponseFromFile(string filename, long offset, long length);
    public virtual void SendResponseFromFile(IntPtr handle, long offset, long length);
    public virtual void FlushResponse(bool finalFlush);
    public virtual void EndOfRequest();
}
public class System.Web.SessionState.StateRuntime : object {
    private static StateRuntime();
    public sealed virtual void StopProcessing();
    public sealed virtual void ProcessRequest(IntPtr tracker, int verb, string uri, int exclusive, int timeout, int lockCookieExists, int lockCookie, int contentLength, IntPtr content);
    public sealed virtual void ProcessRequest(IntPtr tracker, int verb, string uri, int exclusive, int extraFlags, int timeout, int lockCookieExists, int lockCookie, int contentLength, IntPtr content);
}
internal class System.Web.SimpleBufferAllocator`1 : object {
    public int BufferSize { get; }
    public SimpleBufferAllocator`1(int bufferSize);
    public sealed virtual T[] GetBuffer();
    public sealed virtual T[] GetBuffer(int minSize);
    private sealed virtual override object System.Web.IBufferAllocator.GetBuffer();
    public sealed virtual void ReuseBuffer(T[] buffer);
    private sealed virtual override void System.Web.IBufferAllocator.ReuseBuffer(object buffer);
    public sealed virtual void ReleaseAllBuffers();
    public sealed virtual int get_BufferSize();
}
public static class System.Web.SiteMap : object {
    internal static string SectionName;
    public static SiteMapNode CurrentNode { get; }
    public static bool Enabled { get; }
    public static SiteMapProvider Provider { get; }
    public static SiteMapProviderCollection Providers { get; }
    public static SiteMapNode RootNode { get; }
    private static SiteMap();
    public static SiteMapNode get_CurrentNode();
    public static bool get_Enabled();
    public static SiteMapProvider get_Provider();
    public static SiteMapProviderCollection get_Providers();
    public static SiteMapNode get_RootNode();
    public static void add_SiteMapResolve(SiteMapResolveEventHandler value);
    public static void remove_SiteMapResolve(SiteMapResolveEventHandler value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.SiteMapNode : object {
    protected NameValueCollection Attributes { get; protected set; }
    public string Item { get; public set; }
    public SiteMapNodeCollection ChildNodes { get; public set; }
    [LocalizableAttribute("True")]
public string Description { get; public set; }
    public string Key { get; }
    public bool HasChildNodes { get; }
    public SiteMapNode NextSibling { get; }
    public SiteMapNode ParentNode { get; public set; }
    public SiteMapNode PreviousSibling { get; }
    public SiteMapProvider Provider { get; }
    public bool ReadOnly { get; public set; }
    public string ResourceKey { get; public set; }
    public IList Roles { get; public set; }
    public SiteMapNode RootNode { get; }
    [LocalizableAttribute("True")]
public string Title { get; public set; }
    public string Url { get; public set; }
    internal VirtualPath VirtualPath { get; }
    private bool System.Web.UI.IHierarchyData.HasChildren { get; }
    private object System.Web.UI.IHierarchyData.Item { get; }
    private string System.Web.UI.IHierarchyData.Path { get; }
    private string System.Web.UI.IHierarchyData.Type { get; }
    private string System.Web.UI.INavigateUIData.Description { get; }
    private string System.Web.UI.INavigateUIData.Name { get; }
    private string System.Web.UI.INavigateUIData.NavigateUrl { get; }
    private string System.Web.UI.INavigateUIData.Value { get; }
    public SiteMapNode(SiteMapProvider provider, string key);
    public SiteMapNode(SiteMapProvider provider, string key, string url);
    public SiteMapNode(SiteMapProvider provider, string key, string url, string title);
    public SiteMapNode(SiteMapProvider provider, string key, string url, string title, string description);
    public SiteMapNode(SiteMapProvider provider, string key, string url, string title, string description, IList roles, NameValueCollection attributes, NameValueCollection explicitResourceKeys, string implicitResourceKey);
    private static SiteMapNode();
    protected NameValueCollection get_Attributes();
    protected void set_Attributes(NameValueCollection value);
    public virtual string get_Item(string key);
    public virtual void set_Item(string key, string value);
    public virtual SiteMapNodeCollection get_ChildNodes();
    public virtual void set_ChildNodes(SiteMapNodeCollection value);
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public string get_Key();
    public virtual bool get_HasChildNodes();
    public virtual SiteMapNode get_NextSibling();
    public virtual SiteMapNode get_ParentNode();
    public virtual void set_ParentNode(SiteMapNode value);
    public virtual SiteMapNode get_PreviousSibling();
    public SiteMapProvider get_Provider();
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public string get_ResourceKey();
    public void set_ResourceKey(string value);
    public IList get_Roles();
    public void set_Roles(IList value);
    public virtual SiteMapNode get_RootNode();
    public virtual string get_Title();
    public virtual void set_Title(string value);
    public virtual string get_Url();
    public virtual void set_Url(string value);
    internal VirtualPath get_VirtualPath();
    public virtual SiteMapNode Clone();
    public virtual SiteMapNode Clone(bool cloneParentNodes);
    public virtual bool Equals(object obj);
    public SiteMapNodeCollection GetAllNodes();
    public SiteMapDataSourceView GetDataSourceView(SiteMapDataSource owner, string viewName);
    public SiteMapHierarchicalDataSourceView GetHierarchicalDataSourceView();
    protected string GetExplicitResourceString(string attributeName, string defaultValue, bool throwIfNotFound);
    public virtual int GetHashCode();
    protected string GetImplicitResourceString(string attributeName);
    public virtual bool IsAccessibleToUser(HttpContext context);
    public virtual bool IsDescendantOf(SiteMapNode node);
    public virtual string ToString();
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override bool System.Web.UI.IHierarchyData.get_HasChildren();
    private sealed virtual override object System.Web.UI.IHierarchyData.get_Item();
    private sealed virtual override string System.Web.UI.IHierarchyData.get_Path();
    private sealed virtual override string System.Web.UI.IHierarchyData.get_Type();
    private sealed virtual override IHierarchicalEnumerable System.Web.UI.IHierarchyData.GetChildren();
    private sealed virtual override IHierarchyData System.Web.UI.IHierarchyData.GetParent();
    private sealed virtual override string System.Web.UI.INavigateUIData.get_Description();
    private sealed virtual override string System.Web.UI.INavigateUIData.get_Name();
    private sealed virtual override string System.Web.UI.INavigateUIData.get_NavigateUrl();
    private sealed virtual override string System.Web.UI.INavigateUIData.get_Value();
}
[DefaultMemberAttribute("Item")]
public class System.Web.SiteMapNodeCollection : object {
    internal static SiteMapNodeCollection Empty;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public SiteMapNode Item { get; public set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public SiteMapNodeCollection(int capacity);
    public SiteMapNodeCollection(SiteMapNode value);
    public SiteMapNodeCollection(SiteMapNode[] value);
    public SiteMapNodeCollection(SiteMapNodeCollection value);
    private static SiteMapNodeCollection();
    public virtual int get_Count();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual SiteMapNode get_Item(int index);
    public virtual void set_Item(int index, SiteMapNode value);
    public virtual int Add(SiteMapNode value);
    public virtual void AddRange(SiteMapNode[] value);
    public virtual void AddRange(SiteMapNodeCollection value);
    public virtual void Clear();
    public virtual bool Contains(SiteMapNode value);
    public virtual void CopyTo(SiteMapNode[] array, int index);
    internal virtual void CopyToInternal(Array array, int index);
    public SiteMapDataSourceView GetDataSourceView(SiteMapDataSource owner, string viewName);
    public virtual IEnumerator GetEnumerator();
    public SiteMapHierarchicalDataSourceView GetHierarchicalDataSourceView();
    public virtual IHierarchyData GetHierarchyData(object enumeratedItem);
    public virtual int IndexOf(SiteMapNode value);
    public virtual void Insert(int index, SiteMapNode value);
    protected virtual void OnValidate(object value);
    public static SiteMapNodeCollection ReadOnly(SiteMapNodeCollection collection);
    public virtual void Remove(SiteMapNode value);
    public virtual void RemoveAt(int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IHierarchyData System.Web.UI.IHierarchicalEnumerable.GetHierarchyData(object enumeratedItem);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
}
public abstract class System.Web.SiteMapProvider : ProviderBase {
    internal static string _securityTrimmingEnabledAttrName;
    internal object _lock;
    public SiteMapNode CurrentNode { get; }
    public bool EnableLocalization { get; public set; }
    public SiteMapProvider ParentProvider { get; public set; }
    public string ResourceKey { get; public set; }
    public SiteMapProvider RootProvider { get; }
    public SiteMapNode RootNode { get; }
    public bool SecurityTrimmingEnabled { get; }
    public virtual SiteMapNode get_CurrentNode();
    public bool get_EnableLocalization();
    public void set_EnableLocalization(bool value);
    public virtual SiteMapProvider get_ParentProvider();
    public virtual void set_ParentProvider(SiteMapProvider value);
    public string get_ResourceKey();
    public void set_ResourceKey(string value);
    public virtual SiteMapProvider get_RootProvider();
    public virtual SiteMapNode get_RootNode();
    public bool get_SecurityTrimmingEnabled();
    [CompilerGeneratedAttribute]
public void add_SiteMapResolve(SiteMapResolveEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SiteMapResolve(SiteMapResolveEventHandler value);
    protected virtual void AddNode(SiteMapNode node);
    protected internal virtual void AddNode(SiteMapNode node, SiteMapNode parentNode);
    public virtual SiteMapNode FindSiteMapNode(HttpContext context);
    public virtual SiteMapNode FindSiteMapNodeFromKey(string key);
    public abstract virtual SiteMapNode FindSiteMapNode(string rawUrl);
    public abstract virtual SiteMapNodeCollection GetChildNodes(SiteMapNode node);
    public virtual SiteMapNode GetCurrentNodeAndHintAncestorNodes(int upLevel);
    public virtual SiteMapNode GetCurrentNodeAndHintNeighborhoodNodes(int upLevel, int downLevel);
    public abstract virtual SiteMapNode GetParentNode(SiteMapNode node);
    public virtual SiteMapNode GetParentNodeRelativeToCurrentNodeAndHintDownFromParent(int walkupLevels, int relativeDepthFromWalkup);
    public virtual SiteMapNode GetParentNodeRelativeToNodeAndHintDownFromParent(SiteMapNode node, int walkupLevels, int relativeDepthFromWalkup);
    protected internal abstract virtual SiteMapNode GetRootNodeCore();
    protected static SiteMapNode GetRootNodeCoreFromProvider(SiteMapProvider provider);
    public virtual void HintAncestorNodes(SiteMapNode node, int upLevel);
    public virtual void HintNeighborhoodNodes(SiteMapNode node, int upLevel, int downLevel);
    public virtual void Initialize(string name, NameValueCollection attributes);
    public virtual bool IsAccessibleToUser(HttpContext context, SiteMapNode node);
    protected internal virtual void RemoveNode(SiteMapNode node);
    protected SiteMapNode ResolveSiteMapNode(HttpContext context);
    internal SiteMapNode ReturnNodeIfAccessible(SiteMapNode node);
}
[DefaultMemberAttribute("Item")]
public class System.Web.SiteMapProviderCollection : ProviderCollection {
    public SiteMapProvider Item { get; }
    public virtual void Add(ProviderBase provider);
    public void Add(SiteMapProvider provider);
    public void AddArray(SiteMapProvider[] providerArray);
    public SiteMapProvider get_Item(string name);
}
public class System.Web.SiteMapResolveEventArgs : EventArgs {
    public SiteMapProvider Provider { get; }
    public HttpContext Context { get; }
    public SiteMapResolveEventArgs(HttpContext context, SiteMapProvider provider);
    public SiteMapProvider get_Provider();
    public HttpContext get_Context();
}
public class System.Web.SiteMapResolveEventHandler : MulticastDelegate {
    public SiteMapResolveEventHandler(object object, IntPtr method);
    public virtual SiteMapNode Invoke(object sender, SiteMapResolveEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SiteMapResolveEventArgs e, AsyncCallback callback, object object);
    public virtual SiteMapNode EndInvoke(IAsyncResult result);
}
internal class System.Web.SR : object {
    internal static string Parameter_Invalid;
    internal static string Parameter_NullOrEmpty;
    internal static string Property_NullOrEmpty;
    internal static string Property_Invalid;
    internal static string Unexpected_Error;
    internal static string PropertyCannotBeNullOrEmptyString;
    internal static string PropertyCannotBeNull;
    internal static string Invalid_string_from_browser_caps;
    internal static string Unrecognized_construct_in_pattern;
    internal static string Caps_cannot_be_inited_twice;
    internal static string Duplicate_browser_id;
    internal static string Invalid_browser_root;
    internal static string Browser_mutually_exclusive_attributes;
    internal static string Browser_refid_prohibits_identification;
    internal static string Browser_invalid_element;
    internal static string Browser_Circular_Reference;
    internal static string Browser_attributes_required;
    internal static string Browser_parentID_Not_Found;
    internal static string Browser_parentID_applied_to_default;
    internal static string Browser_InvalidID;
    internal static string Browser_Not_Allowed_InAppLevel;
    internal static string Browser_InvalidStrongNameKey;
    internal static string Browser_compile_error;
    internal static string DefaultBrowser_parentID_Not_Found;
    internal static string Browser_empty_identification;
    internal static string Browser_W3SVC_Failure_Helper_Text;
    internal static string DefaultSiteName;
    internal static string ControlAdapters_TypeNotFound;
    internal static string Failed_gac_install;
    internal static string Failed_gac_uninstall;
    internal static string WrongType_of_Protected_provider;
    internal static string Make_sure_remote_server_is_enabled_for_config_access;
    internal static string Config_unable_to_get_section;
    internal static string Config_failed_to_resolve_site_id;
    internal static string Config_GetSectionWithPathArgInvalid;
    internal static string Unable_to_create_temp_file;
    internal static string Config_allow_definition_error_application;
    internal static string Config_allow_definition_error_machine;
    internal static string Config_allow_definition_error_webroot;
    internal static string Config_base_unrecognized_element;
    internal static string Config_base_required_attribute_missing;
    internal static string Config_base_required_attribute_empty;
    internal static string Config_base_unrecognized_attribute;
    internal static string Config_base_elements_only;
    internal static string Config_base_no_child_nodes;
    internal static string Config_base_file_load_exception_no_message;
    internal static string Config_base_bad_image_exception_no_message;
    internal static string Config_base_report_exception_type;
    internal static string Config_property_generic;
    internal static string Config_section_not_supported;
    internal static string Unable_To_Register_Assembly;
    internal static string Unable_To_UnRegister_Assembly;
    internal static string Could_not_create_type_instance;
    internal static string Config_Invalid_enum_value;
    internal static string Config_element_below_app_illegal;
    internal static string Config_provider_must_exist;
    internal static string File_is_read_only;
    internal static string Can_not_access_files_other_than_config;
    internal static string Error_loading_XML_file;
    internal static string Unknown_tag_in_caps_config;
    internal static string Cannot_specify_test_without_match;
    internal static string Result_must_be_at_the_top_browser_section;
    internal static string Type_doesnt_inherit_from_type;
    internal static string Type_cannot_be_resolved;
    internal static string Problem_reading_caps_config;
    internal static string Special_module_cannot_be_added_manually;
    internal static string Special_module_cannot_be_removed_manually;
    internal static string Module_not_in_app;
    internal static string Invalid_credentials;
    internal static string Auth_Invalid_Login_Url;
    internal static string Invalid_value_for_globalization_attr;
    internal static string Invalid_credentials_2;
    internal static string Invalid_registry_config;
    internal static string Invalid_Passport_Redirect_URL;
    internal static string Invalid_redirect_return_url;
    internal static string Config_section_not_present;
    internal static string Local_free_threads_cannot_exceed_free_threads;
    internal static string Min_free_threads_must_be_under_thread_pool_limits;
    internal static string Thread_pool_limit_must_be_greater_than_minFreeThreads;
    internal static string Config_max_request_length_disk_threshold_exceeds_max_request_length;
    internal static string Config_max_request_length_smaller_than_max_request_length_disk_threshold;
    internal static string Capability_file_root_element;
    internal static string File_element_only_valid_in_config;
    internal static string HttpRuntimeSection_TargetFramework_Invalid;
    internal static string Clear_not_valid;
    internal static string Config_base_cannot_remove_inherited_items;
    internal static string Nested_group_not_valid;
    internal static string Dup_protocol_id;
    internal static string WebPartsSection_NoVerbs;
    internal static string WebPartsSection_InvalidVerb;
    internal static string Transformer_types_already_added;
    internal static string Transformer_attribute_error;
    internal static string File_changed_since_read;
    internal static string Config_invalid_element;
    internal static string Config_control_rendering_compatibility_version_is_less_than_minimum_version;
    internal static string InvalidExpressionSyntax;
    internal static string InvalidExpressionPrefix;
    internal static string ExpressionBuilder_InvalidType;
    internal static string MissingExpressionPrefix;
    internal static string MissingExpressionValue;
    internal static string ExpressionBuilder_LiteralExpressionsNotAllowed;
    internal static string ResourceExpresionBuilder_PageResourceNotFound;
    internal static string Failed_to_start_monitoring;
    internal static string Invalid_file_name_for_monitoring;
    internal static string Access_denied_for_monitoring;
    internal static string Directory_does_not_exist_for_monitoring;
    internal static string NetBios_command_limit_reached;
    internal static string Directory_rename_notification;
    internal static string Change_notification_critical_dir;
    internal static string Path_not_found;
    internal static string Path_forbidden;
    internal static string Method_for_path_not_implemented;
    internal static string Method_not_allowed;
    internal static string Cannot_call_defaulthttphandler_sync;
    internal static string Handler_access_denied;
    internal static string Debugging_forbidden;
    internal static string Debug_Access_Denied;
    internal static string Invalid_Debug_Request;
    internal static string Invalid_Debug_ID;
    internal static string Error_Attaching_with_MDM;
    internal static string VaryByCustom_already_set;
    internal static string CacheProfile_Not_Found;
    internal static string Invalid_operation_cache_dependency;
    internal static string Invalid_sqlDependency_argument;
    internal static string Invalid_sqlDependency_argument2;
    internal static string Etag_already_set;
    internal static string Cant_both_set_and_generate_Etag;
    internal static string Cacheability_for_field_must_be_private_or_nocache;
    internal static string Cache_dependency_used_more_that_once;
    internal static string Invalid_expiration_combination;
    internal static string Invalid_Dependency_Type;
    internal static string Invalid_Parameters_To_Insert;
    internal static string Invalid_sql_cache_dep_polltime;
    internal static string Database_not_found;
    internal static string Cant_connect_sql_cache_dep_database_polling;
    internal static string Cant_connect_sql_cache_dep_database_admin;
    internal static string Cant_connect_sql_cache_dep_database_admin_cmdtxt;
    internal static string Database_not_enabled_for_notification;
    internal static string Table_not_enabled_for_notification;
    internal static string Polling_not_enabled_for_sql_cache;
    internal static string Polltime_zero_for_database_sql_cache;
    internal static string Permission_denied_database_polling;
    internal static string Permission_denied_database_enable_notification;
    internal static string Permission_denied_table_enable_notification;
    internal static string Permission_denied_database_disable_notification;
    internal static string Permission_denied_table_disable_notification;
    internal static string Cant_get_enabled_tables_sql_cache_dep;
    internal static string Cant_disable_table_sql_cache_dep;
    internal static string Cache_null_table;
    internal static string Cache_null_table_in_tables;
    internal static string Cache_dep_table_not_found;
    internal static string UC_not_cached;
    internal static string UCCachePolicy_unavailable;
    internal static string SqlCacheDependency_permission_denied;
    internal static string No_UniqueId_Cache_Dependency;
    internal static string SqlCacheDependency_OutputCache_Conflict;
    internal static string Cache_not_available;
    internal static string Http_handler_not_found_for_request_type;
    internal static string Request_not_available;
    internal static string Response_not_available;
    internal static string Session_not_available;
    internal static string Server_not_available;
    internal static string User_not_available;
    internal static string Sync_not_supported;
    internal static string Type_not_factory_or_handler;
    internal static string Type_from_untrusted_assembly;
    internal static string Type_not_module;
    internal static string Request_timed_out;
    internal static string DynamicModuleRegistrationOff;
    internal static string Invalid_ControlState;
    internal static string Too_late_for_ViewStateUserKey;
    internal static string Too_late_for_RegisterRequiresViewStateEncryption;
    internal static string MethodCannotBeCalledAfterAppStart;
    internal static string Invalid_urlencoded_form_data;
    internal static string Invalid_request_filter;
    internal static string Cannot_map_path_without_context;
    internal static string Cross_app_not_allowed;
    internal static string Max_request_length_exceeded;
    internal static string Dangerous_input_detected;
    internal static string Dangerous_input_detected_descr;
    internal static string CollectionCountExceeded_HttpValueCollection;
    internal static string CollectionCountExceeded_JavaScriptObjectDeserializer;
    internal static string Invalid_substitution_callback;
    internal static string Url_too_long;
    internal static string QueryString_too_long;
    internal static string Using_BufferlessStream_API_Not_Supported;
    internal static string Using_InputStream_API_Not_Supported;
    internal static string Cannot_get_snapshot_if_not_buffered;
    internal static string Cannot_use_snapshot_after_headers_sent;
    internal static string Cannot_use_snapshot_for_TextWriter;
    internal static string Cannot_set_status_after_headers_sent;
    internal static string Cannot_set_content_type_after_headers_sent;
    internal static string Filtering_not_allowed;
    internal static string Cannot_append_header_after_headers_sent;
    internal static string Cannot_append_cookie_after_headers_sent;
    internal static string Cannot_modify_cookies_after_headers_sent;
    internal static string Cannot_clear_headers_after_headers_sent;
    internal static string Cannot_call_method_after_headers_sent_generic;
    internal static string Cannot_flush_completed_response;
    internal static string No_Route_Found_For_Redirect;
    internal static string Cannot_redirect_after_headers_sent;
    internal static string Cannot_set_header_encoding_after_headers_sent;
    internal static string Invalid_header_encoding;
    internal static string Cannot_redirect_to_newline;
    internal static string Invalid_status_string;
    internal static string Invalid_value_for_CacheControl;
    internal static string OutputStream_NotAvail;
    internal static string Information_Disclosure_Warning;
    internal static string InvalidOffsetOrCount;
    internal static string Invalid_path_for_push_promise;
    internal static string Access_denied_to_app_dir;
    internal static string Access_denied_to_unicode_app_dir;
    internal static string Access_denied_to_path;
    internal static string Insufficient_trust_for_attribute;
    internal static string XSP_init_error;
    internal static string Unable_create_app_object;
    internal static string Could_not_create_type;
    internal static string StateManagedCollection_InvalidIndex;
    internal static string StateManagedCollection_NoKnownTypes;
    internal static string VirtualPath_Length_Zero;
    internal static string Invalid_app_VirtualPath;
    internal static string Collection_CantAddNull;
    internal static string Collection_InvalidType;
    internal static string VirtualPath_AllowAppRelativePath;
    internal static string VirtualPath_AllowRelativePath;
    internal static string VirtualPath_AllowAbsolutePath;
    internal static string VirtualPath_CantMakeAppRelative;
    internal static string VirtualPath_CantMakeAppAbsolute;
    internal static string Bad_VirtualPath_in_VirtualFileBase;
    internal static string ControlRenderedOutsideServerForm;
    internal static string RequiresNT;
    internal static string ListEnumVersionMismatch;
    internal static string ListEnumCurrentOutOfRange;
    internal static string HTMLTextWriterUnbalancedPop;
    internal static string Server_too_busy;
    internal static string InvalidArgumentValue;
    internal static string CompilationMutex_Create;
    internal static string CompilationMutex_Null;
    internal static string CompilationMutex_Drained;
    internal static string CompilationMutex_Failed;
    internal static string Failed_to_create_temp_dir;
    internal static string Failed_to_execute_child_request;
    internal static string Cannot_impersonate;
    internal static string No_codegen_access;
    internal static string Transaction_not_supported_in_low_trust;
    internal static string Debugging_not_supported_in_low_trust;
    internal static string Session_state_need_higher_trust;
    internal static string ExecuteUrl_not_supported;
    internal static string Cannot_execute_url_in_this_context;
    internal static string Failed_to_execute_url;
    internal static string Aspnet_not_installed;
    internal static string Failed_to_initialize_AppDomain;
    internal static string Cannot_create_AppDomain;
    internal static string Cannot_create_HostEnv;
    internal static string Unknown_protocol_id;
    internal static string Only_1_HostEnv;
    internal static string Not_IRegisteredObject;
    internal static string Wellknown_object_already_exists;
    internal static string Invalid_IIS_app;
    internal static string App_Virtual_Path;
    internal static string Hosting_Phys_Path_Changed;
    internal static string App_Domain_Restart;
    internal static string Hosting_Env_Restart;
    internal static string Hosting_Env_IdleTimeout;
    internal static string Unhandled_Exception;
    internal static string Provider_must_implement_the_interface;
    internal static string Permission_set_not_found;
    internal static string Require_stable_string_hash_codes;
    internal static string Server_variable_cannot_be_modified;
    internal static string Cache_url_invalid;
    internal static string Invalid_range;
    internal static string Invalid_use_of_response_filter;
    internal static string Invalid_response_filter;
    internal static string Invalid_size;
    internal static string Process_information_not_available;
    internal static string Error_trying_to_enumerate_files;
    internal static string File_enumerator_access_denied;
    internal static string File_does_not_exist;
    internal static string File_is_hidden;
    internal static string Missing_star_mapping;
    internal static string Resource_access_forbidden;
    internal static string SMTP_TypeCreationError;
    internal static string Could_not_create_object_of_type;
    internal static string Could_not_create_object_from_clsid;
    internal static string Error_executing_child_request_for_path;
    internal static string Error_executing_child_request_for_handler;
    internal static string Invalid_path_for_child_request;
    internal static string Transacted_page_calls_aspcompat;
    internal static string Invalid_path_for_remove;
    internal static string Get_computer_name_failed;
    internal static string Cannot_map_path;
    internal static string Cannot_access_mappath_title;
    internal static string Cannot_access_mappath_details;
    internal static string Cannot_retrieve_request_data;
    internal static string Cannot_read_posted_data;
    internal static string Cannot_get_query_string;
    internal static string Cannot_get_query_string_bytes;
    internal static string Not_supported;
    internal static string GetGacLocaltion_failed;
    internal static string Server_Support_Function_Error;
    internal static string Server_Support_Function_Error_Disconnect;
    internal static string MachineKeyDataProtectorFactory_FactoryCreationFailed;
    internal static string MachineKey_InvalidPurpose;
    internal static string Provider_Schema_Version_Not_Match;
    internal static string Could_not_create_passport_identity;
    internal static string Passport_method_failed;
    internal static string Auth_rule_names_cant_contain_char;
    internal static string Auth_rule_must_specify_users_andor_roles;
    internal static string PageIndex_bad;
    internal static string PageSize_bad;
    internal static string PageIndex_PageSize_bad;
    internal static string Bad_machine_key;
    internal static string PassportAuthFailed;
    internal static string PassportAuthFailed_Title;
    internal static string PassportAuthFailed_Description;
    internal static string Unable_to_encrypt_cookie_ticket;
    internal static string Unable_to_get_cookie_authentication_validation_key;
    internal static string Unable_to_validate_data;
    internal static string Unable_to_get_policy_file;
    internal static string Wrong_validation_enum;
    internal static string Wrong_validation_enum_FX45;
    internal static string Wrong_decryption_enum;
    internal static string Role_is_not_empty;
    internal static string Assess_Denied_Title;
    internal static string Assess_Denied_Description2;
    internal static string Assess_Denied_Section_Title2;
    internal static string Assess_Denied_Misc_Content2;
    internal static string Assess_Denied_Description1;
    internal static string Assess_Denied_MiscTitle1;
    internal static string Assess_Denied_MiscContent1;
    internal static string Assess_Denied_Description3;
    internal static string Assess_Denied_Section_Title3;
    internal static string Assess_Denied_Misc_Content3;
    internal static string Assess_Denied_Misc_Content3_2;
    internal static string Auth_bad_url;
    internal static string Virtual_path_outside_application_not_supported;
    internal static string Invalid_decryption_key;
    internal static string Invalid_validation_key;
    internal static string Passport_not_installed;
    internal static string DbFileName_can_not_contain_invalid_chars;
    internal static string Provider_can_not_create_file_in_this_trust_level;
    internal static string LocalDB_cannot_have_userinstance_flag;
    internal static string MembershipPasswordAttribute_InvalidPasswordLength;
    internal static string MembershipPasswordAttribute_InvalidPasswordNonAlphanumericCharacters;
    internal static string MembershipPasswordAttribute_InvalidPasswordStrength;
    internal static string MembershipPasswordAttribute_InvalidRegularExpression;
    internal static string LocalizableString_LocalizationFailed;
    internal static string Role_provider_name_invalid;
    internal static string Def_provider_not_found;
    internal static string Provider_no_type_name;
    internal static string MembershipSqlProvider_description;
    internal static string RoleSqlProvider_description;
    internal static string RoleAuthStoreProvider_description;
    internal static string RoleWindowsTokenProvider_description;
    internal static string ProfileSqlProvider_description;
    internal static string Role_Principal_not_fully_constructed;
    internal static string Only_one_connection_string_allowed;
    internal static string Must_specify_connection_string_or_name;
    internal static string Cannot_use_integrated_security;
    internal static string Provider_application_name_too_long;
    internal static string Provider_bad_password_format;
    internal static string Provider_can_not_retrieve_hashed_password;
    internal static string Provider_unrecognized_attribute;
    internal static string Provider_can_not_decode_hashed_password;
    internal static string Profile_group_not_found;
    internal static string Profile_not_enabled;
    internal static string API_supported_for_current_user_only;
    internal static string API_failed_due_to_error;
    internal static string Profile_property_already_added;
    internal static string Profile_provider_not_found;
    internal static string Can_not_issue_cookie_or_redirect;
    internal static string Profile_default_provider_not_found;
    internal static string Value_must_be_boolean;
    internal static string Value_must_be_positive_integer;
    internal static string Value_must_be_non_negative_integer;
    internal static string Value_too_big;
    internal static string Profile_name_can_not_be_empty;
    internal static string Profile_name_can_not_contain_period;
    internal static string Provider_user_not_found;
    internal static string Provider_role_not_found;
    internal static string Provider_unknown_failure;
    internal static string Provider_role_already_exists;
    internal static string Profile_default_provider_not_specified;
    internal static string API_not_supported_at_this_level;
    internal static string Profile_bad_name;
    internal static string Profile_bad_group;
    internal static string Def_membership_provider_not_specified;
    internal static string Def_membership_provider_not_found;
    internal static string Provider_Error;
    internal static string Roles_feature_not_enabled;
    internal static string Def_role_provider_not_specified;
    internal static string Def_role_provider_not_found;
    internal static string Membership_PasswordRetrieval_not_supported;
    internal static string Membership_UserNotFound;
    internal static string Membership_WrongPassword;
    internal static string Membership_WrongAnswer;
    internal static string Membership_InvalidPassword;
    internal static string Membership_InvalidQuestion;
    internal static string Membership_InvalidAnswer;
    internal static string Membership_InvalidUserName;
    internal static string Membership_InvalidEmail;
    internal static string Membership_DuplicateUserName;
    internal static string Membership_DuplicateEmail;
    internal static string Membership_UserRejected;
    internal static string Membership_InvalidProviderUserKey;
    internal static string Membership_DuplicateProviderUserKey;
    internal static string Membership_AccountLockOut;
    internal static string Membership_Custom_Password_Validation_Failure;
    internal static string MinRequiredNonalphanumericCharacters_can_not_be_more_than_MinRequiredPasswordLength;
    internal static string ADMembership_Description;
    internal static string ADMembership_InvalidConnectionProtection;
    internal static string ADMembership_Connection_username_must_not_be_empty;
    internal static string ADMembership_Connection_password_must_not_be_empty;
    internal static string ADMembership_Schema_mappings_must_not_be_empty;
    internal static string ADMembership_Username_and_password_reqd;
    internal static string ADMembership_PasswordReset_without_question_not_supported;
    internal static string ADMembership_PasswordQuestionAnswerMapping_not_specified;
    internal static string ADMembership_Provider_not_initialized;
    internal static string ADMembership_PasswordQ_not_supported;
    internal static string ADMembership_PasswordA_not_supported;
    internal static string ADMembership_PasswordRetrieval_not_supported_AD;
    internal static string ADMembership_Username_mapping_invalid;
    internal static string ADMembership_Username_mapping_invalid_ADAM;
    internal static string ADMembership_Wrong_syntax;
    internal static string ADMembership_MappedAttribute_does_not_exist;
    internal static string ADMembership_MappedAttribute_does_not_exist_on_user;
    internal static string ADMembership_OnlyLdap_supported;
    internal static string ADMembership_ServerlessADsPath_not_supported;
    internal static string ADMembership_Secure_connection_not_established;
    internal static string ADMembership_Ssl_connection_not_established;
    internal static string ADMembership_DefContainer_not_specified;
    internal static string ADMembership_DefContainer_does_not_exist;
    internal static string ADMembership_Container_must_be_specified;
    internal static string ADMembership_Valid_Targets;
    internal static string ADMembership_OnlineUsers_not_supported;
    internal static string ADMembership_UserProperty_not_supported;
    internal static string ADMembership_Provider_SearchMethods_not_supported;
    internal static string ADMembership_No_ADAM_Partition;
    internal static string ADMembership_Setting_UserId_not_supported;
    internal static string ADMembership_Default_Creds_not_supported;
    internal static string ADMembership_Container_not_superior;
    internal static string ADMembership_Container_does_not_exist;
    internal static string ADMembership_Property_not_found_on_object;
    internal static string ADMembership_Property_not_found;
    internal static string ADMembership_BadPasswordAnswerMappings_not_specified;
    internal static string ADMembership_Unknown_Error;
    internal static string ADMembership_GCPortsNotSupported;
    internal static string ADMembership_attribute_not_single_valued;
    internal static string ADMembership_mapping_not_unique;
    internal static string ADMembership_InvalidProviderUserKey;
    internal static string ADMembership_unable_to_contact_domain;
    internal static string ADMembership_unable_to_set_password_port;
    internal static string ADMembership_invalid_path;
    internal static string ADMembership_Setting_ApplicationName_not_supported;
    internal static string ADMembership_Parameter_too_long;
    internal static string ADMembership_No_secure_conn_for_password;
    internal static string ADMembership_Generated_password_not_complex;
    internal static string ADMembership_UPN_contains_backslash;
    internal static string Windows_Token_API_not_supported;
    internal static string Parameter_can_not_contain_comma;
    internal static string Parameter_can_not_be_empty;
    internal static string Parameter_too_long;
    internal static string Parameter_array_empty;
    internal static string Parameter_collection_empty;
    internal static string Parameter_duplicate_array_element;
    internal static string Membership_password_too_long;
    internal static string Provider_this_user_not_found;
    internal static string Provider_this_user_already_in_role;
    internal static string Provider_this_user_already_not_in_role;
    internal static string SaveAs_requires_rooted_path;
    internal static string Connection_name_not_specified;
    internal static string Connection_string_not_found;
    internal static string AppSetting_not_found;
    internal static string AppSetting_not_convertible;
    internal static string Provider_must_implement_type;
    internal static string Feature_not_supported_at_this_level;
    internal static string Annoymous_id_module_not_enabled;
    internal static string Anonymous_ClearAnonymousIdentifierNotSupported;
    internal static string Anonymous_id_too_long;
    internal static string Anonymous_id_too_long_2;
    internal static string Profile_could_not_create_type;
    internal static string DataAccessError_CanNotCreateDataDir_Title;
    internal static string DataAccessError_CanNotCreateDataDir_Description;
    internal static string DataAccessError_CanNotCreateDataDir_Description_2;
    internal static string DataAccessError_MiscSectionTitle;
    internal static string DataAccessError_MiscSection_1;
    internal static string DataAccessError_MiscSection_2;
    internal static string DataAccessError_MiscSection_2_CanNotCreateDataDir;
    internal static string DataAccessError_MiscSection_2_CanNotWriteToDBFile_a;
    internal static string DataAccessError_MiscSection_2_CanNotWriteToDBFile_b;
    internal static string DataAccessError_MiscSection_3;
    internal static string DataAccessError_MiscSection_4;
    internal static string DataAccessError_MiscSection_4_2;
    internal static string DataAccessError_MiscSection_ClickAdd;
    internal static string DataAccessError_MiscSection_ClickOK;
    internal static string DataAccessError_MiscSection_5;
    internal static string SqlExpressError_CanNotWriteToDataDir_Title;
    internal static string SqlExpressError_CanNotWriteToDbfFile_Title;
    internal static string SqlExpressError_CanNotWriteToDataDir_Description;
    internal static string SqlExpressError_CanNotWriteToDbfFile_Description;
    internal static string SqlExpressError_CanNotWriteToDataDir_Description_2;
    internal static string SqlExpressError_CanNotWriteToDbfFile_Description_2;
    internal static string SqlExpressError_Description_1;
    internal static string Membership_password_length_incorrect;
    internal static string Membership_min_required_non_alphanumeric_characters_incorrect;
    internal static string Membership_more_than_one_user_with_email;
    internal static string Password_too_short;
    internal static string Password_need_more_non_alpha_numeric_chars;
    internal static string Password_does_not_match_regular_expression;
    internal static string Not_configured_to_support_password_resets;
    internal static string Property_not_serializable;
    internal static string Connection_not_secure_creating_secure_cookie;
    internal static string Profile_anonoymous_not_allowed_to_set_property;
    internal static string AuthStore_Application_not_found;
    internal static string AuthStore_Scope_not_found;
    internal static string AuthStoreNotInstalled_Title;
    internal static string AuthStoreNotInstalled_Description;
    internal static string AuthStore_policy_file_not_found;
    internal static string Wrong_profile_base_type;
    internal static string Command_not_recognized;
    internal static string Configuration_for_path_not_found;
    internal static string Configuration_for_physical_path_not_found;
    internal static string Configuration_for_machine_config_not_found;
    internal static string Configuration_Section_not_found;
    internal static string RSA_Key_Container_not_found;
    internal static string RSA_Key_Container_access_denied;
    internal static string RSA_Key_Container_already_exists;
    internal static string SqlError_Connection_String;
    internal static string SqlExpress_MDF_File_Auto_Creation_MiscSectionTitle;
    internal static string SqlExpress_MDF_File_Auto_Creation;
    internal static string SqlExpress_MDF_File_Auto_Creation_1;
    internal static string SqlExpress_MDF_File_Auto_Creation_2;
    internal static string SqlExpress_MDF_File_Auto_Creation_3;
    internal static string SqlExpress_MDF_File_Auto_Creation_4;
    internal static string SqlExpress_file_not_found_in_connection_string;
    internal static string SqlExpress_file_not_found;
    internal static string Invalid_value_for_sessionstate_stateConnectionString;
    internal static string No_database_allowed_in_sqlConnectionString;
    internal static string No_database_allowed_in_sql_partition_resolver_string;
    internal static string Error_parsing_session_sqlConnectionString;
    internal static string Error_parsing_sql_partition_resolver_string;
    internal static string Timeout_must_be_positive;
    internal static string Cant_make_session_request;
    internal static string Cant_make_session_request_partition_resolver;
    internal static string Need_v2_State_Server;
    internal static string Need_v2_State_Server_partition_resolver;
    internal static string Cant_connect_sql_session_database;
    internal static string Cant_connect_sql_session_database_partition_resolver;
    internal static string Login_failed_sql_session_database;
    internal static string Bad_partition_resolver_connection_string;
    internal static string Bad_state_server_request;
    internal static string Bad_state_server_request_partition_resolver;
    internal static string State_Server_detailed_error;
    internal static string State_Server_detailed_error_phase0;
    internal static string State_Server_detailed_error_phase1;
    internal static string State_Server_detailed_error_phase2;
    internal static string State_Server_detailed_error_phase3;
    internal static string Error_parsing_state_server_partition_resolver_string;
    internal static string SessionIDManager_uninit;
    internal static string SessionIDManager_InitializeRequest_not_called;
    internal static string Cant_save_session_id_because_response_was_flushed;
    internal static string Cant_save_session_id_because_id_is_invalid;
    internal static string Cant_serialize_session_state;
    internal static string Null_value_for_SessionStateItemCollection;
    internal static string Session_id_too_long;
    internal static string Need_v2_SQL_Server;
    internal static string Need_v2_SQL_Server_partition_resolver;
    internal static string Cant_have_multiple_session_module;
    internal static string Missing_session_custom_provider;
    internal static string Invalid_session_custom_provider;
    internal static string Invalid_session_state;
    internal static string Invalid_cache_based_session_timeout;
    internal static string Cant_use_partition_resolve;
    internal static string Previous_Page_Not_Authorized;
    internal static string Empty_path_has_no_directory;
    internal static string Path_must_be_rooted;
    internal static string Cannot_exit_up_top_directory;
    internal static string Physical_path_not_allowed;
    internal static string Invalid_vpath;
    internal static string Cannot_access_AspCompat;
    internal static string Apartment_component_not_allowed;
    internal static string Error_onpagestart;
    internal static string Cannot_execute_transacted_code;
    internal static string Cannot_post_workitem;
    internal static string Cannot_call_ISAPI_functions;
    internal static string Bad_attachment;
    internal static string Wrong_SimpleWorkerRequest;
    internal static string Atio2BadString;
    internal static string MakeMonthBadString;
    internal static string UtilParseDateTimeBad;
    internal static string SmtpMail_not_supported_on_Win7_and_higher;
    internal static string Illegal_special_dir;
    internal static string Precomp_stub_file;
    internal static string Already_precomp;
    internal static string Cant_delete_dir;
    internal static string Dir_not_empty;
    internal static string Dir_not_empty_not_precomp;
    internal static string Cant_update_precompiled_app;
    internal static string Too_early_for_webfile;
    internal static string Bar_dir_in_precompiled_app;
    internal static string Assembly_already_loaded;
    internal static string Success_precompile;
    internal static string Profile_not_precomped;
    internal static string Both_culture_and_language;
    internal static string Inconsistent_language;
    internal static string GetGeneratedSourceFile_Directory_Only;
    internal static string Duplicate_appinitialize;
    internal static string Virtual_codedir;
    internal static string Unknown_buildprovider_extension;
    internal static string Directory_progress;
    internal static string Bad_Base_Class_In_Code_File;
    internal static string Reference_assemblies_not_found;
    internal static string Higher_dependencies;
    internal static string Invalid_target_framework_version;
    internal static string Invalid_lower_target_version;
    internal static string Invalid_higher_target_version;
    internal static string Compiler_version_20_35_required;
    internal static string Compiler_version_40_required;
    internal static string Assembly_not_found_in_profile;
    internal static string Downlevel_requires_35;
    internal static string Invalid_PreApplicationStartMethodAttribute_value;
    internal static string Method_can_only_be_called_during_pre_start_init;
    internal static string Method_cannot_be_called_during_pre_start_init;
    internal static string Pre_application_start_init_method_threw_exception;
    internal static string Cant_use_default_items_and_filtered_collection;
    internal static string Children_not_supported_on_not_controls;
    internal static string Code_not_supported_on_not_controls;
    internal static string Code_not_allowed;
    internal static string Compilmode_not_allowed;
    internal static string Include_not_allowed;
    internal static string Attrib_not_allowed;
    internal static string Directive_not_allowed;
    internal static string Event_not_allowed;
    internal static string Literal_content_not_allowed;
    internal static string Literal_content_not_match_property;
    internal static string Too_many_controls;
    internal static string Too_many_dependencies;
    internal static string Too_many_direct_dependencies;
    internal static string Invalid_type;
    internal static string Assembly_not_compiled;
    internal static string Not_a_src_file;
    internal static string Ambiguous_type;
    internal static string Unsupported_filename;
    internal static string Cannot_convert_from_to;
    internal static string Object_tag_must_have_id;
    internal static string Invalid_scope;
    internal static string Invalid_progid;
    internal static string Invalid_clsid;
    internal static string Object_tag_must_have_class_classid_or_progid;
    internal static string Session_not_enabled;
    internal static string Page_ControlState_ControlCannotBeNull;
    internal static string Page_theme_not_found;
    internal static string Page_theme_invalid_name;
    internal static string Page_theme_default_theme_already_defined;
    internal static string Page_theme_skinID_already_defined;
    internal static string Page_theme_requires_page_header;
    internal static string Page_theme_only_controls_allowed;
    internal static string Page_theme_skin_file;
    internal static string Page_Title_Requires_Head;
    internal static string Page_Description_Requires_Head;
    internal static string Page_Keywords_Requires_Head;
    internal static string DataBoundLiterals_cant_bind;
    internal static string TwoWayBinding_requires_ID;
    internal static string NoCompileBinding_requires_ID;
    internal static string BadlyFormattedBind;
    internal static string BadlyFormattedBindItem;
    internal static string Property_readonly;
    internal static string Property_theme_disabled;
    internal static string Type_theme_disabled;
    internal static string Collection_readonly_Codeblocks;
    internal static string Parent_collections_readonly;
    internal static string Property_Not_Persistable;
    internal static string Property_Not_Supported;
    internal static string Property_Not_ClsCompliant;
    internal static string Property_Set_Not_Supported;
    internal static string ControlBuilder_InvalidLocalizeValue;
    internal static string meta_localize_error;
    internal static string meta_reskey_notallowed;
    internal static string meta_localize_notallowed;
    internal static string Invalid_enum_value;
    internal static string Type_not_creatable_from_string;
    internal static string Invalid_collection_item_type;
    internal static string Invalid_template_container;
    internal static string Event_handler_cant_be_empty;
    internal static string Events_cant_be_filtered;
    internal static string Type_doesnt_have_property;
    internal static string Property_doesnt_have_property;
    internal static string MasterPage_Multiple_content;
    internal static string MasterPage_doesnt_have_contentplaceholder;
    internal static string MasterPage_MasterPageFile;
    internal static string MasterPage_MasterPage;
    internal static string MasterPage_Circular_Master_Not_Allowed;
    internal static string MasterPage_Cannot_ApplyTo_ReadOnly_Collection;
    internal static string Only_Content_supported_on_content_page;
    internal static string Content_allowed_in_top_level_only;
    internal static string Content_only_allowed_in_content_page;
    internal static string Content_only_one_contentPlaceHolderID_allowed;
    internal static string Invalid_master_base;
    internal static string Invalid_typeless_reference;
    internal static string Bad_masterPage_ext;
    internal static string Illegal_Device;
    internal static string Illegal_Resource_Builder;
    internal static string Too_many_filters;
    internal static string Device_unsupported_in_directive;
    internal static string Cannot_add_value_not_collection;
    internal static string ControlBuilder_CollectionHasNoAddMethod;
    internal static string Cannot_set_property;
    internal static string Cannot_set_recursive_skin;
    internal static string Cannot_evaluate_expression;
    internal static string Cannot_init;
    internal static string Unexpected_Directory;
    internal static string Circular_include;
    internal static string Unexpected_eof_looking_for_tag;
    internal static string Invalid_app_file_content;
    internal static string Invalid_use_of_config_uc;
    internal static string Page_scope_in_global_asax;
    internal static string App_session_only_valid_in_global_asax;
    internal static string Multiple_forms_not_allowed;
    internal static string Postback_ctrl_not_found;
    internal static string Ctrl_not_data_handler;
    internal static string Transfer_not_allowed_in_callback;
    internal static string Redirect_not_allowed_in_callback;
    internal static string Script_tag_without_src_must_have_content;
    internal static string Unknown_server_tag;
    internal static string Ambiguous_server_tag;
    internal static string Invalid_type_for_input_tag;
    internal static string Control_type_not_allowed;
    internal static string Base_type_not_allowed;
    internal static string Reference_not_allowed;
    internal static string Id_already_used;
    internal static string Duplicate_id_used;
    internal static string Only_one_directive_allowed;
    internal static string Invalid_res_expr;
    internal static string Res_not_found;
    internal static string Res_not_found_with_class_and_key;
    internal static string Invalid_cache_settings_location;
    internal static string Registered_async_tasks_remain;
    internal static string Async_tasks_wrong_thread;
    internal static string Async_task_timed_out;
    internal static string ClientScriptManager_RegisterForEventValidation_Too_Early;
    internal static string ClientScriptManager_InvalidPostBackArgument;
    internal static string ClientScriptManager_JqueryNotRegistered;
    internal static string DesignTimeTemplateParser_ErrorParsingTheme;
    internal static string Duplicate_registered_tag;
    internal static string Empty_attribute;
    internal static string Space_attribute;
    internal static string Empty_expression;
    internal static string ControlBuilder_DatabindingRequiresEvent;
    internal static string ControlBuilder_TwoWayBindingNonProperty;
    internal static string ControlBuilder_CannotHaveMultipleBoundEntries;
    internal static string ControlBuilder_ExpressionsNotAllowedInThemes;
    internal static string FilteredAttributeDictionary_ArgumentMustBeString;
    internal static string HotSpotCollection_InvalidType;
    internal static string HotSpotCollection_InvalidTypeIndex;
    internal static string Invalid_attribute_value;
    internal static string Invalid_boolean_attribute;
    internal static string Invalid_integer_attribute;
    internal static string Invalid_nonnegative_integer_attribute;
    internal static string Invalid_positive_integer_attribute;
    internal static string Invalid_non_zero_hexadecimal_attribute;
    internal static string Invalid_hash_algorithm_type;
    internal static string Invalid_enum_attribute;
    internal static string Invalid_culture_attribute;
    internal static string Invalid_temp_directory;
    internal static string Invalid_reference_directive;
    internal static string Invalid_reference_directive_attrib;
    internal static string Invalid_typeNameOrVirtualPath_directive;
    internal static string Invalid_tagprefix_entry;
    internal static string Mapped_type_must_inherit;
    internal static string Missing_required_attribute;
    internal static string Missing_required_attributes;
    internal static string Attr_not_supported_in_directive;
    internal static string Attr_not_supported_in_ucdirective;
    internal static string Attr_not_supported_in_pagedirective;
    internal static string Invalid_attr;
    internal static string Attrib_parse_error;
    internal static string Missing_attr;
    internal static string Missing_output_cache_attr;
    internal static string Missing_varybyparam_attr;
    internal static string Missing_directive;
    internal static string Unknown_directive;
    internal static string Malformed_server_tag;
    internal static string Malformed_server_block;
    internal static string Server_tags_cant_contain_percent_constructs;
    internal static string Include_not_allowed_in_server_script_tag;
    internal static string Incompatible_with_get_bufferless_input_stream;
    internal static string Incompatible_with_get_buffered_input_stream;
    internal static string Incompatible_with_input_stream;
    internal static string Invalid_operation_with_get_buffered_input_stream;
    internal static string Only_file_virtual_supported_on_server_include;
    internal static string Runat_can_only_be_server;
    internal static string Invalid_identifier;
    internal static string Invalid_resourcekey;
    internal static string ControlBuilder_IDMustUseAttribute;
    internal static string ControlBuilder_CannotHaveComplexString;
    internal static string ControlBuilder_ParseTimeDataNotAvailable;
    internal static string Duplicate_attr_in_directive;
    internal static string Duplicate_attr_in_tag;
    internal static string Non_existent_base_type;
    internal static string Invalid_type_to_inherit_from;
    internal static string Invalid_type_to_implement;
    internal static string Error_page_not_supported_when_buffering_off;
    internal static string Enablesessionstate_must_be_true_false_or_readonly;
    internal static string Attributes_mutually_exclusive;
    internal static string Async_and_aspcompat;
    internal static string Async_and_transaction;
    internal static string Async_required;
    internal static string Async_addhandler_too_late;
    internal static string Async_operation_disabled;
    internal static string Async_operation_pending;
    internal static string Async_null_asyncresult;
    internal static string Async_operation_cannot_be_started;
    internal static string Async_operation_cannot_be_pending;
    internal static string Server_execute_blocked_on_async_handler;
    internal static string Mixed_lang_not_supported;
    internal static string Inconsistent_CodeFile_Language;
    internal static string Codefile_without_inherits;
    internal static string CodeFileBaseClass_Without_Codefile;
    internal static string Invalid_lang;
    internal static string Invalid_lang_extension;
    internal static string Cant_use_nocompile_uc;
    internal static string Invalid_CodeSubDirectory_Not_Exist;
    internal static string Invalid_CodeSubDirectory;
    internal static string Reserved_AssemblyName;
    internal static string Empty_extension;
    internal static string Base_class_field_with_type_different_from_type_of_control;
    internal static string ControlSkin_cannot_contain_controls;
    internal static string Inner_Content_not_literal;
    internal static string Invalid_client_target;
    internal static string Empty_file_name;
    internal static string SetStyleSheetThemeCannotBeSet;
    internal static string PropertySetBeforePageEvent;
    internal static string PropertySetBeforeStyleSheetApplied;
    internal static string PropertySetBeforePreInitOrAddToControls;
    internal static string PropertySetAfterFrameworkInitialize;
    internal static string StyleSheetAreadyAppliedOnControl;
    internal static string Control_CannotOwnSelf;
    internal static string AdRotator_cant_open_file;
    internal static string AdRotator_cant_open_file_no_permission;
    internal static string AdRotator_parse_error;
    internal static string AdRotator_no_advertisements;
    internal static string AdRotator_only_one_datasource;
    internal static string AdRotator_invalid_integer_format;
    internal static string AdRotator_expect_records_with_advertisement_properties;
    internal static string Validator_control_blank;
    internal static string Validator_control_not_found;
    internal static string Validator_bad_compare_control;
    internal static string Validator_bad_control_type;
    internal static string Validator_value_bad_type;
    internal static string Validator_range_overalap;
    internal static string Validator_bad_regex;
    internal static string ValSummary_error_message_1;
    internal static string ValSummary_error_message_2;
    internal static string ViewState_MissingViewStateField;
    internal static string ViewState_InvalidViewState;
    internal static string ViewState_InvalidViewStatePlus;
    internal static string ClientDisconnected;
    internal static string HttpBufferlessInputStream_ClientDisconnected;
    internal static string ViewState_ClientDisconnected;
    internal static string ViewState_AuthenticationFailed;
    internal static string Control_does_not_allow_children;
    internal static string DataBinder_Prop_Not_Found;
    internal static string DataBinder_Invalid_Indexed_Expr;
    internal static string DataBinder_No_Indexed_Accessor;
    internal static string XPathBinder_MustBeIXPathNavigable;
    internal static string XPathBinder_MustHaveXmlNodes;
    internal static string Field_Not_Found;
    internal static string DataItem_Not_Found;
    internal static string DataGrid_Missing_VirtualItemCount;
    internal static string DataGrid_NoAutoGenColumns;
    internal static string GridView_Missing_VirtualItemCount;
    internal static string GridView_NoAutoGenFields;
    internal static string GridView_DataSourceReturnedNullView;
    internal static string GridView_UnhandledEvent;
    internal static string GridView_MustBeParented;
    internal static string GridView_DataKeyNamesMustBeSpecified;
    internal static string GridView_PersistedSelectionRequiresDataKeysNames;
    internal static string DetailsView_NoAutoGenFields;
    internal static string DetailsView_UnhandledEvent;
    internal static string DetailsView_DataSourceMustBeCollection;
    internal static string DetailsView_MustBeParented;
    internal static string FileUpload_AllowMultiple;
    internal static string FileUpload_StreamNotSeekable;
    internal static string FileUpload_StreamTooLong;
    internal static string FileUpload_StreamLengthNotReached;
    internal static string FormView_UnhandledEvent;
    internal static string FormView_DataSourceMustBeCollection;
    internal static string DetailsViewFormView_ControlMustBeInEditMode;
    internal static string DetailsViewFormView_ControlMustBeInInsertMode;
    internal static string DataBoundControl_InvalidDataPropertyChange;
    internal static string DataBoundControl_NullView;
    internal static string DataBoundControl_InvalidDataSourceType;
    internal static string DataBoundControl_DataSourceDoesntSupportPaging;
    internal static string DataBoundControl_CallingDataMethods;
    internal static string DataBoundControl_NeedICollectionOrTotalRowCount;
    internal static string DataBoundControlHelper_NoNamingContainer;
    internal static string HierarchicalDataBoundControl_InvalidDataSource;
    internal static string DataBoundControl_OnCreatingModelDataSource;
    internal static string HierarchicalDataControl_ViewNotFound;
    internal static string HierarchicalDataControl_DataSourceIDMustBeHierarchicalDataControl;
    internal static string HierarchicalDataControl_DataSourceDoesntExist;
    internal static string DataControl_ViewNotFound;
    internal static string DataControl_DataSourceIDMustBeDataControl;
    internal static string DataControl_DataSourceDoesntExist;
    internal static string DataControl_MultipleDataSources;
    internal static string DataControl_ItemType_MultipleDataSources;
    internal static string DataControlField_NoContainer;
    internal static string DataControlField_CallbacksNotSupported;
    internal static string DataControlFieldCollection_InvalidType;
    internal static string DataControlFieldCollection_InvalidTypeIndex;
    internal static string BoundField_WrongControlType;
    internal static string CheckBoxField_WrongControlType;
    internal static string CheckBoxField_CouldntParseAsBoolean;
    internal static string CheckBoxField_NotSupported;
    internal static string CommandField_CallbacksNotSupported;
    internal static string ImageField_WrongControlType;
    internal static string TemplateField_CallbacksNotSupported;
    internal static string PagedDataSource_Cannot_Get_Count;
    internal static string Cannot_Have_Children_Of_Type;
    internal static string Control_Cannot_Databind;
    internal static string InnerHtml_not_supported;
    internal static string InnerText_not_supported;
    internal static string ListControl_SelectionOutOfRange;
    internal static string ListControl_RenderWhenDataEmptyNotSupportedWithTableLayout;
    internal static string ListControl_RenderWhenDataEmpty;
    internal static string BulletedList_SelectionNotSupported;
    internal static string BulletedList_TextNotSupported;
    internal static string CannotUseParentPostBackWhenValidating;
    internal static string CannotSetValidationOnDataControlButtons;
    internal static string CannotSetValidationOnPagerButtons;
    internal static string Invalid_DataSource_Type;
    internal static string Invalid_CurrentPageIndex;
    internal static string ListSource_Without_DataMembers;
    internal static string ListSource_Missing_DataMember;
    internal static string Enumerator_MoveNext_Not_Called;
    internal static string Sample_Databound_Text;
    internal static string Resource_problem;
    internal static string Duplicate_Resource_File;
    internal static string Property_Had_Malformed_Url;
    internal static string TypeResService_Needed;
    internal static string DataList_TemplateTableNotFound;
    internal static string DataList_DataKeyFieldMustBeSpecified;
    internal static string DataList_LayoutNotSupported;
    internal static string EnumAttributeInvalidString;
    internal static string UnitParseNumericPart;
    internal static string UnitParseNoDigits;
    internal static string IsValid_Cant_Be_Called;
    internal static string Invalid_HtmlTextWriter;
    internal static string Form_Needs_Page;
    internal static string InvalidDefaultAutoFieldGenerator;
    internal static string HtmlForm_OnlyIButtonControlCanBeDefaultButton;
    internal static string Head_Needs_Page;
    internal static string HtmlHead_StyleAlreadyRegistered;
    internal static string HtmlHead_OnlyOneHeadAllowed;
    internal static string HtmlHead_OnlyOneTitleAllowed;
    internal static string Style_RegisteredStylesAreReadOnly;
    internal static string Style_InvalidBorderWidth;
    internal static string Style_InvalidWidth;
    internal static string Style_InvalidHeight;
    internal static string Cant_Multiselect_In_Single_Mode;
    internal static string Cant_Multiselect;
    internal static string HtmlSelect_Cant_Multiselect_In_Single_Mode;
    internal static string Controls_Cant_Change_Between_Posts;
    internal static string Value_Set_Not_Supported;
    internal static string SiteMap_feature_disabled;
    internal static string SiteMapNode_readonly;
    internal static string SiteMapNodeCollection_Invalid_Type;
    internal static string SiteMapProvider_Circular_Provider;
    internal static string SiteMapProvider_Invalid_RootNode;
    internal static string SiteMapProvider_cannot_remove_root_node;
    internal static string XmlSiteMapProvider_cannot_add_node;
    internal static string XmlSiteMapProvider_invalid_resource_key;
    internal static string XmlSiteMapProvider_resourceKey_cannot_be_empty;
    internal static string XmlSiteMapProvider_cannot_find_provider;
    internal static string XmlSiteMapProvider_cannot_remove_node;
    internal static string XmlSiteMapProvider_missing_siteMapFile;
    internal static string XmlSiteMapProvider_Description;
    internal static string XmlSiteMapProvider_Not_Initialized;
    internal static string XmlSiteMapProvider_Cannot_Be_Inited_Twice;
    internal static string XmlSiteMapProvider_Top_Element_Must_Be_SiteMap;
    internal static string XmlSiteMapProvider_Only_One_SiteMapNode_Required_At_Top;
    internal static string XmlSiteMapProvider_Only_SiteMapNode_Allowed;
    internal static string XmlSiteMapProvider_invalid_sitemapnode_returned;
    internal static string XmlSiteMapProvider_invalid_GetRootNodeCore;
    internal static string XmlSiteMapProvider_Error_loading_Config_file;
    internal static string XmlSiteMapProvider_FileName_does_not_exist;
    internal static string XmlSiteMapProvider_FileName_already_in_use;
    internal static string XmlSiteMapProvider_Invalid_Extension;
    internal static string XmlSiteMapProvider_multiple_resource_definition;
    internal static string UrlMappings_only_app_relative_url_allowed;
    internal static string FileName_does_not_exist;
    internal static string SiteMapProvider_Multiple_Providers_With_Identical_Name;
    internal static string XmlSiteMapProvider_Multiple_Nodes_With_Identical_Url;
    internal static string XmlSiteMapProvider_Multiple_Nodes_With_Identical_Key;
    internal static string Provider_Not_Found;
    internal static string Provider_does_not_support_policy_for_responses;
    internal static string Provider_does_not_support_policy_for_fragments;
    internal static string GetOutputCacheProviderName_Invalid;
    internal static string OutputCacheExtensibility_CantSerializeDeserializeType;
    internal static string Collection_readonly;
    internal static string ParameterCollection_NotParameter;
    internal static string ControlParameter_CouldNotFindControl;
    internal static string ControlParameter_ControlIDNotSpecified;
    internal static string ControlParameter_PropertyNameNotSpecified;
    internal static string DataSourceCache_InvalidExpiryPolicy;
    internal static string DataSourceCache_InvalidDuration;
    internal static string DataSourceCache_CacheMustBeEnabled;
    internal static string DataSourceView_NoPaging;
    internal static string DataSourceView_NoSorting;
    internal static string DataSourceView_NoRowCount;
    internal static string AccessDataSource_Description;
    internal static string AccessDataSource_DisplayName;
    internal static string AccessDataSource_CannotSetConnectionString;
    internal static string AccessDataSource_CannotSetProvider;
    internal static string AccessDataSource_SqlCacheDependencyNotSupported;
    internal static string AccessDataSource_DesignTimeRelativePathsNotSupported;
    internal static string AccessDataSource_NoPathDiscoveryPermission;
    internal static string AccessDataSourceView_SelectRequiresDataFile;
    internal static string SqlDataSource_Description;
    internal static string SqlDataSource_DisplayName;
    internal static string SqlDataSource_InvalidMode;
    internal static string SqlDataSource_SqlCacheDependencyNotSupported;
    internal static string SqlDataSource_NoDbPermission;
    internal static string SqlDataSourceView_SortNotSupported;
    internal static string SqlDataSourceView_FilterNotSupported;
    internal static string SqlDataSourceView_CacheNotSupported;
    internal static string SqlDataSourceView_DeleteNotSupported;
    internal static string SqlDataSourceView_InsertNotSupported;
    internal static string SqlDataSourceView_UpdateNotSupported;
    internal static string SqlDataSourceView_CouldNotCreateConnection;
    internal static string SqlDataSourceView_NoPaging;
    internal static string SqlDataSourceView_NoSorting;
    internal static string SqlDataSourceView_NoRowCount;
    internal static string SqlDataSourceView_CountNotValid;
    internal static string SqlDataSourceView_SortParameterRequiresStoredProcedure;
    internal static string SqlDataSourceView_CommandNotificationNotSupported;
    internal static string SqlDataSourceView_Pessimistic;
    internal static string SqlDataSourceView_MissingParameters;
    internal static string SqlDataSourceView_NoParameters;
    internal static string DataSourceView_delete;
    internal static string DataSourceView_update;
    internal static string ModelDataSourceView_CannotCallOpenGenericMethods;
    internal static string ModelDataSourceView_CannotCallMethodsWithOutOrRefParameters;
    internal static string ModelDataSourceView_DataMethodNotFound;
    internal static string ModelDataSourceView_DeleteNotSupported;
    internal static string ModelDataSourceView_InvalidSelectReturnType;
    internal static string ModelDataSourceView_InvalidAsyncSelectReturnType;
    internal static string ModelDataSourceView_UseAsyncMethodMustBeUsingAsyncPage;
    internal static string ModelDataSourceView_InvalidPagingParameters;
    internal static string ModelDataSourceView_InvalidAsyncPagingParameters;
    internal static string ModelDataSourceView_MustUseSelectResultAsReturnType;
    internal static string ModelDataSourceView_InvalidSortingParameters;
    internal static string ModelDataSourceView_InsertNotSupported;
    internal static string ModelDataSourceView_MultipleModelMethodSources;
    internal static string ModelDataSourceView_MultipleValueProvidersNotSupported;
    internal static string ModelDataSourceView_UpdateNotSupported;
    internal static string ModelDataSourceView_SelectNotSupported;
    internal static string ModelDataSourceView_SortNotSupportedOnIEnumerable;
    internal static string ModelDataSourceView_ParameterCannotBeNull;
    internal static string ModelDataSourceView_ParameterValueHasWrongType;
    internal static string ModelDataSourceView_CancellationTokenIsNotSupported;
    internal static string ObjectDataSource_Description;
    internal static string ObjectDataSource_DisplayName;
    internal static string ObjectDataSourceView_DeleteNotSupported;
    internal static string ObjectDataSourceView_InsertNotSupported;
    internal static string ObjectDataSourceView_UpdateNotSupported;
    internal static string ObjectDataSourceView_SelectNotSupported;
    internal static string ObjectDataSourceView_InsertRequiresValues;
    internal static string ObjectDataSourceView_TypeNotSpecified;
    internal static string ObjectDataSourceView_TypeNotFound;
    internal static string ObjectDataSourceView_MethodNotFoundNoParams;
    internal static string ObjectDataSourceView_MethodNotFoundWithParams;
    internal static string ObjectDataSourceView_MethodNotFoundForDataObject;
    internal static string ObjectDataSourceView_DataObjectTypeNotFound;
    internal static string ObjectDataSourceView_DataObjectPropertyNotFound;
    internal static string ObjectDataSourceView_DataObjectPropertyReadOnly;
    internal static string ObjectDataSourceView_MultipleOverloads;
    internal static string ObjectDataSourceView_CacheNotSupportedOnSortedDataView;
    internal static string ObjectDataSourceView_CacheNotSupportedOnIDataReader;
    internal static string ObjectDataSourceView_SortNotSupportedOnIEnumerable;
    internal static string ObjectDataSourceView_FilterNotSupported;
    internal static string ObjectDataSourceView_Pessimistic;
    internal static string ObjectDataSourceView_NoOldValuesParams;
    internal static string ObjectDataSourceView_MissingPagingSettings;
    internal static string ObjectDataSourceView_CannotConvertType;
    internal static string FilteredDataSetHelper_DataSetHasNoTables;
    internal static string StringPropertyBuilder_CannotHaveChildObjects;
    internal static string XmlHierarchyData_CouldNotFindNode;
    internal static string XmlDataSource_Description;
    internal static string XmlDataSource_DesignTimeRelativePathsNotSupported;
    internal static string XmlDataSource_DisplayName;
    internal static string XmlDataSource_SaveNotAllowed;
    internal static string XmlDataSource_NoWebPermission;
    internal static string XmlDataSource_CannotChangeWhileLoading;
    internal static string XmlDataSource_NeedUniqueIDForCache;
    internal static string XmlDataSource_CacheKeyContext;
    internal static string DataControlFieldCell_ShouldNotSetValidateRequestMode;
    internal static string NeedHeader;
    internal static string Form_Required_For_Focus;
    internal static string Page_MustCallBeforeAndDuringPreRender;
    internal static string RoleGroupCollection_InvalidType;
    internal static string Page_CallBackError;
    internal static string Page_CallBackInvalid;
    internal static string Page_CallBackTargetInvalid;
    internal static string NoThemingSupport;
    internal static string ControlNonVisual;
    internal static string NoFocusSupport;
    internal static string PageStatePersister_PageCannotBeNull;
    internal static string SessionPageStatePersister_SessionMustBeEnabled;
    internal static string Page_MissingDataBindingContext;
    internal static string TemplateControl_DataBindingRequiresPage;
    internal static string LabelForNotFound;
    internal static string Attrib_Sql9_not_allowed;
    internal static string FactoryGenerator_TypeNotPublic;
    internal static string FactoryGenerator_TypeHasNoParameterlessConstructor;
    internal static string FactoryInterface;
    internal static string InvalidSerializedData;
    internal static string NonSerializableType;
    internal static string ErrorSerializingValue;
    internal static string Control_ValidateRequestMode;
    internal static string Control_Controls;
    internal static string Control_ID;
    internal static string Control_MaintainState;
    internal static string Control_ViewStateMode;
    internal static string Control_Visible;
    internal static string Control_OnDisposed;
    internal static string Control_OnInit;
    internal static string Control_OnLoad;
    internal static string Control_OnUnload;
    internal static string Control_OnPreRender;
    internal static string Control_OnDataBind;
    internal static string Control_NamingContainer;
    internal static string Control_Page;
    internal static string Control_Parent;
    internal static string Control_TemplateSourceDirectory;
    internal static string Control_TemplateControl;
    internal static string Control_Site;
    internal static string Control_State;
    internal static string Control_UniqueID;
    internal static string Control_ClientID;
    internal static string Control_ClientIDMode;
    internal static string Control_SkinId;
    internal static string Control_EnableTheming;
    internal static string Page_ClientTarget;
    internal static string Page_ErrorPage;
    internal static string Page_Error;
    internal static string Page_OnCommitTransaction;
    internal static string Page_OnAbortTransaction;
    internal static string Page_Illegal_MaxPageStateFieldLength;
    internal static string Page_Illegal_AsyncTimeout;
    internal static string Page_InvalidUpdateModelAttempt;
    internal static string Page_UnobtrusiveValidationMode;
    internal static string Page_UpdateModel_UpdateUnsuccessful;
    internal static string ObjectDataSource_ConflictDetection;
    internal static string ObjectDataSource_ConvertNullToDBNull;
    internal static string ObjectDataSource_DataObjectTypeName;
    internal static string ObjectDataSource_DeleteMethod;
    internal static string ObjectDataSource_DeleteParameters;
    internal static string ObjectDataSource_EnablePaging;
    internal static string ObjectDataSource_FilterExpression;
    internal static string ObjectDataSource_FilterParameters;
    internal static string ObjectDataSource_InsertMethod;
    internal static string ObjectDataSource_InsertParameters;
    internal static string ObjectDataSource_MaximumRowsParameterName;
    internal static string ObjectDataSource_SelectCountMethod;
    internal static string ObjectDataSource_SelectMethod;
    internal static string ObjectDataSource_SelectParameters;
    internal static string ObjectDataSource_SortParameterName;
    internal static string ObjectDataSource_StartRowIndexParameterName;
    internal static string ObjectDataSource_TypeName;
    internal static string ObjectDataSource_UpdateMethod;
    internal static string ObjectDataSource_UpdateParameters;
    internal static string ObjectDataSource_ObjectCreated;
    internal static string ObjectDataSource_ObjectCreating;
    internal static string ObjectDataSource_ObjectDisposing;
    internal static string ObjectDataSource_Selected;
    internal static string ObjectDataSource_Selecting;
    internal static string ObjectDataSource_ParsingCulture;
    internal static string DataSourceCache_Duration;
    internal static string DataSourceCache_Enabled;
    internal static string DataSourceCache_ExpirationPolicy;
    internal static string DataSourceCache_KeyDependency;
    internal static string SqlDataSource_ConflictDetection;
    internal static string SqlDataSource_ConnectionString;
    internal static string SqlDataSource_CancelSelectOnNullParameter;
    internal static string SqlDataSource_ProviderName;
    internal static string SqlDataSource_DataSourceMode;
    internal static string SqlDataSource_DeleteCommand;
    internal static string SqlDataSource_DeleteCommandType;
    internal static string SqlDataSource_DeleteParameters;
    internal static string SqlDataSource_FilterExpression;
    internal static string SqlDataSource_FilterParameters;
    internal static string SqlDataSource_InsertCommand;
    internal static string SqlDataSource_InsertCommandType;
    internal static string SqlDataSource_InsertParameters;
    internal static string SqlDataSource_SelectCommand;
    internal static string SqlDataSource_SelectCommandType;
    internal static string SqlDataSource_SelectParameters;
    internal static string SqlDataSource_SortParameterName;
    internal static string SqlDataSource_UpdateCommand;
    internal static string SqlDataSource_UpdateCommandType;
    internal static string SqlDataSource_UpdateParameters;
    internal static string SqlDataSource_Selected;
    internal static string SqlDataSource_Selecting;
    internal static string SqlDataSourceCache_SqlCacheDependency;
    internal static string Parameter_DbType;
    internal static string Parameter_DefaultValue;
    internal static string Parameter_Direction;
    internal static string Parameter_Name;
    internal static string Parameter_Size;
    internal static string Parameter_ConvertEmptyStringToNull;
    internal static string Parameter_Type;
    internal static string Parameter_TypeNotSupported;
    internal static string Parameter_ValidateInput;
    internal static string ControlParameter_ControlID;
    internal static string ControlParameter_PropertyName;
    internal static string CookieParameter_CookieName;
    internal static string QueryStringParameter_QueryStringField;
    internal static string FormParameter_FormField;
    internal static string SessionParameter_SessionField;
    internal static string ProfileParameter_PropertyName;
    internal static string HtmlInputHidden_OnServerChange;
    internal static string HtmlInputImage_OnServerClick;
    internal static string HtmlInputText_ServerChange;
    internal static string HtmlSelect_DataTextField;
    internal static string HtmlSelect_DataValueField;
    internal static string HtmlSelect_OnServerChange;
    internal static string HtmlSelect_DataMember;
    internal static string HtmlTextArea_OnServerChange;
    internal static string AccessDataSource_DataFile;
    internal static string AdRotator_AdvertisementFile;
    internal static string AdRotator_AlternateTextField;
    internal static string AdRotator_ImageUrlField;
    internal static string AdRotator_KeywordFilter;
    internal static string AdRotator_NavigateUrlField;
    internal static string AdRotator_Target;
    internal static string AdRotator_OnAdCreated;
    internal static string AssemblyResourceLoader_HandlerNotRegistered;
    internal static string AssemblyResourceLoader_InvalidRequest;
    internal static string AssemblyResourceLoader_AssemblyNotFound;
    internal static string AssemblyResourceLoader_ResourceNotFound;
    internal static string AssemblyResourceLoader_NoCircularReferences;
    internal static string DataControls_ShowFooter;
    internal static string DataControls_ShowHeader;
    internal static string DataControls_AutoGenerateColumns;
    internal static string Button_CausesValidation;
    internal static string WebControl_RepeatLayout;
    internal static string DataSource_Updating;
    internal static string DataSource_Inserting;
    internal static string DataSource_Deleting;
    internal static string DataSource_Updated;
    internal static string DataSource_Inserted;
    internal static string DataSource_Deleted;
    internal static string TableItem_VerticalAlign;
    internal static string Button_PostBackUrl;
    internal static string LoginControls_DefaultRequiredFieldValidatorText;
    internal static string LoginControls_SuccessPageUrl;
    internal static string LoginControls_EditProfileIconUrl;
    internal static string LoginControls_HelpPageIconUrl;
    internal static string LoginControls_HelpPageUrl;
    internal static string ChangePassword_ChangePasswordButtonImageUrl;
    internal static string ChangePassword_ContinueButtonImageUrl;
    internal static string PagerSettings_PreviousPageText;
    internal static string PagerSettings_NextPageText;
    internal static string ChangePassword_UserNameRequiredErrorMessage;
    internal static string ChangePassword_ConfirmPasswordCompareErrorMessage;
    internal static string LoginControls_ConfirmPasswordRequiredErrorMessage;
    internal static string LoginControls_AnswerRequiredErrorMessage;
    internal static string LoginControls_TitleText;
    internal static string ChangePassword_PasswordRecoveryText;
    internal static string ChangePassword_ChangePasswordButtonText;
    internal static string ChangePassword_HelpPageText;
    internal static string ChangePassword_CreateUserText;
    internal static string ChangePassword_SuccessText;
    internal static string LoginControls_UserNameLabelText;
    internal static string WebControl_SkipLinkText;
    internal static string View_HeaderText;
    internal static string View_FooterText;
    internal static string View_EmptyDataText;
    internal static string BoundField_NullDisplayText;
    internal static string View_PagerTemplate;
    internal static string WebControl_HeaderTemplate;
    internal static string View_EmptyDataTemplate;
    internal static string LoginControls_TitleTextStyle;
    internal static string LoginControls_TextBoxStyle;
    internal static string LoginControls_LabelStyle;
    internal static string WebControl_InstructionTextStyle;
    internal static string WebControl_HyperLinkStyle;
    internal static string WebControl_FailureTextStyle;
    internal static string View_EmptyDataRowStyle;
    internal static string WebControl_HeaderStyle;
    internal static string View_RowStyle;
    internal static string View_InsertRowStyle;
    internal static string View_EditRowStyle;
    internal static string DataControls_Columns;
    internal static string HotSpot_Target;
    internal static string MembershipProvider_Name;
    internal static string View_DefaultMode;
    internal static string LoginControls_TextLayout;
    internal static string UserName_InitialValue;
    internal static string WebControl_SelectedIndex;
    internal static string View_DataSourceReturnedNullView;
    internal static string WebControl_HorizontalAlign;
    internal static string TableItem_HorizontalAlign;
    internal static string DataSource_OldValuesParameterFormatString;
    internal static string Binding_DataMember;
    internal static string Item_RepeatDirection;
    internal static string DataControls_Caption;
    internal static string DataSource_InvalidViewName;
    internal static string WebControl_CommandName;
    internal static string WebControl_CommandArgument;
    internal static string WebControl_BackImageUrl;
    internal static string WebControl_TextAlign;
    internal static string WebControl_CaptionAlign;
    internal static string WebControl_InstructionText;
    internal static string DataControls_HeaderStyle;
    internal static string DataControls_FooterStyle;
    internal static string HotSpot_HotSpotMode;
    internal static string DataControls_GridLines;
    internal static string Password_InvalidPasswordErrorMessage;
    internal static string Table_UseAccessibleHeader;
    internal static string HtmlControl_OnServerClick;
    internal static string Button_OnCommand;
    internal static string Control_OnServerCheckChanged;
    internal static string DataControls_OnItemUpdated;
    internal static string DataControls_OnItemDeleting;
    internal static string DataControls_OnItemInserting;
    internal static string DataControls_OnItemUpdating;
    internal static string DataControls_OnItemCreated;
    internal static string DataControls_OnItemDataBound;
    internal static string DataControls_OnItemDeleted;
    internal static string DataControls_OnItemInserted;
    internal static string DataControls_DataKeyNames;
    internal static string DataControls_DataSourceMustBeCollectionWhenNotDataBinding;
    internal static string DataControls_OnRowDeleted;
    internal static string DataSource_Filtering;
    internal static string WebControl_PagerStyle;
    internal static string WebControl_CantFindProvider;
    internal static string BaseDataList_CellPadding;
    internal static string BaseDataList_CellSpacing;
    internal static string BaseDataList_DataKeyField;
    internal static string BaseDataList_DataKeys;
    internal static string BaseDataList_DataMember;
    internal static string BaseDataList_OnSelectedIndexChanged;
    internal static string BaseValidator_ControlToValidate;
    internal static string BaseValidator_ErrorMessage;
    internal static string BaseValidator_IsValid;
    internal static string BaseValidator_Display;
    internal static string BaseValidator_EnableClientScript;
    internal static string BaseValidator_SetFocusOnError;
    internal static string BaseValidator_Text;
    internal static string BaseValidator_ValidationGroup;
    internal static string BaseCompareValidator_CultureInvariantValues;
    internal static string BoundColumn_DataField;
    internal static string BoundColumn_DataFormatString;
    internal static string BoundColumn_ReadOnly;
    internal static string BoundField_ApplyFormatInEditMode;
    internal static string BoundField_DataField;
    internal static string BoundField_DataFormatString;
    internal static string BoundField_HtmlEncode;
    internal static string BoundField_ReadOnly;
    internal static string BoundField_ConvertEmptyStringToNull;
    internal static string BulletedList_BulletedListDisplayMode;
    internal static string BulletedList_BulletImageUrl;
    internal static string BulletedList_BulletStyle;
    internal static string BulletedList_FirstBulletNumber;
    internal static string BulletedList_Target;
    internal static string BulletedList_OnClick;
    internal static string Button_OnClientClick;
    internal static string ButtonColumn_ButtonType;
    internal static string ButtonColumn_CausesValidation;
    internal static string ButtonColumn_DataTextField;
    internal static string ButtonColumn_DataTextFormatString;
    internal static string ButtonColumn_Text;
    internal static string ButtonColumn_ValidationGroup;
    internal static string Button_Text;
    internal static string Button_OnClick;
    internal static string Button_UseSubmitBehavior;
    internal static string CheckBox_AutoPostBack;
    internal static string CheckBox_Checked;
    internal static string CheckBox_InputAttributes;
    internal static string CheckBox_LabelAttributes;
    internal static string CheckBox_Text;
    internal static string CheckBoxField_Text;
    internal static string CheckBoxList_CellPadding;
    internal static string CheckBoxList_CellSpacing;
    internal static string CheckBoxList_RepeatColumns;
    internal static string CircleHotSpot_X;
    internal static string CircleHotSpot_Y;
    internal static string CircleHotSpot_Radius;
    internal static string CommandField_DefaultCancelCaption;
    internal static string CommandField_DefaultDeleteCaption;
    internal static string CommandField_DefaultEditCaption;
    internal static string CommandField_DefaultInsertCaption;
    internal static string CommandField_DefaultNewCaption;
    internal static string CommandField_DefaultSelectCaption;
    internal static string CommandField_DefaultUpdateCaption;
    internal static string CommandField_CancelImageUrl;
    internal static string CommandField_DeleteImageUrl;
    internal static string CommandField_EditImageUrl;
    internal static string CommandField_InsertImageUrl;
    internal static string CommandField_NewImageUrl;
    internal static string CommandField_SelectImageUrl;
    internal static string CommandField_UpdateImageUrl;
    internal static string CommandField_ShowDeleteButton;
    internal static string CommandField_ShowCancelButton;
    internal static string CommandField_ShowInsertButton;
    internal static string CommandField_ShowEditButton;
    internal static string CommandField_ShowSelectButton;
    internal static string CommandField_CancelText;
    internal static string CommandField_DeleteText;
    internal static string CommandField_EditText;
    internal static string CommandField_InsertText;
    internal static string CommandField_NewText;
    internal static string CommandField_SelectText;
    internal static string CommandField_UpdateText;
    internal static string ButtonFieldBase_ButtonType;
    internal static string ButtonFieldBase_CausesValidation;
    internal static string ButtonFieldBase_ValidationGroup;
    internal static string ButtonField_DataTextField;
    internal static string ButtonField_DataTextFormatString;
    internal static string ButtonField_ImageUrl;
    internal static string ButtonField_Text;
    internal static string ChangePassword_CancelButtonType;
    internal static string ChangePassword_ContinueButtonType;
    internal static string ChangePassword_ChangePasswordButtonType;
    internal static string ChangePassword_CancelButtonImageUrl;
    internal static string ChangePassword_CancelButtonText;
    internal static string ChangePassword_CancelButtonStyle;
    internal static string ChangePassword_CancelButtonClick;
    internal static string ChangePassword_CancelDestinationPageUrl;
    internal static string ChangePassword_ChangePasswordError;
    internal static string ChangePassword_ChangedPassword;
    internal static string ChangePassword_ChangingPassword;
    internal static string ChangePassword_ChangePasswordFailureText;
    internal static string ChangePassword_ContinueButtonClick;
    internal static string LoginControls_ContinueDestinationPageUrl;
    internal static string ChangePassword_ContinueButtonText;
    internal static string ChangePassword_ContinueButtonStyle;
    internal static string ChangePassword_CreateUserIconUrl;
    internal static string ChangePassword_CreateUserUrl;
    internal static string ChangePassword_DefaultChangePasswordTitleText;
    internal static string ChangePassword_DefaultChangePasswordFailureText;
    internal static string ChangePassword_DefaultCancelButtonText;
    internal static string ChangePassword_DefaultConfirmPasswordRequiredErrorMessage;
    internal static string ChangePassword_DefaultConfirmNewPasswordLabelText;
    internal static string ChangePassword_DefaultContinueButtonText;
    internal static string ChangePassword_DefaultNewPasswordLabelText;
    internal static string ChangePassword_DefaultNewPasswordRequiredErrorMessage;
    internal static string ChangePassword_DefaultConfirmPasswordCompareErrorMessage;
    internal static string ChangePassword_DefaultPasswordRequiredErrorMessage;
    internal static string ChangePassword_DefaultChangePasswordButtonText;
    internal static string ChangePassword_DefaultSuccessTitleText;
    internal static string ChangePassword_DefaultSuccessText;
    internal static string ChangePassword_DefaultUserNameLabelText;
    internal static string ChangePassword_DefaultUserNameRequiredErrorMessage;
    internal static string ChangePassword_EditProfileText;
    internal static string ChangePassword_EditProfileUrl;
    internal static string ChangePassword_DisplayUserName;
    internal static string ChangePassword_InvalidBorderPadding;
    internal static string ChangePassword_PasswordHintText;
    internal static string ChangePassword_MailDefinition;
    internal static string ChangePassword_NewPasswordRegularExpressionErrorMessage;
    internal static string ChangePassword_NewPasswordLabelText;
    internal static string ChangePassword_NewPasswordRegularExpression;
    internal static string ChangePassword_NewPasswordRequiredErrorMessage;
    internal static string ChangePassword_NoCurrentPasswordTextBox;
    internal static string ChangePassword_NoNewPasswordTextBox;
    internal static string ChangePassword_NoUserNameTextBox;
    internal static string ChangePassword_UserNameTextBoxNotAllowed;
    internal static string ChangePassword_PasswordHintStyle;
    internal static string ChangePassword_PasswordRecoveryIconUrl;
    internal static string ChangePassword_PasswordRecoveryUrl;
    internal static string ChangePassword_PasswordRequiredErrorMessage;
    internal static string ChangePassword_SendingMail;
    internal static string ChangePassword_SendMailError;
    internal static string ChangePassword_ChangePasswordButtonStyle;
    internal static string ChangePassword_SuccessTitleText;
    internal static string ChangePassword_SuccessTextStyle;
    internal static string ChangePassword_ConfirmNewPasswordLabelText;
    internal static string ChangePassword_ValidatorTextStyle;
    internal static string CompareValidator_ControlToCompare;
    internal static string CompareValidator_Operator;
    internal static string CompareValidator_ValueToCompare;
    internal static string Content_ContentPlaceHolderID;
    internal static string ContentPlaceHolder_only_in_master;
    internal static string ContentPlaceHolder_duplicate_contentPlaceHolderID;
    internal static string CreateUserWizard_AutoGeneratePassword;
    internal static string CreateUserWizard_Answer;
    internal static string CreateUserWizard_InvalidAnswerErrorMessage;
    internal static string CreateUserWizard_AnswerLabelText;
    internal static string CreateUserWizard_CompleteSuccessText;
    internal static string CreateUserWizard_ContinueButtonType;
    internal static string CreateUserWizard_CreatingUser;
    internal static string CreateUserWizard_CreatedUser;
    internal static string CreateUserWizard_ConfirmPasswordLabelText;
    internal static string CreateUserWizard_ContinueButtonText;
    internal static string CreateUserWizard_ContinueButtonStyle;
    internal static string CreateUserWizard_ContinueButtonClick;
    internal static string CreateUserWizard_CreateUserButtonImageUrl;
    internal static string CreateUserWizard_CreateUserButtonType;
    internal static string CreateUserWizard_CreateUserButtonText;
    internal static string CreateUserWizard_CreateUserButtonStyle;
    internal static string CreateUserWizard_CreateUserError;
    internal static string CreateUserWizard_CreateUserStep;
    internal static string CreateUserWizard_DefaultConfirmPasswordCompareErrorMessage;
    internal static string CreateUserWizard_DefaultConfirmPasswordRequiredErrorMessage;
    internal static string CreateUserWizard_DefaultConfirmPasswordLabelText;
    internal static string CreateUserWizard_DefaultContinueButtonText;
    internal static string CreateUserWizard_DefaultCreateUserButtonText;
    internal static string CreateUserWizard_DefaultDuplicateUserNameErrorMessage;
    internal static string CreateUserWizard_DefaultDuplicateEmailErrorMessage;
    internal static string CreateUserWizard_DefaultEmailLabelText;
    internal static string CreateUserWizard_DefaultUnknownErrorMessage;
    internal static string CreateUserWizard_DefaultInvalidEmailErrorMessage;
    internal static string CreateUserWizard_DefaultInvalidPasswordErrorMessage;
    internal static string CreateUserWizard_DefaultCompleteTitleText;
    internal static string CreateUserWizard_DefaultPasswordRequiredErrorMessage;
    internal static string CreateUserWizard_DefaultQuestionLabelText;
    internal static string CreateUserWizard_DefaultInvalidQuestionErrorMessage;
    internal static string CreateUserWizard_DefaultInvalidAnswerErrorMessage;
    internal static string CreateUserWizard_DefaultAnswerLabelText;
    internal static string CreateUserWizard_DefaultEmailRegularExpressionErrorMessage;
    internal static string CreateUserWizard_DefaultCompleteSuccessText;
    internal static string CreateUserWizard_DefaultCreateUserTitleText;
    internal static string CreateUserWizard_DefaultUserNameLabelText;
    internal static string CreateUserWizard_DefaultUserNameRequiredErrorMessage;
    internal static string CreateUserWizard_DefaultAnswerRequiredErrorMessage;
    internal static string CreateUserWizard_DefaultEmailRequiredErrorMessage;
    internal static string CreateUserWizard_DefaultQuestionRequiredErrorMessage;
    internal static string CreateUserWizard_DuplicateEmailErrorMessage;
    internal static string CreateUserWizard_DuplicateUserNameErrorMessage;
    internal static string CreateUserWizard_EditProfileText;
    internal static string CreateUserWizard_EditProfileUrl;
    internal static string CreateUserWizard_Email;
    internal static string CreateUserWizard_EmailRegularExpression;
    internal static string CreateUserWizard_EmailRegularExpressionErrorMessage;
    internal static string CreateUserWizard_InvalidEmailErrorMessage;
    internal static string CreateUserWizard_EmailLabelText;
    internal static string CreateUserWizard_UnknownErrorMessage;
    internal static string CreateUserWizard_CompleteStep;
    internal static string CreateUserWizard_DisableCreatedUser;
    internal static string CreateUserWizard_LoginCreatedUser;
    internal static string CreateUserWizard_QuestionAndAnswerRequired;
    internal static string CreateUserWizard_RequireEmail;
    internal static string CreateUserWizard_ErrorMessageStyle;
    internal static string CreateUserWizard_PasswordHintStyle;
    internal static string CreateUserWizard_MailDefinition;
    internal static string CreateUserWizard_InvalidPasswordErrorMessage;
    internal static string CreateUserWizard_PasswordRegularExpression;
    internal static string CreateUserWizard_PasswordRegularExpressionErrorMessage;
    internal static string CreateUserWizard_PasswordRequiredErrorMessage;
    internal static string CreateUserWizard_NoPasswordTextBox;
    internal static string CreateUserWizard_NoUserNameTextBox;
    internal static string CreateUserWizard_NoEmailTextBox;
    internal static string CreateUserWizard_NoQuestionTextBox;
    internal static string CreateUserWizard_NoAnswerTextBox;
    internal static string CreateUserWizard_Question;
    internal static string CreateUserWizard_InvalidQuestionErrorMessage;
    internal static string CreateUserWizard_QuestionLabelText;
    internal static string CreateUserWizard_QuestionRequiredErrorMessage;
    internal static string CreateUserWizard_EmailRequiredErrorMessage;
    internal static string CreateUserWizard_SendMailError;
    internal static string CreateUserWizard_SideBar_Label_Not_Found;
    internal static string CreateUserWizard_CompleteSuccessTextStyle;
    internal static string CreateUserWizard_DuplicateCreateUserWizardStep;
    internal static string CreateUserWizard_DuplicateCompleteWizardStep;
    internal static string CreateUserWizard_ValidatorTextStyle;
    internal static string TemplatedWizardStep_ContentTemplate;
    internal static string TemplatedWizardStep_CustomNavigationTemplate;
    internal static string CreateUserWizardStep_AllowReturnCannotBeSet;
    internal static string CreateUserWizardStep_StepTypeCannotBeSet;
    internal static string CreateUserWizardStep_OnlyAllowedInCreateUserWizard;
    internal static string CompleteWizardStep_OnlyAllowedInCreateUserWizard;
    internal static string CustomValidator_ClientValidationFunction;
    internal static string CustomValidator_ValidateEmptyText;
    internal static string CustomValidator_ServerValidate;
    internal static string BaseDataBoundControl_DataSourceID;
    internal static string BaseDataBoundControl_DataSource;
    internal static string BaseDataBoundControl_OnDataBound;
    internal static string DataBoundControl_DataMember;
    internal static string DataBoundControl_EnableModelValidation;
    internal static string DataBoundControl_ItemType;
    internal static string DataBoundControl_SelectMethod;
    internal static string DataBoundControl_UpdateMethod;
    internal static string DataBoundControl_InsertMethod;
    internal static string DataBoundControl_DeleteMethod;
    internal static string DataControlField_AccessibleHeaderText;
    internal static string DataControlField_ControlStyle;
    internal static string DataControlField_FooterStyle;
    internal static string DataControlField_FooterText;
    internal static string DataControlField_HeaderImageUrl;
    internal static string DataControlField_HeaderStyle;
    internal static string DataControlField_HeaderText;
    internal static string DataControlField_InsertVisible;
    internal static string DataControlField_ItemStyle;
    internal static string DataControlField_ShowHeader;
    internal static string DataControlField_SortExpression;
    internal static string DataControlField_Visible;
    internal static string DataGrid_AllowCustomPaging;
    internal static string DataGrid_AllowPaging;
    internal static string DataGrid_AllowSorting;
    internal static string DataGrid_AlternatingItemStyle;
    internal static string DataGrid_CurrentPageIndex;
    internal static string DataGrid_EditItemIndex;
    internal static string DataGrid_EditItemStyle;
    internal static string DataGrid_ItemStyle;
    internal static string DataGrid_Items;
    internal static string DataGrid_PageCount;
    internal static string DataGrid_PagerStyle;
    internal static string DataGrid_PageSize;
    internal static string DataGrid_SelectedItem;
    internal static string DataGrid_SelectedItemStyle;
    internal static string DataGrid_OnCancelCommand;
    internal static string DataGrid_OnDeleteCommand;
    internal static string DataGrid_OnEditCommand;
    internal static string DataGrid_OnItemCommand;
    internal static string DataGrid_OnPageIndexChanged;
    internal static string DataGrid_OnSortCommand;
    internal static string DataGrid_OnUpdateCommand;
    internal static string DataGrid_VisibleItemCount;
    internal static string DataGridColumn_FooterStyle;
    internal static string DataGridColumn_FooterText;
    internal static string DataGridColumn_HeaderImageUrl;
    internal static string DataGridColumn_HeaderStyle;
    internal static string DataGridColumn_HeaderText;
    internal static string DataGridColumn_ItemStyle;
    internal static string DataGridColumn_SortExpression;
    internal static string DataGridColumn_Visible;
    internal static string DataGridPagerStyle_Mode;
    internal static string DataGridPagerStyle_PageButtonCount;
    internal static string DataGridPagerStyle_Position;
    internal static string DataGridPagerStyle_Visible;
    internal static string DataList_AlternatingItemStyle;
    internal static string DataList_AlternatingItemTemplate;
    internal static string DataList_EditItemIndex;
    internal static string DataList_EditItemStyle;
    internal static string DataList_EditItemTemplate;
    internal static string DataList_ExtractTemplateRows;
    internal static string DataList_FooterTemplate;
    internal static string DataList_HeaderTemplate;
    internal static string DataList_ItemStyle;
    internal static string DataList_Items;
    internal static string DataList_ItemTemplate;
    internal static string DataList_RepeatColumns;
    internal static string DataList_SelectedItemStyle;
    internal static string DataList_SelectedItem;
    internal static string DataList_SelectedItemTemplate;
    internal static string DataList_SeparatorStyle;
    internal static string DataList_SeparatorTemplate;
    internal static string DataList_OnCancelCommand;
    internal static string DataList_OnDeleteCommand;
    internal static string DataList_OnEditCommand;
    internal static string DataList_OnItemCommand;
    internal static string DataList_OnUpdateCommand;
    internal static string DetailsView_AllowPaging;
    internal static string DetailsView_AlternatingRowStyle;
    internal static string DetailsView_AutoGenerateDeleteButton;
    internal static string DetailsView_AutoGenerateEditButton;
    internal static string DetailsView_AutoGenerateInsertButton;
    internal static string DetailsView_AutoGenerateRows;
    internal static string DetailsView_CellPadding;
    internal static string DetailsView_CellSpacing;
    internal static string DetailsView_CommandRowStyle;
    internal static string DetailsView_DataKey;
    internal static string DetailsView_PageIndex;
    internal static string DetailsView_EnablePagingCallbacks;
    internal static string DetailsView_FooterStyle;
    internal static string DetailsView_FooterTemplate;
    internal static string DetailsView_FieldHeaderStyle;
    internal static string DetailsView_OnPageIndexChanged;
    internal static string DetailsView_OnPageIndexChanging;
    internal static string DetailsView_OnItemCommand;
    internal static string DetailsView_OnItemCreated;
    internal static string DetailsView_OnModeChanged;
    internal static string DetailsView_OnModeChanging;
    internal static string DetailsView_PagerSettings;
    internal static string DetailsView_Fields;
    internal static string DetailsView_Rows;
    internal static string FontInfo_Name;
    internal static string FontInfo_Names;
    internal static string FontInfo_Size;
    internal static string FontInfo_Bold;
    internal static string FontInfo_Italic;
    internal static string FontInfo_Underline;
    internal static string FontInfo_Strikeout;
    internal static string FontInfo_Overline;
    internal static string FormView_AllowPaging;
    internal static string FormView_CellPadding;
    internal static string FormView_CellSpacing;
    internal static string FormView_DataKey;
    internal static string FormView_PageIndex;
    internal static string FormView_EditItemTemplate;
    internal static string FormView_RenderOuterTable;
    internal static string FormView_FooterStyle;
    internal static string FormView_FooterTemplate;
    internal static string FormView_InsertItemTemplate;
    internal static string FormView_OnPageIndexChanged;
    internal static string FormView_OnPageIndexChanging;
    internal static string FormView_OnItemCommand;
    internal static string FormView_OnItemCreated;
    internal static string FormView_OnModeChanged;
    internal static string FormView_OnModeChanging;
    internal static string FormView_Rows;
    internal static string HiddenField_OnValueChanged;
    internal static string HiddenField_Value;
    internal static string HotSpot_AccessKey;
    internal static string HotSpot_AlternateText;
    internal static string HotSpot_PostBackValue;
    internal static string HotSpot_NavigateUrl;
    internal static string HotSpot_TabIndex;
    internal static string HyperLink_ImageUrl;
    internal static string HyperLink_ImageHeight;
    internal static string HyperLink_ImageWidth;
    internal static string HyperLink_NavigateUrl;
    internal static string HyperLink_Target;
    internal static string HyperLink_Text;
    internal static string HyperLinkColumn_DataNavigateUrlField;
    internal static string HyperLinkColumn_DataTextField;
    internal static string HyperLinkColumn_NavigateUrl;
    internal static string HyperLinkColumn_Text;
    internal static string HyperLinkField_DataNavigateUrlFields;
    internal static string HyperLinkField_DataNavigateUrlFormatString;
    internal static string HyperLinkField_DataTextField;
    internal static string HyperLinkField_DataTextFormatString;
    internal static string HyperLinkField_NavigateUrl;
    internal static string HyperLinkField_Text;
    internal static string Image_AlternateText;
    internal static string Image_DescriptionUrl;
    internal static string Image_GenerateEmptyAlternateText;
    internal static string Image_ImageAlign;
    internal static string Image_ImageUrl;
    internal static string ImageButton_OnClick;
    internal static string ImageButton_OnCommand;
    internal static string ImageField_AlternateText;
    internal static string ImageField_DataAlternateTextField;
    internal static string ImageField_DataAlternateTextFormatString;
    internal static string ImageField_ConvertEmptyStringToNull;
    internal static string ImageField_ImageUrlField;
    internal static string ImageField_ImageUrlFormatString;
    internal static string ImageField_NullImageUrl;
    internal static string ImageField_ReadOnly;
    internal static string ImageMap_Click;
    internal static string ImageMap_HotSpots;
    internal static string IRenderOuterTableControl_CannotSetStyleWhenDisableRenderOuterTable;
    internal static string Label_AssociatedControlID;
    internal static string Label_Text;
    internal static string Literal_Text;
    internal static string Literal_Mode;
    internal static string LinkButton_Text;
    internal static string LinkButton_OnClick;
    internal static string ListBox_Rows;
    internal static string ListBox_SelectionMode;
    internal static string ListControl_AppendDataBoundItems;
    internal static string ListControl_AutoPostBack;
    internal static string ListControl_DataTextField;
    internal static string ListControl_DataTextFormatString;
    internal static string ListControl_DataValueField;
    internal static string ListControl_Items;
    internal static string ListControl_SelectedItem;
    internal static string ListControl_SelectedValue;
    internal static string ListControl_OnSelectedIndexChanged;
    internal static string ListControl_Text;
    internal static string ListControl_TextChanged;
    internal static string Login_LoggedIn;
    internal static string Login_Authenticate;
    internal static string Login_LoggingIn;
    internal static string Login_CheckBoxStyle;
    internal static string Login_CreateUserUrl;
    internal static string Login_CreateUserIconUrl;
    internal static string Login_DefaultFailureText;
    internal static string LoginControls_DefaultPasswordLabelText;
    internal static string Login_DefaultPasswordRequiredErrorMessage;
    internal static string Login_DefaultRememberMeText;
    internal static string Login_DefaultLoginButtonText;
    internal static string Login_DefaultTitleText;
    internal static string Login_DefaultUserNameLabelText;
    internal static string Login_DefaultUserNameRequiredErrorMessage;
    internal static string Login_DestinationPageUrl;
    internal static string Login_DisplayRememberMe;
    internal static string Login_HelpPageIconUrl;
    internal static string Login_InvalidBorderPadding;
    internal static string Login_LoginError;
    internal static string Login_FailureAction;
    internal static string Login_FailureText;
    internal static string Login_Orientation;
    internal static string Login_NoPasswordTextBox;
    internal static string Login_NoUserNameTextBox;
    internal static string LoginControls_PasswordLabelText;
    internal static string Login_PasswordRecoveryUrl;
    internal static string Login_PasswordRecoveryIconUrl;
    internal static string Login_PasswordRequiredErrorMessage;
    internal static string Login_RememberMeSet;
    internal static string Login_RememberMeText;
    internal static string LoginControls_RenderOuterTable;
    internal static string Login_LoginButtonImageUrl;
    internal static string Login_LoginButtonStyle;
    internal static string Login_LoginButtonType;
    internal static string Login_LoginButtonText;
    internal static string Login_BorderPadding;
    internal static string Login_ValidatorTextStyle;
    internal static string Login_VisibleWhenLoggedIn;
    internal static string LoginName_InvalidFormatString;
    internal static string LoginName_FormatString;
    internal static string LoginName_DesignModeUserName;
    internal static string LoginStatus_LoginImageUrl;
    internal static string LoginStatus_LoginText;
    internal static string LoginStatus_LogoutAction;
    internal static string LoginStatus_LogoutImageUrl;
    internal static string LoginStatus_LogoutPageUrl;
    internal static string LoginStatus_LogoutText;
    internal static string LoginStatus_LoggedOut;
    internal static string LoginStatus_LoggingOut;
    internal static string LoginStatus_DefaultLoginText;
    internal static string LoginStatus_DefaultLogoutText;
    internal static string LoginView_RoleGroups;
    internal static string LoginView_ViewChanged;
    internal static string LoginView_ViewChanging;
    internal static string EmbeddedMailObject_Name;
    internal static string EmbeddedMailObject_Path;
    internal static string MailDefinition_EmbeddedObjects;
    internal static string MailDefinition_BodyFileName;
    internal static string MailDefinition_CC;
    internal static string MailDefinition_From;
    internal static string MailDefinition_InvalidReplacements;
    internal static string MailDefinition_IsBodyHtml;
    internal static string MailDefinition_NoFromAddressSpecified;
    internal static string MailDefinition_Priority;
    internal static string MailDefinition_Subject;
    internal static string MenuItemStyle_HorizontalPadding;
    internal static string MenuItemStyle_ItemSpacing;
    internal static string MenuItemStyle_VerticalPadding;
    internal static string MenuItemStyleCollection_InvalidArgument;
    internal static string MenuItemBinding_Depth;
    internal static string MenuItemBinding_Enabled;
    internal static string MenuItemBinding_EnabledField;
    internal static string MenuItemBinding_FormatString;
    internal static string MenuItemBinding_ImageUrl;
    internal static string MenuItemBinding_ImageUrlField;
    internal static string MenuItemBinding_NavigateUrl;
    internal static string MenuItemBinding_NavigateUrlField;
    internal static string MenuItemBinding_PopOutImageUrl;
    internal static string MenuItemBinding_PopOutImageUrlField;
    internal static string MenuItemBinding_Selectable;
    internal static string MenuItemBinding_SelectableField;
    internal static string MenuItemBinding_SeparatorImageUrl;
    internal static string MenuItemBinding_SeparatorImageUrlField;
    internal static string MenuItemBinding_Target;
    internal static string MenuItemBinding_TargetField;
    internal static string MenuItemBinding_Text;
    internal static string MenuItemBinding_TextField;
    internal static string MenuItemBinding_ToolTip;
    internal static string MenuItemBinding_ToolTipField;
    internal static string MenuItemBinding_Value;
    internal static string MenuItemBinding_ValueField;
    internal static string MenuItem_Enabled;
    internal static string MenuItem_ImageUrl;
    internal static string MenuItem_NavigateUrl;
    internal static string MenuItem_PopOutImageUrl;
    internal static string MenuItem_Selectable;
    internal static string MenuItem_Selected;
    internal static string MenuItem_SeparatorImageUrl;
    internal static string MenuItem_Target;
    internal static string MenuItem_Text;
    internal static string MenuItem_ToolTip;
    internal static string MenuItem_Value;
    internal static string MenuItemCollection_InvalidArrayType;
    internal static string Menu_Bindings;
    internal static string Menu_CannotChangeRenderingMode;
    internal static string Menu_DataSourceReturnedNullView;
    internal static string Menu_DesignTimeDummyItemText;
    internal static string Menu_DisappearAfter;
    internal static string Menu_DynamicBottomSeparatorImageUrl;
    internal static string Menu_DynamicDisplayPopOutImage;
    internal static string Menu_DynamicHorizontalOffset;
    internal static string Menu_DynamicHoverStyle;
    internal static string Menu_DynamicItemFormatString;
    internal static string Menu_DynamicMenuItemStyle;
    internal static string Menu_DynamicMenuStyle;
    internal static string Menu_DynamicPopoutImageUrl;
    internal static string Menu_DynamicPopoutImageText;
    internal static string Menu_DynamicSelectedStyle;
    internal static string Menu_DynamicTemplate;
    internal static string Menu_DynamicTopSeparatorImageUrl;
    internal static string Menu_DynamicVerticalOffset;
    internal static string Menu_IncludeStyleBlock;
    internal static string Menu_InvalidDataBinding;
    internal static string Menu_InvalidDepth;
    internal static string Menu_InvalidNavigation;
    internal static string Menu_InvalidSelection;
    internal static string Menu_Items;
    internal static string Menu_ItemWrap;
    internal static string Menu_LevelMenuItemStyles;
    internal static string Menu_LevelSelectedStyles;
    internal static string Menu_LevelSubMenuStyles;
    internal static string Menu_MaximumDynamicDisplayLevels;
    internal static string Menu_MaximumDynamicDisplayLevelsInvalid;
    internal static string Menu_MenuItemClick;
    internal static string Menu_MenuItemDataBound;
    internal static string Menu_Orientation;
    internal static string Menu_PathSeparator;
    internal static string Menu_RenderingMode;
    internal static string Menu_ScrollDown;
    internal static string Menu_ScrollDownImageUrl;
    internal static string Menu_ScrollDownText;
    internal static string Menu_ScrollUpImageUrl;
    internal static string Menu_SkipLinkTextDefault;
    internal static string Menu_ScrollUp;
    internal static string Menu_ScrollUpText;
    internal static string Menu_StaticBottomSeparatorImageUrl;
    internal static string Menu_StaticDisplayLevels;
    internal static string Menu_StaticDisplayPopOutImage;
    internal static string Menu_StaticHoverStyle;
    internal static string Menu_StaticItemFormatString;
    internal static string Menu_StaticMenuItemStyle;
    internal static string Menu_StaticMenuStyle;
    internal static string Menu_StaticPopoutImageText;
    internal static string Menu_StaticPopoutImageUrl;
    internal static string Menu_StaticSelectedStyle;
    internal static string Menu_StaticSubMenuIndent;
    internal static string Menu_StaticTemplate;
    internal static string Menu_StaticTopSeparatorImageUrl;
    internal static string ModelErrorMessage_AssociatedControlID;
    internal static string ModelErrorMessage_ModelStateKey;
    internal static string ModelErrorMessage_SetFocusOnError;
    internal static string MultiView_ActiveView;
    internal static string MultiView_ActiveViewChanged;
    internal static string MultiView_ActiveViewIndex_out_of_range;
    internal static string MultiView_cannot_have_children_of_type;
    internal static string Multiview_rendering_block_not_allowed;
    internal static string MultiView_Views;
    internal static string MultiView_invalid_view_id;
    internal static string MultiView_invalid_view_index_format;
    internal static string MultiView_view_not_found;
    internal static string MultiView_ActiveViewIndex_less_than_minus_one;
    internal static string MultiView_ActiveViewIndex_equal_or_greater_than_count;
    internal static string View_CannotSetVisible;
    internal static string SiteMapPath_CannotFindUrl;
    internal static string SiteMapPath_CurrentNodeStyle;
    internal static string SiteMapPath_CurrentNodeTemplate;
    internal static string SiteMapPath_OnItemDataBound;
    internal static string SiteMapPath_NodeStyle;
    internal static string SiteMapPath_NodeTemplate;
    internal static string SiteMapPath_PathDirection;
    internal static string SiteMapPath_PathSeparator;
    internal static string SiteMapPath_PathSeparatorTemplate;
    internal static string SiteMapPath_PathSeparatorStyle;
    internal static string SiteMapPath_Provider;
    internal static string SiteMapPath_RenderCurrentNodeAsLink;
    internal static string SiteMapPath_RootNodeStyle;
    internal static string SiteMapPath_RootNodeTemplate;
    internal static string SiteMapPath_SiteMapProvider;
    internal static string SiteMapPath_SkipToContentText;
    internal static string SiteMapPath_Default_SkipToContentText;
    internal static string SiteMapPath_ShowToolTips;
    internal static string SiteMapPath_ParentLevelsDisplayed;
    internal static string SubMenuStyle_HorizontalPadding;
    internal static string SubMenuStyle_VerticalPadding;
    internal static string SubMenuStyleCollection_InvalidArgument;
    internal static string Panel_BackImageUrl;
    internal static string Panel_DefaultButton;
    internal static string Panel_Direction;
    internal static string Panel_GroupingText;
    internal static string Panel_HorizontalAlign;
    internal static string Panel_ScrollBars;
    internal static string Panel_Wrap;
    internal static string PasswordRecovery_AnswerLabelText;
    internal static string PasswordRecovery_AnswerLookupError;
    internal static string PasswordRecovery_VerifyingAnswer;
    internal static string PasswordRecovery_SendingMail;
    internal static string PasswordRecovery_VerifyingUser;
    internal static string PasswordRecovery_DefaultAnswerLabelText;
    internal static string PasswordRecovery_DefaultAnswerRequiredErrorMessage;
    internal static string PasswordRecovery_DefaultBody;
    internal static string PasswordRecovery_DefaultGeneralFailureText;
    internal static string PasswordRecovery_DefaultUserNameFailureText;
    internal static string PasswordRecovery_DefaultQuestionInstructionText;
    internal static string PasswordRecovery_DefaultQuestionFailureText;
    internal static string PasswordRecovery_DefaultQuestionLabelText;
    internal static string PasswordRecovery_DefaultQuestionTitleText;
    internal static string PasswordRecovery_DefaultSubject;
    internal static string PasswordRecovery_DefaultSubmitButtonText;
    internal static string PasswordRecovery_DefaultSuccessText;
    internal static string PasswordRecovery_DefaultUserNameInstructionText;
    internal static string PasswordRecovery_DefaultUserNameLabelText;
    internal static string PasswordRecovery_DefaultUserNameRequiredErrorMessage;
    internal static string PasswordRecovery_DefaultUserNameTitleText;
    internal static string PasswordRecovery_GeneralFailureText;
    internal static string PasswordRecovery_InvalidBorderPadding;
    internal static string PasswordRecovery_MailDefinition;
    internal static string PasswordRecovery_NoUserNameTextBox;
    internal static string PasswordRecovery_NoAnswerTextBox;
    internal static string PasswordRecovery_QuestionFailureText;
    internal static string PasswordRecovery_QuestionInstructionText;
    internal static string PasswordRecovery_QuestionLabelText;
    internal static string PasswordRecovery_QuestionTemplate;
    internal static string PasswordRecovery_QuestionTemplateContainer;
    internal static string PasswordRecovery_QuestionTitleText;
    internal static string PasswordRecovery_RecoveryNotSupported;
    internal static string PasswordRecovery_SubmitButtonStyle;
    internal static string PasswordRecovery_SubmitButtonType;
    internal static string PasswordRecovery_SuccessTemplate;
    internal static string PasswordRecovery_SuccessTemplateContainer;
    internal static string PasswordRecovery_SuccessText;
    internal static string PasswordRecovery_SuccessTextStyle;
    internal static string PasswordRecovery_UserLookupError;
    internal static string PasswordRecovery_UserNameFailureText;
    internal static string PasswordRecovery_UserNameInstructionText;
    internal static string PasswordRecovery_UserNameLabelText;
    internal static string PasswordRecovery_UserNameTemplate;
    internal static string PasswordRecovery_UserNameTemplateContainer;
    internal static string PasswordRecovery_UserNameTitleText;
    internal static string PolygonHotSpot_Coordinates;
    internal static string RadioButton_GroupName;
    internal static string RadioButtonList_CellPadding;
    internal static string RadioButtonList_CellSpacing;
    internal static string RadioButtonList_RepeatColumns;
    internal static string RangeValidator_MaximumValue;
    internal static string RangeValidator_MinmumValue;
    internal static string RangeValidator_Type;
    internal static string ReadOnlyHierarchicalDataSourceView_CantAccessPathInEnumerable;
    internal static string RectangleHotSpot_Bottom;
    internal static string RectangleHotSpot_Right;
    internal static string RectangleHotSpot_Top;
    internal static string RectangleHotSpot_Left;
    internal static string RegularExpressionValidator_ValidationExpression;
    internal static string Repeater_AlternatingItemTemplate;
    internal static string Repeater_DataMember;
    internal static string Repeater_FooterTemplate;
    internal static string Repeater_Items;
    internal static string Repeater_ItemTemplate;
    internal static string Repeater_OnItemCommand;
    internal static string Repeater_SeparatorTemplate;
    internal static string RepeatInfo_ListLayoutDoesNotSupportHeaderFooterSeparator;
    internal static string RepeatInfo_ListLayoutOnlySupportsVerticalLayout;
    internal static string RepeatInfo_ListLayoutDoesNotSupportMultipleColumn;
    internal static string RepeatInfo_ListLayoutDoesNotSupportImpliedOuterTable;
    internal static string RequiredFieldValidator_InitialValue;
    internal static string SiteMapDataSource_Description;
    internal static string SiteMapDataSource_DisplayName;
    internal static string SiteMapDataSource_Provider;
    internal static string SiteMapDataSource_ContainsListCollection;
    internal static string SiteMapDataSource_StartingNodeOffset;
    internal static string SiteMapDataSource_StartingNodeUrl;
    internal static string SiteMapDataSource_SiteMapProvider;
    internal static string SiteMapDataSource_ProviderNotFound;
    internal static string SiteMapDataSource_DefaultProviderNotFound;
    internal static string SiteMapDataSource_ShowStartingNode;
    internal static string SiteMapDataSource_StartFromCurrentNode;
    internal static string SiteMapDataSource_StartingNodeUrlAndStartFromcurrentNode_Defined;
    internal static string GridView_AllowCustomPaging;
    internal static string GridView_AllowPaging;
    internal static string GridView_AllowSorting;
    internal static string GridView_AlternatingRowStyle;
    internal static string GridView_AutoGenerateDeleteButton;
    internal static string GridView_AutoGenerateEditButton;
    internal static string GridView_AutoGenerateSelectButton;
    internal static string GridView_CellPadding;
    internal static string GridView_CellSpacing;
    internal static string GridView_DataKeys;
    internal static string GridView_EditIndex;
    internal static string GridView_EditRowStyle;
    internal static string GridView_EnableSortingAndPagingCallbacks;
    internal static string GridView_EnablePersistedSelection;
    internal static string GridView_EmptyDataRowStyle;
    internal static string GridView_OnRowCancelingEdit;
    internal static string GridView_OnRowEditing;
    internal static string GridView_OnPageIndexChanging;
    internal static string GridView_OnPageIndexChanged;
    internal static string GridView_OnSelectedIndexChanged;
    internal static string GridView_OnSelectedIndexChanging;
    internal static string GridView_OnSorted;
    internal static string GridView_OnSorting;
    internal static string GridView_OnRowCommand;
    internal static string GridView_OnRowCreated;
    internal static string GridView_OnRowDataBound;
    internal static string GridView_PageCount;
    internal static string GridView_PageIndex;
    internal static string GridView_PagerSettings;
    internal static string GridView_PageSize;
    internal static string GridView_RowHeaderColumn;
    internal static string GridView_Rows;
    internal static string GridView_ShowHeaderWhenEmpty;
    internal static string GridView_SelectedIndex;
    internal static string GridView_SelectedRow;
    internal static string GridView_SelectedRowStyle;
    internal static string GridView_SortDirection;
    internal static string GridView_SortExpression;
    internal static string GridView_SortedAscendingCellStyle;
    internal static string GridView_SortedDescendingCellStyle;
    internal static string GridView_SortedAscendingHeaderStyle;
    internal static string GridView_SortedDescendingHeaderStyle;
    internal static string GridView_VirtualItemCount;
    internal static string PagerSettings_FirstPageImageUrl;
    internal static string PagerSettings_FirstPageText;
    internal static string PagerSettings_LastPageImageUrl;
    internal static string PagerSettings_LastPageText;
    internal static string PagerSettings_Mode;
    internal static string PagerSettings_NextPageImageUrl;
    internal static string PagerSettings_PageButtonCount;
    internal static string PagerSettings_PreviousPageImageUrl;
    internal static string PagerStyle_Position;
    internal static string PagerStyle_Visible;
    internal static string Style_BackColor;
    internal static string Style_BorderColor;
    internal static string Style_BorderWidth;
    internal static string Style_BorderStyle;
    internal static string Style_CSSClass;
    internal static string Style_Font;
    internal static string Style_ForeColor;
    internal static string Style_Height;
    internal static string Style_Width;
    internal static string Substitution_MethodNameDescr;
    internal static string Substitution_CannotBeInCachedControl;
    internal static string Substitution_BadMethodName;
    internal static string Substitution_NotAllowed;
    internal static string Substitution_SiteNotAllowed;
    internal static string Table_SectionsMustBeInOrder;
    internal static string Table_BackImageUrl;
    internal static string Table_Caption;
    internal static string Table_CellSpacing;
    internal static string Table_CellPadding;
    internal static string Table_GridLines;
    internal static string Table_HorizontalAlign;
    internal static string Table_Rows;
    internal static string TableCell_AssociatedHeaderCellNotFound;
    internal static string TableCell_AssociatedHeaderCellID;
    internal static string TableCell_ColumnSpan;
    internal static string TableCell_RowSpan;
    internal static string TableCell_Text;
    internal static string TableCell_Wrap;
    internal static string TableHeaderCell_AbbreviatedText;
    internal static string TableHeaderCell_Scope;
    internal static string TableHeaderCell_CategoryText;
    internal static string TableItemStyle_Wrap;
    internal static string TableRow_Cells;
    internal static string TableRow_TableSection;
    internal static string TableSectionStyle_Visible;
    internal static string TableStyle_BackImageUrl;
    internal static string TableStyle_CellPadding;
    internal static string TableStyle_CellSpacing;
    internal static string TableStyle_GridLines;
    internal static string TableStyle_InvalidCellSpacing;
    internal static string TableStyle_InvalidCellPadding;
    internal static string TableStyle_HorizontalAlign;
    internal static string Control_Missing_Attribute;
    internal static string TemplateColumn_EditItemTemplate;
    internal static string TemplateColumn_FooterTemplate;
    internal static string TemplateColumn_HeaderTemplate;
    internal static string TemplateColumn_ItemTemplate;
    internal static string TemplateField_AlternatingItemTemplate;
    internal static string TemplateField_EditItemTemplate;
    internal static string TemplateField_FooterTemplate;
    internal static string TemplateField_HeaderTemplate;
    internal static string TemplateField_InsertItemTemplate;
    internal static string TemplateField_ItemTemplate;
    internal static string TextBox_AutoCompleteType;
    internal static string TextBox_AutoPostBack;
    internal static string TextBox_Columns;
    internal static string TextBox_InvalidColumns;
    internal static string TextBox_InvalidRows;
    internal static string TextBox_MaxLength;
    internal static string TextBox_TextMode;
    internal static string TextBox_ReadOnly;
    internal static string TextBox_Rows;
    internal static string TextBox_Text;
    internal static string TextBox_Wrap;
    internal static string TextBox_OnTextChanged;
    internal static string TreeNodeStyle_ChildNodesPadding;
    internal static string TreeNodeStyle_HorizontalPadding;
    internal static string TreeNodeStyle_ImageUrl;
    internal static string TreeNodeStyle_NodeSpacing;
    internal static string TreeNodeStyle_VerticalPadding;
    internal static string TreeNodeStyleCollection_InvalidArgument;
    internal static string TreeNodeBinding_Depth;
    internal static string TreeNodeBinding_EmptyBindingText;
    internal static string TreeNodeBinding_FormatString;
    internal static string TreeNodeBinding_ImageToolTip;
    internal static string TreeNodeBinding_ImageToolTipField;
    internal static string TreeNodeBinding_ImageUrl;
    internal static string TreeNodeBinding_ImageUrlField;
    internal static string TreeNodeBinding_NavigateUrl;
    internal static string TreeNodeBinding_NavigateUrlField;
    internal static string TreeNodeBinding_PopulateOnDemand;
    internal static string TreeNodeBinding_SelectAction;
    internal static string TreeNodeBinding_ShowCheckBox;
    internal static string TreeNodeBinding_Target;
    internal static string TreeNodeBinding_TargetField;
    internal static string TreeNodeBinding_Text;
    internal static string TreeNodeBinding_TextField;
    internal static string TreeNodeBinding_ToolTip;
    internal static string TreeNodeBinding_ToolTipField;
    internal static string TreeNodeBinding_Value;
    internal static string TreeNodeBinding_ValueField;
    internal static string TreeNodeCollection_InvalidArrayType;
    internal static string TreeNode_Checked;
    internal static string TreeView_DataSourceReturnedNullView;
    internal static string TreeNode_Expanded;
    internal static string TreeNode_ImageToolTip;
    internal static string TreeNode_ImageUrl;
    internal static string TreeView_InvalidDataBinding;
    internal static string TreeNode_NavigateUrl;
    internal static string TreeNode_PopulateOnDemand;
    internal static string TreeView_PopulateOnlyForDataSourceControls;
    internal static string TreeView_PopulateOnlyEmptyNodes;
    internal static string TreeNode_Selected;
    internal static string TreeNode_SelectAction;
    internal static string TreeNode_ShowCheckBox;
    internal static string TreeNode_Target;
    internal static string TreeNode_Text;
    internal static string TreeNode_ToolTip;
    internal static string TreeNode_Value;
    internal static string TreeView_AutoGenerateDataBindings;
    internal static string TreeView_DataBindings;
    internal static string TreeView_CollapseImageToolTip;
    internal static string TreeView_CollapseImageToolTipDefaultValue;
    internal static string TreeView_CollapseImageUrl;
    internal static string TreeView_Default_SkipLinkText;
    internal static string TreeView_EnableClientScript;
    internal static string TreeView_ExpandImageToolTip;
    internal static string TreeView_ExpandImageToolTipDefaultValue;
    internal static string TreeView_ExpandImageUrl;
    internal static string TreeView_HoverNodeStyle;
    internal static string TreeView_ExpandDepth;
    internal static string TreeView_ImageSet;
    internal static string TreeView_LeafNodeStyle;
    internal static string TreeView_LevelStyles;
    internal static string TreeView_LineImagesFolderUrl;
    internal static string TreeView_MaxDataBindDepth;
    internal static string TreeView_NoExpandImageUrl;
    internal static string TreeView_NodeIndent;
    internal static string TreeView_Nodes;
    internal static string TreeView_NodeStyle;
    internal static string TreeView_NodeWrap;
    internal static string TreeView_ParentNodeStyle;
    internal static string TreeView_PathSeparator;
    internal static string TreeView_PopulateNodesFromClient;
    internal static string TreeView_RootNodeStyle;
    internal static string TreeView_SelectedNodeStyle;
    internal static string TreeView_ShowCheckBoxes;
    internal static string TreeView_ShowExpandCollapse;
    internal static string TreeView_ShowLines;
    internal static string TreeView_SkipLinkText;
    internal static string TreeView_CheckChanged;
    internal static string TreeView_SelectedNodeChanged;
    internal static string TreeView_TreeNodeCollapsed;
    internal static string TreeView_TreeNodeExpanded;
    internal static string TreeView_TreeNodeDataBound;
    internal static string TreeView_TreeNodePopulate;
    internal static string ValidationSummary_DisplayMode;
    internal static string ValidationSummary_HeaderText;
    internal static string ValidationSummary_ShowMessageBox;
    internal static string ValidationSummary_ShowModelStateErrors;
    internal static string ValidationSummary_ShowSummary;
    internal static string ValidationSummary_ShowValidationErrors;
    internal static string ValidationSummary_EnableClientScript;
    internal static string ValidationSummary_ValidationGroup;
    internal static string PostBackControl_ValidationGroup;
    internal static string AutoPostBackControl_CausesValidation;
    internal static string Calendar_Caption;
    internal static string Calendar_CellPadding;
    internal static string Calendar_CellSpacing;
    internal static string Calendar_DayHeaderStyle;
    internal static string Calendar_DayNameFormat;
    internal static string Calendar_DayStyle;
    internal static string Calendar_FirstDayOfWeek;
    internal static string Calendar_NextMonthText;
    internal static string Calendar_NextPrevFormat;
    internal static string Calendar_NextPrevStyle;
    internal static string Calendar_OtherMonthDayStyle;
    internal static string Calendar_PrevMonthText;
    internal static string Calendar_SelectedDate;
    internal static string Calendar_SelectedDates;
    internal static string Calendar_SelectedDayStyle;
    internal static string Calendar_SelectionMode;
    internal static string Calendar_SelectMonthText;
    internal static string Calendar_SelectorStyle;
    internal static string Calendar_SelectWeekText;
    internal static string Calendar_ShowDayHeader;
    internal static string Calendar_ShowGridLines;
    internal static string Calendar_ShowNextPrevMonth;
    internal static string Calendar_ShowTitle;
    internal static string Calendar_TitleFormat;
    internal static string Calendar_TitleStyle;
    internal static string Calendar_TodayDayStyle;
    internal static string Calendar_TodaysDate;
    internal static string Calendar_VisibleDate;
    internal static string Calendar_WeekendDayStyle;
    internal static string Calendar_OnDayRender;
    internal static string Calendar_OnSelectionChanged;
    internal static string Calendar_OnVisibleMonthChanged;
    internal static string Calendar_TitleText;
    internal static string Calendar_PreviousMonthTitle;
    internal static string Calendar_NextMonthTitle;
    internal static string Calendar_SelectMonthTitle;
    internal static string Calendar_SelectWeekTitle;
    internal static string View_Activate;
    internal static string View_Deactivate;
    internal static string ViewCollection_must_contain_view;
    internal static string WebControl_AccessKey;
    internal static string WebControl_InvalidAccessKey;
    internal static string WebControl_Attributes;
    internal static string WebControl_BackColor;
    internal static string WebControl_BorderColor;
    internal static string WebControl_BorderWidth;
    internal static string WebControl_BorderStyle;
    internal static string WebControl_CSSClassName;
    internal static string WebControl_ControlStyle;
    internal static string WebControl_ControlStyleCreated;
    internal static string WebControl_Enabled;
    internal static string WebControl_Font;
    internal static string WebControl_ForeColor;
    internal static string WebControl_Height;
    internal static string WebControl_Style;
    internal static string WebControl_TabIndex;
    internal static string WebControl_Tooltip;
    internal static string WebControl_Width;
    internal static string Wizard_ActiveStep;
    internal static string Wizard_ActiveStepIndex;
    internal static string Wizard_ActiveStepIndex_out_of_range;
    internal static string Wizard_CancelButtonClick;
    internal static string Wizard_CancelButtonImageUrl;
    internal static string Wizard_CancelButtonText;
    internal static string Wizard_CancelButtonType;
    internal static string Wizard_CancelButtonStyle;
    internal static string Wizard_CancelDestinationPageUrl;
    internal static string Wizard_CellPadding;
    internal static string Wizard_CellSpacing;
    internal static string Wizard_Default_CancelButtonText;
    internal static string Wizard_DisplayCancelButton;
    internal static string Wizard_FinishDestinationPageUrl;
    internal static string Wizard_FinishCompleteButtonStyle;
    internal static string Wizard_FinishCompleteButtonText;
    internal static string Wizard_FinishCompleteButtonType;
    internal static string Wizard_FinishCompleteButtonImageUrl;
    internal static string Wizard_FinishPreviousButtonStyle;
    internal static string Wizard_FinishPreviousButtonText;
    internal static string Wizard_FinishPreviousButtonType;
    internal static string Wizard_FinishPreviousButtonImageUrl;
    internal static string Wizard_FinishNavigationTemplate;
    internal static string Wizard_InvalidBubbleEvent;
    internal static string Wizard_NavigationButtonStyle;
    internal static string Wizard_NavigationStyle;
    internal static string Wizard_StepNextButtonStyle;
    internal static string Wizard_StepNextButtonText;
    internal static string Wizard_StepNextButtonType;
    internal static string Wizard_StepNextButtonImageUrl;
    internal static string Wizard_StepPreviousButtonStyle;
    internal static string Wizard_StepPreviousButtonText;
    internal static string Wizard_StepPreviousButtonType;
    internal static string Wizard_StepPreviousButtonImageUrl;
    internal static string Wizard_SideBarButtonStyle;
    internal static string Wizard_DisplaySideBar;
    internal static string Wizard_SideBarStyle;
    internal static string Wizard_SideBarTemplate;
    internal static string Wizard_StartNavigationTemplate;
    internal static string Wizard_StartNextButtonStyle;
    internal static string Wizard_StartNextButtonText;
    internal static string Wizard_StartNextButtonType;
    internal static string Wizard_StartNextButtonImageUrl;
    internal static string Wizard_Step_Not_In_Wizard;
    internal static string Wizard_StepNavigationTemplate;
    internal static string Wizard_StepStyle;
    internal static string Wizard_WizardSteps;
    internal static string Wizard_HeaderText;
    internal static string Wizard_Default_SkipToContentText;
    internal static string Wizard_ActiveStepChanged;
    internal static string Wizard_FinishButtonClick;
    internal static string Wizard_NextButtonClick;
    internal static string Wizard_PreviousButtonClick;
    internal static string Wizard_SideBarButtonClick;
    internal static string Wizard_Default_StepPreviousButtonText;
    internal static string Wizard_Default_StepNextButtonText;
    internal static string Wizard_Default_FinishButtonText;
    internal static string Wizard_SideBar_Button_Not_Found;
    internal static string Wizard_DataList_Not_Found;
    internal static string Wizard_Cannot_Modify_ControlCollection;
    internal static string Wizard_Header_Placeholder_Must_Be_Specified_For_HeaderTemplate;
    internal static string Wizard_Header_Placeholder_Must_Be_Specified_For_HeaderText;
    internal static string Wizard_Navigation_Placeholder_Must_Be_Specified;
    internal static string Wizard_Sidebar_Placeholder_Must_Be_Specified;
    internal static string Wizard_Step_Placeholder_Must_Be_Specified;
    internal static string Wizard_LayoutTemplate;
    internal static string Wizard_WizardStepOnly;
    internal static string WizardStep_AllowReturn;
    internal static string WizardStep_Name;
    internal static string WizardStep_Title;
    internal static string WizardStep_StepType;
    internal static string WizardStep_WrongContainment;
    internal static string Xml_DocumentContent;
    internal static string Xml_DocumentSource;
    internal static string Xml_TransformSource;
    internal static string Xml_Document;
    internal static string Xml_Transform;
    internal static string Xml_TransformArgumentList;
    internal static string Xml_XPathNavigator;
    internal static string XmlDataSource_Data;
    internal static string XmlDataSource_DataFile;
    internal static string XmlDataSource_Transform;
    internal static string XmlDataSource_TransformFile;
    internal static string XmlDataSource_XPath;
    internal static string XmlDataSource_Transforming;
    internal static string AppearanceEditorPart_Title;
    internal static string AppearanceEditorPart_Height;
    internal static string AppearanceEditorPart_Width;
    internal static string AppearanceEditorPart_ChromeType;
    internal static string AppearanceEditorPart_Hidden;
    internal static string AppearanceEditorPart_Direction;
    internal static string AppearanceEditorPart_PartTitle;
    internal static string AppearanceEditorPart_Pixels;
    internal static string AppearanceEditorPart_Points;
    internal static string AppearanceEditorPart_Picas;
    internal static string AppearanceEditorPart_Inches;
    internal static string AppearanceEditorPart_Millimeters;
    internal static string AppearanceEditorPart_Centimeters;
    internal static string AppearanceEditorPart_Percent;
    internal static string AppearanceEditorPart_Em;
    internal static string AppearanceEditorPart_Ex;
    internal static string BehaviorEditorPart_AllowClose;
    internal static string BehaviorEditorPart_AllowConnect;
    internal static string BehaviorEditorPart_AllowHide;
    internal static string BehaviorEditorPart_AllowMinimize;
    internal static string BehaviorEditorPart_AllowZoneChange;
    internal static string BehaviorEditorPart_ExportMode;
    internal static string BehaviorEditorPart_ExportModeNone;
    internal static string BehaviorEditorPart_ExportModeAll;
    internal static string BehaviorEditorPart_ExportModeNonSensitiveData;
    internal static string BehaviorEditorPart_HelpMode;
    internal static string BehaviorEditorPart_HelpModeModal;
    internal static string BehaviorEditorPart_HelpModeModeless;
    internal static string BehaviorEditorPart_HelpModeNavigate;
    internal static string BehaviorEditorPart_Description;
    internal static string BehaviorEditorPart_TitleLink;
    internal static string BehaviorEditorPart_TitleIconImageLink;
    internal static string BehaviorEditorPart_CatalogIconImageLink;
    internal static string BehaviorEditorPart_HelpLink;
    internal static string BehaviorEditorPart_ImportErrorMessage;
    internal static string BehaviorEditorPart_AuthorizationFilter;
    internal static string BehaviorEditorPart_AllowEdit;
    internal static string BehaviorEditorPart_PartTitle;
    internal static string BlobPersonalizationState_CantApply;
    internal static string BlobPersonalizationState_CantExtract;
    internal static string BlobPersonalizationState_DeserializeError;
    internal static string BlobPersonalizationState_NotApplied;
    internal static string BlobPersonalizationState_NotLoaded;
    internal static string CatalogPart_MustBeInZone;
    internal static string CatalogPart_SampleWebPartTitle;
    internal static string CatalogPart_UnknownDescription;
    internal static string CatalogZone_OnlyCatalogParts;
    internal static string CatalogZoneBase_AddVerb;
    internal static string CatalogZoneBase_CloseVerb;
    internal static string CatalogZoneBase_DefaultEmptyZoneText;
    internal static string CatalogZoneBase_DefaultSelectTargetZoneText;
    internal static string CatalogZoneBase_HeaderText;
    internal static string CatalogZoneBase_InstructionText;
    internal static string CatalogZoneBase_NoCatalogPartID;
    internal static string CatalogZoneBase_PartLinkStyle;
    internal static string CatalogZoneBase_SelectCatalogPart;
    internal static string CatalogZoneBase_SelectedCatalogPartID;
    internal static string CatalogZoneBase_SelectedPartLinkStyle;
    internal static string CatalogZoneBase_SelectTargetZoneText;
    internal static string CatalogZoneBase_ShowCatalogIcons;
    internal static string ConnectionConsumerAttribute_InvalidConnectionPointType;
    internal static string ConnectionProviderAttribute_InvalidConnectionPointType;
    internal static string ConnectionsZone_CancelVerb;
    internal static string ConnectionsZone_ConfigureConnectionTitle;
    internal static string ConnectionsZone_ConfigureConnectionTitleDescription;
    internal static string ConnectionsZone_ConfigureVerb;
    internal static string ConnectionsZone_ConnectToConsumerInstructionText;
    internal static string ConnectionsZone_ConnectToConsumerInstructionTextDescription;
    internal static string ConnectionsZone_ConnectToConsumerText;
    internal static string ConnectionsZone_ConnectToConsumerTextDescription;
    internal static string ConnectionsZone_ConnectToConsumerTitle;
    internal static string ConnectionsZone_ConnectToConsumerTitleDescription;
    internal static string ConnectionsZone_ConnectToProviderInstructionText;
    internal static string ConnectionsZone_ConnectToProviderInstructionTextDescription;
    internal static string ConnectionsZone_ConnectToProviderText;
    internal static string ConnectionsZone_ConnectToProviderTextDescription;
    internal static string ConnectionsZone_ConnectToProviderTitle;
    internal static string ConnectionsZone_ConnectToProviderTitleDescription;
    internal static string ConnectionsZone_ConnectVerb;
    internal static string ConnectionsZone_ConsumersInstructionText;
    internal static string ConnectionsZone_ConsumersInstructionTextDescription;
    internal static string ConnectionsZone_ConsumersTitle;
    internal static string ConnectionsZone_ConsumersTitleDescription;
    internal static string ConnectionsZone_CloseVerb;
    internal static string ConnectionsZone_DisconnectVerb;
    internal static string ConnectionsZone_DisconnectInvalid;
    internal static string ConnectionsZone_ErrorCantContinueConnectionCreation;
    internal static string ConnectionsZone_ErrorMessage;
    internal static string ConnectionsZone_Get;
    internal static string ConnectionsZone_GetDescription;
    internal static string ConnectionsZone_GetFromText;
    internal static string ConnectionsZone_GetFromTextDescription;
    internal static string ConnectionsZone_HeaderText;
    internal static string ConnectionsZone_HeaderTextDescription;
    internal static string ConnectionsZone_InstructionText;
    internal static string ConnectionsZone_InstructionTextDescription;
    internal static string ConnectionsZone_InstructionTitle;
    internal static string ConnectionsZone_InstructionTitleDescription;
    internal static string ConnectionsZone_MustImplementITransformerConfigurationControl;
    internal static string ConnectionsZone_NoConsumers;
    internal static string ConnectionsZone_NoExistingConnectionTitle;
    internal static string ConnectionsZone_NoExistingConnectionTitleDescription;
    internal static string ConnectionsZone_NoExistingConnectionInstructionText;
    internal static string ConnectionsZone_NoExistingConnectionInstructionTextDescription;
    internal static string ConnectionsZone_NoProviders;
    internal static string ConnectionsZone_ProvidersInstructionText;
    internal static string ConnectionsZone_ProvidersInstructionTextDescription;
    internal static string ConnectionsZone_ProvidersTitle;
    internal static string ConnectionsZone_ProvidersTitleDescription;
    internal static string ConnectionsZone_SendText;
    internal static string ConnectionsZone_SendTextDescription;
    internal static string ConnectionsZone_SendToText;
    internal static string ConnectionsZone_SendToTextDescription;
    internal static string ConnectionsZone_WarningConnectionDisabled;
    internal static string ConnectionsZone_WarningMessage;
    internal static string ConnectionPoint_InvalidControlType;
    internal static string ContentDirection_NotSet;
    internal static string ContentDirection_LeftToRight;
    internal static string ContentDirection_RightToLeft;
    internal static string DeclarativeCatalogPart_PartTitle;
    internal static string DeclarativeCatlaogPart_WebPartsListUserControlPath;
    internal static string EditorPart_MustBeInZone;
    internal static string EditorPart_ErrorBadUrl;
    internal static string EditorPart_ErrorConvertingProperty;
    internal static string EditorPart_ErrorConvertingPropertyWithType;
    internal static string EditorPart_ErrorSettingProperty;
    internal static string EditorPart_ErrorSettingPropertyWithExceptionMessage;
    internal static string EditorPart_PropertyMaxValue;
    internal static string EditorPart_PropertyMinValue;
    internal static string EditorPart_PropertyMustBeDecimal;
    internal static string EditorPart_PropertyMustBeInteger;
    internal static string EditorZone_OnlyEditorParts;
    internal static string EditorZoneBase_ApplyVerb;
    internal static string EditorZoneBase_CancelVerb;
    internal static string EditorZoneBase_DefaultEmptyZoneText;
    internal static string EditorZoneBase_DefaultErrorText;
    internal static string EditorZoneBase_DefaultHeaderText;
    internal static string EditorZoneBase_DefaultInstructionText;
    internal static string EditorZoneBase_ErrorText;
    internal static string EditorZoneBase_NoEditorPartID;
    internal static string EditorZoneBase_OKVerb;
    internal static string ErrorWebPart_ErrorText;
    internal static string GenericWebPart_CannotWrapWebPart;
    internal static string GenericWebPart_CannotWrapOutputCachedControl;
    internal static string GenericWebPart_NoID;
    internal static string GenericWebPart_CannotModify;
    internal static string GenericWebPart_ChildControlIsNull;
    internal static string ImportCatalogPart_PartTitle;
    internal static string ImportCatalogPart_Browse;
    internal static string ImportCatalogPart_BrowseHelpText;
    internal static string ImportCatalogPart_Upload;
    internal static string ImportCatalogPart_UploadHelpText;
    internal static string ImportCatalogPart_UploadButton;
    internal static string ImportCatalogPart_UploadButtonText;
    internal static string ImportCatalogPart_ImportedPartLabel;
    internal static string ImportCatalogPart_ImportedPartErrorLabel;
    internal static string ImportCatalogPart_PartImportErrorLabelText;
    internal static string ImportCatalogPart_ImportedPartLabelText;
    internal static string ImportCatalogPart_NoFileName;
    internal static string LayoutEditorPart_ChromeState;
    internal static string LayoutEditorPart_Zone;
    internal static string LayoutEditorPart_ZoneIndex;
    internal static string LayoutEditorPart_PartTitle;
    internal static string PageCatalogPart_PartTitle;
    internal static string Part_Description;
    internal static string Part_ChromeState;
    internal static string Part_ChromeType;
    internal static string Part_Title;
    internal static string Part_Unknown;
    internal static string Part_Untitled;
    internal static string PartChromeState_Normal;
    internal static string PartChromeState_Minimized;
    internal static string PartChromeType_Default;
    internal static string PartChromeType_TitleAndBorder;
    internal static string PartChromeType_TitleOnly;
    internal static string PartChromeType_BorderOnly;
    internal static string PartChromeType_None;
    internal static string PersonalizableTypeEntry_InvalidProperty;
    internal static string PersonalizationDictionary_MustBeTypeString;
    internal static string PersonalizationDictionary_MustBeTypePersonalizationEntry;
    internal static string PersonalizationDictionary_MustBeTypeDictionaryEntryArray;
    internal static string PersonalizationProvider_ApplicationNameExceedMaxLength;
    internal static string PersonalizationProvider_BadConnection;
    internal static string PersonalizationProvider_CantAccess;
    internal static string PersonalizationProvider_NoConnection;
    internal static string PersonalizationProvider_UnknownProp;
    internal static string PersonalizationProvider_WrongType;
    internal static string PropertyGridEditorPart_PartTitle;
    internal static string PropertyGridEditorPart_DesignModeWebPart_BoolProperty;
    internal static string PropertyGridEditorPart_DesignModeWebPart_EnumProperty;
    internal static string PropertyGridEditorPart_DesignModeWebPart_StringProperty;
    internal static string ProxyWebPartConnectionCollection_ReadOnly;
    internal static string RowToFieldTransformer_FieldName;
    internal static string RowToFieldTransformer_NoProviderSchema;
    internal static string RowToParametersTransformer_DifferentFieldNamesLength;
    internal static string RowToParametersTransformer_ConsumerFieldName;
    internal static string RowToParametersTransformer_NoConsumerSchema;
    internal static string RowToParametersTransformer_ProviderFieldName;
    internal static string RowToParametersTransformer_NoProviderSchema;
    internal static string SqlPersonalizationProvider_Description;
    internal static string ToolZone_CantSetVisible;
    internal static string ToolZone_EditUIStyle;
    internal static string ToolZone_HeaderCloseVerb;
    internal static string ToolZone_HeaderVerbStyle;
    internal static string ToolZone_InstructionText;
    internal static string ToolZone_InstructionTextStyle;
    internal static string ToolZone_LabelStyle;
    internal static string ToolZone_DisplayModesReadOnly;
    internal static string WebPartTransformerAttribute_Missing;
    internal static string WebPartTransformerAttribute_NotTransformer;
    internal static string WebPartTransformerAttribute_SameTypes;
    internal static string WebPartTransformerCollection_NotEmpty;
    internal static string WebPartTransformerCollection_ReadOnly;
    internal static string UnknownWebPart;
    internal static string WebPart_AllowClose;
    internal static string WebPart_AllowConnect;
    internal static string WebPart_AllowEdit;
    internal static string WebPart_AllowHide;
    internal static string WebPart_AllowMinimize;
    internal static string WebPart_AllowZoneChange;
    internal static string WebPart_AuthorizationFilter;
    internal static string WebPart_BadUrl;
    internal static string WebPart_CatalogIconImageUrl;
    internal static string WebPart_CantSetExportMode;
    internal static string WebPart_DefaultImportErrorMessage;
    internal static string WebPart_ErrorFormatString;
    internal static string WebPart_ExportMode;
    internal static string WebPart_HelpMode;
    internal static string WebPart_HelpUrl;
    internal static string WebPart_Hidden;
    internal static string WebPart_HiddenFormatString;
    internal static string WebPart_ImportErrorInvalidVersion;
    internal static string WebPart_ImportErrorMessage;
    internal static string WebPart_ImportErrorNoVersion;
    internal static string WebPart_NonWebPart;
    internal static string WebPart_NotStandalone;
    internal static string WebPart_OnlyStandalone;
    internal static string WebPart_SetZoneTemplateTooLate;
    internal static string WebPart_TitleIconImageUrl;
    internal static string WebPart_TitleUrl;
    internal static string WebPart_Collection_DuplicateID;
    internal static string WebPartActionVerb_CantSetChecked;
    internal static string WebPartCatalogAddVerb_Description;
    internal static string WebPartCatalogAddVerb_Text;
    internal static string WebPartCatalogCloseVerb_Description;
    internal static string WebPartCatalogCloseVerb_Text;
    internal static string WebPartChrome_ConfirmExportSensitive;
    internal static string WebPartCloseVerb_Description;
    internal static string WebPartCloseVerb_Text;
    internal static string WebPartConnectVerb_Description;
    internal static string WebPartConnectVerb_Text;
    internal static string WebPartConnection_ConsumerIDNotSet;
    internal static string WebPartConnection_ConsumerRequiresSecondaryInterfaces;
    internal static string WebPartConnection_DisabledConnectionPoint;
    internal static string WebPartConnection_Duplicate;
    internal static string WebPartConnection_IncompatibleConsumerTransformer;
    internal static string WebPartConnection_IncompatibleConsumerTransformerWithType;
    internal static string WebPartConnection_IncompatibleProviderTransformer;
    internal static string WebPartConnection_IncompatibleProviderTransformerWithType;
    internal static string WebPartConnection_IncompatibleSecondaryInterfaces;
    internal static string WebPartConnection_NoCommonInterface;
    internal static string WebPartConnection_NoConsumer;
    internal static string WebPartConnection_NoConsumerConnectionPoint;
    internal static string WebPartConnection_NoID;
    internal static string WebPartConnection_NoProvider;
    internal static string WebPartConnection_NoProviderConnectionPoint;
    internal static string WebPartConnection_ProviderIDNotSet;
    internal static string WebPartConnection_TransformerNotAvailable;
    internal static string WebPartConnection_TransformerNotAvailableWithType;
    internal static string WebPartConnectionsCancelVerb_Description;
    internal static string WebPartConnectionsCancelVerb_Text;
    internal static string WebPartConnectionsCloseVerb_Description;
    internal static string WebPartConnectionsCloseVerb_Text;
    internal static string WebPartConnectionsConfigureVerb_Description;
    internal static string WebPartConnectionsConfigureVerb_Text;
    internal static string WebPartConnectionsConnectVerb_Description;
    internal static string WebPartConnectionsConnectVerb_Text;
    internal static string WebPartConnectionsDisconnectVerb_Description;
    internal static string WebPartConnectionsDisconnectVerb_Text;
    internal static string WebPartDeleteVerb_Description;
    internal static string WebPartDeleteVerb_Text;
    internal static string WebPartDisplayModeCollection_CantRemove;
    internal static string WebPartDisplayModeCollection_CantSet;
    internal static string WebPartDisplayModeCollection_DuplicateName;
    internal static string WebPartEditorApplyVerb_Description;
    internal static string WebPartEditorApplyVerb_Text;
    internal static string WebPartEditorCancelVerb_Description;
    internal static string WebPartEditorCancelVerb_Text;
    internal static string WebPartEditorOKVerb_Description;
    internal static string WebPartEditorOKVerb_Text;
    internal static string WebPartEditVerb_Description;
    internal static string WebPartEditVerb_Text;
    internal static string WebPartExportHandler_InvalidArgument;
    internal static string WebPartExportHandler_DisabledExportHandler;
    internal static string WebPartExportVerb_Description;
    internal static string WebPartExportVerb_Text;
    internal static string WebPartHeaderCloseVerb_Description;
    internal static string WebPartHeaderCloseVerb_Text;
    internal static string WebPartHelpVerb_Description;
    internal static string WebPartHelpVerb_Text;
    internal static string WebPartManager_Personalization;
    internal static string WebPartManager_MustRegister;
    internal static string WebPartManager_UnknownConnection;
    internal static string WebPartManager_AlreadyInConnect;
    internal static string WebPartManager_AlreadyInZone;
    internal static string WebPartManager_MustBeInConnect;
    internal static string WebPartManager_AlreadyInEdit;
    internal static string WebPartManager_MustBeInEdit;
    internal static string WebPartManager_InvalidConnectionPoint;
    internal static string WebPartManager_NoSelectedWebPartConnect;
    internal static string WebPartManager_NoSelectedWebPartEdit;
    internal static string WebPartManager_MustBeInZone;
    internal static string WebPartManager_OnlyOneInstance;
    internal static string WebPartManager_AlreadyRegistered;
    internal static string WebPartManager_NoZoneID;
    internal static string WebPartManager_DuplicateZoneID;
    internal static string WebPartManager_CannotModify;
    internal static string WebPartManager_NoWebPartID;
    internal static string WebPartManager_NoChildControlID;
    internal static string WebPartManager_DuplicateWebPartID;
    internal static string WebPartManager_StaticConnections;
    internal static string WebPartManager_InvalidConsumerSignature;
    internal static string WebPartManager_InvalidProviderSignature;
    internal static string WebPartManager_ConnectTooLate;
    internal static string WebPartManager_DisconnectTooLate;
    internal static string WebPartManager_EnableClientScript;
    internal static string WebPartManager_ForbiddenType;
    internal static string WebPartManager_PartNotExportable;
    internal static string WebPartManager_ImportInvalidFormat;
    internal static string WebPartManager_ImportInvalidData;
    internal static string WebPartManager_RegisterTooLate;
    internal static string WebPartManager_ExportSensitiveDataWarning;
    internal static string WebPartManager_AlreadyDisconnected;
    internal static string WebPartManager_ConnectionsReadOnly;
    internal static string WebPartManager_DynamicConnectionsReadOnly;
    internal static string WebPartManager_StaticConnectionsReadOnly;
    internal static string WebPartManager_DisplayModesReadOnly;
    internal static string WebPartManager_InvalidDisplayMode;
    internal static string WebPartManager_DisabledDisplayMode;
    internal static string WebPartManager_CloseProviderWarning;
    internal static string WebPartManager_DefaultCloseProviderWarning;
    internal static string WebPartManager_DeleteWarning;
    internal static string WebPartManager_DefaultDeleteWarning;
    internal static string WebPartManager_CantConnectClosed;
    internal static string WebPartManager_DuplicateConnectionID;
    internal static string WebPartManager_AuthorizeWebPart;
    internal static string WebPartManager_ConnectionsActivated;
    internal static string WebPartManager_ConnectionsActivating;
    internal static string WebPartManager_DisplayModeChanged;
    internal static string WebPartManager_DisplayModeChanging;
    internal static string WebPartManager_SelectedWebPartChanged;
    internal static string WebPartManager_SelectedWebPartChanging;
    internal static string WebPartManager_WebPartAdded;
    internal static string WebPartManager_WebPartAdding;
    internal static string WebPartManager_WebPartClosed;
    internal static string WebPartManager_WebPartClosing;
    internal static string WebPartManager_WebPartDeleted;
    internal static string WebPartManager_WebPartDeleting;
    internal static string WebPartManager_WebPartMoved;
    internal static string WebPartManager_WebPartMoving;
    internal static string WebPartManager_WebPartsConnected;
    internal static string WebPartManager_WebPartsConnecting;
    internal static string WebPartManager_WebPartsDisconnected;
    internal static string WebPartManager_WebPartsDisconnecting;
    internal static string WebPartManager_CantDeleteStatic;
    internal static string WebPartManager_CantDeleteSharedInUserScope;
    internal static string WebPartManager_CantAddControlType;
    internal static string WebPartManager_PathCannotBeEmpty;
    internal static string WebPartManager_PathMustBeEmpty;
    internal static string WebPartManager_CantCreateInstance;
    internal static string WebPartManager_CantCreateInstanceWithType;
    internal static string WebPartManager_TypeMustDeriveFromControl;
    internal static string WebPartManager_TypeMustDeriveFromControlWithType;
    internal static string WebPartManager_InvalidPath;
    internal static string WebPartManager_InvalidPathWithPath;
    internal static string WebPartManager_CantCreateGeneric;
    internal static string WebPartManager_CantBeginConnectingClosed;
    internal static string WebPartManager_CantBeginEditingClosed;
    internal static string WebPartManager_AlreadyClosed;
    internal static string WebPartManager_CantSetEnableTheming;
    internal static string WebPartManager_CantConnectToSelf;
    internal static string WebPartManager_ErrorLoadingWebPartType;
    internal static string WebPartManagerRequired;
    internal static string WebPartMenu_DefaultDropDownAlternateText;
    internal static string WebPartMenuStyle_ShadowColor;
    internal static string WebPartMinimizeVerb_Description;
    internal static string WebPartMinimizeVerb_Text;
    internal static string WebPartPersonalization_CannotLoadPersonalization;
    internal static string WebPartPersonalization_CannotEnterSharedScope;
    internal static string WebPartPersonalization_CantCallMethodBeforeInit;
    internal static string WebPartPersonalization_CantUsePropertyBeforeInit;
    internal static string WebPartPersonalization_Enabled;
    internal static string WebPartPersonalization_InitialScope;
    internal static string WebPartPersonalization_MustSetBeforeInit;
    internal static string WebPartPersonalization_PersonalizationNotEnabled;
    internal static string WebPartPersonalization_PersonalizationNotModifiable;
    internal static string WebPartPersonalization_PersonalizationStateNotLoaded;
    internal static string WebPartPersonalization_ProviderName;
    internal static string WebPartPersonalization_ProviderNotFound;
    internal static string WebPartPersonalization_SameType;
    internal static string WebPartRestoreVerb_Description;
    internal static string WebPartRestoreVerb_Text;
    internal static string WebPartTracker_CircularConnection;
    internal static string WebPartVerb_Checked;
    internal static string WebPartVerb_Description;
    internal static string WebPartVerb_Enabled;
    internal static string WebPartVerb_ImageUrl;
    internal static string WebPartVerb_Text;
    internal static string WebPartVerb_Visible;
    internal static string WebPartZoneBase_AllowLayoutChange;
    internal static string WebPartZoneBase_CloseVerb;
    internal static string WebPartZoneBase_ConnectVerb;
    internal static string WebPartZoneBase_CreateVerbs;
    internal static string WebPartZoneBase_DefaultEmptyZoneText;
    internal static string WebPartZoneBase_DeleteVerb;
    internal static string WebPartZoneBase_DisplayTitleFallback;
    internal static string WebPartZoneBase_DragHighlightColor;
    internal static string WebPartZoneBase_EditVerb;
    internal static string WebPartZoneBase_ExportVerb;
    internal static string WebPartZoneBase_HelpVerb;
    internal static string WebPartZoneBase_LayoutOrientation;
    internal static string WebPartZoneBase_MenuPopupStyle;
    internal static string WebPartZoneBase_MenuCheckImageStyle;
    internal static string WebPartZoneBase_MenuCheckImageUrl;
    internal static string WebPartZoneBase_MenuLabelHoverStyle;
    internal static string WebPartZoneBase_MenuLabelStyle;
    internal static string WebPartZoneBase_MenuLabelText;
    internal static string WebPartZoneBase_MenuPopupImageUrl;
    internal static string WebPartZoneBase_MenuVerbHoverStyle;
    internal static string WebPartZoneBase_MenuVerbStyle;
    internal static string WebPartZoneBase_MinimizeVerb;
    internal static string WebPartZoneBase_RestoreVerb;
    internal static string WebPartZoneBase_SelectedPartChromeStyle;
    internal static string WebPartZoneBase_ShowTitleIcons;
    internal static string WebPartZoneBase_TitleBarVerbButtonType;
    internal static string WebPartZoneBase_TitleBarVerbStyle;
    internal static string WebPartZoneBase_WebPartVerbRenderMode;
    internal static string Zone_AddedTooLate;
    internal static string Zone_EmptyZoneText;
    internal static string Zone_EmptyZoneTextStyle;
    internal static string Zone_ErrorStyle;
    internal static string Zone_FooterStyle;
    internal static string Zone_HeaderStyle;
    internal static string Zone_HeaderText;
    internal static string Zone_InvalidParent;
    internal static string Zone_Padding;
    internal static string Zone_PartStyle;
    internal static string Zone_PartChromePadding;
    internal static string Zone_PartChromeStyle;
    internal static string Zone_PartChromeType;
    internal static string Zone_PartTitleStyle;
    internal static string Zone_VerbButtonType;
    internal static string Zone_VerbStyle;
    internal static string Zone_SampleHeaderText;
    internal static string PersonalizationAdmin_UnexpectedResetSharedStateReturnValue;
    internal static string PersonalizationAdmin_UnexpectedResetUserStateReturnValue;
    internal static string PersonalizationAdmin_UnexpectedPersonalizationProviderReturnValue;
    internal static string PersonalizationStateInfoCollection_CouldNotAddSharedStateInfo;
    internal static string PersonalizationStateInfoCollection_CouldNotAddUserStateInfo;
    internal static string PersonalizationStateQuery_IncorrectValueType;
    internal static string PersonalizationProviderHelper_CannotHaveCommaInString;
    internal static string PersonalizationProviderHelper_Empty_Collection;
    internal static string PersonalizationProviderHelper_Invalid_Less_Than_Parameter;
    internal static string PersonalizationProviderHelper_More_Than_One_Path;
    internal static string PersonalizationProviderHelper_Negative_Integer;
    internal static string PersonalizationProviderHelper_No_Usernames_Set_In_Shared_Scope;
    internal static string PersonalizationProviderHelper_Null_Entries;
    internal static string PersonalizationProviderHelper_Null_Or_Empty_String_Entries;
    internal static string PersonalizationProviderHelper_TrimmedEmptyString;
    internal static string PersonalizationProviderHelper_Trimmed_Entry_Value_Exceed_Maximum_Length;
    internal static string StringUtil_Trimmed_String_Exceed_Maximum_Length;
    internal static string Category_Accessibility;
    internal static string Category_Cache;
    internal static string Category_Control;
    internal static string Category_Databindings;
    internal static string Category_DefaultProperties;
    internal static string Category_Links;
    internal static string Category_Navigation;
    internal static string Category_Paging;
    internal static string Category_Parameter;
    internal static string Category_Styles;
    internal static string Category_Validation;
    internal static string Category_Verbs;
    internal static string Category_WebPart;
    internal static string Category_WebPartAppearance;
    internal static string Category_WebPartBehavior;
    internal static string Error_Formatter_ASPNET_Error;
    internal static string Error_Formatter_Description;
    internal static string Error_Formatter_Source_File;
    internal static string Error_Formatter_No_Source_File;
    internal static string Error_Formatter_Version;
    internal static string Error_Formatter_CLR_Build;
    internal static string Error_Formatter_ASPNET_Build;
    internal static string Error_Formatter_Line;
    internal static string Error_Formatter_FusionLog;
    internal static string Error_Formatter_FusionLogDesc;
    internal static string Unhandled_Err_Error;
    internal static string Unhandled_Err_Desc;
    internal static string Unhandled_Err_Exception_Details;
    internal static string Unhandled_Err_Stack_Trace;
    internal static string Unauthorized_Err_Desc1;
    internal static string Unauthorized_Err_Desc2;
    internal static string Security_Err_Error;
    internal static string Security_Err_Desc;
    internal static string NotFound_Resource_Not_Found;
    internal static string NotFound_Http_404;
    internal static string NotFound_Requested_Url;
    internal static string Forbidden_Type_Not_Served;
    internal static string Forbidden_Extension_Incorrect;
    internal static string Forbidden_Extension_Desc;
    internal static string Generic_Err_Title;
    internal static string Generic_Err_Local_Desc;
    internal static string Generic_Err_Remote_Desc;
    internal static string Generic_Err_Details_Title;
    internal static string Generic_Err_Local_Details_Desc;
    internal static string Generic_Err_Remote_Details_Desc;
    internal static string Generic_Err_Local_Details_Sample;
    internal static string Generic_Err_Remote_Details_Sample;
    internal static string Generic_Err_Notes_Title;
    internal static string Generic_Err_Notes_Desc;
    internal static string Generic_Err_Local_Notes_Sample;
    internal static string Generic_Err_Remote_Notes_Sample;
    internal static string CustomErrorFailed_Err_Desc;
    internal static string WithFile_No_Relevant_Line;
    internal static string Src_not_available;
    internal static string Src_not_available_nodebug;
    internal static string WithFile_Line_Num;
    internal static string TmplCompilerErrorTitle;
    internal static string TmplCompilerErrorDesc;
    internal static string TmplCompilerCompleteOutput;
    internal static string TmplCompilerGeneratedFile;
    internal static string TmplConfigurationAdditionalError;
    internal static string TmplCompilerErrorSecTitle;
    internal static string TmplCompilerFatalError;
    internal static string TmplCompilerWarningBanner;
    internal static string TmplCompilerWarningSecTitle;
    internal static string TmplCompilerSourceSecTitle;
    internal static string TmplCompilerSourceFileTitle;
    internal static string TmplCompilerSourceFileLine;
    internal static string TmplCompilerLineHeader;
    internal static string Parser_Error;
    internal static string Parser_Desc;
    internal static string Parser_Error_Message;
    internal static string Parser_Source_Error;
    internal static string Config_Error;
    internal static string Config_Desc;
    internal static string File_Circular_Reference;
    internal static string CantGenPropertySet;
    internal static string Trace_Request;
    internal static string Trace_Status_Code;
    internal static string Trace_Trace_Information;
    internal static string Trace_Category;
    internal static string Trace_From_First;
    internal static string Trace_Message;
    internal static string Trace_Warning;
    internal static string Trace_From_Last;
    internal static string Trace_Control_Tree;
    internal static string Trace_Control_Id;
    internal static string Trace_Parent_Id;
    internal static string Trace_Type;
    internal static string Trace_Viewstate_Size;
    internal static string Trace_Controlstate_Size;
    internal static string Trace_Render_Size;
    internal static string Trace_Session_State;
    internal static string Trace_Application_State;
    internal static string Trace_Request_Cookies_Collection;
    internal static string Trace_Response_Cookies_Collection;
    internal static string Trace_Headers_Collection;
    internal static string Trace_Response_Headers_Collection;
    internal static string Trace_Form_Collection;
    internal static string Trace_Querystring_Collection;
    internal static string Trace_Server_Variables;
    internal static string Trace_Time_of_Request;
    internal static string Trace_Url;
    internal static string Trace_Request_Type;
    internal static string Trace_Request_Encoding;
    internal static string Trace_Name;
    internal static string Trace_Value;
    internal static string Trace_Response_Encoding;
    internal static string Trace_Session_Id;
    internal static string Trace_No;
    internal static string Trace_Application_Key;
    internal static string Trace_Session_Key;
    internal static string Trace_Size;
    internal static string Trace_Request_Details;
    internal static string Trace_Application_Trace;
    internal static string Trace_Clear_Current;
    internal static string Trace_Physical_Directory;
    internal static string Trace_Requests_This;
    internal static string Trace_Remaining;
    internal static string Trace_File;
    internal static string Trace_Verb;
    internal static string Trace_View_Details;
    internal static string Trace_Render_Size_children;
    internal static string Trace_Viewstate_Size_Nochildren;
    internal static string Trace_Controlstate_Size_Nochildren;
    internal static string Trace_Page;
    internal static string Trace_Error_Title;
    internal static string Trace_Error_LocalOnly_Description;
    internal static string Trace_Error_LocalOnly_Details_Desc;
    internal static string Trace_Error_LocalOnly_Details_Sample;
    internal static string Trace_Error_Enabled_Description;
    internal static string Trace_Error_Enabled_Details_Desc;
    internal static string Trace_Error_Enabled_Details_Sample;
    internal static string WebPageTraceListener_Event;
    internal static string Adapter_GoLabel;
    internal static string Adapter_OKLabel;
    internal static string MenuAdapter_Up;
    internal static string MenuAdapter_UpOneLevel;
    internal static string MenuAdapter_Expand;
    internal static string PageAdapter_MustHaveFormRunatServer;
    internal static string PageAdapter_RenderDelegateMustBeInServerForm;
    internal static string SQL_Services_Database_Empty_Or_Space_Only_Arg;
    internal static string SQL_Services_Cant_connect_sql_database;
    internal static string SQL_Services_Invalid_Feature;
    internal static string SQL_Services_Error_Deleting_Session_Job;
    internal static string SQL_Services_Error_Executing_Command;
    internal static string SQL_Services_Error_Cant_Uninstall_Nonempty_Table;
    internal static string SQL_Services_Error_Cant_Uninstall_Nonexisting_Database;
    internal static string SQL_Services_Error_Cant_use_custom_database;
    internal static string SQL_Services_Error_missing_custom_database;
    internal static string SQL_Services_Database_contains_invalid_chars;
    internal static string Provider_missing_attribute;
    internal static string Invalid_provider_attribute;
    internal static string Invalid_mail_template_provider_attribute;
    internal static string Unexpected_provider_attribute;
    internal static string Invalid_provider_positive_attributes;
    internal static string Invalid_provider_non_zero_positive_attributes;
    internal static string Event_name_not_found;
    internal static string Event_name_invalid_code_range;
    internal static string Health_mon_profile_not_found;
    internal static string Health_mon_provider_not_found;
    internal static string Wmi_provider_cant_initialize;
    internal static string Invalid_max_event_details_length;
    internal static string Health_mon_buffer_mode_not_found;
    internal static string Invalid_attribute1_must_less_than_or_equal_attribute2;
    internal static string Invalid_attribute1_must_less_than_attribute2;
    internal static string MailWebEventProvider_discard_warning;
    internal static string MailWebEventProvider_events_drop_warning;
    internal static string MailWebEventProvider_summary_body;
    internal static string WebEvent_event_email_subject;
    internal static string WebEvent_event_group_email_subject;
    internal static string WebEvent_event_email_subject_template_error;
    internal static string MailWebEventProvider_Warnings;
    internal static string MailWebEventProvider_Summary;
    internal static string MailWebEventProvider_Application_Info;
    internal static string MailWebEventProvider_Events;
    internal static string MailWebEventProvider_template_file_not_found_error;
    internal static string MailWebEventProvider_template_runtime_error;
    internal static string MailWebEventProvider_template_compile_error;
    internal static string MailWebEventProvider_template_error_no_details;
    internal static string MailWebEventProvider_no_recipient_error;
    internal static string Sql_webevent_provider_events_dropped;
    internal static string MailWebEventProvider_cannot_send_mail;
    internal static string Invalid_eventCode_error;
    internal static string Invalid_eventDetailCode_error;
    internal static string System_eventCode_not_allowed;
    internal static string Event_log_provider_error;
    internal static string Wmi_provider_error;
    internal static string Webevent_msg_ApplicationStart;
    internal static string Webevent_msg_ApplicationShutdown;
    internal static string Webevent_msg_ApplicationCompilationStart;
    internal static string Webevent_msg_ApplicationCompilationEnd;
    internal static string Webevent_msg_ApplicationHeartbeat;
    internal static string Webevent_msg_RequestTransactionComplete;
    internal static string Webevent_msg_RequestTransactionAbort;
    internal static string Webevent_msg_RuntimeErrorRequestAbort;
    internal static string Webevent_msg_RuntimeErrorViewStateFailure;
    internal static string Webevent_msg_RuntimeErrorValidationFailure;
    internal static string Webevent_msg_RuntimeErrorPostTooLarge;
    internal static string Webevent_msg_RuntimeErrorUnhandledException;
    internal static string Webevent_msg_RuntimeErrorWebResourceFailure_DecryptionError;
    internal static string Webevent_msg_RuntimeErrorWebResourceFailure_ResourceMissing;
    internal static string Webevent_msg_WebErrorParserError;
    internal static string Webevent_msg_WebErrorCompilationError;
    internal static string Webevent_msg_WebErrorConfigurationError;
    internal static string Webevent_msg_AuditUnhandledSecurityException;
    internal static string Webevent_msg_AuditInvalidViewStateFailure;
    internal static string Webevent_msg_AuditFormsAuthenticationSuccess;
    internal static string Webevent_msg_AuditUrlAuthorizationSuccess;
    internal static string Webevent_msg_AuditFileAuthorizationFailure;
    internal static string Webevent_msg_AuditFormsAuthenticationFailure;
    internal static string Webevent_msg_AuditFileAuthorizationSuccess;
    internal static string Webevent_msg_AuditMembershipAuthenticationSuccess;
    internal static string Webevent_msg_AuditMembershipAuthenticationFailure;
    internal static string Webevent_msg_AuditUrlAuthorizationFailure;
    internal static string Webevent_msg_AuditUnhandledAccessException;
    internal static string Webevent_msg_OSF_Deserialization_String;
    internal static string Webevent_msg_OSF_Deserialization_Binary;
    internal static string Webevent_msg_OSF_Deserialization_Type;
    internal static string Webevent_msg_Property_Deserialization;
    internal static string Webevent_detail_ApplicationShutdownUnknown;
    internal static string Webevent_detail_ApplicationShutdownHostingEnvironment;
    internal static string Webevent_detail_ApplicationShutdownChangeInGlobalAsax;
    internal static string Webevent_detail_ApplicationShutdownConfigurationChange;
    internal static string Webevent_detail_ApplicationShutdownUnloadAppDomainCalled;
    internal static string Webevent_detail_ApplicationShutdownChangeInSecurityPolicyFile;
    internal static string Webevent_detail_ApplicationShutdownBinDirChangeOrDirectoryRename;
    internal static string Webevent_detail_ApplicationShutdownBrowsersDirChangeOrDirectoryRename;
    internal static string Webevent_detail_ApplicationShutdownCodeDirChangeOrDirectoryRename;
    internal static string Webevent_detail_ApplicationShutdownResourcesDirChangeOrDirectoryRename;
    internal static string Webevent_detail_ApplicationShutdownIdleTimeout;
    internal static string Webevent_detail_ApplicationShutdownPhysicalApplicationPathChanged;
    internal static string Webevent_detail_ApplicationShutdownHttpRuntimeClose;
    internal static string Webevent_detail_ApplicationShutdownInitializationError;
    internal static string Webevent_detail_ApplicationShutdownMaxRecompilationsReached;
    internal static string Webevent_detail_ApplicationShutdownBuildManagerChange;
    internal static string Webevent_detail_StateServerConnectionError;
    internal static string Webevent_detail_InvalidTicketFailure;
    internal static string Webevent_detail_ExpiredTicketFailure;
    internal static string Webevent_detail_InvalidViewStateMac;
    internal static string Webevent_detail_InvalidViewState;
    internal static string Webevent_detail_SqlProviderEventsDropped;
    internal static string Webevent_event_code;
    internal static string Webevent_event_message;
    internal static string Webevent_event_time;
    internal static string Webevent_event_time_Utc;
    internal static string Webevent_event_sequence;
    internal static string Webevent_event_occurrence;
    internal static string Webevent_event_id;
    internal static string Webevent_event_detail_code;
    internal static string Webevent_event_process_information;
    internal static string Webevent_event_application_information;
    internal static string Webevent_event_process_statistics;
    internal static string Webevent_event_request_information;
    internal static string Webevent_event_exception_information;
    internal static string Webevent_event_inner_exception_information;
    internal static string Webevent_event_exception_type;
    internal static string Webevent_event_exception_message;
    internal static string Webevent_event_thread_information;
    internal static string Webevent_event_process_id;
    internal static string Webevent_event_process_name;
    internal static string Webevent_event_account_name;
    internal static string Webevent_event_machine_name;
    internal static string Webevent_event_application_domain;
    internal static string Webevent_event_trust_level;
    internal static string Webevent_event_application_virtual_path;
    internal static string Webevent_event_application_path;
    internal static string Webevent_event_request_url;
    internal static string Webevent_event_request_path;
    internal static string Webevent_event_user;
    internal static string Webevent_event_is_authenticated;
    internal static string Webevent_event_is_not_authenticated;
    internal static string Webevent_event_authentication_type;
    internal static string Webevent_event_process_start_time;
    internal static string Webevent_event_thread_count;
    internal static string Webevent_event_working_set;
    internal static string Webevent_event_peak_working_set;
    internal static string Webevent_event_managed_heap_size;
    internal static string Webevent_event_application_domain_count;
    internal static string Webevent_event_requests_executing;
    internal static string Webevent_event_request_queued;
    internal static string Webevent_event_request_rejected;
    internal static string Webevent_event_thread_id;
    internal static string Webevent_event_thread_account_name;
    internal static string Webevent_event_is_impersonating;
    internal static string Webevent_event_is_not_impersonating;
    internal static string Webevent_event_stack_trace;
    internal static string Webevent_event_user_host_address;
    internal static string Webevent_event_name_to_authenticate;
    internal static string Webevent_event_custom_event_details;
    internal static string Webevent_event_ViewStateException_information;
    internal static string Etw_Batch_Compilation;
    internal static string Etw_Success;
    internal static string Etw_Failure;
    internal static string Config_collection_add_element_without_key;
    internal static string Failed_Pipeline_Subscription;
    internal static string Cant_Init_Native_Config;
    internal static string Cant_Enumerate_NativeDirs;
    internal static string Cant_Read_Native_Modules;
    internal static string Cant_Create_Process_Host;
    internal static string Invalid_AppDomain_Prot_Type;
    internal static string Invalid_Process_Prot_Type;
    internal static string Invalid_Application_Preload_Provider_Type;
    internal static string Invalid_Enabled_Preload_Parameter;
    internal static string Failure_ApplicationPreloadUtil_Already_Set;
    internal static string Failure_Create_Application_Preload_Provider_Type;
    internal static string Failure_Preload_Application_Initialization;
    internal static string Failure_Calling_Preload_Provider;
    internal static string Failure_Stop_Listener_Channel;
    internal static string Failure_Stop_Process_Prot;
    internal static string Failure_Start_AppDomain_Listener;
    internal static string Failure_Stop_AppDomain_Listener;
    internal static string Failure_Stop_AppDomain_Protocol;
    internal static string Failure_Start_Integrated_App;
    internal static string Failure_Stop_Integrated_App;
    internal static string Failure_Shutdown_ProcessHost;
    internal static string Failure_AppDomain_Enum;
    internal static string Failure_PMH_Ping;
    internal static string Failure_PMH_Idle;
    internal static string Failure_Create_Listener_Shim;
    internal static string Event_Binding_Disallowed;
    internal static string Requires_Iis_Integrated_Mode;
    internal static string Method_Not_Supported_By_Iis_Integrated_Mode;
    internal static string Requires_Iis_7;
    internal static string Requires_Iis_75_Integrated;
    internal static string Invalid_before_authentication;
    internal static string Application_instance_cannot_be_changed;
    internal static string Invalid_http_data_chunk;
    internal static string Substitution_blocks_cannot_be_modified;
    internal static string TransferRequest_cannot_be_invoked_more_than_once;
    internal static string Invoke_before_pipeline_event;
    internal static string Invalid_queue_limit;
    internal static string Queue_limit_is_zero;
    internal static string HttpMethodConstraint_ParameterValueMustBeString;
    internal static string Route_CannotHaveCatchAllInMultiSegment;
    internal static string Route_CannotHaveConsecutiveParameters;
    internal static string Route_CannotHaveConsecutiveSeparators;
    internal static string Route_CatchAllMustBeLast;
    internal static string Route_InvalidParameterName;
    internal static string Route_InvalidRouteUrl;
    internal static string Route_MismatchedParameter;
    internal static string Route_RepeatedParameter;
    internal static string Route_ValidationMustBeStringOrCustomConstraint;
    internal static string RouteCollection_DuplicateEntry;
    internal static string RouteCollection_DuplicateName;
    internal static string RouteCollection_NameNotFound;
    internal static string RouteCollection_RequiresContext;
    internal static string RouteData_RequiredValue;
    internal static string RouteTable_ContextMissingRequest;
    internal static string UrlRoutingHandler_NoRouteMatches;
    internal static string UrlRoutingModule_NoHttpHandler;
    internal static string UrlRoutingModule_NoRouteHandler;
    internal static string RouteUrlExpression_InvalidExpression;
    internal static string PageRouteHandler_InvalidVirtualPath;
    internal static string RouteParameter_RouteKey;
    internal static string Control_NotADescendentOfNamingContainer;
    internal static string DynamicModuleRegistry_ModulesAlreadyInitialized;
    internal static string DynamicModuleRegistry_TypeIsNotIHttpModule;
    internal static string StateApplication_FullTrustOnly;
    internal static string HttpTaskAsyncHandler_CannotExecuteSynchronously;
    internal static string SynchronizationContextUtil_AspCompatModeNotCompatible;
    internal static string SynchronizationContextUtil_PageAsyncVoidMethodsNotCompatible;
    internal static string SynchronizationContextUtil_TaskReturningPageAsyncMethodsNotCompatible;
    internal static string SynchronizationContextUtil_PageAsyncTaskTimeoutHandlerParallelNotCompatible;
    internal static string SynchronizationContextUtil_WebSocketsNotCompatible;
    internal static string SynchronizationContextUtil_UpgradeToTargetFramework45Instructions;
    internal static string SynchronizationContextUtil_AddDowngradeAppSettingsSwitch;
    internal static string SynchronizationContextUtil_RemoveAppSettingsSwitch;
    internal static string SynchronizationContextUtil_ForMoreInformation;
    internal static string PageAsyncManager_CannotEnqueue;
    internal static string TaskAsyncHelper_ParameterInvalid;
    internal static string WebSockets_WebSocketModuleNotEnabled;
    internal static string WebSockets_NotAWebSocketRequest;
    internal static string WebSockets_OriginCheckFailed;
    internal static string WebSockets_SubProtocolCannotBeNegotiated;
    internal static string WebSockets_AcceptWebSocketRequestCanOnlyBeCalledOnce;
    internal static string WebSockets_CannotBeCalledDuringBeginRequest;
    internal static string WebSockets_CannotBeCalledAfterHandlerExecute;
    internal static string WebSockets_CannotBeCalledDuringChildExecute;
    internal static string WebSockets_UnknownErrorWhileAccepting;
    internal static string WebSockets_MethodNotAvailableDuringWebSocketProcessing;
    internal static string AspNetWebSocket_SendInProgress;
    internal static string AspNetWebSocket_SendMessageTypeInvalid;
    internal static string AspNetWebSocket_CloseAlreadySent;
    internal static string AspNetWebSocket_ReceiveInProgress;
    internal static string AspNetWebSocket_CloseAlreadyReceived;
    internal static string AspNetWebSocket_CloseStatusEmptyButCloseDescriptionNonNull;
    internal static string AspNetWebSocket_CloseDescriptionTooLong;
    internal static string AspNetWebSocket_DisposeNotSupported;
    internal static string Common_NullOrEmpty;
    internal static string Common_PropertyCannotBeNullOrEmpty;
    internal static string ValueProviderResult_ConversionThrew;
    internal static string ValueProviderResult_NoConverterExists;
    internal static string Common_PropertyNotFound;
    internal static string DataAnnotationsModelMetadataProvider_UnknownProperty;
    internal static string DataAnnotationsModelMetadataProvider_UnreadableProperty;
    internal static string Common_TypeMustDriveFromType;
    internal static string DataAnnotationsModelValidatorProvider_ConstructorRequirements;
    internal static string ClientDataTypeModelValidatorProvider_FieldMustBeNumeric;
    internal static string DataAnnotationsModelValidatorProvider_ValidatableConstructorRequirements;
    internal static string ValidatableObjectAdapter_IncompatibleType;
    internal static string BindingBehavior_ValueNotFound;
    internal static string Common_TypeMustImplementInterface;
    internal static string GenericModelBinderProvider_ParameterMustSpecifyOpenGenericType;
    internal static string GenericModelBinderProvider_TypeArgumentCountMismatch;
    internal static string ModelBinderConfig_ValueInvalid;
    internal static string ModelBinderConfig_ValueRequired;
    internal static string ModelBinderProviderCollection_BinderForTypeNotFound;
    internal static string ModelBinderProviderCollection_InvalidBinderType;
    internal static string ModelBinderUtil_ModelCannotBeNull;
    internal static string ModelBinderUtil_ModelInstanceIsWrong;
    internal static string ModelBinderUtil_ModelMetadataCannotBeNull;
    internal static string ModelBinderUtil_ModelTypeIsWrong;
    internal static string ModelBindingContext_ModelMetadataMustBeSet;
    internal static string AppVerifier_Title;
    internal static string AppVerifier_Subtitle;
    internal static string AppVerifier_BasicInfo_URL;
    internal static string AppVerifier_BasicInfo_ErrorCode;
    internal static string AppVerifier_BasicInfo_Description;
    internal static string AppVerifier_BasicInfo_NotificationInfo;
    internal static string AppVerifier_BasicInfo_ThreadInfo;
    internal static string AppVerifier_BeginMethodInfo_EntryMethod;
    internal static string AppVerifier_BeginMethodInfo_RequestNotification_Integrated;
    internal static string AppVerifier_BeginMethodInfo_RequestNotification_NotIntegrated;
    internal static string AppVerifier_BeginMethodInfo_CurrentHandler;
    internal static string AppVerifier_BeginMethodInfo_ThreadInfo;
    internal static string AppVerifier_AsyncCallbackInfo_InvocationCount;
    internal static string AppVerifier_AsyncCallbackInfo_FirstInvocation_ThreadInfo;
    internal static string AppVerifier_Errors_HttpApplicationInstanceWasNull;
    internal static string AppVerifier_Errors_BeginHandlerDelegateWasNull;
    internal static string AppVerifier_Errors_AsyncCallbackInvokedMultipleTimes;
    internal static string AppVerifier_Errors_AsyncCallbackInvokedWithNullParameter;
    internal static string AppVerifier_Errors_AsyncCallbackGivenAsyncResultWhichWasNotCompleted;
    internal static string AppVerifier_Errors_AsyncCallbackInvokedAsynchronouslyButAsyncResultWasMarkedCompletedSynchronously;
    internal static string AppVerifier_Errors_AsyncCallbackInvokedSynchronouslyButAsyncResultWasNotMarkedCompletedSynchronously;
    internal static string AppVerifier_Errors_AsyncCallbackInvokedWithUnexpectedAsyncResultInstance;
    internal static string AppVerifier_Errors_AsyncCallbackInvokedEvenThoughBeginHandlerThrew;
    internal static string AppVerifier_Errors_AsyncCallbackInvokedWithUnexpectedAsyncResultAsyncState;
    internal static string AppVerifier_Errors_AsyncCallbackCalledAfterHttpApplicationReassigned;
    internal static string AppVerifier_Errors_BeginHandlerReturnedNull;
    internal static string AppVerifier_Errors_BeginHandlerReturnedAsyncResultMarkedCompletedSynchronouslyButWhichWasNotCompleted;
    internal static string AppVerifier_Errors_BeginHandlerReturnedAsyncResultMarkedCompletedSynchronouslyButAsyncCallbackNeverCalled;
    internal static string AppVerifier_Errors_BeginHandlerReturnedUnexpectedAsyncResultAsyncState;
    internal static string AppVerifier_Errors_SyncContextSendOrPostCalledAfterRequestCompleted;
    internal static string AppVerifier_Errors_SyncContextSendOrPostCalledBetweenNotifications;
    internal static string AppVerifier_Errors_SyncContextPostCalledInNestedNotification;
    internal static string AppVerifier_Errors_RequestNotificationCompletedSynchronouslyWithNotificationContextPending;
    internal static string AppVerifier_Errors_NotificationContextHasChangedAfterSynchronouslyProcessingNotification;
    internal static string AppVerifier_Errors_PendingProcessRequestNotificationStatusAfterCompletingNestedNotification;
    public static ResourceManager Resources { get; }
    private static SR();
    public static ResourceManager get_Resources();
    public static string GetString(string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(string name, Boolean& usedFallback);
    public static object GetObject(string name);
}
[AttributeUsageAttribute("32767")]
internal class System.Web.SRCategoryAttribute : CategoryAttribute {
    public SRCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class System.Web.SRDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public SRDescriptionAttribute(string description);
    public virtual string get_Description();
}
internal enum System.Web.StateServicePerfCounter : Enum {
    public int value__;
    public static StateServicePerfCounter STATE_SERVICE_SESSIONS_ACTIVE;
    public static StateServicePerfCounter STATE_SERVICE_SESSIONS_ABANDONED;
    public static StateServicePerfCounter STATE_SERVICE_SESSIONS_TIMED_OUT;
    public static StateServicePerfCounter STATE_SERVICE_SESSIONS_TOTAL;
}
internal class System.Web.StaticErrorFormatterHelper : object {
    internal static string ChtmlErrorBeginTemplate;
    internal static string ChtmlErrorEndTemplate;
    internal static string WmlErrorBeginTemplate;
    internal static string WmlErrorEndTemplate;
    internal static string XhtmlErrorBeginTemplate;
    internal static string XhtmlErrorEndTemplate;
    internal static string Break;
}
internal class System.Web.StaticFileHandler : object {
    public bool IsReusable { get; }
    public sealed virtual bool get_IsReusable();
    public sealed virtual void ProcessRequest(HttpContext context);
    internal static bool ProcessRangeRequest(HttpContext context, string physicalPath, long fileLength, string rangeHeader, string etag, DateTime lastModified);
    internal static void ProcessRequestInternal(HttpContext context, string overrideVirtualPath);
}
public abstract class System.Web.StaticSiteMapProvider : SiteMapProvider {
    internal IDictionary ChildNodeCollectionTable { get; }
    internal IDictionary KeyTable { get; }
    internal IDictionary ParentNodeTable { get; }
    internal IDictionary UrlTable { get; }
    internal IDictionary get_ChildNodeCollectionTable();
    internal IDictionary get_KeyTable();
    internal IDictionary get_ParentNodeTable();
    internal IDictionary get_UrlTable();
    protected internal virtual void AddNode(SiteMapNode node, SiteMapNode parentNode);
    public abstract virtual SiteMapNode BuildSiteMap();
    protected virtual void Clear();
    public virtual SiteMapNode FindSiteMapNodeFromKey(string key);
    public virtual SiteMapNode FindSiteMapNode(string rawUrl);
    public virtual SiteMapNodeCollection GetChildNodes(SiteMapNode node);
    public virtual SiteMapNode GetParentNode(SiteMapNode node);
    protected internal virtual void RemoveNode(SiteMapNode node);
}
internal class System.Web.StringResourceBuilder : object {
    internal bool HasStrings { get; }
    internal void AddString(string s, Int32& offset, Int32& size, Boolean& fAsciiOnly);
    internal bool get_HasStrings();
    internal void CreateResourceFile(string resFileName);
}
internal class System.Web.StringResourceManager : object {
    internal static int RESOURCE_TYPE;
    internal static int RESOURCE_ID;
    internal static string ResourceToString(IntPtr pv, int offset, int size);
    internal static SafeStringResource ReadSafeStringResource(Type t);
}
internal static class System.Web.TaskAsyncHelper : object {
    internal static Task CompletedTask { get; }
    private static TaskAsyncHelper();
    internal static IAsyncResult BeginTask(Func`1<Task> taskFunc, AsyncCallback callback, object state);
    internal static void EndTask(IAsyncResult ar);
    internal static Task get_CompletedTask();
}
public class System.Web.TaskEventHandler : MulticastDelegate {
    public TaskEventHandler(object object, IntPtr method);
    public virtual Task Invoke(object sender, EventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
internal class System.Web.TaskWrapperAsyncResult : object {
    public object AsyncState { get; private set; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; }
    public bool IsCompleted { get; }
    internal Task Task { get; private set; }
    internal TaskWrapperAsyncResult(Task task, object asyncState);
    [CompilerGeneratedAttribute]
public sealed virtual object get_AsyncState();
    [CompilerGeneratedAttribute]
private void set_AsyncState(object value);
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual bool get_IsCompleted();
    [CompilerGeneratedAttribute]
internal Task get_Task();
    [CompilerGeneratedAttribute]
private void set_Task(Task value);
    internal void ForceCompletedSynchronously();
}
internal class System.Web.ThreadContext : object {
    internal static ThreadContext Current { get; private set; }
    internal bool HasBeenDisassociatedFromThread { get; private set; }
    internal HttpContext HttpContext { get; private set; }
    internal ThreadContext(HttpContext httpContext);
    internal static ThreadContext get_Current();
    private static void set_Current(ThreadContext value);
    [CompilerGeneratedAttribute]
internal bool get_HasBeenDisassociatedFromThread();
    [CompilerGeneratedAttribute]
private void set_HasBeenDisassociatedFromThread(bool value);
    [CompilerGeneratedAttribute]
internal HttpContext get_HttpContext();
    [CompilerGeneratedAttribute]
private void set_HttpContext(HttpContext value);
    internal void AssociateWithCurrentThread(bool setImpersonationContext);
    internal void DisassociateFromCurrentThread();
    internal Action EnterExecutionContext();
    internal void SetImpersonationContext();
    internal void Synchronize();
    internal void UndoImpersonationContext();
    private sealed virtual override void System.Web.Util.ISyncContextLock.Leave();
}
public class System.Web.TraceContext : object {
    public TraceMode TraceMode { get; public set; }
    public bool IsEnabled { get; public set; }
    internal bool PageOutput { get; }
    unknown int StatusCode {internal set; }
    public TraceContext(HttpContext context);
    private static TraceContext();
    public TraceMode get_TraceMode();
    public void set_TraceMode(TraceMode value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    internal bool get_PageOutput();
    internal void set_StatusCode(int value);
    public void add_TraceFinished(TraceContextEventHandler value);
    public void remove_TraceFinished(TraceContextEventHandler value);
    internal void CopySettingsTo(TraceContext tc);
    internal void OnTraceFinished(TraceContextEventArgs e);
    internal static void SetWriteToDiagnosticsTrace(bool value);
    public void Write(string message);
    public void Write(string category, string message);
    public void Write(string category, string message, Exception errorInfo);
    internal void WriteInternal(string message, bool writeToDiagnostics);
    internal void WriteInternal(string category, string message, bool writeToDiagnostics);
    public void Warn(string message);
    public void Warn(string category, string message);
    public void Warn(string category, string message, Exception errorInfo);
    internal void WarnInternal(string category, string message, bool writeToDiagnostics);
    internal void AddNewControl(string id, string parentId, string type, int viewStateSize, int controlStateSize);
    internal void AddControlSize(string controlId, int renderSize);
    internal void AddControlStateSize(string controlId, int viewstateSize, int controlstateSize);
    internal void Render(HtmlTextWriter output);
    internal DataSet GetData();
    internal void VerifyStart();
    internal void StopTracing();
    internal void EndRequest();
}
public class System.Web.TraceContextEventArgs : EventArgs {
    public ICollection TraceRecords { get; }
    public TraceContextEventArgs(ICollection records);
    public ICollection get_TraceRecords();
}
public class System.Web.TraceContextEventHandler : MulticastDelegate {
    public TraceContextEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TraceContextEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TraceContextEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.TraceContextRecord : object {
    public string Category { get; }
    public Exception ErrorInfo { get; }
    public string Message { get; }
    public bool IsWarning { get; }
    public TraceContextRecord(string category, string msg, bool isWarning, Exception errorInfo);
    public string get_Category();
    public Exception get_ErrorInfo();
    public string get_Message();
    public bool get_IsWarning();
}
internal enum System.Web.TraceEnable : Enum {
    public int value__;
    public static TraceEnable Default;
    public static TraceEnable Enable;
    public static TraceEnable Disable;
}
public enum System.Web.TraceMode : Enum {
    public int value__;
    public static TraceMode SortByTime;
    public static TraceMode SortByCategory;
    public static TraceMode Default;
}
internal class System.Web.UbyteBufferAllocator : BufferAllocator {
    public int BufferSize { get; }
    internal UbyteBufferAllocator(int bufferSize, int maxFree);
    protected virtual object AllocBuffer();
    public virtual int get_BufferSize();
}
public abstract class System.Web.UI.Adapters.ControlAdapter : object {
    internal Control _control;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected Control Control { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected Page Page { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected PageAdapter PageAdapter { get; }
    protected HttpBrowserCapabilities Browser { get; }
    protected Control get_Control();
    protected Page get_Page();
    protected PageAdapter get_PageAdapter();
    protected HttpBrowserCapabilities get_Browser();
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void OnLoad(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected virtual void RenderChildren(HtmlTextWriter writer);
    protected internal virtual void OnUnload(EventArgs e);
    protected internal virtual void BeginRender(HtmlTextWriter writer);
    protected internal virtual void CreateChildControls();
    protected internal virtual void EndRender(HtmlTextWriter writer);
    protected internal virtual void LoadAdapterControlState(object state);
    protected internal virtual void LoadAdapterViewState(object state);
    protected internal virtual object SaveAdapterControlState();
    protected internal virtual object SaveAdapterViewState();
}
public abstract class System.Web.UI.Adapters.PageAdapter : ControlAdapter {
    public StringCollection CacheVaryByHeaders { get; }
    public StringCollection CacheVaryByParams { get; }
    protected string ClientState { get; }
    internal char IdSeparator { get; }
    internal string QueryString { get; }
    public virtual StringCollection get_CacheVaryByHeaders();
    public virtual StringCollection get_CacheVaryByParams();
    protected string get_ClientState();
    internal virtual char get_IdSeparator();
    internal string get_QueryString();
    public virtual NameValueCollection DeterminePostBackMode();
    public virtual NameValueCollection DeterminePostBackModeUnvalidated();
    public virtual ICollection GetRadioButtonsByGroup(string groupName);
    protected internal virtual string GetPostBackFormReference(string formId);
    public virtual PageStatePersister GetStatePersister();
    public virtual void RegisterRadioButton(RadioButton radioButton);
    public virtual void RenderBeginHyperlink(HtmlTextWriter writer, string targetUrl, bool encodeUrl, string softkeyLabel);
    public virtual void RenderBeginHyperlink(HtmlTextWriter writer, string targetUrl, bool encodeUrl, string softkeyLabel, string accessKey);
    public virtual void RenderEndHyperlink(HtmlTextWriter writer);
    public virtual void RenderPostBackEvent(HtmlTextWriter writer, string target, string argument, string softkeyLabel, string text);
    public virtual void RenderPostBackEvent(HtmlTextWriter writer, string target, string argument, string softkeyLabel, string text, string postUrl, string accessKey);
    protected void RenderPostBackEvent(HtmlTextWriter writer, string target, string argument, string softkeyLabel, string text, string postUrl, string accessKey, bool encode);
    public virtual string TransformText(string text);
}
internal class System.Web.UI.ApplicationFileParser : TemplateParser {
    internal static string defaultDirectiveName;
    internal Type DefaultBaseType { get; }
    internal bool FApplicationFile { get; }
    internal string DefaultDirectiveName { get; }
    internal virtual Type get_DefaultBaseType();
    internal virtual bool get_FApplicationFile();
    internal virtual string get_DefaultDirectiveName();
    internal virtual void CheckObjectTagScope(ObjectTagScope& scope);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.AttributeCollection : object {
    public string Item { get; public set; }
    public ICollection Keys { get; }
    public int Count { get; }
    public CssStyleCollection CssStyle { get; }
    public AttributeCollection(StateBag bag);
    public string get_Item(string key);
    public void set_Item(string key, string value);
    public ICollection get_Keys();
    public int get_Count();
    public CssStyleCollection get_CssStyle();
    public void Add(string key, string value);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public void Remove(string key);
    public void Clear();
    public void Render(HtmlTextWriter writer);
    public void AddAttributes(HtmlTextWriter writer);
}
public class System.Web.UI.BaseParser : object {
    internal static Regex directiveRegex;
    internal static Regex endtagRegex;
    internal static Regex aspCodeRegex;
    internal static Regex aspExprRegex;
    internal static Regex aspEncodedExprRegex;
    internal static Regex databindExprRegex;
    internal static Regex commentRegex;
    internal static Regex includeRegex;
    internal static Regex textRegex;
    internal static Regex gtRegex;
    internal static Regex ltRegex;
    internal static Regex serverTagsRegex;
    internal static Regex runatServerRegex;
    internal VirtualPath BaseVirtualDir { get; }
    internal VirtualPath CurrentVirtualPath { get; internal set; }
    internal string CurrentVirtualPathString { get; }
    internal Regex TagRegex { get; }
    private static BaseParser();
    internal VirtualPath get_BaseVirtualDir();
    internal VirtualPath get_CurrentVirtualPath();
    internal void set_CurrentVirtualPath(VirtualPath value);
    internal string get_CurrentVirtualPathString();
    internal VirtualPath ResolveVirtualPath(VirtualPath virtualPath);
    internal Regex get_TagRegex();
}
[ToolboxItemAttribute("False")]
public abstract class System.Web.UI.BasePartialCachingControl : Control {
    internal Control _cachedCtrl;
    internal string _ctrlID;
    internal string _guid;
    internal DateTime _utcExpirationTime;
    internal bool _useSlidingExpiration;
    internal HttpCacheVaryByParams _varyByParamsCollection;
    internal String[] _varyByControlsCollection;
    internal string _varyByCustom;
    internal string _sqlDependency;
    internal string _provider;
    internal bool _cachingDisabled;
    internal static char varySeparator;
    internal static string varySeparatorString;
    public CacheDependency Dependency { get; public set; }
    public ControlCachePolicy CachePolicy { get; }
    internal HttpCacheVaryByParams VaryByParams { get; }
    internal string VaryByControl { get; internal set; }
    internal TimeSpan Duration { get; internal set; }
    internal virtual void InitRecursive(Control namingContainer);
    internal virtual void LoadRecursive();
    internal virtual void PreRenderRecursiveInternal();
    public virtual void Dispose();
    internal abstract virtual Control CreateCachedControl();
    public CacheDependency get_Dependency();
    public void set_Dependency(CacheDependency value);
    public ControlCachePolicy get_CachePolicy();
    internal HttpCacheVaryByParams get_VaryByParams();
    internal string get_VaryByControl();
    internal void set_VaryByControl(string value);
    internal TimeSpan get_Duration();
    internal void set_Duration(TimeSpan value);
    internal void RegisterStyleInfo(SelectorStyleInfo selectorInfo);
    protected internal virtual void Render(HtmlTextWriter output);
    internal void SetVaryByParamsCollectionFromString(string varyByParams);
    internal void RegisterPostBackScript();
    internal void RegisterFocusScript();
    internal void RegisterWebFormsScript();
    internal void RegisterScriptBlock(ClientAPIRegisterType type, ScriptKey key, string script);
    internal void RegisterOnSubmitStatement(ScriptKey key, string script);
    internal void RegisterArrayDeclaration(string arrayName, string arrayValue);
    internal void RegisterHiddenField(string hiddenFieldName, string hiddenFieldInitialValue);
    internal void RegisterExpandoAttribute(string controlID, string attributeName, string attributeValue);
    internal void RegisterForEventValidation(string uniqueID, string argument);
}
public abstract class System.Web.UI.BaseTemplateParser : TemplateParser {
    internal Type GetDesignTimeUserControlType(string tagPrefix, string tagName);
    protected internal Type GetUserControlType(string virtualPath);
    internal Type GetUserControlType(VirtualPath virtualPath);
    protected Type GetReferencedType(string virtualPath);
    internal Type GetReferencedType(VirtualPath virtualPath);
    internal Type GetReferencedType(VirtualPath virtualPath, bool allowNoCompile);
    internal virtual void ProcessDirective(string directiveName, IDictionary directive);
}
public class System.Web.UI.BindableTemplateBuilder : TemplateBuilder {
    public sealed virtual IOrderedDictionary ExtractValues(Control container);
    public virtual void OnAppendToParentBuilder(ControlBuilder parentBuilder);
}
public class System.Web.UI.BoundPropertyEntry : PropertyEntry {
    public string ControlID { get; public set; }
    public Type ControlType { get; public set; }
    public string Expression { get; public set; }
    public ExpressionBuilder ExpressionBuilder { get; public set; }
    public string ExpressionPrefix { get; public set; }
    public string FieldName { get; public set; }
    public string FormatString { get; public set; }
    internal bool IsDataBindingEntry { get; }
    internal int Column { get; internal set; }
    internal int Line { get; internal set; }
    public bool Generated { get; public set; }
    public object ParsedExpressionData { get; public set; }
    public bool ReadOnlyProperty { get; public set; }
    public bool TwoWayBound { get; public set; }
    public bool UseSetAttribute { get; public set; }
    public bool IsEncoded { get; public set; }
    public string get_ControlID();
    public void set_ControlID(string value);
    public Type get_ControlType();
    public void set_ControlType(Type value);
    public string get_Expression();
    public void set_Expression(string value);
    public ExpressionBuilder get_ExpressionBuilder();
    public void set_ExpressionBuilder(ExpressionBuilder value);
    public string get_ExpressionPrefix();
    public void set_ExpressionPrefix(string value);
    public string get_FieldName();
    public void set_FieldName(string value);
    public string get_FormatString();
    public void set_FormatString(string value);
    internal bool get_IsDataBindingEntry();
    [CompilerGeneratedAttribute]
internal int get_Column();
    [CompilerGeneratedAttribute]
internal void set_Column(int value);
    [CompilerGeneratedAttribute]
internal int get_Line();
    [CompilerGeneratedAttribute]
internal void set_Line(int value);
    public bool get_Generated();
    public void set_Generated(bool value);
    public object get_ParsedExpressionData();
    public void set_ParsedExpressionData(object value);
    public bool get_ReadOnlyProperty();
    public void set_ReadOnlyProperty(bool value);
    public bool get_TwoWayBound();
    public void set_TwoWayBound(bool value);
    public bool get_UseSetAttribute();
    public void set_UseSetAttribute(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEncoded();
    [CompilerGeneratedAttribute]
public void set_IsEncoded(bool value);
    internal void ParseExpression(ExpressionBuilderContext context);
}
public abstract class System.Web.UI.BuilderPropertyEntry : PropertyEntry {
    public ControlBuilder Builder { get; public set; }
    public ControlBuilder get_Builder();
    public void set_Builder(ControlBuilder value);
}
internal class System.Web.UI.BuilderStackEntry : SourceLineInfo {
    internal ControlBuilder _builder;
    internal string _tagName;
    internal string _inputText;
    internal int _textPos;
    internal int _repeatCount;
    internal BuilderStackEntry(ControlBuilder builder, string tagName, string virtualPath, int line, string inputText, int textPos);
}
public class System.Web.UI.BuildMethod : MulticastDelegate {
    public BuildMethod(object object, IntPtr method);
    public virtual Control Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual Control EndInvoke(IAsyncResult result);
}
public class System.Web.UI.BuildTemplateMethod : MulticastDelegate {
    public BuildTemplateMethod(object object, IntPtr method);
    public virtual void Invoke(Control control);
    public virtual IAsyncResult BeginInvoke(Control control, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.ChtmlTextWriter : Html32TextWriter {
    protected Hashtable RecognizedAttributes { get; }
    protected Hashtable SuppressedAttributes { get; }
    protected Hashtable GlobalSuppressedAttributes { get; }
    public ChtmlTextWriter(TextWriter writer);
    public ChtmlTextWriter(TextWriter writer, string tabString);
    public virtual void AddRecognizedAttribute(string elementName, string attributeName);
    protected virtual bool OnAttributeRender(string name, string value, HtmlTextWriterAttribute key);
    protected virtual bool OnStyleAttributeRender(string name, string value, HtmlTextWriterStyle key);
    protected virtual bool OnTagRender(string name, HtmlTextWriterTag key);
    public virtual void RemoveRecognizedAttribute(string elementName, string attributeName);
    public virtual void WriteBreak();
    public virtual void WriteEncodedText(string text);
    protected Hashtable get_RecognizedAttributes();
    protected Hashtable get_SuppressedAttributes();
    protected Hashtable get_GlobalSuppressedAttributes();
}
internal enum System.Web.UI.ClientAPIRegisterType : Enum {
    public int value__;
    public static ClientAPIRegisterType WebFormsScript;
    public static ClientAPIRegisterType PostBackScript;
    public static ClientAPIRegisterType FocusScript;
    public static ClientAPIRegisterType ClientScriptBlocks;
    public static ClientAPIRegisterType ClientScriptBlocksWithoutTags;
    public static ClientAPIRegisterType ClientStartupScripts;
    public static ClientAPIRegisterType ClientStartupScriptsWithoutTags;
    public static ClientAPIRegisterType OnSubmitStatement;
    public static ClientAPIRegisterType ArrayDeclaration;
    public static ClientAPIRegisterType HiddenField;
    public static ClientAPIRegisterType ExpandoAttribute;
    public static ClientAPIRegisterType EventValidation;
}
public enum System.Web.UI.ClientIDMode : Enum {
    public int value__;
    public static ClientIDMode Inherit;
    public static ClientIDMode AutoID;
    public static ClientIDMode Predictable;
    public static ClientIDMode Static;
}
public class System.Web.UI.ClientScriptManager : object {
    internal static string ClientScriptStart;
    internal static string ClientScriptStartLegacy;
    internal static string ClientScriptEnd;
    internal static string ClientScriptEndLegacy;
    internal static string JscriptPrefix;
    internal static IScriptResourceMapping _scriptResourceMapping;
    internal bool HasRegisteredHiddenFields { get; }
    internal bool HasSubmitStatements { get; }
    internal Dictionary`2<Assembly, Dictionary`2<string, object>> RegisteredResourcesToSuppress { get; }
    internal ClientScriptManager(Page owner);
    internal bool get_HasRegisteredHiddenFields();
    internal bool get_HasSubmitStatements();
    internal Dictionary`2<Assembly, Dictionary`2<string, object>> get_RegisteredResourcesToSuppress();
    internal string GetEventValidationFieldValue();
    public void RegisterForEventValidation(PostBackOptions options);
    public void RegisterForEventValidation(string uniqueId);
    public void RegisterForEventValidation(string uniqueId, string argument);
    internal void SaveEventValidationField();
    internal static void EnsureJqueryRegistered();
    public void ValidateEvent(string uniqueId);
    public void ValidateEvent(string uniqueId, string argument);
    internal void ClearHiddenFields();
    internal static ScriptKey CreateScriptKey(Type type, string key);
    internal static ScriptKey CreateScriptIncludeKey(Type type, string key, bool isResource);
    public string GetCallbackEventReference(Control control, string argument, string clientCallback, string context);
    public string GetCallbackEventReference(Control control, string argument, string clientCallback, string context, bool useAsync);
    public string GetCallbackEventReference(Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);
    public string GetCallbackEventReference(string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);
    public string GetPostBackClientHyperlink(Control control, string argument);
    public string GetPostBackClientHyperlink(Control control, string argument, bool registerForEventValidation);
    internal string GetPostBackClientHyperlink(Control control, string argument, bool escapePercent, bool registerForEventValidation);
    public string GetPostBackEventReference(Control control, string argument);
    public string GetPostBackEventReference(Control control, string argument, bool registerForEventValidation);
    public string GetPostBackEventReference(PostBackOptions options);
    public string GetPostBackEventReference(PostBackOptions options, bool registerForEventValidation);
    public string GetWebResourceUrl(Type type, string resourceName);
    internal static string GetWebResourceUrl(Page owner, Type type, string resourceName, bool htmlEncoded, IScriptManager scriptManager);
    internal static string GetWebResourceUrl(Page owner, Type type, string resourceName, bool htmlEncoded, IScriptManager scriptManager, bool enableCdn);
    public bool IsClientScriptBlockRegistered(string key);
    public bool IsClientScriptBlockRegistered(Type type, string key);
    public bool IsClientScriptIncludeRegistered(string key);
    public bool IsClientScriptIncludeRegistered(Type type, string key);
    public bool IsStartupScriptRegistered(string key);
    public bool IsStartupScriptRegistered(Type type, string key);
    public bool IsOnSubmitStatementRegistered(string key);
    public bool IsOnSubmitStatementRegistered(Type type, string key);
    public void RegisterArrayDeclaration(string arrayName, string arrayValue);
    internal void RegisterArrayDeclaration(Control control, string arrayName, string arrayValue);
    public void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue);
    public void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue, bool encode);
    internal void RegisterExpandoAttribute(Control control, string controlId, string attributeName, string attributeValue, bool encode);
    public void RegisterHiddenField(string hiddenFieldName, string hiddenFieldInitialValue);
    internal void RegisterHiddenField(Control control, string hiddenFieldName, string hiddenFieldValue);
    public void RegisterClientScriptBlock(Type type, string key, string script);
    public void RegisterClientScriptBlock(Type type, string key, string script, bool addScriptTags);
    internal void RegisterClientScriptBlock(Control control, Type type, string key, string script, bool addScriptTags);
    public void RegisterClientScriptInclude(string key, string url);
    public void RegisterClientScriptInclude(Type type, string key, string url);
    internal void RegisterClientScriptInclude(Type type, string key, string url, bool isResource);
    internal void RegisterClientScriptInclude(Control control, Type type, string key, string url);
    public void RegisterClientScriptResource(Type type, string resourceName);
    internal void RegisterClientScriptResource(Control control, Type type, string resourceName);
    internal void RegisterDefaultButtonScript(Control button, HtmlTextWriter writer, bool useAddAttribute);
    public void RegisterOnSubmitStatement(Type type, string key, string script);
    internal void RegisterOnSubmitStatement(Control control, Type type, string key, string script);
    internal void RegisterOnSubmitStatementInternal(ScriptKey key, string script);
    internal void RegisterScriptBlock(ScriptKey key, string script, ClientAPIRegisterType type);
    public void RegisterStartupScript(Type type, string key, string script);
    public void RegisterStartupScript(Type type, string key, string script, bool addScriptTags);
    internal void RegisterStartupScript(Control control, Type type, string key, string script, bool addScriptTags);
    internal void RenderArrayDeclares(HtmlTextWriter writer);
    internal void RenderExpandoAttribute(HtmlTextWriter writer);
    internal void RenderHiddenFields(HtmlTextWriter writer);
    internal void RenderClientScriptBlocks(HtmlTextWriter writer);
    internal void RenderClientStartupScripts(HtmlTextWriter writer);
    internal void RenderWebFormsScript(HtmlTextWriter writer);
}
internal class System.Web.UI.CodeBlockBuilder : ControlBuilder {
    protected CodeBlockType _blockType;
    protected string _content;
    internal string Content { get; }
    public CodeBlockType BlockType { get; }
    internal int Column { get; }
    internal bool IsEncoded { get; private set; }
    internal CodeBlockBuilder(CodeBlockType blockType, string content, int lineNumber, int column, VirtualPath virtualPath, bool encode);
    internal CodeBlockBuilder(CodeBlockType blockType, string content, int lineNumber, int column, VirtualPath virtualPath);
    public virtual object BuildObject();
    internal string get_Content();
    public sealed virtual CodeBlockType get_BlockType();
    internal int get_Column();
    [CompilerGeneratedAttribute]
internal bool get_IsEncoded();
    [CompilerGeneratedAttribute]
private void set_IsEncoded(bool value);
}
public enum System.Web.UI.CodeBlockType : Enum {
    public int value__;
    public static CodeBlockType Code;
    public static CodeBlockType Expression;
    public static CodeBlockType DataBinding;
    public static CodeBlockType EncodedExpression;
}
public enum System.Web.UI.CodeConstructType : Enum {
    public int value__;
    public static CodeConstructType CodeSnippet;
    public static CodeConstructType ExpressionSnippet;
    public static CodeConstructType DataBindingSnippet;
    public static CodeConstructType ScriptTag;
    public static CodeConstructType EncodedExpressionSnippet;
}
public abstract class System.Web.UI.CodeStatementBuilder : ControlBuilder {
    public abstract virtual CodeStatement BuildStatement(CodeArgumentReferenceExpression writerReferenceExpression);
}
internal class System.Web.UI.CollectionBuilder : ControlBuilder {
    internal CollectionBuilder(bool ignoreUnknownContent);
    public virtual void Init(TemplateParser parser, ControlBuilder parentBuilder, Type type, string tagName, string ID, IDictionary attribs);
    public virtual object BuildObject();
    public virtual Type GetChildControlType(string tagName, IDictionary attribs);
    public virtual void AppendLiteralString(string s);
}
public enum System.Web.UI.CompilationMode : Enum {
    public int value__;
    public static CompilationMode Auto;
    public static CompilationMode Never;
    public static CompilationMode Always;
}
public class System.Web.UI.CompiledBindableTemplateBuilder : object {
    public CompiledBindableTemplateBuilder(BuildTemplateMethod buildTemplateMethod, ExtractTemplateValuesMethod extractTemplateValuesMethod);
    public sealed virtual IOrderedDictionary ExtractValues(Control container);
    public sealed virtual void InstantiateIn(Control container);
}
public class System.Web.UI.CompiledTemplateBuilder : object {
    public CompiledTemplateBuilder(BuildTemplateMethod buildTemplateMethod);
    public sealed virtual void InstantiateIn(Control container);
}
public class System.Web.UI.ComplexPropertyEntry : BuilderPropertyEntry {
    public bool IsCollectionItem { get; }
    public bool ReadOnly { get; public set; }
    internal ComplexPropertyEntry(bool isCollectionItem);
    public bool get_IsCollectionItem();
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
}
public enum System.Web.UI.ConflictOptions : Enum {
    public int value__;
    public static ConflictOptions OverwriteChanges;
    public static ConflictOptions CompareAllValues;
}
[AttributeUsageAttribute("4")]
public class System.Web.UI.ConstructorNeedsTagAttribute : Attribute {
    public bool NeedsTag { get; }
    public ConstructorNeedsTagAttribute(bool needsTag);
    public bool get_NeedsTag();
}
[BindableAttribute("True")]
[DefaultPropertyAttribute("ID")]
[DesignerCategoryAttribute("Code")]
[DesignerAttribute("System.Web.UI.Design.ControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DesignerSerializerAttribute("Microsoft.VisualStudio.Web.WebForms.ControlCodeDomSerializer, Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ThemeableAttribute("False")]
[ToolboxItemFilterAttribute("System.Web.UI", "3")]
[ToolboxItemAttribute("System.Web.UI.Design.WebControlToolboxItem, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.UI.Control : object {
    internal static object EventDataBinding;
    internal static object EventInit;
    internal static object EventLoad;
    internal static object EventUnload;
    internal static object EventPreRender;
    internal static bool EnableViewStateDefault;
    internal static char ID_SEPARATOR;
    internal static char LEGACY_ID_SEPARATOR;
    internal Page _page;
    internal static int isWebControlDisabled;
    internal SimpleBitVector32 flags;
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Control_ClientIDMode")]
public ClientIDMode ClientIDMode { get; public set; }
    internal ClientIDMode EffectiveClientIDMode { get; }
    internal string UniqueClientID { get; }
    internal string StaticClientID { get; }
    internal ControlAdapter AdapterInternal { get; internal set; }
    internal string PredictableClientID { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("Control_ClientID")]
public string ClientID { get; }
    protected char ClientIDSeparator { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected internal HttpContext Context { get; }
    protected ControlAdapter Adapter { get; }
    protected internal bool DesignMode { get; }
    protected EventHandlerList Events { get; }
    [ParenthesizePropertyNameAttribute("True")]
[MergablePropertyAttribute("False")]
[FilterableAttribute("False")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("Control_ID")]
public string ID { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("True")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Control_EnableTheming")]
public bool EnableTheming { get; public set; }
    internal bool IsBindingContainer { get; }
    protected internal bool IsChildControlStateCleared { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[FilterableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Control_SkinId")]
public string SkinID { get; public set; }
    [DefaultValueAttribute("True")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Control_MaintainState")]
public bool EnableViewState { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Control_ViewStateMode")]
public ViewStateMode ViewStateMode { get; public set; }
    protected internal bool IsViewStateEnabled { get; }
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("Control_NamingContainer")]
public Control NamingContainer { get; }
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Control BindingContainer { get; }
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Control DataItemContainer { get; }
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Control DataKeysContainer { get; }
    protected char IdSeparator { get; }
    internal char IdSeparatorFromConfig { get; }
    protected bool LoadViewStateByID { get; }
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("Control_Page")]
public Page Page { get; public set; }
    internal RouteCollection RouteCollection { get; internal set; }
    internal bool IsReloadable { get; }
    internal bool EnableLegacyRendering { get; }
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Version RenderingCompatibility { get; public set; }
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("Control_TemplateControl")]
public TemplateControl TemplateControl { get; public set; }
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("Control_Parent")]
public Control Parent { get; }
    internal bool IsParentedToUpdatePanel { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("Control_TemplateSourceDirectory")]
public string TemplateSourceDirectory { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("Control_TemplateSourceDirectory")]
public string AppRelativeTemplateSourceDirectory { get; public set; }
    internal VirtualPath TemplateControlVirtualDirectory { get; internal set; }
    internal ControlState ControlState { get; internal set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("2")]
[WebSysDescriptionAttribute("Control_Site")]
public ISite Site { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("True")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Control_Visible")]
public bool Visible { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("Control_UniqueID")]
public string UniqueID { get; }
    protected bool HasChildViewState { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("Control_Controls")]
public ControlCollection Controls { get; }
    [WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Control_ValidateRequestMode")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ValidateRequestMode ValidateRequestMode { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("Control_State")]
protected StateBag ViewState { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected bool ViewStateIgnoresCase { get; }
    protected bool ChildControlsCreated { get; protected set; }
    protected bool IsTrackingViewState { get; }
    private bool System.Web.UI.IDataBindingsAccessor.HasDataBindings { get; }
    private DataBindingCollection System.Web.UI.IDataBindingsAccessor.DataBindings { get; }
    internal string SpacerImageUrl { get; }
    internal IPostBackDataHandler PostBackDataHandler { get; }
    internal IPostBackEventHandler PostBackEventHandler { get; }
    private IDictionary System.Web.UI.IControlDesignerAccessor.UserData { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
private ControlBuilder System.Web.UI.IControlBuilderAccessor.ControlBuilder { get; }
    private bool System.Web.UI.IExpressionsAccessor.HasExpressions { get; }
    private ExpressionBindingCollection System.Web.UI.IExpressionsAccessor.Expressions { get; }
    private static Control();
    public virtual ClientIDMode get_ClientIDMode();
    public virtual void set_ClientIDMode(ClientIDMode value);
    internal virtual ClientIDMode get_EffectiveClientIDMode();
    internal string get_UniqueClientID();
    internal string get_StaticClientID();
    internal ControlAdapter get_AdapterInternal();
    internal void set_AdapterInternal(ControlAdapter value);
    internal string get_PredictableClientID();
    public virtual string get_ClientID();
    protected char get_ClientIDSeparator();
    public sealed virtual void add_Disposed(EventHandler value);
    public sealed virtual void remove_Disposed(EventHandler value);
    protected internal virtual HttpContext get_Context();
    protected virtual ControlAdapter ResolveAdapter();
    protected ControlAdapter get_Adapter();
    protected internal bool get_DesignMode();
    internal void ValidateEvent(string uniqueID);
    internal void ValidateEvent(string uniqueID, string eventArgument);
    protected EventHandlerList get_Events();
    protected bool HasEvents();
    public virtual string get_ID();
    public virtual void set_ID(string value);
    public virtual bool get_EnableTheming();
    public virtual void set_EnableTheming(bool value);
    internal bool ShouldSerializeEnableTheming();
    internal bool get_IsBindingContainer();
    protected internal bool get_IsChildControlStateCleared();
    public virtual string get_SkinID();
    public virtual void set_SkinID(string value);
    public virtual bool get_EnableViewState();
    public virtual void set_EnableViewState(bool value);
    public virtual ViewStateMode get_ViewStateMode();
    public virtual void set_ViewStateMode(ViewStateMode value);
    internal void SetEnableViewStateInternal(bool value);
    protected internal bool get_IsViewStateEnabled();
    public virtual Control get_NamingContainer();
    public Control get_BindingContainer();
    public Control get_DataItemContainer();
    public Control get_DataKeysContainer();
    protected char get_IdSeparator();
    internal char get_IdSeparatorFromConfig();
    protected bool get_LoadViewStateByID();
    public virtual Page get_Page();
    public virtual void set_Page(Page value);
    internal RouteCollection get_RouteCollection();
    internal void set_RouteCollection(RouteCollection value);
    internal virtual bool get_IsReloadable();
    internal bool get_EnableLegacyRendering();
    internal XhtmlConformanceSection GetXhtmlConformanceSection();
    public virtual Version get_RenderingCompatibility();
    public virtual void set_RenderingCompatibility(Version value);
    public string GetRouteUrl(object routeParameters);
    public string GetRouteUrl(string routeName, object routeParameters);
    public string GetRouteUrl(RouteValueDictionary routeParameters);
    public string GetRouteUrl(string routeName, RouteValueDictionary routeParameters);
    internal virtual TemplateControl GetTemplateControl();
    public TemplateControl get_TemplateControl();
    [EditorBrowsableAttribute("1")]
public void set_TemplateControl(TemplateControl value);
    internal bool IsDescendentOf(Control ancestor);
    public virtual Control get_Parent();
    internal bool get_IsParentedToUpdatePanel();
    public virtual string get_TemplateSourceDirectory();
    public string get_AppRelativeTemplateSourceDirectory();
    [EditorBrowsableAttribute("1")]
public void set_AppRelativeTemplateSourceDirectory(string value);
    internal VirtualPath get_TemplateControlVirtualDirectory();
    internal void set_TemplateControlVirtualDirectory(VirtualPath value);
    internal ControlState get_ControlState();
    internal void set_ControlState(ControlState value);
    public sealed virtual ISite get_Site();
    public sealed virtual void set_Site(ISite value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public virtual string get_UniqueID();
    public string GetUniqueIDRelativeTo(Control control);
    public void add_DataBinding(EventHandler value);
    public void remove_DataBinding(EventHandler value);
    public void add_Init(EventHandler value);
    public void remove_Init(EventHandler value);
    public void add_Load(EventHandler value);
    public void remove_Load(EventHandler value);
    public void add_PreRender(EventHandler value);
    public void remove_PreRender(EventHandler value);
    public void add_Unload(EventHandler value);
    public void remove_Unload(EventHandler value);
    [EditorBrowsableAttribute("2")]
public virtual void ApplyStyleSheetSkin(Page page);
    protected virtual void OnDataBinding(EventArgs e);
    public virtual void DataBind();
    protected virtual void DataBind(bool raiseOnDataBinding);
    protected virtual void DataBindChildren();
    internal void PreventAutoID();
    protected virtual void AddParsedSubObject(object obj);
    protected void EnsureID();
    internal virtual string GetUniqueIDPrefix();
    protected internal virtual void OnInit(EventArgs e);
    internal virtual void InitRecursive(Control namingContainer);
    [AsyncStateMachineAttribute("System.Web.UI.Control/<InitRecursiveAsync>d__225")]
internal Task InitRecursiveAsync(Control namingContainer, Page page);
    protected void ClearChildState();
    protected void ClearChildControlState();
    protected void ClearChildViewState();
    protected void ClearEffectiveClientIDMode();
    protected void ClearCachedClientID();
    protected bool get_HasChildViewState();
    public virtual void Focus();
    internal void LoadControlStateInternal(object savedStateObj);
    protected internal virtual void LoadControlState(object savedState);
    protected virtual void LoadViewState(object savedState);
    internal void LoadViewStateRecursive(object savedState);
    internal void LoadChildViewStateByID(ArrayList childState);
    internal void LoadChildViewStateByIndex(ArrayList childState);
    internal void ResolvePhysicalOrVirtualPath(string path, VirtualPath& virtualPath, String& physicalPath);
    protected internal string MapPathSecure(string virtualPath);
    protected internal Stream OpenFile(string path);
    internal Stream OpenFileAndGetDependency(VirtualPath virtualPath, string physicalPath, CacheDependency& dependency);
    protected internal virtual void OnLoad(EventArgs e);
    internal virtual void LoadRecursive();
    [AsyncStateMachineAttribute("System.Web.UI.Control/<LoadRecursiveAsync>d__246")]
internal Task LoadRecursiveAsync(Page page);
    protected internal virtual void OnPreRender(EventArgs e);
    internal virtual void PreRenderRecursiveInternal();
    [AsyncStateMachineAttribute("System.Web.UI.Control/<PreRenderRecursiveInternalAsync>d__249")]
internal Task PreRenderRecursiveInternalAsync(Page page);
    internal int EstimateStateSize(object state);
    protected void BuildProfileTree(string parentId, bool calcViewState);
    internal object SaveControlStateInternal();
    protected internal virtual object SaveControlState();
    protected virtual object SaveViewState();
    internal object SaveViewStateRecursive(ViewStateMode inheritedMode);
    protected internal virtual void Render(HtmlTextWriter writer);
    internal void RenderChildrenInternal(HtmlTextWriter writer, ICollection children);
    protected internal virtual void RenderChildren(HtmlTextWriter writer);
    public virtual void RenderControl(HtmlTextWriter writer);
    protected void RenderControl(HtmlTextWriter writer, ControlAdapter adapter);
    protected internal virtual void OnUnload(EventArgs e);
    public virtual void Dispose();
    internal virtual void UnloadRecursive(bool dispose);
    protected void RaiseBubbleEvent(object source, EventArgs args);
    protected virtual bool OnBubbleEvent(object source, EventArgs args);
    public virtual ControlCollection get_Controls();
    public virtual ValidateRequestMode get_ValidateRequestMode();
    public virtual void set_ValidateRequestMode(ValidateRequestMode value);
    internal void SetValidateRequestModeInternal(ValidateRequestMode value, bool setDirty);
    internal bool CalculateEffectiveValidateRequest();
    protected virtual StateBag get_ViewState();
    protected virtual bool get_ViewStateIgnoresCase();
    protected internal virtual void AddedControl(Control control, int index);
    protected virtual ControlCollection CreateControlCollection();
    protected internal virtual void CreateChildControls();
    protected bool get_ChildControlsCreated();
    protected void set_ChildControlsCreated(bool value);
    public string ResolveUrl(string relativeUrl);
    public sealed virtual string ResolveClientUrl(string relativeUrl);
    internal void DirtyNameTable();
    public virtual Control FindControl(string id);
    protected virtual Control FindControl(string id, int pathOffset);
    internal Control FindControlFromPageIfNecessary(string id);
    internal void ClearNamingContainer();
    protected virtual IDictionary GetDesignModeState();
    public virtual bool HasControls();
    internal bool HasRenderingData();
    internal bool HasRenderDelegate();
    protected bool IsLiteralContent();
    protected bool get_IsTrackingViewState();
    protected virtual void TrackViewState();
    protected virtual void EnsureChildControls();
    internal void SetControlBuilder(ControlBuilder controlBuilder);
    protected internal virtual void RemovedControl(Control control);
    internal void SetDesignMode();
    protected virtual void SetDesignModeState(IDictionary data);
    [EditorBrowsableAttribute("2")]
public void SetRenderMethodDelegate(RenderMethod renderMethod);
    private sealed virtual override bool System.Web.UI.IDataBindingsAccessor.get_HasDataBindings();
    private sealed virtual override DataBindingCollection System.Web.UI.IDataBindingsAccessor.get_DataBindings();
    private sealed virtual override void System.Web.UI.IParserAccessor.AddParsedSubObject(object obj);
    internal string get_SpacerImageUrl();
    internal IPostBackDataHandler get_PostBackDataHandler();
    internal IPostBackEventHandler get_PostBackEventHandler();
    [EditorBrowsableAttribute("1")]
protected void BeginRenderTracing(TextWriter writer, object traceObject);
    [EditorBrowsableAttribute("1")]
protected void EndRenderTracing(TextWriter writer, object traceObject);
    [EditorBrowsableAttribute("1")]
public void SetTraceData(object traceDataKey, object traceDataValue);
    [EditorBrowsableAttribute("1")]
public void SetTraceData(object tracedObject, object traceDataKey, object traceDataValue);
    private sealed virtual override IDictionary System.Web.UI.IControlDesignerAccessor.get_UserData();
    private sealed virtual override IDictionary System.Web.UI.IControlDesignerAccessor.GetDesignModeState();
    private sealed virtual override void System.Web.UI.IControlDesignerAccessor.SetDesignModeState(IDictionary data);
    private sealed virtual override void System.Web.UI.IControlDesignerAccessor.SetOwnerControl(Control owner);
    private sealed virtual override ControlBuilder System.Web.UI.IControlBuilderAccessor.get_ControlBuilder();
    private sealed virtual override bool System.Web.UI.IExpressionsAccessor.get_HasExpressions();
    private sealed virtual override ExpressionBindingCollection System.Web.UI.IExpressionsAccessor.get_Expressions();
}
public class System.Web.UI.ControlBuilder : object {
    public static string DesignerFilter;
    internal static Regex expressionBuilderRegex;
    public Type BindingContainerType { get; }
    public ControlBuilder BindingContainerBuilder { get; }
    public string ItemType { get; }
    internal ICollection EventEntries { get; }
    internal ICollection SimplePropertyEntries { get; }
    internal ArrayList SimplePropertyEntriesInternal { get; }
    public ICollection ComplexPropertyEntries { get; }
    public ICollection TemplatePropertyEntries { get; }
    internal ICollection BoundPropertyEntries { get; }
    internal bool HasFilteredBoundEntries { get; }
    internal bool IsNoCompile { get; }
    internal string SkinID { get; internal set; }
    internal IDictionary AdditionalState { get; }
    public Type ControlType { get; }
    public IFilterResolutionService CurrentFilterResolutionService { get; }
    public Type DeclareType { get; }
    public IThemeResolutionService ThemeResolutionService { get; }
    internal string Filter { get; internal set; }
    protected bool FChildrenAsProperties { get; }
    protected bool FIsNonParserAccessor { get; }
    public bool HasAspCode { get; }
    public string ID { get; public set; }
    internal bool IsGeneratedID { get; internal set; }
    protected bool InDesigner { get; }
    protected bool InPageTheme { get; }
    internal bool IsControlSkin { get; }
    internal int Line { get; internal set; }
    public bool Localize { get; }
    public Type NamingContainerType { get; }
    internal CompilationMode CompilationMode { get; }
    internal ControlBuilder ParentBuilder { get; }
    protected internal TemplateParser Parser { get; }
    public ArrayList SubBuilders { get; }
    public IServiceProvider ServiceProvider { get; }
    public string TagName { get; }
    internal VirtualPath VirtualPath { get; internal set; }
    public string PageVirtualPath { get; }
    internal TemplateControl TemplateControl { get; }
    internal bool HasTwoWayBoundProperties { get; }
    private static ControlBuilder();
    public virtual Type get_BindingContainerType();
    public virtual ControlBuilder get_BindingContainerBuilder();
    public virtual string get_ItemType();
    internal ICollection get_EventEntries();
    internal ICollection get_SimplePropertyEntries();
    internal ArrayList get_SimplePropertyEntriesInternal();
    public ICollection get_ComplexPropertyEntries();
    public ICollection get_TemplatePropertyEntries();
    internal ICollection get_BoundPropertyEntries();
    internal bool get_HasFilteredBoundEntries();
    internal bool get_IsNoCompile();
    internal string get_SkinID();
    internal void set_SkinID(string value);
    internal IDictionary get_AdditionalState();
    public Type get_ControlType();
    public IFilterResolutionService get_CurrentFilterResolutionService();
    public virtual Type get_DeclareType();
    public IThemeResolutionService get_ThemeResolutionService();
    internal string get_Filter();
    internal void set_Filter(string value);
    protected bool get_FChildrenAsProperties();
    protected bool get_FIsNonParserAccessor();
    public virtual bool get_HasAspCode();
    public string get_ID();
    public void set_ID(string value);
    internal bool get_IsGeneratedID();
    internal void set_IsGeneratedID(bool value);
    protected bool get_InDesigner();
    protected bool get_InPageTheme();
    internal bool get_IsControlSkin();
    internal int get_Line();
    internal void set_Line(int value);
    public bool get_Localize();
    public Type get_NamingContainerType();
    internal CompilationMode get_CompilationMode();
    internal ControlBuilder get_ParentBuilder();
    protected internal TemplateParser get_Parser();
    public ArrayList get_SubBuilders();
    public IServiceProvider get_ServiceProvider();
    public string get_TagName();
    internal VirtualPath get_VirtualPath();
    internal void set_VirtualPath(VirtualPath value);
    public string get_PageVirtualPath();
    internal TemplateControl get_TemplateControl();
    internal void AddSubBuilder(object o);
    internal bool get_HasTwoWayBoundProperties();
    public virtual bool AllowWhitespaceLiterals();
    public virtual void AppendLiteralString(string s);
    public virtual void AppendSubBuilder(ControlBuilder subBuilder);
    internal virtual void BuildChildren(object parentObj);
    public virtual object BuildObject();
    internal object BuildObject(bool shouldApplyTheme);
    internal object BuildObjectInternal();
    public virtual void CloseControl();
    internal static ParsedAttributeCollection ConvertDictionaryToParsedAttributeCollection(IDictionary attribs);
    internal ControlBuilder CreateChildBuilder(string filter, string tagName, IDictionary attribs, TemplateParser parser, ControlBuilder parentBuilder, string id, int line, VirtualPath virtualPath, Type& childType, bool defaultProperty);
    public static ControlBuilder CreateBuilderFromType(TemplateParser parser, ControlBuilder parentBuilder, Type type, string tagName, string id, IDictionary attribs, int line, string sourceFileName);
    public virtual Type GetChildControlType(string tagName, IDictionary attribs);
    internal ICollection GetFilteredPropertyEntrySet(ICollection entries);
    internal object GetLastBuilder();
    public ObjectPersistData GetObjectPersistData();
    public virtual bool HasBody();
    public virtual bool HtmlDecodeLiterals();
    public virtual void Init(TemplateParser parser, ControlBuilder parentBuilder, Type type, string tagName, string id, IDictionary attribs);
    internal virtual object GetThemedObject(object obj);
    internal virtual void InitObject(object obj);
    internal void SetSimpleProperty(SimplePropertyEntry entry, object obj);
    public virtual bool NeedsTagInnerText();
    public virtual void OnAppendToParentBuilder(ControlBuilder parentBuilder);
    internal virtual void PrepareNoCompilePageSupport();
    internal void PreprocessAttribute(string filter, string attribname, string attribvalue, bool mainDirectiveMode, int line, int column);
    internal void ProcessImplicitResources(ParsedAttributeCollection attribs);
    public void SetServiceProvider(IServiceProvider serviceProvider);
    internal void EnsureEntriesSorted();
    internal virtual void SortEntries();
    internal void ProcessAndSortPropertyEntries(ArrayList propertyEntries, FilteredPropertyEntryComparer& comparer);
    internal void SetControlType(Type controlType);
    internal virtual void SetParentBuilder(ControlBuilder parentBuilder);
    public string GetResourceKey();
    public void SetResourceKey(string resourceKey);
    public virtual void SetTagInnerText(string text);
    public virtual void ProcessGeneratedCode(CodeCompileUnit codeCompileUnit, CodeTypeDeclaration baseType, CodeTypeDeclaration derivedType, CodeMemberMethod buildMethod, CodeMemberMethod dataBindingMethod);
}
[AttributeUsageAttribute("4")]
public class System.Web.UI.ControlBuilderAttribute : Attribute {
    public static ControlBuilderAttribute Default;
    public Type BuilderType { get; }
    public ControlBuilderAttribute(Type builderType);
    private static ControlBuilderAttribute();
    public Type get_BuilderType();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual bool IsDefaultAttribute();
}
internal class System.Web.UI.ControlCachedVary : object {
    internal String[] _varyByParams;
    internal string _varyByCustom;
    internal String[] _varyByControls;
    internal Guid CachedVaryId { get; }
    internal ControlCachedVary(String[] varyByParams, String[] varyByControls, string varyByCustom);
    internal Guid get_CachedVaryId();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Web.UI.ControlCachePolicy : object {
    public bool SupportsCaching { get; }
    public bool Cached { get; public set; }
    public TimeSpan Duration { get; public set; }
    public HttpCacheVaryByParams VaryByParams { get; }
    public string VaryByControl { get; public set; }
    public CacheDependency Dependency { get; public set; }
    public string ProviderName { get; public set; }
    internal ControlCachePolicy(BasePartialCachingControl pcc);
    private static ControlCachePolicy();
    internal static ControlCachePolicy GetCachePolicyStub();
    public bool get_SupportsCaching();
    public bool get_Cached();
    public void set_Cached(bool value);
    public TimeSpan get_Duration();
    public void set_Duration(TimeSpan value);
    public HttpCacheVaryByParams get_VaryByParams();
    public string get_VaryByControl();
    public void set_VaryByControl(string value);
    public CacheDependency get_Dependency();
    public void set_Dependency(CacheDependency value);
    public void SetVaryByCustom(string varyByCustom);
    public void SetSlidingExpiration(bool useSlidingExpiration);
    public void SetExpires(DateTime expirationTime);
    public string get_ProviderName();
    public void set_ProviderName(string value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.ControlCollection : object {
    public int Count { get; }
    protected Control Owner { get; }
    public object SyncRoot { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public Control Item { get; }
    public ControlCollection(Control owner);
    internal ControlCollection(Control owner, int defaultCapacity, int growthFactor);
    public virtual void Add(Control child);
    public virtual void AddAt(int index, Control child);
    public virtual void Clear();
    public virtual bool Contains(Control c);
    public virtual int get_Count();
    protected Control get_Owner();
    public virtual int IndexOf(Control value);
    public virtual IEnumerator GetEnumerator();
    public virtual void CopyTo(Array array, int index);
    public sealed virtual object get_SyncRoot();
    public bool get_IsReadOnly();
    internal string SetCollectionReadOnly(string errorMsg);
    public sealed virtual bool get_IsSynchronized();
    public virtual Control get_Item(int index);
    public virtual void RemoveAt(int index);
    public virtual void Remove(Control value);
}
internal static class System.Web.UI.ControlRenderingHelper : object {
    private static ControlRenderingHelper();
    internal static void WriteSkipLinkStart(HtmlTextWriter writer, Version renderingCompatibility, bool designMode, string skipLinkText, string spacerImageUrl, string clientID);
    internal static void WriteSkipLinkEnd(HtmlTextWriter writer, bool designMode, string skipLinkText, string clientID);
}
[EditorBrowsableAttribute("2")]
public class System.Web.UI.ControlSkin : object {
    public Type ControlType { get; }
    public ControlSkin(Type controlType, ControlSkinDelegate themeDelegate);
    public Type get_ControlType();
    public void ApplySkin(Control control);
}
[EditorBrowsableAttribute("2")]
public class System.Web.UI.ControlSkinDelegate : MulticastDelegate {
    public ControlSkinDelegate(object object, IntPtr method);
    public virtual Control Invoke(Control control);
    public virtual IAsyncResult BeginInvoke(Control control, AsyncCallback callback, object object);
    public virtual Control EndInvoke(IAsyncResult result);
}
internal enum System.Web.UI.ControlState : Enum {
    public int value__;
    public static ControlState Constructed;
    public static ControlState FrameworkInitialized;
    public static ControlState ChildrenInitialized;
    public static ControlState Initialized;
    public static ControlState ViewStateLoaded;
    public static ControlState Loaded;
    public static ControlState PreRendered;
}
[AttributeUsageAttribute("4")]
public class System.Web.UI.ControlValuePropertyAttribute : Attribute {
    public string Name { get; }
    public object DefaultValue { get; }
    public ControlValuePropertyAttribute(string name);
    public ControlValuePropertyAttribute(string name, object defaultValue);
    public ControlValuePropertyAttribute(string name, Type type, string defaultValue);
    public string get_Name();
    public object get_DefaultValue();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("128")]
public class System.Web.UI.CssClassPropertyAttribute : Attribute {
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.CssStyleCollection : object {
    public string Item { get; public set; }
    public string Item { get; public set; }
    public ICollection Keys { get; }
    public int Count { get; }
    public string Value { get; public set; }
    internal CssStyleCollection(StateBag state);
    private static CssStyleCollection();
    public string get_Item(string key);
    public void set_Item(string key, string value);
    public string get_Item(HtmlTextWriterStyle key);
    public void set_Item(HtmlTextWriterStyle key, string value);
    public ICollection get_Keys();
    public int get_Count();
    public string get_Value();
    public void set_Value(string value);
    public void Add(string key, string value);
    public void Add(HtmlTextWriterStyle key, string value);
    public void Remove(string key);
    public void Remove(HtmlTextWriterStyle key);
    public void Clear();
    internal void Render(CssTextWriter writer);
    internal void Render(HtmlTextWriter writer);
}
internal class System.Web.UI.CssTextWriter : TextWriter {
    public Encoding Encoding { get; }
    public string NewLine { get; public set; }
    private static CssTextWriter();
    public CssTextWriter(TextWriter writer);
    public virtual Encoding get_Encoding();
    public virtual string get_NewLine();
    public virtual void set_NewLine(string value);
    public virtual void Close();
    public virtual void Flush();
    public static HtmlTextWriterStyle GetStyleKey(string styleName);
    public static string GetStyleName(HtmlTextWriterStyle styleKey);
    public static bool IsStyleEncoded(HtmlTextWriterStyle styleKey);
    internal static void RegisterAttribute(string name, HtmlTextWriterStyle key);
    internal static void RegisterAttribute(string name, HtmlTextWriterStyle key, bool encode);
    internal static void RegisterAttribute(string name, HtmlTextWriterStyle key, bool encode, bool isUrl);
    public virtual void Write(string s);
    public virtual void Write(bool value);
    public virtual void Write(char value);
    public virtual void Write(Char[] buffer);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void Write(double value);
    public virtual void Write(float value);
    public virtual void Write(int value);
    public virtual void Write(long value);
    public virtual void Write(object value);
    public virtual void Write(string format, object arg0);
    public virtual void Write(string format, object arg0, object arg1);
    public virtual void Write(string format, Object[] arg);
    public void WriteAttribute(string name, string value);
    public void WriteAttribute(HtmlTextWriterStyle key, string value);
    internal static void WriteAttributes(TextWriter writer, RenderStyle[] styles, int count);
    public void WriteBeginCssRule(string selector);
    public void WriteEndCssRule();
    public virtual void WriteLine(string s);
    public virtual void WriteLine();
    public virtual void WriteLine(bool value);
    public virtual void WriteLine(char value);
    public virtual void WriteLine(Char[] buffer);
    public virtual void WriteLine(Char[] buffer, int index, int count);
    public virtual void WriteLine(double value);
    public virtual void WriteLine(float value);
    public virtual void WriteLine(int value);
    public virtual void WriteLine(long value);
    public virtual void WriteLine(object value);
    public virtual void WriteLine(string format, object arg0);
    public virtual void WriteLine(string format, object arg0, object arg1);
    public virtual void WriteLine(string format, Object[] arg);
    public virtual void WriteLine(UInt32 value);
    internal static void WriteUrlAttribute(TextWriter writer, string url);
}
public class System.Web.UI.DataBinder : object {
    public static bool EnableCaching { get; public set; }
    private static DataBinder();
    public static bool get_EnableCaching();
    public static void set_EnableCaching(bool value);
    public static object Eval(object container, string expression);
    public static string Eval(object container, string expression, string format);
    internal static PropertyDescriptorCollection GetPropertiesFromCache(object container);
    public static object GetPropertyValue(object container, string propName);
    public static string GetPropertyValue(object container, string propName, string format);
    public static object GetIndexedPropertyValue(object container, string expr);
    public static string GetIndexedPropertyValue(object container, string propName, string format);
    public static object GetDataItem(object container);
    public static object GetDataItem(object container, Boolean& foundDataItem);
    public static bool IsBindableType(Type type);
    internal static bool IsNull(object value);
}
public class System.Web.UI.DataBinding : object {
    public string Expression { get; public set; }
    public string PropertyName { get; }
    public Type PropertyType { get; }
    public DataBinding(string propertyName, Type propertyType, string expression);
    public string get_Expression();
    public void set_Expression(string value);
    public string get_PropertyName();
    public Type get_PropertyType();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.DataBindingCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public String[] RemovedBindings { get; }
    public object SyncRoot { get; }
    public DataBinding Item { get; }
    public sealed virtual int get_Count();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public String[] get_RemovedBindings();
    public sealed virtual object get_SyncRoot();
    public DataBinding get_Item(string propertyName);
    public void add_Changed(EventHandler value);
    public void remove_Changed(EventHandler value);
    public void Add(DataBinding binding);
    public bool Contains(string propertyName);
    public void Clear();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public void Remove(string propertyName);
    public void Remove(DataBinding binding);
    public void Remove(string propertyName, bool addToRemovedList);
}
[AttributeUsageAttribute("4")]
public class System.Web.UI.DataBindingHandlerAttribute : Attribute {
    public static DataBindingHandlerAttribute Default;
    public string HandlerTypeName { get; }
    public DataBindingHandlerAttribute(Type type);
    public DataBindingHandlerAttribute(string typeName);
    private static DataBindingHandlerAttribute();
    public string get_HandlerTypeName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ToolboxItemAttribute("False")]
public class System.Web.UI.DataBoundLiteralControl : Control {
    public string Text { get; }
    private string System.Web.UI.ITextControl.Text { get; private set; }
    public DataBoundLiteralControl(int staticLiteralsCount, int dataBoundLiteralCount);
    public void SetStaticString(int index, string s);
    public void SetDataBoundString(int index, string s);
    public string get_Text();
    protected virtual ControlCollection CreateControlCollection();
    protected virtual void LoadViewState(object savedState);
    protected virtual object SaveViewState();
    protected internal virtual void Render(HtmlTextWriter output);
    private sealed virtual override string System.Web.UI.ITextControl.get_Text();
    private sealed virtual override void System.Web.UI.ITextControl.set_Text(string value);
}
internal class System.Web.UI.DataBoundLiteralControlBuilder : ControlBuilder {
    internal void AddLiteralString(string s);
    internal void AddDataBindingExpression(CodeBlockBuilder codeBlockBuilder);
    internal int GetStaticLiteralsCount();
    internal int GetDataBoundLiteralCount();
}
[AttributeUsageAttribute("4")]
public class System.Web.UI.DataKeyPropertyAttribute : Attribute {
    public string Name { get; }
    public DataKeyPropertyAttribute(string name);
    public string get_Name();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Web.UI.DataSourceCache : object {
    public static int Infinite;
    public int Duration { get; public set; }
    public bool Enabled { get; public set; }
    public DataSourceCacheExpiry ExpirationPolicy { get; public set; }
    [DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("DataSourceCache_KeyDependency")]
public string KeyDependency { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected StateBag ViewState { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public virtual int get_Duration();
    public virtual void set_Duration(int value);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public virtual DataSourceCacheExpiry get_ExpirationPolicy();
    public virtual void set_ExpirationPolicy(DataSourceCacheExpiry value);
    public virtual string get_KeyDependency();
    public virtual void set_KeyDependency(string value);
    protected StateBag get_ViewState();
    public void Invalidate(string key);
    public object LoadDataFromCache(string key);
    protected virtual void LoadViewState(object savedState);
    public void SaveDataToCache(string key, object data);
    public void SaveDataToCache(string key, object data, CacheDependency dependency);
    protected virtual void SaveDataToCacheInternal(string key, object data, CacheDependency dependency);
    protected virtual object SaveViewState();
    protected void TrackViewState();
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object savedState);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
public class System.Web.UI.DataSourceCacheDurationConverter : Int32Converter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public enum System.Web.UI.DataSourceCacheExpiry : Enum {
    public int value__;
    public static DataSourceCacheExpiry Absolute;
    public static DataSourceCacheExpiry Sliding;
}
[FlagsAttribute]
public enum System.Web.UI.DataSourceCapabilities : Enum {
    public int value__;
    public static DataSourceCapabilities None;
    public static DataSourceCapabilities Sort;
    public static DataSourceCapabilities Page;
    public static DataSourceCapabilities RetrieveTotalRowCount;
}
[BindableAttribute("False")]
[ControlBuilderAttribute("System.Web.UI.DataSourceControlBuilder")]
[DesignerAttribute("System.Web.UI.Design.DataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[NonVisualControlAttribute]
public abstract class System.Web.UI.DataSourceControl : Control {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string ClientID { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public ClientIDMode ClientIDMode { get; public set; }
    [EditorBrowsableAttribute("1")]
public ControlCollection Controls { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool EnableTheming { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[EditorBrowsableAttribute("1")]
public string SkinID { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Visible { get; public set; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    private static DataSourceControl();
    public virtual string get_ClientID();
    public virtual ClientIDMode get_ClientIDMode();
    public virtual void set_ClientIDMode(ClientIDMode value);
    public virtual ControlCollection get_Controls();
    public virtual bool get_EnableTheming();
    public virtual void set_EnableTheming(bool value);
    public virtual string get_SkinID();
    public virtual void set_SkinID(string value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    internal void add_DataSourceChangedInternal(EventHandler value);
    internal void remove_DataSourceChangedInternal(EventHandler value);
    [EditorBrowsableAttribute("1")]
public virtual void ApplyStyleSheetSkin(Page page);
    protected virtual ControlCollection CreateControlCollection();
    [EditorBrowsableAttribute("1")]
public virtual Control FindControl(string id);
    [EditorBrowsableAttribute("1")]
public virtual void Focus();
    protected abstract virtual DataSourceView GetView(string viewName);
    protected virtual ICollection GetViewNames();
    [EditorBrowsableAttribute("1")]
public virtual bool HasControls();
    protected virtual void RaiseDataSourceChangedEvent(EventArgs e);
    [EditorBrowsableAttribute("1")]
public virtual void RenderControl(HtmlTextWriter writer);
    private sealed virtual override void System.Web.UI.IDataSource.add_DataSourceChanged(EventHandler value);
    private sealed virtual override void System.Web.UI.IDataSource.remove_DataSourceChanged(EventHandler value);
    private sealed virtual override DataSourceView System.Web.UI.IDataSource.GetView(string viewName);
    private sealed virtual override ICollection System.Web.UI.IDataSource.GetViewNames();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
}
public class System.Web.UI.DataSourceControlBuilder : ControlBuilder {
    public virtual bool AllowWhitespaceLiterals();
}
internal class System.Web.UI.DataSourceHelper : object {
    internal static IEnumerable GetResolvedDataSource(object dataSource, string dataMember);
}
public enum System.Web.UI.DataSourceOperation : Enum {
    public int value__;
    public static DataSourceOperation Delete;
    public static DataSourceOperation Insert;
    public static DataSourceOperation Select;
    public static DataSourceOperation Update;
    public static DataSourceOperation SelectCount;
}
public class System.Web.UI.DataSourceSelectArguments : object {
    public static DataSourceSelectArguments Empty { get; }
    public int MaximumRows { get; public set; }
    public bool RetrieveTotalRowCount { get; public set; }
    public string SortExpression { get; public set; }
    public int StartRowIndex { get; public set; }
    public int TotalRowCount { get; public set; }
    public DataSourceSelectArguments(string sortExpression);
    public DataSourceSelectArguments(int startRowIndex, int maximumRows);
    public DataSourceSelectArguments(string sortExpression, int startRowIndex, int maximumRows);
    public static DataSourceSelectArguments get_Empty();
    public int get_MaximumRows();
    public void set_MaximumRows(int value);
    public bool get_RetrieveTotalRowCount();
    public void set_RetrieveTotalRowCount(bool value);
    public string get_SortExpression();
    public void set_SortExpression(string value);
    public int get_StartRowIndex();
    public void set_StartRowIndex(int value);
    public int get_TotalRowCount();
    public void set_TotalRowCount(int value);
    public void AddSupportedCapabilities(DataSourceCapabilities capabilities);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public void RaiseUnsupportedCapabilitiesError(DataSourceView view);
}
public abstract class System.Web.UI.DataSourceView : object {
    public bool CanDelete { get; }
    public bool CanInsert { get; }
    public bool CanPage { get; }
    public bool CanRetrieveTotalRowCount { get; }
    public bool CanSort { get; }
    public bool CanUpdate { get; }
    protected EventHandlerList Events { get; }
    public string Name { get; }
    protected DataSourceView(IDataSource owner, string viewName);
    private static DataSourceView();
    public virtual bool get_CanDelete();
    public virtual bool get_CanInsert();
    public virtual bool get_CanPage();
    public virtual bool get_CanRetrieveTotalRowCount();
    public virtual bool get_CanSort();
    public virtual bool get_CanUpdate();
    protected EventHandlerList get_Events();
    public string get_Name();
    public void add_DataSourceViewChanged(EventHandler value);
    public void remove_DataSourceViewChanged(EventHandler value);
    public virtual bool CanExecute(string commandName);
    public virtual void Delete(IDictionary keys, IDictionary oldValues, DataSourceViewOperationCallback callback);
    public virtual void ExecuteCommand(string commandName, IDictionary keys, IDictionary values, DataSourceViewOperationCallback callback);
    protected virtual int ExecuteCommand(string commandName, IDictionary keys, IDictionary values);
    protected virtual int ExecuteDelete(IDictionary keys, IDictionary oldValues);
    protected virtual int ExecuteInsert(IDictionary values);
    protected internal abstract virtual IEnumerable ExecuteSelect(DataSourceSelectArguments arguments);
    protected virtual int ExecuteUpdate(IDictionary keys, IDictionary values, IDictionary oldValues);
    protected virtual void OnDataSourceViewChanged(EventArgs e);
    public virtual void Insert(IDictionary values, DataSourceViewOperationCallback callback);
    protected internal virtual void RaiseUnsupportedCapabilityError(DataSourceCapabilities capability);
    public virtual void Select(DataSourceSelectArguments arguments, DataSourceViewSelectCallback callback);
    public virtual void Update(IDictionary keys, IDictionary values, IDictionary oldValues, DataSourceViewOperationCallback callback);
}
public class System.Web.UI.DataSourceViewOperationCallback : MulticastDelegate {
    public DataSourceViewOperationCallback(object object, IntPtr method);
    public virtual bool Invoke(int affectedRecords, Exception ex);
    public virtual IAsyncResult BeginInvoke(int affectedRecords, Exception ex, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class System.Web.UI.DataSourceViewSelectCallback : MulticastDelegate {
    public DataSourceViewSelectCallback(object object, IntPtr method);
    public virtual void Invoke(IEnumerable data);
    public virtual IAsyncResult BeginInvoke(IEnumerable data, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal abstract class System.Web.UI.DependencyParser : BaseParser {
    protected PagesSection PagesConfig { get; }
    internal string DefaultDirectiveName { get; }
    protected PagesSection get_PagesConfig();
    internal void Init(VirtualPath virtualPath);
    internal ICollection GetVirtualPathDependencies();
    protected void AddDependency(VirtualPath virtualPath);
    internal abstract virtual string get_DefaultDirectiveName();
    protected virtual void PrepareParse();
    internal virtual void ProcessDirective(string directiveName, IDictionary directive);
    internal virtual void ProcessMainDirectiveAttribute(string deviceName, string name, string value);
}
[DataBindingHandlerAttribute("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemAttribute("False")]
public class System.Web.UI.DesignerDataBoundLiteralControl : Control {
    public string Text { get; public set; }
    public string get_Text();
    public void set_Text(string value);
    protected virtual ControlCollection CreateControlCollection();
    protected virtual void LoadViewState(object savedState);
    protected internal virtual void Render(HtmlTextWriter output);
    protected virtual object SaveViewState();
}
internal class System.Web.UI.DesignTimePageThemeParser : PageThemeParser {
    internal string ThemePhysicalPath { get; }
    internal DesignTimePageThemeParser(string virtualDirPath);
    internal string get_ThemePhysicalPath();
    internal virtual void ParseInternal();
}
public class System.Web.UI.DesignTimeParseData : object {
    public bool ShouldApplyTheme { get; public set; }
    public EventHandler DataBindingHandler { get; public set; }
    public IDesignerHost DesignerHost { get; }
    public string DocumentUrl { get; public set; }
    public string Filter { get; }
    public string ParseText { get; }
    public ICollection UserControlRegisterEntries { get; }
    public DesignTimeParseData(IDesignerHost designerHost, string parseText);
    public DesignTimeParseData(IDesignerHost designerHost, string parseText, string filter);
    public bool get_ShouldApplyTheme();
    public void set_ShouldApplyTheme(bool value);
    public EventHandler get_DataBindingHandler();
    public void set_DataBindingHandler(EventHandler value);
    public IDesignerHost get_DesignerHost();
    public string get_DocumentUrl();
    public void set_DocumentUrl(string value);
    public string get_Filter();
    public string get_ParseText();
    public ICollection get_UserControlRegisterEntries();
    internal void SetUserControlRegisterEntries(ICollection userControlRegisterEntries, List`1<TagNamespaceRegisterEntry> tagRegisterEntries);
}
public static class System.Web.UI.DesignTimeTemplateParser : object {
    public static Control ParseControl(DesignTimeParseData data);
    public static Control[] ParseControls(DesignTimeParseData data);
    internal static Control[] ParseControlsInternal(DesignTimeParseData data, bool returnFirst);
    public static ITemplate ParseTemplate(DesignTimeParseData data);
    public static ControlBuilder ParseTheme(IDesignerHost host, string theme, string themePath);
}
public class System.Web.UI.EmptyControlCollection : ControlCollection {
    public EmptyControlCollection(Control owner);
    public virtual void Add(Control child);
    public virtual void AddAt(int index, Control child);
}
internal class System.Web.UI.ErrorFormatterPage : Page {
    protected internal virtual void SavePageStateToPersistenceMedium(object viewState);
    protected internal virtual object LoadPageStateFromPersistenceMedium();
}
public class System.Web.UI.EventEntry : object {
    public string HandlerMethodName { get; public set; }
    public Type HandlerType { get; public set; }
    public string Name { get; public set; }
    public string get_HandlerMethodName();
    public void set_HandlerMethodName(string value);
    public Type get_HandlerType();
    public void set_HandlerType(Type value);
    public string get_Name();
    public void set_Name(string value);
}
internal class System.Web.UI.EventValidationStore : object {
    public int Count { get; }
    public int get_Count();
    public void Add(string target, string argument);
    public EventValidationStore Clone();
    public bool Contains(string target, string argument);
    public static EventValidationStore DeserializeFrom(Stream inputStream);
    public void SerializeTo(Stream outputStream);
}
public class System.Web.UI.ExpressionBinding : object {
    public string Expression { get; public set; }
    public string ExpressionPrefix { get; public set; }
    public bool Generated { get; }
    public object ParsedExpressionData { get; }
    public string PropertyName { get; }
    public Type PropertyType { get; }
    public ExpressionBinding(string propertyName, Type propertyType, string expressionPrefix, string expression);
    internal ExpressionBinding(string propertyName, Type propertyType, string expressionPrefix, string expression, bool generated, object parsedExpressionData);
    public string get_Expression();
    public void set_Expression(string value);
    public string get_ExpressionPrefix();
    public void set_ExpressionPrefix(string value);
    public bool get_Generated();
    public object get_ParsedExpressionData();
    public string get_PropertyName();
    public Type get_PropertyType();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.ExpressionBindingCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public ICollection RemovedBindings { get; }
    public object SyncRoot { get; }
    public ExpressionBinding Item { get; }
    public sealed virtual int get_Count();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public ICollection get_RemovedBindings();
    public sealed virtual object get_SyncRoot();
    public ExpressionBinding get_Item(string propertyName);
    public void add_Changed(EventHandler value);
    public void remove_Changed(EventHandler value);
    public void Add(ExpressionBinding binding);
    public bool Contains(string propName);
    public void Clear();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(ExpressionBinding[] array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public void Remove(string propertyName);
    public void Remove(ExpressionBinding binding);
    public void Remove(string propertyName, bool addToRemovedList);
}
public class System.Web.UI.ExtractTemplateValuesMethod : MulticastDelegate {
    public ExtractTemplateValuesMethod(object object, IntPtr method);
    public virtual IOrderedDictionary Invoke(Control control);
    public virtual IAsyncResult BeginInvoke(Control control, AsyncCallback callback, object object);
    public virtual IOrderedDictionary EndInvoke(IAsyncResult result);
}
internal class System.Web.UI.FileDataSourceCache : DataSourceCache {
    public StringCollection FileDependencies { get; }
    public StringCollection get_FileDependencies();
    protected virtual void SaveDataToCacheInternal(string key, object data, CacheDependency dependency);
}
[AttributeUsageAttribute("4")]
public class System.Web.UI.FileLevelControlBuilderAttribute : Attribute {
    public static FileLevelControlBuilderAttribute Default;
    public Type BuilderType { get; }
    public FileLevelControlBuilderAttribute(Type builderType);
    private static FileLevelControlBuilderAttribute();
    public Type get_BuilderType();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual bool IsDefaultAttribute();
}
public class System.Web.UI.FileLevelMasterPageControlBuilder : FileLevelPageControlBuilder {
    internal virtual void AddContentTemplate(object obj, string templateName, ITemplate template);
}
public class System.Web.UI.FileLevelPageControlBuilder : RootBuilder {
    internal ICollection ContentBuilderEntries { get; }
    internal ICollection get_ContentBuilderEntries();
    public virtual void AppendLiteralString(string text);
    public virtual void AppendSubBuilder(ControlBuilder subBuilder);
    internal virtual void InitObject(object obj);
    internal virtual void AddContentTemplate(object obj, string templateName, ITemplate template);
    internal virtual void SortEntries();
}
internal class System.Web.UI.FileLevelPageThemeBuilder : RootBuilder {
    public virtual void AppendLiteralString(string s);
    public virtual void AppendSubBuilder(ControlBuilder subBuilder);
}
public class System.Web.UI.FileLevelUserControlBuilder : RootBuilder {
}
[AttributeUsageAttribute("132")]
public class System.Web.UI.FilterableAttribute : Attribute {
    public static FilterableAttribute Yes;
    public static FilterableAttribute No;
    public static FilterableAttribute Default;
    public bool Filterable { get; }
    private static FilterableAttribute();
    public FilterableAttribute(bool filterable);
    public bool get_Filterable();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
    public static bool IsObjectFilterable(object instance);
    public static bool IsPropertyFilterable(PropertyDescriptor propertyDescriptor);
    public static bool IsTypeFilterable(Type type);
}
[DefaultMemberAttribute("Item")]
internal class System.Web.UI.FilteredAttributeDictionary : object {
    internal IDictionary Data { get; }
    public string Filter { get; }
    public string Item { get; public set; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal FilteredAttributeDictionary(ParsedAttributeCollection owner, string filter);
    internal IDictionary get_Data();
    public string get_Filter();
    public string get_Item(string key);
    public void set_Item(string key, string value);
    public void Add(string key, string value);
    public void Clear();
    public bool Contains(string key);
    public void Remove(string key);
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override void System.Collections.IDictionary.Clear();
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Web.UI.HiddenFieldPageStatePersister : PageStatePersister {
    public HiddenFieldPageStatePersister(Page page);
    public virtual void Load();
    public virtual void Save();
}
[BindableAttribute("False")]
[ControlBuilderAttribute("System.Web.UI.DataSourceControlBuilder")]
[DesignerAttribute("System.Web.UI.Design.HierarchicalDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[NonVisualControlAttribute]
public abstract class System.Web.UI.HierarchicalDataSourceControl : Control {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string ClientID { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public ClientIDMode ClientIDMode { get; public set; }
    [EditorBrowsableAttribute("1")]
public ControlCollection Controls { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool EnableTheming { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[EditorBrowsableAttribute("1")]
public string SkinID { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Visible { get; public set; }
    private static HierarchicalDataSourceControl();
    public virtual string get_ClientID();
    public virtual ClientIDMode get_ClientIDMode();
    public virtual void set_ClientIDMode(ClientIDMode value);
    public virtual ControlCollection get_Controls();
    public virtual bool get_EnableTheming();
    public virtual void set_EnableTheming(bool value);
    public virtual string get_SkinID();
    public virtual void set_SkinID(string value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    [EditorBrowsableAttribute("1")]
public virtual void ApplyStyleSheetSkin(Page page);
    protected virtual ControlCollection CreateControlCollection();
    [EditorBrowsableAttribute("1")]
public virtual Control FindControl(string id);
    [EditorBrowsableAttribute("1")]
public virtual void Focus();
    protected abstract virtual HierarchicalDataSourceView GetHierarchicalView(string viewPath);
    [EditorBrowsableAttribute("1")]
public virtual bool HasControls();
    protected virtual void OnDataSourceChanged(EventArgs e);
    [EditorBrowsableAttribute("1")]
public virtual void RenderControl(HtmlTextWriter writer);
    private sealed virtual override void System.Web.UI.IHierarchicalDataSource.add_DataSourceChanged(EventHandler value);
    private sealed virtual override void System.Web.UI.IHierarchicalDataSource.remove_DataSourceChanged(EventHandler value);
    private sealed virtual override HierarchicalDataSourceView System.Web.UI.IHierarchicalDataSource.GetHierarchicalView(string viewPath);
}
public abstract class System.Web.UI.HierarchicalDataSourceView : object {
    public abstract virtual IHierarchicalEnumerable Select();
}
public class System.Web.UI.Html32TextWriter : HtmlTextWriter {
    protected Stack FontStack { get; }
    internal bool RenderDivAroundHiddenInputs { get; }
    public bool ShouldPerformDivTableSubstitution { get; public set; }
    public bool SupportsBold { get; public set; }
    public bool SupportsItalic { get; public set; }
    public Html32TextWriter(TextWriter writer);
    public Html32TextWriter(TextWriter writer, string tabString);
    protected Stack get_FontStack();
    internal virtual bool get_RenderDivAroundHiddenInputs();
    public bool get_ShouldPerformDivTableSubstitution();
    public void set_ShouldPerformDivTableSubstitution(bool value);
    public bool get_SupportsBold();
    public void set_SupportsBold(bool value);
    public bool get_SupportsItalic();
    public void set_SupportsItalic(bool value);
    protected virtual bool OnStyleAttributeRender(string name, string value, HtmlTextWriterStyle key);
    protected virtual bool OnTagRender(string name, HtmlTextWriterTag key);
    protected virtual string GetTagName(HtmlTextWriterTag tagKey);
    public virtual void RenderBeginTag(HtmlTextWriterTag tagKey);
    protected virtual string RenderBeforeTag();
    protected virtual string RenderBeforeContent();
    protected virtual string RenderAfterContent();
    protected virtual string RenderAfterTag();
    public virtual void RenderEndTag();
}
[AttributeUsageAttribute("128")]
internal class System.Web.UI.HtmlControlPersistableAttribute : Attribute {
    internal static HtmlControlPersistableAttribute Yes;
    internal static HtmlControlPersistableAttribute No;
    internal static HtmlControlPersistableAttribute Default;
    internal bool HtmlControlPersistable { get; }
    internal HtmlControlPersistableAttribute(bool persistable);
    private static HtmlControlPersistableAttribute();
    internal bool get_HtmlControlPersistable();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
[DefaultEventAttribute("ServerClick")]
[SupportsEventValidationAttribute]
public class System.Web.UI.HtmlControls.HtmlAnchor : HtmlContainerControl {
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
public bool CausesValidation { get; public set; }
    [WebCategoryAttribute("Navigation")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[UrlPropertyAttribute]
public string HRef { get; public set; }
    [WebCategoryAttribute("Navigation")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    [WebCategoryAttribute("Navigation")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Target { get; public set; }
    [WebCategoryAttribute("Appearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Title { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("PostBackControl_ValidationGroup")]
public string ValidationGroup { get; public set; }
    private static HtmlAnchor();
    public virtual bool get_CausesValidation();
    public virtual void set_CausesValidation(bool value);
    public string get_HRef();
    public void set_HRef(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Target();
    public void set_Target(string value);
    public string get_Title();
    public void set_Title(string value);
    public virtual string get_ValidationGroup();
    public virtual void set_ValidationGroup(string value);
    public void add_ServerClick(EventHandler value);
    public void remove_ServerClick(EventHandler value);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
    protected virtual void OnServerClick(EventArgs e);
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    protected virtual void RaisePostBackEvent(string eventArgument);
}
[ControlBuilderAttribute("System.Web.UI.HtmlControls.HtmlEmptyTagControlBuilder")]
public class System.Web.UI.HtmlControls.HtmlArea : HtmlControl {
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[UrlPropertyAttribute]
public string Href { get; public set; }
    public string get_Href();
    public void set_Href(string value);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
}
public class System.Web.UI.HtmlControls.HtmlAudio : HtmlContainerControl {
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[UrlPropertyAttribute]
public string Src { get; public set; }
    public string get_Src();
    public void set_Src(string value);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
}
[DefaultEventAttribute("ServerClick")]
[SupportsEventValidationAttribute]
public class System.Web.UI.HtmlControls.HtmlButton : HtmlContainerControl {
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
public bool CausesValidation { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("PostBackControl_ValidationGroup")]
public string ValidationGroup { get; public set; }
    private static HtmlButton();
    public virtual bool get_CausesValidation();
    public virtual void set_CausesValidation(bool value);
    public virtual string get_ValidationGroup();
    public virtual void set_ValidationGroup(string value);
    public void add_ServerClick(EventHandler value);
    public void remove_ServerClick(EventHandler value);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
    protected virtual void OnServerClick(EventArgs e);
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    protected virtual void RaisePostBackEvent(string eventArgument);
}
public abstract class System.Web.UI.HtmlControls.HtmlContainerControl : HtmlControl {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[HtmlControlPersistableAttribute("False")]
public string InnerHtml { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[HtmlControlPersistableAttribute("False")]
public string InnerText { get; public set; }
    public HtmlContainerControl(string tag);
    public virtual string get_InnerHtml();
    public virtual void set_InnerHtml(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    protected virtual ControlCollection CreateControlCollection();
    protected virtual void LoadViewState(object savedState);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
    protected virtual void RenderEndTag(HtmlTextWriter writer);
}
[DesignerAttribute("System.Web.UI.Design.HtmlIntrinsicControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemAttribute("False")]
public abstract class System.Web.UI.HtmlControls.HtmlControl : Control {
    internal string _tagName;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public AttributeCollection Attributes { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public CssStyleCollection Style { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string TagName { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[TypeConverterAttribute("System.Web.UI.MinimizableAttributeTypeConverter")]
public bool Disabled { get; public set; }
    protected bool ViewStateIgnoresCase { get; }
    protected HtmlControl(string tag);
    public AttributeCollection get_Attributes();
    public CssStyleCollection get_Style();
    public virtual string get_TagName();
    public bool get_Disabled();
    public void set_Disabled(bool value);
    protected virtual bool get_ViewStateIgnoresCase();
    protected virtual ControlCollection CreateControlCollection();
    protected internal virtual void Render(HtmlTextWriter writer);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
    protected virtual void RenderBeginTag(HtmlTextWriter writer);
    private sealed virtual override string System.Web.UI.IAttributeAccessor.GetAttribute(string name);
    protected virtual string GetAttribute(string name);
    private sealed virtual override void System.Web.UI.IAttributeAccessor.SetAttribute(string name, string value);
    protected virtual void SetAttribute(string name, string value);
    internal void PreProcessRelativeReferenceAttribute(HtmlTextWriter writer, string attribName);
    internal static string MapStringAttributeToString(string s);
    internal static string MapIntegerAttributeToString(int n);
}
public class System.Web.UI.HtmlControls.HtmlElement : HtmlContainerControl {
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[UrlPropertyAttribute]
public string Manifest { get; public set; }
    public string get_Manifest();
    public void set_Manifest(string value);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
}
public class System.Web.UI.HtmlControls.HtmlEmbed : HtmlContainerControl {
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[UrlPropertyAttribute]
public string Src { get; public set; }
    public string get_Src();
    public void set_Src(string value);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
}
public class System.Web.UI.HtmlControls.HtmlEmptyTagControlBuilder : ControlBuilder {
    public virtual bool HasBody();
}
public class System.Web.UI.HtmlControls.HtmlForm : HtmlContainerControl {
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Action { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
public string DefaultButton { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
public string DefaultFocus { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Enctype { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Method { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
public bool SubmitDisabledControls { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Target { get; public set; }
    public string UniqueID { get; }
    public string ClientID { get; }
    public string get_Action();
    public void set_Action(string value);
    public string get_DefaultButton();
    public void set_DefaultButton(string value);
    public string get_DefaultFocus();
    public void set_DefaultFocus(string value);
    public string get_Enctype();
    public void set_Enctype(string value);
    public string get_Method();
    public void set_Method(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual bool get_SubmitDisabledControls();
    public virtual void set_SubmitDisabledControls(bool value);
    public string get_Target();
    public void set_Target(string value);
    public virtual string get_UniqueID();
    public virtual string get_ClientID();
    protected internal virtual void Render(HtmlTextWriter output);
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
    protected internal virtual void RenderChildren(HtmlTextWriter writer);
    public virtual void RenderControl(HtmlTextWriter writer);
    protected virtual ControlCollection CreateControlCollection();
}
[ConstructorNeedsTagAttribute("True")]
public class System.Web.UI.HtmlControls.HtmlGenericControl : HtmlContainerControl {
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string TagName { get; public set; }
    public HtmlGenericControl(string tag);
    public string get_TagName();
    public void set_TagName(string value);
}
[ControlBuilderAttribute("System.Web.UI.HtmlControls.HtmlHeadBuilder")]
public class System.Web.UI.HtmlControls.HtmlHead : HtmlGenericControl {
    public IStyleSheet StyleSheet { get; }
    public string Title { get; public set; }
    public string Description { get; public set; }
    public string Keywords { get; public set; }
    public HtmlHead(string tag);
    public IStyleSheet get_StyleSheet();
    public string get_Title();
    public void set_Title(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_Keywords();
    public void set_Keywords(string value);
    protected internal virtual void AddedControl(Control control, int index);
    protected internal virtual void OnInit(EventArgs e);
    internal void RegisterCssStyleString(string outputString);
    protected internal virtual void RemovedControl(Control control);
    protected internal virtual void RenderChildren(HtmlTextWriter writer);
    internal void RenderStyleSheet(HtmlTextWriter writer);
    internal static void RenderCssRule(CssTextWriter cssWriter, string selector, Style style, IUrlResolutionService urlResolver);
}
public class System.Web.UI.HtmlControls.HtmlHeadBuilder : ControlBuilder {
    public virtual Type GetChildControlType(string tagName, IDictionary attribs);
    public virtual bool AllowWhitespaceLiterals();
}
public class System.Web.UI.HtmlControls.HtmlIframe : HtmlContainerControl {
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[UrlPropertyAttribute]
public string Src { get; public set; }
    public string get_Src();
    public void set_Src(string value);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
}
[ControlBuilderAttribute("System.Web.UI.HtmlControls.HtmlEmptyTagControlBuilder")]
public class System.Web.UI.HtmlControls.HtmlImage : HtmlControl {
    [WebCategoryAttribute("Appearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Alt { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Align { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public int Border { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("100")]
[DesignerSerializationVisibilityAttribute("0")]
public int Height { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[UrlPropertyAttribute]
public string Src { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("100")]
[DesignerSerializationVisibilityAttribute("0")]
public int Width { get; public set; }
    public string get_Alt();
    public void set_Alt(string value);
    public string get_Align();
    public void set_Align(string value);
    public int get_Border();
    public void set_Border(int value);
    public int get_Height();
    public void set_Height(int value);
    public string get_Src();
    public void set_Src(string value);
    public int get_Width();
    public void set_Width(int value);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
}
[DefaultEventAttribute("ServerClick")]
[SupportsEventValidationAttribute]
public class System.Web.UI.HtmlControls.HtmlInputButton : HtmlInputControl {
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
public bool CausesValidation { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("PostBackControl_ValidationGroup")]
public string ValidationGroup { get; public set; }
    public HtmlInputButton(string type);
    private static HtmlInputButton();
    public virtual bool get_CausesValidation();
    public virtual void set_CausesValidation(bool value);
    public virtual string get_ValidationGroup();
    public virtual void set_ValidationGroup(string value);
    public void add_ServerClick(EventHandler value);
    public void remove_ServerClick(EventHandler value);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
    internal virtual void RenderAttributesInternal(HtmlTextWriter writer);
    protected virtual void OnServerClick(EventArgs e);
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    protected virtual void RaisePostBackEvent(string eventArgument);
}
[DefaultEventAttribute("ServerChange")]
[SupportsEventValidationAttribute]
public class System.Web.UI.HtmlControls.HtmlInputCheckBox : HtmlInputControl {
    [WebCategoryAttribute("Default")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[TypeConverterAttribute("System.Web.UI.MinimizableAttributeTypeConverter")]
public bool Checked { get; public set; }
    private static HtmlInputCheckBox();
    public bool get_Checked();
    public void set_Checked(bool value);
    public void add_ServerChange(EventHandler value);
    public void remove_ServerChange(EventHandler value);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void OnServerChange(EventArgs e);
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    protected virtual void RaisePostDataChangedEvent();
}
[ControlBuilderAttribute("System.Web.UI.HtmlControls.HtmlEmptyTagControlBuilder")]
public abstract class System.Web.UI.HtmlControls.HtmlInputControl : HtmlControl {
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    internal string RenderedNameAttribute { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Value { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Type { get; }
    protected HtmlInputControl(string type);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal virtual string get_RenderedNameAttribute();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public string get_Type();
    protected virtual void RenderAttributes(HtmlTextWriter writer);
}
[ValidationPropertyAttribute("Value")]
public class System.Web.UI.HtmlControls.HtmlInputFile : HtmlInputControl {
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Accept { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public int MaxLength { get; public set; }
    [WebCategoryAttribute("Default")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public HttpPostedFile PostedFile { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("-1")]
[DesignerSerializationVisibilityAttribute("0")]
public int Size { get; public set; }
    [BrowsableAttribute("False")]
public string Value { get; public set; }
    public string get_Accept();
    public void set_Accept(string value);
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public HttpPostedFile get_PostedFile();
    public int get_Size();
    public void set_Size(int value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    protected virtual void RaisePostDataChangedEvent();
    protected internal virtual void OnPreRender(EventArgs e);
}
[DefaultEventAttribute("ServerChange")]
[ValidationPropertyAttribute("Value")]
public class System.Web.UI.HtmlControls.HtmlInputGenericControl : HtmlInputControl {
    public HtmlInputGenericControl(string type);
    private static HtmlInputGenericControl();
    public void add_ServerChange(EventHandler value);
    public void remove_ServerChange(EventHandler value);
    protected virtual void OnServerChange(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    protected virtual void RaisePostDataChangedEvent();
}
[DefaultEventAttribute("ServerChange")]
[SupportsEventValidationAttribute]
public class System.Web.UI.HtmlControls.HtmlInputHidden : HtmlInputControl {
    private static HtmlInputHidden();
    public void add_ServerChange(EventHandler value);
    public void remove_ServerChange(EventHandler value);
    protected virtual void OnServerChange(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    protected virtual void RaisePostDataChangedEvent();
}
[DefaultEventAttribute("ServerClick")]
[SupportsEventValidationAttribute]
public class System.Web.UI.HtmlControls.HtmlInputImage : HtmlInputControl {
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Align { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[LocalizableAttribute("True")]
public string Alt { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("-1")]
[DesignerSerializationVisibilityAttribute("0")]
public int Border { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[UrlPropertyAttribute]
public string Src { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
public bool CausesValidation { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("PostBackControl_ValidationGroup")]
public string ValidationGroup { get; public set; }
    private static HtmlInputImage();
    public string get_Align();
    public void set_Align(string value);
    public string get_Alt();
    public void set_Alt(string value);
    public int get_Border();
    public void set_Border(int value);
    public string get_Src();
    public void set_Src(string value);
    public virtual bool get_CausesValidation();
    public virtual void set_CausesValidation(bool value);
    public virtual string get_ValidationGroup();
    public virtual void set_ValidationGroup(string value);
    public void add_ServerClick(ImageClickEventHandler value);
    public void remove_ServerClick(ImageClickEventHandler value);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void OnServerClick(ImageClickEventArgs e);
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    protected virtual void RaisePostBackEvent(string eventArgument);
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    protected virtual void RaisePostDataChangedEvent();
    protected virtual void RenderAttributes(HtmlTextWriter writer);
}
[DefaultEventAttribute("ServerChange")]
[ValidationPropertyAttribute("Value")]
[SupportsEventValidationAttribute]
public class System.Web.UI.HtmlControls.HtmlInputPassword : HtmlInputText {
    private static HtmlInputPassword();
    protected virtual void RenderAttributes(HtmlTextWriter writer);
}
[DefaultEventAttribute("ServerChange")]
[SupportsEventValidationAttribute]
public class System.Web.UI.HtmlControls.HtmlInputRadioButton : HtmlInputControl {
    [WebCategoryAttribute("Default")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Checked { get; public set; }
    public string Name { get; public set; }
    public string Value { get; public set; }
    internal string RenderedNameAttribute { get; }
    private static HtmlInputRadioButton();
    public bool get_Checked();
    public void set_Checked(bool value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    internal virtual string get_RenderedNameAttribute();
    public void add_ServerChange(EventHandler value);
    public void remove_ServerChange(EventHandler value);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void OnServerChange(EventArgs e);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    protected virtual void RaisePostDataChangedEvent();
}
[DefaultEventAttribute("")]
[SupportsEventValidationAttribute]
public class System.Web.UI.HtmlControls.HtmlInputReset : HtmlInputButton {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool CausesValidation { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string ValidationGroup { get; public set; }
    public HtmlInputReset(string type);
    public virtual bool get_CausesValidation();
    public virtual void set_CausesValidation(bool value);
    public virtual string get_ValidationGroup();
    public virtual void set_ValidationGroup(string value);
    public void add_ServerClick(EventHandler value);
    public void remove_ServerClick(EventHandler value);
    internal virtual void RenderAttributesInternal(HtmlTextWriter writer);
}
[DefaultEventAttribute("ServerClick")]
[SupportsEventValidationAttribute]
public class System.Web.UI.HtmlControls.HtmlInputSubmit : HtmlInputButton {
    public HtmlInputSubmit(string type);
    internal virtual void RenderAttributesInternal(HtmlTextWriter writer);
}
[DefaultEventAttribute("ServerChange")]
[SupportsEventValidationAttribute]
[ValidationPropertyAttribute("Value")]
public class System.Web.UI.HtmlControls.HtmlInputText : HtmlInputControl {
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public int MaxLength { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("-1")]
[DesignerSerializationVisibilityAttribute("0")]
public int Size { get; public set; }
    public string Value { get; public set; }
    public HtmlInputText(string type);
    private static HtmlInputText();
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public int get_Size();
    public void set_Size(int value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public void add_ServerChange(EventHandler value);
    public void remove_ServerChange(EventHandler value);
    protected virtual void OnServerChange(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    protected virtual void RaisePostDataChangedEvent();
}
[ControlBuilderAttribute("System.Web.UI.HtmlControls.HtmlEmptyTagControlBuilder")]
public class System.Web.UI.HtmlControls.HtmlLink : HtmlControl {
    [WebCategoryAttribute("Action")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[UrlPropertyAttribute]
public string Href { get; public set; }
    public virtual string get_Href();
    public virtual void set_Href(string value);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
    protected internal virtual void Render(HtmlTextWriter writer);
}
[ControlBuilderAttribute("System.Web.UI.HtmlControls.HtmlEmptyTagControlBuilder")]
public class System.Web.UI.HtmlControls.HtmlMeta : HtmlControl {
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Content { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string HttpEquiv { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Scheme { get; public set; }
    public virtual string get_Content();
    public virtual void set_Content(string value);
    public virtual string get_HttpEquiv();
    public virtual void set_HttpEquiv(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_Scheme();
    public virtual void set_Scheme(string value);
    protected internal virtual void Render(HtmlTextWriter writer);
}
[DefaultEventAttribute("ServerChange")]
[ValidationPropertyAttribute("Value")]
[ControlBuilderAttribute("System.Web.UI.HtmlControls.HtmlSelectBuilder")]
[SupportsEventValidationAttribute]
public class System.Web.UI.HtmlControls.HtmlSelect : HtmlContainerControl {
    internal static string DataBoundViewStateKey;
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("HtmlSelect_DataMember")]
public string DataMember { get; public set; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("BaseDataBoundControl_DataSource")]
[DesignerSerializationVisibilityAttribute("0")]
public object DataSource { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("BaseDataBoundControl_DataSourceID")]
public string DataSourceID { get; public set; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("HtmlSelect_DataTextField")]
public string DataTextField { get; public set; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("HtmlSelect_DataValueField")]
public string DataValueField { get; public set; }
    public string InnerHtml { get; public set; }
    public string InnerText { get; public set; }
    protected bool IsBoundUsingDataSourceID { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ListItemCollection Items { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Multiple { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    internal string RenderedNameAttribute { get; }
    protected bool RequiresDataBinding { get; protected set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[HtmlControlPersistableAttribute("False")]
public int SelectedIndex { get; public set; }
    protected Int32[] SelectedIndices { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public int Size { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public string Value { get; public set; }
    private static HtmlSelect();
    public virtual string get_DataMember();
    public virtual void set_DataMember(string value);
    public virtual object get_DataSource();
    public virtual void set_DataSource(object value);
    public virtual string get_DataSourceID();
    public virtual void set_DataSourceID(string value);
    public virtual string get_DataTextField();
    public virtual void set_DataTextField(string value);
    public virtual string get_DataValueField();
    public virtual void set_DataValueField(string value);
    public virtual string get_InnerHtml();
    public virtual void set_InnerHtml(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    protected bool get_IsBoundUsingDataSourceID();
    public ListItemCollection get_Items();
    public bool get_Multiple();
    public void set_Multiple(bool value);
    public string get_Name();
    public void set_Name(string value);
    internal string get_RenderedNameAttribute();
    protected bool get_RequiresDataBinding();
    protected void set_RequiresDataBinding(bool value);
    public virtual int get_SelectedIndex();
    public virtual void set_SelectedIndex(int value);
    protected virtual Int32[] get_SelectedIndices();
    public int get_Size();
    public void set_Size(int value);
    public string get_Value();
    public void set_Value(string value);
    public void add_ServerChange(EventHandler value);
    public void remove_ServerChange(EventHandler value);
    protected virtual void AddParsedSubObject(object obj);
    protected virtual void ClearSelection();
    protected virtual ControlCollection CreateControlCollection();
    protected void EnsureDataBound();
    protected virtual IEnumerable GetData();
    protected virtual void LoadViewState(object savedState);
    protected virtual void OnDataBinding(EventArgs e);
    protected virtual void OnDataPropertyChanged();
    protected virtual void OnDataSourceViewChanged(object sender, EventArgs e);
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void OnLoad(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void OnServerChange(EventArgs e);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
    protected internal virtual void RenderChildren(HtmlTextWriter writer);
    protected virtual object SaveViewState();
    protected virtual void Select(Int32[] selectedIndices);
    protected virtual void TrackViewState();
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    protected virtual void RaisePostDataChangedEvent();
}
public class System.Web.UI.HtmlControls.HtmlSelectBuilder : ControlBuilder {
    public virtual Type GetChildControlType(string tagName, IDictionary attribs);
    public virtual bool AllowWhitespaceLiterals();
}
[ControlBuilderAttribute("System.Web.UI.HtmlControls.HtmlEmptyTagControlBuilder")]
public class System.Web.UI.HtmlControls.HtmlSource : HtmlControl {
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[UrlPropertyAttribute]
public string Src { get; public set; }
    public string get_Src();
    public void set_Src(string value);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
}
[ParseChildrenAttribute("True", "Rows")]
public class System.Web.UI.HtmlControls.HtmlTable : HtmlContainerControl {
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Align { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string BgColor { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("-1")]
[DesignerSerializationVisibilityAttribute("0")]
public int Border { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string BorderColor { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public int CellPadding { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public int CellSpacing { get; public set; }
    public string InnerHtml { get; public set; }
    public string InnerText { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Height { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Width { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[IgnoreUnknownContentAttribute]
public HtmlTableRowCollection Rows { get; }
    public string get_Align();
    public void set_Align(string value);
    public string get_BgColor();
    public void set_BgColor(string value);
    public int get_Border();
    public void set_Border(int value);
    public string get_BorderColor();
    public void set_BorderColor(string value);
    public int get_CellPadding();
    public void set_CellPadding(int value);
    public int get_CellSpacing();
    public void set_CellSpacing(int value);
    public virtual string get_InnerHtml();
    public virtual void set_InnerHtml(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public string get_Height();
    public void set_Height(string value);
    public string get_Width();
    public void set_Width(string value);
    public virtual HtmlTableRowCollection get_Rows();
    protected internal virtual void RenderChildren(HtmlTextWriter writer);
    protected virtual void RenderEndTag(HtmlTextWriter writer);
    protected virtual ControlCollection CreateControlCollection();
}
[ConstructorNeedsTagAttribute("True")]
public class System.Web.UI.HtmlControls.HtmlTableCell : HtmlContainerControl {
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Align { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string BgColor { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string BorderColor { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public int ColSpan { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Height { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[TypeConverterAttribute("System.Web.UI.MinimizableAttributeTypeConverter")]
public bool NoWrap { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public int RowSpan { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string VAlign { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Width { get; public set; }
    public HtmlTableCell(string tagName);
    public string get_Align();
    public void set_Align(string value);
    public string get_BgColor();
    public void set_BgColor(string value);
    public string get_BorderColor();
    public void set_BorderColor(string value);
    public int get_ColSpan();
    public void set_ColSpan(int value);
    public string get_Height();
    public void set_Height(string value);
    public bool get_NoWrap();
    public void set_NoWrap(bool value);
    public int get_RowSpan();
    public void set_RowSpan(int value);
    public string get_VAlign();
    public void set_VAlign(string value);
    public string get_Width();
    public void set_Width(string value);
    protected virtual void RenderEndTag(HtmlTextWriter writer);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.HtmlControls.HtmlTableCellCollection : object {
    public int Count { get; }
    public HtmlTableCell Item { get; }
    public object SyncRoot { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    internal HtmlTableCellCollection(HtmlTableRow owner);
    public sealed virtual int get_Count();
    public HtmlTableCell get_Item(int index);
    public void Add(HtmlTableCell cell);
    public void Insert(int index, HtmlTableCell cell);
    public void Clear();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual object get_SyncRoot();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public void Remove(HtmlTableCell cell);
    public void RemoveAt(int index);
}
[ParseChildrenAttribute("True", "Cells")]
public class System.Web.UI.HtmlControls.HtmlTableRow : HtmlContainerControl {
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Align { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HtmlTableCellCollection Cells { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string BgColor { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string BorderColor { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Height { get; public set; }
    public string InnerHtml { get; public set; }
    public string InnerText { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string VAlign { get; public set; }
    public string get_Align();
    public void set_Align(string value);
    public virtual HtmlTableCellCollection get_Cells();
    public string get_BgColor();
    public void set_BgColor(string value);
    public string get_BorderColor();
    public void set_BorderColor(string value);
    public string get_Height();
    public void set_Height(string value);
    public virtual string get_InnerHtml();
    public virtual void set_InnerHtml(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public string get_VAlign();
    public void set_VAlign(string value);
    protected internal virtual void RenderChildren(HtmlTextWriter writer);
    protected virtual void RenderEndTag(HtmlTextWriter writer);
    protected virtual ControlCollection CreateControlCollection();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.HtmlControls.HtmlTableRowCollection : object {
    public int Count { get; }
    public HtmlTableRow Item { get; }
    public object SyncRoot { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    internal HtmlTableRowCollection(HtmlTable owner);
    public sealed virtual int get_Count();
    public HtmlTableRow get_Item(int index);
    public void Add(HtmlTableRow row);
    public void Insert(int index, HtmlTableRow row);
    public void Clear();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual object get_SyncRoot();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual IEnumerator GetEnumerator();
    public void Remove(HtmlTableRow row);
    public void RemoveAt(int index);
}
[DefaultEventAttribute("ServerChange")]
[SupportsEventValidationAttribute]
[ValidationPropertyAttribute("Value")]
public class System.Web.UI.HtmlControls.HtmlTextArea : HtmlContainerControl {
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public int Cols { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    internal string RenderedNameAttribute { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public int Rows { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Value { get; public set; }
    private static HtmlTextArea();
    public int get_Cols();
    public void set_Cols(int value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal string get_RenderedNameAttribute();
    public int get_Rows();
    public void set_Rows(int value);
    public string get_Value();
    public void set_Value(string value);
    public void add_ServerChange(EventHandler value);
    public void remove_ServerChange(EventHandler value);
    protected virtual void AddParsedSubObject(object obj);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
    protected virtual void OnServerChange(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    protected virtual void RaisePostDataChangedEvent();
}
public class System.Web.UI.HtmlControls.HtmlTitle : HtmlControl {
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[LocalizableAttribute("True")]
[PersistenceModeAttribute("2")]
public string Text { get; public set; }
    public virtual string get_Text();
    public virtual void set_Text(string value);
    protected virtual void AddParsedSubObject(object obj);
    protected virtual ControlCollection CreateControlCollection();
    protected internal virtual void Render(HtmlTextWriter writer);
}
[ControlBuilderAttribute("System.Web.UI.HtmlControls.HtmlEmptyTagControlBuilder")]
public class System.Web.UI.HtmlControls.HtmlTrack : HtmlControl {
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[UrlPropertyAttribute]
public string Src { get; public set; }
    public string get_Src();
    public void set_Src(string value);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
}
public class System.Web.UI.HtmlControls.HtmlVideo : HtmlContainerControl {
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[UrlPropertyAttribute]
public string Poster { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[UrlPropertyAttribute]
public string Src { get; public set; }
    public string get_Poster();
    public void set_Poster(string value);
    public string get_Src();
    public void set_Src(string value);
    protected virtual void RenderAttributes(HtmlTextWriter writer);
}
internal class System.Web.UI.HtmlControls.SelectorStyleInfo : object {
    public string selector;
    public Style style;
    public IUrlResolutionService urlResolver;
}
internal class System.Web.UI.HtmlTagNameToTypeMapper : object {
    private sealed virtual override Type System.Web.UI.ITagNameToTypeMapper.GetControlType(string tagName, IDictionary attributeBag);
}
public class System.Web.UI.HtmlTextWriter : TextWriter {
    public static char TagLeftChar;
    public static char TagRightChar;
    public static string SelfClosingChars;
    public static string SelfClosingTagEnd;
    public static string EndTagLeftChars;
    public static char DoubleQuoteChar;
    public static char SingleQuoteChar;
    public static char SpaceChar;
    public static char EqualsChar;
    public static char SlashChar;
    public static string EqualsDoubleQuoteString;
    public static char SemicolonChar;
    public static char StyleEqualsChar;
    public static string DefaultTabString;
    internal static string DesignerRegionAttributeName;
    internal bool RenderDivAroundHiddenInputs { get; }
    public Encoding Encoding { get; }
    public string NewLine { get; public set; }
    public int Indent { get; public set; }
    public TextWriter InnerWriter { get; public set; }
    protected HtmlTextWriterTag TagKey { get; protected set; }
    protected string TagName { get; protected set; }
    private static HtmlTextWriter();
    public HtmlTextWriter(TextWriter writer);
    public HtmlTextWriter(TextWriter writer, string tabString);
    internal virtual bool get_RenderDivAroundHiddenInputs();
    public virtual void EnterStyle(Style style, HtmlTextWriterTag tag);
    public virtual void ExitStyle(Style style, HtmlTextWriterTag tag);
    internal virtual void OpenDiv();
    public virtual bool IsValidFormAttribute(string attribute);
    public virtual Encoding get_Encoding();
    public virtual string get_NewLine();
    public virtual void set_NewLine(string value);
    public int get_Indent();
    public void set_Indent(int value);
    public TextWriter get_InnerWriter();
    public void set_InnerWriter(TextWriter value);
    public virtual void BeginRender();
    public virtual void Close();
    public virtual void EndRender();
    public virtual void EnterStyle(Style style);
    public virtual void ExitStyle(Style style);
    public virtual void Flush();
    protected virtual void OutputTabs();
    public virtual void Write(string s);
    public virtual void Write(bool value);
    public virtual void Write(char value);
    public virtual void Write(Char[] buffer);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void Write(double value);
    public virtual void Write(float value);
    public virtual void Write(int value);
    public virtual void Write(long value);
    public virtual void Write(object value);
    public virtual void Write(string format, object arg0);
    public virtual void Write(string format, object arg0, object arg1);
    public virtual void Write(string format, Object[] arg);
    public void WriteLineNoTabs(string s);
    public virtual void WriteLine(string s);
    public virtual void WriteLine();
    public virtual void WriteLine(bool value);
    public virtual void WriteLine(char value);
    public virtual void WriteLine(Char[] buffer);
    public virtual void WriteLine(Char[] buffer, int index, int count);
    public virtual void WriteLine(double value);
    public virtual void WriteLine(float value);
    public virtual void WriteLine(int value);
    public virtual void WriteLine(long value);
    public virtual void WriteLine(object value);
    public virtual void WriteLine(string format, object arg0);
    public virtual void WriteLine(string format, object arg0, object arg1);
    public virtual void WriteLine(string format, Object[] arg);
    [CLSCompliantAttribute("False")]
public virtual void WriteLine(UInt32 value);
    protected static void RegisterTag(string name, HtmlTextWriterTag key);
    protected static void RegisterAttribute(string name, HtmlTextWriterAttribute key);
    protected static void RegisterStyle(string name, HtmlTextWriterStyle key);
    protected HtmlTextWriterTag get_TagKey();
    protected void set_TagKey(HtmlTextWriterTag value);
    protected string get_TagName();
    protected void set_TagName(string value);
    public virtual void AddAttribute(string name, string value);
    public virtual void AddAttribute(string name, string value, bool fEndode);
    public virtual void AddAttribute(HtmlTextWriterAttribute key, string value);
    public virtual void AddAttribute(HtmlTextWriterAttribute key, string value, bool fEncode);
    protected virtual void AddAttribute(string name, string value, HtmlTextWriterAttribute key);
    public virtual void AddStyleAttribute(string name, string value);
    public virtual void AddStyleAttribute(HtmlTextWriterStyle key, string value);
    protected virtual void AddStyleAttribute(string name, string value, HtmlTextWriterStyle key);
    protected string EncodeAttributeValue(string value, bool fEncode);
    protected virtual string EncodeAttributeValue(HtmlTextWriterAttribute attrKey, string value);
    protected string EncodeUrl(string url);
    protected HtmlTextWriterAttribute GetAttributeKey(string attrName);
    protected string GetAttributeName(HtmlTextWriterAttribute attrKey);
    protected HtmlTextWriterStyle GetStyleKey(string styleName);
    protected string GetStyleName(HtmlTextWriterStyle styleKey);
    protected virtual HtmlTextWriterTag GetTagKey(string tagName);
    protected virtual string GetTagName(HtmlTextWriterTag tagKey);
    protected bool IsAttributeDefined(HtmlTextWriterAttribute key);
    protected bool IsAttributeDefined(HtmlTextWriterAttribute key, String& value);
    protected bool IsStyleAttributeDefined(HtmlTextWriterStyle key);
    protected bool IsStyleAttributeDefined(HtmlTextWriterStyle key, String& value);
    protected virtual bool OnAttributeRender(string name, string value, HtmlTextWriterAttribute key);
    protected virtual bool OnStyleAttributeRender(string name, string value, HtmlTextWriterStyle key);
    protected virtual bool OnTagRender(string name, HtmlTextWriterTag key);
    protected string PopEndTag();
    protected void PushEndTag(string endTag);
    protected virtual void FilterAttributes();
    public virtual void RenderBeginTag(string tagName);
    public virtual void RenderBeginTag(HtmlTextWriterTag tagKey);
    public virtual void RenderEndTag();
    protected virtual string RenderBeforeTag();
    protected virtual string RenderBeforeContent();
    protected virtual string RenderAfterContent();
    protected virtual string RenderAfterTag();
    public virtual void WriteAttribute(string name, string value);
    public virtual void WriteAttribute(string name, string value, bool fEncode);
    public virtual void WriteBeginTag(string tagName);
    public virtual void WriteBreak();
    internal void WriteObsoleteBreak();
    public virtual void WriteFullBeginTag(string tagName);
    public virtual void WriteEndTag(string tagName);
    public virtual void WriteStyleAttribute(string name, string value);
    public virtual void WriteStyleAttribute(string name, string value, bool fEncode);
    internal void WriteUTF8ResourceString(IntPtr pv, int offset, int size, bool fAsciiOnly);
    public virtual void WriteEncodedUrl(string url);
    public virtual void WriteEncodedUrlParameter(string urlText);
    public virtual void WriteEncodedText(string text);
    protected void WriteUrlEncodedString(string text, bool argument);
    internal void WriteHtmlAttributeEncode(string s);
}
public enum System.Web.UI.HtmlTextWriterAttribute : Enum {
    public int value__;
    public static HtmlTextWriterAttribute Accesskey;
    public static HtmlTextWriterAttribute Align;
    public static HtmlTextWriterAttribute Alt;
    public static HtmlTextWriterAttribute Background;
    public static HtmlTextWriterAttribute Bgcolor;
    public static HtmlTextWriterAttribute Border;
    public static HtmlTextWriterAttribute Bordercolor;
    public static HtmlTextWriterAttribute Cellpadding;
    public static HtmlTextWriterAttribute Cellspacing;
    public static HtmlTextWriterAttribute Checked;
    public static HtmlTextWriterAttribute Class;
    public static HtmlTextWriterAttribute Cols;
    public static HtmlTextWriterAttribute Colspan;
    public static HtmlTextWriterAttribute Disabled;
    public static HtmlTextWriterAttribute For;
    public static HtmlTextWriterAttribute Height;
    public static HtmlTextWriterAttribute Href;
    public static HtmlTextWriterAttribute Id;
    public static HtmlTextWriterAttribute Maxlength;
    public static HtmlTextWriterAttribute Multiple;
    public static HtmlTextWriterAttribute Name;
    public static HtmlTextWriterAttribute Nowrap;
    public static HtmlTextWriterAttribute Onchange;
    public static HtmlTextWriterAttribute Onclick;
    public static HtmlTextWriterAttribute ReadOnly;
    public static HtmlTextWriterAttribute Rows;
    public static HtmlTextWriterAttribute Rowspan;
    public static HtmlTextWriterAttribute Rules;
    public static HtmlTextWriterAttribute Selected;
    public static HtmlTextWriterAttribute Size;
    public static HtmlTextWriterAttribute Src;
    public static HtmlTextWriterAttribute Style;
    public static HtmlTextWriterAttribute Tabindex;
    public static HtmlTextWriterAttribute Target;
    public static HtmlTextWriterAttribute Title;
    public static HtmlTextWriterAttribute Type;
    public static HtmlTextWriterAttribute Valign;
    public static HtmlTextWriterAttribute Value;
    public static HtmlTextWriterAttribute Width;
    public static HtmlTextWriterAttribute Wrap;
    public static HtmlTextWriterAttribute Abbr;
    public static HtmlTextWriterAttribute AutoComplete;
    public static HtmlTextWriterAttribute Axis;
    public static HtmlTextWriterAttribute Content;
    public static HtmlTextWriterAttribute Coords;
    public static HtmlTextWriterAttribute DesignerRegion;
    public static HtmlTextWriterAttribute Dir;
    public static HtmlTextWriterAttribute Headers;
    public static HtmlTextWriterAttribute Longdesc;
    public static HtmlTextWriterAttribute Rel;
    public static HtmlTextWriterAttribute Scope;
    public static HtmlTextWriterAttribute Shape;
    public static HtmlTextWriterAttribute Usemap;
    public static HtmlTextWriterAttribute VCardName;
}
public enum System.Web.UI.HtmlTextWriterStyle : Enum {
    public int value__;
    public static HtmlTextWriterStyle BackgroundColor;
    public static HtmlTextWriterStyle BackgroundImage;
    public static HtmlTextWriterStyle BorderCollapse;
    public static HtmlTextWriterStyle BorderColor;
    public static HtmlTextWriterStyle BorderStyle;
    public static HtmlTextWriterStyle BorderWidth;
    public static HtmlTextWriterStyle Color;
    public static HtmlTextWriterStyle FontFamily;
    public static HtmlTextWriterStyle FontSize;
    public static HtmlTextWriterStyle FontStyle;
    public static HtmlTextWriterStyle FontWeight;
    public static HtmlTextWriterStyle Height;
    public static HtmlTextWriterStyle TextDecoration;
    public static HtmlTextWriterStyle Width;
    public static HtmlTextWriterStyle ListStyleImage;
    public static HtmlTextWriterStyle ListStyleType;
    public static HtmlTextWriterStyle Cursor;
    public static HtmlTextWriterStyle Direction;
    public static HtmlTextWriterStyle Display;
    public static HtmlTextWriterStyle Filter;
    public static HtmlTextWriterStyle FontVariant;
    public static HtmlTextWriterStyle Left;
    public static HtmlTextWriterStyle Margin;
    public static HtmlTextWriterStyle MarginBottom;
    public static HtmlTextWriterStyle MarginLeft;
    public static HtmlTextWriterStyle MarginRight;
    public static HtmlTextWriterStyle MarginTop;
    public static HtmlTextWriterStyle Overflow;
    public static HtmlTextWriterStyle OverflowX;
    public static HtmlTextWriterStyle OverflowY;
    public static HtmlTextWriterStyle Padding;
    public static HtmlTextWriterStyle PaddingBottom;
    public static HtmlTextWriterStyle PaddingLeft;
    public static HtmlTextWriterStyle PaddingRight;
    public static HtmlTextWriterStyle PaddingTop;
    public static HtmlTextWriterStyle Position;
    public static HtmlTextWriterStyle TextAlign;
    public static HtmlTextWriterStyle VerticalAlign;
    public static HtmlTextWriterStyle TextOverflow;
    public static HtmlTextWriterStyle Top;
    public static HtmlTextWriterStyle Visibility;
    public static HtmlTextWriterStyle WhiteSpace;
    public static HtmlTextWriterStyle ZIndex;
}
public enum System.Web.UI.HtmlTextWriterTag : Enum {
    public int value__;
    public static HtmlTextWriterTag Unknown;
    public static HtmlTextWriterTag A;
    public static HtmlTextWriterTag Acronym;
    public static HtmlTextWriterTag Address;
    public static HtmlTextWriterTag Area;
    public static HtmlTextWriterTag B;
    public static HtmlTextWriterTag Base;
    public static HtmlTextWriterTag Basefont;
    public static HtmlTextWriterTag Bdo;
    public static HtmlTextWriterTag Bgsound;
    public static HtmlTextWriterTag Big;
    public static HtmlTextWriterTag Blockquote;
    public static HtmlTextWriterTag Body;
    public static HtmlTextWriterTag Br;
    public static HtmlTextWriterTag Button;
    public static HtmlTextWriterTag Caption;
    public static HtmlTextWriterTag Center;
    public static HtmlTextWriterTag Cite;
    public static HtmlTextWriterTag Code;
    public static HtmlTextWriterTag Col;
    public static HtmlTextWriterTag Colgroup;
    public static HtmlTextWriterTag Dd;
    public static HtmlTextWriterTag Del;
    public static HtmlTextWriterTag Dfn;
    public static HtmlTextWriterTag Dir;
    public static HtmlTextWriterTag Div;
    public static HtmlTextWriterTag Dl;
    public static HtmlTextWriterTag Dt;
    public static HtmlTextWriterTag Em;
    public static HtmlTextWriterTag Embed;
    public static HtmlTextWriterTag Fieldset;
    public static HtmlTextWriterTag Font;
    public static HtmlTextWriterTag Form;
    public static HtmlTextWriterTag Frame;
    public static HtmlTextWriterTag Frameset;
    public static HtmlTextWriterTag H1;
    public static HtmlTextWriterTag H2;
    public static HtmlTextWriterTag H3;
    public static HtmlTextWriterTag H4;
    public static HtmlTextWriterTag H5;
    public static HtmlTextWriterTag H6;
    public static HtmlTextWriterTag Head;
    public static HtmlTextWriterTag Hr;
    public static HtmlTextWriterTag Html;
    public static HtmlTextWriterTag I;
    public static HtmlTextWriterTag Iframe;
    public static HtmlTextWriterTag Img;
    public static HtmlTextWriterTag Input;
    public static HtmlTextWriterTag Ins;
    public static HtmlTextWriterTag Isindex;
    public static HtmlTextWriterTag Kbd;
    public static HtmlTextWriterTag Label;
    public static HtmlTextWriterTag Legend;
    public static HtmlTextWriterTag Li;
    public static HtmlTextWriterTag Link;
    public static HtmlTextWriterTag Map;
    public static HtmlTextWriterTag Marquee;
    public static HtmlTextWriterTag Menu;
    public static HtmlTextWriterTag Meta;
    public static HtmlTextWriterTag Nobr;
    public static HtmlTextWriterTag Noframes;
    public static HtmlTextWriterTag Noscript;
    public static HtmlTextWriterTag Object;
    public static HtmlTextWriterTag Ol;
    public static HtmlTextWriterTag Option;
    public static HtmlTextWriterTag P;
    public static HtmlTextWriterTag Param;
    public static HtmlTextWriterTag Pre;
    public static HtmlTextWriterTag Q;
    public static HtmlTextWriterTag Rt;
    public static HtmlTextWriterTag Ruby;
    public static HtmlTextWriterTag S;
    public static HtmlTextWriterTag Samp;
    public static HtmlTextWriterTag Script;
    public static HtmlTextWriterTag Select;
    public static HtmlTextWriterTag Small;
    public static HtmlTextWriterTag Span;
    public static HtmlTextWriterTag Strike;
    public static HtmlTextWriterTag Strong;
    public static HtmlTextWriterTag Style;
    public static HtmlTextWriterTag Sub;
    public static HtmlTextWriterTag Sup;
    public static HtmlTextWriterTag Table;
    public static HtmlTextWriterTag Tbody;
    public static HtmlTextWriterTag Td;
    public static HtmlTextWriterTag Textarea;
    public static HtmlTextWriterTag Tfoot;
    public static HtmlTextWriterTag Th;
    public static HtmlTextWriterTag Thead;
    public static HtmlTextWriterTag Title;
    public static HtmlTextWriterTag Tr;
    public static HtmlTextWriterTag Tt;
    public static HtmlTextWriterTag U;
    public static HtmlTextWriterTag Ul;
    public static HtmlTextWriterTag Var;
    public static HtmlTextWriterTag Wbr;
    public static HtmlTextWriterTag Xml;
}
internal interface System.Web.UI.IAssemblyDependencyParser {
    public ICollection AssemblyDependencies { get; }
    public abstract virtual ICollection get_AssemblyDependencies();
}
public interface System.Web.UI.IAttributeAccessor {
    public abstract virtual string GetAttribute(string key);
    public abstract virtual void SetAttribute(string key, string value);
}
public interface System.Web.UI.IAutoFieldGenerator {
    public abstract virtual ICollection GenerateFields(Control control);
}
public interface System.Web.UI.IBindableControl {
    public abstract virtual void ExtractValues(IOrderedDictionary dictionary);
}
public interface System.Web.UI.IBindableTemplate {
    public abstract virtual IOrderedDictionary ExtractValues(Control container);
}
internal interface System.Web.UI.IBorderPaddingControl {
    public int BorderPadding { get; }
    public abstract virtual int get_BorderPadding();
}
public interface System.Web.UI.ICallbackEventHandler {
    public abstract virtual void RaiseCallbackEvent(string eventArgument);
    public abstract virtual string GetCallbackResult();
}
public interface System.Web.UI.ICheckBoxControl {
    public bool Checked { get; public set; }
    public abstract virtual bool get_Checked();
    public abstract virtual void set_Checked(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CheckedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CheckedChanged(EventHandler value);
}
public interface System.Web.UI.ICodeBlockTypeAccessor {
    public CodeBlockType BlockType { get; }
    public abstract virtual CodeBlockType get_BlockType();
}
public interface System.Web.UI.IControlBuilderAccessor {
    public ControlBuilder ControlBuilder { get; }
    public abstract virtual ControlBuilder get_ControlBuilder();
}
public interface System.Web.UI.IControlDesignerAccessor {
    public IDictionary UserData { get; }
    public abstract virtual IDictionary get_UserData();
    public abstract virtual IDictionary GetDesignModeState();
    public abstract virtual void SetDesignModeState(IDictionary data);
    public abstract virtual void SetOwnerControl(Control owner);
}
public interface System.Web.UI.IDataBindingsAccessor {
    public DataBindingCollection DataBindings { get; }
    public bool HasDataBindings { get; }
    public abstract virtual DataBindingCollection get_DataBindings();
    public abstract virtual bool get_HasDataBindings();
}
public interface System.Web.UI.IDataItemContainer {
    public object DataItem { get; }
    public int DataItemIndex { get; }
    public int DisplayIndex { get; }
    public abstract virtual object get_DataItem();
    public abstract virtual int get_DataItemIndex();
    public abstract virtual int get_DisplayIndex();
}
public interface System.Web.UI.IDataKeysControl {
    public String[] ClientIDRowSuffix { get; }
    public DataKeyArray ClientIDRowSuffixDataKeys { get; }
    public abstract virtual String[] get_ClientIDRowSuffix();
    public abstract virtual DataKeyArray get_ClientIDRowSuffixDataKeys();
}
public interface System.Web.UI.IDataSource {
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataSourceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataSourceChanged(EventHandler value);
    public abstract virtual DataSourceView GetView(string viewName);
    public abstract virtual ICollection GetViewNames();
}
public interface System.Web.UI.IDataSourceViewSchemaAccessor {
    public object DataSourceViewSchema { get; public set; }
    public abstract virtual object get_DataSourceViewSchema();
    public abstract virtual void set_DataSourceViewSchema(object value);
}
[AttributeUsageAttribute("128")]
public class System.Web.UI.IDReferencePropertyAttribute : Attribute {
    public Type ReferencedControlType { get; }
    public IDReferencePropertyAttribute(Type referencedControlType);
    public Type get_ReferencedControlType();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public interface System.Web.UI.IEditableTextControl {
    [CompilerGeneratedAttribute]
public abstract virtual void add_TextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TextChanged(EventHandler value);
}
public interface System.Web.UI.IExpressionsAccessor {
    public bool HasExpressions { get; }
    public ExpressionBindingCollection Expressions { get; }
    public abstract virtual bool get_HasExpressions();
    public abstract virtual ExpressionBindingCollection get_Expressions();
}
public interface System.Web.UI.IFilterResolutionService {
    public abstract virtual bool EvaluateFilter(string filterName);
    public abstract virtual int CompareFilters(string filter1, string filter2);
}
[AttributeUsageAttribute("128")]
internal class System.Web.UI.IgnoreUnknownContentAttribute : Attribute {
}
public interface System.Web.UI.IHierarchicalDataSource {
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataSourceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataSourceChanged(EventHandler value);
    public abstract virtual HierarchicalDataSourceView GetHierarchicalView(string viewPath);
}
public interface System.Web.UI.IHierarchicalEnumerable {
    public abstract virtual IHierarchyData GetHierarchyData(object enumeratedItem);
}
public interface System.Web.UI.IHierarchyData {
    public bool HasChildren { get; }
    public string Path { get; }
    public object Item { get; }
    public string Type { get; }
    public abstract virtual bool get_HasChildren();
    public abstract virtual string get_Path();
    public abstract virtual object get_Item();
    public abstract virtual string get_Type();
    public abstract virtual IHierarchicalEnumerable GetChildren();
    public abstract virtual IHierarchyData GetParent();
}
public class System.Web.UI.ImageClickEventArgs : EventArgs {
    public int X;
    public int Y;
    public double XRaw;
    public double YRaw;
    public ImageClickEventArgs(int x, int y);
    public ImageClickEventArgs(int x, int y, double xRaw, double yRaw);
}
public class System.Web.UI.ImageClickEventHandler : MulticastDelegate {
    public ImageClickEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ImageClickEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ImageClickEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface System.Web.UI.INamingContainer {
}
public interface System.Web.UI.INavigateUIData {
    public string Description { get; }
    public string Name { get; }
    public string NavigateUrl { get; }
    public string Value { get; }
    public abstract virtual string get_Description();
    public abstract virtual string get_Name();
    public abstract virtual string get_NavigateUrl();
    public abstract virtual string get_Value();
}
public class System.Web.UI.IndexedString : object {
    public string Value { get; }
    public IndexedString(string s);
    public string get_Value();
}
internal interface System.Web.UI.INonBindingContainer {
}
internal class System.Web.UI.InternalControlCollection : ControlCollection {
    internal InternalControlCollection(Control owner);
    public virtual void Add(Control child);
    public virtual void AddAt(int index, Control child);
}
internal interface System.Web.UI.IPageAsyncTask {
    public abstract virtual Task ExecuteAsync(object sender, EventArgs e, CancellationToken cancellationToken);
}
public interface System.Web.UI.IParserAccessor {
    public abstract virtual void AddParsedSubObject(object obj);
}
public interface System.Web.UI.IPostBackDataHandler {
    public abstract virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    public abstract virtual void RaisePostDataChangedEvent();
}
public interface System.Web.UI.IPostBackEventHandler {
    public abstract virtual void RaisePostBackEvent(string eventArgument);
}
internal interface System.Web.UI.IRenderOuterTableControl {
    public string ID { get; }
    public bool RenderOuterTable { get; public set; }
    public abstract virtual string get_ID();
    public abstract virtual bool get_RenderOuterTable();
    public abstract virtual void set_RenderOuterTable(bool value);
}
public interface System.Web.UI.IResourceUrlGenerator {
    public abstract virtual string GetResourceUrl(Type type, string resourceName);
}
internal interface System.Web.UI.IScriptManager {
    public bool SupportsPartialRendering { get; }
    public bool IsInAsyncPostBack { get; }
    public bool EnableCdn { get; }
    public bool EnableCdnFallback { get; }
    public bool IsDebuggingEnabled { get; }
    public bool IsSecureConnection { get; }
    public abstract virtual bool get_SupportsPartialRendering();
    public abstract virtual bool get_IsInAsyncPostBack();
    public abstract virtual bool get_EnableCdn();
    public abstract virtual bool get_EnableCdnFallback();
    public abstract virtual bool get_IsDebuggingEnabled();
    public abstract virtual bool get_IsSecureConnection();
    public abstract virtual void RegisterArrayDeclaration(Control control, string arrayName, string arrayValue);
    public abstract virtual void RegisterClientScriptBlock(Control control, Type type, string key, string script, bool addScriptTags);
    public abstract virtual void RegisterClientScriptInclude(Control control, Type type, string key, string url);
    public abstract virtual void RegisterClientScriptResource(Control control, Type type, string resourceName);
    public abstract virtual void RegisterDispose(Control control, string disposeScript);
    public abstract virtual void RegisterExpandoAttribute(Control control, string controlId, string attributeName, string attributeValue, bool encode);
    public abstract virtual void RegisterHiddenField(Control control, string hiddenFieldName, string hiddenFieldValue);
    public abstract virtual void RegisterOnSubmitStatement(Control control, Type type, string key, string script);
    public abstract virtual void RegisterPostBackControl(Control control);
    public abstract virtual void RegisterStartupScript(Control control, Type type, string key, string script, bool addScriptTags);
    public abstract virtual void SetFocusInternal(string clientID);
}
internal interface System.Web.UI.IScriptResourceDefinition {
    public string Path { get; }
    public string DebugPath { get; }
    public string CdnPath { get; }
    public string CdnDebugPath { get; }
    public string CdnPathSecureConnection { get; }
    public string CdnDebugPathSecureConnection { get; }
    public string ResourceName { get; }
    public Assembly ResourceAssembly { get; }
    public abstract virtual string get_Path();
    public abstract virtual string get_DebugPath();
    public abstract virtual string get_CdnPath();
    public abstract virtual string get_CdnDebugPath();
    public abstract virtual string get_CdnPathSecureConnection();
    public abstract virtual string get_CdnDebugPathSecureConnection();
    public abstract virtual string get_ResourceName();
    public abstract virtual Assembly get_ResourceAssembly();
}
internal interface System.Web.UI.IScriptResourceMapping {
    public abstract virtual IScriptResourceDefinition GetDefinition(string resourceName);
    public abstract virtual IScriptResourceDefinition GetDefinition(string resourceName, Assembly resourceAssembly);
}
public interface System.Web.UI.IStateFormatter {
    public abstract virtual object Deserialize(string serializedState);
    public abstract virtual string Serialize(object state);
}
internal interface System.Web.UI.IStateFormatter2 {
    public abstract virtual object Deserialize(string serializedState, Purpose purpose);
    public abstract virtual string Serialize(object state, Purpose purpose);
}
public interface System.Web.UI.IStateManager {
    public bool IsTrackingViewState { get; }
    public abstract virtual bool get_IsTrackingViewState();
    public abstract virtual void LoadViewState(object state);
    public abstract virtual object SaveViewState();
    public abstract virtual void TrackViewState();
}
public interface System.Web.UI.IStyleSheet {
    public abstract virtual void CreateStyleRule(Style style, IUrlResolutionService urlResolver, string selector);
    public abstract virtual void RegisterStyle(Style style, IUrlResolutionService urlResolver);
}
internal interface System.Web.UI.ITagNameToTypeMapper {
    public abstract virtual Type GetControlType(string tagName, IDictionary attribs);
}
public interface System.Web.UI.ITemplate {
    public abstract virtual void InstantiateIn(Control container);
}
public interface System.Web.UI.ITextControl {
    public string Text { get; public set; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
}
public interface System.Web.UI.IThemeResolutionService {
    public abstract virtual ThemeProvider[] GetAllThemeProviders();
    public abstract virtual ThemeProvider GetThemeProvider();
    public abstract virtual ThemeProvider GetStylesheetThemeProvider();
}
internal interface System.Web.UI.IUpdatePanel {
}
public interface System.Web.UI.IUrlResolutionService {
    public abstract virtual string ResolveClientUrl(string relativeUrl);
}
public interface System.Web.UI.IUserControlDesignerAccessor {
    public string InnerText { get; public set; }
    public string TagName { get; public set; }
    public abstract virtual string get_InnerText();
    public abstract virtual void set_InnerText(string value);
    public abstract virtual string get_TagName();
    public abstract virtual void set_TagName(string value);
}
public interface System.Web.UI.IUserControlTypeResolutionService {
    public abstract virtual Type GetType(string tagPrefix, string tagName);
}
public interface System.Web.UI.IValidator {
    public bool IsValid { get; public set; }
    public string ErrorMessage { get; public set; }
    public abstract virtual bool get_IsValid();
    public abstract virtual void set_IsValid(bool value);
    public abstract virtual string get_ErrorMessage();
    public abstract virtual void set_ErrorMessage(string value);
    public abstract virtual void Validate();
}
internal class System.Web.UI.LegacyPageAsyncTask : object {
    public BeginEventHandler BeginHandler { get; }
    public EndEventHandler EndHandler { get; }
    public EndEventHandler TimeoutHandler { get; }
    public object State { get; }
    public bool ExecuteInParallel { get; }
    internal bool Started { get; }
    internal bool CompletedSynchronously { get; }
    internal bool Completed { get; }
    internal IAsyncResult AsyncResult { get; }
    internal Exception Error { get; }
    internal LegacyPageAsyncTask(BeginEventHandler beginHandler, EndEventHandler endHandler, EndEventHandler timeoutHandler, object state, bool executeInParallel);
    public BeginEventHandler get_BeginHandler();
    public EndEventHandler get_EndHandler();
    public EndEventHandler get_TimeoutHandler();
    public object get_State();
    public bool get_ExecuteInParallel();
    internal bool get_Started();
    internal bool get_CompletedSynchronously();
    internal bool get_Completed();
    internal IAsyncResult get_AsyncResult();
    internal Exception get_Error();
    internal void Start(LegacyPageAsyncTaskManager manager, object source, EventArgs args);
    internal void ForceTimeout(bool syncCaller);
}
internal class System.Web.UI.LegacyPageAsyncTaskManager : object {
    internal HttpApplication Application { get; }
    internal bool AnyTasksRemain { get; }
    internal bool FailedToStartTasks { get; }
    internal bool TaskExecutionInProgress { get; }
    internal LegacyPageAsyncTaskManager(Page page);
    internal HttpApplication get_Application();
    internal void AddTask(LegacyPageAsyncTask task);
    internal bool get_AnyTasksRemain();
    internal bool get_FailedToStartTasks();
    internal bool get_TaskExecutionInProgress();
    internal void RegisterHandlersForPagePreRenderCompleteAsync();
    internal HttpAsyncResult ExecuteTasks(AsyncCallback callback, object extraData);
    internal void TaskCompleted(bool onCallerThread);
    internal void DisposeTimer();
    internal void CompleteAllTasksNow(bool syncCaller);
}
public static class System.Web.UI.ListSourceHelper : object {
    public static bool ContainsListCollection(IDataSource dataSource);
    public static IList GetList(IDataSource dataSource);
}
[ToolboxItemAttribute("False")]
public class System.Web.UI.LiteralControl : Control {
    internal string _text;
    public string Text { get; public set; }
    public LiteralControl(string text);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    protected virtual ControlCollection CreateControlCollection();
    protected internal virtual void Render(HtmlTextWriter output);
    internal virtual void InitRecursive(Control namingContainer);
    internal virtual void LoadRecursive();
    internal virtual void PreRenderRecursiveInternal();
    internal virtual void UnloadRecursive(bool dispose);
}
public class System.Web.UI.LosFormatter : object {
    public LosFormatter(bool enableMac, string macKeyModifier);
    public LosFormatter(bool enableMac, Byte[] macKeyModifier);
    public object Deserialize(Stream stream);
    public object Deserialize(TextReader input);
    public object Deserialize(string input);
    public void Serialize(Stream stream, object value);
    public void Serialize(TextWriter output, object value);
}
internal class System.Web.UI.MainTagNameToTypeMapper : object {
    internal ICollection UserControlRegisterEntries { get; }
    internal List`1<TagNamespaceRegisterEntry> TagRegisterEntries { get; }
    internal MainTagNameToTypeMapper(BaseTemplateParser parser);
    internal ICollection get_UserControlRegisterEntries();
    internal List`1<TagNamespaceRegisterEntry> get_TagRegisterEntries();
    internal void ProcessTagNamespaceRegistration(TagNamespaceRegisterEntry nsRegisterEntry);
    internal void ProcessUserControlRegistration(UserControlRegisterEntry ucRegisterEntry);
    internal void RegisterTag(string tagName, Type type);
    internal Type GetControlType(string tagName, IDictionary attribs, bool fAllowHtmlTags);
}
[DesignerAttribute("Microsoft.VisualStudio.Web.WebForms.MasterPageWebFormDesigner, Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IRootDesigner")]
[ControlBuilderAttribute("System.Web.UI.MasterPageControlBuilder")]
[ParseChildrenAttribute("False")]
public class System.Web.UI.MasterPage : UserControl {
    internal TemplateControl _ownerControl;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
protected internal IDictionary ContentTemplates { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
protected internal IList ContentPlaceHolders { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("MasterPage_MasterPage")]
public MasterPage Master { get; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("MasterPage_MasterPageFile")]
public string MasterPageFile { get; public set; }
    protected internal IDictionary get_ContentTemplates();
    protected internal IList get_ContentPlaceHolders();
    public MasterPage get_Master();
    public string get_MasterPageFile();
    public void set_MasterPageFile(string value);
    [EditorBrowsableAttribute("2")]
protected internal void AddContentTemplate(string templateName, ITemplate template);
    internal static MasterPage CreateMaster(TemplateControl owner, HttpContext context, VirtualPath masterPageFile, IDictionary contentTemplateCollection);
    internal static void ApplyMasterRecursive(MasterPage master, IList appliedMasterFilePaths);
    public void InstantiateInContentPlaceHolder(Control contentPlaceHolder, ITemplate template);
}
public class System.Web.UI.MasterPageControlBuilder : UserControlControlBuilder {
    internal static string AutoTemplatePrefix;
    private static MasterPageControlBuilder();
}
internal class System.Web.UI.MasterPageDependencyParser : UserControlDependencyParser {
    internal string DefaultDirectiveName { get; }
    internal virtual string get_DefaultDirectiveName();
    internal virtual void ProcessDirective(string directiveName, IDictionary directive);
}
internal class System.Web.UI.MasterPageParser : UserControlParser {
    internal static string defaultDirectiveName;
    internal Type DefaultBaseType { get; }
    internal string DefaultDirectiveName { get; }
    internal Type DefaultFileLevelBuilderType { get; }
    internal Type MasterPageType { get; }
    internal CaseInsensitiveStringSet PlaceHolderList { get; }
    internal virtual Type get_DefaultBaseType();
    internal virtual string get_DefaultDirectiveName();
    internal virtual Type get_DefaultFileLevelBuilderType();
    internal Type get_MasterPageType();
    internal CaseInsensitiveStringSet get_PlaceHolderList();
    internal virtual void ApplyBaseType();
    internal virtual RootBuilder CreateDefaultFileLevelBuilder();
    internal virtual void ProcessDirective(string directiveName, IDictionary directive);
    internal virtual bool ProcessMainDirectiveAttribute(string deviceName, string name, string value, IDictionary parseData);
}
internal class System.Web.UI.MinimizableAttributeTypeConverter : BooleanConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class System.Web.UI.NamespaceEntry : SourceLineInfo {
    internal string Namespace { get; internal set; }
    internal string get_Namespace();
    internal void set_Namespace(string value);
}
internal class System.Web.UI.NamespaceTagNameToTypeMapper : object {
    public TagNamespaceRegisterEntry RegisterEntry { get; }
    internal NamespaceTagNameToTypeMapper(TagNamespaceRegisterEntry nsRegisterEntry, Assembly assembly, TemplateParser parser);
    public TagNamespaceRegisterEntry get_RegisterEntry();
    private sealed virtual override Type System.Web.UI.ITagNameToTypeMapper.GetControlType(string tagName, IDictionary attribs);
    internal Type GetControlType(string tagName, IDictionary attribs, bool throwOnError);
}
[AttributeUsageAttribute("4")]
public class System.Web.UI.NonVisualControlAttribute : Attribute {
    public static NonVisualControlAttribute NonVisual;
    public static NonVisualControlAttribute Visual;
    public static NonVisualControlAttribute Default;
    public bool IsNonVisual { get; }
    public NonVisualControlAttribute(bool nonVisual);
    private static NonVisualControlAttribute();
    public bool get_IsNonVisual();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
[ObsoleteAttribute("The recommended alternative is System.Convert and String.Format. http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.Web.UI.ObjectConverter : object {
    internal static Char[] formatSeparator;
    private static ObjectConverter();
    public static object ConvertValue(object value, Type toType, string formatString);
}
public class System.Web.UI.ObjectPersistData : object {
    public ICollection AllPropertyEntries { get; }
    public IDictionary BuiltObjects { get; }
    public ICollection CollectionItems { get; }
    public ICollection EventEntries { get; }
    public bool IsCollection { get; }
    public bool Localize { get; }
    public Type ObjectType { get; }
    public string ResourceKey { get; }
    public ObjectPersistData(ControlBuilder builder, IDictionary builtObjects);
    public ICollection get_AllPropertyEntries();
    public IDictionary get_BuiltObjects();
    public ICollection get_CollectionItems();
    public ICollection get_EventEntries();
    public bool get_IsCollection();
    public bool get_Localize();
    public Type get_ObjectType();
    public string get_ResourceKey();
    public void AddToObjectControlBuilderTable(IDictionary table);
    public PropertyEntry GetFilteredProperty(string filter, string name);
    public IDictionary GetFilteredProperties(string filter);
    public ICollection GetPropertyAllFilters(string name);
}
public class System.Web.UI.ObjectStateFormatter : object {
    private SerializationBinder System.Runtime.Serialization.IFormatter.Binder { get; private set; }
    private StreamingContext System.Runtime.Serialization.IFormatter.Context { get; private set; }
    private ISurrogateSelector System.Runtime.Serialization.IFormatter.SurrogateSelector { get; private set; }
    internal ObjectStateFormatter(Byte[] macEncodingKey);
    internal ObjectStateFormatter(Page page, bool throwOnErrorDeserializing);
    private static ObjectStateFormatter();
    internal List`1<string> GetSpecificPurposes();
    internal object DeserializeWithAssert(Stream inputStream);
    public object Deserialize(Stream inputStream);
    public object Deserialize(string inputString);
    public string Serialize(object stateGraph);
    internal void SerializeWithAssert(Stream outputStream, object stateGraph);
    public void Serialize(Stream outputStream, object stateGraph);
    private sealed virtual override object System.Web.UI.IStateFormatter.Deserialize(string serializedState);
    private sealed virtual override string System.Web.UI.IStateFormatter.Serialize(object state);
    private sealed virtual override SerializationBinder System.Runtime.Serialization.IFormatter.get_Binder();
    private sealed virtual override void System.Runtime.Serialization.IFormatter.set_Binder(SerializationBinder value);
    private sealed virtual override StreamingContext System.Runtime.Serialization.IFormatter.get_Context();
    private sealed virtual override void System.Runtime.Serialization.IFormatter.set_Context(StreamingContext value);
    private sealed virtual override ISurrogateSelector System.Runtime.Serialization.IFormatter.get_SurrogateSelector();
    private sealed virtual override void System.Runtime.Serialization.IFormatter.set_SurrogateSelector(ISurrogateSelector value);
    private sealed virtual override object System.Runtime.Serialization.IFormatter.Deserialize(Stream serializationStream);
    private sealed virtual override void System.Runtime.Serialization.IFormatter.Serialize(Stream serializationStream, object stateGraph);
    private sealed virtual override object System.Web.UI.IStateFormatter2.Deserialize(string serializedState, Purpose purpose);
    private sealed virtual override string System.Web.UI.IStateFormatter2.Serialize(object state, Purpose purpose);
}
[ControlBuilderAttribute("System.Web.UI.ObjectTagBuilder")]
internal class System.Web.UI.ObjectTag : object {
}
public class System.Web.UI.ObjectTagBuilder : ControlBuilder {
    internal ObjectTagScope Scope { get; }
    internal Type ObjectType { get; }
    internal bool LateBound { get; }
    internal Type DeclaredType { get; }
    internal string Progid { get; }
    internal string Clsid { get; }
    public virtual void Init(TemplateParser parser, ControlBuilder parentBuilder, Type type, string tagName, string id, IDictionary attribs);
    public virtual void AppendSubBuilder(ControlBuilder subBuilder);
    public virtual void AppendLiteralString(string s);
    internal ObjectTagScope get_Scope();
    internal Type get_ObjectType();
    internal bool get_LateBound();
    internal Type get_DeclaredType();
    internal string get_Progid();
    internal string get_Clsid();
}
internal enum System.Web.UI.ObjectTagScope : Enum {
    public int value__;
    public static ObjectTagScope Default;
    public static ObjectTagScope Page;
    public static ObjectTagScope Session;
    public static ObjectTagScope Application;
    public static ObjectTagScope AppInstance;
}
internal static class System.Web.UI.OrderedDictionaryStateHelper : object {
    public static void LoadViewState(IOrderedDictionary dictionary, ArrayList state);
    public static ArrayList SaveViewState(IOrderedDictionary dictionary);
}
public enum System.Web.UI.OutputCacheLocation : Enum {
    public int value__;
    public static OutputCacheLocation Any;
    public static OutputCacheLocation Client;
    public static OutputCacheLocation Downstream;
    public static OutputCacheLocation Server;
    public static OutputCacheLocation None;
    public static OutputCacheLocation ServerAndClient;
}
[FlagsAttribute]
internal enum System.Web.UI.OutputCacheParameter : Enum {
    public int value__;
    public static OutputCacheParameter CacheProfile;
    public static OutputCacheParameter Duration;
    public static OutputCacheParameter Enabled;
    public static OutputCacheParameter Location;
    public static OutputCacheParameter NoStore;
    public static OutputCacheParameter SqlDependency;
    public static OutputCacheParameter VaryByControl;
    public static OutputCacheParameter VaryByCustom;
    public static OutputCacheParameter VaryByHeader;
    public static OutputCacheParameter VaryByParam;
    public static OutputCacheParameter VaryByContentEncoding;
}
public class System.Web.UI.OutputCacheParameters : object {
    public bool Enabled { get; public set; }
    public int Duration { get; public set; }
    public OutputCacheLocation Location { get; public set; }
    public string VaryByCustom { get; public set; }
    public string VaryByParam { get; public set; }
    public string VaryByContentEncoding { get; public set; }
    public string VaryByHeader { get; public set; }
    public bool NoStore { get; public set; }
    public string SqlDependency { get; public set; }
    public string VaryByControl { get; public set; }
    public string CacheProfile { get; public set; }
    internal bool IsParameterSet(OutputCacheParameter value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public int get_Duration();
    public void set_Duration(int value);
    public OutputCacheLocation get_Location();
    public void set_Location(OutputCacheLocation value);
    public string get_VaryByCustom();
    public void set_VaryByCustom(string value);
    public string get_VaryByParam();
    public void set_VaryByParam(string value);
    public string get_VaryByContentEncoding();
    public void set_VaryByContentEncoding(string value);
    public string get_VaryByHeader();
    public void set_VaryByHeader(string value);
    public bool get_NoStore();
    public void set_NoStore(bool value);
    public string get_SqlDependency();
    public void set_SqlDependency(string value);
    public string get_VaryByControl();
    public void set_VaryByControl(string value);
    public string get_CacheProfile();
    public void set_CacheProfile(string value);
}
[DefaultEventAttribute("Load")]
[DesignerAttribute("Microsoft.VisualStudio.Web.WebForms.WebFormDesigner, Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IRootDesigner")]
[DesignerCategoryAttribute("ASPXCodeBehind")]
[DesignerSerializerAttribute("Microsoft.VisualStudio.Web.WebForms.WebFormCodeDomSerializer, Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.TypeCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemAttribute("False")]
public class System.Web.UI.Page : TemplateControl {
    internal static object EventPreRenderComplete;
    internal static object EventPreLoad;
    internal static object EventLoadComplete;
    internal static object EventPreInit;
    internal static object EventInitComplete;
    internal static object EventSaveStateComplete;
    internal static int DefaultMaxPageStateFieldLength;
    internal static int DefaultAsyncTimeoutSeconds;
    internal ControlSet _registeredControlsRequiringControlState;
    internal HybridDictionary _registeredControlsRequiringClearChildControlState;
    internal static ViewStateEncryptionMode EncryptionModeDefault;
    internal HttpRequest _request;
    internal HttpResponse _response;
    internal HttpApplicationState _application;
    internal Cache _cache;
    internal string _errorPage;
    internal Dictionary`2<string, string> _hiddenFieldsToRender;
    internal static bool MaintainScrollPositionOnPostBackDefault;
    internal static bool EnableViewStateMacDefault;
    internal static bool EnableEventValidationDefault;
    internal static string systemPostFieldPrefix;
    [EditorBrowsableAttribute("1")]
public static string postEventSourceID;
    [EditorBrowsableAttribute("1")]
public static string postEventArgumentID;
    internal static string ViewStateFieldPrefixID;
    internal static string ViewStateFieldCountID;
    internal static string ViewStateGeneratorFieldID;
    internal static string ViewStateEncryptionID;
    internal static string EventValidationPrefixID;
    internal static string WebPartExportID;
    internal static string callbackID;
    internal static string callbackParameterID;
    internal static string callbackLoadScriptID;
    internal static string callbackIndexID;
    internal static string previousPageID;
    internal HttpContext _context;
    internal static bool BufferDefault;
    internal static bool SmartNavigationDefault;
    public ModelStateDictionary ModelState { get; }
    internal bool IsExecutingAsyncTasks { get; internal set; }
    public ModelBindingExecutionContext ModelBindingExecutionContext { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Page_UnobtrusiveValidationMode")]
public UnobtrusiveValidationMode UnobtrusiveValidationMode { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HttpApplicationState Application { get; }
    protected internal HttpContext Context { get; }
    internal string ClientState { get; internal set; }
    internal string ClientOnSubmitEvent { get; }
    public ClientScriptManager ClientScript { get; }
    [DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Page_ClientTarget")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public string ClientTarget { get; public set; }
    public string ClientQueryString { get; }
    internal bool ContainsEncryptedViewState { get; internal set; }
    [DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Page_ErrorPage")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ErrorPage { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsCallback { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool IsReusable { get; }
    protected internal string UniqueFilePathSuffix { get; }
    public Control AutoPostBackControl { get; public set; }
    internal bool ClientSupportsFocus { get; }
    internal bool ClientSupportsJavaScript { get; }
    internal string FocusedControlID { get; }
    internal Control FocusedControl { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HtmlHead Header { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public char IdSeparator { get; }
    internal string LastFocusedControl { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool MaintainScrollPositionOnPostBack { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("MasterPage_MasterPage")]
public MasterPage Master { get; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("MasterPage_MasterPageFile")]
public string MasterPageFile { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public int MaxPageStateFieldLength { get; public set; }
    internal bool ContainsCrossPagePost { get; internal set; }
    internal bool RenderFocusScript { get; }
    internal Stack PartialCachingControlStack { get; }
    protected PageStatePersister PageStatePersister { get; }
    internal string RequestViewStateString { get; }
    internal string ValidatorInvalidControl { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public TraceContext Trace { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HttpRequest Request { get; }
    internal HttpRequest RequestInternal { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HttpResponse Response { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public RouteData RouteData { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HttpServerUtility Server { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Cache Cache { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HttpSessionState Session { get; }
    [BindableAttribute("True")]
[LocalizableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
public string Title { get; public set; }
    [BindableAttribute("True")]
[LocalizableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
public string MetaDescription { get; public set; }
    [BindableAttribute("True")]
[LocalizableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
public string MetaKeywords { get; public set; }
    internal bool ContainsTheme { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Theme { get; public set; }
    internal bool SupportsStyleSheets { get; }
    [BrowsableAttribute("False")]
[FilterableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string StyleSheetTheme { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IPrincipal User { get; }
    internal XhtmlConformanceMode XhtmlConformanceMode { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsCrossPagePostBack { get; }
    internal bool IsExportingWebPart { get; }
    internal bool IsExportingWebPartShared { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsPostBack { get; }
    internal NameValueCollection RequestValueCollection { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public bool EnableEventValidation { get; public set; }
    [BrowsableAttribute("False")]
public bool EnableViewState { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public ViewStateEncryptionMode ViewStateEncryptionMode { get; public set; }
    [BrowsableAttribute("False")]
public string ViewStateUserKey { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string ID { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ValidateRequestMode ValidateRequestMode { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("False")]
public bool SkipFormActionValidation { get; public set; }
    [BrowsableAttribute("False")]
public bool Visible { get; public set; }
    internal bool IsInOnFormRender { get; }
    public bool IsPostBackEventControlRegistered { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsValid { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ValidatorCollection Validators { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Page PreviousPage { get; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("The recommended alternative is HttpResponse.AddFileDependencies. http://go.microsoft.com/fwlink/?linkid=14202")]
unknown ArrayList FileDependencies {protected set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Buffer { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ContentType { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int CodePage { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ResponseEncoding { get; public set; }
    [EditorBrowsableAttribute("2")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Culture { get; public set; }
    internal CultureInfo DynamicCulture { get; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int LCID { get; public set; }
    [EditorBrowsableAttribute("2")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string UICulture { get; public set; }
    internal CultureInfo DynamicUICulture { get; }
    [EditorBrowsableAttribute("2")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public TimeSpan AsyncTimeout { get; public set; }
    [EditorBrowsableAttribute("1")]
protected int TransactionMode { get; protected set; }
    [EditorBrowsableAttribute("1")]
protected bool AspCompatMode { get; protected set; }
    [EditorBrowsableAttribute("1")]
protected bool AsyncMode { get; protected set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool TraceEnabled { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public TraceMode TraceModeValue { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool EnableViewStateMac { get; public set; }
    [BrowsableAttribute("False")]
[FilterableAttribute("False")]
[ObsoleteAttribute("The recommended alternative is Page.SetFocus and Page.MaintainScrollPositionOnPostBack. http://go.microsoft.com/fwlink/?linkid=14202")]
public bool SmartNavigation { get; public set; }
    internal bool IsTransacted { get; }
    internal bool IsInAspCompatMode { get; }
    public bool IsAsync { get; }
    internal bool RequiresViewStateEncryptionInternal { get; }
    public HtmlForm Form { get; }
    public PageAdapter PageAdapter { get; }
    internal string RelativeFilePath { get; }
    [BrowsableAttribute("False")]
public IDictionary Items { get; }
    internal IScriptManager ScriptManager { get; }
    internal bool IsPartialRenderingSupported { get; }
    internal Type ScriptManagerType { get; internal set; }
    private static Page();
    public ModelStateDictionary get_ModelState();
    internal bool get_IsExecutingAsyncTasks();
    internal void set_IsExecutingAsyncTasks(bool value);
    public ModelBindingExecutionContext get_ModelBindingExecutionContext();
    internal void SetActiveValueProvider(IValueProvider valueProvider);
    public virtual bool TryUpdateModel(TModel model);
    public virtual bool TryUpdateModel(TModel model, IValueProvider valueProvider);
    public virtual void UpdateModel(TModel model);
    public virtual void UpdateModel(TModel model, IValueProvider valueProvider);
    public UnobtrusiveValidationMode get_UnobtrusiveValidationMode();
    public void set_UnobtrusiveValidationMode(UnobtrusiveValidationMode value);
    public HttpApplicationState get_Application();
    protected internal virtual HttpContext get_Context();
    internal string get_ClientState();
    internal void set_ClientState(string value);
    internal string get_ClientOnSubmitEvent();
    public ClientScriptManager get_ClientScript();
    public string get_ClientTarget();
    public void set_ClientTarget(string value);
    public string get_ClientQueryString();
    internal bool get_ContainsEncryptedViewState();
    internal void set_ContainsEncryptedViewState(bool value);
    public string get_ErrorPage();
    public void set_ErrorPage(string value);
    public bool get_IsCallback();
    public sealed virtual bool get_IsReusable();
    protected internal virtual string get_UniqueFilePathSuffix();
    public Control get_AutoPostBackControl();
    public void set_AutoPostBackControl(Control value);
    internal bool get_ClientSupportsFocus();
    internal bool get_ClientSupportsJavaScript();
    internal string get_FocusedControlID();
    internal Control get_FocusedControl();
    public HtmlHead get_Header();
    public virtual char get_IdSeparator();
    internal string get_LastFocusedControl();
    public bool get_MaintainScrollPositionOnPostBack();
    public void set_MaintainScrollPositionOnPostBack(bool value);
    public MasterPage get_Master();
    public virtual string get_MasterPageFile();
    public virtual void set_MasterPageFile(string value);
    public int get_MaxPageStateFieldLength();
    public void set_MaxPageStateFieldLength(int value);
    internal bool get_ContainsCrossPagePost();
    internal void set_ContainsCrossPagePost(bool value);
    internal bool get_RenderFocusScript();
    internal Stack get_PartialCachingControlStack();
    protected virtual PageStatePersister get_PageStatePersister();
    internal string get_RequestViewStateString();
    internal string get_ValidatorInvalidControl();
    public TraceContext get_Trace();
    public HttpRequest get_Request();
    internal HttpRequest get_RequestInternal();
    public HttpResponse get_Response();
    public RouteData get_RouteData();
    public HttpServerUtility get_Server();
    public Cache get_Cache();
    public virtual HttpSessionState get_Session();
    public string get_Title();
    public void set_Title(string value);
    public string get_MetaDescription();
    public void set_MetaDescription(string value);
    public string get_MetaKeywords();
    public void set_MetaKeywords(string value);
    internal bool get_ContainsTheme();
    public virtual string get_Theme();
    public virtual void set_Theme(string value);
    internal bool get_SupportsStyleSheets();
    public virtual string get_StyleSheetTheme();
    public virtual void set_StyleSheetTheme(string value);
    public IPrincipal get_User();
    internal XhtmlConformanceMode get_XhtmlConformanceMode();
    [EditorBrowsableAttribute("2")]
protected internal virtual HtmlTextWriter CreateHtmlTextWriter(TextWriter tw);
    internal static HtmlTextWriter CreateHtmlTextWriterInternal(TextWriter tw, HttpRequest request);
    public static HtmlTextWriter CreateHtmlTextWriterFromType(TextWriter tw, Type writerType);
    public virtual Control FindControl(string id);
    [EditorBrowsableAttribute("1")]
public virtual int GetTypeHashCode();
    internal virtual string GetUniqueIDPrefix();
    internal UInt32 GetClientStateIdentifier();
    public bool get_IsCrossPagePostBack();
    internal bool get_IsExportingWebPart();
    internal bool get_IsExportingWebPartShared();
    public bool get_IsPostBack();
    internal NameValueCollection get_RequestValueCollection();
    public virtual bool get_EnableEventValidation();
    public virtual void set_EnableEventValidation(bool value);
    public virtual bool get_EnableViewState();
    public virtual void set_EnableViewState(bool value);
    public ViewStateEncryptionMode get_ViewStateEncryptionMode();
    public void set_ViewStateEncryptionMode(ViewStateEncryptionMode value);
    public string get_ViewStateUserKey();
    public void set_ViewStateUserKey(string value);
    public virtual string get_ID();
    public virtual void set_ID(string value);
    public virtual ValidateRequestMode get_ValidateRequestMode();
    public virtual void set_ValidateRequestMode(ValidateRequestMode value);
    public bool get_SkipFormActionValidation();
    public void set_SkipFormActionValidation(bool value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    internal static string DecryptString(string s, Purpose purpose);
    [EditorBrowsableAttribute("1")]
public void DesignerInitialize();
    internal NameValueCollection GetCollectionBasedOnMethod(bool dontReturnNull);
    [EditorBrowsableAttribute("2")]
protected internal virtual NameValueCollection DeterminePostBackMode();
    [EditorBrowsableAttribute("2")]
protected internal virtual NameValueCollection DeterminePostBackModeUnvalidated();
    internal static string EncryptString(string s, Purpose purpose);
    [EditorBrowsableAttribute("2")]
protected internal virtual object LoadPageStateFromPersistenceMedium();
    internal bool ShouldSuppressMacValidationException(Exception e);
    internal void LoadScrollPosition();
    internal IStateFormatter2 CreateStateFormatter();
    internal ICollection DecomposeViewStateIntoChunks();
    internal void RenderViewStateFields(HtmlTextWriter writer);
    internal void BeginFormRender(HtmlTextWriter writer, string formUniqueID);
    internal void EndFormRenderArrayAndExpandoAttribute(HtmlTextWriter writer, string formUniqueID);
    internal void EndFormRenderHiddenFields(HtmlTextWriter writer, string formUniqueID);
    internal void EndFormRenderPostBackAndWebFormsScript(HtmlTextWriter writer, string formUniqueID);
    internal void EndFormRender(HtmlTextWriter writer, string formUniqueID);
    internal bool get_IsInOnFormRender();
    internal void OnFormRender();
    internal void OnFormPostRender(HtmlTextWriter writer);
    internal void ResetOnFormRenderCalled();
    public void SetFocus(Control control);
    public void SetFocus(string clientID);
    internal void SetValidatorInvalidControlFocus(string clientID);
    internal static void ThreadResetAbortWithAssert();
    [EditorBrowsableAttribute("2")]
[ObsoleteAttribute("The recommended alternative is ClientScript.GetPostBackEventReference. http://go.microsoft.com/fwlink/?linkid=14202")]
public string GetPostBackEventReference(Control control);
    [EditorBrowsableAttribute("2")]
[ObsoleteAttribute("The recommended alternative is ClientScript.GetPostBackEventReference. http://go.microsoft.com/fwlink/?linkid=14202")]
public string GetPostBackEventReference(Control control, string argument);
    [EditorBrowsableAttribute("2")]
[ObsoleteAttribute("The recommended alternative is ClientScript.GetPostBackEventReference. http://go.microsoft.com/fwlink/?linkid=14202")]
public string GetPostBackClientEvent(Control control, string argument);
    [EditorBrowsableAttribute("2")]
[ObsoleteAttribute("The recommended alternative is ClientScript.GetPostBackClientHyperlink. http://go.microsoft.com/fwlink/?linkid=14202")]
public string GetPostBackClientHyperlink(Control control, string argument);
    internal void InitializeStyleSheet();
    [EditorBrowsableAttribute("1")]
protected internal void AddContentTemplate(string templateName, ITemplate template);
    internal void ApplyControlSkin(Control ctrl);
    internal bool ApplyControlStyleSheet(Control ctrl);
    internal void RegisterFocusScript();
    internal void RegisterPostBackScript();
    internal void RegisterWebFormsScript();
    [ObsoleteAttribute("The recommended alternative is ClientScript.IsClientScriptBlockRegistered(string key). http://go.microsoft.com/fwlink/?linkid=14202")]
public bool IsClientScriptBlockRegistered(string key);
    [ObsoleteAttribute("The recommended alternative is ClientScript.IsStartupScriptRegistered(string key). http://go.microsoft.com/fwlink/?linkid=14202")]
public bool IsStartupScriptRegistered(string key);
    [EditorBrowsableAttribute("2")]
[ObsoleteAttribute("The recommended alternative is ClientScript.RegisterArrayDeclaration(string arrayName, string arrayValue). http://go.microsoft.com/fwlink/?linkid=14202")]
public void RegisterArrayDeclaration(string arrayName, string arrayValue);
    [EditorBrowsableAttribute("2")]
[ObsoleteAttribute("The recommended alternative is ClientScript.RegisterHiddenField(string hiddenFieldName, string hiddenFieldInitialValue). http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual void RegisterHiddenField(string hiddenFieldName, string hiddenFieldInitialValue);
    [ObsoleteAttribute("The recommended alternative is ClientScript.RegisterClientScriptBlock(Type type, string key, string script). http://go.microsoft.com/fwlink/?linkid=14202")]
[EditorBrowsableAttribute("2")]
public virtual void RegisterClientScriptBlock(string key, string script);
    [ObsoleteAttribute("The recommended alternative is ClientScript.RegisterStartupScript(Type type, string key, string script). http://go.microsoft.com/fwlink/?linkid=14202")]
[EditorBrowsableAttribute("2")]
public virtual void RegisterStartupScript(string key, string script);
    [ObsoleteAttribute("The recommended alternative is ClientScript.RegisterOnSubmitStatement(Type type, string key, string script). http://go.microsoft.com/fwlink/?linkid=14202")]
[EditorBrowsableAttribute("2")]
public void RegisterOnSubmitStatement(string key, string script);
    internal void RegisterEnabledControl(Control control);
    [EditorBrowsableAttribute("2")]
public void RegisterRequiresControlState(Control control);
    public bool RequiresControlState(Control control);
    [EditorBrowsableAttribute("2")]
public void UnregisterRequiresControlState(Control control);
    internal bool ShouldLoadControlState(Control control);
    internal void RegisterRequiresClearChildControlState(Control control);
    [EditorBrowsableAttribute("2")]
public void RegisterRequiresPostBack(Control control);
    internal void PushCachingControl(BasePartialCachingControl c);
    internal void PopCachingControl();
    internal void RaiseChangedEvents();
    [AsyncStateMachineAttribute("System.Web.UI.Page/<RaiseChangedEventsAsync>d__396")]
internal Task RaiseChangedEventsAsync();
    [EditorBrowsableAttribute("2")]
protected virtual void RaisePostBackEvent(IPostBackEventHandler sourceControl, string eventArgument);
    [EditorBrowsableAttribute("2")]
public virtual void RegisterRequiresRaiseEvent(IPostBackEventHandler control);
    public bool get_IsPostBackEventControlRegistered();
    public bool get_IsValid();
    public ValidatorCollection get_Validators();
    public Page get_PreviousPage();
    public string MapPath(string virtualPath);
    [EditorBrowsableAttribute("1")]
protected virtual void InitOutputCache(int duration, string varyByHeader, string varyByCustom, OutputCacheLocation location, string varyByParam);
    [EditorBrowsableAttribute("1")]
protected virtual void InitOutputCache(int duration, string varyByContentEncoding, string varyByHeader, string varyByCustom, OutputCacheLocation location, string varyByParam);
    [EditorBrowsableAttribute("1")]
protected internal virtual void InitOutputCache(OutputCacheParameters cacheSettings);
    protected void set_FileDependencies(ArrayList value);
    [EditorBrowsableAttribute("1")]
protected object GetWrappedFileDependencies(String[] virtualFileDependencies);
    [EditorBrowsableAttribute("1")]
protected internal void AddWrappedFileDependencies(object virtualFileDependencies);
    public void set_Buffer(bool value);
    public bool get_Buffer();
    public void set_ContentType(string value);
    public string get_ContentType();
    public void set_CodePage(int value);
    public int get_CodePage();
    public void set_ResponseEncoding(string value);
    public string get_ResponseEncoding();
    public void set_Culture(string value);
    public string get_Culture();
    internal CultureInfo get_DynamicCulture();
    public void set_LCID(int value);
    public int get_LCID();
    public void set_UICulture(string value);
    public string get_UICulture();
    internal CultureInfo get_DynamicUICulture();
    public void set_AsyncTimeout(TimeSpan value);
    public TimeSpan get_AsyncTimeout();
    protected void set_TransactionMode(int value);
    protected int get_TransactionMode();
    protected void set_AspCompatMode(bool value);
    protected bool get_AspCompatMode();
    protected void set_AsyncMode(bool value);
    protected bool get_AsyncMode();
    public void set_TraceEnabled(bool value);
    public bool get_TraceEnabled();
    public void set_TraceModeValue(TraceMode value);
    public TraceMode get_TraceModeValue();
    public bool get_EnableViewStateMac();
    public void set_EnableViewStateMac(bool value);
    public bool get_SmartNavigation();
    public void set_SmartNavigation(bool value);
    internal bool get_IsTransacted();
    internal bool get_IsInAspCompatMode();
    public bool get_IsAsync();
    public void add_LoadComplete(EventHandler value);
    public void remove_LoadComplete(EventHandler value);
    protected virtual void OnLoadComplete(EventArgs e);
    protected virtual void OnPreRenderComplete(EventArgs e);
    public void add_PreInit(EventHandler value);
    public void remove_PreInit(EventHandler value);
    public void add_PreLoad(EventHandler value);
    public void remove_PreLoad(EventHandler value);
    public void add_PreRenderComplete(EventHandler value);
    public void remove_PreRenderComplete(EventHandler value);
    protected virtual void FrameworkInitialize();
    protected virtual void InitializeCulture();
    protected internal virtual void OnInit(EventArgs e);
    protected virtual void OnPreInit(EventArgs e);
    public void add_InitComplete(EventHandler value);
    public void remove_InitComplete(EventHandler value);
    protected virtual void OnInitComplete(EventArgs e);
    protected virtual void OnPreLoad(EventArgs e);
    public void RegisterRequiresViewStateEncryption();
    internal bool get_RequiresViewStateEncryptionInternal();
    public void add_SaveStateComplete(EventHandler value);
    public void remove_SaveStateComplete(EventHandler value);
    protected virtual void OnSaveStateComplete(EventArgs e);
    [EditorBrowsableAttribute("1")]
public virtual void ProcessRequest(HttpContext context);
    internal void SetPreviousPage(Page previousPage);
    internal WithinCancellableCallbackTaskAwaitable GetWaitForPreviousStepCompletionAwaitable();
    protected internal virtual void Render(HtmlTextWriter writer);
    internal void SetForm(HtmlForm form);
    internal void SetPostFormRenderDelegate(RenderMethod renderMethod);
    public HtmlForm get_Form();
    [EditorBrowsableAttribute("2")]
public void RegisterViewStateHandler();
    [EditorBrowsableAttribute("2")]
protected internal virtual void SavePageStateToPersistenceMedium(object state);
    internal void SetHeader(HtmlHead header);
    internal virtual void UnloadRecursive(bool dispose);
    [EditorBrowsableAttribute("1")]
protected IAsyncResult AspCompatBeginProcessRequest(HttpContext context, AsyncCallback cb, object extraData);
    [EditorBrowsableAttribute("1")]
protected void AspCompatEndProcessRequest(IAsyncResult result);
    public void ExecuteRegisteredAsyncTasks();
    public void RegisterAsyncTask(PageAsyncTask task);
    [EditorBrowsableAttribute("1")]
protected IAsyncResult AsyncPageBeginProcessRequest(HttpContext context, AsyncCallback callback, object extraData);
    internal CancellationTokenSource CreateCancellationTokenFromAsyncTimeout();
    [EditorBrowsableAttribute("1")]
protected void AsyncPageEndProcessRequest(IAsyncResult result);
    public void AddOnPreRenderCompleteAsync(BeginEventHandler beginHandler, EndEventHandler endHandler);
    public void AddOnPreRenderCompleteAsync(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    public virtual void Validate();
    public virtual void Validate(string validationGroup);
    public ValidatorCollection GetValidators(string validationGroup);
    [EditorBrowsableAttribute("2")]
public virtual void VerifyRenderingInServerForm(Control control);
    public PageAdapter get_PageAdapter();
    internal string get_RelativeFilePath();
    internal bool GetDesignModeInternal();
    public IDictionary get_Items();
    internal void PushDataBindingContext(object dataItem);
    internal void PopDataBindingContext();
    public object GetDataItem();
    internal static bool IsSystemPostField(string field);
    internal IScriptManager get_ScriptManager();
    internal bool get_IsPartialRenderingSupported();
    internal Type get_ScriptManagerType();
    internal void set_ScriptManagerType(Type value);
}
public class System.Web.UI.PageAsyncTask : object {
    public BeginEventHandler BeginHandler { get; private set; }
    public EndEventHandler EndHandler { get; private set; }
    public bool ExecuteInParallel { get; private set; }
    public object State { get; private set; }
    public EndEventHandler TimeoutHandler { get; private set; }
    internal Func`2<CancellationToken, Task> TaskHandler { get; private set; }
    public PageAsyncTask(BeginEventHandler beginHandler, EndEventHandler endHandler, EndEventHandler timeoutHandler, object state);
    public PageAsyncTask(BeginEventHandler beginHandler, EndEventHandler endHandler, EndEventHandler timeoutHandler, object state, bool executeInParallel);
    internal PageAsyncTask(BeginEventHandler beginHandler, EndEventHandler endHandler, EndEventHandler timeoutHandler, object state, bool executeInParallel, SynchronizationContextMode currentMode);
    public PageAsyncTask(Func`1<Task> handler);
    public PageAsyncTask(Func`2<CancellationToken, Task> handler);
    internal PageAsyncTask(Func`2<CancellationToken, Task> handler, SynchronizationContextMode currentMode);
    [CompilerGeneratedAttribute]
public BeginEventHandler get_BeginHandler();
    [CompilerGeneratedAttribute]
private void set_BeginHandler(BeginEventHandler value);
    [CompilerGeneratedAttribute]
public EndEventHandler get_EndHandler();
    [CompilerGeneratedAttribute]
private void set_EndHandler(EndEventHandler value);
    [CompilerGeneratedAttribute]
public bool get_ExecuteInParallel();
    [CompilerGeneratedAttribute]
private void set_ExecuteInParallel(bool value);
    [CompilerGeneratedAttribute]
public object get_State();
    [CompilerGeneratedAttribute]
private void set_State(object value);
    [CompilerGeneratedAttribute]
public EndEventHandler get_TimeoutHandler();
    [CompilerGeneratedAttribute]
private void set_TimeoutHandler(EndEventHandler value);
    [CompilerGeneratedAttribute]
internal Func`2<CancellationToken, Task> get_TaskHandler();
    [CompilerGeneratedAttribute]
private void set_TaskHandler(Func`2<CancellationToken, Task> value);
}
internal class System.Web.UI.PageAsyncTaskApm : object {
    public PageAsyncTaskApm(BeginEventHandler beginHandler, EndEventHandler endHandler, object state);
    [AsyncStateMachineAttribute("System.Web.UI.PageAsyncTaskApm/<ExecuteAsync>d__4")]
public sealed virtual Task ExecuteAsync(object sender, EventArgs e, CancellationToken cancellationToken);
}
internal class System.Web.UI.PageAsyncTaskManager : object {
    public void EnqueueTask(IPageAsyncTask task);
    [AsyncStateMachineAttribute("System.Web.UI.PageAsyncTaskManager/<ExecuteTasksAsync>d__3")]
public Task ExecuteTasksAsync(object sender, EventArgs e, CancellationToken cancellationToken, AspNetSynchronizationContextBase syncContext, IRequestCompletedNotifier requestCompletedNotifier);
}
internal class System.Web.UI.PageAsyncTaskTap : object {
    public PageAsyncTaskTap(Func`2<CancellationToken, Task> handler);
    public sealed virtual Task ExecuteAsync(object sender, EventArgs e, CancellationToken cancellationToken);
}
internal class System.Web.UI.PageDependencyParser : TemplateControlDependencyParser {
    internal string DefaultDirectiveName { get; }
    internal virtual string get_DefaultDirectiveName();
    protected virtual void PrepareParse();
    internal virtual void ProcessDirective(string directiveName, IDictionary directive);
}
public class System.Web.UI.PageHandlerFactory : object {
    public virtual IHttpHandler GetHandler(HttpContext context, string requestType, string virtualPath, string path);
    private sealed virtual override IHttpHandler System.Web.IHttpHandlerFactory2.GetHandler(HttpContext context, string requestType, VirtualPath virtualPath, string physicalPath);
    public virtual void ReleaseHandler(IHttpHandler handler);
}
public class System.Web.UI.PageParser : TemplateControlParser {
    internal static string defaultDirectiveName;
    internal int TransactionMode { get; }
    internal TraceMode TraceMode { get; }
    internal TraceEnable TraceEnabled { get; }
    internal bool FRequiresSessionState { get; }
    internal bool FReadOnlySessionState { get; }
    internal string StyleSheetTheme { get; }
    internal bool AspCompatMode { get; }
    internal bool AsyncMode { get; }
    internal bool ValidateRequest { get; }
    internal Type PreviousPageType { get; }
    internal Type MasterPageType { get; }
    internal Type DefaultBaseType { get; }
    internal Type DefaultFileLevelBuilderType { get; }
    internal string DefaultDirectiveName { get; }
    public static Type DefaultPageBaseType { get; public set; }
    public static Type DefaultUserControlBaseType { get; public set; }
    public static Type DefaultApplicationBaseType { get; public set; }
    public static Type DefaultPageParserFilterType { get; public set; }
    public static bool EnableLongStringsAsResources { get; public set; }
    internal bool FDurationRequiredOnOutputCache { get; }
    internal bool FVaryByParamsRequiredOnOutputCache { get; }
    internal string UnknownOutputCacheAttributeError { get; }
    private static PageParser();
    internal int get_TransactionMode();
    internal TraceMode get_TraceMode();
    internal TraceEnable get_TraceEnabled();
    internal bool get_FRequiresSessionState();
    internal bool get_FReadOnlySessionState();
    internal string get_StyleSheetTheme();
    internal bool get_AspCompatMode();
    internal bool get_AsyncMode();
    internal bool get_ValidateRequest();
    internal Type get_PreviousPageType();
    internal Type get_MasterPageType();
    public static IHttpHandler GetCompiledPageInstance(string virtualPath, string inputFile, HttpContext context);
    internal virtual Type get_DefaultBaseType();
    internal virtual Type get_DefaultFileLevelBuilderType();
    internal virtual RootBuilder CreateDefaultFileLevelBuilder();
    internal virtual void HandlePostParse();
    internal virtual void ProcessConfigSettings();
    internal virtual void ProcessDirective(string directiveName, IDictionary directive);
    internal virtual void ProcessMainDirective(IDictionary mainDirective);
    internal virtual bool ProcessMainDirectiveAttribute(string deviceName, string name, string value, IDictionary parseData);
    internal virtual void ProcessUnknownMainDirectiveAttribute(string filter, string attribName, string value);
    internal virtual void PostProcessMainDirectiveAttributes(IDictionary parseData);
    internal virtual string get_DefaultDirectiveName();
    internal virtual void ProcessOutputCacheDirective(string directiveName, IDictionary directive);
    public static Type get_DefaultPageBaseType();
    public static void set_DefaultPageBaseType(Type value);
    public static Type get_DefaultUserControlBaseType();
    public static void set_DefaultUserControlBaseType(Type value);
    public static Type get_DefaultApplicationBaseType();
    public static void set_DefaultApplicationBaseType(Type value);
    public static Type get_DefaultPageParserFilterType();
    public static void set_DefaultPageParserFilterType(Type value);
    public static bool get_EnableLongStringsAsResources();
    public static void set_EnableLongStringsAsResources(bool value);
    internal virtual bool get_FDurationRequiredOnOutputCache();
    internal virtual bool get_FVaryByParamsRequiredOnOutputCache();
    internal virtual string get_UnknownOutputCacheAttributeError();
}
public abstract class System.Web.UI.PageParserFilter : object {
    protected string VirtualPath { get; }
    protected int Line { get; }
    protected bool CalledFromParseControl { get; private set; }
    public bool AllowCode { get; }
    public int NumberOfControlsAllowed { get; }
    public int TotalNumberOfDependenciesAllowed { get; }
    public int NumberOfDirectDependenciesAllowed { get; }
    protected string get_VirtualPath();
    protected int get_Line();
    [CompilerGeneratedAttribute]
protected bool get_CalledFromParseControl();
    [CompilerGeneratedAttribute]
private void set_CalledFromParseControl(bool value);
    internal static PageParserFilter Create(PagesSection pagesConfig, VirtualPath virtualPath, TemplateParser parser);
    internal void InitializeInternal(VirtualPath virtualPath, TemplateParser parser);
    protected virtual void Initialize();
    public virtual void ParseComplete(ControlBuilder rootBuilder);
    public virtual CompilationMode GetCompilationMode(CompilationMode current);
    public virtual bool get_AllowCode();
    internal bool AllowControlInternal(Type controlType, ControlBuilder builder);
    public virtual bool AllowControl(Type controlType, ControlBuilder builder);
    public virtual bool AllowBaseType(Type baseType);
    internal bool AllowVirtualReference(CompilationSection compConfig, VirtualPath referenceVirtualPath);
    public virtual bool AllowVirtualReference(string referenceVirtualPath, VirtualReferenceType referenceType);
    public virtual bool AllowServerSideInclude(string includeVirtualPath);
    public virtual void PreprocessDirective(string directiveName, IDictionary attributes);
    public virtual int get_NumberOfControlsAllowed();
    public virtual int get_TotalNumberOfDependenciesAllowed();
    public virtual int get_NumberOfDirectDependenciesAllowed();
    internal void OnDependencyAdded();
    internal void OnDirectDependencyAdded();
    public virtual bool ProcessCodeConstruct(CodeConstructType codeType, string code);
    public virtual bool ProcessDataBindingAttribute(string controlId, string name, string value);
    public virtual bool ProcessEventHookup(string controlId, string eventName, string handlerName);
    public virtual Type GetNoCompileUserControlType();
    protected void AddControl(Type type, IDictionary attributes);
    protected void SetPageProperty(string filter, string name, string value);
}
public abstract class System.Web.UI.PageStatePersister : object {
    public object ControlState { get; public set; }
    protected IStateFormatter StateFormatter { get; }
    internal IStateFormatter2 StateFormatter2 { get; }
    protected Page Page { get; protected set; }
    public object ViewState { get; public set; }
    protected PageStatePersister(Page page);
    public object get_ControlState();
    public void set_ControlState(object value);
    protected IStateFormatter get_StateFormatter();
    internal IStateFormatter2 get_StateFormatter2();
    protected Page get_Page();
    protected void set_Page(Page value);
    public object get_ViewState();
    public void set_ViewState(object value);
    public abstract virtual void Load();
    public abstract virtual void Save();
}
[EditorBrowsableAttribute("2")]
public abstract class System.Web.UI.PageTheme : object {
    protected String[] LinkedStyleSheets { get; }
    protected IDictionary ControlSkins { get; }
    protected string AppRelativeTemplateSourceDirectory { get; }
    protected Page Page { get; }
    protected abstract virtual String[] get_LinkedStyleSheets();
    protected abstract virtual IDictionary get_ControlSkins();
    protected abstract virtual string get_AppRelativeTemplateSourceDirectory();
    protected Page get_Page();
    internal void Initialize(Page page, bool styleSheetTheme);
    protected object Eval(string expression);
    protected string Eval(string expression, string format);
    public static object CreateSkinKey(Type controlType, string skinID);
    internal void ApplyControlSkin(Control control);
    internal void SetStyleSheet();
    public bool TestDeviceFilter(string deviceFilterName);
    protected object XPath(string xPathExpression);
    protected object XPath(string xPathExpression, IXmlNamespaceResolver resolver);
    protected string XPath(string xPathExpression, string format);
    protected string XPath(string xPathExpression, string format, IXmlNamespaceResolver resolver);
    protected IEnumerable XPathSelect(string xPathExpression);
    protected IEnumerable XPathSelect(string xPathExpression, IXmlNamespaceResolver resolver);
}
internal class System.Web.UI.PageThemeParser : BaseTemplateParser {
    internal static string defaultDirectiveName;
    internal VirtualPath VirtualDirPath { get; }
    internal ICollection CssFileList { get; }
    internal Type DefaultBaseType { get; }
    internal string DefaultDirectiveName { get; }
    internal bool IsCodeAllowed { get; }
    internal ControlBuilder CurrentSkinBuilder { get; internal set; }
    internal PageThemeParser(VirtualPath virtualDirPath, IList skinFileList, IList cssFileList);
    internal VirtualPath get_VirtualDirPath();
    internal ICollection get_CssFileList();
    internal virtual Type get_DefaultBaseType();
    internal virtual string get_DefaultDirectiveName();
    internal virtual bool get_IsCodeAllowed();
    internal ControlBuilder get_CurrentSkinBuilder();
    internal void set_CurrentSkinBuilder(ControlBuilder value);
    internal virtual RootBuilder CreateDefaultFileLevelBuilder();
    internal virtual void ParseInternal();
    internal virtual void ProcessDirective(string directiveName, IDictionary directive);
    internal virtual bool ProcessMainDirectiveAttribute(string deviceName, string name, string value, IDictionary parseData);
}
public class System.Web.UI.Pair : object {
    public object First;
    public object Second;
    public Pair(object x, object y);
}
[AttributeUsageAttribute("4")]
public class System.Web.UI.ParseChildrenAttribute : Attribute {
    public static ParseChildrenAttribute ParseAsChildren;
    public static ParseChildrenAttribute ParseAsProperties;
    public static ParseChildrenAttribute Default;
    public Type ChildControlType { get; }
    public bool ChildrenAsProperties { get; public set; }
    public string DefaultProperty { get; public set; }
    public ParseChildrenAttribute(bool childrenAsProperties);
    public ParseChildrenAttribute(Type childControlType);
    public ParseChildrenAttribute(bool childrenAsProperties, string defaultProperty);
    private static ParseChildrenAttribute();
    public Type get_ChildControlType();
    public bool get_ChildrenAsProperties();
    public void set_ChildrenAsProperties(bool value);
    public string get_DefaultProperty();
    public void set_DefaultProperty(string value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual bool IsDefaultAttribute();
}
internal class System.Web.UI.ParsedAttributeCollection : object {
    public IDictionary`2<string, Pair> AttributeValuePositionsDictionary { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public void AddFilteredAttribute(string filter, string name, string value);
    public void AddAttributeValuePositionInformation(string name, int line, int column);
    public IDictionary`2<string, Pair> get_AttributeValuePositionsDictionary();
    public void ClearFilter(string filter);
    public ICollection GetFilteredAttributeDictionaries();
    public void RemoveFilteredAttribute(string filter, string name);
    public void ReplaceFilteredAttribute(string filter, string name, string value);
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override void System.Collections.IDictionary.Clear();
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public abstract class System.Web.UI.ParseRecorder : object {
    internal static ParseRecorder Null;
    public static IList`1<Func`1<ParseRecorder>> RecorderFactories { get; }
    private static ParseRecorder();
    public static IList`1<Func`1<ParseRecorder>> get_RecorderFactories();
    internal static ParseRecorder CreateRecorders(TemplateParser parser);
    public virtual void Initialize(TemplateParser parser);
    public virtual void RecordBeginTag(ControlBuilder builder, Match tag);
    public virtual void RecordEndTag(ControlBuilder builder, Match tag);
    public virtual void RecordEmptyTag(ControlBuilder builder, Match tag);
    public virtual void RecordCodeBlock(ControlBuilder builder, Match codeBlock);
    public virtual void ParseComplete(ControlBuilder root);
    public virtual void ProcessGeneratedCode(ControlBuilder builder, CodeCompileUnit codeCompileUnit, CodeTypeDeclaration baseType, CodeTypeDeclaration derivedType, CodeMemberMethod buildMethod, CodeMemberMethod dataBindingMethod);
}
[AttributeUsageAttribute("4")]
public class System.Web.UI.PartialCachingAttribute : Attribute {
    public int Duration { get; public set; }
    public string VaryByParams { get; public set; }
    public string VaryByControls { get; public set; }
    public string VaryByCustom { get; public set; }
    public string SqlDependency { get; public set; }
    public bool Shared { get; public set; }
    public string ProviderName { get; public set; }
    public PartialCachingAttribute(int duration);
    public PartialCachingAttribute(int duration, string varyByParams, string varyByControls, string varyByCustom);
    public PartialCachingAttribute(int duration, string varyByParams, string varyByControls, string varyByCustom, bool shared);
    public PartialCachingAttribute(int duration, string varyByParams, string varyByControls, string varyByCustom, string sqlDependency, bool shared);
    public int get_Duration();
    public void set_Duration(int value);
    public string get_VaryByParams();
    public void set_VaryByParams(string value);
    public string get_VaryByControls();
    public void set_VaryByControls(string value);
    public string get_VaryByCustom();
    public void set_VaryByCustom(string value);
    public string get_SqlDependency();
    public void set_SqlDependency(string value);
    public bool get_Shared();
    public void set_Shared(bool value);
    public string get_ProviderName();
    public void set_ProviderName(string value);
}
internal class System.Web.UI.PartialCachingCacheEntry : object {
    internal Guid _cachedVaryId;
    internal string _dependenciesKey;
    internal String[] _dependencies;
    internal string OutputString;
    internal string CssStyleString;
    internal ArrayList RegisteredClientCalls;
}
public class System.Web.UI.PartialCachingControl : BasePartialCachingControl {
    public Control CachedControl { get; }
    internal PartialCachingControl(IWebObjectFactory objectFactory, Type createCachedControlType, PartialCachingAttribute cacheAttrib, string cacheKey, Object[] args);
    public Control get_CachedControl();
    internal virtual Control CreateCachedControl();
}
[AttributeUsageAttribute("4")]
public class System.Web.UI.PersistChildrenAttribute : Attribute {
    public static PersistChildrenAttribute Yes;
    public static PersistChildrenAttribute No;
    public static PersistChildrenAttribute Default;
    public bool Persist { get; }
    public bool UsesCustomPersistence { get; }
    public PersistChildrenAttribute(bool persist);
    public PersistChildrenAttribute(bool persist, bool usesCustomPersistence);
    private static PersistChildrenAttribute();
    public bool get_Persist();
    public bool get_UsesCustomPersistence();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual bool IsDefaultAttribute();
}
public enum System.Web.UI.PersistenceMode : Enum {
    public int value__;
    public static PersistenceMode Attribute;
    public static PersistenceMode InnerProperty;
    public static PersistenceMode InnerDefaultProperty;
    public static PersistenceMode EncodedInnerDefaultProperty;
}
[AttributeUsageAttribute("32767")]
public class System.Web.UI.PersistenceModeAttribute : Attribute {
    public static PersistenceModeAttribute Attribute;
    public static PersistenceModeAttribute InnerProperty;
    public static PersistenceModeAttribute InnerDefaultProperty;
    public static PersistenceModeAttribute EncodedInnerDefaultProperty;
    public static PersistenceModeAttribute Default;
    public PersistenceMode Mode { get; }
    public PersistenceModeAttribute(PersistenceMode mode);
    private static PersistenceModeAttribute();
    public PersistenceMode get_Mode();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual bool IsDefaultAttribute();
}
public class System.Web.UI.PostBackOptions : object {
    [DefaultValueAttribute("")]
public string ActionUrl { get; public set; }
    [DefaultValueAttribute("")]
public string Argument { get; public set; }
    [DefaultValueAttribute("False")]
public bool AutoPostBack { get; public set; }
    [DefaultValueAttribute("True")]
public bool ClientSubmit { get; public set; }
    [DefaultValueAttribute("True")]
public bool RequiresJavaScriptProtocol { get; public set; }
    [DefaultValueAttribute("False")]
public bool PerformValidation { get; public set; }
    [DefaultValueAttribute("")]
public string ValidationGroup { get; public set; }
    [DefaultValueAttribute("")]
public Control TargetControl { get; }
    [DefaultValueAttribute("False")]
public bool TrackFocus { get; public set; }
    public PostBackOptions(Control targetControl);
    public PostBackOptions(Control targetControl, string argument);
    public PostBackOptions(Control targetControl, string argument, string actionUrl, bool autoPostBack, bool requiresJavaScriptProtocol, bool trackFocus, bool clientSubmit, bool performValidation, string validationGroup);
    public string get_ActionUrl();
    public void set_ActionUrl(string value);
    public string get_Argument();
    public void set_Argument(string value);
    public bool get_AutoPostBack();
    public void set_AutoPostBack(bool value);
    public bool get_ClientSubmit();
    public void set_ClientSubmit(bool value);
    public bool get_RequiresJavaScriptProtocol();
    public void set_RequiresJavaScriptProtocol(bool value);
    public bool get_PerformValidation();
    public void set_PerformValidation(bool value);
    public string get_ValidationGroup();
    public void set_ValidationGroup(string value);
    public Control get_TargetControl();
    public bool get_TrackFocus();
    public void set_TrackFocus(bool value);
}
public static class System.Web.UI.PropertyConverter : object {
    private static PropertyConverter();
    public static object EnumFromString(Type enumType, string value);
    public static string EnumToString(Type enumType, object enumValue);
    public static object ObjectFromString(Type objType, MemberInfo propertyInfo, string value);
}
public abstract class System.Web.UI.PropertyEntry : object {
    public string Filter { get; public set; }
    internal int Order { get; internal set; }
    internal int Index { get; internal set; }
    public PropertyInfo PropertyInfo { get; public set; }
    public string Name { get; public set; }
    public Type Type { get; public set; }
    public Type DeclaringType { get; }
    public string get_Filter();
    public void set_Filter(string value);
    internal int get_Order();
    internal void set_Order(int value);
    internal int get_Index();
    internal void set_Index(int value);
    public PropertyInfo get_PropertyInfo();
    public void set_PropertyInfo(PropertyInfo value);
    public string get_Name();
    public void set_Name(string value);
    public Type get_Type();
    public void set_Type(Type value);
    public Type get_DeclaringType();
}
internal class System.Web.UI.PropertyMapper : object {
    internal static MemberInfo GetMemberInfo(Type ctrlType, string name, String& nameForCodeGen);
    internal static string MapNameToPropertyName(string attrName);
    internal static object LocatePropertyObject(object obj, string mappedName, String& propertyName, bool inDesigner);
    internal static PropertyDescriptor GetMappedPropertyDescriptor(object obj, string mappedName, Object& childObject, String& propertyName, bool inDesigner);
    internal static void SetMappedPropertyValue(object obj, string mappedName, object value, bool inDesigner);
}
internal class System.Web.UI.RegisterCallData : object {
    internal ClientAPIRegisterType Type;
    internal ScriptKey Key;
    internal string StringParam1;
    internal string StringParam2;
    internal string StringParam3;
}
internal abstract class System.Web.UI.RegisterDirectiveEntry : SourceLineInfo {
    internal string TagPrefix { get; }
    internal RegisterDirectiveEntry(string tagPrefix);
    internal string get_TagPrefix();
}
public class System.Web.UI.RenderMethod : MulticastDelegate {
    public RenderMethod(object object, IntPtr method);
    public virtual void Invoke(HtmlTextWriter output, Control container);
    public virtual IAsyncResult BeginInvoke(HtmlTextWriter output, Control container, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Web.UI.RenderStyle : ValueType {
    public string name;
    public string value;
    public HtmlTextWriterStyle key;
}
public abstract class System.Web.UI.RenderTraceListener : object {
    public static IList`1<Func`1<RenderTraceListener>> ListenerFactories { get; }
    internal static RenderTraceListener CurrentListeners { get; }
    private static RenderTraceListener();
    public static IList`1<Func`1<RenderTraceListener>> get_ListenerFactories();
    internal static RenderTraceListener get_CurrentListeners();
    public virtual void Initialize(HttpContext context);
    public virtual void SetTraceData(object tracedObject, object traceDataKey, object traceDataValue);
    public virtual void ShareTraceData(object source, object destination);
    public virtual void BeginRendering(TextWriter writer, object renderedObject);
    public virtual void EndRendering(TextWriter writer, object renderedObject);
}
internal class System.Web.UI.ResourceBasedLiteralControl : LiteralControl {
    public string Text { get; public set; }
    internal ResourceBasedLiteralControl(TemplateControl tplControl, int offset, int size, bool fAsciiOnly);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    protected internal virtual void Render(HtmlTextWriter output);
}
public class System.Web.UI.RootBuilder : TemplateBuilder {
    public IDictionary BuiltObjects { get; }
    public RootBuilder(TemplateParser parser);
    public IDictionary get_BuiltObjects();
    protected internal virtual void OnCodeGenerationComplete();
    internal void SetTypeMapper(MainTagNameToTypeMapper typeMapper);
    public virtual Type GetChildControlType(string tagName, IDictionary attribs);
    internal virtual void PrepareNoCompilePageSupport();
}
internal class System.Web.UI.ScriptBlockData : SourceLineInfo {
    protected string _script;
    internal int Column { get; internal set; }
    internal string Script { get; internal set; }
    internal ScriptBlockData(int line, int column, string virtualPath);
    internal int get_Column();
    internal void set_Column(int value);
    internal string get_Script();
    internal void set_Script(string value);
}
internal class System.Web.UI.ScriptKey : object {
    public Assembly Assembly { get; }
    public bool IsResource { get; }
    public string Key { get; }
    internal ScriptKey(Type type, string key);
    internal ScriptKey(Type type, string key, bool isInclude, bool isResource);
    public Assembly get_Assembly();
    public bool get_IsResource();
    public string get_Key();
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
}
public class System.Web.UI.SessionPageStatePersister : PageStatePersister {
    public SessionPageStatePersister(Page page);
    public virtual void Load();
    public virtual void Save();
}
internal class System.Web.UI.SimpleHandlerFactory : object {
    public virtual IHttpHandler GetHandler(HttpContext context, string requestType, string virtualPath, string path);
    private sealed virtual override IHttpHandler System.Web.IHttpHandlerFactory2.GetHandler(HttpContext context, string requestType, VirtualPath virtualPath, string physicalPath);
    public virtual void ReleaseHandler(IHttpHandler handler);
}
public class System.Web.UI.SimplePropertyEntry : PropertyEntry {
    public string PersistedValue { get; public set; }
    public bool UseSetAttribute { get; public set; }
    public object Value { get; public set; }
    public string get_PersistedValue();
    public void set_PersistedValue(string value);
    public bool get_UseSetAttribute();
    public void set_UseSetAttribute(bool value);
    public object get_Value();
    public void set_Value(object value);
    internal CodeStatement GetCodeStatement(BaseTemplateCodeDomTreeGenerator generator, CodeExpression ctrlRefExpr);
}
public abstract class System.Web.UI.SimpleWebHandlerParser : object {
    internal string TypeName { get; }
    internal bool IgnoreParseErrors { get; internal set; }
    internal CompilerType CompilerType { get; }
    internal ICollection AssemblyDependencies { get; }
    internal ICollection SourceDependencies { get; }
    internal bool HasInlineCode { get; }
    protected string DefaultDirectiveName { get; }
    private ICollection System.Web.UI.IAssemblyDependencyParser.AssemblyDependencies { get; }
    protected SimpleWebHandlerParser(HttpContext context, string virtualPath, string physicalPath);
    private static SimpleWebHandlerParser();
    internal string get_TypeName();
    internal bool get_IgnoreParseErrors();
    internal void set_IgnoreParseErrors(bool value);
    internal void SetBuildProvider(SimpleHandlerBuildProvider buildProvider);
    protected Type GetCompiledTypeFromCache();
    internal void Parse(ICollection referencedAssemblies);
    internal CompilerType get_CompilerType();
    internal ICollection get_AssemblyDependencies();
    internal ICollection get_SourceDependencies();
    internal CodeCompileUnit GetCodeModel();
    internal IDictionary GetLinePragmasTable();
    internal bool get_HasInlineCode();
    internal Type GetTypeToCache(Assembly builtAssembly);
    internal virtual void ValidateBaseType(Type t);
    protected abstract virtual string get_DefaultDirectiveName();
    internal virtual void ProcessDirective(string directiveName, IDictionary directive);
    internal virtual bool IsMainDirective(string directiveName);
    internal void AddSourceDependency(VirtualPath fileName);
    private sealed virtual override ICollection System.Web.UI.IAssemblyDependencyParser.get_AssemblyDependencies();
}
public class System.Web.UI.SkinBuilder : ControlBuilder {
    internal static Object[] EmptyParams;
    public SkinBuilder(ThemeProvider provider, Control control, ControlBuilder skinBuilder, string themePath);
    private static SkinBuilder();
    public Control ApplyTheme();
}
internal enum System.Web.UI.SmartNavigationSupport : Enum {
    public int value__;
    public static SmartNavigationSupport NotDesiredOrSupported;
    public static SmartNavigationSupport Desired;
    public static SmartNavigationSupport IE6OrNewer;
}
internal abstract class System.Web.UI.SourceLineInfo : object {
    internal string VirtualPath { get; internal set; }
    internal int Line { get; internal set; }
    internal string get_VirtualPath();
    internal void set_VirtualPath(string value);
    internal int get_Line();
    internal void set_Line(int value);
}
internal class System.Web.UI.SqlDataSourceCache : DataSourceCache {
    internal static string Sql9CacheDependencyDirective;
    public string SqlCacheDependency { get; public set; }
    public string get_SqlCacheDependency();
    public void set_SqlCacheDependency(string value);
    protected virtual void SaveDataToCacheInternal(string key, object data, CacheDependency dependency);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.StateBag : object {
    public int Count { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public object Item { get; public set; }
    private object System.Collections.IDictionary.Item { get; private set; }
    internal bool IsTrackingViewState { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public StateBag(bool ignoreCase);
    public sealed virtual int get_Count();
    public sealed virtual ICollection get_Keys();
    public sealed virtual ICollection get_Values();
    public object get_Item(string key);
    public void set_Item(string key, object value);
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    public StateItem Add(string key, object value);
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    public sealed virtual void Clear();
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    public bool IsItemDirty(string key);
    internal bool get_IsTrackingViewState();
    internal void LoadViewState(object state);
    internal void TrackViewState();
    public void Remove(string key);
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    internal object SaveViewState();
    public void SetDirty(bool dirty);
    public void SetItemDirty(string key, bool dirty);
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object state);
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
}
public class System.Web.UI.StateItem : object {
    public bool IsDirty { get; public set; }
    public object Value { get; public set; }
    internal StateItem(object initialValue);
    public bool get_IsDirty();
    public void set_IsDirty(bool value);
    public object get_Value();
    public void set_Value(object value);
}
public abstract class System.Web.UI.StateManagedCollection : object {
    public int Count { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public int get_Count();
    public void Clear();
    public sealed virtual void CopyTo(Array array, int index);
    protected virtual object CreateKnownType(int index);
    public IEnumerator GetEnumerator();
    protected virtual Type[] GetKnownTypes();
    protected virtual void OnClear();
    protected virtual void OnClearComplete();
    protected virtual void OnValidate(object value);
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemove(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    public void SetDirty();
    protected abstract virtual void SetDirtyObject(object o);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object savedState);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
public class System.Web.UI.StaticPartialCachingControl : BasePartialCachingControl {
    public StaticPartialCachingControl(string ctrlID, string guid, int duration, string varyByParams, string varyByControls, string varyByCustom, BuildMethod buildMethod);
    public StaticPartialCachingControl(string ctrlID, string guid, int duration, string varyByParams, string varyByControls, string varyByCustom, string sqlDependency, BuildMethod buildMethod);
    public StaticPartialCachingControl(string ctrlID, string guid, int duration, string varyByParams, string varyByControls, string varyByCustom, string sqlDependency, BuildMethod buildMethod, string providerName);
    internal virtual Control CreateCachedControl();
    public static void BuildCachedControl(Control parent, string ctrlID, string guid, int duration, string varyByParams, string varyByControls, string varyByCustom, BuildMethod buildMethod);
    public static void BuildCachedControl(Control parent, string ctrlID, string guid, int duration, string varyByParams, string varyByControls, string varyByCustom, string sqlDependency, BuildMethod buildMethod);
    public static void BuildCachedControl(Control parent, string ctrlID, string guid, int duration, string varyByParams, string varyByControls, string varyByCustom, string sqlDependency, BuildMethod buildMethod, string providerName);
}
internal class System.Web.UI.StringPropertyBuilder : ControlBuilder {
    public string Text { get; }
    internal StringPropertyBuilder(string text);
    public string get_Text();
    public virtual void AppendLiteralString(string s);
    public virtual void AppendSubBuilder(ControlBuilder subBuilder);
    public virtual object BuildObject();
    public virtual void Init(TemplateParser parser, ControlBuilder parentBuilder, Type type, string tagName, string ID, IDictionary attribs);
}
[AttributeUsageAttribute("4")]
public class System.Web.UI.SupportsEventValidationAttribute : Attribute {
    private static SupportsEventValidationAttribute();
    internal static bool SupportsEventValidation(Type type);
}
internal class System.Web.UI.TagNamespaceRegisterEntry : RegisterDirectiveEntry {
    internal string Namespace { get; }
    internal string AssemblyName { get; }
    internal TagNamespaceRegisterEntry(string tagPrefix, string namespaceName, string assemblyName);
    internal string get_Namespace();
    internal string get_AssemblyName();
}
internal class System.Web.UI.TagNamespaceRegisterEntryTable : Hashtable {
    public virtual object Clone();
}
[AttributeUsageAttribute("1")]
public class System.Web.UI.TagPrefixAttribute : Attribute {
    public string NamespaceName { get; }
    public string TagPrefix { get; }
    public TagPrefixAttribute(string namespaceName, string tagPrefix);
    public string get_NamespaceName();
    public string get_TagPrefix();
}
internal class System.Web.UI.TagPrefixTagNameToTypeMapper : object {
    internal TagPrefixTagNameToTypeMapper(string tagPrefix);
    internal void AddNamespaceMapper(NamespaceTagNameToTypeMapper mapper);
    private sealed virtual override Type System.Web.UI.ITagNameToTypeMapper.GetControlType(string tagName, IDictionary attribs);
}
internal static class System.Web.UI.TargetFrameworkUtil : object {
    internal static IDesignerHost DesignerHost { get; internal set; }
    unknown static ClientBuildManagerTypeDescriptionProviderBridge CBMTypeDescriptionProviderBridge {internal set; }
    private static TargetFrameworkUtil();
    [CompilerGeneratedAttribute]
internal static IDesignerHost get_DesignerHost();
    [CompilerGeneratedAttribute]
internal static void set_DesignerHost(IDesignerHost value);
    internal static void set_CBMTypeDescriptionProviderBridge(ClientBuildManagerTypeDescriptionProviderBridge value);
    internal static PropertyInfo GetProperty(Type type, string name, BindingFlags bindingAttr, Type returnType, Type[] types, bool throwAmbiguousMatchException);
    internal static FieldInfo GetField(Type type, string name, BindingFlags bindingAttr);
    internal static EventInfo GetEvent(Type type, string name);
    internal static PropertyDescriptorCollection GetProperties(Type type);
    internal static PropertyDescriptorCollection GetProperties(object obj);
    internal static EventDescriptorCollection GetEvents(Type type);
    internal static AttributeCollection GetAttributes(Type type);
    internal static Object[] GetCustomAttributes(Type type, Type attributeType, bool inherit);
    internal static string TypeNameConverter(Type type);
    internal static bool HasMethod(Type type, string name, BindingFlags bindingAttr);
    internal static bool IsSupportedType(Type type);
}
public class System.Web.UI.TemplateBuilder : ControlBuilder {
    internal string _tagInnerText;
    internal bool AllowMultipleInstances { get; internal set; }
    public string Text { get; public set; }
    public virtual void Init(TemplateParser parser, ControlBuilder parentBuilder, Type type, string tagName, string ID, IDictionary attribs);
    public virtual void CloseControl();
    internal bool get_AllowMultipleInstances();
    internal void set_AllowMultipleInstances(bool value);
    public virtual object BuildObject();
    public virtual bool NeedsTagInnerText();
    internal void SetDesignerHost(IDesignerHost designerHost);
    public virtual void SetTagInnerText(string text);
    public virtual void InstantiateIn(Control container);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
[AttributeUsageAttribute("128")]
public class System.Web.UI.TemplateContainerAttribute : Attribute {
    public BindingDirection BindingDirection { get; }
    public Type ContainerType { get; }
    public TemplateContainerAttribute(Type containerType);
    public TemplateContainerAttribute(Type containerType, BindingDirection bindingDirection);
    public BindingDirection get_BindingDirection();
    public Type get_ContainerType();
}
public abstract class System.Web.UI.TemplateControl : Control {
    [BrowsableAttribute("True")]
public bool EnableTheming { get; public set; }
    internal bool NoCompile { get; }
    [EditorBrowsableAttribute("1")]
protected bool SupportAutoEvents { get; }
    internal IntPtr StringResourcePointer { get; }
    internal int MaxResourceOffset { get; }
    internal VirtualPath VirtualPath { get; }
    [EditorBrowsableAttribute("2")]
[BrowsableAttribute("False")]
public string AppRelativeVirtualPath { get; public set; }
    internal VirtualPath TemplateControlVirtualPath { get; internal set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use of this property is not recommended because it is no longer useful. http://go.microsoft.com/fwlink/?linkid=14202")]
protected int AutoHandlers { get; protected set; }
    private static TemplateControl();
    protected virtual void Construct();
    public void add_CommitTransaction(EventHandler value);
    public void remove_CommitTransaction(EventHandler value);
    public virtual bool get_EnableTheming();
    public virtual void set_EnableTheming(bool value);
    protected virtual void OnCommitTransaction(EventArgs e);
    public void add_AbortTransaction(EventHandler value);
    public void remove_AbortTransaction(EventHandler value);
    protected virtual void OnAbortTransaction(EventArgs e);
    public void add_Error(EventHandler value);
    public void remove_Error(EventHandler value);
    protected virtual void OnError(EventArgs e);
    internal void SetNoCompileBuildResult(BuildResultNoCompileTemplateControl noCompileBuildResult);
    internal bool get_NoCompile();
    [EditorBrowsableAttribute("1")]
protected virtual void FrameworkInitialize();
    protected virtual bool get_SupportAutoEvents();
    internal IntPtr get_StringResourcePointer();
    internal int get_MaxResourceOffset();
    [EditorBrowsableAttribute("1")]
public static object ReadStringResource(Type t);
    [EditorBrowsableAttribute("1")]
public object ReadStringResource();
    protected LiteralControl CreateResourceBasedLiteralControl(int offset, int size, bool fAsciiOnly);
    [EditorBrowsableAttribute("1")]
protected void SetStringResourcePointer(object stringResourcePointer, int maxResourceOffset);
    internal VirtualPath get_VirtualPath();
    public string get_AppRelativeVirtualPath();
    public void set_AppRelativeVirtualPath(string value);
    internal VirtualPath get_TemplateControlVirtualPath();
    internal void set_TemplateControlVirtualPath(VirtualPath value);
    public virtual bool TestDeviceFilter(string filterName);
    [EditorBrowsableAttribute("1")]
protected void WriteUTF8ResourceString(HtmlTextWriter output, int offset, int size, bool fAsciiOnly);
    protected virtual int get_AutoHandlers();
    protected virtual void set_AutoHandlers(int value);
    internal virtual TemplateControl GetTemplateControl();
    internal void HookUpAutomaticHandlers();
    public Control LoadControl(string virtualPath);
    internal Control LoadControl(VirtualPath virtualPath);
    public Control LoadControl(Type t, Object[] parameters);
    public ITemplate LoadTemplate(string virtualPath);
    internal ITemplate LoadTemplate(VirtualPath virtualPath);
    public Control ParseControl(string content);
    public Control ParseControl(string content, bool ignoreParserFilter);
    protected internal object Eval(string expression);
    protected internal string Eval(string expression, string format);
    protected internal object XPath(string xPathExpression);
    protected internal object XPath(string xPathExpression, IXmlNamespaceResolver resolver);
    protected internal string XPath(string xPathExpression, string format);
    protected internal string XPath(string xPathExpression, string format, IXmlNamespaceResolver resolver);
    protected internal IEnumerable XPathSelect(string xPathExpression);
    protected internal IEnumerable XPathSelect(string xPathExpression, IXmlNamespaceResolver resolver);
    protected object GetLocalResourceObject(string resourceKey);
    protected object GetLocalResourceObject(string resourceKey, Type objType, string propName);
    protected object GetGlobalResourceObject(string className, string resourceKey);
    protected object GetGlobalResourceObject(string className, string resourceKey, Type objType, string propName);
    private sealed virtual override bool System.Web.UI.IFilterResolutionService.EvaluateFilter(string filterName);
    private sealed virtual override int System.Web.UI.IFilterResolutionService.CompareFilters(string filter1, string filter2);
}
internal abstract class System.Web.UI.TemplateControlDependencyParser : DependencyParser {
    internal virtual void ProcessMainDirectiveAttribute(string deviceName, string name, string value);
}
public abstract class System.Web.UI.TemplateControlParser : BaseTemplateParser {
    internal OutputCacheParameters OutputCacheParameters { get; }
    internal bool FAutoEventWireup { get; }
    internal bool RequiresCompilation { get; }
    internal bool FDurationRequiredOnOutputCache { get; }
    internal bool FVaryByParamsRequiredOnOutputCache { get; }
    internal string UnknownOutputCacheAttributeError { get; }
    internal OutputCacheParameters get_OutputCacheParameters();
    internal bool get_FAutoEventWireup();
    internal virtual bool get_RequiresCompilation();
    internal virtual void ProcessConfigSettings();
    internal virtual void ProcessDirective(string directiveName, IDictionary directive);
    internal virtual void ProcessMainDirective(IDictionary mainDirective);
    internal virtual bool ProcessMainDirectiveAttribute(string deviceName, string name, string value, IDictionary parseData);
    internal virtual void ProcessUnknownMainDirectiveAttribute(string filter, string attribName, string value);
    internal Type GetDirectiveType(IDictionary directive, string directiveName);
    internal virtual void HandlePostParse();
    internal virtual void ProcessOutputCacheDirective(string directiveName, IDictionary directive);
    internal virtual bool get_FDurationRequiredOnOutputCache();
    internal virtual bool get_FVaryByParamsRequiredOnOutputCache();
    internal abstract virtual string get_UnknownOutputCacheAttributeError();
}
public enum System.Web.UI.TemplateInstance : Enum {
    public int value__;
    public static TemplateInstance Multiple;
    public static TemplateInstance Single;
}
[AttributeUsageAttribute("128")]
public class System.Web.UI.TemplateInstanceAttribute : Attribute {
    public static TemplateInstanceAttribute Multiple;
    public static TemplateInstanceAttribute Single;
    public static TemplateInstanceAttribute Default;
    public TemplateInstance Instances { get; }
    public TemplateInstanceAttribute(TemplateInstance instances);
    private static TemplateInstanceAttribute();
    public TemplateInstance get_Instances();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
public abstract class System.Web.UI.TemplateParser : BaseParser {
    internal static string CodeFileBaseClassAttributeName;
    internal static int requiresCompilation;
    internal static int aspCompatMode;
    internal static int noAutoEventWireup;
    internal static int buffer;
    internal static int requiresSessionState;
    internal static int readOnlySessionState;
    internal static int validateRequest;
    internal static int asyncMode;
    internal static int calledFromParseControlFlag;
    internal SimpleBitVector32 flags;
    internal int _lineNumber;
    internal PageParserFilter _pageParserFilter;
    internal HttpStaticObjectsCollection _sessionObjects;
    internal HttpStaticObjectsCollection _applicationObjects;
    internal IDictionary _mainDirectiveConfigSettings;
    internal CompilationSection CompConfig { get; }
    internal PagesSection PagesConfig { get; }
    internal MainTagNameToTypeMapper TypeMapper { get; }
    internal ICollection UserControlRegisterEntries { get; }
    internal List`1<TagNamespaceRegisterEntry> TagRegisterEntries { get; }
    internal Stack BuilderStack { get; }
    public string Text { get; internal set; }
    internal Type BaseType { get; internal set; }
    internal string BaseTypeNamespace { get; }
    internal string BaseTypeName { get; }
    internal bool IgnoreControlProperties { get; internal set; }
    internal bool ThrowOnFirstParseError { get; internal set; }
    internal ArrayList ImplementedInterfaces { get; }
    internal bool HasCodeBehind { get; }
    internal Type DefaultBaseType { get; }
    internal bool FInDesigner { get; internal set; }
    internal bool IgnoreParseErrors { get; internal set; }
    internal CompilationMode CompilationMode { get; internal set; }
    internal bool RequiresCompilation { get; }
    internal bool IsCodeAllowed { get; }
    internal IDesignerHost DesignerHost { get; internal set; }
    internal bool FApplicationFile { get; }
    internal EventHandler DesignTimeDataBindHandler { get; internal set; }
    internal AssemblySet AssemblyDependencies { get; }
    internal StringSet SourceDependencies { get; }
    internal HttpStaticObjectsCollection SessionObjects { get; }
    internal HttpStaticObjectsCollection ApplicationObjects { get; }
    internal RootBuilder RootBuilder { get; }
    internal Hashtable NamespaceEntries { get; }
    internal CompilerType CompilerType { get; }
    internal ArrayList ScriptList { get; }
    internal int TypeHashCode { get; }
    internal ArrayList PageObjectList { get; }
    internal ParseRecorder ParseRecorders { get; }
    internal CompilerParameters CompilParams { get; }
    internal bool FExplicit { get; }
    internal bool FLinePragmas { get; }
    internal bool FStrict { get; }
    internal VirtualPath CodeFileVirtualPath { get; }
    internal string GeneratedClassName { get; }
    internal string GeneratedNamespace { get; }
    internal ControlBuilderInterceptor ControlBuilderInterceptor { get; }
    internal Type DefaultFileLevelBuilderType { get; }
    internal string DefaultDirectiveName { get; }
    private ICollection System.Web.UI.IAssemblyDependencyParser.AssemblyDependencies { get; }
    private static TemplateParser();
    internal CompilationSection get_CompConfig();
    internal PagesSection get_PagesConfig();
    internal MainTagNameToTypeMapper get_TypeMapper();
    internal ICollection get_UserControlRegisterEntries();
    internal List`1<TagNamespaceRegisterEntry> get_TagRegisterEntries();
    internal Stack get_BuilderStack();
    public string get_Text();
    internal void set_Text(string value);
    internal Type get_BaseType();
    internal void set_BaseType(Type value);
    internal string get_BaseTypeNamespace();
    internal string get_BaseTypeName();
    internal bool get_IgnoreControlProperties();
    internal void set_IgnoreControlProperties(bool value);
    internal bool get_ThrowOnFirstParseError();
    internal void set_ThrowOnFirstParseError(bool value);
    internal ArrayList get_ImplementedInterfaces();
    internal bool get_HasCodeBehind();
    internal abstract virtual Type get_DefaultBaseType();
    internal virtual bool get_FInDesigner();
    internal virtual void set_FInDesigner(bool value);
    internal virtual bool get_IgnoreParseErrors();
    internal virtual void set_IgnoreParseErrors(bool value);
    internal CompilationMode get_CompilationMode();
    internal void set_CompilationMode(CompilationMode value);
    protected void ProcessError(string message);
    protected void ProcessException(Exception ex);
    internal virtual bool get_RequiresCompilation();
    internal virtual bool get_IsCodeAllowed();
    internal void EnsureCodeAllowed();
    internal void OnFoundAttributeRequiringCompilation(string attribName);
    internal void OnFoundDirectiveRequiringCompilation(string directiveName);
    internal void OnFoundEventHandler(string directiveName);
    internal IDesignerHost get_DesignerHost();
    internal void set_DesignerHost(IDesignerHost value);
    internal virtual bool get_FApplicationFile();
    internal EventHandler get_DesignTimeDataBindHandler();
    internal void set_DesignTimeDataBindHandler(EventHandler value);
    internal AssemblySet get_AssemblyDependencies();
    internal StringSet get_SourceDependencies();
    internal HttpStaticObjectsCollection get_SessionObjects();
    internal HttpStaticObjectsCollection get_ApplicationObjects();
    internal RootBuilder get_RootBuilder();
    internal Hashtable get_NamespaceEntries();
    internal CompilerType get_CompilerType();
    internal ArrayList get_ScriptList();
    internal int get_TypeHashCode();
    internal ArrayList get_PageObjectList();
    internal ParseRecorder get_ParseRecorders();
    internal CompilerParameters get_CompilParams();
    internal bool get_FExplicit();
    internal bool get_FLinePragmas();
    internal bool get_FStrict();
    internal VirtualPath get_CodeFileVirtualPath();
    internal string get_GeneratedClassName();
    internal string get_GeneratedNamespace();
    internal ControlBuilderInterceptor get_ControlBuilderInterceptor();
    internal static Control ParseControl(string content, VirtualPath virtualPath, bool ignoreFilter);
    public static ITemplate ParseTemplate(string content, string virtualPath, bool ignoreFilter);
    internal virtual void PrepareParse();
    internal virtual Type get_DefaultFileLevelBuilderType();
    internal virtual RootBuilder CreateDefaultFileLevelBuilder();
    internal virtual void ProcessConfigSettings();
    internal void Parse(ICollection referencedAssemblies, VirtualPath virtualPath);
    internal void Parse();
    internal virtual void ParseInternal();
    protected void ParseFile(string physicalPath, string virtualPath);
    internal void ParseFile(string physicalPath, VirtualPath virtualPath);
    internal void UpdateTypeHashCode(string text);
    internal void ParseString(string text, VirtualPath virtualPath, Encoding fileEncoding);
    internal virtual void HandlePostParse();
    internal virtual void CheckObjectTagScope(ObjectTagScope& scope);
    internal bool IsExpressionBuilderValue(string val);
    internal abstract virtual string get_DefaultDirectiveName();
    internal void PreprocessDirective(string directiveName, IDictionary directive);
    internal virtual void ProcessDirective(string directiveName, IDictionary directive);
    internal virtual void ProcessMainDirective(IDictionary mainDirective);
    internal virtual bool ProcessMainDirectiveAttribute(string deviceName, string name, string value, IDictionary parseData);
    internal void ValidateBuiltInAttribute(string deviceName, string name, string value);
    internal virtual void ProcessUnknownMainDirectiveAttribute(string filter, string attribName, string value);
    internal virtual void PostProcessMainDirectiveAttributes(IDictionary parseData);
    internal void AddImportEntry(string ns);
    internal Assembly LoadAssembly(string assemblyName, bool throwOnFail);
    internal Type GetType(string typeName, bool ignoreCase);
    internal Type GetType(string typeName, bool ignoreCase, bool throwOnError);
    internal Type GetType(string typeName);
    internal bool PageParserFilterProcessedDataBindingAttribute(string controlId, string attributeName, string code);
    internal bool PageParserFilterProcessedEventHookupAttribute(string controlId, string eventName, string handlerName);
    internal void AddControl(Type type, IDictionary attributes);
    internal Type MapStringToType(string typeName, IDictionary attribs);
    internal void AddSourceDependency(VirtualPath fileName);
    internal void AddBuildResultDependency(BuildResult result);
    internal void AddTypeDependency(Type type);
    internal Assembly AddAssemblyDependency(string assemblyName, bool addDependentAssemblies);
    internal Assembly AddAssemblyDependency(string assemblyName);
    internal void AddAssemblyDependency(Assembly assembly, bool addDependentAssemblies);
    internal void AddAssemblyDependency(Assembly assembly);
    private sealed virtual override ICollection System.Web.UI.IAssemblyDependencyParser.get_AssemblyDependencies();
    internal IImplicitResourceProvider GetImplicitResourceProvider();
}
public class System.Web.UI.TemplatePropertyEntry : BuilderPropertyEntry {
    internal bool IsMultiple { get; }
    public bool BindableTemplate { get; }
    internal TemplatePropertyEntry(bool bindableTemplate);
    internal bool get_IsMultiple();
    public bool get_BindableTemplate();
}
[AttributeUsageAttribute("132")]
public class System.Web.UI.ThemeableAttribute : Attribute {
    public static ThemeableAttribute Yes;
    public static ThemeableAttribute No;
    public static ThemeableAttribute Default;
    public bool Themeable { get; }
    private static ThemeableAttribute();
    public ThemeableAttribute(bool themeable);
    public bool get_Themeable();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
    public static bool IsObjectThemeable(object instance);
    public static bool IsTypeThemeable(Type type);
}
public class System.Web.UI.ThemeProvider : object {
    public int ContentHashCode { get; }
    public ICollection CssFiles { get; }
    public IDesignerHost DesignerHost { get; }
    public string ThemeName { get; }
    public ThemeProvider(IDesignerHost host, string name, string themeDefinition, String[] cssFiles, string themePath);
    public int get_ContentHashCode();
    public ICollection get_CssFiles();
    public IDesignerHost get_DesignerHost();
    public string get_ThemeName();
    public ICollection GetSkinsForControl(Type type);
    public SkinBuilder GetSkinBuilder(Control control);
    public IDictionary GetSkinControlBuildersForControlType(Type type);
}
[AttributeUsageAttribute("4")]
public class System.Web.UI.ToolboxDataAttribute : Attribute {
    public static ToolboxDataAttribute Default;
    public string Data { get; }
    public ToolboxDataAttribute(string data);
    private static ToolboxDataAttribute();
    public string get_Data();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual bool IsDefaultAttribute();
}
public class System.Web.UI.Triplet : object {
    public object First;
    public object Second;
    public object Third;
    public Triplet(object x, object y);
    public Triplet(object x, object y, object z);
}
public enum System.Web.UI.UnobtrusiveValidationMode : Enum {
    public int value__;
    public static UnobtrusiveValidationMode None;
    public static UnobtrusiveValidationMode WebForms;
}
[AttributeUsageAttribute("128")]
public class System.Web.UI.UrlPropertyAttribute : Attribute {
    public string Filter { get; }
    public UrlPropertyAttribute(string filter);
    public string get_Filter();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[ControlBuilderAttribute("System.Web.UI.UserControlControlBuilder")]
[DefaultEventAttribute("Load")]
[DesignerAttribute("System.Web.UI.Design.UserControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IDesigner")]
[DesignerAttribute("Microsoft.VisualStudio.Web.WebForms.WebFormDesigner, Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IRootDesigner")]
[DesignerCategoryAttribute("ASPXCodeBehind")]
[DesignerSerializerAttribute("Microsoft.VisualStudio.Web.WebForms.WebFormCodeDomSerializer, Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.TypeCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ParseChildrenAttribute("True")]
[ToolboxItemAttribute("False")]
public class System.Web.UI.UserControl : TemplateControl {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public AttributeCollection Attributes { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HttpApplicationState Application { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public TraceContext Trace { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HttpRequest Request { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HttpResponse Response { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HttpServerUtility Server { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Cache Cache { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ControlCachePolicy CachePolicy { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsPostBack { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HttpSessionState Session { get; }
    private string System.Web.UI.IUserControlDesignerAccessor.TagName { get; private set; }
    private string System.Web.UI.IUserControlDesignerAccessor.InnerText { get; private set; }
    public AttributeCollection get_Attributes();
    public HttpApplicationState get_Application();
    public TraceContext get_Trace();
    public HttpRequest get_Request();
    public HttpResponse get_Response();
    public HttpServerUtility get_Server();
    public Cache get_Cache();
    public ControlCachePolicy get_CachePolicy();
    public bool get_IsPostBack();
    public HttpSessionState get_Session();
    [EditorBrowsableAttribute("1")]
public void DesignerInitialize();
    protected internal virtual void OnInit(EventArgs e);
    [EditorBrowsableAttribute("1")]
public void InitializeAsUserControl(Page page);
    internal void InitializeAsUserControlInternal();
    protected virtual void LoadViewState(object savedState);
    protected virtual object SaveViewState();
    private sealed virtual override string System.Web.UI.IAttributeAccessor.GetAttribute(string name);
    private sealed virtual override void System.Web.UI.IAttributeAccessor.SetAttribute(string name, string value);
    public string MapPath(string virtualPath);
    private sealed virtual override string System.Web.UI.IUserControlDesignerAccessor.get_TagName();
    private sealed virtual override void System.Web.UI.IUserControlDesignerAccessor.set_TagName(string value);
    private sealed virtual override string System.Web.UI.IUserControlDesignerAccessor.get_InnerText();
    private sealed virtual override void System.Web.UI.IUserControlDesignerAccessor.set_InnerText(string value);
    public virtual void UpdateModel(TModel model);
    public virtual void UpdateModel(TModel model, IValueProvider valueProvider);
    public virtual bool TryUpdateModel(TModel model);
    public virtual bool TryUpdateModel(TModel model, IValueProvider valueProvider);
}
public class System.Web.UI.UserControlControlBuilder : ControlBuilder {
    public virtual object BuildObject();
    public virtual bool NeedsTagInnerText();
    public virtual void SetTagInnerText(string text);
}
internal class System.Web.UI.UserControlDependencyParser : TemplateControlDependencyParser {
    internal string DefaultDirectiveName { get; }
    internal virtual string get_DefaultDirectiveName();
}
internal class System.Web.UI.UserControlParser : TemplateControlParser {
    internal static string defaultDirectiveName;
    internal bool FSharedPartialCaching { get; }
    internal string Provider { get; }
    internal Type DefaultBaseType { get; }
    internal string DefaultDirectiveName { get; }
    internal Type DefaultFileLevelBuilderType { get; }
    internal bool FVaryByParamsRequiredOnOutputCache { get; }
    internal string UnknownOutputCacheAttributeError { get; }
    internal bool get_FSharedPartialCaching();
    internal string get_Provider();
    internal virtual void ProcessConfigSettings();
    internal virtual void ApplyBaseType();
    internal virtual Type get_DefaultBaseType();
    internal virtual string get_DefaultDirectiveName();
    internal virtual Type get_DefaultFileLevelBuilderType();
    internal virtual RootBuilder CreateDefaultFileLevelBuilder();
    internal virtual void ProcessOutputCacheDirective(string directiveName, IDictionary directive);
    internal virtual bool get_FVaryByParamsRequiredOnOutputCache();
    internal virtual string get_UnknownOutputCacheAttributeError();
}
internal class System.Web.UI.UserControlRegisterEntry : RegisterDirectiveEntry {
    internal string TagName { get; }
    internal VirtualPath UserControlSource { get; internal set; }
    internal bool ComesFromConfig { get; internal set; }
    internal string Key { get; }
    internal UserControlRegisterEntry(string tagPrefix, string tagName);
    internal string get_TagName();
    internal VirtualPath get_UserControlSource();
    internal void set_UserControlSource(VirtualPath value);
    internal bool get_ComesFromConfig();
    internal void set_ComesFromConfig(bool value);
    internal string get_Key();
}
internal static class System.Web.UI.Util : object {
    internal static char DeviceFilterSeparator;
    internal static string XmlnsAttribute;
    private static Util();
    internal static string SerializeWithAssert(IStateFormatter formatter, object stateGraph);
    internal static string SerializeWithAssert(IStateFormatter2 formatter, object stateGraph, Purpose purpose);
    internal static object DeserializeWithAssert(IStateFormatter2 formatter, string serializedState, Purpose purpose);
    internal static bool CanConvertToFrom(TypeConverter converter, Type type);
    internal static void CopyBaseAttributesToInnerControl(WebControl control, WebControl child);
    internal static long GetRecompilationHash(PagesSection ps);
    internal static Encoding GetEncodingFromConfigPath(VirtualPath configPath);
    internal static StreamReader ReaderFromFile(string filename, VirtualPath configPath);
    internal static void DeleteFileNoException(string path);
    internal static void DeleteFileIfExistsNoException(string path);
    internal static bool IsNonEmptyDirectory(string dir);
    internal static bool IsValidFileName(string fileName);
    internal static string MakeValidFileName(string fileName);
    internal static bool HasWriteAccessToDirectory(string dir);
    internal static VirtualPath GetScriptLocation();
    internal static StreamReader ReaderFromStream(Stream stream, VirtualPath configPath);
    internal static string StringFromVirtualPath(VirtualPath virtualPath);
    internal static string StringFromFile(string path);
    internal static string StringFromFile(string path, Encoding& encoding);
    internal static string StringFromFileIfExists(string path);
    internal static void RemoveOrRenameFile(string filename);
    internal static bool RemoveOrRenameFile(FileInfo f);
    internal static void ClearReadOnlyAttribute(string path);
    internal static void CheckVirtualFileExists(VirtualPath virtualPath);
    internal static bool VirtualFileExistsWithAssert(VirtualPath virtualPath);
    internal static void CheckThemeAttribute(string themeName);
    internal static bool ThemeExists(string themeName);
    internal static void CheckAssignableType(Type baseType, Type type);
    internal static int LineCount(string text, int offset, int newoffset);
    internal static object InvokeMethod(MethodInfo methodInfo, object obj, Object[] parameters);
    internal static Type GetNonPrivateFieldType(Type classType, string fieldName);
    internal static Type GetNonPrivatePropertyType(Type classType, string propName);
    internal static bool IsMultiInstanceTemplateProperty(PropertyInfo pInfo);
    internal static string GetAndRemoveNonEmptyAttribute(IDictionary directives, string key, bool required);
    internal static string GetNonEmptyAttribute(string name, string value);
    internal static string GetNoSpaceAttribute(string name, string value);
    internal static string GetAndRemoveNonEmptyAttribute(IDictionary directives, string key);
    internal static VirtualPath GetAndRemoveVirtualPathAttribute(IDictionary directives, string key);
    internal static VirtualPath GetAndRemoveVirtualPathAttribute(IDictionary directives, string key, bool required);
    public static string ParsePropertyDeviceFilter(string input, String& propName);
    public static string CreateFilteredName(string deviceName, string name);
    internal static string GetAndRemoveRequiredAttribute(IDictionary directives, string key);
    internal static string GetAndRemoveNonEmptyNoSpaceAttribute(IDictionary directives, string key, bool required);
    internal static string GetAndRemoveNonEmptyNoSpaceAttribute(IDictionary directives, string key);
    internal static string GetNonEmptyNoSpaceAttribute(string name, string value);
    internal static string GetAndRemoveNonEmptyIdentifierAttribute(IDictionary directives, string key, bool required);
    internal static string GetNonEmptyIdentifierAttribute(string name, string value);
    internal static string GetNonEmptyFullClassNameAttribute(string name, string value, String& ns);
    internal static void CheckUnknownDirectiveAttributes(string directiveName, IDictionary directive);
    internal static void CheckUnknownDirectiveAttributes(string directiveName, IDictionary directive, string resourceKey);
    internal static bool GetAndRemoveBooleanAttribute(IDictionary directives, string key, Boolean& val);
    internal static bool GetBooleanAttribute(string name, string value);
    internal static bool GetAndRemoveNonNegativeIntegerAttribute(IDictionary directives, string key, Int32& val);
    internal static int GetNonNegativeIntegerAttribute(string name, string value);
    internal static bool GetAndRemovePositiveIntegerAttribute(IDictionary directives, string key, Int32& val);
    internal static object GetAndRemoveEnumAttribute(IDictionary directives, Type enumType, string key);
    internal static object GetEnumAttribute(string name, string value, Type enumType);
    internal static object GetEnumAttribute(string name, string value, Type enumType, bool allowMultiple);
    internal static bool IsWhiteSpaceString(string s);
    internal static bool ContainsWhiteSpace(string s);
    internal static int FirstNonWhiteSpaceIndex(string s);
    internal static bool IsTrueString(string s);
    internal static bool IsFalseString(string s);
    internal static string GetStringFromBool(bool flag);
    internal static string MakeFullTypeName(string ns, string typeName);
    internal static string MakeValidTypeNameFromString(string s);
    internal static string GetNamespaceAndTypeNameFromVirtualPath(VirtualPath virtualPath, int chunksToIgnore, String& typeName);
    internal static string GetNamespaceFromVirtualPath(VirtualPath virtualPath);
    internal static string FilePathFromFileUrl(string url);
    internal static bool IsCultureName(string s);
    internal static string GetCultureName(string virtualPath);
    internal static bool TypeNameContainsAssembly(string typeName);
    internal static int CommaIndexInTypeName(string typeName);
    internal static string GetAssemblyPathFromType(Type t);
    internal static string GetAssemblySafePathFromType(Type t);
    internal static string GetAssemblyQualifiedTypeName(Type t);
    internal static string GetAssemblyShortName(Assembly a);
    internal static bool IsLateBoundComClassicType(Type t);
    internal static string GetAssemblyCodeBase(Assembly assembly);
    internal static void AddAssemblyToStringCollection(Assembly assembly, StringCollection toList);
    internal static void AddAssembliesToStringCollection(ICollection fromList, StringCollection toList);
    internal static AssemblySet GetReferencedAssemblies(Assembly a);
    internal static string GetAssemblyNameFromFileName(string fileName);
    internal static Type GetTypeFromAssemblies(IEnumerable assemblies, string typeName, bool ignoreCase);
    internal static string GetCurrentAccountName();
    internal static string GetUrlWithApplicationPath(HttpContextBase context, string url);
    internal static string QuoteJScriptString(string value);
    internal static string QuoteJScriptString(string value, bool forUrl);
    internal static string GetSpecificCulturesFormattedList(CultureInfo cultureInfo);
    internal static string GetClientValidateEvent(string validationGroup);
    internal static string GetClientValidatedPostback(Control control, string validationGroup);
    internal static string GetClientValidatedPostback(Control control, string validationGroup, string argument);
    internal static void WriteOnClickAttribute(HtmlTextWriter writer, HtmlControl control, bool submitsAutomatically, bool submitsProgramatically, bool causesValidation, string validationGroup);
    internal static string EnsureEndWithSemiColon(string value);
    internal static string MergeScript(string firstScript, string secondScript);
    internal static bool IsUserAllowedToPath(HttpContext context, VirtualPath virtualPath);
}
public enum System.Web.UI.ValidateRequestMode : Enum {
    public int value__;
    public static ValidateRequestMode Inherit;
    public static ValidateRequestMode Disabled;
    public static ValidateRequestMode Enabled;
}
[AttributeUsageAttribute("4")]
public class System.Web.UI.ValidationPropertyAttribute : Attribute {
    public string Name { get; }
    public ValidationPropertyAttribute(string name);
    public string get_Name();
}
public static class System.Web.UI.ValidationSettings : object {
    public static UnobtrusiveValidationMode UnobtrusiveValidationMode { get; public set; }
    public static UnobtrusiveValidationMode get_UnobtrusiveValidationMode();
    public static void set_UnobtrusiveValidationMode(UnobtrusiveValidationMode value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.ValidatorCollection : object {
    public int Count { get; }
    public IValidator Item { get; }
    public object SyncRoot { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public sealed virtual int get_Count();
    public IValidator get_Item(int index);
    public void Add(IValidator validator);
    public bool Contains(IValidator validator);
    public void Remove(IValidator validator);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual object get_SyncRoot();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
}
[AttributeUsageAttribute("132")]
public class System.Web.UI.VerificationAttribute : Attribute {
    public string Guideline { get; }
    public string Checkpoint { get; }
    public VerificationReportLevel VerificationReportLevel { get; }
    public int Priority { get; }
    public string Message { get; }
    public VerificationRule VerificationRule { get; }
    public string ConditionalProperty { get; }
    public VerificationConditionalOperator VerificationConditionalOperator { get; }
    public string ConditionalValue { get; }
    public string GuidelineUrl { get; }
    public VerificationAttribute(string guideline, string checkpoint, VerificationReportLevel reportLevel, int priority, string message);
    public VerificationAttribute(string guideline, string checkpoint, VerificationReportLevel reportLevel, int priority, string message, VerificationRule rule, string conditionalProperty);
    internal VerificationAttribute(string guideline, string checkpoint, VerificationReportLevel reportLevel, int priority, string message, VerificationRule rule, string conditionalProperty, VerificationConditionalOperator conditionalOperator, string conditionalValue);
    public VerificationAttribute(string guideline, string checkpoint, VerificationReportLevel reportLevel, int priority, string message, VerificationRule rule, string conditionalProperty, VerificationConditionalOperator conditionalOperator, string conditionalValue, string guidelineUrl);
    public string get_Guideline();
    public string get_Checkpoint();
    public VerificationReportLevel get_VerificationReportLevel();
    public int get_Priority();
    public string get_Message();
    public VerificationRule get_VerificationRule();
    public string get_ConditionalProperty();
    public VerificationConditionalOperator get_VerificationConditionalOperator();
    public string get_ConditionalValue();
    public string get_GuidelineUrl();
}
public enum System.Web.UI.VerificationConditionalOperator : Enum {
    public int value__;
    public static VerificationConditionalOperator Equals;
    public static VerificationConditionalOperator NotEquals;
}
public enum System.Web.UI.VerificationReportLevel : Enum {
    public int value__;
    public static VerificationReportLevel Error;
    public static VerificationReportLevel Warning;
    public static VerificationReportLevel Guideline;
}
public enum System.Web.UI.VerificationRule : Enum {
    public int value__;
    public static VerificationRule Required;
    public static VerificationRule Prohibited;
    public static VerificationRule NotEmptyString;
}
public enum System.Web.UI.ViewStateEncryptionMode : Enum {
    public int value__;
    public static ViewStateEncryptionMode Auto;
    public static ViewStateEncryptionMode Always;
    public static ViewStateEncryptionMode Never;
}
public class System.Web.UI.ViewStateException : Exception {
    internal bool _macValidationError;
    public string Message { get; }
    public string RemoteAddress { get; }
    public string RemotePort { get; }
    public string UserAgent { get; }
    public string PersistedState { get; }
    public string Referer { get; }
    public string Path { get; }
    public bool IsConnected { get; }
    internal string ShortMessage { get; }
    private ViewStateException(SerializationInfo info, StreamingContext context);
    private ViewStateException(string message);
    private ViewStateException(string message, Exception e);
    public virtual string get_Message();
    public string get_RemoteAddress();
    public string get_RemotePort();
    public string get_UserAgent();
    public string get_PersistedState();
    public string get_Referer();
    public string get_Path();
    public bool get_IsConnected();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal string get_ShortMessage();
    internal static void ThrowMacValidationError(Exception inner, string persistedState);
    internal static void ThrowViewStateError(Exception inner, string persistedState);
    internal static bool IsMacValidationException(Exception e);
}
public enum System.Web.UI.ViewStateMode : Enum {
    public int value__;
    public static ViewStateMode Inherit;
    public static ViewStateMode Enabled;
    public static ViewStateMode Disabled;
}
[AttributeUsageAttribute("4")]
public class System.Web.UI.ViewStateModeByIdAttribute : Attribute {
    private static ViewStateModeByIdAttribute();
    internal static bool IsEnabled(Type type);
}
public enum System.Web.UI.VirtualReferenceType : Enum {
    public int value__;
    public static VirtualReferenceType Page;
    public static VirtualReferenceType UserControl;
    public static VirtualReferenceType Master;
    public static VirtualReferenceType SourceFile;
    public static VirtualReferenceType Other;
}
[DesignerAttribute("System.Web.UI.Design.WebControls.AccessDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxBitmapAttribute("System.Web.UI.WebControls.AccessDataSource")]
[WebSysDescriptionAttribute("AccessDataSource_Description")]
[WebSysDisplayNameAttribute("AccessDataSource_DisplayName")]
public class System.Web.UI.WebControls.AccessDataSource : SqlDataSource {
    internal DataSourceCache Cache { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ConnectionString { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.MdbDataFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("AccessDataSource_DataFile")]
public string DataFile { get; public set; }
    internal string NativeProvider { get; }
    internal bool IsAccess2007 { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ProviderName { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string SqlCacheDependency { get; public set; }
    public AccessDataSource(string dataFile, string selectCommand);
    internal virtual DataSourceCache get_Cache();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public string get_DataFile();
    public void set_DataFile(string value);
    internal string get_NativeProvider();
    internal virtual bool get_IsAccess2007();
    public virtual string get_ProviderName();
    public virtual void set_ProviderName(string value);
    public virtual string get_SqlCacheDependency();
    public virtual void set_SqlCacheDependency(string value);
    protected virtual SqlDataSourceView CreateDataSourceView(string viewName);
    protected virtual DbProviderFactory GetDbProviderFactory();
    internal virtual void SaveDataToCache(int startRowIndex, int maximumRows, object data, CacheDependency dependency);
}
public class System.Web.UI.WebControls.AccessDataSourceView : SqlDataSourceView {
    public AccessDataSourceView(AccessDataSource owner, string name, HttpContext context);
    protected internal virtual IEnumerable ExecuteSelect(DataSourceSelectArguments arguments);
}
public class System.Web.UI.WebControls.Adapters.DataBoundControlAdapter : WebControlAdapter {
    protected DataBoundControl Control { get; }
    protected DataBoundControl get_Control();
    protected internal virtual void PerformDataBinding(IEnumerable data);
}
public class System.Web.UI.WebControls.Adapters.HideDisabledControlAdapter : WebControlAdapter {
    protected internal virtual void Render(HtmlTextWriter writer);
}
public class System.Web.UI.WebControls.Adapters.HierarchicalDataBoundControlAdapter : WebControlAdapter {
    protected HierarchicalDataBoundControl Control { get; }
    protected HierarchicalDataBoundControl get_Control();
    protected internal virtual void PerformDataBinding();
}
public class System.Web.UI.WebControls.Adapters.MenuAdapter : WebControlAdapter {
    protected Menu Control { get; }
    protected Menu get_Control();
    protected internal virtual void LoadAdapterControlState(object state);
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual object SaveAdapterControlState();
    protected virtual void RenderBeginTag(HtmlTextWriter writer);
    protected virtual void RenderContents(HtmlTextWriter writer);
    protected virtual void RenderEndTag(HtmlTextWriter writer);
    protected internal virtual void RenderItem(HtmlTextWriter writer, MenuItem item, int position);
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    protected virtual void RaisePostBackEvent(string eventArgument);
    internal void SetPath(string path);
}
public class System.Web.UI.WebControls.Adapters.WebControlAdapter : ControlAdapter {
    protected WebControl Control { get; }
    protected bool IsEnabled { get; }
    protected WebControl get_Control();
    protected bool get_IsEnabled();
    protected virtual void RenderBeginTag(HtmlTextWriter writer);
    protected virtual void RenderEndTag(HtmlTextWriter writer);
    protected virtual void RenderContents(HtmlTextWriter writer);
    protected internal virtual void Render(HtmlTextWriter writer);
}
public class System.Web.UI.WebControls.AdCreatedEventArgs : EventArgs {
    internal static string ImageUrlElement;
    internal static string NavigateUrlElement;
    internal static string AlternateTextElement;
    public IDictionary AdProperties { get; }
    public string AlternateText { get; public set; }
    internal bool HasHeight { get; }
    internal bool HasWidth { get; }
    internal Unit Height { get; }
    public string ImageUrl { get; public set; }
    public string NavigateUrl { get; public set; }
    internal Unit Width { get; }
    public AdCreatedEventArgs(IDictionary adProperties);
    internal AdCreatedEventArgs(IDictionary adProperties, string imageUrlField, string navigateUrlField, string alternateTextField);
    public IDictionary get_AdProperties();
    public string get_AlternateText();
    public void set_AlternateText(string value);
    internal bool get_HasHeight();
    internal bool get_HasWidth();
    internal Unit get_Height();
    public string get_ImageUrl();
    public void set_ImageUrl(string value);
    public string get_NavigateUrl();
    public void set_NavigateUrl(string value);
    internal Unit get_Width();
}
public class System.Web.UI.WebControls.AdCreatedEventHandler : MulticastDelegate {
    public AdCreatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AdCreatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AdCreatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Web.UI.WebControls.AdPostCacheSubstitution : object {
    internal AdPostCacheSubstitution(AdRotator adRotator);
    internal void RegisterPostCacheCallBack(HttpContext context, Page page, HtmlTextWriter writer);
    internal string Render(HttpContext context);
}
[DefaultEventAttribute("AdCreated")]
[DefaultPropertyAttribute("AdvertisementFile")]
[DesignerAttribute("System.Web.UI.Design.WebControls.AdRotatorDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxDataAttribute("<{0}:AdRotator runat="server"></{0}:AdRotator>")]
public class System.Web.UI.WebControls.AdRotator : DataBoundControl {
    [BindableAttribute("True")]
[WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.XmlUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("AdRotator_AdvertisementFile")]
public string AdvertisementFile { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("AlternateText")]
[WebSysDescriptionAttribute("AdRotator_AlternateTextField")]
public string AlternateTextField { get; public set; }
    internal string BaseUrl { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public FontInfo Font { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("ImageUrl")]
[WebSysDescriptionAttribute("AdRotator_ImageUrlField")]
public string ImageUrlField { get; public set; }
    internal bool IsPostCacheAdHelper { get; internal set; }
    [BindableAttribute("True")]
[WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("AdRotator_KeywordFilter")]
public string KeywordFilter { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("NavigateUrl")]
[WebSysDescriptionAttribute("AdRotator_NavigateUrlField")]
public string NavigateUrlField { get; public set; }
    [BindableAttribute("True")]
[WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("_top")]
[WebSysDescriptionAttribute("AdRotator_Target")]
[TypeConverterAttribute("System.Web.UI.WebControls.TargetConverter")]
public string Target { get; public set; }
    protected HtmlTextWriterTag TagKey { get; }
    public string UniqueID { get; }
    private static AdRotator();
    public string get_AdvertisementFile();
    public void set_AdvertisementFile(string value);
    public string get_AlternateTextField();
    public void set_AlternateTextField(string value);
    internal string get_BaseUrl();
    public virtual FontInfo get_Font();
    public string get_ImageUrlField();
    public void set_ImageUrlField(string value);
    internal bool get_IsPostCacheAdHelper();
    internal void set_IsPostCacheAdHelper(bool value);
    public string get_KeywordFilter();
    public void set_KeywordFilter(string value);
    public string get_NavigateUrlField();
    public void set_NavigateUrlField(string value);
    public string get_Target();
    public void set_Target(string value);
    protected virtual HtmlTextWriterTag get_TagKey();
    public virtual string get_UniqueID();
    public void add_AdCreated(AdCreatedEventHandler value);
    public void remove_AdCreated(AdCreatedEventHandler value);
    internal void CopyFrom(AdRotator adRotator);
    internal bool DoPostCacheSubstitutionAsNeeded(HtmlTextWriter writer);
    protected virtual void OnAdCreated(AdCreatedEventArgs e);
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void PerformDataBinding(IEnumerable data);
    protected virtual void PerformSelect();
    internal AdCreatedEventArgs PickAd();
    protected internal virtual void Render(HtmlTextWriter writer);
}
public class System.Web.UI.WebControls.AssociatedControlConverter : ControlIDConverter {
    protected virtual bool FilterControl(Control control);
}
public class System.Web.UI.WebControls.AuthenticateEventArgs : EventArgs {
    public bool Authenticated { get; public set; }
    public AuthenticateEventArgs(bool authenticated);
    public bool get_Authenticated();
    public void set_Authenticated(bool value);
}
public class System.Web.UI.WebControls.AuthenticateEventHandler : MulticastDelegate {
    public AuthenticateEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AuthenticateEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AuthenticateEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Web.UI.WebControls.AutoCompleteType : Enum {
    public int value__;
    public static AutoCompleteType None;
    public static AutoCompleteType Disabled;
    public static AutoCompleteType Cellular;
    public static AutoCompleteType Company;
    public static AutoCompleteType Department;
    public static AutoCompleteType DisplayName;
    public static AutoCompleteType Email;
    public static AutoCompleteType FirstName;
    public static AutoCompleteType Gender;
    public static AutoCompleteType HomeCity;
    public static AutoCompleteType HomeCountryRegion;
    public static AutoCompleteType HomeFax;
    public static AutoCompleteType HomePhone;
    public static AutoCompleteType HomeState;
    public static AutoCompleteType HomeStreetAddress;
    public static AutoCompleteType HomeZipCode;
    public static AutoCompleteType Homepage;
    public static AutoCompleteType JobTitle;
    public static AutoCompleteType LastName;
    public static AutoCompleteType MiddleName;
    public static AutoCompleteType Notes;
    public static AutoCompleteType Office;
    public static AutoCompleteType Pager;
    public static AutoCompleteType BusinessCity;
    public static AutoCompleteType BusinessCountryRegion;
    public static AutoCompleteType BusinessFax;
    public static AutoCompleteType BusinessPhone;
    public static AutoCompleteType BusinessState;
    public static AutoCompleteType BusinessStreetAddress;
    public static AutoCompleteType BusinessUrl;
    public static AutoCompleteType BusinessZipCode;
    public static AutoCompleteType Search;
    public static AutoCompleteType Enabled;
}
public abstract class System.Web.UI.WebControls.AutoFieldsGenerator : object {
    internal bool InDataBinding { get; internal set; }
    internal object DataItem { get; internal set; }
    protected internal List`1<AutoGeneratedFieldProperties> AutoGeneratedFieldProperties { get; }
    protected bool IsTrackingViewState { get; }
    public Nullable`1<bool> AutoGenerateEnumFields { get; public set; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    [CompilerGeneratedAttribute]
internal bool get_InDataBinding();
    [CompilerGeneratedAttribute]
internal void set_InDataBinding(bool value);
    [CompilerGeneratedAttribute]
internal object get_DataItem();
    [CompilerGeneratedAttribute]
internal void set_DataItem(object value);
    protected internal List`1<AutoGeneratedFieldProperties> get_AutoGeneratedFieldProperties();
    protected virtual AutoGeneratedField CreateAutoGeneratedFieldFromFieldProperties(AutoGeneratedFieldProperties fieldProperties);
    protected bool get_IsTrackingViewState();
    protected virtual void TrackViewState();
    protected virtual void LoadViewState(object savedState);
    protected virtual object SaveViewState();
    public abstract virtual List`1<AutoGeneratedField> CreateAutoGeneratedFields(object dataItem, Control control);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AutoGenerateEnumFields();
    [CompilerGeneratedAttribute]
public void set_AutoGenerateEnumFields(Nullable`1<bool> value);
    public virtual ICollection GenerateFields(Control control);
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object savedState);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
[EditorBrowsableAttribute("1")]
public class System.Web.UI.WebControls.AutoGeneratedField : BoundField {
    public string DataFormatString { get; public set; }
    public Type DataType { get; public set; }
    public bool InsertVisible { get; public set; }
    public bool ConvertEmptyStringToNull { get; public set; }
    public AutoGeneratedField(string dataField);
    public virtual string get_DataFormatString();
    public virtual void set_DataFormatString(string value);
    public Type get_DataType();
    public void set_DataType(Type value);
    public virtual bool get_InsertVisible();
    public virtual void set_InsertVisible(bool value);
    public virtual bool get_ConvertEmptyStringToNull();
    public virtual void set_ConvertEmptyStringToNull(bool value);
    protected virtual void CopyProperties(DataControlField newField);
    protected virtual DataControlField CreateField();
    protected virtual object GetDesignTimeValue();
    public virtual void ExtractValuesFromCell(IOrderedDictionary dictionary, DataControlFieldCell cell, DataControlRowState rowState, bool includeReadOnly);
    protected virtual void InitializeDataCell(DataControlFieldCell cell, DataControlRowState rowState);
    protected virtual void OnDataBindField(object sender, EventArgs e);
    public virtual void ValidateSupportsCallback();
}
public class System.Web.UI.WebControls.AutoGeneratedFieldProperties : object {
    public string DataField { get; public set; }
    public bool IsReadOnly { get; public set; }
    public string Name { get; public set; }
    public Type Type { get; public set; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public string get_DataField();
    public void set_DataField(string value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public string get_Name();
    public void set_Name(string value);
    public Type get_Type();
    public void set_Type(Type value);
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object state);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
public abstract class System.Web.UI.WebControls.BaseCompareValidator : BaseValidator {
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("RangeValidator_Type")]
public ValidationDataType Type { get; public set; }
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("BaseCompareValidator_CultureInvariantValues")]
public bool CultureInvariantValues { get; public set; }
    protected static int CutoffYear { get; }
    public ValidationDataType get_Type();
    public void set_Type(ValidationDataType value);
    public bool get_CultureInvariantValues();
    public void set_CultureInvariantValues(bool value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    public static bool CanConvert(string text, ValidationDataType type);
    public static bool CanConvert(string text, ValidationDataType type, bool cultureInvariant);
    protected static string GetDateElementOrder();
    protected static int get_CutoffYear();
    protected static int GetFullYear(int shortYear);
    protected static bool Convert(string text, ValidationDataType type, Object& value);
    protected static bool Convert(string text, ValidationDataType type, bool cultureInvariant, Object& value);
    protected static bool Compare(string leftText, string rightText, ValidationCompareOperator op, ValidationDataType type);
    protected static bool Compare(string leftText, bool cultureInvariantLeftText, string rightText, bool cultureInvariantRightText, ValidationCompareOperator op, ValidationDataType type);
    protected virtual bool DetermineRenderUplevel();
    internal string ConvertToShortDateString(string text);
    internal bool IsInStandardDateFormat(string date);
    internal string ConvertCultureInvariantToCurrentCultureFormat(string valueInString, ValidationDataType type);
}
[DesignerAttribute("System.Web.UI.Design.WebControls.BaseDataBoundControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultPropertyAttribute("DataSourceID")]
public abstract class System.Web.UI.WebControls.BaseDataBoundControl : WebControl {
    [BindableAttribute("True")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("BaseDataBoundControl_DataSource")]
public object DataSource { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("BaseDataBoundControl_DataSourceID")]
public string DataSourceID { get; public set; }
    protected bool Initialized { get; }
    protected bool IsUsingModelBinders { get; }
    protected bool IsBoundUsingDataSourceID { get; }
    protected internal bool IsDataBindingAutomatic { get; }
    public bool SupportsDisabledAttribute { get; }
    protected bool RequiresDataBinding { get; protected set; }
    private static BaseDataBoundControl();
    public virtual object get_DataSource();
    public virtual void set_DataSource(object value);
    public virtual string get_DataSourceID();
    public virtual void set_DataSourceID(string value);
    protected bool get_Initialized();
    protected virtual bool get_IsUsingModelBinders();
    protected bool get_IsBoundUsingDataSourceID();
    protected internal bool get_IsDataBindingAutomatic();
    public virtual bool get_SupportsDisabledAttribute();
    protected bool get_RequiresDataBinding();
    protected void set_RequiresDataBinding(bool value);
    public void add_DataBound(EventHandler value);
    public void remove_DataBound(EventHandler value);
    protected void ConfirmInitState();
    public virtual void DataBind();
    protected virtual void EnsureDataBound();
    internal void InternalEnsureDataBound();
    protected virtual void OnDataBound(EventArgs e);
    protected virtual void OnDataPropertyChanged();
    protected internal virtual void OnInit(EventArgs e);
    protected virtual void OnPagePreLoad(object sender, EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected abstract virtual void PerformSelect();
    protected abstract virtual void ValidateDataSource(object dataSource);
}
[DefaultEventAttribute("SelectedIndexChanged")]
[DefaultPropertyAttribute("DataSource")]
[DesignerAttribute("System.Web.UI.Design.WebControls.BaseDataListDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public abstract class System.Web.UI.WebControls.BaseDataList : WebControl {
    internal static string ItemCountViewStateKey;
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("DataControls_Caption")]
public string Caption { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("WebControl_CaptionAlign")]
public TableCaptionAlign CaptionAlign { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("-1")]
[WebSysDescriptionAttribute("BaseDataList_CellPadding")]
public int CellPadding { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("0")]
[WebSysDescriptionAttribute("BaseDataList_CellSpacing")]
public int CellSpacing { get; public set; }
    public ControlCollection Controls { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("BaseDataList_DataKeys")]
public DataKeyCollection DataKeys { get; }
    protected ArrayList DataKeysArray { get; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("BaseDataList_DataKeyField")]
public string DataKeyField { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("BaseDataList_DataMember")]
public string DataMember { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("BaseDataBoundControl_DataSource")]
public object DataSource { get; public set; }
    [DefaultValueAttribute("")]
[IDReferencePropertyAttribute("System.Web.UI.DataSourceControl")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("BaseDataBoundControl_DataSourceID")]
public string DataSourceID { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("DataControls_GridLines")]
public GridLines GridLines { get; public set; }
    [CategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("WebControl_HorizontalAlign")]
public HorizontalAlign HorizontalAlign { get; public set; }
    protected bool Initialized { get; }
    protected bool IsBoundUsingDataSourceID { get; }
    public bool SupportsDisabledAttribute { get; }
    protected bool RequiresDataBinding { get; protected set; }
    protected DataSourceSelectArguments SelectArguments { get; }
    [DefaultValueAttribute("False")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("Table_UseAccessibleHeader")]
public bool UseAccessibleHeader { get; public set; }
    private static BaseDataList();
    public virtual string get_Caption();
    public virtual void set_Caption(string value);
    public virtual TableCaptionAlign get_CaptionAlign();
    public virtual void set_CaptionAlign(TableCaptionAlign value);
    public virtual int get_CellPadding();
    public virtual void set_CellPadding(int value);
    public virtual int get_CellSpacing();
    public virtual void set_CellSpacing(int value);
    public virtual ControlCollection get_Controls();
    public DataKeyCollection get_DataKeys();
    protected ArrayList get_DataKeysArray();
    public virtual string get_DataKeyField();
    public virtual void set_DataKeyField(string value);
    public string get_DataMember();
    public void set_DataMember(string value);
    public virtual object get_DataSource();
    public virtual void set_DataSource(object value);
    public virtual string get_DataSourceID();
    public virtual void set_DataSourceID(string value);
    public virtual GridLines get_GridLines();
    public virtual void set_GridLines(GridLines value);
    public virtual HorizontalAlign get_HorizontalAlign();
    public virtual void set_HorizontalAlign(HorizontalAlign value);
    protected bool get_Initialized();
    protected bool get_IsBoundUsingDataSourceID();
    public virtual bool get_SupportsDisabledAttribute();
    protected bool get_RequiresDataBinding();
    protected void set_RequiresDataBinding(bool value);
    protected DataSourceSelectArguments get_SelectArguments();
    public virtual bool get_UseAccessibleHeader();
    public virtual void set_UseAccessibleHeader(bool value);
    public void add_SelectedIndexChanged(EventHandler value);
    public void remove_SelectedIndexChanged(EventHandler value);
    protected virtual void AddParsedSubObject(object obj);
    protected internal virtual void CreateChildControls();
    protected abstract virtual void CreateControlHierarchy(bool useDataSource);
    public virtual void DataBind();
    protected virtual DataSourceSelectArguments CreateDataSourceSelectArguments();
    protected void EnsureDataBound();
    protected virtual IEnumerable GetData();
    public static bool IsBindableType(Type type);
    protected virtual void OnDataBinding(EventArgs e);
    protected virtual void OnDataPropertyChanged();
    protected virtual void OnDataSourceViewChanged(object sender, EventArgs e);
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void OnLoad(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
    protected internal abstract virtual void PrepareControlHierarchy();
    protected internal virtual void Render(HtmlTextWriter writer);
}
[DefaultPropertyAttribute("ErrorMessage")]
[DesignerAttribute("System.Web.UI.Design.WebControls.BaseValidatorDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public abstract class System.Web.UI.WebControls.BaseValidator : Label {
    protected bool IsUnobtrusive { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string AssociatedControlID { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "Red")]
public Color ForeColor { get; public set; }
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("")]
[IDReferencePropertyAttribute]
[WebSysDescriptionAttribute("BaseValidator_ControlToValidate")]
[TypeConverterAttribute("System.Web.UI.WebControls.ValidatedControlConverter")]
public string ControlToValidate { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("BaseValidator_ErrorMessage")]
public string ErrorMessage { get; public set; }
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("BaseValidator_EnableClientScript")]
public bool EnableClientScript { get; public set; }
    public bool Enabled { get; public set; }
    internal bool IsReloadable { get; }
    [BrowsableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("BaseValidator_IsValid")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsValid { get; public set; }
    protected bool PropertiesValid { get; }
    protected bool RenderUplevel { get; }
    [WebCategoryAttribute("Appearance")]
[ThemeableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("BaseValidator_Display")]
public ValidatorDisplay Display { get; public set; }
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("BaseValidator_SetFocusOnError")]
public bool SetFocusOnError { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("BaseValidator_Text")]
[PersistenceModeAttribute("2")]
public string Text { get; public set; }
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("BaseValidator_ValidationGroup")]
public string ValidationGroup { get; public set; }
    protected bool get_IsUnobtrusive();
    public virtual string get_AssociatedControlID();
    public virtual void set_AssociatedControlID(string value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public string get_ControlToValidate();
    public void set_ControlToValidate(string value);
    public sealed virtual string get_ErrorMessage();
    public sealed virtual void set_ErrorMessage(string value);
    public bool get_EnableClientScript();
    public void set_EnableClientScript(bool value);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    internal virtual bool get_IsReloadable();
    public sealed virtual bool get_IsValid();
    public sealed virtual void set_IsValid(bool value);
    protected bool get_PropertiesValid();
    protected bool get_RenderUplevel();
    public ValidatorDisplay get_Display();
    public void set_Display(ValidatorDisplay value);
    public bool get_SetFocusOnError();
    public void set_SetFocusOnError(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual string get_ValidationGroup();
    public virtual void set_ValidationGroup(string value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    internal void AddExpandoAttribute(HtmlTextWriter writer, string controlId, string attributeName, string attributeValue);
    internal void AddExpandoAttribute(HtmlTextWriter writer, string controlId, string attributeName, string attributeValue, bool encode);
    internal static void AddExpandoAttribute(Control control, HtmlTextWriter writer, string controlId, string attributeName, string attributeValue, bool encode);
    protected void CheckControlValidationProperty(string name, string propertyName);
    protected virtual bool ControlPropertiesValid();
    protected virtual bool DetermineRenderUplevel();
    protected abstract virtual bool EvaluateIsValid();
    protected string GetControlRenderID(string name);
    protected string GetControlValidationValue(string name);
    public static PropertyDescriptor GetValidationProperty(object component);
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void OnUnload(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected void RegisterValidatorCommonScript();
    internal void RegisterUnobtrusiveScript();
    protected virtual void RegisterValidatorDeclaration();
    protected internal virtual void Render(HtmlTextWriter writer);
    internal bool ShouldSerializeForeColor();
    public sealed virtual void Validate();
}
public enum System.Web.UI.WebControls.BorderStyle : Enum {
    public int value__;
    public static BorderStyle NotSet;
    public static BorderStyle None;
    public static BorderStyle Dotted;
    public static BorderStyle Dashed;
    public static BorderStyle Solid;
    public static BorderStyle Double;
    public static BorderStyle Groove;
    public static BorderStyle Ridge;
    public static BorderStyle Inset;
    public static BorderStyle Outset;
}
public class System.Web.UI.WebControls.BoundColumn : DataGridColumn {
    public static string thisExpr;
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("BoundColumn_DataField")]
public string DataField { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("BoundColumn_DataFormatString")]
public string DataFormatString { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("BoundColumn_ReadOnly")]
public bool ReadOnly { get; public set; }
    private static BoundColumn();
    public virtual string get_DataField();
    public virtual void set_DataField(string value);
    public virtual string get_DataFormatString();
    public virtual void set_DataFormatString(string value);
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    protected virtual string FormatDataValue(object dataValue);
    public virtual void Initialize();
    public virtual void InitializeCell(TableCell cell, int columnIndex, ListItemType itemType);
}
public class System.Web.UI.WebControls.BoundField : DataControlField {
    public static string ThisExpression;
    [WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Control_ValidateRequestMode")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ValidateRequestMode ValidateRequestMode { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("BoundField_ApplyFormatInEditMode")]
public bool ApplyFormatInEditMode { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("BoundField_ConvertEmptyStringToNull")]
public bool ConvertEmptyStringToNull { get; public set; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebSysDescriptionAttribute("BoundField_DataField")]
public string DataField { get; public set; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("BoundField_DataFormatString")]
public string DataFormatString { get; public set; }
    public string HeaderText { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("BoundField_HtmlEncode")]
public bool HtmlEncode { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
public bool HtmlEncodeFormatString { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("BoundField_NullDisplayText")]
public string NullDisplayText { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("BoundField_ReadOnly")]
public bool ReadOnly { get; public set; }
    protected bool SupportsHtmlEncode { get; }
    private static BoundField();
    public ValidateRequestMode get_ValidateRequestMode();
    public void set_ValidateRequestMode(ValidateRequestMode value);
    public virtual bool get_ApplyFormatInEditMode();
    public virtual void set_ApplyFormatInEditMode(bool value);
    public virtual bool get_ConvertEmptyStringToNull();
    public virtual void set_ConvertEmptyStringToNull(bool value);
    public virtual string get_DataField();
    public virtual void set_DataField(string value);
    public virtual string get_DataFormatString();
    public virtual void set_DataFormatString(string value);
    public virtual string get_HeaderText();
    public virtual void set_HeaderText(string value);
    public virtual bool get_HtmlEncode();
    public virtual void set_HtmlEncode(bool value);
    public virtual bool get_HtmlEncodeFormatString();
    public virtual void set_HtmlEncodeFormatString(bool value);
    public virtual string get_NullDisplayText();
    public virtual void set_NullDisplayText(string value);
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    protected virtual bool get_SupportsHtmlEncode();
    protected virtual void CopyProperties(DataControlField newField);
    protected virtual DataControlField CreateField();
    public virtual void ExtractValuesFromCell(IOrderedDictionary dictionary, DataControlFieldCell cell, DataControlRowState rowState, bool includeReadOnly);
    protected virtual string FormatDataValue(object dataValue, bool encode);
    protected virtual object GetDesignTimeValue();
    protected virtual object GetValue(Control controlContainer);
    public virtual bool Initialize(bool enableSorting, Control control);
    public virtual void InitializeCell(DataControlFieldCell cell, DataControlCellType cellType, DataControlRowState rowState, int rowIndex);
    protected virtual void InitializeDataCell(DataControlFieldCell cell, DataControlRowState rowState);
    protected virtual void OnDataBindField(object sender, EventArgs e);
    protected virtual void LoadViewState(object state);
    public virtual void ValidateSupportsCallback();
}
[DefaultPropertyAttribute("BulletStyle")]
[DefaultEventAttribute("Click")]
[DesignerAttribute("System.Web.UI.Design.WebControls.BulletedListDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SupportsEventValidationAttribute]
public class System.Web.UI.WebControls.BulletedList : ListControl {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AutoPostBack { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("BulletedList_BulletStyle")]
public BulletStyle BulletStyle { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("BulletedList_BulletImageUrl")]
public string BulletImageUrl { get; public set; }
    public ControlCollection Controls { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("BulletedList_BulletedListDisplayMode")]
public BulletedListDisplayMode DisplayMode { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("1")]
[WebSysDescriptionAttribute("BulletedList_FirstBulletNumber")]
public int FirstBulletNumber { get; public set; }
    [DefaultValueAttribute("False")]
[ThemeableAttribute("True")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("ListControl_RenderWhenDataEmpty")]
public bool RenderWhenDataEmpty { get; public set; }
    [BindableAttribute("False")]
[EditorBrowsableAttribute("1")]
public int SelectedIndex { get; public set; }
    [EditorBrowsableAttribute("1")]
public ListItem SelectedItem { get; }
    [BindableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string SelectedValue { get; public set; }
    protected HtmlTextWriterTag TagKey { get; }
    internal HtmlTextWriterTag TagKeyInternal { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("BulletedList_Target")]
[TypeConverterAttribute("System.Web.UI.WebControls.TargetConverter")]
public string Target { get; public set; }
    [EditorBrowsableAttribute("1")]
public string Text { get; public set; }
    private static BulletedList();
    public virtual bool get_AutoPostBack();
    public virtual void set_AutoPostBack(bool value);
    public virtual BulletStyle get_BulletStyle();
    public virtual void set_BulletStyle(BulletStyle value);
    public virtual string get_BulletImageUrl();
    public virtual void set_BulletImageUrl(string value);
    public virtual ControlCollection get_Controls();
    public virtual BulletedListDisplayMode get_DisplayMode();
    public virtual void set_DisplayMode(BulletedListDisplayMode value);
    public virtual int get_FirstBulletNumber();
    public virtual void set_FirstBulletNumber(int value);
    public virtual bool get_RenderWhenDataEmpty();
    public virtual void set_RenderWhenDataEmpty(bool value);
    public virtual int get_SelectedIndex();
    public virtual void set_SelectedIndex(int value);
    public virtual ListItem get_SelectedItem();
    public virtual string get_SelectedValue();
    public virtual void set_SelectedValue(string value);
    protected virtual HtmlTextWriterTag get_TagKey();
    internal HtmlTextWriterTag get_TagKeyInternal();
    public virtual string get_Target();
    public virtual void set_Target(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_Click(BulletedListEventHandler value);
    public void remove_Click(BulletedListEventHandler value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual void OnClick(BulletedListEventArgs e);
    protected virtual void RenderBulletText(ListItem item, int index, HtmlTextWriter writer);
    internal void RenderAccessKey(HtmlTextWriter writer, string AccessKey);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected internal virtual void RenderContents(HtmlTextWriter writer);
    protected virtual void RaisePostBackEvent(string eventArgument);
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
}
public enum System.Web.UI.WebControls.BulletedListDisplayMode : Enum {
    public int value__;
    public static BulletedListDisplayMode Text;
    public static BulletedListDisplayMode HyperLink;
    public static BulletedListDisplayMode LinkButton;
}
public class System.Web.UI.WebControls.BulletedListEventArgs : EventArgs {
    public int Index { get; }
    public BulletedListEventArgs(int index);
    public int get_Index();
}
public class System.Web.UI.WebControls.BulletedListEventHandler : MulticastDelegate {
    public BulletedListEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BulletedListEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BulletedListEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Web.UI.WebControls.BulletStyle : Enum {
    public int value__;
    public static BulletStyle NotSet;
    public static BulletStyle Numbered;
    public static BulletStyle LowerAlpha;
    public static BulletStyle UpperAlpha;
    public static BulletStyle LowerRoman;
    public static BulletStyle UpperRoman;
    public static BulletStyle Disc;
    public static BulletStyle Circle;
    public static BulletStyle Square;
    public static BulletStyle CustomImage;
}
[DataBindingHandlerAttribute("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultEventAttribute("Click")]
[DefaultPropertyAttribute("Text")]
[DesignerAttribute("System.Web.UI.Design.WebControls.ButtonDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxDataAttribute("<{0}:Button runat="server" Text="Button"></{0}:Button>")]
[SupportsEventValidationAttribute]
public class System.Web.UI.WebControls.Button : WebControl {
    [DefaultValueAttribute("True")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Button_CausesValidation")]
public bool CausesValidation { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("WebControl_CommandName")]
public string CommandName { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("WebControl_CommandArgument")]
public string CommandArgument { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Button_OnClientClick")]
public string OnClientClick { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[ThemeableAttribute("False")]
[UrlPropertyAttribute("*.aspx")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Button_PostBackUrl")]
public string PostBackUrl { get; public set; }
    [BindableAttribute("True")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Button_Text")]
public string Text { get; public set; }
    [DefaultValueAttribute("True")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Button_UseSubmitBehavior")]
public bool UseSubmitBehavior { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("PostBackControl_ValidationGroup")]
public string ValidationGroup { get; public set; }
    private static Button();
    public virtual bool get_CausesValidation();
    public virtual void set_CausesValidation(bool value);
    public sealed virtual string get_CommandName();
    public sealed virtual void set_CommandName(string value);
    public sealed virtual string get_CommandArgument();
    public sealed virtual void set_CommandArgument(string value);
    public virtual string get_OnClientClick();
    public virtual void set_OnClientClick(string value);
    public virtual string get_PostBackUrl();
    public virtual void set_PostBackUrl(string value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public virtual bool get_UseSubmitBehavior();
    public virtual void set_UseSubmitBehavior(bool value);
    public virtual string get_ValidationGroup();
    public virtual void set_ValidationGroup(string value);
    public sealed virtual void add_Click(EventHandler value);
    public sealed virtual void remove_Click(EventHandler value);
    public sealed virtual void add_Command(CommandEventHandler value);
    public sealed virtual void remove_Command(CommandEventHandler value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual PostBackOptions GetPostBackOptions();
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnCommand(CommandEventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void RenderContents(HtmlTextWriter writer);
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    protected virtual void RaisePostBackEvent(string eventArgument);
}
public class System.Web.UI.WebControls.ButtonColumn : DataGridColumn {
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("ButtonColumn_ButtonType")]
public ButtonColumnType ButtonType { get; public set; }
    [DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("ButtonColumn_CausesValidation")]
public bool CausesValidation { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("WebControl_CommandName")]
public string CommandName { get; public set; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ButtonColumn_DataTextField")]
public string DataTextField { get; public set; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ButtonColumn_DataTextFormatString")]
public string DataTextFormatString { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ButtonColumn_Text")]
public string Text { get; public set; }
    [DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ButtonColumn_ValidationGroup")]
public string ValidationGroup { get; public set; }
    public virtual ButtonColumnType get_ButtonType();
    public virtual void set_ButtonType(ButtonColumnType value);
    public virtual bool get_CausesValidation();
    public virtual void set_CausesValidation(bool value);
    public virtual string get_CommandName();
    public virtual void set_CommandName(string value);
    public virtual string get_DataTextField();
    public virtual void set_DataTextField(string value);
    public virtual string get_DataTextFormatString();
    public virtual void set_DataTextFormatString(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual string get_ValidationGroup();
    public virtual void set_ValidationGroup(string value);
    protected virtual string FormatDataTextValue(object dataTextValue);
    public virtual void Initialize();
    public virtual void InitializeCell(TableCell cell, int columnIndex, ListItemType itemType);
}
public enum System.Web.UI.WebControls.ButtonColumnType : Enum {
    public int value__;
    public static ButtonColumnType LinkButton;
    public static ButtonColumnType PushButton;
}
public class System.Web.UI.WebControls.ButtonField : ButtonFieldBase {
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("WebControl_CommandName")]
public string CommandName { get; public set; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ButtonField_DataTextField")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string DataTextField { get; public set; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ButtonField_DataTextFormatString")]
public string DataTextFormatString { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[WebSysDescriptionAttribute("ButtonField_ImageUrl")]
[UrlPropertyAttribute]
public string ImageUrl { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ButtonField_Text")]
public string Text { get; public set; }
    public virtual string get_CommandName();
    public virtual void set_CommandName(string value);
    public virtual string get_DataTextField();
    public virtual void set_DataTextField(string value);
    public virtual string get_DataTextFormatString();
    public virtual void set_DataTextFormatString(string value);
    public virtual string get_ImageUrl();
    public virtual void set_ImageUrl(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    protected virtual void CopyProperties(DataControlField newField);
    protected virtual DataControlField CreateField();
    protected virtual string FormatDataTextValue(object dataTextValue);
    public virtual bool Initialize(bool sortingEnabled, Control control);
    public virtual void InitializeCell(DataControlFieldCell cell, DataControlCellType cellType, DataControlRowState rowState, int rowIndex);
    public virtual void ValidateSupportsCallback();
}
public abstract class System.Web.UI.WebControls.ButtonFieldBase : DataControlField {
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("ButtonFieldBase_ButtonType")]
public ButtonType ButtonType { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("ButtonFieldBase_CausesValidation")]
public bool CausesValidation { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("DataControlField_ShowHeader")]
public bool ShowHeader { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ButtonFieldBase_ValidationGroup")]
public string ValidationGroup { get; public set; }
    public virtual ButtonType get_ButtonType();
    public virtual void set_ButtonType(ButtonType value);
    public virtual bool get_CausesValidation();
    public virtual void set_CausesValidation(bool value);
    public virtual bool get_ShowHeader();
    public virtual void set_ShowHeader(bool value);
    public virtual string get_ValidationGroup();
    public virtual void set_ValidationGroup(string value);
    protected virtual void CopyProperties(DataControlField newField);
}
public enum System.Web.UI.WebControls.ButtonType : Enum {
    public int value__;
    public static ButtonType Button;
    public static ButtonType Image;
    public static ButtonType Link;
}
[ControlValuePropertyAttribute("SelectedDate", "System.DateTime", "1/1/0001")]
[DataBindingHandlerAttribute("System.Web.UI.Design.WebControls.CalendarDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultEventAttribute("SelectionChanged")]
[DefaultPropertyAttribute("SelectedDate")]
[DesignerAttribute("System.Web.UI.Design.WebControls.CalendarDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SupportsEventValidationAttribute]
public class System.Web.UI.WebControls.Calendar : WebControl {
    [LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("Calendar_Caption")]
public string Caption { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("WebControl_CaptionAlign")]
public TableCaptionAlign CaptionAlign { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("2")]
[WebSysDescriptionAttribute("Calendar_CellPadding")]
public int CellPadding { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("0")]
[WebSysDescriptionAttribute("Calendar_CellSpacing")]
public int CellSpacing { get; public set; }
    [WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("Calendar_DayHeaderStyle")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
public TableItemStyle DayHeaderStyle { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Calendar_DayNameFormat")]
public DayNameFormat DayNameFormat { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Calendar_DayStyle")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
public TableItemStyle DayStyle { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Calendar_FirstDayOfWeek")]
public FirstDayOfWeek FirstDayOfWeek { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("&gt;")]
[WebSysDescriptionAttribute("Calendar_NextMonthText")]
public string NextMonthText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Calendar_NextPrevFormat")]
public NextPrevFormat NextPrevFormat { get; public set; }
    [WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("Calendar_NextPrevStyle")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
public TableItemStyle NextPrevStyle { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Calendar_OtherMonthDayStyle")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
public TableItemStyle OtherMonthDayStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("&lt;")]
[WebSysDescriptionAttribute("Calendar_PrevMonthText")]
public string PrevMonthText { get; public set; }
    public bool SupportsDisabledAttribute { get; }
    [BindableAttribute("True", "1")]
[DefaultValueAttribute("System.DateTime", "1/1/0001")]
[WebSysDescriptionAttribute("Calendar_SelectedDate")]
public DateTime SelectedDate { get; public set; }
    [BrowsableAttribute("False")]
[WebSysDescriptionAttribute("Calendar_SelectedDates")]
[DesignerSerializationVisibilityAttribute("0")]
public SelectedDatesCollection SelectedDates { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Calendar_SelectedDayStyle")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
public TableItemStyle SelectedDayStyle { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Calendar_SelectionMode")]
public CalendarSelectionMode SelectionMode { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("&gt;&gt;")]
[WebSysDescriptionAttribute("Calendar_SelectMonthText")]
public string SelectMonthText { get; public set; }
    [WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("Calendar_SelectorStyle")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
public TableItemStyle SelectorStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("&gt;")]
[WebSysDescriptionAttribute("Calendar_SelectWeekText")]
public string SelectWeekText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("Calendar_ShowDayHeader")]
public bool ShowDayHeader { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("Calendar_ShowGridLines")]
public bool ShowGridLines { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("Calendar_ShowNextPrevMonth")]
public bool ShowNextPrevMonth { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("Calendar_ShowTitle")]
public bool ShowTitle { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Calendar_TitleFormat")]
public TitleFormat TitleFormat { get; public set; }
    [WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("Calendar_TitleStyle")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
public TableItemStyle TitleStyle { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Calendar_TodayDayStyle")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
public TableItemStyle TodayDayStyle { get; }
    [BrowsableAttribute("False")]
[WebSysDescriptionAttribute("Calendar_TodaysDate")]
[DesignerSerializationVisibilityAttribute("0")]
public DateTime TodaysDate { get; public set; }
    [DefaultValueAttribute("True")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("Table_UseAccessibleHeader")]
public bool UseAccessibleHeader { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("System.DateTime", "1/1/0001")]
[WebSysDescriptionAttribute("Calendar_VisibleDate")]
public DateTime VisibleDate { get; public set; }
    [WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("Calendar_WeekendDayStyle")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
public TableItemStyle WeekendDayStyle { get; }
    private static Calendar();
    public virtual string get_Caption();
    public virtual void set_Caption(string value);
    public virtual TableCaptionAlign get_CaptionAlign();
    public virtual void set_CaptionAlign(TableCaptionAlign value);
    public int get_CellPadding();
    public void set_CellPadding(int value);
    public int get_CellSpacing();
    public void set_CellSpacing(int value);
    public TableItemStyle get_DayHeaderStyle();
    public DayNameFormat get_DayNameFormat();
    public void set_DayNameFormat(DayNameFormat value);
    public TableItemStyle get_DayStyle();
    public FirstDayOfWeek get_FirstDayOfWeek();
    public void set_FirstDayOfWeek(FirstDayOfWeek value);
    public string get_NextMonthText();
    public void set_NextMonthText(string value);
    public NextPrevFormat get_NextPrevFormat();
    public void set_NextPrevFormat(NextPrevFormat value);
    public TableItemStyle get_NextPrevStyle();
    public TableItemStyle get_OtherMonthDayStyle();
    public string get_PrevMonthText();
    public void set_PrevMonthText(string value);
    public virtual bool get_SupportsDisabledAttribute();
    public DateTime get_SelectedDate();
    public void set_SelectedDate(DateTime value);
    public SelectedDatesCollection get_SelectedDates();
    public TableItemStyle get_SelectedDayStyle();
    public CalendarSelectionMode get_SelectionMode();
    public void set_SelectionMode(CalendarSelectionMode value);
    public string get_SelectMonthText();
    public void set_SelectMonthText(string value);
    public TableItemStyle get_SelectorStyle();
    public string get_SelectWeekText();
    public void set_SelectWeekText(string value);
    public bool get_ShowDayHeader();
    public void set_ShowDayHeader(bool value);
    public bool get_ShowGridLines();
    public void set_ShowGridLines(bool value);
    public bool get_ShowNextPrevMonth();
    public void set_ShowNextPrevMonth(bool value);
    public bool get_ShowTitle();
    public void set_ShowTitle(bool value);
    public TitleFormat get_TitleFormat();
    public void set_TitleFormat(TitleFormat value);
    public TableItemStyle get_TitleStyle();
    public TableItemStyle get_TodayDayStyle();
    public DateTime get_TodaysDate();
    public void set_TodaysDate(DateTime value);
    public virtual bool get_UseAccessibleHeader();
    public virtual void set_UseAccessibleHeader(bool value);
    public DateTime get_VisibleDate();
    public void set_VisibleDate(DateTime value);
    public TableItemStyle get_WeekendDayStyle();
    public void add_DayRender(DayRenderEventHandler value);
    public void remove_DayRender(DayRenderEventHandler value);
    public void add_SelectionChanged(EventHandler value);
    public void remove_SelectionChanged(EventHandler value);
    public void add_VisibleMonthChanged(MonthChangedEventHandler value);
    public void remove_VisibleMonthChanged(MonthChangedEventHandler value);
    protected virtual ControlCollection CreateControlCollection();
    protected bool HasWeekSelectors(CalendarSelectionMode selectionMode);
    protected virtual void LoadViewState(object savedState);
    protected virtual void TrackViewState();
    protected virtual void OnDayRender(TableCell cell, CalendarDay day);
    protected virtual void OnSelectionChanged();
    protected virtual void OnVisibleMonthChanged(DateTime newDate, DateTime previousDate);
    protected virtual void RaisePostBackEvent(string eventArgument);
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected virtual object SaveViewState();
}
public class System.Web.UI.WebControls.CalendarDay : object {
    public DateTime Date { get; }
    public string DayNumberText { get; }
    public bool IsOtherMonth { get; }
    public bool IsSelectable { get; public set; }
    public bool IsSelected { get; }
    public bool IsToday { get; }
    public bool IsWeekend { get; }
    public CalendarDay(DateTime date, bool isWeekend, bool isToday, bool isSelected, bool isOtherMonth, string dayNumberText);
    public DateTime get_Date();
    public string get_DayNumberText();
    public bool get_IsOtherMonth();
    public bool get_IsSelectable();
    public void set_IsSelectable(bool value);
    public bool get_IsSelected();
    public bool get_IsToday();
    public bool get_IsWeekend();
}
public enum System.Web.UI.WebControls.CalendarSelectionMode : Enum {
    public int value__;
    public static CalendarSelectionMode None;
    public static CalendarSelectionMode Day;
    public static CalendarSelectionMode DayWeek;
    public static CalendarSelectionMode DayWeekMonth;
}
public class System.Web.UI.WebControls.CallingDataMethodsEventArgs : EventArgs {
    public Type DataMethodsType { get; public set; }
    public object DataMethodsObject { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_DataMethodsType();
    [CompilerGeneratedAttribute]
public void set_DataMethodsType(Type value);
    [CompilerGeneratedAttribute]
public object get_DataMethodsObject();
    [CompilerGeneratedAttribute]
public void set_DataMethodsObject(object value);
}
public class System.Web.UI.WebControls.CallingDataMethodsEventHandler : MulticastDelegate {
    public CallingDataMethodsEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CallingDataMethodsEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CallingDataMethodsEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[BindableAttribute("False")]
[DefaultEventAttribute("ChangedPassword")]
[DesignerAttribute("System.Web.UI.Design.WebControls.ChangePasswordDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.UI.WebControls.ChangePassword : CompositeControl {
    public static string ChangePasswordButtonCommandName;
    public static string CancelButtonCommandName;
    public static string ContinueButtonCommandName;
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("1")]
[WebSysDescriptionAttribute("Login_BorderPadding")]
public int BorderPadding { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_CancelButtonImageUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string CancelButtonImageUrl { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("ChangePassword_CancelButtonStyle")]
public Style CancelButtonStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("ChangePassword_DefaultCancelButtonText")]
[WebSysDescriptionAttribute("ChangePassword_CancelButtonText")]
public string CancelButtonText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("ChangePassword_CancelButtonType")]
public ButtonType CancelButtonType { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_CancelDestinationPageUrl")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[ThemeableAttribute("False")]
[UrlPropertyAttribute]
public string CancelDestinationPageUrl { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_ChangePasswordButtonImageUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string ChangePasswordButtonImageUrl { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("ChangePassword_ChangePasswordButtonStyle")]
public Style ChangePasswordButtonStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("ChangePassword_DefaultChangePasswordButtonText")]
[WebSysDescriptionAttribute("ChangePassword_ChangePasswordButtonText")]
public string ChangePasswordButtonText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("ChangePassword_ChangePasswordButtonType")]
public ButtonType ChangePasswordButtonType { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("ChangePassword_DefaultChangePasswordFailureText")]
[WebSysDescriptionAttribute("ChangePassword_ChangePasswordFailureText")]
public string ChangePasswordFailureText { get; public set; }
    [BrowsableAttribute("False")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.ChangePassword")]
public ITemplate ChangePasswordTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Control ChangePasswordTemplateContainer { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("ChangePassword_DefaultChangePasswordTitleText")]
[WebSysDescriptionAttribute("LoginControls_TitleText")]
public string ChangePasswordTitleText { get; public set; }
    [BrowsableAttribute("False")]
[ThemeableAttribute("False")]
[FilterableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ConfirmNewPassword { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("ChangePassword_DefaultConfirmNewPasswordLabelText")]
[WebSysDescriptionAttribute("ChangePassword_ConfirmNewPasswordLabelText")]
public string ConfirmNewPasswordLabelText { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("ChangePassword_DefaultConfirmPasswordCompareErrorMessage")]
[WebSysDescriptionAttribute("ChangePassword_ConfirmPasswordCompareErrorMessage")]
public string ConfirmPasswordCompareErrorMessage { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("ChangePassword_DefaultConfirmPasswordRequiredErrorMessage")]
[WebSysDescriptionAttribute("LoginControls_ConfirmPasswordRequiredErrorMessage")]
public string ConfirmPasswordRequiredErrorMessage { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_ContinueButtonImageUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string ContinueButtonImageUrl { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("ChangePassword_ContinueButtonStyle")]
public Style ContinueButtonStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("ChangePassword_DefaultContinueButtonText")]
[WebSysDescriptionAttribute("ChangePassword_ContinueButtonText")]
public string ContinueButtonText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("ChangePassword_ContinueButtonType")]
public ButtonType ContinueButtonType { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("LoginControls_ContinueDestinationPageUrl")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[ThemeableAttribute("False")]
[UrlPropertyAttribute]
public string ContinueDestinationPageUrl { get; public set; }
    [WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_CreateUserIconUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string CreateUserIconUrl { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_CreateUserText")]
public string CreateUserText { get; public set; }
    [WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_CreateUserUrl")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string CreateUserUrl { get; public set; }
    [BrowsableAttribute("False")]
[ThemeableAttribute("False")]
[FilterableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string CurrentPassword { get; }
    internal View CurrentView { get; internal set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("ChangePassword_DisplayUserName")]
public bool DisplayUserName { get; public set; }
    [WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("LoginControls_EditProfileIconUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string EditProfileIconUrl { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_EditProfileText")]
public string EditProfileText { get; public set; }
    [WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_EditProfileUrl")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string EditProfileUrl { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("WebControl_FailureTextStyle")]
public TableItemStyle FailureTextStyle { get; }
    [WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("LoginControls_HelpPageIconUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string HelpPageIconUrl { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_HelpPageText")]
public string HelpPageText { get; public set; }
    [WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("LoginControls_HelpPageUrl")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string HelpPageUrl { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("WebControl_HyperLinkStyle")]
public TableItemStyle HyperLinkStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("WebControl_InstructionText")]
public string InstructionText { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("WebControl_InstructionTextStyle")]
public TableItemStyle InstructionTextStyle { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("LoginControls_LabelStyle")]
public TableItemStyle LabelStyle { get; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("MembershipProvider_Name")]
public string MembershipProvider { get; public set; }
    [BrowsableAttribute("False")]
[ThemeableAttribute("False")]
[FilterableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string NewPassword { get; }
    [WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("Password_InvalidPasswordErrorMessage")]
[WebSysDescriptionAttribute("ChangePassword_NewPasswordRegularExpressionErrorMessage")]
public string NewPasswordRegularExpressionErrorMessage { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("ChangePassword_DefaultNewPasswordLabelText")]
[WebSysDescriptionAttribute("ChangePassword_NewPasswordLabelText")]
public string NewPasswordLabelText { get; public set; }
    [WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_NewPasswordRegularExpression")]
public string NewPasswordRegularExpression { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("ChangePassword_DefaultNewPasswordRequiredErrorMessage")]
[WebSysDescriptionAttribute("ChangePassword_NewPasswordRequiredErrorMessage")]
public string NewPasswordRequiredErrorMessage { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("ChangePassword_PasswordHintStyle")]
public TableItemStyle PasswordHintStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_PasswordHintText")]
public string PasswordHintText { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("LoginControls_DefaultPasswordLabelText")]
[WebSysDescriptionAttribute("LoginControls_PasswordLabelText")]
public string PasswordLabelText { get; public set; }
    [WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_PasswordRecoveryIconUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string PasswordRecoveryIconUrl { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_PasswordRecoveryText")]
public string PasswordRecoveryText { get; public set; }
    [WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_PasswordRecoveryUrl")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string PasswordRecoveryUrl { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("ChangePassword_DefaultPasswordRequiredErrorMessage")]
[WebSysDescriptionAttribute("ChangePassword_PasswordRequiredErrorMessage")]
public string PasswordRequiredErrorMessage { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("ChangePassword_MailDefinition")]
public MailDefinition MailDefinition { get; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("LoginControls_RenderOuterTable")]
public bool RenderOuterTable { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("LoginControls_SuccessPageUrl")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[ThemeableAttribute("False")]
[UrlPropertyAttribute]
public string SuccessPageUrl { get; public set; }
    [BrowsableAttribute("False")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.ChangePassword")]
public ITemplate SuccessTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Control SuccessTemplateContainer { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("ChangePassword_DefaultSuccessText")]
[WebSysDescriptionAttribute("ChangePassword_SuccessText")]
public string SuccessText { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("ChangePassword_SuccessTextStyle")]
public TableItemStyle SuccessTextStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("ChangePassword_DefaultSuccessTitleText")]
[WebSysDescriptionAttribute("ChangePassword_SuccessTitleText")]
public string SuccessTitleText { get; public set; }
    protected HtmlTextWriterTag TagKey { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("LoginControls_TextBoxStyle")]
public Style TextBoxStyle { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("LoginControls_TitleTextStyle")]
public TableItemStyle TitleTextStyle { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("UserName_InitialValue")]
public string UserName { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("ChangePassword_DefaultUserNameLabelText")]
[WebSysDescriptionAttribute("LoginControls_UserNameLabelText")]
public string UserNameLabelText { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("ChangePassword_DefaultUserNameRequiredErrorMessage")]
[WebSysDescriptionAttribute("ChangePassword_UserNameRequiredErrorMessage")]
public string UserNameRequiredErrorMessage { get; public set; }
    internal Control ValidatorRow { get; internal set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("ChangePassword_ValidatorTextStyle")]
public Style ValidatorTextStyle { get; }
    private static ChangePassword();
    public virtual int get_BorderPadding();
    public virtual void set_BorderPadding(int value);
    public virtual string get_CancelButtonImageUrl();
    public virtual void set_CancelButtonImageUrl(string value);
    public Style get_CancelButtonStyle();
    public virtual string get_CancelButtonText();
    public virtual void set_CancelButtonText(string value);
    public virtual ButtonType get_CancelButtonType();
    public virtual void set_CancelButtonType(ButtonType value);
    public virtual string get_CancelDestinationPageUrl();
    public virtual void set_CancelDestinationPageUrl(string value);
    public virtual string get_ChangePasswordButtonImageUrl();
    public virtual void set_ChangePasswordButtonImageUrl(string value);
    public Style get_ChangePasswordButtonStyle();
    public virtual string get_ChangePasswordButtonText();
    public virtual void set_ChangePasswordButtonText(string value);
    public virtual ButtonType get_ChangePasswordButtonType();
    public virtual void set_ChangePasswordButtonType(ButtonType value);
    public virtual string get_ChangePasswordFailureText();
    public virtual void set_ChangePasswordFailureText(string value);
    public virtual ITemplate get_ChangePasswordTemplate();
    public virtual void set_ChangePasswordTemplate(ITemplate value);
    public Control get_ChangePasswordTemplateContainer();
    public virtual string get_ChangePasswordTitleText();
    public virtual void set_ChangePasswordTitleText(string value);
    public virtual string get_ConfirmNewPassword();
    public virtual string get_ConfirmNewPasswordLabelText();
    public virtual void set_ConfirmNewPasswordLabelText(string value);
    public virtual string get_ConfirmPasswordCompareErrorMessage();
    public virtual void set_ConfirmPasswordCompareErrorMessage(string value);
    public virtual string get_ConfirmPasswordRequiredErrorMessage();
    public virtual void set_ConfirmPasswordRequiredErrorMessage(string value);
    public virtual string get_ContinueButtonImageUrl();
    public virtual void set_ContinueButtonImageUrl(string value);
    public Style get_ContinueButtonStyle();
    public virtual string get_ContinueButtonText();
    public virtual void set_ContinueButtonText(string value);
    public virtual ButtonType get_ContinueButtonType();
    public virtual void set_ContinueButtonType(ButtonType value);
    public virtual string get_ContinueDestinationPageUrl();
    public virtual void set_ContinueDestinationPageUrl(string value);
    public virtual string get_CreateUserIconUrl();
    public virtual void set_CreateUserIconUrl(string value);
    public virtual string get_CreateUserText();
    public virtual void set_CreateUserText(string value);
    public virtual string get_CreateUserUrl();
    public virtual void set_CreateUserUrl(string value);
    public virtual string get_CurrentPassword();
    internal View get_CurrentView();
    internal void set_CurrentView(View value);
    public virtual bool get_DisplayUserName();
    public virtual void set_DisplayUserName(bool value);
    public virtual string get_EditProfileIconUrl();
    public virtual void set_EditProfileIconUrl(string value);
    public virtual string get_EditProfileText();
    public virtual void set_EditProfileText(string value);
    public virtual string get_EditProfileUrl();
    public virtual void set_EditProfileUrl(string value);
    public TableItemStyle get_FailureTextStyle();
    public virtual string get_HelpPageIconUrl();
    public virtual void set_HelpPageIconUrl(string value);
    public virtual string get_HelpPageText();
    public virtual void set_HelpPageText(string value);
    public virtual string get_HelpPageUrl();
    public virtual void set_HelpPageUrl(string value);
    public TableItemStyle get_HyperLinkStyle();
    public virtual string get_InstructionText();
    public virtual void set_InstructionText(string value);
    public TableItemStyle get_InstructionTextStyle();
    public TableItemStyle get_LabelStyle();
    public virtual string get_MembershipProvider();
    public virtual void set_MembershipProvider(string value);
    public virtual string get_NewPassword();
    public virtual string get_NewPasswordRegularExpressionErrorMessage();
    public virtual void set_NewPasswordRegularExpressionErrorMessage(string value);
    public virtual string get_NewPasswordLabelText();
    public virtual void set_NewPasswordLabelText(string value);
    public virtual string get_NewPasswordRegularExpression();
    public virtual void set_NewPasswordRegularExpression(string value);
    public virtual string get_NewPasswordRequiredErrorMessage();
    public virtual void set_NewPasswordRequiredErrorMessage(string value);
    public TableItemStyle get_PasswordHintStyle();
    public virtual string get_PasswordHintText();
    public virtual void set_PasswordHintText(string value);
    public virtual string get_PasswordLabelText();
    public virtual void set_PasswordLabelText(string value);
    public virtual string get_PasswordRecoveryIconUrl();
    public virtual void set_PasswordRecoveryIconUrl(string value);
    public virtual string get_PasswordRecoveryText();
    public virtual void set_PasswordRecoveryText(string value);
    public virtual string get_PasswordRecoveryUrl();
    public virtual void set_PasswordRecoveryUrl(string value);
    public virtual string get_PasswordRequiredErrorMessage();
    public virtual void set_PasswordRequiredErrorMessage(string value);
    public MailDefinition get_MailDefinition();
    public virtual bool get_RenderOuterTable();
    public virtual void set_RenderOuterTable(bool value);
    public virtual string get_SuccessPageUrl();
    public virtual void set_SuccessPageUrl(string value);
    public virtual ITemplate get_SuccessTemplate();
    public virtual void set_SuccessTemplate(ITemplate value);
    public Control get_SuccessTemplateContainer();
    public virtual string get_SuccessText();
    public virtual void set_SuccessText(string value);
    public TableItemStyle get_SuccessTextStyle();
    public virtual string get_SuccessTitleText();
    public virtual void set_SuccessTitleText(string value);
    protected virtual HtmlTextWriterTag get_TagKey();
    public Style get_TextBoxStyle();
    public TableItemStyle get_TitleTextStyle();
    public virtual string get_UserName();
    public virtual void set_UserName(string value);
    public virtual string get_UserNameLabelText();
    public virtual void set_UserNameLabelText(string value);
    public virtual string get_UserNameRequiredErrorMessage();
    public virtual void set_UserNameRequiredErrorMessage(string value);
    internal Control get_ValidatorRow();
    internal void set_ValidatorRow(Control value);
    public Style get_ValidatorTextStyle();
    public void add_CancelButtonClick(EventHandler value);
    public void remove_CancelButtonClick(EventHandler value);
    public void add_ChangedPassword(EventHandler value);
    public void remove_ChangedPassword(EventHandler value);
    public void add_ChangePasswordError(EventHandler value);
    public void remove_ChangePasswordError(EventHandler value);
    public void add_ChangingPassword(LoginCancelEventHandler value);
    public void remove_ChangingPassword(LoginCancelEventHandler value);
    public void add_ContinueButtonClick(EventHandler value);
    public void remove_ContinueButtonClick(EventHandler value);
    public void add_SendingMail(MailMessageEventHandler value);
    public void remove_SendingMail(MailMessageEventHandler value);
    public void add_SendMailError(SendMailErrorEventHandler value);
    public void remove_SendMailError(SendMailErrorEventHandler value);
    protected internal virtual void CreateChildControls();
    protected internal virtual void LoadControlState(object savedState);
    protected virtual void LoadViewState(object savedState);
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
    protected virtual void OnCancelButtonClick(EventArgs e);
    protected virtual void OnChangedPassword(EventArgs e);
    protected virtual void OnChangePasswordError(EventArgs e);
    protected virtual void OnChangingPassword(LoginCancelEventArgs e);
    protected virtual void OnContinueButtonClick(EventArgs e);
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void OnSendingMail(MailMessageEventArgs e);
    protected virtual void OnSendMailError(SendMailErrorEventArgs e);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected internal virtual object SaveControlState();
    protected virtual object SaveViewState();
    internal void SetChildProperties();
    protected virtual void SetDesignModeState(IDictionary data);
    internal void SetDefaultSuccessViewProperties();
    protected virtual void TrackViewState();
}
[ControlValuePropertyAttribute("Checked")]
[DataBindingHandlerAttribute("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultEventAttribute("CheckedChanged")]
[DesignerAttribute("System.Web.UI.Design.WebControls.CheckBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultPropertyAttribute("Text")]
[SupportsEventValidationAttribute]
public class System.Web.UI.WebControls.CheckBox : WebControl {
    internal AttributeCollection _inputAttributes;
    [DefaultValueAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("CheckBox_AutoPostBack")]
[ThemeableAttribute("False")]
public bool AutoPostBack { get; public set; }
    [DefaultValueAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("AutoPostBackControl_CausesValidation")]
[ThemeableAttribute("False")]
public bool CausesValidation { get; public set; }
    [BindableAttribute("True", "1")]
[DefaultValueAttribute("False")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("CheckBox_Checked")]
public bool Checked { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("CheckBox_InputAttributes")]
public AttributeCollection InputAttributes { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("CheckBox_LabelAttributes")]
public AttributeCollection LabelAttributes { get; }
    internal bool RequiresLegacyRendering { get; }
    [BindableAttribute("True")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("CheckBox_Text")]
public string Text { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("WebControl_TextAlign")]
public TextAlign TextAlign { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("PostBackControl_ValidationGroup")]
public string ValidationGroup { get; public set; }
    private static CheckBox();
    public virtual bool get_AutoPostBack();
    public virtual void set_AutoPostBack(bool value);
    public virtual bool get_CausesValidation();
    public virtual void set_CausesValidation(bool value);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public AttributeCollection get_InputAttributes();
    public AttributeCollection get_LabelAttributes();
    internal virtual bool get_RequiresLegacyRendering();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual TextAlign get_TextAlign();
    public virtual void set_TextAlign(TextAlign value);
    public virtual string get_ValidationGroup();
    public virtual void set_ValidationGroup(string value);
    public sealed virtual void add_CheckedChanged(EventHandler value);
    public sealed virtual void remove_CheckedChanged(EventHandler value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual void LoadViewState(object savedState);
    protected virtual void OnCheckedChanged(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
    protected internal virtual void Render(HtmlTextWriter writer);
    internal virtual void RenderInputTag(HtmlTextWriter writer, string clientID, string onClick);
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    protected virtual void RaisePostDataChangedEvent();
}
public class System.Web.UI.WebControls.CheckBoxField : BoundField {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public bool ApplyFormatInEditMode { get; public set; }
    [TypeConverterAttribute("System.Web.UI.Design.DataSourceBooleanViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string DataField { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public string DataFormatString { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public bool HtmlEncode { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public bool HtmlEncodeFormatString { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public string NullDisplayText { get; public set; }
    protected bool SupportsHtmlEncode { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("CheckBoxField_Text")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public bool ConvertEmptyStringToNull { get; public set; }
    public virtual bool get_ApplyFormatInEditMode();
    public virtual void set_ApplyFormatInEditMode(bool value);
    public virtual string get_DataField();
    public virtual void set_DataField(string value);
    public virtual string get_DataFormatString();
    public virtual void set_DataFormatString(string value);
    public virtual bool get_HtmlEncode();
    public virtual void set_HtmlEncode(bool value);
    public virtual bool get_HtmlEncodeFormatString();
    public virtual void set_HtmlEncodeFormatString(bool value);
    public virtual string get_NullDisplayText();
    public virtual void set_NullDisplayText(string value);
    protected virtual bool get_SupportsHtmlEncode();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual bool get_ConvertEmptyStringToNull();
    public virtual void set_ConvertEmptyStringToNull(bool value);
    protected virtual void CopyProperties(DataControlField newField);
    protected virtual DataControlField CreateField();
    public virtual void ExtractValuesFromCell(IOrderedDictionary dictionary, DataControlFieldCell cell, DataControlRowState rowState, bool includeReadOnly);
    protected virtual object GetDesignTimeValue();
    protected virtual void InitializeDataCell(DataControlFieldCell cell, DataControlRowState rowState);
    protected virtual void OnDataBindField(object sender, EventArgs e);
    public virtual void ValidateSupportsCallback();
}
public class System.Web.UI.WebControls.CheckBoxList : ListControl {
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("-1")]
[WebSysDescriptionAttribute("CheckBoxList_CellPadding")]
public int CellPadding { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("-1")]
[WebSysDescriptionAttribute("CheckBoxList_CellSpacing")]
public int CellSpacing { get; public set; }
    internal bool IsMultiSelectInternal { get; }
    [DefaultValueAttribute("False")]
[ThemeableAttribute("True")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("ListControl_RenderWhenDataEmpty")]
public bool RenderWhenDataEmpty { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("0")]
[WebSysDescriptionAttribute("CheckBoxList_RepeatColumns")]
public int RepeatColumns { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Item_RepeatDirection")]
public RepeatDirection RepeatDirection { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("WebControl_RepeatLayout")]
public RepeatLayout RepeatLayout { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("WebControl_TextAlign")]
public TextAlign TextAlign { get; public set; }
    private bool System.Web.UI.WebControls.IRepeatInfoUser.HasFooter { get; }
    protected bool HasFooter { get; }
    private bool System.Web.UI.WebControls.IRepeatInfoUser.HasHeader { get; }
    protected bool HasHeader { get; }
    private bool System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators { get; }
    protected bool HasSeparators { get; }
    private int System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount { get; }
    protected int RepeatedItemCount { get; }
    public virtual int get_CellPadding();
    public virtual void set_CellPadding(int value);
    public virtual int get_CellSpacing();
    public virtual void set_CellSpacing(int value);
    internal virtual bool get_IsMultiSelectInternal();
    public virtual bool get_RenderWhenDataEmpty();
    public virtual void set_RenderWhenDataEmpty(bool value);
    public virtual int get_RepeatColumns();
    public virtual void set_RepeatColumns(int value);
    public virtual RepeatDirection get_RepeatDirection();
    public virtual void set_RepeatDirection(RepeatDirection value);
    public virtual RepeatLayout get_RepeatLayout();
    public virtual void set_RepeatLayout(RepeatLayout value);
    public virtual TextAlign get_TextAlign();
    public virtual void set_TextAlign(TextAlign value);
    protected virtual Style CreateControlStyle();
    protected virtual Control FindControl(string id, int pathOffset);
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void Render(HtmlTextWriter writer);
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    protected virtual void RaisePostDataChangedEvent();
    private sealed virtual override bool System.Web.UI.WebControls.IRepeatInfoUser.get_HasFooter();
    protected virtual bool get_HasFooter();
    private sealed virtual override bool System.Web.UI.WebControls.IRepeatInfoUser.get_HasHeader();
    protected virtual bool get_HasHeader();
    private sealed virtual override bool System.Web.UI.WebControls.IRepeatInfoUser.get_HasSeparators();
    protected virtual bool get_HasSeparators();
    private sealed virtual override int System.Web.UI.WebControls.IRepeatInfoUser.get_RepeatedItemCount();
    protected virtual int get_RepeatedItemCount();
    private sealed virtual override Style System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle(ListItemType itemType, int repeatIndex);
    protected virtual Style GetItemStyle(ListItemType itemType, int repeatIndex);
    private sealed virtual override void System.Web.UI.WebControls.IRepeatInfoUser.RenderItem(ListItemType itemType, int repeatIndex, RepeatInfo repeatInfo, HtmlTextWriter writer);
    protected virtual void RenderItem(ListItemType itemType, int repeatIndex, RepeatInfo repeatInfo, HtmlTextWriter writer);
}
[ToolboxItemAttribute("False")]
[SupportsEventValidationAttribute]
internal class System.Web.UI.WebControls.ChildTable : Table {
    internal ChildTable(int parentLevel);
    internal ChildTable(string parentID);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
}
public class System.Web.UI.WebControls.CircleHotSpot : HotSpot {
    protected internal string MarkupName { get; }
    [DefaultValueAttribute("0")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("CircleHotSpot_Radius")]
public int Radius { get; public set; }
    [DefaultValueAttribute("0")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("CircleHotSpot_X")]
public int X { get; public set; }
    [DefaultValueAttribute("0")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("CircleHotSpot_Y")]
public int Y { get; public set; }
    protected internal virtual string get_MarkupName();
    public int get_Radius();
    public void set_Radius(int value);
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public virtual string GetCoordinates();
}
public class System.Web.UI.WebControls.CommandEventArgs : EventArgs {
    public string CommandName { get; }
    public object CommandArgument { get; }
    public CommandEventArgs(CommandEventArgs e);
    public CommandEventArgs(string commandName, object argument);
    public string get_CommandName();
    public object get_CommandArgument();
}
public class System.Web.UI.WebControls.CommandEventHandler : MulticastDelegate {
    public CommandEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CommandEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CommandEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.CommandField : ButtonFieldBase {
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[WebSysDescriptionAttribute("CommandField_CancelImageUrl")]
[UrlPropertyAttribute]
public string CancelImageUrl { get; public set; }
    [WebCategoryAttribute("Appearance")]
[LocalizableAttribute("True")]
[WebSysDefaultValueAttribute("CommandField_DefaultCancelCaption")]
[WebSysDescriptionAttribute("CommandField_CancelText")]
public string CancelText { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("ButtonFieldBase_CausesValidation")]
public bool CausesValidation { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[WebSysDescriptionAttribute("CommandField_DeleteImageUrl")]
[UrlPropertyAttribute]
public string DeleteImageUrl { get; public set; }
    [WebCategoryAttribute("Appearance")]
[LocalizableAttribute("True")]
[WebSysDefaultValueAttribute("CommandField_DefaultDeleteCaption")]
[WebSysDescriptionAttribute("CommandField_DeleteText")]
public string DeleteText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[WebSysDescriptionAttribute("CommandField_EditImageUrl")]
[UrlPropertyAttribute]
public string EditImageUrl { get; public set; }
    [WebCategoryAttribute("Appearance")]
[LocalizableAttribute("True")]
[WebSysDefaultValueAttribute("CommandField_DefaultEditCaption")]
[WebSysDescriptionAttribute("CommandField_EditText")]
public string EditText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[WebSysDescriptionAttribute("CommandField_InsertImageUrl")]
[UrlPropertyAttribute]
public string InsertImageUrl { get; public set; }
    [WebCategoryAttribute("Appearance")]
[LocalizableAttribute("True")]
[WebSysDefaultValueAttribute("CommandField_DefaultInsertCaption")]
[WebSysDescriptionAttribute("CommandField_InsertText")]
public string InsertText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[WebSysDescriptionAttribute("CommandField_NewImageUrl")]
[UrlPropertyAttribute]
public string NewImageUrl { get; public set; }
    [WebCategoryAttribute("Appearance")]
[LocalizableAttribute("True")]
[WebSysDefaultValueAttribute("CommandField_DefaultNewCaption")]
[WebSysDescriptionAttribute("CommandField_NewText")]
public string NewText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[WebSysDescriptionAttribute("CommandField_SelectImageUrl")]
[UrlPropertyAttribute]
public string SelectImageUrl { get; public set; }
    [WebCategoryAttribute("Appearance")]
[LocalizableAttribute("True")]
[WebSysDefaultValueAttribute("CommandField_DefaultSelectCaption")]
[WebSysDescriptionAttribute("CommandField_SelectText")]
public string SelectText { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("CommandField_ShowCancelButton")]
public bool ShowCancelButton { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("CommandField_ShowDeleteButton")]
public bool ShowDeleteButton { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("CommandField_ShowEditButton")]
public bool ShowEditButton { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("CommandField_ShowSelectButton")]
public bool ShowSelectButton { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("CommandField_ShowInsertButton")]
public bool ShowInsertButton { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[WebSysDescriptionAttribute("CommandField_UpdateImageUrl")]
[UrlPropertyAttribute]
public string UpdateImageUrl { get; public set; }
    [WebCategoryAttribute("Appearance")]
[LocalizableAttribute("True")]
[WebSysDefaultValueAttribute("CommandField_DefaultUpdateCaption")]
[WebSysDescriptionAttribute("CommandField_UpdateText")]
public string UpdateText { get; public set; }
    public virtual string get_CancelImageUrl();
    public virtual void set_CancelImageUrl(string value);
    public virtual string get_CancelText();
    public virtual void set_CancelText(string value);
    public virtual bool get_CausesValidation();
    public virtual void set_CausesValidation(bool value);
    public virtual string get_DeleteImageUrl();
    public virtual void set_DeleteImageUrl(string value);
    public virtual string get_DeleteText();
    public virtual void set_DeleteText(string value);
    public virtual string get_EditImageUrl();
    public virtual void set_EditImageUrl(string value);
    public virtual string get_EditText();
    public virtual void set_EditText(string value);
    public virtual string get_InsertImageUrl();
    public virtual void set_InsertImageUrl(string value);
    public virtual string get_InsertText();
    public virtual void set_InsertText(string value);
    public virtual string get_NewImageUrl();
    public virtual void set_NewImageUrl(string value);
    public virtual string get_NewText();
    public virtual void set_NewText(string value);
    public virtual string get_SelectImageUrl();
    public virtual void set_SelectImageUrl(string value);
    public virtual string get_SelectText();
    public virtual void set_SelectText(string value);
    public virtual bool get_ShowCancelButton();
    public virtual void set_ShowCancelButton(bool value);
    public virtual bool get_ShowDeleteButton();
    public virtual void set_ShowDeleteButton(bool value);
    public virtual bool get_ShowEditButton();
    public virtual void set_ShowEditButton(bool value);
    public virtual bool get_ShowSelectButton();
    public virtual void set_ShowSelectButton(bool value);
    public virtual bool get_ShowInsertButton();
    public virtual void set_ShowInsertButton(bool value);
    public virtual string get_UpdateImageUrl();
    public virtual void set_UpdateImageUrl(string value);
    public virtual string get_UpdateText();
    public virtual void set_UpdateText(string value);
    protected virtual void CopyProperties(DataControlField newField);
    protected virtual DataControlField CreateField();
    public virtual void InitializeCell(DataControlFieldCell cell, DataControlCellType cellType, DataControlRowState rowState, int rowIndex);
    public virtual void ValidateSupportsCallback();
}
[ToolboxDataAttribute("<{0}:CompareValidator runat="server" ErrorMessage="CompareValidator"></{0}:CompareValidator>")]
public class System.Web.UI.WebControls.CompareValidator : BaseCompareValidator {
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("CompareValidator_ControlToCompare")]
[TypeConverterAttribute("System.Web.UI.WebControls.ValidatedControlConverter")]
public string ControlToCompare { get; public set; }
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("CompareValidator_Operator")]
public ValidationCompareOperator Operator { get; public set; }
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("CompareValidator_ValueToCompare")]
public string ValueToCompare { get; public set; }
    public string get_ControlToCompare();
    public void set_ControlToCompare(string value);
    public ValidationCompareOperator get_Operator();
    public void set_Operator(ValidationCompareOperator value);
    public string get_ValueToCompare();
    public void set_ValueToCompare(string value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual bool ControlPropertiesValid();
    protected virtual bool EvaluateIsValid();
}
[BrowsableAttribute("False")]
public class System.Web.UI.WebControls.CompleteWizardStep : TemplatedWizardStep {
    internal Wizard Owner { get; internal set; }
    [BrowsableAttribute("False")]
[ThemeableAttribute("False")]
[FilterableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WizardStepType StepType { get; public set; }
    [LocalizableAttribute("True")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultCompleteTitleText")]
public string Title { get; public set; }
    internal virtual Wizard get_Owner();
    internal virtual void set_Owner(Wizard value);
    public virtual WizardStepType get_StepType();
    public virtual void set_StepType(WizardStepType value);
    public virtual string get_Title();
    public virtual void set_Title(string value);
}
[DesignerAttribute("System.Web.UI.Design.WebControls.CompositeControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public abstract class System.Web.UI.WebControls.CompositeControl : WebControl {
    public ControlCollection Controls { get; }
    public bool SupportsDisabledAttribute { get; }
    public virtual ControlCollection get_Controls();
    public virtual bool get_SupportsDisabledAttribute();
    public virtual void DataBind();
    protected virtual void RecreateChildControls();
    protected internal virtual void Render(HtmlTextWriter writer);
    private sealed virtual override void System.Web.UI.WebControls.ICompositeControlDesignerAccessor.RecreateChildControls();
}
public abstract class System.Web.UI.WebControls.CompositeDataBoundControl : DataBoundControl {
    internal static string ItemCountViewStateKey;
    protected bool IsUsingModelBinders { get; }
    protected internal string UpdateMethod { get; protected internal set; }
    protected internal string DeleteMethod { get; protected internal set; }
    protected internal string InsertMethod { get; protected internal set; }
    public ControlCollection Controls { get; }
    protected virtual bool get_IsUsingModelBinders();
    protected internal string get_UpdateMethod();
    protected internal void set_UpdateMethod(string value);
    protected internal string get_DeleteMethod();
    protected internal void set_DeleteMethod(string value);
    protected internal string get_InsertMethod();
    protected internal void set_InsertMethod(string value);
    public virtual ControlCollection get_Controls();
    protected internal virtual void CreateChildControls();
    protected abstract virtual int CreateChildControls(IEnumerable dataSource, bool dataBinding);
    protected internal virtual void PerformDataBinding(IEnumerable data);
}
[ControlBuilderAttribute("System.Web.UI.WebControls.ContentBuilderInternal")]
[DesignerAttribute("System.Web.UI.Design.WebControls.ContentDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemAttribute("False")]
public class System.Web.UI.WebControls.Content : Control {
    [DefaultValueAttribute("")]
[IDReferencePropertyAttribute("System.Web.UI.WebControls.ContentPlaceHolder")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Content_ContentPlaceHolderID")]
public string ContentPlaceHolderID { get; public set; }
    public string get_ContentPlaceHolderID();
    public void set_ContentPlaceHolderID(string value);
    public void add_DataBinding(EventHandler value);
    public void remove_DataBinding(EventHandler value);
    public void add_Disposed(EventHandler value);
    public void remove_Disposed(EventHandler value);
    public void add_Init(EventHandler value);
    public void remove_Init(EventHandler value);
    public void add_Load(EventHandler value);
    public void remove_Load(EventHandler value);
    public void add_PreRender(EventHandler value);
    public void remove_PreRender(EventHandler value);
    public void add_Unload(EventHandler value);
    public void remove_Unload(EventHandler value);
}
internal class System.Web.UI.WebControls.ContentBuilderInternal : TemplateBuilder {
    public Type BindingContainerType { get; }
    internal string ContentPlaceHolderFilter { get; }
    internal string ContentPlaceHolder { get; }
    private static ContentBuilderInternal();
    public virtual Type get_BindingContainerType();
    internal string get_ContentPlaceHolderFilter();
    internal string get_ContentPlaceHolder();
    public virtual object BuildObject();
    public virtual void InstantiateIn(Control container);
    public virtual void Init(TemplateParser parser, ControlBuilder parentBuilder, Type type, string tagName, string ID, IDictionary attribs);
    internal virtual void SetParentBuilder(ControlBuilder parentBuilder);
}
internal class System.Web.UI.WebControls.ContentBuilderInternalFactory : object {
    private sealed virtual override object System.Web.Util.IWebObjectFactory.CreateInstance();
}
public enum System.Web.UI.WebControls.ContentDirection : Enum {
    public int value__;
    public static ContentDirection NotSet;
    public static ContentDirection LeftToRight;
    public static ContentDirection RightToLeft;
}
[ControlBuilderAttribute("System.Web.UI.WebControls.ContentPlaceHolderBuilder")]
[DesignerAttribute("System.Web.UI.Design.WebControls.ContentPlaceHolderDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemFilterAttribute("System.Web.UI")]
[ToolboxItemFilterAttribute("Microsoft.VisualStudio.Web.WebForms.MasterPageWebFormDesigner", "3")]
[ToolboxDataAttribute("<{0}:ContentPlaceHolder runat="server"></{0}:ContentPlaceHolder>")]
public class System.Web.UI.WebControls.ContentPlaceHolder : Control {
}
internal class System.Web.UI.WebControls.ContentPlaceHolderBuilder : ControlBuilder {
    internal string Name { get; }
    internal string get_Name();
    public virtual void Init(TemplateParser parser, ControlBuilder parentBuilder, Type type, string tagName, string ID, IDictionary attribs);
    public virtual object BuildObject();
    internal virtual void BuildChildren(object parentObj);
}
internal class System.Web.UI.WebControls.ContentPlaceHolderBuilderFactory : object {
    private sealed virtual override object System.Web.Util.IWebObjectFactory.CreateInstance();
}
public class System.Web.UI.WebControls.ControlIDConverter : StringConverter {
    protected virtual bool FilterControl(Control control);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
[DefaultPropertyAttribute("ControlID")]
public class System.Web.UI.WebControls.ControlParameter : Parameter {
    [DefaultValueAttribute("")]
[IDReferencePropertyAttribute]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("System.Web.UI.WebControls.ControlIDConverter")]
[WebCategoryAttribute("Control")]
[WebSysDescriptionAttribute("ControlParameter_ControlID")]
public string ControlID { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.WebControls.ControlPropertyNameConverter")]
[WebCategoryAttribute("Control")]
[WebSysDescriptionAttribute("ControlParameter_PropertyName")]
public string PropertyName { get; public set; }
    public ControlParameter(string name, string controlID);
    public ControlParameter(string name, string controlID, string propertyName);
    public ControlParameter(string name, DbType dbType, string controlID, string propertyName);
    public ControlParameter(string name, TypeCode type, string controlID, string propertyName);
    protected ControlParameter(ControlParameter original);
    public string get_ControlID();
    public void set_ControlID(string value);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    protected virtual Parameter Clone();
    protected internal virtual object Evaluate(HttpContext context, Control control);
}
public class System.Web.UI.WebControls.ControlPropertyNameConverter : StringConverter {
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
[DefaultPropertyAttribute("CookieName")]
public class System.Web.UI.WebControls.CookieParameter : Parameter {
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Parameter")]
[WebSysDescriptionAttribute("CookieParameter_CookieName")]
public string CookieName { get; public set; }
    [WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Parameter_ValidateInput")]
[DefaultValueAttribute("True")]
public bool ValidateInput { get; public set; }
    public CookieParameter(string name, string cookieName);
    public CookieParameter(string name, DbType dbType, string cookieName);
    public CookieParameter(string name, TypeCode type, string cookieName);
    protected CookieParameter(CookieParameter original);
    public string get_CookieName();
    public void set_CookieName(string value);
    protected virtual Parameter Clone();
    protected internal virtual object Evaluate(HttpContext context, Control control);
    public bool get_ValidateInput();
    public void set_ValidateInput(bool value);
}
public class System.Web.UI.WebControls.CreateUserErrorEventArgs : EventArgs {
    public MembershipCreateStatus CreateUserError { get; public set; }
    public CreateUserErrorEventArgs(MembershipCreateStatus s);
    public MembershipCreateStatus get_CreateUserError();
    public void set_CreateUserError(MembershipCreateStatus value);
}
public class System.Web.UI.WebControls.CreateUserErrorEventHandler : MulticastDelegate {
    public CreateUserErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CreateUserErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CreateUserErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[BindableAttribute("False")]
[DefaultEventAttribute("CreatedUser")]
[DesignerAttribute("System.Web.UI.Design.WebControls.CreateUserWizardDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxDataAttribute("<{0}:CreateUserWizard runat="server"> <WizardSteps> <asp:CreateUserWizardStep runat="server"/> <asp:CompleteWizardStep runat="server"/> </WizardSteps> </{0}:CreateUserWizard>")]
public class System.Web.UI.WebControls.CreateUserWizard : Wizard {
    public static string ContinueButtonCommandName;
    [DefaultValueAttribute("0")]
public int ActiveStepIndex { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("CreateUserWizard_Answer")]
public string Answer { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultAnswerLabelText")]
[WebSysDescriptionAttribute("CreateUserWizard_AnswerLabelText")]
public string AnswerLabelText { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultAnswerRequiredErrorMessage")]
[WebSysDescriptionAttribute("LoginControls_AnswerRequiredErrorMessage")]
public string AnswerRequiredErrorMessage { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("CreateUserWizard_AutoGeneratePassword")]
public bool AutoGeneratePassword { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("CreateUserWizard_CompleteStep")]
public CompleteWizardStep CompleteStep { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultCompleteSuccessText")]
[WebSysDescriptionAttribute("CreateUserWizard_CompleteSuccessText")]
public string CompleteSuccessText { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("CreateUserWizard_CompleteSuccessTextStyle")]
public TableItemStyle CompleteSuccessTextStyle { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ConfirmPassword { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultConfirmPasswordCompareErrorMessage")]
[WebSysDescriptionAttribute("ChangePassword_ConfirmPasswordCompareErrorMessage")]
public string ConfirmPasswordCompareErrorMessage { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultConfirmPasswordLabelText")]
[WebSysDescriptionAttribute("CreateUserWizard_ConfirmPasswordLabelText")]
public string ConfirmPasswordLabelText { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultConfirmPasswordRequiredErrorMessage")]
[WebSysDescriptionAttribute("LoginControls_ConfirmPasswordRequiredErrorMessage")]
public string ConfirmPasswordRequiredErrorMessage { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_ContinueButtonImageUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string ContinueButtonImageUrl { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("CreateUserWizard_ContinueButtonStyle")]
public Style ContinueButtonStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultContinueButtonText")]
[WebSysDescriptionAttribute("CreateUserWizard_ContinueButtonText")]
public string ContinueButtonText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("CreateUserWizard_ContinueButtonType")]
public ButtonType ContinueButtonType { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("LoginControls_ContinueDestinationPageUrl")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[ThemeableAttribute("False")]
[UrlPropertyAttribute]
public string ContinueDestinationPageUrl { get; public set; }
    [WebCategoryAttribute("Appearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("CreateUserWizard_CreateUserStep")]
public CreateUserWizardStep CreateUserStep { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("CreateUserWizard_CreateUserButtonImageUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string CreateUserButtonImageUrl { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("CreateUserWizard_CreateUserButtonStyle")]
public Style CreateUserButtonStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultCreateUserButtonText")]
[WebSysDescriptionAttribute("CreateUserWizard_CreateUserButtonText")]
public string CreateUserButtonText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("CreateUserWizard_CreateUserButtonType")]
public ButtonType CreateUserButtonType { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("CreateUserWizard_DisableCreatedUser")]
public bool DisableCreatedUser { get; public set; }
    [DefaultValueAttribute("False")]
public bool DisplaySideBar { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultDuplicateEmailErrorMessage")]
[WebSysDescriptionAttribute("CreateUserWizard_DuplicateEmailErrorMessage")]
public string DuplicateEmailErrorMessage { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultDuplicateUserNameErrorMessage")]
[WebSysDescriptionAttribute("CreateUserWizard_DuplicateUserNameErrorMessage")]
public string DuplicateUserNameErrorMessage { get; public set; }
    [WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("LoginControls_EditProfileIconUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string EditProfileIconUrl { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("CreateUserWizard_EditProfileText")]
public string EditProfileText { get; public set; }
    [WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("CreateUserWizard_EditProfileUrl")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string EditProfileUrl { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("CreateUserWizard_Email")]
public string Email { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultEmailLabelText")]
[WebSysDescriptionAttribute("CreateUserWizard_EmailLabelText")]
public string EmailLabelText { get; public set; }
    [WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("")]
[WebSysDescriptionAttribute("CreateUserWizard_EmailRegularExpression")]
public string EmailRegularExpression { get; public set; }
    [WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultEmailRegularExpressionErrorMessage")]
[WebSysDescriptionAttribute("CreateUserWizard_EmailRegularExpressionErrorMessage")]
public string EmailRegularExpressionErrorMessage { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultEmailRequiredErrorMessage")]
[WebSysDescriptionAttribute("CreateUserWizard_EmailRequiredErrorMessage")]
public string EmailRequiredErrorMessage { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultUnknownErrorMessage")]
[WebSysDescriptionAttribute("CreateUserWizard_UnknownErrorMessage")]
public string UnknownErrorMessage { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("CreateUserWizard_ErrorMessageStyle")]
public TableItemStyle ErrorMessageStyle { get; }
    [WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("LoginControls_HelpPageIconUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string HelpPageIconUrl { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_HelpPageText")]
public string HelpPageText { get; public set; }
    [WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("LoginControls_HelpPageUrl")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string HelpPageUrl { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("WebControl_HyperLinkStyle")]
public TableItemStyle HyperLinkStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("WebControl_InstructionText")]
public string InstructionText { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("WebControl_InstructionTextStyle")]
public TableItemStyle InstructionTextStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultInvalidAnswerErrorMessage")]
[WebSysDescriptionAttribute("CreateUserWizard_InvalidAnswerErrorMessage")]
public string InvalidAnswerErrorMessage { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultInvalidEmailErrorMessage")]
[WebSysDescriptionAttribute("CreateUserWizard_InvalidEmailErrorMessage")]
public string InvalidEmailErrorMessage { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultInvalidPasswordErrorMessage")]
[WebSysDescriptionAttribute("CreateUserWizard_InvalidPasswordErrorMessage")]
public string InvalidPasswordErrorMessage { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultInvalidQuestionErrorMessage")]
[WebSysDescriptionAttribute("CreateUserWizard_InvalidQuestionErrorMessage")]
public string InvalidQuestionErrorMessage { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("LoginControls_LabelStyle")]
public TableItemStyle LabelStyle { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("CreateUserWizard_LoginCreatedUser")]
public bool LoginCreatedUser { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("CreateUserWizard_MailDefinition")]
public MailDefinition MailDefinition { get; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("MembershipProvider_Name")]
public string MembershipProvider { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Password { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("CreateUserWizard_PasswordHintStyle")]
public TableItemStyle PasswordHintStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_PasswordHintText")]
public string PasswordHintText { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("LoginControls_DefaultPasswordLabelText")]
[WebSysDescriptionAttribute("LoginControls_PasswordLabelText")]
public string PasswordLabelText { get; public set; }
    [WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("")]
[WebSysDescriptionAttribute("CreateUserWizard_PasswordRegularExpression")]
public string PasswordRegularExpression { get; public set; }
    [WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("Password_InvalidPasswordErrorMessage")]
[WebSysDescriptionAttribute("CreateUserWizard_PasswordRegularExpressionErrorMessage")]
public string PasswordRegularExpressionErrorMessage { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultPasswordRequiredErrorMessage")]
[WebSysDescriptionAttribute("CreateUserWizard_PasswordRequiredErrorMessage")]
public string PasswordRequiredErrorMessage { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("CreateUserWizard_Question")]
public string Question { get; public set; }
    [WebCategoryAttribute("Validation")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("CreateUserWizard_QuestionAndAnswerRequired")]
protected internal bool QuestionAndAnswerRequired { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultQuestionLabelText")]
[WebSysDescriptionAttribute("CreateUserWizard_QuestionLabelText")]
public string QuestionLabelText { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultQuestionRequiredErrorMessage")]
[WebSysDescriptionAttribute("CreateUserWizard_QuestionRequiredErrorMessage")]
public string QuestionRequiredErrorMessage { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("CreateUserWizard_RequireEmail")]
public bool RequireEmail { get; public set; }
    internal bool ShowCustomNavigationTemplate { get; }
    [DefaultValueAttribute("")]
public string SkipLinkText { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("LoginControls_TextBoxStyle")]
public Style TextBoxStyle { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("LoginControls_TitleTextStyle")]
public TableItemStyle TitleTextStyle { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("UserName_InitialValue")]
public string UserName { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultUserNameLabelText")]
[WebSysDescriptionAttribute("LoginControls_UserNameLabelText")]
public string UserNameLabelText { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultUserNameRequiredErrorMessage")]
[WebSysDescriptionAttribute("ChangePassword_UserNameRequiredErrorMessage")]
public string UserNameRequiredErrorMessage { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("CreateUserWizard_ValidatorTextStyle")]
public Style ValidatorTextStyle { get; }
    [EditorAttribute("System.Web.UI.Design.WebControls.CreateUserWizardStepCollectionEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public WizardStepCollection WizardSteps { get; }
    private static CreateUserWizard();
    public virtual int get_ActiveStepIndex();
    public virtual void set_ActiveStepIndex(int value);
    public virtual string get_Answer();
    public virtual void set_Answer(string value);
    public virtual string get_AnswerLabelText();
    public virtual void set_AnswerLabelText(string value);
    public virtual string get_AnswerRequiredErrorMessage();
    public virtual void set_AnswerRequiredErrorMessage(string value);
    public virtual bool get_AutoGeneratePassword();
    public virtual void set_AutoGeneratePassword(bool value);
    public CompleteWizardStep get_CompleteStep();
    public virtual string get_CompleteSuccessText();
    public virtual void set_CompleteSuccessText(string value);
    public TableItemStyle get_CompleteSuccessTextStyle();
    public virtual string get_ConfirmPassword();
    public virtual string get_ConfirmPasswordCompareErrorMessage();
    public virtual void set_ConfirmPasswordCompareErrorMessage(string value);
    public virtual string get_ConfirmPasswordLabelText();
    public virtual void set_ConfirmPasswordLabelText(string value);
    public virtual string get_ConfirmPasswordRequiredErrorMessage();
    public virtual void set_ConfirmPasswordRequiredErrorMessage(string value);
    public virtual string get_ContinueButtonImageUrl();
    public virtual void set_ContinueButtonImageUrl(string value);
    public Style get_ContinueButtonStyle();
    public virtual string get_ContinueButtonText();
    public virtual void set_ContinueButtonText(string value);
    public virtual ButtonType get_ContinueButtonType();
    public virtual void set_ContinueButtonType(ButtonType value);
    public virtual string get_ContinueDestinationPageUrl();
    public virtual void set_ContinueDestinationPageUrl(string value);
    public CreateUserWizardStep get_CreateUserStep();
    public virtual string get_CreateUserButtonImageUrl();
    public virtual void set_CreateUserButtonImageUrl(string value);
    public Style get_CreateUserButtonStyle();
    public virtual string get_CreateUserButtonText();
    public virtual void set_CreateUserButtonText(string value);
    public virtual ButtonType get_CreateUserButtonType();
    public virtual void set_CreateUserButtonType(ButtonType value);
    public virtual bool get_DisableCreatedUser();
    public virtual void set_DisableCreatedUser(bool value);
    public virtual bool get_DisplaySideBar();
    public virtual void set_DisplaySideBar(bool value);
    public virtual string get_DuplicateEmailErrorMessage();
    public virtual void set_DuplicateEmailErrorMessage(string value);
    public virtual string get_DuplicateUserNameErrorMessage();
    public virtual void set_DuplicateUserNameErrorMessage(string value);
    public virtual string get_EditProfileIconUrl();
    public virtual void set_EditProfileIconUrl(string value);
    public virtual string get_EditProfileText();
    public virtual void set_EditProfileText(string value);
    public virtual string get_EditProfileUrl();
    public virtual void set_EditProfileUrl(string value);
    public virtual string get_Email();
    public virtual void set_Email(string value);
    public virtual string get_EmailLabelText();
    public virtual void set_EmailLabelText(string value);
    public virtual string get_EmailRegularExpression();
    public virtual void set_EmailRegularExpression(string value);
    public virtual string get_EmailRegularExpressionErrorMessage();
    public virtual void set_EmailRegularExpressionErrorMessage(string value);
    public virtual string get_EmailRequiredErrorMessage();
    public virtual void set_EmailRequiredErrorMessage(string value);
    public virtual string get_UnknownErrorMessage();
    public virtual void set_UnknownErrorMessage(string value);
    public TableItemStyle get_ErrorMessageStyle();
    public virtual string get_HelpPageIconUrl();
    public virtual void set_HelpPageIconUrl(string value);
    public virtual string get_HelpPageText();
    public virtual void set_HelpPageText(string value);
    public virtual string get_HelpPageUrl();
    public virtual void set_HelpPageUrl(string value);
    public TableItemStyle get_HyperLinkStyle();
    public virtual string get_InstructionText();
    public virtual void set_InstructionText(string value);
    public TableItemStyle get_InstructionTextStyle();
    public virtual string get_InvalidAnswerErrorMessage();
    public virtual void set_InvalidAnswerErrorMessage(string value);
    public virtual string get_InvalidEmailErrorMessage();
    public virtual void set_InvalidEmailErrorMessage(string value);
    public virtual string get_InvalidPasswordErrorMessage();
    public virtual void set_InvalidPasswordErrorMessage(string value);
    public virtual string get_InvalidQuestionErrorMessage();
    public virtual void set_InvalidQuestionErrorMessage(string value);
    public TableItemStyle get_LabelStyle();
    public virtual bool get_LoginCreatedUser();
    public virtual void set_LoginCreatedUser(bool value);
    public MailDefinition get_MailDefinition();
    public virtual string get_MembershipProvider();
    public virtual void set_MembershipProvider(string value);
    public virtual string get_Password();
    public TableItemStyle get_PasswordHintStyle();
    public virtual string get_PasswordHintText();
    public virtual void set_PasswordHintText(string value);
    public virtual string get_PasswordLabelText();
    public virtual void set_PasswordLabelText(string value);
    public virtual string get_PasswordRegularExpression();
    public virtual void set_PasswordRegularExpression(string value);
    public virtual string get_PasswordRegularExpressionErrorMessage();
    public virtual void set_PasswordRegularExpressionErrorMessage(string value);
    public virtual string get_PasswordRequiredErrorMessage();
    public virtual void set_PasswordRequiredErrorMessage(string value);
    public virtual string get_Question();
    public virtual void set_Question(string value);
    protected internal bool get_QuestionAndAnswerRequired();
    public virtual string get_QuestionLabelText();
    public virtual void set_QuestionLabelText(string value);
    public virtual string get_QuestionRequiredErrorMessage();
    public virtual void set_QuestionRequiredErrorMessage(string value);
    public virtual bool get_RequireEmail();
    public virtual void set_RequireEmail(bool value);
    internal virtual bool get_ShowCustomNavigationTemplate();
    public virtual string get_SkipLinkText();
    public virtual void set_SkipLinkText(string value);
    public Style get_TextBoxStyle();
    public TableItemStyle get_TitleTextStyle();
    public virtual string get_UserName();
    public virtual void set_UserName(string value);
    public virtual string get_UserNameLabelText();
    public virtual void set_UserNameLabelText(string value);
    public virtual string get_UserNameRequiredErrorMessage();
    public virtual void set_UserNameRequiredErrorMessage(string value);
    public Style get_ValidatorTextStyle();
    public virtual WizardStepCollection get_WizardSteps();
    public void add_ContinueButtonClick(EventHandler value);
    public void remove_ContinueButtonClick(EventHandler value);
    public void add_CreatingUser(LoginCancelEventHandler value);
    public void remove_CreatingUser(LoginCancelEventHandler value);
    public void add_CreatedUser(EventHandler value);
    public void remove_CreatedUser(EventHandler value);
    public void add_CreateUserError(CreateUserErrorEventHandler value);
    public void remove_CreateUserError(CreateUserErrorEventHandler value);
    public void add_SendingMail(MailMessageEventHandler value);
    public void remove_SendingMail(MailMessageEventHandler value);
    public void add_SendMailError(SendMailErrorEventHandler value);
    public void remove_SendMailError(SendMailErrorEventHandler value);
    protected internal virtual void CreateChildControls();
    internal virtual TableWizardRendering CreateTableRendering();
    internal virtual LayoutTemplateWizardRendering CreateLayoutTemplateRendering();
    internal virtual ITemplate CreateDefaultSideBarTemplate();
    internal virtual ITemplate CreateDefaultDataListItemTemplate();
    internal virtual void CreateCustomNavigationTemplates();
    internal virtual void DataListItemDataBound(object sender, WizardSideBarListControlItemEventArgs e);
    protected virtual IDictionary GetDesignModeState();
    internal virtual void InstantiateStepContentTemplates();
    protected virtual void LoadViewState(object savedState);
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
    protected virtual void OnContinueButtonClick(EventArgs e);
    protected virtual void OnCreatedUser(EventArgs e);
    protected virtual void OnCreateUserError(CreateUserErrorEventArgs e);
    protected virtual void OnCreatingUser(LoginCancelEventArgs e);
    protected virtual void OnNextButtonClick(WizardNavigationEventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void OnSendingMail(MailMessageEventArgs e);
    protected virtual void OnSendMailError(SendMailErrorEventArgs e);
    protected virtual object SaveViewState();
    protected virtual void SetDesignModeState(IDictionary data);
    protected virtual void TrackViewState();
}
[BrowsableAttribute("False")]
public class System.Web.UI.WebControls.CreateUserWizardStep : TemplatedWizardStep {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AllowReturn { get; public set; }
    internal bool AllowReturnInternal { get; internal set; }
    internal Wizard Owner { get; internal set; }
    [LocalizableAttribute("True")]
[WebSysDefaultValueAttribute("CreateUserWizard_DefaultCreateUserTitleText")]
public string Title { get; public set; }
    [BrowsableAttribute("False")]
[ThemeableAttribute("False")]
[FilterableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WizardStepType StepType { get; public set; }
    public virtual bool get_AllowReturn();
    public virtual void set_AllowReturn(bool value);
    internal bool get_AllowReturnInternal();
    internal void set_AllowReturnInternal(bool value);
    internal virtual Wizard get_Owner();
    internal virtual void set_Owner(Wizard value);
    public virtual string get_Title();
    public virtual void set_Title(string value);
    public virtual WizardStepType get_StepType();
    public virtual void set_StepType(WizardStepType value);
}
public class System.Web.UI.WebControls.CreatingModelDataSourceEventArgs : EventArgs {
    public ModelDataSource ModelDataSource { get; public set; }
    [CompilerGeneratedAttribute]
public ModelDataSource get_ModelDataSource();
    [CompilerGeneratedAttribute]
public void set_ModelDataSource(ModelDataSource value);
}
public class System.Web.UI.WebControls.CreatingModelDataSourceEventHandler : MulticastDelegate {
    public CreatingModelDataSourceEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CreatingModelDataSourceEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CreatingModelDataSourceEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultEventAttribute("ServerValidate")]
[ToolboxDataAttribute("<{0}:CustomValidator runat="server" ErrorMessage="CustomValidator"></{0}:CustomValidator>")]
public class System.Web.UI.WebControls.CustomValidator : BaseValidator {
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("CustomValidator_ClientValidationFunction")]
public string ClientValidationFunction { get; public set; }
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("CustomValidator_ValidateEmptyText")]
public bool ValidateEmptyText { get; public set; }
    private static CustomValidator();
    public string get_ClientValidationFunction();
    public void set_ClientValidationFunction(string value);
    public bool get_ValidateEmptyText();
    public void set_ValidateEmptyText(bool value);
    public void add_ServerValidate(ServerValidateEventHandler value);
    public void remove_ServerValidate(ServerValidateEventHandler value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual bool ControlPropertiesValid();
    protected virtual bool EvaluateIsValid();
    protected virtual bool OnServerValidate(string value);
}
[DesignerAttribute("System.Web.UI.Design.WebControls.DataBoundControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public abstract class System.Web.UI.WebControls.DataBoundControl : BaseDataBoundControl {
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataBoundControl_DataMember")]
public string DataMember { get; public set; }
    protected bool IsUsingModelBinders { get; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataBoundControl_ItemType")]
public string ItemType { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataBoundControl_SelectMethod")]
public string SelectMethod { get; public set; }
    [IDReferencePropertyAttribute("System.Web.UI.DataSourceControl")]
public string DataSourceID { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IDataSource DataSourceObject { get; }
    protected DataSourceSelectArguments SelectArguments { get; }
    private static DataBoundControl();
    public virtual string get_DataMember();
    public virtual void set_DataMember(string value);
    protected virtual bool get_IsUsingModelBinders();
    public void add_CreatingModelDataSource(CreatingModelDataSourceEventHandler value);
    public void remove_CreatingModelDataSource(CreatingModelDataSourceEventHandler value);
    protected virtual void OnCreatingModelDataSource(CreatingModelDataSourceEventArgs e);
    public virtual string get_ItemType();
    public virtual void set_ItemType(string value);
    public virtual string get_SelectMethod();
    public virtual void set_SelectMethod(string value);
    public void add_CallingDataMethods(CallingDataMethodsEventHandler value);
    public void remove_CallingDataMethods(CallingDataMethodsEventHandler value);
    public virtual string get_DataSourceID();
    public virtual void set_DataSourceID(string value);
    public IDataSource get_DataSourceObject();
    protected DataSourceSelectArguments get_SelectArguments();
    internal void EnsureSingleDataSource();
    protected virtual DataSourceSelectArguments CreateDataSourceSelectArguments();
    protected virtual DataSourceView GetData();
    protected virtual IDataSource GetDataSource();
    protected void MarkAsDataBound();
    protected virtual void OnDataPropertyChanged();
    protected virtual void OnDataSourceViewChanged(object sender, EventArgs e);
    protected internal virtual void OnLoad(EventArgs e);
    protected virtual void OnPagePreLoad(object sender, EventArgs e);
    protected internal virtual void PerformDataBinding(IEnumerable data);
    protected virtual void PerformSelect();
    protected virtual void ValidateDataSource(object dataSource);
    protected virtual void LoadViewState(object savedState);
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
    internal virtual void UpdateModelDataSourceProperties(ModelDataSource modelDataSource);
}
internal static class System.Web.UI.WebControls.DataBoundControlHelper : object {
    public static Control FindControl(Control control, string controlID);
    public static bool CompareStringArrays(String[] stringA, String[] stringB);
    internal static bool IsBindableType(Type type, bool enableEnums);
    internal static void ExtractValuesFromBindableControls(IOrderedDictionary dictionary, Control container);
    internal static void EnableDynamicData(INamingContainer control, string entityTypeName);
}
public enum System.Web.UI.WebControls.DataBoundControlMode : Enum {
    public int value__;
    public static DataBoundControlMode ReadOnly;
    public static DataBoundControlMode Edit;
    public static DataBoundControlMode Insert;
}
[SupportsEventValidationAttribute]
internal class System.Web.UI.WebControls.DataControlButton : Button {
    public bool CausesValidation { get; public set; }
    public bool UseSubmitBehavior { get; public set; }
    internal DataControlButton(IPostBackContainer container);
    public virtual bool get_CausesValidation();
    public virtual void set_CausesValidation(bool value);
    public virtual bool get_UseSubmitBehavior();
    public virtual void set_UseSubmitBehavior(bool value);
    protected sealed virtual PostBackOptions GetPostBackOptions();
}
public enum System.Web.UI.WebControls.DataControlCellType : Enum {
    public int value__;
    public static DataControlCellType Header;
    public static DataControlCellType Footer;
    public static DataControlCellType DataCell;
}
public class System.Web.UI.WebControls.DataControlCommands : object {
    public static string SortCommandName;
    public static string SelectCommandName;
    public static string EditCommandName;
    public static string DeleteCommandName;
    public static string UpdateCommandName;
    public static string CancelCommandName;
    public static string PageCommandName;
    public static string NextPageCommandArgument;
    public static string PreviousPageCommandArgument;
    public static string FirstPageCommandArgument;
    public static string LastPageCommandArgument;
    public static string InsertCommandName;
    public static string NewCommandName;
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DefaultPropertyAttribute("HeaderText")]
public abstract class System.Web.UI.WebControls.DataControlField : object {
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Accessibility")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("DataControlField_AccessibleHeaderText")]
public string AccessibleHeaderText { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("DataControlField_ControlStyle")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
public Style ControlStyle { get; }
    protected internal ValidateRequestMode ValidateRequestMode { get; protected internal set; }
    internal Style ControlStyleInternal { get; }
    protected Control Control { get; }
    protected bool DesignMode { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("DataControlField_FooterStyle")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
public TableItemStyle FooterStyle { get; }
    internal TableItemStyle FooterStyleInternal { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("DataControlField_FooterText")]
public string FooterText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("DataControlField_HeaderImageUrl")]
public string HeaderImageUrl { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("DataControlField_HeaderStyle")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
public TableItemStyle HeaderStyle { get; }
    internal TableItemStyle HeaderStyleInternal { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("DataControlField_HeaderText")]
public string HeaderText { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("DataControlField_InsertVisible")]
public bool InsertVisible { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("DataControlField_ItemStyle")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
public TableItemStyle ItemStyle { get; }
    internal TableItemStyle ItemStyleInternal { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("DataControlField_ShowHeader")]
public bool ShowHeader { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebSysDescriptionAttribute("DataControlField_SortExpression")]
public string SortExpression { get; public set; }
    protected StateBag ViewState { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("DataControlField_Visible")]
public bool Visible { get; public set; }
    protected bool IsTrackingViewState { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    private object System.Web.UI.IDataSourceViewSchemaAccessor.DataSourceViewSchema { get; private set; }
    [CompilerGeneratedAttribute]
internal void add_FieldChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_FieldChanged(EventHandler value);
    public virtual string get_AccessibleHeaderText();
    public virtual void set_AccessibleHeaderText(string value);
    public Style get_ControlStyle();
    protected internal virtual ValidateRequestMode get_ValidateRequestMode();
    protected internal virtual void set_ValidateRequestMode(ValidateRequestMode value);
    internal Style get_ControlStyleInternal();
    protected Control get_Control();
    protected bool get_DesignMode();
    public TableItemStyle get_FooterStyle();
    internal TableItemStyle get_FooterStyleInternal();
    public virtual string get_FooterText();
    public virtual void set_FooterText(string value);
    public virtual string get_HeaderImageUrl();
    public virtual void set_HeaderImageUrl(string value);
    public TableItemStyle get_HeaderStyle();
    internal TableItemStyle get_HeaderStyleInternal();
    public virtual string get_HeaderText();
    public virtual void set_HeaderText(string value);
    public virtual bool get_InsertVisible();
    public virtual void set_InsertVisible(bool value);
    public TableItemStyle get_ItemStyle();
    internal TableItemStyle get_ItemStyleInternal();
    public virtual bool get_ShowHeader();
    public virtual void set_ShowHeader(bool value);
    public virtual string get_SortExpression();
    public virtual void set_SortExpression(string value);
    protected StateBag get_ViewState();
    public bool get_Visible();
    public void set_Visible(bool value);
    protected internal DataControlField CloneField();
    protected virtual void CopyProperties(DataControlField newField);
    protected abstract virtual DataControlField CreateField();
    public virtual void ExtractValuesFromCell(IOrderedDictionary dictionary, DataControlFieldCell cell, DataControlRowState rowState, bool includeReadOnly);
    public virtual bool Initialize(bool sortingEnabled, Control control);
    public virtual void InitializeCell(DataControlFieldCell cell, DataControlCellType cellType, DataControlRowState rowState, int rowIndex);
    protected bool get_IsTrackingViewState();
    protected virtual void LoadViewState(object savedState);
    protected virtual void OnFieldChanged();
    protected virtual object SaveViewState();
    internal void SetDirty();
    public virtual string ToString();
    protected virtual void TrackViewState();
    public virtual void ValidateSupportsCallback();
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object state);
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override object System.Web.UI.IDataSourceViewSchemaAccessor.get_DataSourceViewSchema();
    private sealed virtual override void System.Web.UI.IDataSourceViewSchemaAccessor.set_DataSourceViewSchema(object value);
}
public class System.Web.UI.WebControls.DataControlFieldCell : TableCell {
    public DataControlField ContainingField { get; }
    public ValidateRequestMode ValidateRequestMode { get; public set; }
    public DataControlFieldCell(DataControlField containingField);
    protected DataControlFieldCell(HtmlTextWriterTag tagKey, DataControlField containingField);
    public DataControlField get_ContainingField();
    public virtual ValidateRequestMode get_ValidateRequestMode();
    public virtual void set_ValidateRequestMode(ValidateRequestMode value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.DataControlFieldCollection : StateManagedCollection {
    [BrowsableAttribute("False")]
public DataControlField Item { get; }
    private static DataControlFieldCollection();
    [CompilerGeneratedAttribute]
public void add_FieldsChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FieldsChanged(EventHandler value);
    public DataControlField get_Item(int index);
    public void Add(DataControlField field);
    public DataControlFieldCollection CloneFields();
    public bool Contains(DataControlField field);
    public void CopyTo(DataControlField[] array, int index);
    protected virtual object CreateKnownType(int index);
    protected virtual Type[] GetKnownTypes();
    public int IndexOf(DataControlField field);
    public void Insert(int index, DataControlField field);
    protected virtual void OnClearComplete();
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnValidate(object o);
    public void RemoveAt(int index);
    public void Remove(DataControlField field);
    protected virtual void SetDirtyObject(object o);
}
public class System.Web.UI.WebControls.DataControlFieldHeaderCell : DataControlFieldCell {
    public string AbbreviatedText { get; public set; }
    public TableHeaderScope Scope { get; public set; }
    public DataControlFieldHeaderCell(DataControlField containingField);
    public virtual string get_AbbreviatedText();
    public virtual void set_AbbreviatedText(string value);
    public virtual TableHeaderScope get_Scope();
    public virtual void set_Scope(TableHeaderScope value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
}
[SupportsEventValidationAttribute]
internal class System.Web.UI.WebControls.DataControlImageButton : ImageButton {
    public bool CausesValidation { get; public set; }
    internal DataControlImageButton(IPostBackContainer container);
    public virtual bool get_CausesValidation();
    public virtual void set_CausesValidation(bool value);
    internal void EnableCallback(string argument);
    protected sealed virtual PostBackOptions GetPostBackOptions();
    protected internal virtual void Render(HtmlTextWriter writer);
}
[SupportsEventValidationAttribute]
internal class System.Web.UI.WebControls.DataControlLinkButton : LinkButton {
    public bool CausesValidation { get; public set; }
    internal DataControlLinkButton(IPostBackContainer container);
    public virtual bool get_CausesValidation();
    public virtual void set_CausesValidation(bool value);
    internal void EnableCallback(string argument);
    protected virtual PostBackOptions GetPostBackOptions();
    protected internal virtual void Render(HtmlTextWriter writer);
    protected virtual void SetForeColor();
}
[SupportsEventValidationAttribute]
internal class System.Web.UI.WebControls.DataControlPagerLinkButton : DataControlLinkButton {
    public bool CausesValidation { get; public set; }
    internal DataControlPagerLinkButton(IPostBackContainer container);
    public virtual bool get_CausesValidation();
    public virtual void set_CausesValidation(bool value);
    protected virtual void SetForeColor();
}
[FlagsAttribute]
public enum System.Web.UI.WebControls.DataControlRowState : Enum {
    public int value__;
    public static DataControlRowState Normal;
    public static DataControlRowState Alternate;
    public static DataControlRowState Selected;
    public static DataControlRowState Edit;
    public static DataControlRowState Insert;
}
public enum System.Web.UI.WebControls.DataControlRowType : Enum {
    public int value__;
    public static DataControlRowType Header;
    public static DataControlRowType Footer;
    public static DataControlRowType DataRow;
    public static DataControlRowType Separator;
    public static DataControlRowType Pager;
    public static DataControlRowType EmptyDataRow;
}
[EditorAttribute("System.Web.UI.Design.WebControls.DataGridComponentEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.ComponentEditor")]
[DesignerAttribute("System.Web.UI.Design.WebControls.DataGridDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.UI.WebControls.DataGrid : BaseDataList {
    public static string SortCommandName;
    public static string SelectCommandName;
    public static string EditCommandName;
    public static string DeleteCommandName;
    public static string UpdateCommandName;
    public static string CancelCommandName;
    public static string PageCommandName;
    public static string NextPageCommandArgument;
    public static string PrevPageCommandArgument;
    internal static string DataSourceItemCountViewStateKey;
    [WebCategoryAttribute("Paging")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("DataGrid_AllowCustomPaging")]
public bool AllowCustomPaging { get; public set; }
    [WebCategoryAttribute("Paging")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("DataGrid_AllowPaging")]
public bool AllowPaging { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("DataGrid_AllowSorting")]
public bool AllowSorting { get; public set; }
    [WebCategoryAttribute("Styles")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DataGrid_AlternatingItemStyle")]
public TableItemStyle AlternatingItemStyle { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("DataControls_AutoGenerateColumns")]
public bool AutoGenerateColumns { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("WebControl_BackImageUrl")]
public string BackImageUrl { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("DataGrid_CurrentPageIndex")]
public int CurrentPageIndex { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.DataGridColumnCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Default")]
[WebSysDescriptionAttribute("DataControls_Columns")]
public DataGridColumnCollection Columns { get; }
    [WebCategoryAttribute("Default")]
[DefaultValueAttribute("-1")]
[WebSysDescriptionAttribute("DataGrid_EditItemIndex")]
public int EditItemIndex { get; public set; }
    [WebCategoryAttribute("Styles")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DataGrid_EditItemStyle")]
public TableItemStyle EditItemStyle { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DataControls_FooterStyle")]
public TableItemStyle FooterStyle { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DataControls_HeaderStyle")]
public TableItemStyle HeaderStyle { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("DataGrid_Items")]
public DataGridItemCollection Items { get; }
    [WebCategoryAttribute("Styles")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DataGrid_ItemStyle")]
public TableItemStyle ItemStyle { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("DataGrid_PageCount")]
public int PageCount { get; }
    [WebCategoryAttribute("Styles")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DataGrid_PagerStyle")]
public DataGridPagerStyle PagerStyle { get; }
    [WebCategoryAttribute("Paging")]
[DefaultValueAttribute("10")]
[WebSysDescriptionAttribute("DataGrid_PageSize")]
public int PageSize { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("-1")]
[WebSysDescriptionAttribute("WebControl_SelectedIndex")]
public int SelectedIndex { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("DataGrid_SelectedItem")]
public DataGridItem SelectedItem { get; }
    [WebCategoryAttribute("Styles")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DataGrid_SelectedItemStyle")]
public TableItemStyle SelectedItemStyle { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("DataControls_ShowFooter")]
public bool ShowFooter { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("DataControls_ShowHeader")]
public bool ShowHeader { get; public set; }
    protected HtmlTextWriterTag TagKey { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("DataGrid_VisibleItemCount")]
public int VirtualItemCount { get; public set; }
    private static DataGrid();
    public virtual bool get_AllowCustomPaging();
    public virtual void set_AllowCustomPaging(bool value);
    public virtual bool get_AllowPaging();
    public virtual void set_AllowPaging(bool value);
    public virtual bool get_AllowSorting();
    public virtual void set_AllowSorting(bool value);
    public virtual TableItemStyle get_AlternatingItemStyle();
    public virtual bool get_AutoGenerateColumns();
    public virtual void set_AutoGenerateColumns(bool value);
    public virtual string get_BackImageUrl();
    public virtual void set_BackImageUrl(string value);
    public int get_CurrentPageIndex();
    public void set_CurrentPageIndex(int value);
    public virtual DataGridColumnCollection get_Columns();
    public virtual int get_EditItemIndex();
    public virtual void set_EditItemIndex(int value);
    public virtual TableItemStyle get_EditItemStyle();
    public virtual TableItemStyle get_FooterStyle();
    public virtual TableItemStyle get_HeaderStyle();
    public virtual DataGridItemCollection get_Items();
    public virtual TableItemStyle get_ItemStyle();
    public int get_PageCount();
    public virtual DataGridPagerStyle get_PagerStyle();
    public virtual int get_PageSize();
    public virtual void set_PageSize(int value);
    public virtual int get_SelectedIndex();
    public virtual void set_SelectedIndex(int value);
    public virtual DataGridItem get_SelectedItem();
    public virtual TableItemStyle get_SelectedItemStyle();
    public virtual bool get_ShowFooter();
    public virtual void set_ShowFooter(bool value);
    public virtual bool get_ShowHeader();
    public virtual void set_ShowHeader(bool value);
    protected virtual HtmlTextWriterTag get_TagKey();
    public virtual int get_VirtualItemCount();
    public virtual void set_VirtualItemCount(int value);
    public void add_CancelCommand(DataGridCommandEventHandler value);
    public void remove_CancelCommand(DataGridCommandEventHandler value);
    public void add_DeleteCommand(DataGridCommandEventHandler value);
    public void remove_DeleteCommand(DataGridCommandEventHandler value);
    public void add_EditCommand(DataGridCommandEventHandler value);
    public void remove_EditCommand(DataGridCommandEventHandler value);
    public void add_ItemCommand(DataGridCommandEventHandler value);
    public void remove_ItemCommand(DataGridCommandEventHandler value);
    public void add_ItemCreated(DataGridItemEventHandler value);
    public void remove_ItemCreated(DataGridItemEventHandler value);
    public void add_ItemDataBound(DataGridItemEventHandler value);
    public void remove_ItemDataBound(DataGridItemEventHandler value);
    public void add_PageIndexChanged(DataGridPageChangedEventHandler value);
    public void remove_PageIndexChanged(DataGridPageChangedEventHandler value);
    public void add_SortCommand(DataGridSortCommandEventHandler value);
    public void remove_SortCommand(DataGridSortCommandEventHandler value);
    public void add_UpdateCommand(DataGridCommandEventHandler value);
    public void remove_UpdateCommand(DataGridCommandEventHandler value);
    internal void StoreEnumerator(IEnumerator dataSource, object firstDataItem);
    protected virtual ArrayList CreateColumnSet(PagedDataSource dataSource, bool useDataSource);
    protected virtual void CreateControlHierarchy(bool useDataSource);
    protected virtual Style CreateControlStyle();
    protected virtual DataGridItem CreateItem(int itemIndex, int dataSourceIndex, ListItemType itemType);
    protected virtual void InitializeItem(DataGridItem item, DataGridColumn[] columns);
    protected virtual void InitializePager(DataGridItem item, int columnSpan, PagedDataSource pagedDataSource);
    protected virtual void LoadViewState(object savedState);
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
    internal void OnColumnsChanged();
    protected virtual void OnCancelCommand(DataGridCommandEventArgs e);
    protected virtual void OnDeleteCommand(DataGridCommandEventArgs e);
    protected virtual void OnEditCommand(DataGridCommandEventArgs e);
    protected virtual void OnItemCommand(DataGridCommandEventArgs e);
    protected virtual void OnItemCreated(DataGridItemEventArgs e);
    protected virtual void OnItemDataBound(DataGridItemEventArgs e);
    protected virtual void OnPageIndexChanged(DataGridPageChangedEventArgs e);
    internal void OnPagerChanged();
    protected virtual void OnSortCommand(DataGridSortCommandEventArgs e);
    protected virtual void OnUpdateCommand(DataGridCommandEventArgs e);
    protected internal virtual void PrepareControlHierarchy();
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public abstract class System.Web.UI.WebControls.DataGridColumn : object {
    protected bool DesignMode { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("DataGridColumn_FooterStyle")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
public TableItemStyle FooterStyle { get; }
    internal TableItemStyle FooterStyleInternal { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("DataGridColumn_FooterText")]
public string FooterText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("DataGridColumn_HeaderImageUrl")]
public string HeaderImageUrl { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("DataGridColumn_HeaderStyle")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
public TableItemStyle HeaderStyle { get; }
    internal TableItemStyle HeaderStyleInternal { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("DataGridColumn_HeaderText")]
public string HeaderText { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("DataGridColumn_ItemStyle")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
public TableItemStyle ItemStyle { get; }
    internal TableItemStyle ItemStyleInternal { get; }
    protected DataGrid Owner { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("DataGridColumn_SortExpression")]
public string SortExpression { get; public set; }
    protected StateBag ViewState { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("DataGridColumn_Visible")]
public bool Visible { get; public set; }
    protected bool IsTrackingViewState { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    protected bool get_DesignMode();
    public virtual TableItemStyle get_FooterStyle();
    internal TableItemStyle get_FooterStyleInternal();
    public virtual string get_FooterText();
    public virtual void set_FooterText(string value);
    public virtual string get_HeaderImageUrl();
    public virtual void set_HeaderImageUrl(string value);
    public virtual TableItemStyle get_HeaderStyle();
    internal TableItemStyle get_HeaderStyleInternal();
    public virtual string get_HeaderText();
    public virtual void set_HeaderText(string value);
    public virtual TableItemStyle get_ItemStyle();
    internal TableItemStyle get_ItemStyleInternal();
    protected DataGrid get_Owner();
    public virtual string get_SortExpression();
    public virtual void set_SortExpression(string value);
    protected StateBag get_ViewState();
    public bool get_Visible();
    public void set_Visible(bool value);
    public virtual void Initialize();
    public virtual void InitializeCell(TableCell cell, int columnIndex, ListItemType itemType);
    protected bool get_IsTrackingViewState();
    protected virtual void LoadViewState(object savedState);
    protected virtual void TrackViewState();
    protected virtual void OnColumnChanged();
    protected virtual object SaveViewState();
    internal void SetOwner(DataGrid owner);
    public virtual string ToString();
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object state);
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.DataGridColumnCollection : object {
    [BrowsableAttribute("False")]
public int Count { get; }
    [BrowsableAttribute("False")]
public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]
public bool IsSynchronized { get; }
    [BrowsableAttribute("False")]
public object SyncRoot { get; }
    [BrowsableAttribute("False")]
public DataGridColumn Item { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public DataGridColumnCollection(DataGrid owner, ArrayList columns);
    public sealed virtual int get_Count();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public DataGridColumn get_Item(int index);
    public void Add(DataGridColumn column);
    public void AddAt(int index, DataGridColumn column);
    public void Clear();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public int IndexOf(DataGridColumn column);
    public void RemoveAt(int index);
    public void Remove(DataGridColumn column);
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object savedState);
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
}
public class System.Web.UI.WebControls.DataGridCommandEventArgs : CommandEventArgs {
    public object CommandSource { get; }
    public DataGridItem Item { get; }
    public DataGridCommandEventArgs(DataGridItem item, object commandSource, CommandEventArgs originalArgs);
    public object get_CommandSource();
    public DataGridItem get_Item();
}
public class System.Web.UI.WebControls.DataGridCommandEventHandler : MulticastDelegate {
    public DataGridCommandEventHandler(object object, IntPtr method);
    public virtual void Invoke(object source, DataGridCommandEventArgs e);
    public virtual IAsyncResult BeginInvoke(object source, DataGridCommandEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.DataGridItem : TableRow {
    public object DataItem { get; public set; }
    public int DataSetIndex { get; }
    public int ItemIndex { get; }
    public ListItemType ItemType { get; }
    private object System.Web.UI.IDataItemContainer.DataItem { get; }
    private int System.Web.UI.IDataItemContainer.DataItemIndex { get; }
    private int System.Web.UI.IDataItemContainer.DisplayIndex { get; }
    public DataGridItem(int itemIndex, int dataSetIndex, ListItemType itemType);
    public virtual object get_DataItem();
    public virtual void set_DataItem(object value);
    public virtual int get_DataSetIndex();
    public virtual int get_ItemIndex();
    public virtual ListItemType get_ItemType();
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
    protected internal virtual void SetItemType(ListItemType itemType);
    private sealed virtual override object System.Web.UI.IDataItemContainer.get_DataItem();
    private sealed virtual override int System.Web.UI.IDataItemContainer.get_DataItemIndex();
    private sealed virtual override int System.Web.UI.IDataItemContainer.get_DisplayIndex();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.DataGridItemCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public DataGridItem Item { get; }
    public DataGridItemCollection(ArrayList items);
    public sealed virtual int get_Count();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public DataGridItem get_Item(int index);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
public class System.Web.UI.WebControls.DataGridItemEventArgs : EventArgs {
    public DataGridItem Item { get; }
    public DataGridItemEventArgs(DataGridItem item);
    public DataGridItem get_Item();
}
public class System.Web.UI.WebControls.DataGridItemEventHandler : MulticastDelegate {
    public DataGridItemEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[SupportsEventValidationAttribute]
internal class System.Web.UI.WebControls.DataGridLinkButton : LinkButton {
    protected internal virtual void Render(HtmlTextWriter writer);
}
public class System.Web.UI.WebControls.DataGridPageChangedEventArgs : EventArgs {
    public object CommandSource { get; }
    public int NewPageIndex { get; }
    public DataGridPageChangedEventArgs(object commandSource, int newPageIndex);
    public object get_CommandSource();
    public int get_NewPageIndex();
}
public class System.Web.UI.WebControls.DataGridPageChangedEventHandler : MulticastDelegate {
    public DataGridPageChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object source, DataGridPageChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object source, DataGridPageChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.DataGridPagerStyle : TableItemStyle {
    internal bool IsPagerOnBottom { get; }
    internal bool IsPagerOnTop { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("DataGridPagerStyle_Mode")]
public PagerMode Mode { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("&gt;")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("PagerSettings_NextPageText")]
public string NextPageText { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("10")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("DataGridPagerStyle_PageButtonCount")]
public int PageButtonCount { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("DataGridPagerStyle_Position")]
public PagerPosition Position { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("&lt;")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("PagerSettings_PreviousPageText")]
public string PrevPageText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("DataGridPagerStyle_Visible")]
public bool Visible { get; public set; }
    internal DataGridPagerStyle(DataGrid owner);
    internal bool get_IsPagerOnBottom();
    internal bool get_IsPagerOnTop();
    public PagerMode get_Mode();
    public void set_Mode(PagerMode value);
    public string get_NextPageText();
    public void set_NextPageText(string value);
    public int get_PageButtonCount();
    public void set_PageButtonCount(int value);
    public PagerPosition get_Position();
    public void set_Position(PagerPosition value);
    public string get_PrevPageText();
    public void set_PrevPageText(string value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public virtual void CopyFrom(Style s);
    public virtual void MergeWith(Style s);
    public virtual void Reset();
}
public class System.Web.UI.WebControls.DataGridSortCommandEventArgs : EventArgs {
    public object CommandSource { get; }
    public string SortExpression { get; }
    public DataGridSortCommandEventArgs(object commandSource, DataGridCommandEventArgs dce);
    public object get_CommandSource();
    public string get_SortExpression();
}
public class System.Web.UI.WebControls.DataGridSortCommandEventHandler : MulticastDelegate {
    public DataGridSortCommandEventHandler(object object, IntPtr method);
    public virtual void Invoke(object source, DataGridSortCommandEventArgs e);
    public virtual IAsyncResult BeginInvoke(object source, DataGridSortCommandEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.DataKey : object {
    protected bool IsTrackingViewState { get; }
    public object Item { get; }
    public object Item { get; }
    public object Value { get; }
    public IOrderedDictionary Values { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public DataKey(IOrderedDictionary keyTable);
    public DataKey(IOrderedDictionary keyTable, String[] keyNames);
    protected virtual bool get_IsTrackingViewState();
    public virtual object get_Item(int index);
    public virtual object get_Item(string name);
    public virtual object get_Value();
    public virtual IOrderedDictionary get_Values();
    protected virtual void LoadViewState(object state);
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object state);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
    public sealed virtual bool Equals(DataKey other);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.DataKeyArray : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public DataKey Item { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public DataKeyArray(ArrayList keys);
    public sealed virtual int get_Count();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public DataKey get_Item(int index);
    public void CopyTo(DataKey[] array, int index);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object state);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.DataKeyCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public object Item { get; }
    public DataKeyCollection(ArrayList keys);
    public sealed virtual int get_Count();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public object get_Item(int index);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
[ControlValuePropertyAttribute("SelectedValue")]
[EditorAttribute("System.Web.UI.Design.WebControls.DataListComponentEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.ComponentEditor")]
[DesignerAttribute("System.Web.UI.Design.WebControls.DataListDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.UI.WebControls.DataList : BaseDataList {
    public static string SelectCommandName;
    public static string EditCommandName;
    public static string UpdateCommandName;
    public static string CancelCommandName;
    public static string DeleteCommandName;
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DataList_AlternatingItemStyle")]
public TableItemStyle AlternatingItemStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.DataListItem")]
[WebSysDescriptionAttribute("DataList_AlternatingItemTemplate")]
public ITemplate AlternatingItemTemplate { get; public set; }
    [WebCategoryAttribute("Default")]
[DefaultValueAttribute("-1")]
[WebSysDescriptionAttribute("DataList_EditItemIndex")]
public int EditItemIndex { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DataList_EditItemStyle")]
public TableItemStyle EditItemStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.DataListItem")]
[WebSysDescriptionAttribute("DataList_EditItemTemplate")]
public ITemplate EditItemTemplate { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("DataList_ExtractTemplateRows")]
public bool ExtractTemplateRows { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DataControls_FooterStyle")]
public TableItemStyle FooterStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.DataListItem")]
[WebSysDescriptionAttribute("DataList_FooterTemplate")]
public ITemplate FooterTemplate { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GridLines GridLines { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DataControls_HeaderStyle")]
public TableItemStyle HeaderStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.DataListItem")]
[WebSysDescriptionAttribute("DataList_HeaderTemplate")]
public ITemplate HeaderTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("DataList_Items")]
public DataListItemCollection Items { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DataList_ItemStyle")]
public TableItemStyle ItemStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.DataListItem")]
[WebSysDescriptionAttribute("DataList_ItemTemplate")]
public ITemplate ItemTemplate { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("0")]
[WebSysDescriptionAttribute("DataList_RepeatColumns")]
public int RepeatColumns { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Item_RepeatDirection")]
public RepeatDirection RepeatDirection { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("WebControl_RepeatLayout")]
public RepeatLayout RepeatLayout { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("-1")]
[WebSysDescriptionAttribute("WebControl_SelectedIndex")]
public int SelectedIndex { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("DataList_SelectedItem")]
public DataListItem SelectedItem { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DataList_SelectedItemStyle")]
public TableItemStyle SelectedItemStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.DataListItem")]
[WebSysDescriptionAttribute("DataList_SelectedItemTemplate")]
public ITemplate SelectedItemTemplate { get; public set; }
    [BrowsableAttribute("False")]
public object SelectedValue { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DataList_SeparatorStyle")]
public TableItemStyle SeparatorStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.DataListItem")]
[WebSysDescriptionAttribute("DataList_SeparatorTemplate")]
public ITemplate SeparatorTemplate { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("DataControls_ShowFooter")]
public bool ShowFooter { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("DataControls_ShowHeader")]
public bool ShowHeader { get; public set; }
    protected HtmlTextWriterTag TagKey { get; }
    private bool System.Web.UI.WebControls.IRepeatInfoUser.HasFooter { get; }
    private bool System.Web.UI.WebControls.IRepeatInfoUser.HasHeader { get; }
    private bool System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators { get; }
    private int System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount { get; }
    private IEnumerable System.Web.UI.WebControls.IWizardSideBarListControl.Items { get; }
    private static DataList();
    public virtual TableItemStyle get_AlternatingItemStyle();
    public virtual ITemplate get_AlternatingItemTemplate();
    public virtual void set_AlternatingItemTemplate(ITemplate value);
    public virtual int get_EditItemIndex();
    public virtual void set_EditItemIndex(int value);
    public virtual TableItemStyle get_EditItemStyle();
    public virtual ITemplate get_EditItemTemplate();
    public virtual void set_EditItemTemplate(ITemplate value);
    public virtual bool get_ExtractTemplateRows();
    public virtual void set_ExtractTemplateRows(bool value);
    public virtual TableItemStyle get_FooterStyle();
    public virtual ITemplate get_FooterTemplate();
    public virtual void set_FooterTemplate(ITemplate value);
    public virtual GridLines get_GridLines();
    public virtual void set_GridLines(GridLines value);
    public virtual TableItemStyle get_HeaderStyle();
    public virtual ITemplate get_HeaderTemplate();
    public virtual void set_HeaderTemplate(ITemplate value);
    public virtual DataListItemCollection get_Items();
    public virtual TableItemStyle get_ItemStyle();
    public virtual ITemplate get_ItemTemplate();
    public virtual void set_ItemTemplate(ITemplate value);
    public virtual int get_RepeatColumns();
    public virtual void set_RepeatColumns(int value);
    public virtual RepeatDirection get_RepeatDirection();
    public virtual void set_RepeatDirection(RepeatDirection value);
    public virtual RepeatLayout get_RepeatLayout();
    public virtual void set_RepeatLayout(RepeatLayout value);
    public virtual int get_SelectedIndex();
    public virtual void set_SelectedIndex(int value);
    public virtual DataListItem get_SelectedItem();
    public virtual TableItemStyle get_SelectedItemStyle();
    public virtual ITemplate get_SelectedItemTemplate();
    public virtual void set_SelectedItemTemplate(ITemplate value);
    public object get_SelectedValue();
    public virtual TableItemStyle get_SeparatorStyle();
    public virtual ITemplate get_SeparatorTemplate();
    public virtual void set_SeparatorTemplate(ITemplate value);
    public virtual bool get_ShowFooter();
    public virtual void set_ShowFooter(bool value);
    public virtual bool get_ShowHeader();
    public virtual void set_ShowHeader(bool value);
    protected virtual HtmlTextWriterTag get_TagKey();
    public void add_CancelCommand(DataListCommandEventHandler value);
    public void remove_CancelCommand(DataListCommandEventHandler value);
    public void add_DeleteCommand(DataListCommandEventHandler value);
    public void remove_DeleteCommand(DataListCommandEventHandler value);
    public void add_EditCommand(DataListCommandEventHandler value);
    public void remove_EditCommand(DataListCommandEventHandler value);
    public void add_ItemCommand(DataListCommandEventHandler value);
    public void remove_ItemCommand(DataListCommandEventHandler value);
    public void add_ItemCreated(DataListItemEventHandler value);
    public void remove_ItemCreated(DataListItemEventHandler value);
    public void add_ItemDataBound(DataListItemEventHandler value);
    public void remove_ItemDataBound(DataListItemEventHandler value);
    public void add_UpdateCommand(DataListCommandEventHandler value);
    public void remove_UpdateCommand(DataListCommandEventHandler value);
    protected virtual void CreateControlHierarchy(bool useDataSource);
    protected virtual Style CreateControlStyle();
    protected virtual DataListItem CreateItem(int itemIndex, ListItemType itemType);
    protected virtual void InitializeItem(DataListItem item);
    protected virtual void LoadViewState(object savedState);
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
    protected virtual void OnCancelCommand(DataListCommandEventArgs e);
    protected virtual void OnDeleteCommand(DataListCommandEventArgs e);
    protected virtual void OnEditCommand(DataListCommandEventArgs e);
    protected internal virtual void OnInit(EventArgs e);
    protected virtual void OnItemCommand(DataListCommandEventArgs e);
    protected virtual void OnItemCreated(DataListItemEventArgs e);
    protected virtual void OnItemDataBound(DataListItemEventArgs e);
    protected virtual void OnUpdateCommand(DataListCommandEventArgs e);
    protected internal virtual void PrepareControlHierarchy();
    protected internal virtual void RenderContents(HtmlTextWriter writer);
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
    private sealed virtual override bool System.Web.UI.WebControls.IRepeatInfoUser.get_HasFooter();
    private sealed virtual override bool System.Web.UI.WebControls.IRepeatInfoUser.get_HasHeader();
    private sealed virtual override bool System.Web.UI.WebControls.IRepeatInfoUser.get_HasSeparators();
    private sealed virtual override int System.Web.UI.WebControls.IRepeatInfoUser.get_RepeatedItemCount();
    private sealed virtual override Style System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle(ListItemType itemType, int repeatIndex);
    private sealed virtual override void System.Web.UI.WebControls.IRepeatInfoUser.RenderItem(ListItemType itemType, int repeatIndex, RepeatInfo repeatInfo, HtmlTextWriter writer);
    private sealed virtual override IEnumerable System.Web.UI.WebControls.IWizardSideBarListControl.get_Items();
    private sealed virtual override void System.Web.UI.WebControls.IWizardSideBarListControl.add_ItemCommand(CommandEventHandler value);
    private sealed virtual override void System.Web.UI.WebControls.IWizardSideBarListControl.remove_ItemCommand(CommandEventHandler value);
    private sealed virtual override void System.Web.UI.WebControls.IWizardSideBarListControl.add_ItemDataBound(EventHandler`1<WizardSideBarListControlItemEventArgs> value);
    private sealed virtual override void System.Web.UI.WebControls.IWizardSideBarListControl.remove_ItemDataBound(EventHandler`1<WizardSideBarListControlItemEventArgs> value);
}
public class System.Web.UI.WebControls.DataListCommandEventArgs : CommandEventArgs {
    public DataListItem Item { get; }
    public object CommandSource { get; }
    public DataListCommandEventArgs(DataListItem item, object commandSource, CommandEventArgs originalArgs);
    public DataListItem get_Item();
    public object get_CommandSource();
}
public class System.Web.UI.WebControls.DataListCommandEventHandler : MulticastDelegate {
    public DataListCommandEventHandler(object object, IntPtr method);
    public virtual void Invoke(object source, DataListCommandEventArgs e);
    public virtual IAsyncResult BeginInvoke(object source, DataListCommandEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ToolboxItemAttribute("False")]
public class System.Web.UI.WebControls.DataListItem : WebControl {
    public object DataItem { get; public set; }
    public int ItemIndex { get; }
    public ListItemType ItemType { get; }
    public bool SupportsDisabledAttribute { get; }
    private object System.Web.UI.IDataItemContainer.DataItem { get; }
    private int System.Web.UI.IDataItemContainer.DataItemIndex { get; }
    private int System.Web.UI.IDataItemContainer.DisplayIndex { get; }
    public DataListItem(int itemIndex, ListItemType itemType);
    public virtual object get_DataItem();
    public virtual void set_DataItem(object value);
    public virtual int get_ItemIndex();
    public virtual ListItemType get_ItemType();
    public virtual bool get_SupportsDisabledAttribute();
    protected virtual Style CreateControlStyle();
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
    public virtual void RenderItem(HtmlTextWriter writer, bool extractRows, bool tableLayout);
    protected internal virtual void SetItemType(ListItemType itemType);
    private sealed virtual override object System.Web.UI.IDataItemContainer.get_DataItem();
    private sealed virtual override int System.Web.UI.IDataItemContainer.get_DataItemIndex();
    private sealed virtual override int System.Web.UI.IDataItemContainer.get_DisplayIndex();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.DataListItemCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public DataListItem Item { get; }
    public DataListItemCollection(ArrayList items);
    public sealed virtual int get_Count();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public DataListItem get_Item(int index);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
public class System.Web.UI.WebControls.DataListItemEventArgs : EventArgs {
    public DataListItem Item { get; }
    public DataListItemEventArgs(DataListItem item);
    public DataListItem get_Item();
}
public class System.Web.UI.WebControls.DataListItemEventHandler : MulticastDelegate {
    public DataListItemEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataListItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataListItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.DataSourceSelectResultProcessingOptions : object {
    public bool AutoPage { get; public set; }
    public bool AutoSort { get; public set; }
    public Type ModelType { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AutoPage();
    [CompilerGeneratedAttribute]
public void set_AutoPage(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoSort();
    [CompilerGeneratedAttribute]
public void set_AutoSort(bool value);
    [CompilerGeneratedAttribute]
public Type get_ModelType();
    [CompilerGeneratedAttribute]
public void set_ModelType(Type value);
}
public enum System.Web.UI.WebControls.DayNameFormat : Enum {
    public int value__;
    public static DayNameFormat Full;
    public static DayNameFormat Short;
    public static DayNameFormat FirstLetter;
    public static DayNameFormat FirstTwoLetters;
    public static DayNameFormat Shortest;
}
public class System.Web.UI.WebControls.DayRenderEventArgs : object {
    public TableCell Cell { get; }
    public CalendarDay Day { get; }
    public string SelectUrl { get; }
    public DayRenderEventArgs(TableCell cell, CalendarDay day);
    public DayRenderEventArgs(TableCell cell, CalendarDay day, string selectUrl);
    public TableCell get_Cell();
    public CalendarDay get_Day();
    public string get_SelectUrl();
}
public class System.Web.UI.WebControls.DayRenderEventHandler : MulticastDelegate {
    public DayRenderEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DayRenderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DayRenderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DesignerAttribute("System.Web.UI.Design.WebControls.DetailsViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ControlValuePropertyAttribute("SelectedValue")]
[DefaultEventAttribute("PageIndexChanging")]
[ToolboxDataAttribute("<{0}:DetailsView runat="server" Width="125px" Height="50px"></{0}:DetailsView>")]
[SupportsEventValidationAttribute]
[DataKeyPropertyAttribute("DataKey")]
public class System.Web.UI.WebControls.DetailsView : CompositeDataBoundControl {
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataBoundControl_UpdateMethod")]
public string UpdateMethod { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataBoundControl_DeleteMethod")]
public string DeleteMethod { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataBoundControl_InsertMethod")]
public string InsertMethod { get; public set; }
    [WebCategoryAttribute("Paging")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("DetailsView_AllowPaging")]
public bool AllowPaging { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DetailsView_AlternatingRowStyle")]
public TableItemStyle AlternatingRowStyle { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("DetailsView_AutoGenerateDeleteButton")]
public bool AutoGenerateDeleteButton { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("DetailsView_AutoGenerateEditButton")]
public bool AutoGenerateEditButton { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("DetailsView_AutoGenerateInsertButton")]
public bool AutoGenerateInsertButton { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("DetailsView_AutoGenerateRows")]
public bool AutoGenerateRows { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("WebControl_BackImageUrl")]
public string BackImageUrl { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DetailsViewRow BottomPagerRow { get; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("DataControls_Caption")]
public string Caption { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("WebControl_CaptionAlign")]
public TableCaptionAlign CaptionAlign { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("-1")]
[WebSysDescriptionAttribute("DetailsView_CellPadding")]
public int CellPadding { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("0")]
[WebSysDescriptionAttribute("DetailsView_CellSpacing")]
public int CellSpacing { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DetailsView_CommandRowStyle")]
public TableItemStyle CommandRowStyle { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DetailsViewMode CurrentMode { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object DataItem { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int DataItemCount { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int DataItemIndex { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.DataFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Web.UI.WebControls.StringArrayConverter")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataControls_DataKeyNames")]
public String[] DataKeyNames { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("DetailsView_DataKey")]
public DataKey DataKey { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("View_DefaultMode")]
public DetailsViewMode DefaultMode { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("View_EditRowStyle")]
public TableItemStyle EditRowStyle { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("View_EmptyDataRowStyle")]
public TableItemStyle EmptyDataRowStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.DetailsView")]
[WebSysDescriptionAttribute("View_EmptyDataTemplate")]
public ITemplate EmptyDataTemplate { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("View_EmptyDataText")]
public string EmptyDataText { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("DataBoundControl_EnableModelValidation")]
public bool EnableModelValidation { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("DetailsView_EnablePagingCallbacks")]
public bool EnablePagingCallbacks { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DetailsView_FieldHeaderStyle")]
public TableItemStyle FieldHeaderStyle { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.DataControlFieldTypeEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Default")]
[WebSysDescriptionAttribute("DetailsView_Fields")]
public DataControlFieldCollection Fields { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DetailsViewRow FooterRow { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DetailsView_FooterStyle")]
public TableItemStyle FooterStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.DetailsView")]
[WebSysDescriptionAttribute("DetailsView_FooterTemplate")]
public ITemplate FooterTemplate { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("View_FooterText")]
public string FooterText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("DataControls_GridLines")]
public GridLines GridLines { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DetailsViewRow HeaderRow { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("WebControl_HeaderStyle")]
public TableItemStyle HeaderStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.DetailsView")]
[WebSysDescriptionAttribute("WebControl_HeaderTemplate")]
public ITemplate HeaderTemplate { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("View_HeaderText")]
public string HeaderText { get; public set; }
    [CategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("WebControl_HorizontalAlign")]
public HorizontalAlign HorizontalAlign { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("View_InsertRowStyle")]
public TableItemStyle InsertRowStyle { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int PageCount { get; }
    [BindableAttribute("True")]
[DefaultValueAttribute("0")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DetailsView_PageIndex")]
public int PageIndex { get; public set; }
    [WebCategoryAttribute("Paging")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DetailsView_PagerSettings")]
public PagerSettings PagerSettings { get; }
    [WebCategoryAttribute("Styles")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("WebControl_PagerStyle")]
public TableItemStyle PagerStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.DetailsView")]
[WebSysDescriptionAttribute("View_PagerTemplate")]
public ITemplate PagerTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("DetailsView_Rows")]
public DetailsViewRowCollection Rows { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IAutoFieldGenerator RowsGenerator { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("View_RowStyle")]
public TableItemStyle RowStyle { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object SelectedValue { get; }
    protected HtmlTextWriterTag TagKey { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DetailsViewRow TopPagerRow { get; }
    private int System.Web.UI.IDataItemContainer.DataItemIndex { get; }
    private int System.Web.UI.IDataItemContainer.DisplayIndex { get; }
    private DataKey System.Web.UI.WebControls.IDataBoundItemControl.DataKey { get; }
    private DataBoundControlMode System.Web.UI.WebControls.IDataBoundItemControl.Mode { get; }
    private string System.Web.UI.WebControls.IDataBoundControl.DataSourceID { get; private set; }
    private IDataSource System.Web.UI.WebControls.IDataBoundControl.DataSourceObject { get; }
    private object System.Web.UI.WebControls.IDataBoundControl.DataSource { get; private set; }
    private String[] System.Web.UI.WebControls.IDataBoundControl.DataKeyNames { get; private set; }
    private string System.Web.UI.WebControls.IDataBoundControl.DataMember { get; private set; }
    private IAutoFieldGenerator System.Web.UI.WebControls.IFieldControl.FieldsGenerator { get; private set; }
    private static DetailsView();
    public virtual string get_UpdateMethod();
    public virtual void set_UpdateMethod(string value);
    public virtual string get_DeleteMethod();
    public virtual void set_DeleteMethod(string value);
    public virtual string get_InsertMethod();
    public virtual void set_InsertMethod(string value);
    public virtual bool get_AllowPaging();
    public virtual void set_AllowPaging(bool value);
    public TableItemStyle get_AlternatingRowStyle();
    public virtual bool get_AutoGenerateDeleteButton();
    public virtual void set_AutoGenerateDeleteButton(bool value);
    public virtual bool get_AutoGenerateEditButton();
    public virtual void set_AutoGenerateEditButton(bool value);
    public virtual bool get_AutoGenerateInsertButton();
    public virtual void set_AutoGenerateInsertButton(bool value);
    public virtual bool get_AutoGenerateRows();
    public virtual void set_AutoGenerateRows(bool value);
    public virtual string get_BackImageUrl();
    public virtual void set_BackImageUrl(string value);
    public virtual DetailsViewRow get_BottomPagerRow();
    public virtual string get_Caption();
    public virtual void set_Caption(string value);
    public virtual TableCaptionAlign get_CaptionAlign();
    public virtual void set_CaptionAlign(TableCaptionAlign value);
    public virtual int get_CellPadding();
    public virtual void set_CellPadding(int value);
    public virtual int get_CellSpacing();
    public virtual void set_CellSpacing(int value);
    public TableItemStyle get_CommandRowStyle();
    public DetailsViewMode get_CurrentMode();
    public virtual object get_DataItem();
    public int get_DataItemCount();
    public virtual int get_DataItemIndex();
    public virtual String[] get_DataKeyNames();
    public virtual void set_DataKeyNames(String[] value);
    public virtual DataKey get_DataKey();
    public virtual DetailsViewMode get_DefaultMode();
    public virtual void set_DefaultMode(DetailsViewMode value);
    public TableItemStyle get_EditRowStyle();
    public TableItemStyle get_EmptyDataRowStyle();
    public virtual ITemplate get_EmptyDataTemplate();
    public virtual void set_EmptyDataTemplate(ITemplate value);
    public virtual string get_EmptyDataText();
    public virtual void set_EmptyDataText(string value);
    public virtual bool get_EnableModelValidation();
    public virtual void set_EnableModelValidation(bool value);
    public virtual bool get_EnablePagingCallbacks();
    public virtual void set_EnablePagingCallbacks(bool value);
    public TableItemStyle get_FieldHeaderStyle();
    public virtual DataControlFieldCollection get_Fields();
    public virtual DetailsViewRow get_FooterRow();
    public TableItemStyle get_FooterStyle();
    public virtual ITemplate get_FooterTemplate();
    public virtual void set_FooterTemplate(ITemplate value);
    public virtual string get_FooterText();
    public virtual void set_FooterText(string value);
    public virtual GridLines get_GridLines();
    public virtual void set_GridLines(GridLines value);
    public virtual DetailsViewRow get_HeaderRow();
    public TableItemStyle get_HeaderStyle();
    public virtual ITemplate get_HeaderTemplate();
    public virtual void set_HeaderTemplate(ITemplate value);
    public virtual string get_HeaderText();
    public virtual void set_HeaderText(string value);
    public virtual HorizontalAlign get_HorizontalAlign();
    public virtual void set_HorizontalAlign(HorizontalAlign value);
    public TableItemStyle get_InsertRowStyle();
    public virtual int get_PageCount();
    public virtual int get_PageIndex();
    public virtual void set_PageIndex(int value);
    public virtual PagerSettings get_PagerSettings();
    public TableItemStyle get_PagerStyle();
    public virtual ITemplate get_PagerTemplate();
    public virtual void set_PagerTemplate(ITemplate value);
    public virtual DetailsViewRowCollection get_Rows();
    public IAutoFieldGenerator get_RowsGenerator();
    public void set_RowsGenerator(IAutoFieldGenerator value);
    public TableItemStyle get_RowStyle();
    public object get_SelectedValue();
    protected virtual HtmlTextWriterTag get_TagKey();
    public virtual DetailsViewRow get_TopPagerRow();
    public void add_ItemCommand(DetailsViewCommandEventHandler value);
    public void remove_ItemCommand(DetailsViewCommandEventHandler value);
    public void add_ItemCreated(EventHandler value);
    public void remove_ItemCreated(EventHandler value);
    public void add_ItemDeleted(DetailsViewDeletedEventHandler value);
    public void remove_ItemDeleted(DetailsViewDeletedEventHandler value);
    public void add_ItemDeleting(DetailsViewDeleteEventHandler value);
    public void remove_ItemDeleting(DetailsViewDeleteEventHandler value);
    public void add_ItemInserted(DetailsViewInsertedEventHandler value);
    public void remove_ItemInserted(DetailsViewInsertedEventHandler value);
    public void add_ItemInserting(DetailsViewInsertEventHandler value);
    public void remove_ItemInserting(DetailsViewInsertEventHandler value);
    public void add_ItemUpdated(DetailsViewUpdatedEventHandler value);
    public void remove_ItemUpdated(DetailsViewUpdatedEventHandler value);
    public void add_ItemUpdating(DetailsViewUpdateEventHandler value);
    public void remove_ItemUpdating(DetailsViewUpdateEventHandler value);
    public void add_ModeChanged(EventHandler value);
    public void remove_ModeChanged(EventHandler value);
    public void add_ModeChanging(DetailsViewModeEventHandler value);
    public void remove_ModeChanging(DetailsViewModeEventHandler value);
    public void add_PageIndexChanged(EventHandler value);
    public void remove_PageIndexChanged(EventHandler value);
    public void add_PageIndexChanging(DetailsViewPageEventHandler value);
    public void remove_PageIndexChanging(DetailsViewPageEventHandler value);
    public void ChangeMode(DetailsViewMode newMode);
    protected virtual AutoGeneratedField CreateAutoGeneratedRow(AutoGeneratedFieldProperties fieldProperties);
    protected virtual ICollection CreateAutoGeneratedRows(object dataItem);
    protected virtual int CreateChildControls(IEnumerable dataSource, bool dataBinding);
    protected virtual Style CreateControlStyle();
    protected virtual DataSourceSelectArguments CreateDataSourceSelectArguments();
    protected virtual ICollection CreateFieldSet(object dataItem, bool useDataSource);
    protected virtual DetailsViewRow CreateRow(int rowIndex, DataControlRowType rowType, DataControlRowState rowState);
    protected virtual Table CreateTable();
    public sealed virtual void DataBind();
    public virtual void DeleteItem();
    protected virtual void EnsureDataBound();
    internal static void ExtractRowValues(Object[] fields, DetailsViewRowCollection rows, String[] dataKeyNames, IOrderedDictionary fieldValues, bool includeReadOnlyFields, bool includeKeys);
    protected virtual void ExtractRowValues(IOrderedDictionary fieldValues, bool includeReadOnlyFields, bool includeKeys);
    protected virtual string GetCallbackResult();
    protected virtual string GetCallbackScript(IButtonControl buttonControl, string argument);
    protected virtual void InitializePager(DetailsViewRow row, PagedDataSource pagedDataSource);
    protected virtual void InitializeRow(DetailsViewRow row, DataControlField field);
    public virtual void InsertItem(bool causesValidation);
    public virtual bool IsBindableType(Type type);
    protected internal virtual void LoadControlState(object savedState);
    protected virtual void LoadViewState(object savedState);
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
    protected virtual void OnDataSourceViewChanged(object sender, EventArgs e);
    protected internal virtual void OnInit(EventArgs e);
    protected virtual void OnItemCommand(DetailsViewCommandEventArgs e);
    protected virtual void OnItemCreated(EventArgs e);
    protected virtual void OnItemDeleted(DetailsViewDeletedEventArgs e);
    protected virtual void OnItemDeleting(DetailsViewDeleteEventArgs e);
    protected virtual void OnItemInserted(DetailsViewInsertedEventArgs e);
    protected virtual void OnItemInserting(DetailsViewInsertEventArgs e);
    protected virtual void OnItemUpdated(DetailsViewUpdatedEventArgs e);
    protected virtual void OnItemUpdating(DetailsViewUpdateEventArgs e);
    protected virtual void OnModeChanged(EventArgs e);
    protected virtual void OnModeChanging(DetailsViewModeEventArgs e);
    protected virtual void OnPageIndexChanged(EventArgs e);
    protected virtual void OnPageIndexChanging(DetailsViewPageEventArgs e);
    protected virtual void OnPagePreLoad(object sender, EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void PerformDataBinding(IEnumerable data);
    protected internal virtual void PrepareControlHierarchy();
    protected virtual void RaiseCallbackEvent(string eventArgument);
    protected virtual void RaisePostBackEvent(string eventArgument);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected internal virtual object SaveControlState();
    protected virtual object SaveViewState();
    public void SetPageIndex(int index);
    protected virtual void TrackViewState();
    public virtual void UpdateItem(bool causesValidation);
    internal virtual void UpdateModelDataSourceProperties(ModelDataSource modelDataSource);
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    private sealed virtual override PostBackOptions System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(IButtonControl buttonControl);
    private sealed virtual override string System.Web.UI.WebControls.ICallbackContainer.GetCallbackScript(IButtonControl buttonControl, string argument);
    private sealed virtual override void System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(string eventArgument);
    private sealed virtual override string System.Web.UI.ICallbackEventHandler.GetCallbackResult();
    private sealed virtual override int System.Web.UI.IDataItemContainer.get_DataItemIndex();
    private sealed virtual override int System.Web.UI.IDataItemContainer.get_DisplayIndex();
    private sealed virtual override DataKey System.Web.UI.WebControls.IDataBoundItemControl.get_DataKey();
    private sealed virtual override DataBoundControlMode System.Web.UI.WebControls.IDataBoundItemControl.get_Mode();
    private sealed virtual override string System.Web.UI.WebControls.IDataBoundControl.get_DataSourceID();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundControl.set_DataSourceID(string value);
    private sealed virtual override IDataSource System.Web.UI.WebControls.IDataBoundControl.get_DataSourceObject();
    private sealed virtual override object System.Web.UI.WebControls.IDataBoundControl.get_DataSource();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundControl.set_DataSource(object value);
    private sealed virtual override String[] System.Web.UI.WebControls.IDataBoundControl.get_DataKeyNames();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundControl.set_DataKeyNames(String[] value);
    private sealed virtual override string System.Web.UI.WebControls.IDataBoundControl.get_DataMember();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundControl.set_DataMember(string value);
    private sealed virtual override IAutoFieldGenerator System.Web.UI.WebControls.IFieldControl.get_FieldsGenerator();
    private sealed virtual override void System.Web.UI.WebControls.IFieldControl.set_FieldsGenerator(IAutoFieldGenerator value);
}
public class System.Web.UI.WebControls.DetailsViewCommandEventArgs : CommandEventArgs {
    public object CommandSource { get; }
    public bool Handled { get; public set; }
    public DetailsViewCommandEventArgs(object commandSource, CommandEventArgs originalArgs);
    public object get_CommandSource();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
public class System.Web.UI.WebControls.DetailsViewCommandEventHandler : MulticastDelegate {
    public DetailsViewCommandEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DetailsViewCommandEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DetailsViewCommandEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.DetailsViewDeletedEventArgs : EventArgs {
    public int AffectedRows { get; }
    public Exception Exception { get; }
    public bool ExceptionHandled { get; public set; }
    public IOrderedDictionary Keys { get; }
    public IOrderedDictionary Values { get; }
    public DetailsViewDeletedEventArgs(int affectedRows, Exception e);
    public int get_AffectedRows();
    public Exception get_Exception();
    public bool get_ExceptionHandled();
    public void set_ExceptionHandled(bool value);
    public IOrderedDictionary get_Keys();
    public IOrderedDictionary get_Values();
    internal void SetKeys(IOrderedDictionary keys);
    internal void SetValues(IOrderedDictionary values);
}
public class System.Web.UI.WebControls.DetailsViewDeletedEventHandler : MulticastDelegate {
    public DetailsViewDeletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DetailsViewDeletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DetailsViewDeletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.DetailsViewDeleteEventArgs : CancelEventArgs {
    public int RowIndex { get; }
    public IOrderedDictionary Keys { get; }
    public IOrderedDictionary Values { get; }
    public DetailsViewDeleteEventArgs(int rowIndex);
    public int get_RowIndex();
    public IOrderedDictionary get_Keys();
    public IOrderedDictionary get_Values();
}
public class System.Web.UI.WebControls.DetailsViewDeleteEventHandler : MulticastDelegate {
    public DetailsViewDeleteEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DetailsViewDeleteEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DetailsViewDeleteEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.DetailsViewInsertedEventArgs : EventArgs {
    public int AffectedRows { get; }
    public Exception Exception { get; }
    public bool ExceptionHandled { get; public set; }
    public bool KeepInInsertMode { get; public set; }
    public IOrderedDictionary Values { get; }
    public DetailsViewInsertedEventArgs(int affectedRows, Exception e);
    public int get_AffectedRows();
    public Exception get_Exception();
    public bool get_ExceptionHandled();
    public void set_ExceptionHandled(bool value);
    public bool get_KeepInInsertMode();
    public void set_KeepInInsertMode(bool value);
    public IOrderedDictionary get_Values();
    internal void SetValues(IOrderedDictionary values);
}
public class System.Web.UI.WebControls.DetailsViewInsertedEventHandler : MulticastDelegate {
    public DetailsViewInsertedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DetailsViewInsertedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DetailsViewInsertedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.DetailsViewInsertEventArgs : CancelEventArgs {
    public object CommandArgument { get; }
    public IOrderedDictionary Values { get; }
    public DetailsViewInsertEventArgs(object commandArgument);
    public object get_CommandArgument();
    public IOrderedDictionary get_Values();
}
public class System.Web.UI.WebControls.DetailsViewInsertEventHandler : MulticastDelegate {
    public DetailsViewInsertEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DetailsViewInsertEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DetailsViewInsertEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Web.UI.WebControls.DetailsViewMode : Enum {
    public int value__;
    public static DetailsViewMode ReadOnly;
    public static DetailsViewMode Edit;
    public static DetailsViewMode Insert;
}
public class System.Web.UI.WebControls.DetailsViewModeEventArgs : CancelEventArgs {
    public bool CancelingEdit { get; }
    public DetailsViewMode NewMode { get; public set; }
    public DetailsViewModeEventArgs(DetailsViewMode mode, bool cancelingEdit);
    public bool get_CancelingEdit();
    public DetailsViewMode get_NewMode();
    public void set_NewMode(DetailsViewMode value);
}
public class System.Web.UI.WebControls.DetailsViewModeEventHandler : MulticastDelegate {
    public DetailsViewModeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DetailsViewModeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DetailsViewModeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.DetailsViewPageEventArgs : CancelEventArgs {
    public int NewPageIndex { get; public set; }
    public DetailsViewPageEventArgs(int newPageIndex);
    public int get_NewPageIndex();
    public void set_NewPageIndex(int value);
}
public class System.Web.UI.WebControls.DetailsViewPageEventHandler : MulticastDelegate {
    public DetailsViewPageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DetailsViewPageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DetailsViewPageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.DetailsViewPagerRow : DetailsViewRow {
    public DetailsViewPagerRow(int rowIndex, DataControlRowType rowType, DataControlRowState rowState);
}
public class System.Web.UI.WebControls.DetailsViewRow : TableRow {
    public int RowIndex { get; }
    public DataControlRowState RowState { get; }
    public DataControlRowType RowType { get; }
    public DetailsViewRow(int rowIndex, DataControlRowType rowType, DataControlRowState rowState);
    public virtual int get_RowIndex();
    public virtual DataControlRowState get_RowState();
    public virtual DataControlRowType get_RowType();
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.DetailsViewRowCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public DetailsViewRow Item { get; }
    public DetailsViewRowCollection(ArrayList rows);
    public sealed virtual int get_Count();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public DetailsViewRow get_Item(int index);
    public void CopyTo(DetailsViewRow[] array, int index);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
public class System.Web.UI.WebControls.DetailsViewRowsGenerator : AutoFieldsGenerator {
    public virtual List`1<AutoGeneratedField> CreateAutoGeneratedFields(object dataItem, Control control);
}
public class System.Web.UI.WebControls.DetailsViewUpdatedEventArgs : EventArgs {
    public int AffectedRows { get; }
    public Exception Exception { get; }
    public bool ExceptionHandled { get; public set; }
    public bool KeepInEditMode { get; public set; }
    public IOrderedDictionary Keys { get; }
    public IOrderedDictionary NewValues { get; }
    public IOrderedDictionary OldValues { get; }
    public DetailsViewUpdatedEventArgs(int affectedRows, Exception e);
    public int get_AffectedRows();
    public Exception get_Exception();
    public bool get_ExceptionHandled();
    public void set_ExceptionHandled(bool value);
    public bool get_KeepInEditMode();
    public void set_KeepInEditMode(bool value);
    public IOrderedDictionary get_Keys();
    public IOrderedDictionary get_NewValues();
    public IOrderedDictionary get_OldValues();
    internal void SetKeys(IOrderedDictionary keys);
    internal void SetNewValues(IOrderedDictionary newValues);
    internal void SetOldValues(IOrderedDictionary oldValues);
}
public class System.Web.UI.WebControls.DetailsViewUpdatedEventHandler : MulticastDelegate {
    public DetailsViewUpdatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DetailsViewUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DetailsViewUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.DetailsViewUpdateEventArgs : CancelEventArgs {
    public object CommandArgument { get; }
    public IOrderedDictionary Keys { get; }
    public IOrderedDictionary NewValues { get; }
    public IOrderedDictionary OldValues { get; }
    public DetailsViewUpdateEventArgs(object commandArgument);
    public object get_CommandArgument();
    public IOrderedDictionary get_Keys();
    public IOrderedDictionary get_NewValues();
    public IOrderedDictionary get_OldValues();
}
public class System.Web.UI.WebControls.DetailsViewUpdateEventHandler : MulticastDelegate {
    public DetailsViewUpdateEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DetailsViewUpdateEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DetailsViewUpdateEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[SupportsEventValidationAttribute]
[ValidationPropertyAttribute("SelectedItem")]
public class System.Web.UI.WebControls.DropDownList : ListControl {
    [BrowsableAttribute("False")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("False")]
public BorderStyle BorderStyle { get; public set; }
    [BrowsableAttribute("False")]
public Unit BorderWidth { get; public set; }
    public bool SupportsDisabledAttribute { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("0")]
[WebSysDescriptionAttribute("WebControl_SelectedIndex")]
[DesignerSerializationVisibilityAttribute("0")]
public int SelectedIndex { get; public set; }
    internal ArrayList SelectedIndicesInternal { get; }
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual BorderStyle get_BorderStyle();
    public virtual void set_BorderStyle(BorderStyle value);
    public virtual Unit get_BorderWidth();
    public virtual void set_BorderWidth(Unit value);
    public virtual bool get_SupportsDisabledAttribute();
    public virtual int get_SelectedIndex();
    public virtual void set_SelectedIndex(int value);
    internal virtual ArrayList get_SelectedIndicesInternal();
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual ControlCollection CreateControlCollection();
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    protected virtual void RaisePostDataChangedEvent();
    protected internal virtual void VerifyMultiSelect();
}
internal class System.Web.UI.WebControls.DummyDataSource : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    internal DummyDataSource(int dataItemCount);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
public class System.Web.UI.WebControls.EditCommandColumn : DataGridColumn {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ButtonColumnType ButtonType { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string CancelText { get; public set; }
    [DefaultValueAttribute("True")]
public bool CausesValidation { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string EditText { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string UpdateText { get; public set; }
    [DefaultValueAttribute("")]
public string ValidationGroup { get; public set; }
    public virtual ButtonColumnType get_ButtonType();
    public virtual void set_ButtonType(ButtonColumnType value);
    public virtual string get_CancelText();
    public virtual void set_CancelText(string value);
    public virtual bool get_CausesValidation();
    public virtual void set_CausesValidation(bool value);
    public virtual string get_EditText();
    public virtual void set_EditText(string value);
    public virtual string get_UpdateText();
    public virtual void set_UpdateText(string value);
    public virtual string get_ValidationGroup();
    public virtual void set_ValidationGroup(string value);
    public virtual void InitializeCell(TableCell cell, int columnIndex, ListItemType itemType);
}
[TypeConverterAttribute("System.Web.UI.WebControls.EmbeddedMailObject/EmbeddedMailObjectTypeConverter")]
public class System.Web.UI.WebControls.EmbeddedMailObject : object {
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("EmbeddedMailObject_Name")]
[NotifyParentPropertyAttribute("True")]
public string Name { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("EmbeddedMailObject_Path")]
[EditorAttribute("System.Web.UI.Design.MailFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[UrlPropertyAttribute]
public string Path { get; public set; }
    public EmbeddedMailObject(string name, string path);
    public string get_Name();
    public void set_Name(string value);
    public string get_Path();
    public void set_Path(string value);
}
[DefaultMemberAttribute("Item")]
[EditorAttribute("System.Web.UI.Design.WebControls.EmbeddedMailObjectCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public class System.Web.UI.WebControls.EmbeddedMailObjectsCollection : CollectionBase {
    public EmbeddedMailObject Item { get; public set; }
    public EmbeddedMailObject get_Item(int index);
    public void set_Item(int index, EmbeddedMailObject value);
    public int Add(EmbeddedMailObject value);
    public bool Contains(EmbeddedMailObject value);
    public void CopyTo(EmbeddedMailObject[] array, int index);
    public int IndexOf(EmbeddedMailObject value);
    public void Insert(int index, EmbeddedMailObject value);
    protected virtual void OnValidate(object value);
    public void Remove(EmbeddedMailObject value);
}
internal class System.Web.UI.WebControls.EmptyStringExpandableObjectConverter : ExpandableObjectConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Web.UI.WebControls.ErrorStyle : Style {
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
internal class System.Web.UI.WebControls.ErrorTableItemStyle : TableItemStyle {
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
[ControlValuePropertyAttribute("FileBytes")]
[ValidationPropertyAttribute("FileName")]
[DesignerAttribute("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.UI.WebControls.FileUpload : WebControl {
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("FileUpload_AllowMultiple")]
public bool AllowMultiple { get; public set; }
    [BindableAttribute("True")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Byte[] FileBytes { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Stream FileContent { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string FileName { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool HasFile { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool HasFiles { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HttpPostedFile PostedFile { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IList`1<HttpPostedFile> PostedFiles { get; }
    private static FileUpload();
    public virtual bool get_AllowMultiple();
    public virtual void set_AllowMultiple(bool value);
    public Byte[] get_FileBytes();
    public Stream get_FileContent();
    public string get_FileName();
    public bool get_HasFile();
    public bool get_HasFiles();
    public HttpPostedFile get_PostedFile();
    public IList`1<HttpPostedFile> get_PostedFiles();
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void Render(HtmlTextWriter writer);
    public void SaveAs(string filename);
}
internal static class System.Web.UI.WebControls.FilteredDataSetHelper : object {
    public static DataView CreateFilteredDataView(DataTable table, string sortExpression, string filterExpression, IDictionary filterParameters);
    public static DataTable GetDataTable(Control owner, object dataObject);
}
public enum System.Web.UI.WebControls.FirstDayOfWeek : Enum {
    public int value__;
    public static FirstDayOfWeek Sunday;
    public static FirstDayOfWeek Monday;
    public static FirstDayOfWeek Tuesday;
    public static FirstDayOfWeek Wednesday;
    public static FirstDayOfWeek Thursday;
    public static FirstDayOfWeek Friday;
    public static FirstDayOfWeek Saturday;
    public static FirstDayOfWeek Default;
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public class System.Web.UI.WebControls.FontInfo : object {
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("FontInfo_Bold")]
[NotifyParentPropertyAttribute("True")]
public bool Bold { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("FontInfo_Italic")]
[NotifyParentPropertyAttribute("True")]
public bool Italic { get; public set; }
    [EditorAttribute("System.Drawing.Design.FontNameEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Drawing.FontConverter/FontNameConverter")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("FontInfo_Name")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    [TypeConverterAttribute("System.Web.UI.WebControls.FontNamesConverter")]
[WebCategoryAttribute("Appearance")]
[EditorAttribute("System.Windows.Forms.Design.StringArrayEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[WebSysDescriptionAttribute("FontInfo_Names")]
[RefreshPropertiesAttribute("2")]
[NotifyParentPropertyAttribute("True")]
public String[] Names { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("FontInfo_Overline")]
[NotifyParentPropertyAttribute("True")]
public bool Overline { get; public set; }
    internal Style Owner { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("System.Web.UI.WebControls.FontUnit", "")]
[WebSysDescriptionAttribute("FontInfo_Size")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("2")]
public FontUnit Size { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("FontInfo_Strikeout")]
[NotifyParentPropertyAttribute("True")]
public bool Strikeout { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("FontInfo_Underline")]
[NotifyParentPropertyAttribute("True")]
public bool Underline { get; public set; }
    internal FontInfo(Style owner);
    public bool get_Bold();
    public void set_Bold(bool value);
    public bool get_Italic();
    public void set_Italic(bool value);
    public string get_Name();
    public void set_Name(string value);
    public String[] get_Names();
    public void set_Names(String[] value);
    public bool get_Overline();
    public void set_Overline(bool value);
    internal Style get_Owner();
    public FontUnit get_Size();
    public void set_Size(FontUnit value);
    public bool get_Strikeout();
    public void set_Strikeout(bool value);
    public bool get_Underline();
    public void set_Underline(bool value);
    public void ClearDefaults();
    public void CopyFrom(FontInfo f);
    public void MergeWith(FontInfo f);
    internal void Reset();
    public bool ShouldSerializeNames();
    public virtual string ToString();
}
public class System.Web.UI.WebControls.FontNamesConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public enum System.Web.UI.WebControls.FontSize : Enum {
    public int value__;
    public static FontSize NotSet;
    public static FontSize AsUnit;
    public static FontSize Smaller;
    public static FontSize Larger;
    public static FontSize XXSmall;
    public static FontSize XSmall;
    public static FontSize Small;
    public static FontSize Medium;
    public static FontSize Large;
    public static FontSize XLarge;
    public static FontSize XXLarge;
}
[TypeConverterAttribute("System.Web.UI.WebControls.FontUnitConverter")]
public class System.Web.UI.WebControls.FontUnit : ValueType {
    public static FontUnit Empty;
    public static FontUnit Smaller;
    public static FontUnit Larger;
    public static FontUnit XXSmall;
    public static FontUnit XSmall;
    public static FontUnit Small;
    public static FontUnit Medium;
    public static FontUnit Large;
    public static FontUnit XLarge;
    public static FontUnit XXLarge;
    private FontSize type;
    private Unit value;
    public bool IsEmpty { get; }
    public FontSize Type { get; }
    public Unit Unit { get; }
    public FontUnit(FontSize type);
    public FontUnit(Unit value);
    public FontUnit(int value);
    public FontUnit(double value);
    public FontUnit(double value, UnitType type);
    public FontUnit(string value);
    public FontUnit(string value, CultureInfo culture);
    private static FontUnit();
    public bool get_IsEmpty();
    public FontSize get_Type();
    public Unit get_Unit();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(FontUnit left, FontUnit right);
    public static bool op_Inequality(FontUnit left, FontUnit right);
    public static FontUnit Parse(string s);
    public static FontUnit Parse(string s, CultureInfo culture);
    public static FontUnit Point(int n);
    public virtual string ToString();
    public string ToString(CultureInfo culture);
    public string ToString(IFormatProvider formatProvider);
    public static FontUnit op_Implicit(int n);
}
public class System.Web.UI.WebControls.FontUnitConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
[DefaultPropertyAttribute("FormField")]
public class System.Web.UI.WebControls.FormParameter : Parameter {
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Parameter")]
[WebSysDescriptionAttribute("FormParameter_FormField")]
public string FormField { get; public set; }
    [WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Parameter_ValidateInput")]
[DefaultValueAttribute("True")]
public bool ValidateInput { get; public set; }
    public FormParameter(string name, string formField);
    public FormParameter(string name, DbType dbType, string formField);
    public FormParameter(string name, TypeCode type, string formField);
    protected FormParameter(FormParameter original);
    public string get_FormField();
    public void set_FormField(string value);
    protected virtual Parameter Clone();
    protected internal virtual object Evaluate(HttpContext context, Control control);
    public bool get_ValidateInput();
    public void set_ValidateInput(bool value);
}
[DesignerAttribute("System.Web.UI.Design.WebControls.FormViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ControlValuePropertyAttribute("SelectedValue")]
[DefaultEventAttribute("PageIndexChanging")]
[SupportsEventValidationAttribute]
[DataKeyPropertyAttribute("DataKey")]
public class System.Web.UI.WebControls.FormView : CompositeDataBoundControl {
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataBoundControl_UpdateMethod")]
public string UpdateMethod { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataBoundControl_DeleteMethod")]
public string DeleteMethod { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataBoundControl_InsertMethod")]
public string InsertMethod { get; public set; }
    [WebCategoryAttribute("Paging")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("FormView_AllowPaging")]
public bool AllowPaging { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("WebControl_BackImageUrl")]
public string BackImageUrl { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public FormViewRow BottomPagerRow { get; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("DataControls_Caption")]
public string Caption { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("WebControl_CaptionAlign")]
public TableCaptionAlign CaptionAlign { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("-1")]
[WebSysDescriptionAttribute("FormView_CellPadding")]
public int CellPadding { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("0")]
[WebSysDescriptionAttribute("FormView_CellSpacing")]
public int CellSpacing { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public FormViewMode CurrentMode { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object DataItem { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int DataItemCount { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int DataItemIndex { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.DataFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Web.UI.WebControls.StringArrayConverter")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataControls_DataKeyNames")]
public String[] DataKeyNames { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("FormView_DataKey")]
public DataKey DataKey { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("View_DefaultMode")]
public FormViewMode DefaultMode { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.FormView", "1")]
[WebSysDescriptionAttribute("FormView_EditItemTemplate")]
public ITemplate EditItemTemplate { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("View_EditRowStyle")]
public TableItemStyle EditRowStyle { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("View_EmptyDataRowStyle")]
public TableItemStyle EmptyDataRowStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.FormView")]
[WebSysDescriptionAttribute("View_EmptyDataTemplate")]
public ITemplate EmptyDataTemplate { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("View_EmptyDataText")]
public string EmptyDataText { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("DataBoundControl_EnableModelValidation")]
public bool EnableModelValidation { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("FormView_RenderOuterTable")]
public bool RenderOuterTable { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public FormViewRow FooterRow { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("FormView_FooterStyle")]
public TableItemStyle FooterStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.FormView")]
[WebSysDescriptionAttribute("FormView_FooterTemplate")]
public ITemplate FooterTemplate { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("View_FooterText")]
public string FooterText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("DataControls_GridLines")]
public GridLines GridLines { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public FormViewRow HeaderRow { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("WebControl_HeaderStyle")]
public TableItemStyle HeaderStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.FormView")]
[WebSysDescriptionAttribute("WebControl_HeaderTemplate")]
public ITemplate HeaderTemplate { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("View_HeaderText")]
public string HeaderText { get; public set; }
    [CategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("WebControl_HorizontalAlign")]
public HorizontalAlign HorizontalAlign { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.FormView", "1")]
[WebSysDescriptionAttribute("FormView_InsertItemTemplate")]
public ITemplate InsertItemTemplate { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("View_InsertRowStyle")]
public TableItemStyle InsertRowStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.FormView", "1")]
[WebSysDescriptionAttribute("View_InsertRowStyle")]
public ITemplate ItemTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int PageCount { get; }
    [BindableAttribute("True")]
[DefaultValueAttribute("0")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("FormView_PageIndex")]
public int PageIndex { get; public set; }
    [WebCategoryAttribute("Paging")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("GridView_PagerSettings")]
public PagerSettings PagerSettings { get; }
    [WebCategoryAttribute("Styles")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("WebControl_PagerStyle")]
public TableItemStyle PagerStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.FormView")]
[WebSysDescriptionAttribute("View_PagerTemplate")]
public ITemplate PagerTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("FormView_Rows")]
public FormViewRow Row { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("View_RowStyle")]
public TableItemStyle RowStyle { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object SelectedValue { get; }
    protected HtmlTextWriterTag TagKey { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public FormViewRow TopPagerRow { get; }
    private int System.Web.UI.IDataItemContainer.DataItemIndex { get; }
    private int System.Web.UI.IDataItemContainer.DisplayIndex { get; }
    private DataKey System.Web.UI.WebControls.IDataBoundItemControl.DataKey { get; }
    private DataBoundControlMode System.Web.UI.WebControls.IDataBoundItemControl.Mode { get; }
    private string System.Web.UI.WebControls.IDataBoundControl.DataSourceID { get; private set; }
    private IDataSource System.Web.UI.WebControls.IDataBoundControl.DataSourceObject { get; }
    private object System.Web.UI.WebControls.IDataBoundControl.DataSource { get; private set; }
    private String[] System.Web.UI.WebControls.IDataBoundControl.DataKeyNames { get; private set; }
    private string System.Web.UI.WebControls.IDataBoundControl.DataMember { get; private set; }
    private static FormView();
    public virtual string get_UpdateMethod();
    public virtual void set_UpdateMethod(string value);
    public virtual string get_DeleteMethod();
    public virtual void set_DeleteMethod(string value);
    public virtual string get_InsertMethod();
    public virtual void set_InsertMethod(string value);
    public virtual bool get_AllowPaging();
    public virtual void set_AllowPaging(bool value);
    public virtual string get_BackImageUrl();
    public virtual void set_BackImageUrl(string value);
    public virtual FormViewRow get_BottomPagerRow();
    public virtual string get_Caption();
    public virtual void set_Caption(string value);
    public virtual TableCaptionAlign get_CaptionAlign();
    public virtual void set_CaptionAlign(TableCaptionAlign value);
    public virtual int get_CellPadding();
    public virtual void set_CellPadding(int value);
    public virtual int get_CellSpacing();
    public virtual void set_CellSpacing(int value);
    public FormViewMode get_CurrentMode();
    public virtual object get_DataItem();
    public int get_DataItemCount();
    public virtual int get_DataItemIndex();
    public virtual String[] get_DataKeyNames();
    public virtual void set_DataKeyNames(String[] value);
    public virtual DataKey get_DataKey();
    public virtual FormViewMode get_DefaultMode();
    public virtual void set_DefaultMode(FormViewMode value);
    public virtual ITemplate get_EditItemTemplate();
    public virtual void set_EditItemTemplate(ITemplate value);
    public TableItemStyle get_EditRowStyle();
    public TableItemStyle get_EmptyDataRowStyle();
    public virtual ITemplate get_EmptyDataTemplate();
    public virtual void set_EmptyDataTemplate(ITemplate value);
    public virtual string get_EmptyDataText();
    public virtual void set_EmptyDataText(string value);
    public virtual bool get_EnableModelValidation();
    public virtual void set_EnableModelValidation(bool value);
    public virtual bool get_RenderOuterTable();
    public virtual void set_RenderOuterTable(bool value);
    public virtual FormViewRow get_FooterRow();
    public TableItemStyle get_FooterStyle();
    public virtual ITemplate get_FooterTemplate();
    public virtual void set_FooterTemplate(ITemplate value);
    public virtual string get_FooterText();
    public virtual void set_FooterText(string value);
    public virtual GridLines get_GridLines();
    public virtual void set_GridLines(GridLines value);
    public virtual FormViewRow get_HeaderRow();
    public TableItemStyle get_HeaderStyle();
    public virtual ITemplate get_HeaderTemplate();
    public virtual void set_HeaderTemplate(ITemplate value);
    public virtual string get_HeaderText();
    public virtual void set_HeaderText(string value);
    public virtual HorizontalAlign get_HorizontalAlign();
    public virtual void set_HorizontalAlign(HorizontalAlign value);
    public virtual ITemplate get_InsertItemTemplate();
    public virtual void set_InsertItemTemplate(ITemplate value);
    public TableItemStyle get_InsertRowStyle();
    public virtual ITemplate get_ItemTemplate();
    public virtual void set_ItemTemplate(ITemplate value);
    public virtual int get_PageCount();
    public virtual int get_PageIndex();
    public virtual void set_PageIndex(int value);
    public virtual PagerSettings get_PagerSettings();
    public TableItemStyle get_PagerStyle();
    public virtual ITemplate get_PagerTemplate();
    public virtual void set_PagerTemplate(ITemplate value);
    public virtual FormViewRow get_Row();
    public TableItemStyle get_RowStyle();
    public object get_SelectedValue();
    protected virtual HtmlTextWriterTag get_TagKey();
    public virtual FormViewRow get_TopPagerRow();
    public void add_PageIndexChanged(EventHandler value);
    public void remove_PageIndexChanged(EventHandler value);
    public void add_PageIndexChanging(FormViewPageEventHandler value);
    public void remove_PageIndexChanging(FormViewPageEventHandler value);
    public void add_ItemCommand(FormViewCommandEventHandler value);
    public void remove_ItemCommand(FormViewCommandEventHandler value);
    public void add_ItemCreated(EventHandler value);
    public void remove_ItemCreated(EventHandler value);
    public void add_ItemDeleted(FormViewDeletedEventHandler value);
    public void remove_ItemDeleted(FormViewDeletedEventHandler value);
    public void add_ItemDeleting(FormViewDeleteEventHandler value);
    public void remove_ItemDeleting(FormViewDeleteEventHandler value);
    public void add_ItemInserted(FormViewInsertedEventHandler value);
    public void remove_ItemInserted(FormViewInsertedEventHandler value);
    public void add_ItemInserting(FormViewInsertEventHandler value);
    public void remove_ItemInserting(FormViewInsertEventHandler value);
    public void add_ItemUpdated(FormViewUpdatedEventHandler value);
    public void remove_ItemUpdated(FormViewUpdatedEventHandler value);
    public void add_ItemUpdating(FormViewUpdateEventHandler value);
    public void remove_ItemUpdating(FormViewUpdateEventHandler value);
    public void add_ModeChanged(EventHandler value);
    public void remove_ModeChanged(EventHandler value);
    public void add_ModeChanging(FormViewModeEventHandler value);
    public void remove_ModeChanging(FormViewModeEventHandler value);
    public void ChangeMode(FormViewMode newMode);
    protected virtual int CreateChildControls(IEnumerable dataSource, bool dataBinding);
    protected virtual Style CreateControlStyle();
    protected virtual DataSourceSelectArguments CreateDataSourceSelectArguments();
    protected virtual FormViewRow CreateRow(int itemIndex, DataControlRowType rowType, DataControlRowState rowState);
    protected virtual Table CreateTable();
    public sealed virtual void DataBind();
    public virtual void DeleteItem();
    protected virtual void EnsureDataBound();
    protected virtual void ExtractRowValues(IOrderedDictionary fieldValues, bool includeKeys);
    protected virtual void InitializePager(FormViewRow row, PagedDataSource pagedDataSource);
    protected virtual void InitializeRow(FormViewRow row);
    public virtual void InsertItem(bool causesValidation);
    public virtual bool IsBindableType(Type type);
    protected internal virtual void LoadControlState(object savedState);
    protected virtual void LoadViewState(object savedState);
    protected internal virtual string ModifiedOuterTableStylePropertyName();
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
    protected virtual void OnPageIndexChanged(EventArgs e);
    protected virtual void OnPageIndexChanging(FormViewPageEventArgs e);
    protected internal virtual void OnInit(EventArgs e);
    protected virtual void OnItemCommand(FormViewCommandEventArgs e);
    protected virtual void OnItemCreated(EventArgs e);
    protected virtual void OnItemDeleted(FormViewDeletedEventArgs e);
    protected virtual void OnItemDeleting(FormViewDeleteEventArgs e);
    protected virtual void OnItemInserted(FormViewInsertedEventArgs e);
    protected virtual void OnItemInserting(FormViewInsertEventArgs e);
    protected virtual void OnItemUpdated(FormViewUpdatedEventArgs e);
    protected virtual void OnItemUpdating(FormViewUpdateEventArgs e);
    protected virtual void OnModeChanged(EventArgs e);
    protected virtual void OnModeChanging(FormViewModeEventArgs e);
    protected internal virtual void PerformDataBinding(IEnumerable data);
    protected internal virtual void PrepareControlHierarchy();
    protected virtual void RaisePostBackEvent(string eventArgument);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected internal virtual object SaveControlState();
    protected virtual object SaveViewState();
    public void SetPageIndex(int index);
    protected virtual void TrackViewState();
    public virtual void UpdateItem(bool causesValidation);
    internal virtual void UpdateModelDataSourceProperties(ModelDataSource modelDataSource);
    private sealed virtual override PostBackOptions System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(IButtonControl buttonControl);
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    private sealed virtual override int System.Web.UI.IDataItemContainer.get_DataItemIndex();
    private sealed virtual override int System.Web.UI.IDataItemContainer.get_DisplayIndex();
    private sealed virtual override DataKey System.Web.UI.WebControls.IDataBoundItemControl.get_DataKey();
    private sealed virtual override DataBoundControlMode System.Web.UI.WebControls.IDataBoundItemControl.get_Mode();
    private sealed virtual override string System.Web.UI.WebControls.IDataBoundControl.get_DataSourceID();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundControl.set_DataSourceID(string value);
    private sealed virtual override IDataSource System.Web.UI.WebControls.IDataBoundControl.get_DataSourceObject();
    private sealed virtual override object System.Web.UI.WebControls.IDataBoundControl.get_DataSource();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundControl.set_DataSource(object value);
    private sealed virtual override String[] System.Web.UI.WebControls.IDataBoundControl.get_DataKeyNames();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundControl.set_DataKeyNames(String[] value);
    private sealed virtual override string System.Web.UI.WebControls.IDataBoundControl.get_DataMember();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundControl.set_DataMember(string value);
}
public class System.Web.UI.WebControls.FormViewCommandEventArgs : CommandEventArgs {
    public object CommandSource { get; }
    public bool Handled { get; public set; }
    public FormViewCommandEventArgs(object commandSource, CommandEventArgs originalArgs);
    public object get_CommandSource();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
public class System.Web.UI.WebControls.FormViewCommandEventHandler : MulticastDelegate {
    public FormViewCommandEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FormViewCommandEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FormViewCommandEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.FormViewDeletedEventArgs : EventArgs {
    public int AffectedRows { get; }
    public Exception Exception { get; }
    public bool ExceptionHandled { get; public set; }
    public IOrderedDictionary Keys { get; }
    public IOrderedDictionary Values { get; }
    public FormViewDeletedEventArgs(int affectedRows, Exception e);
    public int get_AffectedRows();
    public Exception get_Exception();
    public bool get_ExceptionHandled();
    public void set_ExceptionHandled(bool value);
    public IOrderedDictionary get_Keys();
    public IOrderedDictionary get_Values();
    internal void SetKeys(IOrderedDictionary keys);
    internal void SetValues(IOrderedDictionary values);
}
public class System.Web.UI.WebControls.FormViewDeletedEventHandler : MulticastDelegate {
    public FormViewDeletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FormViewDeletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FormViewDeletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.FormViewDeleteEventArgs : CancelEventArgs {
    public int RowIndex { get; }
    public IOrderedDictionary Keys { get; }
    public IOrderedDictionary Values { get; }
    public FormViewDeleteEventArgs(int rowIndex);
    public int get_RowIndex();
    public IOrderedDictionary get_Keys();
    public IOrderedDictionary get_Values();
}
public class System.Web.UI.WebControls.FormViewDeleteEventHandler : MulticastDelegate {
    public FormViewDeleteEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FormViewDeleteEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FormViewDeleteEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.FormViewInsertedEventArgs : EventArgs {
    public int AffectedRows { get; }
    public Exception Exception { get; }
    public bool ExceptionHandled { get; public set; }
    public bool KeepInInsertMode { get; public set; }
    public IOrderedDictionary Values { get; }
    public FormViewInsertedEventArgs(int affectedRows, Exception e);
    public int get_AffectedRows();
    public Exception get_Exception();
    public bool get_ExceptionHandled();
    public void set_ExceptionHandled(bool value);
    public bool get_KeepInInsertMode();
    public void set_KeepInInsertMode(bool value);
    public IOrderedDictionary get_Values();
    internal void SetValues(IOrderedDictionary values);
}
public class System.Web.UI.WebControls.FormViewInsertedEventHandler : MulticastDelegate {
    public FormViewInsertedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FormViewInsertedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FormViewInsertedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.FormViewInsertEventArgs : CancelEventArgs {
    public object CommandArgument { get; }
    public IOrderedDictionary Values { get; }
    public FormViewInsertEventArgs(object commandArgument);
    public object get_CommandArgument();
    public IOrderedDictionary get_Values();
}
public class System.Web.UI.WebControls.FormViewInsertEventHandler : MulticastDelegate {
    public FormViewInsertEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FormViewInsertEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FormViewInsertEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Web.UI.WebControls.FormViewMode : Enum {
    public int value__;
    public static FormViewMode ReadOnly;
    public static FormViewMode Edit;
    public static FormViewMode Insert;
}
public class System.Web.UI.WebControls.FormViewModeEventArgs : CancelEventArgs {
    public bool CancelingEdit { get; }
    public FormViewMode NewMode { get; public set; }
    public FormViewModeEventArgs(FormViewMode mode, bool cancelingEdit);
    public bool get_CancelingEdit();
    public FormViewMode get_NewMode();
    public void set_NewMode(FormViewMode value);
}
public class System.Web.UI.WebControls.FormViewModeEventHandler : MulticastDelegate {
    public FormViewModeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FormViewModeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FormViewModeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.FormViewPageEventArgs : CancelEventArgs {
    public int NewPageIndex { get; public set; }
    public FormViewPageEventArgs(int newPageIndex);
    public int get_NewPageIndex();
    public void set_NewPageIndex(int value);
}
public class System.Web.UI.WebControls.FormViewPageEventHandler : MulticastDelegate {
    public FormViewPageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FormViewPageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FormViewPageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.FormViewPagerRow : FormViewRow {
    public FormViewPagerRow(int rowIndex, DataControlRowType rowType, DataControlRowState rowState);
}
public class System.Web.UI.WebControls.FormViewRow : TableRow {
    public int ItemIndex { get; }
    public DataControlRowState RowState { get; }
    public DataControlRowType RowType { get; }
    internal bool RenderTemplateContainer { get; internal set; }
    public FormViewRow(int itemIndex, DataControlRowType rowType, DataControlRowState rowState);
    public virtual int get_ItemIndex();
    public virtual DataControlRowState get_RowState();
    public virtual DataControlRowType get_RowType();
    [CompilerGeneratedAttribute]
internal bool get_RenderTemplateContainer();
    [CompilerGeneratedAttribute]
internal void set_RenderTemplateContainer(bool value);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
}
public class System.Web.UI.WebControls.FormViewUpdatedEventArgs : EventArgs {
    public int AffectedRows { get; }
    public Exception Exception { get; }
    public bool ExceptionHandled { get; public set; }
    public bool KeepInEditMode { get; public set; }
    public IOrderedDictionary Keys { get; }
    public IOrderedDictionary NewValues { get; }
    public IOrderedDictionary OldValues { get; }
    public FormViewUpdatedEventArgs(int affectedRows, Exception e);
    public int get_AffectedRows();
    public Exception get_Exception();
    public bool get_ExceptionHandled();
    public void set_ExceptionHandled(bool value);
    public bool get_KeepInEditMode();
    public void set_KeepInEditMode(bool value);
    public IOrderedDictionary get_Keys();
    public IOrderedDictionary get_NewValues();
    public IOrderedDictionary get_OldValues();
    internal void SetKeys(IOrderedDictionary keys);
    internal void SetNewValues(IOrderedDictionary newValues);
    internal void SetOldValues(IOrderedDictionary oldValues);
}
public class System.Web.UI.WebControls.FormViewUpdatedEventHandler : MulticastDelegate {
    public FormViewUpdatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FormViewUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FormViewUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.FormViewUpdateEventArgs : CancelEventArgs {
    public object CommandArgument { get; }
    public IOrderedDictionary Keys { get; }
    public IOrderedDictionary NewValues { get; }
    public IOrderedDictionary OldValues { get; }
    public FormViewUpdateEventArgs(object commandArgument);
    public object get_CommandArgument();
    public IOrderedDictionary get_Keys();
    public IOrderedDictionary get_NewValues();
    public IOrderedDictionary get_OldValues();
}
public class System.Web.UI.WebControls.FormViewUpdateEventHandler : MulticastDelegate {
    public FormViewUpdateEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FormViewUpdateEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FormViewUpdateEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Web.UI.WebControls.GridLines : Enum {
    public int value__;
    public static GridLines None;
    public static GridLines Horizontal;
    public static GridLines Vertical;
    public static GridLines Both;
}
[DesignerAttribute("System.Web.UI.Design.WebControls.GridViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ControlValuePropertyAttribute("SelectedValue")]
[DefaultEventAttribute("SelectedIndexChanged")]
[SupportsEventValidationAttribute]
[DataKeyPropertyAttribute("SelectedPersistedDataKey")]
public class System.Web.UI.WebControls.GridView : CompositeDataBoundControl {
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataBoundControl_UpdateMethod")]
public string UpdateMethod { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataBoundControl_DeleteMethod")]
public string DeleteMethod { get; public set; }
    [WebCategoryAttribute("Paging")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("GridView_AllowCustomPaging")]
public bool AllowCustomPaging { get; public set; }
    [WebCategoryAttribute("Paging")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("GridView_AllowPaging")]
public bool AllowPaging { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("GridView_AllowSorting")]
public bool AllowSorting { get; public set; }
    [WebCategoryAttribute("Styles")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("GridView_AlternatingRowStyle")]
public TableItemStyle AlternatingRowStyle { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("GridView_AutoGenerateDeleteButton")]
public bool AutoGenerateDeleteButton { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("GridView_AutoGenerateEditButton")]
public bool AutoGenerateEditButton { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("GridView_AutoGenerateSelectButton")]
public bool AutoGenerateSelectButton { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("DataControls_AutoGenerateColumns")]
public bool AutoGenerateColumns { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("WebControl_BackImageUrl")]
public string BackImageUrl { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public GridViewRow BottomPagerRow { get; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("DataControls_Caption")]
public string Caption { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("WebControl_CaptionAlign")]
public TableCaptionAlign CaptionAlign { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("-1")]
[WebSysDescriptionAttribute("GridView_CellPadding")]
public int CellPadding { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("0")]
[WebSysDescriptionAttribute("GridView_CellSpacing")]
public int CellSpacing { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.DataControlFieldTypeEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Default")]
[WebSysDescriptionAttribute("DataControls_Columns")]
public DataControlFieldCollection Columns { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IAutoFieldGenerator ColumnsGenerator { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("GridView_DataKeys")]
public DataKeyArray DataKeys { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataKeyArray ClientIDRowSuffixDataKeys { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.DataFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Web.UI.WebControls.StringArrayConverter")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataControls_DataKeyNames")]
public String[] DataKeyNames { get; public set; }
    [WebCategoryAttribute("Default")]
[DefaultValueAttribute("-1")]
[WebSysDescriptionAttribute("GridView_EditIndex")]
public int EditIndex { get; public set; }
    [WebCategoryAttribute("Styles")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("GridView_EditRowStyle")]
public TableItemStyle EditRowStyle { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("DataBoundControl_EnableModelValidation")]
public bool EnableModelValidation { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("GridView_EnablePersistedSelection")]
public bool EnablePersistedSelection { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("GridView_EnableSortingAndPagingCallbacks")]
public bool EnableSortingAndPagingCallbacks { get; public set; }
    [WebCategoryAttribute("Styles")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("GridView_EmptyDataRowStyle")]
public TableItemStyle EmptyDataRowStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.GridViewRow")]
[WebSysDescriptionAttribute("View_EmptyDataTemplate")]
public ITemplate EmptyDataTemplate { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("View_EmptyDataText")]
public string EmptyDataText { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public GridViewRow FooterRow { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DataControls_FooterStyle")]
public TableItemStyle FooterStyle { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("DataControls_GridLines")]
public GridLines GridLines { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public GridViewRow HeaderRow { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("DataControls_HeaderStyle")]
public TableItemStyle HeaderStyle { get; }
    [CategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("WebControl_HorizontalAlign")]
public HorizontalAlign HorizontalAlign { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("GridView_PageCount")]
public int PageCount { get; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[WebCategoryAttribute("Paging")]
[WebSysDescriptionAttribute("GridView_PageIndex")]
public int PageIndex { get; public set; }
    [WebCategoryAttribute("Paging")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("GridView_PagerSettings")]
public PagerSettings PagerSettings { get; }
    [WebCategoryAttribute("Styles")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("WebControl_PagerStyle")]
public TableItemStyle PagerStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.GridViewRow")]
[WebSysDescriptionAttribute("View_PagerTemplate")]
public ITemplate PagerTemplate { get; public set; }
    [WebCategoryAttribute("Paging")]
[DefaultValueAttribute("10")]
[WebSysDescriptionAttribute("GridView_PageSize")]
public int PageSize { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.WebControls.StringArrayConverter")]
[WebCategoryAttribute("Data")]
public String[] ClientIDRowSuffix { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataColumnSelectionConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("GridView_RowHeaderColumn")]
public string RowHeaderColumn { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("GridView_Rows")]
public GridViewRowCollection Rows { get; }
    [WebCategoryAttribute("Styles")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("View_RowStyle")]
public TableItemStyle RowStyle { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataKey SelectedDataKey { get; }
    [BindableAttribute("True")]
[DefaultValueAttribute("-1")]
[WebSysDescriptionAttribute("GridView_SelectedIndex")]
public int SelectedIndex { get; public set; }
    [BrowsableAttribute("False")]
public object SelectedValue { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("GridView_SelectedRow")]
public GridViewRow SelectedRow { get; }
    [WebCategoryAttribute("Styles")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("GridView_SelectedRowStyle")]
public TableItemStyle SelectedRowStyle { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("DataControls_ShowFooter")]
public bool ShowFooter { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("DataControls_ShowHeader")]
public bool ShowHeader { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("GridView_ShowHeaderWhenEmpty")]
public bool ShowHeaderWhenEmpty { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DesignerSerializationVisibilityAttribute("0")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("GridView_SortDirection")]
public SortDirection SortDirection { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("GridView_SortExpression")]
public string SortExpression { get; }
    [WebCategoryAttribute("Styles")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("GridView_SortedAscendingCellStyle")]
public TableItemStyle SortedAscendingCellStyle { get; }
    [WebCategoryAttribute("Styles")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("GridView_SortedAscendingHeaderStyle")]
public TableItemStyle SortedAscendingHeaderStyle { get; }
    [WebCategoryAttribute("Styles")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("GridView_SortedDescendingCellStyle")]
public TableItemStyle SortedDescendingCellStyle { get; }
    [WebCategoryAttribute("Styles")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("GridView_SortedDescendingHeaderStyle")]
public TableItemStyle SortedDescendingHeaderStyle { get; }
    protected HtmlTextWriterTag TagKey { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public GridViewRow TopPagerRow { get; }
    [DefaultValueAttribute("True")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("Table_UseAccessibleHeader")]
public bool UseAccessibleHeader { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("GridView_VirtualItemCount")]
public int VirtualItemCount { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataKey SelectedPersistedDataKey { get; public set; }
    private DataKey System.Web.UI.WebControls.IPersistedSelector.DataKey { get; private set; }
    private DataKeyArray System.Web.UI.IDataKeysControl.ClientIDRowSuffixDataKeys { get; }
    private DataKeyArray System.Web.UI.WebControls.IDataBoundListControl.DataKeys { get; }
    private DataKey System.Web.UI.WebControls.IDataBoundListControl.SelectedDataKey { get; }
    private int System.Web.UI.WebControls.IDataBoundListControl.SelectedIndex { get; private set; }
    private String[] System.Web.UI.WebControls.IDataBoundListControl.ClientIDRowSuffix { get; private set; }
    private bool System.Web.UI.WebControls.IDataBoundListControl.EnablePersistedSelection { get; private set; }
    private string System.Web.UI.WebControls.IDataBoundControl.DataSourceID { get; private set; }
    private IDataSource System.Web.UI.WebControls.IDataBoundControl.DataSourceObject { get; }
    private object System.Web.UI.WebControls.IDataBoundControl.DataSource { get; private set; }
    private String[] System.Web.UI.WebControls.IDataBoundControl.DataKeyNames { get; private set; }
    private string System.Web.UI.WebControls.IDataBoundControl.DataMember { get; private set; }
    private IAutoFieldGenerator System.Web.UI.WebControls.IFieldControl.FieldsGenerator { get; private set; }
    internal GridView(IStateFormatter2 stateFormatter);
    private static GridView();
    public virtual string get_UpdateMethod();
    public virtual void set_UpdateMethod(string value);
    public virtual string get_DeleteMethod();
    public virtual void set_DeleteMethod(string value);
    public virtual bool get_AllowCustomPaging();
    public virtual void set_AllowCustomPaging(bool value);
    public virtual bool get_AllowPaging();
    public virtual void set_AllowPaging(bool value);
    public virtual bool get_AllowSorting();
    public virtual void set_AllowSorting(bool value);
    public TableItemStyle get_AlternatingRowStyle();
    public virtual bool get_AutoGenerateDeleteButton();
    public virtual void set_AutoGenerateDeleteButton(bool value);
    public virtual bool get_AutoGenerateEditButton();
    public virtual void set_AutoGenerateEditButton(bool value);
    public virtual bool get_AutoGenerateSelectButton();
    public virtual void set_AutoGenerateSelectButton(bool value);
    public virtual bool get_AutoGenerateColumns();
    public virtual void set_AutoGenerateColumns(bool value);
    public virtual string get_BackImageUrl();
    public virtual void set_BackImageUrl(string value);
    public virtual GridViewRow get_BottomPagerRow();
    public virtual string get_Caption();
    public virtual void set_Caption(string value);
    public virtual TableCaptionAlign get_CaptionAlign();
    public virtual void set_CaptionAlign(TableCaptionAlign value);
    public virtual int get_CellPadding();
    public virtual void set_CellPadding(int value);
    public virtual int get_CellSpacing();
    public virtual void set_CellSpacing(int value);
    public virtual DataControlFieldCollection get_Columns();
    public IAutoFieldGenerator get_ColumnsGenerator();
    public void set_ColumnsGenerator(IAutoFieldGenerator value);
    public virtual DataKeyArray get_DataKeys();
    public DataKeyArray get_ClientIDRowSuffixDataKeys();
    public virtual String[] get_DataKeyNames();
    public virtual void set_DataKeyNames(String[] value);
    public virtual int get_EditIndex();
    public virtual void set_EditIndex(int value);
    public TableItemStyle get_EditRowStyle();
    public virtual bool get_EnableModelValidation();
    public virtual void set_EnableModelValidation(bool value);
    public virtual bool get_EnablePersistedSelection();
    public virtual void set_EnablePersistedSelection(bool value);
    public virtual bool get_EnableSortingAndPagingCallbacks();
    public virtual void set_EnableSortingAndPagingCallbacks(bool value);
    public TableItemStyle get_EmptyDataRowStyle();
    public virtual ITemplate get_EmptyDataTemplate();
    public virtual void set_EmptyDataTemplate(ITemplate value);
    public virtual string get_EmptyDataText();
    public virtual void set_EmptyDataText(string value);
    public virtual GridViewRow get_FooterRow();
    public TableItemStyle get_FooterStyle();
    public virtual GridLines get_GridLines();
    public virtual void set_GridLines(GridLines value);
    public virtual GridViewRow get_HeaderRow();
    public TableItemStyle get_HeaderStyle();
    public virtual HorizontalAlign get_HorizontalAlign();
    public virtual void set_HorizontalAlign(HorizontalAlign value);
    public virtual bool IsBindableType(Type type);
    public virtual int get_PageCount();
    public virtual int get_PageIndex();
    public virtual void set_PageIndex(int value);
    public virtual PagerSettings get_PagerSettings();
    public TableItemStyle get_PagerStyle();
    public virtual ITemplate get_PagerTemplate();
    public virtual void set_PagerTemplate(ITemplate value);
    public virtual int get_PageSize();
    public virtual void set_PageSize(int value);
    public virtual String[] get_ClientIDRowSuffix();
    public virtual void set_ClientIDRowSuffix(String[] value);
    public virtual string get_RowHeaderColumn();
    public virtual void set_RowHeaderColumn(string value);
    public virtual GridViewRowCollection get_Rows();
    public TableItemStyle get_RowStyle();
    public virtual DataKey get_SelectedDataKey();
    public virtual int get_SelectedIndex();
    public virtual void set_SelectedIndex(int value);
    public object get_SelectedValue();
    public virtual GridViewRow get_SelectedRow();
    public TableItemStyle get_SelectedRowStyle();
    public virtual bool get_ShowFooter();
    public virtual void set_ShowFooter(bool value);
    public virtual bool get_ShowHeader();
    public virtual void set_ShowHeader(bool value);
    public virtual bool get_ShowHeaderWhenEmpty();
    public virtual void set_ShowHeaderWhenEmpty(bool value);
    public virtual SortDirection get_SortDirection();
    public virtual string get_SortExpression();
    public TableItemStyle get_SortedAscendingCellStyle();
    public TableItemStyle get_SortedAscendingHeaderStyle();
    public TableItemStyle get_SortedDescendingCellStyle();
    public TableItemStyle get_SortedDescendingHeaderStyle();
    protected virtual HtmlTextWriterTag get_TagKey();
    public virtual GridViewRow get_TopPagerRow();
    public virtual bool get_UseAccessibleHeader();
    public virtual void set_UseAccessibleHeader(bool value);
    public virtual int get_VirtualItemCount();
    public virtual void set_VirtualItemCount(int value);
    public virtual DataKey get_SelectedPersistedDataKey();
    public virtual void set_SelectedPersistedDataKey(DataKey value);
    public void add_RowDeleted(GridViewDeletedEventHandler value);
    public void remove_RowDeleted(GridViewDeletedEventHandler value);
    public void add_RowUpdated(GridViewUpdatedEventHandler value);
    public void remove_RowUpdated(GridViewUpdatedEventHandler value);
    public void add_RowCancelingEdit(GridViewCancelEditEventHandler value);
    public void remove_RowCancelingEdit(GridViewCancelEditEventHandler value);
    public void add_RowDeleting(GridViewDeleteEventHandler value);
    public void remove_RowDeleting(GridViewDeleteEventHandler value);
    public void add_RowEditing(GridViewEditEventHandler value);
    public void remove_RowEditing(GridViewEditEventHandler value);
    public void add_PageIndexChanged(EventHandler value);
    public void remove_PageIndexChanged(EventHandler value);
    public void add_PageIndexChanging(GridViewPageEventHandler value);
    public void remove_PageIndexChanging(GridViewPageEventHandler value);
    public void add_SelectedIndexChanged(EventHandler value);
    public void remove_SelectedIndexChanged(EventHandler value);
    public void add_SelectedIndexChanging(GridViewSelectEventHandler value);
    public void remove_SelectedIndexChanging(GridViewSelectEventHandler value);
    public void add_Sorted(EventHandler value);
    public void remove_Sorted(EventHandler value);
    public void add_Sorting(GridViewSortEventHandler value);
    public void remove_Sorting(GridViewSortEventHandler value);
    public void add_RowUpdating(GridViewUpdateEventHandler value);
    public void remove_RowUpdating(GridViewUpdateEventHandler value);
    public void add_RowCommand(GridViewCommandEventHandler value);
    public void remove_RowCommand(GridViewCommandEventHandler value);
    public void add_RowCreated(GridViewRowEventHandler value);
    public void remove_RowCreated(GridViewRowEventHandler value);
    public void add_RowDataBound(GridViewRowEventHandler value);
    public void remove_RowDataBound(GridViewRowEventHandler value);
    internal void StoreEnumerator(IEnumerator dataSource, object firstDataRow);
    [ObsoleteAttribute("This is kept for backward compatibility - this API is no more used")]
protected virtual AutoGeneratedField CreateAutoGeneratedColumn(AutoGeneratedFieldProperties fieldProperties);
    protected virtual int CreateChildControls(IEnumerable dataSource, bool dataBinding);
    protected virtual Table CreateChildTable();
    protected virtual Style CreateControlStyle();
    protected virtual ICollection CreateColumns(PagedDataSource dataSource, bool useDataSource);
    protected virtual DataSourceSelectArguments CreateDataSourceSelectArguments();
    protected virtual GridViewRow CreateRow(int rowIndex, int dataSourceIndex, DataControlRowType rowType, DataControlRowState rowState);
    public sealed virtual void DataBind();
    public virtual void DeleteRow(int rowIndex);
    protected virtual void ExtractRowValues(IOrderedDictionary fieldValues, GridViewRow row, bool includeReadOnlyFields, bool includePrimaryKey);
    protected virtual string GetCallbackResult();
    protected virtual string GetCallbackScript(IButtonControl buttonControl, string argument);
    protected virtual void InitializePager(GridViewRow row, int columnSpan, PagedDataSource pagedDataSource);
    protected virtual void InitializeRow(GridViewRow row, DataControlField[] fields);
    protected internal virtual void LoadControlState(object savedState);
    protected virtual void LoadViewState(object savedState);
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
    protected virtual void OnDataPropertyChanged();
    protected virtual void OnDataSourceViewChanged(object sender, EventArgs e);
    protected internal virtual void OnInit(EventArgs e);
    protected virtual void OnPageIndexChanged(EventArgs e);
    protected virtual void OnPagePreLoad(object sender, EventArgs e);
    protected virtual void OnPageIndexChanging(GridViewPageEventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void OnRowCancelingEdit(GridViewCancelEditEventArgs e);
    protected virtual void OnRowCommand(GridViewCommandEventArgs e);
    protected virtual void OnRowCreated(GridViewRowEventArgs e);
    protected virtual void OnRowDataBound(GridViewRowEventArgs e);
    protected virtual void OnRowDeleted(GridViewDeletedEventArgs e);
    protected virtual void OnRowDeleting(GridViewDeleteEventArgs e);
    protected virtual void OnRowEditing(GridViewEditEventArgs e);
    protected virtual void OnRowUpdated(GridViewUpdatedEventArgs e);
    protected virtual void OnRowUpdating(GridViewUpdateEventArgs e);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
    protected virtual void OnSelectedIndexChanging(GridViewSelectEventArgs e);
    protected virtual void OnSorted(EventArgs e);
    protected virtual void OnSorting(GridViewSortEventArgs e);
    protected internal virtual void PerformDataBinding(IEnumerable data);
    protected internal virtual void PrepareControlHierarchy();
    protected virtual void RaiseCallbackEvent(string eventArgument);
    protected virtual void RaisePostBackEvent(string eventArgument);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected internal virtual object SaveControlState();
    protected virtual object SaveViewState();
    public void SetPageIndex(int rowIndex);
    public void SelectRow(int rowIndex);
    public void SetEditRow(int rowIndex);
    public virtual void Sort(string sortExpression, SortDirection sortDirection);
    protected virtual void TrackViewState();
    internal virtual void UpdateModelDataSourceProperties(ModelDataSource modelDataSource);
    public virtual void UpdateRow(int rowIndex, bool causesValidation);
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    private sealed virtual override PostBackOptions System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(IButtonControl buttonControl);
    private sealed virtual override string System.Web.UI.WebControls.ICallbackContainer.GetCallbackScript(IButtonControl buttonControl, string argument);
    private sealed virtual override void System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(string eventArgument);
    private sealed virtual override string System.Web.UI.ICallbackEventHandler.GetCallbackResult();
    private sealed virtual override DataKey System.Web.UI.WebControls.IPersistedSelector.get_DataKey();
    private sealed virtual override void System.Web.UI.WebControls.IPersistedSelector.set_DataKey(DataKey value);
    private sealed virtual override DataKeyArray System.Web.UI.IDataKeysControl.get_ClientIDRowSuffixDataKeys();
    private sealed virtual override DataKeyArray System.Web.UI.WebControls.IDataBoundListControl.get_DataKeys();
    private sealed virtual override DataKey System.Web.UI.WebControls.IDataBoundListControl.get_SelectedDataKey();
    private sealed virtual override int System.Web.UI.WebControls.IDataBoundListControl.get_SelectedIndex();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundListControl.set_SelectedIndex(int value);
    private sealed virtual override String[] System.Web.UI.WebControls.IDataBoundListControl.get_ClientIDRowSuffix();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundListControl.set_ClientIDRowSuffix(String[] value);
    private sealed virtual override bool System.Web.UI.WebControls.IDataBoundListControl.get_EnablePersistedSelection();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundListControl.set_EnablePersistedSelection(bool value);
    private sealed virtual override string System.Web.UI.WebControls.IDataBoundControl.get_DataSourceID();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundControl.set_DataSourceID(string value);
    private sealed virtual override IDataSource System.Web.UI.WebControls.IDataBoundControl.get_DataSourceObject();
    private sealed virtual override object System.Web.UI.WebControls.IDataBoundControl.get_DataSource();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundControl.set_DataSource(object value);
    private sealed virtual override String[] System.Web.UI.WebControls.IDataBoundControl.get_DataKeyNames();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundControl.set_DataKeyNames(String[] value);
    private sealed virtual override string System.Web.UI.WebControls.IDataBoundControl.get_DataMember();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundControl.set_DataMember(string value);
    private sealed virtual override IAutoFieldGenerator System.Web.UI.WebControls.IFieldControl.get_FieldsGenerator();
    private sealed virtual override void System.Web.UI.WebControls.IFieldControl.set_FieldsGenerator(IAutoFieldGenerator value);
}
public class System.Web.UI.WebControls.GridViewCancelEditEventArgs : CancelEventArgs {
    public int RowIndex { get; }
    public GridViewCancelEditEventArgs(int rowIndex);
    public int get_RowIndex();
}
public class System.Web.UI.WebControls.GridViewCancelEditEventHandler : MulticastDelegate {
    public GridViewCancelEditEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GridViewCancelEditEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GridViewCancelEditEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.GridViewColumnsGenerator : AutoFieldsGenerator {
    public virtual List`1<AutoGeneratedField> CreateAutoGeneratedFields(object dataObject, Control control);
}
public class System.Web.UI.WebControls.GridViewCommandEventArgs : CommandEventArgs {
    public object CommandSource { get; }
    public bool Handled { get; public set; }
    internal GridViewRow Row { get; }
    public GridViewCommandEventArgs(GridViewRow row, object commandSource, CommandEventArgs originalArgs);
    public GridViewCommandEventArgs(object commandSource, CommandEventArgs originalArgs);
    public object get_CommandSource();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    internal GridViewRow get_Row();
}
public class System.Web.UI.WebControls.GridViewCommandEventHandler : MulticastDelegate {
    public GridViewCommandEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GridViewCommandEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GridViewCommandEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.GridViewDeletedEventArgs : EventArgs {
    public int AffectedRows { get; }
    public Exception Exception { get; }
    public bool ExceptionHandled { get; public set; }
    public IOrderedDictionary Keys { get; }
    public IOrderedDictionary Values { get; }
    public GridViewDeletedEventArgs(int affectedRows, Exception e);
    public int get_AffectedRows();
    public Exception get_Exception();
    public bool get_ExceptionHandled();
    public void set_ExceptionHandled(bool value);
    public IOrderedDictionary get_Keys();
    public IOrderedDictionary get_Values();
    internal void SetKeys(IOrderedDictionary keys);
    internal void SetValues(IOrderedDictionary values);
}
public class System.Web.UI.WebControls.GridViewDeletedEventHandler : MulticastDelegate {
    public GridViewDeletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GridViewDeletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GridViewDeletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.GridViewDeleteEventArgs : CancelEventArgs {
    public int RowIndex { get; }
    public IOrderedDictionary Keys { get; }
    public IOrderedDictionary Values { get; }
    public GridViewDeleteEventArgs(int rowIndex);
    public int get_RowIndex();
    public IOrderedDictionary get_Keys();
    public IOrderedDictionary get_Values();
}
public class System.Web.UI.WebControls.GridViewDeleteEventHandler : MulticastDelegate {
    public GridViewDeleteEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GridViewDeleteEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GridViewDeleteEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.GridViewEditEventArgs : CancelEventArgs {
    public int NewEditIndex { get; public set; }
    public GridViewEditEventArgs(int newEditIndex);
    public int get_NewEditIndex();
    public void set_NewEditIndex(int value);
}
public class System.Web.UI.WebControls.GridViewEditEventHandler : MulticastDelegate {
    public GridViewEditEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GridViewEditEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GridViewEditEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.GridViewPageEventArgs : CancelEventArgs {
    public int NewPageIndex { get; public set; }
    public GridViewPageEventArgs(int newPageIndex);
    public int get_NewPageIndex();
    public void set_NewPageIndex(int value);
}
public class System.Web.UI.WebControls.GridViewPageEventHandler : MulticastDelegate {
    public GridViewPageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GridViewPageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GridViewPageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.GridViewRow : TableRow {
    public object DataItem { get; public set; }
    public int DataItemIndex { get; }
    public int RowIndex { get; }
    public DataControlRowState RowState { get; public set; }
    public DataControlRowType RowType { get; public set; }
    private object System.Web.UI.IDataItemContainer.DataItem { get; }
    private int System.Web.UI.IDataItemContainer.DataItemIndex { get; }
    private int System.Web.UI.IDataItemContainer.DisplayIndex { get; }
    public GridViewRow(int rowIndex, int dataItemIndex, DataControlRowType rowType, DataControlRowState rowState);
    public virtual object get_DataItem();
    public virtual void set_DataItem(object value);
    public virtual int get_DataItemIndex();
    public virtual int get_RowIndex();
    public virtual DataControlRowState get_RowState();
    public virtual void set_RowState(DataControlRowState value);
    public virtual DataControlRowType get_RowType();
    public virtual void set_RowType(DataControlRowType value);
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
    private sealed virtual override object System.Web.UI.IDataItemContainer.get_DataItem();
    private sealed virtual override int System.Web.UI.IDataItemContainer.get_DataItemIndex();
    private sealed virtual override int System.Web.UI.IDataItemContainer.get_DisplayIndex();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.GridViewRowCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public GridViewRow Item { get; }
    public GridViewRowCollection(ArrayList rows);
    public sealed virtual int get_Count();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public GridViewRow get_Item(int index);
    public void CopyTo(GridViewRow[] array, int index);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
public class System.Web.UI.WebControls.GridViewRowEventArgs : EventArgs {
    public GridViewRow Row { get; }
    public GridViewRowEventArgs(GridViewRow row);
    public GridViewRow get_Row();
}
public class System.Web.UI.WebControls.GridViewRowEventHandler : MulticastDelegate {
    public GridViewRowEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GridViewRowEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GridViewRowEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.GridViewSelectEventArgs : CancelEventArgs {
    public int NewSelectedIndex { get; public set; }
    public GridViewSelectEventArgs(int newSelectedIndex);
    public int get_NewSelectedIndex();
    public void set_NewSelectedIndex(int value);
}
public class System.Web.UI.WebControls.GridViewSelectEventHandler : MulticastDelegate {
    public GridViewSelectEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GridViewSelectEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GridViewSelectEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.GridViewSortEventArgs : CancelEventArgs {
    public SortDirection SortDirection { get; public set; }
    public string SortExpression { get; public set; }
    public GridViewSortEventArgs(string sortExpression, SortDirection sortDirection);
    public SortDirection get_SortDirection();
    public void set_SortDirection(SortDirection value);
    public string get_SortExpression();
    public void set_SortExpression(string value);
}
public class System.Web.UI.WebControls.GridViewSortEventHandler : MulticastDelegate {
    public GridViewSortEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GridViewSortEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GridViewSortEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.GridViewUpdatedEventArgs : EventArgs {
    public int AffectedRows { get; }
    public Exception Exception { get; }
    public bool ExceptionHandled { get; public set; }
    public bool KeepInEditMode { get; public set; }
    public IOrderedDictionary Keys { get; }
    public IOrderedDictionary NewValues { get; }
    public IOrderedDictionary OldValues { get; }
    public GridViewUpdatedEventArgs(int affectedRows, Exception e);
    public int get_AffectedRows();
    public Exception get_Exception();
    public bool get_ExceptionHandled();
    public void set_ExceptionHandled(bool value);
    public bool get_KeepInEditMode();
    public void set_KeepInEditMode(bool value);
    public IOrderedDictionary get_Keys();
    public IOrderedDictionary get_NewValues();
    public IOrderedDictionary get_OldValues();
    internal void SetKeys(IOrderedDictionary keys);
    internal void SetNewValues(IOrderedDictionary newValues);
    internal void SetOldValues(IOrderedDictionary oldValues);
}
public class System.Web.UI.WebControls.GridViewUpdatedEventHandler : MulticastDelegate {
    public GridViewUpdatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GridViewUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GridViewUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.GridViewUpdateEventArgs : CancelEventArgs {
    public IOrderedDictionary Keys { get; }
    public IOrderedDictionary NewValues { get; }
    public IOrderedDictionary OldValues { get; }
    public int RowIndex { get; }
    public GridViewUpdateEventArgs(int rowIndex);
    public IOrderedDictionary get_Keys();
    public IOrderedDictionary get_NewValues();
    public IOrderedDictionary get_OldValues();
    public int get_RowIndex();
}
public class System.Web.UI.WebControls.GridViewUpdateEventHandler : MulticastDelegate {
    public GridViewUpdateEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GridViewUpdateEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GridViewUpdateEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ControlValuePropertyAttribute("Value")]
[DefaultEventAttribute("ValueChanged")]
[DefaultPropertyAttribute("Value")]
[DesignerAttribute("System.Web.UI.Design.WebControls.HiddenFieldDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
[NonVisualControlAttribute]
[SupportsEventValidationAttribute]
public class System.Web.UI.WebControls.HiddenField : Control {
    [DefaultValueAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool EnableTheming { get; public set; }
    [DefaultValueAttribute("")]
[EditorBrowsableAttribute("1")]
public string SkinID { get; public set; }
    [BindableAttribute("True")]
[WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("HiddenField_Value")]
public string Value { get; public set; }
    private static HiddenField();
    public virtual bool get_EnableTheming();
    public virtual void set_EnableTheming(bool value);
    public virtual string get_SkinID();
    public virtual void set_SkinID(string value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public void add_ValueChanged(EventHandler value);
    public void remove_ValueChanged(EventHandler value);
    protected virtual ControlCollection CreateControlCollection();
    [EditorBrowsableAttribute("1")]
public virtual void Focus();
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void OnValueChanged(EventArgs e);
    protected virtual void RaisePostDataChangedEvent();
    protected internal virtual void Render(HtmlTextWriter writer);
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
}
[DesignerAttribute("System.Web.UI.Design.WebControls.HierarchicalDataBoundControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public abstract class System.Web.UI.WebControls.HierarchicalDataBoundControl : BaseDataBoundControl {
    [IDReferencePropertyAttribute("System.Web.UI.HierarchicalDataSourceControl")]
public string DataSourceID { get; public set; }
    public virtual string get_DataSourceID();
    public virtual void set_DataSourceID(string value);
    protected virtual HierarchicalDataSourceView GetData(string viewPath);
    protected virtual IHierarchicalDataSource GetDataSource();
    protected void MarkAsDataBound();
    protected virtual void OnDataPropertyChanged();
    protected virtual void OnDataSourceChanged(object sender, EventArgs e);
    protected internal virtual void OnLoad(EventArgs e);
    protected virtual void OnPagePreLoad(object sender, EventArgs e);
    protected internal virtual void PerformDataBinding();
    protected virtual void PerformSelect();
    protected virtual void ValidateDataSource(object dataSource);
}
[TypeConverterAttribute("System.Web.UI.WebControls.HorizontalAlignConverter")]
public enum System.Web.UI.WebControls.HorizontalAlign : Enum {
    public int value__;
    public static HorizontalAlign NotSet;
    public static HorizontalAlign Left;
    public static HorizontalAlign Center;
    public static HorizontalAlign Right;
    public static HorizontalAlign Justify;
}
internal class System.Web.UI.WebControls.HorizontalAlignConverter : EnumConverter {
    private static HorizontalAlignConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public abstract class System.Web.UI.WebControls.HotSpot : object {
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("HotSpot_AccessKey")]
public string AccessKey { get; public set; }
    [LocalizableAttribute("True")]
[BindableAttribute("True")]
[WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("HotSpot_AlternateText")]
[NotifyParentPropertyAttribute("True")]
public string AlternateText { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("HotSpot_HotSpotMode")]
[NotifyParentPropertyAttribute("True")]
public HotSpotMode HotSpotMode { get; public set; }
    [BindableAttribute("True")]
[WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("HotSpot_PostBackValue")]
[NotifyParentPropertyAttribute("True")]
public string PostBackValue { get; public set; }
    protected internal string MarkupName { get; }
    [BindableAttribute("True")]
[WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("HotSpot_NavigateUrl")]
[NotifyParentPropertyAttribute("True")]
[UrlPropertyAttribute]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public string NavigateUrl { get; public set; }
    [DefaultValueAttribute("0")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("HotSpot_TabIndex")]
public short TabIndex { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.WebControls.TargetConverter")]
[WebSysDescriptionAttribute("HotSpot_Target")]
[NotifyParentPropertyAttribute("True")]
public string Target { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected StateBag ViewState { get; }
    protected bool IsTrackingViewState { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public virtual string get_AccessKey();
    public virtual void set_AccessKey(string value);
    public virtual string get_AlternateText();
    public virtual void set_AlternateText(string value);
    public virtual HotSpotMode get_HotSpotMode();
    public virtual void set_HotSpotMode(HotSpotMode value);
    public string get_PostBackValue();
    public void set_PostBackValue(string value);
    protected internal abstract virtual string get_MarkupName();
    public string get_NavigateUrl();
    public void set_NavigateUrl(string value);
    public virtual short get_TabIndex();
    public virtual void set_TabIndex(short value);
    public virtual string get_Target();
    public virtual void set_Target(string value);
    protected StateBag get_ViewState();
    public abstract virtual string GetCoordinates();
    internal void SetDirty();
    public virtual string ToString();
    protected virtual bool get_IsTrackingViewState();
    protected virtual void LoadViewState(object savedState);
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object savedState);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
[DefaultMemberAttribute("Item")]
[EditorAttribute("System.Web.UI.Design.WebControls.HotSpotCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public class System.Web.UI.WebControls.HotSpotCollection : StateManagedCollection {
    public HotSpot Item { get; }
    private static HotSpotCollection();
    public HotSpot get_Item(int index);
    public int Add(HotSpot spot);
    protected virtual object CreateKnownType(int index);
    protected virtual Type[] GetKnownTypes();
    public void Insert(int index, HotSpot spot);
    protected virtual void OnValidate(object o);
    public void Remove(HotSpot spot);
    public void RemoveAt(int index);
    protected virtual void SetDirtyObject(object o);
}
public enum System.Web.UI.WebControls.HotSpotMode : Enum {
    public int value__;
    public static HotSpotMode NotSet;
    public static HotSpotMode Navigate;
    public static HotSpotMode PostBack;
    public static HotSpotMode Inactive;
}
[ControlBuilderAttribute("System.Web.UI.WebControls.HyperLinkControlBuilder")]
[DataBindingHandlerAttribute("System.Web.UI.Design.HyperLinkDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultPropertyAttribute("Text")]
[DesignerAttribute("System.Web.UI.Design.WebControls.HyperLinkDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxDataAttribute("<{0}:HyperLink runat="server">HyperLink</{0}:HyperLink>")]
[ParseChildrenAttribute("False")]
public class System.Web.UI.WebControls.HyperLink : WebControl {
    [BindableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("HyperLink_ImageUrl")]
public string ImageUrl { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[WebSysDescriptionAttribute("HyperLink_ImageHeight")]
public Unit ImageHeight { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[WebSysDescriptionAttribute("HyperLink_ImageWidth")]
public Unit ImageWidth { get; public set; }
    [BindableAttribute("True")]
[WebCategoryAttribute("Navigation")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("HyperLink_NavigateUrl")]
public string NavigateUrl { get; public set; }
    public bool SupportsDisabledAttribute { get; }
    internal bool RequiresLegacyRendering { get; }
    [WebCategoryAttribute("Navigation")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("HyperLink_Target")]
[TypeConverterAttribute("System.Web.UI.WebControls.TargetConverter")]
public string Target { get; public set; }
    [LocalizableAttribute("True")]
[BindableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("HyperLink_Text")]
[PersistenceModeAttribute("2")]
public string Text { get; public set; }
    public virtual string get_ImageUrl();
    public virtual void set_ImageUrl(string value);
    public virtual Unit get_ImageHeight();
    public virtual void set_ImageHeight(Unit value);
    public virtual Unit get_ImageWidth();
    public virtual void set_ImageWidth(Unit value);
    public string get_NavigateUrl();
    public void set_NavigateUrl(string value);
    public virtual bool get_SupportsDisabledAttribute();
    internal virtual bool get_RequiresLegacyRendering();
    public string get_Target();
    public void set_Target(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual void AddParsedSubObject(object obj);
    protected virtual void LoadViewState(object savedState);
    protected internal virtual void RenderContents(HtmlTextWriter writer);
}
public class System.Web.UI.WebControls.HyperLinkColumn : DataGridColumn {
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("HyperLinkColumn_DataNavigateUrlField")]
public string DataNavigateUrlField { get; public set; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[DescriptionAttribute("The formatting applied to the value bound to the NavigateUrl property.")]
public string DataNavigateUrlFormatString { get; public set; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("HyperLinkColumn_DataTextField")]
public string DataTextField { get; public set; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[DescriptionAttribute("The formatting applied to the value bound to the Text property.")]
public string DataTextFormatString { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("HyperLinkColumn_NavigateUrl")]
public string NavigateUrl { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.WebControls.TargetConverter")]
[WebSysDescriptionAttribute("HyperLink_Target")]
public string Target { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("HyperLinkColumn_Text")]
public string Text { get; public set; }
    public virtual string get_DataNavigateUrlField();
    public virtual void set_DataNavigateUrlField(string value);
    public virtual string get_DataNavigateUrlFormatString();
    public virtual void set_DataNavigateUrlFormatString(string value);
    public virtual string get_DataTextField();
    public virtual void set_DataTextField(string value);
    public virtual string get_DataTextFormatString();
    public virtual void set_DataTextFormatString(string value);
    public virtual string get_NavigateUrl();
    public virtual void set_NavigateUrl(string value);
    public virtual string get_Target();
    public virtual void set_Target(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    protected virtual string FormatDataNavigateUrlValue(object dataUrlValue);
    protected virtual string FormatDataTextValue(object dataTextValue);
    public virtual void Initialize();
    public virtual void InitializeCell(TableCell cell, int columnIndex, ListItemType itemType);
}
public class System.Web.UI.WebControls.HyperLinkControlBuilder : ControlBuilder {
    public virtual bool AllowWhitespaceLiterals();
}
public class System.Web.UI.WebControls.HyperLinkField : DataControlField {
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.DataFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Web.UI.WebControls.StringArrayConverter")]
[WebSysDescriptionAttribute("HyperLinkField_DataNavigateUrlFields")]
public String[] DataNavigateUrlFields { get; public set; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("HyperLinkField_DataNavigateUrlFormatString")]
public string DataNavigateUrlFormatString { get; public set; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebSysDescriptionAttribute("HyperLinkField_DataTextField")]
public string DataTextField { get; public set; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("HyperLinkField_DataTextFormatString")]
public string DataTextFormatString { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("HyperLinkField_NavigateUrl")]
public string NavigateUrl { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.WebControls.TargetConverter")]
[WebSysDescriptionAttribute("HyperLink_Target")]
public string Target { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("HyperLinkField_Text")]
public string Text { get; public set; }
    public virtual String[] get_DataNavigateUrlFields();
    public virtual void set_DataNavigateUrlFields(String[] value);
    public virtual string get_DataNavigateUrlFormatString();
    public virtual void set_DataNavigateUrlFormatString(string value);
    public virtual string get_DataTextField();
    public virtual void set_DataTextField(string value);
    public virtual string get_DataTextFormatString();
    public virtual void set_DataTextFormatString(string value);
    public virtual string get_NavigateUrl();
    public virtual void set_NavigateUrl(string value);
    public virtual string get_Target();
    public virtual void set_Target(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    protected virtual void CopyProperties(DataControlField newField);
    protected virtual DataControlField CreateField();
    protected virtual string FormatDataNavigateUrlValue(Object[] dataUrlValues);
    protected virtual string FormatDataTextValue(object dataTextValue);
    public virtual bool Initialize(bool enableSorting, Control control);
    public virtual void InitializeCell(DataControlFieldCell cell, DataControlCellType cellType, DataControlRowState rowState, int rowIndex);
    public virtual void ValidateSupportsCallback();
}
internal class System.Web.UI.WebControls.HyperLinkStyle : Style {
    public bool DoNotRenderDefaults { get; public set; }
    public bool IsEmpty { get; }
    public HyperLinkStyle(Style owner);
    public bool get_DoNotRenderDefaults();
    public void set_DoNotRenderDefaults(bool value);
    public sealed virtual bool get_IsEmpty();
    public sealed virtual void AddAttributesToRender(HtmlTextWriter writer, WebControl owner);
    protected sealed virtual void FillStyleAttributes(CssStyleCollection attributes, IUrlResolutionService urlResolver);
}
public interface System.Web.UI.WebControls.IButtonControl {
    public bool CausesValidation { get; public set; }
    public string CommandArgument { get; public set; }
    public string CommandName { get; public set; }
    public string PostBackUrl { get; public set; }
    public string Text { get; public set; }
    public string ValidationGroup { get; public set; }
    public abstract virtual bool get_CausesValidation();
    public abstract virtual void set_CausesValidation(bool value);
    public abstract virtual string get_CommandArgument();
    public abstract virtual void set_CommandArgument(string value);
    public abstract virtual string get_CommandName();
    public abstract virtual void set_CommandName(string value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Click(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Click(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Command(CommandEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Command(CommandEventHandler value);
    public abstract virtual string get_PostBackUrl();
    public abstract virtual void set_PostBackUrl(string value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual string get_ValidationGroup();
    public abstract virtual void set_ValidationGroup(string value);
}
public interface System.Web.UI.WebControls.ICallbackContainer {
    public abstract virtual string GetCallbackScript(IButtonControl buttonControl, string argument);
}
public interface System.Web.UI.WebControls.ICompositeControlDesignerAccessor {
    public abstract virtual void RecreateChildControls();
}
public interface System.Web.UI.WebControls.IDataBoundControl {
    public string DataSourceID { get; public set; }
    public IDataSource DataSourceObject { get; }
    public object DataSource { get; public set; }
    public String[] DataKeyNames { get; public set; }
    public string DataMember { get; public set; }
    public abstract virtual string get_DataSourceID();
    public abstract virtual void set_DataSourceID(string value);
    public abstract virtual IDataSource get_DataSourceObject();
    public abstract virtual object get_DataSource();
    public abstract virtual void set_DataSource(object value);
    public abstract virtual String[] get_DataKeyNames();
    public abstract virtual void set_DataKeyNames(String[] value);
    public abstract virtual string get_DataMember();
    public abstract virtual void set_DataMember(string value);
}
public interface System.Web.UI.WebControls.IDataBoundItemControl {
    public DataKey DataKey { get; }
    public DataBoundControlMode Mode { get; }
    public abstract virtual DataKey get_DataKey();
    public abstract virtual DataBoundControlMode get_Mode();
}
public interface System.Web.UI.WebControls.IDataBoundListControl {
    public DataKeyArray DataKeys { get; }
    public DataKey SelectedDataKey { get; }
    public int SelectedIndex { get; public set; }
    public String[] ClientIDRowSuffix { get; public set; }
    public bool EnablePersistedSelection { get; public set; }
    public abstract virtual DataKeyArray get_DataKeys();
    public abstract virtual DataKey get_SelectedDataKey();
    public abstract virtual int get_SelectedIndex();
    public abstract virtual void set_SelectedIndex(int value);
    public abstract virtual String[] get_ClientIDRowSuffix();
    public abstract virtual void set_ClientIDRowSuffix(String[] value);
    public abstract virtual bool get_EnablePersistedSelection();
    public abstract virtual void set_EnablePersistedSelection(bool value);
}
public interface System.Web.UI.WebControls.IFieldControl {
    public IAutoFieldGenerator FieldsGenerator { get; public set; }
    public abstract virtual IAutoFieldGenerator get_FieldsGenerator();
    public abstract virtual void set_FieldsGenerator(IAutoFieldGenerator value);
}
[DefaultPropertyAttribute("ImageUrl")]
[DesignerAttribute("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.UI.WebControls.Image : WebControl {
    [LocalizableAttribute("True")]
[BindableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Image_AlternateText")]
public string AlternateText { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("Image_DescriptionUrl")]
public string DescriptionUrl { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public FontInfo Font { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Enabled { get; public set; }
    [DefaultValueAttribute("False")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("Image_GenerateEmptyAlternateText")]
public bool GenerateEmptyAlternateText { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Image_ImageAlign")]
public ImageAlign ImageAlign { get; public set; }
    [BindableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("Image_ImageUrl")]
public string ImageUrl { get; public set; }
    public bool SupportsDisabledAttribute { get; }
    internal bool UrlResolved { get; internal set; }
    public virtual string get_AlternateText();
    public virtual void set_AlternateText(string value);
    public virtual string get_DescriptionUrl();
    public virtual void set_DescriptionUrl(string value);
    public virtual FontInfo get_Font();
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public virtual bool get_GenerateEmptyAlternateText();
    public virtual void set_GenerateEmptyAlternateText(bool value);
    public virtual ImageAlign get_ImageAlign();
    public virtual void set_ImageAlign(ImageAlign value);
    public virtual string get_ImageUrl();
    public virtual void set_ImageUrl(string value);
    public virtual bool get_SupportsDisabledAttribute();
    internal bool get_UrlResolved();
    internal void set_UrlResolved(bool value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected internal virtual void RenderContents(HtmlTextWriter writer);
}
public enum System.Web.UI.WebControls.ImageAlign : Enum {
    public int value__;
    public static ImageAlign NotSet;
    public static ImageAlign Left;
    public static ImageAlign Right;
    public static ImageAlign Baseline;
    public static ImageAlign Top;
    public static ImageAlign Middle;
    public static ImageAlign Bottom;
    public static ImageAlign AbsBottom;
    public static ImageAlign AbsMiddle;
    public static ImageAlign TextTop;
}
[DefaultEventAttribute("Click")]
[DesignerAttribute("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SupportsEventValidationAttribute]
public class System.Web.UI.WebControls.ImageButton : Image {
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("WebControl_CommandName")]
[ThemeableAttribute("False")]
public string CommandName { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("WebControl_CommandArgument")]
public string CommandArgument { get; public set; }
    [ThemeableAttribute("False")]
[DefaultValueAttribute("True")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Button_CausesValidation")]
public bool CausesValidation { get; public set; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[BindableAttribute("True")]
[WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("WebControl_Enabled")]
public bool Enabled { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public bool GenerateEmptyAlternateText { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Button_OnClientClick")]
[ThemeableAttribute("False")]
public string OnClientClick { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[ThemeableAttribute("False")]
[UrlPropertyAttribute("*.aspx")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Button_PostBackUrl")]
public string PostBackUrl { get; public set; }
    public bool SupportsDisabledAttribute { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected HtmlTextWriterTag TagKey { get; }
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("PostBackControl_ValidationGroup")]
public string ValidationGroup { get; public set; }
    private string System.Web.UI.WebControls.IButtonControl.Text { get; private set; }
    protected string Text { get; protected set; }
    private static ImageButton();
    public sealed virtual string get_CommandName();
    public sealed virtual void set_CommandName(string value);
    public sealed virtual string get_CommandArgument();
    public sealed virtual void set_CommandArgument(string value);
    public virtual bool get_CausesValidation();
    public virtual void set_CausesValidation(bool value);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public virtual bool get_GenerateEmptyAlternateText();
    public virtual void set_GenerateEmptyAlternateText(bool value);
    public virtual string get_OnClientClick();
    public virtual void set_OnClientClick(string value);
    public virtual string get_PostBackUrl();
    public virtual void set_PostBackUrl(string value);
    public virtual bool get_SupportsDisabledAttribute();
    protected virtual HtmlTextWriterTag get_TagKey();
    public virtual string get_ValidationGroup();
    public virtual void set_ValidationGroup(string value);
    public void add_Click(ImageClickEventHandler value);
    public void remove_Click(ImageClickEventHandler value);
    private sealed virtual override void System.Web.UI.WebControls.IButtonControl.add_Click(EventHandler value);
    private sealed virtual override void System.Web.UI.WebControls.IButtonControl.remove_Click(EventHandler value);
    public sealed virtual void add_Command(CommandEventHandler value);
    public sealed virtual void remove_Command(CommandEventHandler value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual PostBackOptions GetPostBackOptions();
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    internal static double ReadPositionFromPost(string requestValue);
    protected virtual void OnClick(ImageClickEventArgs e);
    protected virtual void OnCommand(CommandEventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    protected virtual void RaisePostBackEvent(string eventArgument);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    protected virtual void RaisePostDataChangedEvent();
    private sealed virtual override string System.Web.UI.WebControls.IButtonControl.get_Text();
    private sealed virtual override void System.Web.UI.WebControls.IButtonControl.set_Text(string value);
    protected virtual string get_Text();
    protected virtual void set_Text(string value);
}
public class System.Web.UI.WebControls.ImageField : DataControlField {
    public static string ThisExpression;
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ImageField_AlternateText")]
public string AlternateText { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("ImageField_ConvertEmptyStringToNull")]
public bool ConvertEmptyStringToNull { get; public set; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebSysDescriptionAttribute("ImageField_DataAlternateTextField")]
public string DataAlternateTextField { get; public set; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ImageField_DataAlternateTextFormatString")]
public string DataAlternateTextFormatString { get; public set; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebSysDescriptionAttribute("ImageField_ImageUrlField")]
public string DataImageUrlField { get; public set; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ImageField_ImageUrlFormatString")]
public string DataImageUrlFormatString { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("BoundField_NullDisplayText")]
public string NullDisplayText { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("ImageField_NullImageUrl")]
public string NullImageUrl { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("ImageField_ReadOnly")]
public bool ReadOnly { get; public set; }
    private static ImageField();
    public virtual string get_AlternateText();
    public virtual void set_AlternateText(string value);
    public virtual bool get_ConvertEmptyStringToNull();
    public virtual void set_ConvertEmptyStringToNull(bool value);
    public virtual string get_DataAlternateTextField();
    public virtual void set_DataAlternateTextField(string value);
    public virtual string get_DataAlternateTextFormatString();
    public virtual void set_DataAlternateTextFormatString(string value);
    public virtual string get_DataImageUrlField();
    public virtual void set_DataImageUrlField(string value);
    public virtual string get_DataImageUrlFormatString();
    public virtual void set_DataImageUrlFormatString(string value);
    public virtual string get_NullDisplayText();
    public virtual void set_NullDisplayText(string value);
    public virtual string get_NullImageUrl();
    public virtual void set_NullImageUrl(string value);
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    protected virtual void CopyProperties(DataControlField newField);
    protected virtual DataControlField CreateField();
    public virtual void ExtractValuesFromCell(IOrderedDictionary dictionary, DataControlFieldCell cell, DataControlRowState rowState, bool includeReadOnly);
    protected virtual string FormatImageUrlValue(object dataValue);
    protected virtual string GetFormattedAlternateText(Control controlContainer);
    protected virtual string GetDesignTimeValue();
    protected virtual object GetValue(Control controlContainer, string fieldName, PropertyDescriptor& cachedDescriptor);
    public virtual bool Initialize(bool enableSorting, Control control);
    public virtual void InitializeCell(DataControlFieldCell cell, DataControlCellType cellType, DataControlRowState rowState, int rowIndex);
    protected virtual void InitializeDataCell(DataControlFieldCell cell, DataControlRowState rowState);
    protected virtual void OnDataBindField(object sender, EventArgs e);
    public virtual void ValidateSupportsCallback();
}
[DefaultEventAttribute("Click")]
[DefaultPropertyAttribute("HotSpots")]
[ParseChildrenAttribute("True", "HotSpots")]
[SupportsEventValidationAttribute]
public class System.Web.UI.WebControls.ImageMap : Image {
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public bool Enabled { get; public set; }
    [WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("ImageMap_HotSpots")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("2")]
public HotSpotCollection HotSpots { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("HotSpot_HotSpotMode")]
public HotSpotMode HotSpotMode { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("HotSpot_Target")]
public string Target { get; public set; }
    private static ImageMap();
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public HotSpotCollection get_HotSpots();
    public virtual HotSpotMode get_HotSpotMode();
    public virtual void set_HotSpotMode(HotSpotMode value);
    public virtual string get_Target();
    public virtual void set_Target(string value);
    public void add_Click(ImageMapEventHandler value);
    public void remove_Click(ImageMapEventHandler value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual void LoadViewState(object savedState);
    protected virtual void OnClick(ImageMapEventArgs e);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    protected virtual void RaisePostBackEvent(string eventArgument);
}
public class System.Web.UI.WebControls.ImageMapEventArgs : EventArgs {
    public string PostBackValue { get; }
    public ImageMapEventArgs(string value);
    public string get_PostBackValue();
}
public class System.Web.UI.WebControls.ImageMapEventHandler : MulticastDelegate {
    public ImageMapEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ImageMapEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ImageMapEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface System.Web.UI.WebControls.IPersistedSelector {
    public DataKey DataKey { get; public set; }
    public abstract virtual DataKey get_DataKey();
    public abstract virtual void set_DataKey(DataKey value);
}
public interface System.Web.UI.WebControls.IPostBackContainer {
    public abstract virtual PostBackOptions GetPostBackOptions(IButtonControl buttonControl);
}
public interface System.Web.UI.WebControls.IRepeatInfoUser {
    public bool HasHeader { get; }
    public bool HasFooter { get; }
    public bool HasSeparators { get; }
    public int RepeatedItemCount { get; }
    public abstract virtual bool get_HasHeader();
    public abstract virtual bool get_HasFooter();
    public abstract virtual bool get_HasSeparators();
    public abstract virtual int get_RepeatedItemCount();
    public abstract virtual Style GetItemStyle(ListItemType itemType, int repeatIndex);
    public abstract virtual void RenderItem(ListItemType itemType, int repeatIndex, RepeatInfo repeatInfo, HtmlTextWriter writer);
}
internal interface System.Web.UI.WebControls.IWizardSideBarListControl {
    public object DataSource { get; public set; }
    public IEnumerable Items { get; }
    public ITemplate ItemTemplate { get; public set; }
    public int SelectedIndex { get; public set; }
    public abstract virtual object get_DataSource();
    public abstract virtual void set_DataSource(object value);
    public abstract virtual IEnumerable get_Items();
    public abstract virtual ITemplate get_ItemTemplate();
    public abstract virtual void set_ItemTemplate(ITemplate value);
    public abstract virtual int get_SelectedIndex();
    public abstract virtual void set_SelectedIndex(int value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ItemCommand(CommandEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ItemCommand(CommandEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ItemDataBound(EventHandler`1<WizardSideBarListControlItemEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ItemDataBound(EventHandler`1<WizardSideBarListControlItemEventArgs> value);
    public abstract virtual void DataBind();
}
[ControlBuilderAttribute("System.Web.UI.WebControls.LabelControlBuilder")]
[ControlValuePropertyAttribute("Text")]
[DataBindingHandlerAttribute("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultPropertyAttribute("Text")]
[ParseChildrenAttribute("False")]
[DesignerAttribute("System.Web.UI.Design.WebControls.LabelDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxDataAttribute("<{0}:Label runat="server" Text="Label"></{0}:Label>")]
public class System.Web.UI.WebControls.Label : WebControl {
    [DefaultValueAttribute("")]
[IDReferencePropertyAttribute]
[TypeConverterAttribute("System.Web.UI.WebControls.AssociatedControlConverter")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("Label_AssociatedControlID")]
[ThemeableAttribute("False")]
public string AssociatedControlID { get; public set; }
    internal bool AssociatedControlInControlTree { get; internal set; }
    public bool SupportsDisabledAttribute { get; }
    internal bool RequiresLegacyRendering { get; }
    protected HtmlTextWriterTag TagKey { get; }
    [LocalizableAttribute("True")]
[BindableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Label_Text")]
[PersistenceModeAttribute("2")]
public string Text { get; public set; }
    internal Label(HtmlTextWriterTag tag);
    public virtual string get_AssociatedControlID();
    public virtual void set_AssociatedControlID(string value);
    internal bool get_AssociatedControlInControlTree();
    internal void set_AssociatedControlInControlTree(bool value);
    public virtual bool get_SupportsDisabledAttribute();
    internal virtual bool get_RequiresLegacyRendering();
    protected virtual HtmlTextWriterTag get_TagKey();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual void AddParsedSubObject(object obj);
    protected virtual void LoadViewState(object savedState);
    protected internal virtual void RenderContents(HtmlTextWriter writer);
}
public class System.Web.UI.WebControls.LabelControlBuilder : ControlBuilder {
    public virtual bool AllowWhitespaceLiterals();
}
internal class System.Web.UI.WebControls.LabelLiteral : Literal {
    internal Control _for;
    internal bool _renderAsLabel;
    internal bool RenderAsLabel { get; internal set; }
    internal LabelLiteral(Control forControl);
    internal bool get_RenderAsLabel();
    internal void set_RenderAsLabel(bool value);
    protected internal virtual void Render(HtmlTextWriter writer);
}
[DefaultMemberAttribute("Item")]
[SupportsEventValidationAttribute]
internal class System.Web.UI.WebControls.LayoutTable : Table {
    public TableCell Item { get; }
    public LayoutTable(int rows, int columns, Page page);
    public TableCell get_Item(int row, int column);
}
internal class System.Web.UI.WebControls.LayoutTableCell : TableCell {
    protected internal virtual void AddedControl(Control control, int index);
    protected internal virtual void RemovedControl(Control control);
}
[ControlBuilderAttribute("System.Web.UI.WebControls.LinkButtonControlBuilder")]
[DataBindingHandlerAttribute("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultEventAttribute("Click")]
[DefaultPropertyAttribute("Text")]
[ToolboxDataAttribute("<{0}:LinkButton runat="server">LinkButton</{0}:LinkButton>")]
[DesignerAttribute("System.Web.UI.Design.WebControls.LinkButtonDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ParseChildrenAttribute("False")]
[SupportsEventValidationAttribute]
public class System.Web.UI.WebControls.LinkButton : WebControl {
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("WebControl_CommandName")]
public string CommandName { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("WebControl_CommandArgument")]
public string CommandArgument { get; public set; }
    [DefaultValueAttribute("True")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Button_CausesValidation")]
public bool CausesValidation { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Button_OnClientClick")]
public string OnClientClick { get; public set; }
    public bool SupportsDisabledAttribute { get; }
    internal bool RequiresLegacyRendering { get; }
    [LocalizableAttribute("True")]
[BindableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("LinkButton_Text")]
[PersistenceModeAttribute("2")]
public string Text { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[ThemeableAttribute("False")]
[UrlPropertyAttribute("*.aspx")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Button_PostBackUrl")]
public string PostBackUrl { get; public set; }
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("PostBackControl_ValidationGroup")]
public string ValidationGroup { get; public set; }
    private static LinkButton();
    public sealed virtual string get_CommandName();
    public sealed virtual void set_CommandName(string value);
    public sealed virtual string get_CommandArgument();
    public sealed virtual void set_CommandArgument(string value);
    public virtual bool get_CausesValidation();
    public virtual void set_CausesValidation(bool value);
    public virtual string get_OnClientClick();
    public virtual void set_OnClientClick(string value);
    public virtual bool get_SupportsDisabledAttribute();
    internal virtual bool get_RequiresLegacyRendering();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual string get_PostBackUrl();
    public virtual void set_PostBackUrl(string value);
    public virtual string get_ValidationGroup();
    public virtual void set_ValidationGroup(string value);
    public sealed virtual void add_Click(EventHandler value);
    public sealed virtual void remove_Click(EventHandler value);
    public sealed virtual void add_Command(CommandEventHandler value);
    public sealed virtual void remove_Command(CommandEventHandler value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual void AddParsedSubObject(object obj);
    protected virtual PostBackOptions GetPostBackOptions();
    protected virtual void LoadViewState(object savedState);
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnCommand(CommandEventArgs e);
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    protected virtual void RaisePostBackEvent(string eventArgument);
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void RenderContents(HtmlTextWriter writer);
}
public class System.Web.UI.WebControls.LinkButtonControlBuilder : ControlBuilder {
    public virtual bool AllowWhitespaceLiterals();
}
[ValidationPropertyAttribute("SelectedItem")]
[SupportsEventValidationAttribute]
public class System.Web.UI.WebControls.ListBox : ListControl {
    [BrowsableAttribute("False")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("False")]
public BorderStyle BorderStyle { get; public set; }
    [BrowsableAttribute("False")]
public Unit BorderWidth { get; public set; }
    internal bool IsMultiSelectInternal { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("4")]
[WebSysDescriptionAttribute("ListBox_Rows")]
public int Rows { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("ListBox_SelectionMode")]
public ListSelectionMode SelectionMode { get; public set; }
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual BorderStyle get_BorderStyle();
    public virtual void set_BorderStyle(BorderStyle value);
    public virtual Unit get_BorderWidth();
    public virtual void set_BorderWidth(Unit value);
    internal virtual bool get_IsMultiSelectInternal();
    public virtual int get_Rows();
    public virtual void set_Rows(int value);
    public virtual ListSelectionMode get_SelectionMode();
    public virtual void set_SelectionMode(ListSelectionMode value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    public virtual Int32[] GetSelectedIndices();
    protected internal virtual void OnPreRender(EventArgs e);
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    protected virtual void RaisePostDataChangedEvent();
}
[ControlValuePropertyAttribute("SelectedValue")]
[DataBindingHandlerAttribute("System.Web.UI.Design.WebControls.ListControlDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultEventAttribute("SelectedIndexChanged")]
[ParseChildrenAttribute("True", "Items")]
[DesignerAttribute("System.Web.UI.Design.WebControls.ListControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public abstract class System.Web.UI.WebControls.ListControl : DataBoundControl {
    [DefaultValueAttribute("False")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("ListControl_AppendDataBoundItems")]
public bool AppendDataBoundItems { get; public set; }
    [DefaultValueAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("ListControl_AutoPostBack")]
[ThemeableAttribute("False")]
public bool AutoPostBack { get; public set; }
    [DefaultValueAttribute("False")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("AutoPostBackControl_CausesValidation")]
public bool CausesValidation { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("ListControl_DataTextField")]
public string DataTextField { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("ListControl_DataTextFormatString")]
public string DataTextFormatString { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("ListControl_DataValueField")]
public string DataValueField { get; public set; }
    internal bool IsMultiSelectInternal { get; }
    [WebCategoryAttribute("Default")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.ListItemsCollectionEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
[WebSysDescriptionAttribute("ListControl_Items")]
[PersistenceModeAttribute("2")]
public ListItemCollection Items { get; }
    internal bool SaveSelectedIndicesViewState { get; }
    [BindableAttribute("True")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("WebControl_SelectedIndex")]
public int SelectedIndex { get; public set; }
    internal ArrayList SelectedIndicesInternal { get; }
    [WebCategoryAttribute("Behavior")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ListControl_SelectedItem")]
[DesignerSerializationVisibilityAttribute("0")]
public ListItem SelectedItem { get; }
    [BindableAttribute("True", "1")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("ListControl_SelectedValue")]
[WebCategoryAttribute("Behavior")]
public string SelectedValue { get; public set; }
    [BrowsableAttribute("False")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("ListControl_Text")]
[WebCategoryAttribute("Behavior")]
public string Text { get; public set; }
    protected HtmlTextWriterTag TagKey { get; }
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("PostBackControl_ValidationGroup")]
public string ValidationGroup { get; public set; }
    internal bool SkipEnsureDataBoundInLoadPostData { get; internal set; }
    private static ListControl();
    public virtual bool get_AppendDataBoundItems();
    public virtual void set_AppendDataBoundItems(bool value);
    public virtual bool get_AutoPostBack();
    public virtual void set_AutoPostBack(bool value);
    public virtual bool get_CausesValidation();
    public virtual void set_CausesValidation(bool value);
    public virtual string get_DataTextField();
    public virtual void set_DataTextField(string value);
    public virtual string get_DataTextFormatString();
    public virtual void set_DataTextFormatString(string value);
    public virtual string get_DataValueField();
    public virtual void set_DataValueField(string value);
    internal virtual bool get_IsMultiSelectInternal();
    public virtual ListItemCollection get_Items();
    internal bool get_SaveSelectedIndicesViewState();
    public virtual int get_SelectedIndex();
    public virtual void set_SelectedIndex(int value);
    internal virtual ArrayList get_SelectedIndicesInternal();
    public virtual ListItem get_SelectedItem();
    public virtual string get_SelectedValue();
    public virtual void set_SelectedValue(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    protected virtual HtmlTextWriterTag get_TagKey();
    public virtual string get_ValidationGroup();
    public virtual void set_ValidationGroup(string value);
    public void add_SelectedIndexChanged(EventHandler value);
    public void remove_SelectedIndexChanged(EventHandler value);
    public sealed virtual void add_TextChanged(EventHandler value);
    public sealed virtual void remove_TextChanged(EventHandler value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    public virtual void ClearSelection();
    protected virtual void LoadViewState(object savedState);
    protected virtual void OnDataBinding(EventArgs e);
    internal void EnsureDataBoundInLoadPostData();
    [CompilerGeneratedAttribute]
internal bool get_SkipEnsureDataBoundInLoadPostData();
    [CompilerGeneratedAttribute]
internal void set_SkipEnsureDataBoundInLoadPostData(bool value);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
    protected virtual void OnTextChanged(EventArgs e);
    protected internal virtual void PerformDataBinding(IEnumerable dataSource);
    protected virtual void PerformSelect();
    protected internal virtual void RenderContents(HtmlTextWriter writer);
    protected virtual object SaveViewState();
    internal void SelectInternal(ArrayList selectedIndices);
    internal static void SetControlToRepeatID(Control owner, Control controlToRepeat, int index);
    protected void SetPostDataSelection(int selectedIndex);
    protected virtual void TrackViewState();
    protected internal virtual void VerifyMultiSelect();
}
[ControlBuilderAttribute("System.Web.UI.WebControls.ListItemControlBuilder")]
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[ParseChildrenAttribute("True", "Text")]
public class System.Web.UI.WebControls.ListItem : object {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public AttributeCollection Attributes { get; }
    internal bool Dirty { get; internal set; }
    [DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    internal bool HasAttributes { get; }
    [DefaultValueAttribute("False")]
[TypeConverterAttribute("System.Web.UI.MinimizableAttributeTypeConverter")]
public bool Selected { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("3")]
public string Text { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string Value { get; public set; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public ListItem(string text);
    public ListItem(string text, string value);
    public ListItem(string text, string value, bool enabled);
    public AttributeCollection get_Attributes();
    internal bool get_Dirty();
    internal void set_Dirty(bool value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    internal bool get_HasAttributes();
    public bool get_Selected();
    public void set_Selected(bool value);
    public string get_Text();
    public void set_Text(string value);
    public string get_Value();
    public void set_Value(string value);
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
    public static ListItem FromString(string s);
    public virtual string ToString();
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object state);
    internal void LoadViewState(object state);
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
    internal void TrackViewState();
    internal void RenderAttributes(HtmlTextWriter writer);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    internal object SaveViewState();
    private sealed virtual override string System.Web.UI.IAttributeAccessor.GetAttribute(string name);
    private sealed virtual override void System.Web.UI.IAttributeAccessor.SetAttribute(string name, string value);
    private sealed virtual override void System.Web.UI.IParserAccessor.AddParsedSubObject(object obj);
}
[DefaultMemberAttribute("Item")]
[EditorAttribute("System.Web.UI.Design.WebControls.ListItemsCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public class System.Web.UI.WebControls.ListItemCollection : object {
    public ListItem Item { get; }
    private object System.Collections.IList.Item { get; private set; }
    public int Capacity { get; public set; }
    public int Count { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public ListItem get_Item(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public int get_Capacity();
    public void set_Capacity(int value);
    public sealed virtual int get_Count();
    public void Add(string item);
    public void Add(ListItem item);
    private sealed virtual override int System.Collections.IList.Add(object item);
    public void AddRange(ListItem[] items);
    public sealed virtual void Clear();
    public bool Contains(ListItem item);
    private sealed virtual override bool System.Collections.IList.Contains(object item);
    public sealed virtual void CopyTo(Array array, int index);
    public ListItem FindByText(string text);
    internal int FindByTextInternal(string text, bool includeDisabled);
    public ListItem FindByValue(string value);
    internal int FindByValueInternal(string value, bool includeDisabled);
    public sealed virtual IEnumerator GetEnumerator();
    public int IndexOf(ListItem item);
    private sealed virtual override int System.Collections.IList.IndexOf(object item);
    public void Insert(int index, string item);
    public void Insert(int index, ListItem item);
    private sealed virtual override void System.Collections.IList.Insert(int index, object item);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual void RemoveAt(int index);
    public void Remove(string item);
    public void Remove(ListItem item);
    private sealed virtual override void System.Collections.IList.Remove(object item);
    public sealed virtual object get_SyncRoot();
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object state);
    internal void LoadViewState(object state);
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
    internal void TrackViewState();
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    internal object SaveViewState();
}
public class System.Web.UI.WebControls.ListItemControlBuilder : ControlBuilder {
    public virtual bool AllowWhitespaceLiterals();
    public virtual bool HtmlDecodeLiterals();
}
public enum System.Web.UI.WebControls.ListItemType : Enum {
    public int value__;
    public static ListItemType Header;
    public static ListItemType Footer;
    public static ListItemType Item;
    public static ListItemType AlternatingItem;
    public static ListItemType SelectedItem;
    public static ListItemType EditItem;
    public static ListItemType Separator;
    public static ListItemType Pager;
}
public enum System.Web.UI.WebControls.ListSelectionMode : Enum {
    public int value__;
    public static ListSelectionMode Single;
    public static ListSelectionMode Multiple;
}
[DataBindingHandlerAttribute("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultPropertyAttribute("Text")]
[DesignerAttribute("System.Web.UI.Design.WebControls.LiteralDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ControlBuilderAttribute("System.Web.UI.WebControls.LiteralControlBuilder")]
public class System.Web.UI.WebControls.Literal : Control {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Literal_Mode")]
public LiteralMode Mode { get; public set; }
    [LocalizableAttribute("True")]
[BindableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Literal_Text")]
public string Text { get; public set; }
    public LiteralMode get_Mode();
    public void set_Mode(LiteralMode value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    protected virtual void AddParsedSubObject(object obj);
    protected virtual ControlCollection CreateControlCollection();
    [EditorBrowsableAttribute("1")]
public virtual void Focus();
    protected internal virtual void Render(HtmlTextWriter writer);
}
public class System.Web.UI.WebControls.LiteralControlBuilder : ControlBuilder {
    public virtual bool AllowWhitespaceLiterals();
    public virtual void AppendLiteralString(string s);
    public virtual void AppendSubBuilder(ControlBuilder subBuilder);
}
public enum System.Web.UI.WebControls.LiteralMode : Enum {
    public int value__;
    public static LiteralMode Transform;
    public static LiteralMode PassThrough;
    public static LiteralMode Encode;
}
[DesignerAttribute("System.Web.UI.Design.WebControls.LocalizeDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxBitmapAttribute("System.Web.UI.WebControls.Localize")]
public class System.Web.UI.WebControls.Localize : Literal {
}
[BindableAttribute("False")]
[DefaultEventAttribute("Authenticate")]
[DesignerAttribute("System.Web.UI.Design.WebControls.LoginDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.UI.WebControls.Login : CompositeControl {
    public static string LoginButtonCommandName;
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("1")]
[WebSysDescriptionAttribute("Login_BorderPadding")]
public int BorderPadding { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("Login_CheckBoxStyle")]
public TableItemStyle CheckBoxStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_CreateUserText")]
public string CreateUserText { get; public set; }
    [WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Login_CreateUserUrl")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string CreateUserUrl { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Login_DestinationPageUrl")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[ThemeableAttribute("False")]
[UrlPropertyAttribute]
public string DestinationPageUrl { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("Login_DisplayRememberMe")]
public bool DisplayRememberMe { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_HelpPageText")]
public string HelpPageText { get; public set; }
    [WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("LoginControls_HelpPageUrl")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string HelpPageUrl { get; public set; }
    [WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Login_CreateUserIconUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string CreateUserIconUrl { get; public set; }
    [WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Login_HelpPageIconUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string HelpPageIconUrl { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("WebControl_HyperLinkStyle")]
public TableItemStyle HyperLinkStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("WebControl_InstructionText")]
public string InstructionText { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("WebControl_InstructionTextStyle")]
public TableItemStyle InstructionTextStyle { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("LoginControls_LabelStyle")]
public TableItemStyle LabelStyle { get; }
    [BrowsableAttribute("False")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.Login")]
public ITemplate LayoutTemplate { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("Login_FailureAction")]
public LoginFailureAction FailureAction { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("Login_DefaultFailureText")]
[WebSysDescriptionAttribute("Login_FailureText")]
public string FailureText { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("WebControl_FailureTextStyle")]
public TableItemStyle FailureTextStyle { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Login_LoginButtonImageUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string LoginButtonImageUrl { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("Login_LoginButtonStyle")]
public Style LoginButtonStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("Login_DefaultLoginButtonText")]
[WebSysDescriptionAttribute("Login_LoginButtonText")]
public string LoginButtonText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Login_LoginButtonType")]
public ButtonType LoginButtonType { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Layout")]
[WebSysDescriptionAttribute("Login_Orientation")]
public Orientation Orientation { get; public set; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("MembershipProvider_Name")]
public string MembershipProvider { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Password { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("LoginControls_DefaultPasswordLabelText")]
[WebSysDescriptionAttribute("LoginControls_PasswordLabelText")]
public string PasswordLabelText { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_PasswordRecoveryText")]
public string PasswordRecoveryText { get; public set; }
    [WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Login_PasswordRecoveryUrl")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string PasswordRecoveryUrl { get; public set; }
    [WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Login_PasswordRecoveryIconUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string PasswordRecoveryIconUrl { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("Login_DefaultPasswordRequiredErrorMessage")]
[WebSysDescriptionAttribute("Login_PasswordRequiredErrorMessage")]
public string PasswordRequiredErrorMessage { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("Login_RememberMeSet")]
public bool RememberMeSet { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("Login_DefaultRememberMeText")]
[WebSysDescriptionAttribute("Login_RememberMeText")]
public string RememberMeText { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("LoginControls_RenderOuterTable")]
public bool RenderOuterTable { get; public set; }
    protected HtmlTextWriterTag TagKey { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("LoginControls_TextBoxStyle")]
public Style TextBoxStyle { get; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("LoginControls_TextLayout")]
public LoginTextLayout TextLayout { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("Login_DefaultTitleText")]
[WebSysDescriptionAttribute("LoginControls_TitleText")]
public string TitleText { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("LoginControls_TitleTextStyle")]
public TableItemStyle TitleTextStyle { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("UserName_InitialValue")]
public string UserName { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("Login_DefaultUserNameLabelText")]
[WebSysDescriptionAttribute("LoginControls_UserNameLabelText")]
public string UserNameLabelText { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("Login_DefaultUserNameRequiredErrorMessage")]
[WebSysDescriptionAttribute("ChangePassword_UserNameRequiredErrorMessage")]
public string UserNameRequiredErrorMessage { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("Login_ValidatorTextStyle")]
public Style ValidatorTextStyle { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("Login_VisibleWhenLoggedIn")]
public bool VisibleWhenLoggedIn { get; public set; }
    private static Login();
    public virtual int get_BorderPadding();
    public virtual void set_BorderPadding(int value);
    public TableItemStyle get_CheckBoxStyle();
    public virtual string get_CreateUserText();
    public virtual void set_CreateUserText(string value);
    public virtual string get_CreateUserUrl();
    public virtual void set_CreateUserUrl(string value);
    public virtual string get_DestinationPageUrl();
    public virtual void set_DestinationPageUrl(string value);
    public virtual bool get_DisplayRememberMe();
    public virtual void set_DisplayRememberMe(bool value);
    public virtual string get_HelpPageText();
    public virtual void set_HelpPageText(string value);
    public virtual string get_HelpPageUrl();
    public virtual void set_HelpPageUrl(string value);
    public virtual string get_CreateUserIconUrl();
    public virtual void set_CreateUserIconUrl(string value);
    public virtual string get_HelpPageIconUrl();
    public virtual void set_HelpPageIconUrl(string value);
    public TableItemStyle get_HyperLinkStyle();
    public virtual string get_InstructionText();
    public virtual void set_InstructionText(string value);
    public TableItemStyle get_InstructionTextStyle();
    public TableItemStyle get_LabelStyle();
    public virtual ITemplate get_LayoutTemplate();
    public virtual void set_LayoutTemplate(ITemplate value);
    public virtual LoginFailureAction get_FailureAction();
    public virtual void set_FailureAction(LoginFailureAction value);
    public virtual string get_FailureText();
    public virtual void set_FailureText(string value);
    public TableItemStyle get_FailureTextStyle();
    public virtual string get_LoginButtonImageUrl();
    public virtual void set_LoginButtonImageUrl(string value);
    public Style get_LoginButtonStyle();
    public virtual string get_LoginButtonText();
    public virtual void set_LoginButtonText(string value);
    public virtual ButtonType get_LoginButtonType();
    public virtual void set_LoginButtonType(ButtonType value);
    public virtual Orientation get_Orientation();
    public virtual void set_Orientation(Orientation value);
    public virtual string get_MembershipProvider();
    public virtual void set_MembershipProvider(string value);
    public virtual string get_Password();
    public virtual string get_PasswordLabelText();
    public virtual void set_PasswordLabelText(string value);
    public virtual string get_PasswordRecoveryText();
    public virtual void set_PasswordRecoveryText(string value);
    public virtual string get_PasswordRecoveryUrl();
    public virtual void set_PasswordRecoveryUrl(string value);
    public virtual string get_PasswordRecoveryIconUrl();
    public virtual void set_PasswordRecoveryIconUrl(string value);
    public virtual string get_PasswordRequiredErrorMessage();
    public virtual void set_PasswordRequiredErrorMessage(string value);
    public virtual bool get_RememberMeSet();
    public virtual void set_RememberMeSet(bool value);
    public virtual string get_RememberMeText();
    public virtual void set_RememberMeText(string value);
    public virtual bool get_RenderOuterTable();
    public virtual void set_RenderOuterTable(bool value);
    protected virtual HtmlTextWriterTag get_TagKey();
    public Style get_TextBoxStyle();
    public virtual LoginTextLayout get_TextLayout();
    public virtual void set_TextLayout(LoginTextLayout value);
    public virtual string get_TitleText();
    public virtual void set_TitleText(string value);
    public TableItemStyle get_TitleTextStyle();
    public virtual string get_UserName();
    public virtual void set_UserName(string value);
    public virtual string get_UserNameLabelText();
    public virtual void set_UserNameLabelText(string value);
    public virtual string get_UserNameRequiredErrorMessage();
    public virtual void set_UserNameRequiredErrorMessage(string value);
    public Style get_ValidatorTextStyle();
    public virtual bool get_VisibleWhenLoggedIn();
    public virtual void set_VisibleWhenLoggedIn(bool value);
    public void add_LoggedIn(EventHandler value);
    public void remove_LoggedIn(EventHandler value);
    public void add_Authenticate(AuthenticateEventHandler value);
    public void remove_Authenticate(AuthenticateEventHandler value);
    public void add_LoggingIn(LoginCancelEventHandler value);
    public void remove_LoggingIn(LoginCancelEventHandler value);
    public void add_LoginError(EventHandler value);
    public void remove_LoginError(EventHandler value);
    protected internal virtual void CreateChildControls();
    protected virtual void LoadViewState(object savedState);
    protected virtual void OnLoggedIn(EventArgs e);
    protected virtual void OnAuthenticate(AuthenticateEventArgs e);
    protected virtual void OnLoggingIn(LoginCancelEventArgs e);
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
    protected virtual void OnLoginError(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected virtual object SaveViewState();
    internal void SetChildProperties();
    protected virtual void SetDesignModeState(IDictionary data);
    protected virtual void TrackViewState();
}
public class System.Web.UI.WebControls.LoginCancelEventArgs : EventArgs {
    public bool Cancel { get; public set; }
    public LoginCancelEventArgs(bool cancel);
    public bool get_Cancel();
    public void set_Cancel(bool value);
}
public class System.Web.UI.WebControls.LoginCancelEventHandler : MulticastDelegate {
    public LoginCancelEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoginCancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoginCancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Web.UI.WebControls.LoginFailureAction : Enum {
    public int value__;
    public static LoginFailureAction Refresh;
    public static LoginFailureAction RedirectToLoginPage;
}
[BindableAttribute("False")]
[DesignerAttribute("System.Web.UI.Design.WebControls.LoginNameDesigner,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultPropertyAttribute("FormatString")]
public class System.Web.UI.WebControls.LoginName : WebControl {
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("{0}")]
[LocalizableAttribute("True")]
[WebSysDescriptionAttribute("LoginName_FormatString")]
public string FormatString { get; public set; }
    public bool SupportsDisabledAttribute { get; }
    internal string UserName { get; }
    public virtual string get_FormatString();
    public virtual void set_FormatString(string value);
    public virtual bool get_SupportsDisabledAttribute();
    internal string get_UserName();
    protected internal virtual void Render(HtmlTextWriter writer);
    public virtual void RenderBeginTag(HtmlTextWriter writer);
    public virtual void RenderEndTag(HtmlTextWriter writer);
    protected internal virtual void RenderContents(HtmlTextWriter writer);
}
[BindableAttribute("False")]
[DefaultEventAttribute("LoggingOut")]
[DesignerAttribute("System.Web.UI.Design.WebControls.LoginStatusDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.UI.WebControls.LoginStatus : CompositeControl {
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("LoginStatus_LoginImageUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string LoginImageUrl { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("LoginStatus_DefaultLoginText")]
[WebSysDescriptionAttribute("LoginStatus_LoginText")]
public string LoginText { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("LoginStatus_LogoutAction")]
public LogoutAction LogoutAction { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("LoginStatus_LogoutImageUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string LogoutImageUrl { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("LoginStatus_LogoutPageUrl")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[ThemeableAttribute("False")]
[UrlPropertyAttribute]
public string LogoutPageUrl { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("LoginStatus_DefaultLogoutText")]
[WebSysDescriptionAttribute("LoginStatus_LogoutText")]
public string LogoutText { get; public set; }
    protected HtmlTextWriterTag TagKey { get; }
    private static LoginStatus();
    public virtual string get_LoginImageUrl();
    public virtual void set_LoginImageUrl(string value);
    public virtual string get_LoginText();
    public virtual void set_LoginText(string value);
    public virtual LogoutAction get_LogoutAction();
    public virtual void set_LogoutAction(LogoutAction value);
    public virtual string get_LogoutImageUrl();
    public virtual void set_LogoutImageUrl(string value);
    public virtual string get_LogoutPageUrl();
    public virtual void set_LogoutPageUrl(string value);
    public virtual string get_LogoutText();
    public virtual void set_LogoutText(string value);
    protected virtual HtmlTextWriterTag get_TagKey();
    public void add_LoggedOut(EventHandler value);
    public void remove_LoggedOut(EventHandler value);
    public void add_LoggingOut(LoginCancelEventHandler value);
    public void remove_LoggingOut(LoginCancelEventHandler value);
    protected internal virtual void CreateChildControls();
    protected virtual void OnLoggedOut(EventArgs e);
    protected virtual void OnLoggingOut(LoginCancelEventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected internal virtual void RenderContents(HtmlTextWriter writer);
    protected virtual void SetDesignModeState(IDictionary data);
}
public enum System.Web.UI.WebControls.LoginTextLayout : Enum {
    public int value__;
    public static LoginTextLayout TextOnLeft;
    public static LoginTextLayout TextOnTop;
}
internal static class System.Web.UI.WebControls.LoginUtil : object {
    internal static void ApplyStyleToLiteral(Literal literal, string text, Style style, bool setTableCellVisible);
    internal static void CopyBorderStyles(WebControl control, Style style);
    internal static void CopyStyleToInnerControl(WebControl control, Style style);
    internal static Table CreateChildTable(bool convertingToTemplate);
    internal static MembershipProvider GetProvider(string providerName);
    internal static IPrincipal GetUser(Control c);
    internal static string GetUserName(Control c);
    internal static void SendPasswordMail(string email, string userName, string password, MailDefinition mailDefinition, string defaultSubject, string defaultBody, OnSendingMailDelegate onSendingMailDelegate, OnSendMailErrorDelegate onSendMailErrorDelegate, Control owner);
    internal static void SetTableCellStyle(Control control, Style style);
    internal static void SetTableCellVisible(Control control, bool visible);
    internal static string ModifiedOuterTableBasicStylePropertyName(WebControl control);
}
[BindableAttribute("False")]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
[DesignerAttribute("System.Web.UI.Design.WebControls.LoginViewDesigner,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultPropertyAttribute("CurrentView")]
[DefaultEventAttribute("ViewChanged")]
[ThemeableAttribute("True")]
public class System.Web.UI.WebControls.LoginView : Control {
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.LoginView")]
public ITemplate AnonymousTemplate { get; public set; }
    [BrowsableAttribute("True")]
public bool EnableTheming { get; public set; }
    [BrowsableAttribute("True")]
public string SkinID { get; public set; }
    public ControlCollection Controls { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.LoginView")]
public ITemplate LoggedInTemplate { get; public set; }
    [WebCategoryAttribute("Behavior")]
[MergablePropertyAttribute("False")]
[ThemeableAttribute("False")]
[FilterableAttribute("False")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("LoginView_RoleGroups")]
public RoleGroupCollection RoleGroups { get; }
    private static LoginView();
    public virtual ITemplate get_AnonymousTemplate();
    public virtual void set_AnonymousTemplate(ITemplate value);
    public virtual bool get_EnableTheming();
    public virtual void set_EnableTheming(bool value);
    public virtual string get_SkinID();
    public virtual void set_SkinID(string value);
    public virtual ControlCollection get_Controls();
    public virtual void DataBind();
    public virtual ITemplate get_LoggedInTemplate();
    public virtual void set_LoggedInTemplate(ITemplate value);
    public virtual RoleGroupCollection get_RoleGroups();
    public void add_ViewChanged(EventHandler value);
    public void remove_ViewChanged(EventHandler value);
    public void add_ViewChanging(EventHandler value);
    public void remove_ViewChanging(EventHandler value);
    protected internal virtual void CreateChildControls();
    [EditorBrowsableAttribute("1")]
public virtual void Focus();
    protected internal virtual void LoadControlState(object savedState);
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void OnViewChanged(EventArgs e);
    protected virtual void OnViewChanging(EventArgs e);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected internal virtual object SaveControlState();
    protected virtual void SetDesignModeState(IDictionary data);
}
public enum System.Web.UI.WebControls.LogoutAction : Enum {
    public int value__;
    public static LogoutAction Refresh;
    public static LogoutAction Redirect;
    public static LogoutAction RedirectToLoginPage;
}
[BindableAttribute("False")]
[TypeConverterAttribute("System.Web.UI.WebControls.EmptyStringExpandableObjectConverter")]
[ParseChildrenAttribute("True", "")]
public class System.Web.UI.WebControls.MailDefinition : object {
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("MailDefinition_BodyFileName")]
[EditorAttribute("System.Web.UI.Design.WebControls.MailDefinitionBodyFileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute("*.*")]
[NotifyParentPropertyAttribute("True")]
public string BodyFileName { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("MailDefinition_CC")]
[NotifyParentPropertyAttribute("True")]
public string CC { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("MailDefinition_From")]
[NotifyParentPropertyAttribute("True")]
public string From { get; public set; }
    [DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("MailDefinition_EmbeddedObjects")]
public EmbeddedMailObjectsCollection EmbeddedObjects { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("MailDefinition_IsBodyHtml")]
[NotifyParentPropertyAttribute("True")]
public bool IsBodyHtml { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("MailDefinition_Priority")]
[NotifyParentPropertyAttribute("True")]
public MailPriority Priority { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("MailDefinition_Subject")]
[NotifyParentPropertyAttribute("True")]
public string Subject { get; public set; }
    internal string SubjectInternal { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public string get_BodyFileName();
    public void set_BodyFileName(string value);
    public string get_CC();
    public void set_CC(string value);
    public string get_From();
    public void set_From(string value);
    public EmbeddedMailObjectsCollection get_EmbeddedObjects();
    public bool get_IsBodyHtml();
    public void set_IsBodyHtml(bool value);
    public MailPriority get_Priority();
    public void set_Priority(MailPriority value);
    public string get_Subject();
    public void set_Subject(string value);
    internal string get_SubjectInternal();
    public MailMessage CreateMailMessage(string recipients, IDictionary replacements, Control owner);
    public MailMessage CreateMailMessage(string recipients, IDictionary replacements, string body, Control owner);
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object savedState);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
public class System.Web.UI.WebControls.MailMessageEventArgs : LoginCancelEventArgs {
    public MailMessage Message { get; }
    public MailMessageEventArgs(MailMessage message);
    public MailMessage get_Message();
}
public class System.Web.UI.WebControls.MailMessageEventHandler : MulticastDelegate {
    public MailMessageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MailMessageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MailMessageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ControlValuePropertyAttribute("SelectedValue")]
[DefaultEventAttribute("MenuItemClick")]
[DesignerAttribute("System.Web.UI.Design.WebControls.MenuDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SupportsEventValidationAttribute]
public class System.Web.UI.WebControls.Menu : HierarchicalDataBoundControl {
    internal static int ScrollUpImageIndex;
    internal static int ScrollDownImageIndex;
    internal static int PopOutImageIndex;
    internal static int ImageUrlsCount;
    public static string MenuItemClickCommandName;
    internal bool AccessKeyRendered { get; internal set; }
    internal string ClientDataObjectID { get; }
    public ControlCollection Controls { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.MenuBindingsEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("Menu_Bindings")]
public MenuItemBindingCollection DataBindings { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("500")]
[WebSysDescriptionAttribute("Menu_DisappearAfter")]
[ThemeableAttribute("False")]
public int DisappearAfter { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[ThemeableAttribute("True")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Menu_DynamicBottomSeparatorImageUrl")]
public string DynamicBottomSeparatorImageUrl { get; public set; }
    [DefaultValueAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Menu_DynamicDisplayPopOutImage")]
public bool DynamicEnableDefaultPopOutImage { get; public set; }
    [DefaultValueAttribute("0")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Menu_DynamicHorizontalOffset")]
public int DynamicHorizontalOffset { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("Menu_DynamicHoverStyle")]
public Style DynamicHoverStyle { get; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Menu_DynamicItemFormatString")]
public string DynamicItemFormatString { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("Menu_DynamicMenuItemStyle")]
public MenuItemStyle DynamicMenuItemStyle { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("Menu_DynamicMenuStyle")]
public SubMenuStyle DynamicMenuStyle { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Menu_DynamicPopoutImageUrl")]
public string DynamicPopOutImageUrl { get; public set; }
    [WebSysDefaultValueAttribute("MenuAdapter_Expand")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Menu_DynamicPopoutImageText")]
public string DynamicPopOutImageTextFormatString { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("Menu_DynamicSelectedStyle")]
public MenuItemStyle DynamicSelectedStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.MenuItemTemplateContainer")]
[WebSysDescriptionAttribute("Menu_DynamicTemplate")]
public ITemplate DynamicItemTemplate { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Menu_DynamicTopSeparatorImageUrl")]
public string DynamicTopSeparatorImageUrl { get; public set; }
    [DefaultValueAttribute("0")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Menu_DynamicVerticalOffset")]
public int DynamicVerticalOffset { get; public set; }
    [DefaultValueAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Menu_IncludeStyleBlock")]
public bool IncludeStyleBlock { get; public set; }
    internal bool IsNotIE { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.MenuItemCollectionEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[PersistenceModeAttribute("1")]
[MergablePropertyAttribute("False")]
[WebSysDescriptionAttribute("Menu_Items")]
public MenuItemCollection Items { get; }
    [DefaultValueAttribute("False")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Menu_ItemWrap")]
public bool ItemWrap { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.MenuItemStyleCollectionEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("Menu_LevelMenuItemStyles")]
public MenuItemStyleCollection LevelMenuItemStyles { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.MenuItemStyleCollectionEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("Menu_LevelSelectedStyles")]
public MenuItemStyleCollection LevelSelectedStyles { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.SubMenuStyleCollectionEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("Menu_LevelSubMenuStyles")]
public SubMenuStyleCollection LevelSubMenuStyles { get; }
    internal int MaximumDepth { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("3")]
[ThemeableAttribute("True")]
[WebSysDescriptionAttribute("Menu_MaximumDynamicDisplayLevels")]
public int MaximumDynamicDisplayLevels { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Menu_Orientation")]
public Orientation Orientation { get; public set; }
    internal PopOutPanel Panel { get; }
    [DefaultValueAttribute("/")]
[WebSysDescriptionAttribute("Menu_PathSeparator")]
public char PathSeparator { get; public set; }
    internal string PopoutImageUrlInternal { get; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Menu_RenderingMode")]
public MenuRenderingMode RenderingMode { get; public set; }
    internal MenuItem RootItem { get; }
    internal Style RootMenuItemStyle { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Menu_ScrollDownImageUrl")]
public string ScrollDownImageUrl { get; public set; }
    internal string ScrollDownImageUrlInternal { get; }
    [WebSysDefaultValueAttribute("Menu_ScrollDown")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Menu_ScrollDownText")]
public string ScrollDownText { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Menu_ScrollUpImageUrl")]
public string ScrollUpImageUrl { get; public set; }
    internal string ScrollUpImageUrlInternal { get; }
    [WebSysDefaultValueAttribute("Menu_ScrollUp")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Menu_ScrollUpText")]
public string ScrollUpText { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public MenuItem SelectedItem { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string SelectedValue { get; }
    [WebSysDefaultValueAttribute("Menu_SkipLinkTextDefault")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("WebControl_SkipLinkText")]
public string SkipLinkText { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Menu_StaticBottomSeparatorImageUrl")]
public string StaticBottomSeparatorImageUrl { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("1")]
[ThemeableAttribute("True")]
[WebSysDescriptionAttribute("Menu_StaticDisplayLevels")]
public int StaticDisplayLevels { get; public set; }
    [DefaultValueAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Menu_StaticDisplayPopOutImage")]
public bool StaticEnableDefaultPopOutImage { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("Menu_StaticHoverStyle")]
public Style StaticHoverStyle { get; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Menu_StaticItemFormatString")]
public string StaticItemFormatString { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("Menu_StaticMenuItemStyle")]
public MenuItemStyle StaticMenuItemStyle { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("Menu_StaticMenuStyle")]
public SubMenuStyle StaticMenuStyle { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Menu_StaticPopoutImageUrl")]
public string StaticPopOutImageUrl { get; public set; }
    [WebSysDefaultValueAttribute("MenuAdapter_Expand")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Menu_StaticPopoutImageText")]
public string StaticPopOutImageTextFormatString { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("Menu_StaticSelectedStyle")]
public MenuItemStyle StaticSelectedStyle { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[ThemeableAttribute("True")]
[WebSysDescriptionAttribute("Menu_StaticSubMenuIndent")]
public Unit StaticSubMenuIndent { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.MenuItemTemplateContainer")]
[WebSysDescriptionAttribute("Menu_StaticTemplate")]
public ITemplate StaticItemTemplate { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Menu_StaticTopSeparatorImageUrl")]
public string StaticTopSeparatorImageUrl { get; public set; }
    [DefaultValueAttribute("")]
[WebSysDescriptionAttribute("MenuItem_Target")]
public string Target { get; public set; }
    protected HtmlTextWriterTag TagKey { get; }
    private static Menu();
    internal bool get_AccessKeyRendered();
    internal void set_AccessKeyRendered(bool value);
    internal string get_ClientDataObjectID();
    public virtual ControlCollection get_Controls();
    public MenuItemBindingCollection get_DataBindings();
    public int get_DisappearAfter();
    public void set_DisappearAfter(int value);
    public string get_DynamicBottomSeparatorImageUrl();
    public void set_DynamicBottomSeparatorImageUrl(string value);
    public bool get_DynamicEnableDefaultPopOutImage();
    public void set_DynamicEnableDefaultPopOutImage(bool value);
    public int get_DynamicHorizontalOffset();
    public void set_DynamicHorizontalOffset(int value);
    public Style get_DynamicHoverStyle();
    public string get_DynamicItemFormatString();
    public void set_DynamicItemFormatString(string value);
    public MenuItemStyle get_DynamicMenuItemStyle();
    public SubMenuStyle get_DynamicMenuStyle();
    public string get_DynamicPopOutImageUrl();
    public void set_DynamicPopOutImageUrl(string value);
    public string get_DynamicPopOutImageTextFormatString();
    public void set_DynamicPopOutImageTextFormatString(string value);
    public MenuItemStyle get_DynamicSelectedStyle();
    public ITemplate get_DynamicItemTemplate();
    public void set_DynamicItemTemplate(ITemplate value);
    public string get_DynamicTopSeparatorImageUrl();
    public void set_DynamicTopSeparatorImageUrl(string value);
    public int get_DynamicVerticalOffset();
    public void set_DynamicVerticalOffset(int value);
    [CompilerGeneratedAttribute]
public bool get_IncludeStyleBlock();
    [CompilerGeneratedAttribute]
public void set_IncludeStyleBlock(bool value);
    internal bool get_IsNotIE();
    public MenuItemCollection get_Items();
    public bool get_ItemWrap();
    public void set_ItemWrap(bool value);
    public MenuItemStyleCollection get_LevelMenuItemStyles();
    public MenuItemStyleCollection get_LevelSelectedStyles();
    public SubMenuStyleCollection get_LevelSubMenuStyles();
    internal int get_MaximumDepth();
    public int get_MaximumDynamicDisplayLevels();
    public void set_MaximumDynamicDisplayLevels(int value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    internal PopOutPanel get_Panel();
    public char get_PathSeparator();
    public void set_PathSeparator(char value);
    internal string get_PopoutImageUrlInternal();
    public MenuRenderingMode get_RenderingMode();
    public void set_RenderingMode(MenuRenderingMode value);
    internal MenuItem get_RootItem();
    internal Style get_RootMenuItemStyle();
    public string get_ScrollDownImageUrl();
    public void set_ScrollDownImageUrl(string value);
    internal string get_ScrollDownImageUrlInternal();
    public string get_ScrollDownText();
    public void set_ScrollDownText(string value);
    public string get_ScrollUpImageUrl();
    public void set_ScrollUpImageUrl(string value);
    internal string get_ScrollUpImageUrlInternal();
    public string get_ScrollUpText();
    public void set_ScrollUpText(string value);
    public MenuItem get_SelectedItem();
    public string get_SelectedValue();
    public string get_SkipLinkText();
    public void set_SkipLinkText(string value);
    public string get_StaticBottomSeparatorImageUrl();
    public void set_StaticBottomSeparatorImageUrl(string value);
    public int get_StaticDisplayLevels();
    public void set_StaticDisplayLevels(int value);
    public bool get_StaticEnableDefaultPopOutImage();
    public void set_StaticEnableDefaultPopOutImage(bool value);
    public Style get_StaticHoverStyle();
    public string get_StaticItemFormatString();
    public void set_StaticItemFormatString(string value);
    public MenuItemStyle get_StaticMenuItemStyle();
    public SubMenuStyle get_StaticMenuStyle();
    public string get_StaticPopOutImageUrl();
    public void set_StaticPopOutImageUrl(string value);
    public string get_StaticPopOutImageTextFormatString();
    public void set_StaticPopOutImageTextFormatString(string value);
    public MenuItemStyle get_StaticSelectedStyle();
    public Unit get_StaticSubMenuIndent();
    public void set_StaticSubMenuIndent(Unit value);
    public ITemplate get_StaticItemTemplate();
    public void set_StaticItemTemplate(ITemplate value);
    public string get_StaticTopSeparatorImageUrl();
    public void set_StaticTopSeparatorImageUrl(string value);
    public string get_Target();
    public void set_Target(string value);
    protected virtual HtmlTextWriterTag get_TagKey();
    public void add_MenuItemClick(MenuEventHandler value);
    public void remove_MenuItemClick(MenuEventHandler value);
    public void add_MenuItemDataBound(MenuEventHandler value);
    public void remove_MenuItemDataBound(MenuEventHandler value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected internal virtual void CreateChildControls();
    internal int CreateItemIndex();
    public sealed virtual void DataBind();
    protected virtual void EnsureDataBound();
    public MenuItem FindItem(string valuePath);
    internal string GetCssClassName(MenuItem item, bool hyperLink);
    internal string GetCssClassName(MenuItem item, bool hyperlink, Boolean& containsClassName);
    protected virtual IDictionary GetDesignModeState();
    internal string GetImageUrl(int index);
    internal MenuItemStyle GetMenuItemStyle(MenuItem item);
    internal string GetSubMenuCssClassName(MenuItem item);
    internal SubMenuStyle GetSubMenuStyle(MenuItem item);
    internal void EnsureRootMenuStyle();
    protected internal virtual void LoadControlState(object savedState);
    protected virtual void LoadViewState(object state);
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
    protected virtual void OnDataBinding(EventArgs e);
    protected internal virtual void OnInit(EventArgs e);
    protected virtual void OnMenuItemClick(MenuEventArgs e);
    protected virtual void OnMenuItemDataBound(MenuEventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    internal void OnPreRender(EventArgs e, bool registerScript);
    protected internal virtual void PerformDataBinding();
    protected internal virtual void Render(HtmlTextWriter writer);
    public virtual void RenderBeginTag(HtmlTextWriter writer);
    protected internal virtual void RenderContents(HtmlTextWriter writer);
    public virtual void RenderEndTag(HtmlTextWriter writer);
    internal void ResetCachedStyles();
    protected internal virtual object SaveControlState();
    protected virtual object SaveViewState();
    protected virtual void SetDesignModeState(IDictionary data);
    protected void SetItemDataBound(MenuItem node, bool dataBound);
    protected void SetItemDataItem(MenuItem node, object dataItem);
    protected void SetItemDataPath(MenuItem node, string dataPath);
    internal void SetSelectedItem(MenuItem node);
    protected virtual void TrackViewState();
    internal void VerifyRenderingInServerForm();
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    protected internal virtual void RaisePostBackEvent(string eventArgument);
    internal void InternalRaisePostBackEvent(string eventArgument);
}
public class System.Web.UI.WebControls.MenuEventArgs : CommandEventArgs {
    public object CommandSource { get; }
    public MenuItem Item { get; }
    public MenuEventArgs(MenuItem item, object commandSource, CommandEventArgs originalArgs);
    public MenuEventArgs(MenuItem item);
    public object get_CommandSource();
    public MenuItem get_Item();
}
public class System.Web.UI.WebControls.MenuEventHandler : MulticastDelegate {
    public MenuEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MenuEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MenuEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ParseChildrenAttribute("True", "ChildItems")]
public class System.Web.UI.WebControls.MenuItem : object {
    internal string _id;
    [BrowsableAttribute("False")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("2")]
public MenuItemCollection ChildItems { get; }
    internal MenuItemTemplateContainer Container { get; internal set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool DataBound { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string DataPath { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int Depth { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public object DataItem { get; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("MenuItem_Enabled")]
public bool Enabled { get; public set; }
    internal string FormattedText { get; }
    internal string Id { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("MenuItem_ImageUrl")]
public string ImageUrl { get; public set; }
    internal int Index { get; internal set; }
    internal string InternalValuePath { get; }
    internal bool IsEnabled { get; }
    internal bool IsEnabledNoOwner { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("MenuItem_NavigateUrl")]
public string NavigateUrl { get; public set; }
    internal Menu Owner { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public MenuItem Parent { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("MenuItem_PopOutImageUrl")]
public string PopOutImageUrl { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("MenuItem_Selectable")]
public bool Selectable { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("MenuItem_Selected")]
public bool Selected { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("MenuItem_SeparatorImageUrl")]
public string SeparatorImageUrl { get; public set; }
    [DefaultValueAttribute("")]
[WebSysDescriptionAttribute("MenuItem_Target")]
public string Target { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebSysDescriptionAttribute("MenuItem_Text")]
public string Text { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebSysDescriptionAttribute("MenuItem_ToolTip")]
public string ToolTip { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebSysDescriptionAttribute("MenuItem_Value")]
public string Value { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ValuePath { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    internal MenuItem(Menu owner, bool isRoot);
    public MenuItem(string text);
    public MenuItem(string text, string value);
    public MenuItem(string text, string value, string imageUrl);
    public MenuItem(string text, string value, string imageUrl, string navigateUrl);
    public MenuItem(string text, string value, string imageUrl, string navigateUrl, string target);
    private static MenuItem();
    public MenuItemCollection get_ChildItems();
    internal MenuItemTemplateContainer get_Container();
    internal void set_Container(MenuItemTemplateContainer value);
    public bool get_DataBound();
    public string get_DataPath();
    public int get_Depth();
    public object get_DataItem();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    internal string get_FormattedText();
    internal string get_Id();
    public string get_ImageUrl();
    public void set_ImageUrl(string value);
    internal int get_Index();
    internal void set_Index(int value);
    internal string get_InternalValuePath();
    internal bool get_IsEnabled();
    internal bool get_IsEnabledNoOwner();
    public string get_NavigateUrl();
    public void set_NavigateUrl(string value);
    internal Menu get_Owner();
    public MenuItem get_Parent();
    public string get_PopOutImageUrl();
    public void set_PopOutImageUrl(string value);
    public bool get_Selectable();
    public void set_Selectable(bool value);
    public bool get_Selected();
    public void set_Selected(bool value);
    public string get_SeparatorImageUrl();
    public void set_SeparatorImageUrl(string value);
    public string get_Target();
    public void set_Target(string value);
    public string get_Text();
    public void set_Text(string value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public string get_Value();
    public void set_Value(string value);
    public string get_ValuePath();
    internal string GetExpandImageUrl();
    internal bool NotTemplated();
    internal void Render(HtmlTextWriter writer, bool enabled, bool staticOnly);
    internal void Render(HtmlTextWriter writer, bool enabled, bool staticOnly, bool recursive);
    internal void RenderItem(HtmlTextWriter writer, int position, bool enabled, Orientation orientation);
    internal void RenderItem(HtmlTextWriter writer, int position, bool enabled, Orientation orientation, bool staticOnly);
    internal void RenderText(HtmlTextWriter writer);
    internal void ResetValuePathRecursive();
    internal void SetDataBound(bool dataBound);
    internal void SetDataItem(object dataItem);
    internal void SetDataPath(string dataPath);
    internal void SetDepth(int depth);
    internal void SetDirty();
    internal void SetOwner(Menu owner);
    internal void SetParent(MenuItem parent);
    internal void SetPath(string newPath);
    internal void SetSelected(bool value);
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object state);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
    private sealed virtual override object System.ICloneable.Clone();
}
[DefaultPropertyAttribute("TextField")]
public class System.Web.UI.WebControls.MenuItemBinding : object {
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("Binding_DataMember")]
public string DataMember { get; public set; }
    [DefaultValueAttribute("-1")]
[TypeConverterAttribute("System.Web.UI.Design.WebControls.TreeNodeBindingDepthConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("MenuItemBinding_Depth")]
public int Depth { get; public set; }
    [DefaultValueAttribute("True")]
[WebCategoryAttribute("DefaultProperties")]
[WebSysDescriptionAttribute("MenuItemBinding_Enabled")]
public bool Enabled { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebCategoryAttribute("Databindings")]
[WebSysDescriptionAttribute("MenuItemBinding_EnabledField")]
public string EnabledField { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("Databindings")]
[WebSysDescriptionAttribute("MenuItemBinding_FormatString")]
public string FormatString { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("DefaultProperties")]
[WebSysDescriptionAttribute("MenuItemBinding_ImageUrl")]
public string ImageUrl { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebCategoryAttribute("Databindings")]
[WebSysDescriptionAttribute("MenuItemBinding_ImageUrlField")]
public string ImageUrlField { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("DefaultProperties")]
[WebSysDescriptionAttribute("MenuItemBinding_NavigateUrl")]
public string NavigateUrl { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebCategoryAttribute("Databindings")]
[WebSysDescriptionAttribute("MenuItemBinding_NavigateUrlField")]
public string NavigateUrlField { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("DefaultProperties")]
[WebSysDescriptionAttribute("MenuItemBinding_PopOutImageUrl")]
public string PopOutImageUrl { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebCategoryAttribute("Databindings")]
[WebSysDescriptionAttribute("MenuItemBinding_PopOutImageUrlField")]
public string PopOutImageUrlField { get; public set; }
    [DefaultValueAttribute("True")]
[WebCategoryAttribute("DefaultProperties")]
[WebSysDescriptionAttribute("MenuItemBinding_Selectable")]
public bool Selectable { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebCategoryAttribute("Databindings")]
[WebSysDescriptionAttribute("MenuItemBinding_SelectableField")]
public string SelectableField { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("DefaultProperties")]
[WebSysDescriptionAttribute("MenuItemBinding_SeparatorImageUrl")]
public string SeparatorImageUrl { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebCategoryAttribute("Databindings")]
[WebSysDescriptionAttribute("MenuItemBinding_SeparatorImageUrlField")]
public string SeparatorImageUrlField { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("DefaultProperties")]
[WebSysDescriptionAttribute("MenuItemBinding_Target")]
public string Target { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebCategoryAttribute("Databindings")]
[WebSysDescriptionAttribute("MenuItemBinding_TargetField")]
public string TargetField { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("DefaultProperties")]
[WebSysDescriptionAttribute("MenuItemBinding_Text")]
public string Text { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebCategoryAttribute("Databindings")]
[WebSysDescriptionAttribute("MenuItemBinding_TextField")]
public string TextField { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("DefaultProperties")]
[WebSysDescriptionAttribute("MenuItemBinding_ToolTip")]
public string ToolTip { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebCategoryAttribute("Databindings")]
[WebSysDescriptionAttribute("MenuItemBinding_ToolTipField")]
public string ToolTipField { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("DefaultProperties")]
[WebSysDescriptionAttribute("MenuItemBinding_Value")]
public string Value { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebCategoryAttribute("Databindings")]
[WebSysDescriptionAttribute("MenuItemBinding_ValueField")]
public string ValueField { get; public set; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    private object System.Web.UI.IDataSourceViewSchemaAccessor.DataSourceViewSchema { get; private set; }
    public string get_DataMember();
    public void set_DataMember(string value);
    public int get_Depth();
    public void set_Depth(int value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public string get_EnabledField();
    public void set_EnabledField(string value);
    public string get_FormatString();
    public void set_FormatString(string value);
    public string get_ImageUrl();
    public void set_ImageUrl(string value);
    public string get_ImageUrlField();
    public void set_ImageUrlField(string value);
    public string get_NavigateUrl();
    public void set_NavigateUrl(string value);
    public string get_NavigateUrlField();
    public void set_NavigateUrlField(string value);
    public string get_PopOutImageUrl();
    public void set_PopOutImageUrl(string value);
    public string get_PopOutImageUrlField();
    public void set_PopOutImageUrlField(string value);
    public bool get_Selectable();
    public void set_Selectable(bool value);
    public string get_SelectableField();
    public void set_SelectableField(string value);
    public string get_SeparatorImageUrl();
    public void set_SeparatorImageUrl(string value);
    public string get_SeparatorImageUrlField();
    public void set_SeparatorImageUrlField(string value);
    public string get_Target();
    public void set_Target(string value);
    public string get_TargetField();
    public void set_TargetField(string value);
    public string get_Text();
    public void set_Text(string value);
    public string get_TextField();
    public void set_TextField(string value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public string get_ToolTipField();
    public void set_ToolTipField(string value);
    public string get_Value();
    public void set_Value(string value);
    public string get_ValueField();
    public void set_ValueField(string value);
    internal void SetDirty();
    public virtual string ToString();
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object state);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
    private sealed virtual override object System.Web.UI.IDataSourceViewSchemaAccessor.get_DataSourceViewSchema();
    private sealed virtual override void System.Web.UI.IDataSourceViewSchemaAccessor.set_DataSourceViewSchema(object value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.MenuItemBindingCollection : StateManagedCollection {
    public MenuItemBinding Item { get; public set; }
    internal MenuItemBindingCollection(Menu owner);
    private static MenuItemBindingCollection();
    public MenuItemBinding get_Item(int i);
    public void set_Item(int i, MenuItemBinding value);
    public int Add(MenuItemBinding binding);
    public bool Contains(MenuItemBinding binding);
    public void CopyTo(MenuItemBinding[] array, int index);
    protected virtual object CreateKnownType(int index);
    internal MenuItemBinding GetBinding(string dataMember, int depth);
    protected virtual Type[] GetKnownTypes();
    public int IndexOf(MenuItemBinding value);
    public void Insert(int index, MenuItemBinding binding);
    protected virtual void OnClear();
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnValidate(object value);
    public void Remove(MenuItemBinding binding);
    public void RemoveAt(int index);
    protected virtual void SetDirtyObject(object o);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.MenuItemCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public MenuItem Item { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public MenuItemCollection(MenuItem owner);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public MenuItem get_Item(int index);
    public void Add(MenuItem child);
    public void AddAt(int index, MenuItem child);
    public void Clear();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(MenuItem[] array, int index);
    public bool Contains(MenuItem c);
    internal MenuItem FindItem(String[] path, int pos);
    public sealed virtual IEnumerator GetEnumerator();
    public int IndexOf(MenuItem value);
    public void Remove(MenuItem value);
    public void RemoveAt(int index);
    internal void SetDirty();
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object state);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
public class System.Web.UI.WebControls.MenuItemStyle : Style {
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[WebCategoryAttribute("Layout")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("MenuItemStyle_HorizontalPadding")]
public Unit HorizontalPadding { get; public set; }
    internal HyperLinkStyle HyperLinkStyle { get; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[WebCategoryAttribute("Layout")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("MenuItemStyle_ItemSpacing")]
public Unit ItemSpacing { get; public set; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[WebCategoryAttribute("Layout")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("MenuItemStyle_VerticalPadding")]
public Unit VerticalPadding { get; public set; }
    public MenuItemStyle(StateBag bag);
    public Unit get_HorizontalPadding();
    public void set_HorizontalPadding(Unit value);
    internal HyperLinkStyle get_HyperLinkStyle();
    public Unit get_ItemSpacing();
    public void set_ItemSpacing(Unit value);
    public Unit get_VerticalPadding();
    public void set_VerticalPadding(Unit value);
    public virtual void CopyFrom(Style s);
    protected virtual void FillStyleAttributes(CssStyleCollection attributes, IUrlResolutionService urlResolver);
    public virtual void MergeWith(Style s);
    public virtual void Reset();
    internal void ResetCachedStyles();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.MenuItemStyleCollection : StateManagedCollection {
    public MenuItemStyle Item { get; public set; }
    private static MenuItemStyleCollection();
    protected virtual void OnInsert(int index, object value);
    public MenuItemStyle get_Item(int i);
    public void set_Item(int i, MenuItemStyle value);
    public int Add(MenuItemStyle style);
    public bool Contains(MenuItemStyle style);
    public void CopyTo(MenuItemStyle[] styleArray, int index);
    public int IndexOf(MenuItemStyle style);
    public void Insert(int index, MenuItemStyle style);
    protected virtual object CreateKnownType(int index);
    protected virtual Type[] GetKnownTypes();
    public void Remove(MenuItemStyle style);
    public void RemoveAt(int index);
    protected virtual void SetDirtyObject(object o);
}
public class System.Web.UI.WebControls.MenuItemTemplateContainer : Control {
    public object DataItem { get; public set; }
    public int ItemIndex { get; }
    private object System.Web.UI.IDataItemContainer.DataItem { get; }
    private int System.Web.UI.IDataItemContainer.DataItemIndex { get; }
    private int System.Web.UI.IDataItemContainer.DisplayIndex { get; }
    public MenuItemTemplateContainer(int itemIndex, MenuItem dataItem);
    public object get_DataItem();
    public void set_DataItem(object value);
    public int get_ItemIndex();
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
    private sealed virtual override object System.Web.UI.IDataItemContainer.get_DataItem();
    private sealed virtual override int System.Web.UI.IDataItemContainer.get_DataItemIndex();
    private sealed virtual override int System.Web.UI.IDataItemContainer.get_DisplayIndex();
}
public enum System.Web.UI.WebControls.MenuRenderingMode : Enum {
    public int value__;
    public static MenuRenderingMode Default;
    public static MenuRenderingMode Table;
    public static MenuRenderingMode List;
}
[DefaultMemberAttribute("Item")]
internal class System.Web.UI.WebControls.MethodParametersDictionary : object {
    public int Count { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<MethodParameterValue> Values { get; }
    public MethodParameterValue Item { get; public set; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Web.UI.WebControls.MethodParameterValue>>.IsReadOnly { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    internal void CallOnParametersChanged();
    public void add_ParametersChanged(EventHandler value);
    public void remove_ParametersChanged(EventHandler value);
    public sealed virtual int get_Count();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<MethodParameterValue> get_Values();
    public sealed virtual MethodParameterValue get_Item(string key);
    public sealed virtual void set_Item(string key, MethodParameterValue value);
    public sealed virtual void Add(string key, MethodParameterValue value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, MethodParameterValue& value);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Web.UI.WebControls.MethodParameterValue>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Web.UI.WebControls.MethodParameterValue>>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Web.UI.WebControls.MethodParameterValue>>.Add(KeyValuePair`2<string, MethodParameterValue> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Web.UI.WebControls.MethodParameterValue>>.Contains(KeyValuePair`2<string, MethodParameterValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Web.UI.WebControls.MethodParameterValue>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Web.UI.WebControls.MethodParameterValue>>.Remove(KeyValuePair`2<string, MethodParameterValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, MethodParameterValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object savedState);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
internal class System.Web.UI.WebControls.MethodParameterValue : object {
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    private static MethodParameterValue();
    internal void SetOwner(MethodParametersDictionary owner);
    internal void UpdateValue(object newValue);
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object savedState);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
public class System.Web.UI.WebControls.ModelDataMethodResult : object {
    public object ReturnValue { get; private set; }
    public OrderedDictionary OutputParameters { get; }
    public ModelDataMethodResult(object returnValue, OrderedDictionary outputParameters);
    [CompilerGeneratedAttribute]
public object get_ReturnValue();
    [CompilerGeneratedAttribute]
private void set_ReturnValue(object value);
    public OrderedDictionary get_OutputParameters();
}
public class System.Web.UI.WebControls.ModelDataSource : object {
    internal static string DefaultViewName;
    public Control DataControl { get; private set; }
    public ModelDataSourceView View { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public ModelDataSource(Control dataControl);
    public void UpdateProperties(string modelTypeName, string selectMethod);
    public void UpdateProperties(string modelTypeName, string selectMethod, string updateMethod, string insertMethod, string deleteMethod, string dataKeyName);
    [CompilerGeneratedAttribute]
public Control get_DataControl();
    [CompilerGeneratedAttribute]
private void set_DataControl(Control value);
    public void add_CallingDataMethods(CallingDataMethodsEventHandler value);
    public void remove_CallingDataMethods(CallingDataMethodsEventHandler value);
    public virtual ModelDataSourceView get_View();
    protected virtual bool IsTrackingViewState();
    protected virtual void LoadViewState(object savedState);
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
    private sealed virtual override void System.Web.UI.IDataSource.add_DataSourceChanged(EventHandler value);
    private sealed virtual override void System.Web.UI.IDataSource.remove_DataSourceChanged(EventHandler value);
    private sealed virtual override DataSourceView System.Web.UI.IDataSource.GetView(string viewName);
    private sealed virtual override ICollection System.Web.UI.IDataSource.GetViewNames();
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object savedState);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
public class System.Web.UI.WebControls.ModelDataSourceMethod : object {
    public object Instance { get; internal set; }
    public OrderedDictionary Parameters { get; }
    public MethodInfo MethodInfo { get; private set; }
    public ModelDataSourceMethod(object instance, MethodInfo methodInfo);
    [CompilerGeneratedAttribute]
public object get_Instance();
    [CompilerGeneratedAttribute]
internal void set_Instance(object value);
    public OrderedDictionary get_Parameters();
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
private void set_MethodInfo(MethodInfo value);
}
public class System.Web.UI.WebControls.ModelDataSourceView : DataSourceView {
    public bool CanDelete { get; }
    public bool CanInsert { get; }
    public bool CanPage { get; }
    public bool CanSort { get; }
    public bool CanRetrieveTotalRowCount { get; }
    public bool CanUpdate { get; }
    public string ModelTypeName { get; internal set; }
    public string DeleteMethod { get; internal set; }
    public string InsertMethod { get; internal set; }
    public string SelectMethod { get; internal set; }
    public string UpdateMethod { get; internal set; }
    public string DataKeyName { get; internal set; }
    internal bool IsSelectMethodAsync { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public ModelDataSourceView(ModelDataSource owner);
    private static ModelDataSourceView();
    public virtual bool get_CanDelete();
    public virtual bool get_CanInsert();
    public virtual bool get_CanPage();
    public virtual bool get_CanSort();
    public virtual bool get_CanRetrieveTotalRowCount();
    public virtual bool get_CanUpdate();
    public string get_ModelTypeName();
    internal void set_ModelTypeName(string value);
    public string get_DeleteMethod();
    internal void set_DeleteMethod(string value);
    public string get_InsertMethod();
    internal void set_InsertMethod(string value);
    public string get_SelectMethod();
    internal void set_SelectMethod(string value);
    public string get_UpdateMethod();
    internal void set_UpdateMethod(string value);
    public string get_DataKeyName();
    internal void set_DataKeyName(string value);
    public void add_CallingDataMethods(CallingDataMethodsEventHandler value);
    public void remove_CallingDataMethods(CallingDataMethodsEventHandler value);
    public void UpdateProperties(string modelTypeName, string selectMethod, string updateMethod, string insertMethod, string deleteMethod, string dataKeyName);
    protected virtual void OnCallingDataMethods(CallingDataMethodsEventArgs e);
    protected virtual object GetSelectMethodResult(DataSourceSelectArguments arguments);
    protected virtual ModelDataSourceMethod EvaluateSelectMethodParameters(DataSourceSelectArguments arguments, DataSourceSelectResultProcessingOptions& selectResultProcessingOptions);
    protected virtual object ProcessSelectMethodResult(DataSourceSelectArguments arguments, DataSourceSelectResultProcessingOptions selectResultProcessingOptions, ModelDataMethodResult result);
    protected virtual IEnumerable CreateSelectResult(object result);
    protected virtual object GetDeleteMethodResult(IDictionary keys, IDictionary oldValues);
    protected virtual ModelDataSourceMethod EvaluateDeleteMethodParameters(IDictionary keys, IDictionary oldValues);
    protected virtual object GetInsertMethodResult(IDictionary values);
    protected virtual ModelDataSourceMethod EvaluateInsertMethodParameters(IDictionary values);
    protected virtual object GetUpdateMethodResult(IDictionary keys, IDictionary values, IDictionary oldValues);
    protected virtual ModelDataSourceMethod EvaluateUpdateMethodParameters(IDictionary keys, IDictionary values, IDictionary oldValues);
    internal bool get_IsSelectMethodAsync();
    public virtual void Select(DataSourceSelectArguments arguments, DataSourceViewSelectCallback callback);
    public virtual void Insert(IDictionary values, DataSourceViewOperationCallback callback);
    public virtual void Update(IDictionary keys, IDictionary values, IDictionary oldValues, DataSourceViewOperationCallback callback);
    public virtual void Delete(IDictionary keys, IDictionary oldValues, DataSourceViewOperationCallback callback);
    protected virtual int ExecuteDelete(IDictionary keys, IDictionary oldValues);
    protected virtual int ExecuteInsert(IDictionary values);
    protected internal virtual IEnumerable ExecuteSelect(DataSourceSelectArguments arguments);
    protected virtual int ExecuteUpdate(IDictionary keys, IDictionary values, IDictionary oldValues);
    internal IEnumerable Select(DataSourceSelectArguments arguments);
    internal int Update(IDictionary keys, IDictionary values, IDictionary oldValues);
    internal Func`2<object, Task> SelectAsyncInternal(DataSourceSelectArguments arguments, DataSourceViewSelectCallback callback, ModelDataSourceMethod method);
    protected virtual void EvaluateMethodParameters(DataSourceOperation dataSourceOperation, ModelDataSourceMethod modelDataSourceMethod, IDictionary controlValues);
    protected virtual void EvaluateMethodParameters(DataSourceOperation dataSourceOperation, ModelDataSourceMethod modelDataSourceMethod, IDictionary controlValues, bool isPageLoadComplete);
    protected virtual ModelDataSourceMethod FindMethod(string methodName);
    protected virtual ModelDataMethodResult InvokeMethod(ModelDataSourceMethod method);
    protected virtual bool IsTrackingViewState();
    protected virtual void LoadViewState(object savedState);
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object savedState);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
[ToolboxDataAttribute("<{0}:ModelErrorMessage runat="server" Key="ModelStateKey"></{0}:ModelErrorMessage>")]
[DefaultPropertyAttribute("Key")]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
public class System.Web.UI.WebControls.ModelErrorMessage : Label {
    [ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("ModelErrorMessage_ModelStateKey")]
[DefaultValueAttribute("")]
public string ModelStateKey { get; public set; }
    [DefaultValueAttribute("")]
[IDReferencePropertyAttribute]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("ModelErrorMessage_AssociatedControlID")]
[ThemeableAttribute("False")]
public string AssociatedControlID { get; public set; }
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("ModelErrorMessage_SetFocusOnError")]
public bool SetFocusOnError { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[PersistenceModeAttribute("0")]
public string Text { get; public set; }
    public string get_ModelStateKey();
    public void set_ModelStateKey(string value);
    public virtual string get_AssociatedControlID();
    public virtual void set_AssociatedControlID(string value);
    public bool get_SetFocusOnError();
    public void set_SetFocusOnError(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    protected internal virtual void OnPreRender(EventArgs e);
}
public class System.Web.UI.WebControls.ModelMethodContext : object {
    public ModelStateDictionary ModelState { get; }
    public static ModelMethodContext Current { get; }
    public ModelMethodContext(Page page);
    public ModelStateDictionary get_ModelState();
    public static ModelMethodContext get_Current();
    public virtual void UpdateModel(TModel model);
    public virtual void UpdateModel(TModel model, IValueProvider valueProvider);
    public virtual bool TryUpdateModel(TModel model);
    public virtual bool TryUpdateModel(TModel model, IValueProvider valueProvider);
}
public class System.Web.UI.WebControls.MonthChangedEventArgs : object {
    public DateTime NewDate { get; }
    public DateTime PreviousDate { get; }
    public MonthChangedEventArgs(DateTime newDate, DateTime previousDate);
    public DateTime get_NewDate();
    public DateTime get_PreviousDate();
}
public class System.Web.UI.WebControls.MonthChangedEventHandler : MulticastDelegate {
    public MonthChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MonthChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MonthChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ControlBuilderAttribute("System.Web.UI.WebControls.MultiViewControlBuilder")]
[DesignerAttribute("System.Web.UI.Design.WebControls.MultiViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultEventAttribute("ActiveViewChanged")]
[ParseChildrenAttribute("System.Web.UI.WebControls.View")]
[ToolboxDataAttribute("<{0}:MultiView runat="server"></{0}:MultiView>")]
public class System.Web.UI.WebControls.MultiView : Control {
    public static string NextViewCommandName;
    public static string PreviousViewCommandName;
    public static string SwitchViewByIDCommandName;
    public static string SwitchViewByIndexCommandName;
    [DefaultValueAttribute("-1")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("MultiView_ActiveView")]
public int ActiveViewIndex { get; public set; }
    [BrowsableAttribute("True")]
public bool EnableTheming { get; public set; }
    [BrowsableAttribute("False")]
[WebSysDescriptionAttribute("MultiView_Views")]
[PersistenceModeAttribute("2")]
public ViewCollection Views { get; }
    private static MultiView();
    public virtual int get_ActiveViewIndex();
    public virtual void set_ActiveViewIndex(int value);
    public virtual bool get_EnableTheming();
    public virtual void set_EnableTheming(bool value);
    public virtual ViewCollection get_Views();
    public void add_ActiveViewChanged(EventHandler value);
    public void remove_ActiveViewChanged(EventHandler value);
    protected virtual void AddParsedSubObject(object obj);
    protected virtual ControlCollection CreateControlCollection();
    public View GetActiveView();
    internal void IgnoreBubbleEvents();
    protected internal virtual void LoadControlState(object state);
    protected virtual void OnActiveViewChanged(EventArgs e);
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void RemovedControl(Control ctl);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected internal virtual object SaveControlState();
    public void SetActiveView(View view);
}
public class System.Web.UI.WebControls.MultiViewControlBuilder : ControlBuilder {
    public virtual void AppendSubBuilder(ControlBuilder subBuilder);
}
public enum System.Web.UI.WebControls.NextPrevFormat : Enum {
    public int value__;
    public static NextPrevFormat CustomText;
    public static NextPrevFormat ShortMonth;
    public static NextPrevFormat FullMonth;
}
[DefaultEventAttribute("Selecting")]
[DefaultPropertyAttribute("TypeName")]
[DesignerAttribute("System.Web.UI.Design.WebControls.ObjectDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
[ToolboxBitmapAttribute("System.Web.UI.WebControls.ObjectDataSource")]
[WebSysDescriptionAttribute("ObjectDataSource_Description")]
[WebSysDisplayNameAttribute("ObjectDataSource_DisplayName")]
public class System.Web.UI.WebControls.ObjectDataSource : DataSourceControl {
    internal SqlDataSourceCache Cache { get; }
    [DefaultValueAttribute("0")]
[TypeConverterAttribute("System.Web.UI.DataSourceCacheDurationConverter")]
[WebCategoryAttribute("Cache")]
[WebSysDescriptionAttribute("DataSourceCache_Duration")]
public int CacheDuration { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Cache")]
[WebSysDescriptionAttribute("DataSourceCache_ExpirationPolicy")]
public DataSourceCacheExpiry CacheExpirationPolicy { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Cache")]
[WebSysDescriptionAttribute("DataSourceCache_KeyDependency")]
public string CacheKeyDependency { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("ObjectDataSource_ConflictDetection")]
public ConflictOptions ConflictDetection { get; public set; }
    [DefaultValueAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("ObjectDataSource_ConvertNullToDBNull")]
public bool ConvertNullToDBNull { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("ObjectDataSource_DataObjectTypeName")]
public string DataObjectTypeName { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("ObjectDataSource_DeleteMethod")]
public string DeleteMethod { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("ObjectDataSource_DeleteParameters")]
public ParameterCollection DeleteParameters { get; }
    [DefaultValueAttribute("False")]
[WebCategoryAttribute("Cache")]
[WebSysDescriptionAttribute("DataSourceCache_Enabled")]
public bool EnableCaching { get; public set; }
    [DefaultValueAttribute("False")]
[WebCategoryAttribute("Paging")]
[WebSysDescriptionAttribute("ObjectDataSource_EnablePaging")]
public bool EnablePaging { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("ObjectDataSource_FilterExpression")]
public string FilterExpression { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("ObjectDataSource_FilterParameters")]
public ParameterCollection FilterParameters { get; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("ObjectDataSource_InsertMethod")]
public string InsertMethod { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("ObjectDataSource_InsertParameters")]
public ParameterCollection InsertParameters { get; }
    [DefaultValueAttribute("maximumRows")]
[WebCategoryAttribute("Paging")]
[WebSysDescriptionAttribute("ObjectDataSource_MaximumRowsParameterName")]
public string MaximumRowsParameterName { get; public set; }
    [DefaultValueAttribute("{0}")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataSource_OldValuesParameterFormatString")]
public string OldValuesParameterFormatString { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Paging")]
[WebSysDescriptionAttribute("ObjectDataSource_SelectCountMethod")]
public string SelectCountMethod { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("ObjectDataSource_SelectMethod")]
public string SelectMethod { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("ObjectDataSource_SelectParameters")]
public ParameterCollection SelectParameters { get; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("ObjectDataSource_SortParameterName")]
public string SortParameterName { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Cache")]
[WebSysDescriptionAttribute("SqlDataSourceCache_SqlCacheDependency")]
public string SqlCacheDependency { get; public set; }
    [DefaultValueAttribute("startRowIndex")]
[WebCategoryAttribute("Paging")]
[WebSysDescriptionAttribute("ObjectDataSource_StartRowIndexParameterName")]
public string StartRowIndexParameterName { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("ObjectDataSource_TypeName")]
public string TypeName { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("ObjectDataSource_UpdateMethod")]
public string UpdateMethod { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("ObjectDataSource_UpdateParameters")]
public ParameterCollection UpdateParameters { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("ObjectDataSource_ParsingCulture")]
public ParsingCulture ParsingCulture { get; public set; }
    public ObjectDataSource(string typeName, string selectMethod);
    internal SqlDataSourceCache get_Cache();
    public virtual int get_CacheDuration();
    public virtual void set_CacheDuration(int value);
    public virtual DataSourceCacheExpiry get_CacheExpirationPolicy();
    public virtual void set_CacheExpirationPolicy(DataSourceCacheExpiry value);
    public virtual string get_CacheKeyDependency();
    public virtual void set_CacheKeyDependency(string value);
    public ConflictOptions get_ConflictDetection();
    public void set_ConflictDetection(ConflictOptions value);
    public bool get_ConvertNullToDBNull();
    public void set_ConvertNullToDBNull(bool value);
    public string get_DataObjectTypeName();
    public void set_DataObjectTypeName(string value);
    public string get_DeleteMethod();
    public void set_DeleteMethod(string value);
    public ParameterCollection get_DeleteParameters();
    public virtual bool get_EnableCaching();
    public virtual void set_EnableCaching(bool value);
    public bool get_EnablePaging();
    public void set_EnablePaging(bool value);
    public string get_FilterExpression();
    public void set_FilterExpression(string value);
    public ParameterCollection get_FilterParameters();
    public string get_InsertMethod();
    public void set_InsertMethod(string value);
    public ParameterCollection get_InsertParameters();
    public string get_MaximumRowsParameterName();
    public void set_MaximumRowsParameterName(string value);
    public string get_OldValuesParameterFormatString();
    public void set_OldValuesParameterFormatString(string value);
    public string get_SelectCountMethod();
    public void set_SelectCountMethod(string value);
    public string get_SelectMethod();
    public void set_SelectMethod(string value);
    public ParameterCollection get_SelectParameters();
    public string get_SortParameterName();
    public void set_SortParameterName(string value);
    public virtual string get_SqlCacheDependency();
    public virtual void set_SqlCacheDependency(string value);
    public string get_StartRowIndexParameterName();
    public void set_StartRowIndexParameterName(string value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public string get_UpdateMethod();
    public void set_UpdateMethod(string value);
    public ParameterCollection get_UpdateParameters();
    public ParsingCulture get_ParsingCulture();
    public void set_ParsingCulture(ParsingCulture value);
    public void add_Deleted(ObjectDataSourceStatusEventHandler value);
    public void remove_Deleted(ObjectDataSourceStatusEventHandler value);
    public void add_Deleting(ObjectDataSourceMethodEventHandler value);
    public void remove_Deleting(ObjectDataSourceMethodEventHandler value);
    public void add_Filtering(ObjectDataSourceFilteringEventHandler value);
    public void remove_Filtering(ObjectDataSourceFilteringEventHandler value);
    public void add_Inserted(ObjectDataSourceStatusEventHandler value);
    public void remove_Inserted(ObjectDataSourceStatusEventHandler value);
    public void add_Inserting(ObjectDataSourceMethodEventHandler value);
    public void remove_Inserting(ObjectDataSourceMethodEventHandler value);
    public void add_ObjectCreated(ObjectDataSourceObjectEventHandler value);
    public void remove_ObjectCreated(ObjectDataSourceObjectEventHandler value);
    public void add_ObjectCreating(ObjectDataSourceObjectEventHandler value);
    public void remove_ObjectCreating(ObjectDataSourceObjectEventHandler value);
    public void add_ObjectDisposing(ObjectDataSourceDisposingEventHandler value);
    public void remove_ObjectDisposing(ObjectDataSourceDisposingEventHandler value);
    public void add_Selected(ObjectDataSourceStatusEventHandler value);
    public void remove_Selected(ObjectDataSourceStatusEventHandler value);
    public void add_Selecting(ObjectDataSourceSelectingEventHandler value);
    public void remove_Selecting(ObjectDataSourceSelectingEventHandler value);
    public void add_Updated(ObjectDataSourceStatusEventHandler value);
    public void remove_Updated(ObjectDataSourceStatusEventHandler value);
    public void add_Updating(ObjectDataSourceMethodEventHandler value);
    public void remove_Updating(ObjectDataSourceMethodEventHandler value);
    internal string CreateCacheKey(int startRowIndex, int maximumRows);
    internal string CreateMasterCacheKey();
    public int Delete();
    protected virtual DataSourceView GetView(string viewName);
    protected virtual ICollection GetViewNames();
    public int Insert();
    internal void InvalidateCacheEntry();
    internal object LoadDataFromCache(int startRowIndex, int maximumRows);
    internal int LoadTotalRowCountFromCache();
    protected virtual void LoadViewState(object savedState);
    protected internal virtual void OnInit(EventArgs e);
    internal void SaveDataToCache(int startRowIndex, int maximumRows, object data);
    internal void SaveTotalRowCountToCache(int totalRowCount);
    protected virtual object SaveViewState();
    public IEnumerable Select();
    protected virtual void TrackViewState();
    public int Update();
}
public class System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs : CancelEventArgs {
    public object ObjectInstance { get; }
    public ObjectDataSourceDisposingEventArgs(object objectInstance);
    public object get_ObjectInstance();
}
public class System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler : MulticastDelegate {
    public ObjectDataSourceDisposingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ObjectDataSourceDisposingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ObjectDataSourceDisposingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.ObjectDataSourceEventArgs : EventArgs {
    public object ObjectInstance { get; public set; }
    public ObjectDataSourceEventArgs(object objectInstance);
    public object get_ObjectInstance();
    public void set_ObjectInstance(object value);
}
public class System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs : CancelEventArgs {
    public IOrderedDictionary ParameterValues { get; }
    public ObjectDataSourceFilteringEventArgs(IOrderedDictionary parameterValues);
    public IOrderedDictionary get_ParameterValues();
}
public class System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler : MulticastDelegate {
    public ObjectDataSourceFilteringEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ObjectDataSourceFilteringEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ObjectDataSourceFilteringEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs : CancelEventArgs {
    public IOrderedDictionary InputParameters { get; }
    public ObjectDataSourceMethodEventArgs(IOrderedDictionary inputParameters);
    public IOrderedDictionary get_InputParameters();
}
public class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler : MulticastDelegate {
    public ObjectDataSourceMethodEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ObjectDataSourceMethodEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ObjectDataSourceMethodEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler : MulticastDelegate {
    public ObjectDataSourceObjectEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ObjectDataSourceEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ObjectDataSourceEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs : ObjectDataSourceMethodEventArgs {
    public DataSourceSelectArguments Arguments { get; }
    public bool ExecutingSelectCount { get; }
    public ObjectDataSourceSelectingEventArgs(IOrderedDictionary inputParameters, DataSourceSelectArguments arguments, bool executingSelectCount);
    public DataSourceSelectArguments get_Arguments();
    public bool get_ExecutingSelectCount();
}
public class System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler : MulticastDelegate {
    public ObjectDataSourceSelectingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ObjectDataSourceSelectingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ObjectDataSourceSelectingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs : EventArgs {
    public IDictionary OutputParameters { get; }
    public Exception Exception { get; }
    public bool ExceptionHandled { get; public set; }
    public object ReturnValue { get; }
    public int AffectedRows { get; public set; }
    public ObjectDataSourceStatusEventArgs(object returnValue, IDictionary outputParameters);
    public ObjectDataSourceStatusEventArgs(object returnValue, IDictionary outputParameters, Exception exception);
    public IDictionary get_OutputParameters();
    public Exception get_Exception();
    public bool get_ExceptionHandled();
    public void set_ExceptionHandled(bool value);
    public object get_ReturnValue();
    public int get_AffectedRows();
    public void set_AffectedRows(int value);
}
public class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler : MulticastDelegate {
    public ObjectDataSourceStatusEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ObjectDataSourceStatusEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ObjectDataSourceStatusEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.ObjectDataSourceView : DataSourceView {
    public bool CanDelete { get; }
    public bool CanInsert { get; }
    public bool CanPage { get; }
    public bool CanRetrieveTotalRowCount { get; }
    public bool CanSort { get; }
    public bool CanUpdate { get; }
    public ConflictOptions ConflictDetection { get; public set; }
    public bool ConvertNullToDBNull { get; public set; }
    public string DataObjectTypeName { get; public set; }
    public string DeleteMethod { get; public set; }
    public ParameterCollection DeleteParameters { get; }
    public bool EnablePaging { get; public set; }
    public string FilterExpression { get; public set; }
    public ParameterCollection FilterParameters { get; }
    public string InsertMethod { get; public set; }
    public ParameterCollection InsertParameters { get; }
    protected bool IsTrackingViewState { get; }
    public string MaximumRowsParameterName { get; public set; }
    [DefaultValueAttribute("{0}")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataSource_OldValuesParameterFormatString")]
public string OldValuesParameterFormatString { get; public set; }
    public string SelectCountMethod { get; public set; }
    public string SelectMethod { get; public set; }
    public ParameterCollection SelectParameters { get; }
    public string SortParameterName { get; public set; }
    public string StartRowIndexParameterName { get; public set; }
    public string TypeName { get; public set; }
    public string UpdateMethod { get; public set; }
    public ParameterCollection UpdateParameters { get; }
    public ParsingCulture ParsingCulture { get; public set; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public ObjectDataSourceView(ObjectDataSource owner, string name, HttpContext context);
    private static ObjectDataSourceView();
    public virtual bool get_CanDelete();
    public virtual bool get_CanInsert();
    public virtual bool get_CanPage();
    public virtual bool get_CanRetrieveTotalRowCount();
    public virtual bool get_CanSort();
    public virtual bool get_CanUpdate();
    public ConflictOptions get_ConflictDetection();
    public void set_ConflictDetection(ConflictOptions value);
    public bool get_ConvertNullToDBNull();
    public void set_ConvertNullToDBNull(bool value);
    public string get_DataObjectTypeName();
    public void set_DataObjectTypeName(string value);
    public string get_DeleteMethod();
    public void set_DeleteMethod(string value);
    public ParameterCollection get_DeleteParameters();
    public bool get_EnablePaging();
    public void set_EnablePaging(bool value);
    public string get_FilterExpression();
    public void set_FilterExpression(string value);
    public ParameterCollection get_FilterParameters();
    public string get_InsertMethod();
    public void set_InsertMethod(string value);
    public ParameterCollection get_InsertParameters();
    protected bool get_IsTrackingViewState();
    public string get_MaximumRowsParameterName();
    public void set_MaximumRowsParameterName(string value);
    public string get_OldValuesParameterFormatString();
    public void set_OldValuesParameterFormatString(string value);
    public string get_SelectCountMethod();
    public void set_SelectCountMethod(string value);
    public string get_SelectMethod();
    public void set_SelectMethod(string value);
    public ParameterCollection get_SelectParameters();
    public string get_SortParameterName();
    public void set_SortParameterName(string value);
    public string get_StartRowIndexParameterName();
    public void set_StartRowIndexParameterName(string value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public string get_UpdateMethod();
    public void set_UpdateMethod(string value);
    public ParameterCollection get_UpdateParameters();
    [CompilerGeneratedAttribute]
public ParsingCulture get_ParsingCulture();
    [CompilerGeneratedAttribute]
public void set_ParsingCulture(ParsingCulture value);
    public void add_Deleted(ObjectDataSourceStatusEventHandler value);
    public void remove_Deleted(ObjectDataSourceStatusEventHandler value);
    public void add_Deleting(ObjectDataSourceMethodEventHandler value);
    public void remove_Deleting(ObjectDataSourceMethodEventHandler value);
    public void add_Filtering(ObjectDataSourceFilteringEventHandler value);
    public void remove_Filtering(ObjectDataSourceFilteringEventHandler value);
    public void add_Inserted(ObjectDataSourceStatusEventHandler value);
    public void remove_Inserted(ObjectDataSourceStatusEventHandler value);
    public void add_Inserting(ObjectDataSourceMethodEventHandler value);
    public void remove_Inserting(ObjectDataSourceMethodEventHandler value);
    public void add_ObjectCreated(ObjectDataSourceObjectEventHandler value);
    public void remove_ObjectCreated(ObjectDataSourceObjectEventHandler value);
    public void add_ObjectCreating(ObjectDataSourceObjectEventHandler value);
    public void remove_ObjectCreating(ObjectDataSourceObjectEventHandler value);
    public void add_ObjectDisposing(ObjectDataSourceDisposingEventHandler value);
    public void remove_ObjectDisposing(ObjectDataSourceDisposingEventHandler value);
    public void add_Selected(ObjectDataSourceStatusEventHandler value);
    public void remove_Selected(ObjectDataSourceStatusEventHandler value);
    public void add_Selecting(ObjectDataSourceSelectingEventHandler value);
    public void remove_Selecting(ObjectDataSourceSelectingEventHandler value);
    public void add_Updated(ObjectDataSourceStatusEventHandler value);
    public void remove_Updated(ObjectDataSourceStatusEventHandler value);
    public void add_Updating(ObjectDataSourceMethodEventHandler value);
    public void remove_Updating(ObjectDataSourceMethodEventHandler value);
    public int Delete(IDictionary keys, IDictionary oldValues);
    protected virtual int ExecuteDelete(IDictionary keys, IDictionary oldValues);
    protected virtual int ExecuteInsert(IDictionary values);
    protected internal virtual IEnumerable ExecuteSelect(DataSourceSelectArguments arguments);
    protected virtual int ExecuteUpdate(IDictionary keys, IDictionary values, IDictionary oldValues);
    public int Insert(IDictionary values);
    protected virtual void LoadViewState(object savedState);
    protected virtual void OnDeleted(ObjectDataSourceStatusEventArgs e);
    protected virtual void OnDeleting(ObjectDataSourceMethodEventArgs e);
    protected virtual void OnFiltering(ObjectDataSourceFilteringEventArgs e);
    protected virtual void OnInserted(ObjectDataSourceStatusEventArgs e);
    protected virtual void OnInserting(ObjectDataSourceMethodEventArgs e);
    protected virtual void OnObjectCreated(ObjectDataSourceEventArgs e);
    protected virtual void OnObjectCreating(ObjectDataSourceEventArgs e);
    protected virtual void OnObjectDisposing(ObjectDataSourceDisposingEventArgs e);
    protected virtual void OnSelected(ObjectDataSourceStatusEventArgs e);
    protected virtual void OnSelecting(ObjectDataSourceSelectingEventArgs e);
    protected virtual void OnUpdated(ObjectDataSourceStatusEventArgs e);
    protected virtual void OnUpdating(ObjectDataSourceMethodEventArgs e);
    protected virtual object SaveViewState();
    public IEnumerable Select(DataSourceSelectArguments arguments);
    protected virtual void TrackViewState();
    public int Update(IDictionary keys, IDictionary values, IDictionary oldValues);
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object savedState);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
public enum System.Web.UI.WebControls.Orientation : Enum {
    public int value__;
    public static Orientation Horizontal;
    public static Orientation Vertical;
}
public class System.Web.UI.WebControls.PagedDataSource : object {
    public bool AllowCustomPaging { get; public set; }
    public bool AllowPaging { get; public set; }
    public bool AllowServerPaging { get; public set; }
    public int Count { get; }
    public int CurrentPageIndex { get; public set; }
    public IEnumerable DataSource { get; public set; }
    public int DataSourceCount { get; }
    public int FirstIndexInPage { get; }
    public bool IsCustomPagingEnabled { get; }
    public bool IsFirstPage { get; }
    public bool IsLastPage { get; }
    public bool IsPagingEnabled { get; }
    public bool IsReadOnly { get; }
    public bool IsServerPagingEnabled { get; }
    public bool IsSynchronized { get; }
    public int PageCount { get; }
    public int PageSize { get; public set; }
    public object SyncRoot { get; }
    public int VirtualCount { get; public set; }
    public bool get_AllowCustomPaging();
    public void set_AllowCustomPaging(bool value);
    public bool get_AllowPaging();
    public void set_AllowPaging(bool value);
    public bool get_AllowServerPaging();
    public void set_AllowServerPaging(bool value);
    public sealed virtual int get_Count();
    public int get_CurrentPageIndex();
    public void set_CurrentPageIndex(int value);
    public IEnumerable get_DataSource();
    public void set_DataSource(IEnumerable value);
    public int get_DataSourceCount();
    public int get_FirstIndexInPage();
    public bool get_IsCustomPagingEnabled();
    public bool get_IsFirstPage();
    public bool get_IsLastPage();
    public bool get_IsPagingEnabled();
    public bool get_IsReadOnly();
    public bool get_IsServerPagingEnabled();
    public sealed virtual bool get_IsSynchronized();
    public int get_PageCount();
    public int get_PageSize();
    public void set_PageSize(int value);
    public sealed virtual object get_SyncRoot();
    public int get_VirtualCount();
    public void set_VirtualCount(int value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public sealed virtual string GetListName(PropertyDescriptor[] listAccessors);
}
public enum System.Web.UI.WebControls.PagerButtons : Enum {
    public int value__;
    public static PagerButtons NextPrevious;
    public static PagerButtons Numeric;
    public static PagerButtons NextPreviousFirstLast;
    public static PagerButtons NumericFirstLast;
}
public enum System.Web.UI.WebControls.PagerMode : Enum {
    public int value__;
    public static PagerMode NextPrev;
    public static PagerMode NumericPages;
}
public enum System.Web.UI.WebControls.PagerPosition : Enum {
    public int value__;
    public static PagerPosition Bottom;
    public static PagerPosition Top;
    public static PagerPosition TopAndBottom;
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public class System.Web.UI.WebControls.PagerSettings : object {
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("PagerSettings_FirstPageImageUrl")]
public string FirstPageImageUrl { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("&lt;&lt;")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("PagerSettings_FirstPageText")]
public string FirstPageText { get; public set; }
    internal bool IsPagerOnBottom { get; }
    internal bool IsPagerOnTop { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("PagerSettings_LastPageImageUrl")]
public string LastPageImageUrl { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("&gt;&gt;")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("PagerSettings_LastPageText")]
public string LastPageText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("PagerSettings_Mode")]
public PagerButtons Mode { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("PagerSettings_NextPageImageUrl")]
public string NextPageImageUrl { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("&gt;")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("PagerSettings_NextPageText")]
public string NextPageText { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("10")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("PagerSettings_PageButtonCount")]
public int PageButtonCount { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("PagerStyle_Position")]
public PagerPosition Position { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("PagerSettings_PreviousPageImageUrl")]
public string PreviousPageImageUrl { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("&lt;")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("PagerSettings_PreviousPageText")]
public string PreviousPageText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("PagerStyle_Visible")]
public bool Visible { get; public set; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    [CompilerGeneratedAttribute]
public void add_PropertyChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PropertyChanged(EventHandler value);
    public string get_FirstPageImageUrl();
    public void set_FirstPageImageUrl(string value);
    public string get_FirstPageText();
    public void set_FirstPageText(string value);
    internal bool get_IsPagerOnBottom();
    internal bool get_IsPagerOnTop();
    public string get_LastPageImageUrl();
    public void set_LastPageImageUrl(string value);
    public string get_LastPageText();
    public void set_LastPageText(string value);
    public PagerButtons get_Mode();
    public void set_Mode(PagerButtons value);
    public string get_NextPageImageUrl();
    public void set_NextPageImageUrl(string value);
    public string get_NextPageText();
    public void set_NextPageText(string value);
    public int get_PageButtonCount();
    public void set_PageButtonCount(int value);
    public PagerPosition get_Position();
    public void set_Position(PagerPosition value);
    public string get_PreviousPageImageUrl();
    public void set_PreviousPageImageUrl(string value);
    public string get_PreviousPageText();
    public void set_PreviousPageText(string value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public virtual string ToString();
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object state);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
[ToolboxItemAttribute("False")]
[SupportsEventValidationAttribute]
internal class System.Web.UI.WebControls.PagerTable : Table {
}
[DesignerAttribute("System.Web.UI.Design.WebControls.PanelContainerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ParseChildrenAttribute("False")]
[PersistChildrenAttribute("True")]
public class System.Web.UI.WebControls.Panel : WebControl {
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("Panel_BackImageUrl")]
public string BackImageUrl { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Panel_DefaultButton")]
public string DefaultButton { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Layout")]
[WebSysDescriptionAttribute("Panel_Direction")]
public ContentDirection Direction { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Panel_GroupingText")]
public string GroupingText { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Panel_HorizontalAlign")]
public HorizontalAlign HorizontalAlign { get; public set; }
    public bool SupportsDisabledAttribute { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Layout")]
[WebSysDescriptionAttribute("Panel_ScrollBars")]
public ScrollBars ScrollBars { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("Panel_Wrap")]
public bool Wrap { get; public set; }
    public virtual string get_BackImageUrl();
    public virtual void set_BackImageUrl(string value);
    public virtual string get_DefaultButton();
    public virtual void set_DefaultButton(string value);
    public virtual ContentDirection get_Direction();
    public virtual void set_Direction(ContentDirection value);
    public virtual string get_GroupingText();
    public virtual void set_GroupingText(string value);
    public virtual HorizontalAlign get_HorizontalAlign();
    public virtual void set_HorizontalAlign(HorizontalAlign value);
    public virtual bool get_SupportsDisabledAttribute();
    public virtual ScrollBars get_ScrollBars();
    public virtual void set_ScrollBars(ScrollBars value);
    public virtual bool get_Wrap();
    public virtual void set_Wrap(bool value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual Style CreateControlStyle();
    public virtual void RenderBeginTag(HtmlTextWriter writer);
    public virtual void RenderEndTag(HtmlTextWriter writer);
}
public class System.Web.UI.WebControls.PanelStyle : Style {
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("Panel_BackImageUrl")]
public string BackImageUrl { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Panel_Direction")]
public ContentDirection Direction { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Panel_HorizontalAlign")]
public HorizontalAlign HorizontalAlign { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Panel_ScrollBars")]
public ScrollBars ScrollBars { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Panel_Wrap")]
public bool Wrap { get; public set; }
    public PanelStyle(StateBag bag);
    public virtual string get_BackImageUrl();
    public virtual void set_BackImageUrl(string value);
    public virtual ContentDirection get_Direction();
    public virtual void set_Direction(ContentDirection value);
    public virtual HorizontalAlign get_HorizontalAlign();
    public virtual void set_HorizontalAlign(HorizontalAlign value);
    public virtual ScrollBars get_ScrollBars();
    public virtual void set_ScrollBars(ScrollBars value);
    public virtual bool get_Wrap();
    public virtual void set_Wrap(bool value);
    public virtual void CopyFrom(Style s);
    public virtual void MergeWith(Style s);
    public virtual void Reset();
}
[DefaultPropertyAttribute("DefaultValue")]
public class System.Web.UI.WebControls.Parameter : object {
    protected bool IsTrackingViewState { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Parameter")]
[WebSysDescriptionAttribute("Parameter_DbType")]
public DbType DbType { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Parameter")]
[WebSysDescriptionAttribute("Parameter_DefaultValue")]
public string DefaultValue { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Parameter")]
[WebSysDescriptionAttribute("Parameter_Direction")]
public ParameterDirection Direction { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Parameter")]
[WebSysDescriptionAttribute("Parameter_Name")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
internal object ParameterValue { get; }
    [DefaultValueAttribute("0")]
[WebCategoryAttribute("Parameter")]
[WebSysDescriptionAttribute("Parameter_Size")]
public int Size { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Parameter")]
[WebSysDescriptionAttribute("Parameter_Type")]
public TypeCode Type { get; public set; }
    [DefaultValueAttribute("True")]
[WebCategoryAttribute("Parameter")]
[WebSysDescriptionAttribute("Parameter_ConvertEmptyStringToNull")]
public bool ConvertEmptyStringToNull { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected StateBag ViewState { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public Parameter(string name);
    public Parameter(string name, DbType dbType);
    public Parameter(string name, DbType dbType, string defaultValue);
    public Parameter(string name, TypeCode type);
    public Parameter(string name, TypeCode type, string defaultValue);
    protected Parameter(Parameter original);
    protected bool get_IsTrackingViewState();
    public DbType get_DbType();
    public void set_DbType(DbType value);
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
    public ParameterDirection get_Direction();
    public void set_Direction(ParameterDirection value);
    public string get_Name();
    public void set_Name(string value);
    internal object get_ParameterValue();
    public DbType GetDatabaseType();
    internal object GetValue(object value, bool ignoreNullableTypeChanges);
    internal static object GetValue(object value, string defaultValue, DbType dbType, bool convertEmptyStringToNull, bool ignoreNullableTypeChanges);
    internal static object GetValue(object value, string defaultValue, TypeCode type, bool convertEmptyStringToNull, bool ignoreNullableTypeChanges);
    public int get_Size();
    public void set_Size(int value);
    public TypeCode get_Type();
    public void set_Type(TypeCode value);
    public bool get_ConvertEmptyStringToNull();
    public void set_ConvertEmptyStringToNull(bool value);
    protected StateBag get_ViewState();
    protected virtual Parameter Clone();
    public static TypeCode ConvertDbTypeToTypeCode(DbType dbType);
    public static DbType ConvertTypeCodeToDbType(TypeCode typeCode);
    protected internal virtual object Evaluate(HttpContext context, Control control);
    protected virtual void LoadViewState(object savedState);
    protected void OnParameterChanged();
    protected virtual object SaveViewState();
    protected internal virtual void SetDirty();
    internal void SetOwner(ParameterCollection owner);
    public virtual string ToString();
    protected virtual void TrackViewState();
    internal void UpdateValue(HttpContext context, Control control);
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object savedState);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
[DefaultMemberAttribute("Item")]
[EditorAttribute("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public class System.Web.UI.WebControls.ParameterCollection : StateManagedCollection {
    public Parameter Item { get; public set; }
    public Parameter Item { get; public set; }
    private static ParameterCollection();
    public Parameter get_Item(int index);
    public void set_Item(int index, Parameter value);
    public Parameter get_Item(string name);
    public void set_Item(string name, Parameter value);
    public void add_ParametersChanged(EventHandler value);
    public void remove_ParametersChanged(EventHandler value);
    public int Add(Parameter parameter);
    public int Add(string name, string value);
    public int Add(string name, TypeCode type, string value);
    public int Add(string name, DbType dbType, string value);
    internal void CallOnParametersChanged();
    public bool Contains(Parameter parameter);
    public void CopyTo(Parameter[] parameterArray, int index);
    protected virtual object CreateKnownType(int index);
    protected virtual Type[] GetKnownTypes();
    public IOrderedDictionary GetValues(HttpContext context, Control control);
    public int IndexOf(Parameter parameter);
    public void Insert(int index, Parameter parameter);
    protected virtual void OnClearComplete();
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnParametersChanged(EventArgs e);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnValidate(object o);
    public void Remove(Parameter parameter);
    public void RemoveAt(int index);
    protected virtual void SetDirtyObject(object o);
    public void UpdateValues(HttpContext context, Control control);
}
public enum System.Web.UI.WebControls.ParsingCulture : Enum {
    public int value__;
    public static ParsingCulture Invariant;
    public static ParsingCulture Current;
}
[BindableAttribute("False")]
[DefaultEventAttribute("SendingMail")]
[DesignerAttribute("System.Web.UI.Design.WebControls.PasswordRecoveryDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.UI.WebControls.PasswordRecovery : CompositeControl {
    public static string SubmitButtonCommandName;
    [BrowsableAttribute("False")]
[FilterableAttribute("False")]
[ThemeableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Answer { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("PasswordRecovery_DefaultAnswerLabelText")]
[WebSysDescriptionAttribute("PasswordRecovery_AnswerLabelText")]
public string AnswerLabelText { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("PasswordRecovery_DefaultAnswerRequiredErrorMessage")]
[WebSysDescriptionAttribute("LoginControls_AnswerRequiredErrorMessage")]
public string AnswerRequiredErrorMessage { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("1")]
[WebSysDescriptionAttribute("Login_BorderPadding")]
public int BorderPadding { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("PasswordRecovery_SubmitButtonStyle")]
public Style SubmitButtonStyle { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("PasswordRecovery_SubmitButtonType")]
public ButtonType SubmitButtonType { get; public set; }
    internal View CurrentView { get; internal set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("WebControl_FailureTextStyle")]
public TableItemStyle FailureTextStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("PasswordRecovery_DefaultGeneralFailureText")]
[WebSysDescriptionAttribute("PasswordRecovery_GeneralFailureText")]
public string GeneralFailureText { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_HelpPageText")]
public string HelpPageText { get; public set; }
    [WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("LoginControls_HelpPageIconUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string HelpPageIconUrl { get; public set; }
    [WebCategoryAttribute("Links")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("LoginControls_HelpPageUrl")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string HelpPageUrl { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("WebControl_HyperLinkStyle")]
public TableItemStyle HyperLinkStyle { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("WebControl_InstructionTextStyle")]
public TableItemStyle InstructionTextStyle { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("LoginControls_LabelStyle")]
public TableItemStyle LabelStyle { get; }
    [WebCategoryAttribute("Behavior")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("PasswordRecovery_MailDefinition")]
public MailDefinition MailDefinition { get; }
    [WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("MembershipProvider_Name")]
public string MembershipProvider { get; public set; }
    [BrowsableAttribute("False")]
[FilterableAttribute("False")]
[ThemeableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Question { get; private set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("PasswordRecovery_DefaultQuestionFailureText")]
[WebSysDescriptionAttribute("PasswordRecovery_QuestionFailureText")]
public string QuestionFailureText { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("PasswordRecovery_DefaultQuestionInstructionText")]
[WebSysDescriptionAttribute("PasswordRecovery_QuestionInstructionText")]
public string QuestionInstructionText { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("PasswordRecovery_DefaultQuestionLabelText")]
[WebSysDescriptionAttribute("PasswordRecovery_QuestionLabelText")]
public string QuestionLabelText { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("PasswordRecovery_DefaultQuestionTitleText")]
[WebSysDescriptionAttribute("PasswordRecovery_QuestionTitleText")]
public string QuestionTitleText { get; public set; }
    [BrowsableAttribute("False")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.PasswordRecovery")]
[WebSysDescriptionAttribute("PasswordRecovery_QuestionTemplate")]
public ITemplate QuestionTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("PasswordRecovery_QuestionTemplateContainer")]
public Control QuestionTemplateContainer { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ChangePassword_ChangePasswordButtonImageUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
public string SubmitButtonImageUrl { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("PasswordRecovery_DefaultSubmitButtonText")]
[WebSysDescriptionAttribute("ChangePassword_ChangePasswordButtonText")]
public string SubmitButtonText { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("LoginControls_SuccessPageUrl")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[ThemeableAttribute("False")]
[UrlPropertyAttribute]
public string SuccessPageUrl { get; public set; }
    [BrowsableAttribute("False")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("PasswordRecovery_SuccessTemplate")]
[TemplateContainerAttribute("System.Web.UI.WebControls.PasswordRecovery")]
public ITemplate SuccessTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("PasswordRecovery_SuccessTemplateContainer")]
public Control SuccessTemplateContainer { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("PasswordRecovery_DefaultSuccessText")]
[WebSysDescriptionAttribute("PasswordRecovery_SuccessText")]
public string SuccessText { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("PasswordRecovery_SuccessTextStyle")]
public TableItemStyle SuccessTextStyle { get; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("LoginControls_RenderOuterTable")]
public bool RenderOuterTable { get; public set; }
    protected HtmlTextWriterTag TagKey { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("LoginControls_TextBoxStyle")]
public Style TextBoxStyle { get; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("LoginControls_TextLayout")]
public LoginTextLayout TextLayout { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("LoginControls_TitleTextStyle")]
public TableItemStyle TitleTextStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("UserName_InitialValue")]
public string UserName { get; public set; }
    internal string UserNameInternal { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("PasswordRecovery_DefaultUserNameFailureText")]
[WebSysDescriptionAttribute("PasswordRecovery_UserNameFailureText")]
public string UserNameFailureText { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("PasswordRecovery_DefaultUserNameInstructionText")]
[WebSysDescriptionAttribute("PasswordRecovery_UserNameInstructionText")]
public string UserNameInstructionText { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("PasswordRecovery_DefaultUserNameLabelText")]
[WebSysDescriptionAttribute("PasswordRecovery_UserNameLabelText")]
public string UserNameLabelText { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Validation")]
[WebSysDefaultValueAttribute("PasswordRecovery_DefaultUserNameRequiredErrorMessage")]
[WebSysDescriptionAttribute("ChangePassword_UserNameRequiredErrorMessage")]
public string UserNameRequiredErrorMessage { get; public set; }
    [BrowsableAttribute("False")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.PasswordRecovery")]
[WebSysDescriptionAttribute("PasswordRecovery_UserNameTemplate")]
public ITemplate UserNameTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("PasswordRecovery_UserNameTemplateContainer")]
public Control UserNameTemplateContainer { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("PasswordRecovery_DefaultUserNameTitleText")]
[WebSysDescriptionAttribute("PasswordRecovery_UserNameTitleText")]
public string UserNameTitleText { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("ChangePassword_ValidatorTextStyle")]
public Style ValidatorTextStyle { get; }
    private static PasswordRecovery();
    public virtual string get_Answer();
    public virtual string get_AnswerLabelText();
    public virtual void set_AnswerLabelText(string value);
    public virtual string get_AnswerRequiredErrorMessage();
    public virtual void set_AnswerRequiredErrorMessage(string value);
    public virtual int get_BorderPadding();
    public virtual void set_BorderPadding(int value);
    public Style get_SubmitButtonStyle();
    public virtual ButtonType get_SubmitButtonType();
    public virtual void set_SubmitButtonType(ButtonType value);
    internal View get_CurrentView();
    internal void set_CurrentView(View value);
    public TableItemStyle get_FailureTextStyle();
    public virtual string get_GeneralFailureText();
    public virtual void set_GeneralFailureText(string value);
    public virtual string get_HelpPageText();
    public virtual void set_HelpPageText(string value);
    public virtual string get_HelpPageIconUrl();
    public virtual void set_HelpPageIconUrl(string value);
    public virtual string get_HelpPageUrl();
    public virtual void set_HelpPageUrl(string value);
    public TableItemStyle get_HyperLinkStyle();
    public TableItemStyle get_InstructionTextStyle();
    public TableItemStyle get_LabelStyle();
    public MailDefinition get_MailDefinition();
    public virtual string get_MembershipProvider();
    public virtual void set_MembershipProvider(string value);
    public virtual string get_Question();
    private void set_Question(string value);
    public virtual string get_QuestionFailureText();
    public virtual void set_QuestionFailureText(string value);
    public virtual string get_QuestionInstructionText();
    public virtual void set_QuestionInstructionText(string value);
    public virtual string get_QuestionLabelText();
    public virtual void set_QuestionLabelText(string value);
    public virtual string get_QuestionTitleText();
    public virtual void set_QuestionTitleText(string value);
    public virtual ITemplate get_QuestionTemplate();
    public virtual void set_QuestionTemplate(ITemplate value);
    public Control get_QuestionTemplateContainer();
    public virtual string get_SubmitButtonImageUrl();
    public virtual void set_SubmitButtonImageUrl(string value);
    public virtual string get_SubmitButtonText();
    public virtual void set_SubmitButtonText(string value);
    public virtual string get_SuccessPageUrl();
    public virtual void set_SuccessPageUrl(string value);
    public virtual ITemplate get_SuccessTemplate();
    public virtual void set_SuccessTemplate(ITemplate value);
    public Control get_SuccessTemplateContainer();
    public virtual string get_SuccessText();
    public virtual void set_SuccessText(string value);
    public TableItemStyle get_SuccessTextStyle();
    public virtual bool get_RenderOuterTable();
    public virtual void set_RenderOuterTable(bool value);
    protected virtual HtmlTextWriterTag get_TagKey();
    public Style get_TextBoxStyle();
    public virtual LoginTextLayout get_TextLayout();
    public virtual void set_TextLayout(LoginTextLayout value);
    public TableItemStyle get_TitleTextStyle();
    public virtual string get_UserName();
    public virtual void set_UserName(string value);
    internal string get_UserNameInternal();
    public virtual string get_UserNameFailureText();
    public virtual void set_UserNameFailureText(string value);
    public virtual string get_UserNameInstructionText();
    public virtual void set_UserNameInstructionText(string value);
    public virtual string get_UserNameLabelText();
    public virtual void set_UserNameLabelText(string value);
    public virtual string get_UserNameRequiredErrorMessage();
    public virtual void set_UserNameRequiredErrorMessage(string value);
    public virtual ITemplate get_UserNameTemplate();
    public virtual void set_UserNameTemplate(ITemplate value);
    public Control get_UserNameTemplateContainer();
    public virtual string get_UserNameTitleText();
    public virtual void set_UserNameTitleText(string value);
    public Style get_ValidatorTextStyle();
    public void add_AnswerLookupError(EventHandler value);
    public void remove_AnswerLookupError(EventHandler value);
    public void add_VerifyingAnswer(LoginCancelEventHandler value);
    public void remove_VerifyingAnswer(LoginCancelEventHandler value);
    public void add_SendingMail(MailMessageEventHandler value);
    public void remove_SendingMail(MailMessageEventHandler value);
    public void add_SendMailError(SendMailErrorEventHandler value);
    public void remove_SendMailError(SendMailErrorEventHandler value);
    public void add_VerifyingUser(LoginCancelEventHandler value);
    public void remove_VerifyingUser(LoginCancelEventHandler value);
    public void add_UserLookupError(EventHandler value);
    public void remove_UserLookupError(EventHandler value);
    protected internal virtual void CreateChildControls();
    protected internal virtual void LoadControlState(object savedState);
    protected virtual void LoadViewState(object savedState);
    protected virtual void OnAnswerLookupError(EventArgs e);
    protected virtual void OnVerifyingAnswer(LoginCancelEventArgs e);
    protected virtual void OnSendingMail(MailMessageEventArgs e);
    protected virtual void OnSendMailError(SendMailErrorEventArgs e);
    protected virtual void OnVerifyingUser(LoginCancelEventArgs e);
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void OnUserLookupError(EventArgs e);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected internal virtual object SaveControlState();
    protected virtual object SaveViewState();
    protected virtual void SetDesignModeState(IDictionary data);
    internal void SetQuestionChildProperties();
    internal void SetSuccessChildProperties();
    internal void SetUserNameChildProperties();
    protected virtual void TrackViewState();
}
public enum System.Web.UI.WebControls.PathDirection : Enum {
    public int value__;
    public static PathDirection RootToCurrent;
    public static PathDirection CurrentToRoot;
}
[ControlBuilderAttribute("System.Web.UI.WebControls.PlaceHolderControlBuilder")]
public class System.Web.UI.WebControls.PlaceHolder : Control {
    [BrowsableAttribute("True")]
public bool EnableTheming { get; public set; }
    public virtual bool get_EnableTheming();
    public virtual void set_EnableTheming(bool value);
}
public class System.Web.UI.WebControls.PlaceHolderControlBuilder : ControlBuilder {
    public virtual bool AllowWhitespaceLiterals();
}
public class System.Web.UI.WebControls.PolygonHotSpot : HotSpot {
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("PolygonHotSpot_Coordinates")]
public string Coordinates { get; public set; }
    protected internal string MarkupName { get; }
    public string get_Coordinates();
    public void set_Coordinates(string value);
    protected internal virtual string get_MarkupName();
    public virtual string GetCoordinates();
}
internal class System.Web.UI.WebControls.PopOutPanel : Panel {
    public ScrollBars ScrollBars { get; }
    internal string ScrollerClass { get; internal set; }
    internal Style ScrollerStyle { get; internal set; }
    public PopOutPanel(Menu owner, Style style);
    public virtual ScrollBars get_ScrollBars();
    internal string get_ScrollerClass();
    internal void set_ScrollerClass(string value);
    internal Style get_ScrollerStyle();
    internal void set_ScrollerStyle(Style value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    internal PopOutPanelStyle GetEmptyPopOutPanelStyle();
    public virtual void RenderEndTag(HtmlTextWriter writer);
    internal void SetInternalStyle(Style style);
}
[DefaultPropertyAttribute("PropertyName")]
public class System.Web.UI.WebControls.ProfileParameter : Parameter {
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Parameter")]
[WebSysDescriptionAttribute("ProfileParameter_PropertyName")]
public string PropertyName { get; public set; }
    public ProfileParameter(string name, string propertyName);
    public ProfileParameter(string name, TypeCode type, string propertyName);
    public ProfileParameter(string name, DbType dbType, string propertyName);
    protected ProfileParameter(ProfileParameter original);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    protected virtual Parameter Clone();
    protected internal virtual object Evaluate(HttpContext context, Control control);
}
internal static class System.Web.UI.WebControls.QueryableHelpers : object {
    public static IQueryable`1<T> SortandPageHelper(IQueryable`1<T> queryable, Nullable`1<int> startRowIndex, Nullable`1<int> maxRowIndex, string sortExpression);
    public static int CountHelper(IQueryable`1<T> queryable);
    public static bool IsOrderingMethodFound(IQueryable`1<T> queryable);
}
[ExtensionAttribute]
public static class System.Web.UI.WebControls.QueryExtensions : object {
    [ExtensionAttribute]
public static IQueryable`1<T> SortBy(IQueryable`1<T> source, string sortExpression);
}
[DefaultPropertyAttribute("QueryStringField")]
public class System.Web.UI.WebControls.QueryStringParameter : Parameter {
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Parameter")]
[WebSysDescriptionAttribute("QueryStringParameter_QueryStringField")]
public string QueryStringField { get; public set; }
    [WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Parameter_ValidateInput")]
[DefaultValueAttribute("True")]
public bool ValidateInput { get; public set; }
    public QueryStringParameter(string name, string queryStringField);
    public QueryStringParameter(string name, DbType dbType, string queryStringField);
    public QueryStringParameter(string name, TypeCode type, string queryStringField);
    protected QueryStringParameter(QueryStringParameter original);
    public string get_QueryStringField();
    public void set_QueryStringField(string value);
    protected virtual Parameter Clone();
    protected internal virtual object Evaluate(HttpContext context, Control control);
    public bool get_ValidateInput();
    public void set_ValidateInput(bool value);
}
[DesignerAttribute("System.Web.UI.Design.WebControls.CheckBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SupportsEventValidationAttribute]
public class System.Web.UI.WebControls.RadioButton : CheckBox {
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("RadioButton_GroupName")]
[ThemeableAttribute("False")]
public string GroupName { get; public set; }
    internal string UniqueGroupName { get; }
    internal string ValueAttribute { get; }
    public virtual string get_GroupName();
    public virtual void set_GroupName(string value);
    internal string get_UniqueGroupName();
    internal string get_ValueAttribute();
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    protected virtual void RaisePostDataChangedEvent();
    protected internal virtual void OnPreRender(EventArgs e);
    internal virtual void RenderInputTag(HtmlTextWriter writer, string clientID, string onClick);
}
[ValidationPropertyAttribute("SelectedItem")]
[SupportsEventValidationAttribute]
public class System.Web.UI.WebControls.RadioButtonList : ListControl {
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("-1")]
[WebSysDescriptionAttribute("RadioButtonList_CellPadding")]
public int CellPadding { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("-1")]
[WebSysDescriptionAttribute("RadioButtonList_CellSpacing")]
public int CellSpacing { get; public set; }
    [DefaultValueAttribute("False")]
[ThemeableAttribute("True")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("ListControl_RenderWhenDataEmpty")]
public bool RenderWhenDataEmpty { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("0")]
[WebSysDescriptionAttribute("RadioButtonList_RepeatColumns")]
public int RepeatColumns { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Item_RepeatDirection")]
public RepeatDirection RepeatDirection { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("WebControl_RepeatLayout")]
public RepeatLayout RepeatLayout { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("WebControl_TextAlign")]
public TextAlign TextAlign { get; public set; }
    private bool System.Web.UI.WebControls.IRepeatInfoUser.HasFooter { get; }
    protected bool HasFooter { get; }
    private bool System.Web.UI.WebControls.IRepeatInfoUser.HasHeader { get; }
    protected bool HasHeader { get; }
    private bool System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators { get; }
    protected bool HasSeparators { get; }
    private int System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount { get; }
    protected int RepeatedItemCount { get; }
    public virtual int get_CellPadding();
    public virtual void set_CellPadding(int value);
    public virtual int get_CellSpacing();
    public virtual void set_CellSpacing(int value);
    public virtual bool get_RenderWhenDataEmpty();
    public virtual void set_RenderWhenDataEmpty(bool value);
    public virtual int get_RepeatColumns();
    public virtual void set_RepeatColumns(int value);
    public virtual RepeatDirection get_RepeatDirection();
    public virtual void set_RepeatDirection(RepeatDirection value);
    public virtual RepeatLayout get_RepeatLayout();
    public virtual void set_RepeatLayout(RepeatLayout value);
    public virtual TextAlign get_TextAlign();
    public virtual void set_TextAlign(TextAlign value);
    protected virtual Style CreateControlStyle();
    protected virtual Control FindControl(string id, int pathOffset);
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    protected virtual void RaisePostDataChangedEvent();
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void Render(HtmlTextWriter writer);
    private sealed virtual override bool System.Web.UI.WebControls.IRepeatInfoUser.get_HasFooter();
    protected virtual bool get_HasFooter();
    private sealed virtual override bool System.Web.UI.WebControls.IRepeatInfoUser.get_HasHeader();
    protected virtual bool get_HasHeader();
    private sealed virtual override bool System.Web.UI.WebControls.IRepeatInfoUser.get_HasSeparators();
    protected virtual bool get_HasSeparators();
    private sealed virtual override int System.Web.UI.WebControls.IRepeatInfoUser.get_RepeatedItemCount();
    protected virtual int get_RepeatedItemCount();
    private sealed virtual override Style System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle(ListItemType itemType, int repeatIndex);
    protected virtual Style GetItemStyle(ListItemType itemType, int repeatIndex);
    private sealed virtual override void System.Web.UI.WebControls.IRepeatInfoUser.RenderItem(ListItemType itemType, int repeatIndex, RepeatInfo repeatInfo, HtmlTextWriter writer);
    protected virtual void RenderItem(ListItemType itemType, int repeatIndex, RepeatInfo repeatInfo, HtmlTextWriter writer);
}
[ToolboxDataAttribute("<{0}:RangeValidator runat="server" ErrorMessage="RangeValidator"></{0}:RangeValidator>")]
public class System.Web.UI.WebControls.RangeValidator : BaseCompareValidator {
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("RangeValidator_MaximumValue")]
public string MaximumValue { get; public set; }
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("RangeValidator_MinmumValue")]
public string MinimumValue { get; public set; }
    public string get_MaximumValue();
    public void set_MaximumValue(string value);
    public string get_MinimumValue();
    public void set_MinimumValue(string value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual bool ControlPropertiesValid();
    protected virtual bool EvaluateIsValid();
}
internal class System.Web.UI.WebControls.ReadOnlyDataSource : object {
    public ReadOnlyDataSource(object dataSource, string dataMember);
    private static ReadOnlyDataSource();
    private sealed virtual override void System.Web.UI.IDataSource.add_DataSourceChanged(EventHandler value);
    private sealed virtual override void System.Web.UI.IDataSource.remove_DataSourceChanged(EventHandler value);
    private sealed virtual override DataSourceView System.Web.UI.IDataSource.GetView(string viewName);
    private sealed virtual override ICollection System.Web.UI.IDataSource.GetViewNames();
}
internal class System.Web.UI.WebControls.ReadOnlyDataSourceView : DataSourceView {
    public ReadOnlyDataSourceView(ReadOnlyDataSource owner, string name, IEnumerable dataSource);
    protected internal virtual IEnumerable ExecuteSelect(DataSourceSelectArguments arguments);
}
internal class System.Web.UI.WebControls.ReadOnlyHierarchicalDataSource : object {
    public ReadOnlyHierarchicalDataSource(object dataSource);
    private sealed virtual override void System.Web.UI.IHierarchicalDataSource.add_DataSourceChanged(EventHandler value);
    private sealed virtual override void System.Web.UI.IHierarchicalDataSource.remove_DataSourceChanged(EventHandler value);
    private sealed virtual override HierarchicalDataSourceView System.Web.UI.IHierarchicalDataSource.GetHierarchicalView(string viewPath);
}
internal class System.Web.UI.WebControls.ReadOnlyHierarchicalDataSourceView : HierarchicalDataSourceView {
    public ReadOnlyHierarchicalDataSourceView(IHierarchicalEnumerable dataSource);
    public virtual IHierarchicalEnumerable Select();
}
public class System.Web.UI.WebControls.RectangleHotSpot : HotSpot {
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("0")]
[WebSysDescriptionAttribute("RectangleHotSpot_Bottom")]
public int Bottom { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("0")]
[WebSysDescriptionAttribute("RectangleHotSpot_Left")]
public int Left { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("0")]
[WebSysDescriptionAttribute("RectangleHotSpot_Right")]
public int Right { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("0")]
[WebSysDescriptionAttribute("RectangleHotSpot_Top")]
public int Top { get; public set; }
    protected internal string MarkupName { get; }
    public int get_Bottom();
    public void set_Bottom(int value);
    public int get_Left();
    public void set_Left(int value);
    public int get_Right();
    public void set_Right(int value);
    public int get_Top();
    public void set_Top(int value);
    protected internal virtual string get_MarkupName();
    public virtual string GetCoordinates();
}
[ToolboxDataAttribute("<{0}:RegularExpressionValidator runat="server" ErrorMessage="RegularExpressionValidator"></{0}:RegularExpressionValidator>")]
public class System.Web.UI.WebControls.RegularExpressionValidator : BaseValidator {
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.RegexTypeEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[WebSysDescriptionAttribute("RegularExpressionValidator_ValidationExpression")]
public string ValidationExpression { get; public set; }
    public Nullable`1<int> MatchTimeout { get; public set; }
    public string get_ValidationExpression();
    public void set_ValidationExpression(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MatchTimeout();
    [CompilerGeneratedAttribute]
public void set_MatchTimeout(Nullable`1<int> value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual bool EvaluateIsValid();
}
public enum System.Web.UI.WebControls.RepeatDirection : Enum {
    public int value__;
    public static RepeatDirection Horizontal;
    public static RepeatDirection Vertical;
}
[DefaultEventAttribute("ItemCommand")]
[DefaultPropertyAttribute("DataSource")]
[DesignerAttribute("System.Web.UI.Design.WebControls.RepeaterDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
public class System.Web.UI.WebControls.Repeater : Control {
    internal static string ItemCountViewStateKey;
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataBoundControl_ItemType")]
public string ItemType { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataBoundControl_SelectMethod")]
public string SelectMethod { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.RepeaterItem")]
[WebSysDescriptionAttribute("Repeater_AlternatingItemTemplate")]
public ITemplate AlternatingItemTemplate { get; public set; }
    public ControlCollection Controls { get; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("Repeater_DataMember")]
public string DataMember { get; public set; }
    [BindableAttribute("True")]
[WebCategoryAttribute("Data")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("BaseDataBoundControl_DataSource")]
public object DataSource { get; public set; }
    [DefaultValueAttribute("")]
[IDReferencePropertyAttribute("System.Web.UI.DataSourceControl")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("BaseDataBoundControl_DataSourceID")]
public string DataSourceID { get; public set; }
    [BrowsableAttribute("True")]
public bool EnableTheming { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.RepeaterItem")]
[WebSysDescriptionAttribute("Repeater_FooterTemplate")]
public ITemplate FooterTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.RepeaterItem")]
[WebSysDescriptionAttribute("WebControl_HeaderTemplate")]
public ITemplate HeaderTemplate { get; public set; }
    protected bool Initialized { get; }
    protected bool IsBoundUsingDataSourceID { get; }
    protected bool IsDataBindingAutomatic { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("Repeater_Items")]
public RepeaterItemCollection Items { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.RepeaterItem")]
[WebSysDescriptionAttribute("Repeater_ItemTemplate")]
public ITemplate ItemTemplate { get; public set; }
    protected bool RequiresDataBinding { get; protected set; }
    protected DataSourceSelectArguments SelectArguments { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.RepeaterItem")]
[WebSysDescriptionAttribute("Repeater_SeparatorTemplate")]
public ITemplate SeparatorTemplate { get; public set; }
    private static Repeater();
    protected virtual void OnCreatingModelDataSource(CreatingModelDataSourceEventArgs e);
    public void add_CreatingModelDataSource(CreatingModelDataSourceEventHandler value);
    public void remove_CreatingModelDataSource(CreatingModelDataSourceEventHandler value);
    public virtual string get_ItemType();
    public virtual void set_ItemType(string value);
    public virtual string get_SelectMethod();
    public virtual void set_SelectMethod(string value);
    public void add_CallingDataMethods(CallingDataMethodsEventHandler value);
    public void remove_CallingDataMethods(CallingDataMethodsEventHandler value);
    public virtual ITemplate get_AlternatingItemTemplate();
    public virtual void set_AlternatingItemTemplate(ITemplate value);
    public virtual ControlCollection get_Controls();
    public virtual string get_DataMember();
    public virtual void set_DataMember(string value);
    public virtual object get_DataSource();
    public virtual void set_DataSource(object value);
    public virtual string get_DataSourceID();
    public virtual void set_DataSourceID(string value);
    public virtual bool get_EnableTheming();
    public virtual void set_EnableTheming(bool value);
    public virtual ITemplate get_FooterTemplate();
    public virtual void set_FooterTemplate(ITemplate value);
    public virtual ITemplate get_HeaderTemplate();
    public virtual void set_HeaderTemplate(ITemplate value);
    protected bool get_Initialized();
    protected bool get_IsBoundUsingDataSourceID();
    protected bool get_IsDataBindingAutomatic();
    public virtual RepeaterItemCollection get_Items();
    public virtual ITemplate get_ItemTemplate();
    public virtual void set_ItemTemplate(ITemplate value);
    protected bool get_RequiresDataBinding();
    protected void set_RequiresDataBinding(bool value);
    protected DataSourceSelectArguments get_SelectArguments();
    public virtual ITemplate get_SeparatorTemplate();
    public virtual void set_SeparatorTemplate(ITemplate value);
    public void add_ItemCommand(RepeaterCommandEventHandler value);
    public void remove_ItemCommand(RepeaterCommandEventHandler value);
    public void add_ItemCreated(RepeaterItemEventHandler value);
    public void remove_ItemCreated(RepeaterItemEventHandler value);
    public void add_ItemDataBound(RepeaterItemEventHandler value);
    public void remove_ItemDataBound(RepeaterItemEventHandler value);
    protected internal virtual void CreateChildControls();
    protected virtual void CreateControlHierarchy(bool useDataSource);
    protected virtual DataSourceSelectArguments CreateDataSourceSelectArguments();
    protected virtual RepeaterItem CreateItem(int itemIndex, ListItemType itemType);
    public virtual void DataBind();
    protected void EnsureDataBound();
    protected virtual IEnumerable GetData();
    protected virtual void InitializeItem(RepeaterItem item);
    protected virtual bool OnBubbleEvent(object sender, EventArgs e);
    protected virtual void OnDataBinding(EventArgs e);
    protected virtual void OnDataPropertyChanged();
    protected virtual void OnDataSourceViewChanged(object sender, EventArgs e);
    protected internal virtual void OnInit(EventArgs e);
    protected virtual void OnItemCommand(RepeaterCommandEventArgs e);
    protected virtual void OnItemCreated(RepeaterItemEventArgs e);
    protected virtual void OnItemDataBound(RepeaterItemEventArgs e);
    protected internal virtual void OnLoad(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void LoadViewState(object savedState);
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
}
public class System.Web.UI.WebControls.RepeaterCommandEventArgs : CommandEventArgs {
    public RepeaterItem Item { get; }
    public object CommandSource { get; }
    public RepeaterCommandEventArgs(RepeaterItem item, object commandSource, CommandEventArgs originalArgs);
    public RepeaterItem get_Item();
    public object get_CommandSource();
}
public class System.Web.UI.WebControls.RepeaterCommandEventHandler : MulticastDelegate {
    public RepeaterCommandEventHandler(object object, IntPtr method);
    public virtual void Invoke(object source, RepeaterCommandEventArgs e);
    public virtual IAsyncResult BeginInvoke(object source, RepeaterCommandEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ToolboxItemAttribute("False")]
public class System.Web.UI.WebControls.RepeaterItem : Control {
    public object DataItem { get; public set; }
    public int ItemIndex { get; }
    public ListItemType ItemType { get; }
    private int System.Web.UI.IDataItemContainer.DataItemIndex { get; }
    private int System.Web.UI.IDataItemContainer.DisplayIndex { get; }
    public RepeaterItem(int itemIndex, ListItemType itemType);
    public virtual object get_DataItem();
    public virtual void set_DataItem(object value);
    public virtual int get_ItemIndex();
    public virtual ListItemType get_ItemType();
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
    private sealed virtual override int System.Web.UI.IDataItemContainer.get_DataItemIndex();
    private sealed virtual override int System.Web.UI.IDataItemContainer.get_DisplayIndex();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.RepeaterItemCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public RepeaterItem Item { get; }
    public RepeaterItemCollection(ArrayList items);
    public sealed virtual int get_Count();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public RepeaterItem get_Item(int index);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
public class System.Web.UI.WebControls.RepeaterItemEventArgs : EventArgs {
    public RepeaterItem Item { get; }
    public RepeaterItemEventArgs(RepeaterItem item);
    public RepeaterItem get_Item();
}
public class System.Web.UI.WebControls.RepeaterItemEventHandler : MulticastDelegate {
    public RepeaterItemEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RepeaterItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RepeaterItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.RepeatInfo : object {
    public string Caption { get; public set; }
    public TableCaptionAlign CaptionAlign { get; public set; }
    internal bool EnableLegacyRendering { get; internal set; }
    public bool OuterTableImplied { get; public set; }
    public int RepeatColumns { get; public set; }
    public RepeatDirection RepeatDirection { get; public set; }
    public RepeatLayout RepeatLayout { get; public set; }
    public bool UseAccessibleHeader { get; public set; }
    public string get_Caption();
    public void set_Caption(string value);
    public TableCaptionAlign get_CaptionAlign();
    public void set_CaptionAlign(TableCaptionAlign value);
    internal bool get_EnableLegacyRendering();
    internal void set_EnableLegacyRendering(bool value);
    public bool get_OuterTableImplied();
    public void set_OuterTableImplied(bool value);
    public int get_RepeatColumns();
    public void set_RepeatColumns(int value);
    public RepeatDirection get_RepeatDirection();
    public void set_RepeatDirection(RepeatDirection value);
    public RepeatLayout get_RepeatLayout();
    public void set_RepeatLayout(RepeatLayout value);
    public bool get_UseAccessibleHeader();
    public void set_UseAccessibleHeader(bool value);
    public void RenderRepeater(HtmlTextWriter writer, IRepeatInfoUser user, Style controlStyle, WebControl baseControl);
}
public enum System.Web.UI.WebControls.RepeatLayout : Enum {
    public int value__;
    public static RepeatLayout Table;
    public static RepeatLayout Flow;
    public static RepeatLayout UnorderedList;
    public static RepeatLayout OrderedList;
}
[ToolboxDataAttribute("<{0}:RequiredFieldValidator runat="server" ErrorMessage="RequiredFieldValidator"></{0}:RequiredFieldValidator>")]
public class System.Web.UI.WebControls.RequiredFieldValidator : BaseValidator {
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("RequiredFieldValidator_InitialValue")]
public string InitialValue { get; public set; }
    public string get_InitialValue();
    public void set_InitialValue(string value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual bool EvaluateIsValid();
}
public class System.Web.UI.WebControls.RoleGroup : object {
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.LoginView")]
public ITemplate ContentTemplate { get; public set; }
    [TypeConverterAttribute("System.Web.UI.WebControls.StringArrayConverter")]
public String[] Roles { get; public set; }
    public ITemplate get_ContentTemplate();
    public void set_ContentTemplate(ITemplate value);
    public String[] get_Roles();
    public void set_Roles(String[] value);
    public bool ContainsUser(IPrincipal user);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[EditorAttribute("System.Web.UI.Design.WebControls.RoleGroupCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public class System.Web.UI.WebControls.RoleGroupCollection : CollectionBase {
    public RoleGroup Item { get; }
    public RoleGroup get_Item(int index);
    public void Add(RoleGroup group);
    public void CopyTo(RoleGroup[] array, int index);
    public bool Contains(RoleGroup group);
    public RoleGroup GetMatchingRoleGroup(IPrincipal user);
    internal int GetMatchingRoleGroupInternal(IPrincipal user);
    public int IndexOf(RoleGroup group);
    public void Insert(int index, RoleGroup group);
    protected virtual void OnValidate(object value);
    public void Remove(RoleGroup group);
}
[DefaultPropertyAttribute("RouteKey")]
public class System.Web.UI.WebControls.RouteParameter : Parameter {
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Parameter")]
[WebSysDescriptionAttribute("RouteParameter_RouteKey")]
public string RouteKey { get; public set; }
    public RouteParameter(string name, string routeKey);
    public RouteParameter(string name, DbType dbType, string routeKey);
    public RouteParameter(string name, TypeCode type, string routeKey);
    protected RouteParameter(RouteParameter original);
    public string get_RouteKey();
    public void set_RouteKey(string value);
    protected virtual Parameter Clone();
    protected internal virtual object Evaluate(HttpContext context, Control control);
}
[FlagsAttribute]
public enum System.Web.UI.WebControls.ScrollBars : Enum {
    public int value__;
    public static ScrollBars None;
    public static ScrollBars Horizontal;
    public static ScrollBars Vertical;
    public static ScrollBars Both;
    public static ScrollBars Auto;
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.SelectedDatesCollection : object {
    public int Count { get; }
    public DateTime Item { get; }
    public object SyncRoot { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public SelectedDatesCollection(ArrayList dateList);
    public sealed virtual int get_Count();
    public DateTime get_Item(int index);
    public void Add(DateTime date);
    public void Clear();
    public bool Contains(DateTime date);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual object get_SyncRoot();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public void Remove(DateTime date);
    public void SelectRange(DateTime fromDate, DateTime toDate);
}
public class System.Web.UI.WebControls.SelectResult : object {
    public int TotalRowCount { get; private set; }
    public IEnumerable Results { get; private set; }
    public SelectResult(int totalRowCount, IEnumerable results);
    [CompilerGeneratedAttribute]
public int get_TotalRowCount();
    [CompilerGeneratedAttribute]
private void set_TotalRowCount(int value);
    [CompilerGeneratedAttribute]
public IEnumerable get_Results();
    [CompilerGeneratedAttribute]
private void set_Results(IEnumerable value);
}
public class System.Web.UI.WebControls.SendMailErrorEventArgs : EventArgs {
    public Exception Exception { get; public set; }
    public bool Handled { get; public set; }
    public SendMailErrorEventArgs(Exception e);
    public Exception get_Exception();
    public void set_Exception(Exception value);
    public bool get_Handled();
    public void set_Handled(bool value);
}
public class System.Web.UI.WebControls.SendMailErrorEventHandler : MulticastDelegate {
    public SendMailErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SendMailErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SendMailErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.ServerValidateEventArgs : EventArgs {
    public string Value { get; }
    public bool IsValid { get; public set; }
    public ServerValidateEventArgs(string value, bool isValid);
    public string get_Value();
    public bool get_IsValid();
    public void set_IsValid(bool value);
}
public class System.Web.UI.WebControls.ServerValidateEventHandler : MulticastDelegate {
    public ServerValidateEventHandler(object object, IntPtr method);
    public virtual void Invoke(object source, ServerValidateEventArgs args);
    public virtual IAsyncResult BeginInvoke(object source, ServerValidateEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultPropertyAttribute("SessionField")]
public class System.Web.UI.WebControls.SessionParameter : Parameter {
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Parameter")]
[WebSysDescriptionAttribute("SessionParameter_SessionField")]
public string SessionField { get; public set; }
    public SessionParameter(string name, string sessionField);
    public SessionParameter(string name, DbType dbType, string sessionField);
    public SessionParameter(string name, TypeCode type, string sessionField);
    protected SessionParameter(SessionParameter original);
    public string get_SessionField();
    public void set_SessionField(string value);
    protected virtual Parameter Clone();
    protected internal virtual object Evaluate(HttpContext context, Control control);
}
[DesignerAttribute("System.Web.UI.Design.WebControls.SiteMapDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
[ToolboxBitmapAttribute("System.Web.UI.WebControls.SiteMapDataSource")]
[WebSysDescriptionAttribute("SiteMapDataSource_Description")]
[WebSysDisplayNameAttribute("SiteMapDataSource_DisplayName")]
public class System.Web.UI.WebControls.SiteMapDataSource : HierarchicalDataSourceControl {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("SiteMapDataSource_ContainsListCollection")]
public bool ContainsListCollection { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("SiteMapDataSource_Provider")]
public SiteMapProvider Provider { get; public set; }
    [DefaultValueAttribute("True")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("SiteMapDataSource_ShowStartingNode")]
public bool ShowStartingNode { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("SiteMapDataSource_SiteMapProvider")]
public string SiteMapProvider { get; public set; }
    [DefaultValueAttribute("0")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("SiteMapDataSource_StartingNodeOffset")]
public int StartingNodeOffset { get; public set; }
    [DefaultValueAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("SiteMapDataSource_StartFromCurrentNode")]
public bool StartFromCurrentNode { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("SiteMapDataSource_StartingNodeUrl")]
public string StartingNodeUrl { get; public set; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public virtual bool get_ContainsListCollection();
    public SiteMapProvider get_Provider();
    public void set_Provider(SiteMapProvider value);
    public virtual bool get_ShowStartingNode();
    public virtual void set_ShowStartingNode(bool value);
    public virtual string get_SiteMapProvider();
    public virtual void set_SiteMapProvider(string value);
    public virtual int get_StartingNodeOffset();
    public virtual void set_StartingNodeOffset(int value);
    public virtual bool get_StartFromCurrentNode();
    public virtual void set_StartFromCurrentNode(bool value);
    public virtual string get_StartingNodeUrl();
    public virtual void set_StartingNodeUrl(string value);
    protected virtual HierarchicalDataSourceView GetHierarchicalView(string viewPath);
    public virtual IList GetList();
    internal SiteMapNodeCollection GetPathNodeCollection(string viewPath);
    public virtual DataSourceView GetView(string viewName);
    public virtual ICollection GetViewNames();
    private sealed virtual override void System.Web.UI.IDataSource.add_DataSourceChanged(EventHandler value);
    private sealed virtual override void System.Web.UI.IDataSource.remove_DataSourceChanged(EventHandler value);
    private sealed virtual override DataSourceView System.Web.UI.IDataSource.GetView(string viewName);
    private sealed virtual override ICollection System.Web.UI.IDataSource.GetViewNames();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
}
public class System.Web.UI.WebControls.SiteMapDataSourceView : DataSourceView {
    public SiteMapDataSourceView(SiteMapDataSource owner, string name, SiteMapNode node);
    public SiteMapDataSourceView(SiteMapDataSource owner, string name, SiteMapNodeCollection collection);
    protected internal virtual IEnumerable ExecuteSelect(DataSourceSelectArguments arguments);
    protected virtual void OnDataSourceViewChanged(EventArgs e);
    public IEnumerable Select(DataSourceSelectArguments arguments);
}
public class System.Web.UI.WebControls.SiteMapHierarchicalDataSourceView : HierarchicalDataSourceView {
    public SiteMapHierarchicalDataSourceView(SiteMapNode node);
    public SiteMapHierarchicalDataSourceView(SiteMapNodeCollection collection);
    public virtual IHierarchicalEnumerable Select();
}
[ToolboxItemAttribute("False")]
public class System.Web.UI.WebControls.SiteMapNodeItem : WebControl {
    public SiteMapNode SiteMapNode { get; public set; }
    public int ItemIndex { get; }
    public SiteMapNodeItemType ItemType { get; }
    private object System.Web.UI.IDataItemContainer.DataItem { get; }
    private int System.Web.UI.IDataItemContainer.DataItemIndex { get; }
    private int System.Web.UI.IDataItemContainer.DisplayIndex { get; }
    public SiteMapNodeItem(int itemIndex, SiteMapNodeItemType itemType);
    public virtual SiteMapNode get_SiteMapNode();
    public virtual void set_SiteMapNode(SiteMapNode value);
    public virtual int get_ItemIndex();
    public virtual SiteMapNodeItemType get_ItemType();
    protected internal virtual void SetItemType(SiteMapNodeItemType itemType);
    private sealed virtual override object System.Web.UI.IDataItemContainer.get_DataItem();
    private sealed virtual override int System.Web.UI.IDataItemContainer.get_DataItemIndex();
    private sealed virtual override int System.Web.UI.IDataItemContainer.get_DisplayIndex();
}
public class System.Web.UI.WebControls.SiteMapNodeItemEventArgs : EventArgs {
    public SiteMapNodeItem Item { get; }
    public SiteMapNodeItemEventArgs(SiteMapNodeItem item);
    public SiteMapNodeItem get_Item();
}
public class System.Web.UI.WebControls.SiteMapNodeItemEventHandler : MulticastDelegate {
    public SiteMapNodeItemEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SiteMapNodeItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SiteMapNodeItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Web.UI.WebControls.SiteMapNodeItemType : Enum {
    public int value__;
    public static SiteMapNodeItemType Root;
    public static SiteMapNodeItemType Parent;
    public static SiteMapNodeItemType Current;
    public static SiteMapNodeItemType PathSeparator;
}
[DesignerAttribute("System.Web.UI.Design.WebControls.SiteMapPathDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.UI.WebControls.SiteMapPath : CompositeControl {
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("SiteMapPath_CurrentNodeStyle")]
public Style CurrentNodeStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.SiteMapNodeItem")]
[WebSysDescriptionAttribute("SiteMapPath_CurrentNodeTemplate")]
public ITemplate CurrentNodeTemplate { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("SiteMapPath_NodeStyle")]
public Style NodeStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.SiteMapNodeItem")]
[WebSysDescriptionAttribute("SiteMapPath_NodeTemplate")]
public ITemplate NodeTemplate { get; public set; }
    [DefaultValueAttribute("-1")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("SiteMapPath_ParentLevelsDisplayed")]
public int ParentLevelsDisplayed { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("SiteMapPath_PathDirection")]
public PathDirection PathDirection { get; public set; }
    [DefaultValueAttribute(" > ")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("SiteMapPath_PathSeparator")]
public string PathSeparator { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("SiteMapPath_PathSeparatorStyle")]
public Style PathSeparatorStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.SiteMapNodeItem")]
[WebSysDescriptionAttribute("SiteMapPath_PathSeparatorTemplate")]
public ITemplate PathSeparatorTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("SiteMapPath_Provider")]
public SiteMapProvider Provider { get; public set; }
    [DefaultValueAttribute("False")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("SiteMapPath_RenderCurrentNodeAsLink")]
public bool RenderCurrentNodeAsLink { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("SiteMapPath_RootNodeStyle")]
public Style RootNodeStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.SiteMapNodeItem")]
[WebSysDescriptionAttribute("SiteMapPath_RootNodeTemplate")]
public ITemplate RootNodeTemplate { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Accessibility")]
[WebSysDefaultValueAttribute("SiteMapPath_Default_SkipToContentText")]
[WebSysDescriptionAttribute("SiteMapPath_SkipToContentText")]
public string SkipLinkText { get; public set; }
    [DefaultValueAttribute("True")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("SiteMapPath_ShowToolTips")]
public bool ShowToolTips { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("SiteMapPath_SiteMapProvider")]
public string SiteMapProvider { get; public set; }
    private static SiteMapPath();
    public Style get_CurrentNodeStyle();
    public virtual ITemplate get_CurrentNodeTemplate();
    public virtual void set_CurrentNodeTemplate(ITemplate value);
    public Style get_NodeStyle();
    public virtual ITemplate get_NodeTemplate();
    public virtual void set_NodeTemplate(ITemplate value);
    public virtual int get_ParentLevelsDisplayed();
    public virtual void set_ParentLevelsDisplayed(int value);
    public virtual PathDirection get_PathDirection();
    public virtual void set_PathDirection(PathDirection value);
    public virtual string get_PathSeparator();
    public virtual void set_PathSeparator(string value);
    public Style get_PathSeparatorStyle();
    public virtual ITemplate get_PathSeparatorTemplate();
    public virtual void set_PathSeparatorTemplate(ITemplate value);
    public SiteMapProvider get_Provider();
    public void set_Provider(SiteMapProvider value);
    public virtual bool get_RenderCurrentNodeAsLink();
    public virtual void set_RenderCurrentNodeAsLink(bool value);
    public Style get_RootNodeStyle();
    public virtual ITemplate get_RootNodeTemplate();
    public virtual void set_RootNodeTemplate(ITemplate value);
    public virtual string get_SkipLinkText();
    public virtual void set_SkipLinkText(string value);
    public virtual bool get_ShowToolTips();
    public virtual void set_ShowToolTips(bool value);
    public virtual string get_SiteMapProvider();
    public virtual void set_SiteMapProvider(string value);
    public void add_ItemCreated(SiteMapNodeItemEventHandler value);
    public void remove_ItemCreated(SiteMapNodeItemEventHandler value);
    public void add_ItemDataBound(SiteMapNodeItemEventHandler value);
    public void remove_ItemDataBound(SiteMapNodeItemEventHandler value);
    protected internal virtual void CreateChildControls();
    protected virtual void CreateControlHierarchy();
    public virtual void DataBind();
    protected virtual void InitializeItem(SiteMapNodeItem item);
    protected virtual void LoadViewState(object savedState);
    protected virtual void OnDataBinding(EventArgs e);
    protected virtual void OnItemCreated(SiteMapNodeItemEventArgs e);
    protected virtual void OnItemDataBound(SiteMapNodeItemEventArgs e);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected internal virtual void RenderContents(HtmlTextWriter writer);
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
}
public enum System.Web.UI.WebControls.SortDirection : Enum {
    public int value__;
    public static SortDirection Ascending;
    public static SortDirection Descending;
}
[DefaultEventAttribute("Selecting")]
[DefaultPropertyAttribute("SelectQuery")]
[DesignerAttribute("System.Web.UI.Design.WebControls.SqlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
[ToolboxBitmapAttribute("System.Web.UI.WebControls.SqlDataSource")]
[WebSysDescriptionAttribute("SqlDataSource_Description")]
[WebSysDisplayNameAttribute("SqlDataSource_DisplayName")]
public class System.Web.UI.WebControls.SqlDataSource : DataSourceControl {
    internal DataSourceCache Cache { get; }
    [DefaultValueAttribute("0")]
[TypeConverterAttribute("System.Web.UI.DataSourceCacheDurationConverter")]
[WebCategoryAttribute("Cache")]
[WebSysDescriptionAttribute("DataSourceCache_Duration")]
public int CacheDuration { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Cache")]
[WebSysDescriptionAttribute("DataSourceCache_ExpirationPolicy")]
public DataSourceCacheExpiry CacheExpirationPolicy { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Cache")]
[WebSysDescriptionAttribute("DataSourceCache_KeyDependency")]
public string CacheKeyDependency { get; public set; }
    [DefaultValueAttribute("True")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("SqlDataSource_CancelSelectOnNullParameter")]
public bool CancelSelectOnNullParameter { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("SqlDataSource_ConflictDetection")]
public ConflictOptions ConflictDetection { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.SqlDataSourceConnectionStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[WebCategoryAttribute("Data")]
[MergablePropertyAttribute("False")]
[WebSysDescriptionAttribute("SqlDataSource_ConnectionString")]
public string ConnectionString { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("SqlDataSource_DataSourceMode")]
public SqlDataSourceMode DataSourceMode { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("SqlDataSource_DeleteCommand")]
public string DeleteCommand { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("SqlDataSource_DeleteCommandType")]
public SqlDataSourceCommandType DeleteCommandType { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("SqlDataSource_DeleteParameters")]
public ParameterCollection DeleteParameters { get; }
    [DefaultValueAttribute("False")]
[WebCategoryAttribute("Cache")]
[WebSysDescriptionAttribute("DataSourceCache_Enabled")]
public bool EnableCaching { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("SqlDataSource_FilterExpression")]
public string FilterExpression { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("SqlDataSource_FilterParameters")]
public ParameterCollection FilterParameters { get; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("SqlDataSource_InsertCommand")]
public string InsertCommand { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("SqlDataSource_InsertCommandType")]
public SqlDataSourceCommandType InsertCommandType { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("SqlDataSource_InsertParameters")]
public ParameterCollection InsertParameters { get; }
    [DefaultValueAttribute("{0}")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataSource_OldValuesParameterFormatString")]
public string OldValuesParameterFormatString { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.WebControls.DataProviderNameConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("SqlDataSource_ProviderName")]
public string ProviderName { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("SqlDataSource_SelectCommand")]
public string SelectCommand { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("SqlDataSource_SelectCommandType")]
public SqlDataSourceCommandType SelectCommandType { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("SqlDataSource_SelectParameters")]
public ParameterCollection SelectParameters { get; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("SqlDataSource_SortParameterName")]
public string SortParameterName { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Cache")]
[WebSysDescriptionAttribute("SqlDataSourceCache_SqlCacheDependency")]
public string SqlCacheDependency { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("SqlDataSource_UpdateCommand")]
public string UpdateCommand { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("SqlDataSource_UpdateCommandType")]
public SqlDataSourceCommandType UpdateCommandType { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("SqlDataSource_UpdateParameters")]
public ParameterCollection UpdateParameters { get; }
    public SqlDataSource(string connectionString, string selectCommand);
    public SqlDataSource(string providerName, string connectionString, string selectCommand);
    internal virtual DataSourceCache get_Cache();
    public virtual int get_CacheDuration();
    public virtual void set_CacheDuration(int value);
    public virtual DataSourceCacheExpiry get_CacheExpirationPolicy();
    public virtual void set_CacheExpirationPolicy(DataSourceCacheExpiry value);
    public virtual string get_CacheKeyDependency();
    public virtual void set_CacheKeyDependency(string value);
    public virtual bool get_CancelSelectOnNullParameter();
    public virtual void set_CancelSelectOnNullParameter(bool value);
    public ConflictOptions get_ConflictDetection();
    public void set_ConflictDetection(ConflictOptions value);
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public SqlDataSourceMode get_DataSourceMode();
    public void set_DataSourceMode(SqlDataSourceMode value);
    public string get_DeleteCommand();
    public void set_DeleteCommand(string value);
    public SqlDataSourceCommandType get_DeleteCommandType();
    public void set_DeleteCommandType(SqlDataSourceCommandType value);
    public ParameterCollection get_DeleteParameters();
    public virtual bool get_EnableCaching();
    public virtual void set_EnableCaching(bool value);
    public string get_FilterExpression();
    public void set_FilterExpression(string value);
    public ParameterCollection get_FilterParameters();
    public string get_InsertCommand();
    public void set_InsertCommand(string value);
    public SqlDataSourceCommandType get_InsertCommandType();
    public void set_InsertCommandType(SqlDataSourceCommandType value);
    public ParameterCollection get_InsertParameters();
    public string get_OldValuesParameterFormatString();
    public void set_OldValuesParameterFormatString(string value);
    public virtual string get_ProviderName();
    public virtual void set_ProviderName(string value);
    public string get_SelectCommand();
    public void set_SelectCommand(string value);
    public SqlDataSourceCommandType get_SelectCommandType();
    public void set_SelectCommandType(SqlDataSourceCommandType value);
    public ParameterCollection get_SelectParameters();
    public string get_SortParameterName();
    public void set_SortParameterName(string value);
    public virtual string get_SqlCacheDependency();
    public virtual void set_SqlCacheDependency(string value);
    public string get_UpdateCommand();
    public void set_UpdateCommand(string value);
    public SqlDataSourceCommandType get_UpdateCommandType();
    public void set_UpdateCommandType(SqlDataSourceCommandType value);
    public ParameterCollection get_UpdateParameters();
    public void add_Deleted(SqlDataSourceStatusEventHandler value);
    public void remove_Deleted(SqlDataSourceStatusEventHandler value);
    public void add_Deleting(SqlDataSourceCommandEventHandler value);
    public void remove_Deleting(SqlDataSourceCommandEventHandler value);
    public void add_Filtering(SqlDataSourceFilteringEventHandler value);
    public void remove_Filtering(SqlDataSourceFilteringEventHandler value);
    public void add_Inserted(SqlDataSourceStatusEventHandler value);
    public void remove_Inserted(SqlDataSourceStatusEventHandler value);
    public void add_Inserting(SqlDataSourceCommandEventHandler value);
    public void remove_Inserting(SqlDataSourceCommandEventHandler value);
    public void add_Selected(SqlDataSourceStatusEventHandler value);
    public void remove_Selected(SqlDataSourceStatusEventHandler value);
    public void add_Selecting(SqlDataSourceSelectingEventHandler value);
    public void remove_Selecting(SqlDataSourceSelectingEventHandler value);
    public void add_Updated(SqlDataSourceStatusEventHandler value);
    public void remove_Updated(SqlDataSourceStatusEventHandler value);
    public void add_Updating(SqlDataSourceCommandEventHandler value);
    public void remove_Updating(SqlDataSourceCommandEventHandler value);
    internal string CreateCacheKey(int startRowIndex, int maximumRows);
    internal DbConnection CreateConnection(string connectionString);
    internal DbCommand CreateCommand(string commandText, DbConnection connection);
    internal DbDataAdapter CreateDataAdapter(DbCommand command);
    protected virtual SqlDataSourceView CreateDataSourceView(string viewName);
    internal string CreateMasterCacheKey();
    internal DbParameter CreateParameter(string parameterName, object parameterValue);
    public int Delete();
    protected virtual DbProviderFactory GetDbProviderFactory();
    protected virtual DataSourceView GetView(string viewName);
    protected virtual ICollection GetViewNames();
    public int Insert();
    internal void InvalidateCacheEntry();
    internal object LoadDataFromCache(int startRowIndex, int maximumRows);
    internal int LoadTotalRowCountFromCache();
    protected virtual void LoadViewState(object savedState);
    protected internal virtual void OnInit(EventArgs e);
    internal virtual void SaveDataToCache(int startRowIndex, int maximumRows, object data, CacheDependency dependency);
    protected virtual object SaveViewState();
    public IEnumerable Select(DataSourceSelectArguments arguments);
    protected virtual void TrackViewState();
    public int Update();
}
public class System.Web.UI.WebControls.SqlDataSourceCommandEventArgs : CancelEventArgs {
    public DbCommand Command { get; }
    public SqlDataSourceCommandEventArgs(DbCommand command);
    public DbCommand get_Command();
}
public class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler : MulticastDelegate {
    public SqlDataSourceCommandEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlDataSourceCommandEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlDataSourceCommandEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Web.UI.WebControls.SqlDataSourceCommandType : Enum {
    public int value__;
    public static SqlDataSourceCommandType Text;
    public static SqlDataSourceCommandType StoredProcedure;
}
public class System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs : CancelEventArgs {
    public IOrderedDictionary ParameterValues { get; }
    public SqlDataSourceFilteringEventArgs(IOrderedDictionary parameterValues);
    public IOrderedDictionary get_ParameterValues();
}
public class System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler : MulticastDelegate {
    public SqlDataSourceFilteringEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlDataSourceFilteringEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlDataSourceFilteringEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Web.UI.WebControls.SqlDataSourceMode : Enum {
    public int value__;
    public static SqlDataSourceMode DataReader;
    public static SqlDataSourceMode DataSet;
}
public class System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs : SqlDataSourceCommandEventArgs {
    public DataSourceSelectArguments Arguments { get; }
    public SqlDataSourceSelectingEventArgs(DbCommand command, DataSourceSelectArguments arguments);
    public DataSourceSelectArguments get_Arguments();
}
public class System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler : MulticastDelegate {
    public SqlDataSourceSelectingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlDataSourceSelectingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlDataSourceSelectingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.SqlDataSourceStatusEventArgs : EventArgs {
    public int AffectedRows { get; }
    public DbCommand Command { get; }
    public Exception Exception { get; }
    public bool ExceptionHandled { get; public set; }
    public SqlDataSourceStatusEventArgs(DbCommand command, int affectedRows, Exception exception);
    public int get_AffectedRows();
    public DbCommand get_Command();
    public Exception get_Exception();
    public bool get_ExceptionHandled();
    public void set_ExceptionHandled(bool value);
}
public class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler : MulticastDelegate {
    public SqlDataSourceStatusEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlDataSourceStatusEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlDataSourceStatusEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.SqlDataSourceView : DataSourceView {
    public bool CancelSelectOnNullParameter { get; public set; }
    public bool CanDelete { get; }
    public bool CanInsert { get; }
    public bool CanPage { get; }
    public bool CanRetrieveTotalRowCount { get; }
    public bool CanSort { get; }
    public bool CanUpdate { get; }
    public ConflictOptions ConflictDetection { get; public set; }
    public string DeleteCommand { get; public set; }
    public SqlDataSourceCommandType DeleteCommandType { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("SqlDataSource_DeleteParameters")]
public ParameterCollection DeleteParameters { get; }
    public string FilterExpression { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("SqlDataSource_FilterParameters")]
public ParameterCollection FilterParameters { get; }
    public string InsertCommand { get; public set; }
    public SqlDataSourceCommandType InsertCommandType { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("SqlDataSource_InsertParameters")]
public ParameterCollection InsertParameters { get; }
    protected bool IsTrackingViewState { get; }
    [DefaultValueAttribute("{0}")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataSource_OldValuesParameterFormatString")]
public string OldValuesParameterFormatString { get; public set; }
    protected string ParameterPrefix { get; }
    public string SelectCommand { get; public set; }
    public SqlDataSourceCommandType SelectCommandType { get; public set; }
    public ParameterCollection SelectParameters { get; }
    public string SortParameterName { get; public set; }
    public string UpdateCommand { get; public set; }
    public SqlDataSourceCommandType UpdateCommandType { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("SqlDataSource_UpdateParameters")]
public ParameterCollection UpdateParameters { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public SqlDataSourceView(SqlDataSource owner, string name, HttpContext context);
    private static SqlDataSourceView();
    public bool get_CancelSelectOnNullParameter();
    public void set_CancelSelectOnNullParameter(bool value);
    public virtual bool get_CanDelete();
    public virtual bool get_CanInsert();
    public virtual bool get_CanPage();
    public virtual bool get_CanRetrieveTotalRowCount();
    public virtual bool get_CanSort();
    public virtual bool get_CanUpdate();
    public ConflictOptions get_ConflictDetection();
    public void set_ConflictDetection(ConflictOptions value);
    public string get_DeleteCommand();
    public void set_DeleteCommand(string value);
    public SqlDataSourceCommandType get_DeleteCommandType();
    public void set_DeleteCommandType(SqlDataSourceCommandType value);
    public ParameterCollection get_DeleteParameters();
    public string get_FilterExpression();
    public void set_FilterExpression(string value);
    public ParameterCollection get_FilterParameters();
    public string get_InsertCommand();
    public void set_InsertCommand(string value);
    public SqlDataSourceCommandType get_InsertCommandType();
    public void set_InsertCommandType(SqlDataSourceCommandType value);
    public ParameterCollection get_InsertParameters();
    protected bool get_IsTrackingViewState();
    public string get_OldValuesParameterFormatString();
    public void set_OldValuesParameterFormatString(string value);
    protected virtual string get_ParameterPrefix();
    public string get_SelectCommand();
    public void set_SelectCommand(string value);
    public SqlDataSourceCommandType get_SelectCommandType();
    public void set_SelectCommandType(SqlDataSourceCommandType value);
    public ParameterCollection get_SelectParameters();
    public string get_SortParameterName();
    public void set_SortParameterName(string value);
    public string get_UpdateCommand();
    public void set_UpdateCommand(string value);
    public SqlDataSourceCommandType get_UpdateCommandType();
    public void set_UpdateCommandType(SqlDataSourceCommandType value);
    public ParameterCollection get_UpdateParameters();
    public void add_Deleted(SqlDataSourceStatusEventHandler value);
    public void remove_Deleted(SqlDataSourceStatusEventHandler value);
    public void add_Deleting(SqlDataSourceCommandEventHandler value);
    public void remove_Deleting(SqlDataSourceCommandEventHandler value);
    public void add_Filtering(SqlDataSourceFilteringEventHandler value);
    public void remove_Filtering(SqlDataSourceFilteringEventHandler value);
    public void add_Inserted(SqlDataSourceStatusEventHandler value);
    public void remove_Inserted(SqlDataSourceStatusEventHandler value);
    public void add_Inserting(SqlDataSourceCommandEventHandler value);
    public void remove_Inserting(SqlDataSourceCommandEventHandler value);
    public void add_Selected(SqlDataSourceStatusEventHandler value);
    public void remove_Selected(SqlDataSourceStatusEventHandler value);
    public void add_Selecting(SqlDataSourceSelectingEventHandler value);
    public void remove_Selecting(SqlDataSourceSelectingEventHandler value);
    public void add_Updated(SqlDataSourceStatusEventHandler value);
    public void remove_Updated(SqlDataSourceStatusEventHandler value);
    public void add_Updating(SqlDataSourceCommandEventHandler value);
    public void remove_Updating(SqlDataSourceCommandEventHandler value);
    public int Delete(IDictionary keys, IDictionary oldValues);
    protected virtual int ExecuteDelete(IDictionary keys, IDictionary oldValues);
    protected virtual int ExecuteInsert(IDictionary values);
    protected internal virtual IEnumerable ExecuteSelect(DataSourceSelectArguments arguments);
    protected virtual int ExecuteUpdate(IDictionary keys, IDictionary values, IDictionary oldValues);
    public int Insert(IDictionary values);
    protected virtual void LoadViewState(object savedState);
    protected virtual void OnDeleted(SqlDataSourceStatusEventArgs e);
    protected virtual void OnDeleting(SqlDataSourceCommandEventArgs e);
    protected virtual void OnFiltering(SqlDataSourceFilteringEventArgs e);
    protected virtual void OnInserted(SqlDataSourceStatusEventArgs e);
    protected virtual void OnInserting(SqlDataSourceCommandEventArgs e);
    protected virtual void OnSelected(SqlDataSourceStatusEventArgs e);
    protected virtual void OnSelecting(SqlDataSourceSelectingEventArgs e);
    protected virtual void OnUpdated(SqlDataSourceStatusEventArgs e);
    protected virtual void OnUpdating(SqlDataSourceCommandEventArgs e);
    protected internal virtual void RaiseUnsupportedCapabilityError(DataSourceCapabilities capability);
    protected virtual object SaveViewState();
    public IEnumerable Select(DataSourceSelectArguments arguments);
    protected virtual void TrackViewState();
    public int Update(IDictionary keys, IDictionary values, IDictionary oldValues);
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object savedState);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
public class System.Web.UI.WebControls.StringArrayConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[ToolboxItemAttribute("False")]
[TypeConverterAttribute("System.Web.UI.WebControls.EmptyStringExpandableObjectConverter")]
public class System.Web.UI.WebControls.Style : Component {
    internal static int UNUSED;
    internal static int PROP_CSSCLASS;
    internal static int PROP_FORECOLOR;
    internal static int PROP_BACKCOLOR;
    internal static int PROP_BORDERCOLOR;
    internal static int PROP_BORDERWIDTH;
    internal static int PROP_BORDERSTYLE;
    internal static int PROP_HEIGHT;
    internal static int PROP_WIDTH;
    internal static int PROP_FONT_NAMES;
    internal static int PROP_FONT_SIZE;
    internal static int PROP_FONT_BOLD;
    internal static int PROP_FONT_ITALIC;
    internal static int PROP_FONT_UNDERLINE;
    internal static int PROP_FONT_OVERLINE;
    internal static int PROP_FONT_STRIKEOUT;
    internal static string SetBitsKey;
    internal static String[] borderStyles;
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[WebSysDescriptionAttribute("Style_BackColor")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Web.UI.WebControls.WebColorConverter")]
public Color BackColor { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[WebSysDescriptionAttribute("Style_BorderColor")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Web.UI.WebControls.WebColorConverter")]
public Color BorderColor { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[WebSysDescriptionAttribute("Style_BorderWidth")]
[NotifyParentPropertyAttribute("True")]
public Unit BorderWidth { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Style_BorderStyle")]
[NotifyParentPropertyAttribute("True")]
public BorderStyle BorderStyle { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("Style_CSSClass")]
[NotifyParentPropertyAttribute("True")]
[CssClassPropertyAttribute]
public string CssClass { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Style_Font")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
public FontInfo Font { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[WebSysDescriptionAttribute("Style_ForeColor")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Web.UI.WebControls.WebColorConverter")]
public Color ForeColor { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[WebSysDescriptionAttribute("Style_Height")]
[NotifyParentPropertyAttribute("True")]
public Unit Height { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsEmpty { get; }
    protected bool IsTrackingViewState { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("2")]
public string RegisteredCssClass { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected internal StateBag ViewState { get; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[WebSysDescriptionAttribute("Style_Width")]
[NotifyParentPropertyAttribute("True")]
public Unit Width { get; public set; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public Style(StateBag bag);
    private static Style();
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public Unit get_BorderWidth();
    public void set_BorderWidth(Unit value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public string get_CssClass();
    public void set_CssClass(string value);
    public FontInfo get_Font();
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public Unit get_Height();
    public void set_Height(Unit value);
    public virtual bool get_IsEmpty();
    protected bool get_IsTrackingViewState();
    public string get_RegisteredCssClass();
    protected internal StateBag get_ViewState();
    public Unit get_Width();
    public void set_Width(Unit value);
    public void AddAttributesToRender(HtmlTextWriter writer);
    public virtual void AddAttributesToRender(HtmlTextWriter writer, WebControl owner);
    internal void ClearBit(int bit);
    public virtual void CopyFrom(Style s);
    protected virtual void FillStyleAttributes(CssStyleCollection attributes, IUrlResolutionService urlResolver);
    public CssStyleCollection GetStyleAttributes(IUrlResolutionService urlResolver);
    internal bool IsSet(int propKey);
    protected internal void LoadViewState(object state);
    protected internal virtual void TrackViewState();
    public virtual void MergeWith(Style s);
    public virtual void Reset();
    protected internal virtual object SaveViewState();
    protected internal virtual void SetBit(int bit);
    public void SetDirty();
    internal void SetRegisteredCssClass(string cssClass);
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object state);
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
}
internal class System.Web.UI.WebControls.StyleBlock : Control {
    public StyleBlockStyles AddStyleDefinition(string selector);
    public StyleBlockStyles AddStyleDefinition(string selectorFormat, Object[] args);
    protected internal virtual void Render(HtmlTextWriter writer);
}
internal class System.Web.UI.WebControls.StyleBlockStyles : object {
    public bool Empty { get; }
    public StyleBlockStyles(string selector, StyleBlock styleControl);
    public bool get_Empty();
    public StyleBlockStyles AddStyle(HtmlTextWriterStyle styleName, string value);
    public StyleBlockStyles AddStyle(string styleName, string value);
    public StyleBlockStyles AddStyles(Style style);
    public StyleBlockStyles AddStyles(CssStyleCollection styles);
    public void Render(HtmlTextWriter writer);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.StyleCollection : StateManagedCollection {
    public Style Item { get; public set; }
    private static StyleCollection();
    public Style get_Item(int i);
    public void set_Item(int i, Style value);
    public int Add(Style style);
    public bool Contains(Style style);
    public void CopyTo(Style[] styleArray, int index);
    public int IndexOf(Style style);
    public void Insert(int index, Style style);
    protected virtual object CreateKnownType(int index);
    protected virtual Type[] GetKnownTypes();
    public void Remove(Style style);
    public void RemoveAt(int index);
    protected virtual void SetDirtyObject(object o);
}
public class System.Web.UI.WebControls.SubMenuStyle : Style {
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[WebCategoryAttribute("Layout")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("SubMenuStyle_HorizontalPadding")]
public Unit HorizontalPadding { get; public set; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[WebCategoryAttribute("Layout")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("SubMenuStyle_VerticalPadding")]
public Unit VerticalPadding { get; public set; }
    public SubMenuStyle(StateBag bag);
    public Unit get_HorizontalPadding();
    public void set_HorizontalPadding(Unit value);
    public Unit get_VerticalPadding();
    public void set_VerticalPadding(Unit value);
    public virtual void CopyFrom(Style s);
    protected virtual void FillStyleAttributes(CssStyleCollection attributes, IUrlResolutionService urlResolver);
    public virtual void MergeWith(Style s);
    public virtual void Reset();
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.SubMenuStyleCollection : StateManagedCollection {
    public SubMenuStyle Item { get; public set; }
    private static SubMenuStyleCollection();
    protected virtual void OnInsert(int index, object value);
    public SubMenuStyle get_Item(int i);
    public void set_Item(int i, SubMenuStyle value);
    public int Add(SubMenuStyle style);
    public bool Contains(SubMenuStyle style);
    public void CopyTo(SubMenuStyle[] styleArray, int index);
    public int IndexOf(SubMenuStyle style);
    public void Insert(int index, SubMenuStyle style);
    protected virtual object CreateKnownType(int index);
    protected virtual Type[] GetKnownTypes();
    public void Remove(SubMenuStyle style);
    public void RemoveAt(int index);
    protected virtual void SetDirtyObject(object o);
}
[DefaultPropertyAttribute("MethodName")]
[DesignerAttribute("System.Web.UI.Design.WebControls.SubstitutionDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
public class System.Web.UI.WebControls.Substitution : Control {
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Substitution_MethodNameDescr")]
public string MethodName { get; public set; }
    public virtual string get_MethodName();
    public virtual void set_MethodName(string value);
    protected virtual ControlCollection CreateControlCollection();
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void Render(HtmlTextWriter writer);
    internal void RenderMarkup(HtmlTextWriter writer);
}
[DefaultPropertyAttribute("Rows")]
[ParseChildrenAttribute("True", "Rows")]
[DesignerAttribute("System.Web.UI.Design.WebControls.TableDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SupportsEventValidationAttribute]
public class System.Web.UI.WebControls.Table : WebControl {
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("Table_BackImageUrl")]
public string BackImageUrl { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("Table_Caption")]
public string Caption { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("WebControl_CaptionAlign")]
public TableCaptionAlign CaptionAlign { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("-1")]
[WebSysDescriptionAttribute("Table_CellPadding")]
public int CellPadding { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("-1")]
[WebSysDescriptionAttribute("Table_CellSpacing")]
public int CellSpacing { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Table_GridLines")]
public GridLines GridLines { get; public set; }
    internal bool HasRowSections { get; internal set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Table_HorizontalAlign")]
public HorizontalAlign HorizontalAlign { get; public set; }
    public bool SupportsDisabledAttribute { get; }
    [MergablePropertyAttribute("False")]
[WebSysDescriptionAttribute("Table_Rows")]
[PersistenceModeAttribute("2")]
public TableRowCollection Rows { get; }
    public virtual string get_BackImageUrl();
    public virtual void set_BackImageUrl(string value);
    public virtual string get_Caption();
    public virtual void set_Caption(string value);
    public virtual TableCaptionAlign get_CaptionAlign();
    public virtual void set_CaptionAlign(TableCaptionAlign value);
    public virtual int get_CellPadding();
    public virtual void set_CellPadding(int value);
    public virtual int get_CellSpacing();
    public virtual void set_CellSpacing(int value);
    public virtual GridLines get_GridLines();
    public virtual void set_GridLines(GridLines value);
    internal bool get_HasRowSections();
    internal void set_HasRowSections(bool value);
    public virtual HorizontalAlign get_HorizontalAlign();
    public virtual void set_HorizontalAlign(HorizontalAlign value);
    public virtual bool get_SupportsDisabledAttribute();
    public virtual TableRowCollection get_Rows();
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual ControlCollection CreateControlCollection();
    protected virtual Style CreateControlStyle();
    protected virtual void RaisePostBackEvent(string argument);
    public virtual void RenderBeginTag(HtmlTextWriter writer);
    protected internal virtual void RenderContents(HtmlTextWriter writer);
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
}
public enum System.Web.UI.WebControls.TableCaptionAlign : Enum {
    public int value__;
    public static TableCaptionAlign NotSet;
    public static TableCaptionAlign Top;
    public static TableCaptionAlign Bottom;
    public static TableCaptionAlign Left;
    public static TableCaptionAlign Right;
}
[BindableAttribute("False")]
[ControlBuilderAttribute("System.Web.UI.WebControls.TableCellControlBuilder")]
[DefaultPropertyAttribute("Text")]
[ParseChildrenAttribute("False")]
[ToolboxItemAttribute("False")]
[DesignerAttribute("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.UI.WebControls.TableCell : WebControl {
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.WebControls.StringArrayConverter")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("TableCell_AssociatedHeaderCellID")]
public String[] AssociatedHeaderCellID { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("0")]
[WebSysDescriptionAttribute("TableCell_ColumnSpan")]
public int ColumnSpan { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("TableItem_HorizontalAlign")]
public HorizontalAlign HorizontalAlign { get; public set; }
    public bool SupportsDisabledAttribute { get; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("0")]
[WebSysDescriptionAttribute("TableCell_RowSpan")]
public int RowSpan { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("2")]
[WebSysDescriptionAttribute("TableCell_Text")]
public string Text { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("TableItem_VerticalAlign")]
public VerticalAlign VerticalAlign { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("TableCell_Wrap")]
public bool Wrap { get; public set; }
    internal TableCell(HtmlTextWriterTag tagKey);
    public virtual String[] get_AssociatedHeaderCellID();
    public virtual void set_AssociatedHeaderCellID(String[] value);
    public virtual int get_ColumnSpan();
    public virtual void set_ColumnSpan(int value);
    public virtual HorizontalAlign get_HorizontalAlign();
    public virtual void set_HorizontalAlign(HorizontalAlign value);
    public virtual bool get_SupportsDisabledAttribute();
    public virtual int get_RowSpan();
    public virtual void set_RowSpan(int value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual VerticalAlign get_VerticalAlign();
    public virtual void set_VerticalAlign(VerticalAlign value);
    public virtual bool get_Wrap();
    public virtual void set_Wrap(bool value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual void AddParsedSubObject(object obj);
    protected virtual Style CreateControlStyle();
    protected internal virtual void RenderContents(HtmlTextWriter writer);
}
[DefaultMemberAttribute("Item")]
[EditorAttribute("System.Web.UI.Design.WebControls.TableCellsCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public class System.Web.UI.WebControls.TableCellCollection : object {
    public int Count { get; }
    public TableCell Item { get; }
    public object SyncRoot { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    internal TableCellCollection(TableRow owner);
    public sealed virtual int get_Count();
    public TableCell get_Item(int index);
    public int Add(TableCell cell);
    public void AddAt(int index, TableCell cell);
    public void AddRange(TableCell[] cells);
    public sealed virtual void Clear();
    public int GetCellIndex(TableCell cell);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public void Remove(TableCell cell);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override int System.Collections.IList.Add(object o);
    private sealed virtual override bool System.Collections.IList.Contains(object o);
    private sealed virtual override int System.Collections.IList.IndexOf(object o);
    private sealed virtual override void System.Collections.IList.Insert(int index, object o);
    private sealed virtual override void System.Collections.IList.Remove(object o);
}
public class System.Web.UI.WebControls.TableCellControlBuilder : ControlBuilder {
    public virtual bool AllowWhitespaceLiterals();
}
public class System.Web.UI.WebControls.TableFooterRow : TableRow {
}
public class System.Web.UI.WebControls.TableHeaderCell : TableCell {
    [WebCategoryAttribute("Accessibility")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("TableHeaderCell_AbbreviatedText")]
public string AbbreviatedText { get; public set; }
    [WebCategoryAttribute("Accessibility")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("TableHeaderCell_Scope")]
public TableHeaderScope Scope { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.WebControls.StringArrayConverter")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("TableHeaderCell_CategoryText")]
public String[] CategoryText { get; public set; }
    public virtual string get_AbbreviatedText();
    public virtual void set_AbbreviatedText(string value);
    public virtual TableHeaderScope get_Scope();
    public virtual void set_Scope(TableHeaderScope value);
    public virtual String[] get_CategoryText();
    public virtual void set_CategoryText(String[] value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
}
public class System.Web.UI.WebControls.TableHeaderRow : TableRow {
}
public enum System.Web.UI.WebControls.TableHeaderScope : Enum {
    public int value__;
    public static TableHeaderScope NotSet;
    public static TableHeaderScope Row;
    public static TableHeaderScope Column;
}
public class System.Web.UI.WebControls.TableItemStyle : Style {
    internal static int PROP_HORZALIGN;
    internal static int PROP_VERTALIGN;
    internal static int PROP_WRAP;
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("TableItem_HorizontalAlign")]
[NotifyParentPropertyAttribute("True")]
public HorizontalAlign HorizontalAlign { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("TableItem_VerticalAlign")]
[NotifyParentPropertyAttribute("True")]
public VerticalAlign VerticalAlign { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("TableItemStyle_Wrap")]
[NotifyParentPropertyAttribute("True")]
public bool Wrap { get; public set; }
    public TableItemStyle(StateBag bag);
    public virtual HorizontalAlign get_HorizontalAlign();
    public virtual void set_HorizontalAlign(HorizontalAlign value);
    public virtual VerticalAlign get_VerticalAlign();
    public virtual void set_VerticalAlign(VerticalAlign value);
    public virtual bool get_Wrap();
    public virtual void set_Wrap(bool value);
    public virtual void AddAttributesToRender(HtmlTextWriter writer, WebControl owner);
    public virtual void CopyFrom(Style s);
    public virtual void MergeWith(Style s);
    public virtual void Reset();
}
[BindableAttribute("False")]
[DefaultPropertyAttribute("Cells")]
[ParseChildrenAttribute("True", "Cells")]
[ToolboxItemAttribute("False")]
[DesignerAttribute("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.UI.WebControls.TableRow : WebControl {
    [MergablePropertyAttribute("False")]
[WebSysDescriptionAttribute("TableRow_Cells")]
[PersistenceModeAttribute("2")]
public TableCellCollection Cells { get; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("TableItem_HorizontalAlign")]
public HorizontalAlign HorizontalAlign { get; public set; }
    public bool SupportsDisabledAttribute { get; }
    [WebCategoryAttribute("Accessibility")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("TableRow_TableSection")]
public TableRowSection TableSection { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("TableItem_VerticalAlign")]
public VerticalAlign VerticalAlign { get; public set; }
    public virtual TableCellCollection get_Cells();
    public virtual HorizontalAlign get_HorizontalAlign();
    public virtual void set_HorizontalAlign(HorizontalAlign value);
    public virtual bool get_SupportsDisabledAttribute();
    public virtual TableRowSection get_TableSection();
    public virtual void set_TableSection(TableRowSection value);
    public virtual VerticalAlign get_VerticalAlign();
    public virtual void set_VerticalAlign(VerticalAlign value);
    protected virtual Style CreateControlStyle();
    protected virtual ControlCollection CreateControlCollection();
}
[DefaultMemberAttribute("Item")]
[EditorAttribute("System.Web.UI.Design.WebControls.TableRowsCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public class System.Web.UI.WebControls.TableRowCollection : object {
    public int Count { get; }
    public TableRow Item { get; }
    public object SyncRoot { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    internal TableRowCollection(Table owner);
    public sealed virtual int get_Count();
    public TableRow get_Item(int index);
    public int Add(TableRow row);
    public void AddAt(int index, TableRow row);
    public void AddRange(TableRow[] rows);
    public sealed virtual void Clear();
    public int GetRowIndex(TableRow row);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public void Remove(TableRow row);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override int System.Collections.IList.Add(object o);
    private sealed virtual override bool System.Collections.IList.Contains(object o);
    private sealed virtual override int System.Collections.IList.IndexOf(object o);
    private sealed virtual override void System.Collections.IList.Insert(int index, object o);
    private sealed virtual override void System.Collections.IList.Remove(object o);
}
public enum System.Web.UI.WebControls.TableRowSection : Enum {
    public int value__;
    public static TableRowSection TableHeader;
    public static TableRowSection TableBody;
    public static TableRowSection TableFooter;
}
public class System.Web.UI.WebControls.TableSectionStyle : Style {
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("TableSectionStyle_Visible")]
[NotifyParentPropertyAttribute("True")]
public bool Visible { get; public set; }
    public bool get_Visible();
    public void set_Visible(bool value);
}
public class System.Web.UI.WebControls.TableStyle : Style {
    internal static int PROP_BACKIMAGEURL;
    internal static int PROP_CELLPADDING;
    internal static int PROP_CELLSPACING;
    internal static int PROP_GRIDLINES;
    internal static int PROP_HORZALIGN;
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("TableStyle_BackImageUrl")]
[NotifyParentPropertyAttribute("True")]
public string BackImageUrl { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("-1")]
[WebSysDescriptionAttribute("TableStyle_CellPadding")]
[NotifyParentPropertyAttribute("True")]
public int CellPadding { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("-1")]
[WebSysDescriptionAttribute("TableStyle_CellSpacing")]
[NotifyParentPropertyAttribute("True")]
public int CellSpacing { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("TableStyle_GridLines")]
[NotifyParentPropertyAttribute("True")]
public GridLines GridLines { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("TableStyle_HorizontalAlign")]
[NotifyParentPropertyAttribute("True")]
public HorizontalAlign HorizontalAlign { get; public set; }
    public TableStyle(StateBag bag);
    public virtual string get_BackImageUrl();
    public virtual void set_BackImageUrl(string value);
    public virtual int get_CellPadding();
    public virtual void set_CellPadding(int value);
    public virtual int get_CellSpacing();
    public virtual void set_CellSpacing(int value);
    public virtual GridLines get_GridLines();
    public virtual void set_GridLines(GridLines value);
    public virtual HorizontalAlign get_HorizontalAlign();
    public virtual void set_HorizontalAlign(HorizontalAlign value);
    public virtual void AddAttributesToRender(HtmlTextWriter writer, WebControl owner);
    public virtual void CopyFrom(Style s);
    protected virtual void FillStyleAttributes(CssStyleCollection attributes, IUrlResolutionService urlResolver);
    public virtual void MergeWith(Style s);
    public virtual void Reset();
}
public class System.Web.UI.WebControls.TargetConverter : StringConverter {
    private static TargetConverter();
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.Web.UI.WebControls.TemplateColumn : DataGridColumn {
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("TemplateColumn_EditItemTemplate")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.DataGridItem")]
public ITemplate EditItemTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("TemplateColumn_FooterTemplate")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.DataGridItem")]
public ITemplate FooterTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("TemplateColumn_HeaderTemplate")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.DataGridItem")]
public ITemplate HeaderTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("TemplateColumn_ItemTemplate")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.DataGridItem")]
public ITemplate ItemTemplate { get; public set; }
    public virtual ITemplate get_EditItemTemplate();
    public virtual void set_EditItemTemplate(ITemplate value);
    public virtual ITemplate get_FooterTemplate();
    public virtual void set_FooterTemplate(ITemplate value);
    public virtual ITemplate get_HeaderTemplate();
    public virtual void set_HeaderTemplate(ITemplate value);
    public virtual ITemplate get_ItemTemplate();
    public virtual void set_ItemTemplate(ITemplate value);
    public virtual void InitializeCell(TableCell cell, int columnIndex, ListItemType itemType);
}
[BindableAttribute("False")]
[ControlBuilderAttribute("System.Web.UI.WebControls.WizardStepControlBuilder")]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
[ToolboxItemAttribute("False")]
[ThemeableAttribute("True")]
public class System.Web.UI.WebControls.TemplatedWizardStep : WizardStepBase {
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.Wizard")]
[WebSysDescriptionAttribute("TemplatedWizardStep_ContentTemplate")]
public ITemplate ContentTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Control ContentTemplateContainer { get; internal set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.Wizard")]
[WebSysDescriptionAttribute("TemplatedWizardStep_CustomNavigationTemplate")]
public ITemplate CustomNavigationTemplate { get; public set; }
    [BrowsableAttribute("False")]
[BindableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Control CustomNavigationTemplateContainer { get; internal set; }
    [BrowsableAttribute("True")]
public string SkinID { get; public set; }
    public virtual ITemplate get_ContentTemplate();
    public virtual void set_ContentTemplate(ITemplate value);
    public Control get_ContentTemplateContainer();
    internal void set_ContentTemplateContainer(Control value);
    public virtual ITemplate get_CustomNavigationTemplate();
    public virtual void set_CustomNavigationTemplate(ITemplate value);
    public Control get_CustomNavigationTemplateContainer();
    internal void set_CustomNavigationTemplateContainer(Control value);
    public virtual string get_SkinID();
    public virtual void set_SkinID(string value);
}
public class System.Web.UI.WebControls.TemplateField : DataControlField {
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("TemplateField_AlternatingItemTemplate")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.IDataItemContainer", "1")]
public ITemplate AlternatingItemTemplate { get; public set; }
    [WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Control_ValidateRequestMode")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ValidateRequestMode ValidateRequestMode { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("ImageField_ConvertEmptyStringToNull")]
public bool ConvertEmptyStringToNull { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("TemplateField_EditItemTemplate")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.IDataItemContainer", "1")]
public ITemplate EditItemTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("TemplateField_FooterTemplate")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.IDataItemContainer")]
public ITemplate FooterTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("TemplateField_HeaderTemplate")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.IDataItemContainer")]
public ITemplate HeaderTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("TemplateField_InsertItemTemplate")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.IDataItemContainer", "1")]
public ITemplate InsertItemTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("TemplateField_ItemTemplate")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.IDataItemContainer", "1")]
public ITemplate ItemTemplate { get; public set; }
    public virtual ITemplate get_AlternatingItemTemplate();
    public virtual void set_AlternatingItemTemplate(ITemplate value);
    public ValidateRequestMode get_ValidateRequestMode();
    public void set_ValidateRequestMode(ValidateRequestMode value);
    public virtual bool get_ConvertEmptyStringToNull();
    public virtual void set_ConvertEmptyStringToNull(bool value);
    public virtual ITemplate get_EditItemTemplate();
    public virtual void set_EditItemTemplate(ITemplate value);
    public virtual ITemplate get_FooterTemplate();
    public virtual void set_FooterTemplate(ITemplate value);
    public virtual ITemplate get_HeaderTemplate();
    public virtual void set_HeaderTemplate(ITemplate value);
    public virtual ITemplate get_InsertItemTemplate();
    public virtual void set_InsertItemTemplate(ITemplate value);
    public virtual ITemplate get_ItemTemplate();
    public virtual void set_ItemTemplate(ITemplate value);
    protected virtual void CopyProperties(DataControlField newField);
    protected virtual DataControlField CreateField();
    public virtual void ExtractValuesFromCell(IOrderedDictionary dictionary, DataControlFieldCell cell, DataControlRowState rowState, bool includeReadOnly);
    public virtual void InitializeCell(DataControlFieldCell cell, DataControlCellType cellType, DataControlRowState rowState, int rowIndex);
    public virtual void ValidateSupportsCallback();
}
public enum System.Web.UI.WebControls.TextAlign : Enum {
    public int value__;
    public static TextAlign Left;
    public static TextAlign Right;
}
[ControlBuilderAttribute("System.Web.UI.WebControls.TextBoxControlBuilder")]
[ControlValuePropertyAttribute("Text")]
[DataBindingHandlerAttribute("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultPropertyAttribute("Text")]
[ValidationPropertyAttribute("Text")]
[DefaultEventAttribute("TextChanged")]
[DesignerAttribute("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ParseChildrenAttribute("True", "Text")]
[SupportsEventValidationAttribute]
public class System.Web.UI.WebControls.TextBox : WebControl {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("TextBox_AutoCompleteType")]
public AutoCompleteType AutoCompleteType { get; public set; }
    [DefaultValueAttribute("False")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("TextBox_AutoPostBack")]
public bool AutoPostBack { get; public set; }
    [DefaultValueAttribute("False")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("AutoPostBackControl_CausesValidation")]
public bool CausesValidation { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("0")]
[WebSysDescriptionAttribute("TextBox_Columns")]
public int Columns { get; public set; }
    [DefaultValueAttribute("0")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("TextBox_MaxLength")]
public int MaxLength { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("TextBox_TextMode")]
public TextBoxMode TextMode { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("False")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("TextBox_ReadOnly")]
public bool ReadOnly { get; public set; }
    [DefaultValueAttribute("0")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("TextBox_Rows")]
public int Rows { get; public set; }
    protected HtmlTextWriterTag TagKey { get; }
    [LocalizableAttribute("True")]
[BindableAttribute("True", "1")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("TextBox_Text")]
[PersistenceModeAttribute("3")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public string Text { get; public set; }
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("PostBackControl_ValidationGroup")]
public string ValidationGroup { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("TextBox_Wrap")]
public bool Wrap { get; public set; }
    internal bool SupportsVCard { get; }
    private static TextBox();
    public virtual AutoCompleteType get_AutoCompleteType();
    public virtual void set_AutoCompleteType(AutoCompleteType value);
    public virtual bool get_AutoPostBack();
    public virtual void set_AutoPostBack(bool value);
    public virtual bool get_CausesValidation();
    public virtual void set_CausesValidation(bool value);
    public virtual int get_Columns();
    public virtual void set_Columns(int value);
    public virtual int get_MaxLength();
    public virtual void set_MaxLength(int value);
    public virtual TextBoxMode get_TextMode();
    public virtual void set_TextMode(TextBoxMode value);
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    public virtual int get_Rows();
    public virtual void set_Rows(int value);
    protected virtual HtmlTextWriterTag get_TagKey();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual string get_ValidationGroup();
    public virtual void set_ValidationGroup(string value);
    public virtual bool get_Wrap();
    public virtual void set_Wrap(bool value);
    internal virtual bool get_SupportsVCard();
    public sealed virtual void add_TextChanged(EventHandler value);
    public sealed virtual void remove_TextChanged(EventHandler value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual void AddParsedSubObject(object obj);
    internal static string GetTypeAttributeValue(TextBoxMode mode);
    internal static string GetVCardAttributeValue(AutoCompleteType type);
    protected internal virtual void OnPreRender(EventArgs e);
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual void OnTextChanged(EventArgs e);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    protected virtual void RaisePostDataChangedEvent();
    protected internal virtual void Render(HtmlTextWriter writer);
    protected virtual object SaveViewState();
}
public class System.Web.UI.WebControls.TextBoxControlBuilder : ControlBuilder {
    public virtual bool AllowWhitespaceLiterals();
    public virtual bool HtmlDecodeLiterals();
}
public enum System.Web.UI.WebControls.TextBoxMode : Enum {
    public int value__;
    public static TextBoxMode SingleLine;
    public static TextBoxMode MultiLine;
    public static TextBoxMode Password;
    public static TextBoxMode Color;
    public static TextBoxMode Date;
    public static TextBoxMode DateTime;
    public static TextBoxMode DateTimeLocal;
    public static TextBoxMode Email;
    public static TextBoxMode Month;
    public static TextBoxMode Number;
    public static TextBoxMode Range;
    public static TextBoxMode Search;
    public static TextBoxMode Phone;
    public static TextBoxMode Time;
    public static TextBoxMode Url;
    public static TextBoxMode Week;
}
public enum System.Web.UI.WebControls.TitleFormat : Enum {
    public int value__;
    public static TitleFormat Month;
    public static TitleFormat MonthYear;
}
[ParseChildrenAttribute("True", "ChildNodes")]
public class System.Web.UI.WebControls.TreeNode : object {
    [DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("TreeNode_Checked")]
public bool Checked { get; public set; }
    internal bool CheckedSet { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool DataBound { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("2")]
public TreeNodeCollection ChildNodes { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string DataPath { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int Depth { get; }
    [DefaultValueAttribute("System.Nullable`1<System.Boolean>", "")]
[WebSysDescriptionAttribute("TreeNode_Expanded")]
public Nullable`1<bool> Expanded { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public object DataItem { get; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebSysDescriptionAttribute("TreeNode_ImageToolTip")]
public string ImageToolTip { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("TreeNode_ImageUrl")]
public string ImageUrl { get; public set; }
    internal int Index { get; internal set; }
    internal string InternalValuePath { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("TreeNode_NavigateUrl")]
public string NavigateUrl { get; public set; }
    internal TreeView Owner { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public TreeNode Parent { get; }
    internal bool Populated { get; internal set; }
    [DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("TreeNode_PopulateOnDemand")]
public bool PopulateOnDemand { get; public set; }
    [DefaultValueAttribute("False")]
internal bool PreserveChecked { get; internal set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("TreeNode_SelectAction")]
public TreeNodeSelectAction SelectAction { get; public set; }
    [DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("TreeNode_Selected")]
public bool Selected { get; public set; }
    internal string SelectID { get; }
    [DefaultValueAttribute("System.Nullable`1<System.Boolean>", "")]
[WebSysDescriptionAttribute("TreeNode_ShowCheckBox")]
public Nullable`1<bool> ShowCheckBox { get; public set; }
    [DefaultValueAttribute("")]
[WebSysDescriptionAttribute("TreeNode_Target")]
public string Target { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebSysDescriptionAttribute("TreeNode_Text")]
public string Text { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebSysDescriptionAttribute("TreeNode_ToolTip")]
public string ToolTip { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebSysDescriptionAttribute("TreeNode_Value")]
public string Value { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ValuePath { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    protected bool IsTrackingViewState { get; }
    protected internal TreeNode(TreeView owner, bool isRoot);
    public TreeNode(string text);
    public TreeNode(string text, string value);
    public TreeNode(string text, string value, string imageUrl);
    public TreeNode(string text, string value, string imageUrl, string navigateUrl, string target);
    public bool get_Checked();
    public void set_Checked(bool value);
    internal bool get_CheckedSet();
    public bool get_DataBound();
    public TreeNodeCollection get_ChildNodes();
    public string get_DataPath();
    public int get_Depth();
    public Nullable`1<bool> get_Expanded();
    public void set_Expanded(Nullable`1<bool> value);
    public object get_DataItem();
    public string get_ImageToolTip();
    public void set_ImageToolTip(string value);
    public string get_ImageUrl();
    public void set_ImageUrl(string value);
    internal int get_Index();
    internal void set_Index(int value);
    internal string get_InternalValuePath();
    public string get_NavigateUrl();
    public void set_NavigateUrl(string value);
    internal TreeView get_Owner();
    public TreeNode get_Parent();
    internal bool get_Populated();
    internal void set_Populated(bool value);
    public bool get_PopulateOnDemand();
    public void set_PopulateOnDemand(bool value);
    internal bool get_PreserveChecked();
    internal void set_PreserveChecked(bool value);
    public TreeNodeSelectAction get_SelectAction();
    public void set_SelectAction(TreeNodeSelectAction value);
    public bool get_Selected();
    public void set_Selected(bool value);
    internal string get_SelectID();
    public Nullable`1<bool> get_ShowCheckBox();
    public void set_ShowCheckBox(Nullable`1<bool> value);
    public string get_Target();
    public void set_Target(string value);
    public string get_Text();
    public void set_Text(string value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public string get_Value();
    public void set_Value(string value);
    public string get_ValuePath();
    public void Collapse();
    public void CollapseAll();
    public void Expand();
    public void ExpandAll();
    internal TreeNode GetParentInternal();
    internal bool GetEffectiveShowCheckBox();
    internal void Populate();
    internal void Render(HtmlTextWriter writer, int position, Boolean[] isLast, bool enabled);
    internal void RenderChildNodes(HtmlTextWriter writer, int depth, Boolean[] isLast, bool enabled);
    protected virtual void RenderPostText(HtmlTextWriter writer);
    protected virtual void RenderPreText(HtmlTextWriter writer);
    internal void ResetValuePathRecursive();
    public void Select();
    internal void SetDataBound(bool dataBound);
    internal void SetDataItem(object dataItem);
    internal void SetDataPath(string dataPath);
    internal void SetDirty();
    internal void SetOwner(TreeView owner);
    internal void SetParent(TreeNode parent);
    internal void SetPath(string newPath);
    internal void SetSelected(bool value);
    public void ToggleExpandState();
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    protected bool get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object state);
    protected virtual void LoadViewState(object state);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    protected virtual object SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
    protected void TrackViewState();
    private sealed virtual override object System.ICloneable.Clone();
    protected virtual object Clone();
}
[DefaultPropertyAttribute("TextField")]
public class System.Web.UI.WebControls.TreeNodeBinding : object {
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("Binding_DataMember")]
public string DataMember { get; public set; }
    [DefaultValueAttribute("-1")]
[TypeConverterAttribute("System.Web.UI.Design.WebControls.TreeNodeBindingDepthConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("TreeNodeBinding_Depth")]
public int Depth { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("Databindings")]
[WebSysDescriptionAttribute("TreeNodeBinding_FormatString")]
public string FormatString { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("DefaultProperties")]
[WebSysDescriptionAttribute("TreeNodeBinding_ImageToolTip")]
public string ImageToolTip { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebSysDescriptionAttribute("TreeNodeBinding_ImageToolTipField")]
[WebCategoryAttribute("Databindings")]
public string ImageToolTipField { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("DefaultProperties")]
[WebSysDescriptionAttribute("TreeNodeBinding_ImageUrl")]
public string ImageUrl { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebCategoryAttribute("Databindings")]
[WebSysDescriptionAttribute("TreeNodeBinding_ImageUrlField")]
public string ImageUrlField { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("DefaultProperties")]
[WebSysDescriptionAttribute("TreeNodeBinding_NavigateUrl")]
public string NavigateUrl { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebCategoryAttribute("Databindings")]
[WebSysDescriptionAttribute("TreeNodeBinding_NavigateUrlField")]
public string NavigateUrlField { get; public set; }
    [DefaultValueAttribute("False")]
[WebCategoryAttribute("DefaultProperties")]
[WebSysDescriptionAttribute("TreeNodeBinding_PopulateOnDemand")]
public bool PopulateOnDemand { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("DefaultProperties")]
[WebSysDescriptionAttribute("TreeNodeBinding_SelectAction")]
public TreeNodeSelectAction SelectAction { get; public set; }
    [DefaultValueAttribute("System.Nullable`1<System.Boolean>", "")]
[WebCategoryAttribute("DefaultProperties")]
[WebSysDescriptionAttribute("TreeNodeBinding_ShowCheckBox")]
public Nullable`1<bool> ShowCheckBox { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("DefaultProperties")]
[WebSysDescriptionAttribute("TreeNodeBinding_Target")]
public string Target { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebCategoryAttribute("Databindings")]
[WebSysDescriptionAttribute("TreeNodeBinding_TargetField")]
public string TargetField { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("DefaultProperties")]
[WebSysDescriptionAttribute("TreeNodeBinding_Text")]
public string Text { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebCategoryAttribute("Databindings")]
[WebSysDescriptionAttribute("TreeNodeBinding_TextField")]
public string TextField { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("DefaultProperties")]
[WebSysDescriptionAttribute("TreeNodeBinding_ToolTip")]
public string ToolTip { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebCategoryAttribute("Databindings")]
[WebSysDescriptionAttribute("TreeNodeBinding_ToolTipField")]
public string ToolTipField { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("DefaultProperties")]
[WebSysDescriptionAttribute("TreeNodeBinding_Value")]
public string Value { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[WebCategoryAttribute("Databindings")]
[WebSysDescriptionAttribute("TreeNodeBinding_ValueField")]
public string ValueField { get; public set; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    private object System.Web.UI.IDataSourceViewSchemaAccessor.DataSourceViewSchema { get; private set; }
    public string get_DataMember();
    public void set_DataMember(string value);
    public int get_Depth();
    public void set_Depth(int value);
    public string get_FormatString();
    public void set_FormatString(string value);
    public string get_ImageToolTip();
    public void set_ImageToolTip(string value);
    public string get_ImageToolTipField();
    public void set_ImageToolTipField(string value);
    public string get_ImageUrl();
    public void set_ImageUrl(string value);
    public string get_ImageUrlField();
    public void set_ImageUrlField(string value);
    public string get_NavigateUrl();
    public void set_NavigateUrl(string value);
    public string get_NavigateUrlField();
    public void set_NavigateUrlField(string value);
    public bool get_PopulateOnDemand();
    public void set_PopulateOnDemand(bool value);
    public TreeNodeSelectAction get_SelectAction();
    public void set_SelectAction(TreeNodeSelectAction value);
    public Nullable`1<bool> get_ShowCheckBox();
    public void set_ShowCheckBox(Nullable`1<bool> value);
    public string get_Target();
    public void set_Target(string value);
    public string get_TargetField();
    public void set_TargetField(string value);
    public string get_Text();
    public void set_Text(string value);
    public string get_TextField();
    public void set_TextField(string value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public string get_ToolTipField();
    public void set_ToolTipField(string value);
    public string get_Value();
    public void set_Value(string value);
    public string get_ValueField();
    public void set_ValueField(string value);
    internal void SetDirty();
    public virtual string ToString();
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object state);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
    private sealed virtual override object System.Web.UI.IDataSourceViewSchemaAccessor.get_DataSourceViewSchema();
    private sealed virtual override void System.Web.UI.IDataSourceViewSchemaAccessor.set_DataSourceViewSchema(object value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.TreeNodeBindingCollection : StateManagedCollection {
    public TreeNodeBinding Item { get; public set; }
    private static TreeNodeBindingCollection();
    public TreeNodeBinding get_Item(int i);
    public void set_Item(int i, TreeNodeBinding value);
    public int Add(TreeNodeBinding binding);
    public bool Contains(TreeNodeBinding binding);
    public void CopyTo(TreeNodeBinding[] bindingArray, int index);
    protected virtual object CreateKnownType(int index);
    internal TreeNodeBinding GetBinding(string dataMember, int depth);
    protected virtual Type[] GetKnownTypes();
    public int IndexOf(TreeNodeBinding binding);
    public void Insert(int index, TreeNodeBinding binding);
    protected virtual void OnClear();
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnValidate(object value);
    public void Remove(TreeNodeBinding binding);
    public void RemoveAt(int index);
    protected virtual void SetDirtyObject(object o);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.TreeNodeCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public TreeNode Item { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public TreeNodeCollection(TreeNode owner);
    internal TreeNodeCollection(TreeNode owner, bool updateParent);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public TreeNode get_Item(int index);
    public void Add(TreeNode child);
    public void AddAt(int index, TreeNode child);
    public void Clear();
    public void CopyTo(TreeNode[] nodeArray, int index);
    public bool Contains(TreeNode c);
    internal TreeNode FindNode(String[] path, int pos);
    public sealed virtual IEnumerator GetEnumerator();
    public int IndexOf(TreeNode value);
    public void Remove(TreeNode value);
    public void RemoveAt(int index);
    internal void SetDirty();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object state);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
public class System.Web.UI.WebControls.TreeNodeEventArgs : EventArgs {
    public TreeNode Node { get; }
    public TreeNodeEventArgs(TreeNode node);
    public TreeNode get_Node();
}
public class System.Web.UI.WebControls.TreeNodeEventHandler : MulticastDelegate {
    public TreeNodeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TreeNodeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TreeNodeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Web.UI.WebControls.TreeNodeSelectAction : Enum {
    public int value__;
    public static TreeNodeSelectAction Select;
    public static TreeNodeSelectAction Expand;
    public static TreeNodeSelectAction SelectExpand;
    public static TreeNodeSelectAction None;
}
public class System.Web.UI.WebControls.TreeNodeStyle : Style {
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[WebSysDescriptionAttribute("TreeNodeStyle_ChildNodesPadding")]
[WebCategoryAttribute("Layout")]
[NotifyParentPropertyAttribute("True")]
public Unit ChildNodesPadding { get; public set; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[WebSysDescriptionAttribute("TreeNodeStyle_HorizontalPadding")]
[WebCategoryAttribute("Layout")]
[NotifyParentPropertyAttribute("True")]
public Unit HorizontalPadding { get; public set; }
    internal HyperLinkStyle HyperLinkStyle { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("TreeNodeStyle_ImageUrl")]
public string ImageUrl { get; public set; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[WebSysDescriptionAttribute("TreeNodeStyle_NodeSpacing")]
[WebCategoryAttribute("Layout")]
[NotifyParentPropertyAttribute("True")]
public Unit NodeSpacing { get; public set; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[WebSysDescriptionAttribute("TreeNodeStyle_VerticalPadding")]
[WebCategoryAttribute("Layout")]
[NotifyParentPropertyAttribute("True")]
public Unit VerticalPadding { get; public set; }
    public TreeNodeStyle(StateBag bag);
    public Unit get_ChildNodesPadding();
    public void set_ChildNodesPadding(Unit value);
    public Unit get_HorizontalPadding();
    public void set_HorizontalPadding(Unit value);
    internal HyperLinkStyle get_HyperLinkStyle();
    public string get_ImageUrl();
    public void set_ImageUrl(string value);
    public Unit get_NodeSpacing();
    public void set_NodeSpacing(Unit value);
    public Unit get_VerticalPadding();
    public void set_VerticalPadding(Unit value);
    public virtual void CopyFrom(Style s);
    protected virtual void FillStyleAttributes(CssStyleCollection attributes, IUrlResolutionService urlResolver);
    public virtual void MergeWith(Style s);
    public virtual void Reset();
    internal void ResetCachedStyles();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.TreeNodeStyleCollection : StateManagedCollection {
    public TreeNodeStyle Item { get; public set; }
    private static TreeNodeStyleCollection();
    protected virtual void OnInsert(int index, object value);
    public TreeNodeStyle get_Item(int i);
    public void set_Item(int i, TreeNodeStyle value);
    public int Add(TreeNodeStyle style);
    public bool Contains(TreeNodeStyle style);
    public void CopyTo(TreeNodeStyle[] styleArray, int index);
    public int IndexOf(TreeNodeStyle style);
    public void Insert(int index, TreeNodeStyle style);
    protected virtual object CreateKnownType(int index);
    protected virtual Type[] GetKnownTypes();
    public void Remove(TreeNodeStyle style);
    public void RemoveAt(int index);
    protected virtual void SetDirtyObject(object o);
}
[FlagsAttribute]
public enum System.Web.UI.WebControls.TreeNodeTypes : Enum {
    public int value__;
    public static TreeNodeTypes None;
    public static TreeNodeTypes Root;
    public static TreeNodeTypes Parent;
    public static TreeNodeTypes Leaf;
    public static TreeNodeTypes All;
}
[ControlValuePropertyAttribute("SelectedValue")]
[DefaultEventAttribute("SelectedNodeChanged")]
[DesignerAttribute("System.Web.UI.Design.WebControls.TreeViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SupportsEventValidationAttribute]
public class System.Web.UI.WebControls.TreeView : HierarchicalDataBoundControl {
    internal static int RootImageIndex;
    internal static int ParentImageIndex;
    internal static int LeafImageIndex;
    internal static int NoExpandImageIndex;
    internal static int PlusImageIndex;
    internal static int MinusImageIndex;
    internal static int IImageIndex;
    internal static int RImageIndex;
    internal static int RPlusImageIndex;
    internal static int RMinusImageIndex;
    internal static int TImageIndex;
    internal static int TPlusImageIndex;
    internal static int TMinusImageIndex;
    internal static int LImageIndex;
    internal static int LPlusImageIndex;
    internal static int LMinusImageIndex;
    internal static int DashImageIndex;
    internal static int DashPlusImageIndex;
    internal static int DashMinusImageIndex;
    internal static int ImageUrlsCount;
    internal static char InternalPathSeparator;
    internal bool AccessKeyRendered { get; internal set; }
    [DefaultValueAttribute("True")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("TreeView_AutoGenerateDataBindings")]
public bool AutoGenerateDataBindings { get; public set; }
    [DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
[EditorAttribute("System.Web.UI.Design.WebControls.TreeViewBindingsEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("TreeView_DataBindings")]
public TreeNodeBindingCollection DataBindings { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public TreeNodeCollection CheckedNodes { get; }
    internal string ClientDataObjectID { get; }
    [LocalizableAttribute("True")]
[WebSysDefaultValueAttribute("TreeView_CollapseImageToolTipDefaultValue")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("TreeView_CollapseImageToolTip")]
public string CollapseImageToolTip { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("TreeView_CollapseImageUrl")]
public string CollapseImageUrl { get; public set; }
    internal string CollapseImageUrlInternal { get; }
    internal bool CustomExpandCollapseHandlerExists { get; }
    [DefaultValueAttribute("True")]
[WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("TreeView_EnableClientScript")]
public bool EnableClientScript { get; public set; }
    internal bool EnableHover { get; }
    [DefaultValueAttribute("-1")]
[TypeConverterAttribute("System.Web.UI.WebControls.TreeView/TreeViewExpandDepthConverter")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("TreeView_ExpandDepth")]
public int ExpandDepth { get; public set; }
    [LocalizableAttribute("True")]
[WebSysDefaultValueAttribute("TreeView_ExpandImageToolTipDefaultValue")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("TreeView_ExpandImageToolTip")]
public string ExpandImageToolTip { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("TreeView_ExpandImageUrl")]
public string ExpandImageUrl { get; public set; }
    internal string ExpandImageUrlInternal { get; }
    internal string ExpandStateID { get; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("TreeView_HoverNodeStyle")]
public Style HoverNodeStyle { get; }
    internal string ImageArrayID { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("TreeView_ImageSet")]
public TreeViewImageSet ImageSet { get; public set; }
    internal bool IsNotIE { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("TreeView_LeafNodeStyle")]
public TreeNodeStyle LeafNodeStyle { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.TreeNodeStyleCollectionEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("TreeView_LevelStyles")]
public TreeNodeStyleCollection LevelStyles { get; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("TreeView_LineImagesFolderUrl")]
public string LineImagesFolder { get; public set; }
    internal bool LoadingNodeState { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("-1")]
[WebSysDescriptionAttribute("TreeView_MaxDataBindDepth")]
public int MaxDataBindDepth { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("TreeView_NoExpandImageUrl")]
public string NoExpandImageUrl { get; public set; }
    internal string NoExpandImageUrlInternal { get; }
    [DefaultValueAttribute("20")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("TreeView_NodeIndent")]
public int NodeIndent { get; public set; }
    [DefaultValueAttribute("False")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("TreeView_NodeWrap")]
public bool NodeWrap { get; public set; }
    [DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
[EditorAttribute("System.Web.UI.Design.WebControls.TreeNodeCollectionEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("TreeView_Nodes")]
public TreeNodeCollection Nodes { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("TreeView_NodeStyle")]
public TreeNodeStyle NodeStyle { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("TreeView_ParentNodeStyle")]
public TreeNodeStyle ParentNodeStyle { get; }
    [DefaultValueAttribute("/")]
[WebSysDescriptionAttribute("TreeView_PathSeparator")]
public char PathSeparator { get; public set; }
    internal string PopulateLogID { get; }
    [DefaultValueAttribute("True")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("TreeView_PopulateNodesFromClient")]
public bool PopulateNodesFromClient { get; public set; }
    internal bool RenderClientScript { get; }
    internal TreeNode RootNode { get; }
    internal Style BaseTreeNodeStyle { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("TreeView_RootNodeStyle")]
public TreeNodeStyle RootNodeStyle { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public TreeNode SelectedNode { get; }
    internal string SelectedNodeFieldID { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("TreeView_SelectedNodeStyle")]
public TreeNodeStyle SelectedNodeStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string SelectedValue { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("TreeView_ShowCheckBoxes")]
public TreeNodeTypes ShowCheckBoxes { get; public set; }
    [DefaultValueAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("TreeView_ShowExpandCollapse")]
public bool ShowExpandCollapse { get; public set; }
    [DefaultValueAttribute("False")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("TreeView_ShowLines")]
public bool ShowLines { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Accessibility")]
[WebSysDefaultValueAttribute("TreeView_Default_SkipLinkText")]
[WebSysDescriptionAttribute("TreeView_SkipLinkText")]
public string SkipLinkText { get; public set; }
    [DefaultValueAttribute("")]
[WebSysDescriptionAttribute("TreeNode_Target")]
public string Target { get; public set; }
    protected HtmlTextWriterTag TagKey { get; }
    public bool Visible { get; public set; }
    private static TreeView();
    internal bool get_AccessKeyRendered();
    internal void set_AccessKeyRendered(bool value);
    public bool get_AutoGenerateDataBindings();
    public void set_AutoGenerateDataBindings(bool value);
    public TreeNodeBindingCollection get_DataBindings();
    public TreeNodeCollection get_CheckedNodes();
    internal string get_ClientDataObjectID();
    public string get_CollapseImageToolTip();
    public void set_CollapseImageToolTip(string value);
    public string get_CollapseImageUrl();
    public void set_CollapseImageUrl(string value);
    internal string get_CollapseImageUrlInternal();
    internal bool get_CustomExpandCollapseHandlerExists();
    public bool get_EnableClientScript();
    public void set_EnableClientScript(bool value);
    internal bool get_EnableHover();
    public int get_ExpandDepth();
    public void set_ExpandDepth(int value);
    public string get_ExpandImageToolTip();
    public void set_ExpandImageToolTip(string value);
    public string get_ExpandImageUrl();
    public void set_ExpandImageUrl(string value);
    internal string get_ExpandImageUrlInternal();
    internal string get_ExpandStateID();
    public Style get_HoverNodeStyle();
    internal string get_ImageArrayID();
    public TreeViewImageSet get_ImageSet();
    public void set_ImageSet(TreeViewImageSet value);
    internal bool get_IsNotIE();
    public TreeNodeStyle get_LeafNodeStyle();
    public TreeNodeStyleCollection get_LevelStyles();
    public string get_LineImagesFolder();
    public void set_LineImagesFolder(string value);
    internal bool get_LoadingNodeState();
    public int get_MaxDataBindDepth();
    public void set_MaxDataBindDepth(int value);
    public string get_NoExpandImageUrl();
    public void set_NoExpandImageUrl(string value);
    internal string get_NoExpandImageUrlInternal();
    public int get_NodeIndent();
    public void set_NodeIndent(int value);
    public bool get_NodeWrap();
    public void set_NodeWrap(bool value);
    public TreeNodeCollection get_Nodes();
    public TreeNodeStyle get_NodeStyle();
    public TreeNodeStyle get_ParentNodeStyle();
    public char get_PathSeparator();
    public void set_PathSeparator(char value);
    internal string get_PopulateLogID();
    public bool get_PopulateNodesFromClient();
    public void set_PopulateNodesFromClient(bool value);
    internal bool get_RenderClientScript();
    internal TreeNode get_RootNode();
    internal Style get_BaseTreeNodeStyle();
    public TreeNodeStyle get_RootNodeStyle();
    public TreeNode get_SelectedNode();
    internal string get_SelectedNodeFieldID();
    public TreeNodeStyle get_SelectedNodeStyle();
    public string get_SelectedValue();
    public TreeNodeTypes get_ShowCheckBoxes();
    public void set_ShowCheckBoxes(TreeNodeTypes value);
    public bool get_ShowExpandCollapse();
    public void set_ShowExpandCollapse(bool value);
    public bool get_ShowLines();
    public void set_ShowLines(bool value);
    public string get_SkipLinkText();
    public void set_SkipLinkText(string value);
    public string get_Target();
    public void set_Target(string value);
    protected virtual HtmlTextWriterTag get_TagKey();
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public void add_TreeNodeCheckChanged(TreeNodeEventHandler value);
    public void remove_TreeNodeCheckChanged(TreeNodeEventHandler value);
    public void add_SelectedNodeChanged(EventHandler value);
    public void remove_SelectedNodeChanged(EventHandler value);
    public void add_TreeNodeCollapsed(TreeNodeEventHandler value);
    public void remove_TreeNodeCollapsed(TreeNodeEventHandler value);
    public void add_TreeNodeDataBound(TreeNodeEventHandler value);
    public void remove_TreeNodeDataBound(TreeNodeEventHandler value);
    public void add_TreeNodeExpanded(TreeNodeEventHandler value);
    public void remove_TreeNodeExpanded(TreeNodeEventHandler value);
    public void add_TreeNodePopulate(TreeNodeEventHandler value);
    public void remove_TreeNodePopulate(TreeNodeEventHandler value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    public void CollapseAll();
    protected virtual ControlCollection CreateControlCollection();
    protected internal virtual TreeNode CreateNode();
    internal string CreateNodeId(int index);
    internal string CreateNodeTextId(int index);
    public sealed virtual void DataBind();
    public void ExpandAll();
    public TreeNode FindNode(string valuePath);
    internal string GetCssClassName(TreeNode node, bool hyperLink);
    internal string GetCssClassName(TreeNode node, bool hyperLink, Boolean& containsClassName);
    internal string GetImageUrl(int index);
    internal string GetLevelImageUrl(int index);
    internal static void GetMergedStyle(Style style1, Style style2);
    internal TreeNodeStyle GetStyle(TreeNode node);
    internal static string Escape(string value);
    internal static string UnEscape(string value);
    protected virtual void LoadViewState(object state);
    protected internal virtual void OnInit(EventArgs e);
    protected virtual void OnTreeNodeCheckChanged(TreeNodeEventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void OnSelectedNodeChanged(EventArgs e);
    protected virtual void OnTreeNodeCollapsed(TreeNodeEventArgs e);
    protected virtual void OnTreeNodeExpanded(TreeNodeEventArgs e);
    protected virtual void OnTreeNodeDataBound(TreeNodeEventArgs e);
    protected virtual void OnTreeNodePopulate(TreeNodeEventArgs e);
    protected internal virtual void PerformDataBinding();
    internal void PopulateNode(TreeNode node);
    internal void RaiseSelectedNodeChanged();
    internal void RaiseTreeNodeCollapsed(TreeNode node);
    internal void RaiseTreeNodeExpanded(TreeNode node);
    public virtual void RenderBeginTag(HtmlTextWriter writer);
    protected internal virtual void RenderContents(HtmlTextWriter writer);
    public virtual void RenderEndTag(HtmlTextWriter writer);
    protected virtual object SaveViewState();
    protected void SetNodeDataBound(TreeNode node, bool dataBound);
    protected void SetNodeDataItem(TreeNode node, object dataItem);
    protected void SetNodeDataPath(TreeNode node, string dataPath);
    internal void SetSelectedNode(TreeNode node);
    protected virtual void TrackViewState();
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    protected virtual void RaisePostBackEvent(string eventArgument);
    private sealed virtual override void System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(string eventArgument);
    private sealed virtual override string System.Web.UI.ICallbackEventHandler.GetCallbackResult();
    protected virtual void RaiseCallbackEvent(string eventArgument);
    protected virtual string GetCallbackResult();
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    protected virtual void RaisePostDataChangedEvent();
}
public enum System.Web.UI.WebControls.TreeViewImageSet : Enum {
    public int value__;
    public static TreeViewImageSet Custom;
    public static TreeViewImageSet XPFileExplorer;
    public static TreeViewImageSet Msdn;
    public static TreeViewImageSet WindowsHelp;
    public static TreeViewImageSet Simple;
    public static TreeViewImageSet Simple2;
    public static TreeViewImageSet BulletedList;
    public static TreeViewImageSet BulletedList2;
    public static TreeViewImageSet BulletedList3;
    public static TreeViewImageSet BulletedList4;
    public static TreeViewImageSet Arrows;
    public static TreeViewImageSet News;
    public static TreeViewImageSet Contacts;
    public static TreeViewImageSet Inbox;
    public static TreeViewImageSet Events;
    public static TreeViewImageSet Faq;
}
[TypeConverterAttribute("System.Web.UI.WebControls.UnitConverter")]
public class System.Web.UI.WebControls.Unit : ValueType {
    public static Unit Empty;
    internal static int MaxValue;
    internal static int MinValue;
    private UnitType type;
    private double value;
    public bool IsEmpty { get; }
    public UnitType Type { get; }
    public double Value { get; }
    public Unit(int value);
    public Unit(double value);
    public Unit(double value, UnitType type);
    public Unit(string value);
    public Unit(string value, CultureInfo culture);
    internal Unit(string value, CultureInfo culture, UnitType defaultType);
    private static Unit();
    public bool get_IsEmpty();
    public UnitType get_Type();
    public double get_Value();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(Unit left, Unit right);
    public static bool op_Inequality(Unit left, Unit right);
    public static Unit Parse(string s);
    public static Unit Parse(string s, CultureInfo culture);
    public static Unit Percentage(double n);
    public static Unit Pixel(int n);
    public static Unit Point(int n);
    public virtual string ToString();
    public string ToString(CultureInfo culture);
    public string ToString(IFormatProvider formatProvider);
    public static Unit op_Implicit(int n);
}
public class System.Web.UI.WebControls.UnitConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public enum System.Web.UI.WebControls.UnitType : Enum {
    public int value__;
    public static UnitType Pixel;
    public static UnitType Point;
    public static UnitType Pica;
    public static UnitType Inch;
    public static UnitType Mm;
    public static UnitType Cm;
    public static UnitType Percentage;
    public static UnitType Em;
    public static UnitType Ex;
}
public class System.Web.UI.WebControls.ValidatedControlConverter : ControlIDConverter {
    protected virtual bool FilterControl(Control control);
}
public enum System.Web.UI.WebControls.ValidationCompareOperator : Enum {
    public int value__;
    public static ValidationCompareOperator Equal;
    public static ValidationCompareOperator NotEqual;
    public static ValidationCompareOperator GreaterThan;
    public static ValidationCompareOperator GreaterThanEqual;
    public static ValidationCompareOperator LessThan;
    public static ValidationCompareOperator LessThanEqual;
    public static ValidationCompareOperator DataTypeCheck;
}
public enum System.Web.UI.WebControls.ValidationDataType : Enum {
    public int value__;
    public static ValidationDataType String;
    public static ValidationDataType Integer;
    public static ValidationDataType Double;
    public static ValidationDataType Date;
    public static ValidationDataType Currency;
}
[DesignerAttribute("System.Web.UI.Design.WebControls.ValidationSummaryDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.UI.WebControls.ValidationSummary : WebControl {
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("ValidationSummary_DisplayMode")]
public ValidationSummaryDisplayMode DisplayMode { get; public set; }
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("ValidationSummary_EnableClientScript")]
public bool EnableClientScript { get; public set; }
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("ValidationSummary_ShowValidationErrors")]
public bool ShowValidationErrors { get; public set; }
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("ValidationSummary_ShowModelStateErrors")]
public bool ShowModelStateErrors { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "Red")]
public Color ForeColor { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ValidationSummary_HeaderText")]
public string HeaderText { get; public set; }
    public bool SupportsDisabledAttribute { get; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[WebSysDescriptionAttribute("ValidationSummary_ShowMessageBox")]
public bool ShowMessageBox { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("ValidationSummary_ShowSummary")]
public bool ShowSummary { get; public set; }
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("ValidationSummary_ValidationGroup")]
public string ValidationGroup { get; public set; }
    public ValidationSummaryDisplayMode get_DisplayMode();
    public void set_DisplayMode(ValidationSummaryDisplayMode value);
    public bool get_EnableClientScript();
    public void set_EnableClientScript(bool value);
    public bool get_ShowValidationErrors();
    public void set_ShowValidationErrors(bool value);
    public bool get_ShowModelStateErrors();
    public void set_ShowModelStateErrors(bool value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public string get_HeaderText();
    public void set_HeaderText(string value);
    public virtual bool get_SupportsDisabledAttribute();
    public bool get_ShowMessageBox();
    public void set_ShowMessageBox(bool value);
    public bool get_ShowSummary();
    public void set_ShowSummary(bool value);
    public virtual string get_ValidationGroup();
    public virtual void set_ValidationGroup(string value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    internal String[] GetErrorMessages(Boolean& inError);
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void Render(HtmlTextWriter writer);
    internal bool ShouldSerializeForeColor();
}
public enum System.Web.UI.WebControls.ValidationSummaryDisplayMode : Enum {
    public int value__;
    public static ValidationSummaryDisplayMode List;
    public static ValidationSummaryDisplayMode BulletList;
    public static ValidationSummaryDisplayMode SingleParagraph;
}
internal static class System.Web.UI.WebControls.ValidatorCompatibilityHelper : object {
    public static void RegisterArrayDeclaration(Control control, string arrayName, string arrayValue);
    public static void RegisterClientScriptResource(Control control, string resourceName);
    public static void RegisterClientScriptResource(Control control, Type type, string resourceName);
    public static void RegisterExpandoAttribute(Control control, string controlId, string attributeName, string attributeValue, bool encode);
    public static void RegisterOnSubmitStatement(Control control, Type type, string key, string script);
    public static void RegisterStartupScript(Control control, Type type, string key, string script, bool addScriptTags);
}
public enum System.Web.UI.WebControls.ValidatorDisplay : Enum {
    public int value__;
    public static ValidatorDisplay None;
    public static ValidatorDisplay Static;
    public static ValidatorDisplay Dynamic;
}
[TypeConverterAttribute("System.Web.UI.WebControls.VerticalAlignConverter")]
public enum System.Web.UI.WebControls.VerticalAlign : Enum {
    public int value__;
    public static VerticalAlign NotSet;
    public static VerticalAlign Top;
    public static VerticalAlign Middle;
    public static VerticalAlign Bottom;
}
internal class System.Web.UI.WebControls.VerticalAlignConverter : EnumConverter {
    private static VerticalAlignConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[ParseChildrenAttribute("False")]
[DesignerAttribute("System.Web.UI.Design.WebControls.ViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxDataAttribute("<{0}:View runat="server"></{0}:View>")]
public class System.Web.UI.WebControls.View : Control {
    internal bool Active { get; internal set; }
    [BrowsableAttribute("True")]
public bool EnableTheming { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Control_Visible")]
public bool Visible { get; public set; }
    private static View();
    internal bool get_Active();
    internal void set_Active(bool value);
    public virtual bool get_EnableTheming();
    public virtual void set_EnableTheming(bool value);
    public void add_Activate(EventHandler value);
    public void remove_Activate(EventHandler value);
    public void add_Deactivate(EventHandler value);
    public void remove_Deactivate(EventHandler value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    protected internal virtual void OnActivate(EventArgs e);
    protected internal virtual void OnDeactivate(EventArgs e);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.ViewCollection : ControlCollection {
    public View Item { get; }
    public ViewCollection(Control owner);
    public virtual void Add(Control v);
    public virtual void AddAt(int index, Control v);
    public View get_Item(int i);
}
public class System.Web.UI.WebControls.WebColorConverter : ColorConverter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
[ThemeableAttribute("True")]
public class System.Web.UI.WebControls.WebControl : Control {
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("WebControl_AccessKey")]
public string AccessKey { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("WebControl_Attributes")]
public AttributeCollection Attributes { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[WebSysDescriptionAttribute("WebControl_BackColor")]
[TypeConverterAttribute("System.Web.UI.WebControls.WebColorConverter")]
public Color BackColor { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[WebSysDescriptionAttribute("WebControl_BorderColor")]
[TypeConverterAttribute("System.Web.UI.WebControls.WebColorConverter")]
public Color BorderColor { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[WebSysDescriptionAttribute("WebControl_BorderWidth")]
public Unit BorderWidth { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("WebControl_BorderStyle")]
public BorderStyle BorderStyle { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("WebControl_ControlStyle")]
public Style ControlStyle { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("2")]
[WebSysDescriptionAttribute("WebControl_ControlStyleCreated")]
public bool ControlStyleCreated { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("WebControl_CSSClassName")]
[CssClassPropertyAttribute]
public string CssClass { get; public set; }
    public static string DisabledCssClass { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("WebControl_Style")]
public CssStyleCollection Style { get; }
    [BindableAttribute("True")]
[WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("WebControl_Enabled")]
public bool Enabled { get; public set; }
    [BrowsableAttribute("True")]
public bool EnableTheming { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("WebControl_Font")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
public FontInfo Font { get; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[WebSysDescriptionAttribute("WebControl_ForeColor")]
[TypeConverterAttribute("System.Web.UI.WebControls.WebColorConverter")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool HasAttributes { get; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[WebSysDescriptionAttribute("WebControl_Height")]
public Unit Height { get; public set; }
    protected internal bool IsEnabled { get; }
    [BrowsableAttribute("False")]
public bool SupportsDisabledAttribute { get; }
    internal bool RequiresLegacyRendering { get; }
    [BrowsableAttribute("True")]
public string SkinID { get; public set; }
    [DefaultValueAttribute("0")]
[WebCategoryAttribute("Accessibility")]
[WebSysDescriptionAttribute("WebControl_TabIndex")]
public short TabIndex { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected HtmlTextWriterTag TagKey { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected string TagName { get; }
    [WebCategoryAttribute("Behavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[WebSysDescriptionAttribute("WebControl_Tooltip")]
public string ToolTip { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("System.Web.UI.WebControls.Unit", "")]
[WebSysDescriptionAttribute("WebControl_Width")]
public Unit Width { get; public set; }
    public WebControl(HtmlTextWriterTag tag);
    protected WebControl(string tag);
    private static WebControl();
    public virtual string get_AccessKey();
    public virtual void set_AccessKey(string value);
    public AttributeCollection get_Attributes();
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual Unit get_BorderWidth();
    public virtual void set_BorderWidth(Unit value);
    public virtual BorderStyle get_BorderStyle();
    public virtual void set_BorderStyle(BorderStyle value);
    public Style get_ControlStyle();
    public bool get_ControlStyleCreated();
    public virtual string get_CssClass();
    public virtual void set_CssClass(string value);
    public static string get_DisabledCssClass();
    public static void set_DisabledCssClass(string value);
    public CssStyleCollection get_Style();
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public virtual bool get_EnableTheming();
    public virtual void set_EnableTheming(bool value);
    public virtual FontInfo get_Font();
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public bool get_HasAttributes();
    public virtual Unit get_Height();
    public virtual void set_Height(Unit value);
    protected internal bool get_IsEnabled();
    public virtual bool get_SupportsDisabledAttribute();
    internal virtual bool get_RequiresLegacyRendering();
    public virtual string get_SkinID();
    public virtual void set_SkinID(string value);
    public virtual short get_TabIndex();
    public virtual void set_TabIndex(short value);
    protected virtual HtmlTextWriterTag get_TagKey();
    protected virtual string get_TagName();
    public virtual string get_ToolTip();
    public virtual void set_ToolTip(string value);
    public virtual Unit get_Width();
    public virtual void set_Width(Unit value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    internal void AddDisplayInlineBlockIfNeeded(HtmlTextWriter writer);
    public void ApplyStyle(Style s);
    public void CopyBaseAttributes(WebControl controlSrc);
    protected virtual Style CreateControlStyle();
    protected virtual void LoadViewState(object savedState);
    protected virtual void TrackViewState();
    public void MergeStyle(Style s);
    protected internal virtual void Render(HtmlTextWriter writer);
    public virtual void RenderBeginTag(HtmlTextWriter writer);
    public virtual void RenderEndTag(HtmlTextWriter writer);
    protected internal virtual void RenderContents(HtmlTextWriter writer);
    protected virtual object SaveViewState();
    private sealed virtual override string System.Web.UI.IAttributeAccessor.GetAttribute(string name);
    private sealed virtual override void System.Web.UI.IAttributeAccessor.SetAttribute(string name, string value);
}
public class System.Web.UI.WebControls.WebParts.AppearanceEditorPart : EditorPart {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public string DefaultButton { get; public set; }
    [WebSysDefaultValueAttribute("AppearanceEditorPart_PartTitle")]
public string Title { get; public set; }
    public virtual string get_DefaultButton();
    public virtual void set_DefaultButton(string value);
    public virtual string get_Title();
    public virtual void set_Title(string value);
    public virtual bool ApplyChanges();
    protected internal virtual void CreateChildControls();
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void RenderContents(HtmlTextWriter writer);
    public virtual void SyncChanges();
}
public class System.Web.UI.WebControls.WebParts.BehaviorEditorPart : EditorPart {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public string DefaultButton { get; public set; }
    public bool Display { get; }
    [WebSysDefaultValueAttribute("BehaviorEditorPart_PartTitle")]
public string Title { get; public set; }
    public virtual string get_DefaultButton();
    public virtual void set_DefaultButton(string value);
    public virtual bool get_Display();
    public virtual string get_Title();
    public virtual void set_Title(string value);
    public virtual bool ApplyChanges();
    protected internal virtual void CreateChildControls();
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void RenderContents(HtmlTextWriter writer);
    public virtual void SyncChanges();
}
internal class System.Web.UI.WebControls.WebParts.BlobPersonalizationState : PersonalizationState {
    public bool IsEmpty { get; }
    public BlobPersonalizationState(WebPartManager webPartManager);
    public virtual bool get_IsEmpty();
    public virtual void ApplyWebPartPersonalization(WebPart webPart);
    public virtual void ApplyWebPartManagerPersonalization();
    public virtual void ExtractWebPartPersonalization(WebPart webPart);
    public virtual void ExtractWebPartManagerPersonalization();
    public virtual string GetAuthorizationFilter(string webPartID);
    internal static IDictionary GetPersonalizedProperties(Control control, PersonalizationScope scope);
    public void LoadDataBlobs(Byte[] sharedData, Byte[] userData);
    public Byte[] SaveDataBlob();
    internal static IDictionary SetPersonalizedProperties(Control control, IDictionary propertyState);
    public virtual void SetWebPartDirty(WebPart webPart);
    public virtual void SetWebPartManagerDirty();
}
[BindableAttribute("False")]
[DesignerAttribute("System.Web.UI.Design.WebControls.WebParts.CatalogPartDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public abstract class System.Web.UI.WebControls.WebParts.CatalogPart : Part {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string DisplayTitle { get; }
    protected WebPartManager WebPartManager { get; }
    protected CatalogZoneBase Zone { get; }
    public string get_DisplayTitle();
    protected WebPartManager get_WebPartManager();
    protected CatalogZoneBase get_Zone();
    public abstract virtual WebPartDescriptionCollection GetAvailableWebPartDescriptions();
    protected virtual IDictionary GetDesignModeState();
    public abstract virtual WebPart GetWebPart(WebPartDescription description);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void SetDesignModeState(IDictionary data);
    internal void SetWebPartManager(WebPartManager webPartManager);
    internal void SetZone(CatalogZoneBase zone);
}
public class System.Web.UI.WebControls.WebParts.CatalogPartChrome : object {
    protected CatalogZoneBase Zone { get; }
    public CatalogPartChrome(CatalogZoneBase zone);
    protected CatalogZoneBase get_Zone();
    protected virtual Style CreateCatalogPartChromeStyle(CatalogPart catalogPart, PartChromeType chromeType);
    public virtual void PerformPreRender();
    public virtual void RenderCatalogPart(HtmlTextWriter writer, CatalogPart catalogPart);
    protected virtual void RenderPartContents(HtmlTextWriter writer, CatalogPart catalogPart);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.WebParts.CatalogPartCollection : ReadOnlyCollectionBase {
    public static CatalogPartCollection Empty;
    public CatalogPart Item { get; }
    public CatalogPart Item { get; }
    public CatalogPartCollection(ICollection catalogParts);
    public CatalogPartCollection(CatalogPartCollection existingCatalogParts, ICollection catalogParts);
    private static CatalogPartCollection();
    public CatalogPart get_Item(int index);
    public CatalogPart get_Item(string id);
    internal int Add(CatalogPart value);
    public bool Contains(CatalogPart catalogPart);
    public void CopyTo(CatalogPart[] array, int index);
    public int IndexOf(CatalogPart catalogPart);
}
[DesignerAttribute("System.Web.UI.Design.WebControls.WebParts.CatalogZoneDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SupportsEventValidationAttribute]
public class System.Web.UI.WebControls.WebParts.CatalogZone : CatalogZoneBase {
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.WebParts.CatalogZone")]
[TemplateInstanceAttribute("1")]
public ITemplate ZoneTemplate { get; public set; }
    protected virtual CatalogPartCollection CreateCatalogParts();
    public virtual ITemplate get_ZoneTemplate();
    public virtual void set_ZoneTemplate(ITemplate value);
}
public abstract class System.Web.UI.WebControls.WebParts.CatalogZoneBase : ToolZone {
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Verbs")]
[WebSysDescriptionAttribute("CatalogZoneBase_AddVerb")]
public WebPartVerb AddVerb { get; }
    internal string CheckBoxName { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public CatalogPartChrome CatalogPartChrome { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public CatalogPartCollection CatalogParts { get; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Verbs")]
[WebSysDescriptionAttribute("CatalogZoneBase_CloseVerb")]
public WebPartVerb CloseVerb { get; }
    [WebSysDefaultValueAttribute("CatalogZoneBase_DefaultEmptyZoneText")]
public string EmptyZoneText { get; public set; }
    [WebSysDefaultValueAttribute("CatalogZoneBase_HeaderText")]
public string HeaderText { get; public set; }
    [WebSysDefaultValueAttribute("CatalogZoneBase_InstructionText")]
public string InstructionText { get; public set; }
    [DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("CatalogZoneBase_PartLinkStyle")]
public Style PartLinkStyle { get; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("CatalogZoneBase_SelectedCatalogPartID")]
public string SelectedCatalogPartID { get; public set; }
    [LocalizableAttribute("True")]
[WebSysDefaultValueAttribute("CatalogZoneBase_DefaultSelectTargetZoneText")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("CatalogZoneBase_SelectTargetZoneText")]
public string SelectTargetZoneText { get; public set; }
    [DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("CatalogZoneBase_SelectedPartLinkStyle")]
public Style SelectedPartLinkStyle { get; }
    [DefaultValueAttribute("True")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("CatalogZoneBase_ShowCatalogIcons")]
public bool ShowCatalogIcons { get; public set; }
    public virtual WebPartVerb get_AddVerb();
    internal string get_CheckBoxName();
    public CatalogPartChrome get_CatalogPartChrome();
    public CatalogPartCollection get_CatalogParts();
    public virtual WebPartVerb get_CloseVerb();
    public virtual string get_EmptyZoneText();
    public virtual void set_EmptyZoneText(string value);
    public virtual string get_HeaderText();
    public virtual void set_HeaderText(string value);
    public virtual string get_InstructionText();
    public virtual void set_InstructionText(string value);
    public Style get_PartLinkStyle();
    public string get_SelectedCatalogPartID();
    public void set_SelectedCatalogPartID(string value);
    public virtual string get_SelectTargetZoneText();
    public virtual void set_SelectTargetZoneText(string value);
    public Style get_SelectedPartLinkStyle();
    public virtual bool get_ShowCatalogIcons();
    public virtual void set_ShowCatalogIcons(bool value);
    protected virtual void Close();
    protected virtual CatalogPartChrome CreateCatalogPartChrome();
    protected abstract virtual CatalogPartCollection CreateCatalogParts();
    protected internal virtual void CreateChildControls();
    internal string GetCheckBoxID(string value);
    protected void InvalidateCatalogParts();
    protected internal virtual void LoadControlState(object savedState);
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected virtual void LoadViewState(object savedState);
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void RaisePostBackEvent(string eventArgument);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected virtual void RenderBody(HtmlTextWriter writer);
    protected virtual void RenderCatalogPartLinks(HtmlTextWriter writer);
    protected virtual void RenderFooter(HtmlTextWriter writer);
    protected virtual void RenderVerbs(HtmlTextWriter writer);
    protected internal virtual object SaveControlState();
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
}
[AttributeUsageAttribute("64")]
public class System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute : Attribute {
    public bool AllowsMultipleConnections { get; public set; }
    public string ID { get; }
    public string DisplayName { get; }
    protected string DisplayNameValue { get; protected set; }
    public Type ConnectionPointType { get; }
    public ConnectionConsumerAttribute(string displayName);
    public ConnectionConsumerAttribute(string displayName, string id);
    public ConnectionConsumerAttribute(string displayName, Type connectionPointType);
    public ConnectionConsumerAttribute(string displayName, string id, Type connectionPointType);
    public bool get_AllowsMultipleConnections();
    public void set_AllowsMultipleConnections(bool value);
    public string get_ID();
    public virtual string get_DisplayName();
    protected string get_DisplayNameValue();
    protected void set_DisplayNameValue(string value);
    public Type get_ConnectionPointType();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection : ReadOnlyCollectionBase {
    public static ConnectionInterfaceCollection Empty;
    public Type Item { get; }
    public ConnectionInterfaceCollection(ICollection connectionInterfaces);
    public ConnectionInterfaceCollection(ConnectionInterfaceCollection existingConnectionInterfaces, ICollection connectionInterfaces);
    private static ConnectionInterfaceCollection();
    public bool Contains(Type value);
    public int IndexOf(Type value);
    public Type get_Item(int index);
    public void CopyTo(Type[] array, int index);
}
public abstract class System.Web.UI.WebControls.WebParts.ConnectionPoint : object {
    public static string DefaultID;
    internal static string DefaultIDInternal;
    public bool AllowsMultipleConnections { get; }
    internal MethodInfo CallbackMethod { get; }
    public Type ControlType { get; }
    public Type InterfaceType { get; }
    public string ID { get; }
    public string DisplayName { get; }
    internal ConnectionPoint(MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    private static ConnectionPoint();
    public bool get_AllowsMultipleConnections();
    internal MethodInfo get_CallbackMethod();
    public Type get_ControlType();
    public Type get_InterfaceType();
    public string get_ID();
    public string get_DisplayName();
    public virtual bool GetEnabled(Control control);
}
[AttributeUsageAttribute("64")]
public class System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute : Attribute {
    public bool AllowsMultipleConnections { get; public set; }
    public string ID { get; }
    public string DisplayName { get; }
    protected string DisplayNameValue { get; protected set; }
    public Type ConnectionPointType { get; }
    public ConnectionProviderAttribute(string displayName);
    public ConnectionProviderAttribute(string displayName, string id);
    public ConnectionProviderAttribute(string displayName, Type connectionPointType);
    public ConnectionProviderAttribute(string displayName, string id, Type connectionPointType);
    public bool get_AllowsMultipleConnections();
    public void set_AllowsMultipleConnections(bool value);
    public string get_ID();
    public virtual string get_DisplayName();
    protected string get_DisplayNameValue();
    protected void set_DisplayNameValue(string value);
    public Type get_ConnectionPointType();
}
[DesignerAttribute("System.Web.UI.Design.WebControls.WebParts.ConnectionsZoneDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SupportsEventValidationAttribute]
public class System.Web.UI.WebControls.WebParts.ConnectionsZone : ToolZone {
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Verbs")]
[WebSysDescriptionAttribute("ConnectionsZone_CancelVerb")]
public WebPartVerb CancelVerb { get; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Verbs")]
[WebSysDescriptionAttribute("ConnectionsZone_CloseVerb")]
public WebPartVerb CloseVerb { get; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_ConfigureConnectionTitleDescription")]
[WebSysDefaultValueAttribute("ConnectionsZone_ConfigureConnectionTitle")]
public string ConfigureConnectionTitle { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Verbs")]
[WebSysDescriptionAttribute("ConnectionsZone_ConfigureVerb")]
public WebPartVerb ConfigureVerb { get; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_ConnectToConsumerInstructionTextDescription")]
[WebSysDefaultValueAttribute("ConnectionsZone_ConnectToConsumerInstructionText")]
public string ConnectToConsumerInstructionText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_ConnectToConsumerTextDescription")]
[WebSysDefaultValueAttribute("ConnectionsZone_ConnectToConsumerText")]
public string ConnectToConsumerText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_ConnectToConsumerTitleDescription")]
[WebSysDefaultValueAttribute("ConnectionsZone_ConnectToConsumerTitle")]
public string ConnectToConsumerTitle { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_ConnectToProviderInstructionTextDescription")]
[WebSysDefaultValueAttribute("ConnectionsZone_ConnectToProviderInstructionText")]
public string ConnectToProviderInstructionText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_ConnectToProviderTextDescription")]
[WebSysDefaultValueAttribute("ConnectionsZone_ConnectToProviderText")]
public string ConnectToProviderText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_ConnectToProviderTitleDescription")]
[WebSysDefaultValueAttribute("ConnectionsZone_ConnectToProviderTitle")]
public string ConnectToProviderTitle { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Verbs")]
[WebSysDescriptionAttribute("ConnectionsZone_ConnectVerb")]
public WebPartVerb ConnectVerb { get; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_ConsumersTitleDescription")]
[WebSysDefaultValueAttribute("ConnectionsZone_ConsumersTitle")]
public string ConsumersTitle { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_ConsumersInstructionTextDescription")]
[WebSysDefaultValueAttribute("ConnectionsZone_ConsumersInstructionText")]
public string ConsumersInstructionText { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Verbs")]
[WebSysDescriptionAttribute("ConnectionsZone_DisconnectVerb")]
public WebPartVerb DisconnectVerb { get; }
    protected bool Display { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public string EmptyZoneText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_WarningMessage")]
[WebSysDefaultValueAttribute("ConnectionsZone_WarningConnectionDisabled")]
public string ExistingConnectionErrorMessage { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_GetDescription")]
[WebSysDefaultValueAttribute("ConnectionsZone_Get")]
public string GetText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_GetFromTextDescription")]
[WebSysDefaultValueAttribute("ConnectionsZone_GetFromText")]
public string GetFromText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_HeaderTextDescription")]
[WebSysDefaultValueAttribute("ConnectionsZone_HeaderText")]
public string HeaderText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_InstructionTextDescription")]
[WebSysDefaultValueAttribute("ConnectionsZone_InstructionText")]
public string InstructionText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_InstructionTitleDescription")]
[WebSysDefaultValueAttribute("ConnectionsZone_InstructionTitle")]
public string InstructionTitle { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_ErrorMessage")]
[WebSysDefaultValueAttribute("ConnectionsZone_ErrorCantContinueConnectionCreation")]
public string NewConnectionErrorMessage { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_NoExistingConnectionInstructionTextDescription")]
[WebSysDefaultValueAttribute("ConnectionsZone_NoExistingConnectionInstructionText")]
public string NoExistingConnectionInstructionText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_NoExistingConnectionTitleDescription")]
[WebSysDefaultValueAttribute("ConnectionsZone_NoExistingConnectionTitle")]
public string NoExistingConnectionTitle { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public PartChromeType PartChromeType { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_ProvidersTitleDescription")]
[WebSysDefaultValueAttribute("ConnectionsZone_ProvidersTitle")]
public string ProvidersTitle { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_ProvidersInstructionTextDescription")]
[WebSysDefaultValueAttribute("ConnectionsZone_ProvidersInstructionText")]
public string ProvidersInstructionText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_SendTextDescription")]
[WebSysDefaultValueAttribute("ConnectionsZone_SendText")]
public string SendText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("ConnectionsZone_SendToTextDescription")]
[WebSysDefaultValueAttribute("ConnectionsZone_SendToText")]
public string SendToText { get; public set; }
    protected WebPart WebPartToConnect { get; }
    public virtual WebPartVerb get_CancelVerb();
    public virtual WebPartVerb get_CloseVerb();
    public virtual string get_ConfigureConnectionTitle();
    public virtual void set_ConfigureConnectionTitle(string value);
    public virtual WebPartVerb get_ConfigureVerb();
    public virtual string get_ConnectToConsumerInstructionText();
    public virtual void set_ConnectToConsumerInstructionText(string value);
    public virtual string get_ConnectToConsumerText();
    public virtual void set_ConnectToConsumerText(string value);
    public virtual string get_ConnectToConsumerTitle();
    public virtual void set_ConnectToConsumerTitle(string value);
    public virtual string get_ConnectToProviderInstructionText();
    public virtual void set_ConnectToProviderInstructionText(string value);
    public virtual string get_ConnectToProviderText();
    public virtual void set_ConnectToProviderText(string value);
    public virtual string get_ConnectToProviderTitle();
    public virtual void set_ConnectToProviderTitle(string value);
    public virtual WebPartVerb get_ConnectVerb();
    public virtual string get_ConsumersTitle();
    public virtual void set_ConsumersTitle(string value);
    public virtual string get_ConsumersInstructionText();
    public virtual void set_ConsumersInstructionText(string value);
    public virtual WebPartVerb get_DisconnectVerb();
    protected virtual bool get_Display();
    public virtual string get_EmptyZoneText();
    public virtual void set_EmptyZoneText(string value);
    public virtual string get_ExistingConnectionErrorMessage();
    public virtual void set_ExistingConnectionErrorMessage(string value);
    public virtual string get_GetText();
    public virtual void set_GetText(string value);
    public virtual string get_GetFromText();
    public virtual void set_GetFromText(string value);
    public virtual string get_HeaderText();
    public virtual void set_HeaderText(string value);
    public virtual string get_InstructionText();
    public virtual void set_InstructionText(string value);
    public virtual string get_InstructionTitle();
    public virtual void set_InstructionTitle(string value);
    public virtual string get_NewConnectionErrorMessage();
    public virtual void set_NewConnectionErrorMessage(string value);
    public virtual string get_NoExistingConnectionInstructionText();
    public virtual void set_NoExistingConnectionInstructionText(string value);
    public virtual string get_NoExistingConnectionTitle();
    public virtual void set_NoExistingConnectionTitle(string value);
    public virtual PartChromeType get_PartChromeType();
    public virtual void set_PartChromeType(PartChromeType value);
    public virtual string get_ProvidersTitle();
    public virtual void set_ProvidersTitle(string value);
    public virtual string get_ProvidersInstructionText();
    public virtual void set_ProvidersInstructionText(string value);
    public virtual string get_SendText();
    public virtual void set_SendText(string value);
    public virtual string get_SendToText();
    public virtual void set_SendToText(string value);
    protected WebPart get_WebPartToConnect();
    protected virtual void Close();
    protected internal virtual void CreateChildControls();
    protected internal virtual void LoadControlState(object savedState);
    protected virtual void LoadViewState(object savedState);
    protected internal virtual void OnInit(EventArgs e);
    protected virtual void OnDisplayModeChanged(object sender, WebPartDisplayModeEventArgs e);
    protected virtual void OnSelectedWebPartChanged(object sender, WebPartEventArgs e);
    protected virtual void RaisePostBackEvent(string eventArgument);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected virtual void RenderBody(HtmlTextWriter writer);
    protected virtual void RenderVerbs(HtmlTextWriter writer);
    protected internal virtual object SaveControlState();
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
}
public class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint : ConnectionPoint {
    internal static Type[] ConstructorTypes;
    private static ConsumerConnectionPoint();
    public ConsumerConnectionPoint(MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    public virtual void SetObject(Control control, object data);
    public virtual bool SupportsConnection(Control control, ConnectionInterfaceCollection secondaryInterfaces);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection : ReadOnlyCollectionBase {
    public ConsumerConnectionPoint Default { get; }
    public ConsumerConnectionPoint Item { get; }
    public ConsumerConnectionPoint Item { get; }
    public ConsumerConnectionPointCollection(ICollection connectionPoints);
    public ConsumerConnectionPoint get_Default();
    public ConsumerConnectionPoint get_Item(int index);
    public ConsumerConnectionPoint get_Item(string id);
    public bool Contains(ConsumerConnectionPoint connectionPoint);
    public int IndexOf(ConsumerConnectionPoint connectionPoint);
    public void CopyTo(ConsumerConnectionPoint[] array, int index);
}
[DesignerAttribute("System.Web.UI.Design.WebControls.WebParts.DeclarativeCatalogPartDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart : CatalogPart {
    [WebSysDefaultValueAttribute("DeclarativeCatalogPart_PartTitle")]
public string Title { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.UserControlFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[ThemeableAttribute("False")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("DeclarativeCatlaogPart_WebPartsListUserControlPath")]
public string WebPartsListUserControlPath { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart")]
public ITemplate WebPartsTemplate { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public string AccessKey { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public string BackImageUrl { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public BorderStyle BorderStyle { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public Unit BorderWidth { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
[CssClassPropertyAttribute]
public string CssClass { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public string DefaultButton { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public ContentDirection Direction { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public bool Enabled { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public bool EnableTheming { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public FontInfo Font { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public string GroupingText { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public Unit Height { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public HorizontalAlign HorizontalAlign { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public ScrollBars ScrollBars { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public string SkinID { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public short TabIndex { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public string ToolTip { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public bool Visible { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public Unit Width { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public bool Wrap { get; public set; }
    public virtual string get_Title();
    public virtual void set_Title(string value);
    public string get_WebPartsListUserControlPath();
    public void set_WebPartsListUserControlPath(string value);
    public ITemplate get_WebPartsTemplate();
    public void set_WebPartsTemplate(ITemplate value);
    public virtual WebPartDescriptionCollection GetAvailableWebPartDescriptions();
    public virtual WebPart GetWebPart(WebPartDescription description);
    protected internal virtual void Render(HtmlTextWriter writer);
    public virtual string get_AccessKey();
    public virtual void set_AccessKey(string value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual string get_BackImageUrl();
    public virtual void set_BackImageUrl(string value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual BorderStyle get_BorderStyle();
    public virtual void set_BorderStyle(BorderStyle value);
    public virtual Unit get_BorderWidth();
    public virtual void set_BorderWidth(Unit value);
    public virtual string get_CssClass();
    public virtual void set_CssClass(string value);
    public virtual string get_DefaultButton();
    public virtual void set_DefaultButton(string value);
    public virtual ContentDirection get_Direction();
    public virtual void set_Direction(ContentDirection value);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public virtual bool get_EnableTheming();
    public virtual void set_EnableTheming(bool value);
    public virtual FontInfo get_Font();
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual string get_GroupingText();
    public virtual void set_GroupingText(string value);
    public virtual Unit get_Height();
    public virtual void set_Height(Unit value);
    public virtual HorizontalAlign get_HorizontalAlign();
    public virtual void set_HorizontalAlign(HorizontalAlign value);
    public virtual ScrollBars get_ScrollBars();
    public virtual void set_ScrollBars(ScrollBars value);
    public virtual string get_SkinID();
    public virtual void set_SkinID(string value);
    public virtual short get_TabIndex();
    public virtual void set_TabIndex(short value);
    public virtual string get_ToolTip();
    public virtual void set_ToolTip(string value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public virtual Unit get_Width();
    public virtual void set_Width(Unit value);
    public virtual bool get_Wrap();
    public virtual void set_Wrap(bool value);
}
[BindableAttribute("False")]
[DesignerAttribute("System.Web.UI.Design.WebControls.WebParts.EditorPartDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public abstract class System.Web.UI.WebControls.WebParts.EditorPart : Part {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Display { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string DisplayTitle { get; }
    protected WebPartManager WebPartManager { get; }
    protected WebPart WebPartToEdit { get; }
    protected EditorZoneBase Zone { get; }
    public virtual bool get_Display();
    public string get_DisplayTitle();
    protected WebPartManager get_WebPartManager();
    protected WebPart get_WebPartToEdit();
    protected EditorZoneBase get_Zone();
    public abstract virtual bool ApplyChanges();
    internal string CreateErrorMessage(string exceptionMessage);
    protected virtual IDictionary GetDesignModeState();
    protected internal virtual void OnPreRender(EventArgs e);
    internal void RenderPropertyEditors(HtmlTextWriter writer, String[] propertyDisplayNames, String[] propertyDescriptions, WebControl[] propertyEditors, String[] errorMessages);
    protected virtual void SetDesignModeState(IDictionary data);
    internal void SetWebPartToEdit(WebPart webPartToEdit);
    internal void SetWebPartManager(WebPartManager webPartManager);
    internal void SetZone(EditorZoneBase zone);
    public abstract virtual void SyncChanges();
}
public class System.Web.UI.WebControls.WebParts.EditorPartChrome : object {
    protected EditorZoneBase Zone { get; }
    public EditorPartChrome(EditorZoneBase zone);
    protected EditorZoneBase get_Zone();
    protected virtual Style CreateEditorPartChromeStyle(EditorPart editorPart, PartChromeType chromeType);
    public virtual void PerformPreRender();
    public virtual void RenderEditorPart(HtmlTextWriter writer, EditorPart editorPart);
    protected virtual void RenderPartContents(HtmlTextWriter writer, EditorPart editorPart);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.WebParts.EditorPartCollection : ReadOnlyCollectionBase {
    public static EditorPartCollection Empty;
    public EditorPart Item { get; }
    public EditorPartCollection(ICollection editorParts);
    public EditorPartCollection(EditorPartCollection existingEditorParts, ICollection editorParts);
    private static EditorPartCollection();
    public EditorPart get_Item(int index);
    internal int Add(EditorPart value);
    public bool Contains(EditorPart editorPart);
    public void CopyTo(EditorPart[] array, int index);
    public int IndexOf(EditorPart editorPart);
}
[DesignerAttribute("System.Web.UI.Design.WebControls.WebParts.EditorZoneDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SupportsEventValidationAttribute]
public class System.Web.UI.WebControls.WebParts.EditorZone : EditorZoneBase {
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.WebParts.EditorZone")]
[TemplateInstanceAttribute("1")]
public ITemplate ZoneTemplate { get; public set; }
    protected virtual EditorPartCollection CreateEditorParts();
    public virtual ITemplate get_ZoneTemplate();
    public virtual void set_ZoneTemplate(ITemplate value);
}
public abstract class System.Web.UI.WebControls.WebParts.EditorZoneBase : ToolZone {
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Verbs")]
[WebSysDescriptionAttribute("EditorZoneBase_ApplyVerb")]
public WebPartVerb ApplyVerb { get; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Verbs")]
[WebSysDescriptionAttribute("EditorZoneBase_CancelVerb")]
public WebPartVerb CancelVerb { get; }
    protected bool Display { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public EditorPartChrome EditorPartChrome { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public EditorPartCollection EditorParts { get; }
    [WebSysDefaultValueAttribute("EditorZoneBase_DefaultEmptyZoneText")]
public string EmptyZoneText { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Behavior")]
[WebSysDefaultValueAttribute("EditorZoneBase_DefaultErrorText")]
[WebSysDescriptionAttribute("EditorZoneBase_ErrorText")]
public string ErrorText { get; public set; }
    [WebSysDefaultValueAttribute("EditorZoneBase_DefaultHeaderText")]
public string HeaderText { get; public set; }
    [WebSysDefaultValueAttribute("EditorZoneBase_DefaultInstructionText")]
public string InstructionText { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Verbs")]
[WebSysDescriptionAttribute("EditorZoneBase_OKVerb")]
public WebPartVerb OKVerb { get; }
    protected WebPart WebPartToEdit { get; }
    public virtual WebPartVerb get_ApplyVerb();
    public virtual WebPartVerb get_CancelVerb();
    protected virtual bool get_Display();
    public EditorPartChrome get_EditorPartChrome();
    public EditorPartCollection get_EditorParts();
    public virtual string get_EmptyZoneText();
    public virtual void set_EmptyZoneText(string value);
    public virtual string get_ErrorText();
    public virtual void set_ErrorText(string value);
    public virtual string get_HeaderText();
    public virtual void set_HeaderText(string value);
    public virtual string get_InstructionText();
    public virtual void set_InstructionText(string value);
    public virtual WebPartVerb get_OKVerb();
    protected WebPart get_WebPartToEdit();
    protected virtual void Close();
    protected internal virtual void CreateChildControls();
    protected virtual EditorPartChrome CreateEditorPartChrome();
    protected abstract virtual EditorPartCollection CreateEditorParts();
    protected void InvalidateEditorParts();
    protected virtual void LoadViewState(object savedState);
    protected virtual void OnDisplayModeChanged(object sender, WebPartDisplayModeEventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void OnSelectedWebPartChanged(object sender, WebPartEventArgs e);
    protected virtual void RaisePostBackEvent(string eventArgument);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected virtual void RenderBody(HtmlTextWriter writer);
    protected virtual void RenderVerbs(HtmlTextWriter writer);
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
}
[ToolboxItemAttribute("False")]
public class System.Web.UI.WebControls.WebParts.ErrorWebPart : ProxyWebPart {
    public string ErrorMessage { get; public set; }
    private bool System.Web.UI.WebControls.WebParts.ITrackingPersonalizable.TracksChanges { get; }
    public ErrorWebPart(string originalID, string originalTypeName, string originalPath, string genericWebPartID);
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual void EndLoadPersonalization();
    protected internal virtual void RenderContents(HtmlTextWriter writer);
    private sealed virtual override bool System.Web.UI.WebControls.WebParts.ITrackingPersonalizable.get_TracksChanges();
    private sealed virtual override void System.Web.UI.WebControls.WebParts.ITrackingPersonalizable.BeginLoad();
    private sealed virtual override void System.Web.UI.WebControls.WebParts.ITrackingPersonalizable.BeginSave();
    private sealed virtual override void System.Web.UI.WebControls.WebParts.ITrackingPersonalizable.EndLoad();
    private sealed virtual override void System.Web.UI.WebControls.WebParts.ITrackingPersonalizable.EndSave();
}
public class System.Web.UI.WebControls.WebParts.FieldCallback : MulticastDelegate {
    public FieldCallback(object object, IntPtr method);
    public virtual void Invoke(object fieldValue);
    public virtual IAsyncResult BeginInvoke(object fieldValue, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ToolboxItemAttribute("False")]
public class System.Web.UI.WebControls.WebParts.GenericWebPart : WebPart {
    internal static string IDPrefix;
    public string CatalogIconImageUrl { get; public set; }
    public Control ChildControl { get; }
    public string Description { get; public set; }
    public Unit Height { get; public set; }
    public string ID { get; public set; }
    public string Subtitle { get; }
    public string Title { get; public set; }
    public string TitleIconImageUrl { get; public set; }
    public string TitleUrl { get; public set; }
    public WebPartVerbCollection Verbs { get; }
    public object WebBrowsableObject { get; }
    public Unit Width { get; public set; }
    protected internal GenericWebPart(Control control);
    public virtual string get_CatalogIconImageUrl();
    public virtual void set_CatalogIconImageUrl(string value);
    public Control get_ChildControl();
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual Unit get_Height();
    public virtual void set_Height(Unit value);
    public sealed virtual string get_ID();
    public sealed virtual void set_ID(string value);
    public virtual string get_Subtitle();
    public virtual string get_Title();
    public virtual void set_Title(string value);
    public virtual string get_TitleIconImageUrl();
    public virtual void set_TitleIconImageUrl(string value);
    public virtual string get_TitleUrl();
    public virtual void set_TitleUrl(string value);
    public virtual WebPartVerbCollection get_Verbs();
    public virtual object get_WebBrowsableObject();
    public virtual Unit get_Width();
    public virtual void set_Width(Unit value);
    protected internal virtual void CreateChildControls();
    protected virtual ControlCollection CreateControlCollection();
    public virtual EditorPartCollection CreateEditorParts();
    protected internal virtual void Render(HtmlTextWriter writer);
}
public class System.Web.UI.WebControls.WebParts.ImportCatalogPart : CatalogPart {
    [WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("ImportCatalogPart_Browse")]
[WebSysDescriptionAttribute("ImportCatalogPart_BrowseHelpText")]
public string BrowseHelpText { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public string DefaultButton { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("ImportCatalogPart_ImportedPartLabel")]
[WebSysDescriptionAttribute("ImportCatalogPart_ImportedPartLabelText")]
public string ImportedPartLabelText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("ImportCatalogPart_ImportedPartErrorLabel")]
[WebSysDescriptionAttribute("ImportCatalogPart_PartImportErrorLabelText")]
public string PartImportErrorLabelText { get; public set; }
    [WebSysDefaultValueAttribute("ImportCatalogPart_PartTitle")]
public string Title { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("ImportCatalogPart_UploadButton")]
[WebSysDescriptionAttribute("ImportCatalogPart_UploadButtonText")]
public string UploadButtonText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("ImportCatalogPart_Upload")]
[WebSysDescriptionAttribute("ImportCatalogPart_UploadHelpText")]
public string UploadHelpText { get; public set; }
    private static ImportCatalogPart();
    public string get_BrowseHelpText();
    public void set_BrowseHelpText(string value);
    public virtual string get_DefaultButton();
    public virtual void set_DefaultButton(string value);
    public string get_ImportedPartLabelText();
    public void set_ImportedPartLabelText(string value);
    public string get_PartImportErrorLabelText();
    public void set_PartImportErrorLabelText(string value);
    public virtual string get_Title();
    public virtual void set_Title(string value);
    public string get_UploadButtonText();
    public void set_UploadButtonText(string value);
    public string get_UploadHelpText();
    public void set_UploadHelpText(string value);
    protected internal virtual void CreateChildControls();
    public virtual WebPartDescriptionCollection GetAvailableWebPartDescriptions();
    public virtual WebPart GetWebPart(WebPartDescription description);
    protected internal virtual void LoadControlState(object savedState);
    protected internal virtual void OnInit(EventArgs e);
    internal void OnUpload(object sender, EventArgs e);
    protected internal virtual object SaveControlState();
    protected internal virtual void Render(HtmlTextWriter writer);
    protected internal virtual void RenderContents(HtmlTextWriter writer);
}
public interface System.Web.UI.WebControls.WebParts.IPersonalizable {
    public bool IsDirty { get; }
    public abstract virtual bool get_IsDirty();
    public abstract virtual void Load(PersonalizationDictionary state);
    public abstract virtual void Save(PersonalizationDictionary state);
}
public interface System.Web.UI.WebControls.WebParts.ITrackingPersonalizable {
    public bool TracksChanges { get; }
    public abstract virtual bool get_TracksChanges();
    public abstract virtual void BeginLoad();
    public abstract virtual void BeginSave();
    public abstract virtual void EndLoad();
    public abstract virtual void EndSave();
}
public interface System.Web.UI.WebControls.WebParts.ITransformerConfigurationControl {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Cancelled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Cancelled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Succeeded(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Succeeded(EventHandler value);
}
public interface System.Web.UI.WebControls.WebParts.IVersioningPersonalizable {
    public abstract virtual void Load(IDictionary unknownProperties);
}
public interface System.Web.UI.WebControls.WebParts.IWebActionable {
    public WebPartVerbCollection Verbs { get; }
    public abstract virtual WebPartVerbCollection get_Verbs();
}
public interface System.Web.UI.WebControls.WebParts.IWebEditable {
    public object WebBrowsableObject { get; }
    public abstract virtual object get_WebBrowsableObject();
    public abstract virtual EditorPartCollection CreateEditorParts();
}
public interface System.Web.UI.WebControls.WebParts.IWebPart {
    public string CatalogIconImageUrl { get; public set; }
    public string Description { get; public set; }
    public string Subtitle { get; }
    public string Title { get; public set; }
    public string TitleIconImageUrl { get; public set; }
    public string TitleUrl { get; public set; }
    public abstract virtual string get_CatalogIconImageUrl();
    public abstract virtual void set_CatalogIconImageUrl(string value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual string get_Subtitle();
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual string get_TitleIconImageUrl();
    public abstract virtual void set_TitleIconImageUrl(string value);
    public abstract virtual string get_TitleUrl();
    public abstract virtual void set_TitleUrl(string value);
}
public interface System.Web.UI.WebControls.WebParts.IWebPartField {
    public PropertyDescriptor Schema { get; }
    public abstract virtual PropertyDescriptor get_Schema();
    public abstract virtual void GetFieldValue(FieldCallback callback);
}
internal interface System.Web.UI.WebControls.WebParts.IWebPartMenuUser {
    public Style CheckImageStyle { get; }
    public string CheckImageUrl { get; }
    public string ClientID { get; }
    public Style ItemHoverStyle { get; }
    public Style ItemStyle { get; }
    public Style LabelHoverStyle { get; }
    public string LabelImageUrl { get; }
    public Style LabelStyle { get; }
    public string LabelText { get; }
    public WebPartMenuStyle MenuPopupStyle { get; }
    public Page Page { get; }
    public string PopupImageUrl { get; }
    public string PostBackTarget { get; }
    public IUrlResolutionService UrlResolver { get; }
    public abstract virtual Style get_CheckImageStyle();
    public abstract virtual string get_CheckImageUrl();
    public abstract virtual string get_ClientID();
    public abstract virtual Style get_ItemHoverStyle();
    public abstract virtual Style get_ItemStyle();
    public abstract virtual Style get_LabelHoverStyle();
    public abstract virtual string get_LabelImageUrl();
    public abstract virtual Style get_LabelStyle();
    public abstract virtual string get_LabelText();
    public abstract virtual WebPartMenuStyle get_MenuPopupStyle();
    public abstract virtual Page get_Page();
    public abstract virtual string get_PopupImageUrl();
    public abstract virtual string get_PostBackTarget();
    public abstract virtual IUrlResolutionService get_UrlResolver();
    public abstract virtual void OnBeginRender(HtmlTextWriter writer);
    public abstract virtual void OnEndRender(HtmlTextWriter writer);
}
public interface System.Web.UI.WebControls.WebParts.IWebPartParameters {
    public PropertyDescriptorCollection Schema { get; }
    public abstract virtual PropertyDescriptorCollection get_Schema();
    public abstract virtual void GetParametersData(ParametersCallback callback);
    public abstract virtual void SetConsumerSchema(PropertyDescriptorCollection schema);
}
public interface System.Web.UI.WebControls.WebParts.IWebPartRow {
    public PropertyDescriptorCollection Schema { get; }
    public abstract virtual PropertyDescriptorCollection get_Schema();
    public abstract virtual void GetRowData(RowCallback callback);
}
public interface System.Web.UI.WebControls.WebParts.IWebPartTable {
    public PropertyDescriptorCollection Schema { get; }
    public abstract virtual PropertyDescriptorCollection get_Schema();
    public abstract virtual void GetTableData(TableCallback callback);
}
public class System.Web.UI.WebControls.WebParts.LayoutEditorPart : EditorPart {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public string DefaultButton { get; public set; }
    public bool Display { get; }
    [WebSysDefaultValueAttribute("LayoutEditorPart_PartTitle")]
public string Title { get; public set; }
    public virtual string get_DefaultButton();
    public virtual void set_DefaultButton(string value);
    public virtual bool get_Display();
    public virtual string get_Title();
    public virtual void set_Title(string value);
    public virtual bool ApplyChanges();
    protected internal virtual void CreateChildControls();
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void RenderContents(HtmlTextWriter writer);
    public virtual void SyncChanges();
}
internal class System.Web.UI.WebControls.WebParts.NonParentingControl : Control {
    protected internal virtual void AddedControl(Control control, int index);
    protected internal virtual void RemovedControl(Control control);
}
[DesignerAttribute("System.Web.UI.Design.WebControls.WebParts.PageCatalogPartDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.UI.WebControls.WebParts.PageCatalogPart : CatalogPart {
    [WebSysDefaultValueAttribute("PageCatalogPart_PartTitle")]
public string Title { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public string AccessKey { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public string BackImageUrl { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public BorderStyle BorderStyle { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public Unit BorderWidth { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
[CssClassPropertyAttribute]
public string CssClass { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public string DefaultButton { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public ContentDirection Direction { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public bool Enabled { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public bool EnableTheming { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public FontInfo Font { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public string GroupingText { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public Unit Height { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public HorizontalAlign HorizontalAlign { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public ScrollBars ScrollBars { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public string SkinID { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public short TabIndex { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public string ToolTip { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public bool Visible { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public Unit Width { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public bool Wrap { get; public set; }
    private static PageCatalogPart();
    public virtual string get_Title();
    public virtual void set_Title(string value);
    public virtual WebPartDescriptionCollection GetAvailableWebPartDescriptions();
    public virtual WebPart GetWebPart(WebPartDescription description);
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void Render(HtmlTextWriter writer);
    public virtual string get_AccessKey();
    public virtual void set_AccessKey(string value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual string get_BackImageUrl();
    public virtual void set_BackImageUrl(string value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual BorderStyle get_BorderStyle();
    public virtual void set_BorderStyle(BorderStyle value);
    public virtual Unit get_BorderWidth();
    public virtual void set_BorderWidth(Unit value);
    public virtual string get_CssClass();
    public virtual void set_CssClass(string value);
    public virtual string get_DefaultButton();
    public virtual void set_DefaultButton(string value);
    public virtual ContentDirection get_Direction();
    public virtual void set_Direction(ContentDirection value);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public virtual bool get_EnableTheming();
    public virtual void set_EnableTheming(bool value);
    public virtual FontInfo get_Font();
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual string get_GroupingText();
    public virtual void set_GroupingText(string value);
    public virtual Unit get_Height();
    public virtual void set_Height(Unit value);
    public virtual HorizontalAlign get_HorizontalAlign();
    public virtual void set_HorizontalAlign(HorizontalAlign value);
    public virtual ScrollBars get_ScrollBars();
    public virtual void set_ScrollBars(ScrollBars value);
    public virtual string get_SkinID();
    public virtual void set_SkinID(string value);
    public virtual short get_TabIndex();
    public virtual void set_TabIndex(short value);
    public virtual string get_ToolTip();
    public virtual void set_ToolTip(string value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public virtual Unit get_Width();
    public virtual void set_Width(Unit value);
    public virtual bool get_Wrap();
    public virtual void set_Wrap(bool value);
}
public class System.Web.UI.WebControls.WebParts.ParametersCallback : MulticastDelegate {
    public ParametersCallback(object object, IntPtr method);
    public virtual void Invoke(IDictionary parametersData);
    public virtual IAsyncResult BeginInvoke(IDictionary parametersData, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DesignerAttribute("System.Web.UI.Design.WebControls.WebParts.PartDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
public abstract class System.Web.UI.WebControls.WebParts.Part : Panel {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("WebPartAppearance")]
[WebSysDescriptionAttribute("Part_ChromeState")]
public PartChromeState ChromeState { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("WebPartAppearance")]
[WebSysDescriptionAttribute("Part_ChromeType")]
public PartChromeType ChromeType { get; public set; }
    public ControlCollection Controls { get; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("WebPartAppearance")]
[WebSysDescriptionAttribute("Part_Description")]
public string Description { get; public set; }
    [LocalizableAttribute("True")]
[WebSysDefaultValueAttribute("")]
[WebCategoryAttribute("WebPartAppearance")]
[WebSysDescriptionAttribute("Part_Title")]
public string Title { get; public set; }
    public virtual PartChromeState get_ChromeState();
    public virtual void set_ChromeState(PartChromeState value);
    public virtual PartChromeType get_ChromeType();
    public virtual void set_ChromeType(PartChromeType value);
    public virtual ControlCollection get_Controls();
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Title();
    public virtual void set_Title(string value);
    public virtual void DataBind();
    private sealed virtual override void System.Web.UI.WebControls.ICompositeControlDesignerAccessor.RecreateChildControls();
}
public enum System.Web.UI.WebControls.WebParts.PartChromeState : Enum {
    public int value__;
    public static PartChromeState Normal;
    public static PartChromeState Minimized;
}
public enum System.Web.UI.WebControls.WebParts.PartChromeType : Enum {
    public int value__;
    public static PartChromeType Default;
    public static PartChromeType TitleAndBorder;
    public static PartChromeType None;
    public static PartChromeType TitleOnly;
    public static PartChromeType BorderOnly;
}
[AttributeUsageAttribute("128")]
public class System.Web.UI.WebControls.WebParts.PersonalizableAttribute : Attribute {
    internal static Type PersonalizableAttributeType;
    public static PersonalizableAttribute NotPersonalizable;
    public static PersonalizableAttribute Personalizable;
    public static PersonalizableAttribute UserPersonalizable;
    public static PersonalizableAttribute SharedPersonalizable;
    public static PersonalizableAttribute Default;
    public bool IsPersonalizable { get; }
    public bool IsSensitive { get; }
    public PersonalizationScope Scope { get; }
    public PersonalizableAttribute(bool isPersonalizable);
    public PersonalizableAttribute(PersonalizationScope scope);
    public PersonalizableAttribute(PersonalizationScope scope, bool isSensitive);
    private static PersonalizableAttribute();
    public bool get_IsPersonalizable();
    public bool get_IsSensitive();
    public PersonalizationScope get_Scope();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ICollection GetPersonalizableProperties(Type type);
    internal static IDictionary GetPersonalizablePropertyEntries(Type type);
    internal static IDictionary GetPersonalizablePropertyValues(Control control, PersonalizationScope scope, bool excludeSensitive);
    public virtual bool IsDefaultAttribute();
    public virtual bool Match(object obj);
}
internal class System.Web.UI.WebControls.WebParts.PersonalizablePropertyEntry : object {
    public bool IsSensitive { get; }
    public PersonalizationScope Scope { get; }
    public PropertyInfo PropertyInfo { get; }
    public PersonalizablePropertyEntry(PropertyInfo pi, PersonalizableAttribute attr);
    public bool get_IsSensitive();
    public PersonalizationScope get_Scope();
    public PropertyInfo get_PropertyInfo();
}
internal class System.Web.UI.WebControls.WebParts.PersonalizableTypeEntry : object {
    public IDictionary PropertyEntries { get; }
    public ICollection PropertyInfos { get; }
    public PersonalizableTypeEntry(Type type);
    public IDictionary get_PropertyEntries();
    public ICollection get_PropertyInfos();
}
public static class System.Web.UI.WebControls.WebParts.PersonalizationAdministration : object {
    internal static DateTime DefaultInactiveSinceDate;
    public static string ApplicationName { get; public set; }
    public static PersonalizationProvider Provider { get; }
    public static PersonalizationProviderCollection Providers { get; }
    private static PersonalizationAdministration();
    public static string get_ApplicationName();
    public static void set_ApplicationName(string value);
    public static PersonalizationProvider get_Provider();
    public static PersonalizationProviderCollection get_Providers();
    public static int ResetAllState(PersonalizationScope scope);
    public static int ResetState(PersonalizationStateInfoCollection data);
    public static bool ResetSharedState(string path);
    public static int ResetSharedState(String[] paths);
    public static int ResetUserState(string path);
    public static int ResetUserState(String[] usernames);
    public static bool ResetUserState(string path, string username);
    public static int ResetUserState(string path, String[] usernames);
    public static int ResetInactiveUserState(DateTime userInactiveSinceDate);
    public static int ResetInactiveUserState(string path, DateTime userInactiveSinceDate);
    public static int GetCountOfState(PersonalizationScope scope);
    public static int GetCountOfState(PersonalizationScope scope, string pathToMatch);
    public static int GetCountOfUserState(string usernameToMatch);
    public static int GetCountOfInactiveUserState(DateTime userInactiveSinceDate);
    public static int GetCountOfInactiveUserState(string pathToMatch, DateTime userInactiveSinceDate);
    public static PersonalizationStateInfoCollection GetAllState(PersonalizationScope scope);
    public static PersonalizationStateInfoCollection GetAllState(PersonalizationScope scope, int pageIndex, int pageSize, Int32& totalRecords);
    public static PersonalizationStateInfoCollection GetAllInactiveUserState(DateTime userInactiveSinceDate);
    public static PersonalizationStateInfoCollection GetAllInactiveUserState(DateTime userInactiveSinceDate, int pageIndex, int pageSize, Int32& totalRecords);
    public static PersonalizationStateInfoCollection FindSharedState(string pathToMatch);
    public static PersonalizationStateInfoCollection FindSharedState(string pathToMatch, int pageIndex, int pageSize, Int32& totalRecords);
    public static PersonalizationStateInfoCollection FindUserState(string pathToMatch, string usernameToMatch);
    public static PersonalizationStateInfoCollection FindUserState(string pathToMatch, string usernameToMatch, int pageIndex, int pageSize, Int32& totalRecords);
    public static PersonalizationStateInfoCollection FindInactiveUserState(string pathToMatch, string usernameToMatch, DateTime userInactiveSinceDate);
    public static PersonalizationStateInfoCollection FindInactiveUserState(string pathToMatch, string usernameToMatch, DateTime userInactiveSinceDate, int pageIndex, int pageSize, Int32& totalRecords);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.WebParts.PersonalizationDictionary : object {
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public ICollection Keys { get; }
    public object SyncRoot { get; }
    public ICollection Values { get; }
    public PersonalizationEntry Item { get; public set; }
    private object System.Collections.IDictionary.Item { get; private set; }
    public PersonalizationDictionary(int initialSize);
    public virtual int get_Count();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public virtual ICollection get_Keys();
    public virtual object get_SyncRoot();
    public virtual ICollection get_Values();
    public virtual PersonalizationEntry get_Item(string key);
    public virtual void set_Item(string key, PersonalizationEntry value);
    public virtual void Add(string key, PersonalizationEntry value);
    public virtual void Clear();
    public virtual bool Contains(string key);
    public virtual void CopyTo(DictionaryEntry[] array, int index);
    public virtual IDictionaryEnumerator GetEnumerator();
    public virtual void Remove(string key);
    internal void RemoveSharedProperties();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Web.UI.WebControls.WebParts.PersonalizationEntry : object {
    public PersonalizationScope Scope { get; public set; }
    public object Value { get; public set; }
    public bool IsSensitive { get; public set; }
    public PersonalizationEntry(object value, PersonalizationScope scope);
    public PersonalizationEntry(object value, PersonalizationScope scope, bool isSensitive);
    public PersonalizationScope get_Scope();
    public void set_Scope(PersonalizationScope value);
    public object get_Value();
    public void set_Value(object value);
    public bool get_IsSensitive();
    public void set_IsSensitive(bool value);
}
public abstract class System.Web.UI.WebControls.WebParts.PersonalizationProvider : ProviderBase {
    public string ApplicationName { get; public set; }
    public abstract virtual string get_ApplicationName();
    public abstract virtual void set_ApplicationName(string value);
    protected virtual IList CreateSupportedUserCapabilities();
    public virtual PersonalizationScope DetermineInitialScope(WebPartManager webPartManager, PersonalizationState loadedState);
    public virtual IDictionary DetermineUserCapabilities(WebPartManager webPartManager);
    public abstract virtual PersonalizationStateInfoCollection FindState(PersonalizationScope scope, PersonalizationStateQuery query, int pageIndex, int pageSize, Int32& totalRecords);
    public abstract virtual int GetCountOfState(PersonalizationScope scope, PersonalizationStateQuery query);
    protected abstract virtual void LoadPersonalizationBlobs(WebPartManager webPartManager, string path, string userName, Byte[]& sharedDataBlob, Byte[]& userDataBlob);
    public virtual PersonalizationState LoadPersonalizationState(WebPartManager webPartManager, bool ignoreCurrentUser);
    protected abstract virtual void ResetPersonalizationBlob(WebPartManager webPartManager, string path, string userName);
    public virtual void ResetPersonalizationState(WebPartManager webPartManager);
    public abstract virtual int ResetState(PersonalizationScope scope, String[] paths, String[] usernames);
    public abstract virtual int ResetUserState(string path, DateTime userInactiveSinceDate);
    protected abstract virtual void SavePersonalizationBlob(WebPartManager webPartManager, string path, string userName, Byte[] dataBlob);
    public virtual void SavePersonalizationState(PersonalizationState state);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection : ProviderCollection {
    public PersonalizationProvider Item { get; }
    public PersonalizationProvider get_Item(string name);
    public virtual void Add(ProviderBase provider);
    public void CopyTo(PersonalizationProvider[] array, int index);
}
internal static class System.Web.UI.WebControls.WebParts.PersonalizationProviderHelper : object {
    internal static String[] CheckAndTrimNonEmptyStringEntries(String[] array, string paramName, bool throwIfArrayIsNull, bool checkCommas, int lengthToCheck);
    internal static string CheckAndTrimStringWithoutCommas(string paramValue, string paramName);
    internal static void CheckOnlyOnePathWithUsers(String[] paths, String[] usernames);
    internal static void CheckNegativeInteger(int paramValue, string paramName);
    internal static void CheckNegativeReturnedInteger(int returnedValue, string methodName);
    internal static void CheckNullEntries(ICollection array, string paramName);
    internal static void CheckPageIndexAndSize(int pageIndex, int pageSize);
    internal static void CheckPersonalizationScope(PersonalizationScope scope);
    internal static void CheckUsernamesInSharedScope(String[] usernames);
}
public enum System.Web.UI.WebControls.WebParts.PersonalizationScope : Enum {
    public int value__;
    public static PersonalizationScope User;
    public static PersonalizationScope Shared;
}
public abstract class System.Web.UI.WebControls.WebParts.PersonalizationState : object {
    public bool IsDirty { get; }
    public bool IsEmpty { get; }
    public WebPartManager WebPartManager { get; }
    protected PersonalizationState(WebPartManager webPartManager);
    public bool get_IsDirty();
    public abstract virtual bool get_IsEmpty();
    public WebPartManager get_WebPartManager();
    public abstract virtual void ApplyWebPartPersonalization(WebPart webPart);
    public abstract virtual void ApplyWebPartManagerPersonalization();
    public abstract virtual void ExtractWebPartPersonalization(WebPart webPart);
    public abstract virtual void ExtractWebPartManagerPersonalization();
    public abstract virtual string GetAuthorizationFilter(string webPartID);
    protected void SetDirty();
    public abstract virtual void SetWebPartDirty(WebPart webPart);
    public abstract virtual void SetWebPartManagerDirty();
    protected void ValidateWebPart(WebPart webPart);
}
public abstract class System.Web.UI.WebControls.WebParts.PersonalizationStateInfo : object {
    public string Path { get; }
    public DateTime LastUpdatedDate { get; }
    public int Size { get; }
    internal PersonalizationStateInfo(string path, DateTime lastUpdatedDate, int size);
    public string get_Path();
    public DateTime get_LastUpdatedDate();
    public int get_Size();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection : object {
    public int Count { get; }
    public PersonalizationStateInfo Item { get; }
    public PersonalizationStateInfo Item { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public sealed virtual int get_Count();
    public PersonalizationStateInfo get_Item(string path, string username);
    public PersonalizationStateInfo get_Item(int index);
    public void Add(PersonalizationStateInfo data);
    public void Clear();
    public void CopyTo(PersonalizationStateInfo[] array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual bool get_IsSynchronized();
    public void Remove(string path, string username);
    public void SetReadOnly();
    public sealed virtual object get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.WebParts.PersonalizationStateQuery : object {
    public string PathToMatch { get; public set; }
    public DateTime UserInactiveSinceDate { get; public set; }
    public string UsernameToMatch { get; public set; }
    public object Item { get; public set; }
    private static PersonalizationStateQuery();
    public string get_PathToMatch();
    public void set_PathToMatch(string value);
    public DateTime get_UserInactiveSinceDate();
    public void set_UserInactiveSinceDate(DateTime value);
    public string get_UsernameToMatch();
    public void set_UsernameToMatch(string value);
    public object get_Item(string queryKey);
    public void set_Item(string queryKey, object value);
}
public class System.Web.UI.WebControls.WebParts.PropertyGridEditorPart : EditorPart {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public string DefaultButton { get; public set; }
    public bool Display { get; }
    [WebSysDefaultValueAttribute("PropertyGridEditorPart_PartTitle")]
public string Title { get; public set; }
    private static PropertyGridEditorPart();
    public virtual string get_DefaultButton();
    public virtual void set_DefaultButton(string value);
    public virtual bool get_Display();
    public virtual string get_Title();
    public virtual void set_Title(string value);
    public virtual bool ApplyChanges();
    protected internal virtual void CreateChildControls();
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void RenderContents(HtmlTextWriter writer);
    public virtual void SyncChanges();
}
public class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : ConnectionPoint {
    internal static Type[] ConstructorTypes;
    private static ProviderConnectionPoint();
    public ProviderConnectionPoint(MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    public virtual ConnectionInterfaceCollection GetSecondaryInterfaces(Control control);
    public virtual object GetObject(Control control);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection : ReadOnlyCollectionBase {
    public ProviderConnectionPoint Default { get; }
    public ProviderConnectionPoint Item { get; }
    public ProviderConnectionPoint Item { get; }
    public ProviderConnectionPointCollection(ICollection connectionPoints);
    public ProviderConnectionPoint get_Default();
    public ProviderConnectionPoint get_Item(int index);
    public ProviderConnectionPoint get_Item(string id);
    public bool Contains(ProviderConnectionPoint connectionPoint);
    public int IndexOf(ProviderConnectionPoint connectionPoint);
    public void CopyTo(ProviderConnectionPoint[] array, int index);
}
[ToolboxItemAttribute("False")]
public abstract class System.Web.UI.WebControls.WebParts.ProxyWebPart : WebPart {
    public string GenericWebPartID { get; }
    public string ID { get; public set; }
    public string OriginalID { get; }
    public string OriginalTypeName { get; }
    public string OriginalPath { get; }
    protected ProxyWebPart(WebPart webPart);
    protected ProxyWebPart(string originalID, string originalTypeName, string originalPath, string genericWebPartID);
    public string get_GenericWebPartID();
    public sealed virtual string get_ID();
    public sealed virtual void set_ID(string value);
    public string get_OriginalID();
    public string get_OriginalTypeName();
    public string get_OriginalPath();
    protected internal virtual void LoadControlState(object savedState);
    protected virtual void LoadViewState(object savedState);
    protected internal virtual object SaveControlState();
    protected virtual object SaveViewState();
}
[DefaultMemberAttribute("Item")]
[EditorAttribute("System.ComponentModel.Design.CollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public class System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection : CollectionBase {
    public bool IsReadOnly { get; }
    public WebPartConnection Item { get; public set; }
    public WebPartConnection Item { get; }
    public bool get_IsReadOnly();
    public WebPartConnection get_Item(int index);
    public void set_Item(int index, WebPartConnection value);
    public WebPartConnection get_Item(string id);
    public int Add(WebPartConnection value);
    public bool Contains(WebPartConnection value);
    public void CopyTo(WebPartConnection[] array, int index);
    public int IndexOf(WebPartConnection value);
    public void Insert(int index, WebPartConnection value);
    protected virtual void OnClear();
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnRemove(int index, object value);
    protected virtual void OnSet(int index, object oldValue, object newValue);
    protected virtual void OnValidate(object value);
    public void Remove(WebPartConnection value);
    internal void SetWebPartManager(WebPartManager webPartManager);
}
[BindableAttribute("False")]
[DesignerAttribute("System.Web.UI.Design.WebControls.WebParts.ProxyWebPartManagerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[NonVisualControlAttribute]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
public class System.Web.UI.WebControls.WebParts.ProxyWebPartManager : Control {
    [EditorBrowsableAttribute("1")]
public string ClientID { get; }
    [EditorBrowsableAttribute("1")]
public ControlCollection Controls { get; }
    [DefaultValueAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool EnableTheming { get; public set; }
    [DefaultValueAttribute("")]
[EditorBrowsableAttribute("1")]
public string SkinID { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[EditorBrowsableAttribute("1")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("WebPartManager_StaticConnections")]
public ProxyWebPartConnectionCollection StaticConnections { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Visible { get; public set; }
    public virtual string get_ClientID();
    public virtual ControlCollection get_Controls();
    public virtual bool get_EnableTheming();
    public virtual void set_EnableTheming(bool value);
    public virtual string get_SkinID();
    public virtual void set_SkinID(string value);
    public ProxyWebPartConnectionCollection get_StaticConnections();
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    protected virtual ControlCollection CreateControlCollection();
    [EditorBrowsableAttribute("1")]
public virtual void Focus();
    protected internal virtual void OnInit(EventArgs e);
}
public class System.Web.UI.WebControls.WebParts.RowCallback : MulticastDelegate {
    public RowCallback(object object, IntPtr method);
    public virtual void Invoke(object rowData);
    public virtual IAsyncResult BeginInvoke(object rowData, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[WebPartTransformerAttribute("System.Web.UI.WebControls.WebParts.IWebPartRow", "System.Web.UI.WebControls.WebParts.IWebPartField")]
public class System.Web.UI.WebControls.WebParts.RowToFieldTransformer : WebPartTransformer {
    public string FieldName { get; public set; }
    private PropertyDescriptor System.Web.UI.WebControls.WebParts.IWebPartField.Schema { get; }
    public virtual Control CreateConfigurationControl();
    public string get_FieldName();
    public void set_FieldName(string value);
    protected internal virtual void LoadConfigurationState(object savedState);
    protected internal virtual object SaveConfigurationState();
    public virtual object Transform(object providerData);
    private sealed virtual override void System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue(FieldCallback callback);
    private sealed virtual override PropertyDescriptor System.Web.UI.WebControls.WebParts.IWebPartField.get_Schema();
}
[WebPartTransformerAttribute("System.Web.UI.WebControls.WebParts.IWebPartRow", "System.Web.UI.WebControls.WebParts.IWebPartParameters")]
public class System.Web.UI.WebControls.WebParts.RowToParametersTransformer : WebPartTransformer {
    [TypeConverterAttribute("System.Web.UI.WebControls.StringArrayConverter")]
public String[] ConsumerFieldNames { get; public set; }
    [TypeConverterAttribute("System.Web.UI.WebControls.StringArrayConverter")]
public String[] ProviderFieldNames { get; public set; }
    private PropertyDescriptorCollection System.Web.UI.WebControls.WebParts.IWebPartParameters.Schema { get; }
    public virtual Control CreateConfigurationControl();
    public String[] get_ConsumerFieldNames();
    public void set_ConsumerFieldNames(String[] value);
    public String[] get_ProviderFieldNames();
    public void set_ProviderFieldNames(String[] value);
    protected internal virtual void LoadConfigurationState(object savedState);
    protected internal virtual object SaveConfigurationState();
    public virtual object Transform(object providerData);
    private sealed virtual override void System.Web.UI.WebControls.WebParts.IWebPartParameters.GetParametersData(ParametersCallback callback);
    private sealed virtual override PropertyDescriptorCollection System.Web.UI.WebControls.WebParts.IWebPartParameters.get_Schema();
    private sealed virtual override void System.Web.UI.WebControls.WebParts.IWebPartParameters.SetConsumerSchema(PropertyDescriptorCollection schema);
}
public class System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo : PersonalizationStateInfo {
    public int SizeOfPersonalizations { get; }
    public int CountOfPersonalizations { get; }
    public SharedPersonalizationStateInfo(string path, DateTime lastUpdatedDate, int size, int sizeOfPersonalizations, int countOfPersonalizations);
    public int get_SizeOfPersonalizations();
    public int get_CountOfPersonalizations();
}
public class System.Web.UI.WebControls.WebParts.SqlPersonalizationProvider : PersonalizationProvider {
    public string ApplicationName { get; public set; }
    public virtual string get_ApplicationName();
    public virtual void set_ApplicationName(string value);
    public virtual PersonalizationStateInfoCollection FindState(PersonalizationScope scope, PersonalizationStateQuery query, int pageIndex, int pageSize, Int32& totalRecords);
    public virtual int GetCountOfState(PersonalizationScope scope, PersonalizationStateQuery query);
    public virtual void Initialize(string name, NameValueCollection configSettings);
    protected virtual void LoadPersonalizationBlobs(WebPartManager webPartManager, string path, string userName, Byte[]& sharedDataBlob, Byte[]& userDataBlob);
    protected virtual void ResetPersonalizationBlob(WebPartManager webPartManager, string path, string userName);
    public virtual int ResetUserState(string path, DateTime userInactiveSinceDate);
    public virtual int ResetState(PersonalizationScope scope, String[] paths, String[] usernames);
    protected virtual void SavePersonalizationBlob(WebPartManager webPartManager, string path, string userName, Byte[] dataBlob);
}
public class System.Web.UI.WebControls.WebParts.TableCallback : MulticastDelegate {
    public TableCallback(object object, IntPtr method);
    public virtual void Invoke(ICollection tableData);
    public virtual IAsyncResult BeginInvoke(ICollection tableData, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.WebParts.TitleStyle : TableItemStyle {
    [DefaultValueAttribute("False")]
public bool Wrap { get; public set; }
    public virtual bool get_Wrap();
    public virtual void set_Wrap(bool value);
}
public abstract class System.Web.UI.WebControls.WebParts.ToolZone : WebZone {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WebPartDisplayModeCollection AssociatedDisplayModes { get; }
    protected bool Display { get; }
    [DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("ToolZone_EditUIStyle")]
public Style EditUIStyle { get; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Verbs")]
[WebSysDescriptionAttribute("ToolZone_HeaderCloseVerb")]
public WebPartVerb HeaderCloseVerb { get; }
    [DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("ToolZone_HeaderVerbStyle")]
public Style HeaderVerbStyle { get; }
    [LocalizableAttribute("True")]
[WebSysDefaultValueAttribute("")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("ToolZone_InstructionText")]
public string InstructionText { get; public set; }
    [DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("ToolZone_InstructionTextStyle")]
public Style InstructionTextStyle { get; }
    [DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("ToolZone_LabelStyle")]
public Style LabelStyle { get; }
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public bool Visible { get; public set; }
    protected ToolZone(ICollection associatedDisplayModes);
    protected ToolZone(WebPartDisplayMode associatedDisplayMode);
    public WebPartDisplayModeCollection get_AssociatedDisplayModes();
    protected virtual bool get_Display();
    public Style get_EditUIStyle();
    public virtual WebPartVerb get_HeaderCloseVerb();
    public Style get_HeaderVerbStyle();
    public virtual string get_InstructionText();
    public virtual void set_InstructionText(string value);
    public Style get_InstructionTextStyle();
    public Style get_LabelStyle();
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    protected abstract virtual void Close();
    protected virtual void LoadViewState(object savedState);
    protected virtual void OnDisplayModeChanged(object sender, WebPartDisplayModeEventArgs e);
    protected internal virtual void OnInit(EventArgs e);
    protected virtual void OnSelectedWebPartChanged(object sender, WebPartEventArgs e);
    protected virtual void RaisePostBackEvent(string eventArgument);
    protected virtual void RenderFooter(HtmlTextWriter writer);
    protected virtual void RenderHeader(HtmlTextWriter writer);
    protected virtual void RenderVerbs(HtmlTextWriter writer);
    internal void RenderVerbsInternal(HtmlTextWriter writer, ICollection verbs);
    protected virtual void RenderVerb(HtmlTextWriter writer, WebPartVerb verb);
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
}
internal abstract class System.Web.UI.WebControls.WebParts.TransformerConfigurationWizardBase : Wizard {
    protected PropertyDescriptorCollection ConsumerSchema { get; }
    protected String[] OldConsumerNames { get; protected set; }
    protected String[] OldProviderNames { get; protected set; }
    protected PropertyDescriptorCollection ProviderSchema { get; }
    private static TransformerConfigurationWizardBase();
    protected abstract virtual PropertyDescriptorCollection get_ConsumerSchema();
    protected String[] get_OldConsumerNames();
    protected void set_OldConsumerNames(String[] value);
    protected String[] get_OldProviderNames();
    protected void set_OldProviderNames(String[] value);
    protected abstract virtual PropertyDescriptorCollection get_ProviderSchema();
    public sealed virtual void add_Cancelled(EventHandler value);
    public sealed virtual void remove_Cancelled(EventHandler value);
    public sealed virtual void add_Succeeded(EventHandler value);
    public sealed virtual void remove_Succeeded(EventHandler value);
    protected abstract virtual void CreateWizardSteps();
    protected internal virtual void LoadControlState(object savedState);
    protected virtual void OnCancelButtonClick(EventArgs e);
    protected virtual void OnFinishButtonClick(WizardNavigationEventArgs e);
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual object SaveControlState();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.WebParts.TransformerTypeCollection : ReadOnlyCollectionBase {
    public static TransformerTypeCollection Empty;
    public Type Item { get; }
    public TransformerTypeCollection(ICollection transformerTypes);
    public TransformerTypeCollection(TransformerTypeCollection existingTransformerTypes, ICollection transformerTypes);
    private static TransformerTypeCollection();
    internal int Add(Type value);
    public bool Contains(Type value);
    public int IndexOf(Type value);
    public Type get_Item(int index);
    public void CopyTo(Type[] array, int index);
}
[ToolboxItemAttribute("False")]
public class System.Web.UI.WebControls.WebParts.UnauthorizedWebPart : ProxyWebPart {
    public UnauthorizedWebPart(WebPart webPart);
    public UnauthorizedWebPart(string originalID, string originalTypeName, string originalPath, string genericWebPartID);
}
public class System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo : PersonalizationStateInfo {
    public string Username { get; }
    public DateTime LastActivityDate { get; }
    public UserPersonalizationStateInfo(string path, DateTime lastUpdatedDate, int size, string username, DateTime lastActivityDate);
    public string get_Username();
    public DateTime get_LastActivityDate();
}
[AttributeUsageAttribute("128")]
public class System.Web.UI.WebControls.WebParts.WebBrowsableAttribute : Attribute {
    public static WebBrowsableAttribute Yes;
    public static WebBrowsableAttribute No;
    public static WebBrowsableAttribute Default;
    public bool Browsable { get; }
    public WebBrowsableAttribute(bool browsable);
    private static WebBrowsableAttribute();
    public bool get_Browsable();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
[AttributeUsageAttribute("128")]
public class System.Web.UI.WebControls.WebParts.WebDescriptionAttribute : Attribute {
    public static WebDescriptionAttribute Default;
    public string Description { get; }
    protected string DescriptionValue { get; protected set; }
    public WebDescriptionAttribute(string description);
    private static WebDescriptionAttribute();
    public virtual string get_Description();
    protected string get_DescriptionValue();
    protected void set_DescriptionValue(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
[AttributeUsageAttribute("128")]
public class System.Web.UI.WebControls.WebParts.WebDisplayNameAttribute : Attribute {
    public static WebDisplayNameAttribute Default;
    public string DisplayName { get; }
    protected string DisplayNameValue { get; protected set; }
    public WebDisplayNameAttribute(string displayName);
    private static WebDisplayNameAttribute();
    public virtual string get_DisplayName();
    protected string get_DisplayNameValue();
    protected void set_DisplayNameValue(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
[DesignerAttribute("System.Web.UI.Design.WebControls.WebParts.WebPartDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public abstract class System.Web.UI.WebControls.WebParts.WebPart : Part {
    internal static string WholePartIDPrefix;
    [DefaultValueAttribute("True")]
[PersonalizableAttribute("1")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("WebPartBehavior")]
[WebSysDescriptionAttribute("WebPart_AllowClose")]
public bool AllowClose { get; public set; }
    [DefaultValueAttribute("True")]
[PersonalizableAttribute("1")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("WebPartBehavior")]
[WebSysDescriptionAttribute("WebPart_AllowConnect")]
public bool AllowConnect { get; public set; }
    [DefaultValueAttribute("True")]
[PersonalizableAttribute("1")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("WebPartBehavior")]
[WebSysDescriptionAttribute("WebPart_AllowEdit")]
public bool AllowEdit { get; public set; }
    [DefaultValueAttribute("True")]
[PersonalizableAttribute("1")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("WebPartBehavior")]
[WebSysDescriptionAttribute("WebPart_AllowHide")]
public bool AllowHide { get; public set; }
    [DefaultValueAttribute("True")]
[PersonalizableAttribute("1")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("WebPartBehavior")]
[WebSysDescriptionAttribute("WebPart_AllowMinimize")]
public bool AllowMinimize { get; public set; }
    [DefaultValueAttribute("True")]
[PersonalizableAttribute("1")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("WebPartBehavior")]
[WebSysDescriptionAttribute("WebPart_AllowZoneChange")]
public bool AllowZoneChange { get; public set; }
    [DefaultValueAttribute("")]
[PersonalizableAttribute("1")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("WebPartBehavior")]
[WebSysDescriptionAttribute("WebPart_AuthorizationFilter")]
public string AuthorizationFilter { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("WebPartAppearance")]
[PersonalizableAttribute("1")]
[WebSysDescriptionAttribute("WebPart_CatalogIconImageUrl")]
public string CatalogIconImageUrl { get; public set; }
    [PersonalizableAttribute]
public PartChromeState ChromeState { get; public set; }
    [PersonalizableAttribute]
public PartChromeType ChromeType { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ConnectErrorMessage { get; }
    [PersonalizableAttribute("1")]
public string Description { get; public set; }
    [PersonalizableAttribute]
public ContentDirection Direction { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string DisplayTitle { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[PersonalizableAttribute("1")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("WebPartBehavior")]
[WebSysDescriptionAttribute("WebPart_ExportMode")]
public WebPartExportMode ExportMode { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool HasUserData { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool HasSharedData { get; }
    [PersonalizableAttribute]
public Unit Height { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[PersonalizableAttribute("1")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("WebPartBehavior")]
[WebSysDescriptionAttribute("WebPart_HelpMode")]
public WebPartHelpMode HelpMode { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[PersonalizableAttribute("1")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("WebPartBehavior")]
[WebSysDescriptionAttribute("WebPart_HelpUrl")]
public string HelpUrl { get; public set; }
    [DefaultValueAttribute("False")]
[PersonalizableAttribute]
[ThemeableAttribute("False")]
[WebCategoryAttribute("WebPartAppearance")]
[WebSysDescriptionAttribute("WebPart_Hidden")]
public bool Hidden { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsClosed { get; }
    internal bool IsOrphaned { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("WebPartAppearance")]
[WebSysDefaultValueAttribute("WebPart_DefaultImportErrorMessage")]
[PersonalizableAttribute("1")]
[WebSysDescriptionAttribute("WebPart_ImportErrorMessage")]
public string ImportErrorMessage { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsShared { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsStandalone { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsStatic { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[LocalizableAttribute("True")]
public string Subtitle { get; }
    [PersonalizableAttribute]
public string Title { get; public set; }
    internal string TitleBarID { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("WebPartAppearance")]
[PersonalizableAttribute("1")]
[WebSysDescriptionAttribute("WebPart_TitleIconImageUrl")]
public string TitleIconImageUrl { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[PersonalizableAttribute("1")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("WebPartBehavior")]
[WebSysDescriptionAttribute("WebPart_TitleUrl")]
public string TitleUrl { get; public set; }
    internal Dictionary`2<ProviderConnectionPoint, int> TrackerCounter { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WebPartVerbCollection Verbs { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object WebBrowsableObject { get; }
    protected WebPartManager WebPartManager { get; }
    internal string WholePartID { get; }
    [PersonalizableAttribute]
public Unit Width { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WebPartZoneBase Zone { get; }
    internal string ZoneID { get; internal set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int ZoneIndex { get; }
    public virtual bool get_AllowClose();
    public virtual void set_AllowClose(bool value);
    public virtual bool get_AllowConnect();
    public virtual void set_AllowConnect(bool value);
    public virtual bool get_AllowEdit();
    public virtual void set_AllowEdit(bool value);
    public virtual bool get_AllowHide();
    public virtual void set_AllowHide(bool value);
    public virtual bool get_AllowMinimize();
    public virtual void set_AllowMinimize(bool value);
    public virtual bool get_AllowZoneChange();
    public virtual void set_AllowZoneChange(bool value);
    public virtual string get_AuthorizationFilter();
    public virtual void set_AuthorizationFilter(string value);
    public virtual string get_CatalogIconImageUrl();
    public virtual void set_CatalogIconImageUrl(string value);
    public virtual PartChromeState get_ChromeState();
    public virtual void set_ChromeState(PartChromeState value);
    public virtual PartChromeType get_ChromeType();
    public virtual void set_ChromeType(PartChromeType value);
    public string get_ConnectErrorMessage();
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual ContentDirection get_Direction();
    public virtual void set_Direction(ContentDirection value);
    public string get_DisplayTitle();
    public virtual WebPartExportMode get_ExportMode();
    public virtual void set_ExportMode(WebPartExportMode value);
    public bool get_HasUserData();
    public bool get_HasSharedData();
    public virtual Unit get_Height();
    public virtual void set_Height(Unit value);
    public virtual WebPartHelpMode get_HelpMode();
    public virtual void set_HelpMode(WebPartHelpMode value);
    public virtual string get_HelpUrl();
    public virtual void set_HelpUrl(string value);
    public virtual bool get_Hidden();
    public virtual void set_Hidden(bool value);
    public bool get_IsClosed();
    internal bool get_IsOrphaned();
    public virtual string get_ImportErrorMessage();
    public virtual void set_ImportErrorMessage(string value);
    public bool get_IsShared();
    public bool get_IsStandalone();
    public bool get_IsStatic();
    public virtual string get_Subtitle();
    public virtual string get_Title();
    public virtual void set_Title(string value);
    internal string get_TitleBarID();
    public virtual string get_TitleIconImageUrl();
    public virtual void set_TitleIconImageUrl(string value);
    public virtual string get_TitleUrl();
    public virtual void set_TitleUrl(string value);
    internal Dictionary`2<ProviderConnectionPoint, int> get_TrackerCounter();
    public virtual WebPartVerbCollection get_Verbs();
    public virtual object get_WebBrowsableObject();
    protected WebPartManager get_WebPartManager();
    internal string get_WholePartID();
    public virtual Unit get_Width();
    public virtual void set_Width(Unit value);
    public WebPartZoneBase get_Zone();
    internal string get_ZoneID();
    internal void set_ZoneID(string value);
    public int get_ZoneIndex();
    public virtual EditorPartCollection CreateEditorParts();
    protected internal virtual void OnClosing(EventArgs e);
    protected internal virtual void OnConnectModeChanged(EventArgs e);
    protected internal virtual void OnDeleting(EventArgs e);
    protected internal virtual void OnEditModeChanged(EventArgs e);
    internal virtual void PreRenderRecursiveInternal();
    internal void SetConnectErrorMessage(string connectErrorMessage);
    internal void SetHasUserData(bool hasUserData);
    internal void SetHasSharedData(bool hasSharedData);
    internal void SetIsClosed(bool isClosed);
    internal void SetIsShared(bool isShared);
    internal void SetIsStandalone(bool isStandalone);
    internal void SetIsStatic(bool isStatic);
    protected void SetPersonalizationDirty();
    public static void SetPersonalizationDirty(Control control);
    internal void SetWebPartManager(WebPartManager webPartManager);
    internal void SetZoneIndex(int zoneIndex);
    internal Control ToControl();
    protected virtual void TrackViewState();
}
internal abstract class System.Web.UI.WebControls.WebParts.WebPartActionVerb : WebPartVerb {
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public bool Checked { get; public set; }
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
}
public class System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs : WebPartCancelEventArgs {
    public WebPartZoneBase Zone { get; public set; }
    public int ZoneIndex { get; public set; }
    public WebPartAddingEventArgs(WebPart webPart, WebPartZoneBase zone, int zoneIndex);
    public WebPartZoneBase get_Zone();
    public void set_Zone(WebPartZoneBase value);
    public int get_ZoneIndex();
    public void set_ZoneIndex(int value);
}
public class System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler : MulticastDelegate {
    public WebPartAddingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WebPartAddingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebPartAddingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs : EventArgs {
    public string AuthorizationFilter { get; }
    public bool IsAuthorized { get; public set; }
    public bool IsShared { get; }
    public string Path { get; }
    public Type Type { get; }
    public WebPartAuthorizationEventArgs(Type type, string path, string authorizationFilter, bool isShared);
    public string get_AuthorizationFilter();
    public bool get_IsAuthorized();
    public void set_IsAuthorized(bool value);
    public bool get_IsShared();
    public string get_Path();
    public Type get_Type();
}
public class System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler : MulticastDelegate {
    public WebPartAuthorizationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WebPartAuthorizationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebPartAuthorizationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs : CancelEventArgs {
    public WebPart WebPart { get; public set; }
    public WebPartCancelEventArgs(WebPart webPart);
    public WebPart get_WebPart();
    public void set_WebPart(WebPart value);
}
public class System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler : MulticastDelegate {
    public WebPartCancelEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WebPartCancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebPartCancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Web.UI.WebControls.WebParts.WebPartCatalogAddVerb : WebPartActionVerb {
    [WebSysDefaultValueAttribute("WebPartCatalogAddVerb_Description")]
public string Description { get; public set; }
    [WebSysDefaultValueAttribute("WebPartCatalogAddVerb_Text")]
public string Text { get; public set; }
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
internal class System.Web.UI.WebControls.WebParts.WebPartCatalogCloseVerb : WebPartActionVerb {
    [WebSysDefaultValueAttribute("WebPartCatalogCloseVerb_Description")]
public string Description { get; public set; }
    [WebSysDefaultValueAttribute("WebPartCatalogCloseVerb_Text")]
public string Text { get; public set; }
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
public class System.Web.UI.WebControls.WebParts.WebPartChrome : object {
    protected bool DragDropEnabled { get; }
    protected WebPartManager WebPartManager { get; }
    protected WebPartZoneBase Zone { get; }
    public WebPartChrome(WebPartZoneBase zone, WebPartManager manager);
    protected bool get_DragDropEnabled();
    protected WebPartManager get_WebPartManager();
    protected WebPartZoneBase get_Zone();
    protected virtual Style CreateWebPartChromeStyle(WebPart webPart, PartChromeType chromeType);
    protected string GetWebPartChromeClientID(WebPart webPart);
    protected string GetWebPartTitleClientID(WebPart webPart);
    protected virtual WebPartVerbCollection GetWebPartVerbs(WebPart webPart);
    protected virtual WebPartVerbCollection FilterWebPartVerbs(WebPartVerbCollection verbs, WebPart webPart);
    public virtual void PerformPreRender();
    protected virtual void RenderPartContents(HtmlTextWriter writer, WebPart webPart);
    public virtual void RenderWebPart(HtmlTextWriter writer, WebPart webPart);
}
internal class System.Web.UI.WebControls.WebParts.WebPartCloseVerb : WebPartActionVerb {
    [WebSysDefaultValueAttribute("WebPartCloseVerb_Description")]
public string Description { get; public set; }
    [WebSysDefaultValueAttribute("WebPartCloseVerb_Text")]
public string Text { get; public set; }
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.WebParts.WebPartCollection : ReadOnlyCollectionBase {
    public WebPart Item { get; }
    public WebPart Item { get; }
    public WebPartCollection(ICollection webParts);
    internal int Add(WebPart value);
    public bool Contains(WebPart value);
    public int IndexOf(WebPart value);
    public WebPart get_Item(int index);
    public WebPart get_Item(string id);
    public void CopyTo(WebPart[] array, int index);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[ParseChildrenAttribute("True", "Transformers")]
public class System.Web.UI.WebControls.WebParts.WebPartConnection : object {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WebPart Consumer { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ConsumerConnectionPoint ConsumerConnectionPoint { get; }
    [DefaultValueAttribute("default")]
public string ConsumerConnectionPointID { get; public set; }
    [DefaultValueAttribute("")]
public string ConsumerID { get; public set; }
    internal bool Deleted { get; internal set; }
    [DefaultValueAttribute("")]
public string ID { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsActive { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsShared { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsStatic { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WebPart Provider { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ProviderConnectionPoint ProviderConnectionPoint { get; }
    [DefaultValueAttribute("default")]
public string ProviderConnectionPointID { get; public set; }
    [DefaultValueAttribute("")]
public string ProviderID { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WebPartTransformer Transformer { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[PersistenceModeAttribute("2")]
public WebPartTransformerCollection Transformers { get; }
    public WebPart get_Consumer();
    public ConsumerConnectionPoint get_ConsumerConnectionPoint();
    public string get_ConsumerConnectionPointID();
    public void set_ConsumerConnectionPointID(string value);
    public string get_ConsumerID();
    public void set_ConsumerID(string value);
    internal bool get_Deleted();
    internal void set_Deleted(bool value);
    public string get_ID();
    public void set_ID(string value);
    public bool get_IsActive();
    public bool get_IsShared();
    public bool get_IsStatic();
    public WebPart get_Provider();
    public ProviderConnectionPoint get_ProviderConnectionPoint();
    public string get_ProviderConnectionPointID();
    public void set_ProviderConnectionPointID(string value);
    public string get_ProviderID();
    public void set_ProviderID(string value);
    public WebPartTransformer get_Transformer();
    public WebPartTransformerCollection get_Transformers();
    internal void Activate();
    internal bool ConflictsWith(WebPartConnection otherConnection);
    internal bool ConflictsWithConsumer(WebPartConnection otherConnection);
    internal bool ConflictsWithProvider(WebPartConnection otherConnection);
    internal void SetIsShared(bool isShared);
    internal void SetIsStatic(bool isStatic);
    internal void SetTransformer(WebPartTransformer transformer);
    internal void SetWebPartManager(WebPartManager webPartManager);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[EditorAttribute("System.ComponentModel.Design.CollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public class System.Web.UI.WebControls.WebParts.WebPartConnectionCollection : CollectionBase {
    public bool IsReadOnly { get; }
    public WebPartConnection Item { get; public set; }
    public WebPartConnection Item { get; }
    internal WebPartConnectionCollection(WebPartManager webPartManager);
    public bool get_IsReadOnly();
    public WebPartConnection get_Item(int index);
    public void set_Item(int index, WebPartConnection value);
    public WebPartConnection get_Item(string id);
    public int Add(WebPartConnection value);
    public bool Contains(WebPartConnection value);
    internal bool ContainsProvider(WebPart provider);
    public void CopyTo(WebPartConnection[] array, int index);
    public int IndexOf(WebPartConnection value);
    public void Insert(int index, WebPartConnection value);
    protected virtual void OnClear();
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnRemove(int index, object value);
    protected virtual void OnSet(int index, object oldValue, object newValue);
    protected virtual void OnValidate(object value);
    public void Remove(WebPartConnection value);
    internal void SetReadOnly(string exceptionMessage);
}
public class System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs : CancelEventArgs {
    public WebPartConnection Connection { get; }
    public WebPart Consumer { get; }
    public ConsumerConnectionPoint ConsumerConnectionPoint { get; }
    public WebPart Provider { get; }
    public ProviderConnectionPoint ProviderConnectionPoint { get; }
    public WebPartConnectionsCancelEventArgs(WebPart provider, ProviderConnectionPoint providerConnectionPoint, WebPart consumer, ConsumerConnectionPoint consumerConnectionPoint);
    public WebPartConnectionsCancelEventArgs(WebPart provider, ProviderConnectionPoint providerConnectionPoint, WebPart consumer, ConsumerConnectionPoint consumerConnectionPoint, WebPartConnection connection);
    public WebPartConnection get_Connection();
    public WebPart get_Consumer();
    public ConsumerConnectionPoint get_ConsumerConnectionPoint();
    public WebPart get_Provider();
    public ProviderConnectionPoint get_ProviderConnectionPoint();
}
public class System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler : MulticastDelegate {
    public WebPartConnectionsCancelEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WebPartConnectionsCancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebPartConnectionsCancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelVerb : WebPartActionVerb {
    [WebSysDefaultValueAttribute("WebPartConnectionsCancelVerb_Description")]
public string Description { get; public set; }
    [WebSysDefaultValueAttribute("WebPartConnectionsCancelVerb_Text")]
public string Text { get; public set; }
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
internal class System.Web.UI.WebControls.WebParts.WebPartConnectionsCloseVerb : WebPartActionVerb {
    [WebSysDefaultValueAttribute("WebPartConnectionsCloseVerb_Description")]
public string Description { get; public set; }
    [WebSysDefaultValueAttribute("WebPartConnectionsCloseVerb_Text")]
public string Text { get; public set; }
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
internal class System.Web.UI.WebControls.WebParts.WebPartConnectionsConfigureVerb : WebPartActionVerb {
    [WebSysDefaultValueAttribute("WebPartConnectionsConfigureVerb_Description")]
public string Description { get; public set; }
    [WebSysDefaultValueAttribute("WebPartConnectionsConfigureVerb_Text")]
public string Text { get; public set; }
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
internal class System.Web.UI.WebControls.WebParts.WebPartConnectionsConnectVerb : WebPartActionVerb {
    [WebSysDefaultValueAttribute("WebPartConnectionsConnectVerb_Description")]
public string Description { get; public set; }
    [WebSysDefaultValueAttribute("WebPartConnectionsConnectVerb_Text")]
public string Text { get; public set; }
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
internal class System.Web.UI.WebControls.WebParts.WebPartConnectionsDisconnectVerb : WebPartActionVerb {
    [WebSysDefaultValueAttribute("WebPartConnectionsDisconnectVerb_Description")]
public string Description { get; public set; }
    [WebSysDefaultValueAttribute("WebPartConnectionsDisconnectVerb_Text")]
public string Text { get; public set; }
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
public class System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs : EventArgs {
    public WebPartConnection Connection { get; }
    public WebPart Consumer { get; }
    public ConsumerConnectionPoint ConsumerConnectionPoint { get; }
    public WebPart Provider { get; }
    public ProviderConnectionPoint ProviderConnectionPoint { get; }
    public WebPartConnectionsEventArgs(WebPart provider, ProviderConnectionPoint providerConnectionPoint, WebPart consumer, ConsumerConnectionPoint consumerConnectionPoint);
    public WebPartConnectionsEventArgs(WebPart provider, ProviderConnectionPoint providerConnectionPoint, WebPart consumer, ConsumerConnectionPoint consumerConnectionPoint, WebPartConnection connection);
    public WebPartConnection get_Connection();
    public WebPart get_Consumer();
    public ConsumerConnectionPoint get_ConsumerConnectionPoint();
    public WebPart get_Provider();
    public ProviderConnectionPoint get_ProviderConnectionPoint();
}
public class System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler : MulticastDelegate {
    public WebPartConnectionsEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WebPartConnectionsEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebPartConnectionsEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Web.UI.WebControls.WebParts.WebPartConnectVerb : WebPartActionVerb {
    [WebSysDefaultValueAttribute("WebPartConnectVerb_Description")]
public string Description { get; public set; }
    [WebSysDefaultValueAttribute("WebPartConnectVerb_Text")]
public string Text { get; public set; }
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
internal class System.Web.UI.WebControls.WebParts.WebPartDeleteVerb : WebPartActionVerb {
    [WebSysDefaultValueAttribute("WebPartDeleteVerb_Description")]
public string Description { get; public set; }
    [WebSysDefaultValueAttribute("WebPartDeleteVerb_Text")]
public string Text { get; public set; }
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
public class System.Web.UI.WebControls.WebParts.WebPartDescription : object {
    public string CatalogIconImageUrl { get; }
    public string Description { get; }
    public string ID { get; }
    public string Title { get; }
    internal WebPart WebPart { get; }
    public WebPartDescription(string id, string title, string description, string imageUrl);
    public WebPartDescription(WebPart part);
    public string get_CatalogIconImageUrl();
    public string get_Description();
    public string get_ID();
    public string get_Title();
    internal WebPart get_WebPart();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection : ReadOnlyCollectionBase {
    public WebPartDescription Item { get; }
    public WebPartDescription Item { get; }
    public WebPartDescriptionCollection(ICollection webPartDescriptions);
    public bool Contains(WebPartDescription value);
    public int IndexOf(WebPartDescription value);
    public WebPartDescription get_Item(int index);
    public WebPartDescription get_Item(string id);
    public void CopyTo(WebPartDescription[] array, int index);
}
public abstract class System.Web.UI.WebControls.WebParts.WebPartDisplayMode : object {
    public bool AllowPageDesign { get; }
    public bool AssociatedWithToolZone { get; }
    public string Name { get; }
    public bool RequiresPersonalization { get; }
    public bool ShowHiddenWebParts { get; }
    protected WebPartDisplayMode(string name);
    public virtual bool get_AllowPageDesign();
    public virtual bool get_AssociatedWithToolZone();
    public string get_Name();
    public virtual bool get_RequiresPersonalization();
    public virtual bool get_ShowHiddenWebParts();
    public virtual bool IsEnabled(WebPartManager webPartManager);
}
public class System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs : CancelEventArgs {
    public WebPartDisplayMode NewDisplayMode { get; public set; }
    public WebPartDisplayModeCancelEventArgs(WebPartDisplayMode newDisplayMode);
    public WebPartDisplayMode get_NewDisplayMode();
    public void set_NewDisplayMode(WebPartDisplayMode value);
}
public class System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler : MulticastDelegate {
    public WebPartDisplayModeCancelEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WebPartDisplayModeCancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebPartDisplayModeCancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection : CollectionBase {
    public bool IsReadOnly { get; }
    public WebPartDisplayMode Item { get; }
    public WebPartDisplayMode Item { get; }
    public bool get_IsReadOnly();
    public WebPartDisplayMode get_Item(int index);
    public WebPartDisplayMode get_Item(string modeName);
    public int Add(WebPartDisplayMode value);
    internal int AddInternal(WebPartDisplayMode value);
    public bool Contains(WebPartDisplayMode value);
    public void CopyTo(WebPartDisplayMode[] array, int index);
    public int IndexOf(WebPartDisplayMode value);
    public void Insert(int index, WebPartDisplayMode value);
    protected virtual void OnClear();
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnRemove(int index, object value);
    protected virtual void OnSet(int index, object oldValue, object newValue);
    protected virtual void OnValidate(object value);
    internal void SetReadOnly(string exceptionMessage);
}
public class System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs : EventArgs {
    public WebPartDisplayMode OldDisplayMode { get; public set; }
    public WebPartDisplayModeEventArgs(WebPartDisplayMode oldDisplayMode);
    public WebPartDisplayMode get_OldDisplayMode();
    public void set_OldDisplayMode(WebPartDisplayMode value);
}
public class System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler : MulticastDelegate {
    public WebPartDisplayModeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WebPartDisplayModeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebPartDisplayModeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Web.UI.WebControls.WebParts.WebPartEditorApplyVerb : WebPartActionVerb {
    [WebSysDefaultValueAttribute("WebPartEditorApplyVerb_Description")]
public string Description { get; public set; }
    [WebSysDefaultValueAttribute("WebPartEditorApplyVerb_Text")]
public string Text { get; public set; }
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
internal class System.Web.UI.WebControls.WebParts.WebPartEditorCancelVerb : WebPartActionVerb {
    [WebSysDefaultValueAttribute("WebPartEditorCancelVerb_Description")]
public string Description { get; public set; }
    [WebSysDefaultValueAttribute("WebPartEditorCancelVerb_Text")]
public string Text { get; public set; }
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
internal class System.Web.UI.WebControls.WebParts.WebPartEditorOKVerb : WebPartActionVerb {
    [WebSysDefaultValueAttribute("WebPartEditorOKVerb_Description")]
public string Description { get; public set; }
    [WebSysDefaultValueAttribute("WebPartEditorOKVerb_Text")]
public string Text { get; public set; }
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
internal class System.Web.UI.WebControls.WebParts.WebPartEditVerb : WebPartActionVerb {
    [WebSysDefaultValueAttribute("WebPartEditVerb_Description")]
public string Description { get; public set; }
    [WebSysDefaultValueAttribute("WebPartEditVerb_Text")]
public string Text { get; public set; }
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
public class System.Web.UI.WebControls.WebParts.WebPartEventArgs : EventArgs {
    public WebPart WebPart { get; }
    public WebPartEventArgs(WebPart webPart);
    public WebPart get_WebPart();
}
public class System.Web.UI.WebControls.WebParts.WebPartEventHandler : MulticastDelegate {
    public WebPartEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WebPartEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebPartEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Web.UI.WebControls.WebParts.WebPartExportMode : Enum {
    public int value__;
    public static WebPartExportMode None;
    public static WebPartExportMode All;
    public static WebPartExportMode NonSensitiveData;
}
internal class System.Web.UI.WebControls.WebParts.WebPartExportVerb : WebPartActionVerb {
    [WebSysDefaultValueAttribute("WebPartExportVerb_Description")]
public string Description { get; public set; }
    [WebSysDefaultValueAttribute("WebPartExportVerb_Text")]
public string Text { get; public set; }
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
internal class System.Web.UI.WebControls.WebParts.WebPartHeaderCloseVerb : WebPartActionVerb {
    [WebSysDefaultValueAttribute("WebPartHeaderCloseVerb_Description")]
public string Description { get; public set; }
    [WebSysDefaultValueAttribute("WebPartHeaderCloseVerb_Text")]
public string Text { get; public set; }
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
public enum System.Web.UI.WebControls.WebParts.WebPartHelpMode : Enum {
    public int value__;
    public static WebPartHelpMode Modal;
    public static WebPartHelpMode Modeless;
    public static WebPartHelpMode Navigate;
}
internal class System.Web.UI.WebControls.WebParts.WebPartHelpVerb : WebPartActionVerb {
    [WebSysDefaultValueAttribute("WebPartHelpVerb_Description")]
public string Description { get; public set; }
    [WebSysDefaultValueAttribute("WebPartHelpVerb_Text")]
public string Text { get; public set; }
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
[BindableAttribute("False")]
[DesignerAttribute("System.Web.UI.Design.WebControls.WebParts.WebPartManagerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[NonVisualControlAttribute]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
[ViewStateModeByIdAttribute]
public class System.Web.UI.WebControls.WebParts.WebPartManager : Control {
    public static WebPartDisplayMode CatalogDisplayMode;
    public static WebPartDisplayMode ConnectDisplayMode;
    public static WebPartDisplayMode DesignDisplayMode;
    public static WebPartDisplayMode EditDisplayMode;
    public static WebPartDisplayMode BrowseDisplayMode;
    internal static string ExportRootElement;
    internal static string ExportPartElement;
    internal static string ExportPartNamespaceAttribute;
    internal static string ExportPartNamespaceValue;
    internal static string ExportMetaDataElement;
    internal static string ExportTypeElement;
    internal static string ExportErrorMessageElement;
    internal static string ExportDataElement;
    internal static string ExportPropertiesElement;
    internal static string ExportPropertyElement;
    internal static string ExportTypeNameAttribute;
    internal static string ExportUserControlSrcAttribute;
    internal static string ExportPropertyNameAttribute;
    internal static string ExportGenericPartPropertiesElement;
    internal static string ExportIPersonalizableElement;
    internal static string ExportPropertyTypeAttribute;
    internal static string ExportPropertyScopeAttribute;
    internal static string ExportPropertyNullAttribute;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public TransformerTypeCollection AvailableTransformers { get; }
    [WebCategoryAttribute("Behavior")]
[WebSysDefaultValueAttribute("WebPartManager_DefaultCloseProviderWarning")]
[WebSysDescriptionAttribute("WebPartManager_CloseProviderWarning")]
public string CloseProviderWarning { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WebPartConnectionCollection Connections { get; }
    [EditorBrowsableAttribute("1")]
public ControlCollection Controls { get; }
    [WebCategoryAttribute("Behavior")]
[WebSysDefaultValueAttribute("WebPartManager_DefaultDeleteWarning")]
[WebSysDescriptionAttribute("WebPartManager_DeleteWarning")]
public string DeleteWarning { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WebPartDisplayMode DisplayMode { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WebPartDisplayModeCollection DisplayModes { get; }
    protected internal WebPartConnectionCollection DynamicConnections { get; }
    [DefaultValueAttribute("True")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("WebPartManager_EnableClientScript")]
public bool EnableClientScript { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("True")]
[EditorBrowsableAttribute("1")]
public bool EnableTheming { get; public set; }
    [WebCategoryAttribute("Behavior")]
[WebSysDefaultValueAttribute("WebPartChrome_ConfirmExportSensitive")]
[WebSysDescriptionAttribute("WebPartManager_ExportSensitiveDataWarning")]
public string ExportSensitiveDataWarning { get; public set; }
    [EditorBrowsableAttribute("1")]
protected WebPartManagerInternals Internals { get; }
    protected bool IsCustomPersonalizationStateDirty { get; }
    protected PermissionSet MediumPermissionSet { get; }
    protected PermissionSet MinimalPermissionSet { get; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("WebPartManager_Personalization")]
public WebPartPersonalization Personalization { get; }
    internal bool RenderClientScript { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WebPart SelectedWebPart { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[EditorBrowsableAttribute("1")]
public string SkinID { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("WebPartManager_StaticConnections")]
public WebPartConnectionCollection StaticConnections { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WebPartDisplayModeCollection SupportedDisplayModes { get; }
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public bool Visible { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WebPartCollection WebParts { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WebPartZoneCollection Zones { get; }
    private bool System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty { get; }
    private static WebPartManager();
    public TransformerTypeCollection get_AvailableTransformers();
    public virtual string get_CloseProviderWarning();
    public virtual void set_CloseProviderWarning(string value);
    public WebPartConnectionCollection get_Connections();
    public virtual ControlCollection get_Controls();
    public virtual string get_DeleteWarning();
    public virtual void set_DeleteWarning(string value);
    public virtual WebPartDisplayMode get_DisplayMode();
    public virtual void set_DisplayMode(WebPartDisplayMode value);
    public WebPartDisplayModeCollection get_DisplayModes();
    protected internal WebPartConnectionCollection get_DynamicConnections();
    public virtual bool get_EnableClientScript();
    public virtual void set_EnableClientScript(bool value);
    public virtual bool get_EnableTheming();
    public virtual void set_EnableTheming(bool value);
    public virtual string get_ExportSensitiveDataWarning();
    public virtual void set_ExportSensitiveDataWarning(string value);
    protected WebPartManagerInternals get_Internals();
    protected virtual bool get_IsCustomPersonalizationStateDirty();
    protected virtual PermissionSet get_MediumPermissionSet();
    protected virtual PermissionSet get_MinimalPermissionSet();
    public WebPartPersonalization get_Personalization();
    internal bool get_RenderClientScript();
    public WebPart get_SelectedWebPart();
    public virtual string get_SkinID();
    public virtual void set_SkinID(string value);
    public WebPartConnectionCollection get_StaticConnections();
    public WebPartDisplayModeCollection get_SupportedDisplayModes();
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public WebPartCollection get_WebParts();
    public WebPartZoneCollection get_Zones();
    public void add_AuthorizeWebPart(WebPartAuthorizationEventHandler value);
    public void remove_AuthorizeWebPart(WebPartAuthorizationEventHandler value);
    public void add_ConnectionsActivated(EventHandler value);
    public void remove_ConnectionsActivated(EventHandler value);
    public void add_ConnectionsActivating(EventHandler value);
    public void remove_ConnectionsActivating(EventHandler value);
    public void add_DisplayModeChanged(WebPartDisplayModeEventHandler value);
    public void remove_DisplayModeChanged(WebPartDisplayModeEventHandler value);
    public void add_DisplayModeChanging(WebPartDisplayModeCancelEventHandler value);
    public void remove_DisplayModeChanging(WebPartDisplayModeCancelEventHandler value);
    public void add_SelectedWebPartChanged(WebPartEventHandler value);
    public void remove_SelectedWebPartChanged(WebPartEventHandler value);
    public void add_SelectedWebPartChanging(WebPartCancelEventHandler value);
    public void remove_SelectedWebPartChanging(WebPartCancelEventHandler value);
    public void add_WebPartAdded(WebPartEventHandler value);
    public void remove_WebPartAdded(WebPartEventHandler value);
    public void add_WebPartAdding(WebPartAddingEventHandler value);
    public void remove_WebPartAdding(WebPartAddingEventHandler value);
    public void add_WebPartClosed(WebPartEventHandler value);
    public void remove_WebPartClosed(WebPartEventHandler value);
    public void add_WebPartClosing(WebPartCancelEventHandler value);
    public void remove_WebPartClosing(WebPartCancelEventHandler value);
    public void add_WebPartDeleted(WebPartEventHandler value);
    public void remove_WebPartDeleted(WebPartEventHandler value);
    public void add_WebPartDeleting(WebPartCancelEventHandler value);
    public void remove_WebPartDeleting(WebPartCancelEventHandler value);
    public void add_WebPartMoved(WebPartEventHandler value);
    public void remove_WebPartMoved(WebPartEventHandler value);
    public void add_WebPartMoving(WebPartMovingEventHandler value);
    public void remove_WebPartMoving(WebPartMovingEventHandler value);
    public void add_WebPartsConnected(WebPartConnectionsEventHandler value);
    public void remove_WebPartsConnected(WebPartConnectionsEventHandler value);
    public void add_WebPartsConnecting(WebPartConnectionsCancelEventHandler value);
    public void remove_WebPartsConnecting(WebPartConnectionsCancelEventHandler value);
    public void add_WebPartsDisconnected(WebPartConnectionsEventHandler value);
    public void remove_WebPartsDisconnected(WebPartConnectionsEventHandler value);
    public void add_WebPartsDisconnecting(WebPartConnectionsCancelEventHandler value);
    public void remove_WebPartsDisconnecting(WebPartConnectionsCancelEventHandler value);
    protected virtual void ActivateConnections();
    internal void AddWebPart(WebPart webPart);
    public WebPart AddWebPart(WebPart webPart, WebPartZoneBase zone, int zoneIndex);
    public virtual void BeginWebPartConnecting(WebPart webPart);
    public virtual void BeginWebPartEditing(WebPart webPart);
    protected virtual bool CheckRenderClientScript();
    public bool CanConnectWebParts(WebPart provider, ProviderConnectionPoint providerConnectionPoint, WebPart consumer, ConsumerConnectionPoint consumerConnectionPoint);
    public virtual bool CanConnectWebParts(WebPart provider, ProviderConnectionPoint providerConnectionPoint, WebPart consumer, ConsumerConnectionPoint consumerConnectionPoint, WebPartTransformer transformer);
    public void CloseWebPart(WebPart webPart);
    public WebPartConnection ConnectWebParts(WebPart provider, ProviderConnectionPoint providerConnectionPoint, WebPart consumer, ConsumerConnectionPoint consumerConnectionPoint);
    public virtual WebPartConnection ConnectWebParts(WebPart provider, ProviderConnectionPoint providerConnectionPoint, WebPart consumer, ConsumerConnectionPoint consumerConnectionPoint, WebPartTransformer transformer);
    protected virtual WebPart CopyWebPart(WebPart webPart);
    protected virtual TransformerTypeCollection CreateAvailableTransformers();
    protected sealed virtual ControlCollection CreateControlCollection();
    protected virtual WebPartDisplayModeCollection CreateDisplayModes();
    protected virtual string CreateDynamicConnectionID();
    protected virtual string CreateDynamicWebPartID(Type webPartType);
    protected virtual ErrorWebPart CreateErrorWebPart(string originalID, string originalTypeName, string originalPath, string genericWebPartID, string errorMessage);
    protected virtual WebPartPersonalization CreatePersonalization();
    public virtual GenericWebPart CreateWebPart(Control control);
    internal static GenericWebPart CreateWebPartStatic(Control control);
    public void DeleteWebPart(WebPart webPart);
    protected virtual void DisconnectWebPart(WebPart webPart);
    public virtual void DisconnectWebParts(WebPartConnection connection);
    public virtual void EndWebPartConnecting();
    public virtual void EndWebPartEditing();
    public virtual void ExportWebPart(WebPart webPart, XmlWriter writer);
    [EditorBrowsableAttribute("1")]
public virtual void Focus();
    internal ConsumerConnectionPoint GetConsumerConnectionPoint(WebPart webPart, string connectionPointID);
    public virtual ConsumerConnectionPointCollection GetConsumerConnectionPoints(WebPart webPart);
    public static WebPartManager GetCurrentWebPartManager(Page page);
    protected internal virtual string GetDisplayTitle(WebPart webPart);
    internal ConsumerConnectionPointCollection GetEnabledConsumerConnectionPoints(WebPart webPart);
    internal ProviderConnectionPointCollection GetEnabledProviderConnectionPoints(WebPart webPart);
    public string GetExportUrl(WebPart webPart);
    public GenericWebPart GetGenericWebPart(Control control);
    internal ProviderConnectionPoint GetProviderConnectionPoint(WebPart webPart, string connectionPointID);
    public virtual ProviderConnectionPointCollection GetProviderConnectionPoints(WebPart webPart);
    internal WebPartCollection GetWebPartsForZone(WebPartZoneBase zone);
    internal WebPartConnection GetConnectionForConsumer(WebPart consumer, ConsumerConnectionPoint connectionPoint);
    internal WebPartConnection GetConnectionForProvider(WebPart provider, ProviderConnectionPoint connectionPoint);
    public virtual WebPart ImportWebPart(XmlReader reader, String& errorMessage);
    public virtual bool IsAuthorized(Type type, string path, string authorizationFilter, bool isShared);
    public bool IsAuthorized(WebPart webPart);
    internal bool IsConsumerConnected(WebPart consumer, ConsumerConnectionPoint connectionPoint);
    internal bool IsProviderConnected(WebPart provider, ProviderConnectionPoint connectionPoint);
    protected internal virtual void LoadControlState(object savedState);
    protected virtual void LoadCustomPersonalizationState(PersonalizationDictionary state);
    public virtual void MoveWebPart(WebPart webPart, WebPartZoneBase zone, int zoneIndex);
    protected virtual void OnAuthorizeWebPart(WebPartAuthorizationEventArgs e);
    protected virtual void OnConnectionsActivated(EventArgs e);
    protected virtual void OnConnectionsActivating(EventArgs e);
    protected virtual void OnDisplayModeChanged(WebPartDisplayModeEventArgs e);
    protected virtual void OnDisplayModeChanging(WebPartDisplayModeCancelEventArgs e);
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void OnUnload(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void OnSelectedWebPartChanged(WebPartEventArgs e);
    protected virtual void OnSelectedWebPartChanging(WebPartCancelEventArgs e);
    protected virtual void OnWebPartAdded(WebPartEventArgs e);
    protected virtual void OnWebPartAdding(WebPartAddingEventArgs e);
    protected virtual void OnWebPartClosed(WebPartEventArgs e);
    protected virtual void OnWebPartClosing(WebPartCancelEventArgs e);
    protected virtual void OnWebPartDeleted(WebPartEventArgs e);
    protected virtual void OnWebPartDeleting(WebPartCancelEventArgs e);
    protected virtual void OnWebPartMoved(WebPartEventArgs e);
    protected virtual void OnWebPartMoving(WebPartMovingEventArgs e);
    protected virtual void OnWebPartsConnected(WebPartConnectionsEventArgs e);
    protected virtual void OnWebPartsConnecting(WebPartConnectionsCancelEventArgs e);
    protected virtual void OnWebPartsDisconnected(WebPartConnectionsEventArgs e);
    protected virtual void OnWebPartsDisconnecting(WebPartConnectionsCancelEventArgs e);
    protected virtual void RegisterClientScript();
    internal void RegisterZone(WebZone zone);
    internal void RemoveWebPart(WebPart webPart);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected internal virtual object SaveControlState();
    protected virtual void SaveCustomPersonalizationState(PersonalizationDictionary state);
    protected void SetPersonalizationDirty();
    protected void SetSelectedWebPart(WebPart webPart);
    protected virtual void TrackViewState();
    private sealed virtual override bool System.Web.UI.WebControls.WebParts.IPersonalizable.get_IsDirty();
    private sealed virtual override void System.Web.UI.WebControls.WebParts.IPersonalizable.Load(PersonalizationDictionary state);
    private sealed virtual override void System.Web.UI.WebControls.WebParts.IPersonalizable.Save(PersonalizationDictionary state);
}
public class System.Web.UI.WebControls.WebParts.WebPartManagerInternals : object {
    internal WebPartManagerInternals(WebPartManager manager);
    public void AddWebPart(WebPart webPart);
    public void CallOnClosing(WebPart webPart);
    public void CallOnConnectModeChanged(WebPart webPart);
    public void CallOnDeleting(WebPart webPart);
    public void CallOnEditModeChanged(WebPart webPart);
    public object CreateObjectFromType(Type type);
    public bool ConnectionDeleted(WebPartConnection connection);
    public void DeleteConnection(WebPartConnection connection);
    public string GetZoneID(WebPart webPart);
    public void LoadConfigurationState(WebPartTransformer transformer, object savedState);
    public void RemoveWebPart(WebPart webPart);
    public object SaveConfigurationState(WebPartTransformer transformer);
    public void SetConnectErrorMessage(WebPart webPart, string connectErrorMessage);
    public void SetHasUserData(WebPart webPart, bool hasUserData);
    public void SetHasSharedData(WebPart webPart, bool hasSharedData);
    public void SetIsClosed(WebPart webPart, bool isClosed);
    public void SetIsShared(WebPartConnection connection, bool isShared);
    public void SetIsShared(WebPart webPart, bool isShared);
    public void SetIsStandalone(WebPart webPart, bool isStandalone);
    public void SetIsStatic(WebPartConnection connection, bool isStatic);
    public void SetIsStatic(WebPart webPart, bool isStatic);
    public void SetTransformer(WebPartConnection connection, WebPartTransformer transformer);
    public void SetZoneID(WebPart webPart, string zoneID);
    public void SetZoneIndex(WebPart webPart, int zoneIndex);
}
internal class System.Web.UI.WebControls.WebParts.WebPartMenu : object {
    public WebPartMenu(IWebPartMenuUser menuUser);
    public void RegisterStyles();
    public void Render(HtmlTextWriter writer, string clientID);
    public void Render(HtmlTextWriter writer, ICollection verbs, string clientID, WebPart associatedWebPart, WebPartManager webPartManager);
}
public class System.Web.UI.WebControls.WebParts.WebPartMenuStyle : TableStyle {
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[TypeConverterAttribute("System.Web.UI.WebControls.WebColorConverter")]
[WebSysDescriptionAttribute("WebPartMenuStyle_ShadowColor")]
public Color ShadowColor { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public HorizontalAlign HorizontalAlign { get; public set; }
    public WebPartMenuStyle(StateBag bag);
    public Color get_ShadowColor();
    public void set_ShadowColor(Color value);
    public virtual HorizontalAlign get_HorizontalAlign();
    public virtual void set_HorizontalAlign(HorizontalAlign value);
    protected virtual void FillStyleAttributes(CssStyleCollection attributes, IUrlResolutionService urlResolver);
    public virtual void CopyFrom(Style s);
    public virtual void MergeWith(Style s);
    public virtual void Reset();
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
internal class System.Web.UI.WebControls.WebParts.WebPartMinimizeVerb : WebPartActionVerb {
    [WebSysDefaultValueAttribute("WebPartMinimizeVerb_Description")]
public string Description { get; public set; }
    [WebSysDefaultValueAttribute("WebPartMinimizeVerb_Text")]
public string Text { get; public set; }
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
public class System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs : WebPartCancelEventArgs {
    public WebPartZoneBase Zone { get; public set; }
    public int ZoneIndex { get; public set; }
    public WebPartMovingEventArgs(WebPart webPart, WebPartZoneBase zone, int zoneIndex);
    public WebPartZoneBase get_Zone();
    public void set_Zone(WebPartZoneBase value);
    public int get_ZoneIndex();
    public void set_ZoneIndex(int value);
}
public class System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler : MulticastDelegate {
    public WebPartMovingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WebPartMovingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebPartMovingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[TypeConverterAttribute("System.Web.UI.WebControls.EmptyStringExpandableObjectConverter")]
public class System.Web.UI.WebControls.WebParts.WebPartPersonalization : object {
    public static WebPartUserCapability ModifyStateUserCapability;
    public static WebPartUserCapability EnterSharedScopeUserCapability;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool CanEnterSharedScope { get; }
    [DefaultValueAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("WebPartPersonalization_Enabled")]
public bool Enabled { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool HasPersonalizationState { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("WebPartPersonalization_InitialScope")]
public PersonalizationScope InitialScope { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsEnabled { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected bool IsInitialized { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsModifiable { get; }
    [DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[WebSysDescriptionAttribute("WebPartPersonalization_ProviderName")]
public string ProviderName { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public PersonalizationScope Scope { get; }
    internal bool ScopeToggled { get; }
    protected bool ShouldResetPersonalizationState { get; protected set; }
    protected IDictionary UserCapabilities { get; }
    protected WebPartManager WebPartManager { get; }
    public WebPartPersonalization(WebPartManager owner);
    private static WebPartPersonalization();
    public bool get_CanEnterSharedScope();
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public virtual bool get_HasPersonalizationState();
    public virtual PersonalizationScope get_InitialScope();
    public virtual void set_InitialScope(PersonalizationScope value);
    public bool get_IsEnabled();
    protected bool get_IsInitialized();
    public bool get_IsModifiable();
    public virtual string get_ProviderName();
    public virtual void set_ProviderName(string value);
    public PersonalizationScope get_Scope();
    internal bool get_ScopeToggled();
    protected bool get_ShouldResetPersonalizationState();
    protected void set_ShouldResetPersonalizationState(bool value);
    protected virtual IDictionary get_UserCapabilities();
    protected WebPartManager get_WebPartManager();
    protected internal virtual void ApplyPersonalizationState();
    protected internal virtual void ApplyPersonalizationState(WebPart webPart);
    protected virtual void ChangeScope(PersonalizationScope scope);
    protected internal virtual void CopyPersonalizationState(WebPart webPartA, WebPart webPartB);
    public void EnsureEnabled(bool ensureModifiable);
    protected internal virtual void ExtractPersonalizationState();
    protected internal virtual void ExtractPersonalizationState(WebPart webPart);
    protected internal virtual string GetAuthorizationFilter(string webPartID);
    internal void LoadInternal();
    protected virtual PersonalizationScope Load();
    public virtual void ResetPersonalizationState();
    internal void SaveInternal();
    protected virtual void Save();
    protected internal virtual void SetDirty();
    protected internal virtual void SetDirty(WebPart webPart);
    public virtual void ToggleScope();
}
internal class System.Web.UI.WebControls.WebParts.WebPartRestoreVerb : WebPartActionVerb {
    [WebSysDefaultValueAttribute("WebPartRestoreVerb_Description")]
public string Description { get; public set; }
    [WebSysDefaultValueAttribute("WebPartRestoreVerb_Text")]
public string Text { get; public set; }
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
public class System.Web.UI.WebControls.WebParts.WebPartTracker : object {
    public bool IsCircularConnection { get; }
    public WebPartTracker(WebPart webPart, ProviderConnectionPoint providerConnectionPoint);
    public bool get_IsCircularConnection();
    private sealed virtual override void System.IDisposable.Dispose();
}
public abstract class System.Web.UI.WebControls.WebParts.WebPartTransformer : object {
    public virtual Control CreateConfigurationControl();
    protected internal virtual void LoadConfigurationState(object savedState);
    protected internal virtual object SaveConfigurationState();
    public abstract virtual object Transform(object providerData);
}
[AttributeUsageAttribute("4")]
public class System.Web.UI.WebControls.WebParts.WebPartTransformerAttribute : Attribute {
    public Type ConsumerType { get; }
    public Type ProviderType { get; }
    public WebPartTransformerAttribute(Type consumerType, Type providerType);
    private static WebPartTransformerAttribute();
    public Type get_ConsumerType();
    public Type get_ProviderType();
    public static Type GetConsumerType(Type transformerType);
    public static Type GetProviderType(Type transformerType);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.WebParts.WebPartTransformerCollection : CollectionBase {
    public bool IsReadOnly { get; }
    public WebPartTransformer Item { get; public set; }
    public bool get_IsReadOnly();
    public WebPartTransformer get_Item(int index);
    public void set_Item(int index, WebPartTransformer value);
    public int Add(WebPartTransformer transformer);
    public bool Contains(WebPartTransformer transformer);
    public void CopyTo(WebPartTransformer[] array, int index);
    public int IndexOf(WebPartTransformer transformer);
    public void Insert(int index, WebPartTransformer transformer);
    protected virtual void OnClear();
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnRemove(int index, object value);
    protected virtual void OnSet(int index, object oldValue, object newValue);
    protected virtual void OnValidate(object value);
    public void Remove(WebPartTransformer transformer);
    internal void SetReadOnly();
}
public class System.Web.UI.WebControls.WebParts.WebPartUserCapability : object {
    public string Name { get; }
    public WebPartUserCapability(string name);
    public string get_Name();
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
internal static class System.Web.UI.WebControls.WebParts.WebPartUtil : object {
    internal static object CreateObjectFromType(Type type);
    internal static Type DeserializeType(string typeName, bool throwOnError);
    internal static Type[] GetTypesForConstructor(ConstructorInfo constructor);
    internal static bool IsConnectionPointTypeValid(Type connectionPointType, bool isConsumer);
    internal static string SerializeType(Type type);
}
[TypeConverterAttribute("System.Web.UI.WebControls.EmptyStringExpandableObjectConverter")]
public class System.Web.UI.WebControls.WebParts.WebPartVerb : object {
    [DefaultValueAttribute("False")]
[NotifyParentPropertyAttribute("True")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("WebPartVerb_Checked")]
public bool Checked { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ClientClickHandler { get; }
    [LocalizableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[WebSysDefaultValueAttribute("")]
[WebSysDescriptionAttribute("WebPartVerb_Description")]
public string Description { get; public set; }
    [DefaultValueAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("WebPartVerb_Enabled")]
public bool Enabled { get; public set; }
    internal string EventArgument { get; internal set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ID { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("WebPartVerb_ImageUrl")]
public string ImageUrl { get; public set; }
    protected bool IsTrackingViewState { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WebPartEventHandler ServerClickHandler { get; }
    [LocalizableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[WebSysDefaultValueAttribute("")]
[WebSysDescriptionAttribute("WebPartVerb_Text")]
public string Text { get; public set; }
    [DefaultValueAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("WebPartVerb_Visible")]
public bool Visible { get; public set; }
    protected StateBag ViewState { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public WebPartVerb(string id, WebPartEventHandler serverClickHandler);
    public WebPartVerb(string id, string clientClickHandler);
    public WebPartVerb(string id, WebPartEventHandler serverClickHandler, string clientClickHandler);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public string get_ClientClickHandler();
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    internal string get_EventArgument();
    internal void set_EventArgument(string value);
    public string get_ID();
    public virtual string get_ImageUrl();
    public virtual void set_ImageUrl(string value);
    protected virtual bool get_IsTrackingViewState();
    public WebPartEventHandler get_ServerClickHandler();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    protected StateBag get_ViewState();
    internal string GetEventArgument(string webPartID);
    protected virtual void LoadViewState(object savedState);
    protected virtual object SaveViewState();
    internal void SetEventArgumentPrefix(string eventArgumentPrefix);
    protected virtual void TrackViewState();
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object savedState);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.WebParts.WebPartVerbCollection : ReadOnlyCollectionBase {
    public static WebPartVerbCollection Empty;
    public WebPartVerb Item { get; }
    internal WebPartVerb Item { get; }
    public WebPartVerbCollection(ICollection verbs);
    public WebPartVerbCollection(WebPartVerbCollection existingVerbs, ICollection verbs);
    private static WebPartVerbCollection();
    public WebPartVerb get_Item(int index);
    internal WebPartVerb get_Item(string id);
    internal int Add(WebPartVerb value);
    public bool Contains(WebPartVerb value);
    public void CopyTo(WebPartVerb[] array, int index);
    public int IndexOf(WebPartVerb value);
}
public enum System.Web.UI.WebControls.WebParts.WebPartVerbRenderMode : Enum {
    public int value__;
    public static WebPartVerbRenderMode Menu;
    public static WebPartVerbRenderMode TitleBar;
}
public class System.Web.UI.WebControls.WebParts.WebPartVerbsEventArgs : EventArgs {
    public WebPartVerbCollection Verbs { get; public set; }
    public WebPartVerbsEventArgs(WebPartVerbCollection verbs);
    public WebPartVerbCollection get_Verbs();
    public void set_Verbs(WebPartVerbCollection value);
}
public class System.Web.UI.WebControls.WebParts.WebPartVerbsEventHandler : MulticastDelegate {
    public WebPartVerbsEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WebPartVerbsEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebPartVerbsEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DesignerAttribute("System.Web.UI.Design.WebControls.WebParts.WebPartZoneDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SupportsEventValidationAttribute]
public class System.Web.UI.WebControls.WebParts.WebPartZone : WebPartZoneBase {
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateInstanceAttribute("1")]
public ITemplate ZoneTemplate { get; public set; }
    public virtual ITemplate get_ZoneTemplate();
    public virtual void set_ZoneTemplate(ITemplate value);
    protected internal virtual WebPartCollection GetInitialWebParts();
    protected internal virtual void OnInit(EventArgs e);
}
[DesignerAttribute("System.Web.UI.Design.WebControls.WebParts.WebPartZoneBaseDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public abstract class System.Web.UI.WebControls.WebParts.WebPartZoneBase : WebZone {
    internal static string EventArgumentSeparator;
    [DefaultValueAttribute("True")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("WebPartZoneBase_AllowLayoutChange")]
public bool AllowLayoutChange { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "Gray")]
public Color BorderColor { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public BorderStyle BorderStyle { get; public set; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "1")]
public Unit BorderWidth { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Verbs")]
[WebSysDescriptionAttribute("WebPartZoneBase_CloseVerb")]
public WebPartVerb CloseVerb { get; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Verbs")]
[WebSysDescriptionAttribute("WebPartZoneBase_ConnectVerb")]
public WebPartVerb ConnectVerb { get; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Verbs")]
[WebSysDescriptionAttribute("WebPartZoneBase_DeleteVerb")]
public WebPartVerb DeleteVerb { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string DisplayTitle { get; }
    protected internal bool DragDropEnabled { get; }
    [DefaultValueAttribute("System.Drawing.Color", "Blue")]
[TypeConverterAttribute("System.Web.UI.WebControls.WebColorConverter")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("WebPartZoneBase_DragHighlightColor")]
public Color DragHighlightColor { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Verbs")]
[WebSysDescriptionAttribute("WebPartZoneBase_EditVerb")]
public WebPartVerb EditVerb { get; }
    [WebSysDefaultValueAttribute("WebPartZoneBase_DefaultEmptyZoneText")]
public string EmptyZoneText { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Verbs")]
[WebSysDescriptionAttribute("WebPartZoneBase_ExportVerb")]
public WebPartVerb ExportVerb { get; }
    protected bool HasFooter { get; }
    protected bool HasHeader { get; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Verbs")]
[WebSysDescriptionAttribute("WebPartZoneBase_HelpVerb")]
public WebPartVerb HelpVerb { get; }
    internal WebPartMenu Menu { get; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("WebPartZoneBase_MenuCheckImageStyle")]
public Style MenuCheckImageStyle { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("WebPartZoneBase_MenuCheckImageUrl")]
public string MenuCheckImageUrl { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("WebPartZoneBase_MenuLabelHoverStyle")]
public Style MenuLabelHoverStyle { get; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("WebPartZoneBase_MenuLabelStyle")]
public Style MenuLabelStyle { get; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("WebPartZoneBase_MenuLabelText")]
public string MenuLabelText { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("WebPartZoneBase_MenuPopupImageUrl")]
public string MenuPopupImageUrl { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("WebPartZoneBase_MenuPopupStyle")]
public WebPartMenuStyle MenuPopupStyle { get; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("WebPartZoneBase_MenuVerbHoverStyle")]
public Style MenuVerbHoverStyle { get; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("WebPartZoneBase_MenuVerbStyle")]
public Style MenuVerbStyle { get; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Verbs")]
[WebSysDescriptionAttribute("WebPartZoneBase_MinimizeVerb")]
public WebPartVerb MinimizeVerb { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Layout")]
[WebSysDescriptionAttribute("WebPartZoneBase_LayoutOrientation")]
public Orientation LayoutOrientation { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Verbs")]
[WebSysDescriptionAttribute("WebPartZoneBase_RestoreVerb")]
public WebPartVerb RestoreVerb { get; }
    [DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("WebPart")]
[WebSysDescriptionAttribute("WebPartZoneBase_SelectedPartChromeStyle")]
public Style SelectedPartChromeStyle { get; }
    [DefaultValueAttribute("True")]
[WebCategoryAttribute("WebPart")]
[WebSysDescriptionAttribute("WebPartZoneBase_ShowTitleIcons")]
public bool ShowTitleIcons { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("WebPartZoneBase_TitleBarVerbButtonType")]
public ButtonType TitleBarVerbButtonType { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("WebPartZoneBase_TitleBarVerbStyle")]
public Style TitleBarVerbStyle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ThemeableAttribute("False")]
public ButtonType VerbButtonType { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WebPartChrome WebPartChrome { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WebPartCollection WebParts { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("WebPart")]
[WebSysDescriptionAttribute("WebPartZoneBase_WebPartVerbRenderMode")]
public WebPartVerbRenderMode WebPartVerbRenderMode { get; public set; }
    private Style System.Web.UI.WebControls.WebParts.IWebPartMenuUser.CheckImageStyle { get; }
    private string System.Web.UI.WebControls.WebParts.IWebPartMenuUser.CheckImageUrl { get; }
    private string System.Web.UI.WebControls.WebParts.IWebPartMenuUser.ClientID { get; }
    private string System.Web.UI.WebControls.WebParts.IWebPartMenuUser.PopupImageUrl { get; }
    private Style System.Web.UI.WebControls.WebParts.IWebPartMenuUser.ItemHoverStyle { get; }
    private Style System.Web.UI.WebControls.WebParts.IWebPartMenuUser.ItemStyle { get; }
    private Style System.Web.UI.WebControls.WebParts.IWebPartMenuUser.LabelHoverStyle { get; }
    private string System.Web.UI.WebControls.WebParts.IWebPartMenuUser.LabelImageUrl { get; }
    private Style System.Web.UI.WebControls.WebParts.IWebPartMenuUser.LabelStyle { get; }
    private string System.Web.UI.WebControls.WebParts.IWebPartMenuUser.LabelText { get; }
    private WebPartMenuStyle System.Web.UI.WebControls.WebParts.IWebPartMenuUser.MenuPopupStyle { get; }
    private Page System.Web.UI.WebControls.WebParts.IWebPartMenuUser.Page { get; }
    private string System.Web.UI.WebControls.WebParts.IWebPartMenuUser.PostBackTarget { get; }
    private IUrlResolutionService System.Web.UI.WebControls.WebParts.IWebPartMenuUser.UrlResolver { get; }
    private static WebPartZoneBase();
    public virtual bool get_AllowLayoutChange();
    public virtual void set_AllowLayoutChange(bool value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual BorderStyle get_BorderStyle();
    public virtual void set_BorderStyle(BorderStyle value);
    public virtual Unit get_BorderWidth();
    public virtual void set_BorderWidth(Unit value);
    public virtual WebPartVerb get_CloseVerb();
    public virtual WebPartVerb get_ConnectVerb();
    public virtual WebPartVerb get_DeleteVerb();
    public virtual string get_DisplayTitle();
    protected internal bool get_DragDropEnabled();
    public virtual Color get_DragHighlightColor();
    public virtual void set_DragHighlightColor(Color value);
    public virtual WebPartVerb get_EditVerb();
    public virtual string get_EmptyZoneText();
    public virtual void set_EmptyZoneText(string value);
    public virtual WebPartVerb get_ExportVerb();
    protected virtual bool get_HasFooter();
    protected virtual bool get_HasHeader();
    public virtual WebPartVerb get_HelpVerb();
    internal WebPartMenu get_Menu();
    public Style get_MenuCheckImageStyle();
    public virtual string get_MenuCheckImageUrl();
    public virtual void set_MenuCheckImageUrl(string value);
    public Style get_MenuLabelHoverStyle();
    public Style get_MenuLabelStyle();
    public virtual string get_MenuLabelText();
    public virtual void set_MenuLabelText(string value);
    public virtual string get_MenuPopupImageUrl();
    public virtual void set_MenuPopupImageUrl(string value);
    public WebPartMenuStyle get_MenuPopupStyle();
    public Style get_MenuVerbHoverStyle();
    public Style get_MenuVerbStyle();
    public virtual WebPartVerb get_MinimizeVerb();
    public virtual Orientation get_LayoutOrientation();
    public virtual void set_LayoutOrientation(Orientation value);
    public virtual WebPartVerb get_RestoreVerb();
    public Style get_SelectedPartChromeStyle();
    public virtual bool get_ShowTitleIcons();
    public virtual void set_ShowTitleIcons(bool value);
    public virtual ButtonType get_TitleBarVerbButtonType();
    public virtual void set_TitleBarVerbButtonType(ButtonType value);
    public Style get_TitleBarVerbStyle();
    public virtual ButtonType get_VerbButtonType();
    public virtual void set_VerbButtonType(ButtonType value);
    public WebPartChrome get_WebPartChrome();
    public WebPartCollection get_WebParts();
    public virtual WebPartVerbRenderMode get_WebPartVerbRenderMode();
    public virtual void set_WebPartVerbRenderMode(WebPartVerbRenderMode value);
    public void add_CreateVerbs(WebPartVerbsEventHandler value);
    public void remove_CreateVerbs(WebPartVerbsEventHandler value);
    protected virtual void CloseWebPart(WebPart webPart);
    protected virtual void ConnectWebPart(WebPart webPart);
    protected internal virtual void CreateChildControls();
    protected virtual ControlCollection CreateControlCollection();
    protected virtual Style CreateControlStyle();
    protected virtual WebPartChrome CreateWebPartChrome();
    protected virtual void DeleteWebPart(WebPart webPart);
    protected virtual void EditWebPart(WebPart webPart);
    public virtual PartChromeType GetEffectiveChromeType(Part part);
    protected internal abstract virtual WebPartCollection GetInitialWebParts();
    protected virtual void LoadViewState(object savedState);
    protected virtual void MinimizeWebPart(WebPart webPart);
    protected virtual void OnCreateVerbs(WebPartVerbsEventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void RaisePostBackEvent(string eventArgument);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected virtual void RenderBody(HtmlTextWriter writer);
    protected virtual void RenderDropCue(HtmlTextWriter writer);
    protected virtual void RenderHeader(HtmlTextWriter writer);
    protected virtual void RestoreWebPart(WebPart webPart);
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
    internal WebPartVerbCollection VerbsForWebPart(WebPart webPart);
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    private sealed virtual override Style System.Web.UI.WebControls.WebParts.IWebPartMenuUser.get_CheckImageStyle();
    private sealed virtual override string System.Web.UI.WebControls.WebParts.IWebPartMenuUser.get_CheckImageUrl();
    private sealed virtual override string System.Web.UI.WebControls.WebParts.IWebPartMenuUser.get_ClientID();
    private sealed virtual override string System.Web.UI.WebControls.WebParts.IWebPartMenuUser.get_PopupImageUrl();
    private sealed virtual override Style System.Web.UI.WebControls.WebParts.IWebPartMenuUser.get_ItemHoverStyle();
    private sealed virtual override Style System.Web.UI.WebControls.WebParts.IWebPartMenuUser.get_ItemStyle();
    private sealed virtual override Style System.Web.UI.WebControls.WebParts.IWebPartMenuUser.get_LabelHoverStyle();
    private sealed virtual override string System.Web.UI.WebControls.WebParts.IWebPartMenuUser.get_LabelImageUrl();
    private sealed virtual override Style System.Web.UI.WebControls.WebParts.IWebPartMenuUser.get_LabelStyle();
    private sealed virtual override string System.Web.UI.WebControls.WebParts.IWebPartMenuUser.get_LabelText();
    private sealed virtual override WebPartMenuStyle System.Web.UI.WebControls.WebParts.IWebPartMenuUser.get_MenuPopupStyle();
    private sealed virtual override Page System.Web.UI.WebControls.WebParts.IWebPartMenuUser.get_Page();
    private sealed virtual override string System.Web.UI.WebControls.WebParts.IWebPartMenuUser.get_PostBackTarget();
    private sealed virtual override IUrlResolutionService System.Web.UI.WebControls.WebParts.IWebPartMenuUser.get_UrlResolver();
    private sealed virtual override void System.Web.UI.WebControls.WebParts.IWebPartMenuUser.OnBeginRender(HtmlTextWriter writer);
    private sealed virtual override void System.Web.UI.WebControls.WebParts.IWebPartMenuUser.OnEndRender(HtmlTextWriter writer);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.WebParts.WebPartZoneCollection : ReadOnlyCollectionBase {
    public WebPartZoneBase Item { get; }
    public WebPartZoneBase Item { get; }
    public WebPartZoneCollection(ICollection webPartZones);
    internal int Add(WebPartZoneBase value);
    public bool Contains(WebPartZoneBase value);
    public int IndexOf(WebPartZoneBase value);
    public WebPartZoneBase get_Item(int index);
    public WebPartZoneBase get_Item(string id);
    public void CopyTo(WebPartZoneBase[] array, int index);
}
[DesignerAttribute("System.Web.UI.Design.WebControls.WebParts.WebZoneDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[BindableAttribute("False")]
public abstract class System.Web.UI.WebControls.WebParts.WebZone : CompositeControl {
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("WebControl_BackImageUrl")]
public string BackImageUrl { get; public set; }
    [LocalizableAttribute("True")]
[WebSysDefaultValueAttribute("")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Zone_EmptyZoneText")]
public string EmptyZoneText { get; public set; }
    [DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("Zone_EmptyZoneTextStyle")]
public Style EmptyZoneTextStyle { get; }
    [DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("Zone_ErrorStyle")]
public Style ErrorStyle { get; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("Zone_FooterStyle")]
public TitleStyle FooterStyle { get; }
    protected bool HasFooter { get; }
    protected bool HasHeader { get; }
    [LocalizableAttribute("True")]
[WebSysDefaultValueAttribute("")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Zone_HeaderText")]
public string HeaderText { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("Zone_HeaderStyle")]
public TitleStyle HeaderStyle { get; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "5px")]
[WebCategoryAttribute("WebPart")]
[WebSysDescriptionAttribute("Zone_PartChromePadding")]
public Unit PartChromePadding { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("WebPart")]
[WebSysDescriptionAttribute("Zone_PartChromeStyle")]
public Style PartChromeStyle { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("WebPart")]
[WebSysDescriptionAttribute("Zone_PartChromeType")]
public PartChromeType PartChromeType { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("WebPart")]
[WebSysDescriptionAttribute("Zone_PartStyle")]
public TableStyle PartStyle { get; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("WebPart")]
[WebSysDescriptionAttribute("Zone_PartTitleStyle")]
public TitleStyle PartTitleStyle { get; }
    protected HtmlTextWriterTag TagKey { get; }
    [DefaultValueAttribute("2")]
[WebCategoryAttribute("Layout")]
[WebSysDescriptionAttribute("Zone_Padding")]
public int Padding { get; public set; }
    protected internal bool RenderClientScript { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Zone_VerbButtonType")]
public ButtonType VerbButtonType { get; public set; }
    [DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("Zone_VerbStyle")]
public Style VerbStyle { get; }
    protected WebPartManager WebPartManager { get; }
    public virtual string get_BackImageUrl();
    public virtual void set_BackImageUrl(string value);
    public virtual string get_EmptyZoneText();
    public virtual void set_EmptyZoneText(string value);
    public Style get_EmptyZoneTextStyle();
    public Style get_ErrorStyle();
    public TitleStyle get_FooterStyle();
    protected virtual bool get_HasFooter();
    protected virtual bool get_HasHeader();
    public virtual string get_HeaderText();
    public virtual void set_HeaderText(string value);
    public TitleStyle get_HeaderStyle();
    public Unit get_PartChromePadding();
    public void set_PartChromePadding(Unit value);
    public Style get_PartChromeStyle();
    public virtual PartChromeType get_PartChromeType();
    public virtual void set_PartChromeType(PartChromeType value);
    public TableStyle get_PartStyle();
    public TitleStyle get_PartTitleStyle();
    protected virtual HtmlTextWriterTag get_TagKey();
    public virtual int get_Padding();
    public virtual void set_Padding(int value);
    internal void RenderBodyTableBeginTag(HtmlTextWriter writer);
    internal static void RenderBodyTableEndTag(HtmlTextWriter writer);
    internal void RenderDesignerRegionBeginTag(HtmlTextWriter writer, Orientation orientation);
    internal static void RenderDesignerRegionEndTag(HtmlTextWriter writer);
    protected internal bool get_RenderClientScript();
    public virtual ButtonType get_VerbButtonType();
    public virtual void set_VerbButtonType(ButtonType value);
    public Style get_VerbStyle();
    public virtual PartChromeType GetEffectiveChromeType(Part part);
    protected virtual void LoadViewState(object savedState);
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    public virtual void RenderBeginTag(HtmlTextWriter writer);
    protected internal virtual void RenderContents(HtmlTextWriter writer);
    protected virtual void RenderHeader(HtmlTextWriter writer);
    protected virtual void RenderBody(HtmlTextWriter writer);
    protected virtual void RenderFooter(HtmlTextWriter writer);
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
    protected WebPartManager get_WebPartManager();
}
[SupportsEventValidationAttribute]
internal class System.Web.UI.WebControls.WebParts.ZoneButton : Button {
    [DefaultValueAttribute("False")]
public bool UseSubmitBehavior { get; public set; }
    public ZoneButton(WebZone owner, string eventArgument);
    public virtual bool get_UseSubmitBehavior();
    public virtual void set_UseSubmitBehavior(bool value);
    protected virtual PostBackOptions GetPostBackOptions();
}
[SupportsEventValidationAttribute]
internal class System.Web.UI.WebControls.WebParts.ZoneLinkButton : LinkButton {
    public string ImageUrl { get; public set; }
    public ZoneLinkButton(WebZone owner, string eventArgument);
    public string get_ImageUrl();
    public void set_ImageUrl(string value);
    protected virtual PostBackOptions GetPostBackOptions();
    protected internal virtual void RenderContents(HtmlTextWriter writer);
}
[BindableAttribute("False")]
[DefaultEventAttribute("FinishButtonClick")]
[DesignerAttribute("System.Web.UI.Design.WebControls.WizardDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxDataAttribute("<{0}:Wizard runat="server"> <WizardSteps> <asp:WizardStep title="Step 1" runat="server"></asp:WizardStep> <asp:WizardStep title="Step 2" runat="server"></asp:WizardStep> </WizardSteps> </{0}:Wizard>")]
public class System.Web.UI.WebControls.Wizard : CompositeControl {
    public static string HeaderPlaceholderId;
    public static string NavigationPlaceholderId;
    public static string SideBarPlaceholderId;
    public static string WizardStepPlaceholderId;
    public static string CancelCommandName;
    public static string MoveNextCommandName;
    public static string MovePreviousCommandName;
    public static string MoveToCommandName;
    public static string MoveCompleteCommandName;
    protected static string CancelButtonID;
    protected static string StartNextButtonID;
    protected static string StepPreviousButtonID;
    protected static string StepNextButtonID;
    protected static string FinishButtonID;
    protected static string FinishPreviousButtonID;
    protected static string CustomPreviousButtonID;
    protected static string CustomNextButtonID;
    protected static string CustomFinishButtonID;
    protected static string DataListID;
    protected static string SideBarButtonID;
    internal static string _customNavigationControls;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("Wizard_ActiveStep")]
public WizardStepBase ActiveStep { get; }
    [DefaultValueAttribute("-1")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Wizard_ActiveStepIndex")]
public int ActiveStepIndex { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Wizard_CancelButtonImageUrl")]
[UrlPropertyAttribute]
public string CancelButtonImageUrl { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("Wizard_CancelButtonStyle")]
public Style CancelButtonStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("Wizard_Default_CancelButtonText")]
[WebSysDescriptionAttribute("Wizard_CancelButtonText")]
public string CancelButtonText { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Wizard_CancelButtonType")]
public ButtonType CancelButtonType { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Wizard_CancelDestinationPageUrl")]
[UrlPropertyAttribute]
public string CancelDestinationPageUrl { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("0")]
[WebSysDescriptionAttribute("Wizard_CellPadding")]
public int CellPadding { get; public set; }
    [WebCategoryAttribute("Layout")]
[DefaultValueAttribute("0")]
[WebSysDescriptionAttribute("Wizard_CellSpacing")]
public int CellSpacing { get; public set; }
    [DefaultValueAttribute("False")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Wizard_DisplayCancelButton")]
public bool DisplayCancelButton { get; public set; }
    [DefaultValueAttribute("True")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Wizard_DisplaySideBar")]
public bool DisplaySideBar { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Wizard_FinishCompleteButtonImageUrl")]
[UrlPropertyAttribute]
public string FinishCompleteButtonImageUrl { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("Wizard_FinishCompleteButtonStyle")]
public Style FinishCompleteButtonStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("Wizard_Default_FinishButtonText")]
[WebSysDescriptionAttribute("Wizard_FinishCompleteButtonText")]
public string FinishCompleteButtonText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Wizard_FinishCompleteButtonType")]
public ButtonType FinishCompleteButtonType { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Behavior")]
[WebSysDescriptionAttribute("Wizard_FinishDestinationPageUrl")]
[UrlPropertyAttribute]
public string FinishDestinationPageUrl { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Wizard_FinishPreviousButtonImageUrl")]
[UrlPropertyAttribute]
public string FinishPreviousButtonImageUrl { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("Wizard_FinishPreviousButtonStyle")]
public Style FinishPreviousButtonStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("Wizard_Default_StepPreviousButtonText")]
[WebSysDescriptionAttribute("Wizard_FinishPreviousButtonText")]
public string FinishPreviousButtonText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Wizard_FinishPreviousButtonType")]
public ButtonType FinishPreviousButtonType { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.Wizard")]
[WebSysDescriptionAttribute("Wizard_FinishNavigationTemplate")]
public ITemplate FinishNavigationTemplate { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("WebControl_HeaderStyle")]
public TableItemStyle HeaderStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.Wizard")]
[WebSysDescriptionAttribute("WebControl_HeaderTemplate")]
public ITemplate HeaderTemplate { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Wizard_HeaderText")]
public string HeaderText { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.Wizard")]
[WebSysDescriptionAttribute("Wizard_LayoutTemplate")]
public ITemplate LayoutTemplate { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("Wizard_NavigationButtonStyle")]
public Style NavigationButtonStyle { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("Wizard_NavigationStyle")]
public TableItemStyle NavigationStyle { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Wizard_StartNextButtonImageUrl")]
[UrlPropertyAttribute]
public string StartNextButtonImageUrl { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("Wizard_StartNextButtonStyle")]
public Style StartNextButtonStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("Wizard_Default_StepNextButtonText")]
[WebSysDescriptionAttribute("Wizard_StartNextButtonText")]
public string StartNextButtonText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Wizard_StartNextButtonType")]
public ButtonType StartNextButtonType { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Wizard_StepNextButtonImageUrl")]
[UrlPropertyAttribute]
public string StepNextButtonImageUrl { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("Wizard_StepNextButtonStyle")]
public Style StepNextButtonStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("Wizard_Default_StepNextButtonText")]
[WebSysDescriptionAttribute("Wizard_StepNextButtonText")]
public string StepNextButtonText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Wizard_StepNextButtonType")]
public ButtonType StepNextButtonType { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("Wizard_StepPreviousButtonImageUrl")]
[UrlPropertyAttribute]
public string StepPreviousButtonImageUrl { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("Wizard_StepPreviousButtonStyle")]
public Style StepPreviousButtonStyle { get; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("Wizard_Default_StepPreviousButtonText")]
[WebSysDescriptionAttribute("Wizard_StepPreviousButtonText")]
public string StepPreviousButtonText { get; public set; }
    [WebCategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("Wizard_StepPreviousButtonType")]
public ButtonType StepPreviousButtonType { get; public set; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("Wizard_SideBarButtonStyle")]
public Style SideBarButtonStyle { get; }
    [WebCategoryAttribute("Styles")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebSysDescriptionAttribute("Wizard_SideBarStyle")]
public TableItemStyle SideBarStyle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.Wizard")]
[WebSysDescriptionAttribute("Wizard_SideBarTemplate")]
public ITemplate SideBarTemplate { get; public set; }
    [LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDefaultValueAttribute("Wizard_Default_SkipToContentText")]
[WebSysDescriptionAttribute("WebControl_SkipLinkText")]
public string SkipLinkText { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.Wizard")]
[WebSysDescriptionAttribute("Wizard_StartNavigationTemplate")]
public ITemplate StartNavigationTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.Wizard")]
[WebSysDescriptionAttribute("Wizard_StepNavigationTemplate")]
public ITemplate StepNavigationTemplate { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute("1")]
[WebCategoryAttribute("Styles")]
[WebSysDescriptionAttribute("Wizard_StepStyle")]
public TableItemStyle StepStyle { get; }
    protected HtmlTextWriterTag TagKey { get; }
    [DesignerSerializationVisibilityAttribute("2")]
[EditorAttribute("System.Web.UI.Design.WebControls.WizardStepCollectionEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[PersistenceModeAttribute("1")]
[ThemeableAttribute("False")]
[WebSysDescriptionAttribute("Wizard_WizardSteps")]
public WizardStepCollection WizardSteps { get; }
    internal Dictionary`2<WizardStepBase, BaseNavigationTemplateContainer> CustomNavigationContainers { get; }
    internal MultiView MultiView { get; }
    internal bool ShowCustomNavigationTemplate { get; }
    internal bool ShouldRenderChildControl { get; }
    internal string SkipLinkTextInternal { get; }
    internal List`1<TemplatedWizardStep> TemplatedSteps { get; }
    internal Wizard(bool displaySideBarDefault);
    private static Wizard();
    public WizardStepBase get_ActiveStep();
    public virtual int get_ActiveStepIndex();
    public virtual void set_ActiveStepIndex(int value);
    public virtual string get_CancelButtonImageUrl();
    public virtual void set_CancelButtonImageUrl(string value);
    public Style get_CancelButtonStyle();
    public virtual string get_CancelButtonText();
    public virtual void set_CancelButtonText(string value);
    public virtual ButtonType get_CancelButtonType();
    public virtual void set_CancelButtonType(ButtonType value);
    public virtual string get_CancelDestinationPageUrl();
    public virtual void set_CancelDestinationPageUrl(string value);
    public virtual int get_CellPadding();
    public virtual void set_CellPadding(int value);
    public virtual int get_CellSpacing();
    public virtual void set_CellSpacing(int value);
    public virtual bool get_DisplayCancelButton();
    public virtual void set_DisplayCancelButton(bool value);
    public virtual bool get_DisplaySideBar();
    public virtual void set_DisplaySideBar(bool value);
    public virtual string get_FinishCompleteButtonImageUrl();
    public virtual void set_FinishCompleteButtonImageUrl(string value);
    public Style get_FinishCompleteButtonStyle();
    public virtual string get_FinishCompleteButtonText();
    public virtual void set_FinishCompleteButtonText(string value);
    public virtual ButtonType get_FinishCompleteButtonType();
    public virtual void set_FinishCompleteButtonType(ButtonType value);
    public virtual string get_FinishDestinationPageUrl();
    public virtual void set_FinishDestinationPageUrl(string value);
    public virtual string get_FinishPreviousButtonImageUrl();
    public virtual void set_FinishPreviousButtonImageUrl(string value);
    public Style get_FinishPreviousButtonStyle();
    public virtual string get_FinishPreviousButtonText();
    public virtual void set_FinishPreviousButtonText(string value);
    public virtual ButtonType get_FinishPreviousButtonType();
    public virtual void set_FinishPreviousButtonType(ButtonType value);
    public virtual ITemplate get_FinishNavigationTemplate();
    public virtual void set_FinishNavigationTemplate(ITemplate value);
    public TableItemStyle get_HeaderStyle();
    public virtual ITemplate get_HeaderTemplate();
    public virtual void set_HeaderTemplate(ITemplate value);
    public virtual string get_HeaderText();
    public virtual void set_HeaderText(string value);
    public virtual ITemplate get_LayoutTemplate();
    public virtual void set_LayoutTemplate(ITemplate value);
    public Style get_NavigationButtonStyle();
    public TableItemStyle get_NavigationStyle();
    public virtual string get_StartNextButtonImageUrl();
    public virtual void set_StartNextButtonImageUrl(string value);
    public Style get_StartNextButtonStyle();
    public virtual string get_StartNextButtonText();
    public virtual void set_StartNextButtonText(string value);
    public virtual ButtonType get_StartNextButtonType();
    public virtual void set_StartNextButtonType(ButtonType value);
    public virtual string get_StepNextButtonImageUrl();
    public virtual void set_StepNextButtonImageUrl(string value);
    public Style get_StepNextButtonStyle();
    public virtual string get_StepNextButtonText();
    public virtual void set_StepNextButtonText(string value);
    public virtual ButtonType get_StepNextButtonType();
    public virtual void set_StepNextButtonType(ButtonType value);
    public virtual string get_StepPreviousButtonImageUrl();
    public virtual void set_StepPreviousButtonImageUrl(string value);
    public Style get_StepPreviousButtonStyle();
    public virtual string get_StepPreviousButtonText();
    public virtual void set_StepPreviousButtonText(string value);
    public virtual ButtonType get_StepPreviousButtonType();
    public virtual void set_StepPreviousButtonType(ButtonType value);
    public Style get_SideBarButtonStyle();
    public TableItemStyle get_SideBarStyle();
    public virtual ITemplate get_SideBarTemplate();
    public virtual void set_SideBarTemplate(ITemplate value);
    public virtual string get_SkipLinkText();
    public virtual void set_SkipLinkText(string value);
    public virtual ITemplate get_StartNavigationTemplate();
    public virtual void set_StartNavigationTemplate(ITemplate value);
    public virtual ITemplate get_StepNavigationTemplate();
    public virtual void set_StepNavigationTemplate(ITemplate value);
    public TableItemStyle get_StepStyle();
    protected virtual HtmlTextWriterTag get_TagKey();
    public virtual WizardStepCollection get_WizardSteps();
    public void add_ActiveStepChanged(EventHandler value);
    public void remove_ActiveStepChanged(EventHandler value);
    public void add_CancelButtonClick(EventHandler value);
    public void remove_CancelButtonClick(EventHandler value);
    public void add_FinishButtonClick(WizardNavigationEventHandler value);
    public void remove_FinishButtonClick(WizardNavigationEventHandler value);
    public void add_NextButtonClick(WizardNavigationEventHandler value);
    public void remove_NextButtonClick(WizardNavigationEventHandler value);
    public void add_PreviousButtonClick(WizardNavigationEventHandler value);
    public void remove_PreviousButtonClick(WizardNavigationEventHandler value);
    public virtual void add_SideBarButtonClick(WizardNavigationEventHandler value);
    public virtual void remove_SideBarButtonClick(WizardNavigationEventHandler value);
    internal Dictionary`2<WizardStepBase, BaseNavigationTemplateContainer> get_CustomNavigationContainers();
    internal MultiView get_MultiView();
    internal virtual bool get_ShowCustomNavigationTemplate();
    internal bool get_ShouldRenderChildControl();
    internal string get_SkipLinkTextInternal();
    internal List`1<TemplatedWizardStep> get_TemplatedSteps();
    internal BaseNavigationTemplateContainer CreateBaseNavigationTemplateContainer(string id);
    protected internal virtual void CreateChildControls();
    internal virtual TableWizardRendering CreateTableRendering();
    internal virtual LayoutTemplateWizardRendering CreateLayoutTemplateRendering();
    protected virtual ControlCollection CreateControlCollection();
    protected virtual void CreateControlHierarchy();
    internal virtual ITemplate CreateDefaultSideBarTemplate();
    internal virtual ITemplate CreateDefaultDataListItemTemplate();
    protected virtual Style CreateControlStyle();
    internal virtual void CreateCustomNavigationTemplates();
    internal void RegisterCustomNavigationContainers(TemplatedWizardStep step);
    internal virtual void DataListItemDataBound(object sender, WizardSideBarListControlItemEventArgs e);
    internal void RegisterSideBarDataListForRender();
    internal static string GetCustomContainerID(int index);
    protected virtual IDictionary GetDesignModeState();
    public ICollection GetHistory();
    internal int GetPreviousStepIndex(bool popStack);
    public WizardStepType GetStepType(WizardStepBase wizardStep, int index);
    internal virtual void InstantiateStepContentTemplates();
    internal void InstantiateStepContentTemplate(TemplatedWizardStep step);
    protected internal virtual void LoadControlState(object state);
    protected virtual void LoadViewState(object savedState);
    public void MoveTo(WizardStepBase wizardStep);
    protected virtual void OnActiveStepChanged(object source, EventArgs e);
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
    internal void OnWizardStepsChanged();
    protected virtual bool AllowNavigationToStep(int index);
    protected virtual void OnCancelButtonClick(EventArgs e);
    protected virtual void OnFinishButtonClick(WizardNavigationEventArgs e);
    protected internal virtual void OnInit(EventArgs e);
    protected virtual void OnNextButtonClick(WizardNavigationEventArgs e);
    protected virtual void OnPreviousButtonClick(WizardNavigationEventArgs e);
    protected virtual void OnSideBarButtonClick(WizardNavigationEventArgs e);
    internal void RequiresControlsRecreation();
    protected internal void RegisterCommandEvents(IButtonControl button);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected internal virtual object SaveControlState();
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
}
[SupportsEventValidationAttribute]
internal class System.Web.UI.WebControls.WizardDefaultInnerTable : Table {
}
public class System.Web.UI.WebControls.WizardNavigationEventArgs : EventArgs {
    public bool Cancel { get; public set; }
    public int CurrentStepIndex { get; }
    public int NextStepIndex { get; }
    public WizardNavigationEventArgs(int currentStepIndex, int nextStepIndex);
    public bool get_Cancel();
    public void set_Cancel(bool value);
    public int get_CurrentStepIndex();
    public int get_NextStepIndex();
    internal void SetNextStepIndex(int nextStepIndex);
}
public class System.Web.UI.WebControls.WizardNavigationEventHandler : MulticastDelegate {
    public WizardNavigationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WizardNavigationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WizardNavigationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Web.UI.WebControls.WizardSideBarListControlItem : object {
    public object DataItem { get; private set; }
    public ListItemType ItemType { get; private set; }
    public int ItemIndex { get; private set; }
    public WizardSideBarListControlItem(object dataItem, ListItemType itemType, int itemIndex, Control container);
    [CompilerGeneratedAttribute]
public object get_DataItem();
    [CompilerGeneratedAttribute]
private void set_DataItem(object value);
    [CompilerGeneratedAttribute]
public ListItemType get_ItemType();
    [CompilerGeneratedAttribute]
private void set_ItemType(ListItemType value);
    [CompilerGeneratedAttribute]
public int get_ItemIndex();
    [CompilerGeneratedAttribute]
private void set_ItemIndex(int value);
    internal Control FindControl(string id);
}
internal class System.Web.UI.WebControls.WizardSideBarListControlItemEventArgs : EventArgs {
    public WizardSideBarListControlItem Item { get; private set; }
    public WizardSideBarListControlItemEventArgs(WizardSideBarListControlItem item);
    [CompilerGeneratedAttribute]
public WizardSideBarListControlItem get_Item();
    [CompilerGeneratedAttribute]
private void set_Item(WizardSideBarListControlItem value);
}
[BindableAttribute("False")]
[ControlBuilderAttribute("System.Web.UI.WebControls.WizardStepControlBuilder")]
[ToolboxItemAttribute("False")]
public class System.Web.UI.WebControls.WizardStep : WizardStepBase {
}
[BindableAttribute("False")]
[ControlBuilderAttribute("System.Web.UI.WebControls.WizardStepControlBuilder")]
[ToolboxItemAttribute("False")]
public abstract class System.Web.UI.WebControls.WizardStepBase : View {
    [WebCategoryAttribute("Behavior")]
[ThemeableAttribute("False")]
[FilterableAttribute("False")]
[DefaultValueAttribute("True")]
[WebSysDescriptionAttribute("WizardStep_AllowReturn")]
public bool AllowReturn { get; public set; }
    [BrowsableAttribute("True")]
public bool EnableTheming { get; public set; }
    public string ID { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("WizardStep_Name")]
public string Name { get; }
    internal Wizard Owner { get; internal set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebSysDescriptionAttribute("WizardStep_StepType")]
public WizardStepType StepType { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("Appearance")]
[WebSysDescriptionAttribute("WizardStep_Title")]
public string Title { get; public set; }
    internal string TitleInternal { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[WebCategoryAttribute("Appearance")]
public Wizard Wizard { get; }
    public virtual bool get_AllowReturn();
    public virtual void set_AllowReturn(bool value);
    public virtual bool get_EnableTheming();
    public virtual void set_EnableTheming(bool value);
    public virtual string get_ID();
    public virtual void set_ID(string value);
    public virtual string get_Name();
    internal virtual Wizard get_Owner();
    internal virtual void set_Owner(Wizard value);
    public virtual WizardStepType get_StepType();
    public virtual void set_StepType(WizardStepType value);
    public virtual string get_Title();
    public virtual void set_Title(string value);
    internal string get_TitleInternal();
    public Wizard get_Wizard();
    protected virtual void LoadViewState(object savedState);
    protected internal virtual void OnLoad(EventArgs e);
    protected internal virtual void RenderChildren(HtmlTextWriter writer);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.WizardStepCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public WizardStepBase Item { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    internal WizardStepCollection(Wizard wizard);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public WizardStepBase get_Item(int index);
    public void Add(WizardStepBase wizardStep);
    public void AddAt(int index, WizardStepBase wizardStep);
    public sealed virtual void Clear();
    public bool Contains(WizardStepBase wizardStep);
    public void CopyTo(WizardStepBase[] array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public int IndexOf(WizardStepBase wizardStep);
    public void Insert(int index, WizardStepBase wizardStep);
    internal void NotifyWizardStepsChanged();
    public void Remove(WizardStepBase wizardStep);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
}
public class System.Web.UI.WebControls.WizardStepControlBuilder : ControlBuilder {
    internal virtual void SetParentBuilder(ControlBuilder parentBuilder);
}
public enum System.Web.UI.WebControls.WizardStepType : Enum {
    public int value__;
    public static WizardStepType Auto;
    public static WizardStepType Complete;
    public static WizardStepType Finish;
    public static WizardStepType Start;
    public static WizardStepType Step;
}
[DefaultPropertyAttribute("DocumentSource")]
[PersistChildrenAttribute("False", "True")]
[ControlBuilderAttribute("System.Web.UI.WebControls.XmlBuilder")]
[DesignerAttribute("System.Web.UI.Design.WebControls.XmlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.UI.WebControls.Xml : Control {
    [EditorBrowsableAttribute("1")]
public string ClientID { get; }
    [EditorBrowsableAttribute("1")]
public ControlCollection Controls { get; }
    [BrowsableAttribute("False")]
[WebSysDescriptionAttribute("Xml_Document")]
[DesignerSerializationVisibilityAttribute("0")]
[ObsoleteAttribute("The recommended alternative is the XPathNavigator property. Create a System.Xml.XPath.XPathDocument and call CreateNavigator() to create an XPathNavigator. http://go.microsoft.com/fwlink/?linkid=14202")]
public XmlDocument Document { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("Xml_DocumentContent")]
public string DocumentContent { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.XmlUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebSysDescriptionAttribute("Xml_DocumentSource")]
public string DocumentSource { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool EnableTheming { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[EditorBrowsableAttribute("1")]
public string SkinID { get; public set; }
    [BrowsableAttribute("False")]
[WebSysDescriptionAttribute("Xml_Transform")]
[DesignerSerializationVisibilityAttribute("0")]
public XslTransform Transform { get; public set; }
    [BrowsableAttribute("False")]
[WebSysDescriptionAttribute("Xml_TransformArgumentList")]
[DesignerSerializationVisibilityAttribute("0")]
public XsltArgumentList TransformArgumentList { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.XslUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[WebSysDescriptionAttribute("Xml_TransformSource")]
public string TransformSource { get; public set; }
    [BrowsableAttribute("False")]
[WebSysDescriptionAttribute("Xml_XPathNavigator")]
[DesignerSerializationVisibilityAttribute("0")]
public XPathNavigator XPathNavigator { get; public set; }
    private static Xml();
    public virtual string get_ClientID();
    public virtual ControlCollection get_Controls();
    public XmlDocument get_Document();
    public void set_Document(XmlDocument value);
    public string get_DocumentContent();
    public void set_DocumentContent(string value);
    public string get_DocumentSource();
    public void set_DocumentSource(string value);
    public virtual bool get_EnableTheming();
    public virtual void set_EnableTheming(bool value);
    public virtual string get_SkinID();
    public virtual void set_SkinID(string value);
    public XslTransform get_Transform();
    public void set_Transform(XslTransform value);
    public XsltArgumentList get_TransformArgumentList();
    public void set_TransformArgumentList(XsltArgumentList value);
    public string get_TransformSource();
    public void set_TransformSource(string value);
    public XPathNavigator get_XPathNavigator();
    public void set_XPathNavigator(XPathNavigator value);
    protected virtual void AddParsedSubObject(object obj);
    protected virtual ControlCollection CreateControlCollection();
    [EditorBrowsableAttribute("1")]
public virtual Control FindControl(string id);
    [EditorBrowsableAttribute("1")]
public virtual void Focus();
    protected virtual IDictionary GetDesignModeState();
    [EditorBrowsableAttribute("1")]
public virtual bool HasControls();
    protected internal virtual void Render(HtmlTextWriter output);
}
public class System.Web.UI.WebControls.XmlBuilder : ControlBuilder {
    public virtual void AppendLiteralString(string s);
    public virtual Type GetChildControlType(string tagName, IDictionary attribs);
    public virtual bool NeedsTagInnerText();
    public virtual void SetTagInnerText(string text);
}
[DefaultEventAttribute("Transforming")]
[DefaultPropertyAttribute("DataFile")]
[DesignerAttribute("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
[ToolboxBitmapAttribute("System.Web.UI.WebControls.XmlDataSource")]
[WebSysDescriptionAttribute("XmlDataSource_Description")]
[WebSysDisplayNameAttribute("XmlDataSource_DisplayName")]
public class System.Web.UI.WebControls.XmlDataSource : HierarchicalDataSourceControl {
    [DefaultValueAttribute("0")]
[TypeConverterAttribute("System.Web.UI.DataSourceCacheDurationConverter")]
[WebCategoryAttribute("Cache")]
[WebSysDescriptionAttribute("DataSourceCache_Duration")]
public int CacheDuration { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebCategoryAttribute("Cache")]
[WebSysDescriptionAttribute("DataSourceCache_ExpirationPolicy")]
public DataSourceCacheExpiry CacheExpirationPolicy { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Cache")]
[WebSysDescriptionAttribute("DataSourceCache_KeyDependency")]
public string CacheKeyDependency { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Cache")]
[WebSysDescriptionAttribute("XmlDataSource_CacheKeyContext")]
public string CacheKeyContext { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[PersistenceModeAttribute("1")]
[TypeConverterAttribute("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("XmlDataSource_Data")]
public string Data { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("XmlDataSource_DataFile")]
public string DataFile { get; public set; }
    [DefaultValueAttribute("True")]
[WebCategoryAttribute("Cache")]
[WebSysDescriptionAttribute("DataSourceCache_Enabled")]
public bool EnableCaching { get; public set; }
    internal bool IsModifiable { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[PersistenceModeAttribute("1")]
[TypeConverterAttribute("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("XmlDataSource_Transform")]
public string Transform { get; public set; }
    [BrowsableAttribute("False")]
public XsltArgumentList TransformArgumentList { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("XmlDataSource_TransformFile")]
public string TransformFile { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("XmlDataSource_XPath")]
public string XPath { get; public set; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    private static XmlDataSource();
    public virtual int get_CacheDuration();
    public virtual void set_CacheDuration(int value);
    public virtual DataSourceCacheExpiry get_CacheExpirationPolicy();
    public virtual void set_CacheExpirationPolicy(DataSourceCacheExpiry value);
    public virtual string get_CacheKeyDependency();
    public virtual void set_CacheKeyDependency(string value);
    public virtual string get_CacheKeyContext();
    public virtual void set_CacheKeyContext(string value);
    public virtual string get_Data();
    public virtual void set_Data(string value);
    public virtual string get_DataFile();
    public virtual void set_DataFile(string value);
    public virtual bool get_EnableCaching();
    public virtual void set_EnableCaching(bool value);
    internal bool get_IsModifiable();
    public virtual string get_Transform();
    public virtual void set_Transform(string value);
    public virtual XsltArgumentList get_TransformArgumentList();
    public virtual void set_TransformArgumentList(XsltArgumentList value);
    public virtual string get_TransformFile();
    public virtual void set_TransformFile(string value);
    public virtual string get_XPath();
    public virtual void set_XPath(string value);
    public void add_Transforming(EventHandler value);
    public void remove_Transforming(EventHandler value);
    internal string CreateCacheKey();
    protected virtual HierarchicalDataSourceView GetHierarchicalView(string viewPath);
    public XmlDocument GetXmlDocument();
    protected virtual void OnTransforming(EventArgs e);
    public void Save();
    private sealed virtual override void System.Web.UI.IDataSource.add_DataSourceChanged(EventHandler value);
    private sealed virtual override void System.Web.UI.IDataSource.remove_DataSourceChanged(EventHandler value);
    private sealed virtual override DataSourceView System.Web.UI.IDataSource.GetView(string viewName);
    private sealed virtual override ICollection System.Web.UI.IDataSource.GetViewNames();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
}
internal class System.Web.UI.WebControls.XmlDataSourceNodeDescriptor : object {
    public XmlDataSourceNodeDescriptor(XmlNode node);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attrs);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attrFilter);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
    private sealed virtual override XPathNavigator System.Xml.XPath.IXPathNavigable.CreateNavigator();
}
public class System.Web.UI.WebControls.XmlDataSourceView : DataSourceView {
    public XmlDataSourceView(XmlDataSource owner, string name);
    protected internal virtual IEnumerable ExecuteSelect(DataSourceSelectArguments arguments);
    public IEnumerable Select(DataSourceSelectArguments arguments);
}
public class System.Web.UI.WebControls.XmlHierarchicalDataSourceView : HierarchicalDataSourceView {
    internal XmlHierarchicalDataSourceView(XmlDataSource owner, string viewPath);
    public virtual IHierarchicalEnumerable Select();
}
internal class System.Web.UI.WebControls.XmlHierarchicalEnumerable : object {
    internal string Path { get; internal set; }
    internal XmlHierarchicalEnumerable(XmlNodeList nodeList);
    internal string get_Path();
    internal void set_Path(string value);
    [IteratorStateMachineAttribute("System.Web.UI.WebControls.XmlHierarchicalEnumerable/<System-Collections-IEnumerable-GetEnumerator>d__6")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IHierarchyData System.Web.UI.IHierarchicalEnumerable.GetHierarchyData(object enumeratedItem);
}
internal class System.Web.UI.WebControls.XmlHierarchyData : object {
    private bool System.Web.UI.IHierarchyData.HasChildren { get; }
    private object System.Web.UI.IHierarchyData.Item { get; }
    private string System.Web.UI.IHierarchyData.Path { get; }
    private string System.Web.UI.IHierarchyData.Type { get; }
    internal XmlHierarchyData(XmlHierarchicalEnumerable parent, XmlNode item);
    public virtual string ToString();
    private sealed virtual override bool System.Web.UI.IHierarchyData.get_HasChildren();
    private sealed virtual override object System.Web.UI.IHierarchyData.get_Item();
    private sealed virtual override string System.Web.UI.IHierarchyData.get_Path();
    private sealed virtual override string System.Web.UI.IHierarchyData.get_Type();
    private sealed virtual override IHierarchicalEnumerable System.Web.UI.IHierarchyData.GetChildren();
    private sealed virtual override IHierarchyData System.Web.UI.IHierarchyData.GetParent();
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attrs);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attrFilter);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
internal class System.Web.UI.WebHandlerParser : SimpleWebHandlerParser {
    protected string DefaultDirectiveName { get; }
    internal WebHandlerParser(string virtualPath);
    protected virtual string get_DefaultDirectiveName();
    internal virtual void ValidateBaseType(Type t);
}
[AttributeUsageAttribute("1")]
public class System.Web.UI.WebResourceAttribute : Attribute {
    internal static string _microsoftCdnBasePath;
    public string CdnPath { get; public set; }
    public string LoadSuccessExpression { get; public set; }
    internal string CdnPathSecureConnection { get; }
    public bool CdnSupportsSecureConnection { get; public set; }
    public string ContentType { get; }
    public bool PerformSubstitution { get; public set; }
    public string WebResource { get; }
    public WebResourceAttribute(string webResource, string contentType);
    public string get_CdnPath();
    public void set_CdnPath(string value);
    [CompilerGeneratedAttribute]
public string get_LoadSuccessExpression();
    [CompilerGeneratedAttribute]
public void set_LoadSuccessExpression(string value);
    internal string get_CdnPathSecureConnection();
    public bool get_CdnSupportsSecureConnection();
    public void set_CdnSupportsSecureConnection(bool value);
    public string get_ContentType();
    public bool get_PerformSubstitution();
    public void set_PerformSubstitution(bool value);
    public string get_WebResource();
}
public class System.Web.UI.WebServiceParser : SimpleWebHandlerParser {
    protected string DefaultDirectiveName { get; }
    internal WebServiceParser(string virtualPath);
    public static Type GetCompiledType(string inputFile, HttpContext context);
    protected virtual string get_DefaultDirectiveName();
}
public enum System.Web.UI.XhtmlMobileDocType : Enum {
    public int value__;
    public static XhtmlMobileDocType XhtmlBasic;
    public static XhtmlMobileDocType XhtmlMobileProfile;
    public static XhtmlMobileDocType Wml20;
}
public class System.Web.UI.XhtmlTextWriter : HtmlTextWriter {
    internal bool RenderDivAroundHiddenInputs { get; }
    protected Hashtable CommonAttributes { get; }
    protected Hashtable ElementSpecificAttributes { get; }
    protected Hashtable SuppressCommonAttributes { get; }
    public XhtmlTextWriter(TextWriter writer);
    public XhtmlTextWriter(TextWriter writer, string tabString);
    internal virtual bool get_RenderDivAroundHiddenInputs();
    public virtual void AddRecognizedAttribute(string elementName, string attributeName);
    public virtual bool IsValidFormAttribute(string attributeName);
    protected virtual bool OnAttributeRender(string name, string value, HtmlTextWriterAttribute key);
    protected virtual bool OnStyleAttributeRender(string name, string value, HtmlTextWriterStyle key);
    public virtual void RemoveRecognizedAttribute(string elementName, string attributeName);
    public virtual void SetDocType(XhtmlMobileDocType docType);
    public virtual void WriteBreak();
    protected Hashtable get_CommonAttributes();
    protected Hashtable get_ElementSpecificAttributes();
    protected Hashtable get_SuppressCommonAttributes();
}
public class System.Web.UI.XPathBinder : object {
    public static object Eval(object container, string xPath);
    public static object Eval(object container, string xPath, IXmlNamespaceResolver resolver);
    public static string Eval(object container, string xPath, string format);
    public static string Eval(object container, string xPath, string format, IXmlNamespaceResolver resolver);
    public static IEnumerable Select(object container, string xPath);
    public static IEnumerable Select(object container, string xPath, IXmlNamespaceResolver resolver);
}
internal class System.Web.UnhandledErrorFormatter : ErrorFormatter {
    protected Exception _e;
    protected Exception _initialException;
    protected ArrayList _exStack;
    protected string _physicalPath;
    protected int _line;
    protected string _message;
    protected string _postMessage;
    protected Exception Exception { get; }
    protected string ErrorTitle { get; }
    protected string Description { get; }
    protected string MiscSectionTitle { get; }
    protected string MiscSectionContent { get; }
    protected string ColoredSquareTitle { get; }
    protected string ColoredSquareContent { get; }
    protected bool WrapColoredSquareContentLines { get; }
    protected string ColoredSquare2Title { get; }
    protected string ColoredSquare2Content { get; }
    protected string PostMessage { get; }
    protected bool ShowSourceFileInfo { get; }
    protected string PhysicalPath { get; }
    protected int SourceFileLineNumber { get; }
    internal UnhandledErrorFormatter(Exception e);
    internal UnhandledErrorFormatter(Exception e, string message, string postMessage);
    internal virtual void PrepareFormatter();
    protected virtual Exception get_Exception();
    protected virtual string get_ErrorTitle();
    protected virtual string get_Description();
    protected virtual string get_MiscSectionTitle();
    protected virtual string get_MiscSectionContent();
    protected virtual string get_ColoredSquareTitle();
    protected virtual string get_ColoredSquareContent();
    protected virtual bool get_WrapColoredSquareContentLines();
    protected virtual string get_ColoredSquare2Title();
    protected virtual string get_ColoredSquare2Content();
    protected virtual string get_PostMessage();
    protected virtual bool get_ShowSourceFileInfo();
    protected virtual string get_PhysicalPath();
    protected virtual int get_SourceFileLineNumber();
}
[ComVisibleAttribute("False")]
[SuppressUnmanagedCodeSecurityAttribute]
internal static class System.Web.UnsafeNativeMethods : object {
    internal static IntPtr INVALID_HANDLE_VALUE;
    public static int TOKEN_ALL_ACCESS;
    public static int TOKEN_EXECUTE;
    public static int TOKEN_READ;
    public static int TOKEN_IMPERSONATE;
    public static int ERROR_NO_TOKEN;
    public static int OWNER_SECURITY_INFORMATION;
    public static int GROUP_SECURITY_INFORMATION;
    public static int DACL_SECURITY_INFORMATION;
    public static int SACL_SECURITY_INFORMATION;
    internal static int FILE_ATTRIBUTE_READONLY;
    internal static int FILE_ATTRIBUTE_HIDDEN;
    internal static int FILE_ATTRIBUTE_SYSTEM;
    internal static int FILE_ATTRIBUTE_DIRECTORY;
    internal static int FILE_ATTRIBUTE_ARCHIVE;
    internal static int FILE_ATTRIBUTE_DEVICE;
    internal static int FILE_ATTRIBUTE_NORMAL;
    internal static int FILE_ATTRIBUTE_TEMPORARY;
    internal static int FILE_ATTRIBUTE_SPARSE_FILE;
    internal static int FILE_ATTRIBUTE_REPARSE_POINT;
    internal static int FILE_ATTRIBUTE_COMPRESSED;
    internal static int FILE_ATTRIBUTE_OFFLINE;
    internal static int FILE_ATTRIBUTE_NOT_CONTENT_INDEXED;
    internal static int FILE_ATTRIBUTE_ENCRYPTED;
    internal static int DELETE;
    internal static int READ_CONTROL;
    internal static int WRITE_DAC;
    internal static int WRITE_OWNER;
    internal static int SYNCHRONIZE;
    internal static int STANDARD_RIGHTS_REQUIRED;
    internal static int STANDARD_RIGHTS_READ;
    internal static int STANDARD_RIGHTS_WRITE;
    internal static int STANDARD_RIGHTS_EXECUTE;
    internal static int GENERIC_READ;
    internal static int STANDARD_RIGHTS_ALL;
    internal static int SPECIFIC_RIGHTS_ALL;
    internal static int FILE_SHARE_READ;
    internal static int FILE_SHARE_WRITE;
    internal static int FILE_SHARE_DELETE;
    internal static int OPEN_EXISTING;
    internal static int OPEN_ALWAYS;
    internal static int FILE_FLAG_WRITE_THROUGH;
    internal static int FILE_FLAG_OVERLAPPED;
    internal static int FILE_FLAG_NO_BUFFERING;
    internal static int FILE_FLAG_RANDOM_ACCESS;
    internal static int FILE_FLAG_SEQUENTIAL_SCAN;
    internal static int FILE_FLAG_DELETE_ON_CLOSE;
    internal static int FILE_FLAG_BACKUP_SEMANTICS;
    internal static int FILE_FLAG_POSIX_SEMANTICS;
    internal static int GetFileExInfoStandard;
    internal static UInt32 FILE_NOTIFY_CHANGE_FILE_NAME;
    internal static UInt32 FILE_NOTIFY_CHANGE_DIR_NAME;
    internal static UInt32 FILE_NOTIFY_CHANGE_ATTRIBUTES;
    internal static UInt32 FILE_NOTIFY_CHANGE_SIZE;
    internal static UInt32 FILE_NOTIFY_CHANGE_LAST_WRITE;
    internal static UInt32 FILE_NOTIFY_CHANGE_LAST_ACCESS;
    internal static UInt32 FILE_NOTIFY_CHANGE_CREATION;
    internal static UInt32 FILE_NOTIFY_CHANGE_SECURITY;
    internal static UInt32 RDCW_FILTER_FILE_AND_DIR_CHANGES;
    internal static UInt32 RDCW_FILTER_FILE_CHANGES;
    internal static UInt32 RDCW_FILTER_DIR_RENAMES;
    public static int RESTRICT_BIN;
    internal static int StateProtocolFlagUninitialized;
    private static UnsafeNativeMethods();
    internal static int SetThreadToken(IntPtr threadref, IntPtr token);
    internal static int RevertToSelf();
    internal static int OpenThreadToken(IntPtr thread, int access, bool openAsSelf, IntPtr& hToken);
    internal static int GetFileSecurity(string filename, int requestedInformation, Byte[] securityDescriptor, int length, Int32& lengthNeeded);
    public static int LogonUser(string username, string domain, string password, int dwLogonType, int dwLogonProvider, IntPtr& phToken);
    public static int ConvertStringSidToSid(string stringSid, IntPtr& pSid);
    public static int LookupAccountSid(string systemName, IntPtr pSid, StringBuilder szName, Int32& nameSize, StringBuilder szDomain, Int32& domainSize, Int32& eUse);
    internal static void STWNDCloseConnection(IntPtr tracker);
    internal static void STWNDDeleteStateItem(IntPtr stateItem);
    internal static void STWNDEndOfRequest(IntPtr tracker);
    internal static void STWNDGetLocalAddress(IntPtr tracker, StringBuilder buf);
    internal static int STWNDGetLocalPort(IntPtr tracker);
    internal static void STWNDGetRemoteAddress(IntPtr tracker, StringBuilder buf);
    internal static int STWNDGetRemotePort(IntPtr tracker);
    internal static bool STWNDIsClientConnected(IntPtr tracker);
    internal static void STWNDSendResponse(IntPtr tracker, StringBuilder status, int statusLength, StringBuilder headers, int headersLength, IntPtr unmanagedState);
    internal static int lstrlenW(IntPtr ptr);
    internal static int lstrlenA(IntPtr ptr);
    internal static bool MoveFileEx(string oldFilename, string newFilename, UInt32 flags);
    internal static bool CloseHandle(IntPtr handle);
    internal static bool FindClose(IntPtr hndFindFile);
    internal static IntPtr FindFirstFile(string pFileName, WIN32_FIND_DATA& pFindFileData);
    internal static bool FindNextFile(IntPtr hndFindFile, WIN32_FIND_DATA& pFindFileData);
    internal static bool GetFileAttributesEx(string name, int fileInfoLevel, WIN32_FILE_ATTRIBUTE_DATA& data);
    internal static int GetProcessAffinityMask(IntPtr handle, IntPtr& processAffinityMask, IntPtr& systemAffinityMask);
    internal static int GetComputerName(StringBuilder nameBuffer, Int32& bufferSize);
    internal static int GetModuleFileName(IntPtr module, StringBuilder filename, int size);
    internal static IntPtr GetModuleHandle(string moduleName);
    internal static void GetSystemInfo(SYSTEM_INFO& si);
    internal static IntPtr LoadLibrary(string libFilename);
    internal static bool FreeLibrary(IntPtr hModule);
    internal static IntPtr FindResource(IntPtr hModule, IntPtr lpName, IntPtr lpType);
    internal static int SizeofResource(IntPtr hModule, IntPtr hResInfo);
    internal static IntPtr LoadResource(IntPtr hModule, IntPtr hResInfo);
    internal static IntPtr LockResource(IntPtr hResData);
    public static IntPtr LocalFree(IntPtr pMem);
    internal static int GlobalMemoryStatusEx(MEMORYSTATUSEX& memoryStatusEx);
    internal static IntPtr GetCurrentThread();
    internal static IntPtr GetProcessHeap();
    internal static bool HeapFree(IntPtr hHeap, UInt32 dwFlags, IntPtr lpMem);
    internal static void AppDomainRestart(string appId);
    internal static int AspCompatProcessRequest(AspCompatCallback callback, object context, bool sharedActivity, int activityHash);
    internal static int AspCompatOnPageStart(object obj);
    internal static int AspCompatOnPageEnd();
    internal static int AspCompatIsApartmentComponent(object obj);
    internal static int AttachDebugger(string clsId, string sessId, IntPtr userToken);
    internal static int ChangeAccessToKeyContainer(string containerName, string accountName, string csp, int options);
    internal static int CookieAuthParseTicket(Byte[] pData, int iDataLen, StringBuilder szName, int iNameLen, StringBuilder szData, int iUserDataLen, StringBuilder szPath, int iPathLen, Byte[] pBytes, Int64[] pDates);
    internal static int CookieAuthConstructTicket(Byte[] pData, int iDataLen, string szName, string szData, string szPath, Byte[] pBytes, Int64[] pDates);
    internal static IntPtr CreateUserToken(string name, string password, int fImpersonationToken, StringBuilder strError, int iErrorSize);
    internal static void GetDirMonConfiguration(Int32& FCNMode);
    internal static void DirMonClose(HandleRef dirMon, bool fNeedToDispose);
    internal static int DirMonOpen(string dir, string appId, bool watchSubtree, UInt32 notifyFilter, int fcnMode, NativeFileChangeNotification callback, IntPtr& pCompletion);
    internal static int GrowFileNotificationBuffer(string appId, bool fWatchSubtree);
    internal static void EcbFreeExecUrlEntityInfo(IntPtr pEntity);
    internal static int EcbGetBasics(IntPtr pECB, Byte[] buffer, int size, Int32[] contentInfo);
    internal static int EcbGetBasicsContentInfo(IntPtr pECB, Int32[] contentInfo);
    internal static int EcbGetTraceFlags(IntPtr pECB, Int32[] contentInfo);
    internal static int EcbEmitSimpleTrace(IntPtr pECB, int type, string eventData);
    internal static int EcbEmitWebEventTrace(IntPtr pECB, int webEventType, int fieldCount, String[] fieldNames, Int32[] fieldTypes, String[] fieldData);
    internal static int EcbGetClientCertificate(IntPtr pECB, Byte[] buffer, int size, Int32[] pInts, Int64[] pDates);
    internal static int EcbGetExecUrlEntityInfo(int entityLength, Byte[] entity, IntPtr& ppEntity);
    internal static int EcbGetTraceContextId(IntPtr pECB, Guid& traceContextId);
    internal static int EcbGetServerVariable(IntPtr pECB, string name, Byte[] buffer, int size);
    internal static int EcbGetServerVariableByIndex(IntPtr pECB, int nameIndex, Byte[] buffer, int size);
    internal static int EcbGetQueryString(IntPtr pECB, int encode, StringBuilder buffer, int size);
    internal static int EcbGetUnicodeServerVariable(IntPtr pECB, string name, IntPtr buffer, int size);
    internal static int EcbGetUnicodeServerVariableByIndex(IntPtr pECB, int nameIndex, IntPtr buffer, int size);
    internal static int EcbGetUnicodeServerVariables(IntPtr pECB, IntPtr buffer, int bufferSizeInChars, Int32[] serverVarLengths, int serverVarCount, int startIndex, Int32& requiredSize);
    internal static int EcbGetVersion(IntPtr pECB);
    internal static int EcbGetQueryStringRawBytes(IntPtr pECB, Byte[] buffer, int size);
    internal static int EcbGetPreloadedPostedContent(IntPtr pECB, Byte[] bytes, int offset, int bufferSize);
    internal static int EcbGetAdditionalPostedContent(IntPtr pECB, Byte[] bytes, int offset, int bufferSize);
    internal static int EcbReadClientAsync(IntPtr pECB, int dwBytesToRead, AsyncCompletionCallback pfnCallback);
    internal static int EcbFlushCore(IntPtr pECB, Byte[] status, Byte[] header, int keepConnected, int totalBodySize, int numBodyFragments, IntPtr[] bodyFragments, Int32[] bodyFragmentLengths, int doneWithSession, int finalStatus, int kernelCache, int async, ISAPIAsyncCompletionCallback asyncCompletionCallback);
    internal static int EcbIsClientConnected(IntPtr pECB);
    internal static int EcbCloseConnection(IntPtr pECB);
    internal static int EcbMapUrlToPath(IntPtr pECB, string url, Byte[] buffer, int size);
    internal static IntPtr EcbGetImpersonationToken(IntPtr pECB, IntPtr processHandle);
    internal static IntPtr EcbGetVirtualPathToken(IntPtr pECB, IntPtr processHandle);
    internal static int EcbAppendLogParameter(IntPtr pECB, string logParam);
    internal static int EcbExecuteUrlUnicode(IntPtr pECB, string url, string method, string childHeaders, bool sendHeaders, bool addUserIndo, IntPtr token, string name, string authType, IntPtr pEntity, ISAPIAsyncCompletionCallback asyncCompletionCallback);
    internal static void InvalidateKernelCache(string key);
    internal static void FreeFileSecurityDescriptor(IntPtr securityDesciptor);
    internal static IntPtr GetFileHandleForTransmitFile(string strFile);
    internal static IntPtr GetFileSecurityDescriptor(string strFile);
    internal static int GetGroupsForUser(IntPtr token, StringBuilder allGroups, int allGrpSize, StringBuilder error, int errorSize);
    internal static int GetHMACSHA1Hash(Byte[] data1, int dataOffset1, int dataSize1, Byte[] data2, int dataSize2, Byte[] innerKey, int innerKeySize, Byte[] outerKey, int outerKeySize, Byte[] hash, int hashSize);
    internal static int GetPrivateBytesIIS6(Int64& privatePageCount, bool nocache);
    internal static int GetProcessMemoryInformation(UInt32 pid, UInt32& privatePageCount, UInt32& peakPagefileUsage, bool nocache);
    internal static int GetSHA1Hash(Byte[] data, int dataSize, Byte[] hash, int hashSize);
    internal static int GetW3WPMemoryLimitInKB();
    internal static void SetClrThreadPoolLimits(int maxWorkerThreads, int maxIoThreads, bool autoConfig);
    internal static void SetMinRequestsExecutingToDetectDeadlock(int minRequestsExecutingToDetectDeadlock);
    internal static void InitializeLibrary(bool reduceMaxThreads);
    internal static void PerfCounterInitialize();
    internal static void InitializeHealthMonitor(int deadlockIntervalSeconds, int requestQueueLimit);
    internal static int IsAccessToFileAllowed(IntPtr securityDesciptor, IntPtr iThreadToken, int iAccess);
    internal static int IsUserInRole(IntPtr token, string rolename, StringBuilder error, int errorSize);
    internal static void UpdateLastActivityTimeForHealthMonitor();
    internal static int GetCredentialFromRegistry(string strRegKey, StringBuilder buffer, int size);
    internal static int EcbGetChannelBindingToken(IntPtr pECB, IntPtr& token, Int32& tokenSize);
    internal static int EcbCallISAPI(IntPtr pECB, CallISAPIFunc iFunction, Byte[] bufferIn, int sizeIn, Byte[] bufferOut, int sizeOut);
    internal static int PassportVersion();
    internal static int PassportCreateHttpRaw(string szRequestLine, string szHeaders, int fSecure, StringBuilder szBufOut, int dwRetBufSize, IntPtr& passportManager);
    internal static int PassportTicket(IntPtr pManager, string szAttr, Object& pReturn);
    internal static int PassportGetCurrentConfig(IntPtr pManager, string szAttr, Object& pReturn);
    internal static int PassportLogoutURL(IntPtr pManager, string szReturnURL, string szCOBrandArgs, int iLangID, string strDomain, int iUseSecureAuth, StringBuilder szAuthVal, int iAuthValSize);
    internal static int PassportGetOption(IntPtr pManager, string szOption, Object& vOut);
    internal static int PassportSetOption(IntPtr pManager, string szOption, object vOut);
    internal static int PassportGetLoginChallenge(IntPtr pManager, string szRetURL, int iTimeWindow, int fForceLogin, string szCOBrandArgs, int iLangID, string strNameSpace, int iKPP, int iUseSecureAuth, object vExtraParams, StringBuilder szOut, int iOutSize);
    internal static int PassportHexPUID(IntPtr pManager, StringBuilder szOut, int iOutSize);
    internal static int PassportCreate(string szQueryStrT, string szQueryStrP, string szAuthCookie, string szProfCookie, string szProfCCookie, StringBuilder szAuthCookieRet, StringBuilder szProfCookieRet, int iRetBufSize, IntPtr& passportManager);
    internal static int PassportAuthURL(IntPtr iPassport, string szReturnURL, int iTimeWindow, int fForceLogin, string szCOBrandArgs, int iLangID, string strNameSpace, int iKPP, int iUseSecureAuth, StringBuilder szAuthVal, int iAuthValSize);
    internal static int PassportAuthURL2(IntPtr iPassport, string szReturnURL, int iTimeWindow, int fForceLogin, string szCOBrandArgs, int iLangID, string strNameSpace, int iKPP, int iUseSecureAuth, StringBuilder szAuthVal, int iAuthValSize);
    internal static int PassportGetError(IntPtr iPassport);
    internal static int PassportDomainFromMemberName(IntPtr iPassport, string szDomain, StringBuilder szMember, int iMemberSize);
    internal static int PassportGetFromNetworkServer(IntPtr iPassport);
    internal static int PassportGetDomainAttribute(IntPtr iPassport, string szAttributeName, int iLCID, string szDomain, StringBuilder szValue, int iValueSize);
    internal static int PassportHasProfile(IntPtr iPassport, string szProfile);
    internal static int PassportHasFlag(IntPtr iPassport, int iFlagMask);
    internal static int PassportHasConsent(IntPtr iPassport, int iFullConsent, int iNeedBirthdate);
    internal static int PassportGetHasSavedPassword(IntPtr iPassport);
    internal static int PassportHasTicket(IntPtr iPassport);
    internal static int PassportIsAuthenticated(IntPtr iPassport, int iTimeWindow, int fForceLogin, int iUseSecureAuth);
    internal static int PassportLogoTag(IntPtr iPassport, string szRetURL, int iTimeWindow, int fForceLogin, string szCOBrandArgs, int iLangID, int fSecure, string strNameSpace, int iKPP, int iUseSecureAuth, StringBuilder szValue, int iValueSize);
    internal static int PassportLogoTag2(IntPtr iPassport, string szRetURL, int iTimeWindow, int fForceLogin, string szCOBrandArgs, int iLangID, int fSecure, string strNameSpace, int iKPP, int iUseSecureAuth, StringBuilder szValue, int iValueSize);
    internal static int PassportGetProfile(IntPtr iPassport, string szProfile, Object& rOut);
    internal static int PassportGetTicketAge(IntPtr iPassport);
    internal static int PassportGetTimeSinceSignIn(IntPtr iPassport);
    internal static void PassportDestroy(IntPtr iPassport);
    internal static int PassportCrypt(int iFunctionID, string szSrc, StringBuilder szDest, int iDestLength);
    internal static int PassportCryptPut(int iFunctionID, string szSrc);
    internal static int PassportCryptIsValid();
    internal static int PostThreadPoolWorkItem(WorkItemCallback callback);
    internal static IntPtr InstrumentedMutexCreate(string name);
    internal static void InstrumentedMutexDelete(HandleRef mutex);
    internal static int InstrumentedMutexGetLock(HandleRef mutex, int timeout);
    internal static int InstrumentedMutexReleaseLock(HandleRef mutex);
    internal static void InstrumentedMutexSetState(HandleRef mutex, int state);
    internal static int IsapiAppHostMapPath(string appId, string virtualPath, StringBuilder buffer, int size);
    internal static int IsapiAppHostGetAppPath(string aboPath, StringBuilder buffer, int size);
    internal static int IsapiAppHostGetUncUser(string appId, StringBuilder usernameBuffer, int usernameSize, StringBuilder passwordBuffer, int passwordSize);
    internal static int IsapiAppHostGetSiteName(string appId, StringBuilder buffer, int size);
    internal static int IsapiAppHostGetSiteId(string site, StringBuilder buffer, int size);
    internal static int IsapiAppHostGetNextVirtualSubdir(string aboPath, bool inApp, Int32& index, StringBuilder sb, int size);
    internal static IntPtr BufferPoolGetPool(int bufferSize, int maxFreeListCount);
    internal static IntPtr BufferPoolGetBuffer(IntPtr pool);
    internal static void BufferPoolReleaseBuffer(IntPtr buffer);
    internal static int PMGetTraceContextId(IntPtr pMsg, Guid& traceContextId);
    internal static int PMGetHistoryTable(int iRows, Int32[] dwPIDArr, Int32[] dwReqExecuted, Int32[] dwReqPending, Int32[] dwReqExecuting, Int32[] dwReasonForDeath, Int32[] dwPeakMemoryUsed, Int64[] tmCreateTime, Int64[] tmDeathTime);
    internal static int PMGetCurrentProcessInfo(Int32& dwReqExecuted, Int32& dwReqExecuting, Int32& dwPeakMemoryUsed, Int64& tmCreateTime, Int32& pid);
    internal static int PMGetMemoryLimitInMB();
    internal static int PMGetBasics(IntPtr pMsg, Byte[] buffer, int size, Int32[] contentInfo);
    internal static int PMGetClientCertificate(IntPtr pMsg, Byte[] buffer, int size, Int32[] pInts, Int64[] pDates);
    internal static long PMGetStartTimeStamp(IntPtr pMsg);
    internal static int PMGetAllServerVariables(IntPtr pMsg, Byte[] buffer, int size);
    internal static int PMGetQueryString(IntPtr pMsg, int encode, StringBuilder buffer, int size);
    internal static int PMGetQueryStringRawBytes(IntPtr pMsg, Byte[] buffer, int size);
    internal static int PMGetPreloadedPostedContent(IntPtr pMsg, Byte[] bytes, int offset, int bufferSize);
    internal static int PMGetAdditionalPostedContent(IntPtr pMsg, Byte[] bytes, int offset, int bufferSize);
    internal static int PMEmptyResponse(IntPtr pMsg);
    internal static int PMIsClientConnected(IntPtr pMsg);
    internal static int PMCloseConnection(IntPtr pMsg);
    internal static int PMMapUrlToPath(IntPtr pMsg, string url, Byte[] buffer, int size);
    internal static IntPtr PMGetImpersonationToken(IntPtr pMsg);
    internal static IntPtr PMGetVirtualPathToken(IntPtr pMsg);
    internal static int PMAppendLogParameter(IntPtr pMsg, string logParam);
    internal static int PMFlushCore(IntPtr pMsg, Byte[] status, Byte[] header, int keepConnected, int totalBodySize, int bodyFragmentsOffset, int numBodyFragments, IntPtr[] bodyFragments, Int32[] bodyFragmentLengths, int doneWithSession, int finalStatus);
    internal static int PMCallISAPI(IntPtr pECB, CallISAPIFunc iFunction, Byte[] bufferIn, int sizeIn, Byte[] bufferOut, int sizeOut);
    internal static IntPtr PerfOpenGlobalCounters();
    internal static IntPtr PerfOpenStateCounters();
    internal static PerfInstanceDataHandle PerfOpenAppCounters(string AppName);
    [ReliabilityContractAttribute("3", "2")]
internal static void PerfCloseAppCounters(IntPtr pCounters);
    internal static void PerfIncrementCounter(IntPtr pCounters, int number);
    internal static void PerfDecrementCounter(IntPtr pCounters, int number);
    internal static void PerfIncrementCounterEx(IntPtr pCounters, int number, int increment);
    internal static void PerfSetCounter(IntPtr pCounters, int number, int increment);
    internal static int PerfGetCounter(IntPtr pCounters, int number);
    internal static void GetEtwValues(Int32& level, Int32& flags);
    internal static void TraceRaiseEventMgdHandler(int eventType, IntPtr pRequestContext, string data1, string data2, string data3, string data4);
    internal static void TraceRaiseEventWithEcb(int eventType, IntPtr ecb, string data1, string data2, string data3, string data4);
    internal static void PMTraceRaiseEvent(int eventType, IntPtr pMsg, string data1, string data2, string data3, string data4);
    internal static int SessionNDConnectToService(string server);
    internal static int SessionNDMakeRequest(HandleRef socket, string server, int port, bool forceIPv6, int networkTimeout, StateProtocolVerb verb, string uri, StateProtocolExclusive exclusive, int extraFlags, int timeout, int lockCookie, Byte[] body, int cb, bool checkVersion, SessionNDMakeRequestResults& results);
    internal static void SessionNDFreeBody(HandleRef body);
    internal static void SessionNDCloseConnection(HandleRef socket);
    internal static int TransactManagedCallback(TransactedExecCallback callback, int mode);
    internal static bool IsValidResource(IntPtr hModule, IntPtr ip, int size);
    internal static int GetCachePath(int dwCacheFlags, StringBuilder pwzCachePath, Int32& pcchPath);
    internal static int DeleteShadowCache(string pwzCachePath, string pwzAppName);
    internal static int InitializeWmiManager();
    internal static int DoesKeyContainerExist(string containerName, string provider, int useMachineContainer);
    internal static int RaiseWmiEvent(WmiData& pWmiData, bool IsInAspCompatMode);
    internal static int RaiseEventlogEvent(int eventType, String[] dataFields, int size);
    internal static void LogWebeventProviderFailure(string appUrl, string providerName, string exception);
    internal static IntPtr GetEcb(IntPtr pHttpCompletion);
    internal static void SetDoneWithSessionCalled(IntPtr pHttpCompletion);
    internal static void ReportUnhandledException(string eventInfo);
    internal static void RaiseFileMonitoringEventlogEvent(string eventInfo, string path, string appVirtualPath, int hr);
    internal static int StartPrefetchActivity(UInt32 ulActivityId);
    internal static int EndPrefetchActivity(UInt32 ulActivityId);
    internal static IntPtr GetExtensionlessUrlAppendage();
    internal static int CoCreateInstanceEx(Guid& clsid, IntPtr pUnkOuter, int dwClsContext, COSERVERINFO srv, int num, MULTI_QI[] amqi);
    internal static int CoCreateInstanceEx(Guid& clsid, IntPtr pUnkOuter, int dwClsContext, COSERVERINFO_X64 srv, int num, MULTI_QI_X64[] amqi);
    internal static int CoSetProxyBlanket(IntPtr pProxy, RpcAuthent authent, RpcAuthor author, string serverprinc, RpcLevel level, RpcImpers impers, IntPtr ciptr, int dwCapabilities);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UnvalidatedRequestValues : object {
    public NameValueCollection Form { get; }
    public NameValueCollection QueryString { get; }
    public NameValueCollection Headers { get; }
    public HttpCookieCollection Cookies { get; }
    public HttpFileCollection Files { get; }
    public string RawUrl { get; }
    public string Path { get; }
    public string PathInfo { get; }
    public string Item { get; }
    public Uri Url { get; }
    internal UnvalidatedRequestValues(HttpRequest request);
    public NameValueCollection get_Form();
    internal void InvalidateForm();
    public NameValueCollection get_QueryString();
    internal void InvalidateQueryString();
    public NameValueCollection get_Headers();
    public HttpCookieCollection get_Cookies();
    public HttpFileCollection get_Files();
    public string get_RawUrl();
    public string get_Path();
    public string get_PathInfo();
    public string get_Item(string field);
    public Uri get_Url();
    internal void InvalidateUrl();
}
[DefaultMemberAttribute("Item")]
public abstract class System.Web.UnvalidatedRequestValuesBase : object {
    public NameValueCollection Form { get; }
    public NameValueCollection QueryString { get; }
    public NameValueCollection Headers { get; }
    public HttpCookieCollection Cookies { get; }
    public HttpFileCollectionBase Files { get; }
    public string RawUrl { get; }
    public string Path { get; }
    public string PathInfo { get; }
    public string Item { get; }
    public Uri Url { get; }
    public virtual NameValueCollection get_Form();
    public virtual NameValueCollection get_QueryString();
    public virtual NameValueCollection get_Headers();
    public virtual HttpCookieCollection get_Cookies();
    public virtual HttpFileCollectionBase get_Files();
    public virtual string get_RawUrl();
    public virtual string get_Path();
    public virtual string get_PathInfo();
    public virtual string get_Item(string field);
    public virtual Uri get_Url();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UnvalidatedRequestValuesWrapper : UnvalidatedRequestValuesBase {
    public NameValueCollection Form { get; }
    public NameValueCollection QueryString { get; }
    public NameValueCollection Headers { get; }
    public HttpCookieCollection Cookies { get; }
    public HttpFileCollectionBase Files { get; }
    public string RawUrl { get; }
    public string Path { get; }
    public string PathInfo { get; }
    public string Item { get; }
    public Uri Url { get; }
    public UnvalidatedRequestValuesWrapper(UnvalidatedRequestValues requestValues);
    public virtual NameValueCollection get_Form();
    public virtual NameValueCollection get_QueryString();
    public virtual NameValueCollection get_Headers();
    public virtual HttpCookieCollection get_Cookies();
    public virtual HttpFileCollectionBase get_Files();
    public virtual string get_RawUrl();
    public virtual string get_Path();
    public virtual string get_PathInfo();
    public virtual string get_Item(string field);
    public virtual Uri get_Url();
}
internal class System.Web.UrlMappingsModule : object {
    public sealed virtual void Init(HttpApplication application);
    public sealed virtual void Dispose();
    internal void OnEnter(object source, EventArgs eventArgs);
    internal static void UrlMappingRewritePath(HttpContext context);
}
internal class System.Web.UseLastUnhandledErrorFormatter : UnhandledErrorFormatter {
    internal UseLastUnhandledErrorFormatter(Exception e);
    internal virtual void PrepareFormatter();
}
internal class System.Web.Util.ActivityIdHelper : object {
    internal static ActivityIdHelper Instance;
    public Guid CurrentThreadActivityId { get; }
    private static ActivityIdHelper();
    public Guid get_CurrentThreadActivityId();
    public void SetCurrentThreadActivityId(Guid activityId);
    public void SetCurrentThreadActivityId(Guid activityId, Guid& oldActivityThatWillContinue);
    public static Guid UnsafeCreateNewActivityId();
}
internal static class System.Web.Util.AltSerialization : object {
    internal static void WriteValueToStream(object value, BinaryWriter writer);
    internal static object ReadValueFromStream(BinaryReader reader);
}
internal static class System.Web.Util.AppSettings : object {
    internal static bool UseHostHeaderForRequestUrl { get; }
    internal static bool AllowAnonymousImpersonation { get; }
    internal static bool ScriptResourceAllowNonJsFiles { get; }
    internal static bool UseLegacyEncryption { get; }
    internal static bool UseLegacyMachineKeyEncryption { get; }
    internal static bool UseLegacyFormsAuthenticationTicketCompatibility { get; }
    internal static bool UseLegacyEventValidationCompatibility { get; }
    internal static Nullable`1<bool> AllowInsecureDeserialization { get; }
    internal static bool AlwaysIgnoreViewStateValidationErrors { get; }
    internal static bool AllowRelaxedHttpUserName { get; }
    internal static bool JavaScriptDoNotEncodeAmpersand { get; }
    internal static bool UseTaskFriendlySynchronizationContext { get; }
    internal static bool AllowAsyncDuringSyncStages { get; }
    internal static int MaxHttpCollectionKeys { get; }
    internal static int MaxJsonDeserializerMembers { get; }
    internal static bool DoNotDisposeSpecialHttpApplicationInstances { get; }
    internal static string FormsAuthReturnUrlVar { get; }
    internal static bool RestrictXmlControls { get; }
    internal static bool AllowRelaxedRelativeUrl { get; }
    internal static bool UseLegacyRequestUrlGeneration { get; }
    internal static bool AllowUtf7RequestContentEncoding { get; }
    internal static bool AllowRelaxedUnicodeDecoding { get; }
    internal static bool DontUsePercentUUrlEncoding { get; }
    internal static int UpdatePanelMaxScriptLength { get; }
    internal static Nullable`1<int> MaxConcurrentCompilations { get; }
    internal static int MaxAcceptLanguageFallbackCount { get; }
    internal static bool PortableCompilationOutput { get; }
    internal static string PortableCompilationOutputSnapshotType { get; }
    internal static string PortableCompilationOutputSnapshotTypeOptions { get; }
    internal static bool EnsureSessionStateLockedOnFlush { get; }
    internal static bool UseRandomizedStringHashAlgorithm { get; }
    internal static bool EnableAsyncModelBinding { get; }
    private static AppSettings();
    internal static bool get_UseHostHeaderForRequestUrl();
    internal static bool get_AllowAnonymousImpersonation();
    internal static bool get_ScriptResourceAllowNonJsFiles();
    internal static bool get_UseLegacyEncryption();
    internal static bool get_UseLegacyMachineKeyEncryption();
    internal static bool get_UseLegacyFormsAuthenticationTicketCompatibility();
    internal static bool get_UseLegacyEventValidationCompatibility();
    internal static Nullable`1<bool> get_AllowInsecureDeserialization();
    internal static bool get_AlwaysIgnoreViewStateValidationErrors();
    internal static bool get_AllowRelaxedHttpUserName();
    internal static bool get_JavaScriptDoNotEncodeAmpersand();
    internal static bool get_UseTaskFriendlySynchronizationContext();
    internal static bool get_AllowAsyncDuringSyncStages();
    internal static int get_MaxHttpCollectionKeys();
    internal static int get_MaxJsonDeserializerMembers();
    internal static bool get_DoNotDisposeSpecialHttpApplicationInstances();
    internal static string get_FormsAuthReturnUrlVar();
    internal static bool get_RestrictXmlControls();
    internal static bool get_AllowRelaxedRelativeUrl();
    internal static bool get_UseLegacyRequestUrlGeneration();
    internal static bool get_AllowUtf7RequestContentEncoding();
    internal static bool get_AllowRelaxedUnicodeDecoding();
    internal static bool get_DontUsePercentUUrlEncoding();
    internal static int get_UpdatePanelMaxScriptLength();
    internal static Nullable`1<int> get_MaxConcurrentCompilations();
    internal static int get_MaxAcceptLanguageFallbackCount();
    internal static bool get_PortableCompilationOutput();
    internal static string get_PortableCompilationOutputSnapshotType();
    internal static string get_PortableCompilationOutputSnapshotTypeOptions();
    internal static bool get_EnsureSessionStateLockedOnFlush();
    internal static bool get_UseRandomizedStringHashAlgorithm();
    internal static bool get_EnableAsyncModelBinding();
}
internal static class System.Web.Util.AppVerifier : object {
    internal static bool IsAppVerifierEnabled;
    private static AppVerifier();
    public static Func`4<T, AsyncCallback, object, IAsyncResult> WrapBeginMethod(HttpApplication httpApplication, Func`4<T, AsyncCallback, object, IAsyncResult> originalDelegate);
    public static BeginEventHandler WrapBeginMethod(HttpApplication httpApplication, BeginEventHandler originalDelegate);
    internal static Func`3<AsyncCallback, object, IAsyncResult> WrapBeginMethodImpl(HttpApplication httpApplication, Func`3<AsyncCallback, object, IAsyncResult> beginMethod, Delegate originalDelegate, Action`1<AppVerifierException> errorHandler, CallStackCollectionBitMasks callStackMask);
    public static Action`1<bool> GetSyncContextCheckDelegate(ISyncContext syncContext);
    internal static Action`1<bool> GetSyncContextCheckDelegateImpl(ISyncContext syncContext, Action`1<AppVerifierException> errorHandler);
    internal static void InvokeVerifierCheck(Action`1<T> verifierCheckDelegate, T result);
    internal static Action`1<RequestNotificationStatus> GetRequestNotificationStatusCheckDelegate(HttpContext context, RequestNotification currentNotification, bool isPostNotification);
    internal static Action`1<RequestNotificationStatus> GetRequestNotificationStatusCheckDelegateImpl(HttpContext context, RequestNotification currentNotification, bool isPostNotification, Action`1<AppVerifierException> errorHandler);
    internal static string PrettyPrintDelegate(Delegate del);
    internal static string PrettyPrintMemberInfo(MethodInfo method);
    internal static string GetLocalizedDescriptionStringForError(AppVerifierErrorCode errorCode);
    internal static string FormatErrorString(string name, Object[] args);
}
internal enum System.Web.Util.AppVerifierErrorCode : Enum {
    public int value__;
    public static AppVerifierErrorCode Ok;
    public static AppVerifierErrorCode HttpApplicationInstanceWasNull;
    public static AppVerifierErrorCode BeginHandlerDelegateWasNull;
    public static AppVerifierErrorCode AsyncCallbackInvokedMultipleTimes;
    public static AppVerifierErrorCode AsyncCallbackInvokedWithNullParameter;
    public static AppVerifierErrorCode AsyncCallbackGivenAsyncResultWhichWasNotCompleted;
    public static AppVerifierErrorCode AsyncCallbackInvokedSynchronouslyButAsyncResultWasNotMarkedCompletedSynchronously;
    public static AppVerifierErrorCode AsyncCallbackInvokedAsynchronouslyButAsyncResultWasMarkedCompletedSynchronously;
    public static AppVerifierErrorCode AsyncCallbackInvokedWithUnexpectedAsyncResultInstance;
    public static AppVerifierErrorCode AsyncCallbackInvokedAsynchronouslyThenBeginHandlerThrew;
    public static AppVerifierErrorCode BeginHandlerThrewThenAsyncCallbackInvokedAsynchronously;
    public static AppVerifierErrorCode AsyncCallbackInvokedSynchronouslyThenBeginHandlerThrew;
    public static AppVerifierErrorCode AsyncCallbackInvokedWithUnexpectedAsyncResultAsyncState;
    public static AppVerifierErrorCode AsyncCallbackCalledAfterHttpApplicationReassigned;
    public static AppVerifierErrorCode BeginHandlerReturnedNull;
    public static AppVerifierErrorCode BeginHandlerReturnedAsyncResultMarkedCompletedSynchronouslyButWhichWasNotCompleted;
    public static AppVerifierErrorCode BeginHandlerReturnedAsyncResultMarkedCompletedSynchronouslyButAsyncCallbackNeverCalled;
    public static AppVerifierErrorCode BeginHandlerReturnedUnexpectedAsyncResultInstance;
    public static AppVerifierErrorCode BeginHandlerReturnedUnexpectedAsyncResultAsyncState;
    public static AppVerifierErrorCode SyncContextSendOrPostCalledAfterRequestCompleted;
    public static AppVerifierErrorCode SyncContextSendOrPostCalledBetweenNotifications;
    public static AppVerifierErrorCode SyncContextPostCalledInNestedNotification;
    public static AppVerifierErrorCode RequestNotificationCompletedSynchronouslyWithNotificationContextPending;
    public static AppVerifierErrorCode NotificationContextHasChangedAfterSynchronouslyProcessingNotification;
    public static AppVerifierErrorCode PendingProcessRequestNotificationStatusAfterCompletingNestedNotification;
}
internal class System.Web.Util.AppVerifierException : Exception {
    public AppVerifierErrorCode ErrorCode { get; }
    public AppVerifierException(AppVerifierErrorCode errorCode, string message);
    private AppVerifierException(SerializationInfo info, StreamingContext context);
    public AppVerifierErrorCode get_ErrorCode();
}
internal class System.Web.Util.ArglessEventHandlerProxy : object {
    internal EventHandler Handler { get; }
    internal ArglessEventHandlerProxy(object target, MethodInfo arglessMethod);
    internal void Callback(object sender, EventArgs e);
    internal EventHandler get_Handler();
}
internal class System.Web.Util.AspCompatApplicationStep : object {
    internal static bool IsInAspCompatMode { get; }
    internal AspCompatApplicationStep(HttpContext context, AspCompatCallback code);
    private static AspCompatApplicationStep();
    internal static bool get_IsInAspCompatMode();
    private sealed virtual override void System.Web.HttpApplication.IExecutionStep.Execute();
    private sealed virtual override bool System.Web.HttpApplication.IExecutionStep.get_CompletedSynchronously();
    private sealed virtual override bool System.Web.HttpApplication.IExecutionStep.get_IsCancellable();
    internal static bool AnyStaObjectsInSessionState(HttpSessionState session);
    internal static void OnPageStart(object component);
    internal static void OnPageStartSessionObjects();
    internal static void CheckThreadingModel(string progidDisplayName, Guid clsid);
    internal IAsyncResult BeginAspCompatExecution(AsyncCallback cb, object extraData);
    internal void EndAspCompatExecution(IAsyncResult ar);
    internal static void RaiseAspCompatEvent(HttpContext context, HttpApplication app, string sessionId, EventHandler eventHandler, object source, EventArgs eventArgs);
    private sealed virtual override int System.Web.Util.IManagedContext.Context_IsPresent();
    private sealed virtual override void System.Web.Util.IManagedContext.Application_Lock();
    private sealed virtual override void System.Web.Util.IManagedContext.Application_UnLock();
    private sealed virtual override string System.Web.Util.IManagedContext.Application_GetContentsNames();
    private sealed virtual override string System.Web.Util.IManagedContext.Application_GetStaticNames();
    private sealed virtual override object System.Web.Util.IManagedContext.Application_GetContentsObject(string name);
    private sealed virtual override void System.Web.Util.IManagedContext.Application_SetContentsObject(string name, object obj);
    private sealed virtual override void System.Web.Util.IManagedContext.Application_RemoveContentsObject(string name);
    private sealed virtual override void System.Web.Util.IManagedContext.Application_RemoveAllContentsObjects();
    private sealed virtual override object System.Web.Util.IManagedContext.Application_GetStaticObject(string name);
    private sealed virtual override string System.Web.Util.IManagedContext.Request_GetAsString(int what);
    private sealed virtual override string System.Web.Util.IManagedContext.Request_GetCookiesAsString();
    private sealed virtual override int System.Web.Util.IManagedContext.Request_GetTotalBytes();
    private sealed virtual override int System.Web.Util.IManagedContext.Request_BinaryRead(Byte[] bytes, int size);
    private sealed virtual override string System.Web.Util.IManagedContext.Response_GetCookiesAsString();
    private sealed virtual override void System.Web.Util.IManagedContext.Response_AddCookie(string name);
    private sealed virtual override void System.Web.Util.IManagedContext.Response_SetCookieText(string name, string text);
    private sealed virtual override void System.Web.Util.IManagedContext.Response_SetCookieSubValue(string name, string key, string value);
    private sealed virtual override void System.Web.Util.IManagedContext.Response_SetCookieExpires(string name, double dtExpires);
    private sealed virtual override void System.Web.Util.IManagedContext.Response_SetCookieDomain(string name, string domain);
    private sealed virtual override void System.Web.Util.IManagedContext.Response_SetCookiePath(string name, string path);
    private sealed virtual override void System.Web.Util.IManagedContext.Response_SetCookieSecure(string name, int secure);
    private sealed virtual override void System.Web.Util.IManagedContext.Response_Write(string text);
    private sealed virtual override void System.Web.Util.IManagedContext.Response_BinaryWrite(Byte[] bytes, int size);
    private sealed virtual override void System.Web.Util.IManagedContext.Response_Redirect(string url);
    private sealed virtual override void System.Web.Util.IManagedContext.Response_AddHeader(string name, string value);
    private sealed virtual override void System.Web.Util.IManagedContext.Response_Pics(string value);
    private sealed virtual override void System.Web.Util.IManagedContext.Response_Clear();
    private sealed virtual override void System.Web.Util.IManagedContext.Response_Flush();
    private sealed virtual override void System.Web.Util.IManagedContext.Response_End();
    private sealed virtual override void System.Web.Util.IManagedContext.Response_AppendToLog(string entry);
    private sealed virtual override string System.Web.Util.IManagedContext.Response_GetContentType();
    private sealed virtual override void System.Web.Util.IManagedContext.Response_SetContentType(string contentType);
    private sealed virtual override string System.Web.Util.IManagedContext.Response_GetCharSet();
    private sealed virtual override void System.Web.Util.IManagedContext.Response_SetCharSet(string charSet);
    private sealed virtual override string System.Web.Util.IManagedContext.Response_GetCacheControl();
    private sealed virtual override void System.Web.Util.IManagedContext.Response_SetCacheControl(string cacheControl);
    private sealed virtual override string System.Web.Util.IManagedContext.Response_GetStatus();
    private sealed virtual override void System.Web.Util.IManagedContext.Response_SetStatus(string status);
    private sealed virtual override int System.Web.Util.IManagedContext.Response_GetExpiresMinutes();
    private sealed virtual override void System.Web.Util.IManagedContext.Response_SetExpiresMinutes(int expiresMinutes);
    private sealed virtual override double System.Web.Util.IManagedContext.Response_GetExpiresAbsolute();
    private sealed virtual override void System.Web.Util.IManagedContext.Response_SetExpiresAbsolute(double dtExpires);
    private sealed virtual override int System.Web.Util.IManagedContext.Response_GetIsBuffering();
    private sealed virtual override void System.Web.Util.IManagedContext.Response_SetIsBuffering(int isBuffering);
    private sealed virtual override int System.Web.Util.IManagedContext.Response_IsClientConnected();
    private sealed virtual override object System.Web.Util.IManagedContext.Server_CreateObject(string progId);
    private sealed virtual override string System.Web.Util.IManagedContext.Server_MapPath(string logicalPath);
    private sealed virtual override string System.Web.Util.IManagedContext.Server_HTMLEncode(string str);
    private sealed virtual override string System.Web.Util.IManagedContext.Server_URLEncode(string str);
    private sealed virtual override string System.Web.Util.IManagedContext.Server_URLPathEncode(string str);
    private sealed virtual override int System.Web.Util.IManagedContext.Server_GetScriptTimeout();
    private sealed virtual override void System.Web.Util.IManagedContext.Server_SetScriptTimeout(int timeoutSeconds);
    private sealed virtual override void System.Web.Util.IManagedContext.Server_Execute(string url);
    private sealed virtual override void System.Web.Util.IManagedContext.Server_Transfer(string url);
    private sealed virtual override int System.Web.Util.IManagedContext.Session_IsPresent();
    private sealed virtual override string System.Web.Util.IManagedContext.Session_GetID();
    private sealed virtual override int System.Web.Util.IManagedContext.Session_GetTimeout();
    private sealed virtual override void System.Web.Util.IManagedContext.Session_SetTimeout(int value);
    private sealed virtual override int System.Web.Util.IManagedContext.Session_GetCodePage();
    private sealed virtual override void System.Web.Util.IManagedContext.Session_SetCodePage(int value);
    private sealed virtual override int System.Web.Util.IManagedContext.Session_GetLCID();
    private sealed virtual override void System.Web.Util.IManagedContext.Session_SetLCID(int value);
    private sealed virtual override void System.Web.Util.IManagedContext.Session_Abandon();
    private sealed virtual override string System.Web.Util.IManagedContext.Session_GetContentsNames();
    private sealed virtual override string System.Web.Util.IManagedContext.Session_GetStaticNames();
    private sealed virtual override object System.Web.Util.IManagedContext.Session_GetContentsObject(string name);
    private sealed virtual override void System.Web.Util.IManagedContext.Session_SetContentsObject(string name, object obj);
    private sealed virtual override void System.Web.Util.IManagedContext.Session_RemoveContentsObject(string name);
    private sealed virtual override void System.Web.Util.IManagedContext.Session_RemoveAllContentsObjects();
    private sealed virtual override object System.Web.Util.IManagedContext.Session_GetStaticObject(string name);
}
internal class System.Web.Util.AspCompatCallback : MulticastDelegate {
    public AspCompatCallback(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Web.Util.AssemblySet : ObjectSet {
    internal static AssemblySet Create(ICollection c);
}
internal static class System.Web.Util.AssemblyUtil : object {
    public static string GetAssemblyFileVersion(Assembly assembly);
}
internal class System.Web.Util.BinaryCompatibility : object {
    internal static string TargetFrameworkKey;
    public static BinaryCompatibility Current;
    public bool TargetsAtLeastFramework45 { get; private set; }
    public bool TargetsAtLeastFramework451 { get; private set; }
    public bool TargetsAtLeastFramework452 { get; private set; }
    public bool TargetsAtLeastFramework46 { get; private set; }
    public bool TargetsAtLeastFramework461 { get; private set; }
    public Version TargetFramework { get; private set; }
    public BinaryCompatibility(FrameworkName frameworkName);
    private static BinaryCompatibility();
    [CompilerGeneratedAttribute]
public bool get_TargetsAtLeastFramework45();
    [CompilerGeneratedAttribute]
private void set_TargetsAtLeastFramework45(bool value);
    [CompilerGeneratedAttribute]
public bool get_TargetsAtLeastFramework451();
    [CompilerGeneratedAttribute]
private void set_TargetsAtLeastFramework451(bool value);
    [CompilerGeneratedAttribute]
public bool get_TargetsAtLeastFramework452();
    [CompilerGeneratedAttribute]
private void set_TargetsAtLeastFramework452(bool value);
    [CompilerGeneratedAttribute]
public bool get_TargetsAtLeastFramework46();
    [CompilerGeneratedAttribute]
private void set_TargetsAtLeastFramework46(bool value);
    [CompilerGeneratedAttribute]
public bool get_TargetsAtLeastFramework461();
    [CompilerGeneratedAttribute]
private void set_TargetsAtLeastFramework461(bool value);
    [CompilerGeneratedAttribute]
public Version get_TargetFramework();
    [CompilerGeneratedAttribute]
private void set_TargetFramework(Version value);
}
internal class System.Web.Util.BuildProviderSet : ObjectSet {
}
internal class System.Web.Util.CalliEventHandlerDelegateProxy : object {
    internal EventHandler Handler { get; }
    internal CalliEventHandlerDelegateProxy(object target, IntPtr functionPointer, bool argless);
    internal void Callback(object sender, EventArgs e);
    internal EventHandler get_Handler();
}
internal class System.Web.Util.CancellationTokenHelper : object {
    internal static CancellationTokenHelper StaticDisposed;
    internal bool IsCancellationRequested { get; }
    internal CancellationToken Token { get; }
    public CancellationTokenHelper(bool canceled);
    private static CancellationTokenHelper();
    internal bool get_IsCancellationRequested();
    internal CancellationToken get_Token();
    public void Cancel();
    public sealed virtual void Dispose();
}
internal class System.Web.Util.CaseInsensitiveStringSet : StringSet {
    protected bool CaseInsensitive { get; }
    protected virtual bool get_CaseInsensitive();
}
internal static class System.Web.Util.CodePageUtils : object {
    internal static int CodePageUT8;
    private static CodePageUtils();
    internal static bool IsAsciiCompatibleCodePage(int codepage);
}
internal class System.Web.Util.ControlSet : ObjectSet {
}
internal class System.Web.Util.CountdownTask : object {
    public int CurrentCount { get; }
    public Task Task { get; }
    public CountdownTask(int initialCount);
    public int get_CurrentCount();
    public Task get_Task();
    public void MarkOperationCompleted();
    public void MarkOperationPending();
}
internal class System.Web.Util.Counter : object {
    internal static long Value { get; }
    internal static long Frequency { get; }
    internal static long get_Value();
    internal static long get_Frequency();
}
internal static class System.Web.Util.CultureUtil : object {
    public static CultureInfo CreateReadOnlyCulture(string cultureName, bool requireSpecific);
    public static CultureInfo CreateReadOnlyCulture(String[] cultureNames, bool requireSpecific);
    internal static CultureInfo ExtractCultureImpl(String[] cultureNames, bool requireSpecific, int maxCount);
}
internal class System.Web.Util.DateTimeUtil : object {
    private static DateTimeUtil();
    internal static DateTime FromFileTimeToUtc(long filetime);
    internal static DateTime ConvertToUniversalTime(DateTime localTime);
    internal static DateTime ConvertToLocalTime(DateTime utcTime);
}
internal static class System.Web.Util.Debug : object {
    internal static string TAG_INTERNAL;
    internal static string TAG_EXTERNAL;
    internal static string TAG_ALL;
    internal static string DATE_FORMAT;
    internal static string TIME_FORMAT;
    [ConditionalAttribute("DBG")]
internal static void Trace(string tagName, string message);
    [ConditionalAttribute("DBG")]
internal static void Trace(string tagName, string message, bool includePrefix);
    [ConditionalAttribute("DBG")]
internal static void Trace(string tagName, string message, Exception e);
    [ConditionalAttribute("DBG")]
internal static void Trace(string tagName, Exception e);
    [ConditionalAttribute("DBG")]
internal static void Trace(string tagName, string message, Exception e, bool includePrefix);
    [ConditionalAttribute("DBG")]
public static void TraceException(string tagName, Exception e);
    [ConditionalAttribute("DBG")]
internal static void Assert(bool assertion, string message);
    [ConditionalAttribute("DBG")]
internal static void Assert(bool assertion);
    [ConditionalAttribute("DBG")]
internal static void Fail(string message);
    internal static bool IsTagEnabled(string tagName);
    internal static bool IsTagPresent(string tagName);
    internal static bool IsDebuggerPresent();
    [ConditionalAttribute("DBG")]
internal static void Break();
    [ConditionalAttribute("DBG")]
internal static void AlwaysValidate(string tagName);
    [ConditionalAttribute("DBG")]
internal static void CheckValid(bool assertion, string message);
    [ConditionalAttribute("DBG")]
internal static void Validate(object obj);
    [ConditionalAttribute("DBG")]
internal static void ValidateArrayBounds(T[] array, int offset, int count);
    [ConditionalAttribute("DBG")]
internal static void Validate(string tagName, object obj);
    [ConditionalAttribute("DBG")]
internal static void Dump(string tagName, object obj);
    internal static string FormatUtcDate(DateTime utcTime);
    internal static string FormatLocalDate(DateTime localTime);
}
internal class System.Web.Util.DisposableAction : object {
    public static DisposableAction Empty;
    public DisposableAction(Action disposeAction);
    private static DisposableAction();
    public sealed virtual void Dispose();
}
internal class System.Web.Util.DisposableGCHandleRef`1 : object {
    public T Target { get; }
    public DisposableGCHandleRef`1(T t);
    public T get_Target();
    public sealed virtual void Dispose();
}
[AttributeUsageAttribute("256")]
internal class System.Web.Util.DoNotResetAttribute : Attribute {
}
internal class System.Web.Util.DoubleLink : object {
    internal DoubleLink _next;
    internal DoubleLink _prev;
    internal object Item;
    internal DoubleLink Next { get; }
    internal DoubleLink(object item);
    internal DoubleLink get_Next();
    internal void InsertAfter(DoubleLink after);
    internal void InsertBefore(DoubleLink before);
    internal void Remove();
}
internal class System.Web.Util.DoubleLinkList : DoubleLink {
    internal int Length { get; }
    internal bool IsEmpty();
    internal virtual void InsertHead(DoubleLink entry);
    internal virtual void InsertTail(DoubleLink entry);
    internal DoubleLinkListEnumerator GetEnumerator();
    internal int get_Length();
}
internal class System.Web.Util.DoubleLinkListEnumerator : object {
    public object Current { get; }
    internal DoubleLinkListEnumerator(DoubleLinkList list);
    public sealed virtual void Reset();
    public sealed virtual bool MoveNext();
    public sealed virtual object get_Current();
    internal DoubleLink GetDoubleLink();
}
internal class System.Web.Util.EmptyCollection : object {
    internal static EmptyCollection Instance { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private object System.Collections.IEnumerator.Current { get; }
    private static EmptyCollection();
    internal static EmptyCollection get_Instance();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
}
internal static class System.Web.Util.EnableViewStateMacRegistryHelper : object {
    public static bool EnforceViewStateMac;
    public static bool SuppressMacValidationErrorsAlways;
    public static bool SuppressMacValidationErrorsFromCrossPagePostbacks;
    public static bool WriteViewStateGeneratorField;
    private static EnableViewStateMacRegistryHelper();
}
internal static class System.Web.Util.EnumerationRangeValidationUtil : object {
    public static void ValidateRepeatLayout(RepeatLayout value);
}
internal static class System.Web.Util.ExceptionUtil : object {
    internal static ArgumentException ParameterInvalid(string parameter);
    internal static ArgumentException ParameterNullOrEmpty(string parameter);
    internal static ArgumentException PropertyInvalid(string property);
    internal static ArgumentException PropertyNullOrEmpty(string property);
    internal static InvalidOperationException UnexpectedError(string methodName);
}
internal static class System.Web.Util.ExecutionContextUtil : object {
    private static ExecutionContextUtil();
    internal static void RunInNullExecutionContext(Action callback);
}
internal class System.Web.Util.FactoryGenerator : object {
    internal static void CheckPublicParameterlessConstructor(Type type);
    internal IWebObjectFactory CreateFactory(Type type);
}
internal static class System.Web.Util.FastDelegateCreator`1 : object {
    private static FastDelegateCreator`1();
    internal static TDelegate BindTo(object obj, IntPtr method);
    internal static TDelegate BindTo(object obj, MethodInfo method);
}
internal class System.Web.Util.FastPropertyAccessor : object {
    private static FastPropertyAccessor();
    internal static object GetProperty(object target, string propName, bool inDesigner);
    internal static void SetProperty(object target, string propName, object val, bool inDesigner);
}
internal class System.Web.Util.FileAttributesData : object {
    internal FileAttributes FileAttributes;
    internal DateTime UtcCreationTime;
    internal DateTime UtcLastAccessTime;
    internal DateTime UtcLastWriteTime;
    internal long FileSize;
    internal static FileAttributesData NonExistantAttributesData { get; }
    internal FileAttributesData(WIN32_FIND_DATA& wfd);
    internal static FileAttributesData get_NonExistantAttributesData();
    internal static int GetFileAttributes(string path, FileAttributesData& fad);
}
internal abstract class System.Web.Util.FileData : object {
    protected string _path;
    protected WIN32_FIND_DATA _wfd;
    internal string Name { get; }
    internal string FullName { get; }
    internal bool IsDirectory { get; }
    internal bool IsHidden { get; }
    internal string get_Name();
    internal string get_FullName();
    internal bool get_IsDirectory();
    internal bool get_IsHidden();
    internal FindFileData GetFindFileData();
}
internal class System.Web.Util.FileEnumerator : FileData {
    private object System.Collections.IEnumerator.Current { get; }
    internal static FileEnumerator Create(string path);
    protected virtual override void Finalize();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class System.Web.Util.FileTimeInfo : ValueType {
    internal long LastWriteTime;
    internal long Size;
    internal static FileTimeInfo MinValue;
    internal FileTimeInfo(long lastWriteTime, long size);
    private static FileTimeInfo();
    public virtual bool Equals(object obj);
    public static bool op_Equality(FileTimeInfo value1, FileTimeInfo value2);
    public static bool op_Inequality(FileTimeInfo value1, FileTimeInfo value2);
    public virtual int GetHashCode();
}
internal class System.Web.Util.FileUtil : object {
    private static FileUtil();
    internal static bool FileExists(string filename);
    internal static string GetFirstExistingDirectory(string appRoot, string fileName);
    internal static bool IsBeneathAppRoot(string appRoot, string filePath);
    internal static string RemoveTrailingDirectoryBackSlash(string path);
    internal static string TruncatePathIfNeeded(string path, int reservedLength);
    internal static string FixUpPhysicalDirectory(string dir);
    internal static void CheckSuspiciousPhysicalPath(string physicalPath);
    internal static bool IsSuspiciousPhysicalPath(string physicalPath);
    internal static bool IsSuspiciousPhysicalPath(string physicalPath, Boolean& pathTooLong);
    internal static bool DirectoryExists(string dirname);
    internal static bool DirectoryAccessible(string dirname);
    internal static bool IsValidDirectoryName(string name);
    internal static void PhysicalPathStatus(string physicalPath, bool directoryExistsOnError, bool fileExistsOnError, Boolean& exists, Boolean& isDirectory);
    internal static bool DirectoryExists(string filename, bool trueOnError);
}
internal class System.Web.Util.FindFileData : object {
    internal string FileNameLong { get; }
    internal string FileNameShort { get; }
    internal FileAttributesData FileAttributesData { get; }
    internal FindFileData(WIN32_FIND_DATA& wfd);
    internal string get_FileNameLong();
    internal string get_FileNameShort();
    internal FileAttributesData get_FileAttributesData();
    internal static int FindFile(string path, FindFileData& data);
    internal static int FindFile(string fullPath, string rootDirectoryPath, FindFileData& data);
}
internal static class System.Web.Util.GCUtil : object {
    public static IntPtr RootObject(object obj);
    public static object UnrootObject(IntPtr pointer);
}
internal class System.Web.Util.HashCodeCombiner : object {
    internal long CombinedHash { get; }
    internal int CombinedHash32 { get; }
    internal string CombinedHashString { get; }
    internal HashCodeCombiner(long initialCombinedHash);
    internal static int CombineHashCodes(int h1, int h2);
    internal static int CombineHashCodes(int h1, int h2, int h3);
    internal static int CombineHashCodes(int h1, int h2, int h3, int h4);
    internal static int CombineHashCodes(int h1, int h2, int h3, int h4, int h5);
    internal static string GetDirectoryHash(VirtualPath virtualDir);
    internal void AddArray(String[] a);
    internal void AddInt(int n);
    internal void AddObject(int n);
    internal void AddObject(byte b);
    internal void AddObject(long l);
    internal void AddObject(bool b);
    internal void AddObject(string s);
    internal void AddObject(Type t);
    internal void AddObject(object o);
    internal void AddCaseInsensitiveString(string s);
    internal void AddDateTime(DateTime dt);
    internal void AddFileContentHash(string fileName);
    internal void AddFile(string fileName);
    internal void AddExistingFileVersion(string fileName);
    internal void AddDirectory(string directoryName);
    internal void AddResourcesDirectory(string directoryName);
    internal long get_CombinedHash();
    internal int get_CombinedHash32();
    internal string get_CombinedHashString();
}
internal class System.Web.Util.HeapAllocHandle : SafeHandleZeroOrMinusOneIsInvalid {
    private static HeapAllocHandle();
    protected virtual bool ReleaseHandle();
}
internal static class System.Web.Util.HResults : object {
    internal static int S_OK;
    internal static int S_FALSE;
    internal static int E_NOTIMPL;
    internal static int E_POINTER;
    internal static int E_FAIL;
    internal static int E_FILENOTFOUND;
    internal static int E_PATHNOTFOUND;
    internal static int E_ACCESSDENIED;
    internal static int E_INVALID_DATA;
    internal static int E_OUTOFMEMORY;
    internal static int E_INVALIDARG;
    internal static int E_INSUFFICIENT_BUFFER;
    internal static int E_NOT_SET;
    internal static int WSAECONNABORTED;
    internal static int WSAECONNRESET;
    internal static int ERROR_TOO_MANY_CMDS;
    internal static int ERROR_NOT_SUPPORTED;
}
internal static class System.Web.Util.HttpDate : object {
    private static HttpDate();
    internal static DateTime UtcParse(string time);
}
public class System.Web.Util.HttpEncoder : object {
    public static HttpEncoder Current { get; public set; }
    public static HttpEncoder Default { get; }
    internal bool JavaScriptEncodeAmpersand { get; }
    private static HttpEncoder();
    public static HttpEncoder get_Current();
    public static void set_Current(HttpEncoder value);
    public static HttpEncoder get_Default();
    internal virtual bool get_JavaScriptEncodeAmpersand();
    internal static string CollapsePercentUFromStringInternal(string s, Encoding e);
    protected internal virtual void HeaderNameValueEncode(string headerName, string headerValue, String& encodedHeaderName, String& encodedHeaderValue);
    internal string HtmlAttributeEncode(string value);
    protected internal virtual void HtmlAttributeEncode(string value, TextWriter output);
    internal string HtmlDecode(string value);
    protected internal virtual void HtmlDecode(string value, TextWriter output);
    internal string HtmlEncode(string value);
    protected internal virtual void HtmlEncode(string value, TextWriter output);
    internal static void InitializeOnFirstRequest();
    protected internal virtual string JavaScriptStringEncode(string value);
    internal Byte[] UrlDecode(Byte[] bytes, int offset, int count);
    internal string UrlDecode(Byte[] bytes, int offset, int count, Encoding encoding);
    internal string UrlDecode(string value, Encoding encoding);
    internal Byte[] UrlEncode(Byte[] bytes, int offset, int count, bool alwaysCreateNewReturnValue);
    protected internal virtual Byte[] UrlEncode(Byte[] bytes, int offset, int count);
    internal string UrlEncodeNonAscii(string str, Encoding e);
    internal Byte[] UrlEncodeNonAscii(Byte[] bytes, int offset, int count, bool alwaysCreateNewReturnValue);
    [ObsoleteAttribute("This method produces non-standards-compliant output and has interoperability issues. The preferred alternative is UrlEncode(*).")]
internal string UrlEncodeUnicode(string value, bool ignoreAscii);
    protected internal virtual string UrlPathEncode(string value);
    internal Byte[] UrlTokenDecode(string input);
    internal string UrlTokenEncode(Byte[] input);
    internal static bool ValidateUrlEncodingParameters(Byte[] bytes, int offset, int count);
}
internal static class System.Web.Util.HttpEncoderUtility : object {
    public static int HexToInt(char h);
    public static char IntToHex(int n);
    public static bool IsUrlSafeChar(char ch);
    internal static string UrlEncodeSpaces(string str);
}
[GuidAttribute("a1cca730-0e36-4870-aa7d-ca39c211f99d")]
[InterfaceTypeAttribute("1")]
internal interface System.Web.Util.IManagedContext {
    public abstract virtual int Context_IsPresent();
    public abstract virtual void Application_Lock();
    public abstract virtual void Application_UnLock();
    public abstract virtual string Application_GetContentsNames();
    public abstract virtual string Application_GetStaticNames();
    public abstract virtual object Application_GetContentsObject(string name);
    public abstract virtual void Application_SetContentsObject(string name, object obj);
    public abstract virtual void Application_RemoveContentsObject(string name);
    public abstract virtual void Application_RemoveAllContentsObjects();
    public abstract virtual object Application_GetStaticObject(string name);
    public abstract virtual string Request_GetAsString(int what);
    public abstract virtual string Request_GetCookiesAsString();
    public abstract virtual int Request_GetTotalBytes();
    public abstract virtual int Request_BinaryRead(Byte[] bytes, int size);
    public abstract virtual string Response_GetCookiesAsString();
    public abstract virtual void Response_AddCookie(string name);
    public abstract virtual void Response_SetCookieText(string name, string text);
    public abstract virtual void Response_SetCookieSubValue(string name, string key, string value);
    public abstract virtual void Response_SetCookieExpires(string name, double dtExpires);
    public abstract virtual void Response_SetCookieDomain(string name, string domain);
    public abstract virtual void Response_SetCookiePath(string name, string path);
    public abstract virtual void Response_SetCookieSecure(string name, int secure);
    public abstract virtual void Response_Write(string text);
    public abstract virtual void Response_BinaryWrite(Byte[] bytes, int size);
    public abstract virtual void Response_Redirect(string url);
    public abstract virtual void Response_AddHeader(string name, string value);
    public abstract virtual void Response_Pics(string value);
    public abstract virtual void Response_Clear();
    public abstract virtual void Response_Flush();
    public abstract virtual void Response_End();
    public abstract virtual void Response_AppendToLog(string entry);
    public abstract virtual string Response_GetContentType();
    public abstract virtual void Response_SetContentType(string contentType);
    public abstract virtual string Response_GetCharSet();
    public abstract virtual void Response_SetCharSet(string charSet);
    public abstract virtual string Response_GetCacheControl();
    public abstract virtual void Response_SetCacheControl(string cacheControl);
    public abstract virtual string Response_GetStatus();
    public abstract virtual void Response_SetStatus(string status);
    public abstract virtual int Response_GetExpiresMinutes();
    public abstract virtual void Response_SetExpiresMinutes(int expiresMinutes);
    public abstract virtual double Response_GetExpiresAbsolute();
    public abstract virtual void Response_SetExpiresAbsolute(double dtExpires);
    public abstract virtual int Response_GetIsBuffering();
    public abstract virtual void Response_SetIsBuffering(int isBuffering);
    public abstract virtual int Response_IsClientConnected();
    public abstract virtual object Server_CreateObject(string progId);
    public abstract virtual string Server_MapPath(string logicalPath);
    public abstract virtual string Server_HTMLEncode(string str);
    public abstract virtual string Server_URLEncode(string str);
    public abstract virtual string Server_URLPathEncode(string str);
    public abstract virtual int Server_GetScriptTimeout();
    public abstract virtual void Server_SetScriptTimeout(int timeoutSeconds);
    public abstract virtual void Server_Execute(string url);
    public abstract virtual void Server_Transfer(string url);
    public abstract virtual int Session_IsPresent();
    public abstract virtual string Session_GetID();
    public abstract virtual int Session_GetTimeout();
    public abstract virtual void Session_SetTimeout(int value);
    public abstract virtual int Session_GetCodePage();
    public abstract virtual void Session_SetCodePage(int value);
    public abstract virtual int Session_GetLCID();
    public abstract virtual void Session_SetLCID(int value);
    public abstract virtual void Session_Abandon();
    public abstract virtual string Session_GetContentsNames();
    public abstract virtual string Session_GetStaticNames();
    public abstract virtual object Session_GetContentsObject(string name);
    public abstract virtual void Session_SetContentsObject(string name, object obj);
    public abstract virtual void Session_RemoveContentsObject(string name);
    public abstract virtual void Session_RemoveAllContentsObjects();
    public abstract virtual object Session_GetStaticObject(string name);
}
internal interface System.Web.Util.IPerfCounters {
    public abstract virtual void IncrementCounter(AppPerfCounter counter);
    public abstract virtual void IncrementCounter(AppPerfCounter counter, int value);
    public abstract virtual void DecrementCounter(AppPerfCounter counter);
    public abstract virtual void SetCounter(AppPerfCounter counter, int value);
}
internal interface System.Web.Util.ISyncContext {
    public HttpContext HttpContext { get; }
    public abstract virtual HttpContext get_HttpContext();
    public abstract virtual ISyncContextLock Enter();
}
internal interface System.Web.Util.ISyncContextLock {
    public abstract virtual void Leave();
}
internal interface System.Web.Util.ITypedWebObjectFactory {
    public Type InstantiatedType { get; }
    public abstract virtual Type get_InstantiatedType();
}
public interface System.Web.Util.IWebObjectFactory {
    public abstract virtual object CreateInstance();
}
public interface System.Web.Util.IWebPropertyAccessor {
    public abstract virtual object GetProperty(object target);
    public abstract virtual void SetProperty(object target, object value);
}
internal class System.Web.Util.Misc : object {
    internal static StringComparer CaseInsensitiveInvariantKeyComparer { get; }
    internal static StringComparer get_CaseInsensitiveInvariantKeyComparer();
    internal static void WriteUnhandledExceptionToEventLog(AppDomain appDomain, Exception exception);
    internal static void ReportUnhandledException(Exception e, String[] strings);
    internal static string FormatExceptionMessage(Exception e, String[] strings);
    internal static void CopyMemory(IntPtr src, int srcOffset, Byte[] dest, int destOffset, int size);
    internal static void CopyMemory(Byte[] src, int srcOffset, IntPtr dest, int destOffset, int size);
    internal static void CopyMemory(IntPtr src, int srcOffset, IntPtr dest, int destOffset, int size);
    internal static void ThrowIfFailedHr(int hresult);
    internal static IProcessHostSupportFunctions CreateLocalSupportFunctions(IProcessHostSupportFunctions proxyFunctions);
    internal static RegistryKey OpenAspNetRegKey(string subKey);
    internal static object GetAspNetRegValue(string subKey, string valueName, object defaultValue);
}
internal class System.Web.Util.Msec : object {
    internal static int ONE_SECOND;
    internal static int ONE_MINUTE;
    internal static int ONE_HOUR;
    internal static int ONE_DAY;
    internal static int ONE_WEEK;
    internal static long ONE_YEAR;
    internal static long ONE_LEAP_YEAR;
}
internal class System.Web.Util.ObjectSet : object {
    protected bool CaseInsensitive { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private static ObjectSet();
    protected virtual bool get_CaseInsensitive();
    public void Add(object o);
    public void AddCollection(ICollection c);
    public void Remove(object o);
    public bool Contains(object o);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
}
internal class System.Web.Util.OrderingMethodFinder : ExpressionVisitor {
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    internal static bool OrderMethodExists(Expression expression);
}
internal enum System.Web.Util.OsFlavor : Enum {
    public int value__;
    public static OsFlavor Undetermined;
    public static OsFlavor Other;
    public static OsFlavor WebBlade;
    public static OsFlavor StdServer;
    public static OsFlavor AdvServer;
    public static OsFlavor DataCenter;
}
internal static class System.Web.Util.PathUtil : object {
    private static PathUtil();
    internal static string GetSystemDllFullPath(string filename);
}
internal static class System.Web.Util.Permission : object {
    internal static bool HasSqlClientPermission();
}
internal class System.Web.Util.PinnedArraySegment`1 : object {
    public int Count { get; }
    public IntPtr Pointer { get; }
    internal PinnedArraySegment`1(ArraySegment`1<T> segment);
    public int get_Count();
    public IntPtr get_Pointer();
    public sealed virtual void Dispose();
}
internal class System.Web.Util.Profiler : object {
    internal bool IsEnabled { get; internal set; }
    internal bool PageOutput { get; internal set; }
    internal TraceMode OutputMode { get; internal set; }
    internal bool LocalOnly { get; internal set; }
    internal bool MostRecent { get; internal set; }
    internal bool IsConfigEnabled { get; }
    internal int RequestsToProfile { get; internal set; }
    internal int RequestsRemaining { get; }
    internal bool get_IsEnabled();
    internal void set_IsEnabled(bool value);
    internal bool get_PageOutput();
    internal void set_PageOutput(bool value);
    internal TraceMode get_OutputMode();
    internal void set_OutputMode(TraceMode value);
    internal bool get_LocalOnly();
    internal void set_LocalOnly(bool value);
    internal bool get_MostRecent();
    internal void set_MostRecent(bool value);
    internal bool get_IsConfigEnabled();
    internal int get_RequestsToProfile();
    internal void set_RequestsToProfile(int value);
    internal int get_RequestsRemaining();
    internal void Reset();
    internal void StartRequest(HttpContext context);
    internal void EndRequest(HttpContext context);
    internal void EndProfiling();
    internal IList GetData();
}
internal static class System.Web.Util.ProviderUtil : object {
    internal static int Infinite;
    internal static void GetAndRemoveStringAttribute(NameValueCollection config, string attrib, string providerName, String& val);
    internal static void GetAndRemovePositiveAttribute(NameValueCollection config, string attrib, string providerName, Int32& val);
    internal static void GetPositiveAttribute(NameValueCollection config, string attrib, string providerName, Int32& val);
    internal static void GetAndRemovePositiveOrInfiniteAttribute(NameValueCollection config, string attrib, string providerName, Int32& val);
    internal static void GetPositiveOrInfiniteAttribute(NameValueCollection config, string attrib, string providerName, Int32& val);
    internal static void GetAndRemoveNonZeroPositiveOrInfiniteAttribute(NameValueCollection config, string attrib, string providerName, Int32& val);
    internal static void GetNonZeroPositiveOrInfiniteAttribute(NameValueCollection config, string attrib, string providerName, Int32& val);
    internal static void GetAndRemoveBooleanAttribute(NameValueCollection config, string attrib, string providerName, Boolean& val);
    internal static void GetBooleanAttribute(NameValueCollection config, string attrib, string providerName, Boolean& val);
    internal static void GetAndRemoveRequiredNonEmptyStringAttribute(NameValueCollection config, string attrib, string providerName, String& val);
    internal static void GetRequiredNonEmptyStringAttribute(NameValueCollection config, string attrib, string providerName, String& val);
    internal static void CheckUnrecognizedAttributes(NameValueCollection config, string providerName);
}
internal static class System.Web.Util.QueryableUtility : object {
    private static QueryableUtility();
    public static bool IsQueryableMethod(Expression expression, string method);
    public static bool IsOrderingMethod(Expression expression);
}
internal class System.Web.Util.ReadWriteObjectLock : object {
    internal virtual void AcquireRead();
    internal virtual void ReleaseRead();
    internal virtual void AcquireWrite();
    internal virtual void ReleaseWrite();
}
internal class System.Web.Util.ReadWriteSpinLock : ValueType {
    private int _bits;
    private int _id;
    private static int BACK_OFF_FACTORS_LENGTH;
    private static int WRITER_WAITING_MASK;
    private static int WRITE_COUNT_MASK;
    private static int READ_COUNT_MASK;
    private static int WRITER_WAITING_SHIFT;
    private static int WRITE_COUNT_SHIFT;
    private static ReadWriteSpinLock();
    internal void AcquireReaderLock();
    internal void AcquireWriterLock();
    internal void ReleaseReaderLock();
    internal void ReleaseWriterLock();
}
internal static class System.Web.Util.ReflectionUtil : object {
    public static void Reset(T obj);
}
internal class System.Web.Util.RegexUtil : object {
    public static bool IsMatch(string stringToMatch, string pattern, RegexOptions regOption, Nullable`1<int> timeoutInMillsec);
    public static Match Match(string stringToMatch, string pattern, RegexOptions regOption, Nullable`1<int> timeoutInMillsec);
    public static Regex CreateRegex(string pattern, RegexOptions option, Nullable`1<int> timeoutInMillsec);
    internal static Regex CreateRegex(string pattern, RegexOptions option);
}
internal enum System.Web.Util.RequestString : Enum {
    public int value__;
    public static RequestString QueryString;
    public static RequestString Form;
    public static RequestString Cookies;
    public static RequestString ServerVars;
}
public enum System.Web.Util.RequestValidationSource : Enum {
    public int value__;
    public static RequestValidationSource QueryString;
    public static RequestValidationSource Form;
    public static RequestValidationSource Cookies;
    public static RequestValidationSource Files;
    public static RequestValidationSource RawUrl;
    public static RequestValidationSource Path;
    public static RequestValidationSource PathInfo;
    public static RequestValidationSource Headers;
}
public class System.Web.Util.RequestValidator : object {
    public static RequestValidator Current { get; public set; }
    private static RequestValidator();
    public static RequestValidator get_Current();
    public static void set_Current(RequestValidator value);
    internal static void InitializeOnFirstRequest();
    public bool InvokeIsValidRequestString(HttpContext context, string value, RequestValidationSource requestValidationSource, string collectionKey, Int32& validationFailureIndex);
    protected internal virtual bool IsValidRequestString(HttpContext context, string value, RequestValidationSource requestValidationSource, string collectionKey, Int32& validationFailureIndex);
}
internal class System.Web.Util.ResourcePool : object {
    internal ResourcePool(TimeSpan interval, int max);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal object RetrieveResource();
    internal void StoreResource(IDisposable o);
}
[DefaultMemberAttribute("Item")]
internal class System.Web.Util.SafeBitVector32 : ValueType {
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _data;
    internal bool Item { get; internal set; }
    internal SafeBitVector32(int data);
    internal bool get_Item(int bit);
    internal void set_Item(int bit, bool value);
    internal bool ChangeValue(int bit, bool value);
}
internal static class System.Web.Util.Sec : object {
    internal static int ONE_SECOND;
    internal static int ONE_MINUTE;
    internal static int ONE_HOUR;
    internal static int ONE_DAY;
    internal static int ONE_WEEK;
    internal static int ONE_YEAR;
    internal static int ONE_LEAP_YEAR;
}
internal static class System.Web.Util.SecUtility : object {
    internal static string GetDefaultAppName();
    internal static string GetConnectionString(NameValueCollection config);
    internal static bool ValidatePasswordParameter(String& param, int maxSize);
    internal static bool ValidateParameter(String& param, bool checkForNull, bool checkIfEmpty, bool checkForCommas, int maxSize);
    internal static void CheckPasswordParameter(String& param, int maxSize, string paramName);
    internal static void CheckParameter(String& param, bool checkForNull, bool checkIfEmpty, bool checkForCommas, int maxSize, string paramName);
    internal static void CheckArrayParameter(String[]& param, bool checkForNull, bool checkIfEmpty, bool checkForCommas, int maxSize, string paramName);
    internal static bool GetBooleanValue(NameValueCollection config, string valueName, bool defaultValue);
    internal static int GetIntValue(NameValueCollection config, string valueName, int defaultValue, bool zeroAllowed, int maxValueAllowed);
    internal static Nullable`1<int> GetNullableIntValue(NameValueCollection config, string valueName);
    internal static void CheckSchemaVersion(ProviderBase provider, SqlConnection connection, String[] features, string version, Int32& schemaVersionCheck);
}
[DefaultMemberAttribute("Item")]
internal class System.Web.Util.SimpleBitVector32 : ValueType {
    private int data;
    internal int IntegerValue { get; internal set; }
    internal bool Item { get; internal set; }
    internal int Item { get; internal set; }
    internal SimpleBitVector32(int data);
    internal int get_IntegerValue();
    internal void set_IntegerValue(int value);
    internal bool get_Item(int bit);
    internal void set_Item(int bit, bool value);
    internal int get_Item(int mask, int offset);
    internal void set_Item(int mask, int offset, int value);
    internal void Set(int bit);
    internal void Clear(int bit);
}
[DefaultMemberAttribute("Item")]
internal class System.Web.Util.SimpleRecyclingCache : object {
    internal object Item { get; internal set; }
    internal object get_Item(object key);
    internal void set_Item(object key, object value);
}
internal class System.Web.Util.SingleObjectCollection : object {
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public SingleObjectCollection(object o);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
}
internal class System.Web.Util.StopListeningWaitHandle : WaitHandle {
    private static StopListeningWaitHandle();
}
internal class System.Web.Util.StringSet : ObjectSet {
}
internal static class System.Web.Util.StringUtil : object {
    internal static string CheckAndTrimString(string paramValue, string paramName);
    internal static string CheckAndTrimString(string paramValue, string paramName, bool throwIfNull);
    internal static string CheckAndTrimString(string paramValue, string paramName, bool throwIfNull, int lengthToCheck);
    internal static bool Equals(string s1, string s2);
    internal static bool Equals(string s1, int offset1, string s2, int offset2, int length);
    internal static bool EqualsIgnoreCase(string s1, string s2);
    internal static bool EqualsIgnoreCase(string s1, int index1, string s2, int index2, int length);
    internal static string StringFromWCharPtr(IntPtr ip, int length);
    internal static string StringFromCharPtr(IntPtr ip, int length);
    internal static bool StringEndsWith(string s, char c);
    internal static bool StringEndsWith(string s1, string s2);
    internal static bool StringEndsWithIgnoreCase(string s1, string s2);
    internal static bool StringStartsWith(string s, char c);
    internal static bool StringStartsWith(string s1, string s2);
    internal static bool StringStartsWithIgnoreCase(string s1, string s2);
    internal static void UnsafeStringCopy(string src, int srcIndex, Char[] dest, int destIndex, int len);
    internal static bool StringArrayEquals(String[] a, String[] b);
    internal static int GetStringHashCode(string s);
    internal static int GetNonRandomizedHashCode(string s, bool ignoreCase);
    internal static int GetNonRandomizedStringComparerHashCode(string s);
    internal static int GetNullTerminatedByteArray(Encoding enc, string s, Byte[]& bytes);
    internal static void memcpyimpl(Byte* src, Byte* dest, int len);
    internal static String[] ObjectArrayToStringArray(Object[] objectArray);
}
internal class System.Web.Util.SubscriptionQueue`1 : ValueType {
    private LinkedList`1<T> _list;
    public bool IsEmpty { get; }
    public bool get_IsEmpty();
    public ISubscriptionToken Enqueue(T value);
    public void FireAndComplete(Action`1<T> action);
}
internal class System.Web.Util.SymbolEqualComparer : object {
    internal static IComparer Default;
    private static SymbolEqualComparer();
    private sealed virtual override int System.Collections.IComparer.Compare(object keyLeft, object keyRight);
}
internal enum System.Web.Util.SynchronizationContextMode : Enum {
    public int value__;
    public static SynchronizationContextMode Normal;
    public static SynchronizationContextMode Legacy;
}
internal static class System.Web.Util.SynchronizationContextUtil : object {
    public static SynchronizationContextMode CurrentMode { get; }
    public static SynchronizationContextMode get_CurrentMode();
    public static void ValidateMode(SynchronizationContextMode currentMode, SynchronizationContextMode requiredMode, string specificErrorMessage);
    public static void ValidateModeForAspCompat();
    public static void ValidateModeForPageAsyncVoidMethods();
    public static void ValidateModeForWebSockets();
}
internal class System.Web.Util.SynchronizationHelper : object {
    public ExceptionDispatchInfo Error { get; public set; }
    public int PendingCount { get; }
    public SynchronizationHelper(ISyncContext syncContext);
    [CompilerGeneratedAttribute]
public ExceptionDispatchInfo get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(ExceptionDispatchInfo value);
    public int get_PendingCount();
    public int ChangeOperationCount(int addend);
    public IDisposable EnterSynchronousControl();
    public void QueueAsynchronous(Action action);
    public void QueueAsynchronousAsync(Func`2<object, Task> func, object state);
    public void QueueSynchronous(Action action);
    public bool TrySetCompletionContinuation(Action continuation);
}
internal static class System.Web.Util.SystemInfo : object {
    internal static int GetNumProcessCPUs();
}
[ExtensionAttribute]
internal static class System.Web.Util.TaskExtensions : object {
    [ExtensionAttribute]
public static void ThrowIfFaulted(Task task);
    [ExtensionAttribute]
public static WithinCancellableCallbackTaskAwaitable WithinCancellableCallback(Task task, HttpContext context);
}
internal class System.Web.Util.TlsTokenBindingHandle : HeapAllocHandle {
    internal TlsTokenBindingHandle(IntPtr mgdContext);
    public Byte[] GetProvidedToken();
    public Byte[] GetReferredToken();
}
public class System.Web.Util.TransactedCallback : MulticastDelegate {
    public TransactedCallback(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Web.Util.TransactedExecCallback : MulticastDelegate {
    public TransactedExecCallback(object object, IntPtr method);
    public virtual int Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal enum System.Web.Util.TransactedExecState : Enum {
    public int value__;
    public static TransactedExecState CommitPending;
    public static TransactedExecState AbortPending;
    public static TransactedExecState Error;
}
public class System.Web.Util.Transactions : object {
    public static void InvokeTransacted(TransactedCallback callback, TransactionOption mode);
    public static void InvokeTransacted(TransactedCallback callback, TransactionOption mode, Boolean& transactionAborted);
}
internal static class System.Web.Util.UriUtil : object {
    private static UriUtil();
    internal static Uri BuildUri(string scheme, string serverName, string port, string path, string queryString);
    internal static Uri BuildUriImpl(string scheme, string serverName, string port, string path, string queryString, bool useLegacyRequestUrlGeneration);
    internal static void ExtractQueryAndFragment(string input, String& path, String& queryAndFragment);
    internal static bool IsSafeScheme(string url);
    internal static bool TrySplitUriForPathEncode(string input, String& schemeAndAuthority, String& path, String& queryAndFragment, bool checkScheme);
}
internal static class System.Web.Util.UrlPath : object {
    internal static char appRelativeCharacter;
    internal static string appRelativeCharacterString;
    private static UrlPath();
    internal static bool IsRooted(string basepath);
    internal static bool IsRelativeUrl(string virtualPath);
    internal static bool IsAppRelativePath(string path);
    internal static bool IsValidVirtualPathWithoutProtocol(string path);
    internal static string GetDirectory(string path);
    internal static bool IsAbsolutePhysicalPath(string path);
    internal static bool IsUncSharePath(string path);
    internal static void CheckValidVirtualPath(string path);
    internal static string Combine(string basepath, string relative);
    internal static string SimpleCombine(string basepath, string relative);
    internal static string Reduce(string path);
    internal static string ReduceVirtualPath(string path);
    internal static string FixVirtualPathSlashes(string virtualPath);
    internal static string MakeRelative(string from, string to);
    internal static string GetDirectoryOrRootName(string path);
    internal static string GetFileName(string virtualPath);
    internal static string GetFileNameWithoutExtension(string virtualPath);
    internal static string GetExtension(string virtualPath);
    internal static bool HasTrailingSlash(string virtualPath);
    internal static string AppendSlashToPathIfNeeded(string path);
    internal static string RemoveSlashFromPathIfNeeded(string path);
    internal static bool VirtualPathStartsWithAppPath(string virtualPath);
    internal static string MakeVirtualPathAppRelative(string virtualPath);
    internal static string MakeVirtualPathAppRelativeOrNull(string virtualPath);
    internal static string MakeVirtualPathAppRelative(string virtualPath, string applicationPath, bool nullIfNotInApp);
    internal static string MakeVirtualPathAppAbsolute(string virtualPath);
    internal static string MakeVirtualPathAppAbsolute(string virtualPath, string applicationPath);
    internal static string MakeVirtualPathAppAbsoluteReduceAndCheck(string virtualPath);
    internal static bool PathEndsWithExtraSlash(string path);
    internal static bool PathIsDriveRoot(string path);
    internal static bool IsEqualOrSubpath(string path, string subpath);
    internal static bool IsPathOnSameServer(string absUriOrLocalPath, Uri currentRequestUri);
}
internal static class System.Web.Util.Utf16StringValidator : object {
    private static Utf16StringValidator();
    public static string ValidateString(string input);
    internal static string ValidateString(string input, bool skipUtf16Validation);
}
internal class System.Web.Util.VersionInfo : object {
    internal static string SystemWebVersion { get; }
    internal static string EngineVersion { get; }
    internal static string ClrVersion { get; }
    internal static string ExeName { get; }
    private static VersionInfo();
    internal static string GetFileVersion(string filename);
    internal static string GetLoadedModuleFileName(string module);
    internal static string GetLoadedModuleVersion(string module);
    internal static string get_SystemWebVersion();
    internal static string get_EngineVersion();
    internal static string get_ClrVersion();
    internal static string get_ExeName();
}
internal static class System.Web.Util.VersionUtil : object {
    public static Version Framework00;
    public static Version Framework20;
    public static Version Framework35;
    public static Version Framework40;
    public static Version Framework45;
    public static Version Framework451;
    public static Version Framework452;
    public static Version Framework46;
    public static Version Framework461;
    public static Version FrameworkDefault;
    public static string FrameworkDefaultString;
    private static VersionUtil();
}
internal class System.Web.Util.VirtualPathSet : ObjectSet {
}
internal class System.Web.Util.VoidMethod : MulticastDelegate {
    public VoidMethod(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Web.Util.Wildcard : object {
    internal string _pattern;
    internal bool _caseInsensitive;
    internal Regex _regex;
    protected static Regex metaRegex;
    protected static Regex questRegex;
    protected static Regex starRegex;
    protected static Regex commaRegex;
    protected static Regex slashRegex;
    protected static Regex backslashRegex;
    internal Wildcard(string pattern, bool caseInsensitive);
    private static Wildcard();
    internal bool IsMatch(string input);
    protected void EnsureRegex();
    protected virtual Regex RegexFromWildcard(string pattern, bool caseInsensitive);
}
internal abstract class System.Web.Util.WildcardPath : Wildcard {
    internal WildcardPath(string pattern, bool caseInsensitive);
    internal bool IsSuffix(string input);
    protected void EnsureSuffix();
    protected abstract virtual Regex SuffixFromWildcard(string pattern, bool caseInsensitive);
    protected abstract virtual Regex[][] DirsFromWildcard(string pattern);
    protected abstract virtual String[] SplitDirs(string input);
}
internal class System.Web.Util.WildcardUrl : WildcardPath {
    internal WildcardUrl(string pattern, bool caseInsensitive);
    protected virtual String[] SplitDirs(string input);
    protected virtual Regex RegexFromWildcard(string pattern, bool caseInsensitive);
    protected virtual Regex SuffixFromWildcard(string pattern, bool caseInsensitive);
    protected virtual Regex[][] DirsFromWildcard(string pattern);
}
internal class System.Web.Util.WithinCancellableCallbackTaskAwaitable : ValueType {
    internal static WithinCancellableCallbackTaskAwaitable Completed;
    private WithinCancellableCallbackTaskAwaiter _awaiter;
    public WithinCancellableCallbackTaskAwaitable(HttpContext context, TaskAwaiter innerAwaiter);
    private static WithinCancellableCallbackTaskAwaitable();
    public WithinCancellableCallbackTaskAwaiter GetAwaiter();
}
public class System.Web.Util.WorkItem : object {
    private static WorkItem();
    public static void Post(WorkItemCallback callback);
    internal static void PostInternal(WorkItemCallback callback);
}
public class System.Web.Util.WorkItemCallback : MulticastDelegate {
    public WorkItemCallback(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Web.Util.WrappedWorkItemCallback : object {
    internal WrappedWorkItemCallback(WorkItemCallback callback);
    internal void Post();
}
internal static class System.Web.Util.XmlUtils : object {
    public static long MaxEntityExpansion;
    private static XmlUtils();
    public static XmlDocument CreateXmlDocumentFromContent(string content);
    public static XPathDocument CreateXPathDocumentFromContent(string content);
    public static XmlReaderSettings CreateXmlReaderSettings();
    public static XmlReader CreateXmlReader(string filepath);
    public static XmlReader CreateXmlReader(Stream datastream);
    public static XmlReader CreateXmlReader(TextReader reader);
    public static XmlReader CreateXmlReader(Stream contentStream, string baseURI);
    public static XmlReader CreateXmlReader(TextReader reader, string baseURI, XmlReaderSettings settings);
    public static XslCompiledTransform CreateXslCompiledTransform(XmlReader xmlReader);
    public static XslTransform CreateXslTransform(XmlReader reader);
    public static XslTransform CreateXslTransform(XmlReader reader, XmlResolver resolver);
    public static XslTransform GetXslTransform(XslTransform xform);
}
internal class System.Web.ValidateStringCallback : MulticastDelegate {
    public ValidateStringCallback(object object, IntPtr method);
    public virtual void Invoke(string key, string value);
    public virtual IAsyncResult BeginInvoke(string key, string value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Web.ValidationCallbackInfo : object {
    internal HttpCacheValidateHandler handler;
    internal object data;
    internal ValidationCallbackInfo(HttpCacheValidateHandler handler, object data);
}
internal class System.Web.VirtualPath : object {
    internal static VirtualPath RootVirtualPath;
    public string VirtualPathString { get; }
    internal string VirtualPathStringNoTrailingSlash { get; }
    internal string VirtualPathStringIfAvailable { get; }
    internal string AppRelativeVirtualPathStringOrNull { get; }
    public string AppRelativeVirtualPathString { get; }
    internal string AppRelativeVirtualPathStringIfAvailable { get; }
    internal string VirtualPathStringWhicheverAvailable { get; }
    public string Extension { get; }
    public string FileName { get; }
    internal bool HasTrailingSlash { get; }
    public bool IsWithinAppRoot { get; }
    public bool IsRelative { get; }
    public bool IsRoot { get; }
    public VirtualPath Parent { get; }
    private static VirtualPath();
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    public string get_VirtualPathString();
    internal string get_VirtualPathStringNoTrailingSlash();
    internal string get_VirtualPathStringIfAvailable();
    internal string get_AppRelativeVirtualPathStringOrNull();
    public string get_AppRelativeVirtualPathString();
    internal string get_AppRelativeVirtualPathStringIfAvailable();
    internal string get_VirtualPathStringWhicheverAvailable();
    public string get_Extension();
    public string get_FileName();
    public VirtualPath CombineWithAppRoot();
    public VirtualPath Combine(VirtualPath relativePath);
    internal VirtualPath SimpleCombine(string relativePath);
    internal VirtualPath SimpleCombineWithDir(string directoryName);
    public VirtualPath MakeRelative(VirtualPath toVirtualPath);
    public string MapPath();
    internal string MapPathInternal();
    internal string MapPathInternal(bool permitNull);
    internal string MapPathInternal(VirtualPath baseVirtualDir, bool allowCrossAppMapping);
    public string GetFileHash(IEnumerable virtualPathDependencies);
    public CacheDependency GetCacheDependency(IEnumerable virtualPathDependencies, DateTime utcStart);
    public bool FileExists();
    public bool DirectoryExists();
    public VirtualFile GetFile();
    public VirtualDirectory GetDirectory();
    public string GetCacheKey();
    public Stream OpenFile();
    internal bool get_HasTrailingSlash();
    public bool get_IsWithinAppRoot();
    internal void FailIfNotWithinAppRoot();
    internal void FailIfRelativePath();
    public bool get_IsRelative();
    public bool get_IsRoot();
    public VirtualPath get_Parent();
    internal static VirtualPath Combine(VirtualPath v1, VirtualPath v2);
    public static bool op_Equality(VirtualPath v1, VirtualPath v2);
    public static bool op_Inequality(VirtualPath v1, VirtualPath v2);
    public static bool Equals(VirtualPath v1, VirtualPath v2);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal static string GetVirtualPathString(VirtualPath virtualPath);
    internal static string GetVirtualPathStringNoTrailingSlash(VirtualPath virtualPath);
    internal static string GetAppRelativeVirtualPathString(VirtualPath virtualPath);
    internal static string GetAppRelativeVirtualPathStringOrEmpty(VirtualPath virtualPath);
    public static VirtualPath Create(string virtualPath);
    public static VirtualPath CreateTrailingSlash(string virtualPath);
    public static VirtualPath CreateAllowNull(string virtualPath);
    public static VirtualPath CreateAbsolute(string virtualPath);
    public static VirtualPath CreateNonRelative(string virtualPath);
    public static VirtualPath CreateAbsoluteTrailingSlash(string virtualPath);
    public static VirtualPath CreateNonRelativeTrailingSlash(string virtualPath);
    public static VirtualPath CreateAbsoluteAllowNull(string virtualPath);
    public static VirtualPath CreateNonRelativeAllowNull(string virtualPath);
    public static VirtualPath CreateNonRelativeTrailingSlashAllowNull(string virtualPath);
    public static VirtualPath Create(string virtualPath, VirtualPathOptions options);
}
[FlagsAttribute]
internal enum System.Web.VirtualPathOptions : Enum {
    public int value__;
    public static VirtualPathOptions AllowNull;
    public static VirtualPathOptions EnsureTrailingSlash;
    public static VirtualPathOptions AllowAbsolutePath;
    public static VirtualPathOptions AllowAppRelativePath;
    public static VirtualPathOptions AllowRelativePath;
    public static VirtualPathOptions FailIfMalformed;
    public static VirtualPathOptions AllowAllPath;
}
public static class System.Web.VirtualPathUtility : object {
    public static bool IsAbsolute(string virtualPath);
    public static bool IsAppRelative(string virtualPath);
    public static string ToAppRelative(string virtualPath);
    public static string ToAppRelative(string virtualPath, string applicationPath);
    public static string ToAbsolute(string virtualPath);
    public static string ToAbsolute(string virtualPath, string applicationPath);
    public static string GetFileName(string virtualPath);
    public static string GetDirectory(string virtualPath);
    public static string GetExtension(string virtualPath);
    public static string AppendTrailingSlash(string virtualPath);
    public static string RemoveTrailingSlash(string virtualPath);
    public static string Combine(string basePath, string relativePath);
    public static string MakeRelative(string fromPath, string toPath);
}
[AttributeUsageAttribute("32767")]
internal class System.Web.WebCategoryAttribute : CategoryAttribute {
    public object TypeId { get; }
    internal WebCategoryAttribute(string category);
    public virtual object get_TypeId();
    protected virtual string GetLocalizedString(string value);
}
public class System.Web.WebPageTraceListener : TraceListener {
    public virtual void Write(string message);
    public virtual void Write(string message, string category);
    public virtual void WriteLine(string message);
    public virtual void WriteLine(string message, string category);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType severity, int id, string message);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType severity, int id, string format, Object[] args);
}
internal class System.Web.WebSocketPipeline : object {
    private HttpContext System.Web.Util.ISyncContext.HttpContext { get; }
    public WebSocketPipeline(RootedObjects root, HttpContext httpContext, Func`2<AspNetWebSocketContext, Task> userFunc, string subProtocol);
    public sealed virtual void Dispose();
    public void ProcessRequest();
    private sealed virtual override HttpContext System.Web.Util.ISyncContext.get_HttpContext();
    private sealed virtual override ISyncContextLock System.Web.Util.ISyncContext.Enter();
}
public class System.Web.WebSockets.AspNetWebSocket : WebSocket {
    internal ChannelState _receiveState;
    internal ChannelState _sendState;
    internal WebSocketState _state;
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    public string CloseStatusDescription { get; }
    public WebSocketState State { get; }
    public string SubProtocol { get; }
    internal CountdownTask PendingOperationCounter { get; }
    internal AspNetWebSocket(IWebSocketPipe pipe, string subProtocol);
    private static AspNetWebSocket();
    public virtual Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    public virtual string get_CloseStatusDescription();
    public virtual WebSocketState get_State();
    public virtual string get_SubProtocol();
    internal CountdownTask get_PendingOperationCounter();
    public virtual void Abort();
    internal Task AbortAsync();
    public virtual Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual void Dispose();
    internal void DisposeInternal();
    public virtual Task`1<WebSocketReceiveResult> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task SendAsync(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    internal static void ValidateCloseStatusCodeAndDescription(WebSocketCloseStatus closeStatus, String& statusDescription);
    internal Task DoWork(Func`1<Task> taskDelegate, CancellationToken cancellationToken);
    private sealed virtual override Task System.Web.WebSockets.IAsyncAbortableWebSocket.AbortAsync();
}
public abstract class System.Web.WebSockets.AspNetWebSocketContext : WebSocketContext {
    public string AnonymousID { get; }
    public HttpApplicationStateBase Application { get; }
    public string ApplicationPath { get; }
    public Cache Cache { get; }
    public HttpClientCertificate ClientCertificate { get; }
    public static int ConnectionCount { get; }
    public CookieCollection CookieCollection { get; }
    public HttpCookieCollection Cookies { get; }
    public string FilePath { get; }
    public NameValueCollection Headers { get; }
    public bool IsAuthenticated { get; }
    public bool IsClientConnected { get; }
    public bool IsDebuggingEnabled { get; }
    public bool IsLocal { get; }
    public bool IsSecureConnection { get; }
    public IDictionary Items { get; }
    public WindowsIdentity LogonUserIdentity { get; }
    public string Origin { get; }
    public string Path { get; }
    public string PathInfo { get; }
    public ProfileBase Profile { get; }
    public NameValueCollection QueryString { get; }
    public string RawUrl { get; }
    public Uri RequestUri { get; }
    public string SecWebSocketKey { get; }
    public IEnumerable`1<string> SecWebSocketProtocols { get; }
    public string SecWebSocketVersion { get; }
    public HttpServerUtilityBase Server { get; }
    public NameValueCollection ServerVariables { get; }
    public DateTime Timestamp { get; }
    public UnvalidatedRequestValuesBase Unvalidated { get; }
    public Uri UrlReferrer { get; }
    public IPrincipal User { get; }
    public string UserAgent { get; }
    public string UserHostAddress { get; }
    public string UserHostName { get; }
    public String[] UserLanguages { get; }
    public WebSocket WebSocket { get; }
    public virtual string get_AnonymousID();
    public virtual HttpApplicationStateBase get_Application();
    public virtual string get_ApplicationPath();
    public virtual Cache get_Cache();
    public virtual HttpClientCertificate get_ClientCertificate();
    public static int get_ConnectionCount();
    public virtual CookieCollection get_CookieCollection();
    public virtual HttpCookieCollection get_Cookies();
    public virtual string get_FilePath();
    public virtual NameValueCollection get_Headers();
    public virtual bool get_IsAuthenticated();
    public virtual bool get_IsClientConnected();
    public virtual bool get_IsDebuggingEnabled();
    public virtual bool get_IsLocal();
    public virtual bool get_IsSecureConnection();
    public virtual IDictionary get_Items();
    public virtual WindowsIdentity get_LogonUserIdentity();
    public virtual string get_Origin();
    public virtual string get_Path();
    public virtual string get_PathInfo();
    public virtual ProfileBase get_Profile();
    public virtual NameValueCollection get_QueryString();
    public virtual string get_RawUrl();
    public virtual Uri get_RequestUri();
    public virtual string get_SecWebSocketKey();
    public virtual IEnumerable`1<string> get_SecWebSocketProtocols();
    public virtual string get_SecWebSocketVersion();
    public virtual HttpServerUtilityBase get_Server();
    public virtual NameValueCollection get_ServerVariables();
    public virtual DateTime get_Timestamp();
    public virtual UnvalidatedRequestValuesBase get_Unvalidated();
    public virtual Uri get_UrlReferrer();
    public virtual IPrincipal get_User();
    public virtual string get_UserAgent();
    public virtual string get_UserHostAddress();
    public virtual string get_UserHostName();
    public virtual String[] get_UserLanguages();
    public virtual WebSocket get_WebSocket();
}
internal class System.Web.WebSockets.AspNetWebSocketContextImpl : AspNetWebSocketContext {
    public string AnonymousID { get; }
    public HttpApplicationStateBase Application { get; }
    public string ApplicationPath { get; }
    public Cache Cache { get; }
    public HttpClientCertificate ClientCertificate { get; }
    public CookieCollection CookieCollection { get; }
    public HttpCookieCollection Cookies { get; }
    public string FilePath { get; }
    public NameValueCollection Headers { get; }
    public bool IsAuthenticated { get; }
    public bool IsClientConnected { get; }
    public bool IsDebuggingEnabled { get; }
    public bool IsLocal { get; }
    public bool IsSecureConnection { get; }
    public IDictionary Items { get; }
    public WindowsIdentity LogonUserIdentity { get; }
    public string Origin { get; }
    public string Path { get; }
    public string PathInfo { get; }
    public ProfileBase Profile { get; }
    public NameValueCollection QueryString { get; }
    public string RawUrl { get; }
    public Uri RequestUri { get; }
    public string SecWebSocketKey { get; }
    public IEnumerable`1<string> SecWebSocketProtocols { get; }
    public string SecWebSocketVersion { get; }
    public HttpServerUtilityBase Server { get; }
    public NameValueCollection ServerVariables { get; }
    public DateTime Timestamp { get; }
    public UnvalidatedRequestValuesBase Unvalidated { get; }
    public Uri UrlReferrer { get; }
    public IPrincipal User { get; }
    public string UserAgent { get; }
    public string UserHostAddress { get; }
    public string UserHostName { get; }
    public String[] UserLanguages { get; }
    public WebSocket WebSocket { get; }
    public AspNetWebSocketContextImpl(HttpContextBase httpContext, HttpWorkerRequest workerRequest, AspNetWebSocket webSocket);
    public virtual string get_AnonymousID();
    public virtual HttpApplicationStateBase get_Application();
    public virtual string get_ApplicationPath();
    public virtual Cache get_Cache();
    public virtual HttpClientCertificate get_ClientCertificate();
    public virtual CookieCollection get_CookieCollection();
    public virtual HttpCookieCollection get_Cookies();
    public virtual string get_FilePath();
    public virtual NameValueCollection get_Headers();
    public virtual bool get_IsAuthenticated();
    public virtual bool get_IsClientConnected();
    public virtual bool get_IsDebuggingEnabled();
    public virtual bool get_IsLocal();
    public virtual bool get_IsSecureConnection();
    public virtual IDictionary get_Items();
    public virtual WindowsIdentity get_LogonUserIdentity();
    public virtual string get_Origin();
    public virtual string get_Path();
    public virtual string get_PathInfo();
    public virtual ProfileBase get_Profile();
    public virtual NameValueCollection get_QueryString();
    public virtual string get_RawUrl();
    public virtual Uri get_RequestUri();
    public virtual string get_SecWebSocketKey();
    public virtual IEnumerable`1<string> get_SecWebSocketProtocols();
    public virtual string get_SecWebSocketVersion();
    public virtual HttpServerUtilityBase get_Server();
    public virtual NameValueCollection get_ServerVariables();
    public virtual DateTime get_Timestamp();
    public virtual UnvalidatedRequestValuesBase get_Unvalidated();
    public virtual Uri get_UrlReferrer();
    public virtual IPrincipal get_User();
    public virtual string get_UserAgent();
    public virtual string get_UserHostAddress();
    public virtual string get_UserHostName();
    public virtual String[] get_UserLanguages();
    public virtual WebSocket get_WebSocket();
}
internal class System.Web.WebSockets.AspNetWebSocketManager : object {
    public static AspNetWebSocketManager Current;
    internal HashSet`1<IAsyncAbortableWebSocket> _activeSockets;
    public int ActiveSocketCount { get; }
    internal AspNetWebSocketManager(IPerfCounters perfCounters);
    private static AspNetWebSocketManager();
    public int get_ActiveSocketCount();
    public void AbortAllAndWait();
    public void Add(IAsyncAbortableWebSocket webSocket);
    public void Remove(IAsyncAbortableWebSocket webSocket);
}
public class System.Web.WebSockets.AspNetWebSocketOptions : object {
    public bool RequireSameOrigin { get; public set; }
    public string SubProtocol { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RequireSameOrigin();
    [CompilerGeneratedAttribute]
public void set_RequireSameOrigin(bool value);
    public string get_SubProtocol();
    public void set_SubProtocol(string value);
}
internal interface System.Web.WebSockets.IAsyncAbortableWebSocket {
    public abstract virtual Task AbortAsync();
}
internal interface System.Web.WebSockets.IUnmanagedWebSocketContext {
    public abstract virtual int WriteFragment(IntPtr pData, Int32& pcbSent, bool fAsync, bool fUtf8Encoded, bool fFinalFragment, IntPtr pfnCompletion, IntPtr pvCompletionContext, Boolean& pfCompletionExpected);
    public abstract virtual int ReadFragment(IntPtr pData, Int32& pcbData, bool fAsync, Boolean& pfUtf8Encoded, Boolean& pfFinalFragment, Boolean& pfConnectionClose, IntPtr pfnCompletion, IntPtr pvCompletionContext, Boolean& pfCompletionExpected);
    public abstract virtual int SendConnectionClose(bool fAsync, ushort uStatusCode, string szReason, IntPtr pfnCompletion, IntPtr pvCompletionContext, Boolean& pfCompletionExpected);
    public abstract virtual int GetCloseStatus(UInt16& pStatusCode, IntPtr& ppszReason, UInt16& pcchReason);
    public abstract virtual void CloseTcpConnection();
}
internal interface System.Web.WebSockets.IWebSocketPipe {
    public abstract virtual void CloseTcpConnection();
    public abstract virtual Task`1<WebSocketReceiveResult> ReadFragmentAsync(ArraySegment`1<byte> buffer);
    public abstract virtual Task WriteCloseFragmentAsync(WebSocketCloseStatus closeStatus, string statusDescription);
    public abstract virtual Task WriteFragmentAsync(ArraySegment`1<byte> buffer, bool isUtf8Encoded, bool isFinalFragment);
}
internal static class System.Web.WebSockets.SubProtocolUtil : object {
    private static SubProtocolUtil();
    public static bool IsValidSubProtocolName(string subprotocol);
    public static List`1<string> ParseHeader(string headerValue);
}
internal class System.Web.WebSockets.UnmanagedWebSocketContext : object {
    internal UnmanagedWebSocketContext(IntPtr pWebSocketContext);
    public sealed virtual int WriteFragment(IntPtr pData, Int32& pcbSent, bool fAsync, bool fUtf8Encoded, bool fFinalFragment, IntPtr pfnCompletion, IntPtr pvCompletionContext, Boolean& pfCompletionExpected);
    public sealed virtual int ReadFragment(IntPtr pData, Int32& pcbData, bool fAsync, Boolean& pfUtf8Encoded, Boolean& pfFinalFragment, Boolean& pfConnectionClose, IntPtr pfnCompletion, IntPtr pvCompletionContext, Boolean& pfCompletionExpected);
    public sealed virtual int SendConnectionClose(bool fAsync, ushort uStatusCode, string szReason, IntPtr pfnCompletion, IntPtr pvCompletionContext, Boolean& pfCompletionExpected);
    public sealed virtual int GetCloseStatus(UInt16& pStatusCode, IntPtr& ppszReason, UInt16& pcchReason);
    public sealed virtual void CloseTcpConnection();
}
internal class System.Web.WebSockets.WebSocketPipe : object {
    internal WebSocketPipe(IUnmanagedWebSocketContext context, IPerfCounters perfCounters);
    private static WebSocketPipe();
    public sealed virtual Task WriteFragmentAsync(ArraySegment`1<byte> buffer, bool isUtf8Encoded, bool isFinalFragment);
    public sealed virtual Task WriteCloseFragmentAsync(WebSocketCloseStatus closeStatus, string statusDescription);
    public sealed virtual Task`1<WebSocketReceiveResult> ReadFragmentAsync(ArraySegment`1<byte> buffer);
    public sealed virtual void CloseTcpConnection();
}
internal static class System.Web.WebSockets.WebSocketUtil : object {
    public static bool IsSameOriginRequest(HttpWorkerRequest workerRequest);
}
internal enum System.Web.WebSocketTransitionState : Enum {
    public byte value__;
    public static WebSocketTransitionState Inactive;
    public static WebSocketTransitionState AcceptWebSocketRequestCalled;
    public static WebSocketTransitionState TransitionStarted;
    public static WebSocketTransitionState TransitionCompleted;
}
[AttributeUsageAttribute("32767")]
internal class System.Web.WebSysDefaultValueAttribute : DefaultValueAttribute {
    public object TypeId { get; }
    public object Value { get; }
    internal WebSysDefaultValueAttribute(Type type, string value);
    internal WebSysDefaultValueAttribute(string value);
    public virtual object get_TypeId();
    public virtual object get_Value();
}
[AttributeUsageAttribute("32767")]
internal class System.Web.WebSysDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public object TypeId { get; }
    internal WebSysDescriptionAttribute(string description);
    public virtual string get_Description();
    public virtual object get_TypeId();
}
[AttributeUsageAttribute("644")]
internal class System.Web.WebSysDisplayNameAttribute : DisplayNameAttribute {
    public string DisplayName { get; }
    public object TypeId { get; }
    internal WebSysDisplayNameAttribute(string DisplayName);
    public virtual string get_DisplayName();
    public virtual object get_TypeId();
}
public class System.Web.XmlSiteMapProvider : StaticSiteMapProvider {
    public SiteMapNode RootNode { get; }
    public SiteMapNode CurrentNode { get; }
    private static XmlSiteMapProvider();
    public virtual SiteMapNode get_RootNode();
    public virtual SiteMapNode get_CurrentNode();
    public virtual SiteMapNode GetParentNode(SiteMapNode node);
    public virtual SiteMapNodeCollection GetChildNodes(SiteMapNode node);
    protected internal virtual void AddNode(SiteMapNode node, SiteMapNode parentNode);
    protected virtual void AddProvider(string providerName, SiteMapNode parentNode);
    public virtual SiteMapNode BuildSiteMap();
    protected virtual void Clear();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public virtual SiteMapNode FindSiteMapNode(string rawUrl);
    public virtual SiteMapNode FindSiteMapNodeFromKey(string key);
    protected internal virtual SiteMapNode GetRootNodeCore();
    public virtual void Initialize(string name, NameValueCollection attributes);
    protected internal virtual void RemoveNode(SiteMapNode node);
    protected virtual void RemoveProvider(string providerName);
}
internal static class ThisAssembly : object {
    internal static string Title;
    internal static string Description;
    internal static string DefaultAlias;
    internal static string Copyright;
    internal static string Version;
    internal static string InformationalVersion;
    internal static string DailyBuildNumberStr;
    internal static string BuildRevisionStr;
    internal static int DailyBuildNumber;
}
