[NativeCppClassAttribute]
internal enum __enative_startup_state : Enum {
    public int value__;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class __s_GUID : ValueType {
}
[NativeCppClassAttribute]
internal class _EXCEPTION_POINTERS : ValueType {
}
[NativeCppClassAttribute]
internal class _FILETIME : ValueType {
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _GUID : ValueType {
}
internal class AdalException : Exception {
    internal AdalException(string message, UInt32 category, UInt32 status, UInt32 state);
    internal UInt32 GetCategory();
    internal UInt32 GetStatus();
    internal UInt32 GetState();
}
internal class ADALNativeWrapper : object {
    internal static int ADALInitialize();
    internal static Byte[] ADALGetAccessToken(string username, string password, string stsURL, string servicePrincipalName, ValueType modopt(System.Guid) modopt(System.Runtime.CompilerServices.IsBoxed) correlationId, string clientId, Int64& fileTime);
    internal static Byte[] ADALGetAccessToken(string username, SecureString password, string stsURL, string servicePrincipalName, ValueType modopt(System.Guid) modopt(System.Runtime.CompilerServices.IsBoxed) correlationId, string clientId, Int64& fileTime);
    internal static Byte[] ADALGetAccessTokenForWindowsIntegrated(string stsURL, string servicePrincipalName, ValueType modopt(System.Guid) modopt(System.Runtime.CompilerServices.IsBoxed) correlationId, string clientId, Int64& fileTime);
}
[ComVisibleAttribute("False")]
internal static class Bid : object {
    internal static bool TraceOn { get; }
    internal static bool ScopeOn { get; }
    internal static bool AdvancedOn { get; }
    internal static IntPtr NoData { get; }
    internal static IntPtr ID { get; }
    internal static bool IsInitialized { get; }
    internal static IntPtr DefaultCmdSpace { get; }
    private static Bid();
    [ReliabilityContractAttribute("3", "2")]
internal static void PoolerTrace(string fmtPrintfW, int a1);
    internal static void PoolerTrace(string fmtPrintfW, int a1, int a2);
    internal static void PoolerTrace(string fmtPrintfW, int a1, int a2, int a3);
    internal static void PoolerTrace(string fmtPrintfW, int a1, int a2, int a3, int a4);
    internal static void PoolerTrace(string fmtPrintfW, int a1, Exception a2);
    internal static void PoolerScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1);
    internal static void NotificationsScopeEnter(IntPtr& hScp, string fmtPrintfW, string fmtPrintfW2);
    internal static void NotificationsScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1);
    internal static void NotificationsScopeEnter(IntPtr& hScp, string fmtPrintfW, string fmtPrintfW2, string fmtPrintfW3);
    internal static void NotificationsScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, string fmtPrintfW2);
    internal static void NotificationsScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, int a2);
    internal static void NotificationsScopeEnter(IntPtr& hScp, string fmtPrintfW, string fmtPrintfW2, string fmtPrintfW3, string fmtPrintfW4);
    internal static void NotificationsScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, string fmtPrintfW2, int a2);
    internal static void NotificationsScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, string fmtPrintfW2, string fmtPrintfW3, int a4);
    internal static void NotificationsTrace(string fmtPrintfW);
    internal static void NotificationsTrace(string fmtPrintfW, string fmtPrintfW2);
    internal static void NotificationsTrace(string fmtPrintfW, int a1);
    internal static void NotificationsTrace(string fmtPrintfW, bool a1);
    internal static void NotificationsTrace(string fmtPrintfW, string fmtPrintfW2, int a1);
    internal static void NotificationsTrace(string fmtPrintfW, int a1, string fmtPrintfW2);
    internal static void NotificationsTrace(string fmtPrintfW, int a1, int a2);
    internal static void NotificationsTrace(string fmtPrintfW, int a1, bool a2);
    internal static void NotificationsTrace(string fmtPrintfW, string a1, string a2);
    internal static void NotificationsTrace(string fmtPrintfW, string fmtPrintfW2, string fmtPrintfW3, int a1);
    internal static void NotificationsTrace(string fmtPrintfW, bool a1, string fmtPrintfW2, string fmtPrintfW3, string fmtPrintfW4);
    internal static void NotificationsTrace(string fmtPrintfW, int a1, string fmtPrintfW2, string fmtPrintfW3, string fmtPrintfW4);
    internal static void CorrelationTrace(string fmtPrintfW, int a1);
    internal static void CorrelationTrace(string fmtPrintfW);
    internal static void CorrelationTrace(string fmtPrintfW, int a1, int a2);
    [ReliabilityContractAttribute("3", "2")]
internal static void TraceSqlReturn(string fmtPrintfW, RetCode a1);
    internal static void TraceSqlReturn(string fmtPrintfW, RetCode a1, string a2);
    [ReliabilityContractAttribute("3", "2")]
internal static void Trace(string fmtPrintfW, OleDbHResult a1);
    internal static void Trace(string fmtPrintfW, OleDbHResult a1, string a2);
    internal static void Trace(string fmtPrintfW, OleDbHResult a1, IntPtr a2);
    internal static void Trace(string fmtPrintfW, OleDbHResult a1, int a2);
    internal static void Trace(string fmtPrintfW, string a1, string a2);
    internal static void Trace(string fmtPrintfW, int a1, string a2, bool a3);
    internal static void Trace(string fmtPrintfW, int a1, int a2, string a3, string a4, int a5);
    internal static void Trace(string fmtPrintfW, int a1, int a2, long a3, UInt32 a4, int a5, UInt32 a6, UInt32 a7);
    internal static void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, Guid a2);
    internal static void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, string a2, int a3);
    internal static void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, bool a2, int a3);
    [ReliabilityContractAttribute("3", "2")]
internal static void Trace(string fmtPrintfW, int a1, string a2);
    [ReliabilityContractAttribute("3", "2")]
internal static void Trace(string fmtPrintfW, IntPtr a1);
    internal static void Trace(string fmtPrintfW, int a1);
    internal static void Trace(string fmtPrintfW, int a1, int a2);
    internal static void Trace(string fmtPrintfW, int a1, IntPtr a2, IntPtr a3);
    internal static void Trace(string fmtPrintfW, int a1, IntPtr a2);
    internal static void Trace(string fmtPrintfW, int a1, string a2, string a3);
    internal static void Trace(string fmtPrintfW, int a1, string a2, int a3);
    internal static void Trace(string fmtPrintfW, int a1, string a2, string a3, int a4);
    internal static void Trace(string fmtPrintfW, int a1, int a2, int a3, string a4, string a5, int a6);
    internal static void Trace(string fmtPrintfW, int a1, int a2, int a3);
    internal static void Trace(string fmtPrintfW, int a1, bool a2);
    internal static void Trace(string fmtPrintfW, int a1, int a2, int a3, int a4);
    internal static void Trace(string fmtPrintfW, int a1, int a2, bool a3);
    internal static void Trace(string fmtPrintfW, int a1, int a2, int a3, int a4, int a5, int a6, int a7);
    internal static void Trace(string fmtPrintfW, int a1, string a2, int a3, int a4, bool a5);
    internal static void Trace(string fmtPrintfW, int a1, long a2);
    internal static void Trace(string fmtPrintfW, int a1, int a2, long a3);
    internal static void Trace(string fmtPrintfW, int a1, string a2, string a3, string a4, int a5, long a6);
    internal static void Trace(string fmtPrintfW, int a1, long a2, int a3, int a4);
    internal static void Trace(string fmtPrintfW, int a1, int a2, long a3, int a4);
    internal static void Trace(string fmtPrintfW, int a1, int a2, int a3, int a4, string a5, string a6, string a7, int a8);
    internal static void Trace(string fmtPrintfW, int a1, int a2, string a3, string a4);
    internal static void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, string a2);
    internal static void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, bool a2);
    internal static void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, int a2, string a3);
    internal static void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, string a2, bool a3);
    internal static void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, int a2, bool a3);
    internal static void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, int a2, int a3, string a4);
    internal static void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, int a2, int a3);
    internal static void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, int a2, bool a3, int a4);
    internal static bool get_TraceOn();
    internal static bool get_ScopeOn();
    internal static bool get_AdvancedOn();
    internal static bool IsOn(ApiGroup flag);
    internal static IntPtr get_NoData();
    internal static IntPtr get_ID();
    internal static bool get_IsInitialized();
    internal static void PutStr(string str);
    internal static void Trace(string strConst);
    internal static void TraceEx(UInt32 flags, string strConst);
    internal static void Trace(string fmtPrintfW, string a1);
    internal static void TraceEx(UInt32 flags, string fmtPrintfW, string a1);
    internal static void ScopeLeave(IntPtr& hScp);
    internal static void ScopeEnter(IntPtr& hScp, string strConst);
    internal static void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1);
    internal static void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, int a2);
    internal static void TraceBin(string constStrHeader, Byte[] buff, ushort length);
    internal static void TraceBinEx(Byte[] buff, ushort length);
    internal static ApiGroup SetApiGroupBits(ApiGroup mask, ApiGroup bits);
    internal static bool AddMetaText(string metaStr);
    [ConditionalAttribute("DEBUG")]
internal static void DTRACE(string strConst);
    [ConditionalAttribute("DEBUG")]
internal static void DTRACE(string clrFormatString, Object[] args);
    [ConditionalAttribute("DEBUG")]
internal static void DASSERT(bool condition);
    internal static IntPtr get_DefaultCmdSpace();
}
[AttributeUsageAttribute("2112")]
[ConditionalAttribute("CODE_ANALYSIS")]
internal class BidArgumentTypeAttribute : Attribute {
    public Type ArgumentType;
    public int Index;
    internal BidArgumentTypeAttribute(Type bidArgumentType);
    internal BidArgumentTypeAttribute(Type bidArgumentType, int index);
}
[AttributeUsageAttribute("2")]
internal class BidIdentityAttribute : Attribute {
    internal string IdentityString { get; }
    internal BidIdentityAttribute(string idStr);
    internal string get_IdentityString();
}
[AttributeUsageAttribute("2")]
internal class BidMetaTextAttribute : Attribute {
    internal string MetaText { get; }
    internal BidMetaTextAttribute(string str);
    internal string get_MetaText();
}
[ConditionalAttribute("CODE_ANALYSIS")]
[AttributeUsageAttribute("64")]
internal class BidMethodAttribute : Attribute {
    public bool Enabled { get; public set; }
    public bool get_Enabled();
    public void set_Enabled(bool value);
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class BOID : ValueType {
}
[NativeCppClassAttribute]
internal enum ConsumerNum : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class gcroot<System::String ^> : ValueType {
}
[NativeCppClassAttribute]
internal static class IChapteredRowset : ValueType {
}
[NativeCppClassAttribute]
internal static class ICLRRuntimeHost : ValueType {
}
[NativeCppClassAttribute]
internal static class ICorRuntimeHost : ValueType {
}
[NativeCppClassAttribute]
internal static class ITransactionLocal : ValueType {
}
[NativeCppClassAttribute]
internal static class IUnknown : ValueType {
}
internal class Microsoft.SqlServer.Server.BinaryOrderedUdtNormalizer : Normalizer {
    internal FieldInfoEx[] m_fieldsToNormalize;
    internal object NullInstance;
    internal bool IsNullable { get; }
    internal int Size { get; }
    internal BinaryOrderedUdtNormalizer(Type t, bool isTopLevelUdt);
    internal bool get_IsNullable();
    internal void NormalizeTopObject(object udt, Stream s);
    internal object DeNormalizeTopObject(Type t, Stream s);
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.SqlServer.Server.BinarySerializeSerializer : Serializer {
    internal BinarySerializeSerializer(Type t);
    public virtual void Serialize(Stream s, object o);
    public virtual object Deserialize(Stream s);
}
internal class Microsoft.SqlServer.Server.BooleanNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.SqlServer.Server.ByteNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
public enum Microsoft.SqlServer.Server.DataAccessKind : Enum {
    public int value__;
    public static DataAccessKind None;
    public static DataAccessKind Read;
}
internal class Microsoft.SqlServer.Server.DoubleNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.SqlServer.Server.DummyStream : Stream {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Position { get; public set; }
    public long Length { get; }
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long get_Length();
    public virtual void SetLength(long value);
    public virtual long Seek(long value, SeekOrigin loc);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal enum Microsoft.SqlServer.Server.ExtendedClrTypeCode : Enum {
    public int value__;
    public static ExtendedClrTypeCode Invalid;
    public static ExtendedClrTypeCode Boolean;
    public static ExtendedClrTypeCode Byte;
    public static ExtendedClrTypeCode Char;
    public static ExtendedClrTypeCode DateTime;
    public static ExtendedClrTypeCode DBNull;
    public static ExtendedClrTypeCode Decimal;
    public static ExtendedClrTypeCode Double;
    public static ExtendedClrTypeCode Empty;
    public static ExtendedClrTypeCode Int16;
    public static ExtendedClrTypeCode Int32;
    public static ExtendedClrTypeCode Int64;
    public static ExtendedClrTypeCode SByte;
    public static ExtendedClrTypeCode Single;
    public static ExtendedClrTypeCode String;
    public static ExtendedClrTypeCode UInt16;
    public static ExtendedClrTypeCode UInt32;
    public static ExtendedClrTypeCode UInt64;
    public static ExtendedClrTypeCode Object;
    public static ExtendedClrTypeCode ByteArray;
    public static ExtendedClrTypeCode CharArray;
    public static ExtendedClrTypeCode Guid;
    public static ExtendedClrTypeCode SqlBinary;
    public static ExtendedClrTypeCode SqlBoolean;
    public static ExtendedClrTypeCode SqlByte;
    public static ExtendedClrTypeCode SqlDateTime;
    public static ExtendedClrTypeCode SqlDouble;
    public static ExtendedClrTypeCode SqlGuid;
    public static ExtendedClrTypeCode SqlInt16;
    public static ExtendedClrTypeCode SqlInt32;
    public static ExtendedClrTypeCode SqlInt64;
    public static ExtendedClrTypeCode SqlMoney;
    public static ExtendedClrTypeCode SqlDecimal;
    public static ExtendedClrTypeCode SqlSingle;
    public static ExtendedClrTypeCode SqlString;
    public static ExtendedClrTypeCode SqlChars;
    public static ExtendedClrTypeCode SqlBytes;
    public static ExtendedClrTypeCode SqlXml;
    public static ExtendedClrTypeCode DataTable;
    public static ExtendedClrTypeCode DbDataReader;
    public static ExtendedClrTypeCode IEnumerableOfSqlDataRecord;
    public static ExtendedClrTypeCode TimeSpan;
    public static ExtendedClrTypeCode DateTimeOffset;
    public static ExtendedClrTypeCode Stream;
    public static ExtendedClrTypeCode TextReader;
    public static ExtendedClrTypeCode XmlReader;
    public static ExtendedClrTypeCode Last;
    public static ExtendedClrTypeCode First;
}
internal class Microsoft.SqlServer.Server.FieldInfoEx : object {
    internal int offset;
    internal FieldInfo fieldInfo;
    internal Normalizer normalizer;
    internal FieldInfoEx(FieldInfo fi, int offset, Normalizer normalizer);
    public sealed virtual int CompareTo(object other);
}
internal class Microsoft.SqlServer.Server.FloatNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
public enum Microsoft.SqlServer.Server.Format : Enum {
    public int value__;
    public static Format Unknown;
    public static Format Native;
    public static Format UserDefined;
}
public interface Microsoft.SqlServer.Server.IBinarySerialize {
    public abstract virtual void Read(BinaryReader r);
    public abstract virtual void Write(BinaryWriter w);
}
internal class Microsoft.SqlServer.Server.IntNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
public class Microsoft.SqlServer.Server.InvalidUdtException : SystemException {
    internal InvalidUdtException(string message);
    internal InvalidUdtException(string message, Exception innerException);
    private InvalidUdtException(SerializationInfo si, StreamingContext sc);
    public virtual void GetObjectData(SerializationInfo si, StreamingContext context);
    internal static InvalidUdtException Create(Type udtType, string resourceReason);
}
internal interface Microsoft.SqlServer.Server.ITypedGetters {
    public abstract virtual bool IsDBNull(int ordinal);
    public abstract virtual SqlDbType GetVariantType(int ordinal);
    public abstract virtual bool GetBoolean(int ordinal);
    public abstract virtual byte GetByte(int ordinal);
    public abstract virtual long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual char GetChar(int ordinal);
    public abstract virtual long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public abstract virtual short GetInt16(int ordinal);
    public abstract virtual int GetInt32(int ordinal);
    public abstract virtual long GetInt64(int ordinal);
    public abstract virtual float GetFloat(int ordinal);
    public abstract virtual double GetDouble(int ordinal);
    public abstract virtual string GetString(int ordinal);
    public abstract virtual decimal GetDecimal(int ordinal);
    public abstract virtual DateTime GetDateTime(int ordinal);
    public abstract virtual Guid GetGuid(int ordinal);
    public abstract virtual SqlBoolean GetSqlBoolean(int ordinal);
    public abstract virtual SqlByte GetSqlByte(int ordinal);
    public abstract virtual SqlInt16 GetSqlInt16(int ordinal);
    public abstract virtual SqlInt32 GetSqlInt32(int ordinal);
    public abstract virtual SqlInt64 GetSqlInt64(int ordinal);
    public abstract virtual SqlSingle GetSqlSingle(int ordinal);
    public abstract virtual SqlDouble GetSqlDouble(int ordinal);
    public abstract virtual SqlMoney GetSqlMoney(int ordinal);
    public abstract virtual SqlDateTime GetSqlDateTime(int ordinal);
    public abstract virtual SqlDecimal GetSqlDecimal(int ordinal);
    public abstract virtual SqlString GetSqlString(int ordinal);
    public abstract virtual SqlBinary GetSqlBinary(int ordinal);
    public abstract virtual SqlGuid GetSqlGuid(int ordinal);
    public abstract virtual SqlChars GetSqlChars(int ordinal);
    public abstract virtual SqlBytes GetSqlBytes(int ordinal);
    public abstract virtual SqlXml GetSqlXml(int ordinal);
    public abstract virtual SqlBytes GetSqlBytesRef(int ordinal);
    public abstract virtual SqlChars GetSqlCharsRef(int ordinal);
    public abstract virtual SqlXml GetSqlXmlRef(int ordinal);
}
internal interface Microsoft.SqlServer.Server.ITypedGettersV3 {
    public abstract virtual bool IsDBNull(SmiEventSink sink, int ordinal);
    public abstract virtual SmiMetaData GetVariantType(SmiEventSink sink, int ordinal);
    public abstract virtual bool GetBoolean(SmiEventSink sink, int ordinal);
    public abstract virtual byte GetByte(SmiEventSink sink, int ordinal);
    public abstract virtual long GetBytesLength(SmiEventSink sink, int ordinal);
    public abstract virtual int GetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual long GetCharsLength(SmiEventSink sink, int ordinal);
    public abstract virtual int GetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public abstract virtual string GetString(SmiEventSink sink, int ordinal);
    public abstract virtual short GetInt16(SmiEventSink sink, int ordinal);
    public abstract virtual int GetInt32(SmiEventSink sink, int ordinal);
    public abstract virtual long GetInt64(SmiEventSink sink, int ordinal);
    public abstract virtual float GetSingle(SmiEventSink sink, int ordinal);
    public abstract virtual double GetDouble(SmiEventSink sink, int ordinal);
    public abstract virtual SqlDecimal GetSqlDecimal(SmiEventSink sink, int ordinal);
    public abstract virtual DateTime GetDateTime(SmiEventSink sink, int ordinal);
    public abstract virtual Guid GetGuid(SmiEventSink sink, int ordinal);
}
internal interface Microsoft.SqlServer.Server.ITypedSetters {
    public abstract virtual void SetDBNull(int ordinal);
    public abstract virtual void SetBoolean(int ordinal, bool value);
    public abstract virtual void SetByte(int ordinal, byte value);
    public abstract virtual void SetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual void SetChar(int ordinal, char value);
    public abstract virtual void SetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public abstract virtual void SetInt16(int ordinal, short value);
    public abstract virtual void SetInt32(int ordinal, int value);
    public abstract virtual void SetInt64(int ordinal, long value);
    public abstract virtual void SetFloat(int ordinal, float value);
    public abstract virtual void SetDouble(int ordinal, double value);
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped.  Use setter with offset.")]
public abstract virtual void SetString(int ordinal, string value);
    public abstract virtual void SetString(int ordinal, string value, int offset);
    public abstract virtual void SetDecimal(int ordinal, decimal value);
    public abstract virtual void SetDateTime(int ordinal, DateTime value);
    public abstract virtual void SetGuid(int ordinal, Guid value);
    public abstract virtual void SetSqlBoolean(int ordinal, SqlBoolean value);
    public abstract virtual void SetSqlByte(int ordinal, SqlByte value);
    public abstract virtual void SetSqlInt16(int ordinal, SqlInt16 value);
    public abstract virtual void SetSqlInt32(int ordinal, SqlInt32 value);
    public abstract virtual void SetSqlInt64(int ordinal, SqlInt64 value);
    public abstract virtual void SetSqlSingle(int ordinal, SqlSingle value);
    public abstract virtual void SetSqlDouble(int ordinal, SqlDouble value);
    public abstract virtual void SetSqlMoney(int ordinal, SqlMoney value);
    public abstract virtual void SetSqlDateTime(int ordinal, SqlDateTime value);
    public abstract virtual void SetSqlDecimal(int ordinal, SqlDecimal value);
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped.  Use setter with offset.")]
public abstract virtual void SetSqlString(int ordinal, SqlString value);
    public abstract virtual void SetSqlString(int ordinal, SqlString value, int offset);
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped.  Use setter with offset.")]
public abstract virtual void SetSqlBinary(int ordinal, SqlBinary value);
    public abstract virtual void SetSqlBinary(int ordinal, SqlBinary value, int offset);
    public abstract virtual void SetSqlGuid(int ordinal, SqlGuid value);
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped.  Use setter with offset.")]
public abstract virtual void SetSqlChars(int ordinal, SqlChars value);
    public abstract virtual void SetSqlChars(int ordinal, SqlChars value, int offset);
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped.  Use setter with offset.")]
public abstract virtual void SetSqlBytes(int ordinal, SqlBytes value);
    public abstract virtual void SetSqlBytes(int ordinal, SqlBytes value, int offset);
    public abstract virtual void SetSqlXml(int ordinal, SqlXml value);
}
internal interface Microsoft.SqlServer.Server.ITypedSettersV3 {
    public abstract virtual void SetVariantMetaData(SmiEventSink sink, int ordinal, SmiMetaData metaData);
    public abstract virtual void SetDBNull(SmiEventSink sink, int ordinal);
    public abstract virtual void SetBoolean(SmiEventSink sink, int ordinal, bool value);
    public abstract virtual void SetByte(SmiEventSink sink, int ordinal, byte value);
    public abstract virtual int SetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual void SetBytesLength(SmiEventSink sink, int ordinal, long length);
    public abstract virtual int SetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public abstract virtual void SetCharsLength(SmiEventSink sink, int ordinal, long length);
    public abstract virtual void SetString(SmiEventSink sink, int ordinal, string value, int offset, int length);
    public abstract virtual void SetInt16(SmiEventSink sink, int ordinal, short value);
    public abstract virtual void SetInt32(SmiEventSink sink, int ordinal, int value);
    public abstract virtual void SetInt64(SmiEventSink sink, int ordinal, long value);
    public abstract virtual void SetSingle(SmiEventSink sink, int ordinal, float value);
    public abstract virtual void SetDouble(SmiEventSink sink, int ordinal, double value);
    public abstract virtual void SetSqlDecimal(SmiEventSink sink, int ordinal, SqlDecimal value);
    public abstract virtual void SetDateTime(SmiEventSink sink, int ordinal, DateTime value);
    public abstract virtual void SetGuid(SmiEventSink sink, int ordinal, Guid value);
}
internal class Microsoft.SqlServer.Server.LongNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.SqlServer.Server.MemoryRecordBuffer : SmiRecordBuffer {
    internal MemoryRecordBuffer(SmiMetaData[] metaData);
    public virtual bool IsDBNull(SmiEventSink sink, int ordinal);
    public virtual SmiMetaData GetVariantType(SmiEventSink sink, int ordinal);
    public virtual bool GetBoolean(SmiEventSink sink, int ordinal);
    public virtual byte GetByte(SmiEventSink sink, int ordinal);
    public virtual long GetBytesLength(SmiEventSink sink, int ordinal);
    public virtual int GetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual long GetCharsLength(SmiEventSink sink, int ordinal);
    public virtual int GetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetString(SmiEventSink sink, int ordinal);
    public virtual short GetInt16(SmiEventSink sink, int ordinal);
    public virtual int GetInt32(SmiEventSink sink, int ordinal);
    public virtual long GetInt64(SmiEventSink sink, int ordinal);
    public virtual float GetSingle(SmiEventSink sink, int ordinal);
    public virtual double GetDouble(SmiEventSink sink, int ordinal);
    public virtual SqlDecimal GetSqlDecimal(SmiEventSink sink, int ordinal);
    public virtual DateTime GetDateTime(SmiEventSink sink, int ordinal);
    public virtual Guid GetGuid(SmiEventSink sink, int ordinal);
    public virtual TimeSpan GetTimeSpan(SmiEventSink sink, int ordinal);
    public virtual DateTimeOffset GetDateTimeOffset(SmiEventSink sink, int ordinal);
    public virtual void SetDBNull(SmiEventSink sink, int ordinal);
    public virtual void SetBoolean(SmiEventSink sink, int ordinal, bool value);
    public virtual void SetByte(SmiEventSink sink, int ordinal, byte value);
    public virtual int SetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetBytesLength(SmiEventSink sink, int ordinal, long length);
    public virtual int SetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetCharsLength(SmiEventSink sink, int ordinal, long length);
    public virtual void SetString(SmiEventSink sink, int ordinal, string value, int offset, int length);
    public virtual void SetInt16(SmiEventSink sink, int ordinal, short value);
    public virtual void SetInt32(SmiEventSink sink, int ordinal, int value);
    public virtual void SetInt64(SmiEventSink sink, int ordinal, long value);
    public virtual void SetSingle(SmiEventSink sink, int ordinal, float value);
    public virtual void SetDouble(SmiEventSink sink, int ordinal, double value);
    public virtual void SetSqlDecimal(SmiEventSink sink, int ordinal, SqlDecimal value);
    public virtual void SetDateTime(SmiEventSink sink, int ordinal, DateTime value);
    public virtual void SetGuid(SmiEventSink sink, int ordinal, Guid value);
    public virtual void SetTimeSpan(SmiEventSink sink, int ordinal, TimeSpan value);
    public virtual void SetDateTimeOffset(SmiEventSink sink, int ordinal, DateTimeOffset value);
    public virtual void SetVariantMetaData(SmiEventSink sink, int ordinal, SmiMetaData metaData);
}
internal class Microsoft.SqlServer.Server.MetaDataUtilsSmi : object {
    internal static SqlDbType InvalidSqlDbType;
    internal static long InvalidMaxLength;
    private static MetaDataUtilsSmi();
    internal static bool IsCharOrXmlType(SqlDbType type);
    internal static bool IsUnicodeType(SqlDbType type);
    internal static bool IsAnsiType(SqlDbType type);
    internal static bool IsBinaryType(SqlDbType type);
    internal static bool IsPlpFormat(SmiMetaData metaData);
    internal static ExtendedClrTypeCode DetermineExtendedTypeCodeForUseWithSqlDbType(SqlDbType dbType, bool isMultiValued, object value, Type udtType, ulong smiVersion);
    internal static ExtendedClrTypeCode DetermineExtendedTypeCodeFromType(Type clrType);
    internal static ExtendedClrTypeCode DetermineExtendedTypeCode(object value);
    internal static SqlDbType InferSqlDbTypeFromTypeCode(ExtendedClrTypeCode typeCode);
    internal static SqlDbType InferSqlDbTypeFromType(Type type);
    internal static SqlDbType InferSqlDbTypeFromType_Katmai(Type type);
    internal static bool IsValidForSmiVersion(SmiExtendedMetaData md, ulong smiVersion);
    internal static SqlMetaData SmiExtendedMetaDataToSqlMetaData(SmiExtendedMetaData source);
    internal static SmiExtendedMetaData SqlMetaDataToSmiExtendedMetaData(SqlMetaData source);
    internal static bool IsCompatible(SmiMetaData firstMd, SqlMetaData secondMd);
    internal static long AdjustMaxLength(SqlDbType dbType, long maxLength);
    internal static SmiExtendedMetaData SmiMetaDataFromDataColumn(DataColumn column, DataTable parent);
    internal static SmiExtendedMetaData SmiMetaDataFromSchemaTableRow(DataRow schemaRow);
}
internal class Microsoft.SqlServer.Server.NormalizedSerializer : Serializer {
    internal NormalizedSerializer(Type t);
    public virtual void Serialize(Stream s, object o);
    public virtual object Deserialize(Stream s);
}
internal abstract class Microsoft.SqlServer.Server.Normalizer : object {
    protected bool m_skipNormalize;
    internal int Size { get; }
    internal static Normalizer GetNormalizer(Type t);
    internal abstract virtual void Normalize(FieldInfo fi, object recvr, Stream s);
    internal abstract virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    protected void FlipAllBits(Byte[] b);
    protected object GetValue(FieldInfo fi, object obj);
    protected void SetValue(FieldInfo fi, object recvr, object value);
    internal abstract virtual int get_Size();
}
internal class Microsoft.SqlServer.Server.SByteNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.SqlServer.Server.SerializationHelperSql9 : object {
    internal static int SizeInBytes(Type t);
    internal static int SizeInBytes(object instance);
    internal static void Serialize(Stream s, object instance);
    internal static object Deserialize(Stream s, Type resultType);
    internal static int GetUdtMaxLength(Type t);
    internal static SqlUserDefinedTypeAttribute GetUdtAttribute(Type t);
}
internal abstract class Microsoft.SqlServer.Server.Serializer : object {
    protected Type m_type;
    protected Serializer(Type t);
    public abstract virtual object Deserialize(Stream s);
    public abstract virtual void Serialize(Stream s, object o);
}
internal class Microsoft.SqlServer.Server.ShortNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal abstract class Microsoft.SqlServer.Server.SmiConnection : object {
    internal abstract virtual string GetCurrentDatabase(SmiEventSink eventSink);
    internal abstract virtual void SetCurrentDatabase(string databaseName, SmiEventSink eventSink);
    public virtual void Dispose();
    public virtual void Close(SmiEventSink eventSink);
    internal abstract virtual void BeginTransaction(string name, IsolationLevel level, SmiEventSink eventSink);
    internal abstract virtual void CommitTransaction(long transactionId, SmiEventSink eventSink);
    internal abstract virtual void CreateTransactionSavePoint(long transactionId, string name, SmiEventSink eventSink);
    internal abstract virtual Byte[] GetDTCAddress(SmiEventSink eventSink);
    internal abstract virtual void EnlistTransaction(Byte[] token, SmiEventSink eventSink);
    internal abstract virtual Byte[] PromoteTransaction(long transactionId, SmiEventSink eventSink);
    internal abstract virtual void RollbackTransaction(long transactionId, string savePointName, SmiEventSink eventSink);
}
internal abstract class Microsoft.SqlServer.Server.SmiContext : object {
    internal SmiConnection ContextConnection { get; }
    internal long ContextTransactionId { get; }
    internal Transaction ContextTransaction { get; }
    internal bool HasContextPipe { get; }
    internal WindowsIdentity WindowsIdentity { get; }
    [CompilerGeneratedAttribute]
internal abstract virtual void add_OutOfScope(EventHandler value);
    [CompilerGeneratedAttribute]
internal abstract virtual void remove_OutOfScope(EventHandler value);
    internal abstract virtual SmiConnection get_ContextConnection();
    internal abstract virtual long get_ContextTransactionId();
    internal abstract virtual Transaction get_ContextTransaction();
    internal abstract virtual bool get_HasContextPipe();
    internal abstract virtual WindowsIdentity get_WindowsIdentity();
    internal abstract virtual SmiRecordBuffer CreateRecordBuffer(SmiExtendedMetaData[] columnMetaData, SmiEventSink eventSink);
    internal abstract virtual SmiRequestExecutor CreateRequestExecutor(string commandText, CommandType commandType, SmiParameterMetaData[] parameterMetaData, SmiEventSink eventSink);
    internal abstract virtual object GetContextValue(int key);
    internal abstract virtual void GetTriggerInfo(SmiEventSink eventSink, Boolean[]& columnsUpdated, TriggerAction& action, SqlXml& eventInstanceData);
    internal abstract virtual void SendMessageToPipe(string message, SmiEventSink eventSink);
    internal abstract virtual void SendResultsStartToPipe(SmiRecordBuffer recordBuffer, SmiEventSink eventSink);
    internal abstract virtual void SendResultsRowToPipe(SmiRecordBuffer recordBuffer, SmiEventSink eventSink);
    internal abstract virtual void SendResultsEndToPipe(SmiRecordBuffer recordBuffer, SmiEventSink eventSink);
    internal abstract virtual void SetContextValue(int key, object value);
    internal virtual SmiStream GetScratchStream(SmiEventSink sink);
}
internal class Microsoft.SqlServer.Server.SmiContextFactory : object {
    public static SmiContextFactory Instance;
    internal static ulong YukonVersion;
    internal static ulong KatmaiVersion;
    internal static ulong LatestVersion;
    internal ulong NegotiatedSmiVersion { get; }
    internal string ServerVersion { get; }
    private static SmiContextFactory();
    internal ulong get_NegotiatedSmiVersion();
    internal string get_ServerVersion();
    internal SmiContext GetCurrentContext();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Server.SmiDefaultFieldsProperty : SmiMetaDataProperty {
    internal bool Item { get; }
    internal SmiDefaultFieldsProperty(IList`1<bool> defaultFields);
    internal bool get_Item(int ordinal);
    [ConditionalAttribute("DEBUG")]
internal void CheckCount(int countToMatch);
    internal virtual string TraceString();
}
internal abstract class Microsoft.SqlServer.Server.SmiEventSink : object {
    internal abstract virtual void BatchCompleted();
    internal virtual void ParameterAvailable(SmiParameterMetaData metaData, SmiTypedGetterSetter paramValue, int ordinal);
    internal abstract virtual void DefaultDatabaseChanged(string databaseName);
    internal abstract virtual void MessagePosted(int number, byte state, byte errorClass, string server, string message, string procedure, int lineNumber);
    internal abstract virtual void MetaDataAvailable(SmiQueryMetaData[] metaData, bool nextEventIsRow);
    internal virtual void RowAvailable(SmiTypedGetterSetter rowData);
    internal abstract virtual void StatementCompleted(int rowsAffected);
    internal abstract virtual void TransactionCommitted(long transactionId);
    internal abstract virtual void TransactionDefected(long transactionId);
    internal abstract virtual void TransactionEnlisted(long transactionId);
    internal abstract virtual void TransactionEnded(long transactionId);
    internal abstract virtual void TransactionRolledBack(long transactionId);
    internal abstract virtual void TransactionStarted(long transactionId);
    internal virtual void ParametersAvailable(SmiParameterMetaData[] metaData, ITypedGettersV3 paramValues);
    internal virtual void RowAvailable(ITypedGettersV3 rowData);
    internal virtual void RowAvailable(ITypedGetters rowData);
}
internal class Microsoft.SqlServer.Server.SmiEventSink_Default : SmiEventSink {
    internal bool HasMessages { get; }
    internal string ServerVersion { get; }
    internal SmiEventSink Parent { get; internal set; }
    internal SmiEventSink_Default(SmiEventSink parent);
    internal bool get_HasMessages();
    internal virtual string get_ServerVersion();
    internal SmiEventSink get_Parent();
    internal void set_Parent(SmiEventSink value);
    protected virtual void DispatchMessages(bool ignoreNonFatalMessages);
    protected SqlException ProcessMessages(bool ignoreWarnings, bool ignoreNonFatalMessages);
    internal void CleanMessages();
    internal void ProcessMessagesAndThrow();
    internal void ProcessMessagesAndThrow(bool ignoreNonFatalMessages);
    internal virtual void BatchCompleted();
    internal virtual void ParametersAvailable(SmiParameterMetaData[] metaData, ITypedGettersV3 paramValues);
    internal virtual void ParameterAvailable(SmiParameterMetaData metaData, SmiTypedGetterSetter paramValue, int ordinal);
    internal virtual void DefaultDatabaseChanged(string databaseName);
    internal virtual void MessagePosted(int number, byte state, byte errorClass, string server, string message, string procedure, int lineNumber);
    internal virtual void MetaDataAvailable(SmiQueryMetaData[] metaData, bool nextEventIsRow);
    internal virtual void RowAvailable(ITypedGetters rowData);
    internal virtual void RowAvailable(ITypedGettersV3 rowData);
    internal virtual void StatementCompleted(int rowsAffected);
    internal virtual void TransactionCommitted(long transactionId);
    internal virtual void TransactionDefected(long transactionId);
    internal virtual void TransactionEnlisted(long transactionId);
    internal virtual void TransactionEnded(long transactionId);
    internal virtual void TransactionRolledBack(long transactionId);
    internal virtual void TransactionStarted(long transactionId);
}
internal class Microsoft.SqlServer.Server.SmiEventSink_DeferedProcessing : SmiEventSink_Default {
    internal SmiEventSink_DeferedProcessing(SmiEventSink parent);
    protected virtual void DispatchMessages(bool ignoreNonFatalMessages);
}
internal abstract class Microsoft.SqlServer.Server.SmiEventStream : object {
    internal bool HasEvents { get; }
    internal abstract virtual bool get_HasEvents();
    internal abstract virtual void Close(SmiEventSink sink);
    public virtual void Dispose();
    internal abstract virtual void ProcessEvent(SmiEventSink sink);
}
internal enum Microsoft.SqlServer.Server.SmiExecuteType : Enum {
    public int value__;
    public static SmiExecuteType NonQuery;
    public static SmiExecuteType Reader;
    public static SmiExecuteType ToPipe;
}
internal class Microsoft.SqlServer.Server.SmiExtendedMetaData : SmiMetaData {
    internal string Name { get; }
    internal string TypeSpecificNamePart1 { get; }
    internal string TypeSpecificNamePart2 { get; }
    internal string TypeSpecificNamePart3 { get; }
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped. Use ctor without columns param.")]
internal SmiExtendedMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, SmiMetaData[] columns, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3);
    internal SmiExtendedMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3);
    internal SmiExtendedMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3);
    internal SmiExtendedMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string udtAssemblyQualifiedName, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3);
    internal string get_Name();
    internal string get_TypeSpecificNamePart1();
    internal string get_TypeSpecificNamePart2();
    internal string get_TypeSpecificNamePart3();
    internal virtual string TraceString(int indent);
}
internal class Microsoft.SqlServer.Server.SmiGettersStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal SmiGettersStream(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal abstract class Microsoft.SqlServer.Server.SmiLink : object {
    internal static ulong InterfaceVersion;
    internal abstract virtual ulong NegotiateVersion(ulong requestedVersion);
    internal abstract virtual object GetCurrentContext(SmiEventSink eventSink);
}
internal class Microsoft.SqlServer.Server.SmiMetaData : object {
    internal static long UnlimitedMaxLengthIndicator;
    internal static long MaxUnicodeCharacters;
    internal static long MaxANSICharacters;
    internal static long MaxBinaryLength;
    internal static int MinPrecision;
    internal static int MinScale;
    internal static int MaxTimeScale;
    internal static DateTime MaxSmallDateTime;
    internal static DateTime MinSmallDateTime;
    internal static SqlMoney MaxSmallMoney;
    internal static SqlMoney MinSmallMoney;
    internal static SqlCompareOptions DefaultStringCompareOptions;
    internal static long MaxNameLength;
    internal static SmiMetaData DefaultBigInt;
    internal static SmiMetaData DefaultBinary;
    internal static SmiMetaData DefaultBit;
    internal static SmiMetaData DefaultChar_NoCollation;
    internal static SmiMetaData DefaultDateTime;
    internal static SmiMetaData DefaultDecimal;
    internal static SmiMetaData DefaultFloat;
    internal static SmiMetaData DefaultImage;
    internal static SmiMetaData DefaultInt;
    internal static SmiMetaData DefaultMoney;
    internal static SmiMetaData DefaultNChar_NoCollation;
    internal static SmiMetaData DefaultNText_NoCollation;
    internal static SmiMetaData DefaultNVarChar_NoCollation;
    internal static SmiMetaData DefaultReal;
    internal static SmiMetaData DefaultUniqueIdentifier;
    internal static SmiMetaData DefaultSmallDateTime;
    internal static SmiMetaData DefaultSmallInt;
    internal static SmiMetaData DefaultSmallMoney;
    internal static SmiMetaData DefaultText_NoCollation;
    internal static SmiMetaData DefaultTimestamp;
    internal static SmiMetaData DefaultTinyInt;
    internal static SmiMetaData DefaultVarBinary;
    internal static SmiMetaData DefaultVarChar_NoCollation;
    internal static SmiMetaData DefaultVariant;
    internal static SmiMetaData DefaultXml;
    internal static SmiMetaData DefaultUdt_NoType;
    internal static SmiMetaData DefaultStructured;
    internal static SmiMetaData DefaultDate;
    internal static SmiMetaData DefaultTime;
    internal static SmiMetaData DefaultDateTime2;
    internal static SmiMetaData DefaultDateTimeOffset;
    internal static SmiMetaData DefaultChar { get; }
    internal static SmiMetaData DefaultNChar { get; }
    internal static SmiMetaData DefaultNText { get; }
    internal static SmiMetaData DefaultNVarChar { get; }
    internal static SmiMetaData DefaultText { get; }
    internal static SmiMetaData DefaultVarChar { get; }
    internal SqlCompareOptions CompareOptions { get; }
    internal long LocaleId { get; }
    internal long MaxLength { get; }
    internal byte Precision { get; }
    internal byte Scale { get; }
    internal SqlDbType SqlDbType { get; }
    internal Type Type { get; }
    internal Type TypeWithoutThrowing { get; }
    internal string TypeName { get; }
    internal string AssemblyQualifiedName { get; }
    internal bool IsMultiValued { get; }
    internal IList`1<SmiExtendedMetaData> FieldMetaData { get; }
    internal SmiMetaDataPropertyCollection ExtendedProperties { get; }
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped. Use ctor without columns param.")]
internal SmiMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, SmiMetaData[] columns);
    internal SmiMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType);
    internal SmiMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldTypes, SmiMetaDataPropertyCollection extendedProperties);
    internal SmiMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string udtAssemblyQualifiedName, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldTypes, SmiMetaDataPropertyCollection extendedProperties);
    private static SmiMetaData();
    internal static SmiMetaData get_DefaultChar();
    internal static SmiMetaData get_DefaultNChar();
    internal static SmiMetaData get_DefaultNText();
    internal static SmiMetaData get_DefaultNVarChar();
    internal static SmiMetaData get_DefaultText();
    internal static SmiMetaData get_DefaultVarChar();
    internal bool IsValidMaxLengthForCtorGivenType(SqlDbType dbType, long maxLength);
    internal SqlCompareOptions get_CompareOptions();
    internal long get_LocaleId();
    internal long get_MaxLength();
    internal byte get_Precision();
    internal byte get_Scale();
    internal SqlDbType get_SqlDbType();
    internal Type get_Type();
    internal Type get_TypeWithoutThrowing();
    internal string get_TypeName();
    internal string get_AssemblyQualifiedName();
    internal bool get_IsMultiValued();
    internal IList`1<SmiExtendedMetaData> get_FieldMetaData();
    internal SmiMetaDataPropertyCollection get_ExtendedProperties();
    internal static bool IsSupportedDbType(SqlDbType dbType);
    internal static SmiMetaData GetDefaultForType(SqlDbType dbType);
    internal string TraceString();
    internal virtual string TraceString(int indent);
}
internal abstract class Microsoft.SqlServer.Server.SmiMetaDataProperty : object {
    internal abstract virtual string TraceString();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Server.SmiMetaDataPropertyCollection : object {
    internal static SmiMetaDataPropertyCollection EmptyInstance;
    internal SmiMetaDataProperty Item { get; internal set; }
    internal bool IsReadOnly { get; }
    internal IEnumerable`1<SmiMetaDataProperty> Values { get; }
    private static SmiMetaDataPropertyCollection();
    internal SmiMetaDataProperty get_Item(SmiPropertySelector key);
    internal void set_Item(SmiPropertySelector key, SmiMetaDataProperty value);
    internal bool get_IsReadOnly();
    internal IEnumerable`1<SmiMetaDataProperty> get_Values();
    internal void SetReadOnly();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Server.SmiOrderProperty : SmiMetaDataProperty {
    internal SmiColumnOrder Item { get; }
    internal SmiOrderProperty(IList`1<SmiColumnOrder> columnOrders);
    internal SmiColumnOrder get_Item(int ordinal);
    [ConditionalAttribute("DEBUG")]
internal void CheckCount(int countToMatch);
    internal virtual string TraceString();
}
internal class Microsoft.SqlServer.Server.SmiParameterMetaData : SmiExtendedMetaData {
    internal ParameterDirection Direction { get; }
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped. Use ctor without columns param.")]
internal SmiParameterMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, SmiMetaData[] columns, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, ParameterDirection direction);
    internal SmiParameterMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, ParameterDirection direction);
    internal SmiParameterMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, ParameterDirection direction);
    internal SmiParameterMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string udtAssemblyQualifiedName, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, ParameterDirection direction);
    internal ParameterDirection get_Direction();
    internal virtual string TraceString(int indent);
}
internal enum Microsoft.SqlServer.Server.SmiPropertySelector : Enum {
    public int value__;
    public static SmiPropertySelector DefaultFields;
    public static SmiPropertySelector SortOrder;
    public static SmiPropertySelector UniqueKey;
}
internal class Microsoft.SqlServer.Server.SmiQueryMetaData : SmiStorageMetaData {
    internal bool IsReadOnly { get; }
    internal SqlBoolean IsExpression { get; }
    internal SqlBoolean IsAliased { get; }
    internal SqlBoolean IsHidden { get; }
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped. Use ctor without columns param.")]
internal SmiQueryMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, SmiMetaData[] columns, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity, bool isReadOnly, SqlBoolean isExpression, SqlBoolean isAliased, SqlBoolean isHidden);
    internal SmiQueryMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity, bool isReadOnly, SqlBoolean isExpression, SqlBoolean isAliased, SqlBoolean isHidden);
    internal SmiQueryMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity, bool isReadOnly, SqlBoolean isExpression, SqlBoolean isAliased, SqlBoolean isHidden);
    internal SmiQueryMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string udtAssemblyQualifiedName, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity, bool isColumnSet, bool isReadOnly, SqlBoolean isExpression, SqlBoolean isAliased, SqlBoolean isHidden);
    internal bool get_IsReadOnly();
    internal SqlBoolean get_IsExpression();
    internal SqlBoolean get_IsAliased();
    internal SqlBoolean get_IsHidden();
    internal virtual string TraceString(int indent);
}
internal abstract class Microsoft.SqlServer.Server.SmiRecordBuffer : SmiTypedGetterSetter {
    internal bool CanGet { get; }
    internal bool CanSet { get; }
    public virtual void Close(SmiEventSink eventSink);
    internal virtual bool get_CanGet();
    internal virtual bool get_CanSet();
    public virtual void Dispose();
    public virtual bool IsDBNull(int ordinal);
    public virtual SqlDbType GetVariantType(int ordinal);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual SqlBoolean GetSqlBoolean(int ordinal);
    public virtual SqlByte GetSqlByte(int ordinal);
    public virtual SqlInt16 GetSqlInt16(int ordinal);
    public virtual SqlInt32 GetSqlInt32(int ordinal);
    public virtual SqlInt64 GetSqlInt64(int ordinal);
    public virtual SqlSingle GetSqlSingle(int ordinal);
    public virtual SqlDouble GetSqlDouble(int ordinal);
    public virtual SqlMoney GetSqlMoney(int ordinal);
    public virtual SqlDateTime GetSqlDateTime(int ordinal);
    public virtual SqlDecimal GetSqlDecimal(int ordinal);
    public virtual SqlString GetSqlString(int ordinal);
    public virtual SqlBinary GetSqlBinary(int ordinal);
    public virtual SqlGuid GetSqlGuid(int ordinal);
    public virtual SqlChars GetSqlChars(int ordinal);
    public virtual SqlBytes GetSqlBytes(int ordinal);
    public virtual SqlXml GetSqlXml(int ordinal);
    public virtual SqlXml GetSqlXmlRef(int ordinal);
    public virtual SqlBytes GetSqlBytesRef(int ordinal);
    public virtual SqlChars GetSqlCharsRef(int ordinal);
    public virtual void SetDBNull(int ordinal);
    public virtual void SetBoolean(int ordinal, bool value);
    public virtual void SetByte(int ordinal, byte value);
    public virtual void SetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetChar(int ordinal, char value);
    public virtual void SetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetInt16(int ordinal, short value);
    public virtual void SetInt32(int ordinal, int value);
    public virtual void SetInt64(int ordinal, long value);
    public virtual void SetFloat(int ordinal, float value);
    public virtual void SetDouble(int ordinal, double value);
    public virtual void SetString(int ordinal, string value);
    public virtual void SetString(int ordinal, string value, int offset);
    public virtual void SetDecimal(int ordinal, decimal value);
    public virtual void SetDateTime(int ordinal, DateTime value);
    public virtual void SetGuid(int ordinal, Guid value);
    public virtual void SetSqlBoolean(int ordinal, SqlBoolean value);
    public virtual void SetSqlByte(int ordinal, SqlByte value);
    public virtual void SetSqlInt16(int ordinal, SqlInt16 value);
    public virtual void SetSqlInt32(int ordinal, SqlInt32 value);
    public virtual void SetSqlInt64(int ordinal, SqlInt64 value);
    public virtual void SetSqlSingle(int ordinal, SqlSingle value);
    public virtual void SetSqlDouble(int ordinal, SqlDouble value);
    public virtual void SetSqlMoney(int ordinal, SqlMoney value);
    public virtual void SetSqlDateTime(int ordinal, SqlDateTime value);
    public virtual void SetSqlDecimal(int ordinal, SqlDecimal value);
    public virtual void SetSqlString(int ordinal, SqlString value);
    public virtual void SetSqlString(int ordinal, SqlString value, int offset);
    public virtual void SetSqlBinary(int ordinal, SqlBinary value);
    public virtual void SetSqlBinary(int ordinal, SqlBinary value, int offset);
    public virtual void SetSqlGuid(int ordinal, SqlGuid value);
    public virtual void SetSqlChars(int ordinal, SqlChars value);
    public virtual void SetSqlChars(int ordinal, SqlChars value, int offset);
    public virtual void SetSqlBytes(int ordinal, SqlBytes value);
    public virtual void SetSqlBytes(int ordinal, SqlBytes value, int offset);
    public virtual void SetSqlXml(int ordinal, SqlXml value);
}
internal abstract class Microsoft.SqlServer.Server.SmiRequestExecutor : SmiTypedGetterSetter {
    internal bool CanGet { get; }
    internal bool CanSet { get; }
    public int Count { get; }
    public virtual void Close(SmiEventSink eventSink);
    internal virtual SmiEventStream Execute(SmiConnection connection, long transactionId, Transaction associatedTransaction, CommandBehavior behavior, SmiExecuteType executeType);
    internal virtual bool get_CanGet();
    internal virtual bool get_CanSet();
    internal abstract virtual void SetDefault(int ordinal);
    internal virtual SmiEventStream Execute(SmiConnection connection, long transactionId, CommandBehavior behavior, SmiExecuteType executeType);
    public virtual void Dispose();
    internal virtual bool IsSetAsDefault(int ordinal);
    public virtual int get_Count();
    public virtual SmiParameterMetaData GetMetaData(int ordinal);
    public virtual bool IsDBNull(int ordinal);
    public virtual SqlDbType GetVariantType(int ordinal);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual SqlBoolean GetSqlBoolean(int ordinal);
    public virtual SqlByte GetSqlByte(int ordinal);
    public virtual SqlInt16 GetSqlInt16(int ordinal);
    public virtual SqlInt32 GetSqlInt32(int ordinal);
    public virtual SqlInt64 GetSqlInt64(int ordinal);
    public virtual SqlSingle GetSqlSingle(int ordinal);
    public virtual SqlDouble GetSqlDouble(int ordinal);
    public virtual SqlMoney GetSqlMoney(int ordinal);
    public virtual SqlDateTime GetSqlDateTime(int ordinal);
    public virtual SqlDecimal GetSqlDecimal(int ordinal);
    public virtual SqlString GetSqlString(int ordinal);
    public virtual SqlBinary GetSqlBinary(int ordinal);
    public virtual SqlGuid GetSqlGuid(int ordinal);
    public virtual SqlChars GetSqlChars(int ordinal);
    public virtual SqlBytes GetSqlBytes(int ordinal);
    public virtual SqlXml GetSqlXml(int ordinal);
    public virtual SqlXml GetSqlXmlRef(int ordinal);
    public virtual SqlBytes GetSqlBytesRef(int ordinal);
    public virtual SqlChars GetSqlCharsRef(int ordinal);
    public virtual void SetDBNull(int ordinal);
    public virtual void SetBoolean(int ordinal, bool value);
    public virtual void SetByte(int ordinal, byte value);
    public virtual void SetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetChar(int ordinal, char value);
    public virtual void SetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetInt16(int ordinal, short value);
    public virtual void SetInt32(int ordinal, int value);
    public virtual void SetInt64(int ordinal, long value);
    public virtual void SetFloat(int ordinal, float value);
    public virtual void SetDouble(int ordinal, double value);
    public virtual void SetString(int ordinal, string value);
    public virtual void SetString(int ordinal, string value, int offset);
    public virtual void SetDecimal(int ordinal, decimal value);
    public virtual void SetDateTime(int ordinal, DateTime value);
    public virtual void SetGuid(int ordinal, Guid value);
    public virtual void SetSqlBoolean(int ordinal, SqlBoolean value);
    public virtual void SetSqlByte(int ordinal, SqlByte value);
    public virtual void SetSqlInt16(int ordinal, SqlInt16 value);
    public virtual void SetSqlInt32(int ordinal, SqlInt32 value);
    public virtual void SetSqlInt64(int ordinal, SqlInt64 value);
    public virtual void SetSqlSingle(int ordinal, SqlSingle value);
    public virtual void SetSqlDouble(int ordinal, SqlDouble value);
    public virtual void SetSqlMoney(int ordinal, SqlMoney value);
    public virtual void SetSqlDateTime(int ordinal, SqlDateTime value);
    public virtual void SetSqlDecimal(int ordinal, SqlDecimal value);
    public virtual void SetSqlString(int ordinal, SqlString value);
    public virtual void SetSqlString(int ordinal, SqlString value, int offset);
    public virtual void SetSqlBinary(int ordinal, SqlBinary value);
    public virtual void SetSqlBinary(int ordinal, SqlBinary value, int offset);
    public virtual void SetSqlGuid(int ordinal, SqlGuid value);
    public virtual void SetSqlChars(int ordinal, SqlChars value);
    public virtual void SetSqlChars(int ordinal, SqlChars value, int offset);
    public virtual void SetSqlBytes(int ordinal, SqlBytes value);
    public virtual void SetSqlBytes(int ordinal, SqlBytes value, int offset);
    public virtual void SetSqlXml(int ordinal, SqlXml value);
}
internal class Microsoft.SqlServer.Server.SmiSettersStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal SmiSettersStream(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class Microsoft.SqlServer.Server.SmiStorageMetaData : SmiExtendedMetaData {
    internal bool AllowsDBNull { get; }
    internal string ServerName { get; }
    internal string CatalogName { get; }
    internal string SchemaName { get; }
    internal string TableName { get; }
    internal string ColumnName { get; }
    internal SqlBoolean IsKey { get; }
    internal bool IsIdentity { get; }
    internal bool IsColumnSet { get; }
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped. Use ctor without columns param.")]
internal SmiStorageMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, SmiMetaData[] columns, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity);
    internal SmiStorageMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity);
    internal SmiStorageMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity);
    internal SmiStorageMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string udtAssemblyQualifiedName, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity, bool isColumnSet);
    internal bool get_AllowsDBNull();
    internal string get_ServerName();
    internal string get_CatalogName();
    internal string get_SchemaName();
    internal string get_TableName();
    internal string get_ColumnName();
    internal SqlBoolean get_IsKey();
    internal bool get_IsIdentity();
    internal bool get_IsColumnSet();
    internal virtual string TraceString(int indent);
}
internal abstract class Microsoft.SqlServer.Server.SmiStream : object {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public abstract virtual bool get_CanRead();
    public abstract virtual bool get_CanSeek();
    public abstract virtual bool get_CanWrite();
    public abstract virtual long GetLength(SmiEventSink sink);
    public abstract virtual long GetPosition(SmiEventSink sink);
    public abstract virtual void SetPosition(SmiEventSink sink, long position);
    public abstract virtual void Flush(SmiEventSink sink);
    public abstract virtual long Seek(SmiEventSink sink, long offset, SeekOrigin origin);
    public abstract virtual void SetLength(SmiEventSink sink, long value);
    public abstract virtual int Read(SmiEventSink sink, Byte[] buffer, int offset, int count);
    public abstract virtual void Write(SmiEventSink sink, Byte[] buffer, int offset, int count);
    public abstract virtual int Read(SmiEventSink sink, Char[] buffer, int offset, int count);
    public abstract virtual void Write(SmiEventSink sink, Char[] buffer, int offset, int count);
}
internal abstract class Microsoft.SqlServer.Server.SmiTypedGetterSetter : object {
    internal bool CanGet { get; }
    internal bool CanSet { get; }
    internal abstract virtual bool get_CanGet();
    internal abstract virtual bool get_CanSet();
    public virtual bool IsDBNull(SmiEventSink sink, int ordinal);
    public virtual SmiMetaData GetVariantType(SmiEventSink sink, int ordinal);
    public virtual bool GetBoolean(SmiEventSink sink, int ordinal);
    public virtual byte GetByte(SmiEventSink sink, int ordinal);
    public virtual long GetBytesLength(SmiEventSink sink, int ordinal);
    public virtual int GetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual long GetCharsLength(SmiEventSink sink, int ordinal);
    public virtual int GetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetString(SmiEventSink sink, int ordinal);
    public virtual short GetInt16(SmiEventSink sink, int ordinal);
    public virtual int GetInt32(SmiEventSink sink, int ordinal);
    public virtual long GetInt64(SmiEventSink sink, int ordinal);
    public virtual float GetSingle(SmiEventSink sink, int ordinal);
    public virtual double GetDouble(SmiEventSink sink, int ordinal);
    public virtual SqlDecimal GetSqlDecimal(SmiEventSink sink, int ordinal);
    public virtual DateTime GetDateTime(SmiEventSink sink, int ordinal);
    public virtual Guid GetGuid(SmiEventSink sink, int ordinal);
    public virtual TimeSpan GetTimeSpan(SmiEventSink sink, int ordinal);
    public virtual DateTimeOffset GetDateTimeOffset(SmiEventSink sink, int ordinal);
    internal virtual SmiTypedGetterSetter GetTypedGetterSetter(SmiEventSink sink, int ordinal);
    internal virtual bool NextElement(SmiEventSink sink);
    public virtual void SetDBNull(SmiEventSink sink, int ordinal);
    public virtual void SetBoolean(SmiEventSink sink, int ordinal, bool value);
    public virtual void SetByte(SmiEventSink sink, int ordinal, byte value);
    public virtual int SetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetBytesLength(SmiEventSink sink, int ordinal, long length);
    public virtual int SetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetCharsLength(SmiEventSink sink, int ordinal, long length);
    public virtual void SetString(SmiEventSink sink, int ordinal, string value, int offset, int length);
    public virtual void SetInt16(SmiEventSink sink, int ordinal, short value);
    public virtual void SetInt32(SmiEventSink sink, int ordinal, int value);
    public virtual void SetInt64(SmiEventSink sink, int ordinal, long value);
    public virtual void SetSingle(SmiEventSink sink, int ordinal, float value);
    public virtual void SetDouble(SmiEventSink sink, int ordinal, double value);
    public virtual void SetSqlDecimal(SmiEventSink sink, int ordinal, SqlDecimal value);
    public virtual void SetDateTime(SmiEventSink sink, int ordinal, DateTime value);
    public virtual void SetGuid(SmiEventSink sink, int ordinal, Guid value);
    public virtual void SetTimeSpan(SmiEventSink sink, int ordinal, TimeSpan value);
    public virtual void SetDateTimeOffset(SmiEventSink sink, int ordinal, DateTimeOffset value);
    public virtual void SetVariantMetaData(SmiEventSink sink, int ordinal, SmiMetaData metaData);
    internal virtual void NewElement(SmiEventSink sink);
    internal virtual void EndElements(SmiEventSink sink);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Server.SmiUniqueKeyProperty : SmiMetaDataProperty {
    internal bool Item { get; }
    internal SmiUniqueKeyProperty(IList`1<bool> columnIsKey);
    internal bool get_Item(int ordinal);
    [ConditionalAttribute("DEBUG")]
internal void CheckCount(int countToMatch);
    internal virtual string TraceString();
}
internal class Microsoft.SqlServer.Server.SmiXetterAccessMap : object {
    private static SmiXetterAccessMap();
    internal static bool IsGetterAccessValid(SmiMetaData metaData, SmiXetterTypeCode xetterType);
    internal static bool IsSetterAccessValid(SmiMetaData metaData, SmiXetterTypeCode xetterType);
}
internal enum Microsoft.SqlServer.Server.SmiXetterTypeCode : Enum {
    public int value__;
    public static SmiXetterTypeCode XetBoolean;
    public static SmiXetterTypeCode XetByte;
    public static SmiXetterTypeCode XetBytes;
    public static SmiXetterTypeCode XetChars;
    public static SmiXetterTypeCode XetString;
    public static SmiXetterTypeCode XetInt16;
    public static SmiXetterTypeCode XetInt32;
    public static SmiXetterTypeCode XetInt64;
    public static SmiXetterTypeCode XetSingle;
    public static SmiXetterTypeCode XetDouble;
    public static SmiXetterTypeCode XetSqlDecimal;
    public static SmiXetterTypeCode XetDateTime;
    public static SmiXetterTypeCode XetGuid;
    public static SmiXetterTypeCode GetVariantMetaData;
    public static SmiXetterTypeCode GetXet;
    public static SmiXetterTypeCode XetTime;
    public static SmiXetterTypeCode XetTimeSpan;
    public static SmiXetterTypeCode XetDateTimeOffset;
}
internal class Microsoft.SqlServer.Server.SqlClientWrapperSmiStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal SqlClientWrapperSmiStream(SmiEventSink_Default sink, SmiStream stream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class Microsoft.SqlServer.Server.SqlClientWrapperSmiStreamChars : SqlStreamChars {
    public bool IsNull { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal SqlClientWrapperSmiStreamChars(SmiEventSink_Default sink, SmiStream stream);
    public virtual bool get_IsNull();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Char[] buffer, int offset, int count);
    public virtual void Write(Char[] buffer, int offset, int count);
    internal int Read(Byte[] buffer, int offset, int count);
    internal void Write(Byte[] buffer, int offset, int count);
}
public class Microsoft.SqlServer.Server.SqlContext : object {
    public static bool IsAvailable { get; }
    public static SqlPipe Pipe { get; }
    public static SqlTriggerContext TriggerContext { get; }
    public static WindowsIdentity WindowsIdentity { get; }
    public static bool get_IsAvailable();
    public static SqlPipe get_Pipe();
    public static SqlTriggerContext get_TriggerContext();
    public static WindowsIdentity get_WindowsIdentity();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Server.SqlDataRecord : object {
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    internal SmiRecordBuffer RecordBuffer { get; }
    internal SmiContext RecordContext { get; }
    public SqlDataRecord(SqlMetaData[] metaData);
    internal SqlDataRecord(SmiRecordBuffer recordBuffer, SmiExtendedMetaData[] metaData);
    private static SqlDataRecord();
    public virtual int get_FieldCount();
    public virtual string GetName(int ordinal);
    public virtual string GetDataTypeName(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual int GetOrdinal(string name);
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual DateTimeOffset GetDateTimeOffset(int ordinal);
    public virtual TimeSpan GetTimeSpan(int ordinal);
    [EditorBrowsableAttribute("1")]
private sealed virtual override IDataReader System.Data.IDataRecord.GetData(int ordinal);
    public virtual bool IsDBNull(int ordinal);
    public virtual SqlMetaData GetSqlMetaData(int ordinal);
    public virtual Type GetSqlFieldType(int ordinal);
    public virtual object GetSqlValue(int ordinal);
    public virtual int GetSqlValues(Object[] values);
    public virtual SqlBinary GetSqlBinary(int ordinal);
    public virtual SqlBytes GetSqlBytes(int ordinal);
    public virtual SqlXml GetSqlXml(int ordinal);
    public virtual SqlBoolean GetSqlBoolean(int ordinal);
    public virtual SqlByte GetSqlByte(int ordinal);
    public virtual SqlChars GetSqlChars(int ordinal);
    public virtual SqlInt16 GetSqlInt16(int ordinal);
    public virtual SqlInt32 GetSqlInt32(int ordinal);
    public virtual SqlInt64 GetSqlInt64(int ordinal);
    public virtual SqlSingle GetSqlSingle(int ordinal);
    public virtual SqlDouble GetSqlDouble(int ordinal);
    public virtual SqlMoney GetSqlMoney(int ordinal);
    public virtual SqlDateTime GetSqlDateTime(int ordinal);
    public virtual SqlDecimal GetSqlDecimal(int ordinal);
    public virtual SqlString GetSqlString(int ordinal);
    public virtual SqlGuid GetSqlGuid(int ordinal);
    public virtual int SetValues(Object[] values);
    public virtual void SetValue(int ordinal, object value);
    public virtual void SetBoolean(int ordinal, bool value);
    public virtual void SetByte(int ordinal, byte value);
    public virtual void SetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetChar(int ordinal, char value);
    public virtual void SetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetInt16(int ordinal, short value);
    public virtual void SetInt32(int ordinal, int value);
    public virtual void SetInt64(int ordinal, long value);
    public virtual void SetFloat(int ordinal, float value);
    public virtual void SetDouble(int ordinal, double value);
    public virtual void SetString(int ordinal, string value);
    public virtual void SetDecimal(int ordinal, decimal value);
    public virtual void SetDateTime(int ordinal, DateTime value);
    public virtual void SetTimeSpan(int ordinal, TimeSpan value);
    public virtual void SetDateTimeOffset(int ordinal, DateTimeOffset value);
    public virtual void SetDBNull(int ordinal);
    public virtual void SetGuid(int ordinal, Guid value);
    public virtual void SetSqlBoolean(int ordinal, SqlBoolean value);
    public virtual void SetSqlByte(int ordinal, SqlByte value);
    public virtual void SetSqlInt16(int ordinal, SqlInt16 value);
    public virtual void SetSqlInt32(int ordinal, SqlInt32 value);
    public virtual void SetSqlInt64(int ordinal, SqlInt64 value);
    public virtual void SetSqlSingle(int ordinal, SqlSingle value);
    public virtual void SetSqlDouble(int ordinal, SqlDouble value);
    public virtual void SetSqlMoney(int ordinal, SqlMoney value);
    public virtual void SetSqlDateTime(int ordinal, SqlDateTime value);
    public virtual void SetSqlXml(int ordinal, SqlXml value);
    public virtual void SetSqlDecimal(int ordinal, SqlDecimal value);
    public virtual void SetSqlString(int ordinal, SqlString value);
    public virtual void SetSqlBinary(int ordinal, SqlBinary value);
    public virtual void SetSqlGuid(int ordinal, SqlGuid value);
    public virtual void SetSqlChars(int ordinal, SqlChars value);
    public virtual void SetSqlBytes(int ordinal, SqlBytes value);
    internal SmiRecordBuffer get_RecordBuffer();
    internal SmiContext get_RecordContext();
    internal SqlMetaData[] InternalGetMetaData();
    internal SmiExtendedMetaData[] InternalGetSmiMetaData();
    internal SmiExtendedMetaData GetSmiMetaData(int ordinal);
    internal void ThrowIfInvalidOrdinal(int ordinal);
}
[AttributeUsageAttribute("10624")]
public class Microsoft.SqlServer.Server.SqlFacetAttribute : Attribute {
    public bool IsFixedLength { get; public set; }
    public int MaxSize { get; public set; }
    public int Precision { get; public set; }
    public int Scale { get; public set; }
    public bool IsNullable { get; public set; }
    public bool get_IsFixedLength();
    public void set_IsFixedLength(bool value);
    public int get_MaxSize();
    public void set_MaxSize(int value);
    public int get_Precision();
    public void set_Precision(int value);
    public int get_Scale();
    public void set_Scale(int value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
}
[AttributeUsageAttribute("64")]
public class Microsoft.SqlServer.Server.SqlFunctionAttribute : Attribute {
    public bool IsDeterministic { get; public set; }
    public DataAccessKind DataAccess { get; public set; }
    public SystemDataAccessKind SystemDataAccess { get; public set; }
    public bool IsPrecise { get; public set; }
    public string Name { get; public set; }
    public string TableDefinition { get; public set; }
    public string FillRowMethodName { get; public set; }
    public bool get_IsDeterministic();
    public void set_IsDeterministic(bool value);
    public DataAccessKind get_DataAccess();
    public void set_DataAccess(DataAccessKind value);
    public SystemDataAccessKind get_SystemDataAccess();
    public void set_SystemDataAccess(SystemDataAccessKind value);
    public bool get_IsPrecise();
    public void set_IsPrecise(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_TableDefinition();
    public void set_TableDefinition(string value);
    public string get_FillRowMethodName();
    public void set_FillRowMethodName(string value);
}
public class Microsoft.SqlServer.Server.SqlMetaData : object {
    internal static SqlMetaData[] sxm_rgDefaults;
    public SqlCompareOptions CompareOptions { get; }
    public DbType DbType { get; }
    public bool IsUniqueKey { get; }
    public long LocaleId { get; }
    public static long Max { get; }
    public long MaxLength { get; }
    public string Name { get; }
    public byte Precision { get; }
    public byte Scale { get; }
    public SortOrder SortOrder { get; }
    public int SortOrdinal { get; }
    public SqlDbType SqlDbType { get; }
    public Type Type { get; }
    public string TypeName { get; }
    internal string ServerTypeName { get; }
    public bool UseServerDefault { get; }
    public string XmlSchemaCollectionDatabase { get; }
    public string XmlSchemaCollectionName { get; }
    public string XmlSchemaCollectionOwningSchema { get; }
    internal bool IsPartialLength { get; }
    internal string UdtTypeName { get; }
    public SqlMetaData(string name, SqlDbType dbType);
    public SqlMetaData(string name, SqlDbType dbType, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, Type userDefinedType);
    public SqlMetaData(string name, SqlDbType dbType, Type userDefinedType, string serverTypeName);
    public SqlMetaData(string name, SqlDbType dbType, Type userDefinedType, string serverTypeName, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, byte precision, byte scale);
    public SqlMetaData(string name, SqlDbType dbType, byte precision, byte scale, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, long locale, SqlCompareOptions compareOptions);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, long locale, SqlCompareOptions compareOptions, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, string database, string owningSchema, string objectName, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, byte precision, byte scale, long locale, SqlCompareOptions compareOptions, Type userDefinedType);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, string database, string owningSchema, string objectName);
    internal SqlMetaData(string name, SqlDbType sqlDBType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, string xmlSchemaCollectionDatabase, string xmlSchemaCollectionOwningSchema, string xmlSchemaCollectionName, bool partialLength, Type udtType);
    private static SqlMetaData();
    public SqlCompareOptions get_CompareOptions();
    public DbType get_DbType();
    public bool get_IsUniqueKey();
    public long get_LocaleId();
    public static long get_Max();
    public long get_MaxLength();
    public string get_Name();
    public byte get_Precision();
    public byte get_Scale();
    public SortOrder get_SortOrder();
    public int get_SortOrdinal();
    public SqlDbType get_SqlDbType();
    public Type get_Type();
    public string get_TypeName();
    internal string get_ServerTypeName();
    public bool get_UseServerDefault();
    public string get_XmlSchemaCollectionDatabase();
    public string get_XmlSchemaCollectionName();
    public string get_XmlSchemaCollectionOwningSchema();
    internal bool get_IsPartialLength();
    internal string get_UdtTypeName();
    public short Adjust(short value);
    public int Adjust(int value);
    public long Adjust(long value);
    public float Adjust(float value);
    public double Adjust(double value);
    public string Adjust(string value);
    public decimal Adjust(decimal value);
    public DateTime Adjust(DateTime value);
    public Guid Adjust(Guid value);
    public SqlBoolean Adjust(SqlBoolean value);
    public SqlByte Adjust(SqlByte value);
    public SqlInt16 Adjust(SqlInt16 value);
    public SqlInt32 Adjust(SqlInt32 value);
    public SqlInt64 Adjust(SqlInt64 value);
    public SqlSingle Adjust(SqlSingle value);
    public SqlDouble Adjust(SqlDouble value);
    public SqlMoney Adjust(SqlMoney value);
    public SqlDateTime Adjust(SqlDateTime value);
    public SqlDecimal Adjust(SqlDecimal value);
    public SqlString Adjust(SqlString value);
    public SqlBinary Adjust(SqlBinary value);
    public SqlGuid Adjust(SqlGuid value);
    public SqlChars Adjust(SqlChars value);
    public SqlBytes Adjust(SqlBytes value);
    public SqlXml Adjust(SqlXml value);
    public TimeSpan Adjust(TimeSpan value);
    public DateTimeOffset Adjust(DateTimeOffset value);
    public object Adjust(object value);
    public static SqlMetaData InferFromValue(object value, string name);
    public bool Adjust(bool value);
    public byte Adjust(byte value);
    public Byte[] Adjust(Byte[] value);
    public char Adjust(char value);
    public Char[] Adjust(Char[] value);
    internal static SqlMetaData GetPartialLengthMetaData(SqlMetaData md);
}
[AttributeUsageAttribute("64")]
public class Microsoft.SqlServer.Server.SqlMethodAttribute : SqlFunctionAttribute {
    public bool OnNullCall { get; public set; }
    public bool IsMutator { get; public set; }
    public bool InvokeIfReceiverIsNull { get; public set; }
    public bool get_OnNullCall();
    public void set_OnNullCall(bool value);
    public bool get_IsMutator();
    public void set_IsMutator(bool value);
    public bool get_InvokeIfReceiverIsNull();
    public void set_InvokeIfReceiverIsNull(bool value);
}
public class Microsoft.SqlServer.Server.SqlPipe : object {
    public bool IsSendingResults { get; }
    internal SqlPipe(SmiContext smiContext);
    public void ExecuteAndSend(SqlCommand command);
    public void Send(string message);
    public void Send(SqlDataReader reader);
    public void Send(SqlDataRecord record);
    public void SendResultsStart(SqlDataRecord record);
    public void SendResultsRow(SqlDataRecord record);
    public void SendResultsEnd();
    public bool get_IsSendingResults();
    internal void OnOutOfScope();
}
[AttributeUsageAttribute("64")]
public class Microsoft.SqlServer.Server.SqlProcedureAttribute : Attribute {
    public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
}
internal class Microsoft.SqlServer.Server.SqlRecordBuffer : object {
    internal bool IsNull { get; }
    internal bool Boolean { get; internal set; }
    internal byte Byte { get; internal set; }
    internal DateTime DateTime { get; internal set; }
    internal DateTimeOffset DateTimeOffset { get; internal set; }
    internal double Double { get; internal set; }
    internal Guid Guid { get; internal set; }
    internal short Int16 { get; internal set; }
    internal int Int32 { get; internal set; }
    internal long Int64 { get; internal set; }
    internal float Single { get; internal set; }
    internal string String { get; internal set; }
    internal SqlDecimal SqlDecimal { get; internal set; }
    internal TimeSpan TimeSpan { get; internal set; }
    internal long BytesLength { get; internal set; }
    internal long CharsLength { get; internal set; }
    internal SmiMetaData VariantType { get; internal set; }
    internal SqlRecordBuffer(SmiMetaData metaData);
    internal bool get_IsNull();
    internal bool get_Boolean();
    internal void set_Boolean(bool value);
    internal byte get_Byte();
    internal void set_Byte(byte value);
    internal DateTime get_DateTime();
    internal void set_DateTime(DateTime value);
    internal DateTimeOffset get_DateTimeOffset();
    internal void set_DateTimeOffset(DateTimeOffset value);
    internal double get_Double();
    internal void set_Double(double value);
    internal Guid get_Guid();
    internal void set_Guid(Guid value);
    internal short get_Int16();
    internal void set_Int16(short value);
    internal int get_Int32();
    internal void set_Int32(int value);
    internal long get_Int64();
    internal void set_Int64(long value);
    internal float get_Single();
    internal void set_Single(float value);
    internal string get_String();
    internal void set_String(string value);
    internal SqlDecimal get_SqlDecimal();
    internal void set_SqlDecimal(SqlDecimal value);
    internal TimeSpan get_TimeSpan();
    internal void set_TimeSpan(TimeSpan value);
    internal long get_BytesLength();
    internal void set_BytesLength(long value);
    internal long get_CharsLength();
    internal void set_CharsLength(long value);
    internal SmiMetaData get_VariantType();
    internal void set_VariantType(SmiMetaData value);
    internal int GetBytes(long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    internal int GetChars(long fieldOffset, Char[] buffer, int bufferOffset, int length);
    internal int SetBytes(long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    internal int SetChars(long fieldOffset, Char[] buffer, int bufferOffset, int length);
    internal void SetNull();
}
[AttributeUsageAttribute("64")]
public class Microsoft.SqlServer.Server.SqlTriggerAttribute : Attribute {
    public string Name { get; public set; }
    public string Target { get; public set; }
    public string Event { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Target();
    public void set_Target(string value);
    public string get_Event();
    public void set_Event(string value);
}
public class Microsoft.SqlServer.Server.SqlTriggerContext : object {
    public int ColumnCount { get; }
    public SqlXml EventData { get; }
    public TriggerAction TriggerAction { get; }
    internal SqlTriggerContext(TriggerAction triggerAction, Boolean[] columnsUpdated, SqlXml eventInstanceData);
    public int get_ColumnCount();
    public SqlXml get_EventData();
    public TriggerAction get_TriggerAction();
    public bool IsUpdatedColumn(int columnOrdinal);
}
[AttributeUsageAttribute("12")]
public class Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute : Attribute {
    public static int MaxByteSizeValue;
    public int MaxByteSize { get; public set; }
    public bool IsInvariantToDuplicates { get; public set; }
    public bool IsInvariantToNulls { get; public set; }
    public bool IsInvariantToOrder { get; public set; }
    public bool IsNullIfEmpty { get; public set; }
    public Format Format { get; }
    public string Name { get; public set; }
    public SqlUserDefinedAggregateAttribute(Format format);
    public int get_MaxByteSize();
    public void set_MaxByteSize(int value);
    public bool get_IsInvariantToDuplicates();
    public void set_IsInvariantToDuplicates(bool value);
    public bool get_IsInvariantToNulls();
    public void set_IsInvariantToNulls(bool value);
    public bool get_IsInvariantToOrder();
    public void set_IsInvariantToOrder(bool value);
    public bool get_IsNullIfEmpty();
    public void set_IsNullIfEmpty(bool value);
    public Format get_Format();
    public string get_Name();
    public void set_Name(string value);
}
[AttributeUsageAttribute("12")]
public class Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute : Attribute {
    internal static int YukonMaxByteSizeValue;
    public int MaxByteSize { get; public set; }
    public bool IsFixedLength { get; public set; }
    public bool IsByteOrdered { get; public set; }
    public Format Format { get; }
    public string ValidationMethodName { get; public set; }
    public string Name { get; public set; }
    public SqlUserDefinedTypeAttribute(Format format);
    public int get_MaxByteSize();
    public void set_MaxByteSize(int value);
    public bool get_IsFixedLength();
    public void set_IsFixedLength(bool value);
    public bool get_IsByteOrdered();
    public void set_IsByteOrdered(bool value);
    public Format get_Format();
    public string get_ValidationMethodName();
    public void set_ValidationMethodName(string value);
    public string get_Name();
    public void set_Name(string value);
}
public enum Microsoft.SqlServer.Server.SystemDataAccessKind : Enum {
    public int value__;
    public static SystemDataAccessKind None;
    public static SystemDataAccessKind Read;
}
public enum Microsoft.SqlServer.Server.TriggerAction : Enum {
    public int value__;
    public static TriggerAction Invalid;
    public static TriggerAction Insert;
    public static TriggerAction Update;
    public static TriggerAction Delete;
    public static TriggerAction CreateTable;
    public static TriggerAction AlterTable;
    public static TriggerAction DropTable;
    public static TriggerAction CreateIndex;
    public static TriggerAction AlterIndex;
    public static TriggerAction DropIndex;
    public static TriggerAction CreateSynonym;
    public static TriggerAction DropSynonym;
    public static TriggerAction CreateSecurityExpression;
    public static TriggerAction DropSecurityExpression;
    public static TriggerAction CreateView;
    public static TriggerAction AlterView;
    public static TriggerAction DropView;
    public static TriggerAction CreateProcedure;
    public static TriggerAction AlterProcedure;
    public static TriggerAction DropProcedure;
    public static TriggerAction CreateFunction;
    public static TriggerAction AlterFunction;
    public static TriggerAction DropFunction;
    public static TriggerAction CreateTrigger;
    public static TriggerAction AlterTrigger;
    public static TriggerAction DropTrigger;
    public static TriggerAction CreateEventNotification;
    public static TriggerAction DropEventNotification;
    public static TriggerAction CreateType;
    public static TriggerAction DropType;
    public static TriggerAction CreateAssembly;
    public static TriggerAction AlterAssembly;
    public static TriggerAction DropAssembly;
    public static TriggerAction CreateUser;
    public static TriggerAction AlterUser;
    public static TriggerAction DropUser;
    public static TriggerAction CreateRole;
    public static TriggerAction AlterRole;
    public static TriggerAction DropRole;
    public static TriggerAction CreateAppRole;
    public static TriggerAction AlterAppRole;
    public static TriggerAction DropAppRole;
    public static TriggerAction CreateSchema;
    public static TriggerAction AlterSchema;
    public static TriggerAction DropSchema;
    public static TriggerAction CreateLogin;
    public static TriggerAction AlterLogin;
    public static TriggerAction DropLogin;
    public static TriggerAction CreateMsgType;
    public static TriggerAction DropMsgType;
    public static TriggerAction CreateContract;
    public static TriggerAction DropContract;
    public static TriggerAction CreateQueue;
    public static TriggerAction AlterQueue;
    public static TriggerAction DropQueue;
    public static TriggerAction CreateService;
    public static TriggerAction AlterService;
    public static TriggerAction DropService;
    public static TriggerAction CreateRoute;
    public static TriggerAction AlterRoute;
    public static TriggerAction DropRoute;
    public static TriggerAction GrantStatement;
    public static TriggerAction DenyStatement;
    public static TriggerAction RevokeStatement;
    public static TriggerAction GrantObject;
    public static TriggerAction DenyObject;
    public static TriggerAction RevokeObject;
    public static TriggerAction CreateBinding;
    public static TriggerAction AlterBinding;
    public static TriggerAction DropBinding;
    public static TriggerAction CreatePartitionFunction;
    public static TriggerAction AlterPartitionFunction;
    public static TriggerAction DropPartitionFunction;
    public static TriggerAction CreatePartitionScheme;
    public static TriggerAction AlterPartitionScheme;
    public static TriggerAction DropPartitionScheme;
}
internal class Microsoft.SqlServer.Server.UIntNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.SqlServer.Server.ULongNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.SqlServer.Server.UShortNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal static class Microsoft.SqlServer.Server.ValueUtilsSmi : object {
    private static ValueUtilsSmi();
    internal static bool IsDBNull(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    internal static bool GetBoolean(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static byte GetByte(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static long GetBytes(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiExtendedMetaData metaData, long fieldOffset, Byte[] buffer, int bufferOffset, int length, bool throwOnNull);
    internal static long GetBytesInternal(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, long fieldOffset, Byte[] buffer, int bufferOffset, int length, bool throwOnNull);
    internal static long GetChars(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    internal static DateTime GetDateTime(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static DateTimeOffset GetDateTimeOffset(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, bool gettersSupportKatmaiDateTime);
    internal static DateTimeOffset GetDateTimeOffset(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal, SmiMetaData metaData);
    internal static decimal GetDecimal(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static double GetDouble(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static Guid GetGuid(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static short GetInt16(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static int GetInt32(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static long GetInt64(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static float GetSingle(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlBinary GetSqlBinary(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlBoolean GetSqlBoolean(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlByte GetSqlByte(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlBytes GetSqlBytes(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, SmiContext context);
    internal static SqlChars GetSqlChars(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, SmiContext context);
    internal static SqlDateTime GetSqlDateTime(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlDecimal GetSqlDecimal(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlDouble GetSqlDouble(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlGuid GetSqlGuid(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlInt16 GetSqlInt16(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlInt32 GetSqlInt32(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlInt64 GetSqlInt64(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlMoney GetSqlMoney(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlSingle GetSqlSingle(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlString GetSqlString(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlXml GetSqlXml(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, SmiContext context);
    internal static string GetString(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlSequentialStreamSmi GetSequentialStream(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, bool bypassTypeCheck);
    internal static SqlSequentialTextReaderSmi GetSequentialTextReader(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static Stream GetStream(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, bool bypassTypeCheck);
    internal static TextReader GetTextReader(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static TimeSpan GetTimeSpan(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, bool gettersSupportKatmaiDateTime);
    internal static TimeSpan GetTimeSpan(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal, SmiMetaData metaData);
    internal static object GetValue200(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal, SmiMetaData metaData, SmiContext context);
    internal static object GetValue(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, SmiContext context);
    internal static object GetSqlValue200(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal, SmiMetaData metaData, SmiContext context);
    internal static object GetSqlValue(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, SmiContext context);
    internal static object NullUdtInstance(SmiMetaData metaData);
    internal static StorageType SqlDbTypeToStorageType(SqlDbType dbType);
    internal static object GetOutputParameterV3Smi(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, SmiContext context, SqlBuffer targetBuffer);
    internal static object GetOutputParameterV200Smi(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal, SmiMetaData metaData, SmiContext context, SqlBuffer targetBuffer);
    internal static void SetDBNull(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, bool value);
    internal static void SetBoolean(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, bool value);
    internal static void SetByte(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, byte value);
    internal static long SetBytes(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    internal static long SetBytesLength(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, long length);
    internal static long SetChars(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    internal static void SetDateTime(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTime value);
    internal static void SetDateTimeOffset(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTimeOffset value, bool settersSupportKatmaiDateTime);
    internal static void SetDecimal(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, decimal value);
    internal static void SetDouble(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, double value);
    internal static void SetGuid(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, Guid value);
    internal static void SetInt16(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, short value);
    internal static void SetInt32(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, int value);
    internal static void SetInt64(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, long value);
    internal static void SetSingle(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, float value);
    internal static void SetSqlBinary(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlBinary value);
    internal static void SetSqlBoolean(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlBoolean value);
    internal static void SetSqlByte(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlByte value);
    internal static void SetSqlBytes(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlBytes value);
    internal static void SetSqlChars(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlChars value);
    internal static void SetSqlDateTime(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDateTime value);
    internal static void SetSqlDecimal(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDecimal value);
    internal static void SetSqlDouble(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDouble value);
    internal static void SetSqlGuid(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlGuid value);
    internal static void SetSqlInt16(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlInt16 value);
    internal static void SetSqlInt32(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlInt32 value);
    internal static void SetSqlInt64(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlInt64 value);
    internal static void SetSqlMoney(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlMoney value);
    internal static void SetSqlSingle(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlSingle value);
    internal static void SetSqlString(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlString value);
    internal static void SetSqlXml(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlXml value);
    internal static void SetString(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, string value);
    internal static void SetTimeSpan(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, TimeSpan value, bool settersSupportKatmaiDateTime);
    internal static void SetCompatibleValue(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, object value, ExtendedClrTypeCode typeCode, int offset);
    internal static void SetCompatibleValueV200(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, object value, ExtendedClrTypeCode typeCode, int offset, int length, ParameterPeekAheadValue peekAhead, StorageType storageType);
    internal static void SetCompatibleValueV200(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, object value, ExtendedClrTypeCode typeCode, int offset, int length, ParameterPeekAheadValue peekAhead);
    internal static void FillCompatibleITypedSettersFromReader(SmiEventSink_Default sink, ITypedSettersV3 setters, SmiMetaData[] metaData, SqlDataReader reader);
    internal static void FillCompatibleSettersFromReader(SmiEventSink_Default sink, SmiTypedGetterSetter setters, IList`1<SmiExtendedMetaData> metaData, DbDataReader reader);
    internal static void FillCompatibleITypedSettersFromRecord(SmiEventSink_Default sink, ITypedSettersV3 setters, SmiMetaData[] metaData, SqlDataRecord record);
    internal static void FillCompatibleITypedSettersFromRecord(SmiEventSink_Default sink, ITypedSettersV3 setters, SmiMetaData[] metaData, SqlDataRecord record, SmiDefaultFieldsProperty useDefaultValues);
    internal static void FillCompatibleSettersFromRecord(SmiEventSink_Default sink, SmiTypedGetterSetter setters, SmiMetaData[] metaData, SqlDataRecord record, SmiDefaultFieldsProperty useDefaultValues);
    internal static Stream CopyIntoNewSmiScratchStream(Stream source, SmiEventSink_Default sink, SmiContext context);
    internal static SqlStreamChars CopyIntoNewSmiScratchStreamChars(Stream source, SmiEventSink_Default sink, SmiContext context);
    internal static int GetBytes_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    internal static int GetChars_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
}
[CLSCompliantAttribute("False")]
internal class NativeOledbWrapper : object {
    internal static Int32 modopt(System.Runtime.CompilerServices.IsConst) SizeOfPROPVARIANT;
    private static NativeOledbWrapper();
    [ReliabilityContractAttribute("3", "2")]
[HandleProcessCorruptedStateExceptionsAttribute]
[ResourceExposureAttribute("0")]
internal static Int32 modopt(System.Runtime.CompilerServices.IsLong) IChapteredRowsetReleaseChapter(IntPtr ptr, IntPtr chapter);
    [HandleProcessCorruptedStateExceptionsAttribute]
[ResourceExposureAttribute("0")]
[ReliabilityContractAttribute("3", "2")]
internal static Int32 modopt(System.Runtime.CompilerServices.IsLong) ITransactionAbort(IntPtr ptr);
    [ReliabilityContractAttribute("3", "2")]
[ResourceExposureAttribute("0")]
[HandleProcessCorruptedStateExceptionsAttribute]
internal static Int32 modopt(System.Runtime.CompilerServices.IsLong) ITransactionCommit(IntPtr ptr);
    [ResourceExposureAttribute("0")]
internal static bool MemoryCompare(IntPtr buf1, IntPtr buf2, int count);
    [ResourceExposureAttribute("0")]
internal static void MemoryCopy(IntPtr dst, IntPtr src, int count);
}
[NativeCppClassAttribute]
internal enum ProviderNum : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class SNI_CLIENT_CONSUMER_INFO : ValueType {
}
internal class SNI_Conn : ValueType {
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class SNI_ConnWrapper : ValueType {
}
[NativeCppClassAttribute]
internal class Sni_Consumer_Info : ValueType {
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class SNI_ERROR : ValueType {
}
internal class SNI_Packet : ValueType {
}
[NativeCppClassAttribute]
internal enum SNI_Packet_IOType : Enum {
    public int value__;
}
[CLSCompliantAttribute("False")]
internal class SNINativeMethodWrapper : object {
    internal static Int32 modopt(System.Runtime.CompilerServices.IsConst) SniMaxComposedSpnLength;
    private static SNINativeMethodWrapper();
    [ResourceExposureAttribute("2")]
[ResourceConsumptionAttribute("2", "2")]
internal static Byte[] GetData();
    [ResourceExposureAttribute("2")]
[ResourceConsumptionAttribute("2", "2")]
internal static void SetData(Byte[] data);
    [ResourceConsumptionAttribute("2", "2")]
[ResourceExposureAttribute("2")]
internal static _AppDomain GetDefaultAppDomain();
    [ResourceExposureAttribute("0")]
[ResourceConsumptionAttribute("1", "1")]
internal static IntPtr SNIServerEnumOpen();
    [ResourceExposureAttribute("0")]
[ResourceConsumptionAttribute("1", "1")]
internal static int SNIServerEnumRead(IntPtr handle, Char[] wStr, int pcbBuf, Boolean& fMore);
    [ReliabilityContractAttribute("3", "2")]
[ResourceExposureAttribute("0")]
internal static void SNIServerEnumClose(IntPtr handle);
    [ResourceExposureAttribute("0")]
[ReliabilityContractAttribute("3", "2")]
internal static UInt32 SNIClose(IntPtr pConn);
    [ResourceExposureAttribute("0")]
[ResourceConsumptionAttribute("1", "1")]
internal static UInt32 SNIInitialize();
    [ResourceExposureAttribute("0")]
[ResourceConsumptionAttribute("1", "1")]
internal static UInt32 SNIOpenSyncEx(ConsumerInfo consumerInfo, string constring, IntPtr& pConn, Byte[] spnBuffer, Byte[] instanceName, bool fOverrideCache, bool fSync, int timeout, bool fParallel, int transparentNetworkResolutionStateNo, int totalTimeout, bool isAzureSqlServerEndpoint);
    [ResourceExposureAttribute("0")]
[HandleProcessCorruptedStateExceptionsAttribute]
[ResourceConsumptionAttribute("1", "1")]
internal static UInt32 SNIOpenMarsSession(ConsumerInfo consumerInfo, SafeHandle parent, IntPtr& pConn, bool fSync);
    [ResourceExposureAttribute("0")]
[HandleProcessCorruptedStateExceptionsAttribute]
[ReliabilityContractAttribute("3", "1")]
internal static void SNIPacketAllocate(SafeHandle pConn, IOType ioType, IntPtr& ret);
    [ResourceExposureAttribute("0")]
internal static UInt32 SNIPacketGetData(IntPtr packet, Byte[] readBuffer, UInt32& dataSize);
    [ResourceExposureAttribute("0")]
[HandleProcessCorruptedStateExceptionsAttribute]
internal static void SNIPacketReset(SafeHandle pConn, IOType ioType, SafeHandle packet, ConsumerNumber consNum);
    [ReliabilityContractAttribute("3", "2")]
[ResourceExposureAttribute("0")]
internal static void SNIPacketRelease(IntPtr packet);
    [ResourceExposureAttribute("0")]
[HandleProcessCorruptedStateExceptionsAttribute]
internal static void SNIPacketSetData(SafeHandle packet, Byte[] data, int length, SecureString[] passwords, Int32[] passwordOffsets);
    [ResourceExposureAttribute("0")]
[ResourceConsumptionAttribute("1", "1")]
internal static int SNIQueryInfo(QTypes qType, IntPtr& qInfo);
    [ResourceConsumptionAttribute("1", "1")]
[ResourceExposureAttribute("0")]
internal static int SNIQueryInfo(QTypes qType, UInt32& qInfo);
    [ResourceExposureAttribute("0")]
[HandleProcessCorruptedStateExceptionsAttribute]
internal static UInt32 SNISetInfo(SafeHandle pConn, QTypes qtype, UInt32& qInfo);
    [ResourceExposureAttribute("0")]
[HandleProcessCorruptedStateExceptionsAttribute]
internal static UInt32 SniGetConnectionId(SafeHandle pConn, Guid& connId);
    [ResourceExposureAttribute("0")]
[HandleProcessCorruptedStateExceptionsAttribute]
internal static UInt32 SNIReadAsync(SafeHandle pConn, IntPtr& packet);
    [HandleProcessCorruptedStateExceptionsAttribute]
[ResourceExposureAttribute("0")]
internal static UInt32 SNIReadSyncOverAsync(SafeHandle pConn, IntPtr& packet, int timeout);
    [HandleProcessCorruptedStateExceptionsAttribute]
[ResourceExposureAttribute("0")]
internal static UInt32 SNICheckConnection(SafeHandle pConn);
    [ResourceExposureAttribute("0")]
[ReliabilityContractAttribute("3", "2")]
internal static UInt32 SNITerminate();
    [ResourceExposureAttribute("0")]
[HandleProcessCorruptedStateExceptionsAttribute]
internal static UInt32 SNIWritePacket(SafeHandle pConn, SafeHandle packet, bool sync);
    [HandleProcessCorruptedStateExceptionsAttribute]
[ResourceConsumptionAttribute("1", "1")]
[ResourceExposureAttribute("0")]
internal static UInt32 SNIAddProvider(SafeHandle pConn, ProviderEnum providerEnum, UInt32& info);
    [HandleProcessCorruptedStateExceptionsAttribute]
[ResourceExposureAttribute("0")]
internal static UInt32 SNIRemoveProvider(SafeHandle pConn, ProviderEnum providerEnum);
    [ResourceExposureAttribute("0")]
internal static void SNIGetLastError(SNI_Error error);
    [ResourceExposureAttribute("0")]
[ResourceConsumptionAttribute("1", "1")]
internal static UInt32 SNISecInitPackage(UInt32& maxLength);
    [HandleProcessCorruptedStateExceptionsAttribute]
[ResourceExposureAttribute("0")]
[ResourceConsumptionAttribute("1", "1")]
internal static UInt32 SNISecGenClientContext(SafeHandle pConnectionObject, Byte[] inBuff, UInt32 receivedLength, Byte[] OutBuff, UInt32& sendLength, Byte[] serverUserName);
    [ResourceExposureAttribute("0")]
[HandleProcessCorruptedStateExceptionsAttribute]
[ResourceConsumptionAttribute("1", "1")]
internal static UInt32 SNIWaitForSSLHandshakeToComplete(SafeHandle pConn, int timeoutMilliseconds);
}
internal class SqlDependencyProcessDispatcher : MarshalByRefObject {
    internal int ObjectID { get; }
    internal SqlDependencyProcessDispatcher SingletonProcessDispatcher { get; }
    private static SqlDependencyProcessDispatcher();
    internal int get_ObjectID();
    internal SqlDependencyProcessDispatcher get_SingletonProcessDispatcher();
    public virtual object InitializeLifetimeService();
    internal void QueueAppDomainUnloading(string appDomainKey);
    internal bool StartWithDefault(string connectionString, String& server, DbConnectionPoolIdentity& identity, String& user, String& database, String& service, string appDomainKey, SqlDependencyPerAppDomainDispatcher dispatcher, Boolean& errorOccurred, Boolean& appDomainStart);
    internal bool Start(string connectionString, string queue, string appDomainKey, SqlDependencyPerAppDomainDispatcher dispatcher);
    internal bool Stop(string connectionString, String& server, DbConnectionPoolIdentity& identity, String& user, String& database, String& queueService, string appDomainKey, Boolean& appDomainStop);
}
internal static class System.Configuration.PrivilegedConfigurationManager : object {
    internal static ConnectionStringSettingsCollection ConnectionStrings { get; }
    internal static ConnectionStringSettingsCollection get_ConnectionStrings();
    internal static object GetSection(string sectionName);
}
public enum System.Data.AcceptRejectRule : Enum {
    public int value__;
    public static AcceptRejectRule None;
    public static AcceptRejectRule Cascade;
}
internal enum System.Data.Aggregate : Enum {
    public int value__;
    public static Aggregate None;
    public static Aggregate Sum;
    public static Aggregate Avg;
    public static Aggregate Min;
    public static Aggregate Max;
    public static Aggregate Count;
    public static Aggregate StDev;
    public static Aggregate Var;
}
internal class System.Data.AggregateNode : ExpressionNode {
    internal AggregateNode(DataTable table, FunctionId aggregateType, string columnName);
    internal AggregateNode(DataTable table, FunctionId aggregateType, string columnName, string relationName);
    internal AggregateNode(DataTable table, FunctionId aggregateType, string columnName, bool local, string relationName);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal static void Bind(DataRelation relation, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] records);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual bool DependsOn(DataColumn column);
    internal virtual ExpressionNode Optimize();
}
internal enum System.Data.AggregateType : Enum {
    public int value__;
    public static AggregateType None;
    public static AggregateType Sum;
    public static AggregateType Mean;
    public static AggregateType Min;
    public static AggregateType Max;
    public static AggregateType First;
    public static AggregateType Count;
    public static AggregateType Var;
    public static AggregateType StDev;
}
internal class System.Data.AutoIncrementBigInteger : AutoIncrementValue {
    internal object Current { get; internal set; }
    internal Type DataType { get; }
    internal long Seed { get; internal set; }
    internal long Step { get; internal set; }
    internal virtual object get_Current();
    internal virtual void set_Current(object value);
    internal virtual Type get_DataType();
    internal virtual long get_Seed();
    internal virtual void set_Seed(long value);
    internal virtual long get_Step();
    internal virtual void set_Step(long value);
    internal virtual void MoveAfter();
    internal virtual void SetCurrent(object value, IFormatProvider formatProvider);
    internal virtual void SetCurrentAndIncrement(object value);
}
internal class System.Data.AutoIncrementInt64 : AutoIncrementValue {
    internal object Current { get; internal set; }
    internal Type DataType { get; }
    internal long Seed { get; internal set; }
    internal long Step { get; internal set; }
    internal virtual object get_Current();
    internal virtual void set_Current(object value);
    internal virtual Type get_DataType();
    internal virtual long get_Seed();
    internal virtual void set_Seed(long value);
    internal virtual long get_Step();
    internal virtual void set_Step(long value);
    internal virtual void MoveAfter();
    internal virtual void SetCurrent(object value, IFormatProvider formatProvider);
    internal virtual void SetCurrentAndIncrement(object value);
}
internal abstract class System.Data.AutoIncrementValue : object {
    internal bool Auto { get; internal set; }
    internal object Current { get; internal set; }
    internal long Seed { get; internal set; }
    internal long Step { get; internal set; }
    internal Type DataType { get; }
    internal bool get_Auto();
    internal void set_Auto(bool value);
    internal abstract virtual object get_Current();
    internal abstract virtual void set_Current(object value);
    internal abstract virtual long get_Seed();
    internal abstract virtual void set_Seed(long value);
    internal abstract virtual long get_Step();
    internal abstract virtual void set_Step(long value);
    internal abstract virtual Type get_DataType();
    internal abstract virtual void SetCurrent(object value, IFormatProvider formatProvider);
    internal abstract virtual void SetCurrentAndIncrement(object value);
    internal abstract virtual void MoveAfter();
    internal AutoIncrementValue Clone();
}
internal class System.Data.BinaryNode : ExpressionNode {
    internal int op;
    internal ExpressionNode left;
    internal ExpressionNode right;
    internal BinaryNode(DataTable table, int op, ExpressionNode left, ExpressionNode right);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] recordNos);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual bool DependsOn(DataColumn column);
    internal virtual ExpressionNode Optimize();
    internal void SetTypeMismatchError(int op, Type left, Type right);
    internal int BinaryCompare(object vLeft, object vRight, StorageType resultType, int op);
    internal int BinaryCompare(object vLeft, object vRight, StorageType resultType, int op, CompareInfo comparer);
    internal StorageType ResultType(StorageType left, StorageType right, bool lc, bool rc, int op);
    internal StorageType ResultSqlType(StorageType left, StorageType right, bool lc, bool rc, int op);
}
internal class System.Data.ChildForeignKeyConstraintEnumerator : ForeignKeyConstraintEnumerator {
    public ChildForeignKeyConstraintEnumerator(DataSet dataSet, DataTable inTable);
    protected virtual bool IsValidCandidate(Constraint constraint);
}
internal class System.Data.ColumnTypeConverter : TypeConverter {
    private static ColumnTypeConverter();
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
[FlagsAttribute]
public enum System.Data.CommandBehavior : Enum {
    public int value__;
    public static CommandBehavior Default;
    public static CommandBehavior SingleResult;
    public static CommandBehavior SchemaOnly;
    public static CommandBehavior KeyInfo;
    public static CommandBehavior SingleRow;
    public static CommandBehavior SequentialAccess;
    public static CommandBehavior CloseConnection;
}
public enum System.Data.CommandType : Enum {
    public int value__;
    public static CommandType Text;
    public static CommandType StoredProcedure;
    public static CommandType TableDirect;
}
internal static class System.Data.Common.ActivityCorrelator : object {
    internal static ApiGroup CorrelationTracePoints;
    internal static ActivityId Current { get; }
    internal static ActivityId get_Current();
    internal static ActivityId Next();
}
internal static class System.Data.Common.ADP : object {
    internal static string Append;
    internal static string BeginExecuteNonQuery;
    internal static string BeginExecuteReader;
    internal static string BeginTransaction;
    internal static string BeginExecuteXmlReader;
    internal static string ChangeDatabase;
    internal static string Cancel;
    internal static string Clone;
    internal static string ColumnEncryptionSystemProviderNamePrefix;
    internal static string CommitTransaction;
    internal static string CommandTimeout;
    internal static string ConnectionString;
    internal static string DataSetColumn;
    internal static string DataSetTable;
    internal static string Delete;
    internal static string DeleteCommand;
    internal static string DeriveParameters;
    internal static string EndExecuteNonQuery;
    internal static string EndExecuteReader;
    internal static string EndExecuteXmlReader;
    internal static string ExecuteReader;
    internal static string ExecuteRow;
    internal static string ExecuteNonQuery;
    internal static string ExecuteScalar;
    internal static string ExecuteSqlScalar;
    internal static string ExecuteXmlReader;
    internal static string Fill;
    internal static string FillPage;
    internal static string FillSchema;
    internal static string GetBytes;
    internal static string GetChars;
    internal static string GetOleDbSchemaTable;
    internal static string GetProperties;
    internal static string GetSchema;
    internal static string GetSchemaTable;
    internal static string GetServerTransactionLevel;
    internal static string Insert;
    internal static string Open;
    internal static string Parameter;
    internal static string ParameterBuffer;
    internal static string ParameterCount;
    internal static string ParameterDestinationType;
    internal static string ParameterIndex;
    internal static string ParameterName;
    internal static string ParameterOffset;
    internal static string ParameterSetPosition;
    internal static string ParameterService;
    internal static string ParameterTimeout;
    internal static string ParameterUserData;
    internal static string Prepare;
    internal static string QuoteIdentifier;
    internal static string Read;
    internal static string ReadAsync;
    internal static string Remove;
    internal static string RollbackTransaction;
    internal static string SaveTransaction;
    internal static string SetProperties;
    internal static string SourceColumn;
    internal static string SourceVersion;
    internal static string SourceTable;
    internal static string UnquoteIdentifier;
    internal static string Update;
    internal static string UpdateCommand;
    internal static string UpdateRows;
    internal static CompareOptions compareOptions;
    internal static int DecimalMaxPrecision;
    internal static int DecimalMaxPrecision28;
    internal static int DefaultCommandTimeout;
    internal static int DefaultConnectionTimeout;
    internal static float FailoverTimeoutStep;
    internal static float FailoverTimeoutStepForTnir;
    internal static int MinimumTimeoutForTnirMs;
    internal static string StrEmpty;
    internal static IntPtr PtrZero;
    internal static int PtrSize;
    internal static IntPtr InvalidPtr;
    internal static IntPtr RecordsUnaffected;
    internal static HandleRef NullHandleRef;
    internal static int CharSize;
    internal static bool IsWindowsNT;
    internal static bool IsPlatformNT5;
    internal static String[] AzureSqlServerEndpoints;
    internal static Task`1<bool> TrueTask { get; }
    internal static Task`1<bool> FalseTask { get; }
    private static ADP();
    internal static Task`1<T> CreatedTaskWithException(Exception ex);
    internal static Task`1<T> CreatedTaskWithCancellation();
    internal static Exception ExceptionWithStackTrace(Exception e);
    internal static Task`1<bool> get_TrueTask();
    internal static Task`1<bool> get_FalseTask();
    internal static void TraceExceptionAsReturnValue(Exception e);
    internal static void TraceExceptionForCapture(Exception e);
    internal static void TraceExceptionWithoutRethrow(Exception e);
    internal static ArgumentException Argument(string error);
    internal static ArgumentException Argument(string error, Exception inner);
    internal static ArgumentException Argument(string error, string parameter);
    internal static ArgumentException Argument(string error, string parameter, Exception inner);
    internal static ArgumentNullException ArgumentNull(string parameter);
    internal static ArgumentNullException ArgumentNull(string parameter, string error);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string parameterName);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string message, string parameterName);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string message, string parameterName, object value);
    internal static ConfigurationException Configuration(string message);
    internal static ConfigurationException Configuration(string message, XmlNode node);
    internal static DataException Data(string message);
    internal static IndexOutOfRangeException IndexOutOfRange(int value);
    internal static IndexOutOfRangeException IndexOutOfRange(string error);
    internal static IndexOutOfRangeException IndexOutOfRange();
    internal static InvalidCastException InvalidCast(string error);
    internal static InvalidCastException InvalidCast(string error, Exception inner);
    internal static InvalidOperationException InvalidOperation(string error);
    internal static TimeoutException TimeoutException(string error);
    internal static InvalidOperationException InvalidOperation(string error, Exception inner);
    internal static NotImplementedException NotImplemented(string error);
    internal static NotSupportedException NotSupported();
    internal static NotSupportedException NotSupported(string error);
    internal static OverflowException Overflow(string error);
    internal static OverflowException Overflow(string error, Exception inner);
    internal static PlatformNotSupportedException PropertyNotSupported(string property);
    internal static TypeLoadException TypeLoad(string error);
    internal static InvalidCastException InvalidCast();
    internal static IOException IO(string error);
    internal static IOException IO(string error, Exception inner);
    internal static InvalidOperationException DataAdapter(string error);
    internal static InvalidOperationException DataAdapter(string error, Exception inner);
    internal static ObjectDisposedException ObjectDisposed(object instance);
    internal static InvalidOperationException MethodCalledTwice(string method);
    internal static ArgumentException IncorrectAsyncResult();
    internal static ArgumentException SingleValuedProperty(string propertyName, string value);
    internal static ArgumentException DoubleValuedProperty(string propertyName, string value1, string value2);
    internal static ArgumentException InvalidPrefixSuffix();
    internal static ArgumentException InvalidMultipartName(string property, string value);
    internal static ArgumentException InvalidMultipartNameIncorrectUsageOfQuotes(string property, string value);
    internal static ArgumentException InvalidMultipartNameToManyParts(string property, string value, int limit);
    internal static ArgumentException BadParameterName(string parameterName);
    internal static ArgumentException MultipleReturnValue();
    internal static void CheckArgumentLength(string value, string parameterName);
    internal static void CheckArgumentLength(Array value, string parameterName);
    internal static void CheckArgumentNull(object value, string parameterName);
    internal static bool IsCatchableExceptionType(Exception e);
    internal static bool IsCatchableOrSecurityExceptionType(Exception e);
    internal static ArgumentOutOfRangeException InvalidEnumerationValue(Type type, int value);
    internal static ArgumentOutOfRangeException NotSupportedEnumerationValue(Type type, string value, string method);
    internal static ArgumentOutOfRangeException InvalidAcceptRejectRule(AcceptRejectRule value);
    internal static ArgumentOutOfRangeException InvalidCatalogLocation(CatalogLocation value);
    internal static ArgumentOutOfRangeException InvalidCommandBehavior(CommandBehavior value);
    internal static void ValidateCommandBehavior(CommandBehavior value);
    internal static ArgumentException InvalidArgumentLength(string argumentName, int limit);
    internal static ArgumentException MustBeReadOnly(string argumentName);
    internal static ArgumentOutOfRangeException InvalidCommandType(CommandType value);
    internal static ArgumentOutOfRangeException InvalidConflictOptions(ConflictOption value);
    internal static ArgumentOutOfRangeException InvalidDataRowState(DataRowState value);
    internal static ArgumentOutOfRangeException InvalidDataRowVersion(DataRowVersion value);
    internal static ArgumentOutOfRangeException InvalidIsolationLevel(IsolationLevel value);
    internal static ArgumentOutOfRangeException InvalidKeyRestrictionBehavior(KeyRestrictionBehavior value);
    internal static ArgumentOutOfRangeException InvalidLoadOption(LoadOption value);
    internal static ArgumentOutOfRangeException InvalidMissingMappingAction(MissingMappingAction value);
    internal static ArgumentOutOfRangeException InvalidMissingSchemaAction(MissingSchemaAction value);
    internal static ArgumentOutOfRangeException InvalidParameterDirection(ParameterDirection value);
    internal static ArgumentOutOfRangeException InvalidPermissionState(PermissionState value);
    internal static ArgumentOutOfRangeException InvalidRule(Rule value);
    internal static ArgumentOutOfRangeException InvalidSchemaType(SchemaType value);
    internal static ArgumentOutOfRangeException InvalidStatementType(StatementType value);
    internal static ArgumentOutOfRangeException InvalidUpdateRowSource(UpdateRowSource value);
    internal static ArgumentOutOfRangeException InvalidUpdateStatus(UpdateStatus value);
    internal static ArgumentOutOfRangeException NotSupportedCommandBehavior(CommandBehavior value, string method);
    internal static ArgumentOutOfRangeException NotSupportedStatementType(StatementType value, string method);
    internal static ArgumentOutOfRangeException InvalidUserDefinedTypeSerializationFormat(Format value);
    internal static ArgumentOutOfRangeException NotSupportedUserDefinedTypeSerializationFormat(Format value, string method);
    internal static ArgumentException ConfigProviderNotFound();
    internal static InvalidOperationException ConfigProviderInvalid();
    internal static ConfigurationException ConfigProviderNotInstalled();
    internal static ConfigurationException ConfigProviderMissing();
    internal static ConfigurationException ConfigBaseNoChildNodes(XmlNode node);
    internal static ConfigurationException ConfigBaseElementsOnly(XmlNode node);
    internal static ConfigurationException ConfigUnrecognizedAttributes(XmlNode node);
    internal static ConfigurationException ConfigUnrecognizedElement(XmlNode node);
    internal static ConfigurationException ConfigSectionsUnique(string sectionName);
    internal static ConfigurationException ConfigRequiredAttributeMissing(string name, XmlNode node);
    internal static ConfigurationException ConfigRequiredAttributeEmpty(string name, XmlNode node);
    internal static ArgumentException ConnectionStringSyntax(int index);
    internal static ArgumentException KeywordNotSupported(string keyword);
    internal static ArgumentException UdlFileError(Exception inner);
    internal static ArgumentException InvalidUDL();
    internal static InvalidOperationException InvalidDataDirectory();
    internal static ArgumentException InvalidKeyname(string parameterName);
    internal static ArgumentException InvalidValue(string parameterName);
    internal static ArgumentException InvalidMinMaxPoolSizeValues();
    internal static ArgumentException ConvertFailed(Type fromType, Type toType, Exception innerException);
    internal static InvalidOperationException InvalidMixedUsageOfSecureAndClearCredential();
    internal static ArgumentException InvalidMixedArgumentOfSecureAndClearCredential();
    internal static InvalidOperationException InvalidMixedUsageOfSecureCredentialAndIntegratedSecurity();
    internal static ArgumentException InvalidMixedArgumentOfSecureCredentialAndIntegratedSecurity();
    internal static InvalidOperationException InvalidMixedUsageOfSecureCredentialAndContextConnection();
    internal static ArgumentException InvalidMixedArgumentOfSecureCredentialAndContextConnection();
    internal static InvalidOperationException InvalidMixedUsageOfAccessTokenAndContextConnection();
    internal static InvalidOperationException InvalidMixedUsageOfAccessTokenAndIntegratedSecurity();
    internal static InvalidOperationException InvalidMixedUsageOfAccessTokenAndUserIDPassword();
    internal static Exception InvalidMixedUsageOfAccessTokenAndCredential();
    internal static Exception InvalidMixedUsageOfAccessTokenAndAuthentication();
    internal static Exception InvalidMixedUsageOfCredentialAndAccessToken();
    internal static InvalidOperationException NoConnectionString();
    internal static NotImplementedException MethodNotImplemented(string methodName);
    internal static ConfigurationException ConfigUnableToLoadXmlMetaDataFile(string settingName);
    internal static ConfigurationException ConfigWrongNumberOfValues(string settingName);
    internal static Exception InvalidConnectionOptionValue(string key);
    internal static Exception InvalidConnectionOptionValueLength(string key, int limit);
    internal static Exception InvalidConnectionOptionValue(string key, Exception inner);
    internal static Exception MissingConnectionOptionValue(string key, string requiredAdditionalKey);
    internal static Exception InvalidXMLBadVersion();
    internal static Exception NotAPermissionElement();
    internal static Exception PermissionTypeMismatch();
    internal static Exception WrongType(Type got, Type expected);
    internal static Exception OdbcNoTypesFromProvider();
    internal static Exception PooledOpenTimeout();
    internal static Exception NonPooledOpenTimeout();
    internal static ArgumentException CollectionRemoveInvalidObject(Type itemType, ICollection collection);
    internal static ArgumentNullException CollectionNullValue(string parameter, Type collection, Type itemType);
    internal static IndexOutOfRangeException CollectionIndexInt32(int index, Type collection, int count);
    internal static IndexOutOfRangeException CollectionIndexString(Type itemType, string propertyName, string propertyValue, Type collection);
    internal static InvalidCastException CollectionInvalidType(Type collection, Type itemType, object invalidValue);
    internal static Exception CollectionUniqueValue(Type itemType, string propertyName, string propertyValue);
    internal static ArgumentException ParametersIsNotParent(Type parameterType, ICollection collection);
    internal static ArgumentException ParametersIsParent(Type parameterType, ICollection collection);
    internal static InvalidOperationException TransactionConnectionMismatch();
    internal static InvalidOperationException TransactionCompletedButNotDisposed();
    internal static InvalidOperationException TransactionRequired(string method);
    internal static InvalidOperationException MissingSelectCommand(string method);
    internal static InvalidOperationException ColumnSchemaExpression(string srcColumn, string cacheColumn);
    internal static InvalidOperationException ColumnSchemaMismatch(string srcColumn, Type srcType, DataColumn column);
    internal static InvalidOperationException ColumnSchemaMissing(string cacheColumn, string tableName, string srcColumn);
    internal static InvalidOperationException MissingColumnMapping(string srcColumn);
    internal static InvalidOperationException MissingTableSchema(string cacheTable, string srcTable);
    internal static InvalidOperationException MissingTableMapping(string srcTable);
    internal static InvalidOperationException MissingTableMappingDestination(string dstTable);
    internal static Exception InvalidSourceColumn(string parameter);
    internal static Exception ColumnsAddNullAttempt(string parameter);
    internal static Exception ColumnsDataSetColumn(string cacheColumn);
    internal static Exception ColumnsIndexInt32(int index, IColumnMappingCollection collection);
    internal static Exception ColumnsIndexSource(string srcColumn);
    internal static Exception ColumnsIsNotParent(ICollection collection);
    internal static Exception ColumnsIsParent(ICollection collection);
    internal static Exception ColumnsUniqueSourceColumn(string srcColumn);
    internal static Exception NotADataColumnMapping(object value);
    internal static Exception InvalidSourceTable(string parameter);
    internal static Exception TablesAddNullAttempt(string parameter);
    internal static Exception TablesDataSetTable(string cacheTable);
    internal static Exception TablesIndexInt32(int index, ITableMappingCollection collection);
    internal static Exception TablesIsNotParent(ICollection collection);
    internal static Exception TablesIsParent(ICollection collection);
    internal static Exception TablesSourceIndex(string srcTable);
    internal static Exception TablesUniqueSourceTable(string srcTable);
    internal static Exception NotADataTableMapping(object value);
    internal static InvalidOperationException CommandAsyncOperationCompleted();
    internal static Exception CommandTextRequired(string method);
    internal static InvalidOperationException ConnectionRequired(string method);
    internal static InvalidOperationException OpenConnectionRequired(string method, ConnectionState state);
    internal static InvalidOperationException UpdateConnectionRequired(StatementType statementType, bool isRowUpdatingCommand);
    internal static InvalidOperationException ConnectionRequired_Res(string method);
    internal static InvalidOperationException UpdateOpenConnectionRequired(StatementType statementType, bool isRowUpdatingCommand, ConnectionState state);
    internal static Exception NoStoredProcedureExists(string sproc);
    internal static Exception OpenReaderExists();
    internal static Exception OpenReaderExists(Exception e);
    internal static Exception TransactionCompleted();
    internal static Exception NonSeqByteAccess(long badIndex, long currIndex, string method);
    internal static Exception NegativeParameter(string parameterName);
    internal static Exception NumericToDecimalOverflow();
    internal static Exception ExceedsMaxDataLength(long specifiedLength, long maxLength);
    internal static Exception InvalidSeekOrigin(string parameterName);
    internal static Exception InvalidImplicitConversion(Type fromtype, string totype);
    internal static Exception InvalidMetaDataValue();
    internal static Exception NotRowType();
    internal static ArgumentException UnwantedStatementType(StatementType statementType);
    internal static InvalidOperationException NonSequentialColumnAccess(int badCol, int currCol);
    internal static Exception FillSchemaRequiresSourceTableName(string parameter);
    internal static Exception InvalidMaxRecords(string parameter, int max);
    internal static Exception InvalidStartRecord(string parameter, int start);
    internal static Exception FillRequires(string parameter);
    internal static Exception FillRequiresSourceTableName(string parameter);
    internal static Exception FillChapterAutoIncrement();
    internal static InvalidOperationException MissingDataReaderFieldType(int index);
    internal static InvalidOperationException OnlyOneTableForStartRecordOrMaxRecords();
    internal static ArgumentNullException UpdateRequiresNonNullDataSet(string parameter);
    internal static InvalidOperationException UpdateRequiresSourceTable(string defaultSrcTableName);
    internal static InvalidOperationException UpdateRequiresSourceTableName(string srcTable);
    internal static ArgumentNullException UpdateRequiresDataTable(string parameter);
    internal static Exception UpdateConcurrencyViolation(StatementType statementType, int affected, int expected, DataRow[] dataRows);
    internal static InvalidOperationException UpdateRequiresCommand(StatementType statementType, bool isRowUpdatingCommand);
    internal static ArgumentException UpdateMismatchRowTable(int i);
    internal static DataException RowUpdatedErrors();
    internal static DataException RowUpdatingErrors();
    internal static InvalidOperationException ResultsNotAllowedDuringBatch();
    internal static Exception InvalidCommandTimeout(int value);
    internal static Exception DeriveParametersNotSupported(IDbCommand value);
    internal static Exception UninitializedParameterSize(int index, Type dataType);
    internal static Exception PrepareParameterType(IDbCommand cmd);
    internal static Exception PrepareParameterSize(IDbCommand cmd);
    internal static Exception PrepareParameterScale(IDbCommand cmd, string type);
    internal static Exception MismatchedAsyncResult(string expectedMethod, string gotMethod);
    internal static Exception ConnectionIsDisabled(Exception InnerException);
    internal static Exception ClosedConnectionError();
    internal static Exception ConnectionAlreadyOpen(ConnectionState state);
    internal static Exception DelegatedTransactionPresent();
    internal static Exception TransactionPresent();
    internal static Exception LocalTransactionPresent();
    internal static Exception OpenConnectionPropertySet(string property, ConnectionState state);
    internal static Exception EmptyDatabaseName();
    internal static Exception DatabaseNameTooLong();
    internal static Exception InternalConnectionError(ConnectionError internalError);
    internal static Exception InternalError(InternalErrorCode internalError);
    internal static Exception InternalError(InternalErrorCode internalError, Exception innerException);
    internal static Exception InvalidConnectTimeoutValue();
    internal static Exception InvalidConnectRetryCountValue();
    internal static Exception InvalidConnectRetryIntervalValue();
    internal static Exception DataReaderNoData();
    internal static Exception DataReaderClosed(string method);
    internal static ArgumentOutOfRangeException InvalidSourceBufferIndex(int maxLen, long srcOffset, string parameterName);
    internal static ArgumentOutOfRangeException InvalidDestinationBufferIndex(int maxLen, int dstOffset, string parameterName);
    internal static IndexOutOfRangeException InvalidBufferSizeOrIndex(int numBytes, int bufferIndex);
    internal static Exception InvalidDataLength(long length);
    internal static InvalidOperationException AsyncOperationPending();
    internal static Exception StreamClosed(string method);
    internal static IOException ErrorReadingFromStream(Exception internalException);
    internal static InvalidOperationException DynamicSQLJoinUnsupported();
    internal static InvalidOperationException DynamicSQLNoTableInfo();
    internal static InvalidOperationException DynamicSQLNoKeyInfoDelete();
    internal static InvalidOperationException DynamicSQLNoKeyInfoUpdate();
    internal static InvalidOperationException DynamicSQLNoKeyInfoRowVersionDelete();
    internal static InvalidOperationException DynamicSQLNoKeyInfoRowVersionUpdate();
    internal static InvalidOperationException DynamicSQLNestedQuote(string name, string quote);
    internal static InvalidOperationException NoQuoteChange();
    internal static InvalidOperationException ComputerNameEx(int lastError);
    internal static InvalidOperationException MissingSourceCommand();
    internal static InvalidOperationException MissingSourceCommandConnection();
    internal static ArgumentException InvalidDataType(TypeCode typecode);
    internal static ArgumentException UnknownDataType(Type dataType);
    internal static ArgumentException DbTypeNotSupported(DbType type, Type enumtype);
    internal static ArgumentException UnknownDataTypeCode(Type dataType, TypeCode typeCode);
    internal static ArgumentException InvalidOffsetValue(int value);
    internal static ArgumentException InvalidSizeValue(int value);
    internal static ArgumentException ParameterValueOutOfRange(decimal value);
    internal static ArgumentException ParameterValueOutOfRange(SqlDecimal value);
    internal static ArgumentException ParameterValueOutOfRange(string value);
    internal static ArgumentException VersionDoesNotSupportDataType(string typeName);
    internal static Exception ParameterConversionFailed(object value, Type destType, Exception inner);
    internal static Exception ParametersMappingIndex(int index, IDataParameterCollection collection);
    internal static Exception ParametersSourceIndex(string parameterName, IDataParameterCollection collection, Type parameterType);
    internal static Exception ParameterNull(string parameter, IDataParameterCollection collection, Type parameterType);
    internal static Exception InvalidParameterType(IDataParameterCollection collection, Type parameterType, object invalidValue);
    internal static Exception ParallelTransactionsNotSupported(IDbConnection obj);
    internal static Exception TransactionZombied(IDbTransaction obj);
    internal static Exception DbRecordReadOnly(string methodname);
    internal static Exception OffsetOutOfRangeException();
    internal static Exception AmbigousCollectionName(string collectionName);
    internal static Exception CollectionNameIsNotUnique(string collectionName);
    internal static Exception DataTableDoesNotExist(string collectionName);
    internal static Exception IncorrectNumberOfDataSourceInformationRows();
    internal static ArgumentException InvalidRestrictionValue(string collectionName, string restrictionName, string restrictionValue);
    internal static Exception InvalidXml();
    internal static Exception InvalidXmlMissingColumn(string collectionName, string columnName);
    internal static Exception InvalidXmlInvalidValue(string collectionName, string columnName);
    internal static Exception MissingDataSourceInformationColumn();
    internal static Exception MissingRestrictionColumn();
    internal static Exception MissingRestrictionRow();
    internal static Exception NoColumns();
    internal static Exception QueryFailed(string collectionName, Exception e);
    internal static Exception TooManyRestrictions(string collectionName);
    internal static Exception UnableToBuildCollection(string collectionName);
    internal static Exception UndefinedCollection(string collectionName);
    internal static Exception UndefinedPopulationMechanism(string populationMechanism);
    internal static Exception UnsupportedVersion(string collectionName);
    internal static InvalidOperationException InvalidDateTimeDigits(string dataTypeName);
    internal static Exception InvalidFormatValue();
    internal static InvalidOperationException InvalidMaximumScale(string dataTypeName);
    internal static Exception LiteralValueIsInvalid(string dataTypeName);
    internal static Exception EvenLengthLiteralValue(string argumentName);
    internal static Exception HexDigitLiteralValue(string argumentName);
    internal static InvalidOperationException QuotePrefixNotSet(string method);
    internal static InvalidOperationException UnableToCreateBooleanLiteral();
    internal static Exception UnsupportedNativeDataTypeOleDb(string dataTypeName);
    internal static Exception InvalidArgumentValue(string methodName);
    internal static bool CompareInsensitiveInvariant(string strvalue, string strconst);
    internal static Delegate FindBuilder(MulticastDelegate mcd);
    internal static Transaction GetCurrentTransaction();
    internal static void SetCurrentTransaction(Transaction transaction);
    internal static IDtcTransaction GetOletxTransaction(Transaction transaction);
    internal static bool IsSysTxEqualSysEsTransaction();
    internal static bool NeedManualEnlistment();
    internal static void TimerCurrent(Int64& ticks);
    internal static long TimerCurrent();
    internal static long TimerFromSeconds(int seconds);
    internal static long TimerFromMilliseconds(long milliseconds);
    internal static bool TimerHasExpired(long timerExpire);
    internal static long TimerRemaining(long timerExpire);
    internal static long TimerRemainingMilliseconds(long timerExpire);
    internal static long TimerRemainingSeconds(long timerExpire);
    internal static long TimerToMilliseconds(long timerValue);
    internal static string MachineName();
    internal static string BuildQuotedString(string quotePrefix, string quoteSuffix, string unQuotedString);
    internal static Byte[] ByteArrayFromString(string hexString, string dataTypeName);
    internal static void EscapeSpecialCharacters(string unescapedString, StringBuilder escapedString);
    internal static string FixUpDecimalSeparator(string numericString, bool formatLiteral, string decimalSeparator, Char[] exponentSymbols);
    internal static string GetFullPath(string filename);
    internal static string GetComputerNameDnsFullyQualified();
    internal static Stream GetFileStream(string filename);
    internal static FileVersionInfo GetVersionInfo(string filename);
    internal static Stream GetXmlStreamFromValues(String[] values, string errorString);
    internal static Stream GetXmlStream(string value, string errorString);
    internal static object ClassesRootRegistryValue(string subkey, string queryvalue);
    internal static object LocalMachineRegistryValue(string subkey, string queryvalue);
    internal static void CheckVersionMDAC(bool ifodbcelseoledb);
    internal static bool RemoveStringQuotes(string quotePrefix, string quoteSuffix, string quotedString, String& unquotedString);
    internal static DataRow[] SelectAdapterRows(DataTable dataTable, bool sorted);
    internal static int StringLength(string inputString);
    internal static void BuildSchemaTableInfoTableNames(String[] columnNameArray);
    [ReliabilityContractAttribute("3", "1")]
internal static IntPtr IntPtrOffset(IntPtr pbase, int offset);
    internal static int IntPtrToInt32(IntPtr value);
    internal static int SrcCompare(string strA, string strB);
    internal static int DstCompare(string strA, string strB);
    internal static bool IsDirection(IDataParameter value, ParameterDirection condition);
    internal static bool IsEmpty(string str);
    internal static bool IsEmptyArray(String[] array);
    internal static bool IsNull(object value);
    internal static void IsNullOrSqlType(object value, Boolean& isNull, Boolean& isSqlType);
    internal static Version GetAssemblyVersion();
    internal static bool IsAzureSqlServerEndpoint(string dataSource);
}
internal class System.Data.Common.BigIntegerStorage : DataStorage {
    internal BigIntegerStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    internal static BigInteger ConvertToBigInteger(object value, IFormatProvider formatProvider);
    internal static object ConvertFromBigInteger(BigInteger value, Type type, IFormatProvider formatProvider);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.BooleanStorage : DataStorage {
    internal BooleanStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.ByteStorage : DataStorage {
    internal ByteStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
public enum System.Data.Common.CatalogLocation : Enum {
    public int value__;
    public static CatalogLocation Start;
    public static CatalogLocation End;
}
internal class System.Data.Common.CharStorage : DataStorage {
    internal CharStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
public class System.Data.Common.DataAdapter : Component {
    internal int _objectID;
    [ResDescriptionAttribute("DataAdapter_AcceptChangesDuringFill")]
[ResCategoryAttribute("DataCategory_Fill")]
[DefaultValueAttribute("True")]
public bool AcceptChangesDuringFill { get; public set; }
    [ResCategoryAttribute("DataCategory_Update")]
[DefaultValueAttribute("True")]
[ResDescriptionAttribute("DataAdapter_AcceptChangesDuringUpdate")]
public bool AcceptChangesDuringUpdate { get; public set; }
    [DefaultValueAttribute("False")]
[ResCategoryAttribute("DataCategory_Update")]
[ResDescriptionAttribute("DataAdapter_ContinueUpdateOnError")]
public bool ContinueUpdateOnError { get; public set; }
    [RefreshPropertiesAttribute("1")]
[ResDescriptionAttribute("DataAdapter_FillLoadOption")]
[ResCategoryAttribute("DataCategory_Fill")]
public LoadOption FillLoadOption { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ResDescriptionAttribute("DataAdapter_MissingMappingAction")]
[ResCategoryAttribute("DataCategory_Mapping")]
public MissingMappingAction MissingMappingAction { get; public set; }
    [ResDescriptionAttribute("DataAdapter_MissingSchemaAction")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ResCategoryAttribute("DataCategory_Mapping")]
public MissingSchemaAction MissingSchemaAction { get; public set; }
    internal int ObjectID { get; }
    [ResCategoryAttribute("DataCategory_Fill")]
[ResDescriptionAttribute("DataAdapter_ReturnProviderSpecificTypes")]
[DefaultValueAttribute("False")]
public bool ReturnProviderSpecificTypes { get; public set; }
    [ResDescriptionAttribute("DataAdapter_TableMappings")]
[ResCategoryAttribute("DataCategory_Mapping")]
[DesignerSerializationVisibilityAttribute("2")]
public DataTableMappingCollection TableMappings { get; }
    private ITableMappingCollection System.Data.IDataAdapter.TableMappings { get; }
    protected DataAdapter(DataAdapter from);
    private static DataAdapter();
    public bool get_AcceptChangesDuringFill();
    public void set_AcceptChangesDuringFill(bool value);
    [EditorBrowsableAttribute("1")]
public virtual bool ShouldSerializeAcceptChangesDuringFill();
    public bool get_AcceptChangesDuringUpdate();
    public void set_AcceptChangesDuringUpdate(bool value);
    public bool get_ContinueUpdateOnError();
    public void set_ContinueUpdateOnError(bool value);
    public LoadOption get_FillLoadOption();
    public void set_FillLoadOption(LoadOption value);
    [EditorBrowsableAttribute("1")]
public void ResetFillLoadOption();
    [EditorBrowsableAttribute("1")]
public virtual bool ShouldSerializeFillLoadOption();
    public sealed virtual MissingMappingAction get_MissingMappingAction();
    public sealed virtual void set_MissingMappingAction(MissingMappingAction value);
    public sealed virtual MissingSchemaAction get_MissingSchemaAction();
    public sealed virtual void set_MissingSchemaAction(MissingSchemaAction value);
    internal int get_ObjectID();
    public virtual bool get_ReturnProviderSpecificTypes();
    public virtual void set_ReturnProviderSpecificTypes(bool value);
    public DataTableMappingCollection get_TableMappings();
    private sealed virtual override ITableMappingCollection System.Data.IDataAdapter.get_TableMappings();
    protected virtual bool ShouldSerializeTableMappings();
    protected bool HasTableMappings();
    public void add_FillError(FillErrorEventHandler value);
    public void remove_FillError(FillErrorEventHandler value);
    [ObsoleteAttribute("CloneInternals() has been deprecated.  Use the DataAdapter(DataAdapter from) constructor.  http://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual DataAdapter CloneInternals();
    protected virtual DataTableMappingCollection CreateTableMappings();
    protected virtual void Dispose(bool disposing);
    public virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType);
    protected virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType, string srcTable, IDataReader dataReader);
    protected virtual DataTable FillSchema(DataTable dataTable, SchemaType schemaType, IDataReader dataReader);
    internal object FillSchemaFromReader(DataSet dataset, DataTable datatable, SchemaType schemaType, string srcTable, IDataReader dataReader);
    public virtual int Fill(DataSet dataSet);
    protected virtual int Fill(DataSet dataSet, string srcTable, IDataReader dataReader, int startRecord, int maxRecords);
    protected virtual int Fill(DataTable dataTable, IDataReader dataReader);
    protected virtual int Fill(DataTable[] dataTables, IDataReader dataReader, int startRecord, int maxRecords);
    internal int FillFromReader(DataSet dataset, DataTable datatable, string srcTable, DataReaderContainer dataReader, int startRecord, int maxRecords, DataColumn parentChapterColumn, object parentChapterValue);
    [EditorBrowsableAttribute("2")]
public virtual IDataParameter[] GetFillParameters();
    internal DataTableMapping GetTableMappingBySchemaAction(string sourceTableName, string dataSetTableName, MissingMappingAction mappingAction);
    internal int IndexOfDataSetTable(string dataSetTable);
    protected virtual void OnFillError(FillErrorEventArgs value);
    public virtual int Update(DataSet dataSet);
}
[TypeConverterAttribute("System.Data.Common.DataColumnMapping/DataColumnMappingConverter")]
public class System.Data.Common.DataColumnMapping : MarshalByRefObject {
    [ResCategoryAttribute("DataCategory_Mapping")]
[ResDescriptionAttribute("DataColumnMapping_DataSetColumn")]
[DefaultValueAttribute("")]
public string DataSetColumn { get; public set; }
    internal DataColumnMappingCollection Parent { get; internal set; }
    [DefaultValueAttribute("")]
[ResCategoryAttribute("DataCategory_Mapping")]
[ResDescriptionAttribute("DataColumnMapping_SourceColumn")]
public string SourceColumn { get; public set; }
    public DataColumnMapping(string sourceColumn, string dataSetColumn);
    public sealed virtual string get_DataSetColumn();
    public sealed virtual void set_DataSetColumn(string value);
    internal DataColumnMappingCollection get_Parent();
    internal void set_Parent(DataColumnMappingCollection value);
    public sealed virtual string get_SourceColumn();
    public sealed virtual void set_SourceColumn(string value);
    private sealed virtual override object System.ICloneable.Clone();
    [EditorBrowsableAttribute("2")]
public DataColumn GetDataColumnBySchemaAction(DataTable dataTable, Type dataType, MissingSchemaAction schemaAction);
    [EditorBrowsableAttribute("2")]
public static DataColumn GetDataColumnBySchemaAction(string sourceColumn, string dataSetColumn, DataTable dataTable, Type dataType, MissingSchemaAction schemaAction);
    internal static DataColumn CreateDataColumnBySchemaAction(string sourceColumn, string dataSetColumn, DataTable dataTable, Type dataType, MissingSchemaAction schemaAction);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.Data.Common.DataColumnMappingCollection : MarshalByRefObject {
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    private object System.Data.IColumnMappingCollection.Item { get; private set; }
    [ResDescriptionAttribute("DataColumnMappings_Count")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public int Count { get; }
    [BrowsableAttribute("False")]
[ResDescriptionAttribute("DataColumnMappings_Item")]
[DesignerSerializationVisibilityAttribute("0")]
public DataColumnMapping Item { get; public set; }
    [ResDescriptionAttribute("DataColumnMappings_Item")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DataColumnMapping Item { get; public set; }
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override object System.Data.IColumnMappingCollection.get_Item(string index);
    private sealed virtual override void System.Data.IColumnMappingCollection.set_Item(string index, object value);
    private sealed virtual override IColumnMapping System.Data.IColumnMappingCollection.Add(string sourceColumnName, string dataSetColumnName);
    private sealed virtual override IColumnMapping System.Data.IColumnMappingCollection.GetByDataSetColumn(string dataSetColumnName);
    public sealed virtual int get_Count();
    public DataColumnMapping get_Item(int index);
    public void set_Item(int index, DataColumnMapping value);
    public DataColumnMapping get_Item(string sourceColumn);
    public void set_Item(string sourceColumn, DataColumnMapping value);
    public sealed virtual int Add(object value);
    public DataColumnMapping Add(string sourceColumn, string dataSetColumn);
    public void AddRange(DataColumnMapping[] values);
    public void AddRange(Array values);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string value);
    public sealed virtual bool Contains(object value);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(DataColumnMapping[] array, int index);
    public DataColumnMapping GetByDataSetColumn(string value);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int IndexOf(object value);
    public sealed virtual int IndexOf(string sourceColumn);
    public int IndexOfDataSetColumn(string dataSetColumn);
    public sealed virtual void Insert(int index, object value);
    public void Insert(int index, DataColumnMapping value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void RemoveAt(string sourceColumn);
    public sealed virtual void Remove(object value);
    public void Remove(DataColumnMapping value);
    internal void ValidateSourceColumn(int index, string value);
    [EditorBrowsableAttribute("2")]
public static DataColumn GetDataColumn(DataColumnMappingCollection columnMappings, string sourceColumn, Type dataType, DataTable dataTable, MissingMappingAction mappingAction, MissingSchemaAction schemaAction);
    [EditorBrowsableAttribute("2")]
public static DataColumnMapping GetColumnMappingBySchemaAction(DataColumnMappingCollection columnMappings, string sourceColumn, MissingMappingAction mappingAction);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Common.DataRecordInternal : DbDataRecord {
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    internal DataRecordInternal(SchemaInfo[] schemaInfo, Object[] values, PropertyDescriptorCollection descriptors, FieldNameLookup fieldNameLookup);
    internal DataRecordInternal(Object[] values, PropertyDescriptorCollection descriptors, FieldNameLookup fieldNameLookup);
    internal void SetSchemaInfo(SchemaInfo[] schemaInfo);
    public virtual int get_FieldCount();
    public virtual int GetValues(Object[] values);
    public virtual string GetName(int i);
    public virtual object GetValue(int i);
    public virtual string GetDataTypeName(int i);
    public virtual Type GetFieldType(int i);
    public virtual int GetOrdinal(string name);
    public virtual object get_Item(int i);
    public virtual object get_Item(string name);
    public virtual bool GetBoolean(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public virtual char GetChar(int i);
    public virtual long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual float GetFloat(int i);
    public virtual double GetDouble(int i);
    public virtual string GetString(int i);
    public virtual decimal GetDecimal(int i);
    public virtual DateTime GetDateTime(int i);
    public virtual bool IsDBNull(int i);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
internal abstract class System.Data.Common.DataStorage : object {
    internal DataColumn Column;
    internal DataTable Table;
    internal Type DataType;
    internal StorageType StorageTypeCode;
    internal object NullValue;
    internal bool IsCloneable;
    internal bool IsCustomDefinedType;
    internal bool IsStringType;
    internal bool IsValueType;
    internal DataSetDateTime DateTimeMode { get; }
    internal IFormatProvider FormatProvider { get; }
    protected DataStorage(DataColumn column, Type type, object defaultValue, StorageType storageType);
    protected DataStorage(DataColumn column, Type type, object defaultValue, object nullValue, StorageType storageType);
    protected DataStorage(DataColumn column, Type type, object defaultValue, object nullValue, bool isICloneable, StorageType storageType);
    private static DataStorage();
    internal DataSetDateTime get_DateTimeMode();
    internal IFormatProvider get_FormatProvider();
    public virtual object Aggregate(Int32[] recordNos, AggregateType kind);
    public object AggregateCount(Int32[] recordNos);
    protected int CompareBits(int recordNo1, int recordNo2);
    public abstract virtual int Compare(int recordNo1, int recordNo2);
    public abstract virtual int CompareValueTo(int recordNo1, object value);
    public virtual object ConvertValue(object value);
    protected void CopyBits(int srcRecordNo, int dstRecordNo);
    public abstract virtual void Copy(int recordNo1, int recordNo2);
    public abstract virtual object Get(int recordNo);
    protected object GetBits(int recordNo);
    public virtual int GetStringLength(int record);
    protected bool HasValue(int recordNo);
    public virtual bool IsNull(int recordNo);
    public abstract virtual void Set(int recordNo, object value);
    protected void SetNullBit(int recordNo, bool flag);
    public virtual void SetCapacity(int capacity);
    public abstract virtual object ConvertXmlToObject(string s);
    public virtual object ConvertXmlToObject(XmlReader xmlReader, XmlRootAttribute xmlAttrib);
    public abstract virtual string ConvertObjectToXml(object value);
    public virtual void ConvertObjectToXml(object value, XmlWriter xmlWriter, XmlRootAttribute xmlAttrib);
    public static DataStorage CreateStorage(DataColumn column, Type dataType, StorageType typeCode);
    internal static StorageType GetStorageType(Type dataType);
    internal static Type GetTypeStorage(StorageType storageType);
    internal static bool IsTypeCustomType(Type type);
    internal static bool IsTypeCustomType(StorageType typeCode);
    internal static bool IsSqlType(StorageType storageType);
    public static bool IsSqlType(Type dataType);
    internal static void ImplementsInterfaces(StorageType typeCode, Type dataType, Boolean& sqlType, Boolean& nullable, Boolean& xmlSerializable, Boolean& changeTracking, Boolean& revertibleChangeTracking);
    internal static bool ImplementsINullableValue(StorageType typeCode, Type dataType);
    public static bool IsObjectNull(object value);
    public static bool IsObjectSqlNull(object value);
    internal object GetEmptyStorageInternal(int recordCount);
    internal void CopyValueInternal(int record, object store, BitArray nullbits, int storeIndex);
    internal void SetStorageInternal(object store, BitArray nullbits);
    protected abstract virtual object GetEmptyStorage(int recordCount);
    protected abstract virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected abstract virtual void SetStorage(object store, BitArray nullbits);
    protected void SetNullStorage(BitArray nullbits);
    internal static Type GetType(string value);
    internal static string GetQualifiedName(Type type);
}
[TypeConverterAttribute("System.Data.Common.DataTableMapping/DataTableMappingConverter")]
public class System.Data.Common.DataTableMapping : MarshalByRefObject {
    private IColumnMappingCollection System.Data.ITableMapping.ColumnMappings { get; }
    [DesignerSerializationVisibilityAttribute("2")]
[ResDescriptionAttribute("DataTableMapping_ColumnMappings")]
[ResCategoryAttribute("DataCategory_Mapping")]
public DataColumnMappingCollection ColumnMappings { get; }
    [DefaultValueAttribute("")]
[ResDescriptionAttribute("DataTableMapping_DataSetTable")]
[ResCategoryAttribute("DataCategory_Mapping")]
public string DataSetTable { get; public set; }
    internal DataTableMappingCollection Parent { get; internal set; }
    [ResDescriptionAttribute("DataTableMapping_SourceTable")]
[DefaultValueAttribute("")]
[ResCategoryAttribute("DataCategory_Mapping")]
public string SourceTable { get; public set; }
    public DataTableMapping(string sourceTable, string dataSetTable);
    public DataTableMapping(string sourceTable, string dataSetTable, DataColumnMapping[] columnMappings);
    private sealed virtual override IColumnMappingCollection System.Data.ITableMapping.get_ColumnMappings();
    public DataColumnMappingCollection get_ColumnMappings();
    public sealed virtual string get_DataSetTable();
    public sealed virtual void set_DataSetTable(string value);
    internal DataTableMappingCollection get_Parent();
    internal void set_Parent(DataTableMappingCollection value);
    public sealed virtual string get_SourceTable();
    public sealed virtual void set_SourceTable(string value);
    private sealed virtual override object System.ICloneable.Clone();
    [EditorBrowsableAttribute("2")]
public DataColumn GetDataColumn(string sourceColumn, Type dataType, DataTable dataTable, MissingMappingAction mappingAction, MissingSchemaAction schemaAction);
    [EditorBrowsableAttribute("2")]
public DataColumnMapping GetColumnMappingBySchemaAction(string sourceColumn, MissingMappingAction mappingAction);
    [EditorBrowsableAttribute("2")]
public DataTable GetDataTableBySchemaAction(DataSet dataSet, MissingSchemaAction schemaAction);
    public virtual string ToString();
}
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DataTableMappingCollectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ListBindableAttribute("False")]
[DefaultMemberAttribute("Item")]
public class System.Data.Common.DataTableMappingCollection : MarshalByRefObject {
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    private object System.Data.ITableMappingCollection.Item { get; private set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[ResDescriptionAttribute("DataTableMappings_Count")]
public int Count { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[ResDescriptionAttribute("DataTableMappings_Item")]
public DataTableMapping Item { get; public set; }
    [ResDescriptionAttribute("DataTableMappings_Item")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataTableMapping Item { get; public set; }
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override object System.Data.ITableMappingCollection.get_Item(string index);
    private sealed virtual override void System.Data.ITableMappingCollection.set_Item(string index, object value);
    private sealed virtual override ITableMapping System.Data.ITableMappingCollection.Add(string sourceTableName, string dataSetTableName);
    private sealed virtual override ITableMapping System.Data.ITableMappingCollection.GetByDataSetTable(string dataSetTableName);
    public sealed virtual int get_Count();
    public DataTableMapping get_Item(int index);
    public void set_Item(int index, DataTableMapping value);
    public DataTableMapping get_Item(string sourceTable);
    public void set_Item(string sourceTable, DataTableMapping value);
    public sealed virtual int Add(object value);
    public void AddRange(DataTableMapping[] values);
    public void AddRange(Array values);
    public DataTableMapping Add(string sourceTable, string dataSetTable);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string value);
    public sealed virtual bool Contains(object value);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(DataTableMapping[] array, int index);
    public DataTableMapping GetByDataSetTable(string dataSetTable);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int IndexOf(object value);
    public sealed virtual int IndexOf(string sourceTable);
    public int IndexOfDataSetTable(string dataSetTable);
    public sealed virtual void Insert(int index, object value);
    public void Insert(int index, DataTableMapping value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void RemoveAt(string sourceTable);
    public sealed virtual void Remove(object value);
    public void Remove(DataTableMapping value);
    internal void ValidateSourceTable(int index, string value);
    [EditorBrowsableAttribute("2")]
public static DataTableMapping GetTableMappingBySchemaAction(DataTableMappingCollection tableMappings, string sourceTable, string dataSetTable, MissingMappingAction mappingAction);
}
internal class System.Data.Common.DateTimeOffsetStorage : DataStorage {
    internal DateTimeOffsetStorage(DataColumn column);
    private static DateTimeOffsetStorage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.DateTimeStorage : DataStorage {
    internal DateTimeStorage(DataColumn column);
    private static DateTimeStorage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Common.DbColumn : object {
    public Nullable`1<bool> AllowDBNull { get; protected set; }
    public string BaseCatalogName { get; protected set; }
    public string BaseColumnName { get; protected set; }
    public string BaseSchemaName { get; protected set; }
    public string BaseServerName { get; protected set; }
    public string BaseTableName { get; protected set; }
    public string ColumnName { get; protected set; }
    public Nullable`1<int> ColumnOrdinal { get; protected set; }
    public Nullable`1<int> ColumnSize { get; protected set; }
    public Nullable`1<bool> IsAliased { get; protected set; }
    public Nullable`1<bool> IsAutoIncrement { get; protected set; }
    public Nullable`1<bool> IsExpression { get; protected set; }
    public Nullable`1<bool> IsHidden { get; protected set; }
    public Nullable`1<bool> IsIdentity { get; protected set; }
    public Nullable`1<bool> IsKey { get; protected set; }
    public Nullable`1<bool> IsLong { get; protected set; }
    public Nullable`1<bool> IsReadOnly { get; protected set; }
    public Nullable`1<bool> IsUnique { get; protected set; }
    public Nullable`1<int> NumericPrecision { get; protected set; }
    public Nullable`1<int> NumericScale { get; protected set; }
    public string UdtAssemblyQualifiedName { get; protected set; }
    public Type DataType { get; protected set; }
    public string DataTypeName { get; protected set; }
    public object Item { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowDBNull();
    [CompilerGeneratedAttribute]
protected void set_AllowDBNull(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_BaseCatalogName();
    [CompilerGeneratedAttribute]
protected void set_BaseCatalogName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseColumnName();
    [CompilerGeneratedAttribute]
protected void set_BaseColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseSchemaName();
    [CompilerGeneratedAttribute]
protected void set_BaseSchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseServerName();
    [CompilerGeneratedAttribute]
protected void set_BaseServerName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseTableName();
    [CompilerGeneratedAttribute]
protected void set_BaseTableName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
protected void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ColumnOrdinal();
    [CompilerGeneratedAttribute]
protected void set_ColumnOrdinal(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ColumnSize();
    [CompilerGeneratedAttribute]
protected void set_ColumnSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsAliased();
    [CompilerGeneratedAttribute]
protected void set_IsAliased(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsAutoIncrement();
    [CompilerGeneratedAttribute]
protected void set_IsAutoIncrement(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsExpression();
    [CompilerGeneratedAttribute]
protected void set_IsExpression(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsHidden();
    [CompilerGeneratedAttribute]
protected void set_IsHidden(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsIdentity();
    [CompilerGeneratedAttribute]
protected void set_IsIdentity(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsKey();
    [CompilerGeneratedAttribute]
protected void set_IsKey(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsLong();
    [CompilerGeneratedAttribute]
protected void set_IsLong(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReadOnly();
    [CompilerGeneratedAttribute]
protected void set_IsReadOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsUnique();
    [CompilerGeneratedAttribute]
protected void set_IsUnique(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumericPrecision();
    [CompilerGeneratedAttribute]
protected void set_NumericPrecision(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumericScale();
    [CompilerGeneratedAttribute]
protected void set_NumericScale(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_UdtAssemblyQualifiedName();
    [CompilerGeneratedAttribute]
protected void set_UdtAssemblyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public Type get_DataType();
    [CompilerGeneratedAttribute]
protected void set_DataType(Type value);
    [CompilerGeneratedAttribute]
public string get_DataTypeName();
    [CompilerGeneratedAttribute]
protected void set_DataTypeName(string value);
    public virtual object get_Item(string property);
}
public abstract class System.Data.Common.DbCommand : Component {
    [ResCategoryAttribute("DataCategory_Data")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
[ResDescriptionAttribute("DbCommand_CommandText")]
public string CommandText { get; public set; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DbCommand_CommandTimeout")]
public int CommandTimeout { get; public set; }
    [ResDescriptionAttribute("DbCommand_CommandType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Data")]
public CommandType CommandType { get; public set; }
    [ResDescriptionAttribute("DbCommand_Connection")]
[ResCategoryAttribute("DataCategory_Data")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public DbConnection Connection { get; public set; }
    private IDbConnection System.Data.IDbCommand.Connection { get; private set; }
    protected DbConnection DbConnection { get; protected set; }
    protected DbParameterCollection DbParameterCollection { get; }
    protected DbTransaction DbTransaction { get; protected set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("True")]
[DesignOnlyAttribute("True")]
public bool DesignTimeVisible { get; public set; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DbCommand_Parameters")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DbParameterCollection Parameters { get; }
    private IDataParameterCollection System.Data.IDbCommand.Parameters { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[ResDescriptionAttribute("DbCommand_Transaction")]
[DefaultValueAttribute("")]
public DbTransaction Transaction { get; public set; }
    private IDbTransaction System.Data.IDbCommand.Transaction { get; private set; }
    [ResCategoryAttribute("DataCategory_Update")]
[ResDescriptionAttribute("DbCommand_UpdatedRowSource")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public UpdateRowSource UpdatedRowSource { get; public set; }
    public abstract virtual string get_CommandText();
    public abstract virtual void set_CommandText(string value);
    public abstract virtual int get_CommandTimeout();
    public abstract virtual void set_CommandTimeout(int value);
    public abstract virtual CommandType get_CommandType();
    public abstract virtual void set_CommandType(CommandType value);
    public DbConnection get_Connection();
    public void set_Connection(DbConnection value);
    private sealed virtual override IDbConnection System.Data.IDbCommand.get_Connection();
    private sealed virtual override void System.Data.IDbCommand.set_Connection(IDbConnection value);
    protected abstract virtual DbConnection get_DbConnection();
    protected abstract virtual void set_DbConnection(DbConnection value);
    protected abstract virtual DbParameterCollection get_DbParameterCollection();
    protected abstract virtual DbTransaction get_DbTransaction();
    protected abstract virtual void set_DbTransaction(DbTransaction value);
    public abstract virtual bool get_DesignTimeVisible();
    public abstract virtual void set_DesignTimeVisible(bool value);
    public DbParameterCollection get_Parameters();
    private sealed virtual override IDataParameterCollection System.Data.IDbCommand.get_Parameters();
    public DbTransaction get_Transaction();
    public void set_Transaction(DbTransaction value);
    private sealed virtual override IDbTransaction System.Data.IDbCommand.get_Transaction();
    private sealed virtual override void System.Data.IDbCommand.set_Transaction(IDbTransaction value);
    public abstract virtual UpdateRowSource get_UpdatedRowSource();
    public abstract virtual void set_UpdatedRowSource(UpdateRowSource value);
    internal void CancelIgnoreFailure();
    public abstract virtual void Cancel();
    public DbParameter CreateParameter();
    private sealed virtual override IDbDataParameter System.Data.IDbCommand.CreateParameter();
    protected abstract virtual DbParameter CreateDbParameter();
    protected abstract virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public abstract virtual int ExecuteNonQuery();
    public DbDataReader ExecuteReader();
    private sealed virtual override IDataReader System.Data.IDbCommand.ExecuteReader();
    public DbDataReader ExecuteReader(CommandBehavior behavior);
    private sealed virtual override IDataReader System.Data.IDbCommand.ExecuteReader(CommandBehavior behavior);
    public Task`1<int> ExecuteNonQueryAsync();
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    public Task`1<DbDataReader> ExecuteReaderAsync();
    public Task`1<DbDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    public Task`1<DbDataReader> ExecuteReaderAsync(CommandBehavior behavior);
    public Task`1<DbDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public Task`1<object> ExecuteScalarAsync();
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public abstract virtual object ExecuteScalar();
    public abstract virtual void Prepare();
}
public abstract class System.Data.Common.DbCommandBuilder : Component {
    [ResCategoryAttribute("DataCategory_Update")]
[ResDescriptionAttribute("DbCommandBuilder_ConflictOption")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ConflictOption ConflictOption { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ResDescriptionAttribute("DbCommandBuilder_CatalogLocation")]
[ResCategoryAttribute("DataCategory_Schema")]
public CatalogLocation CatalogLocation { get; public set; }
    [ResDescriptionAttribute("DbCommandBuilder_CatalogSeparator")]
[DefaultValueAttribute(".")]
[ResCategoryAttribute("DataCategory_Schema")]
public string CatalogSeparator { get; public set; }
    [ResDescriptionAttribute("DbCommandBuilder_DataAdapter")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DbDataAdapter DataAdapter { get; public set; }
    internal int ParameterNameMaxLength { get; }
    internal string ParameterNamePattern { get; }
    [ResDescriptionAttribute("DbCommandBuilder_QuotePrefix")]
[DefaultValueAttribute("")]
[ResCategoryAttribute("DataCategory_Schema")]
public string QuotePrefix { get; public set; }
    [ResCategoryAttribute("DataCategory_Schema")]
[ResDescriptionAttribute("DbCommandBuilder_QuoteSuffix")]
[DefaultValueAttribute("")]
public string QuoteSuffix { get; public set; }
    [ResCategoryAttribute("DataCategory_Schema")]
[ResDescriptionAttribute("DbCommandBuilder_SchemaSeparator")]
[DefaultValueAttribute(".")]
public string SchemaSeparator { get; public set; }
    [DefaultValueAttribute("False")]
[ResCategoryAttribute("DataCategory_Schema")]
[ResDescriptionAttribute("DbCommandBuilder_SetAllValues")]
public bool SetAllValues { get; public set; }
    public virtual ConflictOption get_ConflictOption();
    public virtual void set_ConflictOption(ConflictOption value);
    public virtual CatalogLocation get_CatalogLocation();
    public virtual void set_CatalogLocation(CatalogLocation value);
    public virtual string get_CatalogSeparator();
    public virtual void set_CatalogSeparator(string value);
    public DbDataAdapter get_DataAdapter();
    public void set_DataAdapter(DbDataAdapter value);
    internal int get_ParameterNameMaxLength();
    internal string get_ParameterNamePattern();
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    public virtual string get_SchemaSeparator();
    public virtual void set_SchemaSeparator(string value);
    public bool get_SetAllValues();
    public void set_SetAllValues(bool value);
    protected virtual DataTable GetSchemaTable(DbCommand sourceCommand);
    protected virtual void Dispose(bool disposing);
    internal DbConnection GetConnection();
    public DbCommand GetInsertCommand();
    public DbCommand GetInsertCommand(bool useColumnsForParameterNames);
    internal DbCommand GetInsertCommand(DataRow dataRow, bool useColumnsForParameterNames);
    public DbCommand GetUpdateCommand();
    public DbCommand GetUpdateCommand(bool useColumnsForParameterNames);
    internal DbCommand GetUpdateCommand(DataRow dataRow, bool useColumnsForParameterNames);
    public DbCommand GetDeleteCommand();
    public DbCommand GetDeleteCommand(bool useColumnsForParameterNames);
    internal DbCommand GetDeleteCommand(DataRow dataRow, bool useColumnsForParameterNames);
    protected virtual DbCommand InitializeCommand(DbCommand command);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public virtual void RefreshSchema();
    protected void RowUpdatingHandler(RowUpdatingEventArgs rowUpdatingEvent);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
    protected abstract virtual void ApplyParameterInfo(DbParameter parameter, DataRow row, StatementType statementType, bool whereClause);
    protected abstract virtual string GetParameterName(int parameterOrdinal);
    protected abstract virtual string GetParameterName(string parameterName);
    protected abstract virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected abstract virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    internal static String[] ParseProcedureName(string name, string quotePrefix, string quoteSuffix);
}
public abstract class System.Data.Common.DbConnection : Component {
    internal bool _supressStateChangeForReconnection;
    [ResCategoryAttribute("DataCategory_Data")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
[SettingsBindableAttribute("True")]
[RecommendedAsConfigurableAttribute("True")]
public string ConnectionString { get; public set; }
    [ResCategoryAttribute("DataCategory_Data")]
public int ConnectionTimeout { get; }
    [ResCategoryAttribute("DataCategory_Data")]
public string Database { get; }
    [ResCategoryAttribute("DataCategory_Data")]
public string DataSource { get; }
    protected DbProviderFactory DbProviderFactory { get; }
    internal DbProviderFactory ProviderFactory { get; }
    [BrowsableAttribute("False")]
public string ServerVersion { get; }
    [BrowsableAttribute("False")]
[ResDescriptionAttribute("DbConnection_State")]
public ConnectionState State { get; }
    internal bool ForceNewConnection { get; internal set; }
    public abstract virtual string get_ConnectionString();
    public abstract virtual void set_ConnectionString(string value);
    public virtual int get_ConnectionTimeout();
    public abstract virtual string get_Database();
    public abstract virtual string get_DataSource();
    protected virtual DbProviderFactory get_DbProviderFactory();
    internal DbProviderFactory get_ProviderFactory();
    public abstract virtual string get_ServerVersion();
    public abstract virtual ConnectionState get_State();
    public virtual void add_StateChange(StateChangeEventHandler value);
    public virtual void remove_StateChange(StateChangeEventHandler value);
    protected abstract virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public DbTransaction BeginTransaction();
    public DbTransaction BeginTransaction(IsolationLevel isolationLevel);
    private sealed virtual override IDbTransaction System.Data.IDbConnection.BeginTransaction();
    private sealed virtual override IDbTransaction System.Data.IDbConnection.BeginTransaction(IsolationLevel isolationLevel);
    public abstract virtual void Close();
    public abstract virtual void ChangeDatabase(string databaseName);
    public DbCommand CreateCommand();
    private sealed virtual override IDbCommand System.Data.IDbConnection.CreateCommand();
    protected abstract virtual DbCommand CreateDbCommand();
    public virtual void EnlistTransaction(Transaction transaction);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    protected virtual void OnStateChange(StateChangeEventArgs stateChange);
    [CompilerGeneratedAttribute]
internal bool get_ForceNewConnection();
    [CompilerGeneratedAttribute]
internal void set_ForceNewConnection(bool value);
    public abstract virtual void Open();
    public Task OpenAsync();
    public virtual Task OpenAsync(CancellationToken cancellationToken);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Common.DbConnectionOptions : object {
    internal static string DataDirectory;
    internal NameValuePair KeyChain;
    internal bool HasPasswordKeyword;
    internal bool HasUserIdKeyword;
    internal bool UseOdbcRules;
    internal bool HasBlankPassword { get; }
    internal bool HasPersistablePassword { get; }
    public bool IsEmpty { get; }
    internal Hashtable Parsetable { get; }
    public ICollection Keys { get; }
    public string Item { get; }
    public DbConnectionOptions(string connectionString);
    public DbConnectionOptions(string connectionString, Hashtable synonyms, bool useOdbcRules);
    protected DbConnectionOptions(DbConnectionOptions connectionOptions);
    private static DbConnectionOptions();
    public string UsersConnectionString(bool hidePassword);
    internal string UsersConnectionStringForTrace();
    internal bool get_HasBlankPassword();
    internal bool get_HasPersistablePassword();
    public bool get_IsEmpty();
    internal Hashtable get_Parsetable();
    public ICollection get_Keys();
    public string get_Item(string keyword);
    internal static void AppendKeyValuePairBuilder(StringBuilder builder, string keyName, string keyValue, bool useOdbcRules);
    public bool ConvertValueToBoolean(string keyName, bool defaultValue);
    internal static bool ConvertValueToBooleanInternal(string keyName, string stringValue);
    public bool ConvertValueToIntegratedSecurity();
    internal bool ConvertValueToIntegratedSecurityInternal(string stringValue);
    public int ConvertValueToInt32(string keyName, int defaultValue);
    internal static int ConvertToInt32Internal(string keyname, string stringValue);
    public string ConvertValueToString(string keyName, string defaultValue);
    public bool ContainsKey(string keyword);
    protected internal virtual PermissionSet CreatePermissionSet();
    internal void DemandPermission();
    protected internal virtual string Expand();
    internal static string ExpandDataDirectory(string keyword, string value, String& datadir);
    internal string ExpandDataDirectories(String& filename, Int32& position);
    internal string ExpandKeyword(string keyword, string replacementValue);
    internal static int GetKeyValuePair(string connectionString, int currentPosition, StringBuilder buffer, bool useOdbcRules, String& keyname, String& keyvalue);
    internal NameValuePair ReplacePasswordPwd(String& constr, bool fakePassword);
    internal static void ValidateKeyValuePair(string keyword, string value);
}
internal class System.Data.Common.DbConnectionPoolKey : object {
    internal string ConnectionString { get; internal set; }
    internal DbConnectionPoolKey(string connectionString);
    protected DbConnectionPoolKey(DbConnectionPoolKey key);
    private sealed virtual override object System.ICloneable.Clone();
    internal virtual string get_ConnectionString();
    internal virtual void set_ConnectionString(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Common.DBConnectionString : object {
    internal KeyRestrictionBehavior Behavior { get; }
    internal string ConnectionString { get; }
    internal bool IsEmpty { get; }
    internal NameValuePair KeyChain { get; }
    internal string Restrictions { get; }
    internal string Item { get; }
    internal DBConnectionString(string value, string restrictions, KeyRestrictionBehavior behavior, Hashtable synonyms, bool useOdbcRules);
    internal DBConnectionString(DbConnectionOptions connectionOptions);
    internal KeyRestrictionBehavior get_Behavior();
    internal string get_ConnectionString();
    internal bool get_IsEmpty();
    internal NameValuePair get_KeyChain();
    internal string get_Restrictions();
    internal string get_Item(string keyword);
    internal bool ContainsKey(string keyword);
    internal DBConnectionString Intersect(DBConnectionString entry);
    internal bool IsSupersetOf(DBConnectionString entry);
    internal static String[] RemoveDuplicates(String[] restrictions);
}
[DefaultMemberAttribute("Item")]
public class System.Data.Common.DbConnectionStringBuilder : object {
    internal int _objectID;
    private object System.Collections.IDictionary.Item { get; private set; }
    [BrowsableAttribute("False")]
public object Item { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[DesignOnlyAttribute("True")]
public bool BrowsableConnectionString { get; public set; }
    [RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DbConnectionString_ConnectionString")]
public string ConnectionString { get; public set; }
    [BrowsableAttribute("False")]
public int Count { get; }
    [BrowsableAttribute("False")]
public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]
public bool IsFixedSize { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    [BrowsableAttribute("False")]
public ICollection Keys { get; }
    internal int ObjectID { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    [BrowsableAttribute("False")]
public ICollection Values { get; }
    public DbConnectionStringBuilder(bool useOdbcRules);
    private sealed virtual override object System.Collections.IDictionary.get_Item(object keyword);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object keyword, object value);
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public bool get_BrowsableConnectionString();
    public void set_BrowsableConnectionString(bool value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public virtual bool get_IsFixedSize();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public virtual ICollection get_Keys();
    internal int get_ObjectID();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public virtual ICollection get_Values();
    internal virtual string ConvertValueToString(object value);
    private sealed virtual override void System.Collections.IDictionary.Add(object keyword, object value);
    public void Add(string keyword, object value);
    public static void AppendKeyValuePair(StringBuilder builder, string keyword, string value);
    public static void AppendKeyValuePair(StringBuilder builder, string keyword, string value, bool useOdbcRules);
    public virtual void Clear();
    protected internal void ClearPropertyDescriptors();
    private sealed virtual override bool System.Collections.IDictionary.Contains(object keyword);
    public virtual bool ContainsKey(string keyword);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public virtual bool EquivalentTo(DbConnectionStringBuilder connectionStringBuilder);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Remove(object keyword);
    public virtual bool Remove(string keyword);
    public virtual bool ShouldSerialize(string keyword);
    public virtual string ToString();
    public virtual bool TryGetValue(string keyword, Object& value);
    internal Attribute[] GetAttributesFromCollection(AttributeCollection collection);
    private PropertyDescriptorCollection GetProperties();
    protected virtual void GetProperties(Hashtable propertyDescriptors);
    private PropertyDescriptorCollection GetProperties(Attribute[] attributes);
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
internal class System.Data.Common.DbConnectionStringBuilderDescriptor : PropertyDescriptor {
    internal bool RefreshOnChange { get; internal set; }
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    internal DbConnectionStringBuilderDescriptor(string propertyName, Type componentType, Type propertyType, bool isReadOnly, Attribute[] attributes);
    internal bool get_RefreshOnChange();
    internal void set_RefreshOnChange(bool value);
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
internal static class System.Data.Common.DbConnectionStringBuilderUtil : object {
    internal static bool ConvertToBoolean(object value);
    internal static bool ConvertToIntegratedSecurity(object value);
    internal static int ConvertToInt32(object value);
    internal static string ConvertToString(object value);
    internal static bool TryConvertToPoolBlockingPeriod(string value, PoolBlockingPeriod& result);
    internal static bool IsValidPoolBlockingPeriodValue(PoolBlockingPeriod value);
    internal static string PoolBlockingPeriodToString(PoolBlockingPeriod value);
    internal static PoolBlockingPeriod ConvertToPoolBlockingPeriod(string keyword, object value);
    internal static bool TryConvertToApplicationIntent(string value, ApplicationIntent& result);
    internal static bool IsValidApplicationIntentValue(ApplicationIntent value);
    internal static string ApplicationIntentToString(ApplicationIntent value);
    internal static ApplicationIntent ConvertToApplicationIntent(string keyword, object value);
    internal static bool TryConvertToAuthenticationType(string value, SqlAuthenticationMethod& result);
    internal static bool TryConvertToColumnEncryptionSetting(string value, SqlConnectionColumnEncryptionSetting& result);
    internal static bool IsValidColumnEncryptionSetting(SqlConnectionColumnEncryptionSetting value);
    internal static string ColumnEncryptionSettingToString(SqlConnectionColumnEncryptionSetting value);
    internal static bool IsValidAuthenticationTypeValue(SqlAuthenticationMethod value);
    internal static string AuthenticationTypeToString(SqlAuthenticationMethod value);
    internal static SqlAuthenticationMethod ConvertToAuthenticationType(string keyword, object value);
    internal static SqlConnectionColumnEncryptionSetting ConvertToColumnEncryptionSetting(string keyword, object value);
}
internal static class System.Data.Common.DbConnectionStringDefaults : object {
    internal static string Driver;
    internal static string Dsn;
    internal static bool AdoNetPooler;
    internal static string FileName;
    internal static int OleDbServices;
    internal static string Provider;
    internal static bool Unicode;
    internal static bool OmitOracleConnectionName;
    internal static ApplicationIntent ApplicationIntent;
    internal static string ApplicationName;
    internal static bool AsynchronousProcessing;
    internal static string AttachDBFilename;
    internal static int ConnectTimeout;
    internal static bool ConnectionReset;
    internal static bool ContextConnection;
    internal static string CurrentLanguage;
    internal static string DataSource;
    internal static bool Encrypt;
    internal static bool Enlist;
    internal static string FailoverPartner;
    internal static string InitialCatalog;
    internal static bool IntegratedSecurity;
    internal static int LoadBalanceTimeout;
    internal static bool MultipleActiveResultSets;
    internal static bool MultiSubnetFailover;
    internal static bool TransparentNetworkIPResolution;
    internal static int MaxPoolSize;
    internal static int MinPoolSize;
    internal static string NetworkLibrary;
    internal static int PacketSize;
    internal static string Password;
    internal static bool PersistSecurityInfo;
    internal static bool Pooling;
    internal static bool TrustServerCertificate;
    internal static string TypeSystemVersion;
    internal static string UserID;
    internal static bool UserInstance;
    internal static bool Replication;
    internal static string WorkstationID;
    internal static string TransactionBinding;
    internal static int ConnectRetryCount;
    internal static int ConnectRetryInterval;
    internal static SqlAuthenticationMethod Authentication;
    internal static SqlConnectionColumnEncryptionSetting ColumnEncryptionSetting;
    internal static string EnclaveAttestationUrl;
    internal static PoolBlockingPeriod PoolBlockingPeriod;
    private static DbConnectionStringDefaults();
}
public abstract class System.Data.Common.DbDataAdapter : DataAdapter {
    public static string DefaultSourceTableName;
    internal static object ParameterValueNonNullValue;
    internal static object ParameterValueNullValue;
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DbCommand DeleteCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; private set; }
    protected internal CommandBehavior FillCommandBehavior { get; protected internal set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DbCommand InsertCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; private set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DbCommand SelectCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; private set; }
    [DefaultValueAttribute("1")]
[ResDescriptionAttribute("DbDataAdapter_UpdateBatchSize")]
[ResCategoryAttribute("DataCategory_Update")]
public int UpdateBatchSize { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DbCommand UpdateCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; private set; }
    protected DbDataAdapter(DbDataAdapter adapter);
    private static DbDataAdapter();
    public DbCommand get_DeleteCommand();
    public void set_DeleteCommand(DbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value);
    protected internal CommandBehavior get_FillCommandBehavior();
    protected internal void set_FillCommandBehavior(CommandBehavior value);
    public DbCommand get_InsertCommand();
    public void set_InsertCommand(DbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_InsertCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value);
    public DbCommand get_SelectCommand();
    public void set_SelectCommand(DbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_SelectCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value);
    public virtual int get_UpdateBatchSize();
    public virtual void set_UpdateBatchSize(int value);
    public DbCommand get_UpdateCommand();
    public void set_UpdateCommand(DbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value);
    protected virtual int AddToBatch(IDbCommand command);
    protected virtual void ClearBatch();
    private sealed virtual override object System.ICloneable.Clone();
    protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual void Dispose(bool disposing);
    protected virtual int ExecuteBatch();
    public DataTable FillSchema(DataTable dataTable, SchemaType schemaType);
    public virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType);
    public DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType, string srcTable);
    protected virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType, IDbCommand command, string srcTable, CommandBehavior behavior);
    protected virtual DataTable FillSchema(DataTable dataTable, SchemaType schemaType, IDbCommand command, CommandBehavior behavior);
    public virtual int Fill(DataSet dataSet);
    public int Fill(DataSet dataSet, string srcTable);
    public int Fill(DataSet dataSet, int startRecord, int maxRecords, string srcTable);
    protected virtual int Fill(DataSet dataSet, int startRecord, int maxRecords, string srcTable, IDbCommand command, CommandBehavior behavior);
    public int Fill(DataTable dataTable);
    public int Fill(int startRecord, int maxRecords, DataTable[] dataTables);
    protected virtual int Fill(DataTable dataTable, IDbCommand command, CommandBehavior behavior);
    protected virtual int Fill(DataTable[] dataTables, int startRecord, int maxRecords, IDbCommand command, CommandBehavior behavior);
    protected virtual IDataParameter GetBatchedParameter(int commandIdentifier, int parameterIndex);
    protected virtual bool GetBatchedRecordsAffected(int commandIdentifier, Int32& recordsAffected, Exception& error);
    [EditorBrowsableAttribute("2")]
public virtual IDataParameter[] GetFillParameters();
    internal DataTableMapping GetTableMapping(DataTable dataTable);
    protected virtual void InitializeBatching();
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
    protected virtual void TerminateBatching();
    public virtual int Update(DataSet dataSet);
    public int Update(DataRow[] dataRows);
    public int Update(DataTable dataTable);
    public int Update(DataSet dataSet, string srcTable);
    protected virtual int Update(DataRow[] dataRows, DataTableMapping tableMapping);
}
public abstract class System.Data.Common.DBDataPermission : CodeAccessPermission {
    public bool AllowBlankPassword { get; public set; }
    protected DBDataPermission(PermissionState state);
    [ObsoleteAttribute("DBDataPermission(PermissionState state,Boolean allowBlankPassword) has been deprecated.  Use the DBDataPermission(PermissionState.None) constructor.  http://go.microsoft.com/fwlink/?linkid=14202", "True")]
protected DBDataPermission(PermissionState state, bool allowBlankPassword);
    protected DBDataPermission(DBDataPermission permission);
    protected DBDataPermission(DBDataPermissionAttribute permissionAttribute);
    internal DBDataPermission(DbConnectionOptions connectionOptions);
    public bool get_AllowBlankPassword();
    public void set_AllowBlankPassword(bool value);
    public virtual void Add(string connectionString, string restrictions, KeyRestrictionBehavior behavior);
    internal void AddPermissionEntry(DBConnectionString entry);
    protected void Clear();
    public virtual IPermission Copy();
    protected virtual DBDataPermission CreateInstance();
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual IPermission Union(IPermission target);
    public virtual void FromXml(SecurityElement securityElement);
    public virtual SecurityElement ToXml();
}
[AttributeUsageAttribute("109")]
public abstract class System.Data.Common.DBDataPermissionAttribute : CodeAccessSecurityAttribute {
    public bool AllowBlankPassword { get; public set; }
    public string ConnectionString { get; public set; }
    public KeyRestrictionBehavior KeyRestrictionBehavior { get; public set; }
    public string KeyRestrictions { get; public set; }
    protected DBDataPermissionAttribute(SecurityAction action);
    public bool get_AllowBlankPassword();
    public void set_AllowBlankPassword(bool value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public KeyRestrictionBehavior get_KeyRestrictionBehavior();
    public void set_KeyRestrictionBehavior(KeyRestrictionBehavior value);
    public string get_KeyRestrictions();
    public void set_KeyRestrictions(string value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeConnectionString();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeKeyRestrictions();
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Common.DbDataReader : MarshalByRefObject {
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int VisibleFieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public abstract virtual int get_Depth();
    public abstract virtual int get_FieldCount();
    public abstract virtual bool get_HasRows();
    public abstract virtual bool get_IsClosed();
    public abstract virtual int get_RecordsAffected();
    public virtual int get_VisibleFieldCount();
    public abstract virtual object get_Item(int ordinal);
    public abstract virtual object get_Item(string name);
    public virtual void Close();
    [EditorBrowsableAttribute("1")]
public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual string GetDataTypeName(int ordinal);
    [EditorBrowsableAttribute("1")]
public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual Type GetFieldType(int ordinal);
    public abstract virtual string GetName(int ordinal);
    public abstract virtual int GetOrdinal(string name);
    public virtual DataTable GetSchemaTable();
    public abstract virtual bool GetBoolean(int ordinal);
    public abstract virtual byte GetByte(int ordinal);
    public abstract virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual char GetChar(int ordinal);
    public abstract virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    [EditorBrowsableAttribute("1")]
public DbDataReader GetData(int ordinal);
    private sealed virtual override IDataReader System.Data.IDataRecord.GetData(int ordinal);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public abstract virtual DateTime GetDateTime(int ordinal);
    public abstract virtual decimal GetDecimal(int ordinal);
    public abstract virtual double GetDouble(int ordinal);
    public abstract virtual float GetFloat(int ordinal);
    public abstract virtual Guid GetGuid(int ordinal);
    public abstract virtual short GetInt16(int ordinal);
    public abstract virtual int GetInt32(int ordinal);
    public abstract virtual long GetInt64(int ordinal);
    [EditorBrowsableAttribute("1")]
public virtual Type GetProviderSpecificFieldType(int ordinal);
    [EditorBrowsableAttribute("1")]
public virtual object GetProviderSpecificValue(int ordinal);
    [EditorBrowsableAttribute("1")]
public virtual int GetProviderSpecificValues(Object[] values);
    public abstract virtual string GetString(int ordinal);
    public virtual Stream GetStream(int ordinal);
    public virtual TextReader GetTextReader(int ordinal);
    public abstract virtual object GetValue(int ordinal);
    public virtual T GetFieldValue(int ordinal);
    public Task`1<T> GetFieldValueAsync(int ordinal);
    public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public abstract virtual int GetValues(Object[] values);
    public abstract virtual bool IsDBNull(int ordinal);
    public Task`1<bool> IsDBNullAsync(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    public abstract virtual bool NextResult();
    public abstract virtual bool Read();
    public Task`1<bool> ReadAsync();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    public Task`1<bool> NextResultAsync();
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class System.Data.Common.DbDataReaderExtensions : object {
    [ExtensionAttribute]
public static ReadOnlyCollection`1<DbColumn> GetColumnSchema(DbDataReader reader);
    [ExtensionAttribute]
public static bool CanGetColumnSchema(DbDataReader reader);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Common.DbDataRecord : object {
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public abstract virtual int get_FieldCount();
    public abstract virtual object get_Item(int i);
    public abstract virtual object get_Item(string name);
    public abstract virtual bool GetBoolean(int i);
    public abstract virtual byte GetByte(int i);
    public abstract virtual long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public abstract virtual char GetChar(int i);
    public abstract virtual long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public sealed virtual IDataReader GetData(int i);
    protected virtual DbDataReader GetDbDataReader(int i);
    public abstract virtual string GetDataTypeName(int i);
    public abstract virtual DateTime GetDateTime(int i);
    public abstract virtual decimal GetDecimal(int i);
    public abstract virtual double GetDouble(int i);
    public abstract virtual Type GetFieldType(int i);
    public abstract virtual float GetFloat(int i);
    public abstract virtual Guid GetGuid(int i);
    public abstract virtual short GetInt16(int i);
    public abstract virtual int GetInt32(int i);
    public abstract virtual long GetInt64(int i);
    public abstract virtual string GetName(int i);
    public abstract virtual int GetOrdinal(string name);
    public abstract virtual string GetString(int i);
    public abstract virtual object GetValue(int i);
    public abstract virtual int GetValues(Object[] values);
    public abstract virtual bool IsDBNull(int i);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
public abstract class System.Data.Common.DbDataSourceEnumerator : object {
    public abstract virtual DataTable GetDataSources();
}
public class System.Data.Common.DbEnumerator : object {
    internal IDataReader _reader;
    internal DbDataRecord _current;
    internal SchemaInfo[] _schemaInfo;
    internal PropertyDescriptorCollection _descriptors;
    public object Current { get; }
    public DbEnumerator(IDataReader reader);
    public DbEnumerator(IDataReader reader, bool closeReader);
    public DbEnumerator(DbDataReader reader);
    public DbEnumerator(DbDataReader reader, bool closeReader);
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    [EditorBrowsableAttribute("1")]
public sealed virtual void Reset();
}
public abstract class System.Data.Common.DbException : ExternalException {
    protected DbException(string message);
    protected DbException(string message, Exception innerException);
    protected DbException(string message, int errorCode);
    protected DbException(SerializationInfo info, StreamingContext context);
}
public static class System.Data.Common.DbMetaDataCollectionNames : object {
    public static string MetaDataCollections;
    public static string DataSourceInformation;
    public static string DataTypes;
    public static string Restrictions;
    public static string ReservedWords;
    private static DbMetaDataCollectionNames();
}
public static class System.Data.Common.DbMetaDataColumnNames : object {
    public static string CollectionName;
    public static string ColumnSize;
    public static string CompositeIdentifierSeparatorPattern;
    public static string CreateFormat;
    public static string CreateParameters;
    public static string DataSourceProductName;
    public static string DataSourceProductVersion;
    public static string DataType;
    public static string DataSourceProductVersionNormalized;
    public static string GroupByBehavior;
    public static string IdentifierCase;
    public static string IdentifierPattern;
    public static string IsAutoIncrementable;
    public static string IsBestMatch;
    public static string IsCaseSensitive;
    public static string IsConcurrencyType;
    public static string IsFixedLength;
    public static string IsFixedPrecisionScale;
    public static string IsLiteralSupported;
    public static string IsLong;
    public static string IsNullable;
    public static string IsSearchable;
    public static string IsSearchableWithLike;
    public static string IsUnsigned;
    public static string LiteralPrefix;
    public static string LiteralSuffix;
    public static string MaximumScale;
    public static string MinimumScale;
    public static string NumberOfIdentifierParts;
    public static string NumberOfRestrictions;
    public static string OrderByColumnsInSelect;
    public static string ParameterMarkerFormat;
    public static string ParameterMarkerPattern;
    public static string ParameterNameMaxLength;
    public static string ParameterNamePattern;
    public static string ProviderDbType;
    public static string QuotedIdentifierCase;
    public static string QuotedIdentifierPattern;
    public static string ReservedWord;
    public static string StatementSeparatorPattern;
    public static string StringLiteralPattern;
    public static string SupportedJoinOperators;
    public static string TypeName;
    private static DbMetaDataColumnNames();
}
public abstract class System.Data.Common.DbParameter : MarshalByRefObject {
    [ResDescriptionAttribute("DbParameter_DbType")]
[DesignerSerializationVisibilityAttribute("0")]
[RefreshPropertiesAttribute("1")]
[BrowsableAttribute("False")]
[ResCategoryAttribute("DataCategory_Data")]
public DbType DbType { get; public set; }
    [ResDescriptionAttribute("DbParameter_Direction")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Data")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ParameterDirection Direction { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignOnlyAttribute("True")]
public bool IsNullable { get; public set; }
    [DefaultValueAttribute("")]
[ResDescriptionAttribute("DbParameter_ParameterName")]
[ResCategoryAttribute("DataCategory_Data")]
public string ParameterName { get; public set; }
    private byte System.Data.IDbDataParameter.Precision { get; private set; }
    private byte System.Data.IDbDataParameter.Scale { get; private set; }
    public byte Precision { get; public set; }
    public byte Scale { get; public set; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DbParameter_Size")]
public int Size { get; public set; }
    [DefaultValueAttribute("")]
[ResDescriptionAttribute("DbParameter_SourceColumn")]
[ResCategoryAttribute("DataCategory_Update")]
public string SourceColumn { get; public set; }
    [ResDescriptionAttribute("DbParameter_SourceColumnNullMapping")]
[DefaultValueAttribute("False")]
[EditorBrowsableAttribute("2")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Update")]
public bool SourceColumnNullMapping { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ResDescriptionAttribute("DbParameter_SourceVersion")]
[ResCategoryAttribute("DataCategory_Update")]
public DataRowVersion SourceVersion { get; public set; }
    [DefaultValueAttribute("")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DbParameter_Value")]
[RefreshPropertiesAttribute("1")]
public object Value { get; public set; }
    public abstract virtual DbType get_DbType();
    public abstract virtual void set_DbType(DbType value);
    [EditorBrowsableAttribute("2")]
public abstract virtual void ResetDbType();
    public abstract virtual ParameterDirection get_Direction();
    public abstract virtual void set_Direction(ParameterDirection value);
    public abstract virtual bool get_IsNullable();
    public abstract virtual void set_IsNullable(bool value);
    public abstract virtual string get_ParameterName();
    public abstract virtual void set_ParameterName(string value);
    private sealed virtual override byte System.Data.IDbDataParameter.get_Precision();
    private sealed virtual override void System.Data.IDbDataParameter.set_Precision(byte value);
    private sealed virtual override byte System.Data.IDbDataParameter.get_Scale();
    private sealed virtual override void System.Data.IDbDataParameter.set_Scale(byte value);
    public virtual byte get_Precision();
    public virtual void set_Precision(byte value);
    public virtual byte get_Scale();
    public virtual void set_Scale(byte value);
    public abstract virtual int get_Size();
    public abstract virtual void set_Size(int value);
    public abstract virtual string get_SourceColumn();
    public abstract virtual void set_SourceColumn(string value);
    public abstract virtual bool get_SourceColumnNullMapping();
    public abstract virtual void set_SourceColumnNullMapping(bool value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Common.DbParameterCollection : MarshalByRefObject {
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public int Count { get; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsFixedSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsReadOnly { get; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public bool IsSynchronized { get; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public object SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    private object System.Data.IDataParameterCollection.Item { get; private set; }
    public DbParameter Item { get; public set; }
    public DbParameter Item { get; public set; }
    public abstract virtual int get_Count();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public abstract virtual object get_SyncRoot();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override object System.Data.IDataParameterCollection.get_Item(string parameterName);
    private sealed virtual override void System.Data.IDataParameterCollection.set_Item(string parameterName, object value);
    public DbParameter get_Item(int index);
    public void set_Item(int index, DbParameter value);
    public DbParameter get_Item(string parameterName);
    public void set_Item(string parameterName, DbParameter value);
    public abstract virtual int Add(object value);
    public abstract virtual void AddRange(Array values);
    public abstract virtual bool Contains(object value);
    public abstract virtual bool Contains(string value);
    public abstract virtual void CopyTo(Array array, int index);
    public abstract virtual void Clear();
    [EditorBrowsableAttribute("1")]
public abstract virtual IEnumerator GetEnumerator();
    protected abstract virtual DbParameter GetParameter(int index);
    protected abstract virtual DbParameter GetParameter(string parameterName);
    public abstract virtual int IndexOf(object value);
    public abstract virtual int IndexOf(string parameterName);
    public abstract virtual void Insert(int index, object value);
    public abstract virtual void Remove(object value);
    public abstract virtual void RemoveAt(int index);
    public abstract virtual void RemoveAt(string parameterName);
    protected abstract virtual void SetParameter(int index, DbParameter value);
    protected abstract virtual void SetParameter(string parameterName, DbParameter value);
}
public class System.Data.Common.DbProviderConfigurationHandler : object {
    internal static string settings;
    internal static NameValueCollection CloneParent(NameValueCollection parentConfig);
    public virtual object Create(object parent, object configContext, XmlNode section);
    internal static object CreateStatic(object parent, object configContext, XmlNode section);
    internal static string RemoveAttribute(XmlNode node, string name);
}
public static class System.Data.Common.DbProviderFactories : object {
    private static DbProviderFactories();
    public static DbProviderFactory GetFactory(string providerInvariantName);
    public static DbProviderFactory GetFactory(DataRow providerRow);
    public static DbProviderFactory GetFactory(DbConnection connection);
    public static DataTable GetFactoryClasses();
}
public class System.Data.Common.DbProviderFactoriesConfigurationHandler : object {
    internal static string sectionName;
    internal static string providerGroup;
    internal static string odbcProviderName;
    internal static string odbcProviderDescription;
    internal static string oledbProviderName;
    internal static string oledbProviderDescription;
    internal static string oracleclientProviderName;
    internal static string oracleclientProviderNamespace;
    internal static string oracleclientProviderDescription;
    internal static string sqlclientProviderName;
    internal static string sqlclientProviderDescription;
    internal static string sqlclientPartialAssemblyQualifiedName;
    internal static string oracleclientPartialAssemblyQualifiedName;
    public virtual object Create(object parent, object configContext, XmlNode section);
    internal static object CreateStatic(object parent, object configContext, XmlNode section);
    internal static DataTable CreateProviderDataTable();
}
public abstract class System.Data.Common.DbProviderFactory : object {
    public bool CanCreateDataSourceEnumerator { get; }
    public virtual bool get_CanCreateDataSourceEnumerator();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
    public virtual CodeAccessPermission CreatePermission(PermissionState state);
    public virtual DbDataSourceEnumerator CreateDataSourceEnumerator();
}
internal class System.Data.Common.DbProviderFactoryConfigSection : object {
    public string Name { get; }
    public string InvariantName { get; }
    public string Description { get; }
    public string AssemblyQualifiedName { get; }
    public DbProviderFactoryConfigSection(Type FactoryType, string FactoryName, string FactoryDescription);
    public DbProviderFactoryConfigSection(string FactoryName, string FactoryInvariantName, string FactoryDescription, string FactoryAssemblyQualifiedName);
    public bool IsNull();
    public string get_Name();
    public string get_InvariantName();
    public string get_Description();
    public string get_AssemblyQualifiedName();
}
[AttributeUsageAttribute("128")]
public class System.Data.Common.DbProviderSpecificTypePropertyAttribute : Attribute {
    public bool IsProviderSpecificTypeProperty { get; }
    public DbProviderSpecificTypePropertyAttribute(bool isProviderSpecificTypeProperty);
    public bool get_IsProviderSpecificTypeProperty();
}
internal class System.Data.Common.DbSchemaRow : object {
    internal static string SchemaMappingUnsortedIndex;
    internal DataRow DataRow { get; }
    internal string ColumnName { get; }
    internal int Size { get; }
    internal string BaseColumnName { get; }
    internal string BaseServerName { get; }
    internal string BaseCatalogName { get; }
    internal string BaseSchemaName { get; }
    internal string BaseTableName { get; }
    internal bool IsAutoIncrement { get; }
    internal bool IsUnique { get; }
    internal bool IsRowVersion { get; }
    internal bool IsKey { get; }
    internal bool IsExpression { get; }
    internal bool IsHidden { get; }
    internal bool IsLong { get; }
    internal bool IsReadOnly { get; }
    internal Type DataType { get; }
    internal bool AllowDBNull { get; }
    internal int UnsortedIndex { get; }
    internal DbSchemaRow(DbSchemaTable schemaTable, DataRow dataRow);
    internal static DbSchemaRow[] GetSortedSchemaRows(DataTable dataTable, bool returnProviderSpecificTypes);
    internal DataRow get_DataRow();
    internal string get_ColumnName();
    internal int get_Size();
    internal string get_BaseColumnName();
    internal string get_BaseServerName();
    internal string get_BaseCatalogName();
    internal string get_BaseSchemaName();
    internal string get_BaseTableName();
    internal bool get_IsAutoIncrement();
    internal bool get_IsUnique();
    internal bool get_IsRowVersion();
    internal bool get_IsKey();
    internal bool get_IsExpression();
    internal bool get_IsHidden();
    internal bool get_IsLong();
    internal bool get_IsReadOnly();
    internal Type get_DataType();
    internal bool get_AllowDBNull();
    internal int get_UnsortedIndex();
}
internal class System.Data.Common.DbSchemaTable : object {
    internal DataTable dataTable;
    internal DataColumn ColumnName { get; }
    internal DataColumn Size { get; }
    internal DataColumn BaseServerName { get; }
    internal DataColumn BaseColumnName { get; }
    internal DataColumn BaseTableName { get; }
    internal DataColumn BaseCatalogName { get; }
    internal DataColumn BaseSchemaName { get; }
    internal DataColumn IsAutoIncrement { get; }
    internal DataColumn IsUnique { get; }
    internal DataColumn IsKey { get; }
    internal DataColumn IsRowVersion { get; }
    internal DataColumn AllowDBNull { get; }
    internal DataColumn IsExpression { get; }
    internal DataColumn IsHidden { get; }
    internal DataColumn IsLong { get; }
    internal DataColumn IsReadOnly { get; }
    internal DataColumn UnsortedIndex { get; }
    internal DataColumn DataType { get; }
    internal DbSchemaTable(DataTable dataTable, bool returnProviderSpecificTypes);
    private static DbSchemaTable();
    internal DataColumn get_ColumnName();
    internal DataColumn get_Size();
    internal DataColumn get_BaseServerName();
    internal DataColumn get_BaseColumnName();
    internal DataColumn get_BaseTableName();
    internal DataColumn get_BaseCatalogName();
    internal DataColumn get_BaseSchemaName();
    internal DataColumn get_IsAutoIncrement();
    internal DataColumn get_IsUnique();
    internal DataColumn get_IsKey();
    internal DataColumn get_IsRowVersion();
    internal DataColumn get_AllowDBNull();
    internal DataColumn get_IsExpression();
    internal DataColumn get_IsHidden();
    internal DataColumn get_IsLong();
    internal DataColumn get_IsReadOnly();
    internal DataColumn get_UnsortedIndex();
    internal DataColumn get_DataType();
}
public abstract class System.Data.Common.DbTransaction : MarshalByRefObject {
    public DbConnection Connection { get; }
    private IDbConnection System.Data.IDbTransaction.Connection { get; }
    protected DbConnection DbConnection { get; }
    public IsolationLevel IsolationLevel { get; }
    public DbConnection get_Connection();
    private sealed virtual override IDbConnection System.Data.IDbTransaction.get_Connection();
    protected abstract virtual DbConnection get_DbConnection();
    public abstract virtual IsolationLevel get_IsolationLevel();
    public abstract virtual void Commit();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual void Rollback();
}
internal class System.Data.Common.DecimalStorage : DataStorage {
    internal DecimalStorage(DataColumn column);
    private static DecimalStorage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.DoubleStorage : DataStorage {
    internal DoubleStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal static class System.Data.Common.GreenMethods : object {
    internal static Type SystemDataCommonDbProviderServices_Type;
    private static GreenMethods();
    internal static object SystemDataSqlClientSqlProviderServices_Instance();
}
public enum System.Data.Common.GroupByBehavior : Enum {
    public int value__;
    public static GroupByBehavior Unknown;
    public static GroupByBehavior NotSupported;
    public static GroupByBehavior Unrelated;
    public static GroupByBehavior MustContainAll;
    public static GroupByBehavior ExactMatch;
}
internal static class System.Data.Common.HandlerBase : object {
    internal static void CheckForChildNodes(XmlNode node);
    internal static void CheckForUnrecognizedAttributes(XmlNode node);
    internal static bool IsIgnorableAlsoCheckForNonElement(XmlNode node);
    internal static string RemoveAttribute(XmlNode node, string name, bool required, bool allowEmpty);
    internal static DataSet CloneParent(DataSet parentConfig, bool insenstive);
}
public interface System.Data.Common.IDbColumnSchemaGenerator {
    public abstract virtual ReadOnlyCollection`1<DbColumn> GetColumnSchema();
}
public enum System.Data.Common.IdentifierCase : Enum {
    public int value__;
    public static IdentifierCase Unknown;
    public static IdentifierCase Insensitive;
    public static IdentifierCase Sensitive;
}
internal class System.Data.Common.Int16Storage : DataStorage {
    internal Int16Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.Int32Storage : DataStorage {
    internal Int32Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.Int64Storage : DataStorage {
    internal Int64Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.LoadAdapter : DataAdapter {
    internal int FillFromReader(DataTable[] dataTables, IDataReader dataReader, int startRecord, int maxRecords);
}
internal class System.Data.Common.MultipartIdentifier : object {
    internal static int ServerIndex;
    internal static int CatalogIndex;
    internal static int SchemaIndex;
    internal static int TableIndex;
    internal static String[] ParseMultipartIdentifier(string name, string leftQuote, string rightQuote, string property, bool ThrowOnEmptyMultipartName);
    internal static String[] ParseMultipartIdentifier(string name, string leftQuote, string rightQuote, char separator, int limit, bool removequotes, string property, bool ThrowOnEmptyMultipartName);
}
internal class System.Data.Common.NameValuePair : object {
    internal int Length { get; }
    internal string Name { get; }
    internal NameValuePair Next { get; internal set; }
    internal string Value { get; }
    internal NameValuePair(string name, string value, int length);
    internal int get_Length();
    internal string get_Name();
    internal NameValuePair get_Next();
    internal void set_Next(NameValuePair value);
    internal string get_Value();
}
internal class System.Data.Common.NameValuePermission : object {
    internal static NameValuePermission Default;
    private static NameValuePermission();
    private sealed virtual override int System.IComparable.CompareTo(object a);
    internal static void AddEntry(NameValuePermission kvtree, ArrayList entries, DBConnectionString entry);
    internal void Intersect(ArrayList entries, NameValuePermission target);
    internal bool CheckValueForKeyPermit(DBConnectionString parsetable);
    internal NameValuePermission CopyNameValue();
}
internal static class System.Data.Common.NativeMethods : object {
    internal static IntPtr MapViewOfFile(IntPtr hFileMappingObject, int dwDesiredAccess, int dwFileOffsetHigh, int dwFileOffsetLow, IntPtr dwNumberOfBytesToMap);
    internal static IntPtr OpenFileMappingA(int dwDesiredAccess, bool bInheritHandle, string lpName);
    internal static IntPtr CreateFileMappingA(IntPtr hFile, IntPtr pAttr, int flProtect, int dwMaximumSizeHigh, int dwMaximumSizeLow, string lpName);
    internal static bool UnmapViewOfFile(IntPtr lpBaseAddress);
    internal static bool CloseHandle(IntPtr handle);
    internal static bool AllocateAndInitializeSid(IntPtr pIdentifierAuthority, byte nSubAuthorityCount, int dwSubAuthority0, int dwSubAuthority1, int dwSubAuthority2, int dwSubAuthority3, int dwSubAuthority4, int dwSubAuthority5, int dwSubAuthority6, int dwSubAuthority7, IntPtr& pSid);
    internal static int GetLengthSid(IntPtr pSid);
    internal static bool InitializeAcl(IntPtr pAcl, int nAclLength, int dwAclRevision);
    internal static bool AddAccessDeniedAce(IntPtr pAcl, int dwAceRevision, int AccessMask, IntPtr pSid);
    internal static bool AddAccessAllowedAce(IntPtr pAcl, int dwAceRevision, UInt32 AccessMask, IntPtr pSid);
    internal static bool InitializeSecurityDescriptor(IntPtr pSecurityDescriptor, int dwRevision);
    internal static bool SetSecurityDescriptorDacl(IntPtr pSecurityDescriptor, bool bDaclPresent, IntPtr pDacl, bool bDaclDefaulted);
    internal static IntPtr FreeSid(IntPtr pSid);
}
internal class System.Data.Common.ObjectStorage : DataStorage {
    internal ObjectStorage(DataColumn column, Type type);
    private static ObjectStorage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo1, object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int recordNo);
    public virtual bool IsNull(int record);
    public virtual void Set(int recordNo, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual object ConvertXmlToObject(XmlReader xmlReader, XmlRootAttribute xmlAttrib);
    public virtual string ConvertObjectToXml(object value);
    public virtual void ConvertObjectToXml(object value, XmlWriter xmlWriter, XmlRootAttribute xmlAttrib);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
    internal static void VerifyIDynamicMetaObjectProvider(Type type);
    internal static XmlSerializer GetXmlSerializer(Type type);
    internal static XmlSerializer GetXmlSerializer(Type type, XmlRootAttribute attribute);
}
internal class System.Data.Common.ReadOnlyCollection`1 : object {
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    public int Count { get; }
    internal ReadOnlyCollection`1(T[] items);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T value);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Contains(T value);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T value);
    public sealed virtual int get_Count();
}
public class System.Data.Common.RowUpdatedEventArgs : EventArgs {
    public IDbCommand Command { get; }
    public Exception Errors { get; public set; }
    public int RecordsAffected { get; }
    public DataRow Row { get; }
    internal DataRow[] Rows { get; }
    public int RowCount { get; }
    public StatementType StatementType { get; }
    public UpdateStatus Status { get; public set; }
    public DataTableMapping TableMapping { get; }
    public RowUpdatedEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public IDbCommand get_Command();
    public Exception get_Errors();
    public void set_Errors(Exception value);
    public int get_RecordsAffected();
    public DataRow get_Row();
    internal DataRow[] get_Rows();
    public int get_RowCount();
    public StatementType get_StatementType();
    public UpdateStatus get_Status();
    public void set_Status(UpdateStatus value);
    public DataTableMapping get_TableMapping();
    internal void AdapterInit(DataRow[] dataRows);
    internal void AdapterInit(int recordsAffected);
    public void CopyToRows(DataRow[] array);
    public void CopyToRows(DataRow[] array, int arrayIndex);
}
public class System.Data.Common.RowUpdatingEventArgs : EventArgs {
    protected IDbCommand BaseCommand { get; protected set; }
    public IDbCommand Command { get; public set; }
    public Exception Errors { get; public set; }
    public DataRow Row { get; }
    public StatementType StatementType { get; }
    public UpdateStatus Status { get; public set; }
    public DataTableMapping TableMapping { get; }
    public RowUpdatingEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual IDbCommand get_BaseCommand();
    protected virtual void set_BaseCommand(IDbCommand value);
    public IDbCommand get_Command();
    public void set_Command(IDbCommand value);
    public Exception get_Errors();
    public void set_Errors(Exception value);
    public DataRow get_Row();
    public StatementType get_StatementType();
    public UpdateStatus get_Status();
    public void set_Status(UpdateStatus value);
    public DataTableMapping get_TableMapping();
}
[SuppressUnmanagedCodeSecurityAttribute]
internal static class System.Data.Common.SafeNativeMethods : object {
    [ReliabilityContractAttribute("3", "1")]
internal static IntPtr CoTaskMemAlloc(IntPtr cb);
    [ReliabilityContractAttribute("3", "2")]
internal static void CoTaskMemFree(IntPtr handle);
    internal static int GetUserDefaultLCID();
    [ReliabilityContractAttribute("3", "2")]
internal static void ZeroMemory(IntPtr dest, IntPtr length);
    [ReliabilityContractAttribute("3", "1")]
internal static IntPtr InterlockedExchangePointer(IntPtr lpAddress, IntPtr lpValue);
    internal static int GetComputerNameEx(int nameType, StringBuilder nameBuffer, Int32& bufferSize);
    internal static int GetCurrentProcessId();
    internal static IntPtr GetModuleHandle(string moduleName);
    internal static IntPtr GetProcAddress(IntPtr HModule, string funcName);
    [ReliabilityContractAttribute("3", "1")]
internal static IntPtr LocalAlloc(int flags, IntPtr countOfBytes);
    [ReliabilityContractAttribute("3", "2")]
internal static IntPtr LocalFree(IntPtr handle);
    [ReliabilityContractAttribute("3", "1")]
internal static IntPtr SysAllocStringLen(string src, int len);
    [ReliabilityContractAttribute("3", "2")]
internal static void SysFreeString(IntPtr bstr);
    [ReliabilityContractAttribute("3", "1")]
internal static int ReleaseSemaphore(IntPtr handle, int releaseCount, IntPtr previousCount);
    [ReliabilityContractAttribute("3", "1")]
internal static int WaitForMultipleObjectsEx(UInt32 nCount, IntPtr lpHandles, bool bWaitAll, UInt32 dwMilliseconds, bool bAlertable);
    [ReliabilityContractAttribute("3", "1")]
internal static int WaitForSingleObjectEx(IntPtr lpHandles, UInt32 dwMilliseconds, bool bAlertable);
    [ReliabilityContractAttribute("3", "2")]
internal static void PropVariantClear(IntPtr pObject);
    [ReliabilityContractAttribute("3", "2")]
internal static void VariantClear(IntPtr pObject);
}
internal class System.Data.Common.SByteStorage : DataStorage {
    public SByteStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SchemaInfo : ValueType {
    public string name;
    public string typeName;
    public Type type;
}
public static class System.Data.Common.SchemaTableColumn : object {
    public static string ColumnName;
    public static string ColumnOrdinal;
    public static string ColumnSize;
    public static string NumericPrecision;
    public static string NumericScale;
    public static string DataType;
    public static string ProviderType;
    public static string NonVersionedProviderType;
    public static string IsLong;
    public static string AllowDBNull;
    public static string IsAliased;
    public static string IsExpression;
    public static string IsKey;
    public static string IsUnique;
    public static string BaseSchemaName;
    public static string BaseTableName;
    public static string BaseColumnName;
    private static SchemaTableColumn();
}
public static class System.Data.Common.SchemaTableOptionalColumn : object {
    public static string ProviderSpecificDataType;
    public static string IsAutoIncrement;
    public static string IsHidden;
    public static string IsReadOnly;
    public static string IsRowVersion;
    public static string BaseServerName;
    public static string BaseCatalogName;
    public static string AutoIncrementSeed;
    public static string AutoIncrementStep;
    public static string DefaultValue;
    public static string Expression;
    public static string BaseTableNamespace;
    public static string BaseColumnNamespace;
    public static string ColumnMapping;
    private static SchemaTableOptionalColumn();
}
internal class System.Data.Common.SingleStorage : DataStorage {
    public SingleStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlBinaryStorage : DataStorage {
    public SqlBinaryStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlBooleanStorage : DataStorage {
    public SqlBooleanStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlBytesStorage : DataStorage {
    public SqlBytesStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlByteStorage : DataStorage {
    public SqlByteStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlCharsStorage : DataStorage {
    public SqlCharsStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal static class System.Data.Common.SqlConvert : object {
    public static SqlByte ConvertToSqlByte(object value);
    public static SqlInt16 ConvertToSqlInt16(object value);
    public static SqlInt32 ConvertToSqlInt32(object value);
    public static SqlInt64 ConvertToSqlInt64(object value);
    public static SqlDouble ConvertToSqlDouble(object value);
    public static SqlDecimal ConvertToSqlDecimal(object value);
    public static SqlSingle ConvertToSqlSingle(object value);
    public static SqlMoney ConvertToSqlMoney(object value);
    public static SqlDateTime ConvertToSqlDateTime(object value);
    public static SqlBoolean ConvertToSqlBoolean(object value);
    public static SqlGuid ConvertToSqlGuid(object value);
    public static SqlBinary ConvertToSqlBinary(object value);
    public static SqlString ConvertToSqlString(object value);
    public static SqlChars ConvertToSqlChars(object value);
    public static SqlBytes ConvertToSqlBytes(object value);
    public static DateTimeOffset ConvertStringToDateTimeOffset(string value, IFormatProvider formatProvider);
    public static object ChangeTypeForDefaultValue(object value, Type type, IFormatProvider formatProvider);
    public static object ChangeType2(object value, StorageType stype, Type type, IFormatProvider formatProvider);
    public static object ChangeTypeForXML(object value, Type type);
}
internal class System.Data.Common.SqlDateTimeStorage : DataStorage {
    public SqlDateTimeStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlDecimalStorage : DataStorage {
    public SqlDecimalStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlDoubleStorage : DataStorage {
    public SqlDoubleStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlGuidStorage : DataStorage {
    public SqlGuidStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlInt16Storage : DataStorage {
    public SqlInt16Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlInt32Storage : DataStorage {
    public SqlInt32Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlInt64Storage : DataStorage {
    public SqlInt64Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlMoneyStorage : DataStorage {
    public SqlMoneyStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlSingleStorage : DataStorage {
    public SqlSingleStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlStringStorage : DataStorage {
    public SqlStringStorage(DataColumn column);
    public virtual object Aggregate(Int32[] recordNos, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public int Compare(SqlString valueNo1, SqlString valueNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual int GetStringLength(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlUdtStorage : DataStorage {
    public SqlUdtStorage(DataColumn column, Type type);
    private static SqlUdtStorage();
    internal static object GetStaticNullForUdtType(Type type);
    public virtual bool IsNull(int record);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo1, object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int recordNo);
    public virtual void Set(int recordNo, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual object ConvertXmlToObject(XmlReader xmlReader, XmlRootAttribute xmlAttrib);
    public virtual string ConvertObjectToXml(object value);
    public virtual void ConvertObjectToXml(object value, XmlWriter xmlWriter, XmlRootAttribute xmlAttrib);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlXmlStorage : DataStorage {
    public SqlXmlStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal enum System.Data.Common.StorageType : Enum {
    public int value__;
    public static StorageType Empty;
    public static StorageType Object;
    public static StorageType DBNull;
    public static StorageType Boolean;
    public static StorageType Char;
    public static StorageType SByte;
    public static StorageType Byte;
    public static StorageType Int16;
    public static StorageType UInt16;
    public static StorageType Int32;
    public static StorageType UInt32;
    public static StorageType Int64;
    public static StorageType UInt64;
    public static StorageType Single;
    public static StorageType Double;
    public static StorageType Decimal;
    public static StorageType DateTime;
    public static StorageType TimeSpan;
    public static StorageType String;
    public static StorageType Guid;
    public static StorageType ByteArray;
    public static StorageType CharArray;
    public static StorageType Type;
    public static StorageType DateTimeOffset;
    public static StorageType BigInteger;
    public static StorageType Uri;
    public static StorageType SqlBinary;
    public static StorageType SqlBoolean;
    public static StorageType SqlByte;
    public static StorageType SqlBytes;
    public static StorageType SqlChars;
    public static StorageType SqlDateTime;
    public static StorageType SqlDecimal;
    public static StorageType SqlDouble;
    public static StorageType SqlGuid;
    public static StorageType SqlInt16;
    public static StorageType SqlInt32;
    public static StorageType SqlInt64;
    public static StorageType SqlMoney;
    public static StorageType SqlSingle;
    public static StorageType SqlString;
}
internal class System.Data.Common.StringStorage : DataStorage {
    public StringStorage(DataColumn column);
    public virtual object Aggregate(Int32[] recordNos, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int recordNo);
    public virtual int GetStringLength(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
[FlagsAttribute]
public enum System.Data.Common.SupportedJoinOperators : Enum {
    public int value__;
    public static SupportedJoinOperators None;
    public static SupportedJoinOperators Inner;
    public static SupportedJoinOperators LeftOuter;
    public static SupportedJoinOperators RightOuter;
    public static SupportedJoinOperators FullOuter;
}
internal class System.Data.Common.TimeSpanStorage : DataStorage {
    public TimeSpanStorage(DataColumn column);
    private static TimeSpanStorage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.UInt16Storage : DataStorage {
    public UInt16Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.UInt32Storage : DataStorage {
    public UInt32Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.UInt64Storage : DataStorage {
    public UInt64Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
[SuppressUnmanagedCodeSecurityAttribute]
internal static class System.Data.Common.UnsafeNativeMethods : object {
    [ReliabilityContractAttribute("3", "1")]
internal static RetCode SQLAllocHandle(SQL_HANDLE HandleType, IntPtr InputHandle, IntPtr& OutputHandle);
    [ReliabilityContractAttribute("3", "1")]
internal static RetCode SQLAllocHandle(SQL_HANDLE HandleType, OdbcHandle InputHandle, IntPtr& OutputHandle);
    internal static RetCode SQLBindCol(OdbcStatementHandle StatementHandle, ushort ColumnNumber, SQL_C TargetType, HandleRef TargetValue, IntPtr BufferLength, IntPtr StrLen_or_Ind);
    internal static RetCode SQLBindCol(OdbcStatementHandle StatementHandle, ushort ColumnNumber, SQL_C TargetType, IntPtr TargetValue, IntPtr BufferLength, IntPtr StrLen_or_Ind);
    internal static RetCode SQLBindParameter(OdbcStatementHandle StatementHandle, ushort ParameterNumber, short ParamDirection, SQL_C SQLCType, short SQLType, IntPtr cbColDef, IntPtr ibScale, HandleRef rgbValue, IntPtr BufferLength, HandleRef StrLen_or_Ind);
    internal static RetCode SQLCancel(OdbcStatementHandle StatementHandle);
    internal static RetCode SQLCloseCursor(OdbcStatementHandle StatementHandle);
    internal static RetCode SQLColAttributeW(OdbcStatementHandle StatementHandle, short ColumnNumber, short FieldIdentifier, CNativeBuffer CharacterAttribute, short BufferLength, Int16& StringLength, IntPtr& NumericAttribute);
    internal static RetCode SQLColumnsW(OdbcStatementHandle StatementHandle, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string TableName, short NameLen3, string ColumnName, short NameLen4);
    [ReliabilityContractAttribute("3", "1")]
internal static RetCode SQLDisconnect(IntPtr ConnectionHandle);
    [ReliabilityContractAttribute("3", "1")]
internal static RetCode SQLDriverConnectW(OdbcConnectionHandle hdbc, IntPtr hwnd, string connectionstring, short cbConnectionstring, IntPtr connectionstringout, short cbConnectionstringoutMax, Int16& cbConnectionstringout, short fDriverCompletion);
    [ReliabilityContractAttribute("3", "1")]
internal static RetCode SQLEndTran(SQL_HANDLE HandleType, IntPtr Handle, short CompletionType);
    internal static RetCode SQLExecDirectW(OdbcStatementHandle StatementHandle, string StatementText, int TextLength);
    internal static RetCode SQLExecute(OdbcStatementHandle StatementHandle);
    internal static RetCode SQLFetch(OdbcStatementHandle StatementHandle);
    [ReliabilityContractAttribute("3", "1")]
internal static RetCode SQLFreeHandle(SQL_HANDLE HandleType, IntPtr StatementHandle);
    internal static RetCode SQLFreeStmt(OdbcStatementHandle StatementHandle, STMT Option);
    internal static RetCode SQLGetConnectAttrW(OdbcConnectionHandle ConnectionHandle, SQL_ATTR Attribute, Byte[] Value, int BufferLength, Int32& StringLength);
    internal static RetCode SQLGetData(OdbcStatementHandle StatementHandle, ushort ColumnNumber, SQL_C TargetType, CNativeBuffer TargetValue, IntPtr BufferLength, IntPtr& StrLen_or_Ind);
    internal static RetCode SQLGetDescFieldW(OdbcDescriptorHandle StatementHandle, short RecNumber, SQL_DESC FieldIdentifier, CNativeBuffer ValuePointer, int BufferLength, Int32& StringLength);
    internal static RetCode SQLGetDiagRecW(SQL_HANDLE HandleType, OdbcHandle Handle, short RecNumber, StringBuilder rchState, Int32& NativeError, StringBuilder MessageText, short BufferLength, Int16& TextLength);
    internal static RetCode SQLGetDiagFieldW(SQL_HANDLE HandleType, OdbcHandle Handle, short RecNumber, short DiagIdentifier, StringBuilder rchState, short BufferLength, Int16& StringLength);
    internal static RetCode SQLGetFunctions(OdbcConnectionHandle hdbc, SQL_API fFunction, Int16& pfExists);
    internal static RetCode SQLGetInfoW(OdbcConnectionHandle hdbc, SQL_INFO fInfoType, Byte[] rgbInfoValue, short cbInfoValueMax, Int16& pcbInfoValue);
    internal static RetCode SQLGetInfoW(OdbcConnectionHandle hdbc, SQL_INFO fInfoType, Byte[] rgbInfoValue, short cbInfoValueMax, IntPtr pcbInfoValue);
    internal static RetCode SQLGetStmtAttrW(OdbcStatementHandle StatementHandle, SQL_ATTR Attribute, IntPtr& Value, int BufferLength, Int32& StringLength);
    internal static RetCode SQLGetTypeInfo(OdbcStatementHandle StatementHandle, short fSqlType);
    internal static RetCode SQLMoreResults(OdbcStatementHandle StatementHandle);
    internal static RetCode SQLNumResultCols(OdbcStatementHandle StatementHandle, Int16& ColumnCount);
    internal static RetCode SQLPrepareW(OdbcStatementHandle StatementHandle, string StatementText, int TextLength);
    internal static RetCode SQLPrimaryKeysW(OdbcStatementHandle StatementHandle, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string TableName, short NameLen3);
    internal static RetCode SQLProcedureColumnsW(OdbcStatementHandle StatementHandle, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string ProcName, short NameLen3, string ColumnName, short NameLen4);
    internal static RetCode SQLProceduresW(OdbcStatementHandle StatementHandle, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string ProcName, short NameLen3);
    internal static RetCode SQLRowCount(OdbcStatementHandle StatementHandle, IntPtr& RowCount);
    internal static RetCode SQLSetConnectAttrW(OdbcConnectionHandle ConnectionHandle, SQL_ATTR Attribute, IDtcTransaction Value, int StringLength);
    internal static RetCode SQLSetConnectAttrW(OdbcConnectionHandle ConnectionHandle, SQL_ATTR Attribute, string Value, int StringLength);
    internal static RetCode SQLSetConnectAttrW(OdbcConnectionHandle ConnectionHandle, SQL_ATTR Attribute, IntPtr Value, int StringLength);
    [ReliabilityContractAttribute("3", "1")]
internal static RetCode SQLSetConnectAttrW(IntPtr ConnectionHandle, SQL_ATTR Attribute, IntPtr Value, int StringLength);
    internal static RetCode SQLSetDescFieldW(OdbcDescriptorHandle StatementHandle, short ColumnNumber, SQL_DESC FieldIdentifier, HandleRef CharacterAttribute, int BufferLength);
    internal static RetCode SQLSetDescFieldW(OdbcDescriptorHandle StatementHandle, short ColumnNumber, SQL_DESC FieldIdentifier, IntPtr CharacterAttribute, int BufferLength);
    internal static RetCode SQLSetEnvAttr(OdbcEnvironmentHandle EnvironmentHandle, SQL_ATTR Attribute, IntPtr Value, SQL_IS StringLength);
    internal static RetCode SQLSetStmtAttrW(OdbcStatementHandle StatementHandle, int Attribute, IntPtr Value, int StringLength);
    internal static RetCode SQLSpecialColumnsW(OdbcStatementHandle StatementHandle, SQL_SPECIALCOLS IdentifierType, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string TableName, short NameLen3, SQL_SCOPE Scope, SQL_NULLABILITY Nullable);
    internal static RetCode SQLStatisticsW(OdbcStatementHandle StatementHandle, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string TableName, short NameLen3, short Unique, short Reserved);
    internal static RetCode SQLTablesW(OdbcStatementHandle StatementHandle, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string TableName, short NameLen3, string TableType, short NameLen4);
    internal static OleDbHResult GetErrorInfo(int dwReserved, IErrorInfo& ppIErrorInfo);
    internal static UInt32 GetEffectiveRightsFromAclW(Byte[] pAcl, Trustee& pTrustee, UInt32& pAccessMask);
    internal static bool CheckTokenMembership(IntPtr tokenHandle, Byte[] sidToCheck, Boolean& isMember);
    internal static bool ConvertSidToStringSidW(IntPtr sid, IntPtr& stringSid);
    internal static int CreateWellKnownSid(int sidType, Byte[] domainSid, Byte[] resultSid, UInt32& resultSidLength);
    internal static bool GetTokenInformation(IntPtr tokenHandle, UInt32 token_class, IntPtr tokenStruct, UInt32 tokenInformationLength, UInt32& tokenString);
    internal static int lstrlenW(IntPtr ptr);
}
public enum System.Data.ConflictOption : Enum {
    public int value__;
    public static ConflictOption CompareAllSearchableValues;
    public static ConflictOption CompareRowVersion;
    public static ConflictOption OverwriteChanges;
}
[FlagsAttribute]
public enum System.Data.ConnectionState : Enum {
    public int value__;
    public static ConnectionState Closed;
    public static ConnectionState Open;
    public static ConnectionState Connecting;
    public static ConnectionState Executing;
    public static ConnectionState Fetching;
    public static ConnectionState Broken;
}
internal class System.Data.ConstNode : ExpressionNode {
    internal object val;
    internal ConstNode(DataTable table, ValueType type, object constant);
    internal ConstNode(DataTable table, ValueType type, object constant, bool fParseQuotes);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] recordNos);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual ExpressionNode Optimize();
}
[TypeConverterAttribute("System.Data.ConstraintConverter")]
[DefaultPropertyAttribute("ConstraintName")]
public abstract class System.Data.Constraint : object {
    internal string name;
    internal PropertyCollection extendedProperties;
    [DefaultValueAttribute("")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("ConstraintNameDescr")]
public string ConstraintName { get; public set; }
    internal string SchemaName { get; internal set; }
    internal bool InCollection { get; internal set; }
    [ResDescriptionAttribute("ConstraintTableDescr")]
public DataTable Table { get; }
    [ResCategoryAttribute("DataCategory_Data")]
[BrowsableAttribute("False")]
[ResDescriptionAttribute("ExtendedPropertiesDescr")]
public PropertyCollection ExtendedProperties { get; }
    [CLSCompliantAttribute("False")]
protected DataSet _DataSet { get; }
    public virtual string get_ConstraintName();
    public virtual void set_ConstraintName(string value);
    internal string get_SchemaName();
    internal void set_SchemaName(string value);
    internal virtual bool get_InCollection();
    internal virtual void set_InCollection(bool value);
    public abstract virtual DataTable get_Table();
    public PropertyCollection get_ExtendedProperties();
    internal abstract virtual bool ContainsColumn(DataColumn column);
    internal abstract virtual bool CanEnableConstraint();
    internal abstract virtual Constraint Clone(DataSet destination);
    internal abstract virtual Constraint Clone(DataSet destination, bool ignoreNSforTableLookup);
    internal void CheckConstraint();
    internal abstract virtual void CheckCanAddToCollection(ConstraintCollection constraint);
    internal abstract virtual bool CanBeRemovedFromCollection(ConstraintCollection constraint, bool fThrowException);
    internal abstract virtual void CheckConstraint(DataRow row, DataRowAction action);
    internal abstract virtual void CheckState();
    protected void CheckStateForProperty();
    protected virtual DataSet get__DataSet();
    protected internal void SetDataSet(DataSet dataSet);
    internal abstract virtual bool IsConstraintViolated();
    public virtual string ToString();
}
[DefaultEventAttribute("CollectionChanged")]
[DefaultMemberAttribute("Item")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.ConstraintsCollectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Data.ConstraintCollection : InternalDataCollectionBase {
    protected ArrayList List { get; }
    public Constraint Item { get; }
    internal DataTable Table { get; }
    public Constraint Item { get; }
    internal ConstraintCollection(DataTable table);
    protected virtual ArrayList get_List();
    public Constraint get_Item(int index);
    internal DataTable get_Table();
    public Constraint get_Item(string name);
    public void Add(Constraint constraint);
    internal void Add(Constraint constraint, bool addUniqueWhenAddingForeign);
    public Constraint Add(string name, DataColumn[] columns, bool primaryKey);
    public Constraint Add(string name, DataColumn column, bool primaryKey);
    public Constraint Add(string name, DataColumn primaryKeyColumn, DataColumn foreignKeyColumn);
    public Constraint Add(string name, DataColumn[] primaryKeyColumns, DataColumn[] foreignKeyColumns);
    public void AddRange(Constraint[] constraints);
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    internal string AssignName();
    public bool CanRemove(Constraint constraint);
    internal bool CanRemove(Constraint constraint, bool fThrowException);
    public void Clear();
    public bool Contains(string name);
    internal bool Contains(string name, bool caseSensitive);
    public void CopyTo(Constraint[] array, int index);
    internal Constraint FindConstraint(Constraint constraint);
    internal UniqueConstraint FindKeyConstraint(DataColumn[] columns);
    internal UniqueConstraint FindKeyConstraint(DataColumn column);
    internal ForeignKeyConstraint FindForeignKeyConstraint(DataColumn[] parentColumns, DataColumn[] childColumns);
    public int IndexOf(Constraint constraint);
    public int IndexOf(string constraintName);
    internal int InternalIndexOf(string constraintName);
    internal void RegisterName(string name);
    public void Remove(Constraint constraint);
    public void RemoveAt(int index);
    public void Remove(string name);
    internal void UnregisterName(string name);
    internal void FinishInitConstraints();
}
internal class System.Data.ConstraintConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Data.ConstraintEnumerator : object {
    protected Constraint CurrentObject { get; }
    public ConstraintEnumerator(DataSet dataSet);
    public bool GetNext();
    public Constraint GetConstraint();
    protected virtual bool IsValidCandidate(Constraint constraint);
    protected Constraint get_CurrentObject();
}
public class System.Data.ConstraintException : DataException {
    protected ConstraintException(SerializationInfo info, StreamingContext context);
    public ConstraintException(string s);
    public ConstraintException(string message, Exception innerException);
}
internal class System.Data.ConstraintTable : object {
    public DataTable table;
    public XmlSchemaIdentityConstraint constraint;
    public ConstraintTable(DataTable t, XmlSchemaIdentityConstraint c);
}
[DefaultPropertyAttribute("ColumnName")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DataColumnEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultMemberAttribute("Item")]
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
public class System.Data.DataColumn : MarshalByValueComponent {
    internal object defaultValue;
    internal Index sortIndex;
    internal DataTable table;
    internal MappingType columnMapping;
    internal int _hashCode;
    internal int errors;
    internal List`1<DataColumn> dependentColumns;
    internal PropertyCollection extendedProperties;
    internal string _columnUri;
    internal string encodedColumnName;
    internal string dttype;
    internal SimpleType simpleType;
    [ResDescriptionAttribute("DataColumnAllowNullDescr")]
[ResCategoryAttribute("DataCategory_Data")]
[DefaultValueAttribute("True")]
public bool AllowDBNull { get; public set; }
    [ResDescriptionAttribute("DataColumnAutoIncrementDescr")]
[ResCategoryAttribute("DataCategory_Data")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("False")]
public bool AutoIncrement { get; public set; }
    internal object AutoIncrementCurrent { get; internal set; }
    internal AutoIncrementValue AutoInc { get; }
    [DefaultValueAttribute("0")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DataColumnAutoIncrementSeedDescr")]
public long AutoIncrementSeed { get; public set; }
    [ResCategoryAttribute("DataCategory_Data")]
[DefaultValueAttribute("1")]
[ResDescriptionAttribute("DataColumnAutoIncrementStepDescr")]
public long AutoIncrementStep { get; public set; }
    [ResDescriptionAttribute("DataColumnCaptionDescr")]
[ResCategoryAttribute("DataCategory_Data")]
public string Caption { get; public set; }
    [ResCategoryAttribute("DataCategory_Data")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
[ResDescriptionAttribute("DataColumnColumnNameDescr")]
public string ColumnName { get; public set; }
    internal string EncodedColumnName { get; }
    internal IFormatProvider FormatProvider { get; }
    internal CultureInfo Locale { get; }
    internal int ObjectID { get; }
    [ResCategoryAttribute("DataCategory_Data")]
[DefaultValueAttribute("")]
[ResDescriptionAttribute("DataColumnPrefixDescr")]
public string Prefix { get; public set; }
    internal bool Computed { get; }
    internal DataExpression DataExpression { get; }
    [RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DataColumnDataTypeDescr")]
[TypeConverterAttribute("System.Data.ColumnTypeConverter")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Type DataType { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ResDescriptionAttribute("DataColumnDateTimeModeDescr")]
[ResCategoryAttribute("DataCategory_Data")]
[RefreshPropertiesAttribute("1")]
public DataSetDateTime DateTimeMode { get; public set; }
    [ResDescriptionAttribute("DataColumnDefaultValueDescr")]
[ResCategoryAttribute("DataCategory_Data")]
[TypeConverterAttribute("System.Data.DefaultValueTypeConverter")]
public object DefaultValue { get; public set; }
    internal bool DefaultValueIsNull { get; }
    [DefaultValueAttribute("")]
[ResDescriptionAttribute("DataColumnExpressionDescr")]
[ResCategoryAttribute("DataCategory_Data")]
[RefreshPropertiesAttribute("1")]
public string Expression { get; public set; }
    [BrowsableAttribute("False")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("ExtendedPropertiesDescr")]
public PropertyCollection ExtendedProperties { get; }
    internal bool HasData { get; }
    internal bool ImplementsINullable { get; }
    internal bool ImplementsIChangeTracking { get; }
    internal bool ImplementsIRevertibleChangeTracking { get; }
    internal bool IsCloneable { get; }
    internal bool IsStringType { get; }
    internal bool IsValueType { get; }
    internal bool IsSqlType { get; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DataColumnMaxLengthDescr")]
[DefaultValueAttribute("-1")]
public int MaxLength { get; public set; }
    [ResDescriptionAttribute("DataColumnNamespaceDescr")]
[ResCategoryAttribute("DataCategory_Data")]
public string Namespace { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[ResCategoryAttribute("DataCategory_Data")]
[BrowsableAttribute("False")]
[ResDescriptionAttribute("DataColumnOrdinalDescr")]
public int Ordinal { get; }
    [ResCategoryAttribute("DataCategory_Data")]
[DefaultValueAttribute("False")]
[ResDescriptionAttribute("DataColumnReadOnlyDescr")]
public bool ReadOnly { get; public set; }
    [ResDescriptionAttribute("DataColumnDataTableDescr")]
[ResCategoryAttribute("DataCategory_Data")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataTable Table { get; }
    internal object Item { get; internal set; }
    [ResDescriptionAttribute("DataColumnUniqueDescr")]
[DesignerSerializationVisibilityAttribute("0")]
[ResCategoryAttribute("DataCategory_Data")]
[DefaultValueAttribute("False")]
public bool Unique { get; public set; }
    internal string XmlDataType { get; internal set; }
    internal SimpleType SimpleType { get; internal set; }
    [ResDescriptionAttribute("DataColumnMappingDescr")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MappingType ColumnMapping { get; public set; }
    internal bool IsCustomType { get; }
    internal bool ImplementsIXMLSerializable { get; }
    public DataColumn(string columnName);
    public DataColumn(string columnName, Type dataType);
    public DataColumn(string columnName, Type dataType, string expr);
    public DataColumn(string columnName, Type dataType, string expr, MappingType type);
    public bool get_AllowDBNull();
    public void set_AllowDBNull(bool value);
    public bool get_AutoIncrement();
    public void set_AutoIncrement(bool value);
    internal object get_AutoIncrementCurrent();
    internal void set_AutoIncrementCurrent(object value);
    internal AutoIncrementValue get_AutoInc();
    public long get_AutoIncrementSeed();
    public void set_AutoIncrementSeed(long value);
    public long get_AutoIncrementStep();
    public void set_AutoIncrementStep(long value);
    public string get_Caption();
    public void set_Caption(string value);
    public string get_ColumnName();
    public void set_ColumnName(string value);
    internal string get_EncodedColumnName();
    internal IFormatProvider get_FormatProvider();
    internal CultureInfo get_Locale();
    internal int get_ObjectID();
    public string get_Prefix();
    public void set_Prefix(string value);
    internal string GetColumnValueAsString(DataRow row, DataRowVersion version);
    internal bool get_Computed();
    internal DataExpression get_DataExpression();
    public Type get_DataType();
    public void set_DataType(Type value);
    public DataSetDateTime get_DateTimeMode();
    public void set_DateTimeMode(DataSetDateTime value);
    public object get_DefaultValue();
    public void set_DefaultValue(object value);
    internal bool get_DefaultValueIsNull();
    internal void BindExpression();
    public string get_Expression();
    public void set_Expression(string value);
    public PropertyCollection get_ExtendedProperties();
    internal bool get_HasData();
    internal bool get_ImplementsINullable();
    internal bool get_ImplementsIChangeTracking();
    internal bool get_ImplementsIRevertibleChangeTracking();
    internal bool get_IsCloneable();
    internal bool get_IsStringType();
    internal bool get_IsValueType();
    internal bool get_IsSqlType();
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public int get_Ordinal();
    public void SetOrdinal(int ordinal);
    internal void SetOrdinalInternal(int ordinal);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public DataTable get_Table();
    internal void SetTable(DataTable table);
    internal object get_Item(int record);
    internal void set_Item(int record, object value);
    internal void InitializeRecord(int record);
    internal void SetValue(int record, object value);
    internal void FreeRecord(int record);
    public bool get_Unique();
    public void set_Unique(bool value);
    internal void InternalUnique(bool value);
    internal string get_XmlDataType();
    internal void set_XmlDataType(string value);
    internal SimpleType get_SimpleType();
    internal void set_SimpleType(SimpleType value);
    public virtual MappingType get_ColumnMapping();
    public virtual void set_ColumnMapping(MappingType value);
    internal void add_PropertyChanging(PropertyChangedEventHandler value);
    internal void remove_PropertyChanging(PropertyChangedEventHandler value);
    internal void CheckColumnConstraint(DataRow row, DataRowAction action);
    internal bool CheckMaxLength();
    internal void CheckMaxLength(DataRow dr);
    protected internal void CheckNotAllowNull();
    internal void CheckNullable(DataRow row);
    protected void CheckUnique();
    internal int Compare(int record1, int record2);
    internal bool CompareValueTo(int record1, object value, bool checkType);
    internal int CompareValueTo(int record1, object value);
    internal object ConvertValue(object value);
    internal void Copy(int srcRecordNo, int dstRecordNo);
    internal DataColumn Clone();
    internal DataRelation FindParentRelation();
    internal object GetAggregateValue(Int32[] records, AggregateType kind);
    internal void Init(int record);
    internal static bool IsAutoIncrementType(Type dataType);
    internal bool get_IsCustomType();
    internal bool IsValueCustomTypeInstance(object value);
    internal bool get_ImplementsIXMLSerializable();
    internal bool IsNull(int record);
    internal bool IsInRelation();
    internal bool IsMaxLengthViolated();
    internal bool IsNotAllowDBNullViolated();
    internal void FinishInitInProgress();
    protected virtual void OnPropertyChanging(PropertyChangedEventArgs pcevent);
    protected internal void RaisePropertyChanging(string name);
    internal void SetCapacity(int capacity);
    internal void OnSetDataSet();
    public virtual string ToString();
    internal object ConvertXmlToObject(string s);
    internal object ConvertXmlToObject(XmlReader xmlReader, XmlRootAttribute xmlAttrib);
    internal string ConvertObjectToXml(object value);
    internal void ConvertObjectToXml(object value, XmlWriter xmlWriter, XmlRootAttribute xmlAttrib);
    internal object GetEmptyColumnStore(int recordCount);
    internal void CopyValueIntoStore(int record, object store, BitArray nullbits, int storeIndex);
    internal void SetStorage(object store, BitArray nullbits);
    internal void AddDependentColumn(DataColumn expressionColumn);
    internal void RemoveDependentColumn(DataColumn expressionColumn);
    internal void HandleDependentColumnList(DataExpression oldExpression, DataExpression newExpression);
}
public class System.Data.DataColumnChangeEventArgs : EventArgs {
    public DataColumn Column { get; }
    public DataRow Row { get; }
    public object ProposedValue { get; public set; }
    internal DataColumnChangeEventArgs(DataRow row);
    public DataColumnChangeEventArgs(DataRow row, DataColumn column, object value);
    public DataColumn get_Column();
    public DataRow get_Row();
    public object get_ProposedValue();
    public void set_ProposedValue(object value);
    internal void InitializeColumnChangeEvent(DataColumn column, object value);
}
public class System.Data.DataColumnChangeEventHandler : MulticastDelegate {
    public DataColumnChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataColumnChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataColumnChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[EditorAttribute("Microsoft.VSDesigner.Data.Design.ColumnsCollectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultEventAttribute("CollectionChanged")]
[DefaultMemberAttribute("Item")]
public class System.Data.DataColumnCollection : InternalDataCollectionBase {
    protected ArrayList List { get; }
    internal DataColumn[] ColumnsImplementingIChangeTracking { get; }
    internal int ColumnsImplementingIChangeTrackingCount { get; }
    internal int ColumnsImplementingIRevertibleChangeTrackingCount { get; }
    public DataColumn Item { get; }
    public DataColumn Item { get; }
    internal DataColumn Item { get; }
    internal DataColumnCollection(DataTable table);
    protected virtual ArrayList get_List();
    internal DataColumn[] get_ColumnsImplementingIChangeTracking();
    internal int get_ColumnsImplementingIChangeTrackingCount();
    internal int get_ColumnsImplementingIRevertibleChangeTrackingCount();
    public DataColumn get_Item(int index);
    public DataColumn get_Item(string name);
    internal DataColumn get_Item(string name, string ns);
    internal void EnsureAdditionalCapacity(int capacity);
    public void Add(DataColumn column);
    internal void AddAt(int index, DataColumn column);
    public void AddRange(DataColumn[] columns);
    public DataColumn Add(string columnName, Type type, string expression);
    public DataColumn Add(string columnName, Type type);
    public DataColumn Add(string columnName);
    public DataColumn Add();
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    internal void add_CollectionChanging(CollectionChangeEventHandler value);
    internal void remove_CollectionChanging(CollectionChangeEventHandler value);
    internal void add_ColumnPropertyChanged(CollectionChangeEventHandler value);
    internal void remove_ColumnPropertyChanged(CollectionChangeEventHandler value);
    internal string AssignName();
    public bool CanRemove(DataColumn column);
    internal bool CanRemove(DataColumn column, bool fThrowException);
    public void Clear();
    public bool Contains(string name);
    internal bool Contains(string name, bool caseSensitive);
    public void CopyTo(DataColumn[] array, int index);
    public int IndexOf(DataColumn column);
    public int IndexOf(string columnName);
    internal int IndexOfCaseInsensitive(string name);
    internal void FinishInitCollection();
    internal void MoveTo(DataColumn column, int newPosition);
    internal void OnColumnPropertyChanged(CollectionChangeEventArgs ccevent);
    internal void RegisterColumnName(string name, DataColumn column);
    internal bool CanRegisterName(string name);
    public void Remove(DataColumn column);
    public void RemoveAt(int index);
    public void Remove(string name);
    internal void UnregisterName(string name);
}
internal class System.Data.DataColumnPropertyDescriptor : PropertyDescriptor {
    public AttributeCollection Attributes { get; }
    internal DataColumn Column { get; }
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public bool IsBrowsable { get; }
    internal DataColumnPropertyDescriptor(DataColumn dataColumn);
    public virtual AttributeCollection get_Attributes();
    internal DataColumn get_Column();
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual bool get_IsBrowsable();
}
internal class System.Data.DataError : object {
    internal static int initialCapacity;
    internal string Text { get; internal set; }
    internal bool HasErrors { get; }
    internal DataError(string rowError);
    internal string get_Text();
    internal void set_Text(string value);
    internal bool get_HasErrors();
    internal void SetColumnError(DataColumn column, string error);
    internal string GetColumnError(DataColumn column);
    internal void Clear(DataColumn column);
    internal void Clear();
    internal DataColumn[] GetColumnsInError();
    internal int IndexOf(DataColumn column);
}
public class System.Data.DataException : SystemException {
    protected DataException(SerializationInfo info, StreamingContext context);
    public DataException(string s);
    public DataException(string s, Exception innerException);
}
internal class System.Data.DataExpression : object {
    internal string originalExpression;
    internal string Expression { get; }
    internal ExpressionNode ExpressionNode { get; }
    internal bool HasValue { get; }
    internal DataExpression(DataTable table, string expression);
    internal DataExpression(DataTable table, string expression, Type type);
    internal string get_Expression();
    internal ExpressionNode get_ExpressionNode();
    internal bool get_HasValue();
    internal void Bind(DataTable table);
    internal bool DependsOn(DataColumn column);
    internal object Evaluate();
    internal object Evaluate(DataRow row, DataRowVersion version);
    internal object Evaluate(DataRow[] rows);
    internal object Evaluate(DataRow[] rows, DataRowVersion version);
    public sealed virtual bool Invoke(DataRow row, DataRowVersion version);
    internal DataColumn[] GetDependency();
    internal bool IsTableAggregate();
    internal static bool IsUnknown(object value);
    internal bool HasLocalAggregate();
    internal bool HasRemoteAggregate();
    internal static bool ToBoolean(object value);
}
internal class System.Data.DataKey : ValueType {
    private static int maxColumns;
    private DataColumn[] columns;
    internal DataColumn[] ColumnsReference { get; }
    internal bool HasValue { get; }
    internal DataTable Table { get; }
    internal DataKey(DataColumn[] columns, bool copyColumns);
    internal DataColumn[] get_ColumnsReference();
    internal bool get_HasValue();
    internal DataTable get_Table();
    internal void CheckState();
    internal bool ColumnsEqual(DataKey key);
    internal static bool ColumnsEqual(DataColumn[] column1, DataColumn[] column2);
    internal bool ContainsColumn(DataColumn column);
    public virtual int GetHashCode();
    public static bool op_Equality(DataKey x, DataKey y);
    public static bool op_Inequality(DataKey x, DataKey y);
    public virtual bool Equals(object value);
    internal bool Equals(DataKey value);
    internal String[] GetColumnNames();
    internal IndexField[] GetIndexDesc();
    internal Object[] GetKeyValues(int record);
    internal Index GetSortIndex();
    internal Index GetSortIndex(DataViewRowState recordStates);
    internal bool RecordsEqual(int record1, int record2);
    internal DataColumn[] ToArray();
}
[TypeConverterAttribute("System.Data.RelationshipConverter")]
[DefaultPropertyAttribute("RelationName")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DataRelationEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Data.DataRelation : object {
    internal PropertyCollection extendedProperties;
    internal string relationName;
    internal String[] parentColumnNames;
    internal String[] childColumnNames;
    internal string parentTableName;
    internal string childTableName;
    internal string parentTableNamespace;
    internal string childTableNamespace;
    internal bool nested;
    internal bool createConstraints;
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DataRelationChildColumnsDescr")]
public DataColumn[] ChildColumns { get; }
    internal DataColumn[] ChildColumnsReference { get; }
    internal DataKey ChildKey { get; }
    public DataTable ChildTable { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DataSet DataSet { get; }
    internal String[] ParentColumnNames { get; }
    internal String[] ChildColumnNames { get; }
    [ResDescriptionAttribute("DataRelationParentColumnsDescr")]
[ResCategoryAttribute("DataCategory_Data")]
public DataColumn[] ParentColumns { get; }
    internal DataColumn[] ParentColumnsReference { get; }
    internal DataKey ParentKey { get; }
    public DataTable ParentTable { get; }
    [DefaultValueAttribute("")]
[ResDescriptionAttribute("DataRelationRelationNameDescr")]
[ResCategoryAttribute("DataCategory_Data")]
public string RelationName { get; public set; }
    [ResDescriptionAttribute("DataRelationNested")]
[DefaultValueAttribute("False")]
[ResCategoryAttribute("DataCategory_Data")]
public bool Nested { get; public set; }
    public UniqueConstraint ParentKeyConstraint { get; }
    public ForeignKeyConstraint ChildKeyConstraint { get; }
    [ResCategoryAttribute("DataCategory_Data")]
[BrowsableAttribute("False")]
[ResDescriptionAttribute("ExtendedPropertiesDescr")]
public PropertyCollection ExtendedProperties { get; }
    internal bool CheckMultipleNested { get; internal set; }
    internal int ObjectID { get; }
    public DataRelation(string relationName, DataColumn parentColumn, DataColumn childColumn);
    public DataRelation(string relationName, DataColumn parentColumn, DataColumn childColumn, bool createConstraints);
    public DataRelation(string relationName, DataColumn[] parentColumns, DataColumn[] childColumns);
    public DataRelation(string relationName, DataColumn[] parentColumns, DataColumn[] childColumns, bool createConstraints);
    [BrowsableAttribute("False")]
public DataRelation(string relationName, string parentTableName, string childTableName, String[] parentColumnNames, String[] childColumnNames, bool nested);
    [BrowsableAttribute("False")]
public DataRelation(string relationName, string parentTableName, string parentTableNamespace, string childTableName, string childTableNamespace, String[] parentColumnNames, String[] childColumnNames, bool nested);
    public virtual DataColumn[] get_ChildColumns();
    internal DataColumn[] get_ChildColumnsReference();
    internal DataKey get_ChildKey();
    public virtual DataTable get_ChildTable();
    public virtual DataSet get_DataSet();
    internal String[] get_ParentColumnNames();
    internal String[] get_ChildColumnNames();
    internal static DataRow[] GetChildRows(DataKey parentKey, DataKey childKey, DataRow parentRow, DataRowVersion version);
    internal static DataRow[] GetParentRows(DataKey parentKey, DataKey childKey, DataRow childRow, DataRowVersion version);
    internal static DataRow GetParentRow(DataKey parentKey, DataKey childKey, DataRow childRow, DataRowVersion version);
    internal void SetDataSet(DataSet dataSet);
    internal void SetParentRowRecords(DataRow childRow, DataRow parentRow);
    public virtual DataColumn[] get_ParentColumns();
    internal DataColumn[] get_ParentColumnsReference();
    internal DataKey get_ParentKey();
    public virtual DataTable get_ParentTable();
    public virtual string get_RelationName();
    public virtual void set_RelationName(string value);
    internal void CheckNamespaceValidityForNestedRelations(string ns);
    internal void CheckNestedRelations();
    public virtual bool get_Nested();
    public virtual void set_Nested(bool value);
    public virtual UniqueConstraint get_ParentKeyConstraint();
    internal void SetParentKeyConstraint(UniqueConstraint value);
    public virtual ForeignKeyConstraint get_ChildKeyConstraint();
    public PropertyCollection get_ExtendedProperties();
    internal bool get_CheckMultipleNested();
    internal void set_CheckMultipleNested(bool value);
    internal void SetChildKeyConstraint(ForeignKeyConstraint value);
    internal void add_PropertyChanging(PropertyChangedEventHandler value);
    internal void remove_PropertyChanging(PropertyChangedEventHandler value);
    internal void CheckState();
    protected void CheckStateForProperty();
    internal DataRelation Clone(DataSet destination);
    protected internal void OnPropertyChanging(PropertyChangedEventArgs pcevent);
    protected internal void RaisePropertyChanging(string name);
    public virtual string ToString();
    internal void ValidateMultipleNestedRelations();
    internal int get_ObjectID();
}
[DefaultEventAttribute("CollectionChanged")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DataRelationCollectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultPropertyAttribute("Table")]
[DefaultMemberAttribute("Item")]
public abstract class System.Data.DataRelationCollection : InternalDataCollectionBase {
    internal int ObjectID { get; }
    public DataRelation Item { get; }
    public DataRelation Item { get; }
    internal int get_ObjectID();
    public abstract virtual DataRelation get_Item(int index);
    public abstract virtual DataRelation get_Item(string name);
    public void Add(DataRelation relation);
    public virtual void AddRange(DataRelation[] relations);
    public virtual DataRelation Add(string name, DataColumn[] parentColumns, DataColumn[] childColumns);
    public virtual DataRelation Add(string name, DataColumn[] parentColumns, DataColumn[] childColumns, bool createConstraints);
    public virtual DataRelation Add(DataColumn[] parentColumns, DataColumn[] childColumns);
    public virtual DataRelation Add(string name, DataColumn parentColumn, DataColumn childColumn);
    public virtual DataRelation Add(string name, DataColumn parentColumn, DataColumn childColumn, bool createConstraints);
    public virtual DataRelation Add(DataColumn parentColumn, DataColumn childColumn);
    protected virtual void AddCore(DataRelation relation);
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    internal void add_CollectionChanging(CollectionChangeEventHandler value);
    internal void remove_CollectionChanging(CollectionChangeEventHandler value);
    internal string AssignName();
    public virtual void Clear();
    public virtual bool Contains(string name);
    public void CopyTo(DataRelation[] array, int index);
    public virtual int IndexOf(DataRelation relation);
    public virtual int IndexOf(string relationName);
    internal int InternalIndexOf(string name);
    protected abstract virtual DataSet GetDataSet();
    protected virtual void OnCollectionChanged(CollectionChangeEventArgs ccevent);
    protected virtual void OnCollectionChanging(CollectionChangeEventArgs ccevent);
    internal void RegisterName(string name);
    public virtual bool CanRemove(DataRelation relation);
    public void Remove(DataRelation relation);
    public void RemoveAt(int index);
    public void Remove(string name);
    protected virtual void RemoveCore(DataRelation relation);
    internal void UnregisterName(string name);
}
internal class System.Data.DataRelationPropertyDescriptor : PropertyDescriptor {
    internal DataRelation Relation { get; }
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    internal DataRelationPropertyDescriptor(DataRelation dataRelation);
    internal DataRelation get_Relation();
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
[DefaultMemberAttribute("Item")]
public class System.Data.DataRow : object {
    internal int oldRecord;
    internal int newRecord;
    internal int tempRecord;
    internal long _rowID;
    internal DataRowAction _action;
    internal bool inChangingEvent;
    internal bool inDeletingEvent;
    internal bool inCascade;
    internal int ObjectID;
    internal XmlBoundElement Element { get; internal set; }
    internal DataColumn LastChangedColumn { get; internal set; }
    internal bool HasPropertyChanged { get; }
    internal int RBTreeNodeId { get; internal set; }
    public string RowError { get; public set; }
    internal long rowID { get; internal set; }
    public DataRowState RowState { get; }
    public DataTable Table { get; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    public object Item { get; }
    public object Item { get; }
    public object Item { get; }
    public Object[] ItemArray { get; public set; }
    public bool HasErrors { get; }
    protected internal DataRow(DataRowBuilder builder);
    internal XmlBoundElement get_Element();
    internal void set_Element(XmlBoundElement value);
    internal DataColumn get_LastChangedColumn();
    internal void set_LastChangedColumn(DataColumn value);
    internal bool get_HasPropertyChanged();
    internal int get_RBTreeNodeId();
    internal void set_RBTreeNodeId(int value);
    public string get_RowError();
    public void set_RowError(string value);
    internal long get_rowID();
    internal void set_rowID(long value);
    public DataRowState get_RowState();
    public DataTable get_Table();
    public object get_Item(int columnIndex);
    public void set_Item(int columnIndex, object value);
    internal void CheckForLoops(DataRelation rel);
    internal int GetNestedParentCount();
    public object get_Item(string columnName);
    public void set_Item(string columnName, object value);
    public object get_Item(DataColumn column);
    public void set_Item(DataColumn column, object value);
    public object get_Item(int columnIndex, DataRowVersion version);
    public object get_Item(string columnName, DataRowVersion version);
    public object get_Item(DataColumn column, DataRowVersion version);
    public Object[] get_ItemArray();
    public void set_ItemArray(Object[] value);
    public void AcceptChanges();
    [EditorBrowsableAttribute("2")]
public void BeginEdit();
    [EditorBrowsableAttribute("2")]
public void CancelEdit();
    internal void CheckInTable();
    public void Delete();
    [EditorBrowsableAttribute("2")]
public void EndEdit();
    public void SetColumnError(int columnIndex, string error);
    public void SetColumnError(string columnName, string error);
    public void SetColumnError(DataColumn column, string error);
    public string GetColumnError(int columnIndex);
    public string GetColumnError(string columnName);
    public string GetColumnError(DataColumn column);
    public void ClearErrors();
    internal void ClearError(DataColumn column);
    public bool get_HasErrors();
    public DataColumn[] GetColumnsInError();
    public DataRow[] GetChildRows(string relationName);
    public DataRow[] GetChildRows(string relationName, DataRowVersion version);
    public DataRow[] GetChildRows(DataRelation relation);
    public DataRow[] GetChildRows(DataRelation relation, DataRowVersion version);
    internal DataColumn GetDataColumn(string columnName);
    public DataRow GetParentRow(string relationName);
    public DataRow GetParentRow(string relationName, DataRowVersion version);
    public DataRow GetParentRow(DataRelation relation);
    public DataRow GetParentRow(DataRelation relation, DataRowVersion version);
    internal DataRow GetNestedParentRow(DataRowVersion version);
    public DataRow[] GetParentRows(string relationName);
    public DataRow[] GetParentRows(string relationName, DataRowVersion version);
    public DataRow[] GetParentRows(DataRelation relation);
    public DataRow[] GetParentRows(DataRelation relation, DataRowVersion version);
    internal Object[] GetColumnValues(DataColumn[] columns);
    internal Object[] GetColumnValues(DataColumn[] columns, DataRowVersion version);
    internal Object[] GetKeyValues(DataKey key);
    internal Object[] GetKeyValues(DataKey key, DataRowVersion version);
    internal int GetCurrentRecordNo();
    internal int GetDefaultRecord();
    internal int GetOriginalRecordNo();
    internal int GetRecordFromVersion(DataRowVersion version);
    internal DataRowVersion GetDefaultRowVersion(DataViewRowState viewState);
    internal DataViewRowState GetRecordState(int record);
    internal bool HasKeyChanged(DataKey key);
    internal bool HasKeyChanged(DataKey key, DataRowVersion version1, DataRowVersion version2);
    public bool HasVersion(DataRowVersion version);
    internal bool HasChanges();
    internal bool HaveValuesChanged(DataColumn[] columns);
    internal bool HaveValuesChanged(DataColumn[] columns, DataRowVersion version1, DataRowVersion version2);
    public bool IsNull(int columnIndex);
    public bool IsNull(string columnName);
    public bool IsNull(DataColumn column);
    public bool IsNull(DataColumn column, DataRowVersion version);
    public void RejectChanges();
    internal void ResetLastChangedColumn();
    internal void SetKeyValues(DataKey key, Object[] keyValues);
    protected void SetNull(DataColumn column);
    internal void SetNestedParentRow(DataRow parentRow, bool setNonNested);
    public void SetParentRow(DataRow parentRow);
    public void SetParentRow(DataRow parentRow, DataRelation relation);
    internal void SetParentRowToDBNull();
    internal void SetParentRowToDBNull(DataRelation relation);
    public void SetAdded();
    public void SetModified();
    internal int CopyValuesIntoStore(ArrayList storeList, ArrayList nullbitList, int storeIndex);
}
[FlagsAttribute]
public enum System.Data.DataRowAction : Enum {
    public int value__;
    public static DataRowAction Nothing;
    public static DataRowAction Delete;
    public static DataRowAction Change;
    public static DataRowAction Rollback;
    public static DataRowAction Commit;
    public static DataRowAction Add;
    public static DataRowAction ChangeOriginal;
    public static DataRowAction ChangeCurrentAndOriginal;
}
public class System.Data.DataRowBuilder : object {
    internal DataTable _table;
    internal int _record;
    internal DataRowBuilder(DataTable table, int record);
}
public class System.Data.DataRowChangeEventArgs : EventArgs {
    public DataRow Row { get; }
    public DataRowAction Action { get; }
    public DataRowChangeEventArgs(DataRow row, DataRowAction action);
    public DataRow get_Row();
    public DataRowAction get_Action();
}
public class System.Data.DataRowChangeEventHandler : MulticastDelegate {
    public DataRowChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataRowChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataRowChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class System.Data.DataRowCollection : InternalDataCollectionBase {
    internal int nullInList;
    public int Count { get; }
    public DataRow Item { get; }
    internal DataRowCollection(DataTable table);
    public virtual int get_Count();
    public DataRow get_Item(int index);
    public void Add(DataRow row);
    public void InsertAt(DataRow row, int pos);
    internal void DiffInsertAt(DataRow row, int pos);
    public int IndexOf(DataRow row);
    internal DataRow AddWithColumnEvents(Object[] values);
    public DataRow Add(Object[] values);
    internal void ArrayAdd(DataRow row);
    internal void ArrayInsert(DataRow row, int pos);
    internal void ArrayClear();
    internal void ArrayRemove(DataRow row);
    public DataRow Find(object key);
    public DataRow Find(Object[] keys);
    public void Clear();
    public bool Contains(object key);
    public bool Contains(Object[] keys);
    public virtual void CopyTo(Array ar, int index);
    public void CopyTo(DataRow[] array, int index);
    public virtual IEnumerator GetEnumerator();
    public void Remove(DataRow row);
    public void RemoveAt(int index);
}
internal class System.Data.DataRowCreatedEventHandler : MulticastDelegate {
    public DataRowCreatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataRow r);
    public virtual IAsyncResult BeginInvoke(object sender, DataRow r, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum System.Data.DataRowState : Enum {
    public int value__;
    public static DataRowState Detached;
    public static DataRowState Unchanged;
    public static DataRowState Added;
    public static DataRowState Deleted;
    public static DataRowState Modified;
}
public enum System.Data.DataRowVersion : Enum {
    public int value__;
    public static DataRowVersion Original;
    public static DataRowVersion Current;
    public static DataRowVersion Proposed;
    public static DataRowVersion Default;
}
[DefaultMemberAttribute("Item")]
public class System.Data.DataRowView : object {
    public DataView DataView { get; }
    internal int ObjectID { get; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    private string System.ComponentModel.IDataErrorInfo.Item { get; }
    private string System.ComponentModel.IDataErrorInfo.Error { get; }
    public DataRowVersion RowVersion { get; }
    public DataRow Row { get; }
    public bool IsNew { get; }
    public bool IsEdit { get; }
    internal DataRowView(DataView dataView, DataRow row);
    private static DataRowView();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public DataView get_DataView();
    internal int get_ObjectID();
    public object get_Item(int ndx);
    public void set_Item(int ndx, object value);
    public object get_Item(string property);
    public void set_Item(string property, object value);
    private sealed virtual override string System.ComponentModel.IDataErrorInfo.get_Item(string colName);
    private sealed virtual override string System.ComponentModel.IDataErrorInfo.get_Error();
    public DataRowVersion get_RowVersion();
    internal int GetRecord();
    internal bool HasRecord();
    internal object GetColumnValue(DataColumn column);
    internal void SetColumnValue(DataColumn column, object value);
    public DataView CreateChildView(DataRelation relation, bool followParent);
    public DataView CreateChildView(DataRelation relation);
    public DataView CreateChildView(string relationName, bool followParent);
    public DataView CreateChildView(string relationName);
    public DataRow get_Row();
    public sealed virtual void BeginEdit();
    public sealed virtual void CancelEdit();
    public sealed virtual void EndEdit();
    public bool get_IsNew();
    public bool get_IsEdit();
    public void Delete();
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    internal void RaisePropertyChangedEvent(string propName);
}
[DefaultPropertyAttribute("DataSetName")]
[ToolboxItemAttribute("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[XmlRootAttribute("DataSet")]
[ResDescriptionAttribute("DataSetDescr")]
[DesignerAttribute("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[XmlSchemaProviderAttribute("GetDataSetSchema")]
public class System.Data.DataSet : MarshalByValueComponent {
    internal PropertyCollection extendedProperties;
    internal string namespaceURI;
    internal bool fInReadXml;
    internal bool fInLoadDiffgram;
    internal bool fTopLevelTable;
    internal bool fInitInProgress;
    internal bool fEnableCascading;
    internal bool fIsSchemaLoading;
    internal static DataTable[] zeroTables;
    internal string mainTableName;
    internal bool UseDataSetSchemaOnly;
    internal bool UdtIsWrapped;
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SerializationFormat RemotingFormat { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public SchemaSerializationMode SchemaSerializationMode { get; public set; }
    [DefaultValueAttribute("False")]
[ResDescriptionAttribute("DataSetCaseSensitiveDescr")]
[ResCategoryAttribute("DataCategory_Data")]
public bool CaseSensitive { get; public set; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    [BrowsableAttribute("False")]
[ResDescriptionAttribute("DataSetDefaultViewDescr")]
public DataViewManager DefaultViewManager { get; }
    [DefaultValueAttribute("True")]
[ResDescriptionAttribute("DataSetEnforceConstraintsDescr")]
public bool EnforceConstraints { get; public set; }
    [DefaultValueAttribute("")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DataSetDataSetNameDescr")]
public string DataSetName { get; public set; }
    [DefaultValueAttribute("")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DataSetNamespaceDescr")]
public string Namespace { get; public set; }
    [ResCategoryAttribute("DataCategory_Data")]
[DefaultValueAttribute("")]
[ResDescriptionAttribute("DataSetPrefixDescr")]
public string Prefix { get; public set; }
    [BrowsableAttribute("False")]
[ResDescriptionAttribute("ExtendedPropertiesDescr")]
[ResCategoryAttribute("DataCategory_Data")]
public PropertyCollection ExtendedProperties { get; }
    [BrowsableAttribute("False")]
[ResDescriptionAttribute("DataSetHasErrorsDescr")]
public bool HasErrors { get; }
    [BrowsableAttribute("False")]
public bool IsInitialized { get; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DataSetLocaleDescr")]
public CultureInfo Locale { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public ISite Site { get; public set; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DataSetRelationsDescr")]
[DesignerSerializationVisibilityAttribute("2")]
public DataRelationCollection Relations { get; }
    [DesignerSerializationVisibilityAttribute("2")]
[ResDescriptionAttribute("DataSetTablesDescr")]
[ResCategoryAttribute("DataCategory_Data")]
public DataTableCollection Tables { get; }
    internal bool FBoundToDocument { get; internal set; }
    internal string MainTableName { get; internal set; }
    internal int ObjectID { get; }
    public DataSet(string dataSetName);
    protected DataSet(SerializationInfo info, StreamingContext context);
    protected DataSet(SerializationInfo info, StreamingContext context, bool ConstructSchema);
    private static DataSet();
    public SerializationFormat get_RemotingFormat();
    public void set_RemotingFormat(SerializationFormat value);
    public virtual SchemaSerializationMode get_SchemaSerializationMode();
    public virtual void set_SchemaSerializationMode(SchemaSerializationMode value);
    protected bool IsBinarySerialized(SerializationInfo info, StreamingContext context);
    protected SchemaSerializationMode DetermineSchemaSerializationMode(SerializationInfo info, StreamingContext context);
    protected SchemaSerializationMode DetermineSchemaSerializationMode(XmlReader reader);
    protected void GetSerializationData(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual void InitializeDerivedDataSet();
    internal void DeserializeDataSet(SerializationInfo info, StreamingContext context, SerializationFormat remotingFormat, SchemaSerializationMode schemaSerializationMode);
    internal void FailedEnableConstraints();
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    public DataViewManager get_DefaultViewManager();
    public bool get_EnforceConstraints();
    public void set_EnforceConstraints(bool value);
    internal void RestoreEnforceConstraints(bool value);
    internal void EnableConstraints();
    public string get_DataSetName();
    public void set_DataSetName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_Prefix();
    public void set_Prefix(string value);
    public PropertyCollection get_ExtendedProperties();
    public bool get_HasErrors();
    public sealed virtual bool get_IsInitialized();
    public CultureInfo get_Locale();
    public void set_Locale(CultureInfo value);
    internal void SetLocaleValue(CultureInfo value, bool userSet);
    internal bool ShouldSerializeLocale();
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    public DataRelationCollection get_Relations();
    protected virtual bool ShouldSerializeRelations();
    public DataTableCollection get_Tables();
    protected virtual bool ShouldSerializeTables();
    internal bool get_FBoundToDocument();
    internal void set_FBoundToDocument(bool value);
    public void AcceptChanges();
    internal void add_PropertyChanging(PropertyChangedEventHandler value);
    internal void remove_PropertyChanging(PropertyChangedEventHandler value);
    public void add_MergeFailed(MergeFailedEventHandler value);
    public void remove_MergeFailed(MergeFailedEventHandler value);
    internal void add_DataRowCreated(DataRowCreatedEventHandler value);
    internal void remove_DataRowCreated(DataRowCreatedEventHandler value);
    internal void add_ClearFunctionCalled(DataSetClearEventhandler value);
    internal void remove_ClearFunctionCalled(DataSetClearEventhandler value);
    public sealed virtual void add_Initialized(EventHandler value);
    public sealed virtual void remove_Initialized(EventHandler value);
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    public void Clear();
    public virtual DataSet Clone();
    public DataSet Copy();
    internal int EstimatedXmlStringSize();
    public DataSet GetChanges();
    public DataSet GetChanges(DataRowState rowStates);
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    internal string GetRemotingDiffGram(DataTable table);
    public string GetXml();
    public string GetXmlSchema();
    internal string GetXmlSchemaForRemoting(DataTable table);
    public bool HasChanges();
    public bool HasChanges(DataRowState rowStates);
    public void InferXmlSchema(XmlReader reader, String[] nsArray);
    public void InferXmlSchema(Stream stream, String[] nsArray);
    public void InferXmlSchema(TextReader reader, String[] nsArray);
    public void InferXmlSchema(string fileName, String[] nsArray);
    public void ReadXmlSchema(XmlReader reader);
    internal void ReadXmlSchema(XmlReader reader, bool denyResolving);
    internal bool MoveToElement(XmlReader reader, int depth);
    internal void ReadEndElement(XmlReader reader);
    internal void ReadXSDSchema(XmlReader reader, bool denyResolving);
    internal void ReadXDRSchema(XmlReader reader);
    public void ReadXmlSchema(Stream stream);
    public void ReadXmlSchema(TextReader reader);
    public void ReadXmlSchema(string fileName);
    public void WriteXmlSchema(Stream stream);
    public void WriteXmlSchema(Stream stream, Converter`2<Type, string> multipleTargetConverter);
    public void WriteXmlSchema(string fileName);
    public void WriteXmlSchema(string fileName, Converter`2<Type, string> multipleTargetConverter);
    public void WriteXmlSchema(TextWriter writer);
    public void WriteXmlSchema(TextWriter writer, Converter`2<Type, string> multipleTargetConverter);
    public void WriteXmlSchema(XmlWriter writer);
    public void WriteXmlSchema(XmlWriter writer, Converter`2<Type, string> multipleTargetConverter);
    public XmlReadMode ReadXml(XmlReader reader);
    internal XmlReadMode ReadXml(XmlReader reader, bool denyResolving);
    public XmlReadMode ReadXml(Stream stream);
    public XmlReadMode ReadXml(TextReader reader);
    public XmlReadMode ReadXml(string fileName);
    internal void InferSchema(XmlDocument xdoc, String[] excludedNamespaces, XmlReadMode mode);
    public XmlReadMode ReadXml(XmlReader reader, XmlReadMode mode);
    internal XmlReadMode ReadXml(XmlReader reader, XmlReadMode mode, bool denyResolving);
    public XmlReadMode ReadXml(Stream stream, XmlReadMode mode);
    public XmlReadMode ReadXml(TextReader reader, XmlReadMode mode);
    public XmlReadMode ReadXml(string fileName, XmlReadMode mode);
    public void WriteXml(Stream stream);
    public void WriteXml(TextWriter writer);
    public void WriteXml(XmlWriter writer);
    public void WriteXml(string fileName);
    public void WriteXml(Stream stream, XmlWriteMode mode);
    public void WriteXml(TextWriter writer, XmlWriteMode mode);
    public void WriteXml(XmlWriter writer, XmlWriteMode mode);
    public void WriteXml(string fileName, XmlWriteMode mode);
    internal DataRelationCollection GetParentRelations(DataTable table);
    public void Merge(DataSet dataSet);
    public void Merge(DataSet dataSet, bool preserveChanges);
    public void Merge(DataSet dataSet, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    public void Merge(DataTable table);
    public void Merge(DataTable table, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    public void Merge(DataRow[] rows);
    public void Merge(DataRow[] rows, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    protected virtual void OnPropertyChanging(PropertyChangedEventArgs pcevent);
    internal void OnMergeFailed(MergeFailedEventArgs mfevent);
    internal void RaiseMergeFailed(DataTable table, string conflict, MissingSchemaAction missingSchemaAction);
    internal void OnDataRowCreated(DataRow row);
    internal void OnClearFunctionCalled(DataTable table);
    protected internal virtual void OnRemoveTable(DataTable table);
    internal void OnRemovedTable(DataTable table);
    protected virtual void OnRemoveRelation(DataRelation relation);
    internal void OnRemoveRelationHack(DataRelation relation);
    protected internal void RaisePropertyChanging(string name);
    internal DataTable[] TopLevelTables();
    internal DataTable[] TopLevelTables(bool forSchema);
    public virtual void RejectChanges();
    public virtual void Reset();
    internal bool ValidateCaseConstraint();
    internal bool ValidateLocaleConstraint();
    internal DataTable FindTable(DataTable baseTable, PropertyDescriptor[] props, int propStart);
    protected virtual void ReadXmlSerializable(XmlReader reader);
    protected virtual XmlSchema GetSchemaSerializable();
    public static XmlSchemaComplexType GetDataSetSchema(XmlSchemaSet schemaSet);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public virtual void Load(IDataReader reader, LoadOption loadOption, FillErrorEventHandler errorHandler, DataTable[] tables);
    public void Load(IDataReader reader, LoadOption loadOption, DataTable[] tables);
    public void Load(IDataReader reader, LoadOption loadOption, String[] tables);
    public DataTableReader CreateDataReader();
    public DataTableReader CreateDataReader(DataTable[] dataTables);
    internal string get_MainTableName();
    internal void set_MainTableName(string value);
    internal int get_ObjectID();
}
internal class System.Data.DataSetClearEventhandler : MulticastDelegate {
    public DataSetClearEventhandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataTable table);
    public virtual IAsyncResult BeginInvoke(object sender, DataTable table, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Data.DataSetDateTime : Enum {
    public int value__;
    public static DataSetDateTime Local;
    public static DataSetDateTime Unspecified;
    public static DataSetDateTime UnspecifiedLocal;
    public static DataSetDateTime Utc;
}
public class System.Data.DataSetSchemaImporterExtension : SchemaImporterExtension {
    public virtual string ImportSchemaType(string name, string schemaNamespace, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider);
    public virtual string ImportSchemaType(XmlSchemaType type, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider);
    internal XmlSchemaElement FindDataSetElement(XmlSchema schema);
    internal string GenerateTypedDataSet(XmlSchemaElement element, XmlSchemas schemas, CodeNamespace codeNamespace, StringCollection references, CodeDomProvider codeProvider);
    internal static bool IsDataSet(XmlSchemaElement e);
}
[AttributeUsageAttribute("32767")]
[ObsoleteAttribute("DataSysDescriptionAttribute has been deprecated.  http://go.microsoft.com/fwlink/?linkid=14202", "False")]
public class System.Data.DataSysDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    [ObsoleteAttribute("DataSysDescriptionAttribute has been deprecated.  http://go.microsoft.com/fwlink/?linkid=14202", "False")]
public DataSysDescriptionAttribute(string description);
    public virtual string get_Description();
}
[DefaultPropertyAttribute("TableName")]
[XmlSchemaProviderAttribute("GetDataTableSchema")]
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DataTableEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultEventAttribute("RowChanging")]
public class System.Data.DataTable : MarshalByValueComponent {
    internal long nextRowID;
    internal DataRowCollection rowCollection;
    internal DataColumnCollection columnCollection;
    internal DataRelationCollection parentRelationsCollection;
    internal DataRelationCollection childRelationsCollection;
    internal RecordManager recordManager;
    internal List`1<Index> indexes;
    internal PropertyCollection extendedProperties;
    internal string tableNamespace;
    internal DataExpression displayExpression;
    internal bool fNestedInDataset;
    internal string encodedTableName;
    internal DataColumn xmlText;
    internal DataColumn _colUnique;
    internal bool textOnly;
    internal decimal minOccurs;
    internal decimal maxOccurs;
    internal bool repeatableElement;
    internal static DataColumn[] zeroColumns;
    internal static DataRow[] zeroRows;
    internal UniqueConstraint primaryKey;
    internal static IndexField[] zeroIndexField;
    internal IndexField[] _primaryIndex;
    internal bool _suspendEnforceConstraints;
    protected internal bool fInitInProgress;
    internal bool fInLoadDiffgram;
    internal List`1<DataColumn> dependentColumns;
    internal List`1<DataView> delayedViews;
    internal Hashtable rowDiffId;
    internal ReaderWriterLock indexesLock;
    internal int ukColumnPositionForInference;
    [ResDescriptionAttribute("DataTableCaseSensitiveDescr")]
public bool CaseSensitive { get; public set; }
    internal bool AreIndexEventsSuspended { get; }
    [BrowsableAttribute("False")]
public bool IsInitialized { get; }
    internal bool SelfNested { get; }
    [DebuggerBrowsableAttribute("0")]
internal List`1<Index> LiveIndexes { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SerializationFormat RemotingFormat { get; public set; }
    internal int UKColumnPositionForInference { get; internal set; }
    [BrowsableAttribute("False")]
[ResDescriptionAttribute("DataTableChildRelationsDescr")]
[DesignerSerializationVisibilityAttribute("0")]
public DataRelationCollection ChildRelations { get; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DataTableColumnsDescr")]
[DesignerSerializationVisibilityAttribute("2")]
public DataColumnCollection Columns { get; }
    [DesignerSerializationVisibilityAttribute("2")]
[ResDescriptionAttribute("DataTableConstraintsDescr")]
[ResCategoryAttribute("DataCategory_Data")]
public ConstraintCollection Constraints { get; }
    [BrowsableAttribute("False")]
[ResDescriptionAttribute("DataTableDataSetDescr")]
[DesignerSerializationVisibilityAttribute("0")]
public DataSet DataSet { get; }
    [ResDescriptionAttribute("DataTableDefaultViewDescr")]
[BrowsableAttribute("False")]
public DataView DefaultView { get; }
    [ResDescriptionAttribute("DataTableDisplayExpressionDescr")]
[DefaultValueAttribute("")]
[ResCategoryAttribute("DataCategory_Data")]
public string DisplayExpression { get; public set; }
    internal string DisplayExpressionInternal { get; }
    internal bool EnforceConstraints { get; internal set; }
    internal bool SuspendEnforceConstraints { get; internal set; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("ExtendedPropertiesDescr")]
[BrowsableAttribute("False")]
public PropertyCollection ExtendedProperties { get; }
    internal IFormatProvider FormatProvider { get; }
    [BrowsableAttribute("False")]
[ResDescriptionAttribute("DataTableHasErrorsDescr")]
public bool HasErrors { get; }
    [ResDescriptionAttribute("DataTableLocaleDescr")]
public CultureInfo Locale { get; public set; }
    [DefaultValueAttribute("50")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DataTableMinimumCapacityDescr")]
public int MinimumCapacity { get; public set; }
    internal int RecordCapacity { get; }
    internal int ElementColumnCount { get; internal set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[ResDescriptionAttribute("DataTableParentRelationsDescr")]
public DataRelationCollection ParentRelations { get; }
    internal bool MergingData { get; internal set; }
    internal DataRelation[] NestedParentRelations { get; }
    internal bool SchemaLoading { get; }
    internal int NestedParentsCount { get; }
    [ResDescriptionAttribute("DataTablePrimaryKeyDescr")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.PrimaryKeyEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[TypeConverterAttribute("System.Data.PrimaryKeyTypeConverter")]
[ResCategoryAttribute("DataCategory_Data")]
public DataColumn[] PrimaryKey { get; public set; }
    [ResDescriptionAttribute("DataTableRowsDescr")]
[BrowsableAttribute("False")]
public DataRowCollection Rows { get; }
    [DefaultValueAttribute("")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DataTableTableNameDescr")]
[RefreshPropertiesAttribute("1")]
public string TableName { get; public set; }
    internal string EncodedTableName { get; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DataTableNamespaceDescr")]
public string Namespace { get; public set; }
    [ResDescriptionAttribute("DataTablePrefixDescr")]
[DefaultValueAttribute("")]
[ResCategoryAttribute("DataCategory_Data")]
public string Prefix { get; public set; }
    internal DataColumn XmlText { get; internal set; }
    internal decimal MaxOccurs { get; internal set; }
    internal decimal MinOccurs { get; internal set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public ISite Site { get; public set; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    internal bool NeedColumnChangeEvents { get; }
    internal XmlQualifiedName TypeName { get; internal set; }
    internal Hashtable RowDiffId { get; }
    internal int ObjectID { get; }
    public DataTable(string tableName);
    public DataTable(string tableName, string tableNamespace);
    protected DataTable(SerializationInfo info, StreamingContext context);
    private static DataTable();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal void DeserializeDataTable(SerializationInfo info, StreamingContext context, bool isSingleTable, SerializationFormat remotingFormat);
    internal void SerializeTableSchema(SerializationInfo info, StreamingContext context, bool isSingleTable);
    internal void DeserializeTableSchema(SerializationInfo info, StreamingContext context, bool isSingleTable);
    internal void SerializeConstraints(SerializationInfo info, StreamingContext context, int serIndex, bool allConstraints);
    internal void DeserializeConstraints(SerializationInfo info, StreamingContext context, int serIndex, bool allConstraints);
    internal void SerializeExpressionColumns(SerializationInfo info, StreamingContext context, int serIndex);
    internal void DeserializeExpressionColumns(SerializationInfo info, StreamingContext context, int serIndex);
    internal void SerializeTableData(SerializationInfo info, StreamingContext context, int serIndex);
    internal void DeserializeTableData(SerializationInfo info, StreamingContext context, int serIndex);
    internal void GetRowAndColumnErrors(int rowIndex, Hashtable rowErrors, Hashtable colErrors);
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    internal bool get_AreIndexEventsSuspended();
    internal void RestoreIndexEvents(bool forceReset);
    internal void SuspendIndexEvents();
    public sealed virtual bool get_IsInitialized();
    internal bool SetCaseSensitiveValue(bool isCaseSensitive, bool userSet, bool resetIndexes);
    internal bool ShouldSerializeCaseSensitive();
    internal bool get_SelfNested();
    internal List`1<Index> get_LiveIndexes();
    public SerializationFormat get_RemotingFormat();
    public void set_RemotingFormat(SerializationFormat value);
    internal int get_UKColumnPositionForInference();
    internal void set_UKColumnPositionForInference(int value);
    public DataRelationCollection get_ChildRelations();
    public DataColumnCollection get_Columns();
    public ConstraintCollection get_Constraints();
    public DataSet get_DataSet();
    internal void SetDataSet(DataSet dataSet);
    public DataView get_DefaultView();
    public string get_DisplayExpression();
    public void set_DisplayExpression(string value);
    internal string get_DisplayExpressionInternal();
    internal bool get_EnforceConstraints();
    internal void set_EnforceConstraints(bool value);
    internal bool get_SuspendEnforceConstraints();
    internal void set_SuspendEnforceConstraints(bool value);
    internal void EnableConstraints();
    public PropertyCollection get_ExtendedProperties();
    internal IFormatProvider get_FormatProvider();
    public bool get_HasErrors();
    public CultureInfo get_Locale();
    public void set_Locale(CultureInfo value);
    internal bool SetLocaleValue(CultureInfo culture, bool userSet, bool resetIndexes);
    internal bool ShouldSerializeLocale();
    public int get_MinimumCapacity();
    public void set_MinimumCapacity(int value);
    internal int get_RecordCapacity();
    internal int get_ElementColumnCount();
    internal void set_ElementColumnCount(int value);
    public DataRelationCollection get_ParentRelations();
    internal bool get_MergingData();
    internal void set_MergingData(bool value);
    internal DataRelation[] get_NestedParentRelations();
    internal bool get_SchemaLoading();
    internal void CacheNestedParent();
    internal int get_NestedParentsCount();
    public DataColumn[] get_PrimaryKey();
    public void set_PrimaryKey(DataColumn[] value);
    public DataRowCollection get_Rows();
    public string get_TableName();
    public void set_TableName(string value);
    internal string get_EncodedTableName();
    public string get_Namespace();
    public void set_Namespace(string value);
    internal bool IsNamespaceInherited();
    internal void CheckCascadingNamespaceConflict(string realNamespace);
    internal void CheckNamespaceValidityForNestedRelations(string realNamespace);
    internal void CheckNamespaceValidityForNestedParentRelations(string ns, DataTable parentTable);
    internal void DoRaiseNamespaceChange();
    public virtual void BeginInit();
    public virtual void EndInit();
    public string get_Prefix();
    public void set_Prefix(string value);
    internal DataColumn get_XmlText();
    internal void set_XmlText(DataColumn value);
    internal decimal get_MaxOccurs();
    internal void set_MaxOccurs(decimal value);
    internal decimal get_MinOccurs();
    internal void set_MinOccurs(decimal value);
    internal void SetKeyValues(DataKey key, Object[] keyValues, int record);
    internal DataRow FindByIndex(Index ndx, Object[] key);
    internal DataRow FindMergeTarget(DataRow row, DataKey key, Index ndx);
    internal DataRow MergeRow(DataRow row, DataRow targetRow, bool preserveChanges, Index idxSearch);
    public void AcceptChanges();
    protected virtual DataTable CreateInstance();
    public virtual DataTable Clone();
    internal DataTable Clone(DataSet cloneDS);
    public DataTable Copy();
    public void add_ColumnChanging(DataColumnChangeEventHandler value);
    public void remove_ColumnChanging(DataColumnChangeEventHandler value);
    public void add_ColumnChanged(DataColumnChangeEventHandler value);
    public void remove_ColumnChanged(DataColumnChangeEventHandler value);
    public sealed virtual void add_Initialized(EventHandler value);
    public sealed virtual void remove_Initialized(EventHandler value);
    internal void add_PropertyChanging(PropertyChangedEventHandler value);
    internal void remove_PropertyChanging(PropertyChangedEventHandler value);
    public void add_RowChanged(DataRowChangeEventHandler value);
    public void remove_RowChanged(DataRowChangeEventHandler value);
    public void add_RowChanging(DataRowChangeEventHandler value);
    public void remove_RowChanging(DataRowChangeEventHandler value);
    public void add_RowDeleting(DataRowChangeEventHandler value);
    public void remove_RowDeleting(DataRowChangeEventHandler value);
    public void add_RowDeleted(DataRowChangeEventHandler value);
    public void remove_RowDeleted(DataRowChangeEventHandler value);
    public void add_TableClearing(DataTableClearEventHandler value);
    public void remove_TableClearing(DataTableClearEventHandler value);
    public void add_TableCleared(DataTableClearEventHandler value);
    public void remove_TableCleared(DataTableClearEventHandler value);
    public void add_TableNewRow(DataTableNewRowEventHandler value);
    public void remove_TableNewRow(DataTableNewRowEventHandler value);
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    internal DataRow AddRecords(int oldRecord, int newRecord);
    internal void AddRow(DataRow row);
    internal void AddRow(DataRow row, int proposedID);
    internal void InsertRow(DataRow row, int proposedID, int pos);
    internal void InsertRow(DataRow row, long proposedID, int pos, bool fireEvent);
    internal void CheckNotModifying(DataRow row);
    public void Clear();
    internal void Clear(bool clearAll);
    internal void CascadeAll(DataRow row, DataRowAction action);
    internal void CommitRow(DataRow row);
    internal int Compare(string s1, string s2);
    internal int Compare(string s1, string s2, CompareInfo comparer);
    internal int IndexOf(string s1, string s2);
    internal bool IsSuffix(string s1, string s2);
    public object Compute(string expression, string filter);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    internal void CopyRow(DataTable table, DataRow row);
    internal void DeleteRow(DataRow row);
    internal DataRow FindByPrimaryKey(Object[] values);
    internal DataRow FindByPrimaryKey(object value);
    internal string FormatSortString(IndexField[] indexDesc);
    internal void FreeRecord(Int32& record);
    public DataTable GetChanges();
    public DataTable GetChanges(DataRowState rowStates);
    public DataRow[] GetErrors();
    internal Index GetIndex(IndexField[] indexDesc);
    internal Index GetIndex(string sort, DataViewRowState recordStates, IFilter rowFilter);
    internal Index GetIndex(IndexField[] indexDesc, DataViewRowState recordStates, IFilter rowFilter);
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    internal List`1<DataViewListener> GetListeners();
    internal int GetSpecialHashCode(string name);
    public void ImportRow(DataRow row);
    internal void InsertRow(DataRow row, long proposedID);
    internal int NewRecord();
    internal int NewUninitializedRecord();
    internal int NewRecordFromArray(Object[] value);
    internal int NewRecord(int sourceRecord);
    internal DataRow NewEmptyRow();
    public DataRow NewRow();
    internal DataRow CreateEmptyRow();
    internal DataRow NewRow(int record);
    protected virtual DataRow NewRowFromBuilder(DataRowBuilder builder);
    protected virtual Type GetRowType();
    protected internal DataRow[] NewRowArray(int size);
    internal bool get_NeedColumnChangeEvents();
    protected internal virtual void OnColumnChanging(DataColumnChangeEventArgs e);
    protected internal virtual void OnColumnChanged(DataColumnChangeEventArgs e);
    protected virtual void OnPropertyChanging(PropertyChangedEventArgs pcevent);
    internal void OnRemoveColumnInternal(DataColumn column);
    protected virtual void OnRemoveColumn(DataColumn column);
    protected virtual void OnRowChanged(DataRowChangeEventArgs e);
    protected virtual void OnRowChanging(DataRowChangeEventArgs e);
    protected virtual void OnRowDeleting(DataRowChangeEventArgs e);
    protected virtual void OnRowDeleted(DataRowChangeEventArgs e);
    protected virtual void OnTableCleared(DataTableClearEventArgs e);
    protected virtual void OnTableClearing(DataTableClearEventArgs e);
    protected virtual void OnTableNewRow(DataTableNewRowEventArgs e);
    internal IndexField[] ParseSortString(string sortString);
    internal void RaisePropertyChanging(string name);
    internal void RecordChanged(int record);
    internal void RecordChanged(Int32[] oldIndex, Int32[] newIndex);
    internal void RecordStateChanged(int record, DataViewRowState oldState, DataViewRowState newState);
    internal void RecordStateChanged(int record1, DataViewRowState oldState1, DataViewRowState newState1, int record2, DataViewRowState oldState2, DataViewRowState newState2);
    internal Int32[] RemoveRecordFromIndexes(DataRow row, DataRowVersion version);
    internal Int32[] InsertRecordToIndexes(DataRow row, DataRowVersion version);
    internal void SilentlySetValue(DataRow dr, DataColumn dc, DataRowVersion version, object newValue);
    public void RejectChanges();
    internal void RemoveRow(DataRow row, bool check);
    public virtual void Reset();
    internal void ResetIndexes();
    internal void ResetInternalIndexes(DataColumn column);
    internal void RollbackRow(DataRow row);
    public DataRow[] Select();
    public DataRow[] Select(string filterExpression);
    public DataRow[] Select(string filterExpression, string sort);
    public DataRow[] Select(string filterExpression, string sort, DataViewRowState recordStates);
    internal void SetNewRecord(DataRow row, int proposedRecord, DataRowAction action, bool isInMerge, bool fireEvent, bool suppressEnsurePropertyChanged);
    internal void SetOldRecord(DataRow row, int proposedRecord);
    internal void ShadowIndexCopy();
    public virtual string ToString();
    public void BeginLoadData();
    public void EndLoadData();
    public DataRow LoadDataRow(Object[] values, bool fAcceptChanges);
    public DataRow LoadDataRow(Object[] values, LoadOption loadOption);
    internal DataRow UpdatingAdd(Object[] values);
    internal bool UpdatingCurrent(DataRow row, DataRowAction action);
    internal DataColumn AddUniqueKey(int position);
    internal DataColumn AddUniqueKey();
    internal DataColumn AddForeignKey(DataColumn parentKey);
    internal void UpdatePropertyDescriptorCollectionCache();
    internal PropertyDescriptorCollection GetPropertyDescriptorCollection(Attribute[] attributes);
    internal XmlQualifiedName get_TypeName();
    internal void set_TypeName(XmlQualifiedName value);
    public void Merge(DataTable table);
    public void Merge(DataTable table, bool preserveChanges);
    public void Merge(DataTable table, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    public void Load(IDataReader reader);
    public void Load(IDataReader reader, LoadOption loadOption);
    public virtual void Load(IDataReader reader, LoadOption loadOption, FillErrorEventHandler errorHandler);
    public DataTableReader CreateDataReader();
    public void WriteXml(Stream stream);
    public void WriteXml(Stream stream, bool writeHierarchy);
    public void WriteXml(TextWriter writer);
    public void WriteXml(TextWriter writer, bool writeHierarchy);
    public void WriteXml(XmlWriter writer);
    public void WriteXml(XmlWriter writer, bool writeHierarchy);
    public void WriteXml(string fileName);
    public void WriteXml(string fileName, bool writeHierarchy);
    public void WriteXml(Stream stream, XmlWriteMode mode);
    public void WriteXml(Stream stream, XmlWriteMode mode, bool writeHierarchy);
    public void WriteXml(TextWriter writer, XmlWriteMode mode);
    public void WriteXml(TextWriter writer, XmlWriteMode mode, bool writeHierarchy);
    public void WriteXml(XmlWriter writer, XmlWriteMode mode);
    public void WriteXml(XmlWriter writer, XmlWriteMode mode, bool writeHierarchy);
    public void WriteXml(string fileName, XmlWriteMode mode);
    public void WriteXml(string fileName, XmlWriteMode mode, bool writeHierarchy);
    public void WriteXmlSchema(Stream stream);
    public void WriteXmlSchema(Stream stream, bool writeHierarchy);
    public void WriteXmlSchema(TextWriter writer);
    public void WriteXmlSchema(TextWriter writer, bool writeHierarchy);
    public void WriteXmlSchema(XmlWriter writer);
    public void WriteXmlSchema(XmlWriter writer, bool writeHierarchy);
    public void WriteXmlSchema(string fileName);
    public void WriteXmlSchema(string fileName, bool writeHierarchy);
    public XmlReadMode ReadXml(Stream stream);
    public XmlReadMode ReadXml(TextReader reader);
    public XmlReadMode ReadXml(string fileName);
    public XmlReadMode ReadXml(XmlReader reader);
    internal XmlReadMode ReadXml(XmlReader reader, bool denyResolving);
    internal XmlReadMode ReadXml(XmlReader reader, XmlReadMode mode, bool denyResolving);
    internal void ReadEndElement(XmlReader reader);
    internal void ReadXDRSchema(XmlReader reader);
    internal bool MoveToElement(XmlReader reader, int depth);
    internal void ReadXSDSchema(XmlReader reader, bool denyResolving);
    public void ReadXmlSchema(Stream stream);
    public void ReadXmlSchema(TextReader reader);
    public void ReadXmlSchema(string fileName);
    public void ReadXmlSchema(XmlReader reader);
    internal void ReadXmlSchema(XmlReader reader, bool denyResolving);
    public static XmlSchemaComplexType GetDataTableSchema(XmlSchemaSet schemaSet);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    protected virtual XmlSchema GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    protected virtual void ReadXmlSerializable(XmlReader reader);
    internal Hashtable get_RowDiffId();
    internal int get_ObjectID();
    internal void AddDependentColumn(DataColumn expressionColumn);
    internal void RemoveDependentColumn(DataColumn expressionColumn);
    internal void EvaluateExpressions();
    internal void EvaluateExpressions(DataRow row, DataRowAction action, List`1<DataRow> cachedRows);
    internal void EvaluateExpressions(DataColumn column);
    internal void EvaluateDependentExpressions(DataColumn column);
    internal void EvaluateDependentExpressions(List`1<DataColumn> columns, DataRow row, DataRowVersion version, List`1<DataRow> cachedRows);
}
public class System.Data.DataTableClearEventArgs : EventArgs {
    public DataTable Table { get; }
    public string TableName { get; }
    public string TableNamespace { get; }
    public DataTableClearEventArgs(DataTable dataTable);
    public DataTable get_Table();
    public string get_TableName();
    public string get_TableNamespace();
}
public class System.Data.DataTableClearEventHandler : MulticastDelegate {
    public DataTableClearEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataTableClearEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataTableClearEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[EditorAttribute("Microsoft.VSDesigner.Data.Design.TablesCollectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultMemberAttribute("Item")]
[DefaultEventAttribute("CollectionChanged")]
[ListBindableAttribute("False")]
public class System.Data.DataTableCollection : InternalDataCollectionBase {
    protected ArrayList List { get; }
    internal int ObjectID { get; }
    public DataTable Item { get; }
    public DataTable Item { get; }
    public DataTable Item { get; }
    internal DataTableCollection(DataSet dataSet);
    protected virtual ArrayList get_List();
    internal int get_ObjectID();
    public DataTable get_Item(int index);
    public DataTable get_Item(string name);
    public DataTable get_Item(string name, string tableNamespace);
    internal DataTable GetTable(string name, string ns);
    internal DataTable GetTableSmart(string name, string ns);
    public void Add(DataTable table);
    public void AddRange(DataTable[] tables);
    public DataTable Add(string name);
    public DataTable Add(string name, string tableNamespace);
    public DataTable Add();
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    public void add_CollectionChanging(CollectionChangeEventHandler value);
    public void remove_CollectionChanging(CollectionChangeEventHandler value);
    internal string AssignName();
    public bool CanRemove(DataTable table);
    internal bool CanRemove(DataTable table, bool fThrowException);
    public void Clear();
    public bool Contains(string name);
    public bool Contains(string name, string tableNamespace);
    internal bool Contains(string name, string tableNamespace, bool checkProperty, bool caseSensitive);
    internal bool Contains(string name, bool caseSensitive);
    public void CopyTo(DataTable[] array, int index);
    public int IndexOf(DataTable table);
    public int IndexOf(string tableName);
    public int IndexOf(string tableName, string tableNamespace);
    internal int IndexOf(string tableName, string tableNamespace, bool chekforNull);
    internal void ReplaceFromInference(List`1<DataTable> tableList);
    internal int InternalIndexOf(string tableName);
    internal int InternalIndexOf(string tableName, string tableNamespace);
    internal void FinishInitCollection();
    internal void RegisterName(string name, string tbNamespace);
    public void Remove(DataTable table);
    public void RemoveAt(int index);
    public void Remove(string name);
    public void Remove(string name, string tableNamespace);
    internal void UnregisterName(string name);
}
public class System.Data.DataTableNewRowEventArgs : EventArgs {
    public DataRow Row { get; }
    public DataTableNewRowEventArgs(DataRow dataRow);
    public DataRow get_Row();
}
public class System.Data.DataTableNewRowEventHandler : MulticastDelegate {
    public DataTableNewRowEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataTableNewRowEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataTableNewRowEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.DataTablePropertyDescriptor : PropertyDescriptor {
    public DataTable Table { get; }
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    internal DataTablePropertyDescriptor(DataTable dataTable);
    public DataTable get_Table();
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
[DefaultMemberAttribute("Item")]
public class System.Data.DataTableReader : DbDataReader {
    internal DataTable CurrentDataTable { get; }
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public bool HasRows { get; }
    public object Item { get; }
    public object Item { get; }
    public int FieldCount { get; }
    public DataTableReader(DataTable dataTable);
    public DataTableReader(DataTable[] dataTables);
    internal DataTable get_CurrentDataTable();
    public virtual void Close();
    public virtual DataTable GetSchemaTable();
    public virtual bool NextResult();
    public virtual bool Read();
    public virtual int get_Depth();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual bool get_HasRows();
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual int get_FieldCount();
    public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual object GetProviderSpecificValue(int ordinal);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public virtual string GetDataTypeName(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public virtual IEnumerator GetEnumerator();
    internal static DataTable GetSchemaTableFromDataTable(DataTable table);
    internal void SchemaChanged();
    internal void DataTableCleared();
    internal void DataChanged(DataRowChangeEventArgs args);
}
internal class System.Data.DataTableReaderListener : object {
    internal DataTableReaderListener(DataTableReader reader);
    internal void CleanUp();
    internal void UpdataTable(DataTable datatable);
}
internal class System.Data.DataTableTypeConverter : ReferenceConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
internal class System.Data.DataTextReader : XmlReader {
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    public bool CanResolveEntity { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    internal static XmlReader CreateReader(XmlReader xr);
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool ReadAttributeValue();
    public virtual bool Read();
    public virtual bool get_EOF();
    public virtual void Close();
    public virtual ReadState get_ReadState();
    public virtual void Skip();
    public virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual bool get_CanResolveEntity();
    public virtual void ResolveEntity();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool get_CanReadValueChunk();
    public virtual string ReadString();
}
internal class System.Data.DataTextWriter : XmlWriter {
    internal Stream BaseStream { get; }
    public WriteState WriteState { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    internal static XmlWriter CreateWriter(XmlWriter xw);
    internal Stream get_BaseStream();
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    public virtual WriteState get_WriteState();
    public virtual void Close();
    public virtual void Flush();
    public virtual void WriteName(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual string LookupPrefix(string ns);
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteNmToken(string name);
}
[DefaultMemberAttribute("Item")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DataSourceEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultPropertyAttribute("Table")]
[DefaultEventAttribute("PositionChanged")]
[DesignerAttribute("Microsoft.VSDesigner.Data.VS.DataViewDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Data.DataView : MarshalByValueComponent {
    internal DataRow addNewRow;
    internal static ListChangedEventArgs ResetEventArgs;
    [ResDescriptionAttribute("DataViewAllowDeleteDescr")]
[DefaultValueAttribute("True")]
[ResCategoryAttribute("DataCategory_Data")]
public bool AllowDelete { get; public set; }
    [RefreshPropertiesAttribute("1")]
[ResDescriptionAttribute("DataViewApplyDefaultSortDescr")]
[ResCategoryAttribute("DataCategory_Data")]
[DefaultValueAttribute("False")]
public bool ApplyDefaultSort { get; public set; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DataViewAllowEditDescr")]
[DefaultValueAttribute("True")]
public bool AllowEdit { get; public set; }
    [DefaultValueAttribute("True")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DataViewAllowNewDescr")]
public bool AllowNew { get; public set; }
    [BrowsableAttribute("False")]
[ResDescriptionAttribute("DataViewCountDescr")]
public int Count { get; }
    [ResDescriptionAttribute("DataViewDataViewManagerDescr")]
[BrowsableAttribute("False")]
public DataViewManager DataViewManager { get; }
    [BrowsableAttribute("False")]
public bool IsInitialized { get; }
    [ResDescriptionAttribute("DataViewIsOpenDescr")]
[BrowsableAttribute("False")]
protected bool IsOpen { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    [ResDescriptionAttribute("DataViewRowFilterDescr")]
[ResCategoryAttribute("DataCategory_Data")]
[DefaultValueAttribute("")]
public string RowFilter { get; public set; }
    internal Predicate`1<DataRow> RowPredicate { get; internal set; }
    [ResDescriptionAttribute("DataViewRowStateFilterDescr")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ResCategoryAttribute("DataCategory_Data")]
public DataViewRowState RowStateFilter { get; public set; }
    [ResDescriptionAttribute("DataViewSortDescr")]
[ResCategoryAttribute("DataCategory_Data")]
[DefaultValueAttribute("")]
public string Sort { get; public set; }
    internal Comparison`1<DataRow> SortComparison { get; internal set; }
    private object System.Collections.ICollection.SyncRoot { get; }
    [ResCategoryAttribute("DataCategory_Data")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.Data.DataTableTypeConverter")]
[ResDescriptionAttribute("DataViewTableDescr")]
public DataTable Table { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public DataRowView Item { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private string System.ComponentModel.IBindingListView.Filter { get; private set; }
    private ListSortDescriptionCollection System.ComponentModel.IBindingListView.SortDescriptions { get; }
    private bool System.ComponentModel.IBindingListView.SupportsAdvancedSorting { get; }
    private bool System.ComponentModel.IBindingListView.SupportsFiltering { get; }
    internal int ObjectID { get; }
    internal DataView(DataTable table, bool locked);
    public DataView(DataTable table);
    public DataView(DataTable table, string RowFilter, string Sort, DataViewRowState RowState);
    internal DataView(DataTable table, Predicate`1<DataRow> predicate, Comparison`1<DataRow> comparison, DataViewRowState RowState);
    private static DataView();
    public bool get_AllowDelete();
    public void set_AllowDelete(bool value);
    public bool get_ApplyDefaultSort();
    public void set_ApplyDefaultSort(bool value);
    public bool get_AllowEdit();
    public void set_AllowEdit(bool value);
    public bool get_AllowNew();
    public void set_AllowNew(bool value);
    public sealed virtual int get_Count();
    public DataViewManager get_DataViewManager();
    public sealed virtual bool get_IsInitialized();
    protected bool get_IsOpen();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public virtual string get_RowFilter();
    public virtual void set_RowFilter(string value);
    internal Predicate`1<DataRow> get_RowPredicate();
    internal void set_RowPredicate(Predicate`1<DataRow> value);
    public DataViewRowState get_RowStateFilter();
    public void set_RowStateFilter(DataViewRowState value);
    public string get_Sort();
    public void set_Sort(string value);
    internal Comparison`1<DataRow> get_SortComparison();
    internal void set_SortComparison(Comparison`1<DataRow> value);
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public DataTable get_Table();
    public void set_Table(DataTable value);
    private sealed virtual override object System.Collections.IList.get_Item(int recordIndex);
    private sealed virtual override void System.Collections.IList.set_Item(int recordIndex, object value);
    public DataRowView get_Item(int recordIndex);
    public virtual DataRowView AddNew();
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    protected void Close();
    public sealed virtual void CopyTo(Array array, int index);
    public void Delete(int index);
    internal void Delete(DataRow row);
    protected virtual void Dispose(bool disposing);
    public int Find(object key);
    internal virtual int FindByKey(object key);
    public int Find(Object[] key);
    internal virtual int FindByKey(Object[] key);
    public DataRowView[] FindRows(object key);
    public DataRowView[] FindRows(Object[] key);
    internal virtual DataRowView[] FindRowsByKey(Object[] key);
    internal Range FindRecords(ComparisonBySelector`2<TKey, TRow> comparison, TKey key);
    internal DataRowView[] GetDataRowViewFromRange(Range range);
    internal void FinishAddNew(bool success);
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    internal int IndexOf(DataRowView rowview);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    internal Index GetFindIndex(string column, bool keepIndex);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    internal PropertyDescriptor GetSortProperty();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    public sealed virtual void add_Initialized(EventHandler value);
    public sealed virtual void remove_Initialized(EventHandler value);
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override void System.ComponentModel.IBindingListView.ApplySort(ListSortDescriptionCollection sorts);
    private sealed virtual override void System.ComponentModel.IBindingListView.RemoveFilter();
    private sealed virtual override string System.ComponentModel.IBindingListView.get_Filter();
    private sealed virtual override void System.ComponentModel.IBindingListView.set_Filter(string value);
    private sealed virtual override ListSortDescriptionCollection System.ComponentModel.IBindingListView.get_SortDescriptions();
    internal ListSortDescriptionCollection GetSortDescriptions();
    private sealed virtual override bool System.ComponentModel.IBindingListView.get_SupportsAdvancedSorting();
    private sealed virtual override bool System.ComponentModel.IBindingListView.get_SupportsFiltering();
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    internal virtual IFilter GetFilter();
    internal DataRow GetRow(int index);
    protected virtual void IndexListChanged(object sender, ListChangedEventArgs e);
    internal void IndexListChangedInternal(ListChangedEventArgs e);
    internal void MaintainDataView(ListChangedType changedType, DataRow row, bool trackAddRemove);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    protected void Open();
    protected void Reset();
    internal void ResetRowViewCache();
    internal void SetDataViewManager(DataViewManager dataViewManager);
    internal virtual void SetIndex(string newSort, DataViewRowState newRowStates, IFilter newRowFilter);
    internal void SetIndex2(string newSort, DataViewRowState newRowStates, IFilter newRowFilter, bool fireEvent);
    protected void UpdateIndex();
    protected virtual void UpdateIndex(bool force);
    internal void UpdateIndex(bool force, bool fireEvent);
    internal void ChildRelationCollectionChanged(object sender, CollectionChangeEventArgs e);
    internal void ParentRelationCollectionChanged(object sender, CollectionChangeEventArgs e);
    protected virtual void ColumnCollectionChanged(object sender, CollectionChangeEventArgs e);
    internal void ColumnCollectionChangedInternal(object sender, CollectionChangeEventArgs e);
    public DataTable ToTable();
    public DataTable ToTable(string tableName);
    public DataTable ToTable(bool distinct, String[] columnNames);
    public DataTable ToTable(string tableName, bool distinct, String[] columnNames);
    public virtual bool Equals(DataView view);
    internal int get_ObjectID();
}
internal class System.Data.DataViewListener : object {
    internal int ObjectID;
    internal DataViewListener(DataView dv);
    internal void MaintainDataView(ListChangedType changedType, DataRow row, bool trackAddRemove);
    internal void IndexListChanged(ListChangedEventArgs e);
    internal void RegisterMetaDataEvents(DataTable table);
    internal void UnregisterMetaDataEvents();
    internal void RegisterListChangedEvent(Index index);
    internal void UnregisterListChangedEvent();
}
[DesignerAttribute("Microsoft.VSDesigner.Data.VS.DataViewManagerDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Data.DataViewManager : MarshalByValueComponent {
    internal int nViews;
    [ResDescriptionAttribute("DataViewManagerDataSetDescr")]
[DefaultValueAttribute("")]
public DataSet DataSet { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[ResDescriptionAttribute("DataViewManagerTableSettingsDescr")]
public DataViewSettingCollection DataViewSettings { get; }
    public string DataViewSettingCollectionString { get; public set; }
    private int System.Collections.ICollection.Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    public DataViewManager(DataSet dataSet);
    internal DataViewManager(DataSet dataSet, bool locked);
    private static DataViewManager();
    public DataSet get_DataSet();
    public void set_DataSet(DataSet value);
    public DataViewSettingCollection get_DataViewSettings();
    public string get_DataViewSettingCollectionString();
    public void set_DataViewSettingCollectionString(string value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    public DataView CreateDataView(DataTable table);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    protected virtual void TableCollectionChanged(object sender, CollectionChangeEventArgs e);
    protected virtual void RelationCollectionChanged(object sender, CollectionChangeEventArgs e);
}
internal class System.Data.DataViewManagerListItemTypeDescriptor : object {
    internal DataViewManagerListItemTypeDescriptor(DataViewManager dataViewManager);
    internal void Reset();
    internal DataView GetDataView(DataTable table);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
[FlagsAttribute]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DataViewRowStateEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public enum System.Data.DataViewRowState : Enum {
    public int value__;
    public static DataViewRowState None;
    public static DataViewRowState Unchanged;
    public static DataViewRowState Added;
    public static DataViewRowState Deleted;
    public static DataViewRowState ModifiedCurrent;
    public static DataViewRowState ModifiedOriginal;
    public static DataViewRowState OriginalRows;
    public static DataViewRowState CurrentRows;
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public class System.Data.DataViewSetting : object {
    public bool ApplyDefaultSort { get; public set; }
    [BrowsableAttribute("False")]
public DataViewManager DataViewManager { get; }
    [BrowsableAttribute("False")]
public DataTable Table { get; }
    public string RowFilter { get; public set; }
    public DataViewRowState RowStateFilter { get; public set; }
    public string Sort { get; public set; }
    internal DataViewSetting(string sort, string rowFilter, DataViewRowState rowStateFilter);
    public bool get_ApplyDefaultSort();
    public void set_ApplyDefaultSort(bool value);
    public DataViewManager get_DataViewManager();
    internal void SetDataViewManager(DataViewManager dataViewManager);
    public DataTable get_Table();
    internal void SetDataTable(DataTable table);
    public string get_RowFilter();
    public void set_RowFilter(string value);
    public DataViewRowState get_RowStateFilter();
    public void set_RowStateFilter(DataViewRowState value);
    public string get_Sort();
    public void set_Sort(string value);
}
[DefaultMemberAttribute("Item")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DataViewSettingsCollectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Data.DataViewSettingCollection : object {
    public DataViewSetting Item { get; public set; }
    public DataViewSetting Item { get; }
    public DataViewSetting Item { get; public set; }
    [BrowsableAttribute("False")]
public int Count { get; }
    [BrowsableAttribute("False")]
public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]
public bool IsSynchronized { get; }
    [BrowsableAttribute("False")]
public object SyncRoot { get; }
    internal DataViewSettingCollection(DataViewManager dataViewManager);
    public virtual DataViewSetting get_Item(DataTable table);
    public virtual void set_Item(DataTable table, DataViewSetting value);
    public virtual DataViewSetting get_Item(string tableName);
    public virtual DataViewSetting get_Item(int index);
    public virtual void set_Item(int index, DataViewSetting value);
    public sealed virtual void CopyTo(Array ar, int index);
    public void CopyTo(DataViewSetting[] ar, int index);
    public virtual int get_Count();
    public sealed virtual IEnumerator GetEnumerator();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    internal void Remove(DataTable table);
}
public class System.Data.DBConcurrencyException : SystemException {
    public DataRow Row { get; public set; }
    public int RowCount { get; }
    public DBConcurrencyException(string message);
    public DBConcurrencyException(string message, Exception inner);
    public DBConcurrencyException(string message, Exception inner, DataRow[] dataRows);
    private DBConcurrencyException(SerializationInfo si, StreamingContext sc);
    public virtual void GetObjectData(SerializationInfo si, StreamingContext context);
    public DataRow get_Row();
    public void set_Row(DataRow value);
    public int get_RowCount();
    public void CopyToRows(DataRow[] array);
    public void CopyToRows(DataRow[] array, int arrayIndex);
}
public enum System.Data.DbType : Enum {
    public int value__;
    public static DbType AnsiString;
    public static DbType Binary;
    public static DbType Byte;
    public static DbType Boolean;
    public static DbType Currency;
    public static DbType Date;
    public static DbType DateTime;
    public static DbType Decimal;
    public static DbType Double;
    public static DbType Guid;
    public static DbType Int16;
    public static DbType Int32;
    public static DbType Int64;
    public static DbType Object;
    public static DbType SByte;
    public static DbType Single;
    public static DbType String;
    public static DbType Time;
    public static DbType UInt16;
    public static DbType UInt32;
    public static DbType UInt64;
    public static DbType VarNumeric;
    public static DbType AnsiStringFixedLength;
    public static DbType StringFixedLength;
    public static DbType Xml;
    public static DbType DateTime2;
    public static DbType DateTimeOffset;
}
internal class System.Data.DefaultValueTypeConverter : StringConverter {
    private static DefaultValueTypeConverter();
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class System.Data.DeletedRowInaccessibleException : DataException {
    protected DeletedRowInaccessibleException(SerializationInfo info, StreamingContext context);
    public DeletedRowInaccessibleException(string s);
    public DeletedRowInaccessibleException(string message, Exception innerException);
}
public class System.Data.DuplicateNameException : DataException {
    protected DuplicateNameException(SerializationInfo info, StreamingContext context);
    public DuplicateNameException(string s);
    public DuplicateNameException(string message, Exception innerException);
}
public class System.Data.EvaluateException : InvalidExpressionException {
    protected EvaluateException(SerializationInfo info, StreamingContext context);
    public EvaluateException(string s);
    public EvaluateException(string message, Exception innerException);
}
internal static class System.Data.ExceptionBuilder : object {
    internal static void TraceExceptionAsReturnValue(Exception e);
    internal static void TraceExceptionForCapture(Exception e);
    internal static void TraceExceptionWithoutRethrow(Exception e);
    internal static ArgumentException _Argument(string error);
    internal static ArgumentException _Argument(string paramName, string error);
    internal static ArgumentException _Argument(string error, Exception innerException);
    internal static ArgumentOutOfRangeException _ArgumentOutOfRange(string paramName, string msg);
    public static Exception ArgumentNull(string paramName);
    public static Exception ArgumentOutOfRange(string paramName);
    public static Exception BadObjectPropertyAccess(string error);
    public static Exception ArgumentContainsNull(string paramName);
    public static Exception CannotModifyCollection();
    public static Exception CaseInsensitiveNameConflict(string name);
    public static Exception NamespaceNameConflict(string name);
    public static Exception InvalidOffsetLength();
    public static Exception ColumnNotInTheTable(string column, string table);
    public static Exception ColumnNotInAnyTable();
    public static Exception ColumnOutOfRange(int index);
    public static Exception ColumnOutOfRange(string column);
    public static Exception CannotAddColumn1(string column);
    public static Exception CannotAddColumn2(string column);
    public static Exception CannotAddColumn3();
    public static Exception CannotAddColumn4(string column);
    public static Exception CannotAddDuplicate(string column);
    public static Exception CannotAddDuplicate2(string table);
    public static Exception CannotAddDuplicate3(string table);
    public static Exception CannotRemoveColumn();
    public static Exception CannotRemovePrimaryKey();
    public static Exception CannotRemoveChildKey(string relation);
    public static Exception CannotRemoveConstraint(string constraint, string table);
    public static Exception CannotRemoveExpression(string column, string expression);
    public static Exception ColumnNotInTheUnderlyingTable(string column, string table);
    public static Exception InvalidOrdinal(string name, int ordinal);
    public static Exception AddPrimaryKeyConstraint();
    public static Exception NoConstraintName();
    public static Exception ConstraintViolation(string constraint);
    public static Exception ConstraintNotInTheTable(string constraint);
    public static string KeysToString(Object[] keys);
    public static string UniqueConstraintViolationText(DataColumn[] columns, Object[] values);
    public static Exception ConstraintViolation(DataColumn[] columns, Object[] values);
    public static Exception ConstraintOutOfRange(int index);
    public static Exception DuplicateConstraint(string constraint);
    public static Exception DuplicateConstraintName(string constraint);
    public static Exception NeededForForeignKeyConstraint(UniqueConstraint key, ForeignKeyConstraint fk);
    public static Exception UniqueConstraintViolation();
    public static Exception ConstraintForeignTable();
    public static Exception ConstraintParentValues();
    public static Exception ConstraintAddFailed(DataTable table);
    public static Exception ConstraintRemoveFailed();
    public static Exception FailedCascadeDelete(string constraint);
    public static Exception FailedCascadeUpdate(string constraint);
    public static Exception FailedClearParentTable(string table, string constraint, string childTable);
    public static Exception ForeignKeyViolation(string constraint, Object[] keys);
    public static Exception RemoveParentRow(ForeignKeyConstraint constraint);
    public static string MaxLengthViolationText(string columnName);
    public static string NotAllowDBNullViolationText(string columnName);
    public static Exception CantAddConstraintToMultipleNestedTable(string tableName);
    public static Exception AutoIncrementAndExpression();
    public static Exception AutoIncrementAndDefaultValue();
    public static Exception AutoIncrementSeed();
    public static Exception CantChangeDataType();
    public static Exception NullDataType();
    public static Exception ColumnNameRequired();
    public static Exception DefaultValueAndAutoIncrement();
    public static Exception DefaultValueDataType(string column, Type defaultType, Type columnType, Exception inner);
    public static Exception DefaultValueColumnDataType(string column, Type defaultType, Type columnType, Exception inner);
    public static Exception ExpressionAndUnique();
    public static Exception ExpressionAndReadOnly();
    public static Exception ExpressionAndConstraint(DataColumn column, Constraint constraint);
    public static Exception ExpressionInConstraint(DataColumn column);
    public static Exception ExpressionCircular();
    public static Exception NonUniqueValues(string column);
    public static Exception NullKeyValues(string column);
    public static Exception NullValues(string column);
    public static Exception ReadOnlyAndExpression();
    public static Exception ReadOnly(string column);
    public static Exception UniqueAndExpression();
    public static Exception SetFailed(object value, DataColumn column, Type type, Exception innerException);
    public static Exception CannotSetToNull(DataColumn column);
    public static Exception LongerThanMaxLength(DataColumn column);
    public static Exception CannotSetMaxLength(DataColumn column, int value);
    public static Exception CannotSetMaxLength2(DataColumn column);
    public static Exception CannotSetSimpleContentType(string columnName, Type type);
    public static Exception CannotSetSimpleContent(string columnName, Type type);
    public static Exception CannotChangeNamespace(string columnName);
    public static Exception HasToBeStringType(DataColumn column);
    public static Exception AutoIncrementCannotSetIfHasData(string typeName);
    public static Exception INullableUDTwithoutStaticNull(string typeName);
    public static Exception IComparableNotImplemented(string typeName);
    public static Exception UDTImplementsIChangeTrackingButnotIRevertible(string typeName);
    public static Exception SetAddedAndModifiedCalledOnnonUnchanged();
    public static Exception InvalidDataColumnMapping(Type type);
    public static Exception CannotSetDateTimeModeForNonDateTimeColumns();
    public static Exception InvalidDateTimeMode(DataSetDateTime mode);
    public static Exception CantChangeDateTimeMode(DataSetDateTime oldValue, DataSetDateTime newValue);
    public static Exception ColumnTypeNotSupported();
    public static Exception SetFailed(string name);
    public static Exception SetDataSetFailed();
    public static Exception SetRowStateFilter();
    public static Exception CanNotSetDataSet();
    public static Exception CanNotUseDataViewManager();
    public static Exception CanNotSetTable();
    public static Exception CanNotUse();
    public static Exception CanNotBindTable();
    public static Exception SetTable();
    public static Exception SetIListObject();
    public static Exception AddNewNotAllowNull();
    public static Exception NotOpen();
    public static Exception CreateChildView();
    public static Exception CanNotDelete();
    public static Exception CanNotEdit();
    public static Exception GetElementIndex(int index);
    public static Exception AddExternalObject();
    public static Exception CanNotClear();
    public static Exception InsertExternalObject();
    public static Exception RemoveExternalObject();
    public static Exception PropertyNotFound(string property, string table);
    public static Exception ColumnToSortIsOutOfRange(string column);
    public static Exception KeyTableMismatch();
    public static Exception KeyNoColumns();
    public static Exception KeyTooManyColumns(int cols);
    public static Exception KeyDuplicateColumns(string columnName);
    public static Exception RelationDataSetMismatch();
    public static Exception NoRelationName();
    public static Exception ColumnsTypeMismatch();
    public static Exception KeyLengthMismatch();
    public static Exception KeyLengthZero();
    public static Exception ForeignRelation();
    public static Exception KeyColumnsIdentical();
    public static Exception RelationForeignTable(string t1, string t2);
    public static Exception GetParentRowTableMismatch(string t1, string t2);
    public static Exception SetParentRowTableMismatch(string t1, string t2);
    public static Exception RelationForeignRow();
    public static Exception RelationNestedReadOnly();
    public static Exception TableCantBeNestedInTwoTables(string tableName);
    public static Exception LoopInNestedRelations(string tableName);
    public static Exception RelationDoesNotExist();
    public static Exception ParentRowNotInTheDataSet();
    public static Exception ParentOrChildColumnsDoNotHaveDataSet();
    public static Exception InValidNestedRelation(string childTableName);
    public static Exception InvalidParentNamespaceinNestedRelation(string childTableName);
    public static Exception RowNotInTheDataSet();
    public static Exception RowNotInTheTable();
    public static Exception EditInRowChanging();
    public static Exception EndEditInRowChanging();
    public static Exception BeginEditInRowChanging();
    public static Exception CancelEditInRowChanging();
    public static Exception DeleteInRowDeleting();
    public static Exception ValueArrayLength();
    public static Exception NoCurrentData();
    public static Exception NoOriginalData();
    public static Exception NoProposedData();
    public static Exception RowRemovedFromTheTable();
    public static Exception DeletedRowInaccessible();
    public static Exception RowAlreadyDeleted();
    public static Exception RowEmpty();
    public static Exception InvalidRowVersion();
    public static Exception RowOutOfRange();
    public static Exception RowOutOfRange(int index);
    public static Exception RowInsertOutOfRange(int index);
    public static Exception RowInsertTwice(int index, string tableName);
    public static Exception RowInsertMissing(string tableName);
    public static Exception RowAlreadyRemoved();
    public static Exception MultipleParents();
    public static Exception InvalidRowState(DataRowState state);
    public static Exception InvalidRowBitPattern();
    internal static Exception SetDataSetNameToEmpty();
    internal static Exception SetDataSetNameConflicting(string name);
    public static Exception DataSetUnsupportedSchema(string ns);
    public static Exception MergeMissingDefinition(string obj);
    public static Exception TablesInDifferentSets();
    public static Exception RelationAlreadyExists();
    public static Exception RowAlreadyInOtherCollection();
    public static Exception RowAlreadyInTheCollection();
    public static Exception TableMissingPrimaryKey();
    public static Exception RecordStateRange();
    public static Exception IndexKeyLength(int length, int keyLength);
    public static Exception RemovePrimaryKey(DataTable table);
    public static Exception RelationAlreadyInOtherDataSet();
    public static Exception RelationAlreadyInTheDataSet();
    public static Exception RelationNotInTheDataSet(string relation);
    public static Exception RelationOutOfRange(object index);
    public static Exception DuplicateRelation(string relation);
    public static Exception RelationTableNull();
    public static Exception RelationDataSetNull();
    public static Exception RelationTableWasRemoved();
    public static Exception ParentTableMismatch();
    public static Exception ChildTableMismatch();
    public static Exception EnforceConstraint();
    public static Exception CaseLocaleMismatch();
    public static Exception CannotChangeCaseLocale();
    public static Exception CannotChangeCaseLocale(Exception innerException);
    public static Exception CannotChangeSchemaSerializationMode();
    public static Exception InvalidSchemaSerializationMode(Type enumType, string mode);
    public static Exception InvalidRemotingFormat(SerializationFormat mode);
    public static Exception TableForeignPrimaryKey();
    public static Exception TableCannotAddToSimpleContent();
    public static Exception NoTableName();
    public static Exception MultipleTextOnlyColumns();
    public static Exception InvalidSortString(string sort);
    public static Exception DuplicateTableName(string table);
    public static Exception DuplicateTableName2(string table, string ns);
    public static Exception SelfnestedDatasetConflictingName(string table);
    public static Exception DatasetConflictingName(string table);
    public static Exception TableAlreadyInOtherDataSet();
    public static Exception TableAlreadyInTheDataSet();
    public static Exception TableOutOfRange(int index);
    public static Exception TableNotInTheDataSet(string table);
    public static Exception TableInRelation();
    public static Exception TableInConstraint(DataTable table, Constraint constraint);
    public static Exception CanNotSerializeDataTableHierarchy();
    public static Exception CanNotRemoteDataTable();
    public static Exception CanNotSetRemotingFormat();
    public static Exception CanNotSerializeDataTableWithEmptyName();
    public static Exception TableNotFound(string tableName);
    public static Exception AggregateException(AggregateType aggregateType, Type type);
    public static Exception InvalidStorageType(TypeCode typecode);
    public static Exception RangeArgument(int min, int max);
    public static Exception NullRange();
    public static Exception NegativeMinimumCapacity();
    public static Exception ProblematicChars(char charValue);
    public static Exception StorageSetFailed();
    public static Exception SimpleTypeNotSupported();
    public static Exception MissingAttribute(string attribute);
    public static Exception MissingAttribute(string element, string attribute);
    public static Exception InvalidAttributeValue(string name, string value);
    public static Exception AttributeValues(string name, string value1, string value2);
    public static Exception ElementTypeNotFound(string name);
    public static Exception RelationParentNameMissing(string rel);
    public static Exception RelationChildNameMissing(string rel);
    public static Exception RelationTableKeyMissing(string rel);
    public static Exception RelationChildKeyMissing(string rel);
    public static Exception UndefinedDatatype(string name);
    public static Exception DatatypeNotDefined();
    public static Exception MismatchKeyLength();
    public static Exception InvalidField(string name);
    public static Exception InvalidSelector(string name);
    public static Exception CircularComplexType(string name);
    public static Exception CannotInstantiateAbstract(string name);
    public static Exception InvalidKey(string name);
    public static Exception DiffgramMissingTable(string name);
    public static Exception DiffgramMissingSQL();
    public static Exception DuplicateConstraintRead(string str);
    public static Exception ColumnTypeConflict(string name);
    public static Exception CannotConvert(string name, string type);
    public static Exception MissingRefer(string name);
    public static Exception InvalidPrefix(string name);
    public static Exception CanNotDeserializeObjectType();
    public static Exception IsDataSetAttributeMissingInSchema();
    public static Exception TooManyIsDataSetAtributeInSchema();
    public static Exception NestedCircular(string name);
    public static Exception MultipleParentRows(string tableQName);
    public static Exception PolymorphismNotSupported(string typeName);
    public static Exception DataTableInferenceNotSupported();
    internal static void ThrowMultipleTargetConverter(Exception innerException);
    public static Exception DuplicateDeclaration(string name);
    public static Exception FoundEntity();
    public static Exception MergeFailed(string name);
    public static DataException ConvertFailed(Type type1, Type type2);
    public static Exception InvalidDataTableReader(string tableName);
    public static Exception DataTableReaderSchemaIsInvalid(string tableName);
    public static Exception CannotCreateDataReaderOnEmptyDataSet();
    public static Exception DataTableReaderArgumentIsEmpty();
    public static Exception ArgumentContainsNullValue();
    public static Exception InvalidCurrentRowInDataTableReader();
    public static Exception EmptyDataTableReader(string tableName);
    internal static Exception InvalidDuplicateNamedSimpleTypeDelaration(string stName, string errorStr);
    internal static Exception InternalRBTreeError(RBTreeError internalError);
    public static Exception EnumeratorModified();
}
internal abstract class System.Data.ExpressionNode : object {
    internal IFormatProvider FormatProvider { get; }
    internal bool IsSqlColumn { get; }
    protected DataTable table { get; }
    protected ExpressionNode(DataTable table);
    internal IFormatProvider get_FormatProvider();
    internal virtual bool get_IsSqlColumn();
    protected DataTable get_table();
    protected void BindTable(DataTable table);
    internal abstract virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal abstract virtual object Eval();
    internal abstract virtual object Eval(DataRow row, DataRowVersion version);
    internal abstract virtual object Eval(Int32[] recordNos);
    internal abstract virtual bool IsConstant();
    internal abstract virtual bool IsTableConstant();
    internal abstract virtual bool HasLocalAggregate();
    internal abstract virtual bool HasRemoteAggregate();
    internal abstract virtual ExpressionNode Optimize();
    internal virtual bool DependsOn(DataColumn column);
    internal static bool IsInteger(StorageType type);
    internal static bool IsIntegerSql(StorageType type);
    internal static bool IsSigned(StorageType type);
    internal static bool IsSignedSql(StorageType type);
    internal static bool IsUnsigned(StorageType type);
    internal static bool IsUnsignedSql(StorageType type);
    internal static bool IsNumeric(StorageType type);
    internal static bool IsNumericSql(StorageType type);
    internal static bool IsFloat(StorageType type);
    internal static bool IsFloatSql(StorageType type);
}
internal class System.Data.ExpressionParser : object {
    internal Char[] text;
    internal int pos;
    internal int start;
    internal Tokens token;
    internal int op;
    internal OperatorInfo[] ops;
    internal int topOperator;
    internal int topNode;
    internal ExpressionNode[] NodeStack;
    internal int prevOperand;
    internal ExpressionNode expression;
    internal ExpressionParser(DataTable table);
    private static ExpressionParser();
    internal void LoadExpression(string data);
    internal void StartScan();
    internal ExpressionNode Parse();
    internal void CheckToken(Tokens token);
    internal Tokens Scan();
    internal void ScanToken(Tokens token);
}
internal class System.Data.ExprException : object {
    public static Exception InvokeArgument();
    public static Exception NYI(string moreinfo);
    public static Exception MissingOperand(OperatorInfo before);
    public static Exception MissingOperator(string token);
    public static Exception TypeMismatch(string expr);
    public static Exception FunctionArgumentOutOfRange(string arg, string func);
    public static Exception ExpressionTooComplex();
    public static Exception UnboundName(string name);
    public static Exception InvalidString(string str);
    public static Exception UndefinedFunction(string name);
    public static Exception SyntaxError();
    public static Exception FunctionArgumentCount(string name);
    public static Exception MissingRightParen();
    public static Exception UnknownToken(string token, int position);
    public static Exception UnknownToken(Tokens tokExpected, Tokens tokCurr, int position);
    public static Exception DatatypeConvertion(Type type1, Type type2);
    public static Exception DatavalueConvertion(object value, Type type, Exception innerException);
    public static Exception InvalidName(string name);
    public static Exception InvalidDate(string date);
    public static Exception NonConstantArgument();
    public static Exception InvalidPattern(string pat);
    public static Exception InWithoutParentheses();
    public static Exception InWithoutList();
    public static Exception InvalidIsSyntax();
    public static Exception Overflow(Type type);
    public static Exception ArgumentType(string function, int arg, Type type);
    public static Exception ArgumentTypeInteger(string function, int arg);
    public static Exception TypeMismatchInBinop(int op, Type type1, Type type2);
    public static Exception AmbiguousBinop(int op, Type type1, Type type2);
    public static Exception UnsupportedOperator(int op);
    public static Exception InvalidNameBracketing(string name);
    public static Exception MissingOperandBefore(string op);
    public static Exception TooManyRightParentheses();
    public static Exception UnresolvedRelation(string name, string expr);
    internal static EvaluateException BindFailure(string relationName);
    public static Exception AggregateArgument();
    public static Exception AggregateUnbound(string expr);
    public static Exception EvalNoContext();
    public static Exception ExpressionUnbound(string expr);
    public static Exception ComputeNotAggregate(string expr);
    public static Exception FilterConvertion(string expr);
    public static Exception LookupArgument();
    public static Exception InvalidType(string typeName);
    public static Exception InvalidHoursArgument();
    public static Exception InvalidMinutesArgument();
    public static Exception InvalidTimeZoneRange();
    public static Exception MismatchKindandTimeSpan();
    public static Exception UnsupportedDataType(Type type);
}
public class System.Data.FillErrorEventArgs : EventArgs {
    public bool Continue { get; public set; }
    public DataTable DataTable { get; }
    public Exception Errors { get; public set; }
    public Object[] Values { get; }
    public FillErrorEventArgs(DataTable dataTable, Object[] values);
    public bool get_Continue();
    public void set_Continue(bool value);
    public DataTable get_DataTable();
    public Exception get_Errors();
    public void set_Errors(Exception value);
    public Object[] get_Values();
}
public class System.Data.FillErrorEventHandler : MulticastDelegate {
    public FillErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FillErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FillErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultPropertyAttribute("ConstraintName")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.ForeignKeyConstraintEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Data.ForeignKeyConstraint : Constraint {
    internal static Rule Rule_Default;
    internal static AcceptRejectRule AcceptRejectRule_Default;
    internal Rule deleteRule;
    internal Rule updateRule;
    internal AcceptRejectRule acceptRejectRule;
    internal string constraintName;
    internal String[] parentColumnNames;
    internal String[] childColumnNames;
    internal string parentTableName;
    internal string parentTableNamespace;
    internal DataKey ChildKey { get; }
    [ResDescriptionAttribute("ForeignKeyConstraintChildColumnsDescr")]
[ReadOnlyAttribute("True")]
[ResCategoryAttribute("DataCategory_Data")]
public DataColumn[] Columns { get; }
    [ResDescriptionAttribute("ConstraintTableDescr")]
[ReadOnlyAttribute("True")]
[ResCategoryAttribute("DataCategory_Data")]
public DataTable Table { get; }
    internal String[] ParentColumnNames { get; }
    internal String[] ChildColumnNames { get; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("ForeignKeyConstraintAcceptRejectRuleDescr")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AcceptRejectRule AcceptRejectRule { get; public set; }
    [ResDescriptionAttribute("ForeignKeyConstraintDeleteRuleDescr")]
[ResCategoryAttribute("DataCategory_Data")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Rule DeleteRule { get; public set; }
    [ResCategoryAttribute("DataCategory_Data")]
[ReadOnlyAttribute("True")]
[ResDescriptionAttribute("ForeignKeyConstraintParentColumnsDescr")]
public DataColumn[] RelatedColumns { get; }
    internal DataColumn[] RelatedColumnsReference { get; }
    internal DataKey ParentKey { get; }
    [ReadOnlyAttribute("True")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("ForeignKeyRelatedTableDescr")]
public DataTable RelatedTable { get; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("ForeignKeyConstraintUpdateRuleDescr")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Rule UpdateRule { get; public set; }
    public ForeignKeyConstraint(DataColumn parentColumn, DataColumn childColumn);
    public ForeignKeyConstraint(string constraintName, DataColumn parentColumn, DataColumn childColumn);
    public ForeignKeyConstraint(DataColumn[] parentColumns, DataColumn[] childColumns);
    public ForeignKeyConstraint(string constraintName, DataColumn[] parentColumns, DataColumn[] childColumns);
    [BrowsableAttribute("False")]
public ForeignKeyConstraint(string constraintName, string parentTableName, String[] parentColumnNames, String[] childColumnNames, AcceptRejectRule acceptRejectRule, Rule deleteRule, Rule updateRule);
    [BrowsableAttribute("False")]
public ForeignKeyConstraint(string constraintName, string parentTableName, string parentTableNamespace, String[] parentColumnNames, String[] childColumnNames, AcceptRejectRule acceptRejectRule, Rule deleteRule, Rule updateRule);
    internal DataKey get_ChildKey();
    public virtual DataColumn[] get_Columns();
    public virtual DataTable get_Table();
    internal String[] get_ParentColumnNames();
    internal String[] get_ChildColumnNames();
    internal virtual void CheckCanAddToCollection(ConstraintCollection constraints);
    internal virtual bool CanBeRemovedFromCollection(ConstraintCollection constraints, bool fThrowException);
    internal bool IsKeyNull(Object[] values);
    internal virtual bool IsConstraintViolated();
    internal virtual bool CanEnableConstraint();
    internal void CascadeCommit(DataRow row);
    internal void CascadeDelete(DataRow row);
    internal void CascadeRollback(DataRow row);
    internal void CascadeUpdate(DataRow row);
    internal void CheckCanClearParentTable(DataTable table);
    internal void CheckCanRemoveParentRow(DataRow row);
    internal void CheckCascade(DataRow row, DataRowAction action);
    internal virtual void CheckConstraint(DataRow childRow, DataRowAction action);
    internal virtual void CheckState();
    public virtual AcceptRejectRule get_AcceptRejectRule();
    public virtual void set_AcceptRejectRule(AcceptRejectRule value);
    internal virtual bool ContainsColumn(DataColumn column);
    internal virtual Constraint Clone(DataSet destination);
    internal virtual Constraint Clone(DataSet destination, bool ignorNSforTableLookup);
    internal ForeignKeyConstraint Clone(DataTable destination);
    public virtual Rule get_DeleteRule();
    public virtual void set_DeleteRule(Rule value);
    public virtual bool Equals(object key);
    public virtual int GetHashCode();
    public virtual DataColumn[] get_RelatedColumns();
    internal DataColumn[] get_RelatedColumnsReference();
    internal DataKey get_ParentKey();
    internal DataRelation FindParentRelation();
    public virtual DataTable get_RelatedTable();
    public virtual Rule get_UpdateRule();
    public virtual void set_UpdateRule(Rule value);
}
internal class System.Data.ForeignKeyConstraintEnumerator : ConstraintEnumerator {
    public ForeignKeyConstraintEnumerator(DataSet dataSet);
    protected virtual bool IsValidCandidate(Constraint constraint);
    public ForeignKeyConstraint GetForeignKeyConstraint();
}
internal class System.Data.Function : object {
    internal string name;
    internal FunctionId id;
    internal Type result;
    internal bool IsValidateArguments;
    internal bool IsVariantArgumentList;
    internal int argumentCount;
    internal Type[] parameters;
    internal static String[] FunctionName;
    internal Function(string name, FunctionId id, Type result, bool IsValidateArguments, bool IsVariantArgumentList, int argumentCount, Type a1, Type a2, Type a3);
    private static Function();
}
internal enum System.Data.FunctionId : Enum {
    public int value__;
    public static FunctionId none;
    public static FunctionId Ascii;
    public static FunctionId Char;
    public static FunctionId Charindex;
    public static FunctionId Difference;
    public static FunctionId Len;
    public static FunctionId Lower;
    public static FunctionId LTrim;
    public static FunctionId Patindex;
    public static FunctionId Replicate;
    public static FunctionId Reverse;
    public static FunctionId Right;
    public static FunctionId RTrim;
    public static FunctionId Soundex;
    public static FunctionId Space;
    public static FunctionId Str;
    public static FunctionId Stuff;
    public static FunctionId Substring;
    public static FunctionId Upper;
    public static FunctionId IsNull;
    public static FunctionId Iif;
    public static FunctionId Convert;
    public static FunctionId cInt;
    public static FunctionId cBool;
    public static FunctionId cDate;
    public static FunctionId cDbl;
    public static FunctionId cStr;
    public static FunctionId Abs;
    public static FunctionId Acos;
    public static FunctionId In;
    public static FunctionId Trim;
    public static FunctionId Sum;
    public static FunctionId Avg;
    public static FunctionId Min;
    public static FunctionId Max;
    public static FunctionId Count;
    public static FunctionId StDev;
    public static FunctionId Var;
    public static FunctionId DateTimeOffset;
}
internal class System.Data.FunctionNode : ExpressionNode {
    internal string name;
    internal int info;
    internal int argumentCount;
    internal static int initialCapacity;
    internal ExpressionNode[] arguments;
    internal FunctionId Aggregate { get; }
    internal bool IsAggregate { get; }
    internal FunctionNode(DataTable table, string name);
    private static FunctionNode();
    internal void AddArgument(ExpressionNode argument);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] recordNos);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual bool DependsOn(DataColumn column);
    internal virtual ExpressionNode Optimize();
    internal FunctionId get_Aggregate();
    internal bool get_IsAggregate();
    internal void Check();
}
public interface System.Data.IColumnMapping {
    public string DataSetColumn { get; public set; }
    public string SourceColumn { get; public set; }
    public abstract virtual string get_DataSetColumn();
    public abstract virtual void set_DataSetColumn(string value);
    public abstract virtual string get_SourceColumn();
    public abstract virtual void set_SourceColumn(string value);
}
[DefaultMemberAttribute("Item")]
public interface System.Data.IColumnMappingCollection {
    public object Item { get; public set; }
    public abstract virtual object get_Item(string index);
    public abstract virtual void set_Item(string index, object value);
    public abstract virtual IColumnMapping Add(string sourceColumnName, string dataSetColumnName);
    public abstract virtual bool Contains(string sourceColumnName);
    public abstract virtual IColumnMapping GetByDataSetColumn(string dataSetColumnName);
    public abstract virtual int IndexOf(string sourceColumnName);
    public abstract virtual void RemoveAt(string sourceColumnName);
}
public interface System.Data.IDataAdapter {
    public MissingMappingAction MissingMappingAction { get; public set; }
    public MissingSchemaAction MissingSchemaAction { get; public set; }
    public ITableMappingCollection TableMappings { get; }
    public abstract virtual MissingMappingAction get_MissingMappingAction();
    public abstract virtual void set_MissingMappingAction(MissingMappingAction value);
    public abstract virtual MissingSchemaAction get_MissingSchemaAction();
    public abstract virtual void set_MissingSchemaAction(MissingSchemaAction value);
    public abstract virtual ITableMappingCollection get_TableMappings();
    public abstract virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType);
    public abstract virtual int Fill(DataSet dataSet);
    public abstract virtual IDataParameter[] GetFillParameters();
    public abstract virtual int Update(DataSet dataSet);
}
public interface System.Data.IDataParameter {
    public DbType DbType { get; public set; }
    public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; }
    public string ParameterName { get; public set; }
    public string SourceColumn { get; public set; }
    public DataRowVersion SourceVersion { get; public set; }
    public object Value { get; public set; }
    public abstract virtual DbType get_DbType();
    public abstract virtual void set_DbType(DbType value);
    public abstract virtual ParameterDirection get_Direction();
    public abstract virtual void set_Direction(ParameterDirection value);
    public abstract virtual bool get_IsNullable();
    public abstract virtual string get_ParameterName();
    public abstract virtual void set_ParameterName(string value);
    public abstract virtual string get_SourceColumn();
    public abstract virtual void set_SourceColumn(string value);
    public abstract virtual DataRowVersion get_SourceVersion();
    public abstract virtual void set_SourceVersion(DataRowVersion value);
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
}
[DefaultMemberAttribute("Item")]
public interface System.Data.IDataParameterCollection {
    public object Item { get; public set; }
    public abstract virtual object get_Item(string parameterName);
    public abstract virtual void set_Item(string parameterName, object value);
    public abstract virtual bool Contains(string parameterName);
    public abstract virtual int IndexOf(string parameterName);
    public abstract virtual void RemoveAt(string parameterName);
}
public interface System.Data.IDataReader {
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public abstract virtual int get_Depth();
    public abstract virtual bool get_IsClosed();
    public abstract virtual int get_RecordsAffected();
    public abstract virtual void Close();
    public abstract virtual DataTable GetSchemaTable();
    public abstract virtual bool NextResult();
    public abstract virtual bool Read();
}
[DefaultMemberAttribute("Item")]
public interface System.Data.IDataRecord {
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public abstract virtual int get_FieldCount();
    public abstract virtual object get_Item(int i);
    public abstract virtual object get_Item(string name);
    public abstract virtual string GetName(int i);
    public abstract virtual string GetDataTypeName(int i);
    public abstract virtual Type GetFieldType(int i);
    public abstract virtual object GetValue(int i);
    public abstract virtual int GetValues(Object[] values);
    public abstract virtual int GetOrdinal(string name);
    public abstract virtual bool GetBoolean(int i);
    public abstract virtual byte GetByte(int i);
    public abstract virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public abstract virtual char GetChar(int i);
    public abstract virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public abstract virtual Guid GetGuid(int i);
    public abstract virtual short GetInt16(int i);
    public abstract virtual int GetInt32(int i);
    public abstract virtual long GetInt64(int i);
    public abstract virtual float GetFloat(int i);
    public abstract virtual double GetDouble(int i);
    public abstract virtual string GetString(int i);
    public abstract virtual decimal GetDecimal(int i);
    public abstract virtual DateTime GetDateTime(int i);
    public abstract virtual IDataReader GetData(int i);
    public abstract virtual bool IsDBNull(int i);
}
public interface System.Data.IDbCommand {
    public IDbConnection Connection { get; public set; }
    public IDbTransaction Transaction { get; public set; }
    public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    public IDataParameterCollection Parameters { get; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    public abstract virtual IDbConnection get_Connection();
    public abstract virtual void set_Connection(IDbConnection value);
    public abstract virtual IDbTransaction get_Transaction();
    public abstract virtual void set_Transaction(IDbTransaction value);
    public abstract virtual string get_CommandText();
    public abstract virtual void set_CommandText(string value);
    public abstract virtual int get_CommandTimeout();
    public abstract virtual void set_CommandTimeout(int value);
    public abstract virtual CommandType get_CommandType();
    public abstract virtual void set_CommandType(CommandType value);
    public abstract virtual IDataParameterCollection get_Parameters();
    public abstract virtual void Prepare();
    public abstract virtual UpdateRowSource get_UpdatedRowSource();
    public abstract virtual void set_UpdatedRowSource(UpdateRowSource value);
    public abstract virtual void Cancel();
    public abstract virtual IDbDataParameter CreateParameter();
    public abstract virtual int ExecuteNonQuery();
    public abstract virtual IDataReader ExecuteReader();
    public abstract virtual IDataReader ExecuteReader(CommandBehavior behavior);
    public abstract virtual object ExecuteScalar();
}
public interface System.Data.IDbConnection {
    public string ConnectionString { get; public set; }
    public int ConnectionTimeout { get; }
    public string Database { get; }
    public ConnectionState State { get; }
    public abstract virtual string get_ConnectionString();
    public abstract virtual void set_ConnectionString(string value);
    public abstract virtual int get_ConnectionTimeout();
    public abstract virtual string get_Database();
    public abstract virtual ConnectionState get_State();
    public abstract virtual IDbTransaction BeginTransaction();
    public abstract virtual IDbTransaction BeginTransaction(IsolationLevel il);
    public abstract virtual void Close();
    public abstract virtual void ChangeDatabase(string databaseName);
    public abstract virtual IDbCommand CreateCommand();
    public abstract virtual void Open();
}
public interface System.Data.IDbDataAdapter {
    public IDbCommand SelectCommand { get; public set; }
    public IDbCommand InsertCommand { get; public set; }
    public IDbCommand UpdateCommand { get; public set; }
    public IDbCommand DeleteCommand { get; public set; }
    public abstract virtual IDbCommand get_SelectCommand();
    public abstract virtual void set_SelectCommand(IDbCommand value);
    public abstract virtual IDbCommand get_InsertCommand();
    public abstract virtual void set_InsertCommand(IDbCommand value);
    public abstract virtual IDbCommand get_UpdateCommand();
    public abstract virtual void set_UpdateCommand(IDbCommand value);
    public abstract virtual IDbCommand get_DeleteCommand();
    public abstract virtual void set_DeleteCommand(IDbCommand value);
}
public interface System.Data.IDbDataParameter {
    public byte Precision { get; public set; }
    public byte Scale { get; public set; }
    public int Size { get; public set; }
    public abstract virtual byte get_Precision();
    public abstract virtual void set_Precision(byte value);
    public abstract virtual byte get_Scale();
    public abstract virtual void set_Scale(byte value);
    public abstract virtual int get_Size();
    public abstract virtual void set_Size(int value);
}
public interface System.Data.IDbTransaction {
    public IDbConnection Connection { get; }
    public IsolationLevel IsolationLevel { get; }
    public abstract virtual IDbConnection get_Connection();
    public abstract virtual IsolationLevel get_IsolationLevel();
    public abstract virtual void Commit();
    public abstract virtual void Rollback();
}
internal interface System.Data.IFilter {
    public abstract virtual bool Invoke(DataRow row, DataRowVersion version);
}
internal class System.Data.Index : object {
    internal IndexField[] IndexFields;
    internal static int MaskBits;
    internal bool HasRemoteAggregate { get; }
    internal int ObjectID { get; }
    public DataViewRowState RecordStates { get; }
    public IFilter RowFilter { get; }
    public bool HasDuplicates { get; }
    public int RecordCount { get; }
    public bool IsSharable { get; }
    public int RefCount { get; }
    internal DataTable Table { get; }
    public Index(DataTable table, IndexField[] indexFields, DataViewRowState recordStates, IFilter rowFilter);
    public Index(DataTable table, Comparison`1<DataRow> comparison, DataViewRowState recordStates, IFilter rowFilter);
    private static Index();
    public bool Equal(IndexField[] indexDesc, DataViewRowState recordStates, IFilter rowFilter);
    internal bool get_HasRemoteAggregate();
    internal int get_ObjectID();
    public DataViewRowState get_RecordStates();
    public IFilter get_RowFilter();
    public int GetRecord(int recordIndex);
    public bool get_HasDuplicates();
    public int get_RecordCount();
    public bool get_IsSharable();
    internal void ListChangedAdd(DataViewListener listener);
    internal void ListChangedRemove(DataViewListener listener);
    public int get_RefCount();
    public void AddRef();
    public int RemoveRef();
    public bool CheckUnique();
    public void DeleteRecordFromIndex(int recordIndex);
    public RBTreeEnumerator<int> GetEnumerator(int startIndex);
    public int GetIndex(int record);
    public Object[] GetUniqueKeyValues();
    public int FindRecord(int record);
    public int FindRecordByKey(object key);
    public int FindRecordByKey(Object[] key);
    internal Range FindRecords(ComparisonBySelector`2<TKey, TRow> comparison, TKey key);
    public Range FindRecords(object key);
    public Range FindRecords(Object[] key);
    internal void FireResetEvent();
    public DataRow GetRow(int i);
    public DataRow[] GetRows(Object[] values);
    public DataRow[] GetRows(Range range);
    public int InsertRecordToIndex(int record);
    public bool IsKeyInIndex(object key);
    public bool IsKeyInIndex(Object[] key);
    public bool IsKeyRecordInIndex(int record);
    public void Reset();
    public void RecordChanged(int record);
    public void RecordChanged(int oldIndex, int newIndex);
    public void RecordStateChanged(int record, DataViewRowState oldState, DataViewRowState newState);
    public void RecordStateChanged(int oldRecord, DataViewRowState oldOldState, DataViewRowState oldNewState, int newRecord, DataViewRowState newOldState, DataViewRowState newNewState);
    internal DataTable get_Table();
    internal static int IndexOfReference(List`1<T> list, T item);
    internal static bool ContainsReference(List`1<T> list, T item);
}
internal class System.Data.IndexField : ValueType {
    public DataColumn Column;
    public bool IsDescending;
    internal IndexField(DataColumn column, bool isDescending);
    public static bool op_Equality(IndexField if1, IndexField if2);
    public static bool op_Inequality(IndexField if1, IndexField if2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Data.InRowChangingEventException : DataException {
    protected InRowChangingEventException(SerializationInfo info, StreamingContext context);
    public InRowChangingEventException(string s);
    public InRowChangingEventException(string message, Exception innerException);
}
public class System.Data.InternalDataCollectionBase : object {
    internal static CollectionChangeEventArgs RefreshEventArgs;
    [BrowsableAttribute("False")]
public int Count { get; }
    [BrowsableAttribute("False")]
public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]
public bool IsSynchronized { get; }
    [BrowsableAttribute("False")]
public object SyncRoot { get; }
    protected ArrayList List { get; }
    private static InternalDataCollectionBase();
    public virtual int get_Count();
    public virtual void CopyTo(Array ar, int index);
    public virtual IEnumerator GetEnumerator();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    internal int NamesEqual(string s1, string s2, bool fCaseSensitive, CultureInfo locale);
    public sealed virtual object get_SyncRoot();
    protected virtual ArrayList get_List();
}
public class System.Data.InvalidConstraintException : DataException {
    protected InvalidConstraintException(SerializationInfo info, StreamingContext context);
    public InvalidConstraintException(string s);
    public InvalidConstraintException(string message, Exception innerException);
}
public class System.Data.InvalidExpressionException : DataException {
    protected InvalidExpressionException(SerializationInfo info, StreamingContext context);
    public InvalidExpressionException(string s);
    public InvalidExpressionException(string message, Exception innerException);
}
public enum System.Data.IsolationLevel : Enum {
    public int value__;
    public static IsolationLevel Unspecified;
    public static IsolationLevel Chaos;
    public static IsolationLevel ReadUncommitted;
    public static IsolationLevel ReadCommitted;
    public static IsolationLevel RepeatableRead;
    public static IsolationLevel Serializable;
    public static IsolationLevel Snapshot;
}
public interface System.Data.ITableMapping {
    public IColumnMappingCollection ColumnMappings { get; }
    public string DataSetTable { get; public set; }
    public string SourceTable { get; public set; }
    public abstract virtual IColumnMappingCollection get_ColumnMappings();
    public abstract virtual string get_DataSetTable();
    public abstract virtual void set_DataSetTable(string value);
    public abstract virtual string get_SourceTable();
    public abstract virtual void set_SourceTable(string value);
}
[DefaultMemberAttribute("Item")]
public interface System.Data.ITableMappingCollection {
    public object Item { get; public set; }
    public abstract virtual object get_Item(string index);
    public abstract virtual void set_Item(string index, object value);
    public abstract virtual ITableMapping Add(string sourceTableName, string dataSetTableName);
    public abstract virtual bool Contains(string sourceTableName);
    public abstract virtual ITableMapping GetByDataSetTable(string dataSetTableName);
    public abstract virtual int IndexOf(string sourceTableName);
    public abstract virtual void RemoveAt(string sourceTableName);
}
public enum System.Data.KeyRestrictionBehavior : Enum {
    public int value__;
    public static KeyRestrictionBehavior AllowOnly;
    public static KeyRestrictionBehavior PreventUsage;
}
internal class System.Data.Keywords : object {
    internal static string DFF;
    internal static string DFFNS;
    internal static string DIFFGRAM;
    internal static string DIFFID;
    internal static string DIFFPID;
    internal static string HASCHANGES;
    internal static string HASERRORS;
    internal static string ROWORDER;
    internal static string MSD_ERRORS;
    internal static string CHANGES;
    internal static string MODIFIED;
    internal static string INSERTED;
    internal static string MSD;
    internal static string MSDNS;
    internal static string MSD_ACCEPTREJECTRULE;
    internal static string MSD_ALLOWDBNULL;
    internal static string MSD_CHILD;
    internal static string MSD_CHILDKEY;
    internal static string MSD_CHILDTABLENS;
    internal static string MSD_COLUMNNAME;
    internal static string MSD_CONSTRAINTNAME;
    internal static string MSD_CONSTRAINTONLY;
    internal static string MSD_CASESENSITIVE;
    internal static string MSD_DATASETNAME;
    internal static string MSD_DATASETNAMESPACE;
    internal static string MSD_DATATYPE;
    internal static string MSD_DEFAULTVALUE;
    internal static string MSD_DELETERULE;
    internal static string MSD_ERROR;
    internal static string MSD_ISDATASET;
    internal static string MSD_ISNESTED;
    internal static string MSD_LOCALE;
    internal static string MSD_USECURRENTLOCALE;
    internal static string MSD_ORDINAL;
    internal static string MSD_PARENT;
    internal static string MSD_PARENTKEY;
    internal static string MSD_PRIMARYKEY;
    internal static string MSD_RELATION;
    internal static string MSD_RELATIONNAME;
    internal static string MSD_UPDATERULE;
    internal static char MSD_KEYFIELDSEP;
    internal static char MSD_KEYFIELDOLDSEP;
    internal static string MSD_REL_PREFIX;
    internal static string MSD_FK_PREFIX;
    internal static string MSD_MAINDATATABLE;
    internal static string MSD_TABLENS;
    internal static string MSD_PARENTTABLENS;
    internal static string MSD_INSTANCETYPE;
    internal static string MSD_EXCLUDESCHEMA;
    internal static string MSD_INCLUDESCHEMA;
    internal static string MSD_FRAGMENTCOUNT;
    internal static string MSD_SCHEMASERIALIZATIONMODE;
    internal static string DTNS;
    internal static string DT_TYPE;
    internal static string DT_VALUES;
    internal static string XDRNS;
    internal static string XDR_ATTRIBUTE;
    internal static string XDR_ATTRIBUTETYPE;
    internal static string XDR_DATATYPE;
    internal static string XDR_DESCRIPTION;
    internal static string XDR_ELEMENT;
    internal static string XDR_ELEMENTTYPE;
    internal static string XDR_GROUP;
    internal static string XDR_SCHEMA;
    internal static string XSDNS;
    internal static string XSD_NS_START;
    internal static string XSD_XMLNS_NS;
    internal static string XSD_PREFIX;
    internal static string XSD_PREFIXCOLON;
    internal static string XSD_ANNOTATION;
    internal static string XSD_APPINFO;
    internal static string XSD_ATTRIBUTE;
    internal static string XSD_SIMPLETYPE;
    internal static string XSD_ELEMENT;
    internal static string XSD_COMPLEXTYPE;
    internal static string XSD_SCHEMA;
    internal static string XSD_PATTERN;
    internal static string XSD_LENGTH;
    internal static string XSD_MAXLENGTH;
    internal static string XSD_MINLENGTH;
    internal static string XSD_ENUMERATION;
    internal static string XSD_MININCLUSIVE;
    internal static string XSD_MINEXCLUSIVE;
    internal static string XSD_MAXINCLUSIVE;
    internal static string XSD_MAXEXCLUSIVE;
    internal static string XSD_NAMESPACE;
    internal static string XSD_NILLABLE;
    internal static string XSD_IMPORT;
    internal static string XSD_SELECTOR;
    internal static string XSD_FIELD;
    internal static string XSD_UNIQUE;
    internal static string XSD_KEY;
    internal static string XSD_KEYREF;
    internal static string XSD_DATATYPE;
    internal static string XSD_ALL;
    internal static string XSD_SEQUENCE;
    internal static string XSD_ENCODING;
    internal static string XSD_EXTENSION;
    internal static string XSD_SIMPLECONTENT;
    internal static string XSD_XPATH;
    internal static string XSD_ATTRIBUTEFORMDEFAULT;
    internal static string XSD_ELEMENTFORMDEFAULT;
    internal static string XSD_SCHEMALOCATION;
    internal static string XSD_CHOICE;
    internal static string XSD_RESTRICTION;
    internal static string XSD_ANYTYPE;
    internal static string XSINS;
    internal static string XSI_NIL;
    internal static string XSI;
    internal static string XML_XMLNS;
    internal static string UPDGNS;
    internal static string UPDG;
    internal static string SQL_SYNC;
    internal static string SQL_BEFORE;
    internal static string SQL_AFTER;
    internal static string SQL_ID;
    internal static string SQL_UNCHANGED;
    internal static string ATTRIBUTE;
    internal static string CONTENT;
    internal static string DEFAULT;
    internal static string XSDID;
    internal static string MINOCCURS;
    internal static string MAXOCCURS;
    internal static string MODEL;
    internal static string NAME;
    internal static string NULLABLE;
    internal static string ORDER;
    internal static string REQUIRED;
    internal static string REF;
    internal static string BASE;
    internal static string TARGETNAMESPACE;
    internal static string TYPE;
    internal static string XMLNS;
    internal static string XMLNS_XSD;
    internal static string XMLNS_XSI;
    internal static string XMLNS_MSDATA;
    internal static string XMLNS_MSPROP;
    internal static string XMLNS_MSTNS;
    internal static string MSTNS_PREFIX;
    internal static string SPACE;
    internal static string PRESERVE;
    internal static string VALUE;
    internal static string REFER;
    internal static string USE;
    internal static string PROHIBITED;
    internal static string POSITIVEINFINITY;
    internal static string NEGATIVEINFINITY;
    internal static string QUALIFIED;
    internal static string UNQUALIFIED;
    internal static string APP;
    internal static string CLOSED;
    internal static string CURRENT;
    internal static string DOCUMENTELEMENT;
    internal static string FALSE;
    internal static string FIXED;
    internal static string FORM;
    internal static string ENCODING;
    internal static string ELEMENTONLY;
    internal static string ELTONLY;
    internal static string EMPTY;
    internal static string MANY;
    internal static string MIXED;
    internal static string NO;
    internal static string NOTATION;
    internal static string OCCURS;
    internal static string ONE_OR_MORE;
    internal static string ONE;
    internal static string ONE_DIGIT;
    internal static string ONCE;
    internal static string OPTIONAL;
    internal static string OPEN;
    internal static string ORIGINAL;
    internal static string RANGE;
    internal static string SEQ;
    internal static string STAR;
    internal static string TRUE;
    internal static string TEXTONLY;
    internal static string VERSION;
    internal static string XML;
    internal static string X_SCHEMA;
    internal static string YES;
    internal static string ZERO_DIGIT;
    internal static string ZERO_OR_MORE;
    internal static string USEDATASETSCHEMAONLY;
    internal static string UDTCOLUMNVALUEWRAPPED;
    internal static string TYPEINSTANCE;
    internal static string MSPROPNS;
    internal static string WS_DATASETFULLQNAME;
    internal static string WS_VERSION;
}
internal class System.Data.LikeNode : BinaryNode {
    internal static int match_left;
    internal static int match_right;
    internal static int match_middle;
    internal static int match_exact;
    internal static int match_all;
    internal LikeNode(DataTable table, int op, ExpressionNode left, ExpressionNode right);
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal string AnalyzePattern(string pat);
}
internal class System.Data.Listeners`1 : object {
    internal bool HasListeners { get; }
    internal Listeners`1(int ObjectID, Func`2<TElem, TElem, bool> notifyFilter);
    internal bool get_HasListeners();
    internal void Add(TElem listener);
    internal int IndexOfReference(TElem listener);
    internal void Remove(TElem listener);
    internal void Notify(T1 arg1, T2 arg2, T3 arg3, Action`4<TElem, TElem, T1, T2, T3> action);
}
public enum System.Data.LoadOption : Enum {
    public int value__;
    public static LoadOption OverwriteChanges;
    public static LoadOption PreserveChanges;
    public static LoadOption Upsert;
}
internal static class System.Data.LocalDBAPI : object {
    private static LocalDBAPI();
    internal static string GetLocalDbInstanceNameFromServerName(string serverName);
    internal static void ReleaseDLLHandles();
    internal static string GetLocalDBMessage(int hrCode);
    internal static void DemandLocalDBPermissions();
    internal static void AssertLocalDBPermissions();
    internal static void CreateLocalDBInstance(string instance);
}
internal class System.Data.LocalDBConfigurationSection : ConfigurationSection {
    [ConfigurationPropertyAttribute("localdbinstances")]
public LocalDBInstancesCollection LocalDbInstances { get; }
    public LocalDBInstancesCollection get_LocalDbInstances();
}
internal class System.Data.LocalDBInstanceElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("name")]
public string Name { get; }
    [ConfigurationPropertyAttribute("version")]
public string Version { get; }
    public string get_Name();
    public string get_Version();
}
internal class System.Data.LocalDBInstancesCollection : ConfigurationElementCollection {
    private static LocalDBInstancesCollection();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
internal class System.Data.LookupNode : ExpressionNode {
    internal LookupNode(DataTable table, string columnName, string relationName);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] recordNos);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual bool DependsOn(DataColumn column);
    internal virtual ExpressionNode Optimize();
}
public enum System.Data.MappingType : Enum {
    public int value__;
    public static MappingType Element;
    public static MappingType Attribute;
    public static MappingType SimpleContent;
    public static MappingType Hidden;
}
public class System.Data.MergeFailedEventArgs : EventArgs {
    public DataTable Table { get; }
    public string Conflict { get; }
    public MergeFailedEventArgs(DataTable table, string conflict);
    public DataTable get_Table();
    public string get_Conflict();
}
public class System.Data.MergeFailedEventHandler : MulticastDelegate {
    public MergeFailedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MergeFailedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MergeFailedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.Merger : object {
    internal Merger(DataSet dataSet, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    internal Merger(DataTable dataTable, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    internal void MergeDataSet(DataSet source);
    internal void MergeTable(DataTable src);
    internal void MergeRows(DataRow[] rows);
}
public enum System.Data.MissingMappingAction : Enum {
    public int value__;
    public static MissingMappingAction Passthrough;
    public static MissingMappingAction Ignore;
    public static MissingMappingAction Error;
}
public class System.Data.MissingPrimaryKeyException : DataException {
    protected MissingPrimaryKeyException(SerializationInfo info, StreamingContext context);
    public MissingPrimaryKeyException(string s);
    public MissingPrimaryKeyException(string message, Exception innerException);
}
public enum System.Data.MissingSchemaAction : Enum {
    public int value__;
    public static MissingSchemaAction Add;
    public static MissingSchemaAction Ignore;
    public static MissingSchemaAction Error;
    public static MissingSchemaAction AddWithKey;
}
internal class System.Data.NameNode : ExpressionNode {
    internal char open;
    internal char close;
    internal string name;
    internal bool found;
    internal bool type;
    internal DataColumn column;
    internal bool IsSqlColumn { get; }
    internal NameNode(DataTable table, Char[] text, int start, int pos);
    internal NameNode(DataTable table, string name);
    internal virtual bool get_IsSqlColumn();
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] records);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual bool DependsOn(DataColumn column);
    internal virtual ExpressionNode Optimize();
    internal static string ParseName(Char[] text, int start, int pos);
}
internal class System.Data.NewDiffgramGen : object {
    internal XmlDocument _doc;
    internal DataSet _ds;
    internal DataTable _dt;
    internal XmlWriter _xmlw;
    internal Hashtable rowsOrder;
    internal NewDiffgramGen(DataSet ds);
    internal NewDiffgramGen(DataTable dt, bool writeHierarchy);
    internal void Save(XmlWriter xmlw);
    internal void Save(XmlWriter xmlw, DataTable table);
    internal static string QualifiedName(string prefix, string name);
}
internal enum System.Data.Nodes : Enum {
    public int value__;
    public static Nodes Noop;
    public static Nodes Unop;
    public static Nodes UnopSpec;
    public static Nodes Binop;
    public static Nodes BinopSpec;
    public static Nodes Zop;
    public static Nodes Call;
    public static Nodes Const;
    public static Nodes Name;
    public static Nodes Paren;
    public static Nodes Conv;
}
public class System.Data.NoNullAllowedException : DataException {
    protected NoNullAllowedException(SerializationInfo info, StreamingContext context);
    public NoNullAllowedException(string s);
    public NoNullAllowedException(string message, Exception innerException);
}
internal class System.Data.Odbc.CMDWrapper : object {
    internal OdbcDescriptorHandle _hdesc;
    internal CNativeBuffer _nativeParameterBuffer;
    internal CNativeBuffer _dataReaderBuf;
    internal bool _hasBoundColumns;
    internal bool _ssKeyInfoModeOn;
    internal bool _ssKeyInfoModeOff;
    internal bool Canceling { get; internal set; }
    internal OdbcConnection Connection { get; }
    unknown bool HasBoundColumns {internal set; }
    internal OdbcStatementHandle StatementHandle { get; }
    internal OdbcStatementHandle KeyInfoStatement { get; }
    internal CMDWrapper(OdbcConnection connection);
    internal bool get_Canceling();
    internal void set_Canceling(bool value);
    internal OdbcConnection get_Connection();
    internal void set_HasBoundColumns(bool value);
    internal OdbcStatementHandle get_StatementHandle();
    internal OdbcStatementHandle get_KeyInfoStatement();
    internal void CreateKeyInfoStatementHandle();
    internal void CreateStatementHandle();
    internal void Dispose();
    internal void DisposeStatementHandle();
    internal void DisposeKeyInfoStatementHandle();
    internal void FreeStatementHandle(STMT stmt);
    internal void FreeKeyInfoStatementHandle(STMT stmt);
    internal OdbcDescriptorHandle GetDescriptorHandle(SQL_ATTR attribute);
    internal string GetDiagSqlState();
    internal void StatementErrorHandler(RetCode retcode);
    internal void UnbindStmtColumns();
}
internal class System.Data.Odbc.CNativeBuffer : DbBuffer {
    internal short ShortLength { get; }
    internal CNativeBuffer(int initialSize);
    internal short get_ShortLength();
    internal object MarshalToManaged(int offset, SQL_C sqlctype, int cb);
    internal void MarshalToNative(int offset, object value, SQL_C sqlctype, int sizeorprecision, int valueOffset);
    internal HandleRef PtrOffset(int offset, int length);
    internal void WriteODBCDateTime(int offset, DateTime value);
}
internal class System.Data.Odbc.CStringTokenizer : object {
    internal int CurrentPosition { get; }
    internal CStringTokenizer(string text, char quote, char escape);
    internal int get_CurrentPosition();
    internal string NextToken();
    internal int FindTokenIndex(string tokenString);
    internal bool StartsWith(string tokenString);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Odbc.DbCache : object {
    internal int _count;
    internal bool _randomaccess;
    internal object Item { get; internal set; }
    internal int Count { get; }
    internal Object[] Values { get; }
    internal DbCache(OdbcDataReader record, int count);
    internal object get_Item(int i);
    internal void set_Item(int i, object value);
    internal int get_Count();
    internal void InvalidateValue(int i);
    internal Object[] get_Values();
    internal object AccessIndex(int i);
    internal DbSchemaInfo GetSchema(int i);
    internal void FlushValues();
}
internal class System.Data.Odbc.DbSchemaInfo : object {
    internal string _name;
    internal string _typename;
    internal Type _type;
    internal Nullable`1<SQL_TYPE> _dbtype;
    internal object _scale;
    internal object _precision;
    internal int _columnlength;
    internal int _valueOffset;
    internal int _lengthOffset;
    internal SQL_C _sqlctype;
    internal SQL_TYPE _sql_type;
}
internal static class System.Data.Odbc.ODBC : object {
    internal static string Pwd;
    internal static Exception ConnectionClosed();
    internal static Exception OpenConnectionNoOwner();
    internal static Exception UnknownSQLType(SQL_TYPE sqltype);
    internal static Exception ConnectionStringTooLong();
    internal static ArgumentException GetSchemaRestrictionRequired();
    internal static ArgumentOutOfRangeException NotSupportedEnumerationValue(Type type, int value);
    internal static ArgumentOutOfRangeException NotSupportedCommandType(CommandType value);
    internal static ArgumentOutOfRangeException NotSupportedIsolationLevel(IsolationLevel value);
    internal static InvalidOperationException NoMappingForSqlTransactionLevel(int value);
    internal static Exception NegativeArgument();
    internal static Exception CantSetPropertyOnOpenConnection();
    internal static Exception CantEnableConnectionpooling(RetCode retcode);
    internal static Exception CantAllocateEnvironmentHandle(RetCode retcode);
    internal static Exception FailedToGetDescriptorHandle(RetCode retcode);
    internal static Exception NotInTransaction();
    internal static Exception UnknownOdbcType(OdbcType odbctype);
    internal static void TraceODBC(int level, string method, RetCode retcode);
    internal static short ShortStringLength(string inputString);
}
internal static class System.Data.Odbc.ODBC32 : object {
    internal static short SQL_COMMIT;
    internal static short SQL_ROLLBACK;
    internal static IntPtr SQL_AUTOCOMMIT_OFF;
    internal static IntPtr SQL_AUTOCOMMIT_ON;
    internal static short SQL_ALL_TYPES;
    internal static IntPtr SQL_HANDLE_NULL;
    internal static int SQL_NULL_DATA;
    internal static int SQL_NO_TOTAL;
    internal static int SQL_DEFAULT_PARAM;
    internal static int COLUMN_NAME;
    internal static int COLUMN_TYPE;
    internal static int DATA_TYPE;
    internal static int COLUMN_SIZE;
    internal static int DECIMAL_DIGITS;
    internal static int NUM_PREC_RADIX;
    internal static IntPtr SQL_OV_ODBC3;
    internal static int SQL_NTS;
    internal static IntPtr SQL_CP_OFF;
    internal static IntPtr SQL_CP_ONE_PER_DRIVER;
    internal static IntPtr SQL_CP_ONE_PER_HENV;
    internal static int SQL_CD_TRUE;
    internal static int SQL_CD_FALSE;
    internal static int SQL_DTC_DONE;
    internal static int SQL_IS_POINTER;
    internal static int SQL_IS_PTR;
    internal static int MAX_CONNECTION_STRING_LENGTH;
    internal static short SQL_DIAG_SQLSTATE;
    internal static short SQL_RESULT_COL;
    private static ODBC32();
    internal static string RetcodeToString(RetCode retcode);
    internal static OdbcErrorCollection GetDiagErrors(string source, OdbcHandle hrHandle, RetCode retcode);
    internal static void GetDiagErrors(OdbcErrorCollection errors, string source, OdbcHandle hrHandle, RetCode retcode);
}
[DesignerAttribute("Microsoft.VSDesigner.Data.VS.OdbcCommandDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemAttribute("True")]
[DefaultEventAttribute("RecordsAffected")]
public class System.Data.Odbc.OdbcCommand : DbCommand {
    internal int ObjectID;
    internal bool Canceling { get; }
    [ResCategoryAttribute("DataCategory_Data")]
[RefreshPropertiesAttribute("1")]
[ResDescriptionAttribute("DbCommand_CommandText")]
[EditorAttribute("Microsoft.VSDesigner.Data.Odbc.Design.OdbcCommandTextEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultValueAttribute("")]
public string CommandText { get; public set; }
    [ResDescriptionAttribute("DbCommand_CommandTimeout")]
[ResCategoryAttribute("DataCategory_Data")]
public int CommandTimeout { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ResDescriptionAttribute("DbCommand_CommandType")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Data")]
public CommandType CommandType { get; public set; }
    [EditorAttribute("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultValueAttribute("")]
[ResCategoryAttribute("DataCategory_Behavior")]
[ResDescriptionAttribute("DbCommand_Connection")]
public OdbcConnection Connection { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    protected DbParameterCollection DbParameterCollection { get; }
    protected DbTransaction DbTransaction { get; protected set; }
    [DesignOnlyAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("True")]
public bool DesignTimeVisible { get; public set; }
    internal bool HasParameters { get; }
    [ResDescriptionAttribute("DbCommand_Parameters")]
[DesignerSerializationVisibilityAttribute("2")]
[ResCategoryAttribute("DataCategory_Data")]
public OdbcParameterCollection Parameters { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[ResDescriptionAttribute("DbCommand_Transaction")]
[BrowsableAttribute("False")]
public OdbcTransaction Transaction { get; public set; }
    [ResDescriptionAttribute("DbCommand_UpdatedRowSource")]
[ResCategoryAttribute("DataCategory_Update")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public UpdateRowSource UpdatedRowSource { get; public set; }
    public OdbcCommand(string cmdText);
    public OdbcCommand(string cmdText, OdbcConnection connection);
    public OdbcCommand(string cmdText, OdbcConnection connection, OdbcTransaction transaction);
    internal void DisconnectFromDataReaderAndConnection();
    protected virtual void Dispose(bool disposing);
    internal bool get_Canceling();
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public void ResetCommandTimeout();
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public OdbcConnection get_Connection();
    public void set_Connection(OdbcConnection value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    protected virtual DbParameterCollection get_DbParameterCollection();
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    internal bool get_HasParameters();
    public OdbcParameterCollection get_Parameters();
    public OdbcTransaction get_Transaction();
    public void set_Transaction(OdbcTransaction value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    internal OdbcDescriptorHandle GetDescriptorHandle(SQL_ATTR attribute);
    internal CMDWrapper GetStatementHandle();
    public virtual void Cancel();
    private sealed virtual override object System.ICloneable.Clone();
    internal bool RecoverFromConnection();
    internal void CloseFromConnection();
    internal void CloseFromDataReader();
    public OdbcParameter CreateParameter();
    protected virtual DbParameter CreateDbParameter();
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public virtual int ExecuteNonQuery();
    public OdbcDataReader ExecuteReader();
    public OdbcDataReader ExecuteReader(CommandBehavior behavior);
    internal OdbcDataReader ExecuteReaderFromSQLMethod(Object[] methodArguments, SQL_API method);
    public virtual object ExecuteScalar();
    internal string GetDiagSqlState();
    public virtual void Prepare();
}
public class System.Data.Odbc.OdbcCommandBuilder : DbCommandBuilder {
    [DefaultValueAttribute("")]
[ResDescriptionAttribute("OdbcCommandBuilder_DataAdapter")]
[ResCategoryAttribute("DataCategory_Update")]
public OdbcDataAdapter DataAdapter { get; public set; }
    public OdbcCommandBuilder(OdbcDataAdapter adapter);
    public OdbcDataAdapter get_DataAdapter();
    public void set_DataAdapter(OdbcDataAdapter value);
    public OdbcCommand GetInsertCommand();
    public OdbcCommand GetInsertCommand(bool useColumnsForParameterNames);
    public OdbcCommand GetUpdateCommand();
    public OdbcCommand GetUpdateCommand(bool useColumnsForParameterNames);
    public OdbcCommand GetDeleteCommand();
    public OdbcCommand GetDeleteCommand(bool useColumnsForParameterNames);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual void ApplyParameterInfo(DbParameter parameter, DataRow datarow, StatementType statementType, bool whereClause);
    public static void DeriveParameters(OdbcCommand command);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public string QuoteIdentifier(string unquotedIdentifier, OdbcConnection connection);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
    public string UnquoteIdentifier(string quotedIdentifier, OdbcConnection connection);
}
[DefaultEventAttribute("InfoMessage")]
public class System.Data.Odbc.OdbcConnection : DbConnection {
    internal static CodeAccessPermission ExecutePermission;
    internal int ObjectID;
    internal OdbcConnectionHandle ConnectionHandle { get; internal set; }
    [ResDescriptionAttribute("OdbcConnection_ConnectionString")]
[DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Odbc.Design.OdbcConnectionStringEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[RecommendedAsConfigurableAttribute("True")]
[SettingsBindableAttribute("True")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Data")]
public string ConnectionString { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("OdbcConnection_ConnectionTimeout")]
[DefaultValueAttribute("15")]
public int ConnectionTimeout { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[ResDescriptionAttribute("OdbcConnection_Database")]
public string Database { get; }
    [ResDescriptionAttribute("OdbcConnection_DataSource")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string DataSource { get; }
    [ResDescriptionAttribute("OdbcConnection_ServerVersion")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public string ServerVersion { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[ResDescriptionAttribute("DbConnection_State")]
[BrowsableAttribute("False")]
public ConnectionState State { get; }
    internal OdbcConnectionPoolGroupProviderInfo ProviderInfo { get; }
    internal ConnectionState InternalState { get; }
    internal bool IsOpen { get; }
    internal OdbcTransaction LocalTransaction { get; internal set; }
    [BrowsableAttribute("False")]
[ResDescriptionAttribute("OdbcConnection_Driver")]
[DesignerSerializationVisibilityAttribute("0")]
public string Driver { get; }
    internal bool IsV3Driver { get; }
    internal int CloseCount { get; }
    internal DbConnectionFactory ConnectionFactory { get; }
    internal DbConnectionOptions ConnectionOptions { get; }
    internal DbConnectionInternal InnerConnection { get; }
    internal DbConnectionPoolGroup PoolGroup { get; internal set; }
    internal DbConnectionOptions UserConnectionOptions { get; }
    public OdbcConnection(string connectionString);
    private static OdbcConnection();
    internal OdbcConnectionHandle get_ConnectionHandle();
    internal void set_ConnectionHandle(OdbcConnectionHandle value);
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public int get_ConnectionTimeout();
    public void set_ConnectionTimeout(int value);
    public virtual string get_Database();
    public virtual string get_DataSource();
    public virtual string get_ServerVersion();
    public virtual ConnectionState get_State();
    internal OdbcConnectionPoolGroupProviderInfo get_ProviderInfo();
    internal ConnectionState get_InternalState();
    internal bool get_IsOpen();
    internal OdbcTransaction get_LocalTransaction();
    internal void set_LocalTransaction(OdbcTransaction value);
    public string get_Driver();
    internal bool get_IsV3Driver();
    public void add_InfoMessage(OdbcInfoMessageEventHandler value);
    public void remove_InfoMessage(OdbcInfoMessageEventHandler value);
    internal char EscapeChar(string method);
    internal string QuoteChar(string method);
    public OdbcTransaction BeginTransaction();
    public OdbcTransaction BeginTransaction(IsolationLevel isolevel);
    public virtual void ChangeDatabase(string value);
    internal void CheckState(string method);
    private sealed virtual override object System.ICloneable.Clone();
    internal bool ConnectionIsAlive(Exception innerException);
    public OdbcCommand CreateCommand();
    internal OdbcStatementHandle CreateStatementHandle();
    public virtual void Close();
    public void EnlistDistributedTransaction(ITransaction transaction);
    internal string GetConnectAttrString(SQL_ATTR attribute);
    internal int GetConnectAttr(SQL_ATTR attribute, HANDLER handler);
    internal RetCode GetInfoInt16Unhandled(SQL_INFO info, Int16& resultValue);
    internal RetCode GetInfoInt32Unhandled(SQL_INFO info, Int32& resultValue);
    internal string GetInfoStringUnhandled(SQL_INFO info);
    internal Exception HandleErrorNoThrow(OdbcHandle hrHandle, RetCode retcode);
    internal void HandleError(OdbcHandle hrHandle, RetCode retcode);
    public virtual void Open();
    public static void ReleaseObjectPool();
    internal OdbcTransaction SetStateExecuting(string method, OdbcTransaction transaction);
    internal void SetSupportedType(SQL_TYPE sqltype);
    internal void FlagRestrictedSqlBindType(SQL_TYPE sqltype);
    internal void FlagUnsupportedConnectAttr(SQL_ATTR Attribute);
    internal void FlagUnsupportedStmtAttr(SQL_ATTR Attribute);
    internal void FlagUnsupportedColAttr(SQL_DESC v3FieldId, SQL_COLUMN v2FieldId);
    internal bool SQLGetFunctions(SQL_API odbcFunction);
    internal bool TestTypeSupport(SQL_TYPE sqltype);
    internal bool TestRestrictedSqlBindType(SQL_TYPE sqltype);
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    internal OdbcTransaction Open_BeginTransaction(IsolationLevel isolevel);
    internal void Open_ChangeDatabase(string value);
    internal void Open_EnlistTransaction(Transaction transaction);
    internal string Open_GetServerVersion();
    internal int get_CloseCount();
    internal DbConnectionFactory get_ConnectionFactory();
    internal DbConnectionOptions get_ConnectionOptions();
    internal DbConnectionInternal get_InnerConnection();
    internal DbConnectionPoolGroup get_PoolGroup();
    internal void set_PoolGroup(DbConnectionPoolGroup value);
    internal DbConnectionOptions get_UserConnectionOptions();
    [ReliabilityContractAttribute("3", "2")]
internal void Abort(Exception e);
    internal void AddWeakReference(object value, int tag);
    protected virtual DbCommand CreateDbCommand();
    protected virtual void Dispose(bool disposing);
    public virtual void EnlistTransaction(Transaction transaction);
    internal DbMetaDataFactory GetMetaDataFactoryInternal(DbConnectionInternal internalConnection);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    internal void NotifyWeakReference(int message);
    internal void PermissionDemand();
    internal void RemoveWeakReference(object value);
    internal void SetInnerConnectionEvent(DbConnectionInternal to);
    internal bool SetInnerConnectionFrom(DbConnectionInternal to, DbConnectionInternal from);
    internal void SetInnerConnectionTo(DbConnectionInternal to);
    [ConditionalAttribute("DEBUG")]
internal static void VerifyExecutePermission();
}
internal class System.Data.Odbc.OdbcConnectionFactory : DbConnectionFactory {
    public static OdbcConnectionFactory SingletonInstance;
    public DbProviderFactory ProviderFactory { get; }
    private static OdbcConnectionFactory();
    public virtual DbProviderFactory get_ProviderFactory();
    protected virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningObject);
    protected virtual DbConnectionOptions CreateConnectionOptions(string connectionString, DbConnectionOptions previous);
    protected virtual DbConnectionPoolGroupOptions CreateConnectionPoolGroupOptions(DbConnectionOptions connectionOptions);
    internal virtual DbConnectionPoolGroupProviderInfo CreateConnectionPoolGroupProviderInfo(DbConnectionOptions connectionOptions);
    protected virtual DbMetaDataFactory CreateMetaDataFactory(DbConnectionInternal internalConnection, Boolean& cacheMetaDataFactory);
    internal virtual DbConnectionPoolGroup GetConnectionPoolGroup(DbConnection connection);
    internal virtual DbConnectionInternal GetInnerConnection(DbConnection connection);
    protected virtual int GetObjectId(DbConnection connection);
    internal virtual void PermissionDemand(DbConnection outerConnection);
    internal virtual void SetConnectionPoolGroup(DbConnection outerConnection, DbConnectionPoolGroup poolGroup);
    internal virtual void SetInnerConnectionEvent(DbConnection owningObject, DbConnectionInternal to);
    internal virtual bool SetInnerConnectionFrom(DbConnection owningObject, DbConnectionInternal to, DbConnectionInternal from);
    internal virtual void SetInnerConnectionTo(DbConnection owningObject, DbConnectionInternal to);
}
internal class System.Data.Odbc.OdbcConnectionHandle : OdbcHandle {
    internal OdbcConnectionHandle(OdbcConnection connection, OdbcConnectionString constr, OdbcEnvironmentHandle environmentHandle);
    internal RetCode BeginTransaction(IsolationLevel& isolevel);
    internal RetCode CompleteTransaction(short transactionOperation);
    protected virtual bool ReleaseHandle();
    internal RetCode GetConnectionAttribute(SQL_ATTR attribute, Byte[] buffer, Int32& cbActual);
    internal RetCode GetFunctions(SQL_API fFunction, Int16& fExists);
    internal RetCode GetInfo2(SQL_INFO info, Byte[] buffer, Int16& cbActual);
    internal RetCode GetInfo1(SQL_INFO info, Byte[] buffer);
    internal RetCode SetConnectionAttribute2(SQL_ATTR attribute, IntPtr value, int length);
    internal RetCode SetConnectionAttribute3(SQL_ATTR attribute, string buffer, int length);
    internal RetCode SetConnectionAttribute4(SQL_ATTR attribute, IDtcTransaction transaction, int length);
}
internal class System.Data.Odbc.OdbcConnectionOpen : DbConnectionInternal {
    internal OdbcConnection OuterConnection { get; }
    public string ServerVersion { get; }
    internal OdbcConnectionOpen(OdbcConnection outerConnection, OdbcConnectionString connectionOptions);
    internal OdbcConnection get_OuterConnection();
    public virtual string get_ServerVersion();
    protected virtual void Activate(Transaction transaction);
    public virtual DbTransaction BeginTransaction(IsolationLevel isolevel);
    internal OdbcTransaction BeginOdbcTransaction(IsolationLevel isolevel);
    public virtual void ChangeDatabase(string value);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    protected virtual void Deactivate();
    public virtual void EnlistTransaction(Transaction transaction);
}
internal class System.Data.Odbc.OdbcConnectionPoolGroupProviderInfo : DbConnectionPoolGroupProviderInfo {
    internal string DriverName { get; internal set; }
    internal string DriverVersion { get; internal set; }
    internal bool HasQuoteChar { get; }
    internal bool HasEscapeChar { get; }
    internal string QuoteChar { get; internal set; }
    internal char EscapeChar { get; internal set; }
    internal bool IsV3Driver { get; internal set; }
    internal int SupportedSQLTypes { get; internal set; }
    internal int TestedSQLTypes { get; internal set; }
    internal int RestrictedSQLBindTypes { get; internal set; }
    internal bool NoCurrentCatalog { get; internal set; }
    internal bool NoConnectionDead { get; internal set; }
    internal bool NoQueryTimeout { get; internal set; }
    internal bool NoSqlSoptSSNoBrowseTable { get; internal set; }
    internal bool NoSqlSoptSSHiddenColumns { get; internal set; }
    internal bool NoSqlCASSColumnKey { get; internal set; }
    internal bool NoSqlPrimaryKeys { get; internal set; }
    internal string get_DriverName();
    internal void set_DriverName(string value);
    internal string get_DriverVersion();
    internal void set_DriverVersion(string value);
    internal bool get_HasQuoteChar();
    internal bool get_HasEscapeChar();
    internal string get_QuoteChar();
    internal void set_QuoteChar(string value);
    internal char get_EscapeChar();
    internal void set_EscapeChar(char value);
    internal bool get_IsV3Driver();
    internal void set_IsV3Driver(bool value);
    internal int get_SupportedSQLTypes();
    internal void set_SupportedSQLTypes(int value);
    internal int get_TestedSQLTypes();
    internal void set_TestedSQLTypes(int value);
    internal int get_RestrictedSQLBindTypes();
    internal void set_RestrictedSQLBindTypes(int value);
    internal bool get_NoCurrentCatalog();
    internal void set_NoCurrentCatalog(bool value);
    internal bool get_NoConnectionDead();
    internal void set_NoConnectionDead(bool value);
    internal bool get_NoQueryTimeout();
    internal void set_NoQueryTimeout(bool value);
    internal bool get_NoSqlSoptSSNoBrowseTable();
    internal void set_NoSqlSoptSSNoBrowseTable(bool value);
    internal bool get_NoSqlSoptSSHiddenColumns();
    internal void set_NoSqlSoptSSHiddenColumns(bool value);
    internal bool get_NoSqlCASSColumnKey();
    internal void set_NoSqlCASSColumnKey(bool value);
    internal bool get_NoSqlPrimaryKeys();
    internal void set_NoSqlPrimaryKeys(bool value);
}
internal class System.Data.Odbc.OdbcConnectionString : DbConnectionOptions {
    internal OdbcConnectionString(string connectionString, bool validate);
    protected internal virtual PermissionSet CreatePermissionSet();
    protected internal virtual string Expand();
}
[DefaultPropertyAttribute("Driver")]
[DefaultMemberAttribute("Item")]
[TypeConverterAttribute("System.Data.Odbc.OdbcConnectionStringBuilder/OdbcConnectionStringBuilderConverter")]
public class System.Data.Odbc.OdbcConnectionStringBuilder : DbConnectionStringBuilder {
    public object Item { get; public set; }
    [DisplayNameAttribute("Driver")]
[ResCategoryAttribute("DataCategory_Source")]
[RefreshPropertiesAttribute("1")]
[ResDescriptionAttribute("DbConnectionString_Driver")]
public string Driver { get; public set; }
    [RefreshPropertiesAttribute("1")]
[ResDescriptionAttribute("DbConnectionString_DSN")]
[ResCategoryAttribute("DataCategory_NamedConnectionString")]
[DisplayNameAttribute("Dsn")]
public string Dsn { get; public set; }
    public ICollection Keys { get; }
    private static OdbcConnectionStringBuilder();
    public OdbcConnectionStringBuilder(string connectionString);
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public string get_Driver();
    public void set_Driver(string value);
    public string get_Dsn();
    public void set_Dsn(string value);
    public virtual ICollection get_Keys();
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    public virtual bool Remove(string keyword);
    public virtual bool TryGetValue(string keyword, Object& value);
}
[DesignerAttribute("Microsoft.VSDesigner.Data.VS.OdbcDataAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultEventAttribute("RowUpdated")]
[ToolboxItemAttribute("Microsoft.VSDesigner.Data.VS.OdbcDataAdapterToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Data.Odbc.OdbcDataAdapter : DbDataAdapter {
    [ResDescriptionAttribute("DbDataAdapter_DeleteCommand")]
[DefaultValueAttribute("")]
[ResCategoryAttribute("DataCategory_Update")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public OdbcCommand DeleteCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; private set; }
    [ResCategoryAttribute("DataCategory_Update")]
[ResDescriptionAttribute("DbDataAdapter_InsertCommand")]
[DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public OdbcCommand InsertCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; private set; }
    [ResDescriptionAttribute("DbDataAdapter_SelectCommand")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultValueAttribute("")]
[ResCategoryAttribute("DataCategory_Fill")]
public OdbcCommand SelectCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; private set; }
    [ResCategoryAttribute("DataCategory_Update")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultValueAttribute("")]
[ResDescriptionAttribute("DbDataAdapter_UpdateCommand")]
public OdbcCommand UpdateCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; private set; }
    public OdbcDataAdapter(OdbcCommand selectCommand);
    public OdbcDataAdapter(string selectCommandText, OdbcConnection selectConnection);
    public OdbcDataAdapter(string selectCommandText, string selectConnectionString);
    private static OdbcDataAdapter();
    public OdbcCommand get_DeleteCommand();
    public void set_DeleteCommand(OdbcCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value);
    public OdbcCommand get_InsertCommand();
    public void set_InsertCommand(OdbcCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_InsertCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value);
    public OdbcCommand get_SelectCommand();
    public void set_SelectCommand(OdbcCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_SelectCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value);
    public OdbcCommand get_UpdateCommand();
    public void set_UpdateCommand(OdbcCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value);
    public void add_RowUpdated(OdbcRowUpdatedEventHandler value);
    public void remove_RowUpdated(OdbcRowUpdatedEventHandler value);
    public void add_RowUpdating(OdbcRowUpdatingEventHandler value);
    public void remove_RowUpdating(OdbcRowUpdatingEventHandler value);
    private sealed virtual override object System.ICloneable.Clone();
    protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
}
[DefaultMemberAttribute("Item")]
public class System.Data.Odbc.OdbcDataReader : DbDataReader {
    internal int ObjectID;
    internal OdbcCommand Command { get; internal set; }
    internal bool IsCancelingCommand { get; }
    internal bool IsNonCancelingCommand { get; }
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public object Item { get; }
    public object Item { get; }
    internal OdbcDataReader(OdbcCommand command, CMDWrapper cmdWrapper, CommandBehavior commandbehavior);
    internal OdbcCommand get_Command();
    internal void set_Command(OdbcCommand value);
    internal bool IsBehavior(CommandBehavior behavior);
    internal bool get_IsCancelingCommand();
    internal bool get_IsNonCancelingCommand();
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    internal RetCode FieldCountNoThrow(Int16& cColsAffected);
    public virtual bool get_IsClosed();
    internal int CalculateRecordsAffected(int cRowsAffected);
    public virtual int get_RecordsAffected();
    public virtual object get_Item(int i);
    public virtual object get_Item(string value);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual string GetDataTypeName(int i);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int i);
    public virtual string GetName(int i);
    public virtual int GetOrdinal(string value);
    internal object GetValue(int i, TypeMap typemap);
    public virtual object GetValue(int i);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int i);
    public virtual byte GetByte(int i);
    public virtual char GetChar(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual bool GetBoolean(int i);
    public virtual float GetFloat(int i);
    public DateTime GetDate(int i);
    public virtual DateTime GetDateTime(int i);
    public virtual decimal GetDecimal(int i);
    public virtual double GetDouble(int i);
    public virtual Guid GetGuid(int i);
    public virtual string GetString(int i);
    public TimeSpan GetTime(int i);
    public virtual long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public virtual long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public virtual bool Read();
    internal void FirstResult();
    public virtual bool NextResult();
    public virtual DataTable GetSchemaTable();
    internal int RetrieveKeyInfo(bool needkeyinfo, QualifiedTableName qualifiedTableName, bool quoted);
    internal bool SameIndexColumn(string currentindexname, string indexname, int ordinal, int ncols);
    internal int GetOrdinalFromBaseColName(string columnname);
    internal int GetOrdinalFromBaseColName(string columnname, string tablename);
    internal string GetTableNameFromCommandText();
    internal void SetBaseTableNames(QualifiedTableName qualifiedTableName);
}
internal class System.Data.Odbc.OdbcDescriptorHandle : OdbcHandle {
    internal OdbcDescriptorHandle(OdbcStatementHandle statementHandle, SQL_ATTR attribute);
    internal RetCode GetDescriptionField(int i, SQL_DESC attribute, CNativeBuffer buffer, Int32& numericAttribute);
    internal RetCode SetDescriptionField1(short ordinal, SQL_DESC type, IntPtr value);
    internal RetCode SetDescriptionField2(short ordinal, SQL_DESC type, HandleRef value);
}
internal class System.Data.Odbc.OdbcEnvironment : object {
    private static OdbcEnvironment();
    internal static OdbcEnvironmentHandle GetGlobalEnvironmentHandle();
    internal static void ReleaseObjectPool();
}
internal class System.Data.Odbc.OdbcEnvironmentHandle : OdbcHandle {
}
public class System.Data.Odbc.OdbcError : object {
    internal string _message;
    internal string _state;
    internal int _nativeerror;
    internal string _source;
    public string Message { get; }
    public string SQLState { get; }
    public int NativeError { get; }
    public string Source { get; }
    internal OdbcError(string source, string message, string state, int nativeerror);
    public string get_Message();
    public string get_SQLState();
    public int get_NativeError();
    public string get_Source();
    internal void SetSource(string Source);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.Data.Odbc.OdbcErrorCollection : object {
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    public int Count { get; }
    public OdbcError Item { get; }
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public sealed virtual int get_Count();
    public OdbcError get_Item(int i);
    internal void Add(OdbcError error);
    public sealed virtual void CopyTo(Array array, int i);
    public void CopyTo(OdbcError[] array, int i);
    public sealed virtual IEnumerator GetEnumerator();
    internal void SetSource(string Source);
}
public class System.Data.Odbc.OdbcException : DbException {
    public OdbcErrorCollection Errors { get; }
    public string Source { get; }
    internal OdbcException(string message, OdbcErrorCollection errors);
    private OdbcException(SerializationInfo si, StreamingContext sc);
    internal static OdbcException CreateException(OdbcErrorCollection errors, RetCode retcode);
    public OdbcErrorCollection get_Errors();
    public virtual void GetObjectData(SerializationInfo si, StreamingContext context);
    public virtual string get_Source();
}
public class System.Data.Odbc.OdbcFactory : DbProviderFactory {
    public static OdbcFactory Instance;
    private static OdbcFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
    public virtual CodeAccessPermission CreatePermission(PermissionState state);
}
internal abstract class System.Data.Odbc.OdbcHandle : SafeHandle {
    internal SQL_HANDLE HandleType { get; }
    public bool IsInvalid { get; }
    protected OdbcHandle(SQL_HANDLE handleType, OdbcHandle parentHandle);
    internal OdbcHandle(OdbcStatementHandle parentHandle, SQL_ATTR attribute);
    internal SQL_HANDLE get_HandleType();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    internal RetCode GetDiagnosticField(String& sqlState);
    internal RetCode GetDiagnosticRecord(short record, String& sqlState, StringBuilder message, Int32& nativeError, Int16& cchActual);
}
public class System.Data.Odbc.OdbcInfoMessageEventArgs : EventArgs {
    public OdbcErrorCollection Errors { get; }
    public string Message { get; }
    internal OdbcInfoMessageEventArgs(OdbcErrorCollection errors);
    public OdbcErrorCollection get_Errors();
    public string get_Message();
    public virtual string ToString();
}
public class System.Data.Odbc.OdbcInfoMessageEventHandler : MulticastDelegate {
    public OdbcInfoMessageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OdbcInfoMessageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OdbcInfoMessageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public static class System.Data.Odbc.OdbcMetaDataCollectionNames : object {
    public static string Columns;
    public static string Indexes;
    public static string Procedures;
    public static string ProcedureColumns;
    public static string ProcedureParameters;
    public static string Tables;
    public static string Views;
    private static OdbcMetaDataCollectionNames();
}
public static class System.Data.Odbc.OdbcMetaDataColumnNames : object {
    public static string BooleanFalseLiteral;
    public static string BooleanTrueLiteral;
    public static string SQLType;
    private static OdbcMetaDataColumnNames();
}
internal class System.Data.Odbc.OdbcMetaDataFactory : DbMetaDataFactory {
    internal static Char[] KeywordSeparatorChar;
    internal OdbcMetaDataFactory(Stream XMLStream, string serverVersion, string serverVersionNormalized, OdbcConnection connection);
    private static OdbcMetaDataFactory();
    protected virtual DataTable PrepareCollection(string collectionName, String[] restrictions, DbConnection connection);
}
[TypeConverterAttribute("System.Data.Odbc.OdbcParameter/OdbcParameterConverter")]
public class System.Data.Odbc.OdbcParameter : DbParameter {
    internal bool _internalUserSpecifiedType;
    public DbType DbType { get; public set; }
    [DbProviderSpecificTypePropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("OdbcParameter_OdbcType")]
public OdbcType OdbcType { get; public set; }
    unknown bool HasChanged {internal set; }
    internal bool UserSpecifiedType { get; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DbParameter_ParameterName")]
public string ParameterName { get; public set; }
    [ResDescriptionAttribute("DbDataParameter_Precision")]
[DefaultValueAttribute("0")]
[ResCategoryAttribute("DataCategory_Data")]
public byte Precision { get; public set; }
    internal byte PrecisionInternal { get; internal set; }
    [ResDescriptionAttribute("DbDataParameter_Scale")]
[ResCategoryAttribute("DataCategory_Data")]
[DefaultValueAttribute("0")]
public byte Scale { get; public set; }
    internal byte ScaleInternal { get; internal set; }
    [ResCategoryAttribute("DataCategory_Data")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[RefreshPropertiesAttribute("1")]
[ResDescriptionAttribute("DbParameter_Value")]
public object Value { get; public set; }
    [ResDescriptionAttribute("DbParameter_Direction")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Data")]
public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; public set; }
    internal int Offset { get; }
    [ResDescriptionAttribute("DbParameter_Size")]
[ResCategoryAttribute("DataCategory_Data")]
public int Size { get; public set; }
    [ResDescriptionAttribute("DbParameter_SourceColumn")]
[ResCategoryAttribute("DataCategory_Update")]
public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    [ResCategoryAttribute("DataCategory_Update")]
[ResDescriptionAttribute("DbParameter_SourceVersion")]
public DataRowVersion SourceVersion { get; public set; }
    public OdbcParameter(string name, object value);
    public OdbcParameter(string name, OdbcType type);
    public OdbcParameter(string name, OdbcType type, int size);
    public OdbcParameter(string name, OdbcType type, int size, string sourcecolumn);
    [EditorBrowsableAttribute("2")]
public OdbcParameter(string parameterName, OdbcType odbcType, int size, ParameterDirection parameterDirection, bool isNullable, byte precision, byte scale, string srcColumn, DataRowVersion srcVersion, object value);
    [EditorBrowsableAttribute("2")]
public OdbcParameter(string parameterName, OdbcType odbcType, int size, ParameterDirection parameterDirection, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, bool sourceColumnNullMapping, object value);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public virtual void ResetDbType();
    public OdbcType get_OdbcType();
    public void set_OdbcType(OdbcType value);
    public void ResetOdbcType();
    internal void set_HasChanged(bool value);
    internal bool get_UserSpecifiedType();
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    public sealed virtual byte get_Precision();
    public sealed virtual void set_Precision(byte value);
    internal byte get_PrecisionInternal();
    internal void set_PrecisionInternal(byte value);
    public sealed virtual byte get_Scale();
    public sealed virtual void set_Scale(byte value);
    internal byte get_ScaleInternal();
    internal void set_ScaleInternal(byte value);
    private sealed virtual override object System.ICloneable.Clone();
    internal void ClearBinding();
    internal void PrepareForBind(OdbcCommand command, short ordinal, Int32& parameterBufferSize);
    internal void Bind(OdbcStatementHandle hstmt, OdbcCommand command, short ordinal, CNativeBuffer parameterBuffer, bool allowReentrance);
    internal void GetOutputValue(CNativeBuffer parameterBuffer);
    internal void SetInputValue(object value, SQL_C sql_c_type, int cbsize, int sizeorprecision, int offset, CNativeBuffer parameterBuffer);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    internal int get_Offset();
    public virtual int get_Size();
    public virtual void set_Size(int value);
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    internal void CopyTo(DbParameter destination);
    internal object CompareExchangeParent(object value, object comparand);
    internal void ResetParent();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBParametersEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Data.Odbc.OdbcParameterCollection : DbParameterCollection {
    internal bool RebindCollection { get; internal set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public OdbcParameter Item { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public OdbcParameter Item { get; public set; }
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    private static OdbcParameterCollection();
    internal bool get_RebindCollection();
    internal void set_RebindCollection(bool value);
    public OdbcParameter get_Item(int index);
    public void set_Item(int index, OdbcParameter value);
    public OdbcParameter get_Item(string parameterName);
    public void set_Item(string parameterName, OdbcParameter value);
    public OdbcParameter Add(OdbcParameter value);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Add(String parameterName, Object value) has been deprecated.  Use AddWithValue(String parameterName, Object value).  http://go.microsoft.com/fwlink/?linkid=14202", "False")]
public OdbcParameter Add(string parameterName, object value);
    public OdbcParameter AddWithValue(string parameterName, object value);
    public OdbcParameter Add(string parameterName, OdbcType odbcType);
    public OdbcParameter Add(string parameterName, OdbcType odbcType, int size);
    public OdbcParameter Add(string parameterName, OdbcType odbcType, int size, string sourceColumn);
    public void AddRange(OdbcParameter[] values);
    internal void Bind(OdbcCommand command, CMDWrapper cmdWrapper, CNativeBuffer parameterBuffer);
    internal int CalcParameterBufferSize(OdbcCommand command);
    internal void ClearBindings();
    public virtual bool Contains(string value);
    public bool Contains(OdbcParameter value);
    public void CopyTo(OdbcParameter[] array, int index);
    internal void GetOutputValues(CMDWrapper cmdWrapper);
    public int IndexOf(OdbcParameter value);
    public void Insert(int index, OdbcParameter value);
    public void Remove(OdbcParameter value);
    public virtual int get_Count();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    [EditorBrowsableAttribute("1")]
public virtual int Add(object value);
    public virtual void AddRange(Array values);
    public virtual void Clear();
    public virtual bool Contains(object value);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    protected virtual DbParameter GetParameter(int index);
    protected virtual DbParameter GetParameter(string parameterName);
    public virtual int IndexOf(string parameterName);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string parameterName, DbParameter value);
}
public class System.Data.Odbc.OdbcPermission : DBDataPermission {
    public OdbcPermission(PermissionState state);
    [ObsoleteAttribute("OdbcPermission(PermissionState state, Boolean allowBlankPassword) has been deprecated.  Use the OdbcPermission(PermissionState.None) constructor.  http://go.microsoft.com/fwlink/?linkid=14202", "True")]
public OdbcPermission(PermissionState state, bool allowBlankPassword);
    internal OdbcPermission(OdbcPermissionAttribute permissionAttribute);
    internal OdbcPermission(OdbcConnectionString constr);
    public virtual void Add(string connectionString, string restrictions, KeyRestrictionBehavior behavior);
    public virtual IPermission Copy();
}
[AttributeUsageAttribute("109")]
public class System.Data.Odbc.OdbcPermissionAttribute : DBDataPermissionAttribute {
    public OdbcPermissionAttribute(SecurityAction action);
    public virtual IPermission CreatePermission();
}
internal class System.Data.Odbc.OdbcReferenceCollection : DbReferenceCollection {
    internal static int Closing;
    internal static int Recover;
    internal static int CommandTag;
    public virtual void Add(object value, int tag);
    protected virtual void NotifyItem(int message, int tag, object value);
    public virtual void Remove(object value);
}
public class System.Data.Odbc.OdbcRowUpdatedEventArgs : RowUpdatedEventArgs {
    public OdbcCommand Command { get; }
    public OdbcRowUpdatedEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public OdbcCommand get_Command();
}
public class System.Data.Odbc.OdbcRowUpdatedEventHandler : MulticastDelegate {
    public OdbcRowUpdatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OdbcRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OdbcRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.Odbc.OdbcRowUpdatingEventArgs : RowUpdatingEventArgs {
    public OdbcCommand Command { get; public set; }
    protected IDbCommand BaseCommand { get; protected set; }
    public OdbcRowUpdatingEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public OdbcCommand get_Command();
    public void set_Command(OdbcCommand value);
    protected virtual IDbCommand get_BaseCommand();
    protected virtual void set_BaseCommand(IDbCommand value);
}
public class System.Data.Odbc.OdbcRowUpdatingEventHandler : MulticastDelegate {
    public OdbcRowUpdatingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OdbcRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OdbcRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.Odbc.OdbcStatementHandle : OdbcHandle {
    internal OdbcStatementHandle(OdbcConnectionHandle connectionHandle);
    internal RetCode BindColumn2(int columnNumber, SQL_C targetType, HandleRef buffer, IntPtr length, IntPtr srLen_or_Ind);
    internal RetCode BindColumn3(int columnNumber, SQL_C targetType, IntPtr srLen_or_Ind);
    internal RetCode BindParameter(short ordinal, short parameterDirection, SQL_C sqlctype, SQL_TYPE sqltype, IntPtr cchSize, IntPtr scale, HandleRef buffer, IntPtr bufferLength, HandleRef intbuffer);
    internal RetCode Cancel();
    internal RetCode CloseCursor();
    internal RetCode ColumnAttribute(int columnNumber, short fieldIdentifier, CNativeBuffer characterAttribute, Int16& stringLength, SQLLEN& numericAttribute);
    internal RetCode Columns(string tableCatalog, string tableSchema, string tableName, string columnName);
    internal RetCode Execute();
    internal RetCode ExecuteDirect(string commandText);
    internal RetCode Fetch();
    internal RetCode FreeStatement(STMT stmt);
    internal RetCode GetData(int index, SQL_C sqlctype, CNativeBuffer buffer, int cb, IntPtr& cbActual);
    internal RetCode GetStatementAttribute(SQL_ATTR attribute, IntPtr& value, Int32& stringLength);
    internal RetCode GetTypeInfo(short fSqlType);
    internal RetCode MoreResults();
    internal RetCode NumberOfResultColumns(Int16& columnsAffected);
    internal RetCode Prepare(string commandText);
    internal RetCode PrimaryKeys(string catalogName, string schemaName, string tableName);
    internal RetCode Procedures(string procedureCatalog, string procedureSchema, string procedureName);
    internal RetCode ProcedureColumns(string procedureCatalog, string procedureSchema, string procedureName, string columnName);
    internal RetCode RowCount(SQLLEN& rowCount);
    internal RetCode SetStatementAttribute(SQL_ATTR attribute, IntPtr value, SQL_IS stringLength);
    internal RetCode SpecialColumns(string quotedTable);
    internal RetCode Statistics(string tableCatalog, string tableSchema, string tableName, short unique, short accuracy);
    internal RetCode Statistics(string tableName);
    internal RetCode Tables(string tableCatalog, string tableSchema, string tableName, string tableType);
}
public class System.Data.Odbc.OdbcTransaction : DbTransaction {
    public OdbcConnection Connection { get; }
    protected DbConnection DbConnection { get; }
    public IsolationLevel IsolationLevel { get; }
    internal OdbcTransaction(OdbcConnection connection, IsolationLevel isolevel, OdbcConnectionHandle handle);
    public OdbcConnection get_Connection();
    protected virtual DbConnection get_DbConnection();
    public virtual IsolationLevel get_IsolationLevel();
    public virtual void Commit();
    protected virtual void Dispose(bool disposing);
    public virtual void Rollback();
}
public enum System.Data.Odbc.OdbcType : Enum {
    public int value__;
    public static OdbcType BigInt;
    public static OdbcType Binary;
    public static OdbcType Bit;
    public static OdbcType Char;
    public static OdbcType DateTime;
    public static OdbcType Decimal;
    public static OdbcType Numeric;
    public static OdbcType Double;
    public static OdbcType Image;
    public static OdbcType Int;
    public static OdbcType NChar;
    public static OdbcType NText;
    public static OdbcType NVarChar;
    public static OdbcType Real;
    public static OdbcType UniqueIdentifier;
    public static OdbcType SmallDateTime;
    public static OdbcType SmallInt;
    public static OdbcType Text;
    public static OdbcType Timestamp;
    public static OdbcType TinyInt;
    public static OdbcType VarBinary;
    public static OdbcType VarChar;
    public static OdbcType Date;
    public static OdbcType Time;
}
internal class System.Data.Odbc.SQLLEN : ValueType {
    private IntPtr _value;
    internal SQLLEN(int value);
    internal SQLLEN(long value);
    internal SQLLEN(IntPtr value);
    public static SQLLEN op_Implicit(int value);
    public static SQLLEN op_Explicit(long value);
    public static int op_Implicit(SQLLEN value);
    public static long op_Explicit(SQLLEN value);
    public long ToInt64();
}
internal class System.Data.Odbc.TypeMap : object {
    internal static TypeMap _Char;
    internal static TypeMap _Image;
    internal static TypeMap _NText;
    internal static TypeMap _NVarChar;
    internal static TypeMap _Text;
    internal static TypeMap _VarChar;
    internal OdbcType _odbcType;
    internal DbType _dbType;
    internal Type _type;
    internal SQL_TYPE _sql_type;
    internal SQL_C _sql_c;
    internal SQL_C _param_sql_c;
    internal int _bufferSize;
    internal int _columnSize;
    internal bool _signType;
    private static TypeMap();
    internal static TypeMap FromOdbcType(OdbcType odbcType);
    internal static TypeMap FromDbType(DbType dbType);
    internal static TypeMap FromSystemType(Type dataType);
    internal static TypeMap FromSqlType(SQL_TYPE sqltype);
    internal static TypeMap UpgradeSignedType(TypeMap typeMap, bool unsigned);
}
internal class System.Data.OleDb.Bindings : object {
    internal tagDBPARAMBINDINFO[] BindInfo { get; }
    internal tagDBCOLUMNACCESS[] DBColumnAccess { get; }
    unknown int CurrentIndex {internal set; }
    internal bool ForceRebind { get; internal set; }
    unknown IntPtr DataSourceType {internal set; }
    unknown IntPtr Name {internal set; }
    internal IntPtr ParamSize { get; internal set; }
    unknown int Flags {internal set; }
    unknown IntPtr Ordinal {internal set; }
    unknown int Part {internal set; }
    unknown int ParamIO {internal set; }
    unknown int MaxLen {internal set; }
    internal int DbType { get; internal set; }
    unknown byte Precision {internal set; }
    unknown byte Scale {internal set; }
    internal Bindings(OleDbParameter[] parameters, int collectionChangeID);
    internal Bindings(OleDbDataReader dataReader, bool ifIRowsetElseIRow, int count);
    internal tagDBPARAMBINDINFO[] get_BindInfo();
    internal tagDBCOLUMNACCESS[] get_DBColumnAccess();
    internal void set_CurrentIndex(int value);
    internal ColumnBinding[] ColumnBindings();
    internal OleDbParameter[] Parameters();
    internal RowBinding RowBinding();
    internal bool get_ForceRebind();
    internal void set_ForceRebind(bool value);
    internal void set_DataSourceType(IntPtr value);
    internal void set_Name(IntPtr value);
    internal IntPtr get_ParamSize();
    internal void set_ParamSize(IntPtr value);
    internal void set_Flags(int value);
    internal void set_Ordinal(IntPtr value);
    internal void set_Part(int value);
    internal void set_ParamIO(int value);
    internal void set_MaxLen(int value);
    internal int get_DbType();
    internal void set_DbType(int value);
    internal void set_Precision(byte value);
    internal void set_Scale(byte value);
    internal int AllocateForAccessor(OleDbDataReader dataReader, int indexStart, int indexForAccessor);
    internal void ApplyInputParameters();
    internal void ApplyOutputParameters();
    internal bool AreParameterBindingsInvalid(OleDbParameterCollection collection);
    internal void CleanupBindings();
    internal void CloseFromConnection();
    internal OleDbHResult CreateAccessor(IAccessor iaccessor, int flags);
    public void Dispose();
    internal void GuidKindName(Guid guid, int eKind, IntPtr propid);
    internal void ParameterStatus(StringBuilder builder);
}
internal class System.Data.OleDb.ChapterHandle : WrappedIUnknown {
    internal static ChapterHandle DB_NULL_HCHAPTER;
    internal IntPtr HChapter { get; }
    private static ChapterHandle();
    internal static ChapterHandle CreateChapterHandle(object chapteredRowset, RowBinding binding, int valueOffset);
    internal static ChapterHandle CreateChapterHandle(IntPtr chapter);
    internal IntPtr get_HChapter();
    protected virtual bool ReleaseHandle();
}
internal class System.Data.OleDb.ColumnBinding : object {
    internal StringMemHandle _sptr;
    internal Bindings Bindings { get; }
    internal RowBinding RowBinding { get; }
    internal int ColumnBindingOrdinal { get; }
    internal int Index { get; }
    internal int IndexForAccessor { get; }
    internal int IndexWithinAccessor { get; }
    internal int ValueOffset { get; }
    internal ColumnBinding(OleDbDataReader dataReader, int index, int indexForAccessor, int indexWithinAccessor, OleDbParameter parameter, RowBinding rowbinding, Bindings bindings, tagDBBINDING binding, int offset, bool ifIRowsetElseIRow);
    internal Bindings get_Bindings();
    internal RowBinding get_RowBinding();
    internal int get_ColumnBindingOrdinal();
    internal int get_Index();
    internal int get_IndexForAccessor();
    internal int get_IndexWithinAccessor();
    internal int get_ValueOffset();
    internal bool IsParameterBindingInvalid(OleDbParameter parameter);
    internal bool IsValueNull();
    internal OleDbParameter Parameter();
    internal void ResetValue();
    internal DBStatus StatusValue();
    internal void StatusValue(DBStatus value);
    internal void SetOffset(int offset);
    internal void SetSize(int size);
    internal object Value();
    internal void Value(object value);
    internal bool Value_BOOL();
    internal Guid Value_GUID();
    internal OleDbDataReader Value_HCHAPTER();
    internal short Value_I2();
    internal ushort Value_UI2();
    internal UInt32 Value_UI4();
    internal ulong Value_UI8();
    internal bool ValueBoolean();
    internal Byte[] ValueByteArray();
    internal byte ValueByte();
    internal OleDbDataReader ValueChapter();
    internal DateTime ValueDateTime();
    internal decimal ValueDecimal();
    internal Guid ValueGuid();
    internal short ValueInt16();
    internal int ValueInt32();
    internal long ValueInt64();
    internal float ValueSingle();
    internal double ValueDouble();
    internal string ValueString();
}
internal class System.Data.OleDb.DataSourceWrapper : WrappedIUnknown {
    internal OleDbHResult InitializeAndCreateSession(OleDbConnectionString constr, SessionWrapper& sessionWrapper);
    internal IDBInfoWrapper IDBInfo(OleDbConnectionInternal connection);
    internal IDBPropertiesWrapper IDBProperties(OleDbConnectionInternal connection);
}
internal enum System.Data.OleDb.DBBindStatus : Enum {
    public int value__;
    public static DBBindStatus OK;
    public static DBBindStatus BADORDINAL;
    public static DBBindStatus UNSUPPORTEDCONVERSION;
    public static DBBindStatus BADBINDINFO;
    public static DBBindStatus BADSTORAGEFLAGS;
    public static DBBindStatus NOINTERFACE;
    public static DBBindStatus MULTIPLESTORAGE;
}
internal class System.Data.OleDb.DBPropSet : SafeHandle {
    public bool IsInvalid { get; }
    internal int PropertySetCount { get; }
    internal DBPropSet(int propertysetCount);
    internal DBPropSet(IDBProperties properties, PropertyIDSet propidset, OleDbHResult& hr);
    internal DBPropSet(IRowsetInfo properties, PropertyIDSet propidset, OleDbHResult& hr);
    internal DBPropSet(ICommandProperties properties, PropertyIDSet propidset, OleDbHResult& hr);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    internal int get_PropertySetCount();
    internal tagDBPROP[] GetPropertySet(int index, Guid& propertyset);
    internal void SetPropertySet(int index, Guid propertySet, tagDBPROP[] properties);
    internal static DBPropSet CreateProperty(Guid propertySet, int propertyId, bool required, object value);
}
internal enum System.Data.OleDb.DBStatus : Enum {
    public int value__;
    public static DBStatus S_OK;
    public static DBStatus E_BADACCESSOR;
    public static DBStatus E_CANTCONVERTVALUE;
    public static DBStatus S_ISNULL;
    public static DBStatus S_TRUNCATED;
    public static DBStatus E_SIGNMISMATCH;
    public static DBStatus E_DATAOVERFLOW;
    public static DBStatus E_CANTCREATE;
    public static DBStatus E_UNAVAILABLE;
    public static DBStatus E_PERMISSIONDENIED;
    public static DBStatus E_INTEGRITYVIOLATION;
    public static DBStatus E_SCHEMAVIOLATION;
    public static DBStatus E_BADSTATUS;
    public static DBStatus S_DEFAULT;
    public static DBStatus S_CELLEMPTY;
    public static DBStatus S_IGNORE;
    public static DBStatus E_DOESNOTEXIST;
    public static DBStatus E_INVALIDURL;
    public static DBStatus E_RESOURCELOCKED;
    public static DBStatus E_RESOURCEEXISTS;
    public static DBStatus E_CANNOTCOMPLETE;
    public static DBStatus E_VOLUMENOTFOUND;
    public static DBStatus E_OUTOFSPACE;
    public static DBStatus S_CANNOTDELETESOURCE;
    public static DBStatus E_READONLY;
    public static DBStatus E_RESOURCEOUTOFSCOPE;
    public static DBStatus S_ALREADYEXISTS;
    public static DBStatus E_CANCELED;
    public static DBStatus E_NOTCOLLECTION;
    public static DBStatus S_ROWSETCOLUMN;
}
internal class System.Data.OleDb.DualCoTaskMem : SafeHandle {
    public bool IsInvalid { get; }
    internal DualCoTaskMem(IDBInfo dbInfo, Int32[] literals, Int32& literalCount, IntPtr& literalInfo, OleDbHResult& hr);
    internal DualCoTaskMem(IColumnsInfo columnsInfo, IntPtr& columnCount, IntPtr& columnInfos, OleDbHResult& hr);
    internal DualCoTaskMem(IDBSchemaRowset dbSchemaRowset, Int32& schemaCount, IntPtr& schemaGuids, IntPtr& schemaRestrictions, OleDbHResult& hr);
    internal DualCoTaskMem(IColumnsRowset icolumnsRowset, IntPtr& cOptColumns, OleDbHResult& hr);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal class System.Data.OleDb.IDBInfoWrapper : ValueType {
    private object _unknown;
    private IDBInfo _value;
    internal IDBInfo Value { get; }
    internal IDBInfoWrapper(object unknown);
    internal IDBInfo get_Value();
    public sealed virtual void Dispose();
}
internal class System.Data.OleDb.IDBPropertiesWrapper : ValueType {
    private object _unknown;
    private IDBProperties _value;
    internal IDBProperties Value { get; }
    internal IDBPropertiesWrapper(object unknown);
    internal IDBProperties get_Value();
    public sealed virtual void Dispose();
}
internal class System.Data.OleDb.IDBSchemaRowsetWrapper : ValueType {
    private object _unknown;
    private IDBSchemaRowset _value;
    internal IDBSchemaRowset Value { get; }
    internal IDBSchemaRowsetWrapper(object unknown);
    internal IDBSchemaRowset get_Value();
    public sealed virtual void Dispose();
}
internal class System.Data.OleDb.IOpenRowsetWrapper : ValueType {
    private object _unknown;
    private IOpenRowset _value;
    internal IOpenRowset Value { get; }
    internal IOpenRowsetWrapper(object unknown);
    internal IOpenRowset get_Value();
    public sealed virtual void Dispose();
}
internal class System.Data.OleDb.ITransactionJoinWrapper : ValueType {
    private object _unknown;
    private ITransactionJoin _value;
    internal ITransactionJoin Value { get; }
    internal ITransactionJoinWrapper(object unknown);
    internal ITransactionJoin get_Value();
    public sealed virtual void Dispose();
}
internal class System.Data.OleDb.MetaData : object {
    internal Bindings bindings;
    internal ColumnBinding columnBinding;
    internal string columnName;
    internal Guid guid;
    internal int kind;
    internal IntPtr propid;
    internal string idname;
    internal NativeDBType type;
    internal IntPtr ordinal;
    internal int size;
    internal int flags;
    internal byte precision;
    internal byte scale;
    internal bool isAutoIncrement;
    internal bool isUnique;
    internal bool isKeyColumn;
    internal bool isHidden;
    internal string baseSchemaName;
    internal string baseCatalogName;
    internal string baseTableName;
    internal string baseColumnName;
    private sealed virtual override int System.IComparable.CompareTo(object obj);
}
internal class System.Data.OleDb.NativeDBType : object {
    internal static short EMPTY;
    internal static short NULL;
    internal static short I2;
    internal static short I4;
    internal static short R4;
    internal static short R8;
    internal static short CY;
    internal static short DATE;
    internal static short BSTR;
    internal static short IDISPATCH;
    internal static short ERROR;
    internal static short BOOL;
    internal static short VARIANT;
    internal static short IUNKNOWN;
    internal static short DECIMAL;
    internal static short I1;
    internal static short UI1;
    internal static short UI2;
    internal static short UI4;
    internal static short I8;
    internal static short UI8;
    internal static short FILETIME;
    internal static short DBUTCDATETIME;
    internal static short DBTIME_EX;
    internal static short GUID;
    internal static short BYTES;
    internal static short STR;
    internal static short WSTR;
    internal static short NUMERIC;
    internal static short UDT;
    internal static short DBDATE;
    internal static short DBTIME;
    internal static short DBTIMESTAMP;
    internal static short HCHAPTER;
    internal static short PROPVARIANT;
    internal static short VARNUMERIC;
    internal static short XML;
    internal static short VECTOR;
    internal static short ARRAY;
    internal static short BYREF;
    internal static short RESERVED;
    internal static short HighMask;
    internal static NativeDBType Default;
    internal static byte MaximumDecimalPrecision;
    internal OleDbType enumOleDbType;
    internal DbType enumDbType;
    internal short dbType;
    internal short wType;
    internal Type dataType;
    internal int dbPart;
    internal bool isfixed;
    internal bool islong;
    internal byte maxpre;
    internal int fixlen;
    internal string dataSourceType;
    internal StringMemHandle dbString;
    internal bool IsVariableLength { get; }
    private static NativeDBType();
    internal static bool HasHighBit(short value);
    internal bool get_IsVariableLength();
    internal static NativeDBType FromDataType(OleDbType enumOleDbType);
    internal static NativeDBType FromSystemType(object value);
    internal static NativeDBType FromDbType(DbType dbType);
    internal static NativeDBType FromDBType(short dbType, bool isLong, bool isFixed);
}
internal static class System.Data.OleDb.ODB : object {
    internal static int ADODB_AlreadyClosedError;
    internal static int ADODB_NextResultError;
    internal static int InternalStateExecuting;
    internal static int InternalStateFetching;
    internal static int InternalStateClosed;
    internal static int ExecutedIMultipleResults;
    internal static int ExecutedIRowset;
    internal static int ExecutedIRow;
    internal static int PrepareICommandText;
    internal static int InternalStateExecutingNot;
    internal static int InternalStateFetchingNot;
    internal static int InternalStateConnecting;
    internal static int InternalStateOpen;
    internal static int LargeDataSize;
    internal static int CacheIncrement;
    internal static IntPtr DBRESULTFLAG_DEFAULT;
    internal static short VARIANT_TRUE;
    internal static short VARIANT_FALSE;
    internal static int CLSCTX_ALL;
    internal static int MaxProgIdLength;
    internal static int DBLITERAL_CATALOG_SEPARATOR;
    internal static int DBLITERAL_QUOTE_PREFIX;
    internal static int DBLITERAL_QUOTE_SUFFIX;
    internal static int DBLITERAL_SCHEMA_SEPARATOR;
    internal static int DBLITERAL_TABLE_NAME;
    internal static int DBPROP_ACCESSORDER;
    internal static int DBPROP_AUTH_CACHE_AUTHINFO;
    internal static int DBPROP_AUTH_ENCRYPT_PASSWORD;
    internal static int DBPROP_AUTH_INTEGRATED;
    internal static int DBPROP_AUTH_MASK_PASSWORD;
    internal static int DBPROP_AUTH_PASSWORD;
    internal static int DBPROP_AUTH_PERSIST_ENCRYPTED;
    internal static int DBPROP_AUTH_PERSIST_SENSITIVE_AUTHINFO;
    internal static int DBPROP_AUTH_USERID;
    internal static int DBPROP_CATALOGLOCATION;
    internal static int DBPROP_COMMANDTIMEOUT;
    internal static int DBPROP_CONNECTIONSTATUS;
    internal static int DBPROP_CURRENTCATALOG;
    internal static int DBPROP_DATASOURCENAME;
    internal static int DBPROP_DBMSNAME;
    internal static int DBPROP_DBMSVER;
    internal static int DBPROP_GROUPBY;
    internal static int DBPROP_HIDDENCOLUMNS;
    internal static int DBPROP_IColumnsRowset;
    internal static int DBPROP_IDENTIFIERCASE;
    internal static int DBPROP_INIT_ASYNCH;
    internal static int DBPROP_INIT_BINDFLAGS;
    internal static int DBPROP_INIT_CATALOG;
    internal static int DBPROP_INIT_DATASOURCE;
    internal static int DBPROP_INIT_GENERALTIMEOUT;
    internal static int DBPROP_INIT_HWND;
    internal static int DBPROP_INIT_IMPERSONATION_LEVEL;
    internal static int DBPROP_INIT_LCID;
    internal static int DBPROP_INIT_LOCATION;
    internal static int DBPROP_INIT_LOCKOWNER;
    internal static int DBPROP_INIT_MODE;
    internal static int DBPROP_INIT_OLEDBSERVICES;
    internal static int DBPROP_INIT_PROMPT;
    internal static int DBPROP_INIT_PROTECTION_LEVEL;
    internal static int DBPROP_INIT_PROVIDERSTRING;
    internal static int DBPROP_INIT_TIMEOUT;
    internal static int DBPROP_IRow;
    internal static int DBPROP_MAXROWS;
    internal static int DBPROP_MULTIPLERESULTS;
    internal static int DBPROP_ORDERBYCOLUNSINSELECT;
    internal static int DBPROP_PROVIDERFILENAME;
    internal static int DBPROP_QUOTEDIDENTIFIERCASE;
    internal static int DBPROP_RESETDATASOURCE;
    internal static int DBPROP_SQLSUPPORT;
    internal static int DBPROP_UNIQUEROWS;
    internal static int DBPROPSTATUS_OK;
    internal static int DBPROPSTATUS_NOTSUPPORTED;
    internal static int DBPROPSTATUS_BADVALUE;
    internal static int DBPROPSTATUS_BADOPTION;
    internal static int DBPROPSTATUS_BADCOLUMN;
    internal static int DBPROPSTATUS_NOTALLSETTABLE;
    internal static int DBPROPSTATUS_NOTSETTABLE;
    internal static int DBPROPSTATUS_NOTSET;
    internal static int DBPROPSTATUS_CONFLICTING;
    internal static int DBPROPSTATUS_NOTAVAILABLE;
    internal static int DBPROPOPTIONS_REQUIRED;
    internal static int DBPROPOPTIONS_OPTIONAL;
    internal static int DBPROPFLAGS_WRITE;
    internal static int DBPROPFLAGS_SESSION;
    internal static int DBPROPVAL_AO_RANDOM;
    internal static int DBPROPVAL_CL_END;
    internal static int DBPROPVAL_CL_START;
    internal static int DBPROPVAL_CS_COMMUNICATIONFAILURE;
    internal static int DBPROPVAL_CS_INITIALIZED;
    internal static int DBPROPVAL_CS_UNINITIALIZED;
    internal static int DBPROPVAL_GB_COLLATE;
    internal static int DBPROPVAL_GB_CONTAINS_SELECT;
    internal static int DBPROPVAL_GB_EQUALS_SELECT;
    internal static int DBPROPVAL_GB_NO_RELATION;
    internal static int DBPROPVAL_GB_NOT_SUPPORTED;
    internal static int DBPROPVAL_IC_LOWER;
    internal static int DBPROPVAL_IC_MIXED;
    internal static int DBPROPVAL_IC_SENSITIVE;
    internal static int DBPROPVAL_IC_UPPER;
    internal static int DBPROPVAL_IN_ALLOWNULL;
    internal static int DBPROPVAL_MR_NOTSUPPORTED;
    internal static int DBPROPVAL_RD_RESETALL;
    internal static int DBPROPVAL_OS_RESOURCEPOOLING;
    internal static int DBPROPVAL_OS_TXNENLISTMENT;
    internal static int DBPROPVAL_OS_CLIENTCURSOR;
    internal static int DBPROPVAL_OS_AGR_AFTERSESSION;
    internal static int DBPROPVAL_SQL_ODBC_MINIMUM;
    internal static int DBPROPVAL_SQL_ESCAPECLAUSES;
    internal static int DBKIND_GUID_NAME;
    internal static int DBKIND_GUID_PROPID;
    internal static int DBKIND_NAME;
    internal static int DBKIND_PGUID_NAME;
    internal static int DBKIND_PGUID_PROPID;
    internal static int DBKIND_PROPID;
    internal static int DBKIND_GUID;
    internal static int DBCOLUMNFLAGS_ISBOOKMARK;
    internal static int DBCOLUMNFLAGS_ISLONG;
    internal static int DBCOLUMNFLAGS_ISFIXEDLENGTH;
    internal static int DBCOLUMNFLAGS_ISNULLABLE;
    internal static int DBCOLUMNFLAGS_ISROWSET;
    internal static int DBCOLUMNFLAGS_ISROW;
    internal static int DBCOLUMNFLAGS_ISROWSET_DBCOLUMNFLAGS_ISROW;
    internal static int DBCOLUMNFLAGS_ISLONG_DBCOLUMNFLAGS_ISSTREAM;
    internal static int DBCOLUMNFLAGS_ISROWID_DBCOLUMNFLAGS_ISROWVER;
    internal static int DBCOLUMNFLAGS_WRITE_DBCOLUMNFLAGS_WRITEUNKNOWN;
    internal static int DBCOLUMNFLAGS_ISNULLABLE_DBCOLUMNFLAGS_MAYBENULL;
    internal static int DBACCESSOR_ROWDATA;
    internal static int DBACCESSOR_PARAMETERDATA;
    internal static int DBPARAMTYPE_INPUT;
    internal static int DBPARAMTYPE_INPUTOUTPUT;
    internal static int DBPARAMTYPE_OUTPUT;
    internal static int DBPARAMTYPE_RETURNVALUE;
    internal static int ParameterDirectionFlag;
    internal static UInt32 DB_UNSEARCHABLE;
    internal static UInt32 DB_LIKE_ONLY;
    internal static UInt32 DB_ALL_EXCEPT_LIKE;
    internal static UInt32 DB_SEARCHABLE;
    internal static IntPtr DB_INVALID_HACCESSOR;
    internal static IntPtr DB_NULL_HCHAPTER;
    internal static IntPtr DB_NULL_HROW;
    internal static int SizeOf_tagDBBINDING;
    internal static int SizeOf_tagDBCOLUMNINFO;
    internal static int SizeOf_tagDBLITERALINFO;
    internal static int SizeOf_tagDBPROPSET;
    internal static int SizeOf_tagDBPROP;
    internal static int SizeOf_tagDBPROPINFOSET;
    internal static int SizeOf_tagDBPROPINFO;
    internal static int SizeOf_tagDBPROPIDSET;
    internal static int SizeOf_Guid;
    internal static int SizeOf_Variant;
    internal static int OffsetOf_tagDBPROP_Status;
    internal static int OffsetOf_tagDBPROP_Value;
    internal static int OffsetOf_tagDBPROPSET_Properties;
    internal static int OffsetOf_tagDBPROPINFO_Value;
    internal static int OffsetOf_tagDBPROPIDSET_PropertySet;
    internal static int OffsetOf_tagDBLITERALINFO_it;
    internal static int OffsetOf_tagDBBINDING_obValue;
    internal static int OffsetOf_tagDBBINDING_wType;
    internal static Guid IID_NULL;
    internal static Guid IID_IUnknown;
    internal static Guid IID_IDBInitialize;
    internal static Guid IID_IDBCreateSession;
    internal static Guid IID_IDBCreateCommand;
    internal static Guid IID_ICommandText;
    internal static Guid IID_IMultipleResults;
    internal static Guid IID_IRow;
    internal static Guid IID_IRowset;
    internal static Guid IID_ISQLErrorInfo;
    internal static Guid CLSID_DataLinks;
    internal static Guid DBGUID_DEFAULT;
    internal static Guid DBGUID_ROWSET;
    internal static Guid DBGUID_ROW;
    internal static Guid DBGUID_ROWDEFAULTSTREAM;
    internal static Guid CLSID_MSDASQL;
    internal static object DBCOL_SPECIALCOL;
    internal static Char[] ErrorTrimCharacters;
    internal static string Asynchronous_Processing;
    internal static string AttachDBFileName;
    internal static string Connect_Timeout;
    internal static string Data_Source;
    internal static string File_Name;
    internal static string Initial_Catalog;
    internal static string Password;
    internal static string Persist_Security_Info;
    internal static string Provider;
    internal static string Pwd;
    internal static string User_ID;
    internal static string Current_Catalog;
    internal static string DBMS_Version;
    internal static string Properties;
    internal static string DataLinks_CLSID;
    internal static string OLEDB_SERVICES;
    internal static string DefaultDescription_MSDASQL;
    internal static string MSDASQL;
    internal static string MSDASQLdot;
    internal static string _Add;
    internal static string _Keyword;
    internal static string _Name;
    internal static string _Value;
    internal static string DBCOLUMN_BASECATALOGNAME;
    internal static string DBCOLUMN_BASECOLUMNNAME;
    internal static string DBCOLUMN_BASESCHEMANAME;
    internal static string DBCOLUMN_BASETABLENAME;
    internal static string DBCOLUMN_COLUMNSIZE;
    internal static string DBCOLUMN_FLAGS;
    internal static string DBCOLUMN_GUID;
    internal static string DBCOLUMN_IDNAME;
    internal static string DBCOLUMN_ISAUTOINCREMENT;
    internal static string DBCOLUMN_ISUNIQUE;
    internal static string DBCOLUMN_KEYCOLUMN;
    internal static string DBCOLUMN_NAME;
    internal static string DBCOLUMN_NUMBER;
    internal static string DBCOLUMN_PRECISION;
    internal static string DBCOLUMN_PROPID;
    internal static string DBCOLUMN_SCALE;
    internal static string DBCOLUMN_TYPE;
    internal static string DBCOLUMN_TYPEINFO;
    internal static string PRIMARY_KEY;
    internal static string UNIQUE;
    internal static string COLUMN_NAME;
    internal static string NULLS;
    internal static string INDEX_NAME;
    internal static string PARAMETER_NAME;
    internal static string ORDINAL_POSITION;
    internal static string PARAMETER_TYPE;
    internal static string IS_NULLABLE;
    internal static string DATA_TYPE;
    internal static string CHARACTER_MAXIMUM_LENGTH;
    internal static string NUMERIC_PRECISION;
    internal static string NUMERIC_SCALE;
    internal static string TYPE_NAME;
    internal static string ORDINAL_POSITION_ASC;
    internal static string SchemaGuids;
    internal static string Schema;
    internal static string RestrictionSupport;
    internal static string DbInfoKeywords;
    internal static string Keyword;
    private static ODB();
    internal static void CommandParameterStatus(StringBuilder builder, int index, DBStatus status);
    internal static Exception CommandParameterStatus(string value, Exception inner);
    internal static Exception UninitializedParameters(int index, OleDbType dbtype);
    internal static Exception BadStatus_ParamAcc(int index, DBBindStatus status);
    internal static Exception NoProviderSupportForParameters(string provider, Exception inner);
    internal static Exception NoProviderSupportForSProcResetParameters(string provider);
    internal static void PropsetSetFailure(StringBuilder builder, string description, OleDbPropertyStatus status);
    internal static Exception PropsetSetFailure(string value, Exception inner);
    internal static ArgumentException SchemaRowsetsNotSupported(string provider);
    internal static OleDbException NoErrorInformation(string provider, OleDbHResult hr, Exception inner);
    internal static InvalidOperationException MDACNotAvailable(Exception inner);
    internal static ArgumentException MSDASQLNotSupported();
    internal static InvalidOperationException CommandTextNotSupported(string provider, Exception inner);
    internal static InvalidOperationException PossiblePromptNotUserInteractive();
    internal static InvalidOperationException ProviderUnavailable(string provider, Exception inner);
    internal static InvalidOperationException TransactionsNotSupported(string provider, Exception inner);
    internal static ArgumentException AsynchronousNotSupported();
    internal static ArgumentException NoProviderSpecified();
    internal static ArgumentException InvalidProviderSpecified();
    internal static ArgumentException InvalidRestrictionsDbInfoKeywords(string parameter);
    internal static ArgumentException InvalidRestrictionsDbInfoLiteral(string parameter);
    internal static ArgumentException InvalidRestrictionsSchemaGuids(string parameter);
    internal static ArgumentException NotSupportedSchemaTable(Guid schema, OleDbConnection connection);
    internal static Exception InvalidOleDbType(OleDbType value);
    internal static InvalidOperationException BadAccessor();
    internal static InvalidCastException ConversionRequired();
    internal static InvalidCastException CantConvertValue();
    internal static InvalidOperationException SignMismatch(Type type);
    internal static InvalidOperationException DataOverflow(Type type);
    internal static InvalidOperationException CantCreate(Type type);
    internal static InvalidOperationException Unavailable(Type type);
    internal static InvalidOperationException UnexpectedStatusValue(DBStatus status);
    internal static InvalidOperationException GVtUnknown(int wType);
    internal static InvalidOperationException SVtUnknown(int wType);
    internal static InvalidOperationException BadStatusRowAccessor(int i, DBBindStatus rowStatus);
    internal static InvalidOperationException ThreadApartmentState(Exception innerException);
    internal static ArgumentException Fill_NotADODB(string parameter);
    internal static ArgumentException Fill_EmptyRecordSet(string parameter, Exception innerException);
    internal static ArgumentException Fill_EmptyRecord(string parameter, Exception innerException);
    internal static string NoErrorMessage(OleDbHResult errorcode);
    internal static string FailedGetDescription(OleDbHResult errorcode);
    internal static string FailedGetSource(OleDbHResult errorcode);
    internal static InvalidOperationException DBBindingGetVector();
    internal static OleDbHResult GetErrorDescription(IErrorInfo errorInfo, OleDbHResult hresult, String& message);
    internal static ArgumentException ISourcesRowsetNotSupported();
    internal static InvalidOperationException IDBInfoNotSupported();
    internal static string ELookup(OleDbHResult hr);
}
[DesignerAttribute("Microsoft.VSDesigner.Data.VS.OleDbCommandDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemAttribute("True")]
[DefaultEventAttribute("RecordsAffected")]
public class System.Data.OleDb.OleDbCommand : DbCommand {
    internal int ObjectID;
    internal bool canceling;
    [DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DbCommand_CommandText")]
[EditorAttribute("Microsoft.VSDesigner.Data.ADO.Design.OleDbCommandTextEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string CommandText { get; public set; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DbCommand_CommandTimeout")]
public int CommandTimeout { get; public set; }
    [RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DbCommand_CommandType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public CommandType CommandType { get; public set; }
    [DefaultValueAttribute("")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DbCommand_Connection")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public OleDbConnection Connection { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    protected DbParameterCollection DbParameterCollection { get; }
    protected DbTransaction DbTransaction { get; protected set; }
    [EditorBrowsableAttribute("1")]
[DesignOnlyAttribute("True")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("True")]
public bool DesignTimeVisible { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DbCommand_Parameters")]
public OleDbParameterCollection Parameters { get; }
    [ResDescriptionAttribute("DbCommand_Transaction")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public OleDbTransaction Transaction { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ResCategoryAttribute("DataCategory_Update")]
[ResDescriptionAttribute("DbCommand_UpdatedRowSource")]
public UpdateRowSource UpdatedRowSource { get; public set; }
    public OleDbCommand(string cmdText);
    public OleDbCommand(string cmdText, OleDbConnection connection);
    public OleDbCommand(string cmdText, OleDbConnection connection, OleDbTransaction transaction);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public void ResetCommandTimeout();
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public OleDbConnection get_Connection();
    public void set_Connection(OleDbConnection value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    protected virtual DbParameterCollection get_DbParameterCollection();
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    public OleDbParameterCollection get_Parameters();
    public OleDbTransaction get_Transaction();
    public void set_Transaction(OleDbTransaction value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    internal ICommandProperties ICommandProperties();
    public virtual void Cancel();
    public OleDbCommand Clone();
    private sealed virtual override object System.ICloneable.Clone();
    internal void CloseCommandFromConnection(bool canceling);
    internal void CloseInternal();
    internal void CloseFromDataReader(Bindings bindings);
    public OleDbParameter CreateParameter();
    protected virtual DbParameter CreateDbParameter();
    protected virtual void Dispose(bool disposing);
    public OleDbDataReader ExecuteReader();
    private sealed virtual override IDataReader System.Data.IDbCommand.ExecuteReader();
    public OleDbDataReader ExecuteReader(CommandBehavior behavior);
    private sealed virtual override IDataReader System.Data.IDbCommand.ExecuteReader(CommandBehavior behavior);
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public virtual int ExecuteNonQuery();
    public virtual object ExecuteScalar();
    public virtual void Prepare();
    internal object GetPropertyValue(Guid propertySet, int propertyID);
    internal Bindings TakeBindingOwnerShip();
}
public class System.Data.OleDb.OleDbCommandBuilder : DbCommandBuilder {
    [ResDescriptionAttribute("OleDbCommandBuilder_DataAdapter")]
[ResCategoryAttribute("DataCategory_Update")]
[DefaultValueAttribute("")]
public OleDbDataAdapter DataAdapter { get; public set; }
    public OleDbCommandBuilder(OleDbDataAdapter adapter);
    public OleDbDataAdapter get_DataAdapter();
    public void set_DataAdapter(OleDbDataAdapter value);
    public OleDbCommand GetInsertCommand();
    public OleDbCommand GetInsertCommand(bool useColumnsForParameterNames);
    public OleDbCommand GetUpdateCommand();
    public OleDbCommand GetUpdateCommand(bool useColumnsForParameterNames);
    public OleDbCommand GetDeleteCommand();
    public OleDbCommand GetDeleteCommand(bool useColumnsForParameterNames);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual void ApplyParameterInfo(DbParameter parameter, DataRow datarow, StatementType statementType, bool whereClause);
    public static void DeriveParameters(OleDbCommand command);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public string QuoteIdentifier(string unquotedIdentifier, OleDbConnection connection);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
    public string UnquoteIdentifier(string quotedIdentifier, OleDbConnection connection);
}
[DefaultEventAttribute("InfoMessage")]
public class System.Data.OleDb.OleDbConnection : DbConnection {
    internal static CodeAccessPermission ExecutePermission;
    internal int ObjectID;
    [SettingsBindableAttribute("True")]
[ResCategoryAttribute("DataCategory_Data")]
[RecommendedAsConfigurableAttribute("True")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
[ResDescriptionAttribute("OleDbConnection_ConnectionString")]
[EditorAttribute("Microsoft.VSDesigner.Data.ADO.Design.OleDbConnectionStringEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string ConnectionString { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[ResDescriptionAttribute("OleDbConnection_ConnectionTimeout")]
public int ConnectionTimeout { get; }
    [ResDescriptionAttribute("OleDbConnection_Database")]
[DesignerSerializationVisibilityAttribute("0")]
public string Database { get; }
    [BrowsableAttribute("True")]
[ResDescriptionAttribute("OleDbConnection_DataSource")]
public string DataSource { get; }
    internal bool IsOpen { get; }
    unknown OleDbTransaction LocalTransaction {internal set; }
    [ResDescriptionAttribute("OleDbConnection_Provider")]
[BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[ResCategoryAttribute("DataCategory_Data")]
public string Provider { get; }
    internal OleDbConnectionPoolGroupProviderInfo ProviderInfo { get; }
    [ResDescriptionAttribute("OleDbConnection_ServerVersion")]
public string ServerVersion { get; }
    [ResDescriptionAttribute("DbConnection_State")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ConnectionState State { get; }
    internal int CloseCount { get; }
    internal DbConnectionFactory ConnectionFactory { get; }
    internal DbConnectionOptions ConnectionOptions { get; }
    internal DbConnectionInternal InnerConnection { get; }
    internal DbConnectionPoolGroup PoolGroup { get; internal set; }
    internal DbConnectionOptions UserConnectionOptions { get; }
    public OleDbConnection(string connectionString);
    private static OleDbConnection();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public virtual int get_ConnectionTimeout();
    public virtual string get_Database();
    public virtual string get_DataSource();
    internal bool get_IsOpen();
    internal void set_LocalTransaction(OleDbTransaction value);
    public string get_Provider();
    internal OleDbConnectionPoolGroupProviderInfo get_ProviderInfo();
    public virtual string get_ServerVersion();
    public virtual ConnectionState get_State();
    [EditorBrowsableAttribute("2")]
public void ResetState();
    public void add_InfoMessage(OleDbInfoMessageEventHandler value);
    public void remove_InfoMessage(OleDbInfoMessageEventHandler value);
    internal ICommandText ICommandText();
    internal IOpenRowsetWrapper IOpenRowset();
    internal int SqlSupport();
    internal bool SupportMultipleResults();
    internal bool SupportIRow(OleDbCommand cmd);
    internal int QuotedIdentifierCase();
    public OleDbTransaction BeginTransaction();
    public OleDbTransaction BeginTransaction(IsolationLevel isolationLevel);
    public virtual void ChangeDatabase(string value);
    internal void CheckStateOpen(string method);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual void Close();
    public OleDbCommand CreateCommand();
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public void EnlistDistributedTransaction(ITransaction transaction);
    internal object GetDataSourcePropertyValue(Guid propertySet, int propertyID);
    internal object GetDataSourceValue(Guid propertySet, int propertyID);
    internal void GetLiteralQuotes(string method, String& quotePrefix, String& quoteSuffix);
    public DataTable GetOleDbSchemaTable(Guid schema, Object[] restrictions);
    internal DataTable GetSchemaRowset(Guid schema, Object[] restrictions);
    internal bool HasLiveReader(OleDbCommand cmd);
    internal void OnInfoMessage(IErrorInfo errorInfo, OleDbHResult errorCode);
    public virtual void Open();
    internal void SetDataSourcePropertyValue(Guid propertySet, int propertyID, string description, bool required, object value);
    internal bool SupportSchemaRowset(Guid schema);
    internal OleDbTransaction ValidateTransaction(OleDbTransaction transaction, string method);
    internal static Exception ProcessResults(OleDbHResult hresult, OleDbConnection connection, object src);
    public static void ReleaseObjectPool();
    internal int get_CloseCount();
    internal DbConnectionFactory get_ConnectionFactory();
    internal DbConnectionOptions get_ConnectionOptions();
    internal DbConnectionInternal get_InnerConnection();
    internal DbConnectionPoolGroup get_PoolGroup();
    internal void set_PoolGroup(DbConnectionPoolGroup value);
    internal DbConnectionOptions get_UserConnectionOptions();
    [ReliabilityContractAttribute("3", "2")]
internal void Abort(Exception e);
    internal void AddWeakReference(object value, int tag);
    protected virtual DbCommand CreateDbCommand();
    protected virtual void Dispose(bool disposing);
    public virtual void EnlistTransaction(Transaction transaction);
    internal DbMetaDataFactory GetMetaDataFactoryInternal(DbConnectionInternal internalConnection);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    internal void NotifyWeakReference(int message);
    internal void PermissionDemand();
    internal void RemoveWeakReference(object value);
    internal void SetInnerConnectionEvent(DbConnectionInternal to);
    internal bool SetInnerConnectionFrom(DbConnectionInternal to, DbConnectionInternal from);
    internal void SetInnerConnectionTo(DbConnectionInternal to);
    [ConditionalAttribute("DEBUG")]
internal static void VerifyExecutePermission();
}
internal class System.Data.OleDb.OleDbConnectionFactory : DbConnectionFactory {
    public static OleDbConnectionFactory SingletonInstance;
    public DbProviderFactory ProviderFactory { get; }
    private static OleDbConnectionFactory();
    public virtual DbProviderFactory get_ProviderFactory();
    protected virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningObject);
    protected virtual DbConnectionOptions CreateConnectionOptions(string connectionString, DbConnectionOptions previous);
    protected virtual DbMetaDataFactory CreateMetaDataFactory(DbConnectionInternal internalConnection, Boolean& cacheMetaDataFactory);
    protected virtual DbConnectionPoolGroupOptions CreateConnectionPoolGroupOptions(DbConnectionOptions connectionOptions);
    internal virtual DbConnectionPoolGroupProviderInfo CreateConnectionPoolGroupProviderInfo(DbConnectionOptions connectionOptions);
    internal virtual DbConnectionPoolGroup GetConnectionPoolGroup(DbConnection connection);
    internal virtual DbConnectionInternal GetInnerConnection(DbConnection connection);
    protected virtual int GetObjectId(DbConnection connection);
    internal virtual void PermissionDemand(DbConnection outerConnection);
    internal virtual void SetConnectionPoolGroup(DbConnection outerConnection, DbConnectionPoolGroup poolGroup);
    internal virtual void SetInnerConnectionEvent(DbConnection owningObject, DbConnectionInternal to);
    internal virtual bool SetInnerConnectionFrom(DbConnection owningObject, DbConnectionInternal to, DbConnectionInternal from);
    internal virtual void SetInnerConnectionTo(DbConnection owningObject, DbConnectionInternal to);
}
internal class System.Data.OleDb.OleDbConnectionInternal : DbConnectionInternal {
    internal OleDbConnectionString ConnectionString;
    internal OleDbConnection Connection { get; }
    internal bool HasSession { get; }
    internal OleDbTransaction LocalTransaction { get; internal set; }
    public string ServerVersion { get; }
    internal OleDbConnectionInternal(OleDbConnectionString constr, OleDbConnection connection);
    private static OleDbConnectionInternal();
    internal OleDbConnection get_Connection();
    internal bool get_HasSession();
    internal OleDbTransaction get_LocalTransaction();
    internal void set_LocalTransaction(OleDbTransaction value);
    public virtual string get_ServerVersion();
    internal IDBPropertiesWrapper IDBProperties();
    internal IOpenRowsetWrapper IOpenRowset();
    internal IDBSchemaRowsetWrapper IDBSchemaRowset();
    internal ITransactionJoinWrapper ITransactionJoin();
    internal ICommandText ICommandText();
    protected virtual void Activate(Transaction transaction);
    public virtual DbTransaction BeginTransaction(IsolationLevel isolationLevel);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    protected virtual void Deactivate();
    public virtual void Dispose();
    public virtual void EnlistTransaction(Transaction transaction);
    internal void EnlistTransactionInternal(Transaction transaction);
    internal object GetDataSourceValue(Guid propertySet, int propertyID);
    internal object GetDataSourcePropertyValue(Guid propertySet, int propertyID);
    internal DataTable BuildInfoLiterals();
    internal DataTable BuildInfoKeywords();
    internal bool AddInfoKeywordsToTable(DataTable table, DataColumn keyword);
    internal DataTable BuildSchemaGuids();
    internal string GetLiteralInfo(int literal);
    internal SchemaSupport[] GetSchemaRowsetInformation();
    internal DataTable GetSchemaRowset(Guid schema, Object[] restrictions);
    internal bool HasLiveReader(OleDbCommand cmd);
    internal bool SupportSchemaRowset(Guid schema);
    public static void ReleaseObjectPool();
    internal OleDbTransaction ValidateTransaction(OleDbTransaction transaction, string method);
    internal Dictionary`2<string, OleDbPropertyInfo> GetPropertyInfo(Guid[] propertySets);
}
internal class System.Data.OleDb.OleDbConnectionPoolGroupProviderInfo : DbConnectionPoolGroupProviderInfo {
    internal bool HasQuoteFix { get; }
    internal string QuotePrefix { get; }
    internal string QuoteSuffix { get; }
    internal bool get_HasQuoteFix();
    internal string get_QuotePrefix();
    internal string get_QuoteSuffix();
    internal void SetQuoteFix(string prefix, string suffix);
}
internal class System.Data.OleDb.OleDbConnectionString : DbConnectionOptions {
    internal bool PossiblePrompt;
    internal string ActualConnectionString;
    internal SchemaSupport[] _schemaSupport;
    internal int _sqlSupport;
    internal bool _supportMultipleResults;
    internal bool _supportIRow;
    internal bool _hasSqlSupport;
    internal bool _hasSupportMultipleResults;
    internal bool _hasSupportIRow;
    internal IUnknownQueryInterface DangerousDataSourceIUnknownQueryInterface;
    internal IDBInitializeInitialize DangerousIDBInitializeInitialize;
    internal IDBCreateSessionCreateSession DangerousIDBCreateSessionCreateSession;
    internal IDBCreateCommandCreateCommand DangerousIDBCreateCommandCreateCommand;
    internal bool HaveQueriedForCreateCommand;
    internal int ConnectTimeout { get; }
    internal string DataSource { get; }
    internal string InitialCatalog { get; }
    internal string Provider { get; }
    internal int OleDbServices { get; }
    internal SchemaSupport[] SchemaSupport { get; internal set; }
    internal OleDbConnectionString(string connectionString, bool validate);
    internal int get_ConnectTimeout();
    internal string get_DataSource();
    internal string get_InitialCatalog();
    internal string get_Provider();
    internal int get_OleDbServices();
    internal SchemaSupport[] get_SchemaSupport();
    internal void set_SchemaSupport(SchemaSupport[] value);
    protected internal virtual PermissionSet CreatePermissionSet();
    protected internal virtual string Expand();
    internal int GetSqlSupport(OleDbConnection connection);
    internal bool GetSupportIRow(OleDbConnection connection, OleDbCommand command);
    internal bool GetSupportMultipleResults(OleDbConnection connection);
    internal static bool IsMSDASQL(string progid);
    internal static void ReleaseObjectPool();
}
[DefaultMemberAttribute("Item")]
[DefaultPropertyAttribute("Provider")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("System.Data.OleDb.OleDbConnectionStringBuilder/OleDbConnectionStringBuilderConverter")]
public class System.Data.OleDb.OleDbConnectionStringBuilder : DbConnectionStringBuilder {
    public object Item { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Data Source")]
[ResCategoryAttribute("DataCategory_Source")]
[ResDescriptionAttribute("DbConnectionString_DataSource")]
public string DataSource { get; public set; }
    [ResCategoryAttribute("DataCategory_NamedConnectionString")]
[ResDescriptionAttribute("DbConnectionString_FileName")]
[RefreshPropertiesAttribute("1")]
[EditorAttribute("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DisplayNameAttribute("File Name")]
public string FileName { get; public set; }
    [RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Pooling")]
[DisplayNameAttribute("OLE DB Services")]
[TypeConverterAttribute("System.Data.OleDb.OleDbConnectionStringBuilder/OleDbServicesConverter")]
[ResDescriptionAttribute("DbConnectionString_OleDbServices")]
public int OleDbServices { get; public set; }
    [DisplayNameAttribute("Persist Security Info")]
[ResDescriptionAttribute("DbConnectionString_PersistSecurityInfo")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Security")]
public bool PersistSecurityInfo { get; public set; }
    [DisplayNameAttribute("Provider")]
[ResCategoryAttribute("DataCategory_Source")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("System.Data.OleDb.OleDbConnectionStringBuilder/OleDbProviderConverter")]
[ResDescriptionAttribute("DbConnectionString_Provider")]
public string Provider { get; public set; }
    public ICollection Keys { get; }
    private static OleDbConnectionStringBuilder();
    public OleDbConnectionStringBuilder(string connectionString);
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public string get_DataSource();
    public void set_DataSource(string value);
    public string get_FileName();
    public void set_FileName(string value);
    public int get_OleDbServices();
    public void set_OleDbServices(int value);
    public bool get_PersistSecurityInfo();
    public void set_PersistSecurityInfo(bool value);
    public string get_Provider();
    public void set_Provider(string value);
    public virtual ICollection get_Keys();
    public virtual bool ContainsKey(string keyword);
    public virtual void Clear();
    public virtual bool Remove(string keyword);
    public virtual bool TryGetValue(string keyword, Object& value);
    protected virtual void GetProperties(Hashtable propertyDescriptors);
}
[ToolboxItemAttribute("Microsoft.VSDesigner.Data.VS.OleDbDataAdapterToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DesignerAttribute("Microsoft.VSDesigner.Data.VS.OleDbDataAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultEventAttribute("RowUpdated")]
public class System.Data.OleDb.OleDbDataAdapter : DbDataAdapter {
    [ResCategoryAttribute("DataCategory_Update")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ResDescriptionAttribute("DbDataAdapter_DeleteCommand")]
[DefaultValueAttribute("")]
public OleDbCommand DeleteCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; private set; }
    [EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ResCategoryAttribute("DataCategory_Update")]
[ResDescriptionAttribute("DbDataAdapter_InsertCommand")]
[DefaultValueAttribute("")]
public OleDbCommand InsertCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; private set; }
    [ResCategoryAttribute("DataCategory_Fill")]
[ResDescriptionAttribute("DbDataAdapter_SelectCommand")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultValueAttribute("")]
public OleDbCommand SelectCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; private set; }
    [ResCategoryAttribute("DataCategory_Update")]
[ResDescriptionAttribute("DbDataAdapter_UpdateCommand")]
[DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public OleDbCommand UpdateCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; private set; }
    public OleDbDataAdapter(OleDbCommand selectCommand);
    public OleDbDataAdapter(string selectCommandText, string selectConnectionString);
    public OleDbDataAdapter(string selectCommandText, OleDbConnection selectConnection);
    private static OleDbDataAdapter();
    public OleDbCommand get_DeleteCommand();
    public void set_DeleteCommand(OleDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value);
    public OleDbCommand get_InsertCommand();
    public void set_InsertCommand(OleDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_InsertCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value);
    public OleDbCommand get_SelectCommand();
    public void set_SelectCommand(OleDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_SelectCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value);
    public OleDbCommand get_UpdateCommand();
    public void set_UpdateCommand(OleDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value);
    public void add_RowUpdated(OleDbRowUpdatedEventHandler value);
    public void remove_RowUpdated(OleDbRowUpdatedEventHandler value);
    public void add_RowUpdating(OleDbRowUpdatingEventHandler value);
    public void remove_RowUpdating(OleDbRowUpdatingEventHandler value);
    private sealed virtual override object System.ICloneable.Clone();
    protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    internal static void FillDataTable(OleDbDataReader dataReader, DataTable[] dataTables);
    public int Fill(DataTable dataTable, object ADODBRecordSet);
    public int Fill(DataSet dataSet, object ADODBRecordSet, string srcTable);
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
}
[DefaultMemberAttribute("Item")]
public class System.Data.OleDb.OleDbDataReader : DbDataReader {
    internal int ObjectID;
    internal OleDbCommand Command { get; }
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public object Item { get; }
    public object Item { get; }
    public int VisibleFieldCount { get; }
    internal OleDbDataReader(OleDbConnection connection, OleDbCommand command, int depth, CommandBehavior commandBehavior);
    internal void InitializeIMultipleResults(object result);
    internal void InitializeIRowset(object result, ChapterHandle chapterHandle, IntPtr recordsAffected);
    internal void InitializeIRow(object result, IntPtr recordsAffected);
    internal OleDbCommand get_Command();
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual object get_Item(int index);
    public virtual object get_Item(string name);
    public virtual DataTable GetSchemaTable();
    internal void BuildMetaInfo();
    public virtual void Close();
    internal void CloseReaderFromConnection(bool canceling);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public virtual long GetChars(int ordinal, long dataIndex, Char[] buffer, int bufferIndex, int length);
    [EditorBrowsableAttribute("1")]
public virtual char GetChar(int ordinal);
    [EditorBrowsableAttribute("2")]
public OleDbDataReader GetData(int ordinal);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    internal OleDbDataReader ResetChapter(int bindingIndex, int index, RowBinding rowbinding, int valueOffset);
    public virtual string GetDataTypeName(int index);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int index);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int index);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int ordinal);
    public TimeSpan GetTimeSpan(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public virtual int get_VisibleFieldCount();
    internal void HasRowsRead();
    internal static OleDbException NextResults(IMultipleResults imultipleResults, OleDbConnection connection, OleDbCommand command, IntPtr& recordsAffected);
    public virtual bool NextResult();
    public virtual bool Read();
    internal void DumpToSchemaTable(IRowset rowset);
    internal static void GenerateSchemaTable(OleDbDataReader dataReader, object handle, CommandBehavior behavior);
}
public class System.Data.OleDb.OleDbEnumerator : object {
    public DataTable GetElements();
    public static OleDbDataReader GetEnumerator(Type type);
    internal static OleDbDataReader GetEnumeratorFromType(Type type);
    public static OleDbDataReader GetRootEnumerator();
}
public class System.Data.OleDb.OleDbError : object {
    public string Message { get; }
    public int NativeError { get; }
    public string Source { get; }
    public string SQLState { get; }
    internal OleDbError(IErrorRecords errorRecords, int index);
    public string get_Message();
    public int get_NativeError();
    public string get_Source();
    public string get_SQLState();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class System.Data.OleDb.OleDbErrorCollection : object {
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public int Count { get; }
    public OleDbError Item { get; }
    internal OleDbErrorCollection(IErrorInfo errorInfo);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual int get_Count();
    public OleDbError get_Item(int index);
    internal void AddRange(ICollection c);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(OleDbError[] array, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
public class System.Data.OleDb.OleDbException : DbException {
    [TypeConverterAttribute("System.Data.OleDb.OleDbException/ErrorCodeConverter")]
public int ErrorCode { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public OleDbErrorCollection Errors { get; }
    internal OleDbException(string message, OleDbHResult errorCode, Exception inner);
    internal OleDbException(OleDbException previous, Exception inner);
    private OleDbException(SerializationInfo si, StreamingContext sc);
    public virtual void GetObjectData(SerializationInfo si, StreamingContext context);
    public virtual int get_ErrorCode();
    public OleDbErrorCollection get_Errors();
    internal bool ShouldSerializeErrors();
    internal static OleDbException CreateException(IErrorInfo errorInfo, OleDbHResult errorCode, Exception inner);
    internal static OleDbException CombineExceptions(List`1<OleDbException> exceptions);
}
public class System.Data.OleDb.OleDbFactory : DbProviderFactory {
    public static OleDbFactory Instance;
    private static OleDbFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
    public virtual CodeAccessPermission CreatePermission(PermissionState state);
}
internal enum System.Data.OleDb.OleDbHResult : Enum {
    public int value__;
    public static OleDbHResult CO_E_CLASSSTRING;
    public static OleDbHResult REGDB_E_CLASSNOTREG;
    public static OleDbHResult CO_E_NOTINITIALIZED;
    public static OleDbHResult S_OK;
    public static OleDbHResult S_FALSE;
    public static OleDbHResult E_UNEXPECTED;
    public static OleDbHResult E_NOTIMPL;
    public static OleDbHResult E_OUTOFMEMORY;
    public static OleDbHResult E_INVALIDARG;
    public static OleDbHResult E_NOINTERFACE;
    public static OleDbHResult E_POINTER;
    public static OleDbHResult E_HANDLE;
    public static OleDbHResult E_ABORT;
    public static OleDbHResult E_FAIL;
    public static OleDbHResult E_ACCESSDENIED;
    public static OleDbHResult DB_E_BADACCESSORHANDLE;
    public static OleDbHResult DB_E_ROWLIMITEXCEEDED;
    public static OleDbHResult DB_E_REOLEDBNLYACCESSOR;
    public static OleDbHResult DB_E_SCHEMAVIOLATION;
    public static OleDbHResult DB_E_BADROWHANDLE;
    public static OleDbHResult DB_E_OBJECTOPEN;
    public static OleDbHResult DB_E_BADCHAPTER;
    public static OleDbHResult DB_E_CANTCONVERTVALUE;
    public static OleDbHResult DB_E_BADBINDINFO;
    public static OleDbHResult DB_SEC_E_PERMISSIONDENIED;
    public static OleDbHResult DB_E_NOTAREFERENCECOLUMN;
    public static OleDbHResult DB_E_LIMITREJECTED;
    public static OleDbHResult DB_E_NOCOMMAND;
    public static OleDbHResult DB_E_COSTLIMIT;
    public static OleDbHResult DB_E_BADBOOKMARK;
    public static OleDbHResult DB_E_BADLOCKMODE;
    public static OleDbHResult DB_E_PARAMNOTOPTIONAL;
    public static OleDbHResult DB_E_BADCOLUMNID;
    public static OleDbHResult DB_E_BADRATIO;
    public static OleDbHResult DB_E_BADVALUES;
    public static OleDbHResult DB_E_ERRORSINCOMMAND;
    public static OleDbHResult DB_E_CANTCANCEL;
    public static OleDbHResult DB_E_DIALECTNOTSUPPORTED;
    public static OleDbHResult DB_E_DUPLICATEDATASOURCE;
    public static OleDbHResult DB_E_CANNOTRESTART;
    public static OleDbHResult DB_E_NOTFOUND;
    public static OleDbHResult DB_E_NEWLYINSERTED;
    public static OleDbHResult DB_E_CANNOTFREE;
    public static OleDbHResult DB_E_GOALREJECTED;
    public static OleDbHResult DB_E_UNSUPPORTEDCONVERSION;
    public static OleDbHResult DB_E_BADSTARTPOSITION;
    public static OleDbHResult DB_E_NOQUERY;
    public static OleDbHResult DB_E_NOTREENTRANT;
    public static OleDbHResult DB_E_ERRORSOCCURRED;
    public static OleDbHResult DB_E_NOAGGREGATION;
    public static OleDbHResult DB_E_DELETEDROW;
    public static OleDbHResult DB_E_CANTFETCHBACKWARDS;
    public static OleDbHResult DB_E_ROWSNOTRELEASED;
    public static OleDbHResult DB_E_BADSTORAGEFLAG;
    public static OleDbHResult DB_E_BADCOMPAREOP;
    public static OleDbHResult DB_E_BADSTATUSVALUE;
    public static OleDbHResult DB_E_CANTSCROLLBACKWARDS;
    public static OleDbHResult DB_E_BADREGIONHANDLE;
    public static OleDbHResult DB_E_NONCONTIGUOUSRANGE;
    public static OleDbHResult DB_E_INVALIDTRANSITION;
    public static OleDbHResult DB_E_NOTASUBREGION;
    public static OleDbHResult DB_E_MULTIPLESTATEMENTS;
    public static OleDbHResult DB_E_INTEGRITYVIOLATION;
    public static OleDbHResult DB_E_BADTYPENAME;
    public static OleDbHResult DB_E_ABORTLIMITREACHED;
    public static OleDbHResult DB_E_ROWSETINCOMMAND;
    public static OleDbHResult DB_E_CANTTRANSLATE;
    public static OleDbHResult DB_E_DUPLICATEINDEXID;
    public static OleDbHResult DB_E_NOINDEX;
    public static OleDbHResult DB_E_INDEXINUSE;
    public static OleDbHResult DB_E_NOTABLE;
    public static OleDbHResult DB_E_CONCURRENCYVIOLATION;
    public static OleDbHResult DB_E_BADCOPY;
    public static OleDbHResult DB_E_BADPRECISION;
    public static OleDbHResult DB_E_BADSCALE;
    public static OleDbHResult DB_E_BADTABLEID;
    public static OleDbHResult DB_E_BADTYPE;
    public static OleDbHResult DB_E_DUPLICATECOLUMNID;
    public static OleDbHResult DB_E_DUPLICATETABLEID;
    public static OleDbHResult DB_E_TABLEINUSE;
    public static OleDbHResult DB_E_NOLOCALE;
    public static OleDbHResult DB_E_BADRECORDNUM;
    public static OleDbHResult DB_E_BOOKMARKSKIPPED;
    public static OleDbHResult DB_E_BADPROPERTYVALUE;
    public static OleDbHResult DB_E_INVALID;
    public static OleDbHResult DB_E_BADACCESSORFLAGS;
    public static OleDbHResult DB_E_BADSTORAGEFLAGS;
    public static OleDbHResult DB_E_BYREFACCESSORNOTSUPPORTED;
    public static OleDbHResult DB_E_NULLACCESSORNOTSUPPORTED;
    public static OleDbHResult DB_E_NOTPREPARED;
    public static OleDbHResult DB_E_BADACCESSORTYPE;
    public static OleDbHResult DB_E_WRITEONLYACCESSOR;
    public static OleDbHResult DB_SEC_E_AUTH_FAILED;
    public static OleDbHResult DB_E_CANCELED;
    public static OleDbHResult DB_E_CHAPTERNOTRELEASED;
    public static OleDbHResult DB_E_BADSOURCEHANDLE;
    public static OleDbHResult DB_E_PARAMUNAVAILABLE;
    public static OleDbHResult DB_E_ALREADYINITIALIZED;
    public static OleDbHResult DB_E_NOTSUPPORTED;
    public static OleDbHResult DB_E_MAXPENDCHANGESEXCEEDED;
    public static OleDbHResult DB_E_BADORDINAL;
    public static OleDbHResult DB_E_PENDINGCHANGES;
    public static OleDbHResult DB_E_DATAOVERFLOW;
    public static OleDbHResult DB_E_BADHRESULT;
    public static OleDbHResult DB_E_BADLOOKUPID;
    public static OleDbHResult DB_E_BADDYNAMICERRORID;
    public static OleDbHResult DB_E_PENDINGINSERT;
    public static OleDbHResult DB_E_BADCONVERTFLAG;
    public static OleDbHResult DB_E_BADPARAMETERNAME;
    public static OleDbHResult DB_E_MULTIPLESTORAGE;
    public static OleDbHResult DB_E_CANTFILTER;
    public static OleDbHResult DB_E_CANTORDER;
    public static OleDbHResult MD_E_BADTUPLE;
    public static OleDbHResult MD_E_BADCOORDINATE;
    public static OleDbHResult MD_E_INVALIDAXIS;
    public static OleDbHResult MD_E_INVALIDCELLRANGE;
    public static OleDbHResult DB_E_NOCOLUMN;
    public static OleDbHResult DB_E_COMMANDNOTPERSISTED;
    public static OleDbHResult DB_E_DUPLICATEID;
    public static OleDbHResult DB_E_OBJECTCREATIONLIMITREACHED;
    public static OleDbHResult DB_E_BADINDEXID;
    public static OleDbHResult DB_E_BADINITSTRING;
    public static OleDbHResult DB_E_NOPROVIDERSREGISTERED;
    public static OleDbHResult DB_E_MISMATCHEDPROVIDER;
    public static OleDbHResult DB_E_BADCOMMANDID;
    public static OleDbHResult SEC_E_BADTRUSTEEID;
    public static OleDbHResult SEC_E_NOTRUSTEEID;
    public static OleDbHResult SEC_E_NOMEMBERSHIPSUPPORT;
    public static OleDbHResult SEC_E_INVALIDOBJECT;
    public static OleDbHResult SEC_E_NOOWNER;
    public static OleDbHResult SEC_E_INVALIDACCESSENTRYLIST;
    public static OleDbHResult SEC_E_INVALIDOWNER;
    public static OleDbHResult SEC_E_INVALIDACCESSENTRY;
    public static OleDbHResult DB_E_BADCONSTRAINTTYPE;
    public static OleDbHResult DB_E_BADCONSTRAINTFORM;
    public static OleDbHResult DB_E_BADDEFERRABILITY;
    public static OleDbHResult DB_E_BADMATCHTYPE;
    public static OleDbHResult DB_E_BADUPDATEDELETERULE;
    public static OleDbHResult DB_E_BADCONSTRAINTID;
    public static OleDbHResult DB_E_BADCOMMANDFLAGS;
    public static OleDbHResult DB_E_OBJECTMISMATCH;
    public static OleDbHResult DB_E_NOSOURCEOBJECT;
    public static OleDbHResult DB_E_RESOURCELOCKED;
    public static OleDbHResult DB_E_NOTCOLLECTION;
    public static OleDbHResult DB_E_REOLEDBNLY;
    public static OleDbHResult DB_E_ASYNCNOTSUPPORTED;
    public static OleDbHResult DB_E_CANNOTCONNECT;
    public static OleDbHResult DB_E_TIMEOUT;
    public static OleDbHResult DB_E_RESOURCEEXISTS;
    public static OleDbHResult DB_E_RESOURCEOUTOFSCOPE;
    public static OleDbHResult DB_E_DROPRESTRICTED;
    public static OleDbHResult DB_E_DUPLICATECONSTRAINTID;
    public static OleDbHResult DB_E_OUTOFSPACE;
    public static OleDbHResult DB_SEC_E_SAFEMODE_DENIED;
    public static OleDbHResult DB_S_ROWLIMITEXCEEDED;
    public static OleDbHResult DB_S_COLUMNTYPEMISMATCH;
    public static OleDbHResult DB_S_TYPEINFOOVERRIDDEN;
    public static OleDbHResult DB_S_BOOKMARKSKIPPED;
    public static OleDbHResult DB_S_NONEXTROWSET;
    public static OleDbHResult DB_S_ENDOFROWSET;
    public static OleDbHResult DB_S_COMMANDREEXECUTED;
    public static OleDbHResult DB_S_BUFFERFULL;
    public static OleDbHResult DB_S_NORESULT;
    public static OleDbHResult DB_S_CANTRELEASE;
    public static OleDbHResult DB_S_GOALCHANGED;
    public static OleDbHResult DB_S_UNWANTEDOPERATION;
    public static OleDbHResult DB_S_DIALECTIGNORED;
    public static OleDbHResult DB_S_UNWANTEDPHASE;
    public static OleDbHResult DB_S_UNWANTEDREASON;
    public static OleDbHResult DB_S_ASYNCHRONOUS;
    public static OleDbHResult DB_S_COLUMNSCHANGED;
    public static OleDbHResult DB_S_ERRORSRETURNED;
    public static OleDbHResult DB_S_BADROWHANDLE;
    public static OleDbHResult DB_S_DELETEDROW;
    public static OleDbHResult DB_S_TOOMANYCHANGES;
    public static OleDbHResult DB_S_STOPLIMITREACHED;
    public static OleDbHResult DB_S_LOCKUPGRADED;
    public static OleDbHResult DB_S_PROPERTIESCHANGED;
    public static OleDbHResult DB_S_ERRORSOCCURRED;
    public static OleDbHResult DB_S_PARAMUNAVAILABLE;
    public static OleDbHResult DB_S_MULTIPLECHANGES;
    public static OleDbHResult DB_S_NOTSINGLETON;
    public static OleDbHResult DB_S_NOROWSPECIFICCOLUMNS;
    public static OleDbHResult XACT_E_FIRST;
    public static OleDbHResult XACT_E_LAST;
    public static OleDbHResult XACT_S_FIRST;
    public static OleDbHResult XACT_S_LAST;
    public static OleDbHResult XACT_E_ALREADYOTHERSINGLEPHASE;
    public static OleDbHResult XACT_E_CANTRETAIN;
    public static OleDbHResult XACT_E_COMMITFAILED;
    public static OleDbHResult XACT_E_COMMITPREVENTED;
    public static OleDbHResult XACT_E_HEURISTICABORT;
    public static OleDbHResult XACT_E_HEURISTICCOMMIT;
    public static OleDbHResult XACT_E_HEURISTICDAMAGE;
    public static OleDbHResult XACT_E_HEURISTICDANGER;
    public static OleDbHResult XACT_E_ISOLATIONLEVEL;
    public static OleDbHResult XACT_E_NOASYNC;
    public static OleDbHResult XACT_E_NOENLIST;
    public static OleDbHResult XACT_E_NOISORETAIN;
    public static OleDbHResult XACT_E_NORESOURCE;
    public static OleDbHResult XACT_E_NOTCURRENT;
    public static OleDbHResult XACT_E_NOTRANSACTION;
    public static OleDbHResult XACT_E_NOTSUPPORTED;
    public static OleDbHResult XACT_E_UNKNOWNRMGRID;
    public static OleDbHResult XACT_E_WRONGSTATE;
    public static OleDbHResult XACT_E_WRONGUOW;
    public static OleDbHResult XACT_E_XTIONEXISTS;
    public static OleDbHResult XACT_E_NOIMPORTOBJECT;
    public static OleDbHResult XACT_E_INVALIDCOOKIE;
    public static OleDbHResult XACT_E_INDOUBT;
    public static OleDbHResult XACT_E_NOTIMEOUT;
    public static OleDbHResult XACT_E_ALREADYINPROGRESS;
    public static OleDbHResult XACT_E_ABORTED;
    public static OleDbHResult XACT_E_LOGFULL;
    public static OleDbHResult XACT_E_TMNOTAVAILABLE;
    public static OleDbHResult XACT_E_CONNECTION_DOWN;
    public static OleDbHResult XACT_E_CONNECTION_DENIED;
    public static OleDbHResult XACT_E_REENLISTTIMEOUT;
    public static OleDbHResult XACT_E_TIP_CONNECT_FAILED;
    public static OleDbHResult XACT_E_TIP_PROTOCOL_ERROR;
    public static OleDbHResult XACT_E_TIP_PULL_FAILED;
    public static OleDbHResult XACT_E_DEST_TMNOTAVAILABLE;
    public static OleDbHResult XACT_E_CLERKNOTFOUND;
    public static OleDbHResult XACT_E_CLERKEXISTS;
    public static OleDbHResult XACT_E_RECOVERYINPROGRESS;
    public static OleDbHResult XACT_E_TRANSACTIONCLOSED;
    public static OleDbHResult XACT_E_INVALIDLSN;
    public static OleDbHResult XACT_E_REPLAYREQUEST;
    public static OleDbHResult XACT_S_ASYNC;
    public static OleDbHResult XACT_S_DEFECT;
    public static OleDbHResult XACT_S_REOLEDBNLY;
    public static OleDbHResult XACT_S_SOMENORETAIN;
    public static OleDbHResult XACT_S_OKINFORM;
    public static OleDbHResult XACT_S_MADECHANGESCONTENT;
    public static OleDbHResult XACT_S_MADECHANGESINFORM;
    public static OleDbHResult XACT_S_ALLNORETAIN;
    public static OleDbHResult XACT_S_ABORTING;
    public static OleDbHResult XACT_S_SINGLEPHASE;
    public static OleDbHResult STG_E_INVALIDFUNCTION;
    public static OleDbHResult STG_E_FILENOTFOUND;
    public static OleDbHResult STG_E_PATHNOTFOUND;
    public static OleDbHResult STG_E_TOOMANYOPENFILES;
    public static OleDbHResult STG_E_ACCESSDENIED;
    public static OleDbHResult STG_E_INVALIDHANDLE;
    public static OleDbHResult STG_E_INSUFFICIENTMEMORY;
    public static OleDbHResult STG_E_INVALIDPOINTER;
    public static OleDbHResult STG_E_NOMOREFILES;
    public static OleDbHResult STG_E_DISKISWRITEPROTECTED;
    public static OleDbHResult STG_E_SEEKERROR;
    public static OleDbHResult STG_E_WRITEFAULT;
    public static OleDbHResult STG_E_READFAULT;
    public static OleDbHResult STG_E_SHAREVIOLATION;
    public static OleDbHResult STG_E_LOCKVIOLATION;
    public static OleDbHResult STG_E_FILEALREADYEXISTS;
    public static OleDbHResult STG_E_INVALIDPARAMETER;
    public static OleDbHResult STG_E_MEDIUMFULL;
    public static OleDbHResult STG_E_PROPSETMISMATCHED;
    public static OleDbHResult STG_E_ABNORMALAPIEXIT;
    public static OleDbHResult STG_E_INVALIDHEADER;
    public static OleDbHResult STG_E_INVALIDNAME;
    public static OleDbHResult STG_E_UNKNOWN;
    public static OleDbHResult STG_E_UNIMPLEMENTEDFUNCTION;
    public static OleDbHResult STG_E_INVALIDFLAG;
    public static OleDbHResult STG_E_INUSE;
    public static OleDbHResult STG_E_NOTCURRENT;
    public static OleDbHResult STG_E_REVERTED;
    public static OleDbHResult STG_E_CANTSAVE;
    public static OleDbHResult STG_E_OLDFORMAT;
    public static OleDbHResult STG_E_OLDDLL;
    public static OleDbHResult STG_E_SHAREREQUIRED;
    public static OleDbHResult STG_E_NOTFILEBASEDSTORAGE;
    public static OleDbHResult STG_E_EXTANTMARSHALLINGS;
    public static OleDbHResult STG_E_DOCFILECORRUPT;
    public static OleDbHResult STG_E_BADBASEADDRESS;
    public static OleDbHResult STG_E_INCOMPLETE;
    public static OleDbHResult STG_E_TERMINATED;
    public static OleDbHResult STG_S_CONVERTED;
    public static OleDbHResult STG_S_BLOCK;
    public static OleDbHResult STG_S_RETRYNOW;
    public static OleDbHResult STG_S_MONITORING;
}
public class System.Data.OleDb.OleDbInfoMessageEventArgs : EventArgs {
    public int ErrorCode { get; }
    public OleDbErrorCollection Errors { get; }
    public string Message { get; }
    public string Source { get; }
    internal OleDbInfoMessageEventArgs(OleDbException exception);
    public int get_ErrorCode();
    public OleDbErrorCollection get_Errors();
    internal bool ShouldSerializeErrors();
    public string get_Message();
    public string get_Source();
    public virtual string ToString();
}
public class System.Data.OleDb.OleDbInfoMessageEventHandler : MulticastDelegate {
    public OleDbInfoMessageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OleDbInfoMessageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OleDbInfoMessageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Data.OleDb.OleDbLiteral : Enum {
    public int value__;
    public static OleDbLiteral Invalid;
    public static OleDbLiteral Binary_Literal;
    public static OleDbLiteral Catalog_Name;
    public static OleDbLiteral Catalog_Separator;
    public static OleDbLiteral Char_Literal;
    public static OleDbLiteral Column_Alias;
    public static OleDbLiteral Column_Name;
    public static OleDbLiteral Correlation_Name;
    public static OleDbLiteral Cursor_Name;
    public static OleDbLiteral Escape_Percent_Prefix;
    public static OleDbLiteral Escape_Underscore_Prefix;
    public static OleDbLiteral Index_Name;
    public static OleDbLiteral Like_Percent;
    public static OleDbLiteral Like_Underscore;
    public static OleDbLiteral Procedure_Name;
    public static OleDbLiteral Quote_Prefix;
    public static OleDbLiteral Schema_Name;
    public static OleDbLiteral Table_Name;
    public static OleDbLiteral Text_Command;
    public static OleDbLiteral User_Name;
    public static OleDbLiteral View_Name;
    public static OleDbLiteral Cube_Name;
    public static OleDbLiteral Dimension_Name;
    public static OleDbLiteral Hierarchy_Name;
    public static OleDbLiteral Level_Name;
    public static OleDbLiteral Member_Name;
    public static OleDbLiteral Property_Name;
    public static OleDbLiteral Schema_Separator;
    public static OleDbLiteral Quote_Suffix;
    public static OleDbLiteral Escape_Percent_Suffix;
    public static OleDbLiteral Escape_Underscore_Suffix;
}
public static class System.Data.OleDb.OleDbMetaDataCollectionNames : object {
    public static string Catalogs;
    public static string Collations;
    public static string Columns;
    public static string Indexes;
    public static string Procedures;
    public static string ProcedureColumns;
    public static string ProcedureParameters;
    public static string Tables;
    public static string Views;
    private static OleDbMetaDataCollectionNames();
}
public static class System.Data.OleDb.OleDbMetaDataColumnNames : object {
    public static string BooleanFalseLiteral;
    public static string BooleanTrueLiteral;
    public static string NativeDataType;
    public static string DateTimeDigits;
    private static OleDbMetaDataColumnNames();
}
internal class System.Data.OleDb.OleDbMetaDataFactory : DbMetaDataFactory {
    internal OleDbMetaDataFactory(Stream XMLStream, string serverVersion, string serverVersionNormalized, SchemaSupport[] schemaSupport);
    protected virtual DataTable PrepareCollection(string collectionName, String[] restrictions, DbConnection connection);
}
[TypeConverterAttribute("System.Data.OleDb.OleDbParameter/OleDbParameterConverter")]
public class System.Data.OleDb.OleDbParameter : DbParameter {
    internal int ChangeID { get; }
    public DbType DbType { get; public set; }
    [DbProviderSpecificTypePropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("OleDbParameter_OleDbType")]
public OleDbType OleDbType { get; public set; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DbParameter_ParameterName")]
public string ParameterName { get; public set; }
    [ResDescriptionAttribute("DbDataParameter_Precision")]
[DefaultValueAttribute("0")]
[ResCategoryAttribute("DataCategory_Data")]
public byte Precision { get; public set; }
    internal byte PrecisionInternal { get; internal set; }
    [DefaultValueAttribute("0")]
[ResDescriptionAttribute("DbDataParameter_Scale")]
[ResCategoryAttribute("DataCategory_Data")]
public byte Scale { get; public set; }
    internal byte ScaleInternal { get; internal set; }
    [RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DbParameter_Value")]
public object Value { get; public set; }
    [RefreshPropertiesAttribute("1")]
[ResDescriptionAttribute("DbParameter_Direction")]
[ResCategoryAttribute("DataCategory_Data")]
public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; public set; }
    internal int Offset { get; }
    [ResDescriptionAttribute("DbParameter_Size")]
[ResCategoryAttribute("DataCategory_Data")]
public int Size { get; public set; }
    [ResDescriptionAttribute("DbParameter_SourceColumn")]
[ResCategoryAttribute("DataCategory_Update")]
public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    [ResCategoryAttribute("DataCategory_Update")]
[ResDescriptionAttribute("DbParameter_SourceVersion")]
public DataRowVersion SourceVersion { get; public set; }
    public OleDbParameter(string name, object value);
    public OleDbParameter(string name, OleDbType dataType);
    public OleDbParameter(string name, OleDbType dataType, int size);
    public OleDbParameter(string name, OleDbType dataType, int size, string srcColumn);
    [EditorBrowsableAttribute("2")]
public OleDbParameter(string parameterName, OleDbType dbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string srcColumn, DataRowVersion srcVersion, object value);
    [EditorBrowsableAttribute("2")]
public OleDbParameter(string parameterName, OleDbType dbType, int size, ParameterDirection direction, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, bool sourceColumnNullMapping, object value);
    internal int get_ChangeID();
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public virtual void ResetDbType();
    public OleDbType get_OleDbType();
    public void set_OleDbType(OleDbType value);
    public void ResetOleDbType();
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    public sealed virtual byte get_Precision();
    public sealed virtual void set_Precision(byte value);
    internal byte get_PrecisionInternal();
    internal void set_PrecisionInternal(byte value);
    public sealed virtual byte get_Scale();
    public sealed virtual void set_Scale(byte value);
    internal byte get_ScaleInternal();
    internal void set_ScaleInternal(byte value);
    private sealed virtual override object System.ICloneable.Clone();
    internal bool BindParameter(int index, Bindings bindings);
    internal object GetCoercedValue();
    internal bool IsParameterComputed();
    internal void Prepare(OleDbCommand cmd);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    internal int get_Offset();
    public virtual int get_Size();
    public virtual void set_Size(int value);
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    internal void CopyTo(DbParameter destination);
    internal object CompareExchangeParent(object value, object comparand);
    internal void ResetParent();
    public virtual string ToString();
}
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBParametersEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ListBindableAttribute("False")]
[DefaultMemberAttribute("Item")]
public class System.Data.OleDb.OleDbParameterCollection : DbParameterCollection {
    internal int ChangeID { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public OleDbParameter Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public OleDbParameter Item { get; public set; }
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    private static OleDbParameterCollection();
    internal int get_ChangeID();
    public OleDbParameter get_Item(int index);
    public void set_Item(int index, OleDbParameter value);
    public OleDbParameter get_Item(string parameterName);
    public void set_Item(string parameterName, OleDbParameter value);
    public OleDbParameter Add(OleDbParameter value);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Add(String parameterName, Object value) has been deprecated.  Use AddWithValue(String parameterName, Object value).  http://go.microsoft.com/fwlink/?linkid=14202", "False")]
public OleDbParameter Add(string parameterName, object value);
    public OleDbParameter AddWithValue(string parameterName, object value);
    public OleDbParameter Add(string parameterName, OleDbType oleDbType);
    public OleDbParameter Add(string parameterName, OleDbType oleDbType, int size);
    public OleDbParameter Add(string parameterName, OleDbType oleDbType, int size, string sourceColumn);
    public void AddRange(OleDbParameter[] values);
    public virtual bool Contains(string value);
    public bool Contains(OleDbParameter value);
    public void CopyTo(OleDbParameter[] array, int index);
    public int IndexOf(OleDbParameter value);
    public void Insert(int index, OleDbParameter value);
    public void Remove(OleDbParameter value);
    public virtual int get_Count();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    [EditorBrowsableAttribute("1")]
public virtual int Add(object value);
    public virtual void AddRange(Array values);
    public virtual void Clear();
    public virtual bool Contains(object value);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    protected virtual DbParameter GetParameter(int index);
    protected virtual DbParameter GetParameter(string parameterName);
    public virtual int IndexOf(string parameterName);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string parameterName, DbParameter value);
}
public class System.Data.OleDb.OleDbPermission : DBDataPermission {
    [ObsoleteAttribute("Provider property has been deprecated.  Use the Add method.  http://go.microsoft.com/fwlink/?linkid=14202")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string Provider { get; public set; }
    public OleDbPermission(PermissionState state);
    [ObsoleteAttribute("OleDbPermission(PermissionState state, Boolean allowBlankPassword) has been deprecated.  Use the OleDbPermission(PermissionState.None) constructor.  http://go.microsoft.com/fwlink/?linkid=14202", "True")]
public OleDbPermission(PermissionState state, bool allowBlankPassword);
    internal OleDbPermission(OleDbPermissionAttribute permissionAttribute);
    internal OleDbPermission(OleDbConnectionString constr);
    public string get_Provider();
    public void set_Provider(string value);
    public virtual IPermission Copy();
}
[AttributeUsageAttribute("109")]
public class System.Data.OleDb.OleDbPermissionAttribute : DBDataPermissionAttribute {
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Provider property has been deprecated.  Use the Add method.  http://go.microsoft.com/fwlink/?linkid=14202")]
[BrowsableAttribute("False")]
public string Provider { get; public set; }
    public OleDbPermissionAttribute(SecurityAction action);
    public string get_Provider();
    public void set_Provider(string value);
    public virtual IPermission CreatePermission();
}
internal class System.Data.OleDb.OleDbPropertyInfo : object {
    public Guid _propertySet;
    public int _propertyID;
    public string _description;
    public string _lowercase;
    public Type _type;
    public int _flags;
    public int _vtype;
    public object _supportedValues;
    public object _defaultValue;
}
internal class System.Data.OleDb.OleDbPropertySetGuid : object {
    internal static Guid Column;
    internal static Guid DataSource;
    internal static Guid DataSourceInfo;
    internal static Guid DBInit;
    internal static Guid Index;
    internal static Guid PropertiesInError;
    internal static Guid Rowset;
    internal static Guid Session;
    internal static Guid Stream;
    internal static Guid Table;
    internal static Guid Trustee;
    internal static Guid View;
    internal static Guid DataSourceAll;
    internal static Guid DataSourceInfoAll;
    internal static Guid DBInitAll;
    internal static Guid ColumnAll;
    internal static Guid ConstraintAll;
    internal static Guid IndexAll;
    internal static Guid RowsetAll;
    internal static Guid SessionAll;
    internal static Guid StreamAll;
    internal static Guid TableAll;
    internal static Guid TrusteeAll;
    internal static Guid ViewAll;
    private static OleDbPropertySetGuid();
}
internal enum System.Data.OleDb.OleDbPropertyStatus : Enum {
    public int value__;
    public static OleDbPropertyStatus Ok;
    public static OleDbPropertyStatus NotSupported;
    public static OleDbPropertyStatus BadValue;
    public static OleDbPropertyStatus BadOption;
    public static OleDbPropertyStatus BadColumn;
    public static OleDbPropertyStatus NotAllSettable;
    public static OleDbPropertyStatus NotSettable;
    public static OleDbPropertyStatus NotSet;
    public static OleDbPropertyStatus Conflicting;
    public static OleDbPropertyStatus NotAvailable;
}
internal class System.Data.OleDb.OleDbReferenceCollection : DbReferenceCollection {
    internal static int Closing;
    internal static int Canceling;
    internal static int CommandTag;
    internal static int DataReaderTag;
    public virtual void Add(object value, int tag);
    protected virtual void NotifyItem(int message, int tag, object value);
    public virtual void Remove(object value);
}
public class System.Data.OleDb.OleDbRowUpdatedEventArgs : RowUpdatedEventArgs {
    public OleDbCommand Command { get; }
    public OleDbRowUpdatedEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public OleDbCommand get_Command();
}
public class System.Data.OleDb.OleDbRowUpdatedEventHandler : MulticastDelegate {
    public OleDbRowUpdatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OleDbRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OleDbRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.OleDb.OleDbRowUpdatingEventArgs : RowUpdatingEventArgs {
    public OleDbCommand Command { get; public set; }
    protected IDbCommand BaseCommand { get; protected set; }
    public OleDbRowUpdatingEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public OleDbCommand get_Command();
    public void set_Command(OleDbCommand value);
    protected virtual IDbCommand get_BaseCommand();
    protected virtual void set_BaseCommand(IDbCommand value);
}
public class System.Data.OleDb.OleDbRowUpdatingEventHandler : MulticastDelegate {
    public OleDbRowUpdatingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OleDbRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OleDbRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.OleDb.OleDbSchemaGuid : object {
    public static Guid Tables_Info;
    public static Guid Trustee;
    public static Guid Assertions;
    public static Guid Catalogs;
    public static Guid Character_Sets;
    public static Guid Collations;
    public static Guid Columns;
    public static Guid Check_Constraints;
    public static Guid Constraint_Column_Usage;
    public static Guid Constraint_Table_Usage;
    public static Guid Key_Column_Usage;
    public static Guid Referential_Constraints;
    public static Guid Table_Constraints;
    public static Guid Column_Domain_Usage;
    public static Guid Indexes;
    public static Guid Column_Privileges;
    public static Guid Table_Privileges;
    public static Guid Usage_Privileges;
    public static Guid Procedures;
    public static Guid Schemata;
    public static Guid Sql_Languages;
    public static Guid Statistics;
    public static Guid Tables;
    public static Guid Translations;
    public static Guid Provider_Types;
    public static Guid Views;
    public static Guid View_Column_Usage;
    public static Guid View_Table_Usage;
    public static Guid Procedure_Parameters;
    public static Guid Foreign_Keys;
    public static Guid Primary_Keys;
    public static Guid Procedure_Columns;
    public static Guid Table_Statistics;
    public static Guid Check_Constraints_By_Table;
    public static Guid SchemaGuids;
    public static Guid DbInfoKeywords;
    public static Guid DbInfoLiterals;
    private static OleDbSchemaGuid();
    internal static string GetTextFromValue(Guid guid);
}
internal class System.Data.OleDb.OleDbServicesWrapper : WrappedIUnknown {
    internal OleDbServicesWrapper(object unknown);
    internal void GetDataSource(OleDbConnectionString constr, DataSourceWrapper& datasrcWrapper);
}
public class System.Data.OleDb.OleDbTransaction : DbTransaction {
    internal OleDbConnection _parentConnection;
    internal int _objectID;
    public OleDbConnection Connection { get; }
    protected DbConnection DbConnection { get; }
    public IsolationLevel IsolationLevel { get; }
    internal int ObjectID { get; }
    internal OleDbTransaction Parent { get; }
    internal OleDbTransaction(OleDbConnection connection, OleDbTransaction transaction, IsolationLevel isolevel);
    public OleDbConnection get_Connection();
    protected virtual DbConnection get_DbConnection();
    public virtual IsolationLevel get_IsolationLevel();
    internal int get_ObjectID();
    internal OleDbTransaction get_Parent();
    public OleDbTransaction Begin(IsolationLevel isolevel);
    public OleDbTransaction Begin();
    internal void BeginInternal(ITransactionLocal transaction);
    public virtual void Commit();
    protected virtual void Dispose(bool disposing);
    public virtual void Rollback();
    internal OleDbHResult RollbackInternal(bool exceptionHandling);
    internal static OleDbTransaction TransactionLast(OleDbTransaction head);
    internal static OleDbTransaction TransactionUpdate(OleDbTransaction transaction);
}
public enum System.Data.OleDb.OleDbType : Enum {
    public int value__;
    public static OleDbType BigInt;
    public static OleDbType Binary;
    public static OleDbType Boolean;
    public static OleDbType BSTR;
    public static OleDbType Char;
    public static OleDbType Currency;
    public static OleDbType Date;
    public static OleDbType DBDate;
    public static OleDbType DBTime;
    public static OleDbType DBTimeStamp;
    public static OleDbType Decimal;
    public static OleDbType Double;
    public static OleDbType Empty;
    public static OleDbType Error;
    public static OleDbType Filetime;
    public static OleDbType Guid;
    public static OleDbType IDispatch;
    public static OleDbType Integer;
    public static OleDbType IUnknown;
    public static OleDbType LongVarBinary;
    public static OleDbType LongVarChar;
    public static OleDbType LongVarWChar;
    public static OleDbType Numeric;
    public static OleDbType PropVariant;
    public static OleDbType Single;
    public static OleDbType SmallInt;
    public static OleDbType TinyInt;
    public static OleDbType UnsignedBigInt;
    public static OleDbType UnsignedInt;
    public static OleDbType UnsignedSmallInt;
    public static OleDbType UnsignedTinyInt;
    public static OleDbType VarBinary;
    public static OleDbType VarChar;
    public static OleDbType Variant;
    public static OleDbType VarNumeric;
    public static OleDbType VarWChar;
    public static OleDbType WChar;
}
internal class System.Data.OleDb.PropertyIDSet : DbBuffer {
    internal int Count { get; }
    internal PropertyIDSet(Guid propertySet, int propertyID);
    internal PropertyIDSet(Guid[] propertySets);
    private static PropertyIDSet();
    internal int get_Count();
}
internal class System.Data.OleDb.PropertyInfoSet : SafeHandle {
    public bool IsInvalid { get; }
    internal PropertyInfoSet(IDBProperties idbProperties, PropertyIDSet propIDSet);
    public virtual bool get_IsInvalid();
    internal Dictionary`2<string, OleDbPropertyInfo> GetValues();
    protected virtual bool ReleaseHandle();
    internal static Type FromVtType(int vartype);
}
internal class System.Data.OleDb.RowBinding : DbBuffer {
    internal static RowBinding CreateBuffer(int bindingCount, int databuffersize, bool needToReset);
    internal void StartDataBlock();
    internal int BindingCount();
    internal IntPtr DangerousGetAccessorHandle();
    internal IntPtr DangerousGetDataPtr();
    internal IntPtr DangerousGetDataPtr(int valueOffset);
    internal OleDbHResult CreateAccessor(IAccessor iaccessor, int flags, ColumnBinding[] bindings);
    internal ColumnBinding[] SetBindings(OleDbDataReader dataReader, Bindings bindings, int indexStart, int indexForAccessor, OleDbParameter[] parameters, tagDBBINDING[] dbbindings, bool ifIRowsetElseIRow);
    internal static int AlignDataSize(int value);
    internal object GetVariantValue(int offset);
    internal void SetVariantValue(int offset, object value);
    internal void SetBstrValue(int offset, string value);
    internal void SetByRefValue(int offset, IntPtr pinnedValue);
    internal void CloseFromConnection();
    internal void Dispose();
    internal void ResetValues();
    [ReliabilityContractAttribute("3", "2")]
internal IntPtr InterlockedExchangePointer(int offset);
    protected virtual bool ReleaseHandle();
}
internal class System.Data.OleDb.RowHandleBuffer : DbBuffer {
    internal RowHandleBuffer(IntPtr rowHandleFetchCount);
    internal IntPtr GetRowHandle(int index);
}
internal class System.Data.OleDb.SchemaSupport : ValueType {
    internal Guid _schemaRowset;
    internal int _restrictions;
}
internal class System.Data.OleDb.SessionWrapper : WrappedIUnknown {
    internal void QueryInterfaceIDBCreateCommand(OleDbConnectionString constr);
    internal void VerifyIDBCreateCommand(OleDbConnectionString constr);
    internal OleDbHResult CreateCommand(Object& icommandText);
    internal IDBSchemaRowsetWrapper IDBSchemaRowset(OleDbConnectionInternal connection);
    internal IOpenRowsetWrapper IOpenRowset(OleDbConnectionInternal connection);
    internal ITransactionJoinWrapper ITransactionJoin(OleDbConnectionInternal connection);
}
internal class System.Data.OleDb.StringMemHandle : DbBuffer {
    internal StringMemHandle(string value);
}
internal class System.Data.OleDb.tagDBBINDING : object {
    internal IntPtr iOrdinal;
    internal IntPtr obValue;
    internal IntPtr obLength;
    internal IntPtr obStatus;
    internal IntPtr pTypeInfo;
    internal IntPtr pObject;
    internal IntPtr pBindExt;
    internal int dwPart;
    internal int dwMemOwner;
    internal int eParamIO;
    internal IntPtr cbMaxLen;
    internal int dwFlags;
    internal short wType;
    internal byte bPrecision;
    internal byte bScale;
}
internal class System.Data.OleDb.tagDBCOLUMNACCESS : ValueType {
    internal IntPtr pData;
    internal tagDBIDX columnid;
    internal IntPtr cbDataLen;
    internal int dwStatus;
    internal IntPtr cbMaxLen;
    internal IntPtr dwReserved;
    internal short wType;
    internal byte bPrecision;
    internal byte bScale;
}
internal class System.Data.OleDb.tagDBCOLUMNINFO : object {
    internal string pwszName;
    internal IntPtr pTypeInfo;
    internal IntPtr iOrdinal;
    internal int dwFlags;
    internal IntPtr ulColumnSize;
    internal short wType;
    internal byte bPrecision;
    internal byte bScale;
    internal tagDBIDX columnid;
}
internal class System.Data.OleDb.tagDBID : object {
    internal Guid uGuid;
    internal int eKind;
    internal IntPtr ulPropid;
}
internal class System.Data.OleDb.tagDBIDX : ValueType {
    internal Guid uGuid;
    internal int eKind;
    internal IntPtr ulPropid;
}
internal class System.Data.OleDb.tagDBLITERALINFO : object {
    internal string pwszLiteralValue;
    internal string pwszInvalidChars;
    internal string pwszInvalidStartingChars;
    internal int it;
    internal int fSupported;
    internal int cchMaxLen;
}
internal class System.Data.OleDb.tagDBPARAMBINDINFO : ValueType {
    internal IntPtr pwszDataSourceType;
    internal IntPtr pwszName;
    internal IntPtr ulParamSize;
    internal int dwFlags;
    internal byte bPrecision;
    internal byte bScale;
}
internal class System.Data.OleDb.tagDBPARAMS : object {
    internal IntPtr pData;
    internal int cParamSets;
    internal IntPtr hAccessor;
}
internal class System.Data.OleDb.tagDBPROP : object {
    internal int dwPropertyID;
    internal int dwOptions;
    internal OleDbPropertyStatus dwStatus;
    internal tagDBIDX columnid;
    internal object vValue;
    internal tagDBPROP(int propertyID, bool required, object value);
}
internal class System.Data.OleDb.tagDBPROPIDSET : ValueType {
    internal IntPtr rgPropertyIDs;
    internal int cPropertyIDs;
    internal Guid guidPropertySet;
}
internal class System.Data.OleDb.tagDBPROPINFO : object {
    internal string pwszDescription;
    internal int dwPropertyID;
    internal int dwFlags;
    internal short vtType;
    internal object vValue;
}
internal class System.Data.OleDb.tagDBPROPINFOSET : object {
    internal IntPtr rgPropertyInfos;
    internal int cPropertyInfos;
    internal Guid guidPropertySet;
}
internal class System.Data.OleDb.tagDBPROPSET : object {
    internal IntPtr rgProperties;
    internal int cProperties;
    internal Guid guidPropertySet;
    internal tagDBPROPSET(int propertyCount, Guid propertySet);
}
public class System.Data.OperationAbortedException : SystemException {
    private OperationAbortedException(string message, Exception innerException);
    private OperationAbortedException(SerializationInfo si, StreamingContext sc);
    internal static OperationAbortedException Aborted(Exception inner);
}
internal class System.Data.OperatorInfo : object {
    internal Nodes type;
    internal int op;
    internal int priority;
    internal OperatorInfo(Nodes type, int op, int pri);
}
internal class System.Data.Operators : object {
    internal static int Noop;
    internal static int Negative;
    internal static int UnaryPlus;
    internal static int Not;
    internal static int BetweenAnd;
    internal static int In;
    internal static int Between;
    internal static int EqualTo;
    internal static int GreaterThen;
    internal static int LessThen;
    internal static int GreaterOrEqual;
    internal static int LessOrEqual;
    internal static int NotEqual;
    internal static int Is;
    internal static int Like;
    internal static int Plus;
    internal static int Minus;
    internal static int Multiply;
    internal static int Divide;
    internal static int Modulo;
    internal static int BitwiseAnd;
    internal static int BitwiseOr;
    internal static int BitwiseXor;
    internal static int BitwiseNot;
    internal static int And;
    internal static int Or;
    internal static int Proc;
    internal static int Iff;
    internal static int Qual;
    internal static int Dot;
    internal static int Null;
    internal static int True;
    internal static int False;
    internal static int Date;
    internal static int GenUniqueId;
    internal static int GenGUID;
    internal static int GUID;
    internal static int IsNot;
    internal static int priStart;
    internal static int priSubstr;
    internal static int priParen;
    internal static int priLow;
    internal static int priImp;
    internal static int priEqv;
    internal static int priXor;
    internal static int priOr;
    internal static int priAnd;
    internal static int priNot;
    internal static int priIs;
    internal static int priBetweenInLike;
    internal static int priBetweenAnd;
    internal static int priRelOp;
    internal static int priConcat;
    internal static int priContains;
    internal static int priPlusMinus;
    internal static int priMod;
    internal static int priIDiv;
    internal static int priMulDiv;
    internal static int priNeg;
    internal static int priExp;
    internal static int priProc;
    internal static int priDot;
    internal static int priMax;
    private static Operators();
    internal static bool IsArithmetical(int op);
    internal static bool IsLogical(int op);
    internal static bool IsRelational(int op);
    internal static int Priority(int op);
    internal static string ToString(int op);
}
public enum System.Data.ParameterDirection : Enum {
    public int value__;
    public static ParameterDirection Input;
    public static ParameterDirection Output;
    public static ParameterDirection InputOutput;
    public static ParameterDirection ReturnValue;
}
internal class System.Data.ParentForeignKeyConstraintEnumerator : ForeignKeyConstraintEnumerator {
    public ParentForeignKeyConstraintEnumerator(DataSet dataSet, DataTable inTable);
    protected virtual bool IsValidCandidate(Constraint constraint);
}
internal class System.Data.PrimaryKeyTypeConverter : ReferenceConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[ObsoleteAttribute("PropertyAttributes has been deprecated.  http://go.microsoft.com/fwlink/?linkid=14202")]
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum System.Data.PropertyAttributes : Enum {
    public int value__;
    public static PropertyAttributes NotSupported;
    public static PropertyAttributes Required;
    public static PropertyAttributes Optional;
    public static PropertyAttributes Read;
    public static PropertyAttributes Write;
}
public class System.Data.PropertyCollection : Hashtable {
    protected PropertyCollection(SerializationInfo info, StreamingContext context);
    public virtual object Clone();
}
internal abstract class System.Data.ProviderBase.DataReaderContainer : object {
    protected IDataReader _dataReader;
    protected int _fieldCount;
    internal int FieldCount { get; }
    internal bool ReturnProviderSpecificTypes { get; }
    protected int VisibleFieldCount { get; }
    protected DataReaderContainer(IDataReader dataReader);
    internal static DataReaderContainer Create(IDataReader dataReader, bool returnProviderSpecificTypes);
    internal int get_FieldCount();
    internal abstract virtual bool get_ReturnProviderSpecificTypes();
    protected abstract virtual int get_VisibleFieldCount();
    internal abstract virtual Type GetFieldType(int ordinal);
    internal abstract virtual object GetValue(int ordinal);
    internal abstract virtual int GetValues(Object[] values);
    internal string GetName(int ordinal);
    internal DataTable GetSchemaTable();
    internal bool NextResult();
    internal bool Read();
}
internal abstract class System.Data.ProviderBase.DbBuffer : SafeHandle {
    internal static int LMEM_FIXED;
    internal static int LMEM_MOVEABLE;
    internal static int LMEM_ZEROINIT;
    public bool IsInvalid { get; }
    internal int Length { get; }
    protected DbBuffer(int initialSize);
    protected DbBuffer(IntPtr invalidHandleValue, bool ownsHandle);
    public virtual bool get_IsInvalid();
    internal int get_Length();
    internal string PtrToStringUni(int offset);
    internal string PtrToStringUni(int offset, int length);
    internal byte ReadByte(int offset);
    internal Byte[] ReadBytes(int offset, int length);
    internal Byte[] ReadBytes(int offset, Byte[] destination, int startIndex, int length);
    internal char ReadChar(int offset);
    internal Char[] ReadChars(int offset, Char[] destination, int startIndex, int length);
    internal double ReadDouble(int offset);
    internal short ReadInt16(int offset);
    internal void ReadInt16Array(int offset, Int16[] destination, int startIndex, int length);
    internal int ReadInt32(int offset);
    internal void ReadInt32Array(int offset, Int32[] destination, int startIndex, int length);
    internal long ReadInt64(int offset);
    internal IntPtr ReadIntPtr(int offset);
    internal float ReadSingle(int offset);
    protected virtual bool ReleaseHandle();
    internal void WriteByte(int offset, byte value);
    internal void WriteBytes(int offset, Byte[] source, int startIndex, int length);
    internal void WriteCharArray(int offset, Char[] source, int startIndex, int length);
    internal void WriteDouble(int offset, double value);
    internal void WriteInt16(int offset, short value);
    internal void WriteInt16Array(int offset, Int16[] source, int startIndex, int length);
    internal void WriteInt32(int offset, int value);
    internal void WriteInt32Array(int offset, Int32[] source, int startIndex, int length);
    internal void WriteInt64(int offset, long value);
    internal void WriteIntPtr(int offset, IntPtr value);
    internal void WriteSingle(int offset, float value);
    internal void ZeroMemory();
    internal Guid ReadGuid(int offset);
    internal void WriteGuid(int offset, Guid value);
    internal DateTime ReadDate(int offset);
    internal void WriteDate(int offset, DateTime value);
    internal TimeSpan ReadTime(int offset);
    internal void WriteTime(int offset, TimeSpan value);
    internal DateTime ReadDateTime(int offset);
    internal void WriteDateTime(int offset, DateTime value);
    internal decimal ReadNumeric(int offset);
    internal void WriteNumeric(int offset, decimal value, byte precision);
    [ConditionalAttribute("DEBUG")]
protected void ValidateCheck(int offset, int count);
    protected void Validate(int offset, int count);
}
internal abstract class System.Data.ProviderBase.DbConnectionBusy : DbConnectionClosed {
    protected DbConnectionBusy(ConnectionState state);
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal abstract class System.Data.ProviderBase.DbConnectionClosed : DbConnectionInternal {
    public string ServerVersion { get; }
    protected DbConnectionClosed(ConnectionState state, bool hidePassword, bool allowSetConnectionString);
    public virtual string get_ServerVersion();
    protected virtual void Activate(Transaction transaction);
    public virtual DbTransaction BeginTransaction(IsolationLevel il);
    public virtual void ChangeDatabase(string database);
    internal virtual void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory);
    protected virtual void Deactivate();
    public virtual void EnlistTransaction(Transaction transaction);
    protected internal virtual DataTable GetSchema(DbConnectionFactory factory, DbConnectionPoolGroup poolGroup, DbConnection outerConnection, string collectionName, String[] restrictions);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal class System.Data.ProviderBase.DbConnectionClosedBusy : DbConnectionBusy {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedBusy();
}
internal class System.Data.ProviderBase.DbConnectionClosedConnecting : DbConnectionBusy {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedConnecting();
    internal virtual void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory);
    internal virtual bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal class System.Data.ProviderBase.DbConnectionClosedNeverOpened : DbConnectionClosed {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedNeverOpened();
}
internal class System.Data.ProviderBase.DbConnectionClosedPreviouslyOpened : DbConnectionClosed {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedPreviouslyOpened();
    internal virtual bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal abstract class System.Data.ProviderBase.DbConnectionFactory : object {
    internal int _objectID;
    internal DbConnectionPoolCounters PerformanceCounters { get; }
    public DbProviderFactory ProviderFactory { get; }
    internal int ObjectID { get; }
    protected DbConnectionFactory(DbConnectionPoolCounters performanceCounters);
    private static DbConnectionFactory();
    internal DbConnectionPoolCounters get_PerformanceCounters();
    public abstract virtual DbProviderFactory get_ProviderFactory();
    internal int get_ObjectID();
    public void ClearAllPools();
    public void ClearPool(DbConnection connection);
    public void ClearPool(DbConnectionPoolKey key);
    internal virtual DbConnectionPoolProviderInfo CreateConnectionPoolProviderInfo(DbConnectionOptions connectionOptions);
    protected virtual DbMetaDataFactory CreateMetaDataFactory(DbConnectionInternal internalConnection, Boolean& cacheMetaDataFactory);
    internal DbConnectionInternal CreateNonPooledConnection(DbConnection owningConnection, DbConnectionPoolGroup poolGroup, DbConnectionOptions userOptions);
    internal DbConnectionInternal CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions);
    internal virtual DbConnectionPoolGroupProviderInfo CreateConnectionPoolGroupProviderInfo(DbConnectionOptions connectionOptions);
    protected DbConnectionOptions FindConnectionOptions(DbConnectionPoolKey key);
    internal bool TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection);
    internal DbConnectionPoolGroup GetConnectionPoolGroup(DbConnectionPoolKey key, DbConnectionPoolGroupOptions poolOptions, DbConnectionOptions& userConnectionOptions);
    internal DbMetaDataFactory GetMetaDataFactory(DbConnectionPoolGroup connectionPoolGroup, DbConnectionInternal internalConnection);
    internal void QueuePoolForRelease(DbConnectionPool pool, bool clearing);
    internal void QueuePoolGroupForRelease(DbConnectionPoolGroup poolGroup);
    protected virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions);
    protected abstract virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection);
    protected abstract virtual DbConnectionOptions CreateConnectionOptions(string connectionString, DbConnectionOptions previous);
    protected abstract virtual DbConnectionPoolGroupOptions CreateConnectionPoolGroupOptions(DbConnectionOptions options);
    internal abstract virtual DbConnectionPoolGroup GetConnectionPoolGroup(DbConnection connection);
    internal abstract virtual DbConnectionInternal GetInnerConnection(DbConnection connection);
    protected abstract virtual int GetObjectId(DbConnection connection);
    internal abstract virtual void PermissionDemand(DbConnection outerConnection);
    internal abstract virtual void SetConnectionPoolGroup(DbConnection outerConnection, DbConnectionPoolGroup poolGroup);
    internal abstract virtual void SetInnerConnectionEvent(DbConnection owningObject, DbConnectionInternal to);
    internal abstract virtual bool SetInnerConnectionFrom(DbConnection owningObject, DbConnectionInternal to, DbConnectionInternal from);
    internal abstract virtual void SetInnerConnectionTo(DbConnection owningObject, DbConnectionInternal to);
}
internal abstract class System.Data.ProviderBase.DbConnectionInternal : object {
    internal int _objectID;
    internal static StateChangeEventArgs StateChangeClosed;
    internal static StateChangeEventArgs StateChangeOpen;
    internal bool AllowSetConnectionString { get; }
    internal bool CanBePooled { get; }
    protected internal Transaction EnlistedTransaction { get; protected internal set; }
    protected bool EnlistedTransactionDisposed { get; }
    internal bool IsTxRootWaitingForTxEnd { get; }
    protected bool UnbindOnTransactionCompletion { get; }
    protected internal bool IsNonPoolableTransactionRoot { get; }
    internal bool IsTransactionRoot { get; }
    protected internal bool IsConnectionDoomed { get; }
    internal bool IsEmancipated { get; }
    internal bool IsInPool { get; }
    internal int ObjectID { get; }
    protected internal object Owner { get; }
    internal DbConnectionPool Pool { get; }
    protected DbConnectionPoolCounters PerformanceCounters { get; }
    protected bool ReadyToPrepareTransaction { get; }
    protected internal DbReferenceCollection ReferenceCollection { get; }
    public string ServerVersion { get; }
    public string ServerVersionNormalized { get; }
    public bool ShouldHidePassword { get; }
    public ConnectionState State { get; }
    internal DbConnectionInternal(ConnectionState state, bool hidePassword, bool allowSetConnectionString);
    private static DbConnectionInternal();
    internal bool get_AllowSetConnectionString();
    internal bool get_CanBePooled();
    protected internal Transaction get_EnlistedTransaction();
    protected internal void set_EnlistedTransaction(Transaction value);
    protected bool get_EnlistedTransactionDisposed();
    internal bool get_IsTxRootWaitingForTxEnd();
    protected virtual bool get_UnbindOnTransactionCompletion();
    protected internal virtual bool get_IsNonPoolableTransactionRoot();
    internal virtual bool get_IsTransactionRoot();
    protected internal bool get_IsConnectionDoomed();
    internal bool get_IsEmancipated();
    internal bool get_IsInPool();
    internal int get_ObjectID();
    protected internal object get_Owner();
    internal DbConnectionPool get_Pool();
    protected DbConnectionPoolCounters get_PerformanceCounters();
    protected virtual bool get_ReadyToPrepareTransaction();
    protected internal DbReferenceCollection get_ReferenceCollection();
    public abstract virtual string get_ServerVersion();
    public virtual string get_ServerVersionNormalized();
    public bool get_ShouldHidePassword();
    public ConnectionState get_State();
    protected abstract virtual void Activate(Transaction transaction);
    internal void ActivateConnection(Transaction transaction);
    internal void AddWeakReference(object value, int tag);
    public abstract virtual DbTransaction BeginTransaction(IsolationLevel il);
    public virtual void ChangeDatabase(string value);
    internal virtual void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory);
    internal virtual void PrepareForReplaceConnection();
    protected virtual void PrepareForCloseConnection();
    protected virtual object ObtainAdditionalLocksForClose();
    protected virtual void ReleaseAdditionalLocksForClose(object lockToken);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    protected abstract virtual void Deactivate();
    internal void DeactivateConnection();
    internal virtual void DelegatedTransactionEnded();
    public virtual void Dispose();
    protected internal void DoNotPoolThisConnection();
    [ReliabilityContractAttribute("3", "2")]
protected internal void DoomThisConnection();
    protected internal void UnDoomThisConnection();
    public abstract virtual void EnlistTransaction(Transaction transaction);
    protected internal virtual DataTable GetSchema(DbConnectionFactory factory, DbConnectionPoolGroup poolGroup, DbConnection outerConnection, string collectionName, String[] restrictions);
    internal void MakeNonPooledObject(object owningObject, DbConnectionPoolCounters performanceCounters);
    internal void MakePooledConnection(DbConnectionPool connectionPool);
    internal void NotifyWeakReference(int message);
    internal virtual void OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory);
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    internal virtual bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    protected bool TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    internal void PrePush(object expectedOwner);
    internal void PostPop(object newOwner);
    internal void RemoveWeakReference(object value);
    protected virtual void CleanupTransactionOnCompletion(Transaction transaction);
    internal void DetachCurrentTransactionIfEnded();
    internal void DetachTransaction(Transaction transaction, bool isExplicitlyReleasing);
    internal void CleanupConnectionOnTransactionCompletion(Transaction transaction);
    internal void SetInStasis();
    internal virtual bool IsConnectionAlive(bool throwOnException);
}
internal class System.Data.ProviderBase.DbConnectionOpenBusy : DbConnectionBusy {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionOpenBusy();
}
internal class System.Data.ProviderBase.DbConnectionPool : object {
    internal static ApiGroup PoolerTracePoints;
    internal int _objectID;
    internal int Count { get; }
    internal DbConnectionFactory ConnectionFactory { get; }
    internal bool ErrorOccurred { get; }
    internal TimeSpan LoadBalanceTimeout { get; }
    internal DbConnectionPoolIdentity Identity { get; }
    internal bool IsRunning { get; }
    internal int ObjectID { get; }
    internal DbConnectionPoolCounters PerformanceCounters { get; }
    internal DbConnectionPoolGroup PoolGroup { get; }
    internal DbConnectionPoolGroupOptions PoolGroupOptions { get; }
    internal DbConnectionPoolProviderInfo ProviderInfo { get; }
    internal ConcurrentDictionary`2<DbConnectionPoolAuthenticationContextKey, DbConnectionPoolAuthenticationContext> AuthenticationContexts { get; }
    internal bool UseLoadBalancing { get; }
    internal DbConnectionPool(DbConnectionFactory connectionFactory, DbConnectionPoolGroup connectionPoolGroup, DbConnectionPoolIdentity identity, DbConnectionPoolProviderInfo connectionPoolProviderInfo);
    private static DbConnectionPool();
    internal int get_Count();
    internal DbConnectionFactory get_ConnectionFactory();
    internal bool get_ErrorOccurred();
    internal TimeSpan get_LoadBalanceTimeout();
    internal DbConnectionPoolIdentity get_Identity();
    internal bool get_IsRunning();
    internal int get_ObjectID();
    internal DbConnectionPoolCounters get_PerformanceCounters();
    internal DbConnectionPoolGroup get_PoolGroup();
    internal DbConnectionPoolGroupOptions get_PoolGroupOptions();
    internal DbConnectionPoolProviderInfo get_ProviderInfo();
    internal ConcurrentDictionary`2<DbConnectionPoolAuthenticationContextKey, DbConnectionPoolAuthenticationContext> get_AuthenticationContexts();
    internal bool get_UseLoadBalancing();
    internal void Clear();
    internal void DestroyObject(DbConnectionInternal obj);
    internal bool TryGetConnection(DbConnection owningObject, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions, DbConnectionInternal& connection);
    internal DbConnectionInternal ReplaceConnection(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection);
    internal void PutNewObject(DbConnectionInternal obj);
    internal void PutObject(DbConnectionInternal obj, object owningObject);
    internal void PutObjectFromTransactedPool(DbConnectionInternal obj);
    internal void Startup();
    internal void Shutdown();
    internal void TransactionEnded(Transaction transaction, DbConnectionInternal transactedObject);
}
internal class System.Data.ProviderBase.DbConnectionPoolAuthenticationContext : object {
    internal Byte[] AccessToken { get; }
    internal DateTime ExpirationTime { get; }
    internal DbConnectionPoolAuthenticationContext(Byte[] accessToken, DateTime expirationTime);
    internal static DbConnectionPoolAuthenticationContext ChooseAuthenticationContextToUpdate(DbConnectionPoolAuthenticationContext context1, DbConnectionPoolAuthenticationContext context2);
    internal Byte[] get_AccessToken();
    internal DateTime get_ExpirationTime();
    internal bool LockToUpdate();
    [ReliabilityContractAttribute("3", "2")]
internal void ReleaseLockToUpdate();
}
internal class System.Data.ProviderBase.DbConnectionPoolAuthenticationContextKey : object {
    internal string StsAuthority { get; }
    internal string ServicePrincipalName { get; }
    internal DbConnectionPoolAuthenticationContextKey(string stsAuthority, string servicePrincipalName);
    internal string get_StsAuthority();
    internal string get_ServicePrincipalName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal abstract class System.Data.ProviderBase.DbConnectionPoolCounters : object {
    internal Counter HardConnectsPerSecond;
    internal Counter HardDisconnectsPerSecond;
    internal Counter SoftConnectsPerSecond;
    internal Counter SoftDisconnectsPerSecond;
    internal Counter NumberOfNonPooledConnections;
    internal Counter NumberOfPooledConnections;
    internal Counter NumberOfActiveConnectionPoolGroups;
    internal Counter NumberOfInactiveConnectionPoolGroups;
    internal Counter NumberOfActiveConnectionPools;
    internal Counter NumberOfInactiveConnectionPools;
    internal Counter NumberOfActiveConnections;
    internal Counter NumberOfFreeConnections;
    internal Counter NumberOfStasisConnections;
    internal Counter NumberOfReclaimedConnections;
    protected DbConnectionPoolCounters(string categoryName, string categoryHelp);
    [ReliabilityContractAttribute("3", "1")]
public void Dispose();
}
internal class System.Data.ProviderBase.DbConnectionPoolCountersNoCounters : DbConnectionPoolCounters {
    public static DbConnectionPoolCountersNoCounters SingletonInstance;
    private static DbConnectionPoolCountersNoCounters();
}
internal class System.Data.ProviderBase.DbConnectionPoolGroup : object {
    internal int _objectID;
    internal DbConnectionOptions ConnectionOptions { get; }
    internal DbConnectionPoolKey PoolKey { get; }
    internal DbConnectionPoolGroupProviderInfo ProviderInfo { get; internal set; }
    internal bool IsDisabled { get; }
    internal int ObjectID { get; }
    internal DbConnectionPoolGroupOptions PoolGroupOptions { get; }
    internal DbMetaDataFactory MetaDataFactory { get; internal set; }
    internal DbConnectionPoolGroup(DbConnectionOptions connectionOptions, DbConnectionPoolKey key, DbConnectionPoolGroupOptions poolGroupOptions);
    internal DbConnectionOptions get_ConnectionOptions();
    internal DbConnectionPoolKey get_PoolKey();
    internal DbConnectionPoolGroupProviderInfo get_ProviderInfo();
    internal void set_ProviderInfo(DbConnectionPoolGroupProviderInfo value);
    internal bool get_IsDisabled();
    internal int get_ObjectID();
    internal DbConnectionPoolGroupOptions get_PoolGroupOptions();
    internal DbMetaDataFactory get_MetaDataFactory();
    internal void set_MetaDataFactory(DbMetaDataFactory value);
    internal int Clear();
    internal DbConnectionPool GetConnectionPool(DbConnectionFactory connectionFactory);
    internal bool Prune();
}
internal class System.Data.ProviderBase.DbConnectionPoolGroupOptions : object {
    public int CreationTimeout { get; }
    public bool HasTransactionAffinity { get; }
    public TimeSpan LoadBalanceTimeout { get; }
    public int MaxPoolSize { get; }
    public int MinPoolSize { get; }
    public bool PoolByIdentity { get; }
    public bool UseLoadBalancing { get; }
    public DbConnectionPoolGroupOptions(bool poolByIdentity, int minPoolSize, int maxPoolSize, int creationTimeout, int loadBalanceTimeout, bool hasTransactionAffinity);
    public int get_CreationTimeout();
    public bool get_HasTransactionAffinity();
    public TimeSpan get_LoadBalanceTimeout();
    public int get_MaxPoolSize();
    public int get_MinPoolSize();
    public bool get_PoolByIdentity();
    public bool get_UseLoadBalancing();
}
internal class System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo : object {
    internal DbConnectionPoolGroup PoolGroup { get; internal set; }
    internal DbConnectionPoolGroup get_PoolGroup();
    internal void set_PoolGroup(DbConnectionPoolGroup value);
}
internal class System.Data.ProviderBase.DbConnectionPoolIdentity : object {
    public static DbConnectionPoolIdentity NoIdentity;
    internal bool IsRestricted { get; }
    internal bool IsNetwork { get; }
    private static DbConnectionPoolIdentity();
    internal bool get_IsRestricted();
    internal bool get_IsNetwork();
    public virtual bool Equals(object value);
    internal static WindowsIdentity GetCurrentWindowsIdentity();
    internal static DbConnectionPoolIdentity GetCurrent();
    public virtual int GetHashCode();
}
internal class System.Data.ProviderBase.DbConnectionPoolProviderInfo : object {
}
internal class System.Data.ProviderBase.DbMetaDataFactory : object {
    protected DataSet CollectionDataSet { get; }
    protected string ServerVersion { get; }
    protected string ServerVersionNormalized { get; }
    public DbMetaDataFactory(Stream xmlStream, string serverVersion, string normalizedServerVersion);
    protected DataSet get_CollectionDataSet();
    protected string get_ServerVersion();
    protected string get_ServerVersionNormalized();
    protected DataTable CloneAndFilterCollection(string collectionName, String[] hiddenColumnNames);
    public void Dispose();
    protected virtual void Dispose(bool disposing);
    internal DataRow FindMetaDataCollectionRow(string collectionName);
    public virtual DataTable GetSchema(DbConnection connection, string collectionName, String[] restrictions);
    protected virtual DataTable PrepareCollection(string collectionName, String[] restrictions, DbConnection connection);
}
internal abstract class System.Data.ProviderBase.DbReferenceCollection : object {
    public abstract virtual void Add(object value, int tag);
    protected void AddItem(object value, int tag);
    internal T FindItem(int tag, Func`2<T, bool> filterMethod);
    public void Notify(int message);
    protected abstract virtual void NotifyItem(int message, int tag, object value);
    public abstract virtual void Remove(object value);
    protected void RemoveItem(object value);
}
internal class System.Data.ProviderBase.FieldNameLookup : object {
    public FieldNameLookup(String[] fieldNames, int defaultLocaleID);
    public FieldNameLookup(ReadOnlyCollection`1<string> columnNames, int defaultLocaleID);
    public FieldNameLookup(IDataRecord reader, int defaultLocaleID);
    public int GetOrdinal(string fieldName);
    public int IndexOfName(string fieldName);
    public int IndexOf(string fieldName);
}
internal class System.Data.ProviderBase.SchemaMapping : object {
    internal DataReaderContainer DataReader { get; }
    internal DataTable DataTable { get; }
    internal Object[] DataValues { get; }
    internal SchemaMapping(DataAdapter adapter, DataSet dataset, DataTable datatable, DataReaderContainer dataReader, bool keyInfo, SchemaType schemaType, string sourceTableName, bool gettingData, DataColumn parentChapterColumn, object parentChapterValue);
    internal DataReaderContainer get_DataReader();
    internal DataTable get_DataTable();
    internal Object[] get_DataValues();
    internal void ApplyToDataRow(DataRow dataRow);
    internal void LoadDataRowWithClear();
    internal void LoadDataRow();
    internal int LoadDataRowChapters(DataRow dataRow);
}
internal class System.Data.ProviderBase.TimeoutTimer : object {
    internal static long InfiniteTimeout;
    internal bool IsExpired { get; }
    internal bool IsInfinite { get; }
    internal long LegacyTimerExpire { get; }
    internal long MillisecondsRemaining { get; }
    private static TimeoutTimer();
    internal static TimeoutTimer StartSecondsTimeout(int seconds);
    internal static TimeoutTimer StartMillisecondsTimeout(long milliseconds);
    internal void SetTimeoutSeconds(int seconds);
    internal void Reset();
    internal bool get_IsExpired();
    internal bool get_IsInfinite();
    internal long get_LegacyTimerExpire();
    internal long get_MillisecondsRemaining();
}
internal class System.Data.ProviderBase.WrappedIUnknown : SafeHandle {
    public bool IsInvalid { get; }
    internal WrappedIUnknown(object unknown);
    public virtual bool get_IsInvalid();
    internal object ComWrapper();
    protected virtual bool ReleaseHandle();
}
internal class System.Data.Range : ValueType {
    private int min;
    private int max;
    private bool isNotNull;
    public int Count { get; }
    public bool IsNull { get; }
    public int Max { get; }
    public int Min { get; }
    public Range(int min, int max);
    public int get_Count();
    public bool get_IsNull();
    public int get_Max();
    public int get_Min();
    internal void CheckNull();
}
[DefaultMemberAttribute("Item")]
internal abstract class System.Data.RBTree`1 : object {
    internal static int DefaultPageSize;
    internal static int NIL;
    public int root;
    public int Count { get; }
    public bool HasDuplicates { get; }
    public K Item { get; }
    protected RBTree`1(TreeAccessMethod accessMethod);
    protected abstract virtual int CompareNode(K record1, K record2);
    protected abstract virtual int CompareSateliteTreeNode(K record1, K record2);
    public int get_Count();
    public bool get_HasDuplicates();
    public void UpdateNodeKey(K currentKey, K newKey);
    public K DeleteByIndex(int i);
    public int RBDelete(int z_id);
    public int Search(K key);
    public K get_Item(int index);
    public int GetIndexByKey(K key);
    public int GetIndexByNode(int node);
    public int Insert(K item);
    public int Add(K item);
    public sealed virtual IEnumerator GetEnumerator();
    public int IndexOf(int nodeId, K item);
    public int Insert(int position, K item);
    public int InsertAt(int position, K item, bool append);
    public void RemoveAt(int position);
    public void Clear();
    public void CopyTo(Array array, int index);
    public void CopyTo(K[] array, int index);
    public int Right(int nodeId);
    public int Left(int nodeId);
    public int Parent(int nodeId);
    public int Next(int nodeId);
    public int SubTreeSize(int nodeId);
    public K Key(int nodeId);
}
internal enum System.Data.RBTreeError : Enum {
    public int value__;
    public static RBTreeError InvalidPageSize;
    public static RBTreeError PagePositionInSlotInUse;
    public static RBTreeError NoFreeSlots;
    public static RBTreeError InvalidStateinInsert;
    public static RBTreeError InvalidNextSizeInDelete;
    public static RBTreeError InvalidStateinDelete;
    public static RBTreeError InvalidNodeSizeinDelete;
    public static RBTreeError InvalidStateinEndDelete;
    public static RBTreeError CannotRotateInvalidsuccessorNodeinDelete;
    public static RBTreeError IndexOutOFRangeinGetNodeByIndex;
    public static RBTreeError RBDeleteFixup;
    public static RBTreeError UnsupportedAccessMethod1;
    public static RBTreeError UnsupportedAccessMethod2;
    public static RBTreeError UnsupportedAccessMethodInNonNillRootSubtree;
    public static RBTreeError AttachedNodeWithZerorbTreeNodeId;
    public static RBTreeError CompareNodeInDataRowTree;
    public static RBTreeError CompareSateliteTreeNodeInDataRowTree;
    public static RBTreeError NestedSatelliteTreeEnumerator;
}
public class System.Data.ReadOnlyException : DataException {
    protected ReadOnlyException(SerializationInfo info, StreamingContext context);
    public ReadOnlyException(string s);
    public ReadOnlyException(string message, Exception innerException);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.RecordManager : object {
    internal int LastFreeRecord { get; }
    internal int MinimumCapacity { get; internal set; }
    internal int RecordCapacity { get; internal set; }
    internal DataRow Item { get; internal set; }
    internal RecordManager(DataTable table);
    internal int get_LastFreeRecord();
    internal int get_MinimumCapacity();
    internal void set_MinimumCapacity(int value);
    internal int get_RecordCapacity();
    internal void set_RecordCapacity(int value);
    internal static int NewCapacity(int capacity);
    internal int NewRecordBase();
    internal void FreeRecord(Int32& record);
    internal void Clear(bool clearAll);
    internal DataRow get_Item(int record);
    internal void set_Item(int record, DataRow value);
    internal void SetKeyValues(int record, DataKey key, Object[] keyValues);
    internal int ImportRecord(DataTable src, int record);
    internal int CopyRecord(DataTable src, int record, int copy);
    internal void SetRowCache(DataRow[] newRows);
    [ConditionalAttribute("DEBUG")]
internal void VerifyRecord(int record);
    [ConditionalAttribute("DEBUG")]
internal void VerifyRecord(int record, DataRow row);
}
internal class System.Data.RelatedView : DataView {
    public RelatedView(DataColumn[] columns, Object[] values);
    public RelatedView(DataRowView parentRowView, DataKey parentKey, DataColumn[] childKeyColumns);
    public sealed virtual bool Invoke(DataRow row, DataRowVersion version);
    internal virtual IFilter GetFilter();
    public virtual DataRowView AddNew();
    internal virtual void SetIndex(string newSort, DataViewRowState newRowStates, IFilter newRowFilter);
    public virtual bool Equals(DataView dv);
}
internal class System.Data.RelationshipConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Data.Res : object {
    internal static string ADP_Ascending;
    internal static string ADP_CollectionIndexInt32;
    internal static string ADP_CollectionIndexString;
    internal static string ADP_CollectionInvalidType;
    internal static string ADP_CollectionIsNotParent;
    internal static string ADP_CollectionIsParent;
    internal static string ADP_CollectionNullValue;
    internal static string ADP_CollectionRemoveInvalidObject;
    internal static string ADP_CollectionUniqueValue;
    internal static string ADP_ConnectionAlreadyOpen;
    internal static string ADP_ConnectionStateMsg_Closed;
    internal static string ADP_ConnectionStateMsg_Connecting;
    internal static string ADP_ConnectionStateMsg_Open;
    internal static string ADP_ConnectionStateMsg_OpenExecuting;
    internal static string ADP_ConnectionStateMsg_OpenFetching;
    internal static string ADP_ConnectionStateMsg;
    internal static string ADP_ConnectionStringSyntax;
    internal static string ADP_DataReaderClosed;
    internal static string ADP_DelegatedTransactionPresent;
    internal static string ADP_Descending;
    internal static string ADP_EmptyString;
    internal static string ADP_InternalConnectionError;
    internal static string ADP_InvalidDataDirectory;
    internal static string ADP_InvalidEnumerationValue;
    internal static string ADP_InvalidKey;
    internal static string ADP_InvalidOffsetValue;
    internal static string ADP_InvalidValue;
    internal static string ADP_InvalidXMLBadVersion;
    internal static string ADP_NoConnectionString;
    internal static string ADP_NonCLSException;
    internal static string ADP_NotAPermissionElement;
    internal static string ADP_OpenConnectionPropertySet;
    internal static string ADP_PendingAsyncOperation;
    internal static string ADP_PermissionTypeMismatch;
    internal static string ADP_PooledOpenTimeout;
    internal static string ADP_NonPooledOpenTimeout;
    internal static string ADP_InvalidMixedUsageOfSecureAndClearCredential;
    internal static string ADP_InvalidMixedUsageOfSecureCredentialAndIntegratedSecurity;
    internal static string ADP_InvalidMixedUsageOfSecureCredentialAndContextConnection;
    internal static string ADP_InvalidMixedUsageOfAccessTokenAndUserIDPassword;
    internal static string ADP_InvalidMixedUsageOfAccessTokenAndIntegratedSecurity;
    internal static string ADP_InvalidMixedUsageOfAccessTokenAndContextConnection;
    internal static string ADP_InvalidMixedUsageOfAccessTokenAndCredential;
    internal static string ADP_InvalidMixedUsageOfCredentialAndAccessToken;
    internal static string ADP_InvalidMixedUsageOfAccessTokenAndAuthentication;
    internal static string ADP_MustBeReadOnly;
    internal static string DataCategory_Data;
    internal static string DataCategory_StateChange;
    internal static string DataCategory_Update;
    internal static string DbCommand_CommandTimeout;
    internal static string DbConnection_State;
    internal static string DbConnection_StateChange;
    internal static string DbParameter_DbType;
    internal static string DbParameter_Direction;
    internal static string DbParameter_IsNullable;
    internal static string DbParameter_Offset;
    internal static string DbParameter_ParameterName;
    internal static string DbParameter_Size;
    internal static string DbParameter_SourceColumn;
    internal static string DbParameter_SourceVersion;
    internal static string DbParameter_SourceColumnNullMapping;
    internal static string DbParameter_Value;
    internal static string MDF_QueryFailed;
    internal static string MDF_TooManyRestrictions;
    internal static string MDF_InvalidRestrictionValue;
    internal static string MDF_UndefinedCollection;
    internal static string MDF_UndefinedPopulationMechanism;
    internal static string MDF_UnsupportedVersion;
    internal static string MDF_MissingDataSourceInformationColumn;
    internal static string MDF_IncorrectNumberOfDataSourceInformationRows;
    internal static string MDF_MissingRestrictionColumn;
    internal static string MDF_MissingRestrictionRow;
    internal static string MDF_NoColumns;
    internal static string MDF_UnableToBuildCollection;
    internal static string MDF_AmbigousCollectionName;
    internal static string MDF_CollectionNameISNotUnique;
    internal static string MDF_DataTableDoesNotExist;
    internal static string MDF_InvalidXml;
    internal static string MDF_InvalidXmlMissingColumn;
    internal static string MDF_InvalidXmlInvalidValue;
    internal static string DataCategory_Action;
    internal static string DataCategory_Behavior;
    internal static string DataCategory_Fill;
    internal static string DataCategory_InfoMessage;
    internal static string DataCategory_Mapping;
    internal static string DataCategory_StatementCompleted;
    internal static string DataCategory_Udt;
    internal static string DataCategory_Notification;
    internal static string DataCategory_Schema;
    internal static string DataCategory_Xml;
    internal static string DataCategory_Advanced;
    internal static string DataCategory_Context;
    internal static string DataCategory_Initialization;
    internal static string DataCategory_Pooling;
    internal static string DataCategory_NamedConnectionString;
    internal static string DataCategory_Security;
    internal static string DataCategory_Source;
    internal static string DataCategory_Replication;
    internal static string DataCategory_ConnectionResilency;
    internal static string ExtendedPropertiesDescr;
    internal static string DataSetCaseSensitiveDescr;
    internal static string DataSetDataSetNameDescr;
    internal static string DataSetDefaultViewDescr;
    internal static string DataSetEnforceConstraintsDescr;
    internal static string DataSetHasErrorsDescr;
    internal static string DataSetLocaleDescr;
    internal static string DataSetNamespaceDescr;
    internal static string DataSetPrefixDescr;
    internal static string DataSetRelationsDescr;
    internal static string DataSetTablesDescr;
    internal static string DataSetMergeFailedDescr;
    internal static string DataSetInitializedDescr;
    internal static string DataSetDescr;
    internal static string DataTableCaseSensitiveDescr;
    internal static string DataTableChildRelationsDescr;
    internal static string DataTableColumnsDescr;
    internal static string DataTableConstraintsDescr;
    internal static string DataTableDataSetDescr;
    internal static string DataTableDefaultViewDescr;
    internal static string DataTableDisplayExpressionDescr;
    internal static string DataTableHasErrorsDescr;
    internal static string DataTableLocaleDescr;
    internal static string DataTableMinimumCapacityDescr;
    internal static string DataTableNamespaceDescr;
    internal static string DataTablePrefixDescr;
    internal static string DataTableParentRelationsDescr;
    internal static string DataTablePrimaryKeyDescr;
    internal static string DataTableRowsDescr;
    internal static string DataTableTableNameDescr;
    internal static string DataTableRowChangedDescr;
    internal static string DataTableRowChangingDescr;
    internal static string DataTableRowDeletedDescr;
    internal static string DataTableRowDeletingDescr;
    internal static string DataTableColumnChangingDescr;
    internal static string DataTableColumnChangedDescr;
    internal static string DataTableRowsClearingDescr;
    internal static string DataTableRowsClearedDescr;
    internal static string DataTableRowsNewRowDescr;
    internal static string DataRelationRelationNameDescr;
    internal static string DataRelationChildColumnsDescr;
    internal static string DataRelationParentColumnsDescr;
    internal static string DataRelationNested;
    internal static string ForeignKeyConstraintDeleteRuleDescr;
    internal static string ForeignKeyConstraintUpdateRuleDescr;
    internal static string ForeignKeyConstraintAcceptRejectRuleDescr;
    internal static string ForeignKeyConstraintChildColumnsDescr;
    internal static string ForeignKeyConstraintParentColumnsDescr;
    internal static string ForeignKeyRelatedTableDescr;
    internal static string KeyConstraintColumnsDescr;
    internal static string KeyConstraintIsPrimaryKeyDescr;
    internal static string ConstraintNameDescr;
    internal static string ConstraintTableDescr;
    internal static string DataColumnAllowNullDescr;
    internal static string DataColumnAutoIncrementDescr;
    internal static string DataColumnAutoIncrementSeedDescr;
    internal static string DataColumnAutoIncrementStepDescr;
    internal static string DataColumnCaptionDescr;
    internal static string DataColumnColumnNameDescr;
    internal static string DataColumnDataTableDescr;
    internal static string DataColumnDataTypeDescr;
    internal static string DataColumnDefaultValueDescr;
    internal static string DataColumnExpressionDescr;
    internal static string DataColumnMappingDescr;
    internal static string DataColumnNamespaceDescr;
    internal static string DataColumnPrefixDescr;
    internal static string DataColumnOrdinalDescr;
    internal static string DataColumnReadOnlyDescr;
    internal static string DataColumnUniqueDescr;
    internal static string DataColumnMaxLengthDescr;
    internal static string DataColumnDateTimeModeDescr;
    internal static string DataViewAllowDeleteDescr;
    internal static string DataViewAllowEditDescr;
    internal static string DataViewAllowNewDescr;
    internal static string DataViewCountDescr;
    internal static string DataViewDataViewManagerDescr;
    internal static string DataViewIsOpenDescr;
    internal static string DataViewRowFilterDescr;
    internal static string DataViewRowStateFilterDescr;
    internal static string DataViewSortDescr;
    internal static string DataViewApplyDefaultSortDescr;
    internal static string DataViewTableDescr;
    internal static string DataViewListChangedDescr;
    internal static string DataViewManagerDataSetDescr;
    internal static string DataViewManagerTableSettingsDescr;
    internal static string Xml_SimpleTypeNotSupported;
    internal static string Xml_MissingAttribute;
    internal static string Xml_ValueOutOfRange;
    internal static string Xml_AttributeValues;
    internal static string Xml_ElementTypeNotFound;
    internal static string Xml_RelationParentNameMissing;
    internal static string Xml_RelationChildNameMissing;
    internal static string Xml_RelationTableKeyMissing;
    internal static string Xml_RelationChildKeyMissing;
    internal static string Xml_UndefinedDatatype;
    internal static string Xml_DatatypeNotDefined;
    internal static string Xml_InvalidField;
    internal static string Xml_InvalidSelector;
    internal static string Xml_InvalidKey;
    internal static string Xml_DuplicateConstraint;
    internal static string Xml_CannotConvert;
    internal static string Xml_MissingRefer;
    internal static string Xml_MismatchKeyLength;
    internal static string Xml_CircularComplexType;
    internal static string Xml_CannotInstantiateAbstract;
    internal static string Xml_MultipleTargetConverterError;
    internal static string Xml_MultipleTargetConverterEmpty;
    internal static string Xml_MergeDuplicateDeclaration;
    internal static string Xml_MissingTable;
    internal static string Xml_MissingSQL;
    internal static string Xml_ColumnConflict;
    internal static string Xml_InvalidPrefix;
    internal static string Xml_NestedCircular;
    internal static string Xml_FoundEntity;
    internal static string Xml_PolymorphismNotSupported;
    internal static string Xml_CanNotDeserializeObjectType;
    internal static string Xml_DataTableInferenceNotSupported;
    internal static string Xml_MultipleParentRows;
    internal static string Xml_IsDataSetAttributeMissingInSchema;
    internal static string Xml_TooManyIsDataSetAtributeInSchema;
    internal static string Xml_DynamicWithoutXmlSerializable;
    internal static string Expr_NYI;
    internal static string Expr_MissingOperand;
    internal static string Expr_TypeMismatch;
    internal static string Expr_ExpressionTooComplex;
    internal static string Expr_UnboundName;
    internal static string Expr_InvalidString;
    internal static string Expr_UndefinedFunction;
    internal static string Expr_Syntax;
    internal static string Expr_FunctionArgumentCount;
    internal static string Expr_MissingRightParen;
    internal static string Expr_UnknownToken;
    internal static string Expr_UnknownToken1;
    internal static string Expr_DatatypeConvertion;
    internal static string Expr_DatavalueConvertion;
    internal static string Expr_InvalidName;
    internal static string Expr_InvalidDate;
    internal static string Expr_NonConstantArgument;
    internal static string Expr_InvalidPattern;
    internal static string Expr_InWithoutParentheses;
    internal static string Expr_ArgumentType;
    internal static string Expr_ArgumentTypeInteger;
    internal static string Expr_TypeMismatchInBinop;
    internal static string Expr_AmbiguousBinop;
    internal static string Expr_InWithoutList;
    internal static string Expr_UnsupportedOperator;
    internal static string Expr_InvalidNameBracketing;
    internal static string Expr_MissingOperandBefore;
    internal static string Expr_TooManyRightParentheses;
    internal static string Expr_UnresolvedRelation;
    internal static string Expr_AggregateArgument;
    internal static string Expr_AggregateUnbound;
    internal static string Expr_EvalNoContext;
    internal static string Expr_ExpressionUnbound;
    internal static string Expr_ComputeNotAggregate;
    internal static string Expr_FilterConvertion;
    internal static string Expr_InvalidType;
    internal static string Expr_LookupArgument;
    internal static string Expr_InvokeArgument;
    internal static string Expr_ArgumentOutofRange;
    internal static string Expr_IsSyntax;
    internal static string Expr_Overflow;
    internal static string Expr_DivideByZero;
    internal static string Expr_BindFailure;
    internal static string Expr_InvalidHoursArgument;
    internal static string Expr_InvalidMinutesArgument;
    internal static string Expr_InvalidTimeZoneRange;
    internal static string Expr_MismatchKindandTimeSpan;
    internal static string Expr_UnsupportedType;
    internal static string Data_EnforceConstraints;
    internal static string Data_CannotModifyCollection;
    internal static string Data_CaseInsensitiveNameConflict;
    internal static string Data_NamespaceNameConflict;
    internal static string Data_InvalidOffsetLength;
    internal static string Data_ArgumentOutOfRange;
    internal static string Data_ArgumentNull;
    internal static string Data_ArgumentContainsNull;
    internal static string DataColumns_OutOfRange;
    internal static string DataColumns_Add1;
    internal static string DataColumns_Add2;
    internal static string DataColumns_Add3;
    internal static string DataColumns_Add4;
    internal static string DataColumns_AddDuplicate;
    internal static string DataColumns_AddDuplicate2;
    internal static string DataColumns_AddDuplicate3;
    internal static string DataColumns_Remove;
    internal static string DataColumns_RemovePrimaryKey;
    internal static string DataColumns_RemoveChildKey;
    internal static string DataColumns_RemoveConstraint;
    internal static string DataColumns_RemoveExpression;
    internal static string DataColumn_AutoIncrementAndExpression;
    internal static string DataColumn_AutoIncrementAndDefaultValue;
    internal static string DataColumn_DefaultValueAndAutoIncrement;
    internal static string DataColumn_AutoIncrementSeed;
    internal static string DataColumn_NameRequired;
    internal static string DataColumn_ChangeDataType;
    internal static string DataColumn_NullDataType;
    internal static string DataColumn_DefaultValueDataType;
    internal static string DataColumn_DefaultValueDataType1;
    internal static string DataColumn_DefaultValueColumnDataType;
    internal static string DataColumn_ReadOnlyAndExpression;
    internal static string DataColumn_UniqueAndExpression;
    internal static string DataColumn_ExpressionAndUnique;
    internal static string DataColumn_ExpressionAndReadOnly;
    internal static string DataColumn_ExpressionAndConstraint;
    internal static string DataColumn_ExpressionInConstraint;
    internal static string DataColumn_ExpressionCircular;
    internal static string DataColumn_NullKeyValues;
    internal static string DataColumn_NullValues;
    internal static string DataColumn_ReadOnly;
    internal static string DataColumn_NonUniqueValues;
    internal static string DataColumn_NotInTheTable;
    internal static string DataColumn_NotInAnyTable;
    internal static string DataColumn_SetFailed;
    internal static string DataColumn_CannotSetToNull;
    internal static string DataColumn_LongerThanMaxLength;
    internal static string DataColumn_HasToBeStringType;
    internal static string DataColumn_CannotSetMaxLength;
    internal static string DataColumn_CannotSetMaxLength2;
    internal static string DataColumn_CannotSimpleContentType;
    internal static string DataColumn_CannotSimpleContent;
    internal static string DataColumn_ExceedMaxLength;
    internal static string DataColumn_NotAllowDBNull;
    internal static string DataColumn_CannotChangeNamespace;
    internal static string DataColumn_AutoIncrementCannotSetIfHasData;
    internal static string DataColumn_NotInTheUnderlyingTable;
    internal static string DataColumn_InvalidDataColumnMapping;
    internal static string DataColumn_CannotSetDateTimeModeForNonDateTimeColumns;
    internal static string DataColumn_InvalidDateTimeMode;
    internal static string DataColumn_DateTimeMode;
    internal static string DataColumn_INullableUDTwithoutStaticNull;
    internal static string DataColumn_UDTImplementsIChangeTrackingButnotIRevertible;
    internal static string DataColumn_SetAddedAndModifiedCalledOnNonUnchanged;
    internal static string DataColumn_OrdinalExceedMaximun;
    internal static string DataColumn_NullableTypesNotSupported;
    internal static string DataConstraint_NoName;
    internal static string DataConstraint_Violation;
    internal static string DataConstraint_ViolationValue;
    internal static string DataConstraint_NotInTheTable;
    internal static string DataConstraint_OutOfRange;
    internal static string DataConstraint_Duplicate;
    internal static string DataConstraint_DuplicateName;
    internal static string DataConstraint_UniqueViolation;
    internal static string DataConstraint_ForeignTable;
    internal static string DataConstraint_ParentValues;
    internal static string DataConstraint_AddFailed;
    internal static string DataConstraint_RemoveFailed;
    internal static string DataConstraint_NeededForForeignKeyConstraint;
    internal static string DataConstraint_CascadeDelete;
    internal static string DataConstraint_CascadeUpdate;
    internal static string DataConstraint_ClearParentTable;
    internal static string DataConstraint_ForeignKeyViolation;
    internal static string DataConstraint_BadObjectPropertyAccess;
    internal static string DataConstraint_RemoveParentRow;
    internal static string DataConstraint_AddPrimaryKeyConstraint;
    internal static string DataConstraint_CantAddConstraintToMultipleNestedTable;
    internal static string DataKey_TableMismatch;
    internal static string DataKey_NoColumns;
    internal static string DataKey_TooManyColumns;
    internal static string DataKey_DuplicateColumns;
    internal static string DataKey_RemovePrimaryKey;
    internal static string DataKey_RemovePrimaryKey1;
    internal static string DataRelation_ColumnsTypeMismatch;
    internal static string DataRelation_KeyColumnsIdentical;
    internal static string DataRelation_KeyLengthMismatch;
    internal static string DataRelation_KeyZeroLength;
    internal static string DataRelation_ForeignRow;
    internal static string DataRelation_NoName;
    internal static string DataRelation_ForeignTable;
    internal static string DataRelation_ForeignDataSet;
    internal static string DataRelation_GetParentRowTableMismatch;
    internal static string DataRelation_SetParentRowTableMismatch;
    internal static string DataRelation_DataSetMismatch;
    internal static string DataRelation_TablesInDifferentSets;
    internal static string DataRelation_AlreadyExists;
    internal static string DataRelation_DoesNotExist;
    internal static string DataRelation_AlreadyInOtherDataSet;
    internal static string DataRelation_AlreadyInTheDataSet;
    internal static string DataRelation_DuplicateName;
    internal static string DataRelation_NotInTheDataSet;
    internal static string DataRelation_OutOfRange;
    internal static string DataRelation_TableNull;
    internal static string DataRelation_TableWasRemoved;
    internal static string DataRelation_ChildTableMismatch;
    internal static string DataRelation_ParentTableMismatch;
    internal static string DataRelation_RelationNestedReadOnly;
    internal static string DataRelation_TableCantBeNestedInTwoTables;
    internal static string DataRelation_LoopInNestedRelations;
    internal static string DataRelation_CaseLocaleMismatch;
    internal static string DataRelation_ParentOrChildColumnsDoNotHaveDataSet;
    internal static string DataRelation_InValidNestedRelation;
    internal static string DataRelation_InValidNamespaceInNestedRelation;
    internal static string DataRow_NotInTheDataSet;
    internal static string DataRow_NotInTheTable;
    internal static string DataRow_ParentRowNotInTheDataSet;
    internal static string DataRow_EditInRowChanging;
    internal static string DataRow_EndEditInRowChanging;
    internal static string DataRow_BeginEditInRowChanging;
    internal static string DataRow_CancelEditInRowChanging;
    internal static string DataRow_DeleteInRowDeleting;
    internal static string DataRow_ValuesArrayLength;
    internal static string DataRow_NoCurrentData;
    internal static string DataRow_NoOriginalData;
    internal static string DataRow_NoProposedData;
    internal static string DataRow_RemovedFromTheTable;
    internal static string DataRow_DeletedRowInaccessible;
    internal static string DataRow_InvalidVersion;
    internal static string DataRow_OutOfRange;
    internal static string DataRow_RowInsertOutOfRange;
    internal static string DataRow_RowInsertTwice;
    internal static string DataRow_RowInsertMissing;
    internal static string DataRow_RowOutOfRange;
    internal static string DataRow_AlreadyInOtherCollection;
    internal static string DataRow_AlreadyInTheCollection;
    internal static string DataRow_AlreadyDeleted;
    internal static string DataRow_Empty;
    internal static string DataRow_AlreadyRemoved;
    internal static string DataRow_MultipleParents;
    internal static string DataRow_InvalidRowBitPattern;
    internal static string DataSet_SetNameToEmpty;
    internal static string DataSet_SetDataSetNameConflicting;
    internal static string DataSet_UnsupportedSchema;
    internal static string DataSet_CannotChangeCaseLocale;
    internal static string DataSet_CannotChangeSchemaSerializationMode;
    internal static string DataTable_ForeignPrimaryKey;
    internal static string DataTable_CannotAddToSimpleContent;
    internal static string DataTable_NoName;
    internal static string DataTable_MultipleSimpleContentColumns;
    internal static string DataTable_MissingPrimaryKey;
    internal static string DataTable_InvalidSortString;
    internal static string DataTable_CanNotSerializeDataTableHierarchy;
    internal static string DataTable_CanNotRemoteDataTable;
    internal static string DataTable_CanNotSetRemotingFormat;
    internal static string DataTable_CanNotSerializeDataTableWithEmptyName;
    internal static string DataTable_DuplicateName;
    internal static string DataTable_DuplicateName2;
    internal static string DataTable_SelfnestedDatasetConflictingName;
    internal static string DataTable_DatasetConflictingName;
    internal static string DataTable_AlreadyInOtherDataSet;
    internal static string DataTable_AlreadyInTheDataSet;
    internal static string DataTable_NotInTheDataSet;
    internal static string DataTable_OutOfRange;
    internal static string DataTable_InRelation;
    internal static string DataTable_InConstraint;
    internal static string DataTable_TableNotFound;
    internal static string DataMerge_MissingDefinition;
    internal static string DataMerge_MissingConstraint;
    internal static string DataMerge_DataTypeMismatch;
    internal static string DataMerge_PrimaryKeyMismatch;
    internal static string DataMerge_PrimaryKeyColumnsMismatch;
    internal static string DataMerge_ReltionKeyColumnsMismatch;
    internal static string DataMerge_MissingColumnDefinition;
    internal static string DataMerge_MissingPrimaryKeyColumnInSource;
    internal static string DataIndex_RecordStateRange;
    internal static string DataIndex_FindWithoutSortOrder;
    internal static string DataIndex_KeyLength;
    internal static string DataStorage_AggregateException;
    internal static string DataStorage_InvalidStorageType;
    internal static string DataStorage_ProblematicChars;
    internal static string DataStorage_SetInvalidDataType;
    internal static string DataStorage_IComparableNotDefined;
    internal static string DataView_SetFailed;
    internal static string DataView_SetDataSetFailed;
    internal static string DataView_SetRowStateFilter;
    internal static string DataView_SetTable;
    internal static string DataView_CanNotSetDataSet;
    internal static string DataView_CanNotUseDataViewManager;
    internal static string DataView_CanNotSetTable;
    internal static string DataView_CanNotUse;
    internal static string DataView_CanNotBindTable;
    internal static string DataView_SetIListObject;
    internal static string DataView_AddNewNotAllowNull;
    internal static string DataView_NotOpen;
    internal static string DataView_CreateChildView;
    internal static string DataView_CanNotDelete;
    internal static string DataView_CanNotEdit;
    internal static string DataView_GetElementIndex;
    internal static string DataView_AddExternalObject;
    internal static string DataView_CanNotClear;
    internal static string DataView_InsertExternalObject;
    internal static string DataView_RemoveExternalObject;
    internal static string DataROWView_PropertyNotFound;
    internal static string Range_Argument;
    internal static string Range_NullRange;
    internal static string RecordManager_MinimumCapacity;
    internal static string CodeGen_InvalidIdentifier;
    internal static string CodeGen_DuplicateTableName;
    internal static string CodeGen_TypeCantBeNull;
    internal static string CodeGen_NoCtor0;
    internal static string CodeGen_NoCtor1;
    internal static string SqlConvert_ConvertFailed;
    internal static string DataSet_DefaultDataException;
    internal static string DataSet_DefaultConstraintException;
    internal static string DataSet_DefaultDeletedRowInaccessibleException;
    internal static string DataSet_DefaultDuplicateNameException;
    internal static string DataSet_DefaultInRowChangingEventException;
    internal static string DataSet_DefaultInvalidConstraintException;
    internal static string DataSet_DefaultMissingPrimaryKeyException;
    internal static string DataSet_DefaultNoNullAllowedException;
    internal static string DataSet_DefaultReadOnlyException;
    internal static string DataSet_DefaultRowNotInTableException;
    internal static string DataSet_DefaultVersionNotFoundException;
    internal static string Load_ReadOnlyDataModified;
    internal static string DataTableReader_InvalidDataTableReader;
    internal static string DataTableReader_SchemaInvalidDataTableReader;
    internal static string DataTableReader_CannotCreateDataReaderOnEmptyDataSet;
    internal static string DataTableReader_DataTableReaderArgumentIsEmpty;
    internal static string DataTableReader_ArgumentContainsNullValue;
    internal static string DataTableReader_InvalidRowInDataTableReader;
    internal static string DataTableReader_DataTableCleared;
    internal static string RbTree_InvalidState;
    internal static string RbTree_EnumerationBroken;
    internal static string NamedSimpleType_InvalidDuplicateNamedSimpleTypeDelaration;
    internal static string DataDom_Foliation;
    internal static string DataDom_TableNameChange;
    internal static string DataDom_TableNamespaceChange;
    internal static string DataDom_ColumnNameChange;
    internal static string DataDom_ColumnNamespaceChange;
    internal static string DataDom_ColumnMappingChange;
    internal static string DataDom_TableColumnsChange;
    internal static string DataDom_DataSetTablesChange;
    internal static string DataDom_DataSetNestedRelationsChange;
    internal static string DataDom_DataSetNull;
    internal static string DataDom_DataSetNameChange;
    internal static string DataDom_CloneNode;
    internal static string DataDom_MultipleLoad;
    internal static string DataDom_MultipleDataSet;
    internal static string DataDom_EnforceConstraintsShouldBeOff;
    internal static string DataDom_NotSupport_GetElementById;
    internal static string DataDom_NotSupport_EntRef;
    internal static string DataDom_NotSupport_Clear;
    internal static string StrongTyping_CannotRemoveColumn;
    internal static string StrongTyping_CananotRemoveRelation;
    internal static string propertyChangedEventDescr;
    internal static string collectionChangedEventDescr;
    internal static string StrongTyping_CananotAccessDBNull;
    internal static string ADP_PropertyNotSupported;
    internal static string ConfigProviderNotFound;
    internal static string ConfigProviderInvalid;
    internal static string ConfigProviderNotInstalled;
    internal static string ConfigProviderMissing;
    internal static string ConfigBaseElementsOnly;
    internal static string ConfigBaseNoChildNodes;
    internal static string ConfigUnrecognizedAttributes;
    internal static string ConfigUnrecognizedElement;
    internal static string ConfigSectionsUnique;
    internal static string ConfigRequiredAttributeMissing;
    internal static string ConfigRequiredAttributeEmpty;
    internal static string ADP_EmptyArray;
    internal static string ADP_SingleValuedProperty;
    internal static string ADP_DoubleValuedProperty;
    internal static string ADP_InvalidPrefixSuffix;
    internal static string ADP_InvalidArgumentLength;
    internal static string SQL_WrongType;
    internal static string ADP_InvalidConnectionOptionValue;
    internal static string ADP_MissingConnectionOptionValue;
    internal static string ADP_InvalidConnectionOptionValueLength;
    internal static string ADP_KeywordNotSupported;
    internal static string ADP_UdlFileError;
    internal static string ADP_InvalidUDL;
    internal static string ADP_InternalProviderError;
    internal static string ADP_NoQuoteChange;
    internal static string ADP_MissingSourceCommand;
    internal static string ADP_MissingSourceCommandConnection;
    internal static string ADP_InvalidMultipartName;
    internal static string ADP_InvalidMultipartNameQuoteUsage;
    internal static string ADP_InvalidMultipartNameToManyParts;
    internal static string SQL_BulkCopyDestinationTableName;
    internal static string SQL_TDSParserTableName;
    internal static string SQL_UDTTypeName;
    internal static string SQL_TypeName;
    internal static string SQL_SqlCommandCommandText;
    internal static string ODBC_ODBCCommandText;
    internal static string OLEDB_OLEDBCommandText;
    internal static string SQLMSF_FailoverPartnerNotSupported;
    internal static string ADP_ColumnSchemaExpression;
    internal static string ADP_ColumnSchemaMismatch;
    internal static string ADP_ColumnSchemaMissing1;
    internal static string ADP_ColumnSchemaMissing2;
    internal static string ADP_InvalidSourceColumn;
    internal static string ADP_MissingColumnMapping;
    internal static string ADP_NotSupportedEnumerationValue;
    internal static string ODBC_NotSupportedEnumerationValue;
    internal static string OLEDB_NotSupportedEnumerationValue;
    internal static string SQL_NotSupportedEnumerationValue;
    internal static string ADP_ComputerNameEx;
    internal static string ADP_MissingTableSchema;
    internal static string ADP_InvalidSourceTable;
    internal static string ADP_MissingTableMapping;
    internal static string ADP_CommandTextRequired;
    internal static string ADP_ConnectionRequired;
    internal static string ADP_OpenConnectionRequired;
    internal static string ADP_ConnectionRequired_Fill;
    internal static string ADP_ConnectionRequired_FillPage;
    internal static string ADP_ConnectionRequired_FillSchema;
    internal static string ADP_ConnectionRequired_Insert;
    internal static string ADP_ConnectionRequired_Update;
    internal static string ADP_ConnectionRequired_Delete;
    internal static string ADP_ConnectionRequired_Batch;
    internal static string ADP_ConnectionRequired_Clone;
    internal static string ADP_ConnecitonRequired_UpdateRows;
    internal static string ADP_OpenConnectionRequired_Insert;
    internal static string ADP_OpenConnectionRequired_Update;
    internal static string ADP_OpenConnectionRequired_Delete;
    internal static string ADP_OpenConnectionRequired_Clone;
    internal static string ADP_NoStoredProcedureExists;
    internal static string ADP_TransactionCompleted;
    internal static string ADP_TransactionConnectionMismatch;
    internal static string ADP_TransactionCompletedButNotDisposed;
    internal static string ADP_TransactionRequired;
    internal static string ADP_OpenResultSetExists;
    internal static string ADP_OpenReaderExists;
    internal static string ADP_DeriveParametersNotSupported;
    internal static string ADP_CalledTwice;
    internal static string ADP_IncorrectAsyncResult;
    internal static string ADP_MissingSelectCommand;
    internal static string ADP_UnwantedStatementType;
    internal static string ADP_FillSchemaRequiresSourceTableName;
    internal static string ADP_InvalidMaxRecords;
    internal static string ADP_InvalidStartRecord;
    internal static string ADP_FillRequiresSourceTableName;
    internal static string ADP_FillChapterAutoIncrement;
    internal static string ADP_MissingDataReaderFieldType;
    internal static string ADP_OnlyOneTableForStartRecordOrMaxRecords;
    internal static string ADP_UpdateRequiresSourceTable;
    internal static string ADP_UpdateRequiresSourceTableName;
    internal static string ADP_MissingTableMappingDestination;
    internal static string ADP_UpdateRequiresCommandClone;
    internal static string ADP_UpdateRequiresCommandSelect;
    internal static string ADP_UpdateRequiresCommandInsert;
    internal static string ADP_UpdateRequiresCommandUpdate;
    internal static string ADP_UpdateRequiresCommandDelete;
    internal static string ADP_UpdateMismatchRowTable;
    internal static string ADP_RowUpdatedErrors;
    internal static string ADP_RowUpdatingErrors;
    internal static string ADP_ResultsNotAllowedDuringBatch;
    internal static string ADP_UpdateConcurrencyViolation_Update;
    internal static string ADP_UpdateConcurrencyViolation_Delete;
    internal static string ADP_UpdateConcurrencyViolation_Batch;
    internal static string ADP_InvalidCommandTimeout;
    internal static string ADP_UninitializedParameterSize;
    internal static string ADP_PrepareParameterType;
    internal static string ADP_PrepareParameterSize;
    internal static string ADP_PrepareParameterScale;
    internal static string ADP_MismatchedAsyncResult;
    internal static string ADP_ClosedConnectionError;
    internal static string ADP_ConnectionIsDisabled;
    internal static string ADP_LocalTransactionPresent;
    internal static string ADP_TransactionPresent;
    internal static string ADP_EmptyDatabaseName;
    internal static string ADP_DatabaseNameTooLong;
    internal static string ADP_InvalidConnectTimeoutValue;
    internal static string ADP_InvalidSourceBufferIndex;
    internal static string ADP_InvalidDestinationBufferIndex;
    internal static string ADP_DataReaderNoData;
    internal static string ADP_NumericToDecimalOverflow;
    internal static string ADP_StreamClosed;
    internal static string ADP_InvalidSeekOrigin;
    internal static string ADP_DynamicSQLJoinUnsupported;
    internal static string ADP_DynamicSQLNoTableInfo;
    internal static string ADP_DynamicSQLNoKeyInfoDelete;
    internal static string ADP_DynamicSQLNoKeyInfoUpdate;
    internal static string ADP_DynamicSQLNoKeyInfoRowVersionDelete;
    internal static string ADP_DynamicSQLNoKeyInfoRowVersionUpdate;
    internal static string ADP_DynamicSQLNestedQuote;
    internal static string ADP_NonSequentialColumnAccess;
    internal static string ADP_InvalidDateTimeDigits;
    internal static string ADP_InvalidFormatValue;
    internal static string ADP_InvalidMaximumScale;
    internal static string ADP_LiteralValueIsInvalid;
    internal static string ADP_EvenLengthLiteralValue;
    internal static string ADP_HexDigitLiteralValue;
    internal static string ADP_QuotePrefixNotSet;
    internal static string ADP_UnableToCreateBooleanLiteral;
    internal static string ADP_UnsupportedNativeDataTypeOleDb;
    internal static string ADP_InvalidDataType;
    internal static string ADP_UnknownDataType;
    internal static string ADP_UnknownDataTypeCode;
    internal static string ADP_DbTypeNotSupported;
    internal static string ADP_VersionDoesNotSupportDataType;
    internal static string ADP_ParameterValueOutOfRange;
    internal static string ADP_BadParameterName;
    internal static string ADP_MultipleReturnValue;
    internal static string ADP_InvalidSizeValue;
    internal static string ADP_NegativeParameter;
    internal static string ADP_InvalidMetaDataValue;
    internal static string ADP_NotRowType;
    internal static string ADP_ParameterConversionFailed;
    internal static string ADP_ParallelTransactionsNotSupported;
    internal static string ADP_TransactionZombied;
    internal static string ADP_DbRecordReadOnly;
    internal static string ADP_DbDataUpdatableRecordReadOnly;
    internal static string ADP_InvalidImplicitConversion;
    internal static string ADP_InvalidBufferSizeOrIndex;
    internal static string ADP_InvalidDataLength;
    internal static string ADP_InvalidDataLength2;
    internal static string ADP_NonSeqByteAccess;
    internal static string ADP_OffsetOutOfRangeException;
    internal static string ODBC_GetSchemaRestrictionRequired;
    internal static string ADP_InvalidArgumentValue;
    internal static string ADP_OdbcNoTypesFromProvider;
    internal static string ADP_NullDataTable;
    internal static string ADP_NullDataSet;
    internal static string OdbcConnection_ConnectionStringTooLong;
    internal static string Odbc_GetTypeMapping_UnknownType;
    internal static string Odbc_UnknownSQLType;
    internal static string Odbc_UnknownURTType;
    internal static string Odbc_NegativeArgument;
    internal static string Odbc_CantSetPropertyOnOpenConnection;
    internal static string Odbc_NoMappingForSqlTransactionLevel;
    internal static string Odbc_CantEnableConnectionpooling;
    internal static string Odbc_CantAllocateEnvironmentHandle;
    internal static string Odbc_FailedToGetDescriptorHandle;
    internal static string Odbc_NotInTransaction;
    internal static string Odbc_UnknownOdbcType;
    internal static string Odbc_NullData;
    internal static string Odbc_ExceptionMessage;
    internal static string Odbc_ExceptionNoInfoMsg;
    internal static string Odbc_ConnectionClosed;
    internal static string Odbc_OpenConnectionNoOwner;
    internal static string Odbc_MDACWrongVersion;
    internal static string OleDb_MDACWrongVersion;
    internal static string OleDb_SchemaRowsetsNotSupported;
    internal static string OleDb_NoErrorInformation2;
    internal static string OleDb_NoErrorInformation;
    internal static string OleDb_MDACNotAvailable;
    internal static string OleDb_MSDASQLNotSupported;
    internal static string OleDb_PossiblePromptNotUserInteractive;
    internal static string OleDb_ProviderUnavailable;
    internal static string OleDb_CommandTextNotSupported;
    internal static string OleDb_TransactionsNotSupported;
    internal static string OleDb_ConnectionStringSyntax;
    internal static string OleDb_AsynchronousNotSupported;
    internal static string OleDb_NoProviderSpecified;
    internal static string OleDb_InvalidProviderSpecified;
    internal static string OleDb_InvalidRestrictionsDbInfoKeywords;
    internal static string OleDb_InvalidRestrictionsDbInfoLiteral;
    internal static string OleDb_InvalidRestrictionsSchemaGuids;
    internal static string OleDb_NotSupportedSchemaTable;
    internal static string OleDb_ConfigWrongNumberOfValues;
    internal static string OleDb_ConfigUnableToLoadXmlMetaDataFile;
    internal static string OleDb_CommandParameterBadAccessor;
    internal static string OleDb_CommandParameterCantConvertValue;
    internal static string OleDb_CommandParameterSignMismatch;
    internal static string OleDb_CommandParameterDataOverflow;
    internal static string OleDb_CommandParameterUnavailable;
    internal static string OleDb_CommandParameterDefault;
    internal static string OleDb_CommandParameterError;
    internal static string OleDb_BadStatus_ParamAcc;
    internal static string OleDb_UninitializedParameters;
    internal static string OleDb_NoProviderSupportForParameters;
    internal static string OleDb_NoProviderSupportForSProcResetParameters;
    internal static string OleDb_CanNotDetermineDecimalSeparator;
    internal static string OleDb_Fill_NotADODB;
    internal static string OleDb_Fill_EmptyRecordSet;
    internal static string OleDb_Fill_EmptyRecord;
    internal static string OleDb_ISourcesRowsetNotSupported;
    internal static string OleDb_IDBInfoNotSupported;
    internal static string OleDb_PropertyNotSupported;
    internal static string OleDb_PropertyBadValue;
    internal static string OleDb_PropertyBadOption;
    internal static string OleDb_PropertyBadColumn;
    internal static string OleDb_PropertyNotAllSettable;
    internal static string OleDb_PropertyNotSettable;
    internal static string OleDb_PropertyNotSet;
    internal static string OleDb_PropertyConflicting;
    internal static string OleDb_PropertyNotAvailable;
    internal static string OleDb_PropertyStatusUnknown;
    internal static string OleDb_BadAccessor;
    internal static string OleDb_BadStatusRowAccessor;
    internal static string OleDb_CantConvertValue;
    internal static string OleDb_CantCreate;
    internal static string OleDb_DataOverflow;
    internal static string OleDb_GVtUnknown;
    internal static string OleDb_SignMismatch;
    internal static string OleDb_SVtUnknown;
    internal static string OleDb_Unavailable;
    internal static string OleDb_UnexpectedStatusValue;
    internal static string OleDb_ThreadApartmentState;
    internal static string OleDb_NoErrorMessage;
    internal static string OleDb_FailedGetDescription;
    internal static string OleDb_FailedGetSource;
    internal static string OleDb_DBBindingGetVector;
    internal static string ADP_InvalidMinMaxPoolSizeValues;
    internal static string ADP_ObsoleteKeyword;
    internal static string SQL_CannotGetDTCAddress;
    internal static string SQL_InvalidOptionLength;
    internal static string SQL_InvalidPacketSizeValue;
    internal static string SQL_NullEmptyTransactionName;
    internal static string SQL_SnapshotNotSupported;
    internal static string SQL_UserInstanceFailoverNotCompatible;
    internal static string SQL_AuthenticationAndIntegratedSecurity;
    internal static string SQL_IntegratedWithUserIDAndPassword;
    internal static string SQL_InteractiveWithPassword;
    internal static string SQL_InteractiveWithoutUserID;
    internal static string SQL_SettingIntegratedWithCredential;
    internal static string SQL_SettingCredentialWithIntegrated;
    internal static string SQL_EncryptionNotSupportedByClient;
    internal static string SQL_EncryptionNotSupportedByServer;
    internal static string SQL_InvalidSQLServerVersionUnknown;
    internal static string SQL_CannotModifyPropertyAsyncOperationInProgress;
    internal static string SQL_AsyncConnectionRequired;
    internal static string SQL_FatalTimeout;
    internal static string SQL_InstanceFailure;
    internal static string SQL_CredentialsNotProvided;
    internal static string SQL_ChangePasswordArgumentMissing;
    internal static string SQL_ChangePasswordConflictsWithSSPI;
    internal static string SQL_ChangePasswordUseOfUnallowedKey;
    internal static string SQL_UnknownSysTxIsolationLevel;
    internal static string SQL_InvalidPartnerConfiguration;
    internal static string SQL_MarsUnsupportedOnConnection;
    internal static string SQL_ADALFailure;
    internal static string SQL_ADALInnerException;
    internal static string SQL_ChangePasswordRequiresYukon;
    internal static string SQL_NonLocalSSEInstance;
    internal static string SQL_UnsupportedAuthentication;
    internal static string SQL_UnsupportedSqlAuthenticationMethod;
    internal static string SQL_CannotCreateAuthProvider;
    internal static string SQL_CannotCreateAuthInitializer;
    internal static string SQL_CannotInitializeAuthProvider;
    internal static string SQL_UnsupportedAuthenticationByProvider;
    internal static string SQL_CannotFindAuthProvider;
    internal static string SQL_CannotGetAuthProviderConfig;
    internal static string SQL_ParameterCannotBeEmpty;
    internal static string SQL_AsyncOperationCompleted;
    internal static string SQL_PendingBeginXXXExists;
    internal static string SQL_NonXmlResult;
    internal static string SQL_NotificationsRequireYukon;
    internal static string SQL_InvalidUdt3PartNameFormat;
    internal static string SQL_InvalidParameterTypeNameFormat;
    internal static string SQL_InvalidParameterNameLength;
    internal static string SQL_PrecisionValueOutOfRange;
    internal static string SQL_ScaleValueOutOfRange;
    internal static string SQL_TimeScaleValueOutOfRange;
    internal static string SQL_ParameterInvalidVariant;
    internal static string SQL_ParameterTypeNameRequired;
    internal static string SQL_ADALInitializeError;
    internal static string SQL_InvalidInternalPacketSize;
    internal static string SQL_InvalidTDSVersion;
    internal static string SQL_InvalidTDSPacketSize;
    internal static string SQL_ParsingError;
    internal static string SQL_ParsingErrorWithState;
    internal static string SQL_ParsingErrorValue;
    internal static string SQL_ParsingErrorOffset;
    internal static string SQL_ParsingErrorFeatureId;
    internal static string SQL_ParsingErrorToken;
    internal static string SQL_ParsingErrorLength;
    internal static string SQL_ParsingErrorStatus;
    internal static string SQL_ParsingErrorAuthLibraryType;
    internal static string SQL_ConnectionLockedForBcpEvent;
    internal static string SQL_SNIPacketAllocationFailure;
    internal static string SQL_SmallDateTimeOverflow;
    internal static string SQL_TimeOverflow;
    internal static string SQL_MoneyOverflow;
    internal static string SQL_CultureIdError;
    internal static string SQL_OperationCancelled;
    internal static string SQL_SevereError;
    internal static string SQL_SSPIGenerateError;
    internal static string SQL_InvalidSSPIPacketSize;
    internal static string SQL_SSPIInitializeError;
    internal static string SQL_Timeout;
    internal static string SQL_Timeout_PreLogin_Begin;
    internal static string SQL_Timeout_PreLogin_InitializeConnection;
    internal static string SQL_Timeout_PreLogin_SendHandshake;
    internal static string SQL_Timeout_PreLogin_ConsumeHandshake;
    internal static string SQL_Timeout_Login_Begin;
    internal static string SQL_Timeout_Login_ProcessConnectionAuth;
    internal static string SQL_Timeout_PostLogin;
    internal static string SQL_Timeout_FailoverInfo;
    internal static string SQL_Timeout_RoutingDestinationInfo;
    internal static string SQL_Duration_PreLogin_Begin;
    internal static string SQL_Duration_PreLoginHandshake;
    internal static string SQL_Duration_Login_Begin;
    internal static string SQL_Duration_Login_ProcessConnectionAuth;
    internal static string SQL_Duration_PostLogin;
    internal static string SQL_UserInstanceFailure;
    internal static string SQL_ExceedsMaxDataLength;
    internal static string SQL_InvalidRead;
    internal static string SQL_NonBlobColumn;
    internal static string SQL_NonCharColumn;
    internal static string SQL_StreamNotSupportOnColumnType;
    internal static string SQL_TextReaderNotSupportOnColumnType;
    internal static string SQL_XmlReaderNotSupportOnColumnType;
    internal static string SQL_InvalidBufferSizeOrIndex;
    internal static string SQL_InvalidDataLength;
    internal static string SQL_SqlResultSetClosed;
    internal static string SQL_SqlResultSetClosed2;
    internal static string SQL_SqlRecordReadOnly;
    internal static string SQL_SqlRecordReadOnly2;
    internal static string SQL_SqlResultSetRowDeleted;
    internal static string SQL_SqlResultSetRowDeleted2;
    internal static string SQL_SqlResultSetCommandNotInSameConnection;
    internal static string SQL_SqlResultSetNoAcceptableCursor;
    internal static string SQL_SqlUpdatableRecordReadOnly;
    internal static string SQL_BulkLoadMappingInaccessible;
    internal static string SQL_BulkLoadMappingsNamesOrOrdinalsOnly;
    internal static string SQL_BulkLoadCannotConvertValue;
    internal static string SQL_BulkLoadNonMatchingColumnMapping;
    internal static string SQL_BulkLoadNonMatchingColumnName;
    internal static string SQL_BulkLoadStringTooLong;
    internal static string SQL_BulkLoadInvalidTimeout;
    internal static string SQL_BulkLoadInvalidVariantValue;
    internal static string SQL_BulkLoadExistingTransaction;
    internal static string SQL_BulkLoadNoCollation;
    internal static string SQL_BulkLoadConflictingTransactionOption;
    internal static string SQL_BulkLoadInvalidOperationInsideEvent;
    internal static string SQL_BulkLoadMissingDestinationTable;
    internal static string SQL_BulkLoadInvalidDestinationTable;
    internal static string SQL_BulkLoadNotAllowDBNull;
    internal static string Sql_BulkLoadLcidMismatch;
    internal static string SQL_BulkLoadPendingOperation;
    internal static string SQL_ConnectionDoomed;
    internal static string SQL_OpenResultCountExceeded;
    internal static string GT_Disabled;
    internal static string GT_UnsupportedSysTxVersion;
    internal static string SQL_BatchedUpdatesNotAvailableOnContextConnection;
    internal static string SQL_ContextAllowsLimitedKeywords;
    internal static string SQL_ContextAllowsOnlyTypeSystem2005;
    internal static string SQL_ContextConnectionIsInUse;
    internal static string SQL_ContextUnavailableOutOfProc;
    internal static string SQL_ContextUnavailableWhileInProc;
    internal static string SQL_NestedTransactionScopesNotSupported;
    internal static string SQL_NotAvailableOnContextConnection;
    internal static string SQL_NotificationsNotAvailableOnContextConnection;
    internal static string SQL_UnexpectedSmiEvent;
    internal static string SQL_UserInstanceNotAvailableInProc;
    internal static string SQL_ArgumentLengthMismatch;
    internal static string SQL_InvalidSqlDbTypeWithOneAllowedType;
    internal static string SQL_PipeErrorRequiresSendEnd;
    internal static string SQL_TooManyValues;
    internal static string SQL_StreamWriteNotSupported;
    internal static string SQL_StreamReadNotSupported;
    internal static string SQL_StreamSeekNotSupported;
    internal static string SQL_ExClientConnectionId;
    internal static string SQL_ExErrorNumberStateClass;
    internal static string SQL_ExOriginalClientConnectionId;
    internal static string SQL_ExRoutingDestination;
    internal static string SqlMisc_NullString;
    internal static string SqlMisc_MessageString;
    internal static string SqlMisc_ArithOverflowMessage;
    internal static string SqlMisc_DivideByZeroMessage;
    internal static string SqlMisc_NullValueMessage;
    internal static string SqlMisc_TruncationMessage;
    internal static string SqlMisc_DateTimeOverflowMessage;
    internal static string SqlMisc_ConcatDiffCollationMessage;
    internal static string SqlMisc_CompareDiffCollationMessage;
    internal static string SqlMisc_InvalidFlagMessage;
    internal static string SqlMisc_NumeToDecOverflowMessage;
    internal static string SqlMisc_ConversionOverflowMessage;
    internal static string SqlMisc_InvalidDateTimeMessage;
    internal static string SqlMisc_TimeZoneSpecifiedMessage;
    internal static string SqlMisc_InvalidArraySizeMessage;
    internal static string SqlMisc_InvalidPrecScaleMessage;
    internal static string SqlMisc_FormatMessage;
    internal static string SqlMisc_SqlTypeMessage;
    internal static string SqlMisc_LenTooLargeMessage;
    internal static string SqlMisc_StreamErrorMessage;
    internal static string SqlMisc_StreamClosedMessage;
    internal static string SqlMisc_NoBufferMessage;
    internal static string SqlMisc_SetNonZeroLenOnNullMessage;
    internal static string SqlMisc_BufferInsufficientMessage;
    internal static string SqlMisc_WriteNonZeroOffsetOnNullMessage;
    internal static string SqlMisc_WriteOffsetLargerThanLenMessage;
    internal static string SqlMisc_TruncationMaxDataMessage;
    internal static string SqlMisc_InvalidFirstDayMessage;
    internal static string SqlMisc_NotFilledMessage;
    internal static string SqlMisc_AlreadyFilledMessage;
    internal static string SqlMisc_ClosedXmlReaderMessage;
    internal static string SqlMisc_InvalidOpStreamClosed;
    internal static string SqlMisc_InvalidOpStreamNonWritable;
    internal static string SqlMisc_InvalidOpStreamNonReadable;
    internal static string SqlMisc_InvalidOpStreamNonSeekable;
    internal static string SqlMisc_SubclassMustOverride;
    internal static string Sql_CanotCreateNormalizer;
    internal static string Sql_InternalError;
    internal static string Sql_NullCommandText;
    internal static string Sql_MismatchedMetaDataDirectionArrayLengths;
    internal static string ADP_AdapterMappingExceptionMessage;
    internal static string ADP_DataAdapterExceptionMessage;
    internal static string ADP_DBConcurrencyExceptionMessage;
    internal static string ADP_OperationAborted;
    internal static string ADP_OperationAbortedExceptionMessage;
    internal static string DataAdapter_AcceptChangesDuringFill;
    internal static string DataAdapter_AcceptChangesDuringUpdate;
    internal static string DataAdapter_ContinueUpdateOnError;
    internal static string DataAdapter_FillLoadOption;
    internal static string DataAdapter_MissingMappingAction;
    internal static string DataAdapter_MissingSchemaAction;
    internal static string DataAdapter_TableMappings;
    internal static string DataAdapter_FillError;
    internal static string DataAdapter_ReturnProviderSpecificTypes;
    internal static string DataColumnMapping_DataSetColumn;
    internal static string DataColumnMapping_SourceColumn;
    internal static string DataColumnMappings_Count;
    internal static string DataColumnMappings_Item;
    internal static string DataTableMapping_ColumnMappings;
    internal static string DataTableMapping_DataSetTable;
    internal static string DataTableMapping_SourceTable;
    internal static string DataTableMappings_Count;
    internal static string DataTableMappings_Item;
    internal static string DbDataAdapter_DeleteCommand;
    internal static string DbDataAdapter_InsertCommand;
    internal static string DbDataAdapter_SelectCommand;
    internal static string DbDataAdapter_UpdateCommand;
    internal static string DbDataAdapter_RowUpdated;
    internal static string DbDataAdapter_RowUpdating;
    internal static string DbDataAdapter_UpdateBatchSize;
    internal static string DbTable_Connection;
    internal static string DbTable_DeleteCommand;
    internal static string DbTable_InsertCommand;
    internal static string DbTable_SelectCommand;
    internal static string DbTable_UpdateCommand;
    internal static string DbTable_ReturnProviderSpecificTypes;
    internal static string DbTable_TableMapping;
    internal static string DbTable_ConflictDetection;
    internal static string DbTable_UpdateBatchSize;
    internal static string DbConnectionString_ConnectionString;
    internal static string DbConnectionString_Driver;
    internal static string DbConnectionString_DSN;
    internal static string DbConnectionString_AdoNetPooler;
    internal static string DbConnectionString_FileName;
    internal static string DbConnectionString_OleDbServices;
    internal static string DbConnectionString_Provider;
    internal static string DbConnectionString_ApplicationName;
    internal static string DbConnectionString_AsynchronousProcessing;
    internal static string DbConnectionString_AttachDBFilename;
    internal static string DbConnectionString_ConnectTimeout;
    internal static string DbConnectionString_ConnectionReset;
    internal static string DbConnectionString_ContextConnection;
    internal static string DbConnectionString_CurrentLanguage;
    internal static string DbConnectionString_DataSource;
    internal static string DbConnectionString_Encrypt;
    internal static string DbConnectionString_Enlist;
    internal static string DbConnectionString_InitialCatalog;
    internal static string DbConnectionString_FailoverPartner;
    internal static string DbConnectionString_IntegratedSecurity;
    internal static string DbConnectionString_LoadBalanceTimeout;
    internal static string DbConnectionString_MaxPoolSize;
    internal static string DbConnectionString_MinPoolSize;
    internal static string DbConnectionString_MultipleActiveResultSets;
    internal static string DbConnectionString_MultiSubnetFailover;
    internal static string DbConnectionString_TransparentNetworkIPResolution;
    internal static string DbConnectionString_NetworkLibrary;
    internal static string DbConnectionString_PacketSize;
    internal static string DbConnectionString_Password;
    internal static string DbConnectionString_PersistSecurityInfo;
    internal static string DbConnectionString_Pooling;
    internal static string DbConnectionString_Replication;
    internal static string DbConnectionString_TransactionBinding;
    internal static string DbConnectionString_TrustServerCertificate;
    internal static string DbConnectionString_TypeSystemVersion;
    internal static string DbConnectionString_UserID;
    internal static string DbConnectionString_UserInstance;
    internal static string DbConnectionString_WorkstationID;
    internal static string DbConnectionString_ApplicationIntent;
    internal static string DbConnectionString_ConnectRetryCount;
    internal static string DbConnectionString_ConnectRetryInterval;
    internal static string DbConnectionString_Authentication;
    internal static string OdbcConnection_ConnectionString;
    internal static string OdbcConnection_ConnectionTimeout;
    internal static string OdbcConnection_Database;
    internal static string OdbcConnection_DataSource;
    internal static string OdbcConnection_Driver;
    internal static string OdbcConnection_ServerVersion;
    internal static string OleDbConnection_ConnectionString;
    internal static string OleDbConnection_ConnectionTimeout;
    internal static string OleDbConnection_Database;
    internal static string OleDbConnection_DataSource;
    internal static string OleDbConnection_Provider;
    internal static string OleDbConnection_ServerVersion;
    internal static string SqlConnection_AccessToken;
    internal static string SqlConnection_Asynchronous;
    internal static string SqlConnection_Replication;
    internal static string SqlConnection_ConnectionString;
    internal static string SqlConnection_ConnectionTimeout;
    internal static string SqlConnection_Database;
    internal static string SqlConnection_DataSource;
    internal static string SqlConnection_PacketSize;
    internal static string SqlConnection_ServerVersion;
    internal static string SqlConnection_WorkstationId;
    internal static string SqlConnection_StatisticsEnabled;
    internal static string SqlConnection_CustomColumnEncryptionKeyStoreProviders;
    internal static string SqlConnection_ClientConnectionId;
    internal static string SqlConnection_Credential;
    internal static string DbConnection_InfoMessage;
    internal static string DbCommand_CommandText;
    internal static string DbCommand_CommandType;
    internal static string DbCommand_Connection;
    internal static string DbCommand_Parameters;
    internal static string DbCommand_Transaction;
    internal static string DbCommand_UpdatedRowSource;
    internal static string DbCommand_StatementCompleted;
    internal static string SqlCommand_Notification;
    internal static string SqlCommand_NotificationAutoEnlist;
    internal static string DbCommandBuilder_ConflictOption;
    internal static string DbCommandBuilder_CatalogLocation;
    internal static string DbCommandBuilder_CatalogSeparator;
    internal static string DbCommandBuilder_SchemaSeparator;
    internal static string DbCommandBuilder_QuotePrefix;
    internal static string DbCommandBuilder_QuoteSuffix;
    internal static string DbCommandBuilder_DataAdapter;
    internal static string DbCommandBuilder_SchemaLocation;
    internal static string DbCommandBuilder_SetAllValues;
    internal static string OdbcCommandBuilder_DataAdapter;
    internal static string OdbcCommandBuilder_QuotePrefix;
    internal static string OdbcCommandBuilder_QuoteSuffix;
    internal static string OleDbCommandBuilder_DataAdapter;
    internal static string OleDbCommandBuilder_DecimalSeparator;
    internal static string OleDbCommandBuilder_QuotePrefix;
    internal static string OleDbCommandBuilder_QuoteSuffix;
    internal static string SqlCommandBuilder_DataAdapter;
    internal static string SqlCommandBuilder_DecimalSeparator;
    internal static string SqlCommandBuilder_QuotePrefix;
    internal static string SqlCommandBuilder_QuoteSuffix;
    internal static string DbDataParameter_Precision;
    internal static string DbDataParameter_Scale;
    internal static string OdbcParameter_OdbcType;
    internal static string OleDbParameter_OleDbType;
    internal static string SqlParameter_ParameterName;
    internal static string SqlParameter_SqlDbType;
    internal static string SqlParameter_TypeName;
    internal static string SqlParameter_Offset;
    internal static string SqlParameter_XmlSchemaCollectionDatabase;
    internal static string SqlParameter_XmlSchemaCollectionOwningSchema;
    internal static string SqlParameter_XmlSchemaCollectionName;
    internal static string SqlParameter_UnsupportedTVPOutputParameter;
    internal static string SqlParameter_DBNullNotSupportedForTVP;
    internal static string SqlParameter_InvalidTableDerivedPrecisionForTvp;
    internal static string SqlParameter_UnexpectedTypeNameForNonStruct;
    internal static string MetaType_SingleValuedStructNotSupported;
    internal static string NullSchemaTableDataTypeNotSupported;
    internal static string InvalidSchemaTableOrdinals;
    internal static string SQL_EnumeratedRecordMetaDataChanged;
    internal static string SQL_EnumeratedRecordFieldCountChanged;
    internal static string SQLUDT_MaxByteSizeValue;
    internal static string SQLUDT_Unexpected;
    internal static string SQLUDT_InvalidDbId;
    internal static string SQLUDT_CantLoadAssembly;
    internal static string SQLUDT_InvalidUdtTypeName;
    internal static string SQLUDT_UnexpectedUdtTypeName;
    internal static string SQLUDT_InvalidSqlType;
    internal static string SQLUDT_InWhereClause;
    internal static string SqlUdt_InvalidUdtMessage;
    internal static string SqlUdtReason_MultipleSerFormats;
    internal static string SqlUdtReason_CannotSupportNative;
    internal static string SqlUdtReason_CannotSupportUserDefined;
    internal static string SqlUdtReason_NotSerializable;
    internal static string SqlUdtReason_NoPublicConstructors;
    internal static string SqlUdtReason_NotNullable;
    internal static string SqlUdtReason_NoPublicConstructor;
    internal static string SqlUdtReason_NoUdtAttribute;
    internal static string SqlUdtReason_MaplessNotYetSupported;
    internal static string SqlUdtReason_ParseMethodMissing;
    internal static string SqlUdtReason_ToStringMethodMissing;
    internal static string SqlUdtReason_NullPropertyMissing;
    internal static string SqlUdtReason_NativeFormatNoFieldSupport;
    internal static string SqlUdtReason_TypeNotPublic;
    internal static string SqlUdtReason_NativeUdtNotSequentialLayout;
    internal static string SqlUdtReason_NativeUdtMaxByteSize;
    internal static string SqlUdtReason_NonSerializableField;
    internal static string SqlUdtReason_NativeFormatExplictLayoutNotAllowed;
    internal static string SqlUdtReason_MultivaluedAssemblyId;
    internal static string SQLTVP_TableTypeCanOnlyBeParameter;
    internal static string SqlFileStream_InvalidPath;
    internal static string SqlFileStream_InvalidParameter;
    internal static string SqlFileStream_FileAlreadyInTransaction;
    internal static string SqlFileStream_PathNotValidDiskResource;
    internal static string SqlDelegatedTransaction_PromotionFailed;
    internal static string SqlDependency_SqlDependency;
    internal static string SqlDependency_HasChanges;
    internal static string SqlDependency_Id;
    internal static string SqlDependency_OnChange;
    internal static string SqlDependency_AddCommandDependency;
    internal static string SqlDependency_Duplicate;
    internal static string SQLNotify_AlreadyHasCommand;
    internal static string SqlNotify_SqlDepCannotBeCreatedInProc;
    internal static string SqlDependency_DatabaseBrokerDisabled;
    internal static string SqlDependency_DefaultOptionsButNoStart;
    internal static string SqlDependency_EventNoDuplicate;
    internal static string SqlDependency_DuplicateStart;
    internal static string SqlDependency_IdMismatch;
    internal static string SqlDependency_NoMatchingServerStart;
    internal static string SqlDependency_NoMatchingServerDatabaseStart;
    internal static string SqlDependency_InvalidTimeout;
    internal static string SQLNotify_ErrorFormat;
    internal static string SqlMetaData_NoMetadata;
    internal static string SqlMetaData_InvalidSqlDbTypeForConstructorFormat;
    internal static string SqlMetaData_NameTooLong;
    internal static string SqlMetaData_SpecifyBothSortOrderAndOrdinal;
    internal static string SqlProvider_InvalidDataColumnType;
    internal static string SqlProvider_InvalidDataColumnMaxLength;
    internal static string SqlProvider_NotEnoughColumnsInStructuredType;
    internal static string SqlProvider_DuplicateSortOrdinal;
    internal static string SqlProvider_MissingSortOrdinal;
    internal static string SqlProvider_SortOrdinalGreaterThanFieldCount;
    internal static string IEnumerableOfSqlDataRecordHasNoRows;
    internal static string SqlPipe_CommandHookedUpToNonContextConnection;
    internal static string SqlPipe_MessageTooLong;
    internal static string SqlPipe_IsBusy;
    internal static string SqlPipe_AlreadyHasAnOpenResultSet;
    internal static string SqlPipe_DoesNotHaveAnOpenResultSet;
    internal static string SNI_PN0;
    internal static string SNI_PN1;
    internal static string SNI_PN2;
    internal static string SNI_PN3;
    internal static string SNI_PN4;
    internal static string SNI_PN5;
    internal static string SNI_PN6;
    internal static string SNI_PN7;
    internal static string SNI_PN8;
    internal static string SNI_PN9;
    internal static string SNI_PN10;
    internal static string SNI_ERROR_1;
    internal static string SNI_ERROR_2;
    internal static string SNI_ERROR_3;
    internal static string SNI_ERROR_4;
    internal static string SNI_ERROR_5;
    internal static string SNI_ERROR_6;
    internal static string SNI_ERROR_7;
    internal static string SNI_ERROR_8;
    internal static string SNI_ERROR_9;
    internal static string SNI_ERROR_10;
    internal static string SNI_ERROR_11;
    internal static string SNI_ERROR_12;
    internal static string SNI_ERROR_13;
    internal static string SNI_ERROR_14;
    internal static string SNI_ERROR_15;
    internal static string SNI_ERROR_16;
    internal static string SNI_ERROR_17;
    internal static string SNI_ERROR_18;
    internal static string SNI_ERROR_19;
    internal static string SNI_ERROR_20;
    internal static string SNI_ERROR_21;
    internal static string SNI_ERROR_22;
    internal static string SNI_ERROR_23;
    internal static string SNI_ERROR_24;
    internal static string SNI_ERROR_25;
    internal static string SNI_ERROR_26;
    internal static string SNI_ERROR_27;
    internal static string SNI_ERROR_28;
    internal static string SNI_ERROR_29;
    internal static string SNI_ERROR_30;
    internal static string SNI_ERROR_31;
    internal static string SNI_ERROR_32;
    internal static string SNI_ERROR_33;
    internal static string SNI_ERROR_34;
    internal static string SNI_ERROR_35;
    internal static string SNI_ERROR_36;
    internal static string SNI_ERROR_37;
    internal static string SNI_ERROR_38;
    internal static string SNI_ERROR_39;
    internal static string SNI_ERROR_40;
    internal static string SNI_ERROR_41;
    internal static string SNI_ERROR_42;
    internal static string SNI_ERROR_43;
    internal static string SNI_ERROR_44;
    internal static string SNI_ERROR_47;
    internal static string SNI_ERROR_48;
    internal static string SNI_ERROR_49;
    internal static string SNI_ERROR_50;
    internal static string SNI_ERROR_51;
    internal static string SNI_ERROR_52;
    internal static string SNI_ERROR_53;
    internal static string SNI_ERROR_54;
    internal static string SNI_ERROR_55;
    internal static string SNI_ERROR_56;
    internal static string SNI_ERROR_57;
    internal static string Snix_Connect;
    internal static string Snix_PreLoginBeforeSuccessfullWrite;
    internal static string Snix_PreLogin;
    internal static string Snix_LoginSspi;
    internal static string Snix_Login;
    internal static string Snix_EnableMars;
    internal static string Snix_AutoEnlist;
    internal static string Snix_GetMarsSession;
    internal static string Snix_Execute;
    internal static string Snix_Read;
    internal static string Snix_Close;
    internal static string Snix_SendRows;
    internal static string Snix_ProcessSspi;
    internal static string LocalDB_CreateFailed;
    internal static string LocalDB_BadConfigSectionType;
    internal static string LocalDB_FailedGetDLLHandle;
    internal static string LocalDB_MethodNotFound;
    internal static string LocalDB_UnobtainableMessage;
    internal static string LocalDB_InvalidVersion;
    internal static string TCE_InvalidKeyEncryptionAlgorithm;
    internal static string TCE_InvalidKeyEncryptionAlgorithmSysErr;
    internal static string TCE_NullKeyEncryptionAlgorithm;
    internal static string TCE_NullKeyEncryptionAlgorithmSysErr;
    internal static string TCE_EmptyColumnEncryptionKey;
    internal static string TCE_NullColumnEncryptionKey;
    internal static string TCE_EmptyEncryptedColumnEncryptionKey;
    internal static string TCE_NullEncryptedColumnEncryptionKey;
    internal static string TCE_LargeCertificatePathLength;
    internal static string TCE_LargeCertificatePathLengthSysErr;
    internal static string TCE_NullCertificatePath;
    internal static string TCE_NullCertificatePathSysErr;
    internal static string TCE_NullCspPath;
    internal static string TCE_NullCspPathSysErr;
    internal static string TCE_NullCngPath;
    internal static string TCE_NullCngPathSysErr;
    internal static string TCE_InvalidCertificatePath;
    internal static string TCE_InvalidCertificatePathSysErr;
    internal static string TCE_InvalidCspPath;
    internal static string TCE_InvalidCspPathSysErr;
    internal static string TCE_InvalidCngPath;
    internal static string TCE_InvalidCngPathSysErr;
    internal static string TCE_InvalidCertificateLocation;
    internal static string TCE_InvalidCertificateLocationSysErr;
    internal static string TCE_InvalidCertificateStore;
    internal static string TCE_InvalidCertificateStoreSysErr;
    internal static string TCE_EmptyCertificateThumbprint;
    internal static string TCE_EmptyCertificateThumbprintSysErr;
    internal static string TCE_EmptyCspName;
    internal static string TCE_EmptyCspNameSysErr;
    internal static string TCE_EmptyCngName;
    internal static string TCE_EmptyCngNameSysErr;
    internal static string TCE_EmptyCspKeyId;
    internal static string TCE_EmptyCspKeyIdSysErr;
    internal static string TCE_EmptyCngKeyId;
    internal static string TCE_EmptyCngKeyIdSysErr;
    internal static string TCE_InvalidCspName;
    internal static string TCE_InvalidCspNameSysErr;
    internal static string TCE_InvalidCspKeyId;
    internal static string TCE_InvalidCspKeyIdSysErr;
    internal static string TCE_InvalidCngKey;
    internal static string TCE_InvalidCngKeySysErr;
    internal static string TCE_CertificateNotFound;
    internal static string TCE_CertificateNotFoundSysErr;
    internal static string TCE_InvalidAlgorithmVersionInEncryptedCEK;
    internal static string TCE_InvalidCiphertextLengthInEncryptedCEK;
    internal static string TCE_InvalidCiphertextLengthInEncryptedCEKCsp;
    internal static string TCE_InvalidCiphertextLengthInEncryptedCEKCng;
    internal static string TCE_InvalidSignatureInEncryptedCEK;
    internal static string TCE_InvalidSignatureInEncryptedCEKCsp;
    internal static string TCE_InvalidSignatureInEncryptedCEKCng;
    internal static string TCE_InvalidCertificateSignature;
    internal static string TCE_InvalidSignature;
    internal static string TCE_CertificateWithNoPrivateKey;
    internal static string TCE_CertificateWithNoPrivateKeySysErr;
    internal static string TCE_NullColumnEncryptionKeySysErr;
    internal static string TCE_InvalidKeySize;
    internal static string TCE_InvalidEncryptionType;
    internal static string TCE_NullPlainText;
    internal static string TCE_VeryLargeCiphertext;
    internal static string TCE_NullCipherText;
    internal static string TCE_InvalidCipherTextSize;
    internal static string TCE_InvalidAlgorithmVersion;
    internal static string TCE_InvalidAuthenticationTag;
    internal static string TCE_NullColumnEncryptionAlgorithm;
    internal static string TCE_UnexpectedDescribeParamFormatParameterMetadata;
    internal static string TCE_UnexpectedDescribeParamFormatAttestationInfo;
    internal static string TCE_InvalidEncryptionKeyOrdinalEnclaveMetadata;
    internal static string TCE_InvalidEncryptionKeyOrdinalParameterMetadata;
    internal static string TCE_MultipleRowsReturnedForAttestationInfo;
    internal static string TCE_ParamEncryptionMetaDataMissing;
    internal static string TCE_ProcEncryptionMetaDataMissing;
    internal static string TCE_ParamEncryptionFailed;
    internal static string TCE_ColumnDecryptionFailed;
    internal static string TCE_ParamDecryptionFailed;
    internal static string TCE_ColumnMasterKeySignatureVerificationFailed;
    internal static string TCE_ColumnMasterKeySignatureNotFound;
    internal static string TCE_UnableToVerifyColumnMasterKeySignature;
    internal static string TCE_UnknownColumnEncryptionAlgorithm;
    internal static string TCE_UnknownColumnEncryptionAlgorithmId;
    internal static string TCE_UnsupportedNormalizationVersion;
    internal static string TCE_UnrecognizedKeyStoreProviderName;
    internal static string TCE_KeyDecryptionFailedCertStore;
    internal static string TCE_UntrustedKeyPath;
    internal static string TCE_KeyDecryptionFailed;
    internal static string TCE_UnsupportedDatatype;
    internal static string TCE_DecryptionFailed;
    internal static string TCE_ExceptionWhenGeneratingEnclavePackage;
    internal static string TCE_InvalidKeyIdUnableToCastToUnsignedShort;
    internal static string TCE_InvalidDatabaseIdUnableToCastToUnsignedInt;
    internal static string TCE_InvalidAttestationParameterUnableToConvertToUnsignedInt;
    internal static string TCE_InvalidKeyStoreProviderName;
    internal static string TCE_FailedToEncryptRegisterRulesBytePackage;
    internal static string TCE_OffsetOutOfBounds;
    internal static string TCE_InsufficientBuffer;
    internal static string TCE_ColumnEncryptionKeysNotFound;
    internal static string TCE_NullEnclaveSessionDuringQueryExecution;
    internal static string TCE_NullEnclavePackageForEnclaveBasedQuery;
    internal static string TCE_AttestationInfoNotReturnedFromSQLServer;
    internal static string TCE_UnableToEstablishSecureChannel;
    internal static string TCE_NullArgumentInConstructorInternal;
    internal static string TCE_EmptyArgumentInConstructorInternal;
    internal static string TCE_NullArgumentInternal;
    internal static string TCE_EmptyArgumentInternal;
    internal static string TCE_DbConnectionString_EnclaveAttestationUrl;
    internal static string TCE_CannotGetSqlColumnEncryptionEnclaveProviderConfig;
    internal static string TCE_CannotCreateSqlColumnEncryptionEnclaveProvider;
    internal static string TCE_SqlColumnEncryptionEnclaveProviderNameCannotBeEmpty;
    internal static string TCE_NoAttestationUrlSpecifiedForEnclaveBasedQuerySpDescribe;
    internal static string TCE_NoAttestationUrlSpecifiedForEnclaveBasedQueryGeneratingEnclavePackage;
    internal static string TCE_EnclaveTypeNullForEnclaveBasedQuery;
    internal static string TCE_EnclaveProvidersNotConfiguredForEnclaveBasedQuery;
    internal static string TCE_EnclaveProviderNotFound;
    internal static string TCE_NullEnclaveSessionReturnedFromProvider;
    internal static string TCE_ParamInvalidForceColumnEncryptionSetting;
    internal static string TCE_ParamUnExpectedEncryptionMetadata;
    internal static string TCE_NotSupportedByServer;
    internal static string TCE_EnclaveComputationsNotSupported;
    internal static string TCE_EnclaveTypeNotReturned;
    internal static string TCE_BatchedUpdateColumnEncryptionSettingMismatch;
    internal static string TCE_StreamNotSupportOnEncryptedColumn;
    internal static string TCE_SequentialAccessNotSupportedOnEncryptedColumn;
    internal static string TCE_CanOnlyCallOnce;
    internal static string TCE_NullCustomKeyStoreProviderDictionary;
    internal static string TCE_InvalidCustomKeyStoreProviderName;
    internal static string TCE_NullProviderValue;
    internal static string TCE_EmptyProviderName;
    internal static string TCE_SqlCommand_ColumnEncryptionSetting;
    internal static string TCE_DbConnectionString_ColumnEncryptionSetting;
    internal static string TCE_SqlParameter_ForceColumnEncryption;
    internal static string TCE_SqlConnection_TrustedColumnMasterKeyPaths;
    internal static string SQLROR_RecursiveRoutingNotSupported;
    internal static string SQLROR_FailoverNotSupported;
    internal static string SQLROR_UnexpectedRoutingInfo;
    internal static string SQLROR_InvalidRoutingInfo;
    internal static string SQLROR_TimeoutAfterRoutingInfo;
    internal static string SQLCR_InvalidConnectRetryCountValue;
    internal static string SQLCR_InvalidConnectRetryIntervalValue;
    internal static string SQLCR_NextAttemptWillExceedQueryTimeout;
    internal static string SQLCR_EncryptionChanged;
    internal static string SQLCR_TDSVestionNotPreserved;
    internal static string SQLCR_AllAttemptsFailed;
    internal static string SQLCR_UnrecoverableServer;
    internal static string SQLCR_UnrecoverableClient;
    internal static string SQLCR_NoCRAckAtReconnection;
    internal static string DbConnectionString_PoolBlockingPeriod;
    internal static string AZURESQL_GenericEndpoint;
    internal static string AZURESQL_GermanEndpoint;
    internal static string AZURESQL_UsGovEndpoint;
    internal static string AZURESQL_ChinaEndpoint;
    internal static string TCE_SqlConnection_ColumnEncryptionQueryMetadataCacheEnabled;
    internal static string TCE_SqlConnection_ColumnEncryptionKeyCacheTtl;
    internal static string SQL_Timeout_Execution;
    public static ResourceManager Resources { get; }
    private static Res();
    public static ResourceManager get_Resources();
    public static string GetString(string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(string name, Boolean& usedFallback);
    public static object GetObject(string name);
}
[AttributeUsageAttribute("32767")]
internal class System.Data.ResCategoryAttribute : CategoryAttribute {
    public ResCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class System.Data.ResDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public ResDescriptionAttribute(string description);
    public virtual string get_Description();
}
public class System.Data.RowNotInTableException : DataException {
    protected RowNotInTableException(SerializationInfo info, StreamingContext context);
    public RowNotInTableException(string s);
    public RowNotInTableException(string message, Exception innerException);
}
public enum System.Data.Rule : Enum {
    public int value__;
    public static Rule None;
    public static Rule Cascade;
    public static Rule SetNull;
    public static Rule SetDefault;
}
internal enum System.Data.SchemaFormat : Enum {
    public int value__;
    public static SchemaFormat Public;
    public static SchemaFormat Remoting;
    public static SchemaFormat WebService;
    public static SchemaFormat RemotingSkipSchema;
    public static SchemaFormat WebServiceSkipSchema;
}
public enum System.Data.SchemaSerializationMode : Enum {
    public int value__;
    public static SchemaSerializationMode IncludeSchema;
    public static SchemaSerializationMode ExcludeSchema;
}
public enum System.Data.SchemaType : Enum {
    public int value__;
    public static SchemaType Source;
    public static SchemaType Mapped;
}
internal class System.Data.Select : object {
    public Select(DataTable table, string filterExpression, string sort, DataViewRowState recordStates);
    public DataRow[] SelectRows();
    public DataRow[] GetRows();
}
public enum System.Data.SerializationFormat : Enum {
    public int value__;
    public static SerializationFormat Xml;
    public static SerializationFormat Binary;
}
internal class System.Data.SimpleType : object {
    internal string enumeration;
    internal string BaseType { get; }
    internal XmlQualifiedName XmlBaseType { get; }
    internal string Name { get; }
    internal string Namespace { get; }
    internal int Length { get; }
    internal int MaxLength { get; internal set; }
    internal SimpleType BaseSimpleType { get; }
    public string SimpleTypeQualifiedName { get; }
    internal SimpleType(string baseType);
    internal SimpleType(XmlSchemaSimpleType node);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    internal void LoadTypeValues(XmlSchemaSimpleType node);
    internal bool IsPlainString();
    internal string get_BaseType();
    internal XmlQualifiedName get_XmlBaseType();
    internal string get_Name();
    internal string get_Namespace();
    internal int get_Length();
    internal int get_MaxLength();
    internal void set_MaxLength(int value);
    internal SimpleType get_BaseSimpleType();
    public string get_SimpleTypeQualifiedName();
    internal string QualifiedName(string name);
    internal XmlNode ToNode(XmlDocument dc, Hashtable prefixes, bool inRemoting);
    internal static SimpleType CreateEnumeratedType(string values);
    internal static SimpleType CreateByteArrayType(string encoding);
    internal static SimpleType CreateLimitedStringType(int length);
    internal static SimpleType CreateSimpleType(StorageType typeCode, Type type);
    internal string HasConflictingDefinition(SimpleType otherSimpleType);
    internal bool CanHaveMaxLength();
    internal void ConvertToAnnonymousSimpleType();
}
public class System.Data.Sql.SqlDataSourceEnumerator : DbDataSourceEnumerator {
    internal static string ServerName;
    internal static string InstanceName;
    internal static string IsClustered;
    internal static string Version;
    public static SqlDataSourceEnumerator Instance { get; }
    private static SqlDataSourceEnumerator();
    public static SqlDataSourceEnumerator get_Instance();
    public virtual DataTable GetDataSources();
}
internal class System.Data.Sql.SqlGenericUtil : object {
    internal static Exception NullCommandText();
    internal static Exception MismatchedMetaDataDirectionArrayLengths();
}
public class System.Data.Sql.SqlNotificationRequest : object {
    public string Options { get; public set; }
    public int Timeout { get; public set; }
    public string UserData { get; public set; }
    public SqlNotificationRequest(string userData, string options, int timeout);
    public string get_Options();
    public void set_Options(string value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public string get_UserData();
    public void set_UserData(string value);
}
internal class System.Data.SqlClient._ColumnMapping : object {
    internal int _sourceColumnOrdinal;
    internal _SqlMetaData _metadata;
    internal _ColumnMapping(int columnId, _SqlMetaData metadata);
}
internal class System.Data.SqlClient._SqlMetaData : SqlMetaDataPriv {
    internal string column;
    internal string baseColumn;
    internal MultiPartTableName multiPartTableName;
    internal int ordinal;
    internal byte updatability;
    internal byte tableNum;
    internal bool isDifferentName;
    internal bool isKey;
    internal bool isHidden;
    internal bool isExpression;
    internal bool isIdentity;
    internal bool isColumnSet;
    internal byte op;
    internal ushort operand;
    internal string serverName { get; }
    internal string catalogName { get; }
    internal string schemaName { get; }
    internal string tableName { get; }
    internal bool IsNewKatmaiDateTimeType { get; }
    internal bool IsLargeUdt { get; }
    internal _SqlMetaData(int ordinal);
    internal string get_serverName();
    internal string get_catalogName();
    internal string get_schemaName();
    internal string get_tableName();
    internal bool get_IsNewKatmaiDateTimeType();
    internal bool get_IsLargeUdt();
    public sealed virtual object Clone();
}
[DefaultMemberAttribute("Item")]
internal class System.Data.SqlClient._SqlMetaDataSet : object {
    internal ushort id;
    internal Int32[] indexMap;
    internal int visibleColumns;
    internal DataTable schemaTable;
    internal Nullable`1<SqlTceCipherInfoTable> cekTable;
    internal _SqlMetaData[] metaDataArray;
    internal int Length { get; }
    internal _SqlMetaData Item { get; internal set; }
    internal _SqlMetaDataSet(int count, Nullable`1<SqlTceCipherInfoTable> cipherTable);
    internal int get_Length();
    internal _SqlMetaData get_Item(int index);
    internal void set_Item(int index, _SqlMetaData value);
    public sealed virtual object Clone();
}
internal class System.Data.SqlClient._SqlMetaDataSetCollection : object {
    internal _SqlMetaDataSet metaDataSet;
    internal void SetAltMetaData(_SqlMetaDataSet altMetaDataSet);
    internal _SqlMetaDataSet GetAltMetaData(int id);
    public sealed virtual object Clone();
}
internal class System.Data.SqlClient._SqlRPC : object {
    internal string rpcName;
    internal string databaseName;
    internal ushort ProcID;
    internal ushort options;
    internal SqlParameter[] parameters;
    internal Byte[] paramoptions;
    internal Nullable`1<int> recordsAffected;
    internal int cumulativeRecordsAffected;
    internal int errorsIndexStart;
    internal int errorsIndexEnd;
    internal SqlErrorCollection errors;
    internal int warningsIndexStart;
    internal int warningsIndexEnd;
    internal SqlErrorCollection warnings;
    internal bool needsFetchParameterEncryptionMetadata;
    internal string GetCommandTextOrRpcName();
}
internal class System.Data.SqlClient.ActiveDirectoryAuthentication : object {
    internal static string AdoClientId;
    internal static string AdalGetAccessTokenFunctionName;
    internal static int GetAccessTokenSuccess;
    internal static int GetAccessTokenInvalidGrant;
    internal static int GetAccessTokenTansisentError;
    internal static int GetAccessTokenOtherError;
}
internal class System.Data.SqlClient.ActiveDirectoryAuthenticationTimeoutRetryHelper : object {
    public ActiveDirectoryAuthenticationTimeoutRetryState State { get; public set; }
    public SqlFedAuthToken CachedToken { get; public set; }
    public ActiveDirectoryAuthenticationTimeoutRetryState get_State();
    public void set_State(ActiveDirectoryAuthenticationTimeoutRetryState value);
    public SqlFedAuthToken get_CachedToken();
    public void set_CachedToken(SqlFedAuthToken value);
    public bool CanRetryWithSqlException(SqlException sqlex);
}
internal enum System.Data.SqlClient.ActiveDirectoryAuthenticationTimeoutRetryState : Enum {
    public int value__;
    public static ActiveDirectoryAuthenticationTimeoutRetryState NotStarted;
    public static ActiveDirectoryAuthenticationTimeoutRetryState Retrying;
    public static ActiveDirectoryAuthenticationTimeoutRetryState HasLoggedIn;
}
internal class System.Data.SqlClient.ActiveDirectoryNativeAuthenticationProvider : SqlAuthenticationProvider {
    public virtual Task`1<SqlAuthenticationToken> AcquireTokenAsync(SqlAuthenticationParameters parameters);
    public virtual bool IsSupported(SqlAuthenticationMethod authentication);
    public virtual void BeforeLoad(SqlAuthenticationMethod authentication);
    public virtual void BeforeUnload(SqlAuthenticationMethod authentication);
}
public enum System.Data.SqlClient.ApplicationIntent : Enum {
    public int value__;
    public static ApplicationIntent ReadWrite;
    public static ApplicationIntent ReadOnly;
}
internal class System.Data.SqlClient.AssemblyCache : object {
    internal static int GetLength(object inst);
    internal static SqlUdtInfo GetInfoFromType(Type t);
}
internal static class System.Data.SqlClient.AsyncHelper : object {
    internal static Task CreateContinuationTask(Task task, Action onSuccess, SqlInternalConnectionTds connectionToDoom, Action`1<Exception> onFailure);
    internal static Task CreateContinuationTask(Task task, Action`2<T1, T2> onSuccess, T1 arg1, T2 arg2, SqlInternalConnectionTds connectionToDoom, Action`1<Exception> onFailure);
    internal static void ContinueTask(Task task, TaskCompletionSource`1<object> completion, Action onSuccess, SqlInternalConnectionTds connectionToDoom, Action`1<Exception> onFailure, Action onCancellation, Func`2<Exception, Exception> exceptionConverter, SqlConnection connectionToAbort);
    internal static void WaitForCompletion(Task task, int timeout, Action onTimeout, bool rethrowExceptions);
    internal static void SetTimeoutException(TaskCompletionSource`1<object> completion, int timeout, Func`1<Exception> exc, CancellationToken ctoken);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.SqlClient.BulkCopySimpleResultSet : object {
    internal Result Item { get; }
    internal Result get_Item(int idx);
    internal void SetMetaData(_SqlMetaDataSet metadata);
    internal Int32[] CreateIndexMap();
    internal Object[] CreateRowBuffer();
}
internal enum System.Data.SqlClient.CallbackType : Enum {
    public int value__;
    public static CallbackType Read;
    public static CallbackType Write;
}
internal class System.Data.SqlClient.ColumnEncryptionKeyInfo : object {
    internal int KeyId;
    internal int DatabaseId;
    internal Byte[] DecryptedKeyBytes;
    internal Byte[] KeyIdBytes;
    internal Byte[] DatabaseIdBytes;
    internal Byte[] KeyMetadataVersionBytes;
    internal ColumnEncryptionKeyInfo(Byte[] decryptedKey, int databaseId, Byte[] keyMetadataVersion, int keyid);
    private static ColumnEncryptionKeyInfo();
    internal int GetLengthForSerialization();
    internal int SerializeToBuffer(Byte[] bytePackage, int startOffset);
}
internal class System.Data.SqlClient.ColumnMasterKeyMetadataSignatureVerificationCache : object {
    internal static ColumnMasterKeyMetadataSignatureVerificationCache Instance { get; }
    private static ColumnMasterKeyMetadataSignatureVerificationCache();
    internal static ColumnMasterKeyMetadataSignatureVerificationCache get_Instance();
    internal Nullable`1<bool> GetSignatureVerificationResult(string keyStoreName, string masterKeyPath, bool allowEnclaveComputations, Byte[] signature);
    internal void AddSignatureVerificationResult(string keyStoreName, string masterKeyPath, bool allowEnclaveComputations, Byte[] signature, bool result);
}
internal abstract class System.Data.SqlClient.DataFeed : object {
}
internal class System.Data.SqlClient.EnclaveDelegate : object {
    public static EnclaveDelegate Instance { get; }
    private static EnclaveDelegate();
    public static EnclaveDelegate get_Instance();
    internal EnclavePackage GenerateEnclavePackage(Dictionary`2<int, SqlTceCipherInfoEntry> keysTobeSentToEnclave, string queryText, string enclaveType, string serverName, string enclaveAttestationUrl);
    internal void InvalidateEnclaveSession(string enclaveType, string serverName, string EnclaveAttestationUrl, SqlEnclaveSession enclaveSession);
    internal void GetEnclaveSession(string enclaveType, string serverName, string enclaveAttestationUrl, SqlEnclaveSession& sqlEnclaveSession);
    internal SqlEnclaveAttestationParameters GetAttestationParameters(string enclaveType, string serverName, string enclaveAttestationUrl);
    internal Byte[] GetSerializedAttestationParameters(SqlEnclaveAttestationParameters sqlEnclaveAttestationParameters, string enclaveType);
    internal void CreateEnclaveSession(string enclaveType, string serverName, string attestationUrl, Byte[] attestationInfo, SqlEnclaveAttestationParameters attestationParameters);
}
internal enum System.Data.SqlClient.EncryptionOptions : Enum {
    public int value__;
    public static EncryptionOptions OFF;
    public static EncryptionOptions ON;
    public static EncryptionOptions NOT_SUP;
    public static EncryptionOptions REQ;
    public static EncryptionOptions LOGIN;
}
internal class System.Data.SqlClient.FederatedAuthenticationFeatureExtensionData : ValueType {
    internal FedAuthLibrary libraryType;
    internal bool fedAuthRequiredPreLoginResponse;
    internal SqlAuthenticationMethod authentication;
    internal Byte[] accessToken;
}
internal class System.Data.SqlClient.InOutOfProcHelper : object {
    internal static bool InProc { get; }
    private static InOutOfProcHelper();
    internal static bool get_InProc();
}
[InterfaceTypeAttribute("1")]
[BestFitMappingAttribute("False")]
[ComVisibleAttribute("True")]
[GuidAttribute("6cb925bf-c3c0-45b3-9f44-5dd67c7b7fe8")]
internal interface System.Data.SqlClient.ISQLDebug {
    public abstract virtual bool SQLDebug(int dwpidDebugger, int dwpidDebuggee, string pszMachineName, string pszSDIDLLName, int dwOption, int cbData, Byte[] rgbData);
}
internal class System.Data.SqlClient.LastIOTimer : object {
    internal long _value;
}
internal class System.Data.SqlClient.MEMMAP : ValueType {
    internal UInt32 dbgpid;
    internal UInt32 fOption;
    internal Byte[] rgbMachineName;
    internal Byte[] rgbDllName;
    internal UInt32 cbData;
    internal Byte[] rgbData;
}
internal class System.Data.SqlClient.MetaType : object {
    internal Type ClassType;
    internal Type SqlType;
    internal int FixedLength;
    internal bool IsFixed;
    internal bool IsLong;
    internal bool IsPlp;
    internal byte Precision;
    internal byte Scale;
    internal byte TDSType;
    internal byte NullableType;
    internal string TypeName;
    internal SqlDbType SqlDbType;
    internal DbType DbType;
    internal byte PropBytes;
    internal bool IsAnsiType;
    internal bool IsBinType;
    internal bool IsCharType;
    internal bool IsNCharType;
    internal bool IsSizeInCharacters;
    internal bool IsNewKatmaiType;
    internal bool IsVarTime;
    internal bool Is70Supported;
    internal bool Is80Supported;
    internal bool Is90Supported;
    internal bool Is100Supported;
    internal static MetaType MetaVarBinary;
    internal static MetaType MetaMaxVarBinary;
    internal static MetaType MetaImage;
    internal static MetaType MetaMaxVarChar;
    internal static MetaType MetaText;
    internal static MetaType MetaNVarChar;
    internal static MetaType MetaMaxNVarChar;
    internal static MetaType MetaNText;
    internal static MetaType MetaDecimal;
    internal static MetaType MetaXml;
    internal static MetaType MetaUdt;
    internal static MetaType MetaTime;
    internal static MetaType MetaDateTimeOffset;
    public int TypeId { get; }
    public MetaType(byte precision, byte scale, int fixedLength, bool isFixed, bool isLong, bool isPlp, byte tdsType, byte nullableTdsType, string typeName, Type classType, Type sqlType, SqlDbType sqldbType, DbType dbType, byte propBytes);
    private static MetaType();
    public int get_TypeId();
    internal static bool _IsVarTime(SqlDbType type);
    internal static MetaType GetMetaTypeFromSqlDbType(SqlDbType target, bool isMultiValued);
    internal static MetaType GetMetaTypeFromDbType(DbType target);
    internal static MetaType GetMaxMetaTypeFromMetaType(MetaType mt);
    internal static MetaType GetMetaTypeFromType(Type dataType);
    internal static MetaType GetMetaTypeFromValue(object value, bool streamAllowed);
    internal static object GetNullSqlValue(Type sqlType);
    internal static MetaType PromoteStringType(string s);
    internal static object GetComValueFromSqlVariant(object sqlVal);
    internal static object GetSqlValueFromComVariant(object comVal);
    internal static SqlDbType GetSqlDbTypeFromOleDbType(short dbType, string typeName);
    internal static MetaType GetSqlDataType(int tdsType, UInt32 userType, int length);
    internal static MetaType GetDefaultMetaType();
    internal static string GetStringFromXml(XmlReader xmlreader);
    public static TdsDateTime FromDateTime(DateTime dateTime, byte cb);
    public static DateTime ToDateTime(int sqlDays, int sqlTime, int length);
    internal static int GetTimeSizeFromScale(byte scale);
}
internal class System.Data.SqlClient.MultiPartTableName : ValueType {
    private string _multipartName;
    private string _serverName;
    private string _catalogName;
    private string _schemaName;
    private string _tableName;
    internal static MultiPartTableName Null;
    internal string ServerName { get; internal set; }
    internal string CatalogName { get; internal set; }
    internal string SchemaName { get; internal set; }
    internal string TableName { get; internal set; }
    internal MultiPartTableName(String[] parts);
    internal MultiPartTableName(string multipartName);
    private static MultiPartTableName();
    internal string get_ServerName();
    internal void set_ServerName(string value);
    internal string get_CatalogName();
    internal void set_CatalogName(string value);
    internal string get_SchemaName();
    internal void set_SchemaName(string value);
    internal string get_TableName();
    internal void set_TableName(string value);
}
public class System.Data.SqlClient.OnChangeEventHandler : MulticastDelegate {
    public OnChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlNotificationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlNotificationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.SqlClient.ParameterPeekAheadValue : object {
    internal IEnumerator`1<SqlDataRecord> Enumerator;
    internal SqlDataRecord FirstRecord;
}
internal enum System.Data.SqlClient.ParsingErrorState : Enum {
    public int value__;
    public static ParsingErrorState Undefined;
    public static ParsingErrorState FedAuthInfoLengthTooShortForCountOfInfoIds;
    public static ParsingErrorState FedAuthInfoLengthTooShortForData;
    public static ParsingErrorState FedAuthInfoFailedToReadCountOfInfoIds;
    public static ParsingErrorState FedAuthInfoFailedToReadTokenStream;
    public static ParsingErrorState FedAuthInfoInvalidOffset;
    public static ParsingErrorState FedAuthInfoFailedToReadData;
    public static ParsingErrorState FedAuthInfoDataNotUnicode;
    public static ParsingErrorState FedAuthInfoDoesNotContainStsurlAndSpn;
    public static ParsingErrorState FedAuthInfoNotReceived;
    public static ParsingErrorState FedAuthNotAcknowledged;
    public static ParsingErrorState FedAuthFeatureAckContainsExtraData;
    public static ParsingErrorState FedAuthFeatureAckUnknownLibraryType;
    public static ParsingErrorState UnrequestedFeatureAckReceived;
    public static ParsingErrorState UnknownFeatureAck;
    public static ParsingErrorState InvalidTdsTokenReceived;
    public static ParsingErrorState SessionStateLengthTooShort;
    public static ParsingErrorState SessionStateInvalidStatus;
    public static ParsingErrorState CorruptedTdsStream;
    public static ParsingErrorState ProcessSniPacketFailed;
    public static ParsingErrorState FedAuthRequiredPreLoginResponseInvalidValue;
    public static ParsingErrorState TceUnknownVersion;
    public static ParsingErrorState TceInvalidVersion;
    public static ParsingErrorState TceInvalidOrdinalIntoCipherInfoTable;
}
public enum System.Data.SqlClient.PoolBlockingPeriod : Enum {
    public int value__;
    public static PoolBlockingPeriod Auto;
    public static PoolBlockingPeriod AlwaysBlock;
    public static PoolBlockingPeriod NeverBlock;
}
internal enum System.Data.SqlClient.PreLoginHandshakeStatus : Enum {
    public int value__;
    public static PreLoginHandshakeStatus Successful;
    public static PreLoginHandshakeStatus InstanceFailure;
}
[DefaultMemberAttribute("Item")]
internal class System.Data.SqlClient.Result : object {
    internal int Count { get; }
    internal _SqlMetaDataSet MetaData { get; }
    internal Row Item { get; }
    internal Result(_SqlMetaDataSet metadata);
    internal int get_Count();
    internal _SqlMetaDataSet get_MetaData();
    internal Row get_Item(int index);
    internal void AddRow(Row row);
}
internal class System.Data.SqlClient.RoutingInfo : object {
    internal byte Protocol { get; private set; }
    internal ushort Port { get; private set; }
    internal string ServerName { get; private set; }
    internal RoutingInfo(byte protocol, ushort port, string servername);
    [CompilerGeneratedAttribute]
internal byte get_Protocol();
    [CompilerGeneratedAttribute]
private void set_Protocol(byte value);
    [CompilerGeneratedAttribute]
internal ushort get_Port();
    [CompilerGeneratedAttribute]
private void set_Port(ushort value);
    [CompilerGeneratedAttribute]
internal string get_ServerName();
    [CompilerGeneratedAttribute]
private void set_ServerName(string value);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.SqlClient.Row : object {
    internal Object[] DataFields { get; }
    internal object Item { get; }
    internal Row(int rowCount);
    internal Object[] get_DataFields();
    internal object get_Item(int index);
}
internal enum System.Data.SqlClient.RunBehavior : Enum {
    public int value__;
    public static RunBehavior UntilDone;
    public static RunBehavior ReturnImmediately;
    public static RunBehavior Clean;
    public static RunBehavior Attention;
}
internal class System.Data.SqlClient.ServerInfo : object {
    internal string PreRoutingServerName;
    internal string ExtendedServerName { get; private set; }
    internal string ResolvedServerName { get; private set; }
    internal string ResolvedDatabaseName { get; private set; }
    internal string UserProtocol { get; private set; }
    internal string UserServerName { get; private set; }
    internal ServerInfo(SqlConnectionString userOptions);
    internal ServerInfo(SqlConnectionString userOptions, string serverName);
    internal ServerInfo(SqlConnectionString userOptions, RoutingInfo routing, string preRoutingServerName);
    [CompilerGeneratedAttribute]
internal string get_ExtendedServerName();
    [CompilerGeneratedAttribute]
private void set_ExtendedServerName(string value);
    [CompilerGeneratedAttribute]
internal string get_ResolvedServerName();
    [CompilerGeneratedAttribute]
private void set_ResolvedServerName(string value);
    [CompilerGeneratedAttribute]
internal string get_ResolvedDatabaseName();
    [CompilerGeneratedAttribute]
private void set_ResolvedDatabaseName(string value);
    [CompilerGeneratedAttribute]
internal string get_UserProtocol();
    [CompilerGeneratedAttribute]
private void set_UserProtocol(string value);
    internal string get_UserServerName();
    private void set_UserServerName(string value);
    internal void SetDerivedNames(string protocol, string serverName);
}
internal class System.Data.SqlClient.SessionData : object {
    internal static int _maxNumberOfSessionStates;
    internal UInt32 _tdsVersion;
    internal bool _encrypted;
    internal string _database;
    internal SqlCollation _collation;
    internal string _language;
    internal string _initialDatabase;
    internal SqlCollation _initialCollation;
    internal string _initialLanguage;
    internal byte _unrecoverableStatesCount;
    internal Dictionary`2<string, Tuple`2<string, string>> _resolvedAliases;
    internal SessionStateRecord[] _delta;
    internal bool _deltaDirty;
    internal Byte[][] _initialState;
    public SessionData(SessionData recoveryData);
    public void Reset();
    [ConditionalAttribute("DEBUG")]
public void AssertUnrecoverableStateCountIsCorrect();
}
internal class System.Data.SqlClient.SessionStateRecord : object {
    internal bool _recoverable;
    internal UInt32 _version;
    internal int _dataLength;
    internal Byte[] _data;
}
internal enum System.Data.SqlClient.SniContext : Enum {
    public int value__;
    public static SniContext Undefined;
    public static SniContext Snix_Connect;
    public static SniContext Snix_PreLoginBeforeSuccessfullWrite;
    public static SniContext Snix_PreLogin;
    public static SniContext Snix_LoginSspi;
    public static SniContext Snix_ProcessSspi;
    public static SniContext Snix_Login;
    public static SniContext Snix_EnableMars;
    public static SniContext Snix_AutoEnlist;
    public static SniContext Snix_GetMarsSession;
    public static SniContext Snix_Execute;
    public static SniContext Snix_Read;
    public static SniContext Snix_Close;
    public static SniContext Snix_SendRows;
}
internal class System.Data.SqlClient.SNIHandle : SafeHandle {
    public bool IsInvalid { get; }
    internal UInt32 Status { get; }
    internal SNIHandle(ConsumerInfo myInfo, string serverName, Byte[] spnBuffer, bool ignoreSniOpenTimeout, int timeout, Byte[]& instanceName, bool flushCache, bool fSync, bool fParallel, TransparentNetworkResolutionState transparentNetworkResolutionState, int totalTimeout);
    internal SNIHandle(ConsumerInfo myInfo, SNIHandle parent);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    internal UInt32 get_Status();
}
internal class System.Data.SqlClient.SNILoadHandle : SafeHandle {
    internal static SNILoadHandle SingletonInstance;
    internal SqlAsyncCallbackDelegate ReadAsyncCallbackDispatcher;
    internal SqlAsyncCallbackDelegate WriteAsyncCallbackDispatcher;
    public bool IsInvalid { get; }
    public UInt32 SNIStatus { get; }
    public EncryptionOptions Options { get; }
    private static SNILoadHandle();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    public UInt32 get_SNIStatus();
    public EncryptionOptions get_Options();
}
internal class System.Data.SqlClient.SNIPacket : SafeHandle {
    public bool IsInvalid { get; }
    internal SNIPacket(SafeHandle sniHandle);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
public enum System.Data.SqlClient.SortOrder : Enum {
    public int value__;
    public static SortOrder Unspecified;
    public static SortOrder Ascending;
    public static SortOrder Descending;
}
internal static class System.Data.SqlClient.SQL : object {
    internal static Byte[] AttentionHeader;
    internal static string WriteToServer;
    internal static int SqlDependencyTimeoutDefault;
    internal static int SqlDependencyServerTimeout;
    internal static string SqlNotificationServiceDefault;
    internal static string SqlNotificationStoredProcedureDefault;
    internal static string Transaction;
    internal static string Connection;
    private static SQL();
    internal static Exception CannotGetDTCAddress();
    internal static Exception InvalidOptionLength(string key);
    internal static Exception InvalidInternalPacketSize(string str);
    internal static Exception InvalidPacketSize();
    internal static Exception InvalidPacketSizeValue();
    internal static Exception InvalidSSPIPacketSize();
    internal static Exception NullEmptyTransactionName();
    internal static Exception SnapshotNotSupported(IsolationLevel level);
    internal static Exception UserInstanceFailoverNotCompatible();
    internal static Exception CredentialsNotProvided(SqlAuthenticationMethod auth);
    internal static Exception AuthenticationAndIntegratedSecurity();
    internal static Exception IntegratedWithUserIDAndPassword();
    internal static Exception InteractiveWithoutUserID();
    internal static Exception InteractiveWithPassword();
    internal static Exception SettingIntegratedWithCredential();
    internal static Exception SettingCredentialWithIntegratedArgument();
    internal static Exception SettingCredentialWithIntegratedInvalid();
    internal static Exception InvalidSQLServerVersionUnknown();
    internal static Exception SynchronousCallMayNotPend();
    internal static Exception ConnectionLockedForBcpEvent();
    internal static Exception AsyncConnectionRequired();
    internal static Exception FatalTimeout();
    internal static Exception InstanceFailure();
    internal static Exception ChangePasswordArgumentMissing(string argumentName);
    internal static Exception ChangePasswordConflictsWithSSPI();
    internal static Exception ChangePasswordRequiresYukon();
    internal static Exception UnknownSysTxIsolationLevel(IsolationLevel isolationLevel);
    internal static Exception ChangePasswordUseOfUnallowedKey(string key);
    internal static Exception InvalidPartnerConfiguration(string server, string database);
    internal static Exception BatchedUpdateColumnEncryptionSettingMismatch();
    internal static Exception MARSUnspportedOnConnection();
    internal static Exception CannotModifyPropertyAsyncOperationInProgress(string property);
    internal static Exception NonLocalSSEInstance();
    internal static Exception UnsupportedAuthentication(string authentication);
    internal static Exception UnsupportedSqlAuthenticationMethod(SqlAuthenticationMethod authentication);
    internal static Exception CannotCreateAuthProvider(string authentication, string type, Exception e);
    internal static Exception CannotCreateSqlAuthInitializer(string type, Exception e);
    internal static Exception CannotInitializeAuthProvider(string type, Exception e);
    internal static Exception UnsupportedAuthenticationByProvider(string authentication, string type);
    internal static Exception CannotFindAuthProvider(string authentication);
    internal static Exception CannotGetAuthProviderConfig(Exception e);
    internal static Exception ParameterCannotBeEmpty(string paramName);
    internal static Exception NotificationsRequireYukon();
    internal static ArgumentOutOfRangeException NotSupportedEnumerationValue(Type type, int value);
    internal static ArgumentOutOfRangeException NotSupportedCommandType(CommandType value);
    internal static ArgumentOutOfRangeException NotSupportedIsolationLevel(IsolationLevel value);
    internal static Exception OperationCancelled();
    internal static Exception PendingBeginXXXExists();
    internal static ArgumentOutOfRangeException InvalidSqlDependencyTimeout(string param);
    internal static Exception NonXmlResult();
    internal static Exception InvalidUdt3PartNameFormat();
    internal static Exception InvalidParameterTypeNameFormat();
    internal static Exception InvalidParameterNameLength(string value);
    internal static Exception PrecisionValueOutOfRange(byte precision);
    internal static Exception ScaleValueOutOfRange(byte scale);
    internal static Exception TimeScaleValueOutOfRange(byte scale);
    internal static Exception InvalidSqlDbType(SqlDbType value);
    internal static Exception UnsupportedTVPOutputParameter(ParameterDirection direction, string paramName);
    internal static Exception DBNullNotSupportedForTVPValues(string paramName);
    internal static Exception InvalidTableDerivedPrecisionForTvp(string columnName, byte precision);
    internal static Exception UnexpectedTypeNameForNonStructParams(string paramName);
    internal static Exception SingleValuedStructNotSupported();
    internal static Exception ParameterInvalidVariant(string paramName);
    internal static Exception MustSetTypeNameForParam(string paramType, string paramName);
    internal static Exception NullSchemaTableDataTypeNotSupported(string columnName);
    internal static Exception InvalidSchemaTableOrdinals();
    internal static Exception EnumeratedRecordMetaDataChanged(string fieldName, int recordNumber);
    internal static Exception EnumeratedRecordFieldCountChanged(int recordNumber);
    internal static Exception InvalidTDSVersion();
    internal static Exception ParsingError(ParsingErrorState state);
    internal static Exception ParsingError(ParsingErrorState state, Exception innerException);
    internal static Exception ParsingErrorValue(ParsingErrorState state, int value);
    internal static Exception ParsingErrorOffset(ParsingErrorState state, int offset);
    internal static Exception ParsingErrorFeatureId(ParsingErrorState state, int featureId);
    internal static Exception ParsingErrorToken(ParsingErrorState state, int token);
    internal static Exception ParsingErrorLength(ParsingErrorState state, int length);
    internal static Exception ParsingErrorStatus(ParsingErrorState state, int status);
    internal static Exception ParsingErrorLibraryType(ParsingErrorState state, int libraryType);
    internal static Exception MoneyOverflow(string moneyValue);
    internal static Exception SmallDateTimeOverflow(string datetime);
    internal static Exception SNIPacketAllocationFailure();
    internal static Exception TimeOverflow(string time);
    internal static Exception InvalidRead();
    internal static Exception NonBlobColumn(string columnName);
    internal static Exception NonCharColumn(string columnName);
    internal static Exception StreamNotSupportOnColumnType(string columnName);
    internal static Exception StreamNotSupportOnEncryptedColumn(string columnName);
    internal static Exception SequentialAccessNotSupportedOnEncryptedColumn(string columnName);
    internal static Exception TextReaderNotSupportOnColumnType(string columnName);
    internal static Exception XmlReaderNotSupportOnColumnType(string columnName);
    internal static Exception UDTUnexpectedResult(string exceptionText);
    internal static Exception CannotCompleteDelegatedTransactionWithOpenResults(SqlInternalConnectionTds internalConnection);
    internal static TransactionPromotionException PromotionFailed(Exception inner);
    internal static Exception SqlCommandHasExistingSqlNotificationRequest();
    internal static Exception SqlDepCannotBeCreatedInProc();
    internal static Exception SqlDepDefaultOptionsButNoStart();
    internal static Exception SqlDependencyDatabaseBrokerDisabled();
    internal static Exception SqlDependencyEventNoDuplicate();
    internal static Exception SqlDependencyDuplicateStart();
    internal static Exception SqlDependencyIdMismatch();
    internal static Exception SqlDependencyNoMatchingServerStart();
    internal static Exception SqlDependencyNoMatchingServerDatabaseStart();
    internal static Exception SqlNotificationException(SqlNotificationEventArgs notify);
    internal static Exception SqlMetaDataNoMetaData();
    internal static Exception MustSetUdtTypeNameForUdtParams();
    internal static Exception UnexpectedUdtTypeNameForNonUdtParams();
    internal static Exception UDTInvalidSqlType(string typeName);
    internal static Exception InvalidSqlDbTypeForConstructor(SqlDbType type);
    internal static Exception NameTooLong(string parameterName);
    internal static Exception InvalidSortOrder(SortOrder order);
    internal static Exception MustSpecifyBothSortOrderAndOrdinal(SortOrder order, int ordinal);
    internal static Exception TableTypeCanOnlyBeParameter();
    internal static Exception UnsupportedColumnTypeForSqlProvider(string columnName, string typeName);
    internal static Exception InvalidColumnMaxLength(string columnName, long maxLength);
    internal static Exception InvalidColumnPrecScale();
    internal static Exception NotEnoughColumnsInStructuredType();
    internal static Exception DuplicateSortOrdinal(int sortOrdinal);
    internal static Exception MissingSortOrdinal(int sortOrdinal);
    internal static Exception SortOrdinalGreaterThanFieldCount(int columnOrdinal, int sortOrdinal);
    internal static Exception IEnumerableOfSqlDataRecordHasNoRows();
    internal static Exception SqlPipeCommandHookedUpToNonContextConnection();
    internal static Exception SqlPipeMessageTooLong(int messageLength);
    internal static Exception SqlPipeIsBusy();
    internal static Exception SqlPipeAlreadyHasAnOpenResultSet(string methodName);
    internal static Exception SqlPipeDoesNotHaveAnOpenResultSet(string methodName);
    internal static Exception SqlResultSetClosed(string methodname);
    internal static Exception SqlResultSetNoData(string methodname);
    internal static Exception SqlRecordReadOnly(string methodname);
    internal static Exception SqlResultSetRowDeleted(string methodname);
    internal static Exception SqlResultSetCommandNotInSameConnection();
    internal static Exception SqlResultSetNoAcceptableCursor();
    internal static Exception BulkLoadMappingInaccessible();
    internal static Exception BulkLoadMappingsNamesOrOrdinalsOnly();
    internal static Exception BulkLoadCannotConvertValue(Type sourcetype, MetaType metatype, Exception e);
    internal static Exception BulkLoadNonMatchingColumnMapping();
    internal static Exception BulkLoadNonMatchingColumnName(string columnName);
    internal static Exception BulkLoadNonMatchingColumnName(string columnName, Exception e);
    internal static Exception BulkLoadStringTooLong();
    internal static Exception BulkLoadInvalidVariantValue();
    internal static Exception BulkLoadInvalidTimeout(int timeout);
    internal static Exception BulkLoadExistingTransaction();
    internal static Exception BulkLoadNoCollation();
    internal static Exception BulkLoadConflictingTransactionOption();
    internal static Exception BulkLoadLcidMismatch(int sourceLcid, string sourceColumnName, int destinationLcid, string destinationColumnName);
    internal static Exception InvalidOperationInsideEvent();
    internal static Exception BulkLoadMissingDestinationTable();
    internal static Exception BulkLoadInvalidDestinationTable(string tableName, Exception inner);
    internal static Exception BulkLoadBulkLoadNotAllowDBNull(string columnName);
    internal static Exception BulkLoadPendingOperation();
    internal static Exception InvalidKeyEncryptionAlgorithm(string encryptionAlgorithm, string validEncryptionAlgorithm, bool isSystemOp);
    internal static Exception NullKeyEncryptionAlgorithm(bool isSystemOp);
    internal static Exception EmptyColumnEncryptionKey();
    internal static Exception NullColumnEncryptionKey();
    internal static Exception EmptyEncryptedColumnEncryptionKey();
    internal static Exception NullEncryptedColumnEncryptionKey();
    internal static Exception LargeCertificatePathLength(int actualLength, int maxLength, bool isSystemOp);
    internal static Exception NullCertificatePath(String[] validLocations, bool isSystemOp);
    internal static Exception NullCspKeyPath(bool isSystemOp);
    internal static Exception NullCngKeyPath(bool isSystemOp);
    internal static Exception InvalidCertificatePath(string actualCertificatePath, String[] validLocations, bool isSystemOp);
    internal static Exception InvalidCspPath(string masterKeyPath, bool isSystemOp);
    internal static Exception InvalidCngPath(string masterKeyPath, bool isSystemOp);
    internal static Exception EmptyCspName(string masterKeyPath, bool isSystemOp);
    internal static Exception EmptyCngName(string masterKeyPath, bool isSystemOp);
    internal static Exception EmptyCspKeyId(string masterKeyPath, bool isSystemOp);
    internal static Exception EmptyCngKeyId(string masterKeyPath, bool isSystemOp);
    internal static Exception InvalidCspName(string cspName, string masterKeyPath, bool isSystemOp);
    internal static Exception InvalidCspKeyIdentifier(string keyIdentifier, string masterKeyPath, bool isSystemOp);
    internal static Exception InvalidCngKey(string masterKeyPath, string cngProviderName, string keyIdentifier, bool isSystemOp);
    internal static Exception InvalidCertificateLocation(string certificateLocation, string certificatePath, String[] validLocations, bool isSystemOp);
    internal static Exception InvalidCertificateStore(string certificateStore, string certificatePath, string validCertificateStore, bool isSystemOp);
    internal static Exception EmptyCertificateThumbprint(string certificatePath, bool isSystemOp);
    internal static Exception CertificateNotFound(string thumbprint, string certificateLocation, string certificateStore, bool isSystemOp);
    internal static Exception InvalidAlgorithmVersionInEncryptedCEK(byte actual, byte expected);
    internal static Exception InvalidCiphertextLengthInEncryptedCEK(int actual, int expected, string certificateName);
    internal static Exception InvalidCiphertextLengthInEncryptedCEKCsp(int actual, int expected, string masterKeyPath);
    internal static Exception InvalidCiphertextLengthInEncryptedCEKCng(int actual, int expected, string masterKeyPath);
    internal static Exception InvalidSignatureInEncryptedCEK(int actual, int expected, string masterKeyPath);
    internal static Exception InvalidSignatureInEncryptedCEKCsp(int actual, int expected, string masterKeyPath);
    internal static Exception InvalidSignatureInEncryptedCEKCng(int actual, int expected, string masterKeyPath);
    internal static Exception InvalidCertificateSignature(string certificatePath);
    internal static Exception InvalidSignature(string masterKeyPath);
    internal static Exception CertificateWithNoPrivateKey(string keyPath, bool isSystemOp);
    internal static Exception NullColumnEncryptionKeySysErr();
    internal static Exception InvalidKeySize(string algorithmName, int actualKeylength, int expectedLength);
    internal static Exception InvalidEncryptionType(string algorithmName, SqlClientEncryptionType encryptionType, SqlClientEncryptionType[] validEncryptionTypes);
    internal static Exception NullPlainText();
    internal static Exception VeryLargeCiphertext(long cipherTextLength, long maxCipherTextSize, long plainTextLength);
    internal static Exception NullCipherText();
    internal static Exception InvalidCipherTextSize(int actualSize, int minimumSize);
    internal static Exception InvalidAlgorithmVersion(byte actual, byte expected);
    internal static Exception InvalidAuthenticationTag();
    internal static Exception NullColumnEncryptionAlgorithm(string supportedAlgorithms);
    internal static Exception UnexpectedDescribeParamFormatParameterMetadata();
    internal static Exception UnexpectedDescribeParamFormatAttestationInfo(string enclaveType);
    internal static Exception InvalidEncryptionKeyOrdinalEnclaveMetadata(int ordinal, int maxOrdinal);
    internal static Exception InvalidEncryptionKeyOrdinalParameterMetadata(int ordinal, int maxOrdinal);
    public static Exception MultipleRowsReturnedForAttestationInfo();
    internal static Exception ParamEncryptionMetadataMissing(string paramName, string procedureName);
    internal static Exception ParamInvalidForceColumnEncryptionSetting(string paramName, string procedureName);
    internal static Exception ParamUnExpectedEncryptionMetadata(string paramName, string procedureName);
    internal static Exception ProcEncryptionMetadataMissing(string procedureName);
    internal static Exception InvalidKeyStoreProviderName(string providerName, List`1<string> systemProviders, List`1<string> customProviders);
    internal static Exception UnableToVerifyColumnMasterKeySignature(Exception innerExeption);
    internal static Exception ColumnMasterKeySignatureVerificationFailed(string cmkPath);
    internal static Exception ColumnMasterKeySignatureNotFound(string cmkPath);
    internal static Exception ExceptionWhenGeneratingEnclavePackage(Exception innerExeption);
    internal static Exception FailedToEncryptRegisterRulesBytePackage(Exception innerExeption);
    internal static Exception InvalidKeyIdUnableToCastToUnsignedShort(int keyId, Exception innerException);
    internal static Exception InvalidDatabaseIdUnableToCastToUnsignedInt(int databaseId, Exception innerException);
    internal static Exception InvalidAttestationParameterUnableToConvertToUnsignedInt(string variableName, int intValue, string enclaveType, Exception innerException);
    internal static Exception OffsetOutOfBounds(string argument, string type, string method);
    internal static Exception InsufficientBuffer(string argument, string type, string method);
    internal static Exception ColumnEncryptionKeysNotFound();
    internal static Exception AttestationInfoNotReturnedFromSqlServer(string enclaveType, string enclaveAttestationUrl);
    internal static Exception NullArgumentInConstructorInternal(string argumentName, string objectUnderConstruction);
    internal static Exception EmptyArgumentInConstructorInternal(string argumentName, string objectUnderConstruction);
    internal static Exception NullArgumentInternal(string argumentName, string type, string method);
    internal static Exception EmptyArgumentInternal(string argumentName, string type, string method);
    internal static Exception CannotGetSqlColumnEncryptionEnclaveProviderConfig(Exception innerException);
    internal static Exception CannotCreateSqlColumnEncryptionEnclaveProvider(string providerName, string type, Exception innerException);
    internal static Exception SqlColumnEncryptionEnclaveProviderNameCannotBeEmpty();
    internal static Exception NoAttestationUrlSpecifiedForEnclaveBasedQuerySpDescribe(string enclaveType);
    internal static Exception NoAttestationUrlSpecifiedForEnclaveBasedQueryGeneratingEnclavePackage(string enclaveType);
    internal static Exception EnclaveTypeNullForEnclaveBasedQuery();
    internal static Exception EnclaveProvidersNotConfiguredForEnclaveBasedQuery();
    internal static Exception EnclaveProviderNotFound(string enclaveType);
    internal static Exception NullEnclaveSessionReturnedFromProvider(string enclaveType, string attestationUrl);
    internal static Exception GetExceptionArray(string serverName, string errorMessage, Exception e);
    internal static Exception ParamEncryptionFailed(string paramName, string serverName, Exception e);
    internal static Exception ParamDecryptionFailed(string paramName, string serverName, Exception e);
    internal static Exception ColumnDecryptionFailed(string columnName, string serverName, Exception e);
    internal static Exception UnknownColumnEncryptionAlgorithm(string algorithmName, string supportedAlgorithms);
    internal static Exception UnknownColumnEncryptionAlgorithmId(int algoId, string supportAlgorithmIds);
    internal static Exception UnsupportedNormalizationVersion(byte version);
    internal static Exception UnrecognizedKeyStoreProviderName(string providerName, List`1<string> systemProviders, List`1<string> customProviders);
    internal static Exception InvalidDataTypeForEncryptedParameter(string parameterName, int actualDataType, int expectedDataType);
    internal static Exception KeyDecryptionFailed(string providerName, string keyHex, Exception e);
    internal static Exception UntrustedKeyPath(string keyPath, string serverName);
    internal static Exception UnsupportedDatatypeEncryption(string dataType);
    internal static Exception ThrowDecryptionFailed(string keyStr, string valStr, Exception e);
    internal static Exception NullEnclaveSessionDuringQueryExecution(string enclaveType, string enclaveAttestationUrl);
    internal static Exception NullEnclavePackageForEnclaveBasedQuery(string enclaveType, string enclaveAttestationUrl);
    internal static Exception TceNotSupported();
    internal static Exception EnclaveComputationsNotSupported();
    internal static Exception EnclaveTypeNotReturned();
    internal static Exception CanOnlyCallOnce();
    internal static Exception NullCustomKeyStoreProviderDictionary();
    internal static Exception InvalidCustomKeyStoreProviderName(string providerName, string prefix);
    internal static Exception NullProviderValue(string providerName);
    internal static Exception EmptyProviderName();
    internal static Exception ConnectionDoomed();
    internal static Exception OpenResultCountExceeded();
    internal static Exception GlobalTransactionsNotEnabled();
    internal static Exception UnsupportedSysTxForGlobalTransactions();
    internal static Exception MultiSubnetFailoverWithFailoverPartner(bool serverProvidedFailoverPartner, SqlInternalConnectionTds internalConnection);
    internal static Exception MultiSubnetFailoverWithMoreThan64IPs();
    internal static Exception MultiSubnetFailoverWithInstanceSpecified();
    internal static Exception MultiSubnetFailoverWithNonTcpProtocol();
    internal static Exception ROR_FailoverNotSupportedConnString();
    internal static Exception ROR_FailoverNotSupportedServer(SqlInternalConnectionTds internalConnection);
    internal static Exception ROR_RecursiveRoutingNotSupported(SqlInternalConnectionTds internalConnection);
    internal static Exception ROR_UnexpectedRoutingInfo(SqlInternalConnectionTds internalConnection);
    internal static Exception ROR_InvalidRoutingInfo(SqlInternalConnectionTds internalConnection);
    internal static Exception ROR_TimeoutAfterRoutingInfo(SqlInternalConnectionTds internalConnection);
    internal static SqlException CR_ReconnectTimeout();
    internal static SqlException CR_ReconnectionCancelled();
    internal static Exception CR_NextAttemptWillExceedQueryTimeout(SqlException innerException, Guid connectionId);
    internal static Exception CR_EncryptionChanged(SqlInternalConnectionTds internalConnection);
    internal static SqlException CR_AllAttemptsFailed(SqlException innerException, Guid connectionId);
    internal static SqlException CR_NoCRAckAtReconnection(SqlInternalConnectionTds internalConnection);
    internal static SqlException CR_TDSVersionNotPreserved(SqlInternalConnectionTds internalConnection);
    internal static SqlException CR_UnrecoverableServer(Guid connectionId);
    internal static SqlException CR_UnrecoverableClient(Guid connectionId);
    internal static Exception BatchedUpdatesNotAvailableOnContextConnection();
    internal static Exception ContextAllowsLimitedKeywords();
    internal static Exception ContextAllowsOnlyTypeSystem2005();
    internal static Exception ContextConnectionIsInUse();
    internal static Exception ContextUnavailableOutOfProc();
    internal static Exception ContextUnavailableWhileInProc();
    internal static Exception NestedTransactionScopesNotSupported();
    internal static Exception NotAvailableOnContextConnection();
    internal static Exception NotificationsNotAvailableOnContextConnection();
    internal static Exception UnexpectedSmiEvent(UnexpectedEventType eventType);
    internal static Exception UserInstanceNotAvailableInProc();
    internal static Exception ArgumentLengthMismatch(string arg1, string arg2);
    internal static Exception InvalidSqlDbTypeOneAllowedType(SqlDbType invalidType, string method, SqlDbType allowedType);
    internal static Exception SqlPipeErrorRequiresSendEnd();
    internal static Exception TooManyValues(string arg);
    internal static Exception StreamWriteNotSupported();
    internal static Exception StreamReadNotSupported();
    internal static Exception StreamSeekNotSupported();
    internal static SqlNullValueException SqlNullValue();
    internal static Exception ParameterSizeRestrictionFailure(int index);
    internal static Exception SubclassMustOverride();
    internal static string GetSNIErrorMessage(int sniError);
}
internal class System.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm : SqlClientEncryptionAlgorithm {
    internal static string AlgorithmName;
    internal SqlAeadAes256CbcHmac256Algorithm(SqlAeadAes256CbcHmac256EncryptionKey encryptionKey, SqlClientEncryptionType encryptionType, byte algorithmVersion);
    private static SqlAeadAes256CbcHmac256Algorithm();
    internal virtual Byte[] EncryptData(Byte[] plainText);
    protected Byte[] EncryptData(Byte[] plainText, bool hasAuthenticationTag);
    internal virtual Byte[] DecryptData(Byte[] cipherText);
    protected Byte[] DecryptData(Byte[] cipherText, bool hasAuthenticationTag);
}
internal class System.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey : SqlClientSymmetricKey {
    internal static int KeySize;
    internal Byte[] EncryptionKey { get; }
    internal Byte[] MACKey { get; }
    internal Byte[] IVKey { get; }
    internal SqlAeadAes256CbcHmac256EncryptionKey(Byte[] rootKey, string algorithmName);
    internal Byte[] get_EncryptionKey();
    internal Byte[] get_MACKey();
    internal Byte[] get_IVKey();
}
internal class System.Data.SqlClient.SqlAeadAes256CbcHmac256Factory : SqlClientEncryptionAlgorithmFactory {
    internal virtual SqlClientEncryptionAlgorithm Create(SqlClientSymmetricKey encryptionKey, SqlClientEncryptionType encryptionType, string encryptionAlgorithm);
}
internal class System.Data.SqlClient.SqlAes256CbcAlgorithm : SqlAeadAes256CbcHmac256Algorithm {
    internal static string AlgorithmName;
    internal SqlAes256CbcAlgorithm(SqlAeadAes256CbcHmac256EncryptionKey encryptionKey, SqlClientEncryptionType encryptionType, byte algorithmVersion);
    internal virtual Byte[] EncryptData(Byte[] plainText);
    internal virtual Byte[] DecryptData(Byte[] cipherText);
}
internal class System.Data.SqlClient.SqlAes256CbcFactory : SqlAeadAes256CbcHmac256Factory {
    internal virtual SqlClientEncryptionAlgorithm Create(SqlClientSymmetricKey encryptionKey, SqlClientEncryptionType encryptionType, string encryptionAlgorithm);
}
public abstract class System.Data.SqlClient.SqlAuthenticationInitializer : object {
    public abstract virtual void Initialize();
}
public enum System.Data.SqlClient.SqlAuthenticationMethod : Enum {
    public int value__;
    public static SqlAuthenticationMethod NotSpecified;
    public static SqlAuthenticationMethod SqlPassword;
    public static SqlAuthenticationMethod ActiveDirectoryPassword;
    public static SqlAuthenticationMethod ActiveDirectoryIntegrated;
    public static SqlAuthenticationMethod ActiveDirectoryInteractive;
}
public class System.Data.SqlClient.SqlAuthenticationParameters : object {
    public SqlAuthenticationMethod AuthenticationMethod { get; }
    public string Resource { get; }
    public string Authority { get; }
    public string UserId { get; }
    public string Password { get; }
    public Guid ConnectionId { get; }
    public string ServerName { get; }
    public string DatabaseName { get; }
    protected SqlAuthenticationParameters(SqlAuthenticationMethod authenticationMethod, string serverName, string databaseName, string resource, string authority, string userId, string password, Guid connectionId);
    [CompilerGeneratedAttribute]
public SqlAuthenticationMethod get_AuthenticationMethod();
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
public string get_UserId();
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public Guid get_ConnectionId();
    [CompilerGeneratedAttribute]
public string get_ServerName();
    [CompilerGeneratedAttribute]
public string get_DatabaseName();
}
public abstract class System.Data.SqlClient.SqlAuthenticationProvider : object {
    public static SqlAuthenticationProvider GetProvider(SqlAuthenticationMethod authenticationMethod);
    public static bool SetProvider(SqlAuthenticationMethod authenticationMethod, SqlAuthenticationProvider provider);
    public virtual void BeforeLoad(SqlAuthenticationMethod authenticationMethod);
    public virtual void BeforeUnload(SqlAuthenticationMethod authenticationMethod);
    public abstract virtual bool IsSupported(SqlAuthenticationMethod authenticationMethod);
    public abstract virtual Task`1<SqlAuthenticationToken> AcquireTokenAsync(SqlAuthenticationParameters parameters);
}
internal class System.Data.SqlClient.SqlAuthenticationProviderConfigurationSection : ConfigurationSection {
    public static string Name;
    [ConfigurationPropertyAttribute("providers")]
public ProviderSettingsCollection Providers { get; }
    [ConfigurationPropertyAttribute("initializerType")]
public string InitializerType { get; }
    public ProviderSettingsCollection get_Providers();
    public string get_InitializerType();
}
internal class System.Data.SqlClient.SqlAuthenticationProviderManager : object {
    public static SqlAuthenticationProviderManager Instance;
    private static SqlAuthenticationProviderManager();
    public SqlAuthenticationProviderManager(SqlAuthenticationProviderConfigurationSection configSection);
    public SqlAuthenticationProvider GetProvider(SqlAuthenticationMethod authenticationMethod);
    public bool SetProvider(SqlAuthenticationMethod authenticationMethod, SqlAuthenticationProvider provider);
}
public class System.Data.SqlClient.SqlAuthenticationToken : object {
    public DateTimeOffset ExpiresOn { get; }
    public string AccessToken { get; }
    public SqlAuthenticationToken(string accessToken, DateTimeOffset expiresOn);
    internal SqlAuthenticationToken(Byte[] accessToken, DateTimeOffset expiresOn);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ExpiresOn();
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    internal SqlFedAuthToken ToSqlFedAuthToken();
    internal static string AccessTokenStringFromBytes(Byte[] bytes);
    internal static Byte[] AccessTokenBytesFromString(string token);
}
internal class System.Data.SqlClient.SqlBuffer : object {
    internal bool IsEmpty { get; }
    internal bool IsNull { get; }
    internal StorageType VariantInternalStorageType { get; }
    internal bool Boolean { get; internal set; }
    internal byte Byte { get; internal set; }
    internal Byte[] ByteArray { get; }
    internal DateTime DateTime { get; }
    internal decimal Decimal { get; }
    internal double Double { get; internal set; }
    internal Guid Guid { get; }
    internal short Int16 { get; internal set; }
    internal int Int32 { get; internal set; }
    internal long Int64 { get; internal set; }
    internal float Single { get; internal set; }
    internal string String { get; }
    internal string KatmaiDateTimeString { get; }
    internal SqlString KatmaiDateTimeSqlString { get; }
    internal TimeSpan Time { get; }
    internal DateTimeOffset DateTimeOffset { get; }
    internal SqlBinary SqlBinary { get; internal set; }
    internal SqlBoolean SqlBoolean { get; }
    internal SqlByte SqlByte { get; }
    internal SqlCachedBuffer SqlCachedBuffer { get; internal set; }
    internal SqlXml SqlXml { get; internal set; }
    internal SqlDateTime SqlDateTime { get; }
    internal SqlDecimal SqlDecimal { get; }
    internal SqlDouble SqlDouble { get; }
    internal SqlGuid SqlGuid { get; internal set; }
    internal SqlInt16 SqlInt16 { get; }
    internal SqlInt32 SqlInt32 { get; }
    internal SqlInt64 SqlInt64 { get; }
    internal SqlMoney SqlMoney { get; }
    internal SqlSingle SqlSingle { get; }
    internal SqlString SqlString { get; }
    internal object SqlValue { get; }
    internal object Value { get; }
    private static SqlBuffer();
    internal bool get_IsEmpty();
    internal bool get_IsNull();
    internal StorageType get_VariantInternalStorageType();
    internal bool get_Boolean();
    internal void set_Boolean(bool value);
    internal byte get_Byte();
    internal void set_Byte(byte value);
    internal Byte[] get_ByteArray();
    internal DateTime get_DateTime();
    internal decimal get_Decimal();
    internal double get_Double();
    internal void set_Double(double value);
    internal Guid get_Guid();
    internal short get_Int16();
    internal void set_Int16(short value);
    internal int get_Int32();
    internal void set_Int32(int value);
    internal long get_Int64();
    internal void set_Int64(long value);
    internal float get_Single();
    internal void set_Single(float value);
    internal string get_String();
    internal string get_KatmaiDateTimeString();
    internal SqlString get_KatmaiDateTimeSqlString();
    internal TimeSpan get_Time();
    internal DateTimeOffset get_DateTimeOffset();
    internal SqlBinary get_SqlBinary();
    internal void set_SqlBinary(SqlBinary value);
    internal SqlBoolean get_SqlBoolean();
    internal SqlByte get_SqlByte();
    internal SqlCachedBuffer get_SqlCachedBuffer();
    internal void set_SqlCachedBuffer(SqlCachedBuffer value);
    internal SqlXml get_SqlXml();
    internal void set_SqlXml(SqlXml value);
    internal SqlDateTime get_SqlDateTime();
    internal SqlDecimal get_SqlDecimal();
    internal SqlDouble get_SqlDouble();
    internal SqlGuid get_SqlGuid();
    internal void set_SqlGuid(SqlGuid value);
    internal SqlInt16 get_SqlInt16();
    internal SqlInt32 get_SqlInt32();
    internal SqlInt64 get_SqlInt64();
    internal SqlMoney get_SqlMoney();
    internal SqlSingle get_SqlSingle();
    internal SqlString get_SqlString();
    internal object get_SqlValue();
    internal object get_Value();
    internal Type GetTypeFromStorageType(bool isSqlType);
    internal static SqlBuffer[] CreateBufferArray(int length);
    internal static SqlBuffer[] CloneBufferArray(SqlBuffer[] values);
    internal static void Clear(SqlBuffer[] values);
    internal void Clear();
    internal void SetToDateTime(int daypart, int timepart);
    internal void SetToDecimal(byte precision, byte scale, bool positive, Int32[] bits);
    internal void SetToMoney(long value);
    internal void SetToNullOfType(StorageType storageType);
    internal void SetToString(string value);
    internal void SetToDate(Byte[] bytes);
    internal void SetToDate(DateTime date);
    internal void SetToTime(Byte[] bytes, int length, byte scale, byte denormalizedScale);
    internal void SetToTime(TimeSpan timeSpan, byte scale);
    internal void SetToDateTime2(Byte[] bytes, int length, byte scale, byte denormalizedScale);
    internal void SetToDateTime2(DateTime dateTime, byte scale);
    internal void SetToDateTimeOffset(Byte[] bytes, int length, byte scale, byte denormalizedScale);
    internal void SetToDateTimeOffset(DateTimeOffset dateTimeOffset, byte scale);
}
public class System.Data.SqlClient.SqlBulkCopy : object {
    internal int _objectID;
    public int BatchSize { get; public set; }
    public int BulkCopyTimeout { get; public set; }
    public bool EnableStreaming { get; public set; }
    public SqlBulkCopyColumnMappingCollection ColumnMappings { get; }
    public string DestinationTableName { get; public set; }
    public int NotifyAfter { get; public set; }
    internal int ObjectID { get; }
    internal SqlStatistics Statistics { get; }
    public SqlBulkCopy(SqlConnection connection);
    public SqlBulkCopy(SqlConnection connection, SqlBulkCopyOptions copyOptions, SqlTransaction externalTransaction);
    public SqlBulkCopy(string connectionString);
    public SqlBulkCopy(string connectionString, SqlBulkCopyOptions copyOptions);
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public int get_BulkCopyTimeout();
    public void set_BulkCopyTimeout(int value);
    public bool get_EnableStreaming();
    public void set_EnableStreaming(bool value);
    public SqlBulkCopyColumnMappingCollection get_ColumnMappings();
    public string get_DestinationTableName();
    public void set_DestinationTableName(string value);
    public int get_NotifyAfter();
    public void set_NotifyAfter(int value);
    internal int get_ObjectID();
    public void add_SqlRowsCopied(SqlRowsCopiedEventHandler value);
    public void remove_SqlRowsCopied(SqlRowsCopiedEventHandler value);
    internal SqlStatistics get_Statistics();
    private sealed virtual override void System.IDisposable.Dispose();
    public void Close();
    public void WriteToServer(DbDataReader reader);
    public void WriteToServer(IDataReader reader);
    public void WriteToServer(DataTable table);
    public void WriteToServer(DataTable table, DataRowState rowState);
    public void WriteToServer(DataRow[] rows);
    public Task WriteToServerAsync(DataRow[] rows);
    public Task WriteToServerAsync(DataRow[] rows, CancellationToken cancellationToken);
    public Task WriteToServerAsync(DbDataReader reader);
    public Task WriteToServerAsync(DbDataReader reader, CancellationToken cancellationToken);
    public Task WriteToServerAsync(IDataReader reader);
    public Task WriteToServerAsync(IDataReader reader, CancellationToken cancellationToken);
    public Task WriteToServerAsync(DataTable table);
    public Task WriteToServerAsync(DataTable table, CancellationToken cancellationToken);
    public Task WriteToServerAsync(DataTable table, DataRowState rowState);
    public Task WriteToServerAsync(DataTable table, DataRowState rowState, CancellationToken cancellationToken);
    internal void OnConnectionClosed();
}
public class System.Data.SqlClient.SqlBulkCopyColumnMapping : object {
    internal string _destinationColumnName;
    internal int _destinationColumnOrdinal;
    internal string _sourceColumnName;
    internal int _sourceColumnOrdinal;
    internal int _internalDestinationColumnOrdinal;
    internal int _internalSourceColumnOrdinal;
    public string DestinationColumn { get; public set; }
    public int DestinationOrdinal { get; public set; }
    public string SourceColumn { get; public set; }
    public int SourceOrdinal { get; public set; }
    public SqlBulkCopyColumnMapping(string sourceColumn, string destinationColumn);
    public SqlBulkCopyColumnMapping(int sourceColumnOrdinal, string destinationColumn);
    public SqlBulkCopyColumnMapping(string sourceColumn, int destinationOrdinal);
    public SqlBulkCopyColumnMapping(int sourceColumnOrdinal, int destinationOrdinal);
    public string get_DestinationColumn();
    public void set_DestinationColumn(string value);
    public int get_DestinationOrdinal();
    public void set_DestinationOrdinal(int value);
    public string get_SourceColumn();
    public void set_SourceColumn(string value);
    public int get_SourceOrdinal();
    public void set_SourceOrdinal(int value);
}
[DefaultMemberAttribute("Item")]
public class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection : CollectionBase {
    public SqlBulkCopyColumnMapping Item { get; }
    internal bool ReadOnly { get; internal set; }
    public SqlBulkCopyColumnMapping get_Item(int index);
    internal bool get_ReadOnly();
    internal void set_ReadOnly(bool value);
    public SqlBulkCopyColumnMapping Add(SqlBulkCopyColumnMapping bulkCopyColumnMapping);
    public SqlBulkCopyColumnMapping Add(string sourceColumn, string destinationColumn);
    public SqlBulkCopyColumnMapping Add(int sourceColumnIndex, string destinationColumn);
    public SqlBulkCopyColumnMapping Add(string sourceColumn, int destinationColumnIndex);
    public SqlBulkCopyColumnMapping Add(int sourceColumnIndex, int destinationColumnIndex);
    public void Clear();
    public bool Contains(SqlBulkCopyColumnMapping value);
    public void CopyTo(SqlBulkCopyColumnMapping[] array, int index);
    internal void CreateDefaultMapping(int columnCount);
    public int IndexOf(SqlBulkCopyColumnMapping value);
    public void Insert(int index, SqlBulkCopyColumnMapping value);
    public void Remove(SqlBulkCopyColumnMapping value);
    public void RemoveAt(int index);
    internal void ValidateCollection();
}
[FlagsAttribute]
public enum System.Data.SqlClient.SqlBulkCopyOptions : Enum {
    public int value__;
    public static SqlBulkCopyOptions Default;
    public static SqlBulkCopyOptions KeepIdentity;
    public static SqlBulkCopyOptions CheckConstraints;
    public static SqlBulkCopyOptions TableLock;
    public static SqlBulkCopyOptions KeepNulls;
    public static SqlBulkCopyOptions FireTriggers;
    public static SqlBulkCopyOptions UseInternalTransaction;
    public static SqlBulkCopyOptions AllowEncryptedValueModifications;
}
internal class System.Data.SqlClient.SqlCachedBuffer : object {
    public static SqlCachedBuffer Null;
    internal List`1<Byte[]> CachedBytes { get; }
    public bool IsNull { get; }
    private static SqlCachedBuffer();
    internal List`1<Byte[]> get_CachedBytes();
    internal static bool TryCreate(SqlMetaDataPriv metadata, TdsParser parser, TdsParserStateObject stateObj, SqlCachedBuffer& buffer);
    internal Stream ToStream();
    public virtual string ToString();
    internal SqlString ToSqlString();
    internal SqlXml ToSqlXml();
    internal XmlReader ToXmlReader();
    public sealed virtual bool get_IsNull();
}
internal class System.Data.SqlClient.SqlCachedStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal SqlCachedStream(SqlCachedBuffer sqlBuf);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class System.Data.SqlClient.SqlCipherMetadata : object {
    internal Nullable`1<SqlTceCipherInfoEntry> EncryptionInfo { get; internal set; }
    internal byte CipherAlgorithmId { get; }
    internal string CipherAlgorithmName { get; }
    internal byte EncryptionType { get; }
    internal byte NormalizationRuleVersion { get; }
    internal SqlClientEncryptionAlgorithm CipherAlgorithm { get; internal set; }
    internal Nullable`1<SqlEncryptionKeyInfo> EncryptionKeyInfo { get; internal set; }
    internal ushort CekTableOrdinal { get; }
    internal SqlCipherMetadata(Nullable`1<SqlTceCipherInfoEntry> sqlTceCipherInfoEntry, ushort ordinal, byte cipherAlgorithmId, string cipherAlgorithmName, byte encryptionType, byte normalizationRuleVersion);
    internal Nullable`1<SqlTceCipherInfoEntry> get_EncryptionInfo();
    internal void set_EncryptionInfo(Nullable`1<SqlTceCipherInfoEntry> value);
    internal byte get_CipherAlgorithmId();
    internal string get_CipherAlgorithmName();
    internal byte get_EncryptionType();
    internal byte get_NormalizationRuleVersion();
    internal SqlClientEncryptionAlgorithm get_CipherAlgorithm();
    internal void set_CipherAlgorithm(SqlClientEncryptionAlgorithm value);
    internal Nullable`1<SqlEncryptionKeyInfo> get_EncryptionKeyInfo();
    internal void set_EncryptionKeyInfo(Nullable`1<SqlEncryptionKeyInfo> value);
    internal ushort get_CekTableOrdinal();
    internal bool IsAlgorithmInitialized();
}
internal abstract class System.Data.SqlClient.SqlClientEncryptionAlgorithm : object {
    internal abstract virtual Byte[] EncryptData(Byte[] plainText);
    internal abstract virtual Byte[] DecryptData(Byte[] cipherText);
}
internal abstract class System.Data.SqlClient.SqlClientEncryptionAlgorithmFactory : object {
    internal abstract virtual SqlClientEncryptionAlgorithm Create(SqlClientSymmetricKey encryptionKey, SqlClientEncryptionType encryptionType, string encryptionAlgorithm);
}
internal class System.Data.SqlClient.SqlClientEncryptionAlgorithmFactoryList : object {
    private static SqlClientEncryptionAlgorithmFactoryList();
    internal static SqlClientEncryptionAlgorithmFactoryList GetInstance();
    internal string GetRegisteredCipherAlgorithmNames();
    internal void GetAlgorithm(SqlClientSymmetricKey key, byte type, string algorithmName, SqlClientEncryptionAlgorithm& encryptionAlgorithm);
}
internal enum System.Data.SqlClient.SqlClientEncryptionType : Enum {
    public int value__;
    public static SqlClientEncryptionType PlainText;
    public static SqlClientEncryptionType Deterministic;
    public static SqlClientEncryptionType Randomized;
}
public class System.Data.SqlClient.SqlClientFactory : DbProviderFactory {
    public static SqlClientFactory Instance;
    public bool CanCreateDataSourceEnumerator { get; }
    private static SqlClientFactory();
    public virtual bool get_CanCreateDataSourceEnumerator();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
    public virtual CodeAccessPermission CreatePermission(PermissionState state);
    public virtual DbDataSourceEnumerator CreateDataSourceEnumerator();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
public class System.Data.SqlClient.SqlClientLogger : object {
    public bool IsLoggingEnabled { get; }
    public void LogInfo(string type, string method, string message);
    public void LogError(string type, string method, string message);
    public bool LogAssert(bool value, string type, string method, string message);
    public bool get_IsLoggingEnabled();
}
public static class System.Data.SqlClient.SqlClientMetaDataCollectionNames : object {
    public static string Columns;
    public static string Databases;
    public static string ForeignKeys;
    public static string IndexColumns;
    public static string Indexes;
    public static string Parameters;
    public static string ProcedureColumns;
    public static string Procedures;
    public static string Tables;
    public static string UserDefinedTypes;
    public static string Users;
    public static string ViewColumns;
    public static string Views;
    private static SqlClientMetaDataCollectionNames();
}
public class System.Data.SqlClient.SqlClientPermission : DBDataPermission {
    public SqlClientPermission(PermissionState state);
    [ObsoleteAttribute("SqlClientPermission(PermissionState state, Boolean allowBlankPassword) has been deprecated.  Use the SqlClientPermission(PermissionState.None) constructor.  http://go.microsoft.com/fwlink/?linkid=14202", "True")]
public SqlClientPermission(PermissionState state, bool allowBlankPassword);
    internal SqlClientPermission(SqlClientPermissionAttribute permissionAttribute);
    internal SqlClientPermission(SqlConnectionString constr);
    public virtual void Add(string connectionString, string restrictions, KeyRestrictionBehavior behavior);
    public virtual IPermission Copy();
}
[AttributeUsageAttribute("109")]
public class System.Data.SqlClient.SqlClientPermissionAttribute : DBDataPermissionAttribute {
    public SqlClientPermissionAttribute(SecurityAction action);
    public virtual IPermission CreatePermission();
}
internal class System.Data.SqlClient.SqlClientSymmetricKey : object {
    protected Byte[] _rootKey;
    internal Byte[] RootKey { get; }
    internal SqlClientSymmetricKey(Byte[] rootKey);
    protected virtual override void Finalize();
    internal virtual Byte[] get_RootKey();
    internal virtual string GetKeyHash();
    internal virtual int Length();
}
internal class System.Data.SqlClient.SqlCollation : object {
    internal static UInt32 MaskLcid;
    internal UInt32 info;
    internal byte sortId;
    internal int LCID { get; internal set; }
    internal SqlCompareOptions SqlCompareOptions { get; internal set; }
    internal int get_LCID();
    internal void set_LCID(int value);
    internal SqlCompareOptions get_SqlCompareOptions();
    internal void set_SqlCompareOptions(SqlCompareOptions value);
    internal string TraceString();
    internal static bool AreSame(SqlCollation a, SqlCollation b);
}
public class System.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider : SqlColumnEncryptionKeyStoreProvider {
    public static string ProviderName;
    internal static string RSAEncryptionAlgorithmWithOAEP;
    public virtual Byte[] DecryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] encryptedColumnEncryptionKey);
    public virtual Byte[] EncryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] columnEncryptionKey);
    public virtual Byte[] SignColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations);
    public virtual bool VerifyColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations, Byte[] signature);
}
public class System.Data.SqlClient.SqlColumnEncryptionCngProvider : SqlColumnEncryptionKeyStoreProvider {
    public static string ProviderName;
    public virtual Byte[] DecryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] encryptedColumnEncryptionKey);
    public virtual Byte[] EncryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] columnEncryptionKey);
    public virtual Byte[] SignColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations);
    public virtual bool VerifyColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations, Byte[] signature);
}
public class System.Data.SqlClient.SqlColumnEncryptionCspProvider : SqlColumnEncryptionKeyStoreProvider {
    public static string ProviderName;
    public virtual Byte[] DecryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] encryptedColumnEncryptionKey);
    public virtual Byte[] EncryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] columnEncryptionKey);
    public virtual Byte[] SignColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations);
    public virtual bool VerifyColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations, Byte[] signature);
}
public abstract class System.Data.SqlClient.SqlColumnEncryptionEnclaveProvider : object {
    public abstract virtual void GetEnclaveSession(string serverName, string attestationUrl, SqlEnclaveSession& sqlEnclaveSession, Int64& counter);
    public abstract virtual SqlEnclaveAttestationParameters GetAttestationParameters();
    public abstract virtual void CreateEnclaveSession(Byte[] enclaveAttestationInfo, ECDiffieHellmanCng clientDiffieHellmanKey, string attestationUrl, string servername, SqlEnclaveSession& sqlEnclaveSession, Int64& counter);
    public abstract virtual void InvalidateEnclaveSession(string serverName, string enclaveAttestationUrl, SqlEnclaveSession enclaveSession);
}
internal class System.Data.SqlClient.SqlColumnEncryptionEnclaveProviderConfigurationManager : object {
    public SqlColumnEncryptionEnclaveProviderConfigurationManager(SqlColumnEncryptionEnclaveProviderConfigurationSection configSection);
    public SqlColumnEncryptionEnclaveProvider GetSqlColumnEncryptionEnclaveProvider(string SqlColumnEncryptionEnclaveProviderName);
}
internal class System.Data.SqlClient.SqlColumnEncryptionEnclaveProviderConfigurationSection : ConfigurationSection {
    [ConfigurationPropertyAttribute("providers")]
public ProviderSettingsCollection Providers { get; }
    public ProviderSettingsCollection get_Providers();
}
internal class System.Data.SqlClient.SqlColumnEncryptionInputParameterInfo : object {
    internal SmiParameterMetaData ParameterMetadata { get; }
    internal Byte[] SerializedWireFormat { get; }
    internal SqlColumnEncryptionInputParameterInfo(SmiParameterMetaData smiParameterMetadata, SqlCipherMetadata cipherMetadata);
    internal SmiParameterMetaData get_ParameterMetadata();
    internal Byte[] get_SerializedWireFormat();
}
public abstract class System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider : object {
    public abstract virtual Byte[] DecryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] encryptedColumnEncryptionKey);
    public abstract virtual Byte[] EncryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] columnEncryptionKey);
    public virtual Byte[] SignColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations);
    public virtual bool VerifyColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations, Byte[] signature);
}
[DesignerAttribute("Microsoft.VSDesigner.Data.VS.SqlCommandDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultEventAttribute("RecordsAffected")]
[ToolboxItemAttribute("True")]
public class System.Data.SqlClient.SqlCommand : DbCommand {
    internal int ObjectID;
    internal SqlDependency _sqlDep;
    internal EnclavePackage enclavePackage;
    internal int _rowsAffected;
    internal static String[] PreKatmaiProcParamsNames;
    internal static String[] KatmaiProcParamsNames;
    internal bool InPrepare { get; }
    internal bool IsColumnEncryptionEnabled { get; }
    internal bool ShouldUseEnclaveBasedWorkflow { get; }
    internal bool IsDescribeParameterEncryptionRPCCurrentlyInProgress { get; }
    internal bool CachingQueryMetadataPostponed { get; internal set; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DbCommand_Connection")]
[DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SqlConnection Connection { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    [ResCategoryAttribute("DataCategory_Notification")]
[ResDescriptionAttribute("SqlCommand_NotificationAutoEnlist")]
[DefaultValueAttribute("True")]
public bool NotificationAutoEnlist { get; public set; }
    [ResDescriptionAttribute("SqlCommand_Notification")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[ResCategoryAttribute("DataCategory_Notification")]
public SqlNotificationRequest Notification { get; public set; }
    internal SqlStatistics Statistics { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[ResDescriptionAttribute("DbCommand_Transaction")]
[BrowsableAttribute("False")]
public SqlTransaction Transaction { get; public set; }
    protected DbTransaction DbTransaction { get; protected set; }
    [RefreshPropertiesAttribute("1")]
[EditorAttribute("Microsoft.VSDesigner.Data.SQL.Design.SqlCommandTextEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ResDescriptionAttribute("DbCommand_CommandText")]
[ResCategoryAttribute("DataCategory_Data")]
[DefaultValueAttribute("")]
public string CommandText { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("TCE_SqlCommand_ColumnEncryptionSetting")]
public SqlCommandColumnEncryptionSetting ColumnEncryptionSetting { get; }
    [ResDescriptionAttribute("DbCommand_CommandTimeout")]
[ResCategoryAttribute("DataCategory_Data")]
public int CommandTimeout { get; public set; }
    [RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DbCommand_CommandType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public CommandType CommandType { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignOnlyAttribute("True")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("True")]
public bool DesignTimeVisible { get; public set; }
    [ResDescriptionAttribute("DbCommand_Parameters")]
[DesignerSerializationVisibilityAttribute("2")]
[ResCategoryAttribute("DataCategory_Data")]
public SqlParameterCollection Parameters { get; }
    protected DbParameterCollection DbParameterCollection { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ResCategoryAttribute("DataCategory_Update")]
[ResDescriptionAttribute("DbCommand_UpdatedRowSource")]
public UpdateRowSource UpdatedRowSource { get; public set; }
    internal _SqlMetaDataSet MetaData { get; }
    internal TdsParserStateObject StateObject { get; }
    internal bool IsDirty { get; internal set; }
    internal int RowsAffectedByDescribeParameterEncryption { get; internal set; }
    internal int InternalRecordsAffected { get; internal set; }
    internal bool BatchRPCMode { get; internal set; }
    public SqlCommand(string cmdText);
    public SqlCommand(string cmdText, SqlConnection connection);
    public SqlCommand(string cmdText, SqlConnection connection, SqlTransaction transaction);
    public SqlCommand(string cmdText, SqlConnection connection, SqlTransaction transaction, SqlCommandColumnEncryptionSetting columnEncryptionSetting);
    private static SqlCommand();
    internal bool get_InPrepare();
    internal bool get_IsColumnEncryptionEnabled();
    internal bool get_ShouldUseEnclaveBasedWorkflow();
    internal bool get_IsDescribeParameterEncryptionRPCCurrentlyInProgress();
    [CompilerGeneratedAttribute]
internal bool get_CachingQueryMetadataPostponed();
    [CompilerGeneratedAttribute]
internal void set_CachingQueryMetadataPostponed(bool value);
    public SqlConnection get_Connection();
    public void set_Connection(SqlConnection value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    public bool get_NotificationAutoEnlist();
    public void set_NotificationAutoEnlist(bool value);
    public SqlNotificationRequest get_Notification();
    public void set_Notification(SqlNotificationRequest value);
    internal SqlStatistics get_Statistics();
    public SqlTransaction get_Transaction();
    public void set_Transaction(SqlTransaction value);
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public SqlCommandColumnEncryptionSetting get_ColumnEncryptionSetting();
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public void ResetCommandTimeout();
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    public SqlParameterCollection get_Parameters();
    protected virtual DbParameterCollection get_DbParameterCollection();
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    public void add_StatementCompleted(StatementCompletedEventHandler value);
    public void remove_StatementCompleted(StatementCompletedEventHandler value);
    internal void OnStatementCompleted(int recordCount);
    public virtual void Prepare();
    internal void Unprepare();
    public virtual void Cancel();
    public SqlParameter CreateParameter();
    protected virtual DbParameter CreateDbParameter();
    protected virtual void Dispose(bool disposing);
    public virtual object ExecuteScalar();
    public virtual int ExecuteNonQuery();
    internal void ExecuteToPipe(SmiContext pipeContext);
    public IAsyncResult BeginExecuteNonQuery();
    public IAsyncResult BeginExecuteNonQuery(AsyncCallback callback, object stateObject);
    public int EndExecuteNonQuery(IAsyncResult asyncResult);
    public XmlReader ExecuteXmlReader();
    public IAsyncResult BeginExecuteXmlReader();
    public IAsyncResult BeginExecuteXmlReader(AsyncCallback callback, object stateObject);
    public XmlReader EndExecuteXmlReader(IAsyncResult asyncResult);
    public IAsyncResult BeginExecuteReader();
    public IAsyncResult BeginExecuteReader(AsyncCallback callback, object stateObject);
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public SqlDataReader ExecuteReader();
    public SqlDataReader ExecuteReader(CommandBehavior behavior);
    public IAsyncResult BeginExecuteReader(CommandBehavior behavior);
    public IAsyncResult BeginExecuteReader(AsyncCallback callback, object stateObject, CommandBehavior behavior);
    internal SqlDataReader ExecuteReader(CommandBehavior behavior, string method);
    public SqlDataReader EndExecuteReader(IAsyncResult asyncResult);
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public Task`1<SqlDataReader> ExecuteReaderAsync();
    public Task`1<SqlDataReader> ExecuteReaderAsync(CommandBehavior behavior);
    public Task`1<SqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    public Task`1<SqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public Task`1<XmlReader> ExecuteXmlReaderAsync();
    public Task`1<XmlReader> ExecuteXmlReaderAsync(CancellationToken cancellationToken);
    internal void DeriveParameters();
    internal _SqlMetaDataSet get_MetaData();
    internal static string SqlNotificationContext();
    internal SqlDataReader RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, bool returnStream, string method);
    internal SqlDataReader RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, bool returnStream, string method, TaskCompletionSource`1<object> completion, int timeout, Task& task, Boolean& usedCache, bool asyncWrite, bool inRetry);
    public SqlCommand Clone();
    private sealed virtual override object System.ICloneable.Clone();
    internal void OnDoneDescribeParameterEncryptionProc(TdsParserStateObject stateObj);
    internal void OnDoneProc();
    internal void OnReturnStatus(int status);
    internal void OnReturnValue(SqlReturnValue rec, TdsParserStateObject stateObj);
    internal void OnParametersAvailableSmi(SmiParameterMetaData[] paramMetaData, ITypedGettersV3 parameterValues);
    internal void OnParameterAvailableSmi(SmiParameterMetaData metaData, ITypedGettersV3 parameterValues, int ordinal);
    internal string BuildParamList(TdsParser parser, SqlParameterCollection parameters, bool includeReturnValue);
    internal void CheckThrowSNIException();
    internal void OnConnectionClosed();
    internal TdsParserStateObject get_StateObject();
    internal bool get_IsDirty();
    internal void set_IsDirty(bool value);
    internal int get_RowsAffectedByDescribeParameterEncryption();
    internal void set_RowsAffectedByDescribeParameterEncryption(int value);
    internal int get_InternalRecordsAffected();
    internal void set_InternalRecordsAffected(int value);
    internal bool get_BatchRPCMode();
    internal void set_BatchRPCMode(bool value);
    internal void ClearBatchCommand();
    internal void AddBatchCommand(string commandText, SqlParameterCollection parameters, CommandType cmdType, SqlCommandColumnEncryptionSetting columnEncryptionSetting);
    internal int ExecuteBatchRPCCommand();
    internal Nullable`1<int> GetRecordsAffected(int commandIndex);
    internal SqlException GetErrors(int commandIndex);
}
public class System.Data.SqlClient.SqlCommandBuilder : DbCommandBuilder {
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public CatalogLocation CatalogLocation { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public string CatalogSeparator { get; public set; }
    [ResDescriptionAttribute("SqlCommandBuilder_DataAdapter")]
[DefaultValueAttribute("")]
[ResCategoryAttribute("DataCategory_Update")]
public SqlDataAdapter DataAdapter { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string QuotePrefix { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string QuoteSuffix { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public string SchemaSeparator { get; public set; }
    public SqlCommandBuilder(SqlDataAdapter adapter);
    public virtual CatalogLocation get_CatalogLocation();
    public virtual void set_CatalogLocation(CatalogLocation value);
    public virtual string get_CatalogSeparator();
    public virtual void set_CatalogSeparator(string value);
    public SqlDataAdapter get_DataAdapter();
    public void set_DataAdapter(SqlDataAdapter value);
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    public virtual string get_SchemaSeparator();
    public virtual void set_SchemaSeparator(string value);
    public SqlCommand GetInsertCommand();
    public SqlCommand GetInsertCommand(bool useColumnsForParameterNames);
    public SqlCommand GetUpdateCommand();
    public SqlCommand GetUpdateCommand(bool useColumnsForParameterNames);
    public SqlCommand GetDeleteCommand();
    public SqlCommand GetDeleteCommand(bool useColumnsForParameterNames);
    protected virtual void ApplyParameterInfo(DbParameter parameter, DataRow datarow, StatementType statementType, bool whereClause);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    public static void DeriveParameters(SqlCommand command);
    protected virtual DataTable GetSchemaTable(DbCommand srcCommand);
    protected virtual DbCommand InitializeCommand(DbCommand command);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
}
public enum System.Data.SqlClient.SqlCommandColumnEncryptionSetting : Enum {
    public int value__;
    public static SqlCommandColumnEncryptionSetting UseConnectionSetting;
    public static SqlCommandColumnEncryptionSetting Enabled;
    public static SqlCommandColumnEncryptionSetting ResultSetOnly;
    public static SqlCommandColumnEncryptionSetting Disabled;
}
internal class System.Data.SqlClient.SqlCommandSet : object {
    internal int _objectID;
    internal int CommandCount { get; }
    unknown int CommandTimeout {internal set; }
    internal SqlConnection Connection { get; internal set; }
    unknown SqlTransaction Transaction {internal set; }
    internal int ObjectID { get; }
    private static SqlCommandSet();
    internal int get_CommandCount();
    internal void set_CommandTimeout(int value);
    internal SqlConnection get_Connection();
    internal void set_Connection(SqlConnection value);
    internal void set_Transaction(SqlTransaction value);
    internal int get_ObjectID();
    internal void Append(SqlCommand command);
    internal static void BuildStoredProcedureName(StringBuilder builder, string part);
    internal void Clear();
    internal void Dispose();
    internal int ExecuteNonQuery();
    internal SqlParameter GetParameter(int commandIndex, int parameterIndex);
    internal bool GetBatchedAffected(int commandIdentifier, Int32& recordsAffected, Exception& error);
    internal int GetParameterCount(int commandIndex);
}
[DefaultEventAttribute("InfoMessage")]
public class System.Data.SqlClient.SqlConnection : DbConnection {
    internal static SqlColumnEncryptionEnclaveProviderConfigurationManager sqlColumnEncryptionEnclaveProviderConfigurationManager;
    internal SqlStatistics _statistics;
    internal Task _currentReconnectionTask;
    internal SessionData _recoverySessionData;
    internal WindowsIdentity _lastIdentity;
    internal WindowsIdentity _impersonateIdentity;
    internal bool _applyTransientFaultHandling;
    internal static CodeAccessPermission ExecutePermission;
    internal int ObjectID;
    [ResDescriptionAttribute("TCE_SqlConnection_TrustedColumnMasterKeyPaths")]
[DefaultValueAttribute("")]
[ResCategoryAttribute("DataCategory_Data")]
public static IDictionary`2<string, IList`1<string>> ColumnEncryptionTrustedMasterKeyPaths { get; }
    [ResDescriptionAttribute("TCE_SqlConnection_ColumnEncryptionQueryMetadataCacheEnabled")]
[DefaultValueAttribute("")]
[ResCategoryAttribute("DataCategory_Data")]
public static bool ColumnEncryptionQueryMetadataCacheEnabled { get; public set; }
    [ResDescriptionAttribute("TCE_SqlConnection_ColumnEncryptionKeyCacheTtl")]
[DefaultValueAttribute("")]
[ResCategoryAttribute("DataCategory_Data")]
public static TimeSpan ColumnEncryptionKeyCacheTtl { get; public set; }
    [ResDescriptionAttribute("SqlConnection_StatisticsEnabled")]
[DefaultValueAttribute("False")]
[ResCategoryAttribute("DataCategory_Data")]
public bool StatisticsEnabled { get; public set; }
    internal bool AsyncCommandInProgress { get; internal set; }
    internal bool IsContextConnection { get; }
    internal bool IsColumnEncryptionSettingEnabled { get; }
    internal string EnclaveAttestationUrl { get; }
    internal TransactionBindingEnum TransactionBinding { get; }
    internal TypeSystem TypeSystem { get; }
    internal Version TypeSystemAssemblyVersion { get; }
    internal PoolBlockingPeriod PoolBlockingPeriod { get; }
    internal int ConnectRetryInterval { get; }
    protected DbProviderFactory DbProviderFactory { get; }
    [ResDescriptionAttribute("SqlConnection_AccessToken")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string AccessToken { get; public set; }
    [RecommendedAsConfigurableAttribute("True")]
[DefaultValueAttribute("")]
[ResDescriptionAttribute("SqlConnection_ConnectionString")]
[SettingsBindableAttribute("True")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Data")]
[EditorAttribute("Microsoft.VSDesigner.Data.SQL.Design.SqlConnectionStringEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string ConnectionString { get; public set; }
    [ResDescriptionAttribute("SqlConnection_ConnectionTimeout")]
[DesignerSerializationVisibilityAttribute("0")]
public int ConnectionTimeout { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[ResDescriptionAttribute("SqlConnection_Database")]
public string Database { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[ResDescriptionAttribute("SqlConnection_DataSource")]
[BrowsableAttribute("True")]
public string DataSource { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("SqlConnection_PacketSize")]
public int PacketSize { get; }
    [ResDescriptionAttribute("SqlConnection_ClientConnectionId")]
[ResCategoryAttribute("DataCategory_Data")]
[DesignerSerializationVisibilityAttribute("0")]
public Guid ClientConnectionId { get; }
    [ResDescriptionAttribute("SqlConnection_ServerVersion")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ServerVersion { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[ResDescriptionAttribute("DbConnection_State")]
[BrowsableAttribute("False")]
public ConnectionState State { get; }
    internal SqlStatistics Statistics { get; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("SqlConnection_WorkstationId")]
[DesignerSerializationVisibilityAttribute("0")]
public string WorkstationId { get; }
    [ResDescriptionAttribute("SqlConnection_Credential")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public SqlCredential Credential { get; public set; }
    public bool FireInfoMessageEventOnUserErrors { get; public set; }
    internal int ReconnectCount { get; }
    internal bool HasLocalTransaction { get; }
    internal bool HasLocalTransactionFromAPI { get; }
    internal bool IsShiloh { get; }
    internal bool IsYukonOrNewer { get; }
    internal bool IsKatmaiOrNewer { get; }
    internal TdsParser Parser { get; }
    internal bool Asynchronous { get; }
    internal int CloseCount { get; }
    internal DbConnectionFactory ConnectionFactory { get; }
    internal DbConnectionOptions ConnectionOptions { get; }
    internal DbConnectionInternal InnerConnection { get; }
    internal DbConnectionPoolGroup PoolGroup { get; internal set; }
    internal DbConnectionOptions UserConnectionOptions { get; }
    private static SqlConnection();
    public SqlConnection(string connectionString);
    public SqlConnection(string connectionString, SqlCredential credential);
    public static IDictionary`2<string, IList`1<string>> get_ColumnEncryptionTrustedMasterKeyPaths();
    public static bool get_ColumnEncryptionQueryMetadataCacheEnabled();
    public static void set_ColumnEncryptionQueryMetadataCacheEnabled(bool value);
    public static TimeSpan get_ColumnEncryptionKeyCacheTtl();
    public static void set_ColumnEncryptionKeyCacheTtl(TimeSpan value);
    public static void RegisterColumnEncryptionKeyStoreProviders(IDictionary`2<string, SqlColumnEncryptionKeyStoreProvider> customProviders);
    internal static bool TryGetColumnEncryptionKeyStoreProvider(string providerName, SqlColumnEncryptionKeyStoreProvider& columnKeyStoreProvider);
    internal static List`1<string> GetColumnEncryptionSystemKeyStoreProviders();
    internal static List`1<string> GetColumnEncryptionCustomKeyStoreProviders();
    public bool get_StatisticsEnabled();
    public void set_StatisticsEnabled(bool value);
    internal bool get_AsyncCommandInProgress();
    [ReliabilityContractAttribute("3", "2")]
internal void set_AsyncCommandInProgress(bool value);
    internal bool get_IsContextConnection();
    internal bool get_IsColumnEncryptionSettingEnabled();
    internal string get_EnclaveAttestationUrl();
    internal TransactionBindingEnum get_TransactionBinding();
    internal TypeSystem get_TypeSystem();
    internal Version get_TypeSystemAssemblyVersion();
    internal PoolBlockingPeriod get_PoolBlockingPeriod();
    internal int get_ConnectRetryInterval();
    protected virtual DbProviderFactory get_DbProviderFactory();
    public string get_AccessToken();
    public void set_AccessToken(string value);
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public virtual int get_ConnectionTimeout();
    public virtual string get_Database();
    public virtual string get_DataSource();
    public int get_PacketSize();
    public Guid get_ClientConnectionId();
    public virtual string get_ServerVersion();
    public virtual ConnectionState get_State();
    internal SqlStatistics get_Statistics();
    public string get_WorkstationId();
    public SqlCredential get_Credential();
    public void set_Credential(SqlCredential value);
    public void add_InfoMessage(SqlInfoMessageEventHandler value);
    public void remove_InfoMessage(SqlInfoMessageEventHandler value);
    public bool get_FireInfoMessageEventOnUserErrors();
    public void set_FireInfoMessageEventOnUserErrors(bool value);
    internal int get_ReconnectCount();
    public SqlTransaction BeginTransaction();
    public SqlTransaction BeginTransaction(IsolationLevel iso);
    public SqlTransaction BeginTransaction(string transactionName);
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public SqlTransaction BeginTransaction(IsolationLevel iso, string transactionName);
    public virtual void ChangeDatabase(string database);
    public static void ClearAllPools();
    public static void ClearPool(SqlConnection connection);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual void Close();
    public SqlCommand CreateCommand();
    public void EnlistDistributedTransaction(ITransaction transaction);
    public virtual void Open();
    internal void RegisterWaitingForReconnect(Task waitingTask);
    internal Task ValidateAndReconnect(Action beforeDisconnect, int timeout);
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    internal bool get_HasLocalTransaction();
    internal bool get_HasLocalTransactionFromAPI();
    internal bool get_IsShiloh();
    internal bool get_IsYukonOrNewer();
    internal bool get_IsKatmaiOrNewer();
    internal TdsParser get_Parser();
    internal bool get_Asynchronous();
    internal void ValidateConnectionForExecute(string method, SqlCommand command);
    internal static string FixupDatabaseTransactionName(string name);
    internal void OnError(SqlException exception, bool breakConnection, Action`1<Action> wrapCloseInAction);
    internal SqlInternalConnection GetOpenConnection();
    internal SqlInternalConnection GetOpenConnection(string method);
    internal SqlInternalConnectionTds GetOpenTdsConnection();
    internal SqlInternalConnectionTds GetOpenTdsConnection(string method);
    internal void OnInfoMessage(SqlInfoMessageEventArgs imevent);
    internal void OnInfoMessage(SqlInfoMessageEventArgs imevent, Boolean& notified);
    internal void CheckSQLDebug();
    public static void ChangePassword(string connectionString, string newPassword);
    public static void ChangePassword(string connectionString, SqlCredential credential, SecureString newSecurePassword);
    internal void RegisterForConnectionCloseNotification(Task`1& outterTask, object value, int tag);
    public void ResetStatistics();
    public IDictionary RetrieveStatistics();
    internal void CheckGetExtendedUDTInfo(SqlMetaDataPriv metaData, bool fThrow);
    internal object GetUdtValue(object value, SqlMetaDataPriv metaData, bool returnDBNull);
    internal Byte[] GetBytes(object o);
    internal Byte[] GetBytes(object o, Format& format, Int32& maxSize);
    internal int get_CloseCount();
    internal DbConnectionFactory get_ConnectionFactory();
    internal DbConnectionOptions get_ConnectionOptions();
    internal DbConnectionInternal get_InnerConnection();
    internal DbConnectionPoolGroup get_PoolGroup();
    internal void set_PoolGroup(DbConnectionPoolGroup value);
    internal DbConnectionOptions get_UserConnectionOptions();
    [ReliabilityContractAttribute("3", "2")]
internal void Abort(Exception e);
    internal void AddWeakReference(object value, int tag);
    protected virtual DbCommand CreateDbCommand();
    protected virtual void Dispose(bool disposing);
    public virtual void EnlistTransaction(Transaction transaction);
    internal DbMetaDataFactory GetMetaDataFactoryInternal(DbConnectionInternal internalConnection);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    internal void NotifyWeakReference(int message);
    internal void PermissionDemand();
    internal void RemoveWeakReference(object value);
    internal void SetInnerConnectionEvent(DbConnectionInternal to);
    internal bool SetInnerConnectionFrom(DbConnectionInternal to, DbConnectionInternal from);
    internal void SetInnerConnectionTo(DbConnectionInternal to);
    [ConditionalAttribute("DEBUG")]
internal static void VerifyExecutePermission();
}
public enum System.Data.SqlClient.SqlConnectionColumnEncryptionSetting : Enum {
    public int value__;
    public static SqlConnectionColumnEncryptionSetting Disabled;
    public static SqlConnectionColumnEncryptionSetting Enabled;
}
internal class System.Data.SqlClient.SqlConnectionFactory : DbConnectionFactory {
    public static SqlConnectionFactory SingletonInstance;
    public DbProviderFactory ProviderFactory { get; }
    private static SqlConnectionFactory();
    public virtual DbProviderFactory get_ProviderFactory();
    protected virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection);
    protected virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions);
    protected virtual DbConnectionOptions CreateConnectionOptions(string connectionString, DbConnectionOptions previous);
    internal virtual DbConnectionPoolProviderInfo CreateConnectionPoolProviderInfo(DbConnectionOptions connectionOptions);
    protected virtual DbConnectionPoolGroupOptions CreateConnectionPoolGroupOptions(DbConnectionOptions connectionOptions);
    protected virtual DbMetaDataFactory CreateMetaDataFactory(DbConnectionInternal internalConnection, Boolean& cacheMetaDataFactory);
    internal virtual DbConnectionPoolGroupProviderInfo CreateConnectionPoolGroupProviderInfo(DbConnectionOptions connectionOptions);
    internal static SqlConnectionString FindSqlConnectionOptions(SqlConnectionPoolKey key);
    internal virtual DbConnectionPoolGroup GetConnectionPoolGroup(DbConnection connection);
    internal virtual DbConnectionInternal GetInnerConnection(DbConnection connection);
    protected virtual int GetObjectId(DbConnection connection);
    internal virtual void PermissionDemand(DbConnection outerConnection);
    internal virtual void SetConnectionPoolGroup(DbConnection outerConnection, DbConnectionPoolGroup poolGroup);
    internal virtual void SetInnerConnectionEvent(DbConnection owningObject, DbConnectionInternal to);
    internal virtual bool SetInnerConnectionFrom(DbConnection owningObject, DbConnectionInternal to, DbConnectionInternal from);
    internal virtual void SetInnerConnectionTo(DbConnection owningObject, DbConnectionInternal to);
}
internal enum System.Data.SqlClient.SqlConnectionInternalSourceType : Enum {
    public int value__;
    public static SqlConnectionInternalSourceType Principle;
    public static SqlConnectionInternalSourceType Failover;
    public static SqlConnectionInternalSourceType RoutingDestination;
}
internal class System.Data.SqlClient.SqlConnectionPoolGroupProviderInfo : DbConnectionPoolGroupProviderInfo {
    internal string FailoverPartner { get; }
    internal bool UseFailoverPartner { get; }
    internal SqlConnectionPoolGroupProviderInfo(SqlConnectionString connectionOptions);
    internal string get_FailoverPartner();
    internal bool get_UseFailoverPartner();
    internal void AliasCheck(string server);
    internal void FailoverCheck(SqlInternalConnection connection, bool actualUseFailoverPartner, SqlConnectionString userConnectionOptions, string actualFailoverPartner);
    internal void FailoverPermissionDemand();
}
internal class System.Data.SqlClient.SqlConnectionPoolKey : DbConnectionPoolKey {
    internal string ConnectionString { get; internal set; }
    internal SqlCredential Credential { get; }
    internal string AccessToken { get; }
    internal SqlConnectionPoolKey(string connectionString, SqlCredential credential, string accessToken);
    private sealed virtual override object System.ICloneable.Clone();
    internal virtual string get_ConnectionString();
    internal virtual void set_ConnectionString(string value);
    internal SqlCredential get_Credential();
    internal string get_AccessToken();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Data.SqlClient.SqlConnectionPoolProviderInfo : DbConnectionPoolProviderInfo {
    internal string InstanceName { get; internal set; }
    internal string get_InstanceName();
    internal void set_InstanceName(string value);
}
internal class System.Data.SqlClient.SqlConnectionString : DbConnectionOptions {
    internal static int SynonymCount;
    internal bool IntegratedSecurity { get; }
    internal bool Asynchronous { get; }
    internal PoolBlockingPeriod PoolBlockingPeriod { get; }
    internal bool ConnectionReset { get; }
    internal bool ContextConnection { get; }
    internal bool Encrypt { get; }
    internal bool TrustServerCertificate { get; }
    internal bool Enlist { get; }
    internal bool MARS { get; }
    internal bool MultiSubnetFailover { get; }
    internal bool TransparentNetworkIPResolution { get; }
    internal SqlAuthenticationMethod Authentication { get; }
    internal SqlConnectionColumnEncryptionSetting ColumnEncryptionSetting { get; }
    internal string EnclaveAttestationUrl { get; }
    internal bool PersistSecurityInfo { get; }
    internal bool Pooling { get; }
    internal bool Replication { get; }
    internal bool UserInstance { get; }
    internal int ConnectTimeout { get; }
    internal int LoadBalanceTimeout { get; }
    internal int MaxPoolSize { get; }
    internal int MinPoolSize { get; }
    internal int PacketSize { get; }
    internal int ConnectRetryCount { get; }
    internal int ConnectRetryInterval { get; }
    internal ApplicationIntent ApplicationIntent { get; }
    internal string ApplicationName { get; }
    internal string AttachDBFilename { get; }
    internal string CurrentLanguage { get; }
    internal string DataSource { get; }
    internal string LocalDBInstance { get; }
    internal string FailoverPartner { get; }
    internal string InitialCatalog { get; }
    internal string NetworkLibrary { get; }
    internal string Password { get; }
    internal string UserID { get; }
    internal string WorkstationId { get; }
    internal TypeSystem TypeSystemVersion { get; }
    internal Version TypeSystemAssemblyVersion { get; }
    internal TransactionBindingEnum TransactionBinding { get; }
    internal bool EnforceLocalHost { get; }
    internal SqlConnectionString(string connectionString);
    internal SqlConnectionString(SqlConnectionString connectionOptions, string dataSource, bool userInstance, Nullable`1<bool> setEnlistValue);
    private static SqlConnectionString();
    internal bool get_IntegratedSecurity();
    internal bool get_Asynchronous();
    internal PoolBlockingPeriod get_PoolBlockingPeriod();
    internal bool get_ConnectionReset();
    internal bool get_ContextConnection();
    internal bool get_Encrypt();
    internal bool get_TrustServerCertificate();
    internal bool get_Enlist();
    internal bool get_MARS();
    internal bool get_MultiSubnetFailover();
    internal bool get_TransparentNetworkIPResolution();
    internal SqlAuthenticationMethod get_Authentication();
    internal SqlConnectionColumnEncryptionSetting get_ColumnEncryptionSetting();
    internal string get_EnclaveAttestationUrl();
    internal bool get_PersistSecurityInfo();
    internal bool get_Pooling();
    internal bool get_Replication();
    internal bool get_UserInstance();
    internal int get_ConnectTimeout();
    internal int get_LoadBalanceTimeout();
    internal int get_MaxPoolSize();
    internal int get_MinPoolSize();
    internal int get_PacketSize();
    internal int get_ConnectRetryCount();
    internal int get_ConnectRetryInterval();
    internal ApplicationIntent get_ApplicationIntent();
    internal string get_ApplicationName();
    internal string get_AttachDBFilename();
    internal string get_CurrentLanguage();
    internal string get_DataSource();
    internal string get_LocalDBInstance();
    internal string get_FailoverPartner();
    internal string get_InitialCatalog();
    internal string get_NetworkLibrary();
    internal string get_Password();
    internal string get_UserID();
    internal string get_WorkstationId();
    internal TypeSystem get_TypeSystemVersion();
    internal Version get_TypeSystemAssemblyVersion();
    internal TransactionBindingEnum get_TransactionBinding();
    internal bool get_EnforceLocalHost();
    protected internal virtual PermissionSet CreatePermissionSet();
    protected internal virtual string Expand();
    internal static Hashtable GetParseSynonyms();
    internal string ObtainWorkstationId();
    internal static Hashtable NetlibMapping();
    internal static bool ValidProtocal(string protocal);
    internal static void VerifyLocalHostAndFixup(String& host, bool enforceLocalHost, bool fixup);
    internal ApplicationIntent ConvertValueToApplicationIntent();
    internal PoolBlockingPeriod ConvertValueToPoolBlockingPeriod();
    internal SqlAuthenticationMethod ConvertValueToAuthenticationType();
    internal SqlConnectionColumnEncryptionSetting ConvertValueToColumnEncryptionSetting();
    internal bool ConvertValueToEncrypt();
}
[DefaultMemberAttribute("Item")]
[DefaultPropertyAttribute("DataSource")]
[TypeConverterAttribute("System.Data.SqlClient.SqlConnectionStringBuilder/SqlConnectionStringBuilderConverter")]
public class System.Data.SqlClient.SqlConnectionStringBuilder : DbConnectionStringBuilder {
    internal static int KeywordsCount;
    public object Item { get; public set; }
    [RefreshPropertiesAttribute("1")]
[ResDescriptionAttribute("DbConnectionString_ApplicationIntent")]
[DisplayNameAttribute("ApplicationIntent")]
[ResCategoryAttribute("DataCategory_Initialization")]
public ApplicationIntent ApplicationIntent { get; public set; }
    [ResDescriptionAttribute("DbConnectionString_ApplicationName")]
[RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Application Name")]
[ResCategoryAttribute("DataCategory_Context")]
public string ApplicationName { get; public set; }
    [DisplayNameAttribute("Asynchronous Processing")]
[ResDescriptionAttribute("DbConnectionString_AsynchronousProcessing")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Initialization")]
public bool AsynchronousProcessing { get; public set; }
    [ResCategoryAttribute("DataCategory_Source")]
[RefreshPropertiesAttribute("1")]
[EditorAttribute("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DisplayNameAttribute("AttachDbFilename")]
[ResDescriptionAttribute("DbConnectionString_AttachDBFilename")]
public string AttachDBFilename { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("PoolBlockingPeriod")]
[ResCategoryAttribute("DataCategory_Pooling")]
[ResDescriptionAttribute("DbConnectionString_PoolBlockingPeriod")]
public PoolBlockingPeriod PoolBlockingPeriod { get; public set; }
    [BrowsableAttribute("False")]
[ResDescriptionAttribute("DbConnectionString_ConnectionReset")]
[RefreshPropertiesAttribute("1")]
[ObsoleteAttribute("ConnectionReset has been deprecated.  SqlConnection will ignore the 'connection reset' keyword and always reset the connection")]
[ResCategoryAttribute("DataCategory_Pooling")]
[DisplayNameAttribute("Connection Reset")]
public bool ConnectionReset { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Context Connection")]
[ResCategoryAttribute("DataCategory_Source")]
[ResDescriptionAttribute("DbConnectionString_ContextConnection")]
public bool ContextConnection { get; public set; }
    [DisplayNameAttribute("Connect Timeout")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Initialization")]
[ResDescriptionAttribute("DbConnectionString_ConnectTimeout")]
public int ConnectTimeout { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Current Language")]
[ResCategoryAttribute("DataCategory_Initialization")]
[ResDescriptionAttribute("DbConnectionString_CurrentLanguage")]
public string CurrentLanguage { get; public set; }
    [ResCategoryAttribute("DataCategory_Source")]
[TypeConverterAttribute("System.Data.SqlClient.SqlConnectionStringBuilder/SqlDataSourceConverter")]
[DisplayNameAttribute("Data Source")]
[ResDescriptionAttribute("DbConnectionString_DataSource")]
[RefreshPropertiesAttribute("1")]
public string DataSource { get; public set; }
    [DisplayNameAttribute("Encrypt")]
[RefreshPropertiesAttribute("1")]
[ResDescriptionAttribute("DbConnectionString_Encrypt")]
[ResCategoryAttribute("DataCategory_Security")]
public bool Encrypt { get; public set; }
    [DisplayNameAttribute("Column Encryption Setting")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Security")]
[ResDescriptionAttribute("TCE_DbConnectionString_ColumnEncryptionSetting")]
public SqlConnectionColumnEncryptionSetting ColumnEncryptionSetting { get; public set; }
    [ResDescriptionAttribute("TCE_DbConnectionString_EnclaveAttestationUrl")]
[ResCategoryAttribute("DataCategory_Security")]
[RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Enclave Attestation Url")]
public string EnclaveAttestationUrl { get; public set; }
    [ResDescriptionAttribute("DbConnectionString_TrustServerCertificate")]
[DisplayNameAttribute("TrustServerCertificate")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Security")]
public bool TrustServerCertificate { get; public set; }
    [DisplayNameAttribute("Enlist")]
[ResCategoryAttribute("DataCategory_Pooling")]
[ResDescriptionAttribute("DbConnectionString_Enlist")]
[RefreshPropertiesAttribute("1")]
public bool Enlist { get; public set; }
    [TypeConverterAttribute("System.Data.SqlClient.SqlConnectionStringBuilder/SqlDataSourceConverter")]
[RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Failover Partner")]
[ResCategoryAttribute("DataCategory_Source")]
[ResDescriptionAttribute("DbConnectionString_FailoverPartner")]
public string FailoverPartner { get; public set; }
    [ResCategoryAttribute("DataCategory_Source")]
[TypeConverterAttribute("System.Data.SqlClient.SqlConnectionStringBuilder/SqlInitialCatalogConverter")]
[ResDescriptionAttribute("DbConnectionString_InitialCatalog")]
[DisplayNameAttribute("Initial Catalog")]
[RefreshPropertiesAttribute("1")]
public string InitialCatalog { get; public set; }
    [ResDescriptionAttribute("DbConnectionString_IntegratedSecurity")]
[ResCategoryAttribute("DataCategory_Security")]
[DisplayNameAttribute("Integrated Security")]
[RefreshPropertiesAttribute("1")]
public bool IntegratedSecurity { get; public set; }
    [ResCategoryAttribute("DataCategory_Security")]
[RefreshPropertiesAttribute("1")]
[ResDescriptionAttribute("DbConnectionString_Authentication")]
[DisplayNameAttribute("Authentication")]
public SqlAuthenticationMethod Authentication { get; public set; }
    [DisplayNameAttribute("Load Balance Timeout")]
[ResDescriptionAttribute("DbConnectionString_LoadBalanceTimeout")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Pooling")]
public int LoadBalanceTimeout { get; public set; }
    [RefreshPropertiesAttribute("1")]
[ResDescriptionAttribute("DbConnectionString_MaxPoolSize")]
[DisplayNameAttribute("Max Pool Size")]
[ResCategoryAttribute("DataCategory_Pooling")]
public int MaxPoolSize { get; public set; }
    [ResCategoryAttribute("DataCategory_ConnectionResilency")]
[RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("ConnectRetryCount")]
[ResDescriptionAttribute("DbConnectionString_ConnectRetryCount")]
public int ConnectRetryCount { get; public set; }
    [DisplayNameAttribute("ConnectRetryInterval")]
[ResCategoryAttribute("DataCategory_ConnectionResilency")]
[ResDescriptionAttribute("DbConnectionString_ConnectRetryInterval")]
[RefreshPropertiesAttribute("1")]
public int ConnectRetryInterval { get; public set; }
    [ResCategoryAttribute("DataCategory_Pooling")]
[ResDescriptionAttribute("DbConnectionString_MinPoolSize")]
[RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Min Pool Size")]
public int MinPoolSize { get; public set; }
    [ResDescriptionAttribute("DbConnectionString_MultipleActiveResultSets")]
[DisplayNameAttribute("MultipleActiveResultSets")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Advanced")]
public bool MultipleActiveResultSets { get; public set; }
    [ResDescriptionAttribute("DbConnectionString_MultiSubnetFailover")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Source")]
[DisplayNameAttribute("MultiSubnetFailover")]
public bool MultiSubnetFailover { get; public set; }
    [ResDescriptionAttribute("DbConnectionString_TransparentNetworkIPResolution")]
[ResCategoryAttribute("DataCategory_Source")]
[DisplayNameAttribute("TransparentNetworkIPResolution")]
[RefreshPropertiesAttribute("1")]
public bool TransparentNetworkIPResolution { get; public set; }
    [TypeConverterAttribute("System.Data.SqlClient.SqlConnectionStringBuilder/NetworkLibraryConverter")]
[RefreshPropertiesAttribute("1")]
[ResDescriptionAttribute("DbConnectionString_NetworkLibrary")]
[DisplayNameAttribute("Network Library")]
[ResCategoryAttribute("DataCategory_Advanced")]
public string NetworkLibrary { get; public set; }
    [ResDescriptionAttribute("DbConnectionString_PacketSize")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Advanced")]
[DisplayNameAttribute("Packet Size")]
public int PacketSize { get; public set; }
    [DisplayNameAttribute("Password")]
[ResCategoryAttribute("DataCategory_Security")]
[ResDescriptionAttribute("DbConnectionString_Password")]
[RefreshPropertiesAttribute("1")]
[PasswordPropertyTextAttribute("True")]
public string Password { get; public set; }
    [ResDescriptionAttribute("DbConnectionString_PersistSecurityInfo")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Security")]
[DisplayNameAttribute("Persist Security Info")]
public bool PersistSecurityInfo { get; public set; }
    [DisplayNameAttribute("Pooling")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Pooling")]
[ResDescriptionAttribute("DbConnectionString_Pooling")]
public bool Pooling { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Replication")]
[ResCategoryAttribute("DataCategory_Replication")]
[ResDescriptionAttribute("DbConnectionString_Replication")]
public bool Replication { get; public set; }
    [ResCategoryAttribute("DataCategory_Advanced")]
[ResDescriptionAttribute("DbConnectionString_TransactionBinding")]
[RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Transaction Binding")]
public string TransactionBinding { get; public set; }
    [ResDescriptionAttribute("DbConnectionString_TypeSystemVersion")]
[ResCategoryAttribute("DataCategory_Advanced")]
[DisplayNameAttribute("Type System Version")]
[RefreshPropertiesAttribute("1")]
public string TypeSystemVersion { get; public set; }
    [DisplayNameAttribute("User ID")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Security")]
[ResDescriptionAttribute("DbConnectionString_UserID")]
public string UserID { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("User Instance")]
[ResCategoryAttribute("DataCategory_Source")]
[ResDescriptionAttribute("DbConnectionString_UserInstance")]
public bool UserInstance { get; public set; }
    [ResCategoryAttribute("DataCategory_Context")]
[DisplayNameAttribute("Workstation ID")]
[ResDescriptionAttribute("DbConnectionString_WorkstationID")]
[RefreshPropertiesAttribute("1")]
public string WorkstationID { get; public set; }
    public bool IsFixedSize { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    private static SqlConnectionStringBuilder();
    public SqlConnectionStringBuilder(string connectionString);
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public ApplicationIntent get_ApplicationIntent();
    public void set_ApplicationIntent(ApplicationIntent value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public bool get_AsynchronousProcessing();
    public void set_AsynchronousProcessing(bool value);
    public string get_AttachDBFilename();
    public void set_AttachDBFilename(string value);
    public PoolBlockingPeriod get_PoolBlockingPeriod();
    public void set_PoolBlockingPeriod(PoolBlockingPeriod value);
    public bool get_ConnectionReset();
    public void set_ConnectionReset(bool value);
    public bool get_ContextConnection();
    public void set_ContextConnection(bool value);
    public int get_ConnectTimeout();
    public void set_ConnectTimeout(int value);
    public string get_CurrentLanguage();
    public void set_CurrentLanguage(string value);
    public string get_DataSource();
    public void set_DataSource(string value);
    public bool get_Encrypt();
    public void set_Encrypt(bool value);
    public SqlConnectionColumnEncryptionSetting get_ColumnEncryptionSetting();
    public void set_ColumnEncryptionSetting(SqlConnectionColumnEncryptionSetting value);
    public string get_EnclaveAttestationUrl();
    public void set_EnclaveAttestationUrl(string value);
    public bool get_TrustServerCertificate();
    public void set_TrustServerCertificate(bool value);
    public bool get_Enlist();
    public void set_Enlist(bool value);
    public string get_FailoverPartner();
    public void set_FailoverPartner(string value);
    public string get_InitialCatalog();
    public void set_InitialCatalog(string value);
    public bool get_IntegratedSecurity();
    public void set_IntegratedSecurity(bool value);
    public SqlAuthenticationMethod get_Authentication();
    public void set_Authentication(SqlAuthenticationMethod value);
    public int get_LoadBalanceTimeout();
    public void set_LoadBalanceTimeout(int value);
    public int get_MaxPoolSize();
    public void set_MaxPoolSize(int value);
    public int get_ConnectRetryCount();
    public void set_ConnectRetryCount(int value);
    public int get_ConnectRetryInterval();
    public void set_ConnectRetryInterval(int value);
    public int get_MinPoolSize();
    public void set_MinPoolSize(int value);
    public bool get_MultipleActiveResultSets();
    public void set_MultipleActiveResultSets(bool value);
    public bool get_MultiSubnetFailover();
    public void set_MultiSubnetFailover(bool value);
    public bool get_TransparentNetworkIPResolution();
    public void set_TransparentNetworkIPResolution(bool value);
    public string get_NetworkLibrary();
    public void set_NetworkLibrary(string value);
    public int get_PacketSize();
    public void set_PacketSize(int value);
    public string get_Password();
    public void set_Password(string value);
    public bool get_PersistSecurityInfo();
    public void set_PersistSecurityInfo(bool value);
    public bool get_Pooling();
    public void set_Pooling(bool value);
    public bool get_Replication();
    public void set_Replication(bool value);
    public string get_TransactionBinding();
    public void set_TransactionBinding(string value);
    public string get_TypeSystemVersion();
    public void set_TypeSystemVersion(string value);
    public string get_UserID();
    public void set_UserID(string value);
    public bool get_UserInstance();
    public void set_UserInstance(bool value);
    public string get_WorkstationID();
    public void set_WorkstationID(string value);
    public virtual bool get_IsFixedSize();
    public virtual ICollection get_Keys();
    public virtual ICollection get_Values();
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    internal virtual string ConvertValueToString(object value);
    protected virtual void GetProperties(Hashtable propertyDescriptors);
    public virtual bool Remove(string keyword);
    public virtual bool ShouldSerialize(string keyword);
    public virtual bool TryGetValue(string keyword, Object& value);
}
internal class System.Data.SqlClient.SqlConnectionTimeoutErrorInternal : object {
    internal SqlConnectionTimeoutErrorPhase CurrentPhase { get; }
    internal SqlConnectionTimeoutErrorPhase get_CurrentPhase();
    public void SetFailoverScenario(bool useFailoverServer);
    public void SetInternalSourceType(SqlConnectionInternalSourceType sourceType);
    internal void ResetAndRestartPhase();
    internal void SetAndBeginPhase(SqlConnectionTimeoutErrorPhase timeoutErrorPhase);
    internal void EndPhase(SqlConnectionTimeoutErrorPhase timeoutErrorPhase);
    internal void SetAllCompleteMarker();
    internal string GetErrorMessage();
}
internal enum System.Data.SqlClient.SqlConnectionTimeoutErrorPhase : Enum {
    public int value__;
    public static SqlConnectionTimeoutErrorPhase Undefined;
    public static SqlConnectionTimeoutErrorPhase PreLoginBegin;
    public static SqlConnectionTimeoutErrorPhase InitializeConnection;
    public static SqlConnectionTimeoutErrorPhase SendPreLoginHandshake;
    public static SqlConnectionTimeoutErrorPhase ConsumePreLoginHandshake;
    public static SqlConnectionTimeoutErrorPhase LoginBegin;
    public static SqlConnectionTimeoutErrorPhase ProcessConnectionAuth;
    public static SqlConnectionTimeoutErrorPhase PostLogin;
    public static SqlConnectionTimeoutErrorPhase Complete;
    public static SqlConnectionTimeoutErrorPhase Count;
}
internal class System.Data.SqlClient.SqlConnectionTimeoutPhaseDuration : object {
    internal void StartCapture();
    internal void StopCapture();
    internal long GetMilliSecondDuration();
}
public class System.Data.SqlClient.SqlCredential : object {
    public string UserId { get; }
    public SecureString Password { get; }
    public SqlCredential(string userId, SecureString password);
    public string get_UserId();
    public SecureString get_Password();
}
[DesignerAttribute("Microsoft.VSDesigner.Data.VS.SqlDataAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultEventAttribute("RowUpdated")]
[ToolboxItemAttribute("Microsoft.VSDesigner.Data.VS.SqlDataAdapterToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Data.SqlClient.SqlDataAdapter : DbDataAdapter {
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ResCategoryAttribute("DataCategory_Update")]
[ResDescriptionAttribute("DbDataAdapter_DeleteCommand")]
public SqlCommand DeleteCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; private set; }
    [EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ResDescriptionAttribute("DbDataAdapter_InsertCommand")]
[DefaultValueAttribute("")]
[ResCategoryAttribute("DataCategory_Update")]
public SqlCommand InsertCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; private set; }
    [EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ResCategoryAttribute("DataCategory_Fill")]
[ResDescriptionAttribute("DbDataAdapter_SelectCommand")]
[DefaultValueAttribute("")]
public SqlCommand SelectCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; private set; }
    public int UpdateBatchSize { get; public set; }
    [ResDescriptionAttribute("DbDataAdapter_UpdateCommand")]
[DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ResCategoryAttribute("DataCategory_Update")]
public SqlCommand UpdateCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; private set; }
    public SqlDataAdapter(SqlCommand selectCommand);
    public SqlDataAdapter(string selectCommandText, string selectConnectionString);
    public SqlDataAdapter(string selectCommandText, SqlConnection selectConnection);
    private static SqlDataAdapter();
    public SqlCommand get_DeleteCommand();
    public void set_DeleteCommand(SqlCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value);
    public SqlCommand get_InsertCommand();
    public void set_InsertCommand(SqlCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_InsertCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value);
    public SqlCommand get_SelectCommand();
    public void set_SelectCommand(SqlCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_SelectCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value);
    public virtual int get_UpdateBatchSize();
    public virtual void set_UpdateBatchSize(int value);
    public SqlCommand get_UpdateCommand();
    public void set_UpdateCommand(SqlCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value);
    public void add_RowUpdated(SqlRowUpdatedEventHandler value);
    public void remove_RowUpdated(SqlRowUpdatedEventHandler value);
    public void add_RowUpdating(SqlRowUpdatingEventHandler value);
    public void remove_RowUpdating(SqlRowUpdatingEventHandler value);
    protected virtual int AddToBatch(IDbCommand command);
    protected virtual void ClearBatch();
    private sealed virtual override object System.ICloneable.Clone();
    protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual int ExecuteBatch();
    protected virtual IDataParameter GetBatchedParameter(int commandIdentifier, int parameterIndex);
    protected virtual bool GetBatchedRecordsAffected(int commandIdentifier, Int32& recordsAffected, Exception& error);
    protected virtual void InitializeBatching();
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
    protected virtual void TerminateBatching();
}
[DefaultMemberAttribute("Item")]
public class System.Data.SqlClient.SqlDataReader : DbDataReader {
    internal SharedState _sharedState;
    internal int ObjectID;
    internal static Type _typeofINullable;
    unknown bool BrowseModeInfoConsumed {internal set; }
    internal SqlCommand Command { get; }
    protected SqlConnection Connection { get; }
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    internal bool IsInitialized { get; internal set; }
    internal _SqlMetaDataSet MetaData { get; }
    public int RecordsAffected { get; }
    unknown string ResetOptionsString {internal set; }
    internal MultiPartTableName[] TableNames { get; internal set; }
    public int VisibleFieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    internal SqlDataReader(SqlCommand command, CommandBehavior behavior);
    private static SqlDataReader();
    internal void set_BrowseModeInfoConsumed(bool value);
    internal SqlCommand get_Command();
    protected SqlConnection get_Connection();
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    internal bool get_IsInitialized();
    internal void set_IsInitialized(bool value);
    internal long ColumnDataBytesRemaining();
    internal _SqlMetaDataSet get_MetaData();
    internal virtual SmiExtendedMetaData[] GetInternalSmiMetaData();
    public virtual int get_RecordsAffected();
    internal void set_ResetOptionsString(string value);
    internal MultiPartTableName[] get_TableNames();
    internal void set_TableNames(MultiPartTableName[] value);
    public virtual int get_VisibleFieldCount();
    public virtual object get_Item(int i);
    public virtual object get_Item(string name);
    internal void Bind(TdsParserStateObject stateObj);
    internal DataTable BuildSchemaTable();
    internal void Cancel(int objectID);
    public virtual void Close();
    internal virtual void CloseReaderFromConnection();
    public virtual string GetDataTypeName(int i);
    internal virtual StorageType GetVariantInternalStorageType(int i);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int i);
    internal virtual int GetLocaleId(int i);
    public virtual string GetName(int i);
    public virtual Type GetProviderSpecificFieldType(int i);
    public virtual int GetOrdinal(string name);
    public virtual object GetProviderSpecificValue(int i);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual DataTable GetSchemaTable();
    public virtual bool GetBoolean(int i);
    public virtual XmlReader GetXmlReader(int i);
    public virtual Stream GetStream(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    internal virtual long GetBytesInternal(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    internal int GetBytesInternalSequential(int i, Byte[] buffer, int index, int length, Nullable`1<long> timeoutMilliseconds);
    internal bool TryGetBytesInternalSequential(int i, Byte[] buffer, int index, int length, Int32& bytesRead);
    public virtual TextReader GetTextReader(int i);
    [EditorBrowsableAttribute("1")]
public virtual char GetChar(int i);
    public virtual long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    internal long GetStreamingXmlChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    [EditorBrowsableAttribute("1")]
private sealed virtual override IDataReader System.Data.IDataRecord.GetData(int i);
    public virtual DateTime GetDateTime(int i);
    public virtual decimal GetDecimal(int i);
    public virtual double GetDouble(int i);
    public virtual float GetFloat(int i);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual SqlBoolean GetSqlBoolean(int i);
    public virtual SqlBinary GetSqlBinary(int i);
    public virtual SqlByte GetSqlByte(int i);
    public virtual SqlBytes GetSqlBytes(int i);
    public virtual SqlChars GetSqlChars(int i);
    public virtual SqlDateTime GetSqlDateTime(int i);
    public virtual SqlDecimal GetSqlDecimal(int i);
    public virtual SqlGuid GetSqlGuid(int i);
    public virtual SqlDouble GetSqlDouble(int i);
    public virtual SqlInt16 GetSqlInt16(int i);
    public virtual SqlInt32 GetSqlInt32(int i);
    public virtual SqlInt64 GetSqlInt64(int i);
    public virtual SqlMoney GetSqlMoney(int i);
    public virtual SqlSingle GetSqlSingle(int i);
    public virtual SqlString GetSqlString(int i);
    public virtual SqlXml GetSqlXml(int i);
    public virtual object GetSqlValue(int i);
    public virtual int GetSqlValues(Object[] values);
    public virtual string GetString(int i);
    public virtual T GetFieldValue(int i);
    public virtual object GetValue(int i);
    public virtual TimeSpan GetTimeSpan(int i);
    public virtual DateTimeOffset GetDateTimeOffset(int i);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int i);
    protected internal bool IsCommandBehavior(CommandBehavior condition);
    public virtual bool NextResult();
    public virtual bool Read();
    internal bool TrySetAltMetaDataSet(_SqlMetaDataSet metaDataSet, bool metaDataConsumed);
    internal bool TrySetMetaData(_SqlMetaDataSet metaData, bool moreInfo);
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    internal Task`1<int> GetBytesAsync(int i, Byte[] buffer, int index, int length, int timeout, CancellationToken cancellationToken, Int32& bytesRead);
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    public virtual Task`1<bool> IsDBNullAsync(int i, CancellationToken cancellationToken);
    public virtual Task`1<T> GetFieldValueAsync(int i, CancellationToken cancellationToken);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.SqlClient.SqlDataReaderSmi : SqlDataReader {
    public int FieldCount { get; }
    public int VisibleFieldCount { get; }
    public int Depth { get; }
    public object Item { get; }
    public object Item { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public bool HasRows { get; }
    internal SqlDataReaderSmi(SmiEventStream eventStream, SqlCommand parent, CommandBehavior behavior, SqlInternalConnectionSmi connection, SmiEventSink parentSink, SmiRequestExecutor requestExecutor);
    public virtual int get_FieldCount();
    public virtual int get_VisibleFieldCount();
    public virtual string GetName(int ordinal);
    public virtual string GetDataTypeName(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual int get_Depth();
    public virtual object GetValue(int ordinal);
    public virtual T GetFieldValue(int ordinal);
    public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    internal virtual StorageType GetVariantInternalStorageType(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual int GetOrdinal(string name);
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string strName);
    public virtual bool IsDBNull(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    internal virtual long GetBytesInternal(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    internal virtual void CloseReaderFromConnection();
    public virtual void Close();
    public virtual bool NextResult();
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    internal bool InternalNextResult(bool ignoreNonFatalMessages);
    public virtual bool Read();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    internal bool InternalRead(bool ignoreNonFatalErrors);
    public virtual DataTable GetSchemaTable();
    public virtual SqlBinary GetSqlBinary(int ordinal);
    public virtual SqlBoolean GetSqlBoolean(int ordinal);
    public virtual SqlByte GetSqlByte(int ordinal);
    public virtual SqlInt16 GetSqlInt16(int ordinal);
    public virtual SqlInt32 GetSqlInt32(int ordinal);
    public virtual SqlInt64 GetSqlInt64(int ordinal);
    public virtual SqlSingle GetSqlSingle(int ordinal);
    public virtual SqlDouble GetSqlDouble(int ordinal);
    public virtual SqlMoney GetSqlMoney(int ordinal);
    public virtual SqlDateTime GetSqlDateTime(int ordinal);
    public virtual SqlDecimal GetSqlDecimal(int ordinal);
    public virtual SqlString GetSqlString(int ordinal);
    public virtual SqlGuid GetSqlGuid(int ordinal);
    public virtual SqlChars GetSqlChars(int ordinal);
    public virtual SqlBytes GetSqlBytes(int ordinal);
    public virtual SqlXml GetSqlXml(int ordinal);
    public virtual TimeSpan GetTimeSpan(int ordinal);
    public virtual DateTimeOffset GetDateTimeOffset(int ordinal);
    public virtual object GetSqlValue(int ordinal);
    public virtual int GetSqlValues(Object[] values);
    public virtual bool get_HasRows();
    public virtual Stream GetStream(int ordinal);
    public virtual TextReader GetTextReader(int ordinal);
    public virtual XmlReader GetXmlReader(int ordinal);
    internal virtual SmiExtendedMetaData[] GetInternalSmiMetaData();
    internal virtual int GetLocaleId(int ordinal);
    internal void ThrowIfClosed(string operationName);
    internal void EnsureOnRow(string operationName);
    internal void EnsureCanGetMetaData(string operationName);
}
internal class System.Data.SqlClient.SqlDebugContext : object {
    internal UInt32 pid;
    internal UInt32 tid;
    internal bool active;
    internal IntPtr pMemMap;
    internal IntPtr hMemMap;
    internal UInt32 dbgpid;
    internal bool fOption;
    internal string machineName;
    internal string sdiDllName;
    internal Byte[] data;
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("afef65ad-4577-447a-a148-83acadd3d4b9")]
[ComVisibleAttribute("True")]
public class System.Data.SqlClient.SQLDebugging : object {
    private sealed virtual override bool System.Data.SqlClient.ISQLDebug.SQLDebug(int dwpidDebugger, int dwpidDebuggee, string pszMachineName, string pszSDIDLLName, int dwOption, int cbData, Byte[] rgbData);
}
internal class System.Data.SqlClient.SqlDelegatedTransaction : object {
    internal int ObjectID { get; }
    internal Transaction Transaction { get; }
    internal bool IsActive { get; }
    internal SqlDelegatedTransaction(SqlInternalConnection connection, Transaction tx);
    internal int get_ObjectID();
    internal Transaction get_Transaction();
    public sealed virtual void Initialize();
    internal bool get_IsActive();
    public sealed virtual Byte[] Promote();
    public sealed virtual void Rollback(SinglePhaseEnlistment enlistment);
    public sealed virtual void SinglePhaseCommit(SinglePhaseEnlistment enlistment);
    internal void TransactionEnded(Transaction transaction);
}
public class System.Data.SqlClient.SqlDependency : object {
    internal static ApiGroup NotificationsTracePoints;
    internal int ObjectID { get; }
    [ResDescriptionAttribute("SqlDependency_HasChanges")]
[ResCategoryAttribute("DataCategory_Data")]
public bool HasChanges { get; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("SqlDependency_Id")]
public string Id { get; }
    internal static string AppDomainKey { get; }
    internal DateTime ExpirationTime { get; }
    internal string Options { get; }
    internal static SqlDependencyProcessDispatcher ProcessDispatcher { get; }
    internal int Timeout { get; }
    public SqlDependency(SqlCommand command);
    public SqlDependency(SqlCommand command, string options, int timeout);
    private static SqlDependency();
    internal int get_ObjectID();
    public bool get_HasChanges();
    public string get_Id();
    internal static string get_AppDomainKey();
    internal DateTime get_ExpirationTime();
    internal string get_Options();
    internal static SqlDependencyProcessDispatcher get_ProcessDispatcher();
    internal int get_Timeout();
    public void add_OnChange(OnChangeEventHandler value);
    public void remove_OnChange(OnChangeEventHandler value);
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("SqlDependency_AddCommandDependency")]
public void AddCommandDependency(SqlCommand command);
    public static bool Start(string connectionString);
    public static bool Start(string connectionString, string queue);
    internal static bool Start(string connectionString, string queue, bool useDefaults);
    public static bool Stop(string connectionString);
    public static bool Stop(string connectionString, string queue);
    internal static bool Stop(string connectionString, string queue, bool useDefaults, bool startFailed);
    internal static string GetDefaultComposedOptions(string server, string failoverServer, IdentityUserNamePair identityUser, string database);
    internal void AddToServerList(string server);
    internal bool ContainsServer(string server);
    internal string ComputeHashAndAddToDispatcher(SqlCommand command);
    internal void Invalidate(SqlNotificationType type, SqlNotificationInfo info, SqlNotificationSource source);
    internal void StartTimer(SqlNotificationRequest notificationRequest);
    internal static string FixupServiceOrDatabaseName(string name);
}
internal class System.Data.SqlClient.SqlDependencyPerAppDomainDispatcher : MarshalByRefObject {
    internal static SqlDependencyPerAppDomainDispatcher SingletonInstance;
    internal int ObjectID { get; }
    private static SqlDependencyPerAppDomainDispatcher();
    internal int get_ObjectID();
    public virtual object InitializeLifetimeService();
    internal void AddDependencyEntry(SqlDependency dep);
    internal string AddCommandEntry(string commandHash, SqlDependency dep);
    internal void InvalidateCommandID(SqlNotification sqlNotification);
    internal void InvalidateServer(string server, SqlNotification sqlNotification);
    internal SqlDependency LookupDependencyEntry(string id);
    internal void StartTimer(SqlDependency dep);
}
public class System.Data.SqlClient.SqlEnclaveAttestationParameters : object {
    public int Protocol { get; }
    public ECDiffieHellmanCng ClientDiffieHellmanKey { get; }
    public SqlEnclaveAttestationParameters(int protocol, Byte[] input, ECDiffieHellmanCng clientDiffieHellmanKey);
    private static SqlEnclaveAttestationParameters();
    [CompilerGeneratedAttribute]
public int get_Protocol();
    [CompilerGeneratedAttribute]
public ECDiffieHellmanCng get_ClientDiffieHellmanKey();
    public Byte[] GetInput();
}
public class System.Data.SqlClient.SqlEnclaveSession : object {
    public long SessionId { get; }
    public SqlEnclaveSession(Byte[] sessionKey, long sessionId);
    private static SqlEnclaveSession();
    [CompilerGeneratedAttribute]
public long get_SessionId();
    public Byte[] GetSessionKey();
}
internal class System.Data.SqlClient.SqlEncryptionKeyInfo : ValueType {
    internal Byte[] encryptedKey;
    internal int databaseId;
    internal int cekId;
    internal int cekVersion;
    internal Byte[] cekMdVersion;
    internal string keyPath;
    internal string keyStoreName;
    internal string algorithmName;
    internal byte normalizationRuleVersion;
}
internal class System.Data.SqlClient.SqlEnvChange : object {
    internal byte type;
    internal byte oldLength;
    internal int newLength;
    internal int length;
    internal string newValue;
    internal string oldValue;
    internal Byte[] newBinValue;
    internal Byte[] oldBinValue;
    internal long newLongValue;
    internal long oldLongValue;
    internal SqlCollation newCollation;
    internal SqlCollation oldCollation;
    internal RoutingInfo newRoutingInfo;
}
public class System.Data.SqlClient.SqlError : object {
    public string Source { get; }
    public int Number { get; }
    public byte State { get; }
    public byte Class { get; }
    public string Server { get; }
    public string Message { get; }
    public string Procedure { get; }
    public int LineNumber { get; }
    internal int Win32ErrorCode { get; }
    internal SqlError(int infoNumber, byte errorState, byte errorClass, string server, string errorMessage, string procedure, int lineNumber, UInt32 win32ErrorCode);
    internal SqlError(int infoNumber, byte errorState, byte errorClass, string server, string errorMessage, string procedure, int lineNumber);
    public virtual string ToString();
    public string get_Source();
    public int get_Number();
    public byte get_State();
    public byte get_Class();
    public string get_Server();
    public string get_Message();
    public string get_Procedure();
    public int get_LineNumber();
    internal int get_Win32ErrorCode();
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class System.Data.SqlClient.SqlErrorCollection : object {
    public int Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    public SqlError Item { get; }
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(SqlError[] array, int index);
    public sealed virtual int get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public SqlError get_Item(int index);
    public sealed virtual IEnumerator GetEnumerator();
    internal void Add(SqlError error);
}
public class System.Data.SqlClient.SqlException : DbException {
    internal bool _doNotReconnect;
    [DesignerSerializationVisibilityAttribute("2")]
public SqlErrorCollection Errors { get; }
    public Guid ClientConnectionId { get; }
    public byte Class { get; }
    public int LineNumber { get; }
    public int Number { get; }
    public string Procedure { get; }
    public string Server { get; }
    public byte State { get; }
    public string Source { get; }
    private SqlException(SerializationInfo si, StreamingContext sc);
    public virtual void GetObjectData(SerializationInfo si, StreamingContext context);
    public SqlErrorCollection get_Errors();
    public Guid get_ClientConnectionId();
    public byte get_Class();
    public int get_LineNumber();
    public int get_Number();
    public string get_Procedure();
    public string get_Server();
    public byte get_State();
    public virtual string get_Source();
    public virtual string ToString();
    internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion);
    internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion, SqlInternalConnectionTds internalConnection, Exception innerException);
    internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion, Guid conId, Exception innerException);
    internal SqlException InternalClone();
}
internal class System.Data.SqlClient.SqlFedAuthInfo : object {
    internal string spn;
    internal string stsurl;
    public virtual string ToString();
}
internal class System.Data.SqlClient.SqlFedAuthToken : object {
    internal UInt32 dataLen;
    internal Byte[] accessToken;
    internal long expirationFileTime;
}
public class System.Data.SqlClient.SqlInfoMessageEventArgs : EventArgs {
    public SqlErrorCollection Errors { get; }
    public string Message { get; }
    public string Source { get; }
    internal SqlInfoMessageEventArgs(SqlException exception);
    public SqlErrorCollection get_Errors();
    public string get_Message();
    public string get_Source();
    public virtual string ToString();
}
public class System.Data.SqlClient.SqlInfoMessageEventHandler : MulticastDelegate {
    public SqlInfoMessageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlInfoMessageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlInfoMessageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal abstract class System.Data.SqlClient.SqlInternalConnection : DbConnectionInternal {
    internal string CurrentDatabase { get; internal set; }
    internal string CurrentDataSource { get; internal set; }
    internal SqlDelegatedTransaction DelegatedTransaction { get; internal set; }
    internal SqlConnection Connection { get; }
    internal SqlConnectionString ConnectionOptions { get; }
    internal SqlInternalTransaction CurrentTransaction { get; }
    internal SqlInternalTransaction AvailableInternalTransaction { get; }
    internal SqlInternalTransaction PendingTransaction { get; }
    protected internal bool IsNonPoolableTransactionRoot { get; }
    internal bool IsTransactionRoot { get; }
    internal bool HasLocalTransaction { get; }
    internal bool HasLocalTransactionFromAPI { get; }
    internal bool IsEnlistedInTransaction { get; }
    internal bool IsLockedForBulkCopy { get; }
    internal bool IsShiloh { get; }
    internal bool IsYukonOrNewer { get; }
    internal bool IsKatmaiOrNewer { get; }
    internal Byte[] PromotedDTCToken { get; internal set; }
    internal bool IsGlobalTransaction { get; internal set; }
    internal bool IsGlobalTransactionsEnabledForServer { get; internal set; }
    internal bool IsAzureSQLConnection { get; internal set; }
    internal SqlInternalConnection(SqlConnectionString connectionOptions);
    private static SqlInternalConnection();
    [CompilerGeneratedAttribute]
internal string get_CurrentDatabase();
    [CompilerGeneratedAttribute]
internal void set_CurrentDatabase(string value);
    [CompilerGeneratedAttribute]
internal string get_CurrentDataSource();
    [CompilerGeneratedAttribute]
internal void set_CurrentDataSource(string value);
    [CompilerGeneratedAttribute]
internal SqlDelegatedTransaction get_DelegatedTransaction();
    [CompilerGeneratedAttribute]
internal void set_DelegatedTransaction(SqlDelegatedTransaction value);
    internal SqlConnection get_Connection();
    internal SqlConnectionString get_ConnectionOptions();
    internal abstract virtual SqlInternalTransaction get_CurrentTransaction();
    internal virtual SqlInternalTransaction get_AvailableInternalTransaction();
    internal abstract virtual SqlInternalTransaction get_PendingTransaction();
    protected internal virtual bool get_IsNonPoolableTransactionRoot();
    internal virtual bool get_IsTransactionRoot();
    internal bool get_HasLocalTransaction();
    internal bool get_HasLocalTransactionFromAPI();
    internal bool get_IsEnlistedInTransaction();
    internal abstract virtual bool get_IsLockedForBulkCopy();
    internal abstract virtual bool get_IsShiloh();
    internal abstract virtual bool get_IsYukonOrNewer();
    internal abstract virtual bool get_IsKatmaiOrNewer();
    internal Byte[] get_PromotedDTCToken();
    internal void set_PromotedDTCToken(Byte[] value);
    internal bool get_IsGlobalTransaction();
    internal void set_IsGlobalTransaction(bool value);
    internal bool get_IsGlobalTransactionsEnabledForServer();
    internal void set_IsGlobalTransactionsEnabledForServer(bool value);
    internal bool get_IsAzureSQLConnection();
    internal void set_IsAzureSQLConnection(bool value);
    public virtual DbTransaction BeginTransaction(IsolationLevel iso);
    internal virtual SqlTransaction BeginSqlTransaction(IsolationLevel iso, string transactionName, bool shouldReconnect);
    public virtual void ChangeDatabase(string database);
    protected abstract virtual void ChangeDatabaseInternal(string database);
    protected virtual void CleanupTransactionOnCompletion(Transaction transaction);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    protected virtual void Deactivate();
    internal abstract virtual void DisconnectTransaction(SqlInternalTransaction internalTransaction);
    public virtual void Dispose();
    protected void Enlist(Transaction tx);
    internal void EnlistNull();
    public virtual void EnlistTransaction(Transaction transaction);
    internal abstract virtual void ExecuteTransaction(TransactionRequest transactionRequest, string name, IsolationLevel iso, SqlInternalTransaction internalTransaction, bool isDelegateControlRequest);
    internal SqlDataReader FindLiveReader(SqlCommand command);
    internal SqlCommand FindLiveCommand(TdsParserStateObject stateObj);
    internal static TdsParser GetBestEffortCleanupTarget(SqlConnection connection);
    [ReliabilityContractAttribute("3", "2")]
internal static void BestEffortCleanup(TdsParser target);
    protected abstract virtual Byte[] GetDTCAddress();
    protected virtual void InternalDeactivate();
    internal void OnError(SqlException exception, bool breakConnection, Action`1<Action> wrapCloseInAction);
    protected abstract virtual void PropagateTransactionCookie(Byte[] transactionCookie);
    internal abstract virtual void ValidateConnectionForExecute(SqlCommand command);
}
internal class System.Data.SqlClient.SqlInternalConnectionSmi : SqlInternalConnection {
    internal SmiContext InternalContext { get; }
    internal SmiConnection SmiConnection { get; }
    internal SmiEventSink CurrentEventSink { get; }
    internal SqlInternalTransaction CurrentTransaction { get; }
    internal bool IsLockedForBulkCopy { get; }
    internal bool IsShiloh { get; }
    internal bool IsYukonOrNewer { get; }
    internal bool IsKatmaiOrNewer { get; }
    internal SqlInternalTransaction PendingTransaction { get; }
    public string ServerVersion { get; }
    protected bool UnbindOnTransactionCompletion { get; }
    internal SqlInternalConnectionSmi(SqlConnectionString connectionOptions, SmiContext smiContext);
    internal SmiContext get_InternalContext();
    internal SmiConnection get_SmiConnection();
    internal SmiEventSink get_CurrentEventSink();
    internal virtual SqlInternalTransaction get_CurrentTransaction();
    internal virtual bool get_IsLockedForBulkCopy();
    internal virtual bool get_IsShiloh();
    internal virtual bool get_IsYukonOrNewer();
    internal virtual bool get_IsKatmaiOrNewer();
    internal virtual SqlInternalTransaction get_PendingTransaction();
    public virtual string get_ServerVersion();
    protected virtual bool get_UnbindOnTransactionCompletion();
    protected virtual void Activate(Transaction transaction);
    internal void Activate();
    internal void AutomaticEnlistment();
    protected virtual void ChangeDatabaseInternal(string database);
    protected virtual void InternalDeactivate();
    internal virtual void DelegatedTransactionEnded();
    internal virtual void DisconnectTransaction(SqlInternalTransaction internalTransaction);
    public virtual void Dispose();
    internal virtual void ExecuteTransaction(TransactionRequest transactionRequest, string transactionName, IsolationLevel iso, SqlInternalTransaction internalTransaction, bool isDelegateControlRequest);
    protected virtual Byte[] GetDTCAddress();
    internal void GetCurrentTransactionPair(Int64& transactionId, Transaction& transaction);
    protected virtual void PropagateTransactionCookie(Byte[] transactionCookie);
    internal virtual void ValidateConnectionForExecute(SqlCommand command);
}
internal class System.Data.SqlClient.SqlInternalConnectionTds : SqlInternalConnection {
    internal static int _maxNumberOfRedirectRoute;
    internal bool _sessionRecoveryAcknowledged;
    internal SessionData _currentSessionData;
    internal bool _fedAuthRequired;
    internal bool _federatedAuthenticationRequested;
    internal bool _federatedAuthenticationAcknowledged;
    internal bool _federatedAuthenticationInfoRequested;
    internal bool _federatedAuthenticationInfoReceived;
    internal byte _tceVersionSupported;
    internal Byte[] _accessTokenInBytes;
    internal SyncAsyncLock _parserLock;
    internal Guid _clientConnectionId;
    internal SessionData CurrentSessionData { get; }
    internal SqlConnectionTimeoutErrorInternal TimeoutErrorInternal { get; }
    internal Guid ClientConnectionId { get; }
    internal Guid OriginalClientConnectionId { get; }
    internal string RoutingDestination { get; }
    internal RoutingInfo RoutingInfo { get; }
    internal SqlInternalTransaction CurrentTransaction { get; }
    internal SqlInternalTransaction AvailableInternalTransaction { get; }
    internal SqlInternalTransaction PendingTransaction { get; }
    internal DbConnectionPoolIdentity Identity { get; }
    internal string InstanceName { get; }
    internal bool IsLockedForBulkCopy { get; }
    protected internal bool IsNonPoolableTransactionRoot { get; }
    internal bool IsShiloh { get; }
    internal bool IsYukonOrNewer { get; }
    internal bool IsKatmaiOrNewer { get; }
    internal int PacketSize { get; }
    internal TdsParser Parser { get; }
    internal string ServerProvidedFailOverPartner { get; }
    internal SqlConnectionPoolGroupProviderInfo PoolGroupProviderInfo { get; }
    protected bool ReadyToPrepareTransaction { get; }
    public string ServerVersion { get; }
    protected bool UnbindOnTransactionCompletion { get; }
    internal bool IgnoreEnvChange { get; }
    internal bool ThreadHasParserLockForClose { get; internal set; }
    private static SqlInternalConnectionTds();
    internal SqlInternalConnectionTds(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, object providerInfo, string newPassword, SecureString newSecurePassword, bool redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, string accessToken, bool applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager);
    internal SessionData get_CurrentSessionData();
    internal SqlConnectionTimeoutErrorInternal get_TimeoutErrorInternal();
    internal Guid get_ClientConnectionId();
    internal Guid get_OriginalClientConnectionId();
    internal string get_RoutingDestination();
    internal RoutingInfo get_RoutingInfo();
    internal virtual SqlInternalTransaction get_CurrentTransaction();
    internal virtual SqlInternalTransaction get_AvailableInternalTransaction();
    internal virtual SqlInternalTransaction get_PendingTransaction();
    internal DbConnectionPoolIdentity get_Identity();
    internal string get_InstanceName();
    internal virtual bool get_IsLockedForBulkCopy();
    protected internal virtual bool get_IsNonPoolableTransactionRoot();
    internal virtual bool get_IsShiloh();
    internal virtual bool get_IsYukonOrNewer();
    internal virtual bool get_IsKatmaiOrNewer();
    internal int get_PacketSize();
    internal TdsParser get_Parser();
    internal string get_ServerProvidedFailOverPartner();
    internal SqlConnectionPoolGroupProviderInfo get_PoolGroupProviderInfo();
    protected virtual bool get_ReadyToPrepareTransaction();
    public virtual string get_ServerVersion();
    protected virtual bool get_UnbindOnTransactionCompletion();
    protected virtual void ChangeDatabaseInternal(string database);
    public virtual void Dispose();
    internal virtual void ValidateConnectionForExecute(SqlCommand command);
    internal void CheckEnlistedTransactionBinding();
    internal virtual bool IsConnectionAlive(bool throwOnException);
    protected virtual void Activate(Transaction transaction);
    protected virtual void InternalDeactivate();
    internal void DecrementAsyncCount();
    internal void IncrementAsyncCount();
    internal virtual void DisconnectTransaction(SqlInternalTransaction internalTransaction);
    internal void ExecuteTransaction(TransactionRequest transactionRequest, string name, IsolationLevel iso);
    internal virtual void ExecuteTransaction(TransactionRequest transactionRequest, string name, IsolationLevel iso, SqlInternalTransaction internalTransaction, bool isDelegateControlRequest);
    internal void ExecuteTransactionPreYukon(TransactionRequest transactionRequest, string transactionName, IsolationLevel iso, SqlInternalTransaction internalTransaction);
    internal void ExecuteTransactionYukon(TransactionRequest transactionRequest, string transactionName, IsolationLevel iso, SqlInternalTransaction internalTransaction, bool isDelegateControlRequest);
    internal virtual void DelegatedTransactionEnded();
    protected virtual Byte[] GetDTCAddress();
    protected virtual void PropagateTransactionCookie(Byte[] cookie);
    internal void FailoverPermissionDemand();
    protected virtual object ObtainAdditionalLocksForClose();
    protected virtual void ReleaseAdditionalLocksForClose(object lockToken);
    internal bool GetSessionAndReconnectIfNeeded(SqlConnection parent, int timeout);
    internal void BreakConnection();
    internal bool get_IgnoreEnvChange();
    internal void OnEnvChange(SqlEnvChange rec);
    internal void OnLoginAck(SqlLoginAck rec);
    internal void OnFedAuthInfo(SqlFedAuthInfo fedAuthInfo);
    internal bool TryGetFedAuthTokenLocked(SqlFedAuthInfo fedAuthInfo, DbConnectionPoolAuthenticationContext dbConnectionPoolAuthenticationContext, SqlFedAuthToken& fedAuthToken);
    internal SqlFedAuthToken GetFedAuthToken(SqlFedAuthInfo fedAuthInfo);
    internal void OnFeatureExtAck(int featureId, Byte[] data);
    internal bool get_ThreadHasParserLockForClose();
    internal void set_ThreadHasParserLockForClose(bool value);
    internal virtual bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal class System.Data.SqlClient.SqlInternalTransaction : object {
    internal static long NullTransactionId;
    internal int _objectID;
    internal bool RestoreBrokenConnection { get; internal set; }
    internal bool ConnectionHasBeenRestored { get; internal set; }
    internal bool HasParentTransaction { get; }
    internal bool IsAborted { get; }
    internal bool IsActive { get; }
    internal bool IsCommitted { get; }
    internal bool IsCompleted { get; }
    internal bool IsContext { get; }
    internal bool IsDelegated { get; }
    internal bool IsDistributed { get; }
    internal bool IsLocal { get; }
    internal bool IsOrphaned { get; }
    internal bool IsZombied { get; }
    internal int ObjectID { get; }
    internal int OpenResultsCount { get; }
    internal SqlTransaction Parent { get; }
    internal long TransactionId { get; internal set; }
    internal SqlInternalTransaction(SqlInternalConnection innerConnection, TransactionType type, SqlTransaction outerTransaction);
    internal SqlInternalTransaction(SqlInternalConnection innerConnection, TransactionType type, SqlTransaction outerTransaction, long transactionId);
    [CompilerGeneratedAttribute]
internal bool get_RestoreBrokenConnection();
    [CompilerGeneratedAttribute]
internal void set_RestoreBrokenConnection(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ConnectionHasBeenRestored();
    [CompilerGeneratedAttribute]
internal void set_ConnectionHasBeenRestored(bool value);
    internal bool get_HasParentTransaction();
    internal bool get_IsAborted();
    internal bool get_IsActive();
    internal bool get_IsCommitted();
    internal bool get_IsCompleted();
    internal bool get_IsContext();
    internal bool get_IsDelegated();
    internal bool get_IsDistributed();
    internal bool get_IsLocal();
    internal bool get_IsOrphaned();
    internal bool get_IsZombied();
    internal int get_ObjectID();
    internal int get_OpenResultsCount();
    internal SqlTransaction get_Parent();
    internal long get_TransactionId();
    internal void set_TransactionId(long value);
    internal void Activate();
    internal void CloseFromConnection();
    internal void Commit();
    internal void Completed(TransactionState transactionState);
    internal int DecrementAndObtainOpenResultCount();
    internal void Dispose();
    internal int IncrementAndObtainOpenResultCount();
    internal void InitParent(SqlTransaction transaction);
    internal void Rollback();
    internal void Rollback(string transactionName);
    internal void Save(string savePointName);
    internal void Zombie();
    internal string TraceString();
}
internal class System.Data.SqlClient.SqlLogin : object {
    internal SqlAuthenticationMethod authentication;
    internal int timeout;
    internal bool userInstance;
    internal string hostName;
    internal string userName;
    internal string password;
    internal string applicationName;
    internal string serverName;
    internal string language;
    internal string database;
    internal string attachDBFilename;
    internal string newPassword;
    internal bool useReplication;
    internal bool useSSPI;
    internal int packetSize;
    internal bool readOnlyIntent;
    internal SqlCredential credential;
    internal SecureString newSecurePassword;
}
internal class System.Data.SqlClient.SqlLoginAck : object {
    internal string programName;
    internal byte majorVersion;
    internal byte minorVersion;
    internal short buildNum;
    internal bool isVersion8;
    internal UInt32 tdsVersion;
}
internal class System.Data.SqlClient.SQLMessage : object {
    internal static string CultureIdError();
    internal static string EncryptionNotSupportedByClient();
    internal static string EncryptionNotSupportedByServer();
    internal static string OperationCancelled();
    internal static string SevereError();
    internal static string SSPIInitializeError();
    internal static string SSPIGenerateError();
    internal static string Timeout();
    internal static string Timeout_PreLogin_Begin();
    internal static string Timeout_PreLogin_InitializeConnection();
    internal static string Timeout_PreLogin_SendHandshake();
    internal static string Timeout_PreLogin_ConsumeHandshake();
    internal static string Timeout_Login_Begin();
    internal static string Timeout_Login_ProcessConnectionAuth();
    internal static string Timeout_PostLogin();
    internal static string Timeout_FailoverInfo();
    internal static string Timeout_RoutingDestination();
    internal static string Duration_PreLogin_Begin(long PreLoginBeginDuration);
    internal static string Duration_PreLoginHandshake(long PreLoginBeginDuration, long PreLoginHandshakeDuration);
    internal static string Duration_Login_Begin(long PreLoginBeginDuration, long PreLoginHandshakeDuration, long LoginBeginDuration);
    internal static string Duration_Login_ProcessConnectionAuth(long PreLoginBeginDuration, long PreLoginHandshakeDuration, long LoginBeginDuration, long LoginAuthDuration);
    internal static string Duration_PostLogin(long PreLoginBeginDuration, long PreLoginHandshakeDuration, long LoginBeginDuration, long LoginAuthDuration, long PostLoginDuration);
    internal static string UserInstanceFailure();
    internal static string PreloginError();
    internal static string ExClientConnectionId();
    internal static string ExErrorNumberStateClass();
    internal static string ExOriginalClientConnectionId();
    internal static string ExRoutingDestination();
}
internal class System.Data.SqlClient.SqlMetaDataFactory : DbMetaDataFactory {
    public SqlMetaDataFactory(Stream XMLStream, string serverVersion, string serverVersionNormalized);
    protected virtual DataTable PrepareCollection(string collectionName, String[] restrictions, DbConnection connection);
}
internal class System.Data.SqlClient.SqlMetaDataPriv : object {
    internal SqlDbType type;
    internal byte tdsType;
    internal byte precision;
    internal byte scale;
    internal int length;
    internal SqlCollation collation;
    internal int codePage;
    internal Encoding encoding;
    internal bool isNullable;
    internal bool isMultiValued;
    internal string udtDatabaseName;
    internal string udtSchemaName;
    internal string udtTypeName;
    internal string udtAssemblyQualifiedName;
    internal Type udtType;
    internal string xmlSchemaCollectionDatabase;
    internal string xmlSchemaCollectionOwningSchema;
    internal string xmlSchemaCollectionName;
    internal MetaType metaType;
    internal string structuredTypeDatabaseName;
    internal string structuredTypeSchemaName;
    internal string structuredTypeName;
    internal IList`1<SmiMetaData> structuredFields;
    internal bool isEncrypted;
    internal SqlMetaDataPriv baseTI;
    internal SqlCipherMetadata cipherMD;
    internal byte NormalizationRuleVersion { get; }
    internal virtual void CopyFrom(SqlMetaDataPriv original);
    internal bool IsAlgorithmInitialized();
    internal byte get_NormalizationRuleVersion();
}
internal class System.Data.SqlClient.SqlNotification : MarshalByRefObject {
    internal SqlNotificationInfo Info { get; }
    internal string Key { get; }
    internal SqlNotificationSource Source { get; }
    internal SqlNotificationType Type { get; }
    internal SqlNotification(SqlNotificationInfo info, SqlNotificationSource source, SqlNotificationType type, string key);
    internal SqlNotificationInfo get_Info();
    internal string get_Key();
    internal SqlNotificationSource get_Source();
    internal SqlNotificationType get_Type();
}
public class System.Data.SqlClient.SqlNotificationEventArgs : EventArgs {
    internal static SqlNotificationEventArgs NotifyError;
    public SqlNotificationType Type { get; }
    public SqlNotificationInfo Info { get; }
    public SqlNotificationSource Source { get; }
    public SqlNotificationEventArgs(SqlNotificationType type, SqlNotificationInfo info, SqlNotificationSource source);
    private static SqlNotificationEventArgs();
    public SqlNotificationType get_Type();
    public SqlNotificationInfo get_Info();
    public SqlNotificationSource get_Source();
}
public enum System.Data.SqlClient.SqlNotificationInfo : Enum {
    public int value__;
    public static SqlNotificationInfo Truncate;
    public static SqlNotificationInfo Insert;
    public static SqlNotificationInfo Update;
    public static SqlNotificationInfo Delete;
    public static SqlNotificationInfo Drop;
    public static SqlNotificationInfo Alter;
    public static SqlNotificationInfo Restart;
    public static SqlNotificationInfo Error;
    public static SqlNotificationInfo Query;
    public static SqlNotificationInfo Invalid;
    public static SqlNotificationInfo Options;
    public static SqlNotificationInfo Isolation;
    public static SqlNotificationInfo Expired;
    public static SqlNotificationInfo Resource;
    public static SqlNotificationInfo PreviousFire;
    public static SqlNotificationInfo TemplateLimit;
    public static SqlNotificationInfo Merge;
    public static SqlNotificationInfo Unknown;
    public static SqlNotificationInfo AlreadyChanged;
}
public enum System.Data.SqlClient.SqlNotificationSource : Enum {
    public int value__;
    public static SqlNotificationSource Data;
    public static SqlNotificationSource Timeout;
    public static SqlNotificationSource Object;
    public static SqlNotificationSource Database;
    public static SqlNotificationSource System;
    public static SqlNotificationSource Statement;
    public static SqlNotificationSource Environment;
    public static SqlNotificationSource Execution;
    public static SqlNotificationSource Owner;
    public static SqlNotificationSource Unknown;
    public static SqlNotificationSource Client;
}
public enum System.Data.SqlClient.SqlNotificationType : Enum {
    public int value__;
    public static SqlNotificationType Change;
    public static SqlNotificationType Subscribe;
    public static SqlNotificationType Unknown;
}
[TypeConverterAttribute("System.Data.SqlClient.SqlParameter/SqlParameterConverter")]
public class System.Data.SqlClient.SqlParameter : DbParameter {
    internal SqlCipherMetadata CipherMetadata { get; internal set; }
    internal bool HasReceivedMetadata { get; internal set; }
    internal byte NormalizationRuleVersion { get; }
    internal SqlCollation Collation { get; internal set; }
    [BrowsableAttribute("False")]
public SqlCompareOptions CompareInfo { get; public set; }
    [ResDescriptionAttribute("SqlParameter_XmlSchemaCollectionDatabase")]
[ResCategoryAttribute("DataCategory_Xml")]
public string XmlSchemaCollectionDatabase { get; public set; }
    [ResDescriptionAttribute("SqlParameter_XmlSchemaCollectionOwningSchema")]
[ResCategoryAttribute("DataCategory_Xml")]
public string XmlSchemaCollectionOwningSchema { get; public set; }
    [ResDescriptionAttribute("SqlParameter_XmlSchemaCollectionName")]
[ResCategoryAttribute("DataCategory_Xml")]
public string XmlSchemaCollectionName { get; public set; }
    [DefaultValueAttribute("False")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("TCE_SqlParameter_ForceColumnEncryption")]
public bool ForceColumnEncryption { get; public set; }
    public DbType DbType { get; public set; }
    internal MetaType InternalMetaType { get; internal set; }
    [BrowsableAttribute("False")]
public int LocaleId { get; public set; }
    internal bool SizeInferred { get; }
    internal bool ParamaterIsSqlType { get; internal set; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("SqlParameter_ParameterName")]
public string ParameterName { get; public set; }
    internal string ParameterNameFixed { get; }
    [ResDescriptionAttribute("DbDataParameter_Precision")]
[DefaultValueAttribute("0")]
[ResCategoryAttribute("DataCategory_Data")]
public byte Precision { get; public set; }
    internal byte PrecisionInternal { get; internal set; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DbDataParameter_Scale")]
[DefaultValueAttribute("0")]
public byte Scale { get; public set; }
    internal byte ScaleInternal { get; internal set; }
    [RefreshPropertiesAttribute("1")]
[ResDescriptionAttribute("SqlParameter_SqlDbType")]
[DbProviderSpecificTypePropertyAttribute("True")]
[ResCategoryAttribute("DataCategory_Data")]
public SqlDbType SqlDbType { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object SqlValue { get; public set; }
    [EditorBrowsableAttribute("2")]
[BrowsableAttribute("False")]
public string UdtTypeName { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public string TypeName { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.StringConverter")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DbParameter_Value")]
public object Value { get; public set; }
    internal INullable ValueAsINullable { get; }
    internal bool IsNull { get; }
    internal bool CoercedValueIsSqlType { get; }
    internal bool CoercedValueIsDataFeed { get; }
    [ResDescriptionAttribute("DbParameter_Direction")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Data")]
public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; public set; }
    [ResCategoryAttribute("DataCategory_Data")]
[EditorBrowsableAttribute("2")]
[ResDescriptionAttribute("DbParameter_Offset")]
[BrowsableAttribute("False")]
public int Offset { get; public set; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("DbParameter_Size")]
public int Size { get; public set; }
    [ResDescriptionAttribute("DbParameter_SourceColumn")]
[ResCategoryAttribute("DataCategory_Update")]
public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    [ResCategoryAttribute("DataCategory_Update")]
[ResDescriptionAttribute("DbParameter_SourceVersion")]
public DataRowVersion SourceVersion { get; public set; }
    [EditorBrowsableAttribute("2")]
public SqlParameter(string parameterName, SqlDbType dbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    public SqlParameter(string parameterName, SqlDbType dbType, int size, ParameterDirection direction, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, bool sourceColumnNullMapping, object value, string xmlSchemaCollectionDatabase, string xmlSchemaCollectionOwningSchema, string xmlSchemaCollectionName);
    public SqlParameter(string parameterName, SqlDbType dbType);
    public SqlParameter(string parameterName, object value);
    public SqlParameter(string parameterName, SqlDbType dbType, int size);
    public SqlParameter(string parameterName, SqlDbType dbType, int size, string sourceColumn);
    internal SqlCipherMetadata get_CipherMetadata();
    internal void set_CipherMetadata(SqlCipherMetadata value);
    [CompilerGeneratedAttribute]
internal bool get_HasReceivedMetadata();
    [CompilerGeneratedAttribute]
internal void set_HasReceivedMetadata(bool value);
    internal byte get_NormalizationRuleVersion();
    internal SqlCollation get_Collation();
    internal void set_Collation(SqlCollation value);
    public SqlCompareOptions get_CompareInfo();
    public void set_CompareInfo(SqlCompareOptions value);
    public string get_XmlSchemaCollectionDatabase();
    public void set_XmlSchemaCollectionDatabase(string value);
    public string get_XmlSchemaCollectionOwningSchema();
    public void set_XmlSchemaCollectionOwningSchema(string value);
    public string get_XmlSchemaCollectionName();
    public void set_XmlSchemaCollectionName(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceColumnEncryption();
    [CompilerGeneratedAttribute]
public void set_ForceColumnEncryption(bool value);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public virtual void ResetDbType();
    internal MetaType get_InternalMetaType();
    internal void set_InternalMetaType(MetaType value);
    public int get_LocaleId();
    public void set_LocaleId(int value);
    internal bool get_SizeInferred();
    internal SmiParameterMetaData GetMetadataForTypeInfo();
    internal SmiParameterMetaData MetaDataForSmi(ParameterPeekAheadValue& peekAhead);
    internal bool get_ParamaterIsSqlType();
    internal void set_ParamaterIsSqlType(bool value);
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    internal string get_ParameterNameFixed();
    public sealed virtual byte get_Precision();
    public sealed virtual void set_Precision(byte value);
    internal byte get_PrecisionInternal();
    internal void set_PrecisionInternal(byte value);
    public sealed virtual byte get_Scale();
    public sealed virtual void set_Scale(byte value);
    internal byte get_ScaleInternal();
    internal void set_ScaleInternal(byte value);
    public SqlDbType get_SqlDbType();
    public void set_SqlDbType(SqlDbType value);
    public void ResetSqlDbType();
    public object get_SqlValue();
    public void set_SqlValue(object value);
    public string get_UdtTypeName();
    public void set_UdtTypeName(string value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    internal INullable get_ValueAsINullable();
    internal bool get_IsNull();
    internal int GetActualSize();
    private sealed virtual override object System.ICloneable.Clone();
    internal static object CoerceValue(object value, MetaType destinationType, Boolean& coercedToDataFeed, Boolean& typeChanged, bool allowStreaming);
    internal void FixStreamDataForNonPLP();
    internal byte GetActualPrecision();
    internal byte GetActualScale();
    internal int GetParameterSize();
    internal object GetCoercedValue();
    internal bool get_CoercedValueIsSqlType();
    internal bool get_CoercedValueIsDataFeed();
    [ConditionalAttribute("DEBUG")]
internal void AssertCachedPropertiesAreValid();
    [ConditionalAttribute("DEBUG")]
internal void AssertPropertiesAreValid(object value, Nullable`1<bool> isSqlType, Nullable`1<bool> isDataFeed, Nullable`1<bool> isNull);
    internal void Prepare(SqlCommand cmd);
    internal void SetSqlBuffer(SqlBuffer buff);
    internal void SetUdtLoadError(Exception e);
    internal void Validate(int index, bool isCommandProc);
    internal MetaType ValidateTypeLengths(bool yukonOrNewer);
    internal static String[] ParseTypeName(string typeName, bool isUdtTypeName);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public int get_Offset();
    public void set_Offset(int value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    internal void CopyTo(DbParameter destination);
    internal object CompareExchangeParent(object value, object comparand);
    internal void ResetParent();
    public virtual string ToString();
}
[ListBindableAttribute("False")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBParametersEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultMemberAttribute("Item")]
public class System.Data.SqlClient.SqlParameterCollection : DbParameterCollection {
    internal bool IsDirty { get; internal set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public SqlParameter Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SqlParameter Item { get; public set; }
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    private static SqlParameterCollection();
    internal bool get_IsDirty();
    internal void set_IsDirty(bool value);
    public SqlParameter get_Item(int index);
    public void set_Item(int index, SqlParameter value);
    public SqlParameter get_Item(string parameterName);
    public void set_Item(string parameterName, SqlParameter value);
    public SqlParameter Add(SqlParameter value);
    [ObsoleteAttribute("Add(String parameterName, Object value) has been deprecated.  Use AddWithValue(String parameterName, Object value).  http://go.microsoft.com/fwlink/?linkid=14202", "False")]
[EditorBrowsableAttribute("1")]
public SqlParameter Add(string parameterName, object value);
    public SqlParameter AddWithValue(string parameterName, object value);
    public SqlParameter Add(string parameterName, SqlDbType sqlDbType);
    public SqlParameter Add(string parameterName, SqlDbType sqlDbType, int size);
    public SqlParameter Add(string parameterName, SqlDbType sqlDbType, int size, string sourceColumn);
    public void AddRange(SqlParameter[] values);
    public virtual bool Contains(string value);
    public bool Contains(SqlParameter value);
    public void CopyTo(SqlParameter[] array, int index);
    public int IndexOf(SqlParameter value);
    public void Insert(int index, SqlParameter value);
    public void Remove(SqlParameter value);
    public virtual int get_Count();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    [EditorBrowsableAttribute("1")]
public virtual int Add(object value);
    public virtual void AddRange(Array values);
    public virtual void Clear();
    public virtual bool Contains(object value);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    protected virtual DbParameter GetParameter(int index);
    protected virtual DbParameter GetParameter(string parameterName);
    public virtual int IndexOf(string parameterName);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string parameterName, DbParameter value);
}
internal class System.Data.SqlClient.SqlPerformanceCounters : DbConnectionPoolCounters {
    public static SqlPerformanceCounters SingletonInstance;
    private static SqlPerformanceCounters();
}
internal class System.Data.SqlClient.SqlQueryMetadataCache : object {
    private static SqlQueryMetadataCache();
    internal static SqlQueryMetadataCache GetInstance();
    internal bool GetQueryMetadataIfExists(SqlCommand sqlCommand);
    internal void AddQueryMetadata(SqlCommand sqlCommand, bool ignoreQueriesWithReturnValueParams);
    internal void InvalidateCacheEntry(SqlCommand sqlCommand);
}
internal class System.Data.SqlClient.SqlReferenceCollection : DbReferenceCollection {
    internal static int DataReaderTag;
    internal static int CommandTag;
    internal static int BulkCopyTag;
    public virtual void Add(object value, int tag);
    internal void Deactivate();
    internal SqlDataReader FindLiveReader(SqlCommand command);
    internal SqlCommand FindLiveCommand(TdsParserStateObject stateObj);
    protected virtual void NotifyItem(int message, int tag, object value);
    public virtual void Remove(object value);
}
internal class System.Data.SqlClient.SqlReturnValue : SqlMetaDataPriv {
    internal ushort parmIndex;
    internal string parameter;
    internal SqlBuffer value;
}
public class System.Data.SqlClient.SqlRowsCopiedEventArgs : EventArgs {
    public bool Abort { get; public set; }
    public long RowsCopied { get; }
    public SqlRowsCopiedEventArgs(long rowsCopied);
    public bool get_Abort();
    public void set_Abort(bool value);
    public long get_RowsCopied();
}
public class System.Data.SqlClient.SqlRowsCopiedEventHandler : MulticastDelegate {
    public SqlRowsCopiedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlRowsCopiedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlRowsCopiedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.SqlClient.SqlRowUpdatedEventArgs : RowUpdatedEventArgs {
    public SqlCommand Command { get; }
    public SqlRowUpdatedEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public SqlCommand get_Command();
}
public class System.Data.SqlClient.SqlRowUpdatedEventHandler : MulticastDelegate {
    public SqlRowUpdatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.SqlClient.SqlRowUpdatingEventArgs : RowUpdatingEventArgs {
    public SqlCommand Command { get; public set; }
    protected IDbCommand BaseCommand { get; protected set; }
    public SqlRowUpdatingEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public SqlCommand get_Command();
    public void set_Command(SqlCommand value);
    protected virtual IDbCommand get_BaseCommand();
    protected virtual void set_BaseCommand(IDbCommand value);
}
public class System.Data.SqlClient.SqlRowUpdatingEventHandler : MulticastDelegate {
    public SqlRowUpdatingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class System.Data.SqlClient.SqlSecurityUtility : object {
    private static SqlSecurityUtility();
    internal static void GetHMACWithSHA256(Byte[] plainText, Byte[] key, Byte[] hash);
    internal static string GetSHA256Hash(Byte[] input);
    internal static void GenerateRandomBytes(Byte[] randomBytes);
    internal static bool CompareBytes(Byte[] buffer1, Byte[] buffer2, int buffer2Index, int lengthToCompare);
    internal static string GetHexString(Byte[] input);
    internal static string GetCurrentFunctionName();
    internal static Byte[] EncryptWithKey(Byte[] plainText, SqlCipherMetadata md, string serverName);
    internal static string GetBytesAsString(Byte[] buff, bool fLast, int countOfBytes);
    internal static Byte[] DecryptWithKey(Byte[] cipherText, SqlCipherMetadata md, string serverName);
    internal static void DecryptSymmetricKey(SqlCipherMetadata md, string serverName);
    internal static void DecryptSymmetricKey(Nullable`1<SqlTceCipherInfoEntry> sqlTceCipherInfoEntry, string serverName, SqlClientSymmetricKey& sqlClientSymmetricKey, Nullable`1& encryptionkeyInfoChosen);
    internal static int GetBase64LengthFromByteLength(int byteLength);
    internal static void VerifyColumnMasterKeySignature(string keyStoreName, string keyPath, string serverName, bool isEnclaveEnabled, Byte[] CMKSignature);
}
internal class System.Data.SqlClient.SqlSequentialStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    internal int ColumnIndex { get; }
    internal SqlSequentialStream(SqlDataReader reader, int columnIndex);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    internal int get_ColumnIndex();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    internal void SetClosed();
    protected virtual void Dispose(bool disposing);
    internal static void ValidateReadParameters(Byte[] buffer, int offset, int count);
}
internal class System.Data.SqlClient.SqlSequentialStreamSmi : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal int ColumnIndex { get; }
    internal SqlSequentialStreamSmi(SmiEventSink_Default sink, ITypedGettersV3 getters, int columnIndex, long length);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    internal int get_ColumnIndex();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    internal void SetClosed();
    protected virtual void Dispose(bool disposing);
}
internal class System.Data.SqlClient.SqlSequentialTextReader : TextReader {
    internal int ColumnIndex { get; }
    internal SqlSequentialTextReader(SqlDataReader reader, int columnIndex, Encoding encoding);
    internal int get_ColumnIndex();
    public virtual int Peek();
    public virtual int Read();
    public virtual int Read(Char[] buffer, int index, int count);
    public virtual Task`1<int> ReadAsync(Char[] buffer, int index, int count);
    protected virtual void Dispose(bool disposing);
    internal void SetClosed();
    internal static void ValidateReadParameters(Char[] buffer, int index, int count);
}
internal class System.Data.SqlClient.SqlSequentialTextReaderSmi : TextReader {
    internal int ColumnIndex { get; }
    internal SqlSequentialTextReaderSmi(SmiEventSink_Default sink, ITypedGettersV3 getters, int columnIndex, long length);
    internal int get_ColumnIndex();
    public virtual int Peek();
    public virtual int Read();
    public virtual int Read(Char[] buffer, int index, int count);
    internal void SetClosed();
}
internal static class System.Data.SqlClient.SqlServerEscapeHelper : object {
    internal static string EscapeIdentifier(string name);
    internal static void EscapeIdentifier(StringBuilder builder, string name);
    internal static string EscapeStringAsLiteral(string input);
    internal static string MakeStringLiteral(string input);
}
internal class System.Data.SqlClient.SqlStatistics : object {
    internal long _closeTimestamp;
    internal long _openTimestamp;
    internal long _startExecutionTimestamp;
    internal long _startFetchTimestamp;
    internal long _startNetworkServerTimestamp;
    internal long _buffersReceived;
    internal long _buffersSent;
    internal long _bytesReceived;
    internal long _bytesSent;
    internal long _connectionTime;
    internal long _cursorOpens;
    internal long _executionTime;
    internal long _iduCount;
    internal long _iduRows;
    internal long _networkServerTime;
    internal long _preparedExecs;
    internal long _prepares;
    internal long _selectCount;
    internal long _selectRows;
    internal long _serverRoundtrips;
    internal long _sumResultSets;
    internal long _transactions;
    internal long _unpreparedExecs;
    internal bool WaitForDoneAfterRow { get; internal set; }
    internal bool WaitForReply { get; }
    internal static SqlStatistics StartTimer(SqlStatistics statistics);
    internal static void StopTimer(SqlStatistics statistics);
    internal bool get_WaitForDoneAfterRow();
    internal void set_WaitForDoneAfterRow(bool value);
    internal bool get_WaitForReply();
    internal void ContinueOnNewConnection();
    internal IDictionary GetHashtable();
    internal bool RequestExecutionTimer();
    internal void RequestNetworkServerTimer();
    internal void ReleaseAndUpdateExecutionTimer();
    internal void ReleaseAndUpdateNetworkServerTimer();
    internal void Reset();
    internal void SafeAdd(Int64& value, long summand);
    internal long SafeIncrement(Int64& value);
    internal void UpdateStatistics();
}
internal class System.Data.SqlClient.SqlStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal SqlStream(SqlDataReader reader, bool addByteOrderMark, bool processAllRows);
    internal SqlStream(int columnOrdinal, SqlDataReader reader, bool addByteOrderMark, bool processAllRows, bool advanceReader);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    internal XmlReader ToXmlReader();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class System.Data.SqlClient.SqlStreamingXml : object {
    public int ColumnOrdinal { get; }
    public SqlStreamingXml(int i, SqlDataReader reader);
    public void Close();
    public int get_ColumnOrdinal();
    public long GetChars(long dataIndex, Char[] buffer, int bufferIndex, int length);
}
internal class System.Data.SqlClient.SqlSymmetricKeyCache : object {
    private static SqlSymmetricKeyCache();
    internal static SqlSymmetricKeyCache GetInstance();
    internal bool GetKey(SqlEncryptionKeyInfo keyInfo, string serverName, SqlClientSymmetricKey& encryptionKey);
}
internal class System.Data.SqlClient.SqlTceCipherInfoEntry : ValueType {
    private List`1<SqlEncryptionKeyInfo> _columnEncryptionKeyValues;
    private int _ordinal;
    private int _databaseId;
    private int _cekId;
    private int _cekVersion;
    private Byte[] _cekMdVersion;
    internal int Ordinal { get; }
    internal int DatabaseId { get; }
    internal int CekId { get; }
    internal int CekVersion { get; }
    internal Byte[] CekMdVersion { get; }
    internal List`1<SqlEncryptionKeyInfo> ColumnEncryptionKeyValues { get; }
    internal SqlTceCipherInfoEntry(int ordinal);
    internal int get_Ordinal();
    internal int get_DatabaseId();
    internal int get_CekId();
    internal int get_CekVersion();
    internal Byte[] get_CekMdVersion();
    internal List`1<SqlEncryptionKeyInfo> get_ColumnEncryptionKeyValues();
    internal void Add(Byte[] encryptedKey, int databaseId, int cekId, int cekVersion, Byte[] cekMdVersion, string keyPath, string keyStoreName, string algorithmName);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.SqlClient.SqlTceCipherInfoTable : ValueType {
    private SqlTceCipherInfoEntry[] keyList;
    internal SqlTceCipherInfoEntry Item { get; internal set; }
    internal int Size { get; }
    internal SqlTceCipherInfoTable(int tabSize);
    internal SqlTceCipherInfoEntry get_Item(int index);
    internal void set_Item(int index, SqlTceCipherInfoEntry value);
    internal int get_Size();
}
public class System.Data.SqlClient.SqlTransaction : DbTransaction {
    internal int _objectID;
    internal IsolationLevel _isolationLevel;
    public SqlConnection Connection { get; }
    protected DbConnection DbConnection { get; }
    internal SqlInternalTransaction InternalTransaction { get; }
    public IsolationLevel IsolationLevel { get; }
    internal bool IsZombied { get; }
    internal int ObjectID { get; }
    internal SqlStatistics Statistics { get; }
    internal SqlTransaction(SqlInternalConnection internalConnection, SqlConnection con, IsolationLevel iso, SqlInternalTransaction internalTransaction);
    public SqlConnection get_Connection();
    protected virtual DbConnection get_DbConnection();
    internal SqlInternalTransaction get_InternalTransaction();
    public virtual IsolationLevel get_IsolationLevel();
    internal bool get_IsZombied();
    internal int get_ObjectID();
    internal SqlStatistics get_Statistics();
    public virtual void Commit();
    protected virtual void Dispose(bool disposing);
    public virtual void Rollback();
    public void Rollback(string transactionName);
    public void Save(string savePointName);
    internal void Zombie();
}
internal class System.Data.SqlClient.SqlUdtInfo : object {
    internal Format SerializationFormat;
    internal bool IsByteOrdered;
    internal bool IsFixedLength;
    internal int MaxByteSize;
    internal string Name;
    internal string ValidationMethodName;
    internal static SqlUdtInfo GetFromType(Type target);
    internal static SqlUdtInfo TryGetFromType(Type target);
}
internal class System.Data.SqlClient.SqlUnicodeEncoding : UnicodeEncoding {
    public static Encoding SqlUnicodeEncodingInstance { get; }
    private static SqlUnicodeEncoding();
    public virtual Decoder GetDecoder();
    public virtual int GetMaxByteCount(int charCount);
    public static Encoding get_SqlUnicodeEncodingInstance();
}
internal class System.Data.SqlClient.StreamDataFeed : DataFeed {
    internal Stream _source;
    internal StreamDataFeed(Stream source);
}
internal static class System.Data.SqlClient.SysTxForGlobalTransactions : object {
    public static MethodInfo EnlistPromotableSinglePhase { get; }
    public static MethodInfo SetDistributedTransactionIdentifier { get; }
    public static MethodInfo GetPromotedToken { get; }
    private static SysTxForGlobalTransactions();
    public static MethodInfo get_EnlistPromotableSinglePhase();
    public static MethodInfo get_SetDistributedTransactionIdentifier();
    public static MethodInfo get_GetPromotedToken();
}
internal class System.Data.SqlClient.TdsDateTime : ValueType {
    public int days;
    public int time;
}
internal static class System.Data.SqlClient.TdsEnums : object {
    public static short SQL_SERVER_VERSION_SEVEN;
    public static string SQL_PROVIDER_NAME;
    public static decimal SQL_SMALL_MONEY_MIN;
    public static decimal SQL_SMALL_MONEY_MAX;
    public static string SDCI_MAPFILENAME;
    public static byte SDCI_MAX_MACHINENAME;
    public static byte SDCI_MAX_DLLNAME;
    public static byte SDCI_MAX_DATA;
    public static int SQLDEBUG_OFF;
    public static int SQLDEBUG_ON;
    public static int SQLDEBUG_CONTEXT;
    public static string SP_SDIDEBUG;
    public static String[] SQLDEBUG_MODE_NAMES;
    public static SqlDbType SmallVarBinary;
    public static string TCP;
    public static string NP;
    public static string RPC;
    public static string BV;
    public static string ADSP;
    public static string SPX;
    public static string VIA;
    public static string LPC;
    public static string INIT_SSPI_PACKAGE;
    public static string INIT_ADAL_PACKAGE;
    public static string INIT_SESSION;
    public static string CONNECTION_GET_SVR_USER;
    public static string GEN_CLIENT_CONTEXT;
    public static byte SOFTFLUSH;
    public static byte HARDFLUSH;
    public static byte IGNORE;
    public static int HEADER_LEN;
    public static int HEADER_LEN_FIELD_OFFSET;
    public static int YUKON_HEADER_LEN;
    public static int MARS_ID_OFFSET;
    public static int HEADERTYPE_QNOTIFICATION;
    public static int HEADERTYPE_MARS;
    public static int HEADERTYPE_TRACE;
    public static int SUCCEED;
    public static int FAIL;
    public static short TYPE_SIZE_LIMIT;
    public static int MIN_PACKET_SIZE;
    public static int DEFAULT_LOGIN_PACKET_SIZE;
    public static int MAX_PRELOGIN_PAYLOAD_LENGTH;
    public static int MAX_PACKET_SIZE;
    public static int MAX_SERVER_USER_NAME;
    public static byte MIN_ERROR_CLASS;
    public static byte MAX_USER_CORRECTABLE_ERROR_CLASS;
    public static byte FATAL_ERROR_CLASS;
    public static byte MT_SQL;
    public static byte MT_LOGIN;
    public static byte MT_RPC;
    public static byte MT_TOKENS;
    public static byte MT_BINARY;
    public static byte MT_ATTN;
    public static byte MT_BULK;
    public static byte MT_FEDAUTH;
    public static byte MT_CLOSE;
    public static byte MT_ERROR;
    public static byte MT_ACK;
    public static byte MT_ECHO;
    public static byte MT_LOGOUT;
    public static byte MT_TRANS;
    public static byte MT_OLEDB;
    public static byte MT_LOGIN7;
    public static byte MT_SSPI;
    public static byte MT_PRELOGIN;
    public static byte ST_EOM;
    public static byte ST_AACK;
    public static byte ST_IGNORE;
    public static byte ST_BATCH;
    public static byte ST_RESET_CONNECTION;
    public static byte ST_RESET_CONNECTION_PRESERVE_TRANSACTION;
    public static byte SQLCOLFMT;
    public static byte SQLPROCID;
    public static byte SQLCOLNAME;
    public static byte SQLTABNAME;
    public static byte SQLCOLINFO;
    public static byte SQLALTNAME;
    public static byte SQLALTFMT;
    public static byte SQLERROR;
    public static byte SQLINFO;
    public static byte SQLRETURNVALUE;
    public static byte SQLRETURNSTATUS;
    public static byte SQLRETURNTOK;
    public static byte SQLALTCONTROL;
    public static byte SQLROW;
    public static byte SQLNBCROW;
    public static byte SQLALTROW;
    public static byte SQLDONE;
    public static byte SQLDONEPROC;
    public static byte SQLDONEINPROC;
    public static byte SQLOFFSET;
    public static byte SQLORDER;
    public static byte SQLDEBUG_CMD;
    public static byte SQLLOGINACK;
    public static byte SQLFEATUREEXTACK;
    public static byte SQLSESSIONSTATE;
    public static byte SQLENVCHANGE;
    public static byte SQLSECLEVEL;
    public static byte SQLROWCRC;
    public static byte SQLCOLMETADATA;
    public static byte SQLALTMETADATA;
    public static byte SQLSSPI;
    public static byte SQLFEDAUTHINFO;
    public static byte ENV_DATABASE;
    public static byte ENV_LANG;
    public static byte ENV_CHARSET;
    public static byte ENV_PACKETSIZE;
    public static byte ENV_LOCALEID;
    public static byte ENV_COMPFLAGS;
    public static byte ENV_COLLATION;
    public static byte ENV_BEGINTRAN;
    public static byte ENV_COMMITTRAN;
    public static byte ENV_ROLLBACKTRAN;
    public static byte ENV_ENLISTDTC;
    public static byte ENV_DEFECTDTC;
    public static byte ENV_LOGSHIPNODE;
    public static byte ENV_PROMOTETRANSACTION;
    public static byte ENV_TRANSACTIONMANAGERADDRESS;
    public static byte ENV_TRANSACTIONENDED;
    public static byte ENV_SPRESETCONNECTIONACK;
    public static byte ENV_USERINSTANCE;
    public static byte ENV_ROUTING;
    public static int DONE_MORE;
    public static int DONE_ERROR;
    public static int DONE_INXACT;
    public static int DONE_PROC;
    public static int DONE_COUNT;
    public static int DONE_ATTN;
    public static int DONE_INPROC;
    public static int DONE_RPCINBATCH;
    public static int DONE_SRVERROR;
    public static int DONE_FMTSENT;
    public static byte FEATUREEXT_TERMINATOR;
    public static byte FEATUREEXT_SRECOVERY;
    public static byte FEATUREEXT_FEDAUTH;
    public static byte FEATUREEXT_TCE;
    public static byte FEATUREEXT_GLOBALTRANSACTIONS;
    public static byte FEATUREEXT_AZURESQLSUPPORT;
    public static byte FEDAUTHLIB_LIVEID;
    public static byte FEDAUTHLIB_SECURITYTOKEN;
    public static byte FEDAUTHLIB_ADAL;
    public static byte FEDAUTHLIB_RESERVED;
    public static byte ADALWORKFLOW_ACTIVEDIRECTORYPASSWORD;
    public static byte ADALWORKFLOW_ACTIVEDIRECTORYINTEGRATED;
    public static byte ADALWORKFLOW_ACTIVEDIRECTORYINTERACTIVE;
    public static string NTAUTHORITYANONYMOUSLOGON;
    public static byte MAX_LOG_NAME;
    public static byte MAX_PROG_NAME;
    public static byte SEC_COMP_LEN;
    public static byte MAX_PK_LEN;
    public static byte MAX_NIC_SIZE;
    public static byte SQLVARIANT_SIZE;
    public static byte VERSION_SIZE;
    public static int CLIENT_PROG_VER;
    public static int YUKON_LOG_REC_FIXED_LEN;
    public static int TEXT_TIME_STAMP_LEN;
    public static int COLLATION_INFO_LEN;
    public static int SPHINXORSHILOH_MAJOR;
    public static int SPHINX_INCREMENT;
    public static int SHILOH_INCREMENT;
    public static int DEFAULT_MINOR;
    public static int SHILOHSP1_MAJOR;
    public static int YUKON_MAJOR;
    public static int KATMAI_MAJOR;
    public static int DENALI_MAJOR;
    public static int SHILOHSP1_INCREMENT;
    public static int YUKON_INCREMENT;
    public static int KATMAI_INCREMENT;
    public static int DENALI_INCREMENT;
    public static int SHILOHSP1_MINOR;
    public static int YUKON_RTM_MINOR;
    public static int KATMAI_MINOR;
    public static int DENALI_MINOR;
    public static int ORDER_68000;
    public static int USE_DB_ON;
    public static int INIT_DB_FATAL;
    public static int SET_LANG_ON;
    public static int INIT_LANG_FATAL;
    public static int ODBC_ON;
    public static int SSPI_ON;
    public static int REPL_ON;
    public static int READONLY_INTENT_ON;
    public static byte SQLLenMask;
    public static byte SQLFixedLen;
    public static byte SQLVarLen;
    public static byte SQLZeroLen;
    public static byte SQLVarCnt;
    public static byte SQLDifferentName;
    public static byte SQLExpression;
    public static byte SQLKey;
    public static byte SQLHidden;
    public static byte Nullable;
    public static byte Identity;
    public static byte Updatability;
    public static byte ClrFixedLen;
    public static byte IsColumnSet;
    public static byte IsEncrypted;
    public static UInt32 VARLONGNULL;
    public static int VARNULL;
    public static int MAXSIZE;
    public static byte FIXEDNULL;
    public static ulong UDTNULL;
    public static int SQLVOID;
    public static int SQLTEXT;
    public static int SQLVARBINARY;
    public static int SQLINTN;
    public static int SQLVARCHAR;
    public static int SQLBINARY;
    public static int SQLIMAGE;
    public static int SQLCHAR;
    public static int SQLINT1;
    public static int SQLBIT;
    public static int SQLINT2;
    public static int SQLINT4;
    public static int SQLMONEY;
    public static int SQLDATETIME;
    public static int SQLFLT8;
    public static int SQLFLTN;
    public static int SQLMONEYN;
    public static int SQLDATETIMN;
    public static int SQLFLT4;
    public static int SQLMONEY4;
    public static int SQLDATETIM4;
    public static int SQLDECIMALN;
    public static int SQLNUMERICN;
    public static int SQLUNIQUEID;
    public static int SQLBIGCHAR;
    public static int SQLBIGVARCHAR;
    public static int SQLBIGBINARY;
    public static int SQLBIGVARBINARY;
    public static int SQLBITN;
    public static int SQLNCHAR;
    public static int SQLNVARCHAR;
    public static int SQLNTEXT;
    public static int SQLUDT;
    public static int AOPCNTB;
    public static int AOPSTDEV;
    public static int AOPSTDEVP;
    public static int AOPVAR;
    public static int AOPVARP;
    public static int AOPCNT;
    public static int AOPSUM;
    public static int AOPAVG;
    public static int AOPMIN;
    public static int AOPMAX;
    public static int AOPANY;
    public static int AOPNOOP;
    public static int SQLTIMESTAMP;
    public static int MAX_NUMERIC_LEN;
    public static int DEFAULT_NUMERIC_PRECISION;
    public static int SPHINX_DEFAULT_NUMERIC_PRECISION;
    public static int MAX_NUMERIC_PRECISION;
    public static byte UNKNOWN_PRECISION_SCALE;
    public static int SQLINT8;
    public static int SQLVARIANT;
    public static int SQLXMLTYPE;
    public static int XMLUNICODEBOM;
    public static Byte[] XMLUNICODEBOMBYTES;
    public static int SQLTABLE;
    public static int SQLDATE;
    public static int SQLTIME;
    public static int SQLDATETIME2;
    public static int SQLDATETIMEOFFSET;
    public static int DEFAULT_VARTIME_SCALE;
    public static ulong SQL_PLP_NULL;
    public static ulong SQL_PLP_UNKNOWNLEN;
    public static int SQL_PLP_CHUNK_TERMINATOR;
    public static ushort SQL_USHORTVARMAXLEN;
    public static byte TVP_ROWCOUNT_ESTIMATE;
    public static byte TVP_ROW_TOKEN;
    public static byte TVP_END_TOKEN;
    public static ushort TVP_NOMETADATA_TOKEN;
    public static byte TVP_ORDER_UNIQUE_TOKEN;
    public static int TVP_DEFAULT_COLUMN;
    public static byte TVP_ORDERASC_FLAG;
    public static byte TVP_ORDERDESC_FLAG;
    public static byte TVP_UNIQUE_FLAG;
    public static bool Is68K;
    public static bool TraceTDS;
    public static string SP_EXECUTESQL;
    public static string SP_PREPEXEC;
    public static string SP_PREPARE;
    public static string SP_EXECUTE;
    public static string SP_UNPREPARE;
    public static string SP_PARAMS;
    public static string SP_PARAMS_MANAGED;
    public static string SP_PARAMS_MGD10;
    public static ushort RPC_PROCID_CURSOR;
    public static ushort RPC_PROCID_CURSOROPEN;
    public static ushort RPC_PROCID_CURSORPREPARE;
    public static ushort RPC_PROCID_CURSOREXECUTE;
    public static ushort RPC_PROCID_CURSORPREPEXEC;
    public static ushort RPC_PROCID_CURSORUNPREPARE;
    public static ushort RPC_PROCID_CURSORFETCH;
    public static ushort RPC_PROCID_CURSOROPTION;
    public static ushort RPC_PROCID_CURSORCLOSE;
    public static ushort RPC_PROCID_EXECUTESQL;
    public static ushort RPC_PROCID_PREPARE;
    public static ushort RPC_PROCID_EXECUTE;
    public static ushort RPC_PROCID_PREPEXEC;
    public static ushort RPC_PROCID_PREPEXECRPC;
    public static ushort RPC_PROCID_UNPREPARE;
    public static string TRANS_BEGIN;
    public static string TRANS_COMMIT;
    public static string TRANS_ROLLBACK;
    public static string TRANS_IF_ROLLBACK;
    public static string TRANS_SAVE;
    public static string TRANS_READ_COMMITTED;
    public static string TRANS_READ_UNCOMMITTED;
    public static string TRANS_REPEATABLE_READ;
    public static string TRANS_SERIALIZABLE;
    public static string TRANS_SNAPSHOT;
    public static byte SHILOH_RPCBATCHFLAG;
    public static byte YUKON_RPCBATCHFLAG;
    public static byte RPC_RECOMPILE;
    public static byte RPC_NOMETADATA;
    public static byte RPC_PARAM_BYREF;
    public static byte RPC_PARAM_DEFAULT;
    public static byte RPC_PARAM_ENCRYPTED;
    public static string PARAM_OUTPUT;
    public static int MAX_PARAMETER_NAME_LENGTH;
    public static string FMTONLY_ON;
    public static string FMTONLY_OFF;
    public static string BROWSE_ON;
    public static string BROWSE_OFF;
    public static string TABLE;
    public static int EXEC_THRESHOLD;
    public static short TIMEOUT_EXPIRED;
    public static short ENCRYPTION_NOT_SUPPORTED;
    public static int LOGON_FAILED;
    public static int PASSWORD_EXPIRED;
    public static int IMPERSONATION_FAILED;
    public static int P_TOKENTOOLONG;
    public static int TCE_CONVERSION_ERROR_CLIENT_RETRY;
    public static int TCE_ENCLAVE_INVALID_SESSION_HANDLE;
    public static UInt32 SNI_UNINITIALIZED;
    public static UInt32 SNI_SUCCESS;
    public static UInt32 SNI_WAIT_TIMEOUT;
    public static UInt32 SNI_SUCCESS_IO_PENDING;
    public static short SNI_WSAECONNRESET;
    public static UInt32 SNI_SSL_VALIDATE_CERTIFICATE;
    public static UInt32 SNI_SSL_USE_SCHANNEL_CACHE;
    public static UInt32 SNI_SSL_IGNORE_CHANNEL_BINDINGS;
    public static string DEFAULT_ENGLISH_CODE_PAGE_STRING;
    public static short DEFAULT_ENGLISH_CODE_PAGE_VALUE;
    public static short CHARSET_CODE_PAGE_OFFSET;
    internal static int MAX_SERVERNAME;
    internal static ushort SELECT;
    internal static ushort INSERT;
    internal static ushort DELETE;
    internal static ushort UPDATE;
    internal static ushort ABORT;
    internal static ushort BEGINXACT;
    internal static ushort ENDXACT;
    internal static ushort BULKINSERT;
    internal static ushort OPENCURSOR;
    internal static ushort MERGE;
    internal static ushort MAXLEN_HOSTNAME;
    internal static ushort MAXLEN_USERNAME;
    internal static ushort MAXLEN_PASSWORD;
    internal static ushort MAXLEN_APPNAME;
    internal static ushort MAXLEN_SERVERNAME;
    internal static ushort MAXLEN_CLIENTINTERFACE;
    internal static ushort MAXLEN_LANGUAGE;
    internal static ushort MAXLEN_DATABASE;
    internal static ushort MAXLEN_ATTACHDBFILE;
    internal static ushort MAXLEN_NEWPASSWORD;
    public static UInt16[] CODE_PAGE_FROM_SORT_ID;
    internal static Int64[] TICKS_FROM_SCALE;
    internal static int MAX_TIME_SCALE;
    internal static int MAX_TIME_LENGTH;
    internal static int MAX_DATETIME2_LENGTH;
    internal static int WHIDBEY_DATE_LENGTH;
    internal static Int32[] WHIDBEY_TIME_LENGTH;
    internal static Int32[] WHIDBEY_DATETIME2_LENGTH;
    internal static Int32[] WHIDBEY_DATETIMEOFFSET_LENGTH;
    internal static byte MAX_SUPPORTED_TCE_VERSION;
    internal static byte MIN_TCE_VERSION_WITH_ENCLAVE_SUPPORT;
    internal static ushort MAX_TCE_CIPHERINFO_SIZE;
    internal static long MAX_TCE_CIPHERTEXT_SIZE;
    internal static byte CustomCipherAlgorithmId;
    internal static int AES_256_CBC;
    internal static int AEAD_AES_256_CBC_HMAC_SHA256;
    internal static string TCE_PARAM_CIPHERTEXT;
    internal static string TCE_PARAM_CIPHER_ALGORITHM_ID;
    internal static string TCE_PARAM_COLUMNENCRYPTION_KEY;
    internal static string TCE_PARAM_ENCRYPTION_ALGORITHM;
    internal static string TCE_PARAM_ENCRYPTIONTYPE;
    internal static string TCE_PARAM_ENCRYPTIONKEY;
    internal static string TCE_PARAM_MASTERKEY_PATH;
    internal static string TCE_PARAM_ENCRYPTED_CEK;
    internal static string TCE_PARAM_CLIENT_KEYSTORE_PROVIDERS;
    internal static string TCE_PARAM_FORCE_COLUMN_ENCRYPTION;
    private static TdsEnums();
}
internal class System.Data.SqlClient.TdsParameterSetter : SmiTypedGetterSetter {
    internal bool CanGet { get; }
    internal bool CanSet { get; }
    internal TdsParameterSetter(TdsParserStateObject stateObj, SmiMetaData md);
    internal virtual bool get_CanGet();
    internal virtual bool get_CanSet();
    internal virtual SmiTypedGetterSetter GetTypedGetterSetter(SmiEventSink sink, int ordinal);
    public virtual void SetDBNull(SmiEventSink sink, int ordinal);
}
internal class System.Data.SqlClient.TdsParser : object {
    internal int _objectID;
    internal TdsParserStateObject _physicalStateObj;
    internal TdsParserStateObject _pMarsPhysicalConObj;
    internal TdsParserState _state;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _fResetConnection;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _fPreserveTransaction;
    internal Encoding _defaultEncoding;
    internal bool _loginWithFailover;
    internal AutoResetEvent _resetConnectionEvent;
    internal TdsParserSessionPool _sessionPool;
    internal bool _asyncWrite;
    internal int ObjectID { get; }
    internal bool IsColumnEncryptionSupported { get; internal set; }
    internal byte TceVersionSupported { get; internal set; }
    internal string EnclaveType { get; internal set; }
    internal SqlInternalConnectionTds Connection { get; }
    internal SqlInternalTransaction CurrentTransaction { get; internal set; }
    internal int DefaultLCID { get; }
    internal EncryptionOptions EncryptionOptions { get; internal set; }
    internal bool IsYukonOrNewer { get; }
    internal bool IsKatmaiOrNewer { get; }
    internal bool MARSOn { get; }
    internal SqlInternalTransaction PendingTransaction { get; internal set; }
    internal string Server { get; }
    internal TdsParserState State { get; internal set; }
    internal SqlStatistics Statistics { get; internal set; }
    internal TdsParser(bool MARS, bool fAsynchronous);
    private static TdsParser();
    internal int get_ObjectID();
    internal bool get_IsColumnEncryptionSupported();
    internal void set_IsColumnEncryptionSupported(bool value);
    [CompilerGeneratedAttribute]
internal byte get_TceVersionSupported();
    [CompilerGeneratedAttribute]
internal void set_TceVersionSupported(byte value);
    [CompilerGeneratedAttribute]
internal string get_EnclaveType();
    [CompilerGeneratedAttribute]
internal void set_EnclaveType(string value);
    internal SqlInternalConnectionTds get_Connection();
    internal SqlInternalTransaction get_CurrentTransaction();
    internal void set_CurrentTransaction(SqlInternalTransaction value);
    internal int get_DefaultLCID();
    internal EncryptionOptions get_EncryptionOptions();
    internal void set_EncryptionOptions(EncryptionOptions value);
    internal bool get_IsYukonOrNewer();
    internal bool get_IsKatmaiOrNewer();
    internal bool get_MARSOn();
    internal SqlInternalTransaction get_PendingTransaction();
    internal void set_PendingTransaction(SqlInternalTransaction value);
    internal string get_Server();
    internal TdsParserState get_State();
    internal void set_State(TdsParserState value);
    internal SqlStatistics get_Statistics();
    internal void set_Statistics(SqlStatistics value);
    internal int IncrementNonTransactedOpenResultCount();
    internal void DecrementNonTransactedOpenResultCount();
    internal void ProcessPendingAck(TdsParserStateObject stateObj);
    internal void Connect(ServerInfo serverInfo, SqlInternalConnectionTds connHandler, bool ignoreSniOpenTimeout, long timerExpire, bool encrypt, bool trustServerCert, bool integratedSecurity, bool withFailover, bool isFirstTransparentAttempt, SqlAuthenticationMethod authType, bool disableTnir, SqlAuthenticationProviderManager sqlAuthProviderManager);
    internal void RemoveEncryption();
    internal void EnableMars();
    internal TdsParserStateObject CreateSession();
    internal TdsParserStateObject GetSession(object owner);
    internal void PutSession(TdsParserStateObject session);
    internal void BestEffortCleanup();
    internal void Deactivate(bool connectionIsDoomed);
    internal void Disconnect();
    internal void DisconnectTransaction(SqlInternalTransaction internalTransaction);
    internal void RollbackOrphanedAPITransactions();
    internal void ThrowExceptionAndWarning(TdsParserStateObject stateObj, bool callerHasConnectionLock, bool asyncClose);
    internal SqlError ProcessSNIError(TdsParserStateObject stateObj);
    internal void CheckResetConnection(TdsParserStateObject stateObj);
    internal Byte[] SerializeShort(int v, TdsParserStateObject stateObj);
    internal void WriteShort(int v, TdsParserStateObject stateObj);
    internal void WriteUnsignedShort(ushort us, TdsParserStateObject stateObj);
    internal Byte[] SerializeUnsignedInt(UInt32 i, TdsParserStateObject stateObj);
    internal void WriteUnsignedInt(UInt32 i, TdsParserStateObject stateObj);
    internal Byte[] SerializeInt(int v, TdsParserStateObject stateObj);
    internal void WriteInt(int v, TdsParserStateObject stateObj);
    internal Byte[] SerializeFloat(float v);
    internal void WriteFloat(float v, TdsParserStateObject stateObj);
    internal Byte[] SerializeLong(long v, TdsParserStateObject stateObj);
    internal void WriteLong(long v, TdsParserStateObject stateObj);
    internal Byte[] SerializePartialLong(long v, int length);
    internal void WritePartialLong(long v, int length, TdsParserStateObject stateObj);
    internal void WriteUnsignedLong(ulong uv, TdsParserStateObject stateObj);
    internal Byte[] SerializeDouble(double v);
    internal void WriteDouble(double v, TdsParserStateObject stateObj);
    internal void PrepareResetConnection(bool preserveTransaction);
    internal bool RunReliably(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj);
    internal bool Run(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj);
    internal static bool IsValidTdsToken(byte token);
    internal bool TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady);
    internal bool TryProcessError(byte token, TdsParserStateObject stateObj, SqlError& error);
    internal bool TryProcessReturnValue(int length, TdsParserStateObject stateObj, SqlReturnValue& returnValue, SqlCommandColumnEncryptionSetting columnEncryptionSetting);
    internal bool TryProcessTceCryptoMetadata(TdsParserStateObject stateObj, SqlMetaDataPriv col, Nullable`1<SqlTceCipherInfoTable> cipherTable, SqlCommandColumnEncryptionSetting columnEncryptionSetting, bool isReturnValue);
    internal bool TryProcessCollation(TdsParserStateObject stateObj, SqlCollation& collation);
    internal int GetCodePage(SqlCollation collation, TdsParserStateObject stateObj);
    internal void DrainData(TdsParserStateObject stateObj);
    internal void ThrowUnsupportedCollationEncountered(TdsParserStateObject stateObj);
    internal bool TryProcessAltMetaData(int cColumns, TdsParserStateObject stateObj, _SqlMetaDataSet& metaData);
    internal bool TryReadCipherInfoEntry(TdsParserStateObject stateObj, SqlTceCipherInfoEntry& entry);
    internal bool TryProcessCipherInfoTable(TdsParserStateObject stateObj, Nullable`1& cipherTable);
    internal bool TryProcessMetaData(int cColumns, TdsParserStateObject stateObj, _SqlMetaDataSet& metaData, SqlCommandColumnEncryptionSetting columnEncryptionSetting);
    internal bool TryProcessTableName(int length, TdsParserStateObject stateObj, MultiPartTableName[]& multiPartTableNames);
    internal bool TryProcessColumnHeader(SqlMetaDataPriv col, TdsParserStateObject stateObj, int columnOrdinal, Boolean& isNull, UInt64& length);
    internal bool TryGetAltRowId(TdsParserStateObject stateObj, Int32& id);
    internal static bool ShouldHonorTceForRead(SqlCommandColumnEncryptionSetting columnEncryptionSetting, SqlInternalConnectionTds connection);
    internal static object GetNullSqlValue(SqlBuffer nullVal, SqlMetaDataPriv md, SqlCommandColumnEncryptionSetting columnEncryptionSetting, SqlInternalConnectionTds connection);
    internal bool TrySkipRow(_SqlMetaDataSet columns, TdsParserStateObject stateObj);
    internal bool TrySkipRow(_SqlMetaDataSet columns, int startCol, TdsParserStateObject stateObj);
    internal bool TrySkipValue(SqlMetaDataPriv md, int columnOrdinal, TdsParserStateObject stateObj);
    internal bool DeserializeUnencryptedValue(SqlBuffer value, Byte[] unencryptedBytes, SqlMetaDataPriv md, TdsParserStateObject stateObj, byte normalizationVersion);
    internal bool TryReadSqlValue(SqlBuffer value, SqlMetaDataPriv md, int length, TdsParserStateObject stateObj, SqlCommandColumnEncryptionSetting columnEncryptionOverride, string columnName);
    internal bool TryReadSqlValueInternal(SqlBuffer value, byte tdsType, int length, TdsParserStateObject stateObj);
    internal bool TryReadSqlVariant(SqlBuffer value, int lenTotal, TdsParserStateObject stateObj);
    internal Task WriteSqlVariantValue(object value, int length, int offset, TdsParserStateObject stateObj, bool canAccumulate);
    internal Task WriteSqlVariantDataRowValue(object value, TdsParserStateObject stateObj, bool canAccumulate);
    internal void WriteSqlVariantHeader(int length, byte tdstype, byte propbytes, TdsParserStateObject stateObj);
    internal void WriteSqlVariantDateTime2(DateTime value, TdsParserStateObject stateObj);
    internal void WriteSqlVariantDate(DateTime value, TdsParserStateObject stateObj);
    internal static SqlDecimal AdjustSqlDecimalScale(SqlDecimal d, int newScale);
    internal static decimal AdjustDecimalScale(decimal value, int newScale);
    internal Byte[] SerializeSqlDecimal(SqlDecimal d, TdsParserStateObject stateObj);
    internal void WriteSqlDecimal(SqlDecimal d, TdsParserStateObject stateObj);
    internal Byte[] SerializeCharArray(Char[] carr, int length, int offset);
    internal Task WriteCharArray(Char[] carr, int length, int offset, TdsParserStateObject stateObj, bool canAccumulate);
    internal Byte[] SerializeString(string s, int length, int offset);
    internal Task WriteString(string s, int length, int offset, TdsParserStateObject stateObj, bool canAccumulate);
    internal int GetEncodingCharLength(string value, int numChars, int charOffset, Encoding encoding);
    internal bool TryGetDataLength(SqlMetaDataPriv colmeta, TdsParserStateObject stateObj, UInt64& length);
    internal bool TryGetTokenLength(byte token, TdsParserStateObject stateObj, Int32& tokenLength);
    internal int WriteSessionRecoveryFeatureRequest(SessionData reconnectData, bool write);
    internal int WriteFedAuthFeatureRequest(FederatedAuthenticationFeatureExtensionData fedAuthFeatureData, bool write);
    internal int WriteTceFeatureRequest(bool write);
    internal int WriteGlobalTransactionsFeatureRequest(bool write);
    internal int WriteAzureSQLSupportFeatureRequest(bool write);
    internal void TdsLogin(SqlLogin rec, FeatureExtension requestedFeatures, SessionData recoverySessionData, Nullable`1<FederatedAuthenticationFeatureExtensionData> fedAuthFeatureExtensionData);
    internal void SendFedAuthToken(SqlFedAuthToken fedAuthToken);
    internal Byte[] GetDTCAddress(int timeout, TdsParserStateObject stateObj);
    internal void PropagateDistributedTransaction(Byte[] buffer, int timeout, TdsParserStateObject stateObj);
    internal SqlDataReader TdsExecuteTransactionManagerRequest(Byte[] buffer, TransactionManagerRequestType request, string transactionName, TransactionManagerIsolationLevel isoLevel, int timeout, SqlInternalTransaction transaction, TdsParserStateObject stateObj, bool isDelegateControlRequest);
    internal void FailureCleanup(TdsParserStateObject stateObj, Exception e);
    internal Task TdsExecuteSQLBatch(string text, int timeout, SqlNotificationRequest notificationRequest, TdsParserStateObject stateObj, bool sync, bool callerHasConnectionLock, Byte[] enclavePackage);
    internal Task TdsExecuteRPC(SqlCommand cmd, _SqlRPC[] rpcArray, int timeout, bool inSchema, SqlNotificationRequest notificationRequest, TdsParserStateObject stateObj, bool isCommandProc, bool sync, TaskCompletionSource`1<object> completion, int startRpc, int startParam);
    internal Task WriteBulkCopyDone(TdsParserStateObject stateObj);
    internal void LoadColumnEncryptionKeys(_SqlMetaDataSet metadataCollection, string serverName);
    internal void WriteEncryptionEntries(SqlTceCipherInfoTable& cekTable, TdsParserStateObject stateObj);
    internal void WriteCekTable(_SqlMetaDataSet metadataCollection, TdsParserStateObject stateObj);
    internal void WriteTceUserTypeAndTypeInfo(SqlMetaDataPriv mdPriv, TdsParserStateObject stateObj);
    internal void WriteCryptoMetadata(_SqlMetaData md, TdsParserStateObject stateObj);
    internal void WriteBulkCopyMetaData(_SqlMetaDataSet metadataCollection, int count, TdsParserStateObject stateObj);
    internal bool ShouldEncryptValuesForBulkCopy();
    internal object EncryptColumnValue(object value, SqlMetaDataPriv metadata, string column, TdsParserStateObject stateObj, bool isDataFeed, bool isSqlType);
    internal Task WriteBulkCopyValue(object value, SqlMetaDataPriv metadata, TdsParserStateObject stateObj, bool isSqlType, bool isDataFeed, bool isNull);
    internal void WriteParameterVarLen(MetaType type, int size, bool isNull, TdsParserStateObject stateObj, bool unknownLength);
    internal int ReadPlpUnicodeChars(Char[]& buff, int offst, int len, TdsParserStateObject stateObj);
    internal bool TryReadPlpUnicodeChars(Char[]& buff, int offst, int len, TdsParserStateObject stateObj, Int32& totalCharsRead);
    internal int ReadPlpAnsiChars(Char[]& buff, int offst, int len, SqlMetaDataPriv metadata, TdsParserStateObject stateObj);
    internal ulong SkipPlpValue(ulong cb, TdsParserStateObject stateObj);
    internal bool TrySkipPlpValue(ulong cb, TdsParserStateObject stateObj, UInt64& totalBytesSkipped);
    internal ulong PlpBytesLeft(TdsParserStateObject stateObj);
    internal bool TryPlpBytesLeft(TdsParserStateObject stateObj, UInt64& left);
    internal ulong PlpBytesTotalLength(TdsParserStateObject stateObj);
    internal string TraceString();
}
internal class System.Data.SqlClient.TdsParserSessionPool : object {
    internal int ObjectID { get; }
    internal int ActiveSessionsCount { get; }
    internal TdsParserSessionPool(TdsParser parser);
    internal int get_ObjectID();
    internal void Deactivate();
    internal void BestEffortCleanup();
    internal void Dispose();
    internal TdsParserStateObject GetSession(object owner);
    internal void PutSession(TdsParserStateObject session);
    internal string TraceString();
    internal int get_ActiveSessionsCount();
}
internal enum System.Data.SqlClient.TdsParserState : Enum {
    public int value__;
    public static TdsParserState Closed;
    public static TdsParserState OpenNotLoggedIn;
    public static TdsParserState OpenLoggedIn;
    public static TdsParserState Broken;
}
internal class System.Data.SqlClient.TdsParserStateObject : object {
    internal int _objectID;
    internal SharedState _readerState;
    internal int _inputHeaderLen;
    internal int _outputHeaderLen;
    internal Byte[] _outBuff;
    internal int _outBytesUsed;
    internal int _inBytesUsed;
    internal int _inBytesRead;
    internal int _inBytesPacket;
    internal byte _outputMessageType;
    internal byte _messageStatus;
    internal byte _outputPacketNumber;
    internal bool _pendingData;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _fResetEventOwned;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _fResetConnectionSent;
    internal bool _errorTokenReceived;
    internal bool _bulkCopyOpperationInProgress;
    internal bool _bulkCopyWriteTimeout;
    internal SNIPacket _sniAsyncAttnPacket;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _attentionSent;
    internal bool _attentionReceived;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _attentionSending;
    internal bool _internalTimeout;
    internal bool _hasOpenResult;
    internal SqlInternalTransaction _executedUnderTransaction;
    internal ulong _longlen;
    internal ulong _longlenleft;
    internal Int32[] _decimalBits;
    internal Byte[] _bTmp;
    internal int _bTmpRead;
    internal Decoder _plpdecoder;
    internal bool _accumulateInfoEvents;
    internal List`1<SqlError> _pendingInfoEvents;
    internal Byte[] _bLongBytes;
    internal Byte[] _bIntBytes;
    internal Byte[] _bShortBytes;
    internal Byte[] _bDecimalBytes;
    internal int _partialHeaderBytesRead;
    internal _SqlMetaDataSet _cleanupMetaData;
    internal _SqlMetaDataSetCollection _cleanupAltMetaDataSetArray;
    internal int _tracePasswordOffset;
    internal int _tracePasswordLength;
    internal int _traceChangePasswordOffset;
    internal int _traceChangePasswordLength;
    internal bool _receivedColMetaData;
    internal TaskCompletionSource`1<object> _networkPacketTaskSource;
    internal bool _syncOverAsync;
    internal ExecutionContext _executionContext;
    internal bool _asyncReadWithoutSnapshot;
    internal SqlErrorCollection _errors;
    internal SqlErrorCollection _warnings;
    internal object _errorAndWarningsLock;
    internal SqlErrorCollection _preAttentionErrors;
    internal SqlErrorCollection _preAttentionWarnings;
    internal int ObjectID { get; }
    internal bool BcpLock { get; internal set; }
    internal SNIHandle Handle { get; }
    internal bool HasOpenResult { get; }
    internal bool IsOrphaned { get; }
    unknown object Owner {internal set; }
    internal bool HasOwner { get; }
    internal TdsParser Parser { get; }
    internal SniContext SniContext { get; internal set; }
    internal UInt32 Status { get; }
    internal bool TimeoutHasExpired { get; }
    internal long TimeoutTime { get; internal set; }
    internal bool HasErrorOrWarning { get; }
    internal int ErrorCount { get; }
    internal int WarningCount { get; }
    internal int PreAttentionErrorCount { get; }
    internal int PreAttentionWarningCount { get; }
    internal TdsParserStateObject(TdsParser parser);
    internal TdsParserStateObject(TdsParser parser, SNIHandle physicalConnection, bool async);
    internal int get_ObjectID();
    internal bool get_BcpLock();
    internal void set_BcpLock(bool value);
    internal SNIHandle get_Handle();
    internal bool get_HasOpenResult();
    internal bool get_IsOrphaned();
    internal void set_Owner(object value);
    internal bool get_HasOwner();
    internal TdsParser get_Parser();
    internal SniContext get_SniContext();
    internal void set_SniContext(SniContext value);
    internal UInt32 get_Status();
    internal bool get_TimeoutHasExpired();
    internal long get_TimeoutTime();
    internal void set_TimeoutTime(long value);
    internal int GetTimeoutRemaining();
    internal bool TryStartNewRow(bool isNullCompressed, int nullBitmapColumnsCount);
    internal bool IsRowTokenReady();
    internal bool IsNullCompressionBitSet(int columnOrdinal);
    internal void Activate(object owner);
    internal void Cancel(int objectID);
    internal void CancelRequest();
    public void CheckSetResetConnectionState(UInt32 error, CallbackType callbackType);
    internal void CloseSession();
    internal void CreatePhysicalSNIHandle(string serverName, bool ignoreSniOpenTimeout, long timerExpire, Byte[]& instanceName, Byte[] spnBuffer, bool flushCache, bool async, bool fParallel, TransparentNetworkResolutionState transparentNetworkResolutionState, int totalTimeout);
    internal bool Deactivate();
    internal void RemoveOwner();
    internal void DecrementOpenResultCount();
    [ReliabilityContractAttribute("3", "2")]
internal int DecrementPendingCallbacks(bool release);
    internal void Dispose();
    internal int IncrementAndObtainOpenResultCount(SqlInternalTransaction transaction);
    [ReliabilityContractAttribute("3", "2")]
internal int IncrementPendingCallbacks();
    internal void SetTimeoutSeconds(int timeout);
    internal void SetTimeoutMilliseconds(long timeout);
    internal void StartSession(int objectID);
    internal void ThrowExceptionAndWarning(bool callerHasConnectionLock, bool asyncClose);
    internal Task ExecuteFlush();
    internal bool TryProcessHeader();
    internal bool TryPrepareBuffer();
    internal void ResetBuffer();
    internal bool SetPacketSize(int size);
    internal bool TryPeekByte(Byte& value);
    public bool TryReadByteArray(Byte[] buff, int offset, int len);
    public bool TryReadByteArray(Byte[] buff, int offset, int len, Int32& totalRead);
    internal bool TryReadByte(Byte& value);
    internal bool TryReadChar(Char& value);
    internal bool TryReadInt16(Int16& value);
    internal bool TryReadInt32(Int32& value);
    internal bool TryReadInt64(Int64& value);
    internal bool TryReadUInt16(UInt16& value);
    internal bool TryReadUInt32(UInt32& value);
    internal bool TryReadSingle(Single& value);
    internal bool TryReadDouble(Double& value);
    internal bool TryReadString(int length, String& value);
    internal bool TryReadStringWithEncoding(int length, Encoding encoding, bool isPlp, String& value);
    internal ulong ReadPlpLength(bool returnPlpNullIfNull);
    internal bool TryReadPlpLength(bool returnPlpNullIfNull, UInt64& lengthLeft);
    internal int ReadPlpBytesChunk(Byte[] buff, int offset, int len);
    internal bool TryReadPlpBytes(Byte[]& buff, int offst, int len, Int32& totalBytesRead);
    internal bool TrySkipLongBytes(long num);
    internal bool TrySkipBytes(int num);
    internal void SetSnapshot();
    internal void ResetSnapshot();
    internal bool TryReadNetworkPacket();
    internal void PrepareReplaySnapshot();
    internal void ReadSniSyncOverAsync();
    internal void OnConnectionClosed();
    internal void ReadSni(TaskCompletionSource`1<object> completion);
    internal bool IsConnectionAlive(bool throwOnException);
    internal bool ValidateSNIConnection();
    public void ProcessSniPacket(IntPtr packet, UInt32 error);
    public void ReadAsyncCallback(IntPtr key, IntPtr packet, UInt32 error);
    public void WriteAsyncCallback(IntPtr key, IntPtr packet, UInt32 sniError);
    internal void WriteSecureString(SecureString secureString);
    internal void ResetSecurePasswordsInfomation();
    internal Task WaitForAccumulatedWrites();
    internal void WriteByte(byte b);
    internal Task WriteByteArray(Byte[] b, int len, int offsetBuffer, bool canAccumulate, TaskCompletionSource`1<object> completion);
    internal Task WritePacket(byte flushMode, bool canAccumulate);
    internal void SendAttention(bool mustTakeWriteLock);
    internal SNIPacket GetResetWritePacket();
    internal void ClearAllWritePackets();
    internal bool get_HasErrorOrWarning();
    internal void AddError(SqlError error);
    internal int get_ErrorCount();
    internal void AddWarning(SqlError error);
    internal int get_WarningCount();
    internal int get_PreAttentionErrorCount();
    internal int get_PreAttentionWarningCount();
    internal SqlErrorCollection GetFullErrorAndWarningCollection(Boolean& broken);
    internal void StoreErrorAndWarningForAttention();
    internal void RestoreErrorAndWarningAfterAttention();
    internal void CheckThrowSNIException();
    [ConditionalAttribute("DEBUG")]
internal void AssertStateIsClean();
    internal void CloneCleanupAltMetaDataSetArray();
}
internal class System.Data.SqlClient.TdsParserStaticMethods : object {
    internal static void AliasRegistryLookup(String& host, String& protocol);
    internal static Byte[] EncryptPassword(string password);
    internal static int GetCurrentProcessIdForTdsLoginOnly();
    internal static int GetCurrentThreadIdForTdsLoginOnly();
    internal static Byte[] GetNetworkPhysicalAddressForTdsLoginOnly();
    internal static int GetTimeoutMilliseconds(long timeoutTime);
    internal static long GetTimeoutSeconds(int timeout);
    internal static long GetTimeout(long timeoutMilliseconds);
    internal static bool TimeoutHasExpired(long timeoutTime);
    internal static int NullAwareStringLength(string str);
    internal static int GetRemainingTimeout(int timeout, long start);
}
internal class System.Data.SqlClient.TdsRecordBufferSetter : SmiRecordBuffer {
    internal bool CanGet { get; }
    internal bool CanSet { get; }
    internal TdsRecordBufferSetter(TdsParserStateObject stateObj, SmiMetaData md);
    internal virtual bool get_CanGet();
    internal virtual bool get_CanSet();
    public virtual void Close(SmiEventSink eventSink);
    public virtual void SetDBNull(SmiEventSink sink, int ordinal);
    public virtual void SetBoolean(SmiEventSink sink, int ordinal, bool value);
    public virtual void SetByte(SmiEventSink sink, int ordinal, byte value);
    public virtual int SetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetBytesLength(SmiEventSink sink, int ordinal, long length);
    public virtual int SetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetCharsLength(SmiEventSink sink, int ordinal, long length);
    public virtual void SetString(SmiEventSink sink, int ordinal, string value, int offset, int length);
    public virtual void SetInt16(SmiEventSink sink, int ordinal, short value);
    public virtual void SetInt32(SmiEventSink sink, int ordinal, int value);
    public virtual void SetInt64(SmiEventSink sink, int ordinal, long value);
    public virtual void SetSingle(SmiEventSink sink, int ordinal, float value);
    public virtual void SetDouble(SmiEventSink sink, int ordinal, double value);
    public virtual void SetSqlDecimal(SmiEventSink sink, int ordinal, SqlDecimal value);
    public virtual void SetDateTime(SmiEventSink sink, int ordinal, DateTime value);
    public virtual void SetGuid(SmiEventSink sink, int ordinal, Guid value);
    public virtual void SetTimeSpan(SmiEventSink sink, int ordinal, TimeSpan value);
    public virtual void SetDateTimeOffset(SmiEventSink sink, int ordinal, DateTimeOffset value);
    public virtual void SetVariantMetaData(SmiEventSink sink, int ordinal, SmiMetaData metaData);
    internal virtual void NewElement(SmiEventSink sink);
    internal virtual void EndElements(SmiEventSink sink);
    [ConditionalAttribute("DEBUG")]
internal void CheckSettingColumn(int ordinal);
}
internal class System.Data.SqlClient.TdsValueSetter : object {
    internal TdsValueSetter(TdsParserStateObject stateObj, SmiMetaData md);
    internal void SetDBNull();
    internal void SetBoolean(bool value);
    internal void SetByte(byte value);
    internal int SetBytes(long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    internal void SetBytesLength(long length);
    internal int SetChars(long fieldOffset, Char[] buffer, int bufferOffset, int length);
    internal void SetCharsLength(long length);
    internal void SetString(string value, int offset, int length);
    internal void SetInt16(short value);
    internal void SetInt32(int value);
    internal void SetInt64(long value);
    internal void SetSingle(float value);
    internal void SetDouble(double value);
    internal void SetSqlDecimal(SqlDecimal value);
    internal void SetDateTime(DateTime value);
    internal void SetGuid(Guid value);
    internal void SetTimeSpan(TimeSpan value);
    internal void SetDateTimeOffset(DateTimeOffset value);
    internal void SetVariantType(SmiMetaData value);
}
internal class System.Data.SqlClient.TextDataFeed : DataFeed {
    internal TextReader _source;
    internal TextDataFeed(TextReader source);
}
internal enum System.Data.SqlClient.TransactionState : Enum {
    public int value__;
    public static TransactionState Pending;
    public static TransactionState Active;
    public static TransactionState Aborted;
    public static TransactionState Committed;
    public static TransactionState Unknown;
}
internal enum System.Data.SqlClient.TransactionType : Enum {
    public int value__;
    public static TransactionType LocalFromTSQL;
    public static TransactionType LocalFromAPI;
    public static TransactionType Delegated;
    public static TransactionType Distributed;
    public static TransactionType Context;
}
internal enum System.Data.SqlClient.TransparentNetworkResolutionState : Enum {
    public int value__;
    public static TransparentNetworkResolutionState DisabledMode;
    public static TransparentNetworkResolutionState SequentialMode;
    public static TransparentNetworkResolutionState ParallelMode;
}
internal class System.Data.SqlClient.WritePacketCache : object {
    public SNIPacket Take(SNIHandle sniHandle);
    public void Add(SNIPacket packet);
    public void Clear();
    public sealed virtual void Dispose();
}
internal class System.Data.SqlClient.XmlDataFeed : DataFeed {
    internal XmlReader _source;
    internal XmlDataFeed(XmlReader source);
}
public enum System.Data.SqlDbType : Enum {
    public int value__;
    public static SqlDbType BigInt;
    public static SqlDbType Binary;
    public static SqlDbType Bit;
    public static SqlDbType Char;
    public static SqlDbType DateTime;
    public static SqlDbType Decimal;
    public static SqlDbType Float;
    public static SqlDbType Image;
    public static SqlDbType Int;
    public static SqlDbType Money;
    public static SqlDbType NChar;
    public static SqlDbType NText;
    public static SqlDbType NVarChar;
    public static SqlDbType Real;
    public static SqlDbType UniqueIdentifier;
    public static SqlDbType SmallDateTime;
    public static SqlDbType SmallInt;
    public static SqlDbType SmallMoney;
    public static SqlDbType Text;
    public static SqlDbType Timestamp;
    public static SqlDbType TinyInt;
    public static SqlDbType VarBinary;
    public static SqlDbType VarChar;
    public static SqlDbType Variant;
    public static SqlDbType Xml;
    public static SqlDbType Udt;
    public static SqlDbType Structured;
    public static SqlDbType Date;
    public static SqlDbType Time;
    public static SqlDbType DateTime2;
    public static SqlDbType DateTimeOffset;
}
[EventSourceAttribute]
internal class System.Data.SqlEventSource : EventSource {
    internal static string EventSourceName;
    internal static SqlEventSource Log;
    private static SqlEventSource();
    [EventAttribute("1")]
public void BeginExecute(int objectId, string dataSource, string database, string commandText);
    [EventAttribute("2")]
public void EndExecute(int objectId, int compositeState, int sqlExceptionNumber);
}
internal enum System.Data.SqlTypes.EComparison : Enum {
    public int value__;
    public static EComparison LT;
    public static EComparison LE;
    public static EComparison EQ;
    public static EComparison GE;
    public static EComparison GT;
    public static EComparison NE;
}
internal class System.Data.SqlTypes.FileFullEaInformation : SafeHandleZeroOrMinusOneIsInvalid {
    public int Length { get; }
    public FileFullEaInformation(Byte[] transactionContext);
    protected virtual bool ReleaseHandle();
    public int get_Length();
}
public interface System.Data.SqlTypes.INullable {
    public bool IsNull { get; }
    public abstract virtual bool get_IsNull();
}
internal class System.Data.SqlTypes.SecurityQualityOfService : SafeHandleZeroOrMinusOneIsInvalid {
    public SecurityQualityOfService(SecurityImpersonationLevel impersonationLevel, bool effectiveOnly, bool dynamicTrackingMode);
    protected virtual bool ReleaseHandle();
    internal void Initialize(SecurityImpersonationLevel impersonationLevel, bool effectiveOnly, bool dynamicTrackingMode);
}
public class System.Data.SqlTypes.SqlAlreadyFilledException : SqlTypeException {
    public SqlAlreadyFilledException(string message);
    public SqlAlreadyFilledException(string message, Exception e);
    private SqlAlreadyFilledException(SerializationInfo si, StreamingContext sc);
}
[XmlSchemaProviderAttribute("GetXsdType")]
[DefaultMemberAttribute("Item")]
public class System.Data.SqlTypes.SqlBinary : ValueType {
    private Byte[] m_value;
    public static SqlBinary Null;
    public bool IsNull { get; }
    public Byte[] Value { get; }
    public byte Item { get; }
    public int Length { get; }
    public SqlBinary(Byte[] value);
    internal SqlBinary(Byte[] value, bool ignored);
    private static SqlBinary();
    public sealed virtual bool get_IsNull();
    public Byte[] get_Value();
    public byte get_Item(int index);
    public int get_Length();
    public static SqlBinary op_Implicit(Byte[] x);
    public static Byte[] op_Explicit(SqlBinary x);
    public virtual string ToString();
    public static SqlBinary op_Addition(SqlBinary x, SqlBinary y);
    public static SqlBinary op_Explicit(SqlGuid x);
    public static SqlBoolean op_Equality(SqlBinary x, SqlBinary y);
    public static SqlBoolean op_Inequality(SqlBinary x, SqlBinary y);
    public static SqlBoolean op_LessThan(SqlBinary x, SqlBinary y);
    public static SqlBoolean op_GreaterThan(SqlBinary x, SqlBinary y);
    public static SqlBoolean op_LessThanOrEqual(SqlBinary x, SqlBinary y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlBinary x, SqlBinary y);
    public static SqlBinary Add(SqlBinary x, SqlBinary y);
    public static SqlBinary Concat(SqlBinary x, SqlBinary y);
    public static SqlBoolean Equals(SqlBinary x, SqlBinary y);
    public static SqlBoolean NotEquals(SqlBinary x, SqlBinary y);
    public static SqlBoolean LessThan(SqlBinary x, SqlBinary y);
    public static SqlBoolean GreaterThan(SqlBinary x, SqlBinary y);
    public static SqlBoolean LessThanOrEqual(SqlBinary x, SqlBinary y);
    public static SqlBoolean GreaterThanOrEqual(SqlBinary x, SqlBinary y);
    public SqlGuid ToSqlGuid();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlBinary value);
    public virtual bool Equals(object value);
    internal static int HashByteArray(Byte[] rgbValue, int length);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlBoolean : ValueType {
    private byte m_value;
    private static byte x_Null;
    private static byte x_False;
    private static byte x_True;
    public static SqlBoolean True;
    public static SqlBoolean False;
    public static SqlBoolean Null;
    public static SqlBoolean Zero;
    public static SqlBoolean One;
    public bool IsNull { get; }
    public bool Value { get; }
    public bool IsTrue { get; }
    public bool IsFalse { get; }
    public byte ByteValue { get; }
    public SqlBoolean(bool value);
    public SqlBoolean(int value);
    private static SqlBoolean();
    public sealed virtual bool get_IsNull();
    public bool get_Value();
    public bool get_IsTrue();
    public bool get_IsFalse();
    public static SqlBoolean op_Implicit(bool x);
    public static bool op_Explicit(SqlBoolean x);
    public static SqlBoolean op_LogicalNot(SqlBoolean x);
    public static bool op_True(SqlBoolean x);
    public static bool op_False(SqlBoolean x);
    public static SqlBoolean op_BitwiseAnd(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_BitwiseOr(SqlBoolean x, SqlBoolean y);
    public byte get_ByteValue();
    public virtual string ToString();
    public static SqlBoolean Parse(string s);
    public static SqlBoolean op_OnesComplement(SqlBoolean x);
    public static SqlBoolean op_ExclusiveOr(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_Explicit(SqlByte x);
    public static SqlBoolean op_Explicit(SqlInt16 x);
    public static SqlBoolean op_Explicit(SqlInt32 x);
    public static SqlBoolean op_Explicit(SqlInt64 x);
    public static SqlBoolean op_Explicit(SqlDouble x);
    public static SqlBoolean op_Explicit(SqlSingle x);
    public static SqlBoolean op_Explicit(SqlMoney x);
    public static SqlBoolean op_Explicit(SqlDecimal x);
    public static SqlBoolean op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_Inequality(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_LessThan(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_GreaterThan(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_LessThanOrEqual(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean OnesComplement(SqlBoolean x);
    public static SqlBoolean And(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean Or(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean Xor(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean Equals(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean NotEquals(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean GreaterThan(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean LessThan(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean GreaterThanOrEquals(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean LessThanOrEquals(SqlBoolean x, SqlBoolean y);
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlBoolean value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlByte : ValueType {
    private bool m_fNotNull;
    private byte m_value;
    private static int x_iBitNotByteMax;
    public static SqlByte Null;
    public static SqlByte Zero;
    public static SqlByte MinValue;
    public static SqlByte MaxValue;
    public bool IsNull { get; }
    public byte Value { get; }
    public SqlByte(byte value);
    private static SqlByte();
    public sealed virtual bool get_IsNull();
    public byte get_Value();
    public static SqlByte op_Implicit(byte x);
    public static byte op_Explicit(SqlByte x);
    public virtual string ToString();
    public static SqlByte Parse(string s);
    public static SqlByte op_OnesComplement(SqlByte x);
    public static SqlByte op_Addition(SqlByte x, SqlByte y);
    public static SqlByte op_Subtraction(SqlByte x, SqlByte y);
    public static SqlByte op_Multiply(SqlByte x, SqlByte y);
    public static SqlByte op_Division(SqlByte x, SqlByte y);
    public static SqlByte op_Modulus(SqlByte x, SqlByte y);
    public static SqlByte op_BitwiseAnd(SqlByte x, SqlByte y);
    public static SqlByte op_BitwiseOr(SqlByte x, SqlByte y);
    public static SqlByte op_ExclusiveOr(SqlByte x, SqlByte y);
    public static SqlByte op_Explicit(SqlBoolean x);
    public static SqlByte op_Explicit(SqlMoney x);
    public static SqlByte op_Explicit(SqlInt16 x);
    public static SqlByte op_Explicit(SqlInt32 x);
    public static SqlByte op_Explicit(SqlInt64 x);
    public static SqlByte op_Explicit(SqlSingle x);
    public static SqlByte op_Explicit(SqlDouble x);
    public static SqlByte op_Explicit(SqlDecimal x);
    public static SqlByte op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlByte x, SqlByte y);
    public static SqlBoolean op_Inequality(SqlByte x, SqlByte y);
    public static SqlBoolean op_LessThan(SqlByte x, SqlByte y);
    public static SqlBoolean op_GreaterThan(SqlByte x, SqlByte y);
    public static SqlBoolean op_LessThanOrEqual(SqlByte x, SqlByte y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlByte x, SqlByte y);
    public static SqlByte OnesComplement(SqlByte x);
    public static SqlByte Add(SqlByte x, SqlByte y);
    public static SqlByte Subtract(SqlByte x, SqlByte y);
    public static SqlByte Multiply(SqlByte x, SqlByte y);
    public static SqlByte Divide(SqlByte x, SqlByte y);
    public static SqlByte Mod(SqlByte x, SqlByte y);
    public static SqlByte Modulus(SqlByte x, SqlByte y);
    public static SqlByte BitwiseAnd(SqlByte x, SqlByte y);
    public static SqlByte BitwiseOr(SqlByte x, SqlByte y);
    public static SqlByte Xor(SqlByte x, SqlByte y);
    public static SqlBoolean Equals(SqlByte x, SqlByte y);
    public static SqlBoolean NotEquals(SqlByte x, SqlByte y);
    public static SqlBoolean LessThan(SqlByte x, SqlByte y);
    public static SqlBoolean GreaterThan(SqlByte x, SqlByte y);
    public static SqlBoolean LessThanOrEqual(SqlByte x, SqlByte y);
    public static SqlBoolean GreaterThanOrEqual(SqlByte x, SqlByte y);
    public SqlBoolean ToSqlBoolean();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlByte value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
[DefaultMemberAttribute("Item")]
public class System.Data.SqlTypes.SqlBytes : object {
    internal Byte[] m_rgbBuf;
    internal Stream m_stream;
    public bool IsNull { get; }
    public Byte[] Buffer { get; }
    public long Length { get; }
    public long MaxLength { get; }
    public Byte[] Value { get; }
    public byte Item { get; public set; }
    public StorageState Storage { get; }
    public Stream Stream { get; public set; }
    public static SqlBytes Null { get; }
    public SqlBytes(Byte[] buffer);
    public SqlBytes(SqlBinary value);
    public SqlBytes(Stream s);
    public sealed virtual bool get_IsNull();
    public Byte[] get_Buffer();
    public long get_Length();
    public long get_MaxLength();
    public Byte[] get_Value();
    public byte get_Item(long offset);
    public void set_Item(long offset, byte value);
    public StorageState get_Storage();
    public Stream get_Stream();
    public void set_Stream(Stream value);
    public void SetNull();
    public void SetLength(long value);
    public long Read(long offset, Byte[] buffer, int offsetInBuffer, int count);
    public void Write(long offset, Byte[] buffer, int offsetInBuffer, int count);
    public SqlBinary ToSqlBinary();
    public static SqlBinary op_Explicit(SqlBytes value);
    public static SqlBytes op_Explicit(SqlBinary value);
    internal bool FStream();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader r);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public static SqlBytes get_Null();
}
internal enum System.Data.SqlTypes.SqlBytesCharsState : Enum {
    public int value__;
    public static SqlBytesCharsState Null;
    public static SqlBytesCharsState Buffer;
    public static SqlBytesCharsState Stream;
}
[DefaultMemberAttribute("Item")]
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlChars : object {
    internal Char[] m_rgchBuf;
    internal SqlStreamChars m_stream;
    public bool IsNull { get; }
    public Char[] Buffer { get; }
    public long Length { get; }
    public long MaxLength { get; }
    public Char[] Value { get; }
    public char Item { get; public set; }
    internal SqlStreamChars Stream { get; internal set; }
    public StorageState Storage { get; }
    public static SqlChars Null { get; }
    public SqlChars(Char[] buffer);
    public SqlChars(SqlString value);
    internal SqlChars(SqlStreamChars s);
    public sealed virtual bool get_IsNull();
    public Char[] get_Buffer();
    public long get_Length();
    public long get_MaxLength();
    public Char[] get_Value();
    public char get_Item(long offset);
    public void set_Item(long offset, char value);
    internal SqlStreamChars get_Stream();
    internal void set_Stream(SqlStreamChars value);
    public StorageState get_Storage();
    public void SetNull();
    public void SetLength(long value);
    public long Read(long offset, Char[] buffer, int offsetInBuffer, int count);
    public void Write(long offset, Char[] buffer, int offsetInBuffer, int count);
    public SqlString ToSqlString();
    public static SqlString op_Explicit(SqlChars value);
    public static SqlChars op_Explicit(SqlString value);
    internal bool FStream();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader r);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public static SqlChars get_Null();
}
[FlagsAttribute]
public enum System.Data.SqlTypes.SqlCompareOptions : Enum {
    public int value__;
    public static SqlCompareOptions None;
    public static SqlCompareOptions IgnoreCase;
    public static SqlCompareOptions IgnoreNonSpace;
    public static SqlCompareOptions IgnoreKanaType;
    public static SqlCompareOptions IgnoreWidth;
    public static SqlCompareOptions BinarySort;
    public static SqlCompareOptions BinarySort2;
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlDateTime : ValueType {
    private bool m_fNotNull;
    private int m_day;
    private int m_time;
    private static double SQLTicksPerMillisecond;
    public static int SQLTicksPerSecond;
    public static int SQLTicksPerMinute;
    public static int SQLTicksPerHour;
    private static long TicksPerSecond;
    private static int MinYear;
    private static int MaxYear;
    private static int MinDay;
    private static int MaxDay;
    private static int MinTime;
    private static int DayBase;
    private static string x_ISO8601_DateTimeFormat;
    private static DateTimeStyles x_DateTimeStyle;
    public static SqlDateTime MinValue;
    public static SqlDateTime MaxValue;
    public static SqlDateTime Null;
    public bool IsNull { get; }
    public DateTime Value { get; }
    public int DayTicks { get; }
    public int TimeTicks { get; }
    public SqlDateTime(DateTime value);
    public SqlDateTime(int year, int month, int day);
    public SqlDateTime(int year, int month, int day, int hour, int minute, int second);
    public SqlDateTime(int year, int month, int day, int hour, int minute, int second, double millisecond);
    public SqlDateTime(int year, int month, int day, int hour, int minute, int second, int bilisecond);
    public SqlDateTime(int dayTicks, int timeTicks);
    internal SqlDateTime(double dblVal);
    private static SqlDateTime();
    public sealed virtual bool get_IsNull();
    internal static DateTime ToDateTime(int daypart, int timepart);
    public DateTime get_Value();
    public int get_DayTicks();
    public int get_TimeTicks();
    public static SqlDateTime op_Implicit(DateTime value);
    public static DateTime op_Explicit(SqlDateTime x);
    public virtual string ToString();
    public static SqlDateTime Parse(string s);
    public static SqlDateTime op_Addition(SqlDateTime x, TimeSpan t);
    public static SqlDateTime op_Subtraction(SqlDateTime x, TimeSpan t);
    public static SqlDateTime Add(SqlDateTime x, TimeSpan t);
    public static SqlDateTime Subtract(SqlDateTime x, TimeSpan t);
    public static SqlDateTime op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean op_Inequality(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean op_LessThan(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean op_GreaterThan(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean op_LessThanOrEqual(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean Equals(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean NotEquals(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean LessThan(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean GreaterThan(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean LessThanOrEqual(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean GreaterThanOrEqual(SqlDateTime x, SqlDateTime y);
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlDateTime value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
internal class System.Data.SqlTypes.SQLDebug : object {
    [ConditionalAttribute("DEBUG")]
internal static void Check(bool condition);
    [ConditionalAttribute("DEBUG")]
internal static void Check(bool condition, string conditionString, string message);
    [ConditionalAttribute("DEBUG")]
internal static void Check(bool condition, string conditionString);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlDecimal : ValueType {
    internal byte m_bStatus;
    internal byte m_bLen;
    internal byte m_bPrec;
    internal byte m_bScale;
    internal UInt32 m_data1;
    internal UInt32 m_data2;
    internal UInt32 m_data3;
    internal UInt32 m_data4;
    private static byte NUMERIC_MAX_PRECISION;
    public static byte MaxPrecision;
    public static byte MaxScale;
    private static byte x_bNullMask;
    private static byte x_bIsNull;
    private static byte x_bNotNull;
    private static byte x_bReverseNullMask;
    private static byte x_bSignMask;
    private static byte x_bPositive;
    private static byte x_bNegative;
    private static byte x_bReverseSignMask;
    private static UInt32 x_uiZero;
    private static int x_cNumeMax;
    private static long x_lInt32Base;
    private static ulong x_ulInt32Base;
    private static ulong x_ulInt32BaseForMod;
    internal static ulong x_llMax;
    private static UInt32 x_ulBase10;
    private static double DUINT_BASE;
    private static double DUINT_BASE2;
    private static double DUINT_BASE3;
    private static double DMAX_NUME;
    private static UInt32 DBL_DIG;
    private static byte x_cNumeDivScaleMin;
    private static int HelperTableStartIndexLo;
    private static int HelperTableStartIndexMid;
    private static int HelperTableStartIndexHi;
    private static int HelperTableStartIndexHiHi;
    private static UInt32 x_ulT1;
    private static UInt32 x_ulT2;
    private static UInt32 x_ulT3;
    private static UInt32 x_ulT4;
    private static UInt32 x_ulT5;
    private static UInt32 x_ulT6;
    private static UInt32 x_ulT7;
    private static UInt32 x_ulT8;
    private static UInt32 x_ulT9;
    private static ulong x_dwlT10;
    private static ulong x_dwlT11;
    private static ulong x_dwlT12;
    private static ulong x_dwlT13;
    private static ulong x_dwlT14;
    private static ulong x_dwlT15;
    private static ulong x_dwlT16;
    private static ulong x_dwlT17;
    private static ulong x_dwlT18;
    private static ulong x_dwlT19;
    public static SqlDecimal Null;
    public static SqlDecimal MinValue;
    public static SqlDecimal MaxValue;
    public bool IsNull { get; }
    public decimal Value { get; }
    public bool IsPositive { get; }
    public byte Precision { get; }
    public byte Scale { get; }
    public Int32[] Data { get; }
    public Byte[] BinData { get; }
    public SqlDecimal(decimal value);
    public SqlDecimal(int value);
    public SqlDecimal(long value);
    public SqlDecimal(byte bPrecision, byte bScale, bool fPositive, Int32[] bits);
    public SqlDecimal(byte bPrecision, byte bScale, bool fPositive, int data1, int data2, int data3, int data4);
    public SqlDecimal(double dVal);
    private static SqlDecimal();
    public sealed virtual bool get_IsNull();
    public decimal get_Value();
    public bool get_IsPositive();
    public byte get_Precision();
    public byte get_Scale();
    public Int32[] get_Data();
    public Byte[] get_BinData();
    public virtual string ToString();
    public static SqlDecimal Parse(string s);
    public double ToDouble();
    public static SqlDecimal op_Implicit(decimal x);
    public static SqlDecimal op_Explicit(double x);
    public static SqlDecimal op_Implicit(long x);
    public static decimal op_Explicit(SqlDecimal x);
    public static SqlDecimal op_UnaryNegation(SqlDecimal x);
    public static SqlDecimal op_Addition(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal op_Subtraction(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal op_Multiply(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal op_Division(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal op_Explicit(SqlBoolean x);
    public static SqlDecimal op_Implicit(SqlByte x);
    public static SqlDecimal op_Implicit(SqlInt16 x);
    public static SqlDecimal op_Implicit(SqlInt32 x);
    public static SqlDecimal op_Implicit(SqlInt64 x);
    public static SqlDecimal op_Implicit(SqlMoney x);
    public static SqlDecimal op_Explicit(SqlSingle x);
    public static SqlDecimal op_Explicit(SqlDouble x);
    public static SqlDecimal op_Explicit(SqlString x);
    internal void AdjustScale(int digits, bool fRound);
    public static SqlDecimal AdjustScale(SqlDecimal n, int digits, bool fRound);
    public static SqlDecimal ConvertToPrecScale(SqlDecimal n, int precision, int scale);
    internal static ulong DWL(UInt32 lo, UInt32 hi);
    public static SqlBoolean op_Equality(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean op_Inequality(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean op_LessThan(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean op_GreaterThan(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean op_LessThanOrEqual(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal Add(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal Subtract(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal Multiply(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal Divide(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean Equals(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean NotEquals(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean LessThan(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean GreaterThan(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean LessThanOrEqual(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean GreaterThanOrEqual(SqlDecimal x, SqlDecimal y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public static SqlDecimal Abs(SqlDecimal n);
    public static SqlDecimal Ceiling(SqlDecimal n);
    public static SqlDecimal Floor(SqlDecimal n);
    public static SqlInt32 Sign(SqlDecimal n);
    public static SqlDecimal Round(SqlDecimal n, int position);
    public static SqlDecimal Truncate(SqlDecimal n, int position);
    public static SqlDecimal Power(SqlDecimal n, double exp);
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlDecimal value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlDouble : ValueType {
    private bool m_fNotNull;
    private double m_value;
    public static SqlDouble Null;
    public static SqlDouble Zero;
    public static SqlDouble MinValue;
    public static SqlDouble MaxValue;
    public bool IsNull { get; }
    public double Value { get; }
    public SqlDouble(double value);
    private static SqlDouble();
    public sealed virtual bool get_IsNull();
    public double get_Value();
    public static SqlDouble op_Implicit(double x);
    public static double op_Explicit(SqlDouble x);
    public virtual string ToString();
    public static SqlDouble Parse(string s);
    public static SqlDouble op_UnaryNegation(SqlDouble x);
    public static SqlDouble op_Addition(SqlDouble x, SqlDouble y);
    public static SqlDouble op_Subtraction(SqlDouble x, SqlDouble y);
    public static SqlDouble op_Multiply(SqlDouble x, SqlDouble y);
    public static SqlDouble op_Division(SqlDouble x, SqlDouble y);
    public static SqlDouble op_Explicit(SqlBoolean x);
    public static SqlDouble op_Implicit(SqlByte x);
    public static SqlDouble op_Implicit(SqlInt16 x);
    public static SqlDouble op_Implicit(SqlInt32 x);
    public static SqlDouble op_Implicit(SqlInt64 x);
    public static SqlDouble op_Implicit(SqlSingle x);
    public static SqlDouble op_Implicit(SqlMoney x);
    public static SqlDouble op_Implicit(SqlDecimal x);
    public static SqlDouble op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlDouble x, SqlDouble y);
    public static SqlBoolean op_Inequality(SqlDouble x, SqlDouble y);
    public static SqlBoolean op_LessThan(SqlDouble x, SqlDouble y);
    public static SqlBoolean op_GreaterThan(SqlDouble x, SqlDouble y);
    public static SqlBoolean op_LessThanOrEqual(SqlDouble x, SqlDouble y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlDouble x, SqlDouble y);
    public static SqlDouble Add(SqlDouble x, SqlDouble y);
    public static SqlDouble Subtract(SqlDouble x, SqlDouble y);
    public static SqlDouble Multiply(SqlDouble x, SqlDouble y);
    public static SqlDouble Divide(SqlDouble x, SqlDouble y);
    public static SqlBoolean Equals(SqlDouble x, SqlDouble y);
    public static SqlBoolean NotEquals(SqlDouble x, SqlDouble y);
    public static SqlBoolean LessThan(SqlDouble x, SqlDouble y);
    public static SqlBoolean GreaterThan(SqlDouble x, SqlDouble y);
    public static SqlBoolean LessThanOrEqual(SqlDouble x, SqlDouble y);
    public static SqlBoolean GreaterThanOrEqual(SqlDouble x, SqlDouble y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlDouble value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
public class System.Data.SqlTypes.SqlFileStream : Stream {
    internal int ObjectID;
    internal static int DefaultBufferSize;
    public string Name { get; private set; }
    public Byte[] TransactionContext { get; private set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    [ComVisibleAttribute("False")]
public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    [ComVisibleAttribute("False")]
public int ReadTimeout { get; public set; }
    [ComVisibleAttribute("False")]
public int WriteTimeout { get; public set; }
    public SqlFileStream(string path, Byte[] transactionContext, FileAccess access);
    public SqlFileStream(string path, Byte[] transactionContext, FileAccess access, FileOptions options, long allocationSize);
    private static SqlFileStream();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    public string get_Name();
    private void set_Name(string value);
    public Byte[] get_TransactionContext();
    private void set_TransactionContext(Byte[] value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual void Flush();
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlGuid : ValueType {
    private static int SizeOfGuid;
    private Byte[] m_value;
    public static SqlGuid Null;
    public bool IsNull { get; }
    public Guid Value { get; }
    public SqlGuid(Byte[] value);
    internal SqlGuid(Byte[] value, bool ignored);
    public SqlGuid(string s);
    public SqlGuid(Guid g);
    public SqlGuid(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k);
    private static SqlGuid();
    public sealed virtual bool get_IsNull();
    public Guid get_Value();
    public static SqlGuid op_Implicit(Guid x);
    public static Guid op_Explicit(SqlGuid x);
    public Byte[] ToByteArray();
    public virtual string ToString();
    public static SqlGuid Parse(string s);
    public static SqlGuid op_Explicit(SqlString x);
    public static SqlGuid op_Explicit(SqlBinary x);
    public static SqlBoolean op_Equality(SqlGuid x, SqlGuid y);
    public static SqlBoolean op_Inequality(SqlGuid x, SqlGuid y);
    public static SqlBoolean op_LessThan(SqlGuid x, SqlGuid y);
    public static SqlBoolean op_GreaterThan(SqlGuid x, SqlGuid y);
    public static SqlBoolean op_LessThanOrEqual(SqlGuid x, SqlGuid y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlGuid x, SqlGuid y);
    public static SqlBoolean Equals(SqlGuid x, SqlGuid y);
    public static SqlBoolean NotEquals(SqlGuid x, SqlGuid y);
    public static SqlBoolean LessThan(SqlGuid x, SqlGuid y);
    public static SqlBoolean GreaterThan(SqlGuid x, SqlGuid y);
    public static SqlBoolean LessThanOrEqual(SqlGuid x, SqlGuid y);
    public static SqlBoolean GreaterThanOrEqual(SqlGuid x, SqlGuid y);
    public SqlString ToSqlString();
    public SqlBinary ToSqlBinary();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlGuid value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlInt16 : ValueType {
    private bool m_fNotNull;
    private short m_value;
    private static int O_MASKI2;
    public static SqlInt16 Null;
    public static SqlInt16 Zero;
    public static SqlInt16 MinValue;
    public static SqlInt16 MaxValue;
    public bool IsNull { get; }
    public short Value { get; }
    public SqlInt16(short value);
    private static SqlInt16();
    public sealed virtual bool get_IsNull();
    public short get_Value();
    public static SqlInt16 op_Implicit(short x);
    public static short op_Explicit(SqlInt16 x);
    public virtual string ToString();
    public static SqlInt16 Parse(string s);
    public static SqlInt16 op_UnaryNegation(SqlInt16 x);
    public static SqlInt16 op_OnesComplement(SqlInt16 x);
    public static SqlInt16 op_Addition(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_Subtraction(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_Multiply(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_Division(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_Modulus(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_BitwiseAnd(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_BitwiseOr(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_ExclusiveOr(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_Explicit(SqlBoolean x);
    public static SqlInt16 op_Implicit(SqlByte x);
    public static SqlInt16 op_Explicit(SqlInt32 x);
    public static SqlInt16 op_Explicit(SqlInt64 x);
    public static SqlInt16 op_Explicit(SqlSingle x);
    public static SqlInt16 op_Explicit(SqlDouble x);
    public static SqlInt16 op_Explicit(SqlMoney x);
    public static SqlInt16 op_Explicit(SqlDecimal x);
    public static SqlInt16 op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean op_Inequality(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean op_LessThan(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean op_GreaterThan(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean op_LessThanOrEqual(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 OnesComplement(SqlInt16 x);
    public static SqlInt16 Add(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Subtract(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Multiply(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Divide(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Mod(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Modulus(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 BitwiseAnd(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 BitwiseOr(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Xor(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean Equals(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean NotEquals(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean LessThan(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean GreaterThan(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean LessThanOrEqual(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean GreaterThanOrEqual(SqlInt16 x, SqlInt16 y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlInt16 value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlInt32 : ValueType {
    private bool m_fNotNull;
    private int m_value;
    private static long x_iIntMin;
    private static long x_lBitNotIntMax;
    public static SqlInt32 Null;
    public static SqlInt32 Zero;
    public static SqlInt32 MinValue;
    public static SqlInt32 MaxValue;
    public bool IsNull { get; }
    public int Value { get; }
    public SqlInt32(int value);
    private static SqlInt32();
    public sealed virtual bool get_IsNull();
    public int get_Value();
    public static SqlInt32 op_Implicit(int x);
    public static int op_Explicit(SqlInt32 x);
    public virtual string ToString();
    public static SqlInt32 Parse(string s);
    public static SqlInt32 op_UnaryNegation(SqlInt32 x);
    public static SqlInt32 op_OnesComplement(SqlInt32 x);
    public static SqlInt32 op_Addition(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_Subtraction(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_Multiply(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_Division(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_Modulus(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_BitwiseAnd(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_BitwiseOr(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_ExclusiveOr(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_Explicit(SqlBoolean x);
    public static SqlInt32 op_Implicit(SqlByte x);
    public static SqlInt32 op_Implicit(SqlInt16 x);
    public static SqlInt32 op_Explicit(SqlInt64 x);
    public static SqlInt32 op_Explicit(SqlSingle x);
    public static SqlInt32 op_Explicit(SqlDouble x);
    public static SqlInt32 op_Explicit(SqlMoney x);
    public static SqlInt32 op_Explicit(SqlDecimal x);
    public static SqlInt32 op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean op_Inequality(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean op_LessThan(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean op_GreaterThan(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean op_LessThanOrEqual(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 OnesComplement(SqlInt32 x);
    public static SqlInt32 Add(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Subtract(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Multiply(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Divide(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Mod(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Modulus(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 BitwiseAnd(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 BitwiseOr(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Xor(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean Equals(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean NotEquals(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean LessThan(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean GreaterThan(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean LessThanOrEqual(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean GreaterThanOrEqual(SqlInt32 x, SqlInt32 y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlInt32 value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlInt64 : ValueType {
    private bool m_fNotNull;
    private long m_value;
    private static long x_lLowIntMask;
    private static long x_lHighIntMask;
    public static SqlInt64 Null;
    public static SqlInt64 Zero;
    public static SqlInt64 MinValue;
    public static SqlInt64 MaxValue;
    public bool IsNull { get; }
    public long Value { get; }
    public SqlInt64(long value);
    private static SqlInt64();
    public sealed virtual bool get_IsNull();
    public long get_Value();
    public static SqlInt64 op_Implicit(long x);
    public static long op_Explicit(SqlInt64 x);
    public virtual string ToString();
    public static SqlInt64 Parse(string s);
    public static SqlInt64 op_UnaryNegation(SqlInt64 x);
    public static SqlInt64 op_OnesComplement(SqlInt64 x);
    public static SqlInt64 op_Addition(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_Subtraction(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_Multiply(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_Division(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_Modulus(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_BitwiseAnd(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_BitwiseOr(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_ExclusiveOr(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_Explicit(SqlBoolean x);
    public static SqlInt64 op_Implicit(SqlByte x);
    public static SqlInt64 op_Implicit(SqlInt16 x);
    public static SqlInt64 op_Implicit(SqlInt32 x);
    public static SqlInt64 op_Explicit(SqlSingle x);
    public static SqlInt64 op_Explicit(SqlDouble x);
    public static SqlInt64 op_Explicit(SqlMoney x);
    public static SqlInt64 op_Explicit(SqlDecimal x);
    public static SqlInt64 op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean op_Inequality(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean op_LessThan(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean op_GreaterThan(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean op_LessThanOrEqual(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 OnesComplement(SqlInt64 x);
    public static SqlInt64 Add(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Subtract(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Multiply(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Divide(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Mod(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Modulus(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 BitwiseAnd(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 BitwiseOr(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Xor(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean Equals(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean NotEquals(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean LessThan(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean GreaterThan(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean LessThanOrEqual(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean GreaterThanOrEqual(SqlInt64 x, SqlInt64 y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlInt64 value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlMoney : ValueType {
    private bool m_fNotNull;
    private long m_value;
    internal static int x_iMoneyScale;
    private static long x_lTickBase;
    private static double x_dTickBase;
    private static long MinLong;
    private static long MaxLong;
    public static SqlMoney Null;
    public static SqlMoney Zero;
    public static SqlMoney MinValue;
    public static SqlMoney MaxValue;
    public bool IsNull { get; }
    public decimal Value { get; }
    internal SqlMoney(long value, int ignored);
    public SqlMoney(int value);
    public SqlMoney(long value);
    public SqlMoney(decimal value);
    public SqlMoney(double value);
    private static SqlMoney();
    public sealed virtual bool get_IsNull();
    public decimal get_Value();
    public decimal ToDecimal();
    public long ToInt64();
    internal long ToSqlInternalRepresentation();
    public int ToInt32();
    public double ToDouble();
    public static SqlMoney op_Implicit(decimal x);
    public static SqlMoney op_Explicit(double x);
    public static SqlMoney op_Implicit(long x);
    public static decimal op_Explicit(SqlMoney x);
    public virtual string ToString();
    public static SqlMoney Parse(string s);
    public static SqlMoney op_UnaryNegation(SqlMoney x);
    public static SqlMoney op_Addition(SqlMoney x, SqlMoney y);
    public static SqlMoney op_Subtraction(SqlMoney x, SqlMoney y);
    public static SqlMoney op_Multiply(SqlMoney x, SqlMoney y);
    public static SqlMoney op_Division(SqlMoney x, SqlMoney y);
    public static SqlMoney op_Explicit(SqlBoolean x);
    public static SqlMoney op_Implicit(SqlByte x);
    public static SqlMoney op_Implicit(SqlInt16 x);
    public static SqlMoney op_Implicit(SqlInt32 x);
    public static SqlMoney op_Implicit(SqlInt64 x);
    public static SqlMoney op_Explicit(SqlSingle x);
    public static SqlMoney op_Explicit(SqlDouble x);
    public static SqlMoney op_Explicit(SqlDecimal x);
    public static SqlMoney op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlMoney x, SqlMoney y);
    public static SqlBoolean op_Inequality(SqlMoney x, SqlMoney y);
    public static SqlBoolean op_LessThan(SqlMoney x, SqlMoney y);
    public static SqlBoolean op_GreaterThan(SqlMoney x, SqlMoney y);
    public static SqlBoolean op_LessThanOrEqual(SqlMoney x, SqlMoney y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlMoney x, SqlMoney y);
    public static SqlMoney Add(SqlMoney x, SqlMoney y);
    public static SqlMoney Subtract(SqlMoney x, SqlMoney y);
    public static SqlMoney Multiply(SqlMoney x, SqlMoney y);
    public static SqlMoney Divide(SqlMoney x, SqlMoney y);
    public static SqlBoolean Equals(SqlMoney x, SqlMoney y);
    public static SqlBoolean NotEquals(SqlMoney x, SqlMoney y);
    public static SqlBoolean LessThan(SqlMoney x, SqlMoney y);
    public static SqlBoolean GreaterThan(SqlMoney x, SqlMoney y);
    public static SqlBoolean LessThanOrEqual(SqlMoney x, SqlMoney y);
    public static SqlBoolean GreaterThanOrEqual(SqlMoney x, SqlMoney y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlMoney value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
public class System.Data.SqlTypes.SqlNotFilledException : SqlTypeException {
    public SqlNotFilledException(string message);
    public SqlNotFilledException(string message, Exception e);
    private SqlNotFilledException(SerializationInfo si, StreamingContext sc);
}
public class System.Data.SqlTypes.SqlNullValueException : SqlTypeException {
    public SqlNullValueException(string message);
    public SqlNullValueException(string message, Exception e);
    private SqlNullValueException(SerializationInfo si, StreamingContext sc);
}
internal class System.Data.SqlTypes.SQLResource : object {
    internal static string NullString;
    internal static string MessageString;
    internal static string ArithOverflowMessage;
    internal static string DivideByZeroMessage;
    internal static string NullValueMessage;
    internal static string TruncationMessage;
    internal static string DateTimeOverflowMessage;
    internal static string ConcatDiffCollationMessage;
    internal static string CompareDiffCollationMessage;
    internal static string InvalidFlagMessage;
    internal static string NumeToDecOverflowMessage;
    internal static string ConversionOverflowMessage;
    internal static string InvalidDateTimeMessage;
    internal static string TimeZoneSpecifiedMessage;
    internal static string InvalidArraySizeMessage;
    internal static string InvalidPrecScaleMessage;
    internal static string FormatMessage;
    internal static string NotFilledMessage;
    internal static string AlreadyFilledMessage;
    internal static string ClosedXmlReaderMessage;
    private static SQLResource();
    internal static string InvalidOpStreamClosed(string method);
    internal static string InvalidOpStreamNonWritable(string method);
    internal static string InvalidOpStreamNonReadable(string method);
    internal static string InvalidOpStreamNonSeekable(string method);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlSingle : ValueType {
    private bool m_fNotNull;
    private float m_value;
    public static SqlSingle Null;
    public static SqlSingle Zero;
    public static SqlSingle MinValue;
    public static SqlSingle MaxValue;
    public bool IsNull { get; }
    public float Value { get; }
    public SqlSingle(float value);
    public SqlSingle(double value);
    private static SqlSingle();
    public sealed virtual bool get_IsNull();
    public float get_Value();
    public static SqlSingle op_Implicit(float x);
    public static float op_Explicit(SqlSingle x);
    public virtual string ToString();
    public static SqlSingle Parse(string s);
    public static SqlSingle op_UnaryNegation(SqlSingle x);
    public static SqlSingle op_Addition(SqlSingle x, SqlSingle y);
    public static SqlSingle op_Subtraction(SqlSingle x, SqlSingle y);
    public static SqlSingle op_Multiply(SqlSingle x, SqlSingle y);
    public static SqlSingle op_Division(SqlSingle x, SqlSingle y);
    public static SqlSingle op_Explicit(SqlBoolean x);
    public static SqlSingle op_Implicit(SqlByte x);
    public static SqlSingle op_Implicit(SqlInt16 x);
    public static SqlSingle op_Implicit(SqlInt32 x);
    public static SqlSingle op_Implicit(SqlInt64 x);
    public static SqlSingle op_Implicit(SqlMoney x);
    public static SqlSingle op_Implicit(SqlDecimal x);
    public static SqlSingle op_Explicit(SqlDouble x);
    public static SqlSingle op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlSingle x, SqlSingle y);
    public static SqlBoolean op_Inequality(SqlSingle x, SqlSingle y);
    public static SqlBoolean op_LessThan(SqlSingle x, SqlSingle y);
    public static SqlBoolean op_GreaterThan(SqlSingle x, SqlSingle y);
    public static SqlBoolean op_LessThanOrEqual(SqlSingle x, SqlSingle y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlSingle x, SqlSingle y);
    public static SqlSingle Add(SqlSingle x, SqlSingle y);
    public static SqlSingle Subtract(SqlSingle x, SqlSingle y);
    public static SqlSingle Multiply(SqlSingle x, SqlSingle y);
    public static SqlSingle Divide(SqlSingle x, SqlSingle y);
    public static SqlBoolean Equals(SqlSingle x, SqlSingle y);
    public static SqlBoolean NotEquals(SqlSingle x, SqlSingle y);
    public static SqlBoolean LessThan(SqlSingle x, SqlSingle y);
    public static SqlBoolean GreaterThan(SqlSingle x, SqlSingle y);
    public static SqlBoolean LessThanOrEqual(SqlSingle x, SqlSingle y);
    public static SqlBoolean GreaterThanOrEqual(SqlSingle x, SqlSingle y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlSingle value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
internal abstract class System.Data.SqlTypes.SqlStreamChars : object {
    public bool IsNull { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public static SqlStreamChars Null { get; }
    public abstract virtual bool get_IsNull();
    public abstract virtual bool get_CanRead();
    public abstract virtual bool get_CanSeek();
    public abstract virtual bool get_CanWrite();
    public abstract virtual long get_Length();
    public abstract virtual long get_Position();
    public abstract virtual void set_Position(long value);
    public abstract virtual int Read(Char[] buffer, int offset, int count);
    public abstract virtual void Write(Char[] buffer, int offset, int count);
    public abstract virtual long Seek(long offset, SeekOrigin origin);
    public abstract virtual void SetLength(long value);
    public abstract virtual void Flush();
    public virtual void Close();
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual int ReadChar();
    public virtual void WriteChar(char value);
    public static SqlStreamChars get_Null();
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlString : ValueType {
    private string m_value;
    private CompareInfo m_cmpInfo;
    private int m_lcid;
    private SqlCompareOptions m_flag;
    private bool m_fNotNull;
    public static SqlString Null;
    internal static UnicodeEncoding x_UnicodeEncoding;
    public static int IgnoreCase;
    public static int IgnoreWidth;
    public static int IgnoreNonSpace;
    public static int IgnoreKanaType;
    public static int BinarySort;
    public static int BinarySort2;
    internal static SqlCompareOptions x_iValidSqlCompareOptionMask;
    internal static int x_lcidUSEnglish;
    private static int x_lcidBinary;
    public bool IsNull { get; }
    public string Value { get; }
    public int LCID { get; }
    public CultureInfo CultureInfo { get; }
    public CompareInfo CompareInfo { get; }
    public SqlCompareOptions SqlCompareOptions { get; }
    public SqlString(int lcid, SqlCompareOptions compareOptions, Byte[] data, int index, int count, bool fUnicode);
    public SqlString(int lcid, SqlCompareOptions compareOptions, Byte[] data, bool fUnicode);
    public SqlString(int lcid, SqlCompareOptions compareOptions, Byte[] data, int index, int count);
    public SqlString(int lcid, SqlCompareOptions compareOptions, Byte[] data);
    public SqlString(string data, int lcid, SqlCompareOptions compareOptions);
    public SqlString(string data, int lcid);
    public SqlString(string data);
    private static SqlString();
    public sealed virtual bool get_IsNull();
    public string get_Value();
    public int get_LCID();
    public CultureInfo get_CultureInfo();
    public CompareInfo get_CompareInfo();
    public SqlCompareOptions get_SqlCompareOptions();
    public static SqlString op_Implicit(string x);
    public static string op_Explicit(SqlString x);
    public virtual string ToString();
    public Byte[] GetUnicodeBytes();
    public Byte[] GetNonUnicodeBytes();
    public static SqlString op_Addition(SqlString x, SqlString y);
    public static SqlString op_Explicit(SqlBoolean x);
    public static SqlString op_Explicit(SqlByte x);
    public static SqlString op_Explicit(SqlInt16 x);
    public static SqlString op_Explicit(SqlInt32 x);
    public static SqlString op_Explicit(SqlInt64 x);
    public static SqlString op_Explicit(SqlSingle x);
    public static SqlString op_Explicit(SqlDouble x);
    public static SqlString op_Explicit(SqlDecimal x);
    public static SqlString op_Explicit(SqlMoney x);
    public static SqlString op_Explicit(SqlDateTime x);
    public static SqlString op_Explicit(SqlGuid x);
    public SqlString Clone();
    public static SqlBoolean op_Equality(SqlString x, SqlString y);
    public static SqlBoolean op_Inequality(SqlString x, SqlString y);
    public static SqlBoolean op_LessThan(SqlString x, SqlString y);
    public static SqlBoolean op_GreaterThan(SqlString x, SqlString y);
    public static SqlBoolean op_LessThanOrEqual(SqlString x, SqlString y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlString x, SqlString y);
    public static SqlString Concat(SqlString x, SqlString y);
    public static SqlString Add(SqlString x, SqlString y);
    public static SqlBoolean Equals(SqlString x, SqlString y);
    public static SqlBoolean NotEquals(SqlString x, SqlString y);
    public static SqlBoolean LessThan(SqlString x, SqlString y);
    public static SqlBoolean GreaterThan(SqlString x, SqlString y);
    public static SqlBoolean LessThanOrEqual(SqlString x, SqlString y);
    public static SqlBoolean GreaterThanOrEqual(SqlString x, SqlString y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDateTime ToSqlDateTime();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlGuid ToSqlGuid();
    public static CompareOptions CompareOptionsFromSqlCompareOptions(SqlCompareOptions compareOptions);
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlString value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
public class System.Data.SqlTypes.SqlTruncateException : SqlTypeException {
    public SqlTruncateException(string message);
    public SqlTruncateException(string message, Exception e);
    private SqlTruncateException(SerializationInfo si, StreamingContext sc);
}
public class System.Data.SqlTypes.SqlTypeException : SystemException {
    public SqlTypeException(string message);
    public SqlTypeException(string message, Exception e);
    protected SqlTypeException(SerializationInfo si, StreamingContext sc);
}
public class System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper : SchemaImporterExtension {
    protected static string SqlTypesNamespace;
    public SqlTypesSchemaImporterExtensionHelper(string name, string targetNamespace, String[] references, CodeNamespaceImport[] namespaceImports, string destinationType, bool direct);
    public SqlTypesSchemaImporterExtensionHelper(string name, string destinationType);
    public SqlTypesSchemaImporterExtensionHelper(string name, string destinationType, bool direct);
    private static SqlTypesSchemaImporterExtensionHelper();
    public virtual string ImportSchemaType(string name, string xmlNamespace, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider);
    public virtual string ImportSchemaType(XmlSchemaType type, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlXml : object {
    public bool IsNull { get; }
    public string Value { get; }
    public static SqlXml Null { get; }
    public SqlXml(XmlReader value);
    public SqlXml(Stream value);
    private static SqlXml();
    public XmlReader CreateReader();
    internal static XmlReader CreateSqlXmlReader(Stream stream, bool closeInput, bool throwTargetInvocationExceptions);
    public sealed virtual bool get_IsNull();
    public string get_Value();
    public static SqlXml get_Null();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader r);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
internal class System.Data.SqlTypes.SqlXmlStreamWrapper : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal SqlXmlStreamWrapper(Stream stream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void WriteByte(byte value);
    public virtual void SetLength(long value);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
}
public enum System.Data.SqlTypes.StorageState : Enum {
    public int value__;
    public static StorageState Buffer;
    public static StorageState Stream;
    public static StorageState UnmanagedBuffer;
}
internal class System.Data.SqlTypes.StreamOnSqlBytes : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal StreamOnSqlBytes(SqlBytes sb);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void WriteByte(byte value);
    public virtual void SetLength(long value);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
}
internal class System.Data.SqlTypes.StreamOnSqlChars : SqlStreamChars {
    public bool IsNull { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal StreamOnSqlChars(SqlChars s);
    public virtual bool get_IsNull();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int Read(Char[] buffer, int offset, int count);
    public virtual void Write(Char[] buffer, int offset, int count);
    public virtual int ReadChar();
    public virtual void WriteChar(char value);
    public virtual void SetLength(long value);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
}
public class System.Data.SqlTypes.TypeBigIntSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeBinarySchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeBitSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeCharSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeDecimalSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeFloatSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeIntSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeMoneySchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeNCharSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeNTextSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeNumericSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeRealSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeSmallDateTimeSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeTextSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeVarCharSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeVarImageSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
internal class System.Data.SqlTypes.UnicodeString : SafeHandleZeroOrMinusOneIsInvalid {
    public UnicodeString(string path);
    protected virtual bool ReleaseHandle();
}
[SuppressUnmanagedCodeSecurityAttribute]
internal static class System.Data.SqlTypes.UnsafeNativeMethods : object {
    internal static ushort FILE_DEVICE_FILE_SYSTEM;
    internal static int ERROR_INVALID_HANDLE;
    internal static int ERROR_MR_MID_NOT_FOUND;
    internal static UInt32 STATUS_INVALID_PARAMETER;
    internal static UInt32 STATUS_SHARING_VIOLATION;
    internal static UInt32 STATUS_OBJECT_NAME_NOT_FOUND;
    internal static UInt32 SEM_FAILCRITICALERRORS;
    internal static int FILE_READ_DATA;
    internal static int FILE_WRITE_DATA;
    internal static int FILE_READ_ATTRIBUTES;
    internal static int SYNCHRONIZE;
    private static UnsafeNativeMethods();
    internal static UInt32 NtCreateFile(SafeFileHandle& fileHandle, int desiredAccess, OBJECT_ATTRIBUTES& objectAttributes, IO_STATUS_BLOCK& ioStatusBlock, Int64& allocationSize, UInt32 fileAttributes, FileShare shareAccess, UInt32 createDisposition, UInt32 createOptions, SafeHandle eaBuffer, UInt32 eaLength);
    internal static FileType GetFileType(SafeFileHandle hFile);
    internal static string SafeGetFullPathName(string path);
    internal static void SetErrorModeWrapper(UInt32 mode, UInt32& oldMode);
    internal static bool DeviceIoControl(SafeFileHandle fileHandle, UInt32 ioControlCode, IntPtr inBuffer, UInt32 cbInBuffer, IntPtr outBuffer, UInt32 cbOutBuffer, UInt32& cbBytesReturned, IntPtr overlapped);
    internal static UInt32 RtlNtStatusToDosError(UInt32 status);
    internal static UInt32 CTL_CODE(ushort deviceType, ushort function, byte method, byte access);
}
public class System.Data.StateChangeEventArgs : EventArgs {
    public ConnectionState CurrentState { get; }
    public ConnectionState OriginalState { get; }
    public StateChangeEventArgs(ConnectionState originalState, ConnectionState currentState);
    public ConnectionState get_CurrentState();
    public ConnectionState get_OriginalState();
}
public class System.Data.StateChangeEventHandler : MulticastDelegate {
    public StateChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StateChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StateChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.StatementCompletedEventArgs : EventArgs {
    public int RecordCount { get; }
    public StatementCompletedEventArgs(int recordCount);
    public int get_RecordCount();
}
public class System.Data.StatementCompletedEventHandler : MulticastDelegate {
    public StatementCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StatementCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StatementCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Data.StatementType : Enum {
    public int value__;
    public static StatementType Select;
    public static StatementType Insert;
    public static StatementType Update;
    public static StatementType Delete;
    public static StatementType Batch;
}
public class System.Data.StrongTypingException : DataException {
    protected StrongTypingException(SerializationInfo info, StreamingContext context);
    public StrongTypingException(string message);
    public StrongTypingException(string s, Exception innerException);
}
public class System.Data.SyntaxErrorException : InvalidExpressionException {
    protected SyntaxErrorException(SerializationInfo info, StreamingContext context);
    public SyntaxErrorException(string s);
    public SyntaxErrorException(string message, Exception innerException);
}
internal enum System.Data.Tokens : Enum {
    public int value__;
    public static Tokens None;
    public static Tokens Name;
    public static Tokens Numeric;
    public static Tokens Decimal;
    public static Tokens Float;
    public static Tokens BinaryConst;
    public static Tokens StringConst;
    public static Tokens Date;
    public static Tokens ListSeparator;
    public static Tokens LeftParen;
    public static Tokens RightParen;
    public static Tokens ZeroOp;
    public static Tokens UnaryOp;
    public static Tokens BinaryOp;
    public static Tokens Child;
    public static Tokens Parent;
    public static Tokens Dot;
    public static Tokens Unknown;
    public static Tokens EOS;
}
internal enum System.Data.TreeAccessMethod : Enum {
    public int value__;
    public static TreeAccessMethod KEY_SEARCH_AND_INDEX;
    public static TreeAccessMethod INDEX_ONLY;
}
[ObsoleteAttribute("TypedDataSetGenerator class will be removed in a future release. Please use System.Data.Design.TypedDataSetGenerator in System.Design.dll.")]
public class System.Data.TypedDataSetGenerator : object {
    public static void Generate(DataSet dataSet, CodeNamespace codeNamespace, ICodeGenerator codeGen);
    public static string GenerateIdName(string name, ICodeGenerator codeGen);
    internal CodeTypeDeclaration GenerateCode(DataSet dataSet, CodeNamespace codeNamespace, ICodeGenerator codeGen);
}
public class System.Data.TypedDataSetGeneratorException : DataException {
    public ArrayList ErrorList { get; }
    protected TypedDataSetGeneratorException(SerializationInfo info, StreamingContext context);
    public TypedDataSetGeneratorException(string message);
    public TypedDataSetGeneratorException(string message, Exception innerException);
    public TypedDataSetGeneratorException(ArrayList list);
    public ArrayList get_ErrorList();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class System.Data.UnaryNode : ExpressionNode {
    internal int op;
    internal ExpressionNode right;
    internal UnaryNode(DataTable table, int op, ExpressionNode right);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] recordNos);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual bool DependsOn(DataColumn column);
    internal virtual ExpressionNode Optimize();
}
[DefaultPropertyAttribute("ConstraintName")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.UniqueConstraintEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Data.UniqueConstraint : Constraint {
    internal bool bPrimaryKey;
    internal string constraintName;
    internal String[] columnNames;
    internal String[] ColumnNames { get; }
    internal Index ConstraintIndex { get; }
    [ReadOnlyAttribute("True")]
[ResDescriptionAttribute("KeyConstraintColumnsDescr")]
[ResCategoryAttribute("DataCategory_Data")]
public DataColumn[] Columns { get; }
    internal DataColumn[] ColumnsReference { get; }
    [ResCategoryAttribute("DataCategory_Data")]
[ResDescriptionAttribute("KeyConstraintIsPrimaryKeyDescr")]
public bool IsPrimaryKey { get; }
    unknown bool InCollection {internal set; }
    internal DataKey Key { get; }
    [ResDescriptionAttribute("ConstraintTableDescr")]
[ReadOnlyAttribute("True")]
[ResCategoryAttribute("DataCategory_Data")]
public DataTable Table { get; }
    public UniqueConstraint(string name, DataColumn column);
    public UniqueConstraint(DataColumn column);
    public UniqueConstraint(string name, DataColumn[] columns);
    public UniqueConstraint(DataColumn[] columns);
    [BrowsableAttribute("False")]
public UniqueConstraint(string name, String[] columnNames, bool isPrimaryKey);
    public UniqueConstraint(string name, DataColumn column, bool isPrimaryKey);
    public UniqueConstraint(DataColumn column, bool isPrimaryKey);
    public UniqueConstraint(string name, DataColumn[] columns, bool isPrimaryKey);
    public UniqueConstraint(DataColumn[] columns, bool isPrimaryKey);
    internal String[] get_ColumnNames();
    internal Index get_ConstraintIndex();
    internal void ConstraintIndexClear();
    internal void ConstraintIndexInitialize();
    internal virtual void CheckState();
    internal virtual void CheckCanAddToCollection(ConstraintCollection constraints);
    internal virtual bool CanBeRemovedFromCollection(ConstraintCollection constraints, bool fThrowException);
    internal virtual bool CanEnableConstraint();
    internal virtual bool IsConstraintViolated();
    internal virtual void CheckConstraint(DataRow row, DataRowAction action);
    internal virtual bool ContainsColumn(DataColumn column);
    internal virtual Constraint Clone(DataSet destination);
    internal virtual Constraint Clone(DataSet destination, bool ignorNSforTableLookup);
    internal UniqueConstraint Clone(DataTable table);
    public virtual DataColumn[] get_Columns();
    internal DataColumn[] get_ColumnsReference();
    public bool get_IsPrimaryKey();
    public virtual bool Equals(object key2);
    public virtual int GetHashCode();
    internal virtual void set_InCollection(bool value);
    internal DataKey get_Key();
    public virtual DataTable get_Table();
}
public enum System.Data.UpdateRowSource : Enum {
    public int value__;
    public static UpdateRowSource None;
    public static UpdateRowSource OutputParameters;
    public static UpdateRowSource FirstReturnedRecord;
    public static UpdateRowSource Both;
}
public enum System.Data.UpdateStatus : Enum {
    public int value__;
    public static UpdateStatus Continue;
    public static UpdateStatus ErrorsOccurred;
    public static UpdateStatus SkipCurrentRow;
    public static UpdateStatus SkipAllRemainingRows;
}
internal enum System.Data.ValueType : Enum {
    public int value__;
    public static ValueType Unknown;
    public static ValueType Null;
    public static ValueType Bool;
    public static ValueType Numeric;
    public static ValueType Str;
    public static ValueType Float;
    public static ValueType Decimal;
    public static ValueType Object;
    public static ValueType Date;
}
public class System.Data.VersionNotFoundException : DataException {
    protected VersionNotFoundException(SerializationInfo info, StreamingContext context);
    public VersionNotFoundException(string s);
    public VersionNotFoundException(string message, Exception innerException);
}
internal class System.Data.XDRSchema : XMLSchema {
    internal string _schemaName;
    internal string _schemaUri;
    internal XmlElement _schemaRoot;
    internal DataSet _ds;
    internal XDRSchema(DataSet ds, bool fInline);
    private static XDRSchema();
    internal void LoadSchema(XmlElement schemaRoot, DataSet ds);
    internal XmlElement FindTypeNode(XmlElement node);
    internal bool IsTextOnlyContent(XmlElement node);
    internal bool IsXDRField(XmlElement node, XmlElement typeNode);
    internal DataTable HandleTable(XmlElement node);
    internal string GetInstanceName(XmlElement node);
    internal void HandleColumn(XmlElement node, DataTable table);
    internal void GetMinMax(XmlElement elNode, Int32& minOccurs, Int32& maxOccurs);
    internal void GetMinMax(XmlElement elNode, bool isAttribute, Int32& minOccurs, Int32& maxOccurs);
    internal void HandleTypeNode(XmlElement typeNode, DataTable table, ArrayList tableChildren);
    internal DataTable InstantiateTable(DataSet dataSet, XmlElement node, XmlElement typeNode);
    internal DataTable InstantiateSimpleTable(DataSet dataSet, XmlElement node);
}
internal class System.Data.XmlDataLoader : object {
    internal bool isDiffgram;
    internal bool FromInference { get; internal set; }
    internal XmlDataLoader(DataSet dataset, bool IsXdr, bool ignoreSchema);
    internal XmlDataLoader(DataSet dataset, bool IsXdr, XmlElement topNode, bool ignoreSchema);
    internal XmlDataLoader(DataTable datatable, bool IsXdr, bool ignoreSchema);
    internal XmlDataLoader(DataTable datatable, bool IsXdr, XmlElement topNode, bool ignoreSchema);
    internal bool get_FromInference();
    internal void set_FromInference(bool value);
    internal DataRow GetRowFromElement(XmlElement e);
    internal bool FColumnElement(XmlElement e);
    internal bool IsTextLikeNode(XmlNodeType n);
    internal bool IsTextOnly(DataColumn c);
    internal void LoadData(XmlDocument xdoc);
    internal void LoadTopMostRow(Boolean[]& foundColumns);
    internal void LoadData(XmlReader reader);
}
internal class System.Data.XmlDataTreeWriter : object {
    internal XmlDataTreeWriter(DataSet ds);
    internal XmlDataTreeWriter(DataSet ds, DataTable dt);
    internal XmlDataTreeWriter(DataTable dt, bool writeHierarchy);
    internal static bool RowHasErrors(DataRow row);
    internal void SaveDiffgramData(XmlWriter xw, Hashtable rowsOrder);
    internal void Save(XmlWriter xw, bool writeSchema);
    internal void XmlDataRowWriter(DataRow row, string encodedTableName);
    internal static bool PreserveSpace(object value);
}
internal class System.Data.XMLDiffLoader : object {
    internal void LoadDiffGram(DataSet ds, XmlReader dataTextReader);
    internal void LoadDiffGram(DataTable dt, XmlReader dataTextReader);
    internal void ProcessDiffs(DataSet ds, XmlReader ssync);
    internal void ProcessDiffs(ArrayList tableList, XmlReader ssync);
    internal void ProcessErrors(DataSet ds, XmlReader ssync);
    internal void ProcessErrors(ArrayList dt, XmlReader ssync);
    internal void SkipWhitespaces(XmlReader reader);
}
internal class System.Data.XmlIgnoreNamespaceReader : XmlNodeReader {
    internal XmlIgnoreNamespaceReader(XmlDocument xdoc, String[] namespacesToIgnore);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
}
public enum System.Data.XmlReadMode : Enum {
    public int value__;
    public static XmlReadMode Auto;
    public static XmlReadMode ReadSchema;
    public static XmlReadMode IgnoreSchema;
    public static XmlReadMode InferSchema;
    public static XmlReadMode DiffGram;
    public static XmlReadMode Fragment;
    public static XmlReadMode InferTypedSchema;
}
internal class System.Data.XMLSchema : object {
    internal static TypeConverter GetConverter(Type type);
    internal static void SetProperties(object instance, XmlAttributeCollection attrs);
    internal static bool FEqualIdentity(XmlNode node, string name, string ns);
    internal static bool GetBooleanAttribute(XmlElement element, string attrName, string attrNS, bool defVal);
    internal static string GenUniqueColumnName(string proposedName, DataTable table);
}
internal class System.Data.XmlToDatasetMap : object {
    public XmlToDatasetMap(DataSet dataSet, XmlNameTable nameTable);
    public XmlToDatasetMap(XmlNameTable nameTable, DataSet dataSet);
    public XmlToDatasetMap(DataTable dataTable, XmlNameTable nameTable);
    public XmlToDatasetMap(XmlNameTable nameTable, DataTable dataTable);
    internal static bool IsMappedColumn(DataColumn c);
    public object GetColumnSchema(XmlNode node, bool fIgnoreNamespace);
    public object GetColumnSchema(DataTable table, XmlReader dataReader, bool fIgnoreNamespace);
    public object GetSchemaForNode(XmlNode node, bool fIgnoreNamespace);
    public DataTable GetTableForNode(XmlReader node, bool fIgnoreNamespace);
}
internal class System.Data.XmlTreeGen : object {
    internal XmlTreeGen(SchemaFormat format);
    internal static void AddExtendedProperties(PropertyCollection props, XmlElement node);
    internal static void AddExtendedProperties(PropertyCollection props, XmlElement node, Type type);
    internal void AddXdoProperties(object instance, XmlElement root, XmlDocument xd);
    internal void AddXdoProperty(PropertyDescriptor pd, object instance, XmlElement root, XmlDocument xd);
    internal static string XmlDataTypeName(Type type);
    internal void WriteSchemaRoot(XmlDocument xd, XmlElement rootSchema, string targetNamespace);
    internal static void ValidateColumnMapping(Type columnType);
    internal void SetupAutoGenerated(DataSet ds);
    internal void SetupAutoGenerated(ArrayList dt);
    internal void SetupAutoGenerated(DataTable dt);
    internal void SchemaTree(XmlDocument xd, XmlWriter xmlWriter, DataSet ds, DataTable dt, bool writeHierarchy);
    internal XmlElement SchemaTree(XmlDocument xd, DataTable dt);
    internal XmlElement FillDataSetElement(XmlDocument xd, DataSet ds, DataTable dt);
    internal void SetPath(XmlWriter xw);
    internal void Save(DataSet ds, XmlWriter xw);
    internal void Save(DataTable dt, XmlWriter xw);
    internal void Save(DataSet ds, DataTable dt, XmlWriter xw);
    internal void Save(DataSet ds, DataTable dt, XmlWriter xw, bool writeHierarchy);
    internal void Save(DataSet ds, DataTable dt, XmlWriter xw, bool writeHierarchy, Converter`2<Type, string> multipleTargetConverter);
    internal XmlElement HandleRelation(DataRelation rel, XmlDocument dc);
    internal XmlElement GetSchema(string NamespaceURI);
    internal void HandleColumnType(DataColumn col, XmlDocument dc, XmlElement root, XmlElement schema);
    internal void AddColumnProperties(DataColumn col, XmlElement root);
    internal XmlElement HandleColumn(DataColumn col, XmlDocument dc, XmlElement schema, bool fWriteOrdinal);
    internal static string TranslateAcceptRejectRule(AcceptRejectRule rule);
    internal static string TranslateRule(Rule rule);
    internal void AppendChildWithoutRef(XmlElement node, string Namespace, XmlElement el, string refString);
    internal XmlElement FindTypeNode(XmlElement node, string strType);
    internal XmlElement HandleTable(DataTable table, XmlDocument dc, XmlElement schema);
    internal static bool AutoGenerated(DataColumn col);
    internal static bool AutoGenerated(DataRelation rel);
    internal static bool AutoGenerated(UniqueConstraint unique);
    internal static bool AutoGenerated(ForeignKeyConstraint fk, bool checkRelation);
    internal XmlElement HandleTable(DataTable table, XmlDocument dc, XmlElement schema, bool genNested);
}
public enum System.Data.XmlWriteMode : Enum {
    public int value__;
    public static XmlWriteMode WriteSchema;
    public static XmlWriteMode IgnoreSchema;
    public static XmlWriteMode DiffGram;
}
internal class System.Data.XSDSchema : XMLSchema {
    internal bool FromInference { get; internal set; }
    private static XSDSchema();
    internal bool get_FromInference();
    internal void set_FromInference(bool value);
    internal static string QualifiedName(string name);
    internal static void SetProperties(object instance, XmlAttribute[] attrs);
    internal static string GetMsdataAttribute(XmlSchemaAnnotated node, string ln);
    internal void HandleRefTableProperties(ArrayList RefTables, XmlSchemaElement element);
    internal void HandleRelation(XmlElement node, bool fNested);
    public void LoadSchema(XmlSchemaSet schemaSet, DataTable dt);
    public void LoadSchema(XmlSchemaSet schemaSet, DataSet ds);
    internal XmlSchemaObjectCollection GetParticleItems(XmlSchemaParticle pt);
    internal void HandleParticle(XmlSchemaParticle pt, DataTable table, ArrayList tableChildren, bool isBase);
    internal void HandleAttributes(XmlSchemaObjectCollection attributes, DataTable table, bool isBase);
    internal void HandleComplexType(XmlSchemaComplexType ct, DataTable table, ArrayList tableChildren, bool isNillable);
    internal XmlSchemaParticle GetParticle(XmlSchemaComplexType ct);
    internal DataColumn FindField(DataTable table, string field);
    internal DataColumn[] BuildKey(XmlSchemaIdentityConstraint keyNode, DataTable table);
    internal bool GetBooleanAttribute(XmlSchemaAnnotated element, string attrName, bool defVal);
    internal string GetStringAttribute(XmlSchemaAnnotated element, string attrName, string defVal);
    internal static AcceptRejectRule TranslateAcceptRejectRule(string strRule);
    internal static Rule TranslateRule(string strRule);
    internal void HandleKeyref(XmlSchemaKeyref keyref);
    internal void HandleConstraint(XmlSchemaIdentityConstraint keyNode);
    internal DataTable InstantiateSimpleTable(XmlSchemaElement node);
    internal string GetInstanceName(XmlSchemaAnnotated node);
    internal DataTable InstantiateTable(XmlSchemaElement node, XmlSchemaComplexType typeNode, bool isRef);
    public static Type XsdtoClr(string xsdTypeName);
    internal static bool IsXsdType(string name);
    internal XmlSchemaAnnotated FindTypeNode(XmlSchemaAnnotated node);
    internal void HandleSimpleTypeSimpleContentColumn(XmlSchemaSimpleType typeNode, string strType, DataTable table, bool isBase, XmlAttribute[] attrs, bool isNillable);
    internal void HandleSimpleContentColumn(string strType, DataTable table, bool isBase, XmlAttribute[] attrs, bool isNillable);
    internal void HandleAttributeColumn(XmlSchemaAttribute attrib, DataTable table, bool isBase);
    internal void HandleElementColumn(XmlSchemaElement elem, DataTable table, bool isBase);
    internal void HandleDataSet(XmlSchemaElement node, bool isNewDataSet);
    internal bool IsTable(XmlSchemaElement node);
    internal DataTable HandleTable(XmlSchemaElement node);
}
internal class System.Data.ZeroOpNode : ExpressionNode {
    internal int op;
    internal static int zop_True;
    internal static int zop_False;
    internal static int zop_Null;
    internal ZeroOpNode(int op);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] recordNos);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual ExpressionNode Optimize();
}
internal abstract class System.Xml.BaseRegionIterator : BaseTreeIterator {
    internal BaseRegionIterator(DataSetMapper mapper);
}
internal abstract class System.Xml.BaseTreeIterator : object {
    protected DataSetMapper mapper;
    internal XmlNode CurrentNode { get; }
    internal BaseTreeIterator(DataSetMapper mapper);
    internal abstract virtual void Reset();
    internal abstract virtual XmlNode get_CurrentNode();
    internal abstract virtual bool Next();
    internal abstract virtual bool NextRight();
    internal bool NextRowElement();
    internal bool NextRightRowElement();
    internal bool OnRowElement();
}
internal class System.Xml.DataDocumentXPathNavigator : XPathNavigator {
    internal XPathNodePointer CurNode { get; }
    internal XmlDataDocument Document { get; }
    public XPathNodeType NodeType { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Name { get; }
    public string Prefix { get; }
    public string Value { get; }
    public string BaseURI { get; }
    public string XmlLang { get; }
    public bool IsEmptyElement { get; }
    public XmlNameTable NameTable { get; }
    public bool HasAttributes { get; }
    public bool HasChildren { get; }
    internal DataDocumentXPathNavigator(XmlDataDocument doc, XmlNode node);
    public virtual XPathNavigator Clone();
    internal XPathNodePointer get_CurNode();
    internal XmlDataDocument get_Document();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Name();
    public virtual string get_Prefix();
    public virtual string get_Value();
    public virtual string get_BaseURI();
    public virtual string get_XmlLang();
    public virtual bool get_IsEmptyElement();
    public virtual XmlNameTable get_NameTable();
    public virtual bool get_HasAttributes();
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string GetNamespace(string name);
    public virtual bool MoveToNamespace(string name);
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToNextNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToNext();
    public virtual bool MoveToPrevious();
    public virtual bool MoveToFirst();
    public virtual bool get_HasChildren();
    public virtual bool MoveToFirstChild();
    public virtual bool MoveToParent();
    public virtual void MoveToRoot();
    public virtual bool MoveTo(XPathNavigator other);
    public virtual bool MoveToId(string id);
    public virtual bool IsSamePosition(XPathNavigator other);
    private sealed virtual override XmlNode System.Xml.IHasXmlNode.GetNode();
    public virtual XmlNodeOrder ComparePosition(XPathNavigator other);
}
internal class System.Xml.DataPointer : object {
    internal int AttributeCount { get; }
    internal XmlNodeType NodeType { get; }
    internal string LocalName { get; }
    internal string NamespaceURI { get; }
    internal string Name { get; }
    internal string Prefix { get; }
    internal string Value { get; }
    internal bool IsEmptyElement { get; }
    internal bool IsDefault { get; }
    internal string PublicId { get; }
    internal string SystemId { get; }
    internal string InternalSubset { get; }
    internal XmlDeclaration Declaration { get; }
    internal string Encoding { get; }
    internal string Standalone { get; }
    internal string Version { get; }
    internal DataPointer(XmlDataDocument doc, XmlNode node);
    internal DataPointer(DataPointer pointer);
    internal void AddPointer();
    internal void MoveTo(DataPointer pointer);
    internal bool MoveToFirstChild();
    internal bool MoveToNextSibling();
    internal bool MoveToParent();
    internal bool MoveToOwnerElement();
    internal int get_AttributeCount();
    internal bool MoveToAttribute(int i);
    internal XmlNodeType get_NodeType();
    internal string get_LocalName();
    internal string get_NamespaceURI();
    internal string get_Name();
    internal string get_Prefix();
    internal string get_Value();
    private sealed virtual override bool System.Xml.IXmlDataVirtualNode.IsOnNode(XmlNode nodeToCheck);
    private sealed virtual override bool System.Xml.IXmlDataVirtualNode.IsOnColumn(DataColumn col);
    internal XmlNode GetNode();
    internal bool get_IsEmptyElement();
    internal bool get_IsDefault();
    private sealed virtual override void System.Xml.IXmlDataVirtualNode.OnFoliated(XmlNode foliatedNode);
    internal void RealFoliate();
    internal string get_PublicId();
    internal string get_SystemId();
    internal string get_InternalSubset();
    internal XmlDeclaration get_Declaration();
    internal string get_Encoding();
    internal string get_Standalone();
    internal string get_Version();
    private sealed virtual override bool System.Xml.IXmlDataVirtualNode.IsInUse();
    internal void SetNoLongerUse();
}
internal class System.Xml.DataSetMapper : object {
    internal static string strReservedXmlns;
    internal void SetupMapping(XmlDataDocument xd, DataSet ds);
    internal bool IsMapped();
    internal DataTable SearchMatchingTableSchema(string localName, string namespaceURI);
    internal DataTable SearchMatchingTableSchema(XmlBoundElement rowElem, XmlBoundElement elem);
    internal DataColumn GetColumnSchemaForNode(XmlBoundElement rowElem, XmlNode node);
    internal DataTable GetTableSchemaForElement(XmlElement elem);
    internal DataTable GetTableSchemaForElement(XmlBoundElement be);
    internal static bool IsNotMapped(DataColumn c);
    internal DataRow GetRowFromElement(XmlElement e);
    internal DataRow GetRowFromElement(XmlBoundElement be);
    internal bool GetRegion(XmlNode node, XmlBoundElement& rowElem);
    internal bool IsRegionRadical(XmlBoundElement rowElem);
}
internal enum System.Xml.ElementState : Enum {
    public int value__;
    public static ElementState None;
    public static ElementState Defoliated;
    public static ElementState WeakFoliation;
    public static ElementState StrongFoliation;
    public static ElementState Foliating;
    public static ElementState Defoliating;
}
internal interface System.Xml.IXmlDataVirtualNode {
    public abstract virtual bool IsOnNode(XmlNode nodeToCheck);
    public abstract virtual bool IsOnColumn(DataColumn col);
    public abstract virtual bool IsInUse();
    public abstract virtual void OnFoliated(XmlNode foliatedNode);
}
internal class System.Xml.RegionIterator : BaseRegionIterator {
    internal XmlNode CurrentNode { get; }
    internal RegionIterator(XmlBoundElement rowElement);
    internal virtual void Reset();
    internal virtual XmlNode get_CurrentNode();
    internal virtual bool Next();
    internal virtual bool NextRight();
    internal bool NextInitialTextLikeNodes(String& value);
}
internal class System.Xml.TreeIterator : BaseTreeIterator {
    internal XmlNode CurrentNode { get; }
    internal TreeIterator(XmlNode nodeTop);
    internal virtual void Reset();
    internal virtual XmlNode get_CurrentNode();
    internal virtual bool Next();
    internal virtual bool NextRight();
}
internal class System.Xml.XmlBoundElement : XmlElement {
    public XmlAttributeCollection Attributes { get; }
    public bool HasAttributes { get; }
    public XmlNode FirstChild { get; }
    internal XmlNode SafeFirstChild { get; }
    public XmlNode LastChild { get; }
    public XmlNode PreviousSibling { get; }
    internal XmlNode SafePreviousSibling { get; }
    public XmlNode NextSibling { get; }
    internal XmlNode SafeNextSibling { get; }
    public bool HasChildNodes { get; }
    public string InnerXml { get; public set; }
    internal DataRow Row { get; internal set; }
    internal bool IsFoliated { get; }
    internal ElementState ElementState { get; internal set; }
    internal XmlBoundElement(string prefix, string localName, string namespaceURI, XmlDocument doc);
    public virtual XmlAttributeCollection get_Attributes();
    public virtual bool get_HasAttributes();
    public virtual XmlNode get_FirstChild();
    internal XmlNode get_SafeFirstChild();
    public virtual XmlNode get_LastChild();
    public virtual XmlNode get_PreviousSibling();
    internal XmlNode get_SafePreviousSibling();
    public virtual XmlNode get_NextSibling();
    internal XmlNode get_SafeNextSibling();
    public virtual bool get_HasChildNodes();
    public virtual XmlNode InsertBefore(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode InsertAfter(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild);
    public virtual XmlNode AppendChild(XmlNode newChild);
    internal void RemoveAllChildren();
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    internal DataRow get_Row();
    internal void set_Row(DataRow value);
    internal bool get_IsFoliated();
    internal ElementState get_ElementState();
    internal void set_ElementState(ElementState value);
    internal void Foliate(ElementState newState);
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
    public virtual XmlNodeList GetElementsByTagName(string name);
}
[ObsoleteAttribute("XmlDataDocument class will be removed in a future release.")]
public class System.Xml.XmlDataDocument : XmlDocument {
    internal Hashtable pointers;
    internal static string XSI_NIL;
    internal static string XSI;
    internal XmlAttribute attrXml;
    internal bool bLoadFromDataSet;
    internal bool bHasXSINIL;
    internal ElementState AutoFoliationState { get; internal set; }
    public DataSet DataSet { get; }
    internal bool IgnoreXmlEvents { get; internal set; }
    internal bool IgnoreDataSetEvents { get; internal set; }
    internal bool IsFoliationEnabled { get; internal set; }
    internal DataSetMapper Mapper { get; }
    public XmlDataDocument(DataSet dataset);
    internal XmlDataDocument(XmlImplementation imp);
    internal void AddPointer(IXmlDataVirtualNode pointer);
    [ConditionalAttribute("DEBUG")]
internal void AssertPointerPresent(IXmlDataVirtualNode pointer);
    internal void SyncRows(DataRow parentRow, XmlNode node, bool fAddRowsToTable);
    internal void SyncTree(XmlNode node);
    internal ElementState get_AutoFoliationState();
    internal void set_AutoFoliationState(ElementState value);
    internal void Bind(DataRow r, XmlBoundElement e);
    public virtual XmlElement CreateElement(string prefix, string localName, string namespaceURI);
    public virtual XmlEntityReference CreateEntityReference(string name);
    public DataSet get_DataSet();
    internal void Foliate(XmlBoundElement node, ElementState newState);
    public DataRow GetRowFromElement(XmlElement e);
    public XmlElement GetElementFromRow(DataRow r);
    internal bool HasPointers(XmlNode node);
    internal bool get_IgnoreXmlEvents();
    internal void set_IgnoreXmlEvents(bool value);
    internal bool get_IgnoreDataSetEvents();
    internal void set_IgnoreDataSetEvents(bool value);
    internal bool get_IsFoliationEnabled();
    internal void set_IsFoliationEnabled(bool value);
    internal XmlNode CloneTree(DataPointer other);
    public virtual XmlNode CloneNode(bool deep);
    internal static bool IsTextLikeNode(XmlNode n);
    internal bool IsNotMapped(DataColumn c);
    internal bool IsTextOnly(DataColumn c);
    public virtual void Load(string filename);
    public virtual void Load(Stream inStream);
    public virtual void Load(TextReader txtReader);
    public virtual void Load(XmlReader reader);
    internal DataSetMapper get_Mapper();
    internal void OnDataRowCreated(object oDataSet, DataRow row);
    internal void OnClearCalled(object oDataSet, DataTable table);
    internal void OnDataRowCreatedSpecial(object oDataSet, DataRow row);
    internal void OnNewRow(DataRow row);
    internal XmlNode SafeFirstChild(XmlNode n);
    internal XmlNode SafeNextSibling(XmlNode n);
    internal XmlNode SafePreviousSibling(XmlNode n);
    internal static void SetRowValueToNull(DataRow row, DataColumn col);
    internal static void SetRowValueFromXmlText(DataRow row, DataColumn col, string xmlText);
    internal static bool IsTextNode(XmlNodeType nt);
    protected virtual XPathNavigator CreateNavigator(XmlNode node);
    public virtual XmlElement GetElementById(string elemId);
    public virtual XmlNodeList GetElementsByTagName(string name);
}
internal class System.Xml.XmlDataImplementation : XmlImplementation {
    public virtual XmlDocument CreateDocument();
}
internal class System.Xml.XPathNodePointer : object {
    internal XmlBoundElement _parentOfNS;
    internal static Int32[] xmlNodeType_To_XpathNodeType_Map;
    internal static string s_strReservedXmlns;
    internal static string s_strReservedXml;
    internal static string s_strXmlNS;
    internal bool IsEmptyElement { get; }
    internal XPathNodeType NodeType { get; }
    internal string LocalName { get; }
    internal string Name { get; }
    internal string NamespaceURI { get; }
    internal string Prefix { get; }
    internal string Value { get; }
    internal string InnerText { get; }
    internal string BaseURI { get; }
    internal string XmlLang { get; }
    internal int AttributeCount { get; }
    internal bool HasChildren { get; }
    internal XmlNode Node { get; }
    internal XmlDataDocument Document { get; }
    private static XPathNodePointer();
    internal XPathNodePointer(DataDocumentXPathNavigator owner, XmlDataDocument doc, XmlNode node);
    internal XPathNodePointer(DataDocumentXPathNavigator owner, XPathNodePointer pointer);
    internal XPathNodePointer Clone(DataDocumentXPathNavigator owner);
    internal bool get_IsEmptyElement();
    internal XPathNodeType get_NodeType();
    internal string get_LocalName();
    internal string get_Name();
    internal string get_NamespaceURI();
    internal string get_Prefix();
    internal string get_Value();
    internal string get_InnerText();
    internal string get_BaseURI();
    internal string get_XmlLang();
    internal bool MoveTo(XPathNodePointer pointer);
    internal int get_AttributeCount();
    internal DataColumn NextColumn(DataRow row, DataColumn col, bool fAttribute);
    internal DataColumn PreviousColumn(DataRow row, DataColumn col, bool fAttribute);
    internal bool MoveToAttribute(string localName, string namespaceURI);
    internal bool MoveToNextAttribute(bool bFirst);
    internal bool MoveToNextSibling();
    internal bool MoveToPreviousSibling();
    internal bool MoveToFirst();
    internal bool get_HasChildren();
    internal bool MoveToFirstChild();
    internal bool MoveToParent();
    internal void MoveToRoot();
    internal bool IsSamePosition(XPathNodePointer pointer);
    internal XmlNodeOrder ComparePosition(XPathNodePointer other);
    internal XmlNode get_Node();
    private sealed virtual override bool System.Xml.IXmlDataVirtualNode.IsOnNode(XmlNode nodeToCheck);
    private sealed virtual override bool System.Xml.IXmlDataVirtualNode.IsOnColumn(DataColumn col);
    private sealed virtual override void System.Xml.IXmlDataVirtualNode.OnFoliated(XmlNode foliatedNode);
    internal string GetNamespace(string name);
    internal bool MoveToNamespace(string name);
    internal bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    internal bool MoveToNextNamespace(XPathNamespaceScope namespaceScope);
    internal XmlDataDocument get_Document();
    private sealed virtual override bool System.Xml.IXmlDataVirtualNode.IsInUse();
}
[CLSCompliantAttribute("False")]
internal class Win32NativeMethods : object {
    [ResourceExposureAttribute("0")]
internal static bool IsTokenRestrictedWrapper(IntPtr token);
}
