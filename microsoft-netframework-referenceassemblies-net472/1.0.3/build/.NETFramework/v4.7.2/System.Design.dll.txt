internal static class AssemblyRef : object {
    internal static string EcmaPublicKey;
    internal static string EcmaPublicKeyToken;
    internal static string EcmaPublicKeyFull;
    internal static string SilverlightPublicKey;
    internal static string SilverlightPublicKeyToken;
    internal static string SilverlightPublicKeyFull;
    internal static string SilverlightPlatformPublicKey;
    internal static string SilverlightPlatformPublicKeyToken;
    internal static string SilverlightPlatformPublicKeyFull;
    internal static string PlatformPublicKey;
    internal static string PlatformPublicKeyToken;
    internal static string PlatformPublicKeyFull;
    internal static string Mscorlib;
    internal static string SystemData;
    internal static string SystemDataOracleClient;
    internal static string System;
    internal static string SystemCore;
    internal static string SystemNumerics;
    internal static string SystemRuntimeRemoting;
    internal static string SystemThreadingTasksDataflow;
    internal static string SystemWindowsForms;
    internal static string SystemXml;
    internal static string MicrosoftPublicKey;
    internal static string MicrosoftPublicKeyToken;
    internal static string MicrosoftPublicKeyFull;
    internal static string SharedLibPublicKey;
    internal static string SharedLibPublicKeyToken;
    internal static string SharedLibPublicKeyFull;
    internal static string SystemComponentModelDataAnnotations;
    internal static string SystemConfiguration;
    internal static string SystemConfigurationInstall;
    internal static string SystemDeployment;
    internal static string SystemDesign;
    internal static string SystemDirectoryServices;
    internal static string SystemDrawingDesign;
    internal static string SystemDrawing;
    internal static string SystemEnterpriseServices;
    internal static string SystemManagement;
    internal static string SystemMessaging;
    internal static string SystemNetHttp;
    internal static string SystemNetHttpWebRequest;
    internal static string SystemRuntimeSerializationFormattersSoap;
    internal static string SystemRuntimeWindowsRuntime;
    internal static string SystemRuntimeWindowsRuntimeUIXaml;
    internal static string SystemSecurity;
    internal static string SystemServiceModelWeb;
    internal static string SystemServiceProcess;
    internal static string SystemWeb;
    internal static string SystemWebAbstractions;
    internal static string SystemWebDynamicData;
    internal static string SystemWebDynamicDataDesign;
    internal static string SystemWebEntityDesign;
    internal static string SystemWebExtensions;
    internal static string SystemWebExtensionsDesign;
    internal static string SystemWebMobile;
    internal static string SystemWebRegularExpressions;
    internal static string SystemWebRouting;
    internal static string SystemWebServices;
    internal static string WindowsBase;
    internal static string MicrosoftVisualStudio;
    internal static string MicrosoftVisualStudioWindowsForms;
    internal static string VJSharpCodeProvider;
    internal static string ASPBrowserCapsPublicKey;
    internal static string ASPBrowserCapsFactory;
    internal static string EnvDTE;
    internal static string MicrosoftVisualStudioConfiguration;
    internal static string MicrosoftVisualStudioDesign;
    internal static string MicrosoftVisualCCppCodeProvider;
    internal static string MicrosoftVisualBasic;
    internal static string MicrosoftVSDesigner;
    internal static string MicrosoftVisualStudioWeb;
    internal static string MicrosoftWebDesign;
    internal static string MicrosoftVSDesignerMobile;
    internal static string MicrosoftJScript;
}
internal static class FXAssembly : object {
    internal static string Version;
}
internal class Microsoft.Internal.Performance.CodeMarkerExStartEnd : ValueType {
    private int _end;
    private Byte[] _aBuff;
    internal CodeMarkerExStartEnd(int begin, int end, Byte[] aBuff);
    internal CodeMarkerExStartEnd(int begin, int end, Guid guidData);
    internal CodeMarkerExStartEnd(int begin, int end, string stringData);
    internal CodeMarkerExStartEnd(int begin, int end, UInt32 uintData);
    internal CodeMarkerExStartEnd(int begin, int end, ulong ulongData);
    public sealed virtual void Dispose();
}
internal class Microsoft.Internal.Performance.CodeMarkers : object {
    public static CodeMarkers Instance;
    public bool IsEnabled { get; }
    private static CodeMarkers();
    public bool get_IsEnabled();
    public bool CodeMarker(int nTimerID);
    public bool CodeMarkerEx(int nTimerID, Byte[] aBuff);
    public bool CodeMarkerEx(int nTimerID, Guid guidData);
    public bool CodeMarkerEx(int nTimerID, string stringData);
    public bool CodeMarkerEx(int nTimerID, UInt32 uintData);
    public bool CodeMarkerEx(int nTimerID, ulong ulongData);
}
internal class Microsoft.Internal.Performance.CodeMarkerStartEnd : ValueType {
    private int _end;
    internal CodeMarkerStartEnd(int begin, int end);
    public sealed virtual void Dispose();
}
internal static class System.ComponentModel.CompModSwitches : object {
    public static BooleanSwitch CommonDesignerServices { get; }
    public static TraceSwitch DragDrop { get; }
    public static TraceSwitch MSAA { get; }
    public static TraceSwitch UserControlDesigner { get; }
    public static BooleanSwitch get_CommonDesignerServices();
    public static TraceSwitch get_DragDrop();
    public static TraceSwitch get_MSAA();
    public static TraceSwitch get_UserControlDesigner();
}
public class System.ComponentModel.Design.ActiveDesignSurfaceChangedEventArgs : EventArgs {
    public DesignSurface OldSurface { get; }
    public DesignSurface NewSurface { get; }
    public ActiveDesignSurfaceChangedEventArgs(DesignSurface oldSurface, DesignSurface newSurface);
    public DesignSurface get_OldSurface();
    public DesignSurface get_NewSurface();
}
public class System.ComponentModel.Design.ActiveDesignSurfaceChangedEventHandler : MulticastDelegate {
    public ActiveDesignSurfaceChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ActiveDesignSurfaceChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ActiveDesignSurfaceChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.ComponentModel.Design.ArrayEditor : CollectionEditor {
    public ArrayEditor(Type type);
    protected virtual Type CreateCollectionItemType();
    protected virtual Object[] GetItems(object editValue);
    protected virtual object SetItems(object editValue, Object[] value);
}
public class System.ComponentModel.Design.BinaryEditor : UITypeEditor {
    private static BinaryEditor();
    internal object GetService(Type serviceType);
    internal Byte[] ConvertToBytes(object value);
    internal void ConvertToValue(Byte[] bytes, Object& value);
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    internal void ShowHelp();
}
internal class System.ComponentModel.Design.BinaryUI : Form {
    public object Value { get; public set; }
    public BinaryUI(BinaryEditor editor);
    public object get_Value();
    public void set_Value(object value);
}
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
public class System.ComponentModel.Design.ByteViewer : TableLayoutPanel {
    private static ByteViewer();
    public virtual Byte[] GetBytes();
    public virtual DisplayMode GetDisplayMode();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnLayout(LayoutEventArgs e);
    public virtual void SaveToFile(string path);
    protected virtual void ScrollChanged(object source, EventArgs e);
    public virtual void SetBytes(Byte[] bytes);
    public virtual void SetDisplayMode(DisplayMode mode);
    public virtual void SetFile(string path);
    public virtual void SetStartLine(int line);
}
public class System.ComponentModel.Design.CollectionEditor : UITypeEditor {
    protected Type CollectionItemType { get; }
    protected Type CollectionType { get; }
    protected ITypeDescriptorContext Context { get; }
    protected Type[] NewItemTypes { get; }
    protected string HelpTopic { get; }
    public CollectionEditor(Type type);
    protected virtual void CancelChanges();
    protected Type get_CollectionItemType();
    protected Type get_CollectionType();
    protected ITypeDescriptorContext get_Context();
    protected Type[] get_NewItemTypes();
    protected virtual string get_HelpTopic();
    protected virtual bool CanRemoveInstance(object value);
    protected virtual bool CanSelectMultipleInstances();
    protected virtual CollectionForm CreateCollectionForm();
    protected virtual object CreateInstance(Type itemType);
    protected virtual IList GetObjectsFromInstance(object instance);
    internal static object CreateInstance(Type itemType, IDesignerHost host, string name);
    protected virtual string GetDisplayText(object value);
    protected virtual Type CreateCollectionItemType();
    protected virtual Type[] CreateNewItemTypes();
    protected virtual void DestroyInstance(object instance);
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    protected virtual Object[] GetItems(object editValue);
    protected object GetService(Type serviceType);
    internal virtual void OnItemRemoving(object item);
    protected virtual object SetItems(object editValue, Object[] value);
    protected virtual void ShowHelp();
}
public enum System.ComponentModel.Design.ComponentActionsType : Enum {
    public int value__;
    public static ComponentActionsType All;
    public static ComponentActionsType Component;
    public static ComponentActionsType Service;
}
public class System.ComponentModel.Design.ComponentDesigner : object {
    public DesignerActionListCollection ActionLists { get; }
    public ICollection AssociatedComponents { get; }
    public IComponent Component { get; }
    protected bool Inherited { get; }
    protected IComponent ParentComponent { get; }
    protected InheritanceAttribute InheritanceAttribute { get; }
    protected ShadowPropertyCollection ShadowProperties { get; }
    public DesignerVerbCollection Verbs { get; }
    internal bool IsRootDesigner { get; }
    private ICollection System.ComponentModel.Design.ITreeDesigner.Children { get; }
    private IDesigner System.ComponentModel.Design.ITreeDesigner.Parent { get; }
    private static ComponentDesigner();
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual ICollection get_AssociatedComponents();
    internal virtual bool CanBeAssociatedWith(IDesigner parentDesigner);
    public sealed virtual IComponent get_Component();
    protected bool get_Inherited();
    protected virtual IComponent get_ParentComponent();
    protected InheritanceAttribute InvokeGetInheritanceAttribute(ComponentDesigner toInvoke);
    protected virtual InheritanceAttribute get_InheritanceAttribute();
    protected ShadowPropertyCollection get_ShadowProperties();
    public virtual DesignerVerbCollection get_Verbs();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    public virtual void DoDefaultAction();
    internal bool get_IsRootDesigner();
    public virtual void Initialize(IComponent component);
    public virtual void InitializeExistingComponent(IDictionary defaultValues);
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    [ObsoleteAttribute("This method has been deprecated. Use InitializeExistingComponent instead.  http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual void InitializeNonDefault();
    protected virtual object GetService(Type serviceType);
    [ObsoleteAttribute("This method has been deprecated. Use InitializeNewComponent instead.  http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual void OnSetComponentDefaults();
    internal virtual void ShowContextMenu(int x, int y);
    protected virtual void PostFilterAttributes(IDictionary attributes);
    protected virtual void PostFilterEvents(IDictionary events);
    protected virtual void PostFilterProperties(IDictionary properties);
    protected virtual void PreFilterAttributes(IDictionary attributes);
    protected virtual void PreFilterEvents(IDictionary events);
    protected virtual void PreFilterProperties(IDictionary properties);
    protected void RaiseComponentChanged(MemberDescriptor member, object oldValue, object newValue);
    protected void RaiseComponentChanging(MemberDescriptor member);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(IDictionary attributes);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(IDictionary events);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(IDictionary properties);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(IDictionary attributes);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(IDictionary events);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(IDictionary properties);
    private sealed virtual override ICollection System.ComponentModel.Design.ITreeDesigner.get_Children();
    private sealed virtual override IDesigner System.ComponentModel.Design.ITreeDesigner.get_Parent();
}
public abstract class System.ComponentModel.Design.Data.DataSourceDescriptor : object {
    public string Name { get; }
    public Bitmap Image { get; }
    public string TypeName { get; }
    public bool IsDesignable { get; }
    public abstract virtual string get_Name();
    public abstract virtual Bitmap get_Image();
    public abstract virtual string get_TypeName();
    public abstract virtual bool get_IsDesignable();
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.Design.Data.DataSourceDescriptorCollection : CollectionBase {
    public DataSourceDescriptor Item { get; public set; }
    public int Add(DataSourceDescriptor value);
    public int IndexOf(DataSourceDescriptor value);
    public void Insert(int index, DataSourceDescriptor value);
    public bool Contains(DataSourceDescriptor value);
    public void CopyTo(DataSourceDescriptor[] array, int index);
    public void Remove(DataSourceDescriptor value);
    public DataSourceDescriptor get_Item(int index);
    public void set_Item(int index, DataSourceDescriptor value);
}
public abstract class System.ComponentModel.Design.Data.DataSourceGroup : object {
    public string Name { get; }
    public Bitmap Image { get; }
    public DataSourceDescriptorCollection DataSources { get; }
    public bool IsDefault { get; }
    public abstract virtual string get_Name();
    public abstract virtual Bitmap get_Image();
    public abstract virtual DataSourceDescriptorCollection get_DataSources();
    public abstract virtual bool get_IsDefault();
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.Design.Data.DataSourceGroupCollection : CollectionBase {
    public DataSourceGroup Item { get; public set; }
    public int Add(DataSourceGroup value);
    public int IndexOf(DataSourceGroup value);
    public void Insert(int index, DataSourceGroup value);
    public bool Contains(DataSourceGroup value);
    public void CopyTo(DataSourceGroup[] array, int index);
    public void Remove(DataSourceGroup value);
    public DataSourceGroup get_Item(int index);
    public void set_Item(int index, DataSourceGroup value);
}
[GuidAttribute("ABE5C1F0-C96E-40c4-A22D-4A5CEC899BDC")]
public abstract class System.ComponentModel.Design.Data.DataSourceProviderService : object {
    public bool SupportsAddNewDataSource { get; }
    public bool SupportsConfigureDataSource { get; }
    public abstract virtual bool get_SupportsAddNewDataSource();
    public abstract virtual bool get_SupportsConfigureDataSource();
    public abstract virtual DataSourceGroupCollection GetDataSources();
    public abstract virtual DataSourceGroup InvokeAddNewDataSource(IWin32Window parentWindow, FormStartPosition startPosition);
    public abstract virtual bool InvokeConfigureDataSource(IWin32Window parentWindow, FormStartPosition startPosition, DataSourceDescriptor dataSourceDescriptor);
    public abstract virtual object AddDataSourceInstance(IDesignerHost host, DataSourceDescriptor dataSourceDescriptor);
    public abstract virtual void NotifyDataSourceComponentAdded(object dsc);
}
public class System.ComponentModel.Design.Data.DesignerDataColumn : object {
    public DbType DataType { get; }
    public object DefaultValue { get; }
    public bool Identity { get; }
    public int Length { get; }
    public string Name { get; }
    public bool Nullable { get; }
    public int Precision { get; }
    public bool PrimaryKey { get; }
    public int Scale { get; }
    public DesignerDataColumn(string name, DbType dataType);
    public DesignerDataColumn(string name, DbType dataType, object defaultValue);
    public DesignerDataColumn(string name, DbType dataType, object defaultValue, bool identity, bool nullable, bool primaryKey, int precision, int scale, int length);
    public DbType get_DataType();
    public object get_DefaultValue();
    public bool get_Identity();
    public int get_Length();
    public string get_Name();
    public bool get_Nullable();
    public int get_Precision();
    public bool get_PrimaryKey();
    public int get_Scale();
}
public class System.ComponentModel.Design.Data.DesignerDataConnection : object {
    public string ConnectionString { get; }
    public bool IsConfigured { get; }
    public string Name { get; }
    public string ProviderName { get; }
    public DesignerDataConnection(string name, string providerName, string connectionString);
    public DesignerDataConnection(string name, string providerName, string connectionString, bool isConfigured);
    public string get_ConnectionString();
    public bool get_IsConfigured();
    public string get_Name();
    public string get_ProviderName();
}
public class System.ComponentModel.Design.Data.DesignerDataParameter : object {
    public DbType DataType { get; }
    public ParameterDirection Direction { get; }
    public string Name { get; }
    public DesignerDataParameter(string name, DbType dataType, ParameterDirection direction);
    public DbType get_DataType();
    public ParameterDirection get_Direction();
    public string get_Name();
}
public class System.ComponentModel.Design.Data.DesignerDataRelationship : object {
    public ICollection ChildColumns { get; }
    public DesignerDataTable ChildTable { get; }
    public string Name { get; }
    public ICollection ParentColumns { get; }
    public DesignerDataRelationship(string name, ICollection parentColumns, DesignerDataTable childTable, ICollection childColumns);
    public ICollection get_ChildColumns();
    public DesignerDataTable get_ChildTable();
    public string get_Name();
    public ICollection get_ParentColumns();
}
public class System.ComponentModel.Design.Data.DesignerDataSchemaClass : object {
    public static DesignerDataSchemaClass StoredProcedures;
    public static DesignerDataSchemaClass Tables;
    public static DesignerDataSchemaClass Views;
    private static DesignerDataSchemaClass();
}
public abstract class System.ComponentModel.Design.Data.DesignerDataStoredProcedure : object {
    public string Name { get; }
    public string Owner { get; }
    public ICollection Parameters { get; }
    protected DesignerDataStoredProcedure(string name);
    protected DesignerDataStoredProcedure(string name, string owner);
    public string get_Name();
    public string get_Owner();
    public ICollection get_Parameters();
    protected abstract virtual ICollection CreateParameters();
}
public abstract class System.ComponentModel.Design.Data.DesignerDataTable : DesignerDataTableBase {
    public ICollection Relationships { get; }
    protected DesignerDataTable(string name);
    protected DesignerDataTable(string name, string owner);
    public ICollection get_Relationships();
    protected abstract virtual ICollection CreateRelationships();
}
public abstract class System.ComponentModel.Design.Data.DesignerDataTableBase : object {
    public ICollection Columns { get; }
    public string Name { get; }
    public string Owner { get; }
    protected DesignerDataTableBase(string name);
    protected DesignerDataTableBase(string name, string owner);
    public ICollection get_Columns();
    public string get_Name();
    public string get_Owner();
    protected abstract virtual ICollection CreateColumns();
}
public abstract class System.ComponentModel.Design.Data.DesignerDataView : DesignerDataTableBase {
    protected DesignerDataView(string name);
    protected DesignerDataView(string name, string owner);
}
public interface System.ComponentModel.Design.Data.IDataEnvironment {
    public ICollection Connections { get; }
    public abstract virtual ICollection get_Connections();
    public abstract virtual DesignerDataConnection BuildConnection(IWin32Window owner, DesignerDataConnection initialConnection);
    public abstract virtual string BuildQuery(IWin32Window owner, DesignerDataConnection connection, QueryBuilderMode mode, string initialQueryText);
    public abstract virtual DesignerDataConnection ConfigureConnection(IWin32Window owner, DesignerDataConnection connection, string name);
    public abstract virtual IDesignerDataSchema GetConnectionSchema(DesignerDataConnection connection);
    public abstract virtual DbConnection GetDesignTimeConnection(DesignerDataConnection connection);
    public abstract virtual CodeExpression GetCodeExpression(DesignerDataConnection connection);
}
public interface System.ComponentModel.Design.Data.IDesignerDataSchema {
    public abstract virtual ICollection GetSchemaItems(DesignerDataSchemaClass schemaClass);
    public abstract virtual bool SupportsSchemaClass(DesignerDataSchemaClass schemaClass);
}
public enum System.ComponentModel.Design.Data.QueryBuilderMode : Enum {
    public int value__;
    public static QueryBuilderMode Select;
    public static QueryBuilderMode Update;
    public static QueryBuilderMode Insert;
    public static QueryBuilderMode Delete;
}
public class System.ComponentModel.Design.DateTimeEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
public class System.ComponentModel.Design.DesignerActionHeaderItem : DesignerActionTextItem {
    public DesignerActionHeaderItem(string displayName);
    public DesignerActionHeaderItem(string displayName, string category);
}
public abstract class System.ComponentModel.Design.DesignerActionItem : object {
    public bool AllowAssociate { get; public set; }
    public string Category { get; }
    public string Description { get; }
    public string DisplayName { get; }
    public IDictionary Properties { get; }
    public bool ShowInSourceView { get; public set; }
    public DesignerActionItem(string displayName, string category, string description);
    public bool get_AllowAssociate();
    public void set_AllowAssociate(bool value);
    public virtual string get_Category();
    public virtual string get_Description();
    public virtual string get_DisplayName();
    public IDictionary get_Properties();
    public bool get_ShowInSourceView();
    public void set_ShowInSourceView(bool value);
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.Design.DesignerActionItemCollection : CollectionBase {
    public DesignerActionItem Item { get; public set; }
    public DesignerActionItem get_Item(int index);
    public void set_Item(int index, DesignerActionItem value);
    public int Add(DesignerActionItem value);
    public bool Contains(DesignerActionItem value);
    public void CopyTo(DesignerActionItem[] array, int index);
    public int IndexOf(DesignerActionItem value);
    public void Insert(int index, DesignerActionItem value);
    public void Remove(DesignerActionItem value);
}
public class System.ComponentModel.Design.DesignerActionList : object {
    public bool AutoShow { get; public set; }
    public IComponent Component { get; }
    public DesignerActionList(IComponent component);
    public virtual bool get_AutoShow();
    public virtual void set_AutoShow(bool value);
    public IComponent get_Component();
    public object GetService(Type serviceType);
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("True")]
[SecurityCriticalAttribute]
public class System.ComponentModel.Design.DesignerActionListCollection : CollectionBase {
    public DesignerActionList Item { get; public set; }
    internal DesignerActionListCollection(DesignerActionList actionList);
    public DesignerActionListCollection(DesignerActionList[] value);
    public DesignerActionList get_Item(int index);
    public void set_Item(int index, DesignerActionList value);
    public int Add(DesignerActionList value);
    public void AddRange(DesignerActionList[] value);
    public void AddRange(DesignerActionListCollection value);
    public void Insert(int index, DesignerActionList value);
    public int IndexOf(DesignerActionList value);
    public bool Contains(DesignerActionList value);
    public void Remove(DesignerActionList value);
    public void CopyTo(DesignerActionList[] array, int index);
    protected virtual void OnSet(int index, object oldValue, object newValue);
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnClear();
    protected virtual void OnRemove(int index, object value);
    protected virtual void OnValidate(object value);
}
public class System.ComponentModel.Design.DesignerActionListsChangedEventArgs : EventArgs {
    public DesignerActionListsChangedType ChangeType { get; }
    public object RelatedObject { get; }
    public DesignerActionListCollection ActionLists { get; }
    public DesignerActionListsChangedEventArgs(object relatedObject, DesignerActionListsChangedType changeType, DesignerActionListCollection actionLists);
    public DesignerActionListsChangedType get_ChangeType();
    public object get_RelatedObject();
    public DesignerActionListCollection get_ActionLists();
}
[ComVisibleAttribute("True")]
public class System.ComponentModel.Design.DesignerActionListsChangedEventHandler : MulticastDelegate {
    public DesignerActionListsChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DesignerActionListsChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DesignerActionListsChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
public enum System.ComponentModel.Design.DesignerActionListsChangedType : Enum {
    public int value__;
    public static DesignerActionListsChangedType ActionListsAdded;
    public static DesignerActionListsChangedType ActionListsRemoved;
}
public class System.ComponentModel.Design.DesignerActionMethodItem : DesignerActionItem {
    public string MemberName { get; }
    public IComponent RelatedComponent { get; public set; }
    public bool IncludeAsDesignerVerb { get; }
    public DesignerActionMethodItem(DesignerActionList actionList, string memberName, string displayName, string category, string description, bool includeAsDesignerVerb);
    public DesignerActionMethodItem(DesignerActionList actionList, string memberName, string displayName);
    public DesignerActionMethodItem(DesignerActionList actionList, string memberName, string displayName, bool includeAsDesignerVerb);
    public DesignerActionMethodItem(DesignerActionList actionList, string memberName, string displayName, string category);
    public DesignerActionMethodItem(DesignerActionList actionList, string memberName, string displayName, string category, bool includeAsDesignerVerb);
    public DesignerActionMethodItem(DesignerActionList actionList, string memberName, string displayName, string category, string description);
    public virtual string get_MemberName();
    public IComponent get_RelatedComponent();
    public void set_RelatedComponent(IComponent value);
    public virtual bool get_IncludeAsDesignerVerb();
    internal void Invoke(object sender, EventArgs args);
    public virtual void Invoke();
}
internal class System.ComponentModel.Design.DesignerActionPanel : ContainerControl {
    public static string ExternDllGdi32;
    public static string ExternDllUser32;
    public Color ActiveLinkColor { get; }
    public Color BorderColor { get; }
    public CommandID[] FilteredCommandIDs { get; }
    public Color GradientDarkColor { get; }
    public Color GradientLightColor { get; }
    public bool InMethodInvoke { get; internal set; }
    public Color LinkColor { get; }
    public Color SeparatorColor { get; }
    public Color TitleBarColor { get; }
    public Color TitleBarTextColor { get; }
    public Color TitleBarUnselectedColor { get; }
    public Color LabelForeColor { get; }
    public DesignerActionPanel(IServiceProvider serviceProvider);
    private static DesignerActionPanel();
    public Color get_ActiveLinkColor();
    public Color get_BorderColor();
    public CommandID[] get_FilteredCommandIDs();
    public Color get_GradientDarkColor();
    public Color get_GradientLightColor();
    public bool get_InMethodInvoke();
    internal void set_InMethodInvoke(bool value);
    public Color get_LinkColor();
    public Color get_SeparatorColor();
    public Color get_TitleBarColor();
    public Color get_TitleBarTextColor();
    public Color get_TitleBarUnselectedColor();
    public Color get_LabelForeColor();
    public static Point ComputePreferredDesktopLocation(Rectangle rectangleAnchor, Size sizePanel, DockStyle& edgeToDock);
    protected virtual void Dispose(bool disposing);
    public virtual Size GetPreferredSize(Size proposedSize);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnLayout(LayoutEventArgs levent);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnRightToLeftChanged(EventArgs e);
    protected virtual bool ProcessDialogKey(Keys keyData);
    protected virtual bool ProcessTabKey(bool forward);
    public void UpdateTasks(DesignerActionListCollection actionLists, DesignerActionListCollection serviceActionLists, string title, string subtitle);
}
public class System.ComponentModel.Design.DesignerActionPropertyItem : DesignerActionItem {
    public string MemberName { get; }
    public IComponent RelatedComponent { get; public set; }
    public DesignerActionPropertyItem(string memberName, string displayName, string category, string description);
    public DesignerActionPropertyItem(string memberName, string displayName);
    public DesignerActionPropertyItem(string memberName, string displayName, string category);
    public string get_MemberName();
    public IComponent get_RelatedComponent();
    public void set_RelatedComponent(IComponent value);
}
public class System.ComponentModel.Design.DesignerActionService : object {
    public DesignerActionService(IServiceProvider serviceProvider);
    public void add_DesignerActionListsChanged(DesignerActionListsChangedEventHandler value);
    public void remove_DesignerActionListsChanged(DesignerActionListsChangedEventHandler value);
    public void Add(IComponent comp, DesignerActionListCollection designerActionListCollection);
    public void Add(IComponent comp, DesignerActionList actionList);
    public void Clear();
    public bool Contains(IComponent comp);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public DesignerActionListCollection GetComponentActions(IComponent component);
    public virtual DesignerActionListCollection GetComponentActions(IComponent component, ComponentActionsType type);
    protected virtual void GetComponentDesignerActions(IComponent component, DesignerActionListCollection actionLists);
    protected virtual void GetComponentServiceActions(IComponent component, DesignerActionListCollection actionLists);
    public void Remove(IComponent comp);
    public void Remove(DesignerActionList actionList);
    public void Remove(IComponent comp, DesignerActionList actionList);
    internal void add_DesignerActionUIStateChange(DesignerActionUIStateChangeEventHandler value);
    internal void remove_DesignerActionUIStateChange(DesignerActionUIStateChangeEventHandler value);
}
public class System.ComponentModel.Design.DesignerActionTextItem : DesignerActionItem {
    public DesignerActionTextItem(string displayName, string category);
}
public class System.ComponentModel.Design.DesignerActionUIService : object {
    internal DesignerActionUIService(IServiceProvider serviceProvider);
    public sealed virtual void Dispose();
    public void add_DesignerActionUIStateChange(DesignerActionUIStateChangeEventHandler value);
    public void remove_DesignerActionUIStateChange(DesignerActionUIStateChangeEventHandler value);
    public void HideUI(IComponent component);
    public void ShowUI(IComponent component);
    public void Refresh(IComponent component);
    public bool ShouldAutoShow(IComponent component);
}
public class System.ComponentModel.Design.DesignerActionUIStateChangeEventArgs : EventArgs {
    public DesignerActionUIStateChangeType ChangeType { get; }
    public object RelatedObject { get; }
    public DesignerActionUIStateChangeEventArgs(object relatedObject, DesignerActionUIStateChangeType changeType);
    public DesignerActionUIStateChangeType get_ChangeType();
    public object get_RelatedObject();
}
public class System.ComponentModel.Design.DesignerActionUIStateChangeEventHandler : MulticastDelegate {
    public DesignerActionUIStateChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DesignerActionUIStateChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DesignerActionUIStateChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.ComponentModel.Design.DesignerActionUIStateChangeType : Enum {
    public int value__;
    public static DesignerActionUIStateChangeType Show;
    public static DesignerActionUIStateChangeType Hide;
    public static DesignerActionUIStateChangeType Refresh;
}
internal class System.ComponentModel.Design.DesignerActionVerbItem : DesignerActionMethodItem {
    public string Category { get; }
    public string Description { get; }
    public string DisplayName { get; }
    public string MemberName { get; }
    public bool IncludeAsDesignerVerb { get; }
    public DesignerActionVerbItem(DesignerVerb verb);
    public virtual string get_Category();
    public virtual string get_Description();
    public virtual string get_DisplayName();
    public virtual string get_MemberName();
    public virtual bool get_IncludeAsDesignerVerb();
    public virtual void Invoke();
}
internal class System.ComponentModel.Design.DesignerActionVerbList : DesignerActionList {
    public bool AutoShow { get; }
    public DesignerActionVerbList(DesignerVerb[] verbs);
    public virtual bool get_AutoShow();
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
public class System.ComponentModel.Design.DesignerCommandSet : object {
    public DesignerVerbCollection Verbs { get; }
    public DesignerActionListCollection ActionLists { get; }
    public virtual ICollection GetCommands(string name);
    public DesignerVerbCollection get_Verbs();
    public DesignerActionListCollection get_ActionLists();
}
internal class System.ComponentModel.Design.DesignerEventService : object {
    private IDesignerHost System.ComponentModel.Design.IDesignerEventService.ActiveDesigner { get; }
    private DesignerCollection System.ComponentModel.Design.IDesignerEventService.Designers { get; }
    private static DesignerEventService();
    internal void OnActivateDesigner(DesignSurface surface);
    internal void OnCreateDesigner(DesignSurface surface);
    private sealed virtual override IDesignerHost System.ComponentModel.Design.IDesignerEventService.get_ActiveDesigner();
    private sealed virtual override DesignerCollection System.ComponentModel.Design.IDesignerEventService.get_Designers();
    private sealed virtual override void System.ComponentModel.Design.IDesignerEventService.add_ActiveDesignerChanged(ActiveDesignerEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerEventService.remove_ActiveDesignerChanged(ActiveDesignerEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerEventService.add_DesignerCreated(DesignerEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerEventService.remove_DesignerCreated(DesignerEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerEventService.add_DesignerDisposed(DesignerEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerEventService.remove_DesignerDisposed(DesignerEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerEventService.add_SelectionChanged(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerEventService.remove_SelectionChanged(EventHandler value);
}
internal class System.ComponentModel.Design.DesignerHost : Container {
    internal HostDesigntimeLicenseContext LicenseContext { get; }
    internal bool IsClosingTransaction { get; internal set; }
    private bool System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction { get; }
    private bool System.ComponentModel.Design.IDesignerHost.Loading { get; }
    private bool System.ComponentModel.Design.IDesignerHost.InTransaction { get; }
    private IContainer System.ComponentModel.Design.IDesignerHost.Container { get; }
    private IComponent System.ComponentModel.Design.IDesignerHost.RootComponent { get; }
    private string System.ComponentModel.Design.IDesignerHost.RootComponentClassName { get; }
    private string System.ComponentModel.Design.IDesignerHost.TransactionDescription { get; }
    private bool System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload { get; private set; }
    private bool System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors { get; private set; }
    private Type System.Reflection.IReflect.UnderlyingSystemType { get; }
    public DesignerHost(DesignSurface surface);
    private static DesignerHost();
    internal HostDesigntimeLicenseContext get_LicenseContext();
    internal bool get_IsClosingTransaction();
    internal void set_IsClosingTransaction(bool value);
    private sealed virtual override bool System.ComponentModel.Design.IDesignerHostTransactionState.get_IsClosingTransaction();
    public virtual void Add(IComponent component, string name);
    internal bool AddToContainerPreProcess(IComponent component, string name, IContainer containerToAddTo);
    internal void AddToContainerPostProcess(IComponent component, string name, IContainer containerToAddTo);
    internal void BeginLoad(DesignerLoader loader);
    protected virtual ISite CreateSite(IComponent component, string name);
    protected virtual void Dispose(bool disposing);
    internal void DisposeHost();
    internal void Flush();
    protected virtual object GetService(Type service);
    public virtual void Remove(IComponent component);
    internal bool RemoveFromContainerPreProcess(IComponent component, IContainer container);
    internal void RemoveFromContainerPostProcess(IComponent component, IContainer container);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.add_ComponentAdded(ComponentEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.remove_ComponentAdded(ComponentEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.add_ComponentAdding(ComponentEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.remove_ComponentAdding(ComponentEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.add_ComponentChanged(ComponentChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.remove_ComponentChanged(ComponentChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.add_ComponentChanging(ComponentChangingEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.remove_ComponentChanging(ComponentChangingEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.add_ComponentRemoved(ComponentEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.remove_ComponentRemoved(ComponentEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.add_ComponentRemoving(ComponentEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.remove_ComponentRemoving(ComponentEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.add_ComponentRename(ComponentRenameEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.remove_ComponentRename(ComponentRenameEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(object component, MemberDescriptor member, object oldValue, object newValue);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(object component, MemberDescriptor member);
    private sealed virtual override bool System.ComponentModel.Design.IDesignerHost.get_Loading();
    private sealed virtual override bool System.ComponentModel.Design.IDesignerHost.get_InTransaction();
    private sealed virtual override IContainer System.ComponentModel.Design.IDesignerHost.get_Container();
    private sealed virtual override IComponent System.ComponentModel.Design.IDesignerHost.get_RootComponent();
    private sealed virtual override string System.ComponentModel.Design.IDesignerHost.get_RootComponentClassName();
    private sealed virtual override string System.ComponentModel.Design.IDesignerHost.get_TransactionDescription();
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.add_Activated(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.remove_Activated(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.add_Deactivated(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.remove_Deactivated(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.add_LoadComplete(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.remove_LoadComplete(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.add_TransactionClosed(DesignerTransactionCloseEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.remove_TransactionClosed(DesignerTransactionCloseEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.add_TransactionClosing(DesignerTransactionCloseEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.remove_TransactionClosing(DesignerTransactionCloseEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.add_TransactionOpened(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.remove_TransactionOpened(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.add_TransactionOpening(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.remove_TransactionOpening(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.Activate();
    private sealed virtual override IComponent System.ComponentModel.Design.IDesignerHost.CreateComponent(Type componentType);
    private sealed virtual override IComponent System.ComponentModel.Design.IDesignerHost.CreateComponent(Type componentType, string name);
    private sealed virtual override DesignerTransaction System.ComponentModel.Design.IDesignerHost.CreateTransaction();
    private sealed virtual override DesignerTransaction System.ComponentModel.Design.IDesignerHost.CreateTransaction(string description);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.DestroyComponent(IComponent component);
    private sealed virtual override IDesigner System.ComponentModel.Design.IDesignerHost.GetDesigner(IComponent component);
    private sealed virtual override Type System.ComponentModel.Design.IDesignerHost.GetType(string typeName);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(string rootClassName, bool successful, ICollection errorCollection);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload();
    private sealed virtual override bool System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.get_IgnoreErrorsDuringReload();
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.set_IgnoreErrorsDuringReload(bool value);
    private sealed virtual override bool System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.get_CanReloadWithErrors();
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.set_CanReloadWithErrors(bool value);
    private sealed virtual override MethodInfo System.Reflection.IReflect.GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
    private sealed virtual override MethodInfo System.Reflection.IReflect.GetMethod(string name, BindingFlags bindingAttr);
    private sealed virtual override MethodInfo[] System.Reflection.IReflect.GetMethods(BindingFlags bindingAttr);
    private sealed virtual override FieldInfo System.Reflection.IReflect.GetField(string name, BindingFlags bindingAttr);
    private sealed virtual override FieldInfo[] System.Reflection.IReflect.GetFields(BindingFlags bindingAttr);
    private sealed virtual override PropertyInfo System.Reflection.IReflect.GetProperty(string name, BindingFlags bindingAttr);
    private sealed virtual override PropertyInfo System.Reflection.IReflect.GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    private sealed virtual override PropertyInfo[] System.Reflection.IReflect.GetProperties(BindingFlags bindingAttr);
    private sealed virtual override MemberInfo[] System.Reflection.IReflect.GetMember(string name, BindingFlags bindingAttr);
    private sealed virtual override MemberInfo[] System.Reflection.IReflect.GetMembers(BindingFlags bindingAttr);
    private sealed virtual override object System.Reflection.IReflect.InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters);
    private sealed virtual override Type System.Reflection.IReflect.get_UnderlyingSystemType();
    private sealed virtual override void System.ComponentModel.Design.IServiceContainer.AddService(Type serviceType, object serviceInstance);
    private sealed virtual override void System.ComponentModel.Design.IServiceContainer.AddService(Type serviceType, object serviceInstance, bool promote);
    private sealed virtual override void System.ComponentModel.Design.IServiceContainer.AddService(Type serviceType, ServiceCreatorCallback callback);
    private sealed virtual override void System.ComponentModel.Design.IServiceContainer.AddService(Type serviceType, ServiceCreatorCallback callback, bool promote);
    private sealed virtual override void System.ComponentModel.Design.IServiceContainer.RemoveService(Type serviceType);
    private sealed virtual override void System.ComponentModel.Design.IServiceContainer.RemoveService(Type serviceType, bool promote);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
[SecurityCriticalAttribute]
public class System.ComponentModel.Design.DesignSurface : object {
    public IContainer ComponentContainer { get; }
    public bool IsLoaded { get; }
    public ICollection LoadErrors { get; }
    public bool DtelLoading { get; public set; }
    protected ServiceContainer ServiceContainer { get; }
    public object View { get; }
    public DesignSurface(IServiceProvider parentProvider);
    public DesignSurface(Type rootComponentType);
    public DesignSurface(IServiceProvider parentProvider, Type rootComponentType);
    public IContainer get_ComponentContainer();
    public bool get_IsLoaded();
    public ICollection get_LoadErrors();
    [CompilerGeneratedAttribute]
public bool get_DtelLoading();
    [CompilerGeneratedAttribute]
public void set_DtelLoading(bool value);
    protected ServiceContainer get_ServiceContainer();
    public object get_View();
    [CompilerGeneratedAttribute]
public void add_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Flushed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Flushed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Loaded(LoadedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Loaded(LoadedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Loading(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Loading(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Unloaded(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Unloaded(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Unloading(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Unloading(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_ViewActivated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ViewActivated(EventHandler value);
    public void BeginLoad(DesignerLoader loader);
    public void BeginLoad(Type rootComponentType);
    [ObsoleteAttribute("CreateComponent has been replaced by CreateInstance and will be removed after Beta2")]
protected internal virtual IComponent CreateComponent(Type componentType);
    protected internal virtual IDesigner CreateDesigner(IComponent component, bool rootDesigner);
    protected internal virtual object CreateInstance(Type type);
    public INestedContainer CreateNestedContainer(IComponent owningComponent);
    public INestedContainer CreateNestedContainer(IComponent owningComponent, string containerName);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void Flush();
    public sealed virtual object GetService(Type serviceType);
    internal void OnViewActivate();
    internal void OnLoaded(bool successful, ICollection errors);
    protected virtual void OnLoaded(LoadedEventArgs e);
    internal void OnLoading();
    protected virtual void OnLoading(EventArgs e);
    internal void OnUnloaded();
    protected virtual void OnUnloaded(EventArgs e);
    internal void OnUnloading();
    protected virtual void OnUnloading(EventArgs e);
    protected virtual void OnViewActivate(EventArgs e);
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.Design.DesignSurfaceCollection : object {
    public int Count { get; }
    public DesignSurface Item { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal DesignSurfaceCollection(DesignerCollection designers);
    public int get_Count();
    public DesignSurface get_Item(int index);
    public IEnumerator GetEnumerator();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public void CopyTo(DesignSurface[] array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.ComponentModel.Design.DesignSurfaceEventArgs : EventArgs {
    public DesignSurface Surface { get; }
    public DesignSurfaceEventArgs(DesignSurface surface);
    public DesignSurface get_Surface();
}
public class System.ComponentModel.Design.DesignSurfaceEventHandler : MulticastDelegate {
    public DesignSurfaceEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DesignSurfaceEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DesignSurfaceEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[SecurityCriticalAttribute]
public class System.ComponentModel.Design.DesignSurfaceManager : object {
    public DesignSurface ActiveDesignSurface { get; public set; }
    public DesignSurfaceCollection DesignSurfaces { get; }
    protected ServiceContainer ServiceContainer { get; }
    public DesignSurfaceManager(IServiceProvider parentProvider);
    public virtual DesignSurface get_ActiveDesignSurface();
    public virtual void set_ActiveDesignSurface(DesignSurface value);
    public DesignSurfaceCollection get_DesignSurfaces();
    protected ServiceContainer get_ServiceContainer();
    public void add_ActiveDesignSurfaceChanged(ActiveDesignSurfaceChangedEventHandler value);
    public void remove_ActiveDesignSurfaceChanged(ActiveDesignSurfaceChangedEventHandler value);
    public void add_DesignSurfaceCreated(DesignSurfaceEventHandler value);
    public void remove_DesignSurfaceCreated(DesignSurfaceEventHandler value);
    public void add_DesignSurfaceDisposed(DesignSurfaceEventHandler value);
    public void remove_DesignSurfaceDisposed(DesignSurfaceEventHandler value);
    public void add_SelectionChanged(EventHandler value);
    public void remove_SelectionChanged(EventHandler value);
    public DesignSurface CreateDesignSurface();
    public DesignSurface CreateDesignSurface(IServiceProvider parentProvider);
    protected virtual DesignSurface CreateDesignSurfaceCore(IServiceProvider parentProvider);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual object GetService(Type serviceType);
}
internal class System.ComponentModel.Design.DesignSurfaceServiceContainer : ServiceContainer {
    internal DesignSurfaceServiceContainer(IServiceProvider parentProvider);
    internal void AddFixedService(Type serviceType, object serviceInstance);
    internal void RemoveFixedService(Type serviceType);
    public virtual void RemoveService(Type serviceType, bool promote);
}
public enum System.ComponentModel.Design.DisplayMode : Enum {
    public int value__;
    public static DisplayMode Hexdump;
    public static DisplayMode Ansi;
    public static DisplayMode Unicode;
    public static DisplayMode Auto;
}
[SecurityCriticalAttribute]
public abstract class System.ComponentModel.Design.EventBindingService : object {
    protected EventBindingService(IServiceProvider provider);
    private static EventBindingService();
    protected abstract virtual string CreateUniqueMethodName(IComponent component, EventDescriptor e);
    protected virtual void FreeMethod(IComponent component, EventDescriptor e, string methodName);
    protected abstract virtual ICollection GetCompatibleMethods(EventDescriptor e);
    protected object GetService(Type serviceType);
    protected abstract virtual bool ShowCode();
    protected abstract virtual bool ShowCode(int lineNumber);
    protected abstract virtual bool ShowCode(IComponent component, EventDescriptor e, string methodName);
    protected virtual void UseMethod(IComponent component, EventDescriptor e, string methodName);
    protected virtual void ValidateMethodName(string methodName);
    private sealed virtual override string System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(IComponent component, EventDescriptor e);
    private sealed virtual override ICollection System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(EventDescriptor e);
    private sealed virtual override EventDescriptor System.ComponentModel.Design.IEventBindingService.GetEvent(PropertyDescriptor property);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.Design.IEventBindingService.GetEventProperties(EventDescriptorCollection events);
    private sealed virtual override PropertyDescriptor System.ComponentModel.Design.IEventBindingService.GetEventProperty(EventDescriptor e);
    private sealed virtual override bool System.ComponentModel.Design.IEventBindingService.ShowCode();
    private sealed virtual override bool System.ComponentModel.Design.IEventBindingService.ShowCode(int lineNumber);
    private sealed virtual override bool System.ComponentModel.Design.IEventBindingService.ShowCode(IComponent component, EventDescriptor e);
}
public class System.ComponentModel.Design.ExceptionCollection : Exception {
    public ArrayList Exceptions { get; }
    public ExceptionCollection(ArrayList exceptions);
    private ExceptionCollection(SerializationInfo info, StreamingContext context);
    public ArrayList get_Exceptions();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class System.ComponentModel.Design.ExtenderProviderService : object {
    private sealed virtual override IExtenderProvider[] System.ComponentModel.Design.IExtenderListService.GetExtenderProviders();
    private sealed virtual override void System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(IExtenderProvider provider);
    private sealed virtual override void System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(IExtenderProvider provider);
}
internal class System.ComponentModel.Design.HostDesigntimeLicenseContext : DesigntimeLicenseContext {
    public HostDesigntimeLicenseContext(IServiceProvider provider);
    public virtual object GetService(Type serviceClass);
}
public interface System.ComponentModel.Design.IComponentDesignerDebugService {
    public int IndentLevel { get; public set; }
    public TraceListenerCollection Listeners { get; }
    public abstract virtual int get_IndentLevel();
    public abstract virtual void set_IndentLevel(int value);
    public abstract virtual TraceListenerCollection get_Listeners();
    public abstract virtual void Assert(bool condition, string message);
    public abstract virtual void Fail(string message);
    public abstract virtual void Trace(string message, string category);
}
public interface System.ComponentModel.Design.IComponentDesignerStateService {
    public abstract virtual object GetState(IComponent component, string key);
    public abstract virtual void SetState(IComponent component, string key, object value);
}
[ComVisibleAttribute("False")]
[GuidAttribute("665f0ba5-ce72-4e87-9ba0-3c461de74d0b")]
[InterfaceTypeAttribute("1")]
public interface System.ComponentModel.Design.IDesignTimeAssemblyLoader {
    public abstract virtual string GetTargetAssemblyPath(AssemblyName runtimeOrTargetAssemblyName, string suggestedAssemblyPath, FrameworkName targetFramework);
    public abstract virtual Assembly LoadRuntimeAssembly(AssemblyName targetAssemblyName);
}
public interface System.ComponentModel.Design.IMultitargetHelperService {
    public abstract virtual string GetAssemblyQualifiedName(Type type);
}
public class System.ComponentModel.Design.InheritanceService : object {
    private static InheritanceService();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void AddInheritedComponents(IComponent component, IContainer container);
    protected virtual void AddInheritedComponents(Type type, IComponent component, IContainer container);
    protected virtual bool IgnoreInheritedMember(MemberInfo member, IComponent component);
    public sealed virtual InheritanceAttribute GetInheritanceAttribute(IComponent component);
}
internal class System.ComponentModel.Design.InheritedPropertyDescriptor : PropertyDescriptor {
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    internal object OriginalValue { get; }
    internal PropertyDescriptor PropertyDescriptor { get; internal set; }
    public Type PropertyType { get; }
    public InheritedPropertyDescriptor(PropertyDescriptor propertyDescriptor, object component, bool rootComponent);
    private static InheritedPropertyDescriptor();
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    internal object get_OriginalValue();
    internal PropertyDescriptor get_PropertyDescriptor();
    internal void set_PropertyDescriptor(PropertyDescriptor value);
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    protected virtual void FillAttributes(IList attributeList);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
public class System.ComponentModel.Design.LoadedEventArgs : EventArgs {
    public ICollection Errors { get; }
    public bool HasSucceeded { get; }
    public LoadedEventArgs(bool succeeded, ICollection errors);
    public ICollection get_Errors();
    public bool get_HasSucceeded();
}
public class System.ComponentModel.Design.LoadedEventHandler : MulticastDelegate {
    public LoadedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoadedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoadedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ProvidePropertyAttribute("Language", "System.Object")]
[ProvidePropertyAttribute("LoadLanguage", "System.Object")]
[ProvidePropertyAttribute("Localizable", "System.Object")]
[ObsoleteAttribute("This class has been deprecated. Use CodeDomLocalizationProvider instead.  http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.ComponentModel.Design.LocalizationExtenderProvider : object {
    public LocalizationExtenderProvider(ISite serviceProvider, IComponent baseComponent);
    private static LocalizationExtenderProvider();
    [DesignOnlyAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ParentControlDesignerLanguageDescr")]
public CultureInfo GetLanguage(object o);
    [DesignOnlyAttribute("True")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public CultureInfo GetLoadLanguage(object o);
    [DesignOnlyAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ParentControlDesignerLocalizableDescr")]
public bool GetLocalizable(object o);
    public void SetLanguage(object o, CultureInfo language);
    public void SetLocalizable(object o, bool localizable);
    public bool ShouldSerializeLanguage(object o);
    public void ResetLanguage(object o);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual bool CanExtend(object o);
}
[ComVisibleAttribute("True")]
public class System.ComponentModel.Design.MenuCommandsChangedEventArgs : EventArgs {
    public MenuCommandsChangedType ChangeType { get; }
    public MenuCommand Command { get; }
    public MenuCommandsChangedEventArgs(MenuCommandsChangedType changeType, MenuCommand command);
    public MenuCommandsChangedType get_ChangeType();
    public MenuCommand get_Command();
}
[ComVisibleAttribute("True")]
public class System.ComponentModel.Design.MenuCommandsChangedEventHandler : MulticastDelegate {
    public MenuCommandsChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MenuCommandsChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MenuCommandsChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
public enum System.ComponentModel.Design.MenuCommandsChangedType : Enum {
    public int value__;
    public static MenuCommandsChangedType CommandAdded;
    public static MenuCommandsChangedType CommandRemoved;
    public static MenuCommandsChangedType CommandChanged;
}
public class System.ComponentModel.Design.MenuCommandService : object {
    internal static TraceSwitch MENUSERVICE;
    public DesignerVerbCollection Verbs { get; }
    public MenuCommandService(IServiceProvider serviceProvider);
    private static MenuCommandService();
    public void add_MenuCommandsChanged(MenuCommandsChangedEventHandler value);
    public void remove_MenuCommandsChanged(MenuCommandsChangedEventHandler value);
    public virtual DesignerVerbCollection get_Verbs();
    public virtual void AddCommand(MenuCommand command);
    public virtual void AddVerb(DesignerVerb verb);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected void EnsureVerbs();
    public sealed virtual MenuCommand FindCommand(CommandID commandID);
    protected MenuCommand FindCommand(Guid guid, int id);
    protected ICollection GetCommandList(Guid guid);
    protected object GetService(Type serviceType);
    public virtual bool GlobalInvoke(CommandID commandID);
    public virtual bool GlobalInvoke(CommandID commandId, object arg);
    protected virtual void OnCommandsChanged(MenuCommandsChangedEventArgs e);
    public virtual void RemoveCommand(MenuCommand command);
    public virtual void RemoveVerb(DesignerVerb verb);
    public virtual void ShowContextMenu(CommandID menuID, int x, int y);
}
public class System.ComponentModel.Design.MultilineStringEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
}
public abstract class System.ComponentModel.Design.ObjectSelectorEditor : UITypeEditor {
    public bool SubObjectSelector;
    protected object prevValue;
    protected object currValue;
    public ObjectSelectorEditor(bool subObjectSelector);
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    public bool EqualsToValue(object value);
    protected virtual void FillTreeWithData(Selector selector, ITypeDescriptorContext context, IServiceProvider provider);
    public virtual void SetValue(object value);
}
[AttributeUsageAttribute("1036")]
public class System.ComponentModel.Design.ProjectTargetFrameworkAttribute : Attribute {
    public string TargetFrameworkMoniker { get; }
    public ProjectTargetFrameworkAttribute(string targetFrameworkMoniker);
    public string get_TargetFrameworkMoniker();
}
internal class System.ComponentModel.Design.ReferenceService : object {
    internal ReferenceService(IServiceProvider provider);
    private static ReferenceService();
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override IComponent System.ComponentModel.Design.IReferenceService.GetComponent(object reference);
    private sealed virtual override string System.ComponentModel.Design.IReferenceService.GetName(object reference);
    private sealed virtual override object System.ComponentModel.Design.IReferenceService.GetReference(string name);
    private sealed virtual override Object[] System.ComponentModel.Design.IReferenceService.GetReferences();
    private sealed virtual override Object[] System.ComponentModel.Design.IReferenceService.GetReferences(Type baseType);
}
internal static class System.ComponentModel.Design.RuntimeComponentFilter : object {
    public static void FilterProperties(IDictionary properties, ICollection makeReadWrite, ICollection makeBrowsable);
    public static void FilterProperties(IDictionary properties, ICollection makeReadWrite, ICollection makeBrowsable, Boolean[] browsableSettings);
}
internal class System.ComponentModel.Design.SelectionService : object {
    private object System.ComponentModel.Design.ISelectionService.PrimarySelection { get; }
    private int System.ComponentModel.Design.ISelectionService.SelectionCount { get; }
    internal SelectionService(IServiceProvider provider);
    private static SelectionService();
    internal void AddSelection(object sel);
    internal void RemoveSelection(object sel);
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override object System.ComponentModel.Design.ISelectionService.get_PrimarySelection();
    private sealed virtual override int System.ComponentModel.Design.ISelectionService.get_SelectionCount();
    private sealed virtual override void System.ComponentModel.Design.ISelectionService.add_SelectionChanged(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.ISelectionService.remove_SelectionChanged(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.ISelectionService.add_SelectionChanging(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.ISelectionService.remove_SelectionChanging(EventHandler value);
    private sealed virtual override bool System.ComponentModel.Design.ISelectionService.GetComponentSelected(object component);
    private sealed virtual override ICollection System.ComponentModel.Design.ISelectionService.GetSelectedComponents();
    private sealed virtual override void System.ComponentModel.Design.ISelectionService.SetSelectedComponents(ICollection components);
    private sealed virtual override void System.ComponentModel.Design.ISelectionService.SetSelectedComponents(ICollection components, SelectionTypes selectionType);
}
[SecurityCriticalAttribute]
public abstract class System.ComponentModel.Design.Serialization.BasicDesignerLoader : DesignerLoader {
    protected bool Modified { get; protected set; }
    protected IDesignerLoaderHost LoaderHost { get; }
    public bool Loading { get; }
    protected object PropertyProvider { get; protected set; }
    protected bool ReloadPending { get; }
    private static BasicDesignerLoader();
    protected virtual bool get_Modified();
    protected virtual void set_Modified(bool value);
    protected IDesignerLoaderHost get_LoaderHost();
    public virtual bool get_Loading();
    protected object get_PropertyProvider();
    protected void set_PropertyProvider(object value);
    protected bool get_ReloadPending();
    public virtual void BeginLoad(IDesignerLoaderHost host);
    public virtual void Dispose();
    public virtual void Flush();
    protected object GetService(Type serviceType);
    protected virtual void Initialize();
    protected virtual bool IsReloadNeeded();
    protected virtual void OnBeginLoad();
    protected virtual bool EnableComponentNotification(bool enable);
    protected virtual void OnBeginUnload();
    protected virtual void OnEndLoad(bool successful, ICollection errors);
    protected virtual void OnModifying();
    protected abstract virtual void PerformFlush(IDesignerSerializationManager serializationManager);
    protected abstract virtual void PerformLoad(IDesignerSerializationManager serializationManager);
    protected void Reload(ReloadOptions flags);
    protected virtual void ReportFlushErrors(ICollection errors);
    protected void SetBaseComponentClassName(string name);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency();
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(bool successful, ICollection errorCollection);
    private sealed virtual override bool System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload();
}
public class System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService : ComponentSerializationService {
    public CodeDomComponentSerializationService(IServiceProvider provider);
    public virtual SerializationStore CreateStore();
    public virtual SerializationStore LoadStore(Stream stream);
    public virtual void Serialize(SerializationStore store, object value);
    public virtual void SerializeAbsolute(SerializationStore store, object value);
    public virtual void SerializeMember(SerializationStore store, object owningObject, MemberDescriptor member);
    public virtual void SerializeMemberAbsolute(SerializationStore store, object owningObject, MemberDescriptor member);
    public virtual ICollection Deserialize(SerializationStore store);
    public virtual ICollection Deserialize(SerializationStore store, IContainer container);
    public virtual void DeserializeTo(SerializationStore store, IContainer container, bool validateRecycledTypes, bool applyDefaults);
}
[SecurityCriticalAttribute]
public abstract class System.ComponentModel.Design.Serialization.CodeDomDesignerLoader : BasicDesignerLoader {
    protected CodeDomProvider CodeDomProvider { get; }
    protected ITypeResolutionService TypeResolutionService { get; }
    private static CodeDomDesignerLoader();
    protected abstract virtual CodeDomProvider get_CodeDomProvider();
    protected abstract virtual ITypeResolutionService get_TypeResolutionService();
    public virtual void Dispose();
    protected virtual void Initialize();
    protected virtual bool IsReloadNeeded();
    protected virtual void OnBeginLoad();
    protected virtual void OnBeginUnload();
    protected virtual void OnEndLoad(bool successful, ICollection errors);
    protected abstract virtual CodeCompileUnit Parse();
    protected virtual void PerformFlush(IDesignerSerializationManager manager);
    protected virtual void PerformLoad(IDesignerSerializationManager manager);
    protected virtual void OnComponentRename(object component, string oldName, string newName);
    protected abstract virtual void Write(CodeCompileUnit unit);
    private sealed virtual override ICollection System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(object serializationData);
    private sealed virtual override object System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(ICollection objects);
    private sealed virtual override string System.ComponentModel.Design.Serialization.INameCreationService.CreateName(IContainer container, Type dataType);
    private sealed virtual override bool System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(string name);
    private sealed virtual override void System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(string name);
}
public enum System.ComponentModel.Design.Serialization.CodeDomLocalizationModel : Enum {
    public int value__;
    public static CodeDomLocalizationModel None;
    public static CodeDomLocalizationModel PropertyAssignment;
    public static CodeDomLocalizationModel PropertyReflection;
}
public class System.ComponentModel.Design.Serialization.CodeDomLocalizationProvider : object {
    public CodeDomLocalizationProvider(IServiceProvider provider, CodeDomLocalizationModel model);
    public CodeDomLocalizationProvider(IServiceProvider provider, CodeDomLocalizationModel model, CultureInfo[] supportedCultures);
    public sealed virtual void Dispose();
    private sealed virtual override object System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType);
}
internal class System.ComponentModel.Design.Serialization.CodeDomSerializationProvider : object {
    private sealed virtual override object System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType);
}
[DefaultSerializationProviderAttribute("System.ComponentModel.Design.Serialization.CodeDomSerializationProvider")]
public class System.ComponentModel.Design.Serialization.CodeDomSerializer : CodeDomSerializerBase {
    internal static CodeDomSerializer Default { get; }
    private static CodeDomSerializer();
    internal static CodeDomSerializer get_Default();
    public virtual string GetTargetComponentName(CodeStatement statement, CodeExpression expression, Type targetType);
    public virtual object Deserialize(IDesignerSerializationManager manager, object codeObject);
    protected object DeserializeStatementToInstance(IDesignerSerializationManager manager, CodeStatement statement);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
    public virtual object SerializeAbsolute(IDesignerSerializationManager manager, object value);
    public virtual CodeStatementCollection SerializeMember(IDesignerSerializationManager manager, object owningObject, MemberDescriptor member);
    public virtual CodeStatementCollection SerializeMemberAbsolute(IDesignerSerializationManager manager, object owningObject, MemberDescriptor member);
    [ObsoleteAttribute("This method has been deprecated. Use SerializeToExpression or GetExpression instead.  http://go.microsoft.com/fwlink/?linkid=14202")]
protected CodeExpression SerializeToReferenceExpression(IDesignerSerializationManager manager, object value);
}
[EditorBrowsableAttribute("1")]
public abstract class System.ComponentModel.Design.Serialization.CodeDomSerializerBase : object {
    private static CodeDomSerializerBase();
    protected virtual object DeserializeInstance(IDesignerSerializationManager manager, Type type, Object[] parameters, string name, bool addToContainer);
    internal static string GetTypeNameFromCodeTypeReference(IDesignerSerializationManager manager, CodeTypeReference typeref);
    protected static TypeDescriptionProvider GetTargetFrameworkProvider(IServiceProvider provider, object instance);
    protected static Type GetReflectionTypeFromTypeHelper(IDesignerSerializationManager manager, Type type);
    protected static Type GetReflectionTypeHelper(IDesignerSerializationManager manager, object instance);
    protected static PropertyDescriptorCollection GetPropertiesHelper(IDesignerSerializationManager manager, object instance, Attribute[] attributes);
    protected static EventDescriptorCollection GetEventsHelper(IDesignerSerializationManager manager, object instance, Attribute[] attributes);
    protected static AttributeCollection GetAttributesHelper(IDesignerSerializationManager manager, object instance);
    protected static AttributeCollection GetAttributesFromTypeHelper(IDesignerSerializationManager manager, Type type);
    protected object DeserializeExpression(IDesignerSerializationManager manager, string name, CodeExpression expression);
    protected void DeserializePropertiesFromResources(IDesignerSerializationManager manager, object value, Attribute[] filter);
    protected void DeserializeStatement(IDesignerSerializationManager manager, CodeStatement statement);
    internal static void Error(IDesignerSerializationManager manager, string exceptionText, string helpLink);
    protected CodeExpression GetExpression(IDesignerSerializationManager manager, object value);
    protected CodeDomSerializer GetSerializer(IDesignerSerializationManager manager, object value);
    protected CodeDomSerializer GetSerializer(IDesignerSerializationManager manager, Type valueType);
    protected bool IsSerialized(IDesignerSerializationManager manager, object value);
    protected bool IsSerialized(IDesignerSerializationManager manager, object value, bool honorPreset);
    protected CodeExpression SerializeCreationExpression(IDesignerSerializationManager manager, object value, Boolean& isComplete);
    protected string GetUniqueName(IDesignerSerializationManager manager, object value);
    protected void SerializeEvent(IDesignerSerializationManager manager, CodeStatementCollection statements, object value, EventDescriptor descriptor);
    protected void SerializeEvents(IDesignerSerializationManager manager, CodeStatementCollection statements, object value, Attribute[] filter);
    protected void SerializeProperties(IDesignerSerializationManager manager, CodeStatementCollection statements, object value, Attribute[] filter);
    protected void SerializePropertiesToResources(IDesignerSerializationManager manager, CodeStatementCollection statements, object value, Attribute[] filter);
    protected void SerializeProperty(IDesignerSerializationManager manager, CodeStatementCollection statements, object value, PropertyDescriptor propertyToSerialize);
    protected void SerializeResource(IDesignerSerializationManager manager, string resourceName, object value);
    protected void SerializeResourceInvariant(IDesignerSerializationManager manager, string resourceName, object value);
    protected CodeExpression SerializeToExpression(IDesignerSerializationManager manager, object value);
    protected CodeExpression SerializeToResourceExpression(IDesignerSerializationManager manager, object value);
    protected CodeExpression SerializeToResourceExpression(IDesignerSerializationManager manager, object value, bool ensureInvariant);
    protected void SetExpression(IDesignerSerializationManager manager, object value, CodeExpression expression);
    protected void SetExpression(IDesignerSerializationManager manager, object value, CodeExpression expression, bool isPreset);
    [ConditionalAttribute("DEBUG")]
internal static void Trace(string message, Object[] values);
    [ConditionalAttribute("DEBUG")]
internal static void Trace(CodeTypeDeclaration typeDecl);
    [ConditionalAttribute("DEBUG")]
internal static void TraceError(string message, Object[] values);
    [ConditionalAttribute("DEBUG")]
internal static void TraceErrorIf(bool condition, string message, Object[] values);
    [ConditionalAttribute("DEBUG")]
internal static void TraceIf(bool condition, string message, Object[] values);
    internal static IDisposable TraceScope(string name);
    [ConditionalAttribute("DEBUG")]
internal static void TraceWarning(string message, Object[] values);
    [ConditionalAttribute("DEBUG")]
internal static void TraceWarningIf(bool condition, string message, Object[] values);
    internal static Type GetType(IDesignerSerializationManager manager, string name, Dictionary`2<string, string> names);
    internal static void FillStatementTable(IDesignerSerializationManager manager, IDictionary table, CodeStatementCollection statements);
    internal static void FillStatementTable(IDesignerSerializationManager manager, IDictionary table, Dictionary`2<string, string> names, CodeStatementCollection statements, string className);
}
public class System.ComponentModel.Design.Serialization.CodeDomSerializerException : SystemException {
    public CodeLinePragma LinePragma { get; }
    public CodeDomSerializerException(string message, CodeLinePragma linePragma);
    public CodeDomSerializerException(Exception ex, CodeLinePragma linePragma);
    public CodeDomSerializerException(string message, IDesignerSerializationManager manager);
    public CodeDomSerializerException(Exception ex, IDesignerSerializationManager manager);
    protected CodeDomSerializerException(SerializationInfo info, StreamingContext context);
    public CodeLinePragma get_LinePragma();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class System.ComponentModel.Design.Serialization.CodeMethodMap : object {
    internal CodeStatementCollection BeginStatements { get; }
    internal CodeStatementCollection EndStatements { get; }
    internal CodeStatementCollection ContainerStatements { get; }
    internal CodeMemberMethod Method { get; }
    internal CodeStatementCollection Statements { get; }
    internal CodeStatementCollection LocalVariables { get; }
    internal CodeStatementCollection FieldAssignments { get; }
    internal CodeStatementCollection VariableAssignments { get; }
    internal CodeMethodMap(CodeMemberMethod method);
    internal CodeMethodMap(CodeStatementCollection targetStatements, CodeMemberMethod method);
    internal CodeStatementCollection get_BeginStatements();
    internal CodeStatementCollection get_EndStatements();
    internal CodeStatementCollection get_ContainerStatements();
    internal CodeMemberMethod get_Method();
    internal CodeStatementCollection get_Statements();
    internal CodeStatementCollection get_LocalVariables();
    internal CodeStatementCollection get_FieldAssignments();
    internal CodeStatementCollection get_VariableAssignments();
    internal void Add(CodeStatementCollection statements);
    internal void Combine();
}
public class System.ComponentModel.Design.Serialization.CollectionCodeDomSerializer : CodeDomSerializer {
    internal static CollectionCodeDomSerializer Default { get; }
    internal static CollectionCodeDomSerializer get_Default();
    protected bool MethodSupportsSerialization(MethodInfo method);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
    protected virtual object SerializeCollection(IDesignerSerializationManager manager, CodeExpression targetExpression, Type targetType, ICollection originalCollection, ICollection valuesToSerialize);
}
[DefaultMemberAttribute("Item")]
internal class System.ComponentModel.Design.Serialization.ComponentCache : object {
    internal bool Enabled { get; }
    internal Entry Item { get; internal set; }
    internal ComponentCache(IDesignerSerializationManager manager);
    internal bool get_Enabled();
    internal Entry get_Item(object component);
    internal void set_Item(object component, Entry value);
    internal Entry GetEntryAll(object component);
    internal bool ContainsLocalName(string name);
    public sealed virtual void Dispose();
    internal void RemoveEntry(object component);
}
internal class System.ComponentModel.Design.Serialization.ComponentCodeDomSerializer : CodeDomSerializer {
    internal static ComponentCodeDomSerializer Default { get; }
    private static ComponentCodeDomSerializer();
    internal static ComponentCodeDomSerializer get_Default();
    protected virtual object DeserializeInstance(IDesignerSerializationManager manager, Type type, Object[] parameters, string name, bool addToContainer);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
internal class System.ComponentModel.Design.Serialization.ComponentTypeCodeDomSerializer : TypeCodeDomSerializer {
    internal static ComponentTypeCodeDomSerializer Default { get; }
    private static ComponentTypeCodeDomSerializer();
    internal static ComponentTypeCodeDomSerializer get_Default();
    protected virtual CodeMemberMethod GetInitializeMethod(IDesignerSerializationManager manager, CodeTypeDeclaration typeDecl, object value);
    protected virtual CodeMemberMethod[] GetInitializeMethods(IDesignerSerializationManager manager, CodeTypeDeclaration typeDecl);
}
internal class System.ComponentModel.Design.Serialization.ContainerCodeDomSerializer : CodeDomSerializer {
    internal static ContainerCodeDomSerializer Default { get; }
    internal static ContainerCodeDomSerializer get_Default();
    protected virtual object DeserializeInstance(IDesignerSerializationManager manager, Type type, Object[] parameters, string name, bool addToContainer);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
public class System.ComponentModel.Design.Serialization.DesignerSerializationManager : object {
    public IContainer Container { get; public set; }
    public IList Errors { get; }
    public bool PreserveNames { get; public set; }
    public object PropertyProvider { get; public set; }
    public bool RecycleInstances { get; public set; }
    public bool ValidateRecycledTypes { get; public set; }
    private ContextStack System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context { get; }
    private PropertyDescriptorCollection System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties { get; }
    internal ArrayList SerializationProviders { get; }
    public DesignerSerializationManager(IServiceProvider provider);
    public IContainer get_Container();
    public void set_Container(IContainer value);
    public IList get_Errors();
    public bool get_PreserveNames();
    public void set_PreserveNames(bool value);
    public object get_PropertyProvider();
    public void set_PropertyProvider(object value);
    public bool get_RecycleInstances();
    public void set_RecycleInstances(bool value);
    public bool get_ValidateRecycledTypes();
    public void set_ValidateRecycledTypes(bool value);
    public void add_SessionCreated(EventHandler value);
    public void remove_SessionCreated(EventHandler value);
    public void add_SessionDisposed(EventHandler value);
    public void remove_SessionDisposed(EventHandler value);
    protected virtual object CreateInstance(Type type, ICollection arguments, string name, bool addToContainer);
    public IDisposable CreateSession();
    public object GetSerializer(Type objectType, Type serializerType);
    protected virtual object GetService(Type serviceType);
    protected virtual Type GetType(string typeName);
    public Type GetRuntimeType(string typeName);
    protected virtual void OnResolveName(ResolveNameEventArgs e);
    protected virtual void OnSessionCreated(EventArgs e);
    protected virtual void OnSessionDisposed(EventArgs e);
    private sealed virtual override ContextStack System.ComponentModel.Design.Serialization.IDesignerSerializationManager.get_Context();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.Design.Serialization.IDesignerSerializationManager.get_Properties();
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.add_ResolveName(ResolveNameEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.remove_ResolveName(ResolveNameEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.add_SerializationComplete(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.remove_SerializationComplete(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider provider);
    private sealed virtual override object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(Type type, ICollection arguments, string name, bool addToContainer);
    private sealed virtual override object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(string name);
    private sealed virtual override string System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(object value);
    private sealed virtual override object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(Type objectType, Type serializerType);
    private sealed virtual override Type System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(string typeName);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider provider);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(object errorInformation);
    internal ArrayList get_SerializationProviders();
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(object instance, string name);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
internal class System.ComponentModel.Design.Serialization.EnumCodeDomSerializer : CodeDomSerializer {
    internal static EnumCodeDomSerializer Default { get; }
    internal static EnumCodeDomSerializer get_Default();
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
internal class System.ComponentModel.Design.Serialization.EventMemberCodeDomSerializer : MemberCodeDomSerializer {
    internal static EventMemberCodeDomSerializer Default { get; }
    private static EventMemberCodeDomSerializer();
    internal static EventMemberCodeDomSerializer get_Default();
    public virtual void Serialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor, CodeStatementCollection statements);
    public virtual bool ShouldSerialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor);
}
public class System.ComponentModel.Design.Serialization.ExpressionContext : object {
    public CodeExpression Expression { get; }
    public Type ExpressionType { get; }
    public object Owner { get; }
    public object PresetValue { get; }
    public ExpressionContext(CodeExpression expression, Type expressionType, object owner, object presetValue);
    public ExpressionContext(CodeExpression expression, Type expressionType, object owner);
    public CodeExpression get_Expression();
    public Type get_ExpressionType();
    public object get_Owner();
    public object get_PresetValue();
}
internal class System.ComponentModel.Design.Serialization.ExpressionTable : object {
    internal void SetExpression(object value, CodeExpression expression, bool isPreset);
    internal CodeExpression GetExpression(object value);
    internal bool ContainsPresetExpression(object value);
}
public interface System.ComponentModel.Design.Serialization.ICodeDomDesignerReload {
    public abstract virtual bool ShouldReloadDesigner(CodeCompileUnit newTree);
}
internal class System.ComponentModel.Design.Serialization.LocalizationCodeDomSerializer : CodeDomSerializer {
    internal LocalizationCodeDomSerializer(CodeDomLocalizationModel model, object currentSerializer);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
public abstract class System.ComponentModel.Design.Serialization.MemberCodeDomSerializer : CodeDomSerializerBase {
    public abstract virtual void Serialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor, CodeStatementCollection statements);
    public abstract virtual bool ShouldSerialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor);
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.Design.Serialization.ObjectStatementCollection : object {
    public CodeStatementCollection Item { get; }
    public CodeStatementCollection get_Item(object statementOwner);
    public bool ContainsKey(object statementOwner);
    public IDictionaryEnumerator GetEnumerator();
    public void Populate(ICollection statementOwners);
    public void Populate(object owner);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.ComponentModel.Design.Serialization.PrimitiveCodeDomSerializer : CodeDomSerializer {
    internal static PrimitiveCodeDomSerializer Default { get; }
    private static PrimitiveCodeDomSerializer();
    internal static PrimitiveCodeDomSerializer get_Default();
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
internal class System.ComponentModel.Design.Serialization.PropertyMemberCodeDomSerializer : MemberCodeDomSerializer {
    internal static PropertyMemberCodeDomSerializer Default { get; }
    internal static PropertyMemberCodeDomSerializer get_Default();
    public virtual void Serialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor, CodeStatementCollection statements);
    public virtual bool ShouldSerialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor);
}
internal class System.ComponentModel.Design.Serialization.ResourceCodeDomSerializer : CodeDomSerializer {
    internal static ResourceCodeDomSerializer Default { get; }
    internal static ResourceCodeDomSerializer get_Default();
    public virtual string GetTargetComponentName(CodeStatement statement, CodeExpression expression, Type type);
    public virtual object Deserialize(IDesignerSerializationManager manager, object codeObject);
    protected virtual object DeserializeInstance(IDesignerSerializationManager manager, Type type, Object[] parameters, string name, bool addToContainer);
    public object DeserializeInvariant(IDesignerSerializationManager manager, string resourceName);
    public IDictionaryEnumerator GetEnumerator(IDesignerSerializationManager manager, CultureInfo culture);
    public IDictionaryEnumerator GetMetadataEnumerator(IDesignerSerializationManager manager);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
    public object Serialize(IDesignerSerializationManager manager, object value, bool shouldSerializeInvariant);
    public object Serialize(IDesignerSerializationManager manager, object value, bool shouldSerializeInvariant, bool ensureInvariant);
    public object SerializeInvariant(IDesignerSerializationManager manager, object value, bool shouldSerializeValue);
    public void SerializeMetadata(IDesignerSerializationManager manager, string name, object value, bool shouldSerializeValue);
    public void WriteResource(IDesignerSerializationManager manager, string name, object value);
    public void WriteResourceInvariant(IDesignerSerializationManager manager, string name, object value);
    internal void ApplyCacheEntry(IDesignerSerializationManager manager, Entry entry);
}
internal class System.ComponentModel.Design.Serialization.ResourcePropertyMemberCodeDomSerializer : MemberCodeDomSerializer {
    internal ResourcePropertyMemberCodeDomSerializer(MemberCodeDomSerializer serializer, LanguageExtenders extender, CodeDomLocalizationModel model);
    public virtual void Serialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor, CodeStatementCollection statements);
    public virtual bool ShouldSerialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor);
}
internal class System.ComponentModel.Design.Serialization.RootCodeDomSerializer : ComponentCodeDomSerializer {
    public string ContainerName { get; }
    public bool ContainerRequired { get; public set; }
    public string InitMethodName { get; }
    private static RootCodeDomSerializer();
    public string get_ContainerName();
    public bool get_ContainerRequired();
    public void set_ContainerRequired(bool value);
    public string get_InitMethodName();
    public virtual object Deserialize(IDesignerSerializationManager manager, object codeObject);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
public class System.ComponentModel.Design.Serialization.RootContext : object {
    public CodeExpression Expression { get; }
    public object Value { get; }
    public RootContext(CodeExpression expression, object value);
    public CodeExpression get_Expression();
    public object get_Value();
}
public class System.ComponentModel.Design.Serialization.SerializeAbsoluteContext : object {
    public MemberDescriptor Member { get; }
    public SerializeAbsoluteContext(MemberDescriptor member);
    public MemberDescriptor get_Member();
    public bool ShouldSerialize(MemberDescriptor member);
}
public class System.ComponentModel.Design.Serialization.StatementContext : object {
    public ObjectStatementCollection StatementCollection { get; }
    public ObjectStatementCollection get_StatementCollection();
}
[DefaultSerializationProviderAttribute("System.ComponentModel.Design.Serialization.CodeDomSerializationProvider")]
public class System.ComponentModel.Design.Serialization.TypeCodeDomSerializer : CodeDomSerializerBase {
    internal static TypeCodeDomSerializer Default { get; }
    private static TypeCodeDomSerializer();
    internal static TypeCodeDomSerializer get_Default();
    public virtual object Deserialize(IDesignerSerializationManager manager, CodeTypeDeclaration declaration);
    protected virtual CodeMemberMethod GetInitializeMethod(IDesignerSerializationManager manager, CodeTypeDeclaration declaration, object value);
    protected virtual CodeMemberMethod[] GetInitializeMethods(IDesignerSerializationManager manager, CodeTypeDeclaration declaration);
    public virtual CodeTypeDeclaration Serialize(IDesignerSerializationManager manager, object root, ICollection members);
}
internal class System.ComponentModel.Design.SiteNestedContainer : NestedContainer {
    protected string OwnerName { get; }
    internal SiteNestedContainer(IComponent owner, string containerName, DesignerHost host);
    protected virtual string get_OwnerName();
    public virtual void Add(IComponent component, string name);
    protected virtual ISite CreateSite(IComponent component, string name);
    public virtual void Remove(IComponent component);
    protected virtual object GetService(Type serviceType);
    internal object GetServiceInternal(Type serviceType);
}
internal class System.ComponentModel.Design.TypeDescriptorFilterService : object {
    private sealed virtual override bool System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(IComponent component, IDictionary attributes);
    private sealed virtual override bool System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(IComponent component, IDictionary events);
    private sealed virtual override bool System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(IComponent component, IDictionary properties);
}
public abstract class System.ComponentModel.Design.UndoEngine : object {
    public bool UndoInProgress { get; }
    public bool Enabled { get; public set; }
    internal IComponentChangeService ComponentChangeService { get; }
    protected UndoEngine(IServiceProvider provider);
    private static UndoEngine();
    public bool get_UndoInProgress();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public void add_Undoing(EventHandler value);
    public void remove_Undoing(EventHandler value);
    public void add_Undone(EventHandler value);
    public void remove_Undone(EventHandler value);
    protected abstract virtual void AddUndoUnit(UndoUnit unit);
    protected virtual UndoUnit CreateUndoUnit(string name, bool primary);
    internal IComponentChangeService get_ComponentChangeService();
    protected virtual void DiscardUndoUnit(UndoUnit unit);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal string GetName(object obj, bool generateNew);
    protected object GetRequiredService(Type serviceType);
    protected object GetService(Type serviceType);
    protected virtual void OnUndoing(EventArgs e);
    protected virtual void OnUndone(EventArgs e);
}
internal static class System.Configuration.ConfigurationStringConstants : object {
    internal static string WinformsApplicationConfigurationSectionName;
    internal static string DpiAwarenessKeyName;
    internal static string EnableWindowsFormsHighDpiAutoResizingKeyName;
    internal static string ToolStripDisableHighDpiImprovementsKeyName;
    internal static string CheckedListBoxDisableHighDpiImprovementsKeyName;
    internal static string DataGridViewControlDisableHighDpiImprovements;
    internal static string FormDisableSinglePassScalingOfDpiFormsKeyName;
    internal static string DisableDpiChangedMessageHandlingKeyName;
    internal static string AnchorLayoutDisableHighDpiImprovementsKeyName;
    internal static string MonthCalendarDisableHighDpiImprovementsKeyName;
}
internal enum System.Data.Design.ADODataType : Enum {
    public int value__;
    public static ADODataType adEmpty;
    public static ADODataType adTinyInt;
    public static ADODataType adSmallInt;
    public static ADODataType adInteger;
    public static ADODataType adBigInt;
    public static ADODataType adUnsignedTinyInt;
    public static ADODataType adUnsignedSmallInt;
    public static ADODataType adUnsignedInt;
    public static ADODataType adUnsignedBigInt;
    public static ADODataType adSingle;
    public static ADODataType adDouble;
    public static ADODataType adCurrency;
    public static ADODataType adDecimal;
    public static ADODataType adNumeric;
    public static ADODataType adBoolean;
    public static ADODataType adError;
    public static ADODataType adUserDefined;
    public static ADODataType adVariant;
    public static ADODataType adIDispatch;
    public static ADODataType adIUnknown;
    public static ADODataType adGUID;
    public static ADODataType adDate;
    public static ADODataType adDBDate;
    public static ADODataType adDBTime;
    public static ADODataType adDBTimeStamp;
    public static ADODataType adBSTR;
    public static ADODataType adChar;
    public static ADODataType adVarChar;
    public static ADODataType adLongVarChar;
    public static ADODataType adWChar;
    public static ADODataType adVarWChar;
    public static ADODataType adLongVarWChar;
    public static ADODataType adBinary;
    public static ADODataType adVarBinary;
    public static ADODataType adLongVarBinary;
    public static ADODataType adChapter;
    public static ADODataType adFileTime;
    public static ADODataType adPropVariant;
    public static ADODataType adVarNumeric;
    public static ADODataType adArray;
}
internal class System.Data.Design.CodeGenHelper : object {
    internal static CodeExpression This();
    internal static CodeExpression Base();
    internal static CodeExpression Value();
    internal static CodeTypeReference Type(string type);
    internal static CodeTypeReference Type(Type type);
    internal static CodeTypeReference NullableType(Type type);
    internal static CodeTypeReference Type(string type, int rank);
    internal static CodeTypeReference GlobalType(Type type);
    internal static CodeTypeReference GlobalType(Type type, int rank);
    internal static CodeTypeReference GlobalType(string type);
    internal static CodeTypeReferenceExpression TypeExpr(CodeTypeReference type);
    internal static CodeTypeReferenceExpression GlobalTypeExpr(Type type);
    internal static CodeTypeReferenceExpression GlobalTypeExpr(string type);
    internal static CodeTypeReference GlobalGenericType(string fullTypeName, Type itemType);
    internal static CodeTypeReference GlobalGenericType(string fullTypeName, CodeTypeReference itemType);
    internal static CodeExpression Cast(CodeTypeReference type, CodeExpression expr);
    internal static CodeExpression TypeOf(CodeTypeReference type);
    internal static CodeExpression Field(CodeExpression exp, string field);
    internal static CodeExpression ThisField(string field);
    internal static CodeExpression Property(CodeExpression exp, string property);
    internal static CodeExpression ThisProperty(string property);
    internal static CodeExpression Argument(string argument);
    internal static CodeExpression Variable(string variable);
    internal static CodeExpression Event(string eventName);
    internal static CodeExpression New(CodeTypeReference type, CodeExpression[] parameters);
    internal static CodeExpression NewArray(CodeTypeReference type, int size);
    internal static CodeExpression NewArray(CodeTypeReference type, CodeExpression[] initializers);
    internal static CodeExpression Primitive(object primitive);
    internal static CodeExpression Str(string str);
    internal static CodeExpression MethodCall(CodeExpression targetObject, string methodName, CodeExpression[] parameters);
    internal static CodeStatement MethodCallStm(CodeExpression targetObject, string methodName, CodeExpression[] parameters);
    internal static CodeExpression MethodCall(CodeExpression targetObject, string methodName);
    internal static CodeStatement MethodCallStm(CodeExpression targetObject, string methodName);
    internal static CodeExpression MethodCall(CodeExpression targetObject, string methodName, CodeExpression par);
    internal static CodeStatement MethodCallStm(CodeExpression targetObject, string methodName, CodeExpression par);
    internal static CodeExpression DelegateCall(CodeExpression targetObject, CodeExpression par);
    internal static CodeExpression Indexer(CodeExpression targetObject, CodeExpression indices);
    internal static CodeExpression ArrayIndexer(CodeExpression targetObject, CodeExpression indices);
    internal static CodeExpression ReferenceEquals(CodeExpression left, CodeExpression right);
    internal static CodeExpression ReferenceNotEquals(CodeExpression left, CodeExpression right);
    internal static CodeBinaryOperatorExpression BinOperator(CodeExpression left, CodeBinaryOperatorType op, CodeExpression right);
    internal static CodeBinaryOperatorExpression IdNotEQ(CodeExpression left, CodeExpression right);
    internal static CodeBinaryOperatorExpression IdEQ(CodeExpression left, CodeExpression right);
    internal static CodeBinaryOperatorExpression IdIsNull(CodeExpression id);
    internal static CodeBinaryOperatorExpression IdIsNotNull(CodeExpression id);
    internal static CodeBinaryOperatorExpression EQ(CodeExpression left, CodeExpression right);
    internal static CodeBinaryOperatorExpression NotEQ(CodeExpression left, CodeExpression right);
    internal static CodeBinaryOperatorExpression BitwiseAnd(CodeExpression left, CodeExpression right);
    internal static CodeBinaryOperatorExpression And(CodeExpression left, CodeExpression right);
    internal static CodeBinaryOperatorExpression Or(CodeExpression left, CodeExpression right);
    internal static CodeBinaryOperatorExpression Less(CodeExpression left, CodeExpression right);
    internal static CodeStatement Stm(CodeExpression expr);
    internal static CodeStatement Return(CodeExpression expr);
    internal static CodeStatement Return();
    internal static CodeStatement Assign(CodeExpression left, CodeExpression right);
    internal static CodeStatement Throw(CodeTypeReference exception, string arg);
    internal static CodeStatement Throw(CodeTypeReference exception, string arg, string inner);
    internal static CodeStatement Throw(CodeTypeReference exception, string arg, CodeExpression inner);
    internal static CodeCommentStatement Comment(string comment, bool docSummary);
    internal static CodeStatement If(CodeExpression cond, CodeStatement[] trueStms, CodeStatement[] falseStms);
    internal static CodeStatement If(CodeExpression cond, CodeStatement trueStm, CodeStatement falseStm);
    internal static CodeStatement If(CodeExpression cond, CodeStatement[] trueStms);
    internal static CodeStatement If(CodeExpression cond, CodeStatement trueStm);
    internal static CodeMemberField FieldDecl(CodeTypeReference type, string name);
    internal static CodeMemberField FieldDecl(CodeTypeReference type, string name, CodeExpression initExpr);
    internal static CodeTypeDeclaration Class(string name, bool isPartial, TypeAttributes typeAttributes);
    internal static CodeConstructor Constructor(MemberAttributes attributes);
    internal static CodeMemberMethod MethodDecl(CodeTypeReference type, string name, MemberAttributes attributes);
    internal static CodeMemberProperty PropertyDecl(CodeTypeReference type, string name, MemberAttributes attributes);
    internal static CodeStatement VariableDecl(CodeTypeReference type, string name);
    internal static CodeStatement VariableDecl(CodeTypeReference type, string name, CodeExpression initExpr);
    internal static CodeStatement ForLoop(CodeStatement initStmt, CodeExpression testExpression, CodeStatement incrementStmt, CodeStatement[] statements);
    internal static CodeMemberEvent EventDecl(string type, string name);
    internal static CodeParameterDeclarationExpression ParameterDecl(CodeTypeReference type, string name);
    internal static CodeAttributeDeclaration AttributeDecl(string name);
    internal static CodeAttributeDeclaration AttributeDecl(string name, CodeExpression value);
    internal static CodeAttributeDeclaration AttributeDecl(string name, CodeExpression value1, CodeExpression value2);
    internal static CodeAttributeDeclaration GeneratedCodeAttributeDecl();
    internal static CodeStatement Try(CodeStatement tryStmnt, CodeCatchClause catchClause);
    internal static CodeStatement Try(CodeStatement[] tryStmnts, CodeCatchClause[] catchClauses, CodeStatement[] finallyStmnts);
    internal static CodeCatchClause Catch(CodeTypeReference type, string name, CodeStatement catchStmnt);
    internal static FieldDirection ParameterDirectionToFieldDirection(ParameterDirection paramDirection);
    internal static CodeExpression GenerateDbNullCheck(CodeExpression returnParam);
    internal static CodeExpression GenerateNullExpression(Type returnType);
    internal static CodeExpression GenerateConvertExpression(CodeExpression sourceExpression, Type sourceType, Type targetType);
    internal static string GetTypeName(CodeDomProvider codeProvider, string string1, string string2);
    internal static bool SupportsMultipleNamespaces(CodeDomProvider codeProvider);
    internal static DSGeneratorProblem GenerateValueExprAndFieldInit(DesignColumn designColumn, object valueObj, object value, string className, string fieldName, CodeExpression& valueExpr, CodeExpression& fieldInit);
    internal static string GetLanguageExtension(CodeDomProvider codeProvider);
    internal static bool IsGeneratingJSharpCode(CodeDomProvider codeProvider);
}
internal enum System.Data.Design.CommandOperation : Enum {
    public int value__;
    public static CommandOperation Unknown;
    public static CommandOperation Select;
    public static CommandOperation Insert;
    public static CommandOperation Update;
    public static CommandOperation Delete;
}
internal class System.Data.Design.ConnectionString : object {
    public ConnectionString(string providerName, string connectionString);
    public string ToFullString();
}
internal class System.Data.Design.ConversionHelper : object {
    private static ConversionHelper();
    internal static bool CanConvert(Type sourceUrtType, Type destinationUrtType);
    internal static string GetConversionMethodName(Type sourceUrtType, Type targetUrtType);
}
internal class System.Data.Design.DataAccessor : DataSourceComponent {
    internal static string DEFAULT_BASE_CLASS;
    internal static string DEFAULT_NAME_POSTFIX;
    internal DesignTable DesignTable { get; }
    public DataAccessor(DesignTable designTable);
    internal DesignTable get_DesignTable();
}
internal class System.Data.Design.DataComponentGenerator : object {
    internal DataComponentGenerator(TypedDataSourceCodeGenerator codeGenerator);
    private static DataComponentGenerator();
    internal CodeTypeDeclaration GenerateDataComponent(DesignTable designTable, bool isFunctionsComponent, bool generateHierarchicalUpdate);
}
internal class System.Data.Design.DataComponentMethodGenerator : object {
    internal DataComponentMethodGenerator(TypedDataSourceCodeGenerator codeGenerator, DesignTable designTable, bool generateHierarchicalUpdate);
    internal void AddMethods(CodeTypeDeclaration dataComponentClass, bool isFunctionsDataComponent);
}
internal class System.Data.Design.DataComponentNameHandler : object {
    internal bool GlobalSources { get; internal set; }
    internal static string DeleteMethodName { get; }
    internal static string UpdateMethodName { get; }
    internal static string InsertMethodName { get; }
    internal static string AdapterVariableName { get; }
    internal static string AdapterPropertyName { get; }
    internal static string InitAdapter { get; }
    internal static string SelectCmdCollectionVariableName { get; }
    internal static string SelectCmdCollectionPropertyName { get; }
    internal static string InitCmdCollection { get; }
    internal static string DefaultConnectionVariableName { get; }
    internal static string DefaultConnectionPropertyName { get; }
    internal static string TransactionPropertyName { get; }
    internal static string TransactionVariableName { get; }
    internal static string InitConnection { get; }
    internal static string PagingMethodSuffix { get; }
    internal static string ClearBeforeFillVariableName { get; }
    internal static string ClearBeforeFillPropertyName { get; }
    private static DataComponentNameHandler();
    internal bool get_GlobalSources();
    internal void set_GlobalSources(bool value);
    internal void GenerateMemberNames(DesignTable designTable, CodeDomProvider codeProvider, bool languageCaseInsensitive, ArrayList problemList);
    internal void ProcessClassName(DesignTable table);
    internal void ProcessSourceName(DbSource source);
    internal static string get_DeleteMethodName();
    internal static string get_UpdateMethodName();
    internal static string get_InsertMethodName();
    internal static string get_AdapterVariableName();
    internal static string get_AdapterPropertyName();
    internal static string get_InitAdapter();
    internal static string get_SelectCmdCollectionVariableName();
    internal static string get_SelectCmdCollectionPropertyName();
    internal static string get_InitCmdCollection();
    internal static string get_DefaultConnectionVariableName();
    internal static string get_DefaultConnectionPropertyName();
    internal static string get_TransactionPropertyName();
    internal static string get_TransactionVariableName();
    internal static string get_InitConnection();
    internal static string get_PagingMethodSuffix();
    internal static string get_ClearBeforeFillVariableName();
    internal static string get_ClearBeforeFillPropertyName();
}
internal class System.Data.Design.DataDesignUtil : object {
    internal static string DataSetClassName;
    private static DataDesignUtil();
    internal static String[] MapColumnNames(DataColumnMappingCollection mappingCollection, String[] names, MappingDirection direction);
    public static void CopyColumn(DataColumn srcColumn, DataColumn destColumn);
    public static DataColumn CloneColumn(DataColumn column);
}
internal class System.Data.Design.DatasetMethodGenerator : object {
    internal DatasetMethodGenerator(TypedDataSourceCodeGenerator codeGenerator, DesignDataSource dataSource);
    private static DatasetMethodGenerator();
    internal void AddMethods(CodeTypeDeclaration dataSourceClass);
    internal static void GetSchemaIsInCollection(CodeStatementCollection statements, string dsName, string collectionName);
}
internal class System.Data.Design.DataSetNameService : SimpleNameService {
    internal static DataSetNameService DefaultInstance { get; }
    internal static DataSetNameService get_DefaultInstance();
    public virtual void ValidateName(string name);
}
internal abstract class System.Data.Design.DataSourceCollectionBase : CollectionBase {
    internal DataSourceComponent CollectionHost { get; internal set; }
    protected Type ItemType { get; }
    protected INameService NameService { get; }
    [BrowsableAttribute("False")]
private object System.Data.Design.IObjectWithParent.Parent { get; }
    internal DataSourceCollectionBase(DataSourceComponent collectionHost);
    internal virtual DataSourceComponent get_CollectionHost();
    internal virtual void set_CollectionHost(DataSourceComponent value);
    protected virtual Type get_ItemType();
    protected abstract virtual INameService get_NameService();
    private sealed virtual override object System.Data.Design.IObjectWithParent.get_Parent();
    protected virtual string CreateUniqueName(IDataSourceNamedObject value);
    protected internal virtual void EnsureUniqueName(IDataSourceNamedObject namedObject);
    protected internal virtual IDataSourceNamedObject FindObject(string name);
    public void InsertBefore(object value, object refObject);
    protected virtual void OnValidate(object value);
    public sealed virtual void Remove(string name);
    protected internal virtual void ValidateName(IDataSourceNamedObject obj);
    protected internal virtual void ValidateUniqueName(IDataSourceNamedObject obj, string proposedName);
    protected void ValidateType(object value);
    public sealed virtual INameService GetNameService();
}
internal abstract class System.Data.Design.DataSourceComponent : Component {
    protected internal DataSourceCollectionBase CollectionParent { get; protected internal set; }
    protected object ExternalPropertyHost { get; }
    [BrowsableAttribute("False")]
public object Parent { get; }
    internal StringCollection NamingPropertyNames { get; }
    [BrowsableAttribute("False")]
public string GeneratorName { get; }
    protected internal virtual DataSourceCollectionBase get_CollectionParent();
    protected internal virtual void set_CollectionParent(DataSourceCollectionBase value);
    protected virtual object get_ExternalPropertyHost();
    public virtual object get_Parent();
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private PropertyDescriptorCollection GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
    protected virtual object GetService(Type service);
    public virtual void SetCollection(DataSourceCollectionBase collection);
    internal void SetPropertyValue(string propertyName, object value);
    internal virtual StringCollection get_NamingPropertyNames();
    public virtual string get_GeneratorName();
}
internal class System.Data.Design.DataSourceGeneratorException : Exception {
    internal DataSourceGeneratorException(string message);
}
internal class System.Data.Design.DataSourceNameHandler : object {
    internal static string TablesPropertyName { get; }
    internal static string RelationsPropertyName { get; }
    private static DataSourceNameHandler();
    internal void GenerateMemberNames(DesignDataSource dataSource, CodeDomProvider codeProvider, bool languageCaseInsensitive, ArrayList problemList);
    internal void ProcessMemberNames(DesignDataSource dataSource);
    internal void ProcessDataSourceName(DesignDataSource dataSource);
    internal void ProcessTableRelatedNames(DesignTable table);
    internal void ProcessRelationRelatedNames(DesignRelation relation);
    internal static string get_TablesPropertyName();
    internal static string get_RelationsPropertyName();
}
internal class System.Data.Design.DataSourceSerializationException : ApplicationException {
    public DataSourceSerializationException(string message);
}
[AttributeUsageAttribute("128")]
internal class System.Data.Design.DataSourceXmlAttributeAttribute : DataSourceXmlSerializationAttribute {
    internal DataSourceXmlAttributeAttribute(string attributeName);
}
[AttributeUsageAttribute("4")]
internal class System.Data.Design.DataSourceXmlClassAttribute : Attribute {
    public string Name { get; public set; }
    internal DataSourceXmlClassAttribute(string elementName);
    public string get_Name();
    public void set_Name(string value);
}
[AttributeUsageAttribute("128")]
internal class System.Data.Design.DataSourceXmlElementAttribute : DataSourceXmlSerializationAttribute {
    internal DataSourceXmlElementAttribute(string elementName);
}
internal abstract class System.Data.Design.DataSourceXmlSerializationAttribute : Attribute {
    public Type ItemType { get; public set; }
    public string Name { get; public set; }
    public bool SpecialWay { get; public set; }
    public Type get_ItemType();
    public void set_ItemType(Type value);
    public string get_Name();
    public void set_Name(string value);
    public bool get_SpecialWay();
    public void set_SpecialWay(bool value);
}
internal class System.Data.Design.DataSourceXmlSerializer : object {
    internal object Deserialize(XmlElement xmlElement);
    internal void DeserializeBody(XmlElement xmlElement, object obj);
    internal void InitializeObjects();
    internal void Serialize(XmlWriter xmlWriter, object obj);
    internal void SerializeBody(XmlWriter xmlWriter, object obj);
}
[AttributeUsageAttribute("128")]
internal class System.Data.Design.DataSourceXmlSubItemAttribute : DataSourceXmlSerializationAttribute {
    internal DataSourceXmlSubItemAttribute(Type itemType);
}
internal class System.Data.Design.DataSourceXmlTextReader : XmlTextReader {
    internal DataSourceXmlTextReader(DesignDataSource dataSource, TextReader textReader, string baseURI);
    internal DataSourceXmlTextReader(DesignDataSource dataSource, Stream stream, string baseURI);
    public virtual bool Read();
}
internal class System.Data.Design.DataTableNameHandler : object {
    internal void GenerateMemberNames(DesignTable designTable, CodeDomProvider codeProvider, bool languageCaseInsensitive, ArrayList problemList);
    internal void ProcessChildRelationName(DesignRelation relation);
    internal void ProcessParentRelationName(DesignRelation relation);
    internal void ProcessEventNames(DesignTable designTable);
}
internal enum System.Data.Design.DbObjectType : Enum {
    public int value__;
    public static DbObjectType Unknown;
    public static DbObjectType Table;
    public static DbObjectType View;
    public static DbObjectType StoredProcedure;
    public static DbObjectType Function;
    public static DbObjectType Package;
    public static DbObjectType PackageBody;
}
[DataSourceXmlClassAttribute("DbSource")]
internal class System.Data.Design.DbSource : Source {
    internal static string TYPE_NAME_FOR_QUERY;
    internal static string TYPE_NAME_FOR_FUNCTION;
    internal static string INSTANCE_NAME_FOR_FILLMETHOD_MAIN;
    internal static string INSTANCE_NAME_FOR_GETMETHOD_MAIN;
    internal static string INSTANCE_NAME_FOR_FILLMETHOD;
    internal static string INSTANCE_NAME_FOR_GETMETHOD;
    internal static string INSTANCE_NAME_FOR_FUNCTION;
    protected internal DataSourceCollectionBase CollectionParent { get; }
    [BrowsableAttribute("False")]
[DataSourceXmlAttributeAttribute]
public string ConnectionRef { get; public set; }
    [BrowsableAttribute("False")]
[DataSourceXmlAttributeAttribute]
public Type ScalarCallRetval { get; }
    [DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
public IDesignConnection Connection { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DataSourceXmlAttributeAttribute]
public TypeEnum MethodsParameterType { get; public set; }
    public CommandOperation CommandOperation { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DataSourceXmlAttributeAttribute]
public MemberAttributes FillMethodModifier { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DataSourceXmlAttributeAttribute]
public MemberAttributes GetMethodModifier { get; public set; }
    [BrowsableAttribute("False")]
public string Name { get; public set; }
    [DataSourceXmlAttributeAttribute]
[DefaultValueAttribute("Fill")]
public string FillMethodName { get; public set; }
    [DefaultValueAttribute("GetData")]
[DataSourceXmlAttributeAttribute]
public string GetMethodName { get; public set; }
    [DataSourceXmlAttributeAttribute]
public string UserGetMethodName { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DataSourceXmlAttributeAttribute]
[RefreshPropertiesAttribute("1")]
public GenerateMethodTypes GenerateMethods { get; public set; }
    [DefaultValueAttribute("True")]
[DataSourceXmlAttributeAttribute]
public bool GeneratePagingMethods { get; public set; }
    [BrowsableAttribute("False")]
public object Parent { get; }
    [BrowsableAttribute("False")]
public string PublicTypeName { get; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
public QueryType QueryType { get; public set; }
    [DataSourceXmlSubItemAttribute]
[BrowsableAttribute("False")]
public DbSourceCommand SelectCommand { get; public set; }
    [DataSourceXmlSubItemAttribute]
[BrowsableAttribute("False")]
public DbSourceCommand UpdateCommand { get; public set; }
    [DataSourceXmlSubItemAttribute]
[BrowsableAttribute("False")]
public DbSourceCommand DeleteCommand { get; public set; }
    [DataSourceXmlSubItemAttribute]
[BrowsableAttribute("False")]
public DbSourceCommand InsertCommand { get; public set; }
    [DataSourceXmlAttributeAttribute]
public DbObjectType DbObjectType { get; public set; }
    [DataSourceXmlAttributeAttribute]
public bool UseOptimisticConcurrency { get; public set; }
    [DataSourceXmlAttributeAttribute]
public bool GenerateShortCommands { get; public set; }
    protected internal virtual DataSourceCollectionBase get_CollectionParent();
    public string get_ConnectionRef();
    public void set_ConnectionRef(string value);
    public Type get_ScalarCallRetval();
    public IDesignConnection get_Connection();
    public void set_Connection(IDesignConnection value);
    public TypeEnum get_MethodsParameterType();
    public void set_MethodsParameterType(TypeEnum value);
    public CommandOperation get_CommandOperation();
    public MemberAttributes get_FillMethodModifier();
    public void set_FillMethodModifier(MemberAttributes value);
    public MemberAttributes get_GetMethodModifier();
    public void set_GetMethodModifier(MemberAttributes value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public string get_FillMethodName();
    public void set_FillMethodName(string value);
    public string get_GetMethodName();
    public void set_GetMethodName(string value);
    public string get_UserGetMethodName();
    public void set_UserGetMethodName(string value);
    public GenerateMethodTypes get_GenerateMethods();
    public void set_GenerateMethods(GenerateMethodTypes value);
    public bool get_GeneratePagingMethods();
    public void set_GeneratePagingMethods(bool value);
    public virtual object get_Parent();
    public virtual string get_PublicTypeName();
    public QueryType get_QueryType();
    public void set_QueryType(QueryType value);
    public DbSourceCommand get_SelectCommand();
    public void set_SelectCommand(DbSourceCommand value);
    public DbSourceCommand get_UpdateCommand();
    public void set_UpdateCommand(DbSourceCommand value);
    public DbSourceCommand get_DeleteCommand();
    public void set_DeleteCommand(DbSourceCommand value);
    public DbSourceCommand get_InsertCommand();
    public void set_InsertCommand(DbSourceCommand value);
    public DbObjectType get_DbObjectType();
    public void set_DbObjectType(DbObjectType value);
    public bool get_UseOptimisticConcurrency();
    public void set_UseOptimisticConcurrency(bool value);
    internal virtual bool NameExist(string nameToCheck);
    public virtual object Clone();
    public bool get_GenerateShortCommands();
    public void set_GenerateShortCommands(bool value);
    internal DbSourceCommand GetActiveCommand();
    private sealed virtual override void System.Data.Design.IDataSourceXmlSpecialOwner.ReadSpecialItem(string propertyName, XmlNode xmlNode, DataSourceXmlSerializer serializer);
    private sealed virtual override void System.Data.Design.IDataSourceXmlSpecialOwner.WriteSpecialItem(string propertyName, XmlWriter writer, DataSourceXmlSerializer serializer);
}
[DataSourceXmlClassAttribute("DbCommand")]
[DefaultPropertyAttribute("CommandText")]
internal class System.Data.Design.DbSourceCommand : DataSourceComponent {
    internal CommandOperation CommandOperation { get; internal set; }
    [DataSourceXmlElementAttribute]
[BrowsableAttribute("False")]
public string CommandText { get; public set; }
    [DataSourceXmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public CommandType CommandType { get; public set; }
    [BrowsableAttribute("False")]
[DataSourceXmlAttributeAttribute]
public bool ModifiedByUser { get; public set; }
    [BrowsableAttribute("False")]
public string Name { get; public set; }
    [DataSourceXmlSubItemAttribute]
public DbSourceParameterCollection Parameters { get; }
    [BrowsableAttribute("False")]
public object Parent { get; }
    public DbSourceCommand(DbSource parent, CommandOperation operation);
    internal CommandOperation get_CommandOperation();
    internal void set_CommandOperation(CommandOperation value);
    public string get_CommandText();
    public void set_CommandText(string value);
    public CommandType get_CommandType();
    public void set_CommandType(CommandType value);
    public bool get_ModifiedByUser();
    public void set_ModifiedByUser(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public DbSourceParameterCollection get_Parameters();
    public virtual object get_Parent();
    public sealed virtual object Clone();
    internal void SetParent(DbSource parent);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Design.DbSourceParameterCollection : DataSourceCollectionBase {
    protected INameService NameService { get; }
    private object System.Data.IDataParameterCollection.Item { get; private set; }
    public DesignParameter Item { get; }
    protected Type ItemType { get; }
    internal DbSourceParameterCollection(DataSourceComponent collectionHost);
    protected virtual INameService get_NameService();
    private sealed virtual override object System.Data.IDataParameterCollection.get_Item(string parameterName);
    private sealed virtual override void System.Data.IDataParameterCollection.set_Item(string parameterName, object value);
    public DesignParameter get_Item(int index);
    public sealed virtual bool Contains(string value);
    public sealed virtual int IndexOf(string parameterName);
    public sealed virtual void RemoveAt(string parameterName);
    protected virtual Type get_ItemType();
    public sealed virtual object Clone();
}
internal class System.Data.Design.DesignColumn : DataSourceComponent {
    internal static string EXTPROPNAME_USER_COLUMNNAME;
    internal static string EXTPROPNAME_GENERATOR_COLUMNPROPNAMEINTABLE;
    internal static string EXTPROPNAME_GENERATOR_COLUMNVARNAMEINTABLE;
    internal static string EXTPROPNAME_GENERATOR_COLUMNPROPNAMEINROW;
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("False")]
public bool AutoIncrement { get; public set; }
    public DataColumn DataColumn { get; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Type DataType { get; public set; }
    internal DesignTable DesignTable { get; internal set; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
public string Expression { get; public set; }
    protected object ExternalPropertyHost { get; }
    [DefaultValueAttribute("-1")]
public int MaxLength { get; public set; }
    [DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
public string Name { get; public set; }
    [DefaultValueAttribute("_throw")]
public string NullValue { get; public set; }
    [BrowsableAttribute("False")]
public string PublicTypeName { get; }
    [DefaultValueAttribute("")]
public string Source { get; public set; }
    [DefaultValueAttribute("False")]
public bool Unique { get; public set; }
    internal string UserColumnName { get; internal set; }
    internal string GeneratorColumnPropNameInTable { get; internal set; }
    internal string GeneratorColumnVarNameInTable { get; internal set; }
    internal string GeneratorColumnPropNameInRow { get; internal set; }
    internal StringCollection NamingPropertyNames { get; }
    [BrowsableAttribute("False")]
public string GeneratorName { get; }
    public DesignColumn(DataColumn dataColumn);
    private static DesignColumn();
    public bool get_AutoIncrement();
    public void set_AutoIncrement(bool value);
    public DataColumn get_DataColumn();
    public Type get_DataType();
    public void set_DataType(Type value);
    internal DesignTable get_DesignTable();
    internal void set_DesignTable(DesignTable value);
    public string get_Expression();
    public void set_Expression(string value);
    protected virtual object get_ExternalPropertyHost();
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public string get_NullValue();
    public void set_NullValue(string value);
    public sealed virtual string get_PublicTypeName();
    public string get_Source();
    public void set_Source(string value);
    public bool get_Unique();
    public void set_Unique(bool value);
    public sealed virtual object Clone();
    internal bool IsKeyColumn();
    public virtual string ToString();
    internal string get_UserColumnName();
    internal void set_UserColumnName(string value);
    internal string get_GeneratorColumnPropNameInTable();
    internal void set_GeneratorColumnPropNameInTable(string value);
    internal string get_GeneratorColumnVarNameInTable();
    internal void set_GeneratorColumnVarNameInTable(string value);
    internal string get_GeneratorColumnPropNameInRow();
    internal void set_GeneratorColumnPropNameInRow(string value);
    internal virtual StringCollection get_NamingPropertyNames();
    public virtual string get_GeneratorName();
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Design.DesignColumnCollection : DataSourceCollectionBase {
    protected Type ItemType { get; }
    protected INameService NameService { get; }
    public DesignColumn Item { get; }
    public DesignColumn Item { get; }
    public DesignColumnCollection(DesignTable designTable);
    protected virtual Type get_ItemType();
    protected virtual INameService get_NameService();
    public void Add(DesignColumn designColumn);
    public void Remove(DesignColumn column);
    public int IndexOf(DesignColumn column);
    public DesignColumn get_Item(string columnName);
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnSet(int index, object oldValue, object newValue);
    protected virtual void OnRemove(int index, object value);
    public DesignColumn get_Item(int index);
}
[DataSourceXmlClassAttribute("Connection")]
internal class System.Data.Design.DesignConnection : DataSourceComponent {
    internal static string ConnectionNameRegex { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DataSourceXmlAttributeAttribute]
public MemberAttributes Modifier { get; public set; }
    [DataSourceXmlAttributeAttribute]
public string Name { get; public set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
public ConnectionString ConnectionStringObject { get; public set; }
    public string ConnectionString { get; public set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
public string Provider { get; public set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
public bool IsAppSettingsProperty { get; public set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
public string AppSettingsObjectName { get; public set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
public CodePropertyReferenceExpression PropertyReference { get; public set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
public string ParameterPrefix { get; public set; }
    [BrowsableAttribute("False")]
public IDictionary Properties { get; }
    [BrowsableAttribute("False")]
public string PublicTypeName { get; }
    public DesignConnection(string connectionName, ConnectionString cs, string provider);
    public DesignConnection(string connectionName, IDbConnection conn);
    private static DesignConnection();
    internal static string get_ConnectionNameRegex();
    public MemberAttributes get_Modifier();
    public void set_Modifier(MemberAttributes value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual ConnectionString get_ConnectionStringObject();
    public sealed virtual void set_ConnectionStringObject(ConnectionString value);
    public sealed virtual string get_ConnectionString();
    public sealed virtual void set_ConnectionString(string value);
    public sealed virtual string get_Provider();
    public sealed virtual void set_Provider(string value);
    public sealed virtual bool get_IsAppSettingsProperty();
    public sealed virtual void set_IsAppSettingsProperty(bool value);
    public sealed virtual string get_AppSettingsObjectName();
    public sealed virtual void set_AppSettingsObjectName(string value);
    public sealed virtual CodePropertyReferenceExpression get_PropertyReference();
    public sealed virtual void set_PropertyReference(CodePropertyReferenceExpression value);
    public string get_ParameterPrefix();
    public void set_ParameterPrefix(string value);
    public sealed virtual IDictionary get_Properties();
    public sealed virtual string get_PublicTypeName();
    public sealed virtual IDbConnection CreateEmptyDbConnection();
    public sealed virtual object Clone();
    private sealed virtual override void System.Data.Design.IDataSourceInitAfterLoading.InitializeAfterLoading();
    private sealed virtual override void System.Data.Design.IDataSourceXmlSpecialOwner.ReadSpecialItem(string propertyName, XmlNode xmlNode, DataSourceXmlSerializer serializer);
    private sealed virtual override void System.Data.Design.IDataSourceXmlSpecialOwner.WriteSpecialItem(string propertyName, XmlWriter writer, DataSourceXmlSerializer serializer);
}
internal class System.Data.Design.DesignConnectionCollection : DataSourceCollectionBase {
    protected Type ItemType { get; }
    protected INameService NameService { get; }
    internal DesignConnectionCollection(DataSourceComponent collectionHost);
    protected virtual Type get_ItemType();
    protected virtual INameService get_NameService();
    public sealed virtual IDesignConnection Get(string name);
    protected virtual void OnSet(int index, object oldValue, object newValue);
    public sealed virtual void Set(IDesignConnection connection);
    public bool Contains(IDesignConnection connection);
    public int Add(IDesignConnection connection);
    public void Remove(IDesignConnection connection);
}
[DataSourceXmlClassAttribute("DataSource")]
internal class System.Data.Design.DesignDataSource : DataSourceComponent {
    internal static string EXTPROPNAME_USER_DATASETNAME;
    internal static string EXTPROPNAME_GENERATOR_DATASETNAME;
    internal DataSet DataSet { get; }
    [DisplayNameAttribute("DefaultConnection")]
public DesignConnection DefaultConnection { get; }
    [DisplayNameAttribute("Connections")]
[DataSourceXmlSubItemAttribute]
[BrowsableAttribute("False")]
public DesignConnectionCollection DesignConnections { get; }
    [BrowsableAttribute("False")]
public DesignRelationCollection DesignRelations { get; }
    [DataSourceXmlSubItemAttribute]
[BrowsableAttribute("False")]
public DesignTableCollection DesignTables { get; }
    [DefaultValueAttribute("True")]
public bool EnableTableAdapterManager { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DataSourceXmlAttributeAttribute]
public TypeAttributes Modifier { get; public set; }
    [MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
public string PublicTypeName { get; }
    [DataSourceXmlSubItemAttribute("System.Data.Design.Source")]
[BrowsableAttribute("False")]
public SourceCollection Sources { get; }
    [DataSourceXmlAttributeAttribute]
public SchemaSerializationMode SchemaSerializationMode { get; public set; }
    internal string UserDataSetName { get; internal set; }
    internal string GeneratorDataSetName { get; internal set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string FunctionsComponentName { get; public set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string UserFunctionsComponentName { get; public set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string GeneratorFunctionsComponentClassName { get; public set; }
    internal StringCollection NamingPropertyNames { get; }
    private static DesignDataSource();
    internal DataSet get_DataSet();
    public DesignConnection get_DefaultConnection();
    public DesignConnectionCollection get_DesignConnections();
    public DesignRelationCollection get_DesignRelations();
    public DesignTableCollection get_DesignTables();
    public bool get_EnableTableAdapterManager();
    public void set_EnableTableAdapterManager(bool value);
    public TypeAttributes get_Modifier();
    public void set_Modifier(TypeAttributes value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual string get_PublicTypeName();
    public SourceCollection get_Sources();
    public SchemaSerializationMode get_SchemaSerializationMode();
    public void set_SchemaSerializationMode(SchemaSerializationMode value);
    internal string get_UserDataSetName();
    internal void set_UserDataSetName(string value);
    internal string get_GeneratorDataSetName();
    internal void set_GeneratorDataSetName(string value);
    public string get_FunctionsComponentName();
    public void set_FunctionsComponentName(string value);
    public string get_UserFunctionsComponentName();
    public void set_UserFunctionsComponentName(string value);
    public string get_GeneratorFunctionsComponentClassName();
    public void set_GeneratorFunctionsComponentClassName(string value);
    internal virtual StringCollection get_NamingPropertyNames();
    private sealed virtual override void System.Data.Design.IDataSourceCommandTarget.AddChild(object child, bool fixName);
    private sealed virtual override bool System.Data.Design.IDataSourceCommandTarget.CanAddChildOfType(Type childType);
    private sealed virtual override bool System.Data.Design.IDataSourceCommandTarget.CanInsertChildOfType(Type childType, object refChild);
    private sealed virtual override bool System.Data.Design.IDataSourceCommandTarget.CanRemoveChildren(ICollection children);
    internal ArrayList GetRelatedRelations(ICollection tableList);
    private sealed virtual override void System.Data.Design.IDataSourceCommandTarget.InsertChild(object child, object refChild);
    private sealed virtual override object System.Data.Design.IDataSourceCommandTarget.GetObject(int index, bool getSiblingIfOutOfRange);
    private sealed virtual override int System.Data.Design.IDataSourceCommandTarget.IndexOf(object child);
    public void ReadXmlSchema(Stream stream, string baseURI);
    public void ReadXmlSchema(TextReader textReader, string baseURI);
    internal void ReadDataSourceExtraInformation(XmlTextReader xmlTextReader);
    private sealed virtual override void System.Data.Design.IDataSourceCommandTarget.RemoveChildren(ICollection children);
}
[DataSourceXmlClassAttribute("Parameter")]
internal class System.Data.Design.DesignParameter : DataSourceComponent {
    public static string DEFAULT_RETVAL_NAME;
    [DataSourceXmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool AllowDbNull { get; public set; }
    [DataSourceXmlAttributeAttribute]
[MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
public string ParameterName { get; public set; }
    [DataSourceXmlAttributeAttribute]
public string ColumnName { get; public set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
public string AutogeneratedName { get; public set; }
    [DataSourceXmlAttributeAttribute]
public DbType DbType { get; public set; }
    [DataSourceXmlAttributeAttribute]
public string ProviderType { get; public set; }
    [DataSourceXmlAttributeAttribute]
[DefaultValueAttribute("0")]
public byte Precision { get; public set; }
    [DataSourceXmlAttributeAttribute]
[DefaultValueAttribute("0")]
public byte Scale { get; public set; }
    [DataSourceXmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int Size { get; public set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
public string DataTypeServer { get; public set; }
    [DataSourceXmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ParameterDirection Direction { get; public set; }
    [DefaultValueAttribute("")]
[DataSourceXmlAttributeAttribute]
public string SourceColumn { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DataSourceXmlAttributeAttribute]
public DataRowVersion SourceVersion { get; public set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
public string DataSourceName { get; public set; }
    private string System.Data.Design.INamedObject.Name { get; private set; }
    private string System.Data.Design.IDataSourceNamedObject.PublicTypeName { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[DesignOnlyAttribute("True")]
[EditorBrowsableAttribute("1")]
public bool IsNullable { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public object Value { get; public set; }
    [BrowsableAttribute("False")]
public string Name { get; }
    [DefaultValueAttribute("False")]
[DataSourceXmlAttributeAttribute]
public bool SourceColumnNullMapping { get; public set; }
    public DesignParameter(string name);
    private static DesignParameter();
    public bool get_AllowDbNull();
    public void set_AllowDbNull(bool value);
    public sealed virtual string get_ParameterName();
    public sealed virtual void set_ParameterName(string value);
    public string get_ColumnName();
    public void set_ColumnName(string value);
    public string get_AutogeneratedName();
    public void set_AutogeneratedName(string value);
    public sealed virtual DbType get_DbType();
    public sealed virtual void set_DbType(DbType value);
    public string get_ProviderType();
    public void set_ProviderType(string value);
    public sealed virtual byte get_Precision();
    public sealed virtual void set_Precision(byte value);
    public sealed virtual byte get_Scale();
    public sealed virtual void set_Scale(byte value);
    public sealed virtual int get_Size();
    public sealed virtual void set_Size(int value);
    public string get_DataTypeServer();
    public void set_DataTypeServer(string value);
    public sealed virtual ParameterDirection get_Direction();
    public sealed virtual void set_Direction(ParameterDirection value);
    public sealed virtual string get_SourceColumn();
    public sealed virtual void set_SourceColumn(string value);
    public sealed virtual DataRowVersion get_SourceVersion();
    public sealed virtual void set_SourceVersion(DataRowVersion value);
    public string get_DataSourceName();
    public void set_DataSourceName(string value);
    private sealed virtual override string System.Data.Design.INamedObject.get_Name();
    private sealed virtual override void System.Data.Design.INamedObject.set_Name(string value);
    private sealed virtual override string System.Data.Design.IDataSourceNamedObject.get_PublicTypeName();
    public sealed virtual bool get_IsNullable();
    public sealed virtual object get_Value();
    public sealed virtual void set_Value(object value);
    public string get_Name();
    public bool get_SourceColumnNullMapping();
    public void set_SourceColumnNullMapping(bool value);
    public virtual string ToString();
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public sealed virtual object Clone();
    public static DesignParameter GetDefaultRetvalParam();
}
internal class System.Data.Design.DesignRelation : DataSourceComponent {
    internal static string NAMEROOT;
    internal DataColumn[] ChildDataColumns { get; }
    internal DesignTable ChildDesignTable { get; }
    internal DataRelation DataRelation { get; internal set; }
    internal ForeignKeyConstraint ForeignKeyConstraint { get; internal set; }
    [MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
public string Name { get; public set; }
    internal DesignDataSource Owner { get; internal set; }
    internal DataColumn[] ParentDataColumns { get; }
    internal DesignTable ParentDesignTable { get; }
    [BrowsableAttribute("False")]
public string PublicTypeName { get; }
    internal string UserRelationName { get; internal set; }
    internal string UserParentTable { get; internal set; }
    internal string UserChildTable { get; internal set; }
    internal string GeneratorRelationVarName { get; internal set; }
    internal string GeneratorChildPropName { get; internal set; }
    internal string GeneratorParentPropName { get; internal set; }
    internal StringCollection NamingPropertyNames { get; }
    public DesignRelation(DataRelation dataRelation);
    public DesignRelation(ForeignKeyConstraint foreignKeyConstraint);
    internal DataColumn[] get_ChildDataColumns();
    internal DesignTable get_ChildDesignTable();
    internal DataRelation get_DataRelation();
    internal void set_DataRelation(DataRelation value);
    internal ForeignKeyConstraint get_ForeignKeyConstraint();
    internal void set_ForeignKeyConstraint(ForeignKeyConstraint value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    internal DesignDataSource get_Owner();
    internal void set_Owner(DesignDataSource value);
    internal DataColumn[] get_ParentDataColumns();
    internal DesignTable get_ParentDesignTable();
    public sealed virtual string get_PublicTypeName();
    internal string get_UserRelationName();
    internal void set_UserRelationName(string value);
    internal string get_UserParentTable();
    internal void set_UserParentTable(string value);
    internal string get_UserChildTable();
    internal void set_UserChildTable(string value);
    internal string get_GeneratorRelationVarName();
    internal void set_GeneratorRelationVarName(string value);
    internal string get_GeneratorChildPropName();
    internal void set_GeneratorChildPropName(string value);
    internal string get_GeneratorParentPropName();
    internal void set_GeneratorParentPropName(string value);
    internal virtual StringCollection get_NamingPropertyNames();
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Design.DesignRelationCollection : DataSourceCollectionBase {
    protected Type ItemType { get; }
    protected INameService NameService { get; }
    internal DesignRelation Item { get; }
    internal DesignRelation Item { get; }
    public DesignRelationCollection(DesignDataSource dataSource);
    protected virtual Type get_ItemType();
    protected virtual INameService get_NameService();
    internal DesignRelation get_Item(ForeignKeyConstraint constraint);
    internal DesignRelation get_Item(string name);
    public void Remove(DesignRelation rel);
    public int Add(DesignRelation rel);
    public bool Contains(DesignRelation rel);
    protected virtual void OnInsert(int index, object value);
}
internal class System.Data.Design.DesignTable : DataSourceComponent {
    internal static string MAINSOURCE_PROPERTY;
    internal static string NAME_PROPERTY;
    internal static string EXTPROPNAME_USER_TABLENAME;
    internal static string EXTPROPNAME_GENERATOR_TABLEPROPNAME;
    internal static string EXTPROPNAME_GENERATOR_TABLEVARNAME;
    internal static string EXTPROPNAME_GENERATOR_TABLECLASSNAME;
    internal static string EXTPROPNAME_GENERATOR_ROWCLASSNAME;
    internal static string EXTPROPNAME_GENERATOR_ROWEVHANDLERNAME;
    internal static string EXTPROPNAME_GENERATOR_ROWEVARGNAME;
    internal static string EXTPROPNAME_GENERATOR_ROWCHANGINGNAME;
    internal static string EXTPROPNAME_GENERATOR_ROWCHANGEDNAME;
    internal static string EXTPROPNAME_GENERATOR_ROWDELETINGNAME;
    internal static string EXTPROPNAME_GENERATOR_ROWDELETEDNAME;
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
public string BaseClass { get; public set; }
    public IDesignConnection Connection { get; public set; }
    internal DataAccessor DataAccessor { get; internal set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
public string DataAccessorName { get; public set; }
    [BrowsableAttribute("False")]
public DataTable DataTable { get; public set; }
    [DefaultValueAttribute("")]
public DbSourceCommand DeleteCommand { get; public set; }
    [BrowsableAttribute("False")]
public DesignColumnCollection DesignColumns { get; }
    protected object ExternalPropertyHost { get; }
    internal bool HasAnyUpdateCommand { get; }
    internal bool HasAnyExpressionColumn { get; }
    [DefaultValueAttribute("")]
public DbSourceCommand InsertCommand { get; public set; }
    [BrowsableAttribute("False")]
[DataSourceXmlSubItemAttribute]
public Source MainSource { get; public set; }
    [BrowsableAttribute("False")]
[DataSourceXmlElementAttribute]
public DataColumnMappingCollection Mappings { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DataSourceXmlAttributeAttribute]
public TypeAttributes DataAccessorModifier { get; public set; }
    [DefaultValueAttribute("")]
[DataSourceXmlAttributeAttribute]
[MergablePropertyAttribute("False")]
public string Name { get; public set; }
    internal DesignDataSource Owner { get; internal set; }
    public DbSourceParameterCollection Parameters { get; }
    [BrowsableAttribute("False")]
public DataColumn[] PrimaryKeyColumns { get; public set; }
    [DefaultValueAttribute("")]
[DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
public string Provider { get; public set; }
    [BrowsableAttribute("False")]
public string PublicTypeName { get; }
    [BrowsableAttribute("False")]
public DbSourceCommand SelectCommand { get; public set; }
    [DataSourceXmlSubItemAttribute("System.Data.Design.Source")]
[BrowsableAttribute("False")]
public SourceCollection Sources { get; }
    [BrowsableAttribute("False")]
public TableType TableType { get; public set; }
    [DefaultValueAttribute("")]
public DbSourceCommand UpdateCommand { get; public set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
public bool WebServiceAttribute { get; public set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
public string WebServiceDescription { get; public set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
public string WebServiceNamespace { get; public set; }
    internal string UserTableName { get; internal set; }
    internal string GeneratorRunFillName { get; internal set; }
    internal string GeneratorTablePropName { get; internal set; }
    internal string GeneratorTableVarName { get; internal set; }
    internal string GeneratorTableClassName { get; internal set; }
    internal string GeneratorRowClassName { get; internal set; }
    internal string GeneratorRowEvHandlerName { get; internal set; }
    internal string GeneratorRowEvArgName { get; internal set; }
    internal string GeneratorRowChangingName { get; internal set; }
    internal string GeneratorRowChangedName { get; internal set; }
    internal string GeneratorRowDeletingName { get; internal set; }
    internal string GeneratorRowDeletedName { get; internal set; }
    internal StringCollection NamingPropertyNames { get; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string GeneratorDataComponentClassName { get; public set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string UserDataComponentName { get; public set; }
    [BrowsableAttribute("False")]
public string GeneratorName { get; }
    internal CodeGenPropertyCache PropertyCache { get; internal set; }
    public DesignTable(DataTable dataTable);
    public DesignTable(DataTable dataTable, TableType tableType);
    public DesignTable(DataTable dataTable, TableType tableType, DataColumnMappingCollection mappings);
    private static DesignTable();
    public string get_BaseClass();
    public void set_BaseClass(string value);
    public IDesignConnection get_Connection();
    public void set_Connection(IDesignConnection value);
    internal void add_ConstraintChanged(EventHandler value);
    internal void remove_ConstraintChanged(EventHandler value);
    internal DataAccessor get_DataAccessor();
    internal void set_DataAccessor(DataAccessor value);
    internal void add_DataAccessorChanged(EventHandler value);
    internal void remove_DataAccessorChanged(EventHandler value);
    internal void add_DataAccessorChanging(EventHandler value);
    internal void remove_DataAccessorChanging(EventHandler value);
    public string get_DataAccessorName();
    public void set_DataAccessorName(string value);
    public DataTable get_DataTable();
    public void set_DataTable(DataTable value);
    public DbSourceCommand get_DeleteCommand();
    public void set_DeleteCommand(DbSourceCommand value);
    public DesignColumnCollection get_DesignColumns();
    protected virtual object get_ExternalPropertyHost();
    internal bool get_HasAnyUpdateCommand();
    internal bool get_HasAnyExpressionColumn();
    public DbSourceCommand get_InsertCommand();
    public void set_InsertCommand(DbSourceCommand value);
    public Source get_MainSource();
    public void set_MainSource(Source value);
    public DataColumnMappingCollection get_Mappings();
    public void set_Mappings(DataColumnMappingCollection value);
    public TypeAttributes get_DataAccessorModifier();
    public void set_DataAccessorModifier(TypeAttributes value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    internal DesignDataSource get_Owner();
    internal void set_Owner(DesignDataSource value);
    public DbSourceParameterCollection get_Parameters();
    public DataColumn[] get_PrimaryKeyColumns();
    public void set_PrimaryKeyColumns(DataColumn[] value);
    public string get_Provider();
    public void set_Provider(string value);
    public sealed virtual string get_PublicTypeName();
    public DbSourceCommand get_SelectCommand();
    public void set_SelectCommand(DbSourceCommand value);
    public SourceCollection get_Sources();
    public TableType get_TableType();
    public void set_TableType(TableType value);
    internal void add_TableTypeChanged(EventHandler value);
    internal void remove_TableTypeChanged(EventHandler value);
    public DbSourceCommand get_UpdateCommand();
    public void set_UpdateCommand(DbSourceCommand value);
    public bool get_WebServiceAttribute();
    public void set_WebServiceAttribute(bool value);
    public string get_WebServiceDescription();
    public void set_WebServiceDescription(string value);
    public string get_WebServiceNamespace();
    public void set_WebServiceNamespace(string value);
    private sealed virtual override void System.Data.Design.IDataSourceCommandTarget.AddChild(object child, bool fixName);
    private sealed virtual override bool System.Data.Design.IDataSourceCommandTarget.CanAddChildOfType(Type childType);
    private sealed virtual override bool System.Data.Design.IDataSourceCommandTarget.CanInsertChildOfType(Type childType, object refChild);
    private sealed virtual override bool System.Data.Design.IDataSourceCommandTarget.CanRemoveChildren(ICollection children);
    internal void ConvertTableTypeTo(TableType newTableType);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override object System.Data.Design.IDataSourceCommandTarget.GetObject(int index, bool getSiblingIfOutOfRange);
    internal ArrayList GetRelatedDataConstraints(ICollection columns, bool uniqueOnly);
    internal bool IsForeignKeyConstraint(DataColumn column);
    internal string GetUniqueRelationName(string proposedName);
    internal string GetUniqueRelationName(string proposedName, int startSuffix);
    internal string GetUniqueRelationName(string proposedName, bool firstTryProposedName, int startSuffix);
    private sealed virtual override int System.Data.Design.IDataSourceCommandTarget.IndexOf(object child);
    private sealed virtual override void System.Data.Design.IDataSourceInitAfterLoading.InitializeAfterLoading();
    private sealed virtual override void System.Data.Design.IDataSourceCommandTarget.InsertChild(object child, object refChild);
    internal void OnTableTypeChanged();
    private sealed virtual override void System.Data.Design.IDataSourceXmlSpecialOwner.ReadSpecialItem(string propertyName, XmlNode xmlNode, DataSourceXmlSerializer serializer);
    private sealed virtual override void System.Data.Design.IDataSourceXmlSerializable.ReadXml(XmlElement xmlElement, DataSourceXmlSerializer serializer);
    private sealed virtual override void System.Data.Design.IDataSourceCommandTarget.RemoveChildren(ICollection children);
    internal void RemoveConstraint(Constraint constraint);
    internal void RemoveColumnMapping(string columnName);
    internal void RemoveKey(UniqueConstraint constraint);
    internal void SetTypeForUndo(TableType newType);
    private sealed virtual override void System.Data.Design.IDataSourceXmlSpecialOwner.WriteSpecialItem(string propertyName, XmlWriter writer, DataSourceXmlSerializer serializer);
    private sealed virtual override void System.Data.Design.IDataSourceXmlSerializable.WriteXml(XmlWriter xmlWriter, DataSourceXmlSerializer serializer);
    internal void UpdateColumnMappingDataSetColumnName(string oldName, string newName);
    internal void UpdateColumnMappingSourceColumnName(string dataSetColumn, string newSourceColumn);
    internal string get_UserTableName();
    internal void set_UserTableName(string value);
    internal string get_GeneratorRunFillName();
    internal void set_GeneratorRunFillName(string value);
    internal string get_GeneratorTablePropName();
    internal void set_GeneratorTablePropName(string value);
    internal string get_GeneratorTableVarName();
    internal void set_GeneratorTableVarName(string value);
    internal string get_GeneratorTableClassName();
    internal void set_GeneratorTableClassName(string value);
    internal string get_GeneratorRowClassName();
    internal void set_GeneratorRowClassName(string value);
    internal string get_GeneratorRowEvHandlerName();
    internal void set_GeneratorRowEvHandlerName(string value);
    internal string get_GeneratorRowEvArgName();
    internal void set_GeneratorRowEvArgName(string value);
    internal string get_GeneratorRowChangingName();
    internal void set_GeneratorRowChangingName(string value);
    internal string get_GeneratorRowChangedName();
    internal void set_GeneratorRowChangedName(string value);
    internal string get_GeneratorRowDeletingName();
    internal void set_GeneratorRowDeletingName(string value);
    internal string get_GeneratorRowDeletedName();
    internal void set_GeneratorRowDeletedName(string value);
    internal virtual StringCollection get_NamingPropertyNames();
    public string get_GeneratorDataComponentClassName();
    public void set_GeneratorDataComponentClassName(string value);
    public string get_UserDataComponentName();
    public void set_UserDataComponentName(string value);
    public virtual string get_GeneratorName();
    internal CodeGenPropertyCache get_PropertyCache();
    internal void set_PropertyCache(CodeGenPropertyCache value);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Design.DesignTableCollection : DataSourceCollectionBase {
    protected Type ItemType { get; }
    protected INameService NameService { get; }
    internal DesignTable Item { get; }
    internal DesignTable Item { get; }
    public DesignTableCollection(DesignDataSource dataSource);
    protected virtual Type get_ItemType();
    protected virtual INameService get_NameService();
    internal DesignTable get_Item(string name);
    internal DesignTable get_Item(DataTable dataTable);
    public void Add(DesignTable designTable);
    public bool Contains(DesignTable table);
    public int IndexOf(DesignTable table);
    public void Remove(DesignTable table);
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnRemove(int index, object value);
}
internal class System.Data.Design.DesignUtil : object {
    internal static IDictionary CloneDictionary(IDictionary source);
}
internal class System.Data.Design.DSGeneratorProblem : object {
    internal string Message { get; }
    internal ProblemSeverity Severity { get; }
    internal DataSourceComponent ProblemSource { get; }
    internal DSGeneratorProblem(string message, ProblemSeverity severity, DataSourceComponent problemSource);
    internal string get_Message();
    internal ProblemSeverity get_Severity();
    internal DataSourceComponent get_ProblemSource();
}
internal class System.Data.Design.ExtendedPropertiesHandler : object {
    unknown static TypedDataSourceCodeGenerator CodeGenerator {internal set; }
    private static ExtendedPropertiesHandler();
    internal static void set_CodeGenerator(TypedDataSourceCodeGenerator value);
    internal static void AddExtendedProperties(DataSourceComponent targetObj, CodeExpression addTarget, IList statementCollection, Hashtable extendedProperties);
}
internal class System.Data.Design.FunctionGenerator : QueryGeneratorBase {
    internal FunctionGenerator(TypedDataSourceCodeGenerator codeGenerator);
    internal virtual CodeMemberMethod Generate();
    protected bool AddSetReturnParamValuesStatements(IList statements);
}
[FlagsAttribute]
internal enum System.Data.Design.GenerateMethodTypes : Enum {
    public int value__;
    public static GenerateMethodTypes Fill;
    public static GenerateMethodTypes Get;
    public static GenerateMethodTypes Both;
}
internal class System.Data.Design.GenericNameHandler : object {
    internal GenericNameHandler(ICollection initialNameSet, CodeDomProvider codeProvider);
    internal string AddParameterNameToList(string originalName, string parameterPrefix);
    internal string AddNameToList(string originalName);
    internal string GetNameFromList(string originalName);
}
internal interface System.Data.Design.IDataSourceCollectionMember {
    public abstract virtual void SetCollection(DataSourceCollectionBase collection);
}
internal interface System.Data.Design.IDataSourceCommandTarget {
    public abstract virtual bool CanAddChildOfType(Type childType);
    public abstract virtual void AddChild(object child, bool fixName);
    public abstract virtual bool CanInsertChildOfType(Type childType, object refChild);
    public abstract virtual void InsertChild(object child, object refChild);
    public abstract virtual bool CanRemoveChildren(ICollection children);
    public abstract virtual void RemoveChildren(ICollection children);
    public abstract virtual int IndexOf(object child);
    public abstract virtual object GetObject(int index, bool getSiblingIfOutOfRange);
}
internal interface System.Data.Design.IDataSourceInitAfterLoading {
    public abstract virtual void InitializeAfterLoading();
}
internal interface System.Data.Design.IDataSourceNamedObject {
    public string PublicTypeName { get; }
    public abstract virtual string get_PublicTypeName();
}
internal interface System.Data.Design.IDataSourceRenamableObject {
    public string GeneratorName { get; }
    public abstract virtual string get_GeneratorName();
}
internal interface System.Data.Design.IDataSourceXmlSerializable {
    public abstract virtual void ReadXml(XmlElement xmlElement, DataSourceXmlSerializer serializer);
    public abstract virtual void WriteXml(XmlWriter writer, DataSourceXmlSerializer serializer);
}
internal interface System.Data.Design.IDataSourceXmlSpecialOwner {
    public abstract virtual void ReadSpecialItem(string propertyName, XmlNode xmlNode, DataSourceXmlSerializer serializer);
    public abstract virtual void WriteSpecialItem(string propertyName, XmlWriter writer, DataSourceXmlSerializer serializer);
}
internal interface System.Data.Design.IDesignConnection {
    public ConnectionString ConnectionStringObject { get; public set; }
    public string ConnectionString { get; public set; }
    public string Provider { get; public set; }
    public bool IsAppSettingsProperty { get; public set; }
    public string AppSettingsObjectName { get; public set; }
    public CodePropertyReferenceExpression PropertyReference { get; public set; }
    public IDictionary Properties { get; }
    public abstract virtual ConnectionString get_ConnectionStringObject();
    public abstract virtual void set_ConnectionStringObject(ConnectionString value);
    public abstract virtual string get_ConnectionString();
    public abstract virtual void set_ConnectionString(string value);
    public abstract virtual string get_Provider();
    public abstract virtual void set_Provider(string value);
    public abstract virtual bool get_IsAppSettingsProperty();
    public abstract virtual void set_IsAppSettingsProperty(bool value);
    public abstract virtual string get_AppSettingsObjectName();
    public abstract virtual void set_AppSettingsObjectName(string value);
    public abstract virtual CodePropertyReferenceExpression get_PropertyReference();
    public abstract virtual void set_PropertyReference(CodePropertyReferenceExpression value);
    public abstract virtual IDictionary get_Properties();
    public abstract virtual IDbConnection CreateEmptyDbConnection();
}
internal interface System.Data.Design.IDesignConnectionCollection {
    public abstract virtual IDesignConnection Get(string name);
    public abstract virtual void Set(IDesignConnection connection);
    public abstract virtual void Remove(string name);
    public abstract virtual void Clear();
}
internal interface System.Data.Design.INamedObject {
    public string Name { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
internal interface System.Data.Design.INamedObjectCollection {
    public abstract virtual INameService GetNameService();
}
internal interface System.Data.Design.INameService {
    public abstract virtual string CreateUniqueName(INamedObjectCollection container, Type type);
    public abstract virtual string CreateUniqueName(INamedObjectCollection container, string proposed);
    public abstract virtual string CreateUniqueName(INamedObjectCollection container, string proposedNameRoot, int startSuffix);
    public abstract virtual void ValidateName(string name);
    public abstract virtual void ValidateUniqueName(INamedObjectCollection container, string name);
    public abstract virtual void ValidateUniqueName(INamedObjectCollection container, INamedObject namedObject, string proposedName);
}
internal class System.Data.Design.InternalException : Exception {
    internal InternalException(string internalMessage);
    internal InternalException(string internalMessage, Exception innerException);
    internal InternalException(string internalMessage, int errorCode);
    internal InternalException(string internalMessage, int errorCode, bool showTextOnReport);
    internal InternalException(Exception innerException, string internalMessage, int errorCode, bool showErrorMesageOnReport);
    internal InternalException(Exception innerException, string internalMessage, int errorCode, bool showErrorMesageOnReport, bool needAssert);
    private InternalException(SerializationInfo info, StreamingContext context);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
internal interface System.Data.Design.IObjectWithParent {
    public object Parent { get; }
    public abstract virtual object get_Parent();
}
internal class System.Data.Design.Keywords : object {
    internal static string MSDNS;
    internal static string DFFNS;
    internal static string WS_DATASETFULLQNAME;
    internal static string WS_VERSION;
}
internal class System.Data.Design.ManagedProviderNames : object {
    public static string SqlClient { get; }
    public static string get_SqlClient();
}
internal class System.Data.Design.MemberNameValidator : object {
    internal bool UseSuffix { get; internal set; }
    internal MemberNameValidator(ICollection initialNameSet, CodeDomProvider codeProvider, bool languageCaseInsensitive);
    private static MemberNameValidator();
    internal bool get_UseSuffix();
    internal void set_UseSuffix(bool value);
    internal string GetCandidateMemberName(string originalName);
    internal string GetNewMemberName(string originalName);
    internal string GenerateIdName(string name);
    internal static string GenerateIdName(string name, CodeDomProvider codeProvider, bool useSuffix);
    internal static string GenerateIdName(string name, CodeDomProvider codeProvider, bool useSuffix, int additionalCharsToTruncate);
}
public class System.Data.Design.MethodSignatureGenerator : object {
    public CodeDomProvider CodeProvider { get; public set; }
    public Type ContainerParameterType { get; public set; }
    public bool IsGetMethod { get; public set; }
    public bool PagingMethod { get; public set; }
    public ParameterGenerationOption ParameterOption { get; public set; }
    public string TableClassName { get; public set; }
    public string DataSetClassName { get; public set; }
    private static MethodSignatureGenerator();
    public CodeDomProvider get_CodeProvider();
    public void set_CodeProvider(CodeDomProvider value);
    public Type get_ContainerParameterType();
    public void set_ContainerParameterType(Type value);
    public bool get_IsGetMethod();
    public void set_IsGetMethod(bool value);
    public bool get_PagingMethod();
    public void set_PagingMethod(bool value);
    public ParameterGenerationOption get_ParameterOption();
    public void set_ParameterOption(ParameterGenerationOption value);
    public string get_TableClassName();
    public void set_TableClassName(string value);
    public string get_DataSetClassName();
    public void set_DataSetClassName(string value);
    public void SetDesignTableContent(string designTableContent);
    public void SetMethodSourceContent(string methodSourceContent);
    public string GenerateMethodSignature();
    public CodeMemberMethod GenerateMethod();
    public CodeTypeDeclaration GenerateUpdatingMethods();
}
internal enum System.Data.Design.MethodTypeEnum : Enum {
    public int value__;
    public static MethodTypeEnum ColumnParameters;
    public static MethodTypeEnum GenericUpdate;
}
internal class System.Data.Design.NamedObjectUtil : object {
    public static INamedObject Find(INamedObjectCollection coll, string name);
}
internal class System.Data.Design.NameHandler : object {
    internal NameHandler(CodeDomProvider codeProvider);
    private static NameHandler();
    internal void GenerateMemberNames(DesignDataSource dataSource, ArrayList problemList);
    internal static string FixIdName(string inVarName);
}
internal class System.Data.Design.NameValidationException : ApplicationException {
    public NameValidationException(string message);
}
internal enum System.Data.Design.OleDbDataType : Enum {
    public int value__;
    public static OleDbDataType adEmpty;
    public static OleDbDataType adTinyInt;
    public static OleDbDataType adSmallInt;
    public static OleDbDataType adInteger;
    public static OleDbDataType adBigInt;
    public static OleDbDataType adUnsignedTinyInt;
    public static OleDbDataType adUnsignedSmallInt;
    public static OleDbDataType adUnsignedInt;
    public static OleDbDataType adUnsignedBigInt;
    public static OleDbDataType adSingle;
    public static OleDbDataType adDouble;
    public static OleDbDataType adCurrency;
    public static OleDbDataType adDecimal;
    public static OleDbDataType adNumeric;
    public static OleDbDataType adBoolean;
    public static OleDbDataType adError;
    public static OleDbDataType adUserDefined;
    public static OleDbDataType adVariant;
    public static OleDbDataType adIDispatch;
    public static OleDbDataType adIUnknown;
    public static OleDbDataType adGUID;
    public static OleDbDataType adDate;
    public static OleDbDataType adDBDate;
    public static OleDbDataType adDBTime;
    public static OleDbDataType adDBTimeStamp;
    public static OleDbDataType adBSTR;
    public static OleDbDataType adChar;
    public static OleDbDataType adVarChar;
    public static OleDbDataType adLongVarChar;
    public static OleDbDataType adWChar;
    public static OleDbDataType adVarWChar;
    public static OleDbDataType adLongVarWChar;
    public static OleDbDataType adBinary;
    public static OleDbDataType adVarBinary;
    public static OleDbDataType adLongVarBinary;
    public static OleDbDataType adChapter;
    public static OleDbDataType adFileTime;
    public static OleDbDataType adPropVariant;
    public static OleDbDataType adVarNumeric;
    public static OleDbDataType adArray;
}
internal enum System.Data.Design.OleDbParameterDirection : Enum {
    public int value__;
    public static OleDbParameterDirection Input;
    public static OleDbParameterDirection InputOutput;
    public static OleDbParameterDirection Output;
    public static OleDbParameterDirection ReturnValue;
}
public enum System.Data.Design.ParameterGenerationOption : Enum {
    public int value__;
    public static ParameterGenerationOption ClrTypes;
    public static ParameterGenerationOption SqlTypes;
    public static ParameterGenerationOption Objects;
}
internal enum System.Data.Design.ProblemSeverity : Enum {
    public int value__;
    public static ProblemSeverity Unknown;
    public static ProblemSeverity Warning;
    public static ProblemSeverity NonFatalError;
    public static ProblemSeverity FatalError;
}
internal class System.Data.Design.PropertyReferenceSerializer : object {
    internal static string Serialize(CodePropertyReferenceExpression expression);
    internal static CodePropertyReferenceExpression Deserialize(string expressionString);
}
internal class System.Data.Design.ProviderManager : object {
    internal static Hashtable CustomDBProviders;
    internal static DbProviderFactory ActiveFactoryContext;
    private static ProviderManager();
    public static DbProviderFactory GetFactoryFromType(Type type, ProviderSupportedClasses kindOfObject);
    public static string GetInvariantProviderName(DbProviderFactory factory);
    public static DbProviderFactory GetFactory(string invariantName);
    public static PropertyInfo GetProviderTypeProperty(DbProviderFactory factory);
}
internal class System.Data.Design.QueryGenerator : QueryGeneratorBase {
    internal QueryGenerator(TypedDataSourceCodeGenerator codeGenerator);
    internal virtual CodeMemberMethod Generate();
    protected bool AddSetReturnParamValuesStatements(IList statements);
}
internal abstract class System.Data.Design.QueryGeneratorBase : object {
    protected TypedDataSourceCodeGenerator codeGenerator;
    protected GenericNameHandler nameHandler;
    protected static string returnVariableName;
    protected static string commandVariableName;
    protected static string startRecordParameterName;
    protected static string maxRecordsParameterName;
    protected DbProviderFactory providerFactory;
    protected DbSource methodSource;
    protected DbSourceCommand activeCommand;
    protected string methodName;
    protected MemberAttributes methodAttributes;
    protected Type containerParamType;
    protected string containerParamTypeName;
    protected string containerParamName;
    protected ParameterGenerationOption parameterOption;
    protected Type returnType;
    protected int commandIndex;
    protected DesignTable designTable;
    protected bool getMethod;
    protected bool pagingMethod;
    protected bool declarationOnly;
    protected MethodTypeEnum methodType;
    protected string updateParameterName;
    protected CodeTypeReference updateParameterTypeReference;
    protected string updateParameterTypeName;
    protected CodeDomProvider codeProvider;
    protected string updateCommandName;
    protected bool isFunctionsDataComponent;
    internal DbProviderFactory ProviderFactory { get; internal set; }
    internal DbSource MethodSource { get; internal set; }
    internal DbSourceCommand ActiveCommand { get; internal set; }
    internal string MethodName { get; internal set; }
    internal ParameterGenerationOption ParameterOption { get; internal set; }
    internal Type ContainerParameterType { get; internal set; }
    internal string ContainerParameterTypeName { get; internal set; }
    internal string ContainerParameterName { get; internal set; }
    internal int CommandIndex { get; internal set; }
    internal DesignTable DesignTable { get; internal set; }
    internal bool GenerateGetMethod { get; internal set; }
    internal bool GeneratePagingMethod { get; internal set; }
    internal bool DeclarationOnly { get; internal set; }
    internal MethodTypeEnum MethodType { get; internal set; }
    internal string UpdateParameterName { get; internal set; }
    internal string UpdateParameterTypeName { get; internal set; }
    internal CodeTypeReference UpdateParameterTypeReference { get; internal set; }
    internal CodeDomProvider CodeProvider { get; internal set; }
    internal string UpdateCommandName { get; internal set; }
    internal bool IsFunctionsDataComponent { get; internal set; }
    internal QueryGeneratorBase(TypedDataSourceCodeGenerator codeGenerator);
    private static QueryGeneratorBase();
    internal DbProviderFactory get_ProviderFactory();
    internal void set_ProviderFactory(DbProviderFactory value);
    internal DbSource get_MethodSource();
    internal void set_MethodSource(DbSource value);
    internal DbSourceCommand get_ActiveCommand();
    internal void set_ActiveCommand(DbSourceCommand value);
    internal string get_MethodName();
    internal void set_MethodName(string value);
    internal ParameterGenerationOption get_ParameterOption();
    internal void set_ParameterOption(ParameterGenerationOption value);
    internal Type get_ContainerParameterType();
    internal void set_ContainerParameterType(Type value);
    internal string get_ContainerParameterTypeName();
    internal void set_ContainerParameterTypeName(string value);
    internal string get_ContainerParameterName();
    internal void set_ContainerParameterName(string value);
    internal int get_CommandIndex();
    internal void set_CommandIndex(int value);
    internal DesignTable get_DesignTable();
    internal void set_DesignTable(DesignTable value);
    internal bool get_GenerateGetMethod();
    internal void set_GenerateGetMethod(bool value);
    internal bool get_GeneratePagingMethod();
    internal void set_GeneratePagingMethod(bool value);
    internal bool get_DeclarationOnly();
    internal void set_DeclarationOnly(bool value);
    internal MethodTypeEnum get_MethodType();
    internal void set_MethodType(MethodTypeEnum value);
    internal string get_UpdateParameterName();
    internal void set_UpdateParameterName(string value);
    internal string get_UpdateParameterTypeName();
    internal void set_UpdateParameterTypeName(string value);
    internal CodeTypeReference get_UpdateParameterTypeReference();
    internal void set_UpdateParameterTypeReference(CodeTypeReference value);
    internal CodeDomProvider get_CodeProvider();
    internal void set_CodeProvider(CodeDomProvider value);
    internal string get_UpdateCommandName();
    internal void set_UpdateCommandName(string value);
    internal bool get_IsFunctionsDataComponent();
    internal void set_IsFunctionsDataComponent(bool value);
    internal static bool IsSqlCeParameterType(Type type);
    internal static CodeStatement SetCommandTextStatement(CodeExpression commandExpression, string commandText);
    internal static CodeStatement SetCommandTypeStatement(CodeExpression commandExpression, CommandType commandType);
    internal abstract virtual CodeMemberMethod Generate();
    protected DesignParameter GetReturnParameter(DbSourceCommand command);
    protected int GetReturnParameterPosition(DbSourceCommand command);
    internal static CodeExpression AddNewParameterStatements(DesignParameter parameter, Type parameterType, DbProviderFactory factory, IList statements, CodeExpression parameterVariable);
    protected Type GetParameterUrtType(DesignParameter parameter);
    protected void AddThrowsClauseIfNeeded(CodeMemberMethod dbMethod);
    protected void AddSetParameterStatements(DesignParameter parameter, string parameterName, CodeExpression cmdExpression, int parameterIndex, IList statements);
    protected void AddSetParameterStatements(DesignParameter parameter, string parameterName, DesignParameter isNullParameter, CodeExpression cmdExpression, int parameterIndex, int isNullParameterIndex, IList statements);
    protected bool AddSetReturnParamValuesStatements(IList statements, CodeExpression commandExpression);
}
internal class System.Data.Design.QueryHandler : object {
    internal static string tableParameterName;
    internal static string dataSetParameterName;
    internal bool DeclarationsOnly { get; internal set; }
    internal QueryHandler(TypedDataSourceCodeGenerator codeGenerator, DesignTable designTable);
    internal QueryHandler(CodeDomProvider codeProvider, DesignTable designTable);
    internal bool get_DeclarationsOnly();
    internal void set_DeclarationsOnly(bool value);
    internal void AddQueriesToDataComponent(CodeTypeDeclaration classDeclaration);
    internal void AddFunctionsToDataComponent(CodeTypeDeclaration classDeclaration, bool isFunctionsDataComponent);
    internal void AddUpdateQueriesToDataComponent(CodeTypeDeclaration classDeclaration, string dataSourceClassName, CodeDomProvider codeProvider);
}
internal enum System.Data.Design.QueryType : Enum {
    public int value__;
    public static QueryType Rowset;
    public static QueryType Scalar;
    public static QueryType NoData;
}
internal class System.Data.Design.RelationHandler : object {
    internal DesignRelationCollection Relations { get; }
    internal RelationHandler(TypedDataSourceCodeGenerator codeGenerator, DesignRelationCollection relations);
    internal DesignRelationCollection get_Relations();
    internal void AddPrivateVars(CodeTypeDeclaration dataSourceClass);
}
internal class System.Data.Design.SchemaName : object {
    internal static string DataSourcePrefix;
    internal static string DataSourceNamespace;
    internal static string DataSourceTempTargetNamespace;
    internal static string SchemaNodeName;
    internal static string AnnotationNodeName;
    internal static string AppInfoNodeName;
    internal static string AppInfoSourceName;
    internal static string DataSourceRoot;
    internal static string DbSource;
    internal static string Connection;
    internal static string RadTable;
    internal static string OldRadTable;
    internal static string DbCommand;
    internal static string Parameter;
}
internal class System.Data.Design.SimpleNamedObject : object {
    public string Name { get; public set; }
    public SimpleNamedObject(object obj);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
}
internal class System.Data.Design.SimpleNamedObjectCollection : ArrayList {
    protected INameService NameService { get; }
    protected virtual INameService get_NameService();
    public sealed virtual INameService GetNameService();
}
internal class System.Data.Design.SimpleNameService : object {
    internal static int DEFAULT_MAX_TRIALS;
    internal static SimpleNameService DefaultInstance { get; }
    private static SimpleNameService();
    internal static SimpleNameService get_DefaultInstance();
    public sealed virtual string CreateUniqueName(INamedObjectCollection container, string proposed);
    public sealed virtual string CreateUniqueName(INamedObjectCollection container, Type type);
    public sealed virtual string CreateUniqueName(INamedObjectCollection container, string proposedNameRoot, int startSuffix);
    public string CreateUniqueNameOnCollection(ICollection container, string proposedNameRoot, int startSuffix);
    public virtual void ValidateName(string name);
    public sealed virtual void ValidateUniqueName(INamedObjectCollection container, string proposedName);
    public sealed virtual void ValidateUniqueName(INamedObjectCollection container, INamedObject namedObject, string proposedName);
}
internal abstract class System.Data.Design.Source : DataSourceComponent {
    protected string name;
    protected DataSourceComponent owner;
    [DataSourceXmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool EnableWebMethods { get; public set; }
    internal bool IsMainSource { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DataSourceXmlAttributeAttribute]
public MemberAttributes Modifier { get; public set; }
    [DefaultValueAttribute("")]
[DataSourceXmlAttributeAttribute]
[MergablePropertyAttribute("False")]
public string Name { get; public set; }
    internal string DisplayName { get; internal set; }
    [BrowsableAttribute("False")]
internal DataSourceComponent Owner { get; internal set; }
    [BrowsableAttribute("False")]
public string PublicTypeName { get; }
    [DataSourceXmlAttributeAttribute]
[DefaultValueAttribute("")]
public string WebMethodDescription { get; public set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string UserSourceName { get; public set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string GeneratorSourceName { get; public set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string GeneratorGetMethodName { get; public set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string GeneratorSourceNameForPaging { get; public set; }
    [DataSourceXmlAttributeAttribute]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string GeneratorGetMethodNameForPaging { get; public set; }
    [BrowsableAttribute("False")]
public string GeneratorName { get; }
    public bool get_EnableWebMethods();
    public void set_EnableWebMethods(bool value);
    internal bool get_IsMainSource();
    public MemberAttributes get_Modifier();
    public void set_Modifier(MemberAttributes value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal virtual string get_DisplayName();
    internal virtual void set_DisplayName(string value);
    internal DataSourceComponent get_Owner();
    internal void set_Owner(DataSourceComponent value);
    public virtual string get_PublicTypeName();
    public string get_WebMethodDescription();
    public void set_WebMethodDescription(string value);
    public abstract virtual object Clone();
    internal virtual bool NameExist(string nameToCheck);
    public virtual void SetCollection(DataSourceCollectionBase collection);
    public virtual string ToString();
    public string get_UserSourceName();
    public void set_UserSourceName(string value);
    public string get_GeneratorSourceName();
    public void set_GeneratorSourceName(string value);
    public string get_GeneratorGetMethodName();
    public void set_GeneratorGetMethodName(string value);
    public string get_GeneratorSourceNameForPaging();
    public void set_GeneratorSourceNameForPaging(string value);
    public string get_GeneratorGetMethodNameForPaging();
    public void set_GeneratorGetMethodNameForPaging(string value);
    public virtual string get_GeneratorName();
}
internal class System.Data.Design.SourceCollection : DataSourceCollectionBase {
    protected Type ItemType { get; }
    protected INameService NameService { get; }
    internal SourceCollection(DataSourceComponent collectionHost);
    protected virtual Type get_ItemType();
    protected virtual INameService get_NameService();
    public int Add(Source s);
    public sealed virtual object Clone();
    public bool Contains(Source s);
    protected internal virtual IDataSourceNamedObject FindObject(string name);
    public int IndexOf(Source s);
    public void Remove(Source s);
    protected internal virtual void ValidateName(IDataSourceNamedObject obj);
    protected internal virtual void ValidateUniqueName(IDataSourceNamedObject obj, string proposedName);
    internal void ValidateUniqueDbSourceName(DbSource dbSource, string proposedName, bool isFillName);
}
internal class System.Data.Design.SourceNameService : SimpleNameService {
    internal static SourceNameService DefaultInstance { get; }
    internal static SourceNameService get_DefaultInstance();
}
internal class System.Data.Design.StringUtil : object {
    internal static bool Empty(string str);
    internal static bool EmptyOrSpace(string str);
    internal static bool EqualValue(string str1, string str2);
    internal static bool EqualValue(string str1, string str2, bool caseInsensitive);
    internal static bool NotEmpty(string str);
    public static bool NotEmptyAfterTrim(string str);
}
internal class System.Data.Design.TableAdapterManagerGenerator : object {
    internal TableAdapterManagerGenerator(TypedDataSourceCodeGenerator codeGenerator);
    internal CodeTypeDeclaration GenerateAdapterManager(DesignDataSource dataSource, CodeTypeDeclaration dataSourceClass);
}
internal class System.Data.Design.TableAdapterManagerHelper : object {
    internal static DataRelation[] GetSelfRefRelations(DataTable dataTable);
    internal static DataTable[] GetUpdateOrder(DataSet ds);
}
internal class System.Data.Design.TableAdapterManagerMethodGenerator : object {
    internal TableAdapterManagerMethodGenerator(TypedDataSourceCodeGenerator codeGenerator, DesignDataSource dataSource, CodeTypeDeclaration dataSourceType);
    internal void AddEverything(CodeTypeDeclaration dataComponentClass);
}
internal class System.Data.Design.TableAdapterManagerNameHandler : object {
    internal static string TableAdapterManagerClassName;
    internal static string SelfRefComparerClass;
    internal static string UpdateAllMethod;
    internal static string SortSelfRefRowsMethod;
    internal static string MatchTAConnectionMethod;
    internal static string UpdateAllRevertConnectionsVar;
    internal static string ConnectionVar;
    internal static string ConnectionProperty;
    internal static string BackupDataSetBeforeUpdateVar;
    internal static string BackupDataSetBeforeUpdateProperty;
    internal static string TableAdapterInstanceCountProperty;
    internal static string UpdateOrderOptionProperty;
    internal static string UpdateOrderOptionVar;
    internal static string UpdateOrderOptionEnum;
    internal static string UpdateOrderOptionEnumIUD;
    internal static string UpdateOrderOptionEnumUID;
    internal static string UpdateUpdatedRowsMethod;
    internal static string UpdateInsertedRowsMethod;
    internal static string UpdateDeletedRowsMethod;
    internal static string GetRealUpdatedRowsMethod;
    public TableAdapterManagerNameHandler(CodeDomProvider provider);
    internal string GetNewMemberName(string memberName);
    internal string GetTableAdapterPropName(string className);
    internal string GetTableAdapterVarName(string propName);
}
internal class System.Data.Design.TableMethodGenerator : object {
    internal TableMethodGenerator(TypedDataSourceCodeGenerator codeGenerator, DesignTable designTable);
    private static TableMethodGenerator();
    internal void AddMethods(CodeTypeDeclaration dataTableClass);
}
internal enum System.Data.Design.TableType : Enum {
    public int value__;
    public static TableType DataTable;
    public static TableType RadTable;
}
internal class System.Data.Design.TypeConvertions : object {
    private static TypeConvertions();
    internal static Type SqlDbTypeToSqlType(SqlDbType sqlDbType);
    internal static Type DbTypeToUrtType(DbType dbType);
}
internal class System.Data.Design.TypedColumnHandler : object {
    internal TypedColumnHandler(DesignTable designTable, TypedDataSourceCodeGenerator codeGenerator);
    internal void AddPrivateVariables(CodeTypeDeclaration dataTableClass);
    internal void AddTableColumnProperties(CodeTypeDeclaration dataTableClass);
    internal void AddRowColumnProperties(CodeTypeDeclaration rowClass);
    internal void AddRowGetRelatedRowsMethods(CodeTypeDeclaration rowClass);
}
public class System.Data.Design.TypedDataSetGenerator : object {
    public static ICollection`1<Assembly> ReferencedAssemblies { get; }
    private static TypedDataSetGenerator();
    public static ICollection`1<Assembly> get_ReferencedAssemblies();
    public static string GetProviderName(string inputFileContent);
    public static string GetProviderName(string inputFileContent, string tableName);
    public static string Generate(DataSet dataSet, CodeNamespace codeNamespace, CodeDomProvider codeProvider);
    public static void Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, DbProviderFactory specifiedFactory);
    public static void Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, Hashtable customDBProviders);
    public static void Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, Hashtable customDBProviders, GenerateOption option);
    public static void Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, Hashtable customDBProviders, GenerateOption option, string dataSetNamespace);
    public static void Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, Hashtable customDBProviders, GenerateOption option, string dataSetNamespace, string basePath);
    public static string Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider);
    public static string Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, GenerateOption option);
    public static string Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, GenerateOption option, string dataSetNamespace);
    public static string Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, GenerateOption option, string dataSetNamespace, string basePath);
    internal static string GenerateInternal(DesignDataSource designDS, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, GenerateOption generateOption, string dataSetNamespace);
}
public class System.Data.Design.TypedDataSetGeneratorException : DataException {
    public IList ErrorList { get; }
    protected TypedDataSetGeneratorException(SerializationInfo info, StreamingContext context);
    public TypedDataSetGeneratorException(string message);
    public TypedDataSetGeneratorException(string message, Exception innerException);
    public TypedDataSetGeneratorException(IList list);
    public IList get_ErrorList();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Data.Design.TypedDataSetSchemaImporterExtension : SchemaImporterExtension {
    protected TypedDataSetSchemaImporterExtension(GenerateOption dataSetGenerateOptions);
    public virtual string ImportSchemaType(string name, string namespaceName, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider);
    public virtual string ImportSchemaType(XmlSchemaType type, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider);
    internal string GenerateTypedDataSet(XmlSchemaElement element, XmlSchemas schemas, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider);
    internal static bool IsDataSet(XmlSchemaElement e);
    internal XmlSchemaElement FindDataSetElement(XmlSchema schema, XmlSchemas schemas);
}
public class System.Data.Design.TypedDataSetSchemaImporterExtensionFx35 : TypedDataSetSchemaImporterExtension {
}
internal class System.Data.Design.TypedDataSourceCodeGenerator : object {
    internal CodeDomProvider CodeProvider { get; internal set; }
    internal IDictionary UserData { get; internal set; }
    internal string DataSourceName { get; }
    internal ArrayList ProblemList { get; }
    internal TypedTableHandler TableHandler { get; }
    internal RelationHandler RelationHandler { get; }
    internal TypedRowHandler RowHandler { get; }
    internal bool GenerateExtendedProperties { get; }
    internal bool GenerateSingleNamespace { get; internal set; }
    internal GenerateOption GenerateOptions { get; }
    internal string DataSetNamespace { get; }
    internal CodeDomProvider get_CodeProvider();
    internal void set_CodeProvider(CodeDomProvider value);
    internal IDictionary get_UserData();
    internal void set_UserData(IDictionary value);
    internal string get_DataSourceName();
    internal ArrayList get_ProblemList();
    internal TypedTableHandler get_TableHandler();
    internal RelationHandler get_RelationHandler();
    internal TypedRowHandler get_RowHandler();
    internal bool get_GenerateExtendedProperties();
    internal bool get_GenerateSingleNamespace();
    internal void set_GenerateSingleNamespace(bool value);
    internal GenerateOption get_GenerateOptions();
    internal string get_DataSetNamespace();
    internal void GenerateDataSource(DesignDataSource dtDataSource, CodeCompileUnit codeCompileUnit, CodeNamespace mainNamespace, string dataSetNamespace, GenerateOption generateOption);
    internal static ArrayList GetProviderAssemblies(DesignDataSource designDS);
}
internal class System.Data.Design.TypedRowGenerator : object {
    internal MethodInfo ConvertXmlToObject { get; }
    internal TypedRowGenerator(TypedDataSourceCodeGenerator codeGenerator);
    internal MethodInfo get_ConvertXmlToObject();
    internal void GenerateRows(CodeTypeDeclaration dataSourceClass);
    internal void GenerateTypedRowEventHandlers(CodeTypeDeclaration dataSourceClass);
    internal void GenerateTypedRowEventArgs(CodeTypeDeclaration dataSourceClass);
}
internal class System.Data.Design.TypedRowHandler : object {
    internal TypedRowGenerator RowGenerator { get; }
    internal TypedRowHandler(TypedDataSourceCodeGenerator codeGenerator, DesignTableCollection tables);
    internal TypedRowGenerator get_RowGenerator();
    internal void AddTypedRowEvents(CodeTypeDeclaration dataTableClass, string tableName);
    internal void AddTypedRows(CodeTypeDeclaration dataSourceClass);
    internal void AddTypedRowEventHandlers(CodeTypeDeclaration dataSourceClass);
    internal void AddTypedRowEventArgs(CodeTypeDeclaration dataSourceClass);
}
internal class System.Data.Design.TypedTableGenerator : object {
    internal TypedTableGenerator(TypedDataSourceCodeGenerator codeGenerator);
    private static TypedTableGenerator();
    internal void GenerateTables(CodeTypeDeclaration dataSourceClass);
}
internal class System.Data.Design.TypedTableHandler : object {
    internal DesignTableCollection Tables { get; }
    internal TypedTableHandler(TypedDataSourceCodeGenerator codeGenerator, DesignTableCollection tables);
    internal DesignTableCollection get_Tables();
    internal TypedColumnHandler GetColumnHandler(string tableName);
    internal void AddPrivateVars(CodeTypeDeclaration dataSourceClass);
    internal void AddTableProperties(CodeTypeDeclaration dataSourceClass);
    internal void AddTableClasses(CodeTypeDeclaration dataSourceClass);
}
internal enum System.Data.Design.TypeEnum : Enum {
    public int value__;
    public static TypeEnum CLR;
    public static TypeEnum SQL;
}
internal class System.Data.Design.UpdateCommandGenerator : QueryGeneratorBase {
    internal bool GenerateOverloadWithoutCurrentPKParameters { get; internal set; }
    internal UpdateCommandGenerator(TypedDataSourceCodeGenerator codeGenerator);
    internal bool get_GenerateOverloadWithoutCurrentPKParameters();
    internal void set_GenerateOverloadWithoutCurrentPKParameters(bool value);
    internal virtual CodeMemberMethod Generate();
    protected bool AddSetReturnParamValuesStatements(IList statements);
}
internal class System.Data.Design.VSDExceptions : object {
}
internal static class System.Design.NativeMethods : object {
    public static HandleRef NullHandleRef;
    public static int PS_SOLID;
    public static int HOLLOW_BRUSH;
    public static int WM_USER;
    public static int WM_CLOSE;
    public static int WM_GETDLGCODE;
    public static int WM_MOUSEMOVE;
    public static int WM_NOTIFY;
    public static int DLGC_WANTALLKEYS;
    public static int NM_CLICK;
    public static int WM_REFLECT;
    public static int BM_SETIMAGE;
    public static int IMAGE_ICON;
    public static int WM_DESTROY;
    public static int BS_ICON;
    public static int VK_PROCESSKEY;
    public static int STGM_READ;
    public static int STGM_WRITE;
    public static int STGM_READWRITE;
    public static int STGM_SHARE_EXCLUSIVE;
    public static int STGM_CREATE;
    public static int STGM_TRANSACTED;
    public static int STGM_CONVERT;
    public static int STGM_DELETEONRELEASE;
    public static int RECO_PASTE;
    public static int RECO_DROP;
    public static int LOGPIXELSX;
    public static int LOGPIXELSY;
    public static int TCM_HITTEST;
    public static IntPtr InvalidIntPtr;
    public static int S_OK;
    public static int S_FALSE;
    public static int E_NOTIMPL;
    public static int E_NOINTERFACE;
    public static int E_INVALIDARG;
    public static int E_FAIL;
    public static int WS_EX_STATICEDGE;
    public static int TME_HOVER;
    public static int OLEIVERB_PRIMARY;
    public static int OLEIVERB_SHOW;
    public static int OLEIVERB_OPEN;
    public static int OLEIVERB_HIDE;
    public static int OLEIVERB_UIACTIVATE;
    public static int OLEIVERB_INPLACEACTIVATE;
    public static int OLEIVERB_DISCARDUNDOSTATE;
    public static int OLEIVERB_PROPERTIES;
    public static int OLECLOSE_SAVEIFDIRTY;
    public static int OLECLOSE_NOSAVE;
    public static int OLECLOSE_PROMPTSAVE;
    public static int PM_NOREMOVE;
    public static int PM_REMOVE;
    public static int WM_CHAR;
    public static int WM_MOUSEENTER;
    public static int HDN_ENDTRACK;
    public static int DT_CALCRECT;
    public static int WM_CAPTURECHANGED;
    public static int WM_PARENTNOTIFY;
    public static int WM_CREATE;
    public static int WM_SETREDRAW;
    public static int WM_NCACTIVATE;
    public static int WM_HSCROLL;
    public static int WM_VSCROLL;
    public static int WM_SHOWWINDOW;
    public static int WM_WINDOWPOSCHANGING;
    public static int WM_WINDOWPOSCHANGED;
    public static int WS_DISABLED;
    public static int WS_CLIPSIBLINGS;
    public static int WS_CLIPCHILDREN;
    public static int WS_EX_TOOLWINDOW;
    public static int WS_POPUP;
    public static int WS_BORDER;
    public static int CS_DROPSHADOW;
    public static int CS_DBLCLKS;
    public static int NOTSRCCOPY;
    public static int SRCCOPY;
    public static int LVM_SETCOLUMNWIDTH;
    public static int LVM_GETHEADER;
    public static int LVM_CREATEDRAGIMAGE;
    public static int LVM_GETVIEWRECT;
    public static int LVM_GETTEXTCOLOR;
    public static int LVM_SETTEXTCOLOR;
    public static int LVM_GETTEXTBKCOLOR;
    public static int LVM_SETTEXTBKCOLOR;
    public static int LVM_GETTOPINDEX;
    public static int LVM_GETCOUNTPERPAGE;
    public static int LVM_GETORIGIN;
    public static int LVM_UPDATE;
    public static int LVM_SETITEMSTATE;
    public static int LVM_GETITEMSTATE;
    public static int LVM_GETITEMTEXTA;
    public static int LVM_GETITEMTEXTW;
    public static int LVM_SETITEMTEXTA;
    public static int LVM_SETITEMTEXTW;
    public static int LVSICF_NOINVALIDATEALL;
    public static int LVSICF_NOSCROLL;
    public static int LVM_SETITEMCOUNT;
    public static int LVM_SORTITEMS;
    public static int LVM_SETITEMPOSITION32;
    public static int LVM_GETSELECTEDCOUNT;
    public static int LVM_GETITEMSPACING;
    public static int LVM_GETISEARCHSTRINGA;
    public static int LVM_GETISEARCHSTRINGW;
    public static int LVM_SETICONSPACING;
    public static int LVM_SETEXTENDEDLISTVIEWSTYLE;
    public static int LVM_GETEXTENDEDLISTVIEWSTYLE;
    public static int LVS_EX_GRIDLINES;
    public static int HDM_HITTEST;
    public static int HDM_GETITEMRECT;
    public static int HDM_SETIMAGELIST;
    public static int HDM_GETIMAGELIST;
    public static int HDM_ORDERTOINDEX;
    public static int HDM_CREATEDRAGIMAGE;
    public static int HDM_GETORDERARRAY;
    public static int HDM_SETORDERARRAY;
    public static int HDM_SETHOTDIVIDER;
    public static int HDN_ITEMCHANGINGA;
    public static int HDN_ITEMCHANGINGW;
    public static int HDN_ITEMCHANGEDA;
    public static int HDN_ITEMCHANGEDW;
    public static int HDN_ITEMCLICKA;
    public static int HDN_ITEMCLICKW;
    public static int HDN_ITEMDBLCLICKA;
    public static int HDN_ITEMDBLCLICKW;
    public static int HDN_DIVIDERDBLCLICKA;
    public static int HDN_DIVIDERDBLCLICKW;
    public static int HDN_BEGINTRACKA;
    public static int HDN_BEGINTRACKW;
    public static int HDN_ENDTRACKA;
    public static int HDN_ENDTRACKW;
    public static int HDN_TRACKA;
    public static int HDN_TRACKW;
    public static int HDN_GETDISPINFOA;
    public static int HDN_GETDISPINFOW;
    public static int HDN_BEGINDRAG;
    public static int HDN_ENDDRAG;
    public static int HC_ACTION;
    public static int HIST_BACK;
    public static int HHT_ONHEADER;
    public static int HHT_ONDIVIDER;
    public static int HHT_ONDIVOPEN;
    public static int HHT_ABOVE;
    public static int HHT_BELOW;
    public static int HHT_TORIGHT;
    public static int HHT_TOLEFT;
    public static int HWND_TOP;
    public static int HWND_BOTTOM;
    public static int HWND_TOPMOST;
    public static int HWND_NOTOPMOST;
    public static int CWP_SKIPINVISIBLE;
    public static int RDW_FRAME;
    public static int WM_KILLFOCUS;
    public static int WM_STYLECHANGED;
    public static int TVM_GETITEMRECT;
    public static int TVM_GETCOUNT;
    public static int TVM_GETINDENT;
    public static int TVM_SETINDENT;
    public static int TVM_GETIMAGELIST;
    public static int TVSIL_NORMAL;
    public static int TVSIL_STATE;
    public static int TVM_SETIMAGELIST;
    public static int TVM_GETNEXTITEM;
    public static int TVGN_ROOT;
    public static int TV_FIRST;
    public static int TVM_SETEXTENDEDSTYLE;
    public static int TVM_GETEXTENDEDSTYLE;
    public static int TVS_EX_FADEINOUTEXPANDOS;
    public static int TVS_EX_DOUBLEBUFFER;
    public static int LVS_EX_DOUBLEBUFFER;
    public static int TVHT_ONITEMICON;
    public static int TVHT_ONITEMLABEL;
    public static int TVHT_ONITEMINDENT;
    public static int TVHT_ONITEMBUTTON;
    public static int TVHT_ONITEMRIGHT;
    public static int TVHT_ONITEMSTATEICON;
    public static int TVHT_ABOVE;
    public static int TVHT_BELOW;
    public static int TVHT_TORIGHT;
    public static int TVHT_TOLEFT;
    public static int GW_HWNDFIRST;
    public static int GW_HWNDLAST;
    public static int GW_HWNDNEXT;
    public static int GW_HWNDPREV;
    public static int GW_OWNER;
    public static int GW_CHILD;
    public static int GW_MAX;
    public static int GWL_HWNDPARENT;
    public static int SB_HORZ;
    public static int SB_VERT;
    public static int SB_CTL;
    public static int SB_BOTH;
    public static int SB_LINEUP;
    public static int SB_LINELEFT;
    public static int SB_LINEDOWN;
    public static int SB_LINERIGHT;
    public static int SB_PAGEUP;
    public static int SB_PAGELEFT;
    public static int SB_PAGEDOWN;
    public static int SB_PAGERIGHT;
    public static int SB_THUMBPOSITION;
    public static int SB_THUMBTRACK;
    public static int SB_TOP;
    public static int SB_LEFT;
    public static int SB_BOTTOM;
    public static int SB_RIGHT;
    public static int SB_ENDSCROLL;
    public static int MK_LBUTTON;
    public static int TVM_HITTEST;
    public static int MK_RBUTTON;
    public static int MK_SHIFT;
    public static int MK_CONTROL;
    public static int MK_MBUTTON;
    public static int MK_XBUTTON1;
    public static int MK_XBUTTON2;
    public static int LB_ADDSTRING;
    public static int LB_INSERTSTRING;
    public static int LB_DELETESTRING;
    public static int LB_SELITEMRANGEEX;
    public static int LB_RESETCONTENT;
    public static int LB_SETSEL;
    public static int LB_SETCURSEL;
    public static int LB_GETSEL;
    public static int LB_GETCURSEL;
    public static int LB_GETTEXT;
    public static int LB_GETTEXTLEN;
    public static int LB_GETCOUNT;
    public static int LB_SELECTSTRING;
    public static int LB_DIR;
    public static int LB_GETTOPINDEX;
    public static int LB_FINDSTRING;
    public static int LB_GETSELCOUNT;
    public static int LB_GETSELITEMS;
    public static int LB_SETTABSTOPS;
    public static int LB_GETHORIZONTALEXTENT;
    public static int LB_SETHORIZONTALEXTENT;
    public static int LB_SETCOLUMNWIDTH;
    public static int LB_ADDFILE;
    public static int LB_SETTOPINDEX;
    public static int LB_GETITEMRECT;
    public static int LB_GETITEMDATA;
    public static int LB_SETITEMDATA;
    public static int LB_SELITEMRANGE;
    public static int LB_SETANCHORINDEX;
    public static int LB_GETANCHORINDEX;
    public static int LB_SETCARETINDEX;
    public static int LB_GETCARETINDEX;
    public static int LB_SETITEMHEIGHT;
    public static int LB_GETITEMHEIGHT;
    public static int LB_FINDSTRINGEXACT;
    public static int LB_SETLOCALE;
    public static int LB_GETLOCALE;
    public static int LB_SETCOUNT;
    public static int LB_INITSTORAGE;
    public static int LB_ITEMFROMPOINT;
    public static int LB_MSGMAX;
    public static int HTHSCROLL;
    public static int HTVSCROLL;
    public static int HTERROR;
    public static int HTTRANSPARENT;
    public static int HTNOWHERE;
    public static int HTCLIENT;
    public static int HTCAPTION;
    public static int HTSYSMENU;
    public static int HTGROWBOX;
    public static int HTSIZE;
    public static int PRF_NONCLIENT;
    public static int PRF_CLIENT;
    public static int PRF_ERASEBKGND;
    public static int PRF_CHILDREN;
    public static int SWP_NOSIZE;
    public static int SWP_NOMOVE;
    public static int SWP_NOZORDER;
    public static int SWP_NOREDRAW;
    public static int SWP_NOACTIVATE;
    public static int SWP_FRAMECHANGED;
    public static int SWP_SHOWWINDOW;
    public static int SWP_HIDEWINDOW;
    public static int SWP_NOCOPYBITS;
    public static int SWP_NOOWNERZORDER;
    public static int SWP_NOSENDCHANGING;
    public static int SWP_DRAWFRAME;
    public static int SWP_NOREPOSITION;
    public static int SWP_DEFERERASE;
    public static int SWP_ASYNCWINDOWPOS;
    public static int WA_INACTIVE;
    public static int WA_ACTIVE;
    public static int WH_MOUSE;
    public static int WM_IME_STARTCOMPOSITION;
    public static int WM_IME_ENDCOMPOSITION;
    public static int WM_IME_COMPOSITION;
    public static int WM_ACTIVATE;
    public static int WM_NCMOUSEMOVE;
    public static int WM_NCLBUTTONDOWN;
    public static int WM_NCLBUTTONUP;
    public static int WM_NCLBUTTONDBLCLK;
    public static int WM_NCRBUTTONDOWN;
    public static int WM_NCRBUTTONUP;
    public static int WM_NCRBUTTONDBLCLK;
    public static int WM_NCMBUTTONDOWN;
    public static int WM_NCMBUTTONUP;
    public static int WM_NCMBUTTONDBLCLK;
    public static int WM_NCXBUTTONDOWN;
    public static int WM_NCXBUTTONUP;
    public static int WM_NCXBUTTONDBLCLK;
    public static int WM_MOUSEHOVER;
    public static int WM_MOUSELEAVE;
    public static int WM_MOUSEFIRST;
    public static int WM_MOUSEACTIVATE;
    public static int WM_LBUTTONDOWN;
    public static int WM_LBUTTONUP;
    public static int WM_LBUTTONDBLCLK;
    public static int WM_RBUTTONDOWN;
    public static int WM_RBUTTONUP;
    public static int WM_RBUTTONDBLCLK;
    public static int WM_MBUTTONDOWN;
    public static int WM_MBUTTONUP;
    public static int WM_MBUTTONDBLCLK;
    public static int WM_NCMOUSEHOVER;
    public static int WM_NCMOUSELEAVE;
    public static int WM_MOUSEWHEEL;
    public static int WM_MOUSELAST;
    public static int WM_NCHITTEST;
    public static int WM_SETCURSOR;
    public static int WM_GETOBJECT;
    public static int WM_CANCELMODE;
    public static int WM_SETFOCUS;
    public static int WM_KEYFIRST;
    public static int WM_KEYDOWN;
    public static int WM_KEYUP;
    public static int WM_DEADCHAR;
    public static int WM_SYSKEYDOWN;
    public static int WM_SYSKEYUP;
    public static int WM_SYSCHAR;
    public static int WM_SYSDEADCHAR;
    public static int WM_KEYLAST;
    public static int WM_CONTEXTMENU;
    public static int WM_PAINT;
    public static int WM_PRINTCLIENT;
    public static int WM_NCPAINT;
    public static int WM_SIZE;
    public static int WM_TIMER;
    public static int WM_PRINT;
    public static int CHILDID_SELF;
    public static int OBJID_WINDOW;
    public static int OBJID_CLIENT;
    public static string uuid_IAccessible;
    public static string uuid_IEnumVariant;
    public static int QS_KEY;
    public static int QS_MOUSEMOVE;
    public static int QS_MOUSEBUTTON;
    public static int QS_POSTMESSAGE;
    public static int QS_TIMER;
    public static int QS_PAINT;
    public static int QS_SENDMESSAGE;
    public static int QS_HOTKEY;
    public static int QS_ALLPOSTMESSAGE;
    public static int QS_MOUSE;
    public static int QS_INPUT;
    public static int QS_ALLEVENTS;
    public static int QS_ALLINPUT;
    public static int MWMO_INPUTAVAILABLE;
    public static int GWL_EXSTYLE;
    public static int GWL_STYLE;
    public static int WS_EX_LAYOUTRTL;
    public static int SPI_GETNONCLIENTMETRICS;
    private static NativeMethods();
    public static int MultiByteToWideChar(int CodePage, int dwFlags, Byte[] lpMultiByteStr, int cchMultiByte, Char[] lpWideCharStr, int cchWideChar);
    public static bool GetClientRect(IntPtr hWnd, COMRECT rect);
    public static bool PeekMessage(MSG& msg, IntPtr hwnd, int msgMin, int msgMax, int remove);
    public static IntPtr GetCursor();
    public static bool GetCursorPos(POINT pt);
    public static IntPtr WindowFromPoint(int x, int y);
    public static IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
    public static IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, HDHITTESTINFO lParam);
    public static IntPtr SendMessage(IntPtr hWnd, int msg, int wParam, int lParam);
    public static IntPtr SendMessage(IntPtr hWnd, int msg, int wParam, string lParam);
    public static IntPtr SendMessage(IntPtr hWnd, int Msg, int wParam, TV_HITTESTINFO lParam);
    public static IntPtr DefWindowProc(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
    public static IntPtr GetWindow(IntPtr hWnd, int uCmd);
    public static short GetKeyState(int keyCode);
    public static int MapWindowPoints(IntPtr hWndFrom, IntPtr hWndTo, RECT& rect, int cPoints);
    public static int MapWindowPoints(IntPtr hWndFrom, IntPtr hWndTo, POINT pt, int cPoints);
    public static bool ValidateRect(IntPtr hwnd, IntPtr prect);
    public static IntPtr CreateRectRgn(int x1, int y1, int x2, int y2);
    public static bool GetUpdateRect(IntPtr hwnd, RECT& rc, bool fErase);
    public static bool GetUpdateRgn(IntPtr hwnd, IntPtr hrgn, bool fErase);
    public static bool ExternalDeleteObject(HandleRef hObject);
    public static bool DeleteObject(IntPtr hObject);
    public static IntPtr SetParent(IntPtr hWnd, IntPtr hWndParent);
    public static bool TranslateMessage(MSG& msg);
    public static int DispatchMessage(MSG& msg);
    public static bool GetWindowRect(IntPtr hWnd, RECT& rect);
    public static int RevokeDragDrop(IntPtr hwnd);
    public static IntPtr ChildWindowFromPointEx(IntPtr hwndParent, int x, int y, int uFlags);
    public static bool IsWindowVisible(IntPtr hWnd);
    public static IntPtr GetFocus();
    public static bool Succeeded(int hr);
    public static bool Failed(int hr);
    public static ITypeLib LoadRegTypeLib(Guid& clsid, short majorVersion, short minorVersion, int lcid);
    public static ITypeLib LoadTypeLib(string typelib);
    public static string QueryPathOfRegTypeLib(Guid& guid, short majorVersion, short minorVersion, int lcid);
}
[SuppressUnmanagedCodeSecurityAttribute]
internal static class System.Design.SafeNativeMethods : object {
    public static bool DeleteObject(HandleRef hObject);
    public static int GetMessagePos();
    public static int RegisterWindowMessage(string msg);
    public static bool GetTextMetrics(HandleRef hdc, TEXTMETRIC tm);
    public static bool BitBlt(IntPtr hDC, int x, int y, int nWidth, int nHeight, IntPtr hSrcDC, int xSrc, int ySrc, int dwRop);
    public static IntPtr CreateSolidBrush(int crColor);
    public static int GetWindowTextLength(HandleRef hWnd);
    public static int GetTickCount();
    public static bool RedrawWindow(IntPtr hwnd, COMRECT rcUpdate, IntPtr hrgnUpdate, int flags);
    public static bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int x, int y, int cx, int cy, int flags);
    public static int DrawText(HandleRef hDC, string lpszString, int nCount, RECT& lpRect, int nFormat);
    public static IntPtr SelectObject(HandleRef hDC, HandleRef hObject);
    public static bool IsChild(HandleRef parent, HandleRef child);
    public static bool TrackMouseEvent(TRACKMOUSEEVENT tme);
    public static int GetCurrentProcessId();
    public static bool RoundRect(HandleRef hDC, int left, int top, int right, int bottom, int width, int height);
    public static bool Rectangle(HandleRef hdc, int left, int top, int right, int bottom);
    public static IntPtr CreatePen(int nStyle, int nWidth, int crColor);
    public static int SetROP2(HandleRef hDC, int nDrawMode);
    public static int SetBkColor(HandleRef hDC, int clr);
    public static int SetWindowTheme(IntPtr hWnd, string subAppName, string subIdList);
}
internal class System.Design.SR : object {
    internal static string VerbEditorDefault;
    internal static string WorkingDirectoryEditorLabel;
    internal static string FSWPathEditorLabel;
    internal static string BinaryEditorFileError;
    internal static string BinaryEditorTitle;
    internal static string BinaryEditorAllFiles;
    internal static string BinaryEditorSaveFile;
    internal static string BinaryEditorFileName;
    internal static string AnchorEditorAccName;
    internal static string AnchorEditorRightAccName;
    internal static string AnchorEditorLeftAccName;
    internal static string AnchorEditorTopAccName;
    internal static string AnchorEditorBottomAccName;
    internal static string CollectionEditorCaption;
    internal static string CollectionEditorProperties;
    internal static string CollectionEditorPropertiesMultiSelect;
    internal static string CollectionEditorPropertiesNone;
    internal static string CollectionEditorCantRemoveItem;
    internal static string CollectionEditorUndoBatchDesc;
    internal static string CollectionEditorInheritedReadOnlySelection;
    internal static string DockEditorAccName;
    internal static string DockEditorNoneAccName;
    internal static string DockEditorRightAccName;
    internal static string DockEditorLeftAccName;
    internal static string DockEditorTopAccName;
    internal static string DockEditorBottomAccName;
    internal static string DockEditorFillAccName;
    internal static string DesignSurfaceNoRootComponent;
    internal static string DesignSurfaceServiceIsFixed;
    internal static string DesignSurfaceFatalError;
    internal static string DesignSurfaceContainerDispose;
    internal static string DesignSurfaceDesignerNotLoaded;
    internal static string DesignSurfaceNoSupportedTechnology;
    internal static string DesignerHostUnloading;
    internal static string DesignerHostCyclicAdd;
    internal static string DesignerHostNoTopLevelDesigner;
    internal static string DesignerHostDuplicateName;
    internal static string DesignerHostFailedComponentCreate;
    internal static string DesignerHostCantDestroyInheritedComponent;
    internal static string DesignerHostDestroyComponentTransaction;
    internal static string DesignerHostNoBaseClass;
    internal static string DesignerHostLoaderSpecified;
    internal static string DesignerHostNestedTransaction;
    internal static string DesignerHostGenericTransactionName;
    internal static string DesignerHostDesignerNeedsComponent;
    internal static string DesignerOptionsMissingServiceContainer;
    internal static string DesignerOptionsExistingOptionsService;
    internal static string DesignerOptionsUnableToCreateOptionService;
    internal static string BasicDesignerLoaderAlreadyLoaded;
    internal static string BasicDesignerLoaderDifferentHost;
    internal static string BasicDesignerLoaderMissingService;
    internal static string BasicDesignerLoaderNotInitialized;
    internal static string CodeDomDesignerLoaderNoLanguageSupport;
    internal static string CodeDomDesignerLoaderDocumentFailureTypeNotFound;
    internal static string CodeDomDesignerLoaderDocumentFailureTypeNotDesignable;
    internal static string CodeDomDesignerLoaderDocumentFailureTypeDesignerNotInstalled;
    internal static string CodeDomDesignerLoaderNoRootSerializer;
    internal static string CodeDomDesignerLoaderNoRootSerializerWithFailures;
    internal static string CodeDomDesignerLoaderInvalidIdentifier;
    internal static string CodeDomDesignerLoaderInvalidBlankIdentifier;
    internal static string CodeDomDesignerLoaderDupComponentName;
    internal static string CodeDomDesignerLoaderBadSerializationObject;
    internal static string CodeDomDesignerLoaderPropModifiers;
    internal static string CodeDomDesignerLoaderPropGenerateMember;
    internal static string CodeDomDesignerLoaderNoTypeResolution;
    internal static string CodeDomDesignerLoaderSerializerTypeNotFirstType;
    internal static string CodeDomComponentSerializationServiceUnknownStore;
    internal static string CodeDomComponentSerializationServiceClosedStore;
    internal static string CodeDomComponentSerializationServiceDeserializationError;
    internal static string DesignerActionPanel_CouldNotFindProperty;
    internal static string DesignerActionPanel_CouldNotFindMethod;
    internal static string DesignerActionPanel_CouldNotConvertValue;
    internal static string DesignerActionPanel_ErrorActivatingDropDown;
    internal static string DesignerActionPanel_ErrorSettingValue;
    internal static string DesignerActionPanel_ErrorInvokingAction;
    internal static string DesignerActionPanel_DefaultPanelTitle;
    internal static string ExtenderProviderServiceDuplicateProvider;
    internal static string EventBindingServiceMissingService;
    internal static string EventBindingServiceEventReadOnly;
    internal static string EventBindingServiceBadArgType;
    internal static string EventBindingServiceNoSite;
    internal static string EventBindingServiceSetValue;
    internal static string SerializationManagerDuplicateComponentDecl;
    internal static string SerializationManagerNoMatchingCtor;
    internal static string SerializationManagerNameInUse;
    internal static string SerializationManagerObjectHasName;
    internal static string SerializationManagerAreadyInSession;
    internal static string SerializationManagerNoSession;
    internal static string SerializationManagerWithinSession;
    internal static string UndoEngineMissingService;
    internal static string UndoEngineComponentChange0;
    internal static string UndoEngineComponentChange1;
    internal static string UndoEngineComponentChange2;
    internal static string UndoEngineComponentAdd0;
    internal static string UndoEngineComponentAdd1;
    internal static string UndoEngineComponentRemove0;
    internal static string UndoEngineComponentRemove1;
    internal static string UndoEngineComponentRename;
    internal static string BehaviorServiceResizeControl;
    internal static string BehaviorServiceResizeControls;
    internal static string BehaviorServiceMoveControl;
    internal static string BehaviorServiceMoveControls;
    internal static string BehaviorServiceCopyControl;
    internal static string BehaviorServiceCopyControls;
    internal static string MultilineStringEditorWatermark;
    internal static string ComponentDesignerAddEvent;
    internal static string LocalizerManualReload;
    internal static string LocalizingCannotAdd;
    internal static string LocalizeDesigner_RegionWatermark;
    internal static string LocalizationProviderLocalizableDescr;
    internal static string LocalizationProviderLanguageDescr;
    internal static string LocalizationProviderManualReload;
    internal static string LocalizationProviderMissingService;
    internal static string IntegerCollectionEditorTitle;
    internal static string InheritanceServiceReadOnlyCollection;
    internal static string CancelCaption;
    internal static string OKCaption;
    internal static string HelpCaption;
    internal static string DataFieldCollectionEditorTitle;
    internal static string DataFieldCollectionAvailableFields;
    internal static string DataFieldCollectionSelectedFields;
    internal static string DataFieldCollection_MoveUp;
    internal static string DataFieldCollection_MoveUpDesc;
    internal static string DataFieldCollection_MoveDown;
    internal static string DataFieldCollection_MoveDownDesc;
    internal static string DataFieldCollection_MoveLeft;
    internal static string DataFieldCollection_MoveLeftDesc;
    internal static string DataFieldCollection_MoveRight;
    internal static string DataFieldCollection_MoveRightDesc;
    internal static string SerializerBadElementType;
    internal static string SerializerBadElementTypes;
    internal static string SerializerMissingService;
    internal static string SerializerNoSerializerForComponent;
    internal static string SerializerLostStatements;
    internal static string SerializerTypeNotFound;
    internal static string SerializerTypeAbstract;
    internal static string SerializerUndeclaredName;
    internal static string SerializerNoSuchEvent;
    internal static string SerializerNoSuchField;
    internal static string SerializerNoSuchProperty;
    internal static string SerializerNullNestedProperty;
    internal static string SerializerInvalidArrayRank;
    internal static string SerializerResourceException;
    internal static string SerializerResourceExceptionInvariant;
    internal static string SerializerPropertyGenFailed;
    internal static string SerializerFieldTargetEvalFailed;
    internal static string SerializerMemberTypeNotSerializable;
    internal static string SerializerNoRootExpression;
    internal static string AXAbout;
    internal static string AXCannotLoadTypeLib;
    internal static string AXCannotOverwriteFile;
    internal static string AXReadOnlyFile;
    internal static string AXCompilerError;
    internal static string Ax_Control;
    internal static string AXEdit;
    internal static string AxImportFailed;
    internal static string AXNoActiveXControls;
    internal static string AXNotRegistered;
    internal static string AXNotValidControl;
    internal static string AxImpNoDefaultValue;
    internal static string AxImpUnrecognizedDefaultValueType;
    internal static string AXProperties;
    internal static string AXVerbPrefix;
    internal static string AdvancedBindingPropertyDescriptorDesc;
    internal static string AdvancedBindingPropertyDescName;
    internal static string AutoAdjustMargins;
    internal static string BaseNodeName;
    internal static string BindingFormattingDialogAllTreeNode;
    internal static string BindingFormattingDialogBindingPickerAccName;
    internal static string BindingFormattingDialogCommonTreeNode;
    internal static string BindingFormattingDialogCustomFormat;
    internal static string BindingFormattingDialogCustomFormatAccessibleDescription;
    internal static string BindingFormattingDialogDataSourcePickerDropDownAccName;
    internal static string BindingFormattingDialogDecimalPlaces;
    internal static string BindingFormattingDialogFormatTypeCurrency;
    internal static string BindingFormattingDialogFormatTypeCurrencyExplanation;
    internal static string BindingFormattingDialogFormatTypeCustom;
    internal static string BindingFormattingDialogFormatTypeCustomExplanation;
    internal static string BindingFormattingDialogFormatTypeCustomInvalidFormat;
    internal static string BindingFormattingDialogFormatTypeDateTime;
    internal static string BindingFormattingDialogFormatTypeDateTimeExplanation;
    internal static string BindingFormattingDialogFormatTypeNoFormatting;
    internal static string BindingFormattingDialogFormatTypeNoFormattingExplanation;
    internal static string BindingFormattingDialogFormatTypeNumeric;
    internal static string BindingFormattingDialogFormatTypeNumericExplanation;
    internal static string BindingFormattingDialogFormatTypeScientific;
    internal static string BindingFormattingDialogFormatTypeScientificExplanation;
    internal static string BindingFormattingDialogList;
    internal static string BindingFormattingDialogNullValue;
    internal static string BindingFormattingDialogType;
    internal static string CellStyleBuilderPreview;
    internal static string CellStyleBuilderPreviewText;
    internal static string CellStyleBuilderTitle;
    internal static string CellStyleBuilderNormalPreviewAccName;
    internal static string CellStyleBuilderSelectedPreviewAccName;
    internal static string CommandSetAlignByPrimary;
    internal static string CommandSetAlignToGrid;
    internal static string CommandSetBringToFront;
    internal static string CommandSetCutMultiple;
    internal static string CommandSetDelete;
    internal static string CommandSetError;
    internal static string CommandSetFormatSpacing;
    internal static string CommandSetLockControls;
    internal static string CommandSetPaste;
    internal static string CommandSetSendToBack;
    internal static string CommandSetSize;
    internal static string CommandSetSizeToGrid;
    internal static string CommandSetUnknownSpacingCommand;
    internal static string CompositionDesignerWaterMark;
    internal static string CompositionDesignerWaterMarkFirstLink;
    internal static string CompositionDesignerWaterMarkSecondLink;
    internal static string DataGridAdvancedBindingString;
    internal static string DataGridNoneString;
    internal static string DataGridPopulateError;
    internal static string DataGridAutoFormatString;
    internal static string DataGridAutoFormatUndoTitle;
    internal static string DataGridAutoFormatSchemeName256Color1;
    internal static string DataGridAutoFormatSchemeName256Color2;
    internal static string DataGridAutoFormatSchemeNameClassic;
    internal static string DataGridAutoFormatSchemeNameColorful1;
    internal static string DataGridAutoFormatSchemeNameColorful2;
    internal static string DataGridAutoFormatSchemeNameColorful3;
    internal static string DataGridAutoFormatSchemeNameColorful4;
    internal static string DataGridAutoFormatSchemeNameDefault;
    internal static string DataGridAutoFormatSchemeNameProfessional1;
    internal static string DataGridAutoFormatSchemeNameProfessional2;
    internal static string DataGridAutoFormatSchemeNameProfessional3;
    internal static string DataGridAutoFormatSchemeNameProfessional4;
    internal static string DataGridAutoFormatSchemeNameSimple;
    internal static string DataGridAutoFormatTableFirstColumn;
    internal static string DataGridAutoFormatTableSecondColumn;
    internal static string DataGridShowAllString;
    internal static string DataSourceLocksItems;
    internal static string DesignBindingBadParseString;
    internal static string DesignBindingContextRequiredWhenParsing;
    internal static string DesignBindingComponentNotFound;
    internal static string DesignBindingPickerAccessibleName;
    internal static string DesignBindingPickerAddProjDataSourceLabel;
    internal static string DesignBindingPickerHelpGenAddDataSrc;
    internal static string DesignBindingPickerHelpGenCurrentBinding;
    internal static string DesignBindingPickerHelpGenPickBindSrc;
    internal static string DesignBindingPickerHelpGenPickDataSrc;
    internal static string DesignBindingPickerHelpGenPickMember;
    internal static string DesignBindingPickerHelpNodeBindSrcDM1;
    internal static string DesignBindingPickerHelpNodeBindSrcDS0;
    internal static string DesignBindingPickerHelpNodeBindSrcDS1;
    internal static string DesignBindingPickerHelpNodeBindSrcLM1;
    internal static string DesignBindingPickerHelpNodeFormInstDM1;
    internal static string DesignBindingPickerHelpNodeFormInstDS0;
    internal static string DesignBindingPickerHelpNodeFormInstDS1;
    internal static string DesignBindingPickerHelpNodeFormInstLM0;
    internal static string DesignBindingPickerHelpNodeFormInstLM1;
    internal static string DesignBindingPickerHelpNodeInstances;
    internal static string DesignBindingPickerHelpNodeNone;
    internal static string DesignBindingPickerHelpNodeOther;
    internal static string DesignBindingPickerHelpNodeProject;
    internal static string DesignBindingPickerHelpNodeProjectDM1;
    internal static string DesignBindingPickerHelpNodeProjectDS0;
    internal static string DesignBindingPickerHelpNodeProjectDS1;
    internal static string DesignBindingPickerHelpNodeProjectLM0;
    internal static string DesignBindingPickerHelpNodeProjectLM1;
    internal static string DesignBindingPickerHelpNodeProjectGroup;
    internal static string DesignBindingPickerNodeNone;
    internal static string DesignBindingPickerNodeOther;
    internal static string DesignBindingPickerNodeProject;
    internal static string DesignBindingPickerNodeInstances;
    internal static string DesignBindingPickerTreeViewAccessibleName;
    internal static string DesignerBatchCreateTool;
    internal static string DesignerCantParentType;
    internal static string DesignerDefaultTab;
    internal static string UserControlTab;
    internal static string DesignerShortcutDockInParent;
    internal static string DesignerShortcutUndockInParent;
    internal static string DesignerShortcutDockInForm;
    internal static string DesignerShortcutDockInUserControl;
    internal static string DesignerShortcutReparentControls;
    internal static string DesignerShortcutHorizontalOrientation;
    internal static string DesignerShortcutVerticalOrientation;
    internal static string DesignerNoUserControl;
    internal static string DesignerPropName;
    internal static string DesignerBeginDragNotCalled;
    internal static string DesignerInheritedReadOnly;
    internal static string DesignerInherited;
    internal static string DesignerPropNotFound;
    internal static string TypeNotFoundInTargetFramework;
    internal static string DragDropDragComponents;
    internal static string DragDropMoveComponent;
    internal static string DragDropMoveComponents;
    internal static string DragDropSizeComponent;
    internal static string DragDropSizeComponents;
    internal static string DragDropDropComponents;
    internal static string DragDropSetDataError;
    internal static string GenericFileFilter;
    internal static string GenericOpenFile;
    internal static string DataGridViewAdd;
    internal static string DataGridViewAddColumn;
    internal static string DataGridViewAddColumnDialogTitle;
    internal static string DataGridViewAddColumnTransactionString;
    internal static string DataGridViewAddColumnVerb;
    internal static string DataGridViewBoundColumnProperties;
    internal static string DataGridViewChooseDataSource;
    internal static string DataGridViewColumnTypePropertyDescription;
    internal static string DataGridViewColumnCollectionTransaction;
    internal static string DataGridViewDataSourceNoLongerValid;
    internal static string DataGridViewDeleteAccName;
    internal static string DataGridViewDuplicateColumnName;
    internal static string DataGridViewChooseDataSourceTransactionString;
    internal static string DataGridViewDisableAddingTransactionString;
    internal static string DataGridViewDisableColumnReorderingTransactionString;
    internal static string DataGridViewDisableDeletingTransactionString;
    internal static string DataGridViewDisableEditingTransactionString;
    internal static string DataGridViewEditColumnsTransactionString;
    internal static string DataGridViewEnableAdding;
    internal static string DataGridViewEnableAddingTransactionString;
    internal static string DataGridViewEnableDeleting;
    internal static string DataGridViewEnableDeletingTransactionString;
    internal static string DataGridViewEnableEditing;
    internal static string DataGridViewEnableEditingTransactionString;
    internal static string DataGridViewEditingTransactionString;
    internal static string DataGridViewEnableColumnReordering;
    internal static string DataGridViewEnableColumnReorderingTransactionString;
    internal static string DataGridView_Cancel;
    internal static string DataGridView_Close;
    internal static string DataGridViewEditColumnsVerb;
    internal static string DataGridViewEditColumns;
    internal static string DataGridViewFrozen;
    internal static string DataGridViewDataBoundColumn;
    internal static string DataGridViewDataSourceColumns;
    internal static string DataGridViewHeaderText;
    internal static string DataGridViewHelp;
    internal static string DataGridViewMoveDownAccName;
    internal static string DataGridViewMoveUpAccName;
    internal static string DataGridViewName;
    internal static string DataGridViewNormalLabel;
    internal static string DataGridView_OK;
    internal static string DataGridViewProperties;
    internal static string DataGridViewReadOnly;
    internal static string DataGridViewSelectedColumns;
    internal static string DataGridViewSelectedLabel;
    internal static string DataGridViewType;
    internal static string DataGridViewUnboundColumn;
    internal static string DataGridViewUnboundColumnProperties;
    internal static string DataGridViewVisible;
    internal static string FailedToCreateComponent;
    internal static string FormatStringDialogTitle;
    internal static string HelpProviderEditorFilter;
    internal static string HelpProviderEditorTitle;
    internal static string imageFileDescription;
    internal static string ImageListDesignerBadImageListImage;
    internal static string ImageCollectionEditorFormText;
    internal static string IntegerCollectionEditorCancelCaption;
    internal static string IntegerCollectionEditorInstruction;
    internal static string IntegerCollectionEditorOKCaption;
    internal static string IntegerCollectionEditorHelpCaption;
    internal static string InvalidArgument;
    internal static string InvalidArgumentType;
    internal static string InvalidBoundArgument;
    internal static string LinkAreaEditorCancel;
    internal static string LinkAreaEditorCaption;
    internal static string LinkAreaEditorDescription;
    internal static string LinkAreaEditorOK;
    internal static string ListViewItemBaseName;
    internal static string ListViewSubItemBaseName;
    internal static string MaskDescriptorNullOrEmptyRequiredProperty;
    internal static string MaskDescriptorNull;
    internal static string MaskDescriptorNotMaskFullErrorMsg;
    internal static string MaskDescriptorValidatingTypeNone;
    internal static string MaskDesignerDialogCustomEntry;
    internal static string MaskDesignerDialogDataFormat;
    internal static string MaskDesignerDialogDlgCaption;
    internal static string MaskDesignerDialogMaskDescription;
    internal static string MaskDesignerDialogValidatingType;
    internal static string MaskedTextBoxDesignerVerbsSetMaskDesc;
    internal static string MaskedTextBoxTextEditorErrorFormatString;
    internal static string MaskedTextBoxHintAsciiCharacterExpected;
    internal static string MaskedTextBoxHintAlphanumericCharacterExpected;
    internal static string MaskedTextBoxHintDigitExpected;
    internal static string MaskedTextBoxHintSignedDigitExpected;
    internal static string MaskedTextBoxHintLetterExpected;
    internal static string MaskedTextBoxHintPromptCharNotAllowed;
    internal static string MaskedTextBoxHintUnavailableEditPosition;
    internal static string MaskedTextBoxHintNonEditPosition;
    internal static string MaskedTextBoxHintPositionOutOfRange;
    internal static string MaskedTextBoxHintInvalidInput;
    internal static string MenuCommandService_DuplicateCommand;
    internal static string lockedDescr;
    internal static string ParentControlDesignerDrawGridDescr;
    internal static string ParentControlDesignerSnapToGridDescr;
    internal static string ParentControlDesignerGridSizeDescr;
    internal static string ParentControlDesignerLanguageDescr;
    internal static string ParentControlDesignerLassoShortcutRedo;
    internal static string PerformAutoAnchor;
    internal static string RtfFileFilter;
    internal static string RtfOpenFile;
    internal static string SelectedPathEditorLabel;
    internal static string ShortcutKeys_InvalidKey;
    internal static string SoundPathWavFile;
    internal static string SoundPathEditorOpenFile;
    internal static string SoundPlayNowString;
    internal static string SplitContainerReplaceString;
    internal static string SplitContainerReplaceCaption;
    internal static string SplitterHorizontalOrientation;
    internal static string SplitterVerticalOrientation;
    internal static string TabControlAdd;
    internal static string TabControlAddTab;
    internal static string TabControlRemoveTab;
    internal static string TabControlRemove;
    internal static string TabControlInvalidTabPageType;
    internal static string TableLayoutPanelFullDesc;
    internal static string TableLayoutPanelSpanDesc;
    internal static string TableLayoutPanelRowColResize;
    internal static string TableLayoutPanelDesignerChangeSizeTypeUndoUnit;
    internal static string TableLayoutPanelDesignerClearAnchor;
    internal static string TableLayoutPanelDesignerClearDock;
    internal static string TableLayoutPanelDesignerAddColumn;
    internal static string TableLayoutPanelDesignerAddRow;
    internal static string TableLayoutPanelDesignerRemoveColumn;
    internal static string TableLayoutPanelDesignerRemoveRow;
    internal static string TableLayoutPanelDesignerEditRowAndCol;
    internal static string TableLayoutPanelDesignerRowMenu;
    internal static string TableLayoutPanelDesignerColMenu;
    internal static string TableLayoutPanelDesignerAddMenu;
    internal static string TableLayoutPanelDesignerInsertMenu;
    internal static string TableLayoutPanelDesignerDeleteMenu;
    internal static string TableLayoutPanelDesignerLabelMenu;
    internal static string TableLayoutPanelDesignerDontBoldLabel;
    internal static string TableLayoutPanelDesignerAbsoluteMenu;
    internal static string TableLayoutPanelDesignerPercentageMenu;
    internal static string TableLayoutPanelDesignerAutoSizeMenu;
    internal static string TableLayoutPanelDesignerContextMenuCut;
    internal static string TableLayoutPanelDesignerContextMenuCopy;
    internal static string TableLayoutPanelDesignerContextMenuDelete;
    internal static string TableLayoutPanelDesignerAddColumnUndoUnit;
    internal static string TableLayoutPanelDesignerAddRowUndoUnit;
    internal static string TableLayoutPanelDesignerRemoveColumnUndoUnit;
    internal static string TableLayoutPanelDesignerRemoveRowUndoUnit;
    internal static string TableLayoutPanelDesignerControlsSwapped;
    internal static string TableLayoutPanelDesignerInvalidColumnRowCount;
    internal static string ToolStripTemplateNodeImageResetCaption;
    internal static string ToolStripTemplateNodeImageResetString;
    internal static string ToolStripItemPropertyChangeTransaction;
    internal static string ToolStripInsertItemsVerb;
    internal static string ToolStripSelectAllVerb;
    internal static string ToolStripDropDownDesignerDropDownMenu;
    internal static string ToolStripMorphingItemTransaction;
    internal static string ToolStripCreatingNewItemTransaction;
    internal static string ToolStripInsertingIntoDropDownTransaction;
    internal static string ToolStripAllowItemReorderAndAllowDropCannotBeSetToTrue;
    internal static string ToolStripSelectMenuItem;
    internal static string ToolStripPanelGlyphUnsupportedDock;
    internal static string WindowsFormsAddEvent;
    internal static string WindowsFormsCommandCenterX;
    internal static string WindowsFormsCommandCenterY;
    internal static string WindowsFormsTabOrderReadOnly;
    internal static string OK;
    internal static string Cancel;
    internal static string Value;
    internal static string None;
    internal static string Default;
    internal static string Custom;
    internal static string Edit;
    internal static string None_lc;
    internal static string Control_ErrorRendering;
    internal static string Control_ErrorRenderingShort;
    internal static string Control_Expressions;
    internal static string Control_CanOnlyBePlacedInside;
    internal static string ControlDesigner_DesignTimeHtmlError;
    internal static string ControlDesigner_UnhandledException;
    internal static string ControlDesigner_TransactedChangeRequiresServiceProvider;
    internal static string ControlDesigner_CouldNotGetExpressionBuilder;
    internal static string ControlDesigner_CouldNotGetDesignTimeResourceProviderFactory;
    internal static string ControlDesigner_ArgumentMustBeOfType;
    internal static string ControlDesigner_EditDataBindingsRequiresID;
    internal static string UnsettableComboBox_NotSet;
    internal static string ControlLocalizer_RequiresFilterService;
    internal static string Wizard_NextButton;
    internal static string Wizard_PreviousButton;
    internal static string Wizard_CancelButton;
    internal static string Wizard_FinishButton;
    internal static string WizardAFmt_Scheme_Default;
    internal static string WizardAFmt_Scheme_Classic;
    internal static string WizardAFmt_Scheme_Simple;
    internal static string WizardAFmt_Scheme_Professional;
    internal static string WizardAFmt_Scheme_Colorful;
    internal static string Wizard_StepsView;
    internal static string Wizard_StepsViewDescription;
    internal static string CreateUserWizard_ConvertToCustomNavigationTemplate;
    internal static string CreateUserWizard_CustomizeCreateUserStep;
    internal static string CreateUserWizard_CustomizeCreateUserStepDescription;
    internal static string CreateUserWizard_CustomizeCompleteStep;
    internal static string CreateUserWizard_CustomizeCompleteStepDescription;
    internal static string CreateUserWizard_ResetCreateUserStepVerb;
    internal static string CreateUserWizard_ResetCreateUserStepVerbDescription;
    internal static string CreateUserWizard_ResetCompleteStepVerb;
    internal static string CreateUserWizard_ResetCompleteStepVerbDescription;
    internal static string CreateUserWizard_NavigateToStep;
    internal static string CreateUserWizardAutoFormat_UserName;
    internal static string CreateUserWizardAutoFormat_HelpPageText;
    internal static string CreateUserWizardStepCollectionEditor_Caption;
    internal static string Wizard_ConvertToStartNavigationTemplate;
    internal static string Wizard_ConvertToStepNavigationTemplate;
    internal static string Wizard_ConvertToFinishNavigationTemplate;
    internal static string Wizard_ConvertToSideBarTemplate;
    internal static string Wizard_ConvertToCustomNavigationTemplate;
    internal static string Wizard_ConvertToTemplateDescription;
    internal static string Wizard_ResetCustomNavigationTemplate;
    internal static string Wizard_ResetStartNavigationTemplate;
    internal static string Wizard_ResetStepNavigationTemplate;
    internal static string Wizard_ResetFinishNavigationTemplate;
    internal static string Wizard_ResetSideBarTemplate;
    internal static string Wizard_ResetDescription;
    internal static string Wizard_StartWizardStepCollectionEditor;
    internal static string Wizard_StartWizardStepCollectionEditorDescription;
    internal static string Wizard_OnViewChanged;
    internal static string Wizard_InvalidRegion;
    internal static string UIServiceHelper_ErrorCaption;
    internal static string Designer_DataBindingsVerb;
    internal static string Designer_DataBindingsVerbDesc;
    internal static string MdbDataFileEditor_Ellipses;
    internal static string MdbDataFileEditor_Caption;
    internal static string MdbDataFileEditor_Filter;
    internal static string XmlDataFileEditor_Ellipses;
    internal static string XmlDataFileEditor_Caption;
    internal static string XmlDataFileEditor_Filter;
    internal static string XsdSchemaFileEditor_Ellipses;
    internal static string XsdSchemaFileEditor_Caption;
    internal static string XsdSchemaFileEditor_Filter;
    internal static string XslTransformFileEditor_Ellipses;
    internal static string XslTransformFileEditor_Caption;
    internal static string XslTransformFileEditor_Filter;
    internal static string UserControlFileEditor_Caption;
    internal static string UserControlFileEditor_Filter;
    internal static string ConnectionStringEditor_Title;
    internal static string ConnectionStringEditor_HelpLabel;
    internal static string ConnectionStringEditor_NewConnection;
    internal static string ConfigureDataSource_Title;
    internal static string DataSource_DebugService_FailedCall;
    internal static string DataSource_CannotResumeEvents;
    internal static string DataSource_ConfigureTransactionDescription;
    internal static string DataSourceDesigner_RefreshSchema;
    internal static string DataSourceDesigner_RefreshSchemaNoHotkey;
    internal static string DataSourceDesigner_DataActionGroup;
    internal static string DataSourceDesigner_ConfigureDataSourceVerb;
    internal static string DataSourceDesigner_RefreshSchemaVerb;
    internal static string DataSourceDesigner_ConfigureDataSourceVerbDesc;
    internal static string DataSourceDesigner_RefreshSchemaVerbDesc;
    internal static string HierarchicalDataBoundControlDesigner_SampleRoot;
    internal static string HierarchicalDataBoundControlDesigner_SampleParent;
    internal static string HierarchicalDataBoundControlDesigner_SampleLeaf;
    internal static string SqlDataSourceQueryConverter_Text;
    internal static string SqlDataSourceDesigner_EditQueryTransactionDescription;
    internal static string SqlDataSourceDesigner_DeleteQuery;
    internal static string SqlDataSourceDesigner_InsertQuery;
    internal static string SqlDataSourceDesigner_SelectQuery;
    internal static string SqlDataSourceDesigner_SelectCountQuery;
    internal static string SqlDataSourceDesigner_UpdateQuery;
    internal static string SqlDataSourceDesigner_CannotGetSchema;
    internal static string SqlDataSourceDesigner_CouldNotCreateConnection;
    internal static string SqlDataSourceDesigner_NoCommand;
    internal static string SqlDataSourceDesigner_InferStoredProcedureNotSupported;
    internal static string SqlDataSourceDesigner_InferStoredProcedureError;
    internal static string SqlDataSourceDesigner_RefreshSchemaRequiresSettings;
    internal static string SqlDataSource_General_PreviewLabel;
    internal static string SqlDataSourceRefreshSchemaForm_Title;
    internal static string SqlDataSourceRefreshSchemaForm_HelpLabel;
    internal static string SqlDataSourceRefreshSchemaForm_ParametersLabel;
    internal static string SqlDataSourceConnectionPanel_ProviderNotFound;
    internal static string SqlDataSourceConnectionPanel_CouldNotGetConnectionSchema;
    internal static string SqlDataSourceSaveConfiguredConnectionPanel_HelpLabel;
    internal static string SqlDataSourceSaveConfiguredConnectionPanel_NameTextBoxDescription;
    internal static string SqlDataSourceSaveConfiguredConnectionPanel_SaveLabel;
    internal static string SqlDataSourceSaveConfiguredConnectionPanel_SaveCheckBox;
    internal static string SqlDataSourceSaveConfiguredConnectionPanel_PanelCaption;
    internal static string SqlDataSourceSaveConfiguredConnectionPanel_DuplicateName;
    internal static string SqlDataSourceSaveConfiguredConnectionPanel_CouldNotSaveConnection;
    internal static string SqlDataSourceDataConnectionChooserPanel_PanelCaption;
    internal static string SqlDataSourceDataConnectionChooserPanel_NewConnectionButton;
    internal static string SqlDataSourceDataConnectionChooserPanel_ChooseLabel;
    internal static string SqlDataSourceDataConnectionChooserPanel_ConnectionStringLabel;
    internal static string SqlDataSourceDataConnectionChooserPanel_CustomConnectionName;
    internal static string SqlDataSourceDataConnectionChooserPanel_DetailsButtonName;
    internal static string SqlDataSourceDataConnectionChooserPanel_DetailsButtonDesc;
    internal static string SqlDataSourceQueryEditorForm_CommandLabel;
    internal static string SqlDataSourceQueryEditorForm_InferParametersButton;
    internal static string SqlDataSourceQueryEditorForm_QueryBuilderButton;
    internal static string SqlDataSourceQueryEditorForm_Caption;
    internal static string SqlDataSourceQueryEditorForm_InferNeedsCommand;
    internal static string SqlDataSourceQueryEditorForm_QueryBuilderNeedsConnectionString;
    internal static string SqlDataSourceConfigureFilterForm_ColumnLabel;
    internal static string SqlDataSourceConfigureFilterForm_OperatorLabel;
    internal static string SqlDataSourceConfigureFilterForm_ExpressionLabel;
    internal static string SqlDataSourceConfigureFilterForm_ValueLabel;
    internal static string SqlDataSourceConfigureFilterForm_ExpressionColumnHeader;
    internal static string SqlDataSourceConfigureFilterForm_ValueColumnHeader;
    internal static string SqlDataSourceConfigureFilterForm_ParameterPropertiesGroup;
    internal static string SqlDataSourceConfigureFilterForm_SourceLabel;
    internal static string SqlDataSourceConfigureFilterForm_WhereLabel;
    internal static string SqlDataSourceConfigureFilterForm_AddButton;
    internal static string SqlDataSourceConfigureFilterForm_HelpLabel;
    internal static string SqlDataSourceConfigureFilterForm_RemoveButton;
    internal static string SqlDataSourceConfigureFilterForm_Caption;
    internal static string SqlDataSourceConfigureFilterForm_ParameterEditor_DefaultValue;
    internal static string SqlDataSourceConfigureFilterForm_StaticParameterEditor_ValueLabel;
    internal static string SqlDataSourceConfigureFilterForm_CookieParameterEditor_CookieNameLabel;
    internal static string SqlDataSourceConfigureFilterForm_ControlParameterEditor_ControlIDLabel;
    internal static string SqlDataSourceConfigureFilterForm_FormParameterEditor_FormFieldLabel;
    internal static string SqlDataSourceConfigureFilterForm_QueryStringParameterEditor_QueryStringFieldLabel;
    internal static string SqlDataSourceConfigureFilterForm_RouteParameterEditor_RouteKeyLabel;
    internal static string SqlDataSourceConfigureFilterForm_SessionParameterEditor_SessionFieldLabel;
    internal static string SqlDataSourceConfigureFilterForm_ProfileParameterEditor_PropertyNameLabel;
    internal static string SqlDataSourceConfigureSortForm_HelpLabel;
    internal static string SqlDataSourceConfigureSortForm_SortByLabel;
    internal static string SqlDataSourceConfigureSortForm_ThenByLabel;
    internal static string SqlDataSourceConfigureSortForm_AscendingLabel;
    internal static string SqlDataSourceConfigureSortForm_DescendingLabel;
    internal static string SqlDataSourceConfigureSortForm_Caption;
    internal static string SqlDataSourceConfigureSortForm_SortDirection1;
    internal static string SqlDataSourceConfigureSortForm_SortDirection2;
    internal static string SqlDataSourceConfigureSortForm_SortDirection3;
    internal static string SqlDataSourceConfigureSortForm_SortColumn1;
    internal static string SqlDataSourceConfigureSortForm_SortColumn2;
    internal static string SqlDataSourceConfigureSortForm_SortColumn3;
    internal static string SqlDataSourceConfigureSortForm_SortNone;
    internal static string SqlDataSourceConfigureParametersPanel_PanelCaption;
    internal static string SqlDataSourceConfigureParametersPanel_HelpLabel;
    internal static string SqlDataSourceSummaryPanel_PanelCaption;
    internal static string SqlDataSourceSummaryPanel_TestQueryButton;
    internal static string SqlDataSourceSummaryPanel_HelpLabel;
    internal static string SqlDataSourceSummaryPanel_ResultsAccessibleName;
    internal static string SqlDataSourceSummaryPanel_CouldNotCreateConnection;
    internal static string SqlDataSourceSummaryPanel_CannotExecuteQueryNoTables;
    internal static string SqlDataSourceSummaryPanel_CannotExecuteQuery;
    internal static string SqlDataSourceConfigureSelectPanel_PanelCaption;
    internal static string SqlDataSourceConfigureSelectPanel_RetrieveDataLabel;
    internal static string SqlDataSourceConfigureSelectPanel_TableLabel;
    internal static string SqlDataSourceConfigureSelectPanel_CustomSqlLabel;
    internal static string SqlDataSourceConfigureSelectPanel_TableNameLabel;
    internal static string SqlDataSourceConfigureSelectPanel_FieldsLabel;
    internal static string SqlDataSourceConfigureSelectPanel_SortButton;
    internal static string SqlDataSourceConfigureSelectPanel_FilterLabel;
    internal static string SqlDataSourceConfigureSelectPanel_SelectDistinctLabel;
    internal static string SqlDataSourceConfigureSelectPanel_AdvancedOptions;
    internal static string SqlDataSourceConfigureSelectPanel_CouldNotGetTableSchema;
    internal static string SqlDataSourceAdvancedOptionsForm_HelpLabel;
    internal static string SqlDataSourceAdvancedOptionsForm_GenerateCheckBox;
    internal static string SqlDataSourceAdvancedOptionsForm_GenerateHelpLabel;
    internal static string SqlDataSourceAdvancedOptionsForm_OptimisticCheckBox;
    internal static string SqlDataSourceAdvancedOptionsForm_OptimisticLabel;
    internal static string SqlDataSourceAdvancedOptionsForm_Caption;
    internal static string SqlDataSourceCustomCommandEditor_QueryBuilderButton;
    internal static string SqlDataSourceCustomCommandEditor_SqlLabel;
    internal static string SqlDataSourceCustomCommandEditor_StoredProcedureLabel;
    internal static string SqlDataSourceCustomCommandEditor_NoConnectionString;
    internal static string SqlDataSourceCustomCommandEditor_CouldNotGetStoredProcedureSchema;
    internal static string SqlDataSourceCustomCommandPanel_HelpLabel;
    internal static string SqlDataSourceCustomCommandPanel_PanelCaption;
    internal static string SqlDataSourceParameterValueEditorForm_HelpLabel;
    internal static string SqlDataSourceParameterValueEditorForm_ParametersGridAccessibleName;
    internal static string SqlDataSourceParameterValueEditorForm_Caption;
    internal static string SqlDataSourceParameterValueEditorForm_DbTypeColumnHeader;
    internal static string SqlDataSourceParameterValueEditorForm_ParameterColumnHeader;
    internal static string SqlDataSourceParameterValueEditorForm_TypeColumnHeader;
    internal static string SqlDataSourceParameterValueEditorForm_ValueColumnHeader;
    internal static string SqlDataSourceParameterValueEditorForm_InvalidParameter;
    internal static string AccessDataSourceConnectionChooserPanel_PanelCaption;
    internal static string AccessDataSourceConnectionChooserPanel_DataFileLabel;
    internal static string AccessDataSourceConnectionChooserPanel_HelpLabel;
    internal static string AccessDataSourceConnectionChooserPanel_BrowseButton;
    internal static string AccessDataSourceConnectionChooserPanel_FileNotFound;
    internal static string XmlDataSourceConfigureDataSourceForm_HelpLabel;
    internal static string XmlDataSourceConfigureDataSourceForm_DataFileLabel;
    internal static string XmlDataSourceConfigureDataSourceForm_TransformFileLabel;
    internal static string XmlDataSourceConfigureDataSourceForm_TransformFileHelpLabel;
    internal static string XmlDataSourceConfigureDataSourceForm_XPathExpressionLabel;
    internal static string XmlDataSourceConfigureDataSourceForm_XPathExpressionHelpLabel;
    internal static string XmlDataSourceConfigureDataSourceForm_Browse;
    internal static string ObjectDataSourceDesigner_CannotGetSchema;
    internal static string ObjectDataSourceDesigner_CannotGetType;
    internal static string ObjectDataSource_General_MethodSignatureLabel;
    internal static string ObjectDataSourceConfigureParametersPanel_PanelCaption;
    internal static string ObjectDataSourceConfigureParametersPanel_HelpLabel;
    internal static string ObjectDataSourceChooseMethodsPanel_PanelCaption;
    internal static string ObjectDataSourceChooseMethodsPanel_IncompatibleDataObjectTypes;
    internal static string ObjectDataSourceMethodEditor_DeleteHelpLabel;
    internal static string ObjectDataSourceMethodEditor_InsertHelpLabel;
    internal static string ObjectDataSourceMethodEditor_SelectHelpLabel;
    internal static string ObjectDataSourceMethodEditor_UpdateHelpLabel;
    internal static string ObjectDataSourceMethodEditor_MethodLabel;
    internal static string ObjectDataSourceMethodEditor_SignatureFormat;
    internal static string ObjectDataSourceMethodEditor_NoMethod;
    internal static string ObjectDataSourceChooseTypePanel_PanelCaption;
    internal static string ObjectDataSourceChooseTypePanel_HelpLabel;
    internal static string ObjectDataSourceChooseTypePanel_NameLabel;
    internal static string ObjectDataSourceChooseTypePanel_ExampleLabel;
    internal static string ObjectDataSourceChooseTypePanel_FilterCheckBox;
    internal static string ParameterCollectionEditor_InvalidParameters;
    internal static string ParameterCollectionEditorForm_Caption;
    internal static string ParameterEditorUserControl_ParametersLabel;
    internal static string ParameterEditorUserControl_PropertiesLabel;
    internal static string ParameterEditorUserControl_AddButton;
    internal static string ParameterEditorUserControl_SourceLabel;
    internal static string ParameterEditorUserControl_ParameterNameColumnHeader;
    internal static string ParameterEditorUserControl_ParameterValueColumnHeader;
    internal static string ParameterEditorUserControl_MoveParameterUp;
    internal static string ParameterEditorUserControl_MoveParameterDown;
    internal static string ParameterEditorUserControl_DeleteParameter;
    internal static string ParameterEditorUserControl_ControlParameterExpressionUnknown;
    internal static string ParameterEditorUserControl_CookieParameterExpressionUnknown;
    internal static string ParameterEditorUserControl_FormParameterExpressionUnknown;
    internal static string ParameterEditorUserControl_QueryStringParameterExpressionUnknown;
    internal static string ParameterEditorUserControl_SessionParameterExpressionUnknown;
    internal static string ParameterEditorUserControl_ProfileParameterExpressionUnknown;
    internal static string ParameterEditorUserControl_RouteParameterExpressionUnknown;
    internal static string ParameterEditorUserControl_ShowAdvancedProperties;
    internal static string ParameterEditorUserControl_HideAdvancedPropertiesLabel;
    internal static string ParameterEditorUserControl_AdvancedProperties;
    internal static string ParameterEditorUserControl_ParameterDefaultValue;
    internal static string ParameterEditorUserControl_ControlParameterControlID;
    internal static string ParameterEditorUserControl_CookieParameterCookieName;
    internal static string ParameterEditorUserControl_FormParameterFormField;
    internal static string ParameterEditorUserControl_SessionParameterSessionField;
    internal static string ParameterEditorUserControl_QueryStringParameterQueryStringField;
    internal static string ParameterEditorUserControl_ProfilePropertyName;
    internal static string ParameterEditorUserControl_RouteParameterRouteKey;
    internal static string DBDlg_Text;
    internal static string DBDlg_Inst;
    internal static string DBDlg_BindableProps;
    internal static string DBDlg_ShowAll;
    internal static string DBDlg_TwoWay;
    internal static string DBDlg_OK;
    internal static string DBDlg_Cancel;
    internal static string DBDlg_Help;
    internal static string DBDlg_BindingGroup;
    internal static string DBDlg_FieldBinding;
    internal static string DBDlg_Field;
    internal static string DBDlg_Format;
    internal static string DBDlg_Sample;
    internal static string DBDlg_CustomBinding;
    internal static string DBDlg_Expr;
    internal static string DBDlg_RefreshSchema;
    internal static string DBDlg_Unbound;
    internal static string DBDlg_Fmt_None;
    internal static string DBDlg_Fmt_General;
    internal static string DBDlg_Fmt_ShortDate;
    internal static string DBDlg_Fmt_LongDate;
    internal static string DBDlg_Fmt_ShortTime;
    internal static string DBDlg_Fmt_LongTime;
    internal static string DBDlg_Fmt_DateTime;
    internal static string DBDlg_Fmt_FullDate;
    internal static string DBDlg_Fmt_Decimal;
    internal static string DBDlg_Fmt_Numeric;
    internal static string DBDlg_Fmt_Fixed;
    internal static string DBDlg_Fmt_Currency;
    internal static string DBDlg_Fmt_Scientific;
    internal static string DBDlg_Fmt_Hexadecimal;
    internal static string DBDlg_InvalidFormat;
    internal static string ExpressionBindingsDialog_Text;
    internal static string ExpressionBindingsDialog_None;
    internal static string ExpressionBindingsDialog_Inst;
    internal static string ExpressionBindingsDialog_BindableProps;
    internal static string ExpressionBindingsDialog_OK;
    internal static string ExpressionBindingsDialog_Cancel;
    internal static string ExpressionBindingsDialog_ExpressionType;
    internal static string ExpressionBindingsDialog_Properties;
    internal static string ExpressionBindingsDialog_UndefinedExpressionPrefix;
    internal static string ExpressionBindingsDialog_GeneratedExpression;
    internal static string BDL_PrivateDataSource;
    internal static string BDL_PrivateDataSourceT;
    internal static string BDL_TemplateModePropBuilder;
    internal static string BDL_PropertyBuilder;
    internal static string BDL_PropertyBuilderVerb;
    internal static string BDL_PropertyBuilderDesc;
    internal static string BDL_BehaviorGroup;
    internal static string BDLAF_Title;
    internal static string BDLAF_SchemeName;
    internal static string BDLAF_Preview;
    internal static string BDLAF_OK;
    internal static string BDLAF_Cancel;
    internal static string BDLAF_Help;
    internal static string BDLAF_Column1;
    internal static string BDLAF_Column2;
    internal static string BDLAF_Header;
    internal static string BDLAF_Footer;
    internal static string BDLAF_Apply;
    internal static string BDLAF_AutoFormats;
    internal static string BDLAF_Skins;
    internal static string BDLAF_DefaultSkin;
    internal static string BDLAF_NoSkin;
    internal static string BDLAF_Couldnotgeneratepreview;
    internal static string BDLAF_RemoveFormatting;
    internal static string BDLScheme_Empty;
    internal static string BDLScheme_Colorful1;
    internal static string BDLScheme_Colorful2;
    internal static string BDLScheme_Colorful3;
    internal static string BDLScheme_Colorful4;
    internal static string BDLScheme_Colorful5;
    internal static string BDLScheme_Professional1;
    internal static string BDLScheme_Professional2;
    internal static string BDLScheme_Professional3;
    internal static string BDLScheme_Simple1;
    internal static string BDLScheme_Simple2;
    internal static string BDLScheme_Simple3;
    internal static string BDLScheme_Classic1;
    internal static string BDLScheme_Classic2;
    internal static string BDLScheme_Consistent1;
    internal static string BDLScheme_Consistent2;
    internal static string BDLScheme_Consistent3;
    internal static string BDLScheme_Consistent4;
    internal static string BDLBor_Text;
    internal static string BDLBor_Desc;
    internal static string BDLBor_CellMarginsGroup;
    internal static string BDLBor_CellPadding;
    internal static string BDLBor_CellSpacing;
    internal static string BDLBor_BorderLinesGroup;
    internal static string BDLBor_GridLines;
    internal static string BDLBor_GL_Horz;
    internal static string BDLBor_GL_Vert;
    internal static string BDLBor_GL_Both;
    internal static string BDLBor_GL_None;
    internal static string BDLBor_BorderColor;
    internal static string BDLBor_BorderWidth;
    internal static string BDLBor_ChooseColorButton;
    internal static string BDLBor_ChooseColorDesc;
    internal static string BDLBor_BorderWidthValueDesc;
    internal static string BDLBor_BorderWidthValueName;
    internal static string BDLBor_BorderWidthUnitDesc;
    internal static string BDLBor_BorderWidthUnitName;
    internal static string BDLFmt_Text;
    internal static string BDLFmt_Desc;
    internal static string BDLFmt_Objects;
    internal static string BDLFmt_AppearanceGroup;
    internal static string BDLFmt_ForeColor;
    internal static string BDLFmt_BackColor;
    internal static string BDLFmt_FontName;
    internal static string BDLFmt_FontSize;
    internal static string BDLFmt_FS_Smaller;
    internal static string BDLFmt_FS_Larger;
    internal static string BDLFmt_FS_XXSmall;
    internal static string BDLFmt_FS_XSmall;
    internal static string BDLFmt_FS_Small;
    internal static string BDLFmt_FS_Medium;
    internal static string BDLFmt_FS_Large;
    internal static string BDLFmt_FS_XLarge;
    internal static string BDLFmt_FS_XXLarge;
    internal static string BDLFmt_FS_Custom;
    internal static string BDLFmt_FontBold;
    internal static string BDLFmt_FontItalic;
    internal static string BDLFmt_FontUnderline;
    internal static string BDLFmt_FontStrikeout;
    internal static string BDLFmt_FontOverline;
    internal static string BDLFmt_AlignmentGroup;
    internal static string BDLFmt_HorzAlign;
    internal static string BDLFmt_HA_Left;
    internal static string BDLFmt_HA_Center;
    internal static string BDLFmt_HA_Right;
    internal static string BDLFmt_HA_Justify;
    internal static string BDLFmt_VertAlign;
    internal static string BDLFmt_VA_Top;
    internal static string BDLFmt_VA_Middle;
    internal static string BDLFmt_VA_Bottom;
    internal static string BDLFmt_LayoutGroup;
    internal static string BDLFmt_Width;
    internal static string BDLFmt_AllowWrapping;
    internal static string BDLFmt_Node_EntireDG;
    internal static string BDLFmt_Node_EntireDL;
    internal static string BDLFmt_Node_Header;
    internal static string BDLFmt_Node_Footer;
    internal static string BDLFmt_Node_Pager;
    internal static string BDLFmt_Node_Items;
    internal static string BDLFmt_Node_Separators;
    internal static string BDLFmt_Node_NormalItems;
    internal static string BDLFmt_Node_AltItems;
    internal static string BDLFmt_Node_SelItems;
    internal static string BDLFmt_Node_EditItems;
    internal static string BDLFmt_Node_Columns;
    internal static string BDLFmt_ChooseColorButton;
    internal static string BDLFmt_ChooseForeColorDesc;
    internal static string BDLFmt_ChooseBackColorDesc;
    internal static string BDLFmt_FontSizeValueDesc;
    internal static string BDLFmt_FontSizeValueName;
    internal static string BDLFmt_FontSizeUnitDesc;
    internal static string BDLFmt_FontSizeUnitName;
    internal static string BDLFmt_WidthValueDesc;
    internal static string BDLFmt_WidthValueName;
    internal static string BDLFmt_WidthUnitDesc;
    internal static string BDLFmt_WidthUnitName;
    internal static string CalAFmt_Title;
    internal static string CalAFmt_SchemeName;
    internal static string CalAFmt_Preview;
    internal static string CalAFmt_OK;
    internal static string CalAFmt_Cancel;
    internal static string CalAFmt_Help;
    internal static string CalAFmt_Scheme_Default;
    internal static string CalAFmt_Scheme_Simple;
    internal static string CalAFmt_Scheme_Professional1;
    internal static string CalAFmt_Scheme_Professional2;
    internal static string CalAFmt_Scheme_Classic;
    internal static string CalAFmt_Scheme_Colorful1;
    internal static string CalAFmt_Scheme_Colorful2;
    internal static string CreateDataSource_Title;
    internal static string CreateDataSource_Caption;
    internal static string CreateDataSource_Description;
    internal static string CreateDataSource_SelectType;
    internal static string CreateDataSource_SelectTypeDesc;
    internal static string CreateDataSource_ID;
    internal static string CreateDataSource_NameNotValid;
    internal static string CreateDataSource_NameNotUnique;
    internal static string DataSourceIDChromeConverter_NoDataSource;
    internal static string DataSourceIDChromeConverter_NewDataSource;
    internal static string DCFAdd_Title;
    internal static string DCFAdd_ChooseField;
    internal static string DCFAdd_HeaderText;
    internal static string DCFAdd_DataField;
    internal static string DCFAdd_ButtonType;
    internal static string DCFAdd_CommandName;
    internal static string DCFAdd_Text;
    internal static string DCFAdd_CommandButtons;
    internal static string DCFAdd_EditUpdate;
    internal static string DCFAdd_Delete;
    internal static string DCFAdd_NewInsert;
    internal static string DCFAdd_Select;
    internal static string DCFAdd_ShowCancel;
    internal static string DCFAdd_DeleteDesc;
    internal static string DCFAdd_SelectDesc;
    internal static string DCFAdd_ShowCancelDesc;
    internal static string DCFAdd_EditUpdateDesc;
    internal static string DCFAdd_NewInsertDesc;
    internal static string DCFAdd_ReadOnly;
    internal static string DCFAdd_ImageMode;
    internal static string DCFAdd_DataMode;
    internal static string DCFAdd_LinkMode;
    internal static string DCFAdd_LinkFormatString;
    internal static string DCFAdd_ExampleFormatString;
    internal static string DCFAdd_HyperlinkText;
    internal static string DCFAdd_HyperlinkURL;
    internal static string DCFAdd_SpecifyText;
    internal static string DCFAdd_BindText;
    internal static string DCFAdd_TextFormatString;
    internal static string DCFAdd_TextFormatStringExample;
    internal static string DCFAdd_SpecifyURL;
    internal static string DCFAdd_BindURL;
    internal static string DCFAdd_URLFormatString;
    internal static string DCFAdd_URLFormatStringExample;
    internal static string DCFEditor_Text;
    internal static string DCFEditor_AutoGen;
    internal static string DCFEditor_AvailableFields;
    internal static string DCFEditor_SelectedFields;
    internal static string DCFEditor_FieldProps;
    internal static string DCFEditor_FieldPropsFormat;
    internal static string DCFEditor_Add;
    internal static string DCFEditor_MoveFieldUpName;
    internal static string DCFEditor_MoveFieldDownName;
    internal static string DCFEditor_DeleteFieldName;
    internal static string DCFEditor_MoveFieldUpDesc;
    internal static string DCFEditor_MoveFieldDownDesc;
    internal static string DCFEditor_DeleteFieldDesc;
    internal static string DCFEditor_Templatize;
    internal static string DCFEditor_Node_AllFields;
    internal static string DCFEditor_Node_Bound;
    internal static string DCFEditor_Node_Button;
    internal static string DCFEditor_Node_Command;
    internal static string DCFEditor_Node_CheckBox;
    internal static string DCFEditor_Node_HyperLink;
    internal static string DCFEditor_Node_Template;
    internal static string DCFEditor_Node_Select;
    internal static string DCFEditor_Node_Edit;
    internal static string DCFEditor_Node_Insert;
    internal static string DCFEditor_Node_Delete;
    internal static string DCFEditor_Node_Image;
    internal static string DCFEditor_Button;
    internal static string DCFEditor_HyperLink;
    internal static string DesignTimeSiteMapProvider_RootNodeText;
    internal static string DesignTimeSiteMapProvider_ParentNodeText;
    internal static string DesignTimeSiteMapProvider_SiblingNodeText;
    internal static string DesignTimeSiteMapProvider_CurrentNodeText;
    internal static string DesignTimeSiteMapProvider_ChildNodeText;
    internal static string DesignTimeSiteMapProvider_Duplicate_Url;
    internal static string DGGen_Text;
    internal static string DGGen_Desc;
    internal static string DGGen_DataGroup;
    internal static string DGGen_DataSource;
    internal static string DGGen_DataMember;
    internal static string DGGen_DSUnbound;
    internal static string DGGen_DataKey;
    internal static string DGGen_DKNone;
    internal static string DGGen_DMNone;
    internal static string DGGen_HeaderFooterGroup;
    internal static string DGGen_ShowHeader;
    internal static string DGGen_ShowFooter;
    internal static string DGGen_BehaviorGroup;
    internal static string DGGen_AllowSorting;
    internal static string DGGen_AutoColumnInfo;
    internal static string DGGen_CustomColumnInfo;
    internal static string DGPg_Text;
    internal static string DGPg_Desc;
    internal static string DGPg_PagingGroup;
    internal static string DGPg_AllowPaging;
    internal static string DGPg_AllowCustomPaging;
    internal static string DGPg_PageSize;
    internal static string DGPg_Rows;
    internal static string DGPg_NavigationGroup;
    internal static string DGPg_Visible;
    internal static string DGPg_Position;
    internal static string DGPg_Pos_Top;
    internal static string DGPg_Pos_Bottom;
    internal static string DGPg_Pos_TopBottom;
    internal static string DGPg_Mode;
    internal static string DGPg_Mode_Buttons;
    internal static string DGPg_Mode_Numbers;
    internal static string DGPg_NextPage;
    internal static string DGPg_PrevPage;
    internal static string DGPg_ButtonCount;
    internal static string DGCol_Text;
    internal static string DGCol_Desc;
    internal static string DGCol_AutoGen;
    internal static string DGCol_ColListGroup;
    internal static string DGCol_AvailableCols;
    internal static string DGCol_SelectedCols;
    internal static string DGCol_ColumnPropsGroup1;
    internal static string DGCol_ColumnPropsGroup2;
    internal static string DGCol_HeaderText;
    internal static string DGCol_HeaderImage;
    internal static string DGCol_FooterText;
    internal static string DGCol_SortExpr;
    internal static string DGCol_Visible;
    internal static string DGCol_Templatize;
    internal static string DGCol_Node;
    internal static string DGCol_Node_DataFields;
    internal static string DGCol_Node_AllFields;
    internal static string DGCol_Node_Bound;
    internal static string DGCol_Node_Button;
    internal static string DGCol_Node_Select;
    internal static string DGCol_Node_Edit;
    internal static string DGCol_Node_Delete;
    internal static string DGCol_Node_HyperLink;
    internal static string DGCol_Node_Template;
    internal static string DGCol_DFC_DataField;
    internal static string DGCol_DFC_DataFormat;
    internal static string DGCol_DFC_ReadOnly;
    internal static string DGCol_BC_Text;
    internal static string DGCol_BC_DataTextField;
    internal static string DGCol_BC_DataTextFormat;
    internal static string DGCol_BC_Command;
    internal static string DGCol_BC_ButtonType;
    internal static string DGCol_BC_BT_Link;
    internal static string DGCol_BC_BT_Push;
    internal static string DGCol_HC_Text;
    internal static string DGCol_HC_DataTextField;
    internal static string DGCol_HC_DataTextFormat;
    internal static string DGCol_HC_URL;
    internal static string DGCol_HC_DataURLField;
    internal static string DGCol_HC_DataURLFormat;
    internal static string DGCol_HC_Target;
    internal static string DGCol_EC_Edit;
    internal static string DGCol_EC_Update;
    internal static string DGCol_EC_Cancel;
    internal static string DGCol_EC_ButtonType;
    internal static string DGCol_EC_BT_Link;
    internal static string DGCol_EC_BT_Push;
    internal static string DGCol_Button;
    internal static string DGCol_SelectButton;
    internal static string DGCol_DeleteButton;
    internal static string DGCol_EditButton;
    internal static string DGCol_UpdateButton;
    internal static string DGCol_CancelButton;
    internal static string DGCol_HyperLink;
    internal static string DGCol_URLPFilter;
    internal static string DGCol_URLPCaption;
    internal static string DGCol_AddColButtonDesc;
    internal static string DGCol_MoveColumnUpButtonDesc;
    internal static string DGCol_MoveColumnDownButtonDesc;
    internal static string DGCol_DeleteColumnButtonDesc;
    internal static string DGCol_HeaderImagePickerDesc;
    internal static string DataList_NoTemplatesInst;
    internal static string DataList_NoTemplatesInst2;
    internal static string DataList_HeaderFooterTemplates;
    internal static string DataList_ItemTemplates;
    internal static string DataList_SeparatorTemplate;
    internal static string DataList_RefreshSchemaTransaction;
    internal static string DataList_RegenerateTemplates;
    internal static string DataList_ClearTemplates;
    internal static string DataList_ClearTemplatesCaption;
    internal static string DLGen_Text;
    internal static string DLGen_Desc;
    internal static string DLGen_DataGroup;
    internal static string DLGen_DataSource;
    internal static string DLGen_DataMember;
    internal static string DLGen_DSUnbound;
    internal static string DLGen_DataKey;
    internal static string DLGen_DKNone;
    internal static string DLGen_DMNone;
    internal static string DLGen_HeaderFooterGroup;
    internal static string DLGen_ShowHeader;
    internal static string DLGen_ShowFooter;
    internal static string DLGen_RepeatLayoutGroup;
    internal static string DLGen_RepeatColumns;
    internal static string DLGen_RepeatDirection;
    internal static string DLGen_RD_Horz;
    internal static string DLGen_RD_Vert;
    internal static string DLGen_RepeatLayout;
    internal static string DLGen_RL_Table;
    internal static string DLGen_RL_Flow;
    internal static string DLGen_ExtractRows;
    internal static string DLGen_Templates;
    internal static string DVScheme_Empty;
    internal static string DVScheme_Colorful1;
    internal static string DVScheme_Colorful2;
    internal static string DVScheme_Colorful3;
    internal static string DVScheme_Colorful4;
    internal static string DVScheme_Colorful5;
    internal static string DVScheme_Professional1;
    internal static string DVScheme_Professional2;
    internal static string DVScheme_Professional3;
    internal static string DVScheme_Simple1;
    internal static string DVScheme_Simple2;
    internal static string DVScheme_Simple3;
    internal static string DVScheme_Classic1;
    internal static string DVScheme_Classic2;
    internal static string DVScheme_Consistent1;
    internal static string DVScheme_Consistent2;
    internal static string DVScheme_Consistent3;
    internal static string DVScheme_Consistent4;
    internal static string FVScheme_Empty;
    internal static string FVScheme_Colorful1;
    internal static string FVScheme_Colorful2;
    internal static string FVScheme_Colorful3;
    internal static string FVScheme_Colorful4;
    internal static string FVScheme_Colorful5;
    internal static string FVScheme_Professional1;
    internal static string FVScheme_Professional2;
    internal static string FVScheme_Professional3;
    internal static string FVScheme_Simple1;
    internal static string FVScheme_Simple2;
    internal static string FVScheme_Simple3;
    internal static string FVScheme_Classic1;
    internal static string FVScheme_Classic2;
    internal static string FVScheme_Consistent1;
    internal static string FVScheme_Consistent2;
    internal static string FVScheme_Consistent3;
    internal static string FVScheme_Consistent4;
    internal static string Repeater_NoTemplatesInst;
    internal static string BaseDataBoundControl_CreateDataSourceTransaction;
    internal static string BaseDataBoundControl_ConfigureDataVerb;
    internal static string BaseDataBoundControl_ConfigureDataVerbDesc;
    internal static string BaseDataBoundControl_DataActionGroup;
    internal static string ExpressionEditor_ExpressionBound;
    internal static string AppSettingExpressionEditor_AppSetting;
    internal static string ConnectionStringsExpressionEditor_ConnectionName;
    internal static string ConnectionStringsExpressionEditor_ConnectionType;
    internal static string ExpressionEditor_Expression;
    internal static string ResourceExpressionEditorSheet_ClassKey;
    internal static string ResourceExpressionEditorSheet_ResourceKey;
    internal static string ResourceExpressionEditorSheet_InvalidResourceKey;
    internal static string RouteValueExpressionEditorSheet_RouteValue;
    internal static string RouteUrlExpressionEditor_InvalidExpression;
    internal static string RouteUrlExpressionEditorSheet_RouteName;
    internal static string RouteUrlExpressionEditorSheet_RouteValues;
    internal static string ControlDesigner_WndProcException;
    internal static string DataBoundControl_SchemaRefreshedWarning;
    internal static string DataBoundControl_SchemaRefreshedWarningNoDataSource;
    internal static string DataBoundControl_SchemaRefreshedCaption;
    internal static string DataBoundControl_GridView;
    internal static string DataBoundControl_DetailsView;
    internal static string DataBoundControl_FormView;
    internal static string DataBoundControl_Column;
    internal static string DataBoundControl_Row;
    internal static string DataBoundControlActionList_SetDataSourceIDTransaction;
    internal static string GridView_EditFieldsTransaction;
    internal static string GridView_AddNewFieldTransaction;
    internal static string GridView_EnableEditingTransaction;
    internal static string GridView_EnableDeletingTransaction;
    internal static string GridView_EnableSortingTransaction;
    internal static string GridView_EnableSelectionTransaction;
    internal static string GridView_EnablePagingTransaction;
    internal static string GridView_MoveLeftTransaction;
    internal static string GridView_MoveRightTransaction;
    internal static string GridView_RemoveFieldTransaction;
    internal static string GridView_SchemaRefreshedTransaction;
    internal static string GridView_EditFieldsVerb;
    internal static string GridView_AddNewFieldVerb;
    internal static string GridView_RemoveFieldVerb;
    internal static string GridView_MoveFieldLeftVerb;
    internal static string GridView_MoveFieldRightVerb;
    internal static string GridView_EditFieldsDesc;
    internal static string GridView_AddNewFieldDesc;
    internal static string GridView_RemoveFieldDesc;
    internal static string GridView_MoveFieldLeftDesc;
    internal static string GridView_MoveFieldRightDesc;
    internal static string GridView_Field;
    internal static string GridView_EnablePaging;
    internal static string GridView_EnableSorting;
    internal static string GridView_EnableEditing;
    internal static string GridView_EnableDeleting;
    internal static string GridView_EnableSelection;
    internal static string GridView_EnablePagingDesc;
    internal static string GridView_EnableSortingDesc;
    internal static string GridView_EnableEditingDesc;
    internal static string GridView_EnableDeletingDesc;
    internal static string GridView_EnableSelectionDesc;
    internal static string DataControls_SchemaRefreshedTransaction;
    internal static string DetailsView_EditFieldsTransaction;
    internal static string DetailsView_AddNewFieldTransaction;
    internal static string DetailsView_EnableEditingTransaction;
    internal static string DetailsView_EnableDeletingTransaction;
    internal static string DetailsView_EnableInsertingTransaction;
    internal static string DetailsView_EnablePagingTransaction;
    internal static string DetailsView_MoveUpTransaction;
    internal static string DetailsView_MoveDownTransaction;
    internal static string DetailsView_RemoveFieldTransaction;
    internal static string DetailsView_EditFieldsVerb;
    internal static string DetailsView_AddNewFieldVerb;
    internal static string DetailsView_RemoveFieldVerb;
    internal static string DetailsView_MoveFieldUpVerb;
    internal static string DetailsView_MoveFieldDownVerb;
    internal static string DetailsView_Field;
    internal static string DetailsView_EnablePaging;
    internal static string DetailsView_EnableEditing;
    internal static string DetailsView_EnableDeleting;
    internal static string DetailsView_EnableInserting;
    internal static string DetailsView_EditFieldsDesc;
    internal static string DetailsView_AddNewFieldDesc;
    internal static string DetailsView_RemoveFieldDesc;
    internal static string DetailsView_MoveFieldUpDesc;
    internal static string DetailsView_MoveFieldDownDesc;
    internal static string DetailsView_EnablePagingDesc;
    internal static string DetailsView_EnableEditingDesc;
    internal static string DetailsView_EnableDeletingDesc;
    internal static string DetailsView_EnableInsertingDesc;
    internal static string FormView_EnablePagingTransaction;
    internal static string FormView_EnablePaging;
    internal static string FormView_EnablePagingDesc;
    internal static string FormView_EnableDynamicData;
    internal static string FormView_EnableDynamicDataDesc;
    internal static string FormView_SchemaRefreshedWarning;
    internal static string FormView_SchemaRefreshedWarningNoDataSource;
    internal static string FormView_SchemaRefreshedWarningGenerate;
    internal static string FormView_SchemaRefreshedCaption;
    internal static string FormView_Edit;
    internal static string FormView_Update;
    internal static string FormView_Cancel;
    internal static string FormView_Delete;
    internal static string FormView_New;
    internal static string FormView_Insert;
    internal static string ListControlCreateDataSource_Title;
    internal static string ListControlCreateDataSource_Caption;
    internal static string ListControlCreateDataSource_Description;
    internal static string ListControlCreateDataSource_SelectDataSource;
    internal static string ListControlCreateDataSource_SelectDataTextField;
    internal static string ListControlCreateDataSource_SelectDataValueField;
    internal static string ListControl_ConfigureDataVerb;
    internal static string ListControlDesigner_ConnectToDataSource;
    internal static string ListControl_EnableAutoPostBack;
    internal static string ListControl_EnableAutoPostBackDesc;
    internal static string ListControl_EditItems;
    internal static string ListControl_EditItemsDesc;
    internal static string ListControlDesigner_EditItems;
    internal static string ContainerControlDesigner_RegionWatermark;
    internal static string ContentPlaceHolder_Invalid_RootComponent;
    internal static string Content_CreateBlankContent;
    internal static string Content_ClearRegion;
    internal static string RenderOuterTable_RemoveOuterTableWarning;
    internal static string RenderOuterTable_RemoveOuterTableCaption;
    internal static string RenderOuterTableHelper_ResetProperties;
    internal static string SiteMapPathAFmt_Scheme_Default;
    internal static string SiteMapPathAFmt_Scheme_Colorful;
    internal static string SiteMapPathAFmt_Scheme_Simple;
    internal static string SiteMapPathAFmt_Scheme_Professional;
    internal static string SiteMapPathAFmt_Scheme_Classic;
    internal static string ImageGeneratorUrlEditor_Filter;
    internal static string WebControls_ConvertToTemplate;
    internal static string WebControls_ConvertToTemplateDescription;
    internal static string WebControls_ConvertToTemplateDescriptionViews;
    internal static string WebControls_Reset;
    internal static string WebControls_ResetDescription;
    internal static string WebControls_ResetDescriptionViews;
    internal static string WebControls_Views;
    internal static string WebControls_ViewsDescription;
    internal static string ChangePassword_ChangePasswordView;
    internal static string ChangePassword_SuccessView;
    internal static string ChangePasswordAutoFormat_UserName;
    internal static string ChangePasswordAutoFormat_HelpPageText;
    internal static string ChangePasswordScheme_Empty;
    internal static string ChangePasswordScheme_Classic;
    internal static string ChangePasswordScheme_Elegant;
    internal static string ChangePasswordScheme_Simple;
    internal static string ChangePasswordScheme_Professional;
    internal static string ChangePasswordScheme_Colorful;
    internal static string Login_LaunchWebAdmin;
    internal static string Login_LaunchWebAdminDescription;
    internal static string LoginScheme_Empty;
    internal static string LoginScheme_Classic;
    internal static string LoginScheme_Elegant;
    internal static string LoginScheme_Simple;
    internal static string LoginScheme_Professional;
    internal static string LoginScheme_Colorful;
    internal static string LoginAutoFormat_UserName;
    internal static string LoginAutoFormat_HelpPageText;
    internal static string CreateUserWizardScheme_Empty;
    internal static string CreateUserWizardScheme_Classic;
    internal static string CreateUserWizardScheme_Elegant;
    internal static string CreateUserWizardScheme_Simple;
    internal static string CreateUserWizardScheme_Professional;
    internal static string CreateUserWizardScheme_Colorful;
    internal static string LoginStatus_LoggedOutView;
    internal static string LoginStatus_LoggedInView;
    internal static string LoginView_EditRoleGroups;
    internal static string LoginView_EditRoleGroupsDescription;
    internal static string LoginView_EditRoleGroupsTransactionDescription;
    internal static string LoginView_ErrorRendering;
    internal static string LoginView_AnonymousTemplateEmpty;
    internal static string LoginView_LoggedInTemplateEmpty;
    internal static string LoginView_RoleGroupTemplateEmpty;
    internal static string LoginView_NoTemplateInst;
    internal static string UserControlDesignerHost_ComponentAlreadyExists;
    internal static string MenuDesigner_DataActionGroup;
    internal static string MenuDesigner_EditBindingsTransactionDescription;
    internal static string MenuDesigner_EditMenuItemsTransactionDescription;
    internal static string MenuDesigner_EditBindings;
    internal static string MenuDesigner_EditBindingsDescription;
    internal static string MenuDesigner_EditMenuItems;
    internal static string MenuDesigner_EditMenuItemsDescription;
    internal static string MenuDesigner_CreateLineImages;
    internal static string MenuDesigner_Empty;
    internal static string MenuDesigner_EmptyDataBinding;
    internal static string MenuDesigner_Error;
    internal static string MenuDesigner_EditNodesTransactionDescription;
    internal static string MenuDesigner_EditNodes;
    internal static string MenuDesigner_ViewsDescription;
    internal static string MenuDesigner_ConvertToDynamicTemplate;
    internal static string MenuDesigner_ConvertToDynamicTemplateDescription;
    internal static string MenuDesigner_ResetDynamicTemplate;
    internal static string MenuDesigner_ResetDynamicTemplateDescription;
    internal static string MenuDesigner_ConvertToStaticTemplate;
    internal static string MenuDesigner_ConvertToStaticTemplateDescription;
    internal static string MenuDesigner_ResetStaticTemplate;
    internal static string MenuDesigner_ResetStaticTemplateDescription;
    internal static string Menu_StaticView;
    internal static string Menu_DynamicView;
    internal static string MenuItemCollectionEditor_AddRoot;
    internal static string MenuItemCollectionEditor_AddChild;
    internal static string MenuItemCollectionEditor_Remove;
    internal static string MenuItemCollectionEditor_MoveDown;
    internal static string MenuItemCollectionEditor_MoveUp;
    internal static string MenuItemCollectionEditor_Indent;
    internal static string MenuItemCollectionEditor_Unindent;
    internal static string MenuItemCollectionEditor_OK;
    internal static string MenuItemCollectionEditor_Cancel;
    internal static string MenuItemCollectionEditor_Nodes;
    internal static string MenuItemCollectionEditor_Properties;
    internal static string MenuItemCollectionEditor_PropertyGrid;
    internal static string MenuItemCollectionEditor_Title;
    internal static string MenuItemCollectionEditor_NewNodeText;
    internal static string MenuItemCollectionEditor_CantSelect;
    internal static string MenuBindingsEditor_Apply;
    internal static string MenuBindingsEditor_AddBinding;
    internal static string MenuBindingsEditor_AutoGenerateBindings;
    internal static string MenuBindingsEditor_Bindings;
    internal static string MenuBindingsEditor_BindingProperties;
    internal static string MenuBindingsEditor_Cancel;
    internal static string MenuBindingsEditor_EmptyBindingText;
    internal static string MenuBindingsEditor_OK;
    internal static string MenuBindingsEditor_Schema;
    internal static string MenuBindingsEditor_Title;
    internal static string MenuBindingsEditor_MoveBindingUpName;
    internal static string MenuBindingsEditor_MoveBindingUpDescription;
    internal static string MenuBindingsEditor_MoveBindingDownName;
    internal static string MenuBindingsEditor_MoveBindingDownDescription;
    internal static string MenuBindingsEditor_DeleteBindingName;
    internal static string MenuBindingsEditor_DeleteBindingDescription;
    internal static string MenuScheme_Empty;
    internal static string MenuScheme_Classic;
    internal static string MenuScheme_Professional;
    internal static string MenuScheme_Colorful;
    internal static string MenuScheme_Simple;
    internal static string PagerScheme_Empty;
    internal static string PagerScheme_Classic;
    internal static string PagerScheme_Professional;
    internal static string PagerScheme_Colorful;
    internal static string PagerScheme_Simple;
    internal static string PasswordRecoveryScheme_Empty;
    internal static string PasswordRecoveryScheme_Classic;
    internal static string PasswordRecoveryScheme_Elegant;
    internal static string PasswordRecoveryScheme_Simple;
    internal static string PasswordRecoveryScheme_Professional;
    internal static string PasswordRecoveryScheme_Colorful;
    internal static string PasswordRecovery_QuestionView;
    internal static string PasswordRecovery_SuccessView;
    internal static string PasswordRecovery_UserNameView;
    internal static string PasswordRecoveryAutoFormat_UserName;
    internal static string PasswordRecoveryAutoFormat_HelpPageText;
    internal static string MailFilePicker_Caption;
    internal static string MailFilePicker_Filter;
    internal static string Xml_Inst;
    internal static string MailDefinitionBodyFileNameEditor_DefaultCaption;
    internal static string MailDefinitionBodyFileNameEditor_DefaultFilter;
    internal static string UrlPicker_DefaultCaption;
    internal static string UrlPicker_DefaultFilter;
    internal static string UrlPicker_ImageCaption;
    internal static string UrlPicker_ImageFilter;
    internal static string UrlPicker_XmlCaption;
    internal static string UrlPicker_XmlFilter;
    internal static string UrlPicker_XslCaption;
    internal static string UrlPicker_XslFilter;
    internal static string XMLFilePicker_Caption;
    internal static string XMLFilePicker_Filter;
    internal static string DataBindingGlyph_ToolTip;
    internal static string ExpressionBindingGlyph_ToolTip;
    internal static string ImplicitExpressionBindingGlyph_ToolTip;
    internal static string TemplateEdit_Tip;
    internal static string RegexEditor_Title;
    internal static string RegexEditor_StdExp;
    internal static string RegexEditor_Validate;
    internal static string RegexEditor_SampleInput;
    internal static string RegexEditor_TestExpression;
    internal static string RegexEditor_ValidationExpression;
    internal static string RegexEditor_InputValid;
    internal static string RegexEditor_InputInvalid;
    internal static string RegexEditor_BadExpression;
    internal static string RegexEditor_Help;
    internal static string RegexCanned_Custom;
    internal static string RegexCanned_Zip;
    internal static string RegexCanned_SocialSecurity;
    internal static string RegexCanned_USPhone;
    internal static string RegexCanned_Email;
    internal static string RegexCanned_URL;
    internal static string RegexCanned_FrZip;
    internal static string RegexCanned_FrPhone;
    internal static string RegexCanned_DeZip;
    internal static string RegexCanned_DePhone;
    internal static string RegexCanned_JpnZip;
    internal static string RegexCanned_JpnPhone;
    internal static string RegexCanned_PrcZip;
    internal static string RegexCanned_PrcPhone;
    internal static string RegexCanned_PrcSocialSecurity;
    internal static string RegexCanned_Zip_Format;
    internal static string RegexCanned_SocialSecurity_Format;
    internal static string RegexCanned_USPhone_Format;
    internal static string RegexCanned_FrZip_Format;
    internal static string RegexCanned_FrPhone_Format;
    internal static string RegexCanned_DeZip_Format;
    internal static string RegexCanned_DePhone_Format;
    internal static string RegexCanned_JpnZip_Format;
    internal static string RegexCanned_JpnPhone_Format;
    internal static string RegexCanned_PrcZip_Format;
    internal static string RegexCanned_PrcPhone_Format;
    internal static string RegexCanned_PrcSocialSecurity_Format;
    internal static string TemplateEditableDesignerRegion_CannotSetSupportsDataBinding;
    internal static string TemplateDefinition_InvalidTemplateProperty;
    internal static string WrongType;
    internal static string Toolbox_OnWebformsPage;
    internal static string Toolbox_BadAttributeType;
    internal static string TreeViewImageGenerator_ExpandImage;
    internal static string TreeViewImageGenerator_CollapseImage;
    internal static string TreeViewImageGenerator_NoExpandImage;
    internal static string TreeViewImageGenerator_Preview;
    internal static string TreeViewImageGenerator_Properties;
    internal static string TreeViewImageGenerator_SampleRoot;
    internal static string TreeViewImageGenerator_SampleParent;
    internal static string TreeViewImageGenerator_SampleLeaf;
    internal static string TreeViewImageGenerator_FolderName;
    internal static string TreeViewImageGenerator_DefaultFolderName;
    internal static string TreeViewImageGenerator_Title;
    internal static string TreeViewImageGenerator_LineColor;
    internal static string TreeViewImageGenerator_LineStyle;
    internal static string TreeViewImageGenerator_LineWidth;
    internal static string TreeViewImageGenerator_LineImageHeight;
    internal static string TreeViewImageGenerator_LineImageWidth;
    internal static string TreeViewImageGenerator_LineImagesGenerated;
    internal static string TreeViewImageGenerator_MissingFolderName;
    internal static string TreeViewImageGenerator_NonExistentFolderName;
    internal static string TreeViewImageGenerator_ProgressBarName;
    internal static string TreeViewImageGenerator_ImagePickerFilter;
    internal static string TreeViewImageGenerator_TransparentColor;
    internal static string TreeViewImageGenerator_ErrorCreatingFolder;
    internal static string TreeViewImageGenerator_InvalidFolderName;
    internal static string TreeViewImageGenerator_DocumentExists;
    internal static string TreeViewImageGenerator_ErrorWriting;
    internal static string TreeViewImageGenerator_InvalidValue;
    internal static string TreeViewImageGenerator_CouldNotOpenImage;
    internal static string TreeViewImageGenerator_Yes;
    internal static string TreeViewImageGenerator_No;
    internal static string TreeViewImageGenerator_YesToAll;
    internal static string TreeViewImageGenerator_HelpText;
    internal static string TreeNodeCollectionEditor_AddRoot;
    internal static string TreeNodeCollectionEditor_AddChild;
    internal static string TreeNodeCollectionEditor_Remove;
    internal static string TreeNodeCollectionEditor_MoveDown;
    internal static string TreeNodeCollectionEditor_MoveUp;
    internal static string TreeNodeCollectionEditor_Indent;
    internal static string TreeNodeCollectionEditor_Unindent;
    internal static string TreeNodeCollectionEditor_OK;
    internal static string TreeNodeCollectionEditor_Cancel;
    internal static string TreeNodeCollectionEditor_Nodes;
    internal static string TreeNodeCollectionEditor_Properties;
    internal static string TreeNodeCollectionEditor_Title;
    internal static string TreeNodeCollectionEditor_NewNodeText;
    internal static string TreeViewBindingsEditor_Apply;
    internal static string TreeViewBindingsEditor_AddBinding;
    internal static string TreeViewBindingsEditor_AutoGenerateBindings;
    internal static string TreeViewBindingsEditor_Bindings;
    internal static string TreeViewBindingsEditor_BindingProperties;
    internal static string TreeViewBindingsEditor_Cancel;
    internal static string TreeViewBindingsEditor_EmptyBindingText;
    internal static string TreeViewBindingsEditor_OK;
    internal static string TreeViewBindingsEditor_Schema;
    internal static string TreeViewBindingsEditor_Title;
    internal static string TreeViewDesigner_CreateLineImagesTransactionDescription;
    internal static string TreeViewDesigner_DataActionGroup;
    internal static string TreeViewDesigner_EditBindingsTransactionDescription;
    internal static string TreeViewDesigner_EditNodesTransactionDescription;
    internal static string TreeViewDesigner_EditNodesDescription;
    internal static string TreeViewDesigner_EditBindings;
    internal static string TreeViewDesigner_EditBindingsDescription;
    internal static string TreeViewDesigner_EditNodes;
    internal static string TreeViewDesigner_CreateLineImages;
    internal static string TreeViewDesigner_CreateLineImagesDescription;
    internal static string TreeViewDesigner_Empty;
    internal static string TreeViewDesigner_EmptyDataBinding;
    internal static string TreeViewDesigner_Error;
    internal static string TreeViewDesigner_ShowLines;
    internal static string TreeViewDesigner_ShowLinesDescription;
    internal static string TreeViewBindingsEditor_MoveBindingUpName;
    internal static string TreeViewBindingsEditor_MoveBindingUpDescription;
    internal static string TreeViewBindingsEditor_MoveBindingDownName;
    internal static string TreeViewBindingsEditor_MoveBindingDownDescription;
    internal static string TreeViewBindingsEditor_DeleteBindingName;
    internal static string TreeViewBindingsEditor_DeleteBindingDescription;
    internal static string TVScheme_Empty;
    internal static string TVScheme_XP_File_Explorer;
    internal static string TVScheme_MSDN;
    internal static string TVScheme_Windows_Help;
    internal static string TVScheme_Simple;
    internal static string TVScheme_Simple2;
    internal static string TVScheme_BulletedList;
    internal static string TVScheme_BulletedList2;
    internal static string TVScheme_BulletedList3;
    internal static string TVScheme_BulletedList4;
    internal static string TVScheme_BulletedList5;
    internal static string TVScheme_BulletedList6;
    internal static string TVScheme_Arrows;
    internal static string TVScheme_Arrows2;
    internal static string TVScheme_TOC;
    internal static string TVScheme_News;
    internal static string TVScheme_Contacts;
    internal static string TVScheme_Inbox;
    internal static string TVScheme_Events;
    internal static string TVScheme_FAQ;
    internal static string UserControlDesigner_MissingID;
    internal static string UserControlDesigner_EditUserControl;
    internal static string UserControlDesigner_Refresh;
    internal static string UserControlDesigner_NotFound;
    internal static string UserControlDesigner_CyclicError;
    internal static string WebPartScheme_Empty;
    internal static string WebPartScheme_Professional;
    internal static string WebPartScheme_Simple;
    internal static string WebPartScheme_Classic;
    internal static string WebPartScheme_Colorful;
    internal static string CatalogZoneDesigner_OnlyCatalogParts;
    internal static string CatalogZoneDesigner_Empty;
    internal static string DesignerCatalogPartChrome_TypeCatalogPart;
    internal static string DesignerEditorPartChrome_TypeEditorPart;
    internal static string EditorZoneDesigner_OnlyEditorParts;
    internal static string EditorZoneDesigner_Empty;
    internal static string DeclarativeCatalogPartDesigner_Empty;
    internal static string ToolZoneDesigner_ViewInBrowseMode;
    internal static string ToolZoneDesigner_ViewInBrowseModeDesc;
    internal static string WebPartZoneAutoFormat_SampleWebPartTitle;
    internal static string WebPartZoneAutoFormat_SampleWebPartContents;
    internal static string CatalogZone_SampleWebPartTitle;
    internal static string WebPartZoneDesigner_Empty;
    internal static string WebPartZoneDesigner_Error;
    internal static string RTL;
    internal static string Sample_Column;
    internal static string Sample_Databound_Column;
    internal static string Sample_Databound_Text;
    internal static string Sample_Databound_Text_Alt;
    internal static string Sample_Unbound_Text;
    internal static string DesignTimeData_BadDataMember;
    internal static string TrayLineUpIcons;
    internal static string TrayAutoArrange;
    internal static string TrayShowLargeIcons;
    internal static string StringDictionaryEditorTitle;
    internal static string StartFileNameEditorTitle;
    internal static string StartFileNameEditorAllFiles;
    internal static string ToolStripItemCollectionEditorVerb;
    internal static string ToolStripDropDownItemCollectionEditorVerb;
    internal static string ToolStripItemCollectionEditorLabelNone;
    internal static string ToolStripItemCollectionEditorLabelMultipleItems;
    internal static string ContextMenuViewCode;
    internal static string ContextMenuDocumentOutline;
    internal static string ContextMenuBringToFront;
    internal static string ContextMenuSendToBack;
    internal static string ContextMenuAlignToGrid;
    internal static string ContextMenuLockControls;
    internal static string ContextMenuSelect;
    internal static string ContextMenuCut;
    internal static string ContextMenuCopy;
    internal static string ContextMenuPaste;
    internal static string ContextMenuDelete;
    internal static string ContextMenuProperties;
    internal static string ToolStripItemContextMenuSetImage;
    internal static string ToolStripItemContextMenuConvertTo;
    internal static string ToolStripItemContextMenuInsert;
    internal static string ToolStripActionList_Name;
    internal static string ToolStripActionList_NameDesc;
    internal static string ToolStripActionList_Behavior;
    internal static string ToolStripActionList_Visible;
    internal static string ToolStripActionList_VisibleDesc;
    internal static string ToolStripActionList_ShowItemToolTips;
    internal static string ToolStripActionList_ShowItemToolTipsDesc;
    internal static string ToolStripActionList_AllowItemReorder;
    internal static string ToolStripActionList_AllowItemReorderDesc;
    internal static string ToolStripActionList_CanOverflow;
    internal static string ToolStripActionList_CanOverflowDesc;
    internal static string ToolStripActionList_Layout;
    internal static string ToolStripActionList_Dock;
    internal static string ToolStripActionList_DockDesc;
    internal static string ToolStripActionList_Raft;
    internal static string ToolStripActionList_RaftDesc;
    internal static string ToolStripActionList_RenderMode;
    internal static string ToolStripActionList_RenderModeDesc;
    internal static string ToolStripActionList_GripStyle;
    internal static string ToolStripActionList_GripStyleDesc;
    internal static string ToolStripActionList_Stretch;
    internal static string ToolStripActionList_StretchDesc;
    internal static string ToolStripActionList_SizingGrip;
    internal static string ToolStripActionList_SizingGripDesc;
    internal static string ToolStripContainerActionList_Show;
    internal static string ToolStripContainerActionList_Visible;
    internal static string ToolStripContainerActionList_Top;
    internal static string ToolStripContainerActionList_TopDesc;
    internal static string ToolStripContainerActionList_Bottom;
    internal static string ToolStripContainerActionList_BottomDesc;
    internal static string ToolStripContainerActionList_Left;
    internal static string ToolStripContainerActionList_LeftDesc;
    internal static string ToolStripContainerActionList_Right;
    internal static string ToolStripContainerActionList_RightDesc;
    internal static string ContextMenuStripActionList_ShowImageMargin;
    internal static string ContextMenuStripActionList_ShowImageMarginDesc;
    internal static string ContextMenuStripActionList_ShowCheckMargin;
    internal static string ContextMenuStripActionList_ShowCheckMarginDesc;
    internal static string ContextMenuStripActionList_ShowShortCuts;
    internal static string ContextMenuStripActionList_ShowShortCutsDesc;
    internal static string ToolStripDesignerTransactionAddingItem;
    internal static string ToolStripDesignerTransactionRemovingItem;
    internal static string ToolStripDesignerSelectToolStripTransaction;
    internal static string ToolStripDesignerStandardItemsVerb;
    internal static string ToolStripDesignerEmbedVerb;
    internal static string ToolStripDesignerStandardItemsVerbDesc;
    internal static string ToolStripDesignerEmbedVerbDesc;
    internal static string ToolStripDesignerInsertItemsVerb;
    internal static string ToolStripAddingItem;
    internal static string ToolStripDesignerSelectAllVerb;
    internal static string ToolStripSeparatorError;
    internal static string ToolStripCircularReferenceError;
    internal static string ToolStripDesignerTemplateNodeEnterText;
    internal static string ToolStripDesignerTemplateNodeSplitButtonToolTip;
    internal static string ToolStripDesignerTemplateNodeLabelToolTip;
    internal static string ToolStripDesignerTemplateNodeSplitButtonStatusStripToolTip;
    internal static string ToolStripDesignerFailedToLoadItemType;
    internal static string ToolStripDesignerToolStripItemsOnly;
    internal static string StandardMenuTitle;
    internal static string StandardMenuStripTitle;
    internal static string StandardMenuFile;
    internal static string StandardMenuNew;
    internal static string StandardMenuOpen;
    internal static string StandardMenuSave;
    internal static string StandardMenuSaveAs;
    internal static string StandardMenuPrint;
    internal static string StandardMenuPrintPreview;
    internal static string StandardMenuExit;
    internal static string StandardMenuEdit;
    internal static string StandardMenuUndo;
    internal static string StandardMenuRedo;
    internal static string StandardMenuCut;
    internal static string StandardToolCut;
    internal static string StandardMenuCopy;
    internal static string StandardMenuPaste;
    internal static string StandardMenuDelete;
    internal static string StandardMenuSelectAll;
    internal static string StandardMenuTools;
    internal static string StandardMenuCustomize;
    internal static string StandardMenuOptions;
    internal static string StandardMenuHelp;
    internal static string StandardToolHelp;
    internal static string StandardMenuContents;
    internal static string StandardMenuIndex;
    internal static string StandardMenuSearch;
    internal static string StandardMenuAbout;
    internal static string StandardMenuCreateDesc;
    internal static string CG_DataSetGeneratorFail_InputFileEmpty;
    internal static string CG_DataSetGeneratorFail_DatasetNull;
    internal static string CG_DataSetGeneratorFail_CodeGeneratorNull;
    internal static string CG_DataSetGeneratorFail_CodeNamespaceNull;
    internal static string CG_DataSetGeneratorFail_UnableToConvertToDataSet;
    internal static string CG_DataSetGeneratorFail_FailToGenerateCode;
    internal static string CG_TypeCantBeNull;
    internal static string CG_NoCtor0;
    internal static string CG_NoCtor1;
    internal static string CG_MainSelectCommandNotSet;
    internal static string CG_UnableToReadExtProperties;
    internal static string CG_UnableToConvertSqlDbTypeToSqlType;
    internal static string CG_UnableToConvertDbTypeToUrtType;
    internal static string CG_RowColumnPropertyNameFixup;
    internal static string CG_DataSourceClassNameFixup;
    internal static string CG_TablePropertyNameFixup;
    internal static string CG_TableSourceNameFixup;
    internal static string CG_EmptyDSName;
    internal static string CG_ColumnIsDBNull;
    internal static string CG_ParameterIsDBNull;
    internal static string CG_TableAdapterManagerNeedsSameConnString;
    internal static string CG_TableAdapterManagerHasNoConnection;
    internal static string CG_TableAdapterManagerNotSupportTransaction;
    internal static string DTDS_CouldNotDeserializeConnection;
    internal static string DTDS_CouldNotDeserializeXmlElement;
    internal static string DTDS_NameIsRequired;
    internal static string DTDS_NameConflict;
    internal static string DTDS_TableNotMatch;
    internal static string DD_E_TableDirectValidForOleDbOnly;
    internal static string CM_NameNotEmptyExcption;
    internal static string CM_NameTooLongExcption;
    internal static string CM_NameInvalid;
    internal static string CM_NameExist;
    internal static string PropertiesCategoryName;
    internal static string LinksCategoryName;
    internal static string ItemsCategoryName;
    internal static string DataCategoryName;
    internal static string ImageListActionListImageSizeDisplayName;
    internal static string ImageListActionListImageSizeDescription;
    internal static string ImageListActionListColorDepthDisplayName;
    internal static string ImageListActionListColorDepthDescription;
    internal static string ImageListActionListChooseImagesDisplayName;
    internal static string ImageListActionListChooseImagesDescription;
    internal static string ListControlUnboundActionListEditItemsDisplayName;
    internal static string ListControlUnboundActionListEditItemsDescription;
    internal static string ListViewActionListEditItemsDisplayName;
    internal static string ListViewActionListEditItemsDescription;
    internal static string ListViewActionListEditColumnsDisplayName;
    internal static string ListViewActionListEditColumnsDescription;
    internal static string ListViewActionListEditGroupsDisplayName;
    internal static string ListViewActionListEditGroupsDescription;
    internal static string ListViewActionListViewDisplayName;
    internal static string ListViewActionListViewDescription;
    internal static string ListViewActionListSmallImagesDisplayName;
    internal static string ListViewActionListSmallImagesDescription;
    internal static string ListViewActionListLargeImagesDisplayName;
    internal static string ListViewActionListLargeImagesDescription;
    internal static string BoundModeHeader;
    internal static string UnBoundModeHeader;
    internal static string BoundModeDisplayName;
    internal static string BoundModeDescription;
    internal static string DataSourceDisplayName;
    internal static string DataSourceDescription;
    internal static string DisplayMemberDisplayName;
    internal static string DisplayMemberDescription;
    internal static string ValueMemberDisplayName;
    internal static string ValueMemberDescription;
    internal static string BoundSelectedValueDisplayName;
    internal static string BoundSelectedValueDescription;
    internal static string EditItemDisplayName;
    internal static string EditItemDescription;
    internal static string ChooseImageDisplayName;
    internal static string ChooseImageDescription;
    internal static string SizeModeDisplayName;
    internal static string SizeModeDescription;
    internal static string EditLinesDisplayName;
    internal static string EditLinesDescription;
    internal static string MultiLineDisplayName;
    internal static string MultiLineDescription;
    internal static string ChooseIconDisplayName;
    internal static string InvokeNodesDialogDisplayName;
    internal static string InvokeNodesDialogDescription;
    internal static string ImageListDisplayName;
    internal static string ImageListDescription;
    internal static string DesignerOptions_LayoutSettings;
    internal static string DesignerOptions_ObjectBoundSmartTagSettings;
    internal static string DesignerOptions_GridSizeDesc;
    internal static string DesignerOptions_GridSizeDisplayName;
    internal static string DesignerOptions_ShowGridDesc;
    internal static string DesignerOptions_ShowGridDisplayName;
    internal static string DesignerOptions_SnapToGridDesc;
    internal static string DesignerOptions_SnapToGridDisplayName;
    internal static string DesignerOptions_UseSnapLines;
    internal static string DesignerOptions_UseSmartTags;
    internal static string DesignerOptions_ObjectBoundSmartTagAutoShow;
    internal static string DesignerOptions_ObjectBoundSmartTagAutoShowDisplayName;
    internal static string DesignerOptions_CodeGenSettings;
    internal static string DesignerOptions_OptimizedCodeGen;
    internal static string DesignerOptions_CodeGenDisplay;
    internal static string DesignerOptions_EnableInSituEditingDisplay;
    internal static string DesignerOptions_EnableInSituEditingCat;
    internal static string DesignerOptions_EnableInSituEditingDesc;
    internal static string ClassComments1;
    internal static string ClassComments2;
    internal static string ClassComments3;
    internal static string ClassComments4;
    internal static string ClassDocComment;
    internal static string StringPropertyComment;
    internal static string StringPropertyTruncatedComment;
    internal static string NonStringPropertyComment;
    internal static string NonStringPropertyDetailedComment;
    internal static string CulturePropertyComment1;
    internal static string CulturePropertyComment2;
    internal static string ResMgrPropertyComment;
    internal static string MismatchedResourceName;
    internal static string InvalidIdentifier;
    internal static string DirectiveRegistry_UnknownFramework;
    public static ResourceManager Resources { get; }
    private static SR();
    public static ResourceManager get_Resources();
    public static string GetString(string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(string name, Boolean& usedFallback);
    public static object GetObject(string name);
}
[AttributeUsageAttribute("32767")]
internal class System.Design.SRCategoryAttribute : CategoryAttribute {
    public SRCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class System.Design.SRDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public SRDescriptionAttribute(string description);
    public virtual string get_Description();
}
[SuppressUnmanagedCodeSecurityAttribute]
internal class System.Design.UnsafeNativeMethods : object {
    public static int ClientToScreen(HandleRef hWnd, POINT pt);
    public static IntPtr PostMessage(IntPtr hwnd, int msg, IntPtr wparam, IntPtr lparam);
    public static IntPtr SendMessage(IntPtr hwnd, int msg, bool wparam, int lparam);
    public static IntPtr GetActiveWindow();
    public static int GetMessageTime();
    public static IntPtr SetActiveWindow(HandleRef hWnd);
    public static void NotifyWinEvent(int winEvent, HandleRef hwnd, int objType, int objID);
    public static IntPtr SetFocus(HandleRef hWnd);
    public static IntPtr GetFocus();
    public static bool IsChild(HandleRef hWndParent, HandleRef hwnd);
    public static int GetWindowText(HandleRef hWnd, StringBuilder lpString, int nMaxCount);
    public static int MsgWaitForMultipleObjectsEx(int nCount, IntPtr pHandles, int dwMilliseconds, int dwWakeMask, int dwFlags);
    public static int ReadClassStg(HandleRef pStg, Guid& pclsid);
    public static IntPtr GetStockObject(int nIndex);
    public static IntPtr LresultFromObject(Guid& refiid, IntPtr wParam, IntPtr pAcc);
    public static IntPtr BeginPaint(IntPtr hWnd, PAINTSTRUCT& lpPaint);
    public static bool EndPaint(IntPtr hWnd, PAINTSTRUCT& lpPaint);
    public static IntPtr GetDC(HandleRef hWnd);
    public static int ReleaseDC(HandleRef hWnd, HandleRef hDC);
    public static int GetDeviceCaps(HandleRef hDC, int nIndex);
    public static IntPtr ExtractIcon(HandleRef hMod, string exeName, int index);
    public static bool DestroyIcon(HandleRef hIcon);
    public static IntPtr SetWindowsHookEx(int hookid, HookProc pfnhook, HandleRef hinst, int threadid);
    public static IntPtr GetWindowLong(HandleRef hWnd, int nIndex);
    public static IntPtr GetWindowLong32(HandleRef hWnd, int nIndex);
    public static IntPtr GetWindowLongPtr64(HandleRef hWnd, int nIndex);
    public static IntPtr SetWindowLong(HandleRef hWnd, int nIndex, HandleRef dwNewLong);
    public static IntPtr SetWindowLongPtr32(HandleRef hWnd, int nIndex, HandleRef dwNewLong);
    public static IntPtr SetWindowLongPtr64(HandleRef hWnd, int nIndex, HandleRef dwNewLong);
    public static bool UnhookWindowsHookEx(HandleRef hhook);
    public static int GetWindowThreadProcessId(HandleRef hWnd, Int32& lpdwProcessId);
    public static IntPtr CallNextHookEx(HandleRef hhook, int code, IntPtr wparam, IntPtr lparam);
    public static ILockBytes CreateILockBytesOnHGlobal(HandleRef hGlobal, bool fDeleteOnRelease);
    public static IStorage StgCreateDocfileOnILockBytes(ILockBytes iLockBytes, int grfMode, int reserved);
}
internal class System.Diagnostics.Design.CategoryValueConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
internal class System.Diagnostics.Design.CounterCreationDataConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Diagnostics.Design.CounterNameConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
internal class System.Diagnostics.Design.EditableDictionaryEntry : object {
    public string _name;
    public string _value;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public EditableDictionaryEntry(string name, string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
}
internal class System.Diagnostics.Design.FSWPathEditor : FolderNameEditor {
    protected virtual void InitializeDialog(FolderBrowser folderBrowser);
}
internal class System.Diagnostics.Design.InstanceNameConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.Diagnostics.Design.LogConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.Diagnostics.Design.ProcessDesigner : ComponentDesigner {
    protected virtual void PreFilterProperties(IDictionary properties);
}
public class System.Diagnostics.Design.ProcessModuleDesigner : ComponentDesigner {
    protected virtual void PreFilterProperties(IDictionary properties);
}
public class System.Diagnostics.Design.ProcessThreadDesigner : ComponentDesigner {
    protected virtual void PreFilterProperties(IDictionary properties);
}
internal class System.Diagnostics.Design.StartFileNameEditor : FileNameEditor {
    protected virtual void InitializeDialog(OpenFileDialog openFile);
}
internal class System.Diagnostics.Design.StringDictionaryCodeDomSerializer : CodeDomSerializer {
    public virtual object Deserialize(IDesignerSerializationManager manager, object codeObject);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
internal class System.Diagnostics.Design.StringDictionaryEditor : CollectionEditor {
    public StringDictionaryEditor(Type type);
    protected virtual Type CreateCollectionItemType();
    protected virtual object CreateInstance(Type itemType);
    protected virtual object SetItems(object editValue, Object[] value);
    protected virtual Object[] GetItems(object editValue);
    protected virtual CollectionForm CreateCollectionForm();
}
internal class System.Diagnostics.Design.StringValueConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class System.Diagnostics.Design.VerbConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
}
internal class System.Diagnostics.Design.WorkingDirectoryEditor : FolderNameEditor {
    protected virtual void InitializeDialog(FolderBrowser folderBrowser);
}
internal static class System.Drawing.BitmapSelector : object {
    internal static string Suffix { get; internal set; }
    internal static string get_Suffix();
    internal static void set_Suffix(string value);
    internal static string AppendSuffix(string filePath);
    public static string GetFileName(string originalPath);
    internal static bool SatelliteAssemblyOptIn(Assembly assembly);
    internal static bool SameAssemblyOptIn(Assembly assembly);
    public static Stream GetResourceStream(Assembly assembly, Type type, string originalName);
    public static Stream GetResourceStream(Type type, string originalName);
    public static Icon CreateIcon(Type type, string originalName);
    public static Bitmap CreateBitmap(Type type, string originalName);
}
internal static class System.ExternDll : object {
    public static string Activeds;
    public static string Advapi32;
    public static string Comctl32;
    public static string Comdlg32;
    public static string Gdi32;
    public static string Gdiplus;
    public static string Hhctrl;
    public static string Imm32;
    public static string Kernel32;
    public static string Loadperf;
    public static string Mscoree;
    public static string Clr;
    public static string Msi;
    public static string Mqrt;
    public static string Ntdll;
    public static string Ole32;
    public static string Oleacc;
    public static string Oleaut32;
    public static string Olepro32;
    public static string PerfCounter;
    public static string Powrprof;
    public static string Psapi;
    public static string Shell32;
    public static string User32;
    public static string Uxtheme;
    public static string WinMM;
    public static string Winspool;
    public static string Wtsapi32;
    public static string Version;
    public static string Vsassert;
    public static string Fxassert;
    public static string Shlwapi;
    public static string Crypt32;
    public static string ShCore;
    public static string Wldp;
    internal static string Odbc32;
    internal static string SNI;
    internal static string OciDll;
    internal static string OraMtsDll;
}
internal static class System.HResults : object {
    internal static int Configuration;
    internal static int Xml;
    internal static int XmlSchema;
    internal static int XmlXslt;
    internal static int XmlXPath;
    internal static int Data;
    internal static int DataDeletedRowInaccessible;
    internal static int DataDuplicateName;
    internal static int DataInRowChangingEvent;
    internal static int DataInvalidConstraint;
    internal static int DataMissingPrimaryKey;
    internal static int DataNoNullAllowed;
    internal static int DataReadOnly;
    internal static int DataRowNotInTable;
    internal static int DataVersionNotFound;
    internal static int DataConstraint;
    internal static int StrongTyping;
    internal static int SqlType;
    internal static int SqlNullValue;
    internal static int SqlTruncate;
    internal static int AdapterMapping;
    internal static int DataAdapter;
    internal static int DBConcurrency;
    internal static int OperationAborted;
    internal static int InvalidUdt;
    internal static int Metadata;
    internal static int InvalidQuery;
    internal static int CommandCompilation;
    internal static int CommandExecution;
    internal static int SqlException;
    internal static int OdbcException;
    internal static int OracleException;
    internal static int ConnectionPlanException;
    internal static int NteBadKeySet;
    internal static int Win32AccessDenied;
    internal static int Win32InvalidHandle;
    internal static int License;
    internal static int InternalBufferOverflow;
    internal static int ServiceControllerTimeout;
    internal static int Install;
    internal static int EFail;
}
internal class System.Internal.HandleChangeEventHandler : MulticastDelegate {
    public HandleChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(string handleType, IntPtr handleValue, int currentHandleCount);
    public virtual IAsyncResult BeginInvoke(string handleType, IntPtr handleValue, int currentHandleCount, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Internal.HandleCollector : object {
    private static HandleCollector();
    [CompilerGeneratedAttribute]
internal static void add_HandleAdded(HandleChangeEventHandler value);
    [CompilerGeneratedAttribute]
internal static void remove_HandleAdded(HandleChangeEventHandler value);
    [CompilerGeneratedAttribute]
internal static void add_HandleRemoved(HandleChangeEventHandler value);
    [CompilerGeneratedAttribute]
internal static void remove_HandleRemoved(HandleChangeEventHandler value);
    internal static IntPtr Add(IntPtr handle, int type);
    internal static void SuspendCollect();
    internal static void ResumeCollect();
    internal static int RegisterType(string typeName, int expense, int initialThreshold);
    internal static IntPtr Remove(IntPtr handle, int type);
}
public class System.Messaging.Design.MessageDesigner : ComponentDesigner {
    protected virtual void PreFilterProperties(IDictionary properties);
}
public interface System.Resources.Tools.ITargetAwareCodeDomProvider {
    public abstract virtual bool SupportsProperty(Type type, string propertyName, bool isWritable);
}
public static class System.Resources.Tools.StronglyTypedResourceBuilder : object {
    private static StronglyTypedResourceBuilder();
    public static CodeCompileUnit Create(IDictionary resourceList, string baseName, string generatedCodeNamespace, CodeDomProvider codeProvider, bool internalClass, String[]& unmatchable);
    public static CodeCompileUnit Create(IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, CodeDomProvider codeProvider, bool internalClass, String[]& unmatchable);
    public static CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, CodeDomProvider codeProvider, bool internalClass, String[]& unmatchable);
    public static CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, CodeDomProvider codeProvider, bool internalClass, String[]& unmatchable);
    public static string VerifyResourceName(string key, CodeDomProvider provider);
}
public class System.ServiceProcess.Design.ServiceControllerDesigner : ComponentDesigner {
    protected virtual void PreFilterProperties(IDictionary properties);
}
public class System.Web.UI.Design.AppSettingsExpressionEditor : ExpressionEditor {
    public virtual ExpressionEditorSheet GetExpressionEditorSheet(string expression, IServiceProvider serviceProvider);
    public virtual object EvaluateExpression(string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);
}
internal abstract class System.Web.UI.Design.BaseTypeViewSchema : object {
    public string Name { get; }
    protected BaseTypeViewSchema(string viewName, Type type);
    public sealed virtual IDataSourceFieldSchema[] GetFields();
    public sealed virtual IDataSourceViewSchema[] GetChildren();
    protected abstract virtual Type GetRowType(Type objectType);
    public sealed virtual string get_Name();
}
public class System.Web.UI.Design.CalendarDataBindingHandler : DataBindingHandler {
    public virtual void DataBindControl(IDesignerHost designerHost, Control control);
}
public class System.Web.UI.Design.ClientScriptItem : object {
    public string Id { get; }
    public string Language { get; }
    public string Source { get; }
    public string Text { get; }
    public string Type { get; }
    public ClientScriptItem(string text, string source, string language, string type, string id);
    public string get_Id();
    public string get_Language();
    public string get_Source();
    public string get_Text();
    public string get_Type();
}
public class System.Web.UI.Design.ClientScriptItemCollection : ReadOnlyCollectionBase {
    public ClientScriptItemCollection(ClientScriptItem[] clientScriptItems);
}
public class System.Web.UI.Design.ColorBuilder : object {
    public static string BuildColor(IComponent component, Control owner, string initialColor);
}
public class System.Web.UI.Design.ConnectionStringEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    protected virtual string GetProviderName(object instance);
    protected virtual void SetProviderName(object instance, DesignerDataConnection connection);
}
public class System.Web.UI.Design.ConnectionStringsExpressionEditor : ExpressionEditor {
    public virtual ExpressionEditorSheet GetExpressionEditorSheet(string expression, IServiceProvider serviceProvider);
    public virtual object EvaluateExpression(string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);
}
public class System.Web.UI.Design.ContainerControlDesigner : ControlDesigner {
    public bool AllowResize { get; }
    protected bool NoWrap { get; }
    internal string DesignTimeHtml { get; }
    public string FrameCaption { get; }
    public Style FrameStyle { get; }
    internal Style FrameStyleInternal { get; }
    public virtual bool get_AllowResize();
    protected virtual bool get_NoWrap();
    internal virtual string get_DesignTimeHtml();
    public virtual string get_FrameCaption();
    public virtual Style get_FrameStyle();
    internal Style get_FrameStyleInternal();
    public virtual IDictionary GetDesignTimeCssAttributes();
    protected virtual void AddDesignTimeCssAttributes(IDictionary styleAttributes);
    public virtual string GetPersistenceContent();
    public virtual string GetEditableDesignerRegionContent(EditableDesignerRegion region);
    public virtual void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content);
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
}
public class System.Web.UI.Design.ContentDefinition : object {
    public string ContentPlaceHolderID { get; }
    public string DefaultContent { get; }
    public string DefaultDesignTimeHtml { get; }
    public ContentDefinition(string id, string content, string designTimeHtml);
    public string get_ContentPlaceHolderID();
    public string get_DefaultContent();
    public string get_DefaultDesignTimeHtml();
}
public enum System.Web.UI.Design.ContentDesignerState : Enum {
    public int value__;
    public static ContentDesignerState ShowDefaultContent;
    public static ContentDesignerState ShowUserContent;
}
public class System.Web.UI.Design.ControlDesigner : HtmlControlDesigner {
    internal static string ErrorDesignTimeHtmlTemplate;
    public DesignerActionListCollection ActionLists { get; }
    public bool AllowResize { get; }
    public DesignerAutoFormatCollection AutoFormats { get; }
    protected bool DataBindingsEnabled { get; }
    protected ControlDesignerState DesignerState { get; }
    [ObsoleteAttribute("The recommended alternative is SetViewFlags(ViewFlags.DesignTimeHtmlRequiresLoadComplete, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public bool DesignTimeHtmlRequiresLoadComplete { get; }
    protected internal bool HidePropertiesInTemplateMode { get; }
    public string ID { get; public set; }
    protected bool InTemplateMode { get; }
    [ObsoleteAttribute("The recommended alternative is to use Tag.SetDirty() and Tag.IsDirty. http://go.microsoft.com/fwlink/?linkid=14202")]
public bool IsDirty { get; public set; }
    internal bool IsDirtyInternal { get; internal set; }
    internal bool IsIgnoringComponentChanges { get; }
    internal bool IsWebControl { get; }
    internal string LocalizedInnerContent { get; }
    public bool ViewControlCreated { get; public set; }
    [ObsoleteAttribute("The recommended alternative is to inherit from ContainerControlDesigner instead and to use an EditableDesignerRegion. Regions allow for better control of the content in the designer. http://go.microsoft.com/fwlink/?linkid=14202")]
public bool ReadOnly { get; public set; }
    internal bool ReadOnlyInternal { get; internal set; }
    protected WebFormsRootDesigner RootDesigner { get; }
    protected IControlDesignerTag Tag { get; }
    public TemplateGroupCollection TemplateGroups { get; }
    protected bool UsePreviewControl { get; }
    internal IControlDesignerView View { get; }
    public Control ViewControl { get; public set; }
    protected bool Visible { get; }
    [ObsoleteAttribute("Error: This property can no longer be referenced, and is included to support existing compiled applications. The design-time element view architecture is no longer used. http://go.microsoft.com/fwlink/?linkid=14202", "True")]
protected object DesignTimeElementView { get; }
    private static ControlDesigner();
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual bool get_AllowResize();
    public virtual DesignerAutoFormatCollection get_AutoFormats();
    protected virtual bool get_DataBindingsEnabled();
    protected ControlDesignerState get_DesignerState();
    public virtual bool get_DesignTimeHtmlRequiresLoadComplete();
    protected internal virtual bool get_HidePropertiesInTemplateMode();
    public virtual string get_ID();
    public virtual void set_ID(string value);
    protected bool get_InTemplateMode();
    public bool get_IsDirty();
    public void set_IsDirty(bool value);
    internal bool get_IsDirtyInternal();
    internal void set_IsDirtyInternal(bool value);
    internal bool get_IsIgnoringComponentChanges();
    internal bool get_IsWebControl();
    internal string get_LocalizedInnerContent();
    public virtual bool get_ViewControlCreated();
    public virtual void set_ViewControlCreated(bool value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    internal bool get_ReadOnlyInternal();
    internal void set_ReadOnlyInternal(bool value);
    protected WebFormsRootDesigner get_RootDesigner();
    protected IControlDesignerTag get_Tag();
    public virtual TemplateGroupCollection get_TemplateGroups();
    protected virtual bool get_UsePreviewControl();
    internal IControlDesignerView get_View();
    public Control get_ViewControl();
    public void set_ViewControl(Control value);
    protected virtual bool get_Visible();
    protected object get_DesignTimeElementView();
    internal static DesignerAutoFormatCollection CreateAutoFormats(String[] schemeNames, Func`2<string, DesignerAutoFormat> creationDelegate);
    internal static DataRow GetSchemeDataRow(string schemeName, string schemes);
    internal Control CreateClonedControl(IDesignerHost parseTimeDesignerHost, bool applyTheme);
    protected string CreatePlaceHolderDesignTimeHtml();
    protected string CreatePlaceHolderDesignTimeHtml(string instruction);
    protected string CreateErrorDesignTimeHtml(string errorMessage);
    protected string CreateErrorDesignTimeHtml(string errorMessage, Exception e);
    internal static string CreateErrorDesignTimeHtml(string errorMessage, Exception e, IComponent component);
    internal string CreateInvalidParentDesignTimeHtml(Type controlType, Type requiredParentType);
    protected virtual Control CreateViewControl();
    public Rectangle GetBounds();
    internal static PropertyDescriptor GetComplexProperty(object target, string propName, Object& realTarget);
    public virtual string GetDesignTimeHtml();
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
    public static DesignTimeResourceProviderFactory GetDesignTimeResourceProviderFactory(IServiceProvider serviceProvider);
    public virtual string GetEditableDesignerRegionContent(EditableDesignerRegion region);
    protected virtual string GetEmptyDesignTimeHtml();
    protected virtual string GetErrorDesignTimeHtml(Exception e);
    [ObsoleteAttribute("The recommended alternative is GetPersistenceContent(). http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual string GetPersistInnerHtml();
    internal virtual string GetPersistInnerHtmlInternal();
    public virtual string GetPersistenceContent();
    internal void HideAllPropertiesUnlessExcluded(IDictionary properties, String[] propertiesToExclude);
    public void Localize(IDesignTimeResourceWriter resourceWriter);
    public static ViewRendering GetViewRendering(Control control);
    public static ViewRendering GetViewRendering(ControlDesigner designer);
    public ViewRendering GetViewRendering();
    public virtual void Initialize(IComponent component);
    public void Invalidate();
    public void Invalidate(Rectangle rectangle);
    public static void InvokeTransactedChange(IComponent component, TransactedChangeCallback callback, object context, string description);
    public static void InvokeTransactedChange(IComponent component, TransactedChangeCallback callback, object context, string description, MemberDescriptor member);
    public static void InvokeTransactedChange(IServiceProvider serviceProvider, IComponent component, TransactedChangeCallback callback, object context, string description, MemberDescriptor member);
    [ObsoleteAttribute("The recommended alternative is DataBindings.Contains(string). The DataBindings collection allows more control of the databindings associated with the control. http://go.microsoft.com/fwlink/?linkid=14202")]
public bool IsPropertyBound(string propName);
    public virtual void OnAutoFormatApplied(DesignerAutoFormat appliedAutoFormat);
    protected virtual void PreFilterProperties(IDictionary properties);
    [ObsoleteAttribute("The recommended alternative is to handle the Changed event on the DataBindings collection. The DataBindings collection allows more control of the databindings associated with the control. http://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual void OnBindingsCollectionChanged(string propName);
    protected virtual void OnClick(DesignerRegionMouseEventArgs e);
    public virtual void OnComponentChanged(object sender, ComponentChangedEventArgs ce);
    public virtual void OnComponentChanging(object sender, ComponentChangingEventArgs ce);
    [ObsoleteAttribute("The recommended alternative is OnComponentChanged(). OnComponentChanged is called when any property of the control is changed. http://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual void OnControlResize();
    protected virtual void OnPaint(PaintEventArgs e);
    [ObsoleteAttribute("Use of this method is not recommended because resizing is handled by the OnComponentChanged() method. http://go.microsoft.com/fwlink/?linkid=14202")]
public void RaiseResizeEvent();
    public void RegisterClone(object original, object clone);
    public virtual void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content);
    protected void SetRegionContent(EditableDesignerRegion region, string content);
    protected void SetViewFlags(ViewFlags viewFlags, bool setFlag);
    public virtual void UpdateDesignTimeHtml();
    internal bool UseRegions(DesignerRegionCollection regions, ITemplate componentTemplate);
    internal bool UseRegions(DesignerRegionCollection regions, ITemplate componentTemplate, ITemplate viewControlTemplate);
    internal static void VerifyInitializeArgument(IComponent component, Type expectedType);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.Design.ControlDesignerState : object {
    public object Item { get; public set; }
    internal ControlDesignerState(IComponent component);
    public object get_Item(string key);
    public void set_Item(string key, object value);
}
internal static class System.Web.UI.Design.ControlHelper : object {
    internal static Control FindControl(IServiceProvider serviceProvider, Control control, string controlIdToFind);
    internal static IList`1<IComponent> GetAllComponents(IComponent component, IsValidComponentDelegate componentFilter);
}
internal static class System.Web.UI.Design.ControlLocalizer : object {
    public static string LocalizeControl(Control control, IDesignTimeResourceWriter resourceWriter, String& newInnerContent);
}
public enum System.Web.UI.Design.ControlLocation : Enum {
    public int value__;
    public static ControlLocation Before;
    public static ControlLocation After;
    public static ControlLocation First;
    public static ControlLocation Last;
    public static ControlLocation FirstChild;
    public static ControlLocation LastChild;
}
public class System.Web.UI.Design.ControlParser : object {
    public static Control ParseControl(IDesignerHost designerHost, string controlText);
    internal static Control ParseControl(IDesignerHost designerHost, string controlText, bool applyTheme);
    public static Control ParseControl(IDesignerHost designerHost, string controlText, string directives);
    public static Control[] ParseControls(IDesignerHost designerHost, string controlText);
    public static ITemplate ParseTemplate(IDesignerHost designerHost, string templateText);
    public static ITemplate ParseTemplate(IDesignerHost designerHost, string templateText, string directives);
}
public class System.Web.UI.Design.ControlPersister : object {
    public static string PersistInnerProperties(object component, IDesignerHost host);
    public static void PersistInnerProperties(TextWriter sw, object component, IDesignerHost host);
    public static string PersistControl(Control control);
    public static string PersistControl(Control control, IDesignerHost host);
    public static void PersistControl(TextWriter sw, Control control);
    public static void PersistControl(TextWriter sw, Control control, IDesignerHost host);
    public static string PersistTemplate(ITemplate template, IDesignerHost host);
    public static void PersistTemplate(TextWriter writer, ITemplate template, IDesignerHost host);
}
internal static class System.Web.UI.Design.ControlSerializer : object {
    private static ControlSerializer();
    internal static ArrayList GetControlPersistedAttributes(Control control, IDesignerHost host);
    internal static ArrayList GetControlPersistedAttribute(Control control, PropertyDescriptor propDesc, IDesignerHost host);
    internal static Control DeserializeControlInternal(string text, IDesignerHost host, bool applyTheme);
    public static Control DeserializeControl(string text, IDesignerHost host);
    public static Control[] DeserializeControls(string text, IDesignerHost host);
    internal static Control[] DeserializeControlsInternal(string text, IDesignerHost host, List`1<Triplet> userControlRegisterEntries);
    public static ITemplate DeserializeTemplate(string text, IDesignerHost host);
    public static string SerializeControl(Control control);
    public static string SerializeControl(Control control, IDesignerHost host);
    public static void SerializeControl(Control control, TextWriter writer);
    public static void SerializeControl(Control control, IDesignerHost host, TextWriter writer);
    public static string SerializeInnerContents(Control control, IDesignerHost host);
    internal static void SerializeInnerContents(Control control, IDesignerHost host, ObjectPersistData persistData, TextWriter writer, string filter);
    public static string SerializeInnerProperties(object obj, IDesignerHost host);
    internal static void SerializeInnerProperties(object obj, IDesignerHost host, TextWriter writer);
    public static string SerializeTemplate(ITemplate template, IDesignerHost host);
    public static void SerializeTemplate(ITemplate template, TextWriter writer, IDesignerHost host);
}
[ObsoleteAttribute("Use of this type is not recommended because DataBindings editing is launched via a DesignerActionList instead of the property grid. http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.Web.UI.Design.DataBindingCollectionConverter : TypeConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[ObsoleteAttribute("Use of this type is not recommended because DataBindings editing is launched via a DesignerActionList instead of the property grid. http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.Web.UI.Design.DataBindingCollectionEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
public abstract class System.Web.UI.Design.DataBindingHandler : object {
    public abstract virtual void DataBindControl(IDesignerHost designerHost, Control control);
}
internal class System.Web.UI.Design.DataBindingsDialog : DesignerForm {
    protected string HelpTopic { get; }
    public DataBindingsDialog(IServiceProvider serviceProvider, Control control);
    private static DataBindingsDialog();
    protected virtual string get_HelpTopic();
    protected virtual void OnInitialActivated(EventArgs e);
}
public class System.Web.UI.Design.DataBindingValueUIHandler : object {
    public void OnGetUIValueItem(ITypeDescriptorContext context, PropertyDescriptor propDesc, ArrayList valueUIItemList);
}
public class System.Web.UI.Design.DataColumnSelectionConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.Web.UI.Design.DataFieldConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.Web.UI.Design.DataMemberConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.Web.UI.Design.DataSetFieldSchema : object {
    public Type DataType { get; }
    public bool Identity { get; }
    public bool IsReadOnly { get; }
    public bool IsUnique { get; }
    public int Length { get; }
    public string Name { get; }
    public bool Nullable { get; }
    public int Precision { get; }
    public bool PrimaryKey { get; }
    public int Scale { get; }
    public DataSetFieldSchema(DataColumn column);
    public sealed virtual Type get_DataType();
    public sealed virtual bool get_Identity();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsUnique();
    public sealed virtual int get_Length();
    public sealed virtual string get_Name();
    public sealed virtual bool get_Nullable();
    public sealed virtual int get_Precision();
    public sealed virtual bool get_PrimaryKey();
    public sealed virtual int get_Scale();
}
public class System.Web.UI.Design.DataSetSchema : object {
    public DataSetSchema(DataSet dataSet);
    public sealed virtual IDataSourceViewSchema[] GetViews();
}
public class System.Web.UI.Design.DataSetViewSchema : object {
    public string Name { get; }
    public DataSetViewSchema(DataTable dataTable);
    public sealed virtual string get_Name();
    public sealed virtual IDataSourceViewSchema[] GetChildren();
    public sealed virtual IDataSourceFieldSchema[] GetFields();
}
public class System.Web.UI.Design.DataSourceBooleanViewSchemaConverter : DataSourceViewSchemaConverter {
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
public class System.Web.UI.Design.DataSourceConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    protected virtual bool IsValidDataSource(IComponent component);
}
public class System.Web.UI.Design.DataSourceDesigner : ControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public bool CanConfigure { get; }
    public bool CanRefreshSchema { get; }
    protected bool SuppressingDataSourceEvents { get; }
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual bool get_CanConfigure();
    public virtual bool get_CanRefreshSchema();
    public sealed virtual void add_DataSourceChanged(EventHandler value);
    public sealed virtual void remove_DataSourceChanged(EventHandler value);
    public sealed virtual void add_SchemaRefreshed(EventHandler value);
    public sealed virtual void remove_SchemaRefreshed(EventHandler value);
    protected bool get_SuppressingDataSourceEvents();
    public virtual void Configure();
    public virtual string GetDesignTimeHtml();
    public virtual DesignerDataSourceView GetView(string viewName);
    public virtual String[] GetViewNames();
    protected virtual void OnDataSourceChanged(EventArgs e);
    protected virtual void OnSchemaRefreshed(EventArgs e);
    public virtual void RefreshSchema(bool preferSilent);
    public virtual void ResumeDataSourceEvents();
    public virtual void SuppressDataSourceEvents();
    public static bool SchemasEquivalent(IDataSourceSchema schema1, IDataSourceSchema schema2);
    public static bool ViewSchemasEquivalent(IDataSourceViewSchema viewSchema1, IDataSourceViewSchema viewSchema2);
}
public class System.Web.UI.Design.DataSourceViewSchemaConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context, Type typeFilter);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public abstract class System.Web.UI.Design.DesignerAutoFormat : object {
    public string Name { get; }
    public DesignerAutoFormatStyle Style { get; }
    protected DesignerAutoFormat(string name);
    public string get_Name();
    public DesignerAutoFormatStyle get_Style();
    public abstract virtual void Apply(Control control);
    public virtual Control GetPreviewControl(Control runtimeControl);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.Design.DesignerAutoFormatCollection : object {
    public int Count { get; }
    public Size PreviewSize { get; }
    public object SyncRoot { get; }
    public DesignerAutoFormat Item { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.IList.Item { get; private set; }
    public int get_Count();
    public Size get_PreviewSize();
    public sealed virtual object get_SyncRoot();
    public DesignerAutoFormat get_Item(int index);
    public int Add(DesignerAutoFormat format);
    public sealed virtual void Clear();
    public bool Contains(DesignerAutoFormat format);
    public int IndexOf(DesignerAutoFormat format);
    public void Insert(int index, DesignerAutoFormat format);
    public void Remove(DesignerAutoFormat format);
    public void RemoveAt(int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override void System.Collections.IList.Remove(object value);
}
public class System.Web.UI.Design.DesignerAutoFormatStyle : Style {
    public VerticalAlign VerticalAlign { get; public set; }
    public VerticalAlign get_VerticalAlign();
    public void set_VerticalAlign(VerticalAlign value);
}
public abstract class System.Web.UI.Design.DesignerDataSourceView : object {
    public bool CanDelete { get; }
    public bool CanInsert { get; }
    public bool CanPage { get; }
    public bool CanRetrieveTotalRowCount { get; }
    public bool CanSort { get; }
    public bool CanUpdate { get; }
    public IDataSourceDesigner DataSourceDesigner { get; }
    public string Name { get; }
    public IDataSourceViewSchema Schema { get; }
    protected DesignerDataSourceView(IDataSourceDesigner owner, string viewName);
    public virtual bool get_CanDelete();
    public virtual bool get_CanInsert();
    public virtual bool get_CanPage();
    public virtual bool get_CanRetrieveTotalRowCount();
    public virtual bool get_CanSort();
    public virtual bool get_CanUpdate();
    public IDataSourceDesigner get_DataSourceDesigner();
    public string get_Name();
    public virtual IDataSourceViewSchema get_Schema();
    public virtual IEnumerable GetDesignTimeData(int minimumRows, Boolean& isSampleData);
}
public abstract class System.Web.UI.Design.DesignerHierarchicalDataSourceView : object {
    public IHierarchicalDataSourceDesigner DataSourceDesigner { get; }
    public string Path { get; }
    public IDataSourceSchema Schema { get; }
    protected DesignerHierarchicalDataSourceView(IHierarchicalDataSourceDesigner owner, string viewPath);
    public IHierarchicalDataSourceDesigner get_DataSourceDesigner();
    public string get_Path();
    public virtual IDataSourceSchema get_Schema();
    public virtual IHierarchicalEnumerable GetDesignTimeData(Boolean& isSampleData);
}
public abstract class System.Web.UI.Design.DesignerObject : object {
    public ControlDesigner Designer { get; }
    public string Name { get; }
    public IDictionary Properties { get; }
    protected DesignerObject(ControlDesigner designer, string name);
    public ControlDesigner get_Designer();
    public string get_Name();
    public IDictionary get_Properties();
    protected object GetService(Type serviceType);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
public class System.Web.UI.Design.DesignerRegion : DesignerObject {
    public static string DesignerRegionAttributeName;
    public string Description { get; public set; }
    public string DisplayName { get; public set; }
    public bool EnsureSize { get; public set; }
    public bool Highlight { get; public set; }
    public bool Selectable { get; public set; }
    public bool Selected { get; public set; }
    public object UserData { get; public set; }
    public DesignerRegion(ControlDesigner designer, string name);
    public DesignerRegion(ControlDesigner designer, string name, bool selectable);
    private static DesignerRegion();
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_DisplayName();
    public virtual void set_DisplayName(string value);
    public bool get_EnsureSize();
    public void set_EnsureSize(bool value);
    public virtual bool get_Highlight();
    public virtual void set_Highlight(bool value);
    public virtual bool get_Selectable();
    public virtual void set_Selectable(bool value);
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    public object get_UserData();
    public void set_UserData(object value);
    public Rectangle GetBounds();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.Design.DesignerRegionCollection : object {
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public ControlDesigner Owner { get; }
    public object SyncRoot { get; }
    public DesignerRegion Item { get; public set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    public DesignerRegionCollection(ControlDesigner owner);
    public int get_Count();
    public bool get_IsFixedSize();
    public bool get_IsReadOnly();
    public bool get_IsSynchronized();
    public ControlDesigner get_Owner();
    public object get_SyncRoot();
    public DesignerRegion get_Item(int index);
    public void set_Item(int index, DesignerRegion value);
    public int Add(DesignerRegion region);
    public void Clear();
    public void CopyTo(Array array, int index);
    public IEnumerator GetEnumerator();
    public bool Contains(DesignerRegion region);
    public int IndexOf(DesignerRegion region);
    public void Insert(int index, DesignerRegion region);
    public void Remove(DesignerRegion region);
    public void RemoveAt(int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object o);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object o);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.IndexOf(object o);
    private sealed virtual override void System.Collections.IList.Insert(int index, object o);
    private sealed virtual override void System.Collections.IList.Remove(object o);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
}
public class System.Web.UI.Design.DesignerRegionMouseEventArgs : EventArgs {
    public Point Location { get; }
    public DesignerRegion Region { get; }
    public DesignerRegionMouseEventArgs(DesignerRegion region, Point location);
    public Point get_Location();
    public DesignerRegion get_Region();
}
public class System.Web.UI.Design.DesignTimeData : object {
    public static EventHandler DataBindingHandler;
    private static DesignTimeData();
    public static DataTable CreateDummyDataTable();
    public static DataTable CreateDummyDataBoundDataTable();
    public static DataTable CreateSampleDataTable(IEnumerable referenceData);
    public static DataTable CreateSampleDataTable(IEnumerable referenceData, bool useDataBoundData);
    public static PropertyDescriptorCollection GetDataFields(IEnumerable dataSource);
    public static String[] GetDataMembers(object dataSource);
    public static IEnumerable GetDataMember(IListSource dataSource, string dataMember);
    public static IEnumerable GetDesignTimeDataSource(DataTable dataTable, int minimumRows);
    public static object GetSelectedDataSource(IComponent component, string dataSource);
    public static IEnumerable GetSelectedDataSource(IComponent component, string dataSource, string dataMember);
}
internal class System.Web.UI.Design.DesignTimeDataBinding : object {
    public bool IsCustom { get; }
    public string Expression { get; }
    public string Field { get; }
    public string Format { get; }
    public bool IsTwoWayBound { get; }
    public DataBinding RuntimeDataBinding { get; }
    public DesignTimeDataBinding(DataBinding runtimeDataBinding);
    public DesignTimeDataBinding(PropertyDescriptor propDesc, string expression);
    public DesignTimeDataBinding(PropertyDescriptor propDesc, string field, string format, bool twoWayBinding);
    private static DesignTimeDataBinding();
    public bool get_IsCustom();
    public string get_Expression();
    public string get_Field();
    public string get_Format();
    public bool get_IsTwoWayBound();
    public DataBinding get_RuntimeDataBinding();
    public static string CreateBindExpression(string field, string format);
    public static string CreateEvalExpression(string field, string format);
}
[SecurityCriticalAttribute]
internal class System.Web.UI.Design.DesignTimeHtmlTextWriter : HtmlTextWriter {
    public DesignTimeHtmlTextWriter(TextWriter writer);
    public DesignTimeHtmlTextWriter(TextWriter writer, string tabString);
    public virtual void AddAttribute(HtmlTextWriterAttribute key, string value);
}
public abstract class System.Web.UI.Design.DesignTimeResourceProviderFactory : object {
    public abstract virtual IResourceProvider CreateDesignTimeGlobalResourceProvider(IServiceProvider serviceProvider, string classKey);
    public abstract virtual IResourceProvider CreateDesignTimeLocalResourceProvider(IServiceProvider serviceProvider);
    public abstract virtual IDesignTimeResourceWriter CreateDesignTimeLocalResourceWriter(IServiceProvider serviceProvider);
}
internal class System.Web.UI.Design.Directives.Application : object {
    [BrowsableAttribute("False")]
[FilterableAttribute("False")]
public string ClassName { get; public set; }
    public string CodeBehind { get; public set; }
    [FilterableAttribute("False")]
[DirectiveAttribute]
public string Inherits { get; public set; }
    [FilterableAttribute("False")]
[ReadOnlyAttribute("True")]
[DirectiveAttribute]
public string Language { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
public void set_ClassName(string value);
    [CompilerGeneratedAttribute]
public string get_CodeBehind();
    [CompilerGeneratedAttribute]
public void set_CodeBehind(string value);
    [CompilerGeneratedAttribute]
public string get_Inherits();
    [CompilerGeneratedAttribute]
public void set_Inherits(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
}
[SchemaElementNameAttribute("Application")]
internal class System.Web.UI.Design.Directives.Application2_0 : Application {
    [FilterableAttribute("False")]
public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
[SchemaElementNameAttribute("Application")]
internal class System.Web.UI.Design.Directives.Application4_0 : Application {
    [BrowsableAttribute("False")]
[FilterableAttribute("False")]
public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
internal class System.Web.UI.Design.Directives.Assembly : object {
    [FilterableAttribute("False")]
public string Name { get; public set; }
    [FilterableAttribute("False")]
[DirectiveAttribute]
[UrlPropertyAttribute]
public string Src { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Src();
    [CompilerGeneratedAttribute]
public void set_Src(string value);
}
internal class System.Web.UI.Design.Directives.Control : object {
    [FilterableAttribute("False")]
public bool AutoEventWireup { get; public set; }
    [FilterableAttribute("False")]
public string ClassName { get; public set; }
    [FilterableAttribute("False")]
[DirectiveAttribute]
[UrlPropertyAttribute]
public string CodeBehind { get; public set; }
    [FilterableAttribute("False")]
[DirectiveAttribute]
[UrlPropertyAttribute]
public string CodeFile { get; public set; }
    [FilterableAttribute("False")]
public string CodeFileBaseClass { get; public set; }
    [FilterableAttribute("False")]
public CompilationMode CompilationMode { get; public set; }
    [FilterableAttribute("False")]
public string CompilerOptions { get; public set; }
    [FilterableAttribute("False")]
public bool Debug { get; public set; }
    [DirectiveAttribute]
public bool EnableTheming { get; public set; }
    public bool EnableViewState { get; public set; }
    [FilterableAttribute("False")]
public bool Explicit { get; public set; }
    [FilterableAttribute("False")]
[DirectiveAttribute]
public string Inherits { get; public set; }
    [FilterableAttribute("False")]
[ReadOnlyAttribute("True")]
[DirectiveAttribute]
public string Language { get; public set; }
    [FilterableAttribute("False")]
public bool LinePragmas { get; public set; }
    [FilterableAttribute("False")]
[DirectiveAttribute]
[UrlPropertyAttribute]
public string Src { get; public set; }
    [FilterableAttribute("False")]
public bool Strict { get; public set; }
    [BrowsableAttribute("False")]
[FilterableAttribute("False")]
public string TargetSchema { get; public set; }
    [FilterableAttribute("False")]
[TypeConverterAttribute("System.Web.UI.Design.Directives.WarningLevelConverter")]
public WarningLevel WarningLevel { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AutoEventWireup();
    [CompilerGeneratedAttribute]
public void set_AutoEventWireup(bool value);
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
public void set_ClassName(string value);
    [CompilerGeneratedAttribute]
public string get_CodeBehind();
    [CompilerGeneratedAttribute]
public void set_CodeBehind(string value);
    [CompilerGeneratedAttribute]
public string get_CodeFile();
    [CompilerGeneratedAttribute]
public void set_CodeFile(string value);
    [CompilerGeneratedAttribute]
public string get_CodeFileBaseClass();
    [CompilerGeneratedAttribute]
public void set_CodeFileBaseClass(string value);
    [CompilerGeneratedAttribute]
public CompilationMode get_CompilationMode();
    [CompilerGeneratedAttribute]
public void set_CompilationMode(CompilationMode value);
    [CompilerGeneratedAttribute]
public string get_CompilerOptions();
    [CompilerGeneratedAttribute]
public void set_CompilerOptions(string value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableTheming();
    [CompilerGeneratedAttribute]
public void set_EnableTheming(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableViewState();
    [CompilerGeneratedAttribute]
public void set_EnableViewState(bool value);
    [CompilerGeneratedAttribute]
public bool get_Explicit();
    [CompilerGeneratedAttribute]
public void set_Explicit(bool value);
    [CompilerGeneratedAttribute]
public string get_Inherits();
    [CompilerGeneratedAttribute]
public void set_Inherits(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public bool get_LinePragmas();
    [CompilerGeneratedAttribute]
public void set_LinePragmas(bool value);
    [CompilerGeneratedAttribute]
public string get_Src();
    [CompilerGeneratedAttribute]
public void set_Src(string value);
    [CompilerGeneratedAttribute]
public bool get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(bool value);
    [CompilerGeneratedAttribute]
public string get_TargetSchema();
    [CompilerGeneratedAttribute]
public void set_TargetSchema(string value);
    [CompilerGeneratedAttribute]
public WarningLevel get_WarningLevel();
    [CompilerGeneratedAttribute]
public void set_WarningLevel(WarningLevel value);
}
[SchemaElementNameAttribute("Control")]
internal class System.Web.UI.Design.Directives.Control2_0 : Control {
    [FilterableAttribute("False")]
public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
[SchemaElementNameAttribute("Control")]
internal class System.Web.UI.Design.Directives.Control4_0 : Control {
    [BrowsableAttribute("False")]
[FilterableAttribute("False")]
public string Description { get; public set; }
    [DefaultValueAttribute("Inherit")]
public ClientIDMode ClientIDMode { get; public set; }
    public ViewStateMode ViewStateMode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public ClientIDMode get_ClientIDMode();
    [CompilerGeneratedAttribute]
public void set_ClientIDMode(ClientIDMode value);
    [CompilerGeneratedAttribute]
public ViewStateMode get_ViewStateMode();
    [CompilerGeneratedAttribute]
public void set_ViewStateMode(ViewStateMode value);
}
[SchemaElementNameAttribute("Control")]
internal class System.Web.UI.Design.Directives.Control4_5 : Control4_0 {
    [FilterableAttribute("False")]
public ValidateRequestMode ValidateRequestMode { get; public set; }
    [CompilerGeneratedAttribute]
public ValidateRequestMode get_ValidateRequestMode();
    [CompilerGeneratedAttribute]
public void set_ValidateRequestMode(ValidateRequestMode value);
}
[AttributeUsageAttribute("32767")]
public class System.Web.UI.Design.Directives.DirectiveAttribute : Attribute {
    public bool Culture { get; public set; }
    public string BuilderType { get; public set; }
    public bool AllowedOnMobilePages { get; public set; }
    public string RenameType { get; public set; }
    public bool ServerLanguageExtensions { get; public set; }
    public bool ServerLanguageNames { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(bool value);
    [CompilerGeneratedAttribute]
public string get_BuilderType();
    [CompilerGeneratedAttribute]
public void set_BuilderType(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowedOnMobilePages();
    [CompilerGeneratedAttribute]
public void set_AllowedOnMobilePages(bool value);
    [CompilerGeneratedAttribute]
public string get_RenameType();
    [CompilerGeneratedAttribute]
public void set_RenameType(string value);
    [CompilerGeneratedAttribute]
public bool get_ServerLanguageExtensions();
    [CompilerGeneratedAttribute]
public void set_ServerLanguageExtensions(bool value);
    [CompilerGeneratedAttribute]
public bool get_ServerLanguageNames();
    [CompilerGeneratedAttribute]
public void set_ServerLanguageNames(bool value);
}
public static class System.Web.UI.Design.Directives.DirectiveRegistry : object {
    private static DirectiveRegistry();
    public static ReadOnlyCollection`1<Type> GetDirectives(Version frameworkVersion, string extension);
}
internal class System.Web.UI.Design.Directives.Image : object {
    public string Class { get; public set; }
    public string CodeBehind { get; public set; }
    public string CompilerOptions { get; public set; }
    public string CustomErrorImageUrl { get; public set; }
    [FilterableAttribute("False")]
public bool Debug { get; public set; }
    [FilterableAttribute("False")]
public string Description { get; public set; }
    [ReadOnlyAttribute("True")]
[DirectiveAttribute]
public string Language { get; public set; }
    [FilterableAttribute("False")]
[TypeConverterAttribute("System.Web.UI.Design.Directives.WarningLevelConverter")]
public WarningLevel WarningLevel { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    [CompilerGeneratedAttribute]
public string get_CodeBehind();
    [CompilerGeneratedAttribute]
public void set_CodeBehind(string value);
    [CompilerGeneratedAttribute]
public string get_CompilerOptions();
    [CompilerGeneratedAttribute]
public void set_CompilerOptions(string value);
    [CompilerGeneratedAttribute]
public string get_CustomErrorImageUrl();
    [CompilerGeneratedAttribute]
public void set_CustomErrorImageUrl(string value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public WarningLevel get_WarningLevel();
    [CompilerGeneratedAttribute]
public void set_WarningLevel(WarningLevel value);
}
internal class System.Web.UI.Design.Directives.Implements : object {
    [FilterableAttribute("False")]
public string Interface { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Interface();
    [CompilerGeneratedAttribute]
public void set_Interface(string value);
}
internal class System.Web.UI.Design.Directives.Import : object {
    [FilterableAttribute("False")]
public string Namespace { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
}
internal class System.Web.UI.Design.Directives.Master : object {
    [FilterableAttribute("False")]
public bool AutoEventWireup { get; public set; }
    [FilterableAttribute("False")]
public string ClassName { get; public set; }
    [FilterableAttribute("False")]
[DirectiveAttribute]
[UrlPropertyAttribute]
public string CodeBehind { get; public set; }
    [FilterableAttribute("False")]
[DirectiveAttribute]
[UrlPropertyAttribute]
public string CodeFile { get; public set; }
    [FilterableAttribute("False")]
public string CodeFileBaseClass { get; public set; }
    [FilterableAttribute("False")]
public CompilationMode CompilationMode { get; public set; }
    [FilterableAttribute("False")]
public string CompilerOptions { get; public set; }
    [FilterableAttribute("False")]
public bool Debug { get; public set; }
    [DirectiveAttribute]
public bool EnableTheming { get; public set; }
    public bool EnableViewState { get; public set; }
    [FilterableAttribute("False")]
public bool Explicit { get; public set; }
    [FilterableAttribute("False")]
[DirectiveAttribute]
public string Inherits { get; public set; }
    [FilterableAttribute("False")]
[ReadOnlyAttribute("True")]
[DirectiveAttribute]
public string Language { get; public set; }
    [FilterableAttribute("False")]
public bool LinePragmas { get; public set; }
    [DirectiveAttribute]
[UrlPropertyAttribute("*.master")]
public string MasterPageFile { get; public set; }
    [FilterableAttribute("False")]
[DirectiveAttribute]
[UrlPropertyAttribute]
public string Src { get; public set; }
    [FilterableAttribute("False")]
public bool Strict { get; public set; }
    [BrowsableAttribute("False")]
[FilterableAttribute("False")]
public string TargetSchema { get; public set; }
    [FilterableAttribute("False")]
[TypeConverterAttribute("System.Web.UI.Design.Directives.WarningLevelConverter")]
public WarningLevel WarningLevel { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AutoEventWireup();
    [CompilerGeneratedAttribute]
public void set_AutoEventWireup(bool value);
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
public void set_ClassName(string value);
    [CompilerGeneratedAttribute]
public string get_CodeBehind();
    [CompilerGeneratedAttribute]
public void set_CodeBehind(string value);
    [CompilerGeneratedAttribute]
public string get_CodeFile();
    [CompilerGeneratedAttribute]
public void set_CodeFile(string value);
    [CompilerGeneratedAttribute]
public string get_CodeFileBaseClass();
    [CompilerGeneratedAttribute]
public void set_CodeFileBaseClass(string value);
    [CompilerGeneratedAttribute]
public CompilationMode get_CompilationMode();
    [CompilerGeneratedAttribute]
public void set_CompilationMode(CompilationMode value);
    [CompilerGeneratedAttribute]
public string get_CompilerOptions();
    [CompilerGeneratedAttribute]
public void set_CompilerOptions(string value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableTheming();
    [CompilerGeneratedAttribute]
public void set_EnableTheming(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableViewState();
    [CompilerGeneratedAttribute]
public void set_EnableViewState(bool value);
    [CompilerGeneratedAttribute]
public bool get_Explicit();
    [CompilerGeneratedAttribute]
public void set_Explicit(bool value);
    [CompilerGeneratedAttribute]
public string get_Inherits();
    [CompilerGeneratedAttribute]
public void set_Inherits(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public bool get_LinePragmas();
    [CompilerGeneratedAttribute]
public void set_LinePragmas(bool value);
    [CompilerGeneratedAttribute]
public string get_MasterPageFile();
    [CompilerGeneratedAttribute]
public void set_MasterPageFile(string value);
    [CompilerGeneratedAttribute]
public string get_Src();
    [CompilerGeneratedAttribute]
public void set_Src(string value);
    [CompilerGeneratedAttribute]
public bool get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(bool value);
    [CompilerGeneratedAttribute]
public string get_TargetSchema();
    [CompilerGeneratedAttribute]
public void set_TargetSchema(string value);
    [CompilerGeneratedAttribute]
public WarningLevel get_WarningLevel();
    [CompilerGeneratedAttribute]
public void set_WarningLevel(WarningLevel value);
}
[SchemaElementNameAttribute("Master")]
internal class System.Web.UI.Design.Directives.Master2_0 : Master {
    [FilterableAttribute("False")]
public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
[SchemaElementNameAttribute("Master")]
internal class System.Web.UI.Design.Directives.Master4_0 : Master {
    [BrowsableAttribute("False")]
[FilterableAttribute("False")]
public string Description { get; public set; }
    [DefaultValueAttribute("Inherit")]
public ClientIDMode ClientIDMode { get; public set; }
    public ViewStateMode ViewStateMode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public ClientIDMode get_ClientIDMode();
    [CompilerGeneratedAttribute]
public void set_ClientIDMode(ClientIDMode value);
    [CompilerGeneratedAttribute]
public ViewStateMode get_ViewStateMode();
    [CompilerGeneratedAttribute]
public void set_ViewStateMode(ViewStateMode value);
}
[DirectiveAttribute]
internal class System.Web.UI.Design.Directives.MasterType : object {
    [FilterableAttribute("False")]
public string TypeName { get; public set; }
    [FilterableAttribute("False")]
[UrlPropertyAttribute("*.master")]
public string VirtualPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_VirtualPath();
    [CompilerGeneratedAttribute]
public void set_VirtualPath(string value);
}
internal class System.Web.UI.Design.Directives.Msgx : object {
    public string Class { get; public set; }
    [ReadOnlyAttribute("True")]
[DirectiveAttribute]
public string Language { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
}
internal class System.Web.UI.Design.Directives.OutputCache : object {
    public string CacheProfile { get; public set; }
    [FilterableAttribute("False")]
public int Duration { get; public set; }
    [FilterableAttribute("False")]
public OutputCacheLocation Location { get; public set; }
    [FilterableAttribute("False")]
public bool NoStore { get; public set; }
    [FilterableAttribute("False")]
public string SqlDependency { get; public set; }
    [FilterableAttribute("False")]
public string VaryByControl { get; public set; }
    [FilterableAttribute("False")]
public string VaryByContentEncoding { get; public set; }
    [FilterableAttribute("False")]
public string VaryByCustom { get; public set; }
    [FilterableAttribute("False")]
public string VaryByHeader { get; public set; }
    [FilterableAttribute("False")]
public string VaryByParam { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CacheProfile();
    [CompilerGeneratedAttribute]
public void set_CacheProfile(string value);
    [CompilerGeneratedAttribute]
public int get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(int value);
    [CompilerGeneratedAttribute]
public OutputCacheLocation get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(OutputCacheLocation value);
    [CompilerGeneratedAttribute]
public bool get_NoStore();
    [CompilerGeneratedAttribute]
public void set_NoStore(bool value);
    [CompilerGeneratedAttribute]
public string get_SqlDependency();
    [CompilerGeneratedAttribute]
public void set_SqlDependency(string value);
    [CompilerGeneratedAttribute]
public string get_VaryByControl();
    [CompilerGeneratedAttribute]
public void set_VaryByControl(string value);
    [CompilerGeneratedAttribute]
public string get_VaryByContentEncoding();
    [CompilerGeneratedAttribute]
public void set_VaryByContentEncoding(string value);
    [CompilerGeneratedAttribute]
public string get_VaryByCustom();
    [CompilerGeneratedAttribute]
public void set_VaryByCustom(string value);
    [CompilerGeneratedAttribute]
public string get_VaryByHeader();
    [CompilerGeneratedAttribute]
public void set_VaryByHeader(string value);
    [CompilerGeneratedAttribute]
public string get_VaryByParam();
    [CompilerGeneratedAttribute]
public void set_VaryByParam(string value);
}
[SchemaElementNameAttribute("OutputCache")]
internal class System.Web.UI.Design.Directives.OutputCacheAscx : object {
    [FilterableAttribute("False")]
public int Duration { get; public set; }
    [FilterableAttribute("False")]
public string ProviderName { get; public set; }
    public bool Shared { get; public set; }
    [FilterableAttribute("False")]
public string SqlDependency { get; public set; }
    [FilterableAttribute("False")]
public string VaryByControl { get; public set; }
    [FilterableAttribute("False")]
public string VaryByCustom { get; public set; }
    [FilterableAttribute("False")]
public string VaryByParam { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(int value);
    [CompilerGeneratedAttribute]
public string get_ProviderName();
    [CompilerGeneratedAttribute]
public void set_ProviderName(string value);
    [CompilerGeneratedAttribute]
public bool get_Shared();
    [CompilerGeneratedAttribute]
public void set_Shared(bool value);
    [CompilerGeneratedAttribute]
public string get_SqlDependency();
    [CompilerGeneratedAttribute]
public void set_SqlDependency(string value);
    [CompilerGeneratedAttribute]
public string get_VaryByControl();
    [CompilerGeneratedAttribute]
public void set_VaryByControl(string value);
    [CompilerGeneratedAttribute]
public string get_VaryByCustom();
    [CompilerGeneratedAttribute]
public void set_VaryByCustom(string value);
    [CompilerGeneratedAttribute]
public string get_VaryByParam();
    [CompilerGeneratedAttribute]
public void set_VaryByParam(string value);
}
[SchemaElementNameAttribute("OutputCache")]
internal class System.Web.UI.Design.Directives.OutputCacheAsix : object {
    [FilterableAttribute("False")]
public bool DiskCacheable { get; public set; }
    [FilterableAttribute("False")]
public int Duration { get; public set; }
    [FilterableAttribute("False")]
public OutputCacheLocation Location { get; public set; }
    [FilterableAttribute("False")]
public string SqlDependency { get; public set; }
    [FilterableAttribute("False")]
public string VaryByContentEncoding { get; public set; }
    [FilterableAttribute("False")]
public string VaryByCustom { get; public set; }
    [FilterableAttribute("False")]
public string VaryByHeader { get; public set; }
    [FilterableAttribute("False")]
public string VaryByParam { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DiskCacheable();
    [CompilerGeneratedAttribute]
public void set_DiskCacheable(bool value);
    [CompilerGeneratedAttribute]
public int get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(int value);
    [CompilerGeneratedAttribute]
public OutputCacheLocation get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(OutputCacheLocation value);
    [CompilerGeneratedAttribute]
public string get_SqlDependency();
    [CompilerGeneratedAttribute]
public void set_SqlDependency(string value);
    [CompilerGeneratedAttribute]
public string get_VaryByContentEncoding();
    [CompilerGeneratedAttribute]
public void set_VaryByContentEncoding(string value);
    [CompilerGeneratedAttribute]
public string get_VaryByCustom();
    [CompilerGeneratedAttribute]
public void set_VaryByCustom(string value);
    [CompilerGeneratedAttribute]
public string get_VaryByHeader();
    [CompilerGeneratedAttribute]
public void set_VaryByHeader(string value);
    [CompilerGeneratedAttribute]
public string get_VaryByParam();
    [CompilerGeneratedAttribute]
public void set_VaryByParam(string value);
}
internal class System.Web.UI.Design.Directives.Page : object {
    [FilterableAttribute("False")]
public bool AspCompat { get; public set; }
    [FilterableAttribute("False")]
public bool Async { get; public set; }
    [FilterableAttribute("False")]
public string AsyncTimeout { get; public set; }
    [FilterableAttribute("False")]
public bool AutoEventWireup { get; public set; }
    public bool Buffer { get; public set; }
    [FilterableAttribute("False")]
public string ClassName { get; public set; }
    [BrowsableAttribute("False")]
public string ClientTarget { get; public set; }
    [FilterableAttribute("False")]
[DirectiveAttribute]
[UrlPropertyAttribute]
public string CodeBehind { get; public set; }
    [FilterableAttribute("False")]
[DirectiveAttribute]
[UrlPropertyAttribute]
public string CodeFile { get; public set; }
    [FilterableAttribute("False")]
public string CodeFileBaseClass { get; public set; }
    public string CodePage { get; public set; }
    [FilterableAttribute("False")]
public CompilationMode CompilationMode { get; public set; }
    [FilterableAttribute("False")]
public string CompilerOptions { get; public set; }
    public string ContentType { get; public set; }
    [DirectiveAttribute]
public string Culture { get; public set; }
    [FilterableAttribute("False")]
public bool Debug { get; public set; }
    [FilterableAttribute("False")]
public bool EnableEventValidation { get; public set; }
    [FilterableAttribute("False")]
public PagesEnableSessionState EnableSessionState { get; public set; }
    [DirectiveAttribute]
public bool EnableTheming { get; public set; }
    public bool EnableViewState { get; public set; }
    public bool EnableViewStateMac { get; public set; }
    [UrlPropertyAttribute("*.asp;*.aspx;*.cshtml;*.vbhtml;*.asmx;*.asax;*.ashx;*.asix;*.ascx;*.htm;*.html;*.xml;*.xsd;*.config;*.asa;*.css;*.shtm;*.shtml;*.php;*.jsp")]
public string ErrorPage { get; public set; }
    [FilterableAttribute("False")]
public bool Explicit { get; public set; }
    [FilterableAttribute("False")]
[DirectiveAttribute]
public string Inherits { get; public set; }
    [FilterableAttribute("False")]
[ReadOnlyAttribute("True")]
[DirectiveAttribute]
public string Language { get; public set; }
    public string LCID { get; public set; }
    [FilterableAttribute("False")]
public bool LinePragmas { get; public set; }
    public bool MaintainScrollPositionOnPostback { get; public set; }
    [DirectiveAttribute]
[UrlPropertyAttribute("*.master")]
public string MasterPageFile { get; public set; }
    public string ResponseEncoding { get; public set; }
    [BrowsableAttribute("False")]
[FilterableAttribute("False")]
public bool SmartNavigation { get; public set; }
    [FilterableAttribute("False")]
[DirectiveAttribute]
[UrlPropertyAttribute]
public string Src { get; public set; }
    [FilterableAttribute("False")]
public bool Strict { get; public set; }
    [DirectiveAttribute]
public string StylesheetTheme { get; public set; }
    [BrowsableAttribute("False")]
[FilterableAttribute("False")]
public string TargetSchema { get; public set; }
    [DirectiveAttribute]
public string Theme { get; public set; }
    [DirectiveAttribute]
public string Title { get; public set; }
    [FilterableAttribute("False")]
public bool Trace { get; public set; }
    [FilterableAttribute("False")]
public TraceMode TraceMode { get; public set; }
    [FilterableAttribute("False")]
public Transaction Transaction { get; public set; }
    public string UICulture { get; public set; }
    [FilterableAttribute("False")]
public bool ValidateRequest { get; public set; }
    [FilterableAttribute("False")]
public ViewStateEncryptionMode ViewStateEncryptionMode { get; public set; }
    [FilterableAttribute("False")]
[TypeConverterAttribute("System.Web.UI.Design.Directives.WarningLevelConverter")]
public WarningLevel WarningLevel { get; public set; }
    [DefaultValueAttribute("Inherit")]
public ClientIDMode ClientIDMode { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AspCompat();
    [CompilerGeneratedAttribute]
public void set_AspCompat(bool value);
    [CompilerGeneratedAttribute]
public bool get_Async();
    [CompilerGeneratedAttribute]
public void set_Async(bool value);
    [CompilerGeneratedAttribute]
public string get_AsyncTimeout();
    [CompilerGeneratedAttribute]
public void set_AsyncTimeout(string value);
    [CompilerGeneratedAttribute]
public bool get_AutoEventWireup();
    [CompilerGeneratedAttribute]
public void set_AutoEventWireup(bool value);
    [CompilerGeneratedAttribute]
public bool get_Buffer();
    [CompilerGeneratedAttribute]
public void set_Buffer(bool value);
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
public void set_ClassName(string value);
    [CompilerGeneratedAttribute]
public string get_ClientTarget();
    [CompilerGeneratedAttribute]
public void set_ClientTarget(string value);
    [CompilerGeneratedAttribute]
public string get_CodeBehind();
    [CompilerGeneratedAttribute]
public void set_CodeBehind(string value);
    [CompilerGeneratedAttribute]
public string get_CodeFile();
    [CompilerGeneratedAttribute]
public void set_CodeFile(string value);
    [CompilerGeneratedAttribute]
public string get_CodeFileBaseClass();
    [CompilerGeneratedAttribute]
public void set_CodeFileBaseClass(string value);
    [CompilerGeneratedAttribute]
public string get_CodePage();
    [CompilerGeneratedAttribute]
public void set_CodePage(string value);
    [CompilerGeneratedAttribute]
public CompilationMode get_CompilationMode();
    [CompilerGeneratedAttribute]
public void set_CompilationMode(CompilationMode value);
    [CompilerGeneratedAttribute]
public string get_CompilerOptions();
    [CompilerGeneratedAttribute]
public void set_CompilerOptions(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(string value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableEventValidation();
    [CompilerGeneratedAttribute]
public void set_EnableEventValidation(bool value);
    [CompilerGeneratedAttribute]
public PagesEnableSessionState get_EnableSessionState();
    [CompilerGeneratedAttribute]
public void set_EnableSessionState(PagesEnableSessionState value);
    [CompilerGeneratedAttribute]
public bool get_EnableTheming();
    [CompilerGeneratedAttribute]
public void set_EnableTheming(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableViewState();
    [CompilerGeneratedAttribute]
public void set_EnableViewState(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableViewStateMac();
    [CompilerGeneratedAttribute]
public void set_EnableViewStateMac(bool value);
    [CompilerGeneratedAttribute]
public string get_ErrorPage();
    [CompilerGeneratedAttribute]
public void set_ErrorPage(string value);
    [CompilerGeneratedAttribute]
public bool get_Explicit();
    [CompilerGeneratedAttribute]
public void set_Explicit(bool value);
    [CompilerGeneratedAttribute]
public string get_Inherits();
    [CompilerGeneratedAttribute]
public void set_Inherits(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public string get_LCID();
    [CompilerGeneratedAttribute]
public void set_LCID(string value);
    [CompilerGeneratedAttribute]
public bool get_LinePragmas();
    [CompilerGeneratedAttribute]
public void set_LinePragmas(bool value);
    [CompilerGeneratedAttribute]
public bool get_MaintainScrollPositionOnPostback();
    [CompilerGeneratedAttribute]
public void set_MaintainScrollPositionOnPostback(bool value);
    [CompilerGeneratedAttribute]
public string get_MasterPageFile();
    [CompilerGeneratedAttribute]
public void set_MasterPageFile(string value);
    [CompilerGeneratedAttribute]
public string get_ResponseEncoding();
    [CompilerGeneratedAttribute]
public void set_ResponseEncoding(string value);
    [CompilerGeneratedAttribute]
public bool get_SmartNavigation();
    [CompilerGeneratedAttribute]
public void set_SmartNavigation(bool value);
    [CompilerGeneratedAttribute]
public string get_Src();
    [CompilerGeneratedAttribute]
public void set_Src(string value);
    [CompilerGeneratedAttribute]
public bool get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(bool value);
    [CompilerGeneratedAttribute]
public string get_StylesheetTheme();
    [CompilerGeneratedAttribute]
public void set_StylesheetTheme(string value);
    [CompilerGeneratedAttribute]
public string get_TargetSchema();
    [CompilerGeneratedAttribute]
public void set_TargetSchema(string value);
    [CompilerGeneratedAttribute]
public string get_Theme();
    [CompilerGeneratedAttribute]
public void set_Theme(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public bool get_Trace();
    [CompilerGeneratedAttribute]
public void set_Trace(bool value);
    [CompilerGeneratedAttribute]
public TraceMode get_TraceMode();
    [CompilerGeneratedAttribute]
public void set_TraceMode(TraceMode value);
    [CompilerGeneratedAttribute]
public Transaction get_Transaction();
    [CompilerGeneratedAttribute]
public void set_Transaction(Transaction value);
    [CompilerGeneratedAttribute]
public string get_UICulture();
    [CompilerGeneratedAttribute]
public void set_UICulture(string value);
    [CompilerGeneratedAttribute]
public bool get_ValidateRequest();
    [CompilerGeneratedAttribute]
public void set_ValidateRequest(bool value);
    [CompilerGeneratedAttribute]
public ViewStateEncryptionMode get_ViewStateEncryptionMode();
    [CompilerGeneratedAttribute]
public void set_ViewStateEncryptionMode(ViewStateEncryptionMode value);
    [CompilerGeneratedAttribute]
public WarningLevel get_WarningLevel();
    [CompilerGeneratedAttribute]
public void set_WarningLevel(WarningLevel value);
    [CompilerGeneratedAttribute]
public ClientIDMode get_ClientIDMode();
    [CompilerGeneratedAttribute]
public void set_ClientIDMode(ClientIDMode value);
}
[SchemaElementNameAttribute("Page")]
internal class System.Web.UI.Design.Directives.Page2_0 : Page {
    [FilterableAttribute("False")]
public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
[SchemaElementNameAttribute("Page")]
internal class System.Web.UI.Design.Directives.Page4_0 : Page {
    [BrowsableAttribute("False")]
[FilterableAttribute("False")]
public string Description { get; public set; }
    public string MetaDescription { get; public set; }
    public string MetaKeywords { get; public set; }
    public ViewStateMode ViewStateMode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_MetaDescription();
    [CompilerGeneratedAttribute]
public void set_MetaDescription(string value);
    [CompilerGeneratedAttribute]
public string get_MetaKeywords();
    [CompilerGeneratedAttribute]
public void set_MetaKeywords(string value);
    [CompilerGeneratedAttribute]
public ViewStateMode get_ViewStateMode();
    [CompilerGeneratedAttribute]
public void set_ViewStateMode(ViewStateMode value);
}
internal class System.Web.UI.Design.Directives.PreviousPageType : object {
    [FilterableAttribute("False")]
public string TypeName { get; public set; }
    [FilterableAttribute("False")]
[UrlPropertyAttribute("*.aspx")]
public string VirtualPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_VirtualPath();
    [CompilerGeneratedAttribute]
public void set_VirtualPath(string value);
}
internal class System.Web.UI.Design.Directives.Reference : object {
    [FilterableAttribute("False")]
[UrlPropertyAttribute("*.aspx")]
public string Page { get; public set; }
    [FilterableAttribute("False")]
[UrlPropertyAttribute("*.ascx")]
public string Control { get; public set; }
    [FilterableAttribute("False")]
[UrlPropertyAttribute("*.aspx;*.ascx")]
public string VirtualPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(string value);
    [CompilerGeneratedAttribute]
public string get_Control();
    [CompilerGeneratedAttribute]
public void set_Control(string value);
    [CompilerGeneratedAttribute]
public string get_VirtualPath();
    [CompilerGeneratedAttribute]
public void set_VirtualPath(string value);
}
internal class System.Web.UI.Design.Directives.Register : object {
    [FilterableAttribute("False")]
public string Assembly { get; public set; }
    [FilterableAttribute("False")]
public string Namespace { get; public set; }
    [FilterableAttribute("False")]
[UrlPropertyAttribute("*.ascx")]
public string Src { get; public set; }
    [FilterableAttribute("False")]
public string TagName { get; public set; }
    [FilterableAttribute("False")]
public string TagPrefix { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Assembly();
    [CompilerGeneratedAttribute]
public void set_Assembly(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Src();
    [CompilerGeneratedAttribute]
public void set_Src(string value);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
public void set_TagName(string value);
    [CompilerGeneratedAttribute]
public string get_TagPrefix();
    [CompilerGeneratedAttribute]
public void set_TagPrefix(string value);
}
[AttributeUsageAttribute("4")]
public class System.Web.UI.Design.Directives.SchemaElementNameAttribute : Attribute {
    public string Value { get; private set; }
    public SchemaElementNameAttribute(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
}
internal class System.Web.UI.Design.Directives.ServiceHost : object {
    public string CodeBehind { get; public set; }
    public bool Debug { get; public set; }
    public string Factory { get; public set; }
    [ReadOnlyAttribute("True")]
[DirectiveAttribute]
public string Language { get; public set; }
    public string Service { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CodeBehind();
    [CompilerGeneratedAttribute]
public void set_CodeBehind(string value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public string get_Factory();
    [CompilerGeneratedAttribute]
public void set_Factory(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public string get_Service();
    [CompilerGeneratedAttribute]
public void set_Service(string value);
}
internal enum System.Web.UI.Design.Directives.Transaction : Enum {
    public int value__;
    public static Transaction Disabled;
    public static Transaction NotSupported;
    public static Transaction Supported;
    public static Transaction Required;
    public static Transaction RequiresNew;
}
internal enum System.Web.UI.Design.Directives.WarningLevel : Enum {
    public int value__;
    public static WarningLevel Zero;
    public static WarningLevel One;
    public static WarningLevel Two;
    public static WarningLevel Three;
    public static WarningLevel Four;
}
internal class System.Web.UI.Design.Directives.WarningLevelConverter : TypeConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class System.Web.UI.Design.Directives.WebHandler : object {
    public string Class { get; public set; }
    public string CodeBehind { get; public set; }
    public string CompilerOptions { get; public set; }
    [FilterableAttribute("False")]
public bool Debug { get; public set; }
    [ReadOnlyAttribute("True")]
[DirectiveAttribute]
public string Language { get; public set; }
    [FilterableAttribute("False")]
[TypeConverterAttribute("System.Web.UI.Design.Directives.WarningLevelConverter")]
public WarningLevel WarningLevel { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    [CompilerGeneratedAttribute]
public string get_CodeBehind();
    [CompilerGeneratedAttribute]
public void set_CodeBehind(string value);
    [CompilerGeneratedAttribute]
public string get_CompilerOptions();
    [CompilerGeneratedAttribute]
public void set_CompilerOptions(string value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public WarningLevel get_WarningLevel();
    [CompilerGeneratedAttribute]
public void set_WarningLevel(WarningLevel value);
}
[SchemaElementNameAttribute("WebHandler")]
internal class System.Web.UI.Design.Directives.WebHandler2_0 : WebHandler {
    [FilterableAttribute("False")]
public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
[SchemaElementNameAttribute("WebHandler")]
internal class System.Web.UI.Design.Directives.WebHandler4_0 : WebHandler {
    [BrowsableAttribute("False")]
[FilterableAttribute("False")]
public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
internal class System.Web.UI.Design.Directives.WebService : object {
    public string Class { get; public set; }
    public string CodeBehind { get; public set; }
    public bool Debug { get; public set; }
    [ReadOnlyAttribute("True")]
[DirectiveAttribute]
public string Language { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    [CompilerGeneratedAttribute]
public string get_CodeBehind();
    [CompilerGeneratedAttribute]
public void set_CodeBehind(string value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
}
public class System.Web.UI.Design.EditableDesignerRegion : DesignerRegion {
    public string Content { get; public set; }
    public bool ServerControlsOnly { get; public set; }
    public bool SupportsDataBinding { get; public set; }
    public EditableDesignerRegion(ControlDesigner owner, string name);
    public EditableDesignerRegion(ControlDesigner owner, string name, bool serverControlsOnly);
    public virtual string get_Content();
    public virtual void set_Content(string value);
    public bool get_ServerControlsOnly();
    public void set_ServerControlsOnly(bool value);
    public virtual bool get_SupportsDataBinding();
    public virtual void set_SupportsDataBinding(bool value);
    public virtual ViewRendering GetChildViewRendering(Control control);
}
internal class System.Web.UI.Design.ExpressionBindingsDialog : DesignerForm {
    protected string HelpTopic { get; }
    public ExpressionBindingsDialog(IServiceProvider serviceProvider, Control control);
    private static ExpressionBindingsDialog();
    protected virtual string get_HelpTopic();
    protected virtual void OnInitialActivated(EventArgs e);
}
public abstract class System.Web.UI.Design.ExpressionEditor : object {
    public string ExpressionPrefix { get; }
    public string get_ExpressionPrefix();
    public abstract virtual object EvaluateExpression(string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);
    public static ExpressionEditor GetExpressionEditor(Type expressionBuilderType, IServiceProvider serviceProvider);
    internal static ExpressionEditor GetExpressionEditorInternal(Type expressionBuilderType, string expressionPrefix, IWebApplication webApp, IServiceProvider serviceProvider);
    public static ExpressionEditor GetExpressionEditor(string expressionPrefix, IServiceProvider serviceProvider);
    internal static Type GetExpressionBuilderType(string expressionPrefix, IServiceProvider serviceProvider, String& trueExpressionPrefix);
    public virtual ExpressionEditorSheet GetExpressionEditorSheet(string expression, IServiceProvider serviceProvider);
    internal void SetExpressionPrefix(string expressionPrefix);
}
public abstract class System.Web.UI.Design.ExpressionEditorSheet : object {
    [BrowsableAttribute("False")]
public bool IsValid { get; }
    [BrowsableAttribute("False")]
public IServiceProvider ServiceProvider { get; }
    protected ExpressionEditorSheet(IServiceProvider serviceProvider);
    public virtual bool get_IsValid();
    public IServiceProvider get_ServiceProvider();
    public abstract virtual string GetExpression();
}
public class System.Web.UI.Design.ExpressionsCollectionConverter : TypeConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Web.UI.Design.ExpressionsCollectionEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Web.UI.Design.GlobalDataBindingHandler : object {
    public static EventHandler Handler;
    private static GlobalDataBindingHandler();
    public static void OnDataBind(object sender, EventArgs e);
}
public class System.Web.UI.Design.HierarchicalDataSourceConverter : DataSourceConverter {
    protected virtual bool IsValidDataSource(IComponent component);
}
public class System.Web.UI.Design.HierarchicalDataSourceDesigner : ControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public bool CanConfigure { get; }
    public bool CanRefreshSchema { get; }
    protected bool SuppressingDataSourceEvents { get; }
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual bool get_CanConfigure();
    public virtual bool get_CanRefreshSchema();
    public sealed virtual void add_DataSourceChanged(EventHandler value);
    public sealed virtual void remove_DataSourceChanged(EventHandler value);
    public sealed virtual void add_SchemaRefreshed(EventHandler value);
    public sealed virtual void remove_SchemaRefreshed(EventHandler value);
    protected bool get_SuppressingDataSourceEvents();
    public virtual void Configure();
    public virtual string GetDesignTimeHtml();
    public virtual DesignerHierarchicalDataSourceView GetView(string viewPath);
    protected virtual void OnDataSourceChanged(EventArgs e);
    protected virtual void OnSchemaRefreshed(EventArgs e);
    public virtual void RefreshSchema(bool preferSilent);
    public virtual void ResumeDataSourceEvents();
    public virtual void SuppressDataSourceEvents();
}
public class System.Web.UI.Design.HtmlControlDesigner : ComponentDesigner {
    [ObsoleteAttribute("Error: This property can no longer be referenced, and is included to support existing compiled applications. The design-time element may not always provide access to the element in the markup. There are alternate methods on WebFormsRootDesigner for handling client script and controls. http://go.microsoft.com/fwlink/?linkid=14202", "True")]
protected object DesignTimeElement { get; }
    internal object DesignTimeElementInternal { get; }
    [ObsoleteAttribute("The recommended alternative is ControlDesigner.Tag. http://go.microsoft.com/fwlink/?linkid=14202")]
public IHtmlControlDesignerBehavior Behavior { get; public set; }
    internal IHtmlControlDesignerBehavior BehaviorInternal { get; internal set; }
    public DataBindingCollection DataBindings { get; }
    public ExpressionBindingCollection Expressions { get; }
    [ObsoleteAttribute("Use of this property is not recommended because code serialization is not supported. http://go.microsoft.com/fwlink/?linkid=14202")]
public bool ShouldCodeSerialize { get; public set; }
    internal bool ShouldCodeSerializeInternal { get; internal set; }
    protected object get_DesignTimeElement();
    internal object get_DesignTimeElementInternal();
    public IHtmlControlDesignerBehavior get_Behavior();
    public void set_Behavior(IHtmlControlDesignerBehavior value);
    internal virtual IHtmlControlDesignerBehavior get_BehaviorInternal();
    internal virtual void set_BehaviorInternal(IHtmlControlDesignerBehavior value);
    public DataBindingCollection get_DataBindings();
    public ExpressionBindingCollection get_Expressions();
    public virtual bool get_ShouldCodeSerialize();
    public virtual void set_ShouldCodeSerialize(bool value);
    internal virtual bool get_ShouldCodeSerializeInternal();
    internal virtual void set_ShouldCodeSerializeInternal(bool value);
    protected virtual void Dispose(bool disposing);
    public virtual void Initialize(IComponent component);
    [ObsoleteAttribute("The recommended alternative is ControlDesigner.Tag. http://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual void OnBehaviorAttached();
    [ObsoleteAttribute("The recommended alternative is ControlDesigner.Tag. http://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual void OnBehaviorDetaching();
    public virtual void OnSetParent();
    protected virtual void PreFilterEvents(IDictionary events);
    protected virtual void PreFilterProperties(IDictionary properties);
    [ObsoleteAttribute("The recommended alternative is to handle the Changed event on the DataBindings collection. The DataBindings collection allows more control of the databindings associated with the control. http://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual void OnBindingsCollectionChanged(string propName);
    internal void OnBindingsCollectionChangedInternal(string propName);
}
public class System.Web.UI.Design.HtmlIntrinsicControlDesigner : HtmlControlDesigner {
}
public class System.Web.UI.Design.HyperLinkDataBindingHandler : DataBindingHandler {
    public virtual void DataBindControl(IDesignerHost designerHost, Control control);
}
public interface System.Web.UI.Design.IContentResolutionService {
    public IDictionary ContentDefinitions { get; }
    public abstract virtual ContentDesignerState GetContentDesignerState(string identifier);
    public abstract virtual void SetContentDesignerState(string identifier, ContentDesignerState state);
    public abstract virtual IDictionary get_ContentDefinitions();
}
[ObsoleteAttribute("The recommended alternative is System.Web.UI.Design.IControlDesignerTag and System.Web.UI.Design.IControlDesignerView. http://go.microsoft.com/fwlink/?linkid=14202")]
public interface System.Web.UI.Design.IControlDesignerBehavior {
    public object DesignTimeElementView { get; }
    public string DesignTimeHtml { get; public set; }
    public abstract virtual object get_DesignTimeElementView();
    public abstract virtual string get_DesignTimeHtml();
    public abstract virtual void set_DesignTimeHtml(string value);
    public abstract virtual void OnTemplateModeChanged();
}
public interface System.Web.UI.Design.IControlDesignerTag {
    public bool IsDirty { get; }
    public abstract virtual bool get_IsDirty();
    public abstract virtual string GetAttribute(string name);
    public abstract virtual string GetContent();
    public abstract virtual void RemoveAttribute(string name);
    public abstract virtual void SetAttribute(string name, string value);
    public abstract virtual void SetContent(string content);
    public abstract virtual void SetDirty(bool dirty);
    public abstract virtual string GetOuterContent();
}
public interface System.Web.UI.Design.IControlDesignerView {
    public DesignerRegion ContainingRegion { get; }
    public IDesigner NamingContainerDesigner { get; }
    public bool SupportsRegions { get; }
    public abstract virtual DesignerRegion get_ContainingRegion();
    public abstract virtual IDesigner get_NamingContainerDesigner();
    public abstract virtual bool get_SupportsRegions();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ViewEvent(ViewEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ViewEvent(ViewEventHandler value);
    public abstract virtual Rectangle GetBounds(DesignerRegion region);
    public abstract virtual void Invalidate(Rectangle rectangle);
    public abstract virtual void SetFlags(ViewFlags viewFlags, bool setFlag);
    public abstract virtual void SetRegionContent(EditableDesignerRegion region, string content);
    public abstract virtual void Update();
}
public interface System.Web.UI.Design.IDataBindingSchemaProvider {
    public bool CanRefreshSchema { get; }
    public IDataSourceViewSchema Schema { get; }
    public abstract virtual bool get_CanRefreshSchema();
    public abstract virtual IDataSourceViewSchema get_Schema();
    public abstract virtual void RefreshSchema(bool preferSilent);
}
public interface System.Web.UI.Design.IDataSourceDesigner {
    public bool CanConfigure { get; }
    public bool CanRefreshSchema { get; }
    public abstract virtual bool get_CanConfigure();
    public abstract virtual bool get_CanRefreshSchema();
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataSourceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataSourceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SchemaRefreshed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SchemaRefreshed(EventHandler value);
    public abstract virtual void Configure();
    public abstract virtual DesignerDataSourceView GetView(string viewName);
    public abstract virtual String[] GetViewNames();
    public abstract virtual void RefreshSchema(bool preferSilent);
    public abstract virtual void ResumeDataSourceEvents();
    public abstract virtual void SuppressDataSourceEvents();
}
public interface System.Web.UI.Design.IDataSourceFieldSchema {
    public Type DataType { get; }
    public bool Identity { get; }
    public bool IsReadOnly { get; }
    public bool IsUnique { get; }
    public int Length { get; }
    public string Name { get; }
    public bool Nullable { get; }
    public int Precision { get; }
    public bool PrimaryKey { get; }
    public int Scale { get; }
    public abstract virtual Type get_DataType();
    public abstract virtual bool get_Identity();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual bool get_IsUnique();
    public abstract virtual int get_Length();
    public abstract virtual string get_Name();
    public abstract virtual bool get_Nullable();
    public abstract virtual int get_Precision();
    public abstract virtual bool get_PrimaryKey();
    public abstract virtual int get_Scale();
}
public interface System.Web.UI.Design.IDataSourceProvider {
    public abstract virtual object GetSelectedDataSource();
    public abstract virtual IEnumerable GetResolvedSelectedDataSource();
}
public interface System.Web.UI.Design.IDataSourceSchema {
    public abstract virtual IDataSourceViewSchema[] GetViews();
}
public interface System.Web.UI.Design.IDataSourceViewSchema {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual IDataSourceViewSchema[] GetChildren();
    public abstract virtual IDataSourceFieldSchema[] GetFields();
}
public interface System.Web.UI.Design.IDesignTimeResourceProviderFactoryService {
    public abstract virtual DesignTimeResourceProviderFactory GetFactory();
}
public interface System.Web.UI.Design.IDesignTimeResourceWriter {
    public abstract virtual string CreateResourceKey(string resourceName, object obj);
}
public interface System.Web.UI.Design.IDocumentProjectItem {
    public abstract virtual Stream GetContents();
    public abstract virtual void Open();
}
public interface System.Web.UI.Design.IFolderProjectItem {
    public ICollection Children { get; }
    public abstract virtual ICollection get_Children();
    public abstract virtual IDocumentProjectItem AddDocument(string name, Byte[] content);
    public abstract virtual IFolderProjectItem AddFolder(string name);
}
public interface System.Web.UI.Design.IHierarchicalDataSourceDesigner {
    public bool CanConfigure { get; }
    public bool CanRefreshSchema { get; }
    public abstract virtual bool get_CanConfigure();
    public abstract virtual bool get_CanRefreshSchema();
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataSourceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataSourceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SchemaRefreshed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SchemaRefreshed(EventHandler value);
    public abstract virtual void Configure();
    public abstract virtual DesignerHierarchicalDataSourceView GetView(string viewPath);
    public abstract virtual void RefreshSchema(bool preferSilent);
    public abstract virtual void ResumeDataSourceEvents();
    public abstract virtual void SuppressDataSourceEvents();
}
[ObsoleteAttribute("The recommended alternative is System.Web.UI.Design.IControlDesignerTag and System.Web.UI.Design.IControlDesignerView. http://go.microsoft.com/fwlink/?linkid=14202")]
public interface System.Web.UI.Design.IHtmlControlDesignerBehavior {
    public HtmlControlDesigner Designer { get; public set; }
    public object DesignTimeElement { get; }
    public abstract virtual HtmlControlDesigner get_Designer();
    public abstract virtual void set_Designer(HtmlControlDesigner value);
    public abstract virtual object get_DesignTimeElement();
    public abstract virtual object GetAttribute(string attribute, bool ignoreCase);
    public abstract virtual void RemoveAttribute(string attribute, bool ignoreCase);
    public abstract virtual void SetAttribute(string attribute, object value, bool ignoreCase);
    public abstract virtual object GetStyleAttribute(string attribute, bool designTimeOnly, bool ignoreCase);
    public abstract virtual void RemoveStyleAttribute(string attribute, bool designTimeOnly, bool ignoreCase);
    public abstract virtual void SetStyleAttribute(string attribute, bool designTimeOnly, object value, bool ignoreCase);
}
public class System.Web.UI.Design.ImageUrlEditor : UrlEditor {
    protected string Caption { get; }
    protected string Filter { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
}
public interface System.Web.UI.Design.IProjectItem {
    public string AppRelativeUrl { get; }
    public string Name { get; }
    public IProjectItem Parent { get; }
    public string PhysicalPath { get; }
    public abstract virtual string get_AppRelativeUrl();
    public abstract virtual string get_Name();
    public abstract virtual IProjectItem get_Parent();
    public abstract virtual string get_PhysicalPath();
}
[ObsoleteAttribute("Use of this type is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public interface System.Web.UI.Design.ITemplateEditingFrame {
    public Style ControlStyle { get; }
    public string Name { get; }
    public int InitialHeight { get; public set; }
    public int InitialWidth { get; public set; }
    public String[] TemplateNames { get; }
    public Style[] TemplateStyles { get; }
    public TemplateEditingVerb Verb { get; public set; }
    public abstract virtual Style get_ControlStyle();
    public abstract virtual string get_Name();
    public abstract virtual int get_InitialHeight();
    public abstract virtual void set_InitialHeight(int value);
    public abstract virtual int get_InitialWidth();
    public abstract virtual void set_InitialWidth(int value);
    public abstract virtual String[] get_TemplateNames();
    public abstract virtual Style[] get_TemplateStyles();
    public abstract virtual TemplateEditingVerb get_Verb();
    public abstract virtual void set_Verb(TemplateEditingVerb value);
    public abstract virtual void Close(bool saveChanges);
    public abstract virtual void Open();
    public abstract virtual void Resize(int width, int height);
    public abstract virtual void Save();
    public abstract virtual void UpdateControlName(string newName);
}
[ObsoleteAttribute("Use of this type is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public interface System.Web.UI.Design.ITemplateEditingService {
    public bool SupportsNestedTemplateEditing { get; }
    public abstract virtual bool get_SupportsNestedTemplateEditing();
    public abstract virtual ITemplateEditingFrame CreateFrame(TemplatedControlDesigner designer, string frameName, String[] templateNames);
    public abstract virtual ITemplateEditingFrame CreateFrame(TemplatedControlDesigner designer, string frameName, String[] templateNames, Style controlStyle, Style[] templateStyles);
    public abstract virtual string GetContainingTemplateName(Control control);
}
public interface System.Web.UI.Design.IWebAdministrationService {
    public abstract virtual void Start(IDictionary arguments);
}
[GuidAttribute("cff39fa8-5607-4b6d-86f3-cc80b3cfe2dd")]
public interface System.Web.UI.Design.IWebApplication {
    public IProjectItem RootProjectItem { get; }
    public abstract virtual IProjectItem get_RootProjectItem();
    public abstract virtual IProjectItem GetProjectItemFromUrl(string appRelativeUrl);
    public abstract virtual Configuration OpenWebConfiguration(bool isReadOnly);
}
[ObsoleteAttribute("The recommended alternative is System.Web.UI.Design.WebFormsReferenceManager. The WebFormsReferenceManager contains additional functionality and allows for more extensibility. To get the WebFormsReferenceManager use the RootDesigner.ReferenceManager property from your ControlDesigner. http://go.microsoft.com/fwlink/?linkid=14202")]
public interface System.Web.UI.Design.IWebFormReferenceManager {
    public abstract virtual Type GetObjectType(string tagPrefix, string typeName);
    public abstract virtual string GetTagPrefix(Type objectType);
    public abstract virtual string GetRegisterDirectives();
}
public interface System.Web.UI.Design.IWebFormsBuilderUIService {
    public abstract virtual string BuildColor(Control owner, string initialColor);
    public abstract virtual string BuildUrl(Control owner, string initialUrl, string baseUrl, string caption, string filter, UrlBuilderOptions options);
}
[ObsoleteAttribute("The recommended alternative is System.Web.UI.Design.WebFormsRootDesigner. The WebFormsRootDesigner contains additional functionality and allows for more extensibility. To get the WebFormsRootDesigner use the RootDesigner property from your ControlDesigner. http://go.microsoft.com/fwlink/?linkid=14202")]
public interface System.Web.UI.Design.IWebFormsDocumentService {
    public string DocumentUrl { get; }
    public bool IsLoading { get; }
    public abstract virtual string get_DocumentUrl();
    public abstract virtual bool get_IsLoading();
    [CompilerGeneratedAttribute]
public abstract virtual void add_LoadComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LoadComplete(EventHandler value);
    public abstract virtual object CreateDiscardableUndoUnit();
    public abstract virtual void DiscardUndoUnit(object discardableUndoUnit);
    public abstract virtual void EnableUndo(bool enable);
    public abstract virtual void UpdateSelection();
}
public class System.Web.UI.Design.MailFileEditor : UrlEditor {
    protected string Caption { get; }
    protected string Filter { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
}
public class System.Web.UI.Design.MdbDataFileEditor : UrlEditor {
    protected string Caption { get; }
    protected string Filter { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
}
[ObsoleteAttribute("The recommended alternative is ContainerControlDesigner because it uses an EditableDesignerRegion for editing the content. Designer regions allow for better control of the content being edited. http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.Web.UI.Design.ReadWriteControlDesigner : ControlDesigner {
    public virtual string GetDesignTimeHtml();
    public virtual void OnComponentChanged(object sender, ComponentChangedEventArgs ce);
    protected virtual void MapPropertyToStyle(string propName, object varPropValue);
    [ObsoleteAttribute("The recommended alternative is ControlDesigner.Tag. http://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual void OnBehaviorAttached();
    public virtual void UpdateDesignTimeHtml();
}
public class System.Web.UI.Design.ResourceExpressionEditor : ExpressionEditor {
    public virtual object EvaluateExpression(string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);
    public virtual ExpressionEditorSheet GetExpressionEditorSheet(string expression, IServiceProvider serviceProvider);
}
public class System.Web.UI.Design.ResourceExpressionEditorSheet : ExpressionEditorSheet {
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("ResourceExpressionEditorSheet_ClassKey")]
public string ClassKey { get; public set; }
    public bool IsValid { get; }
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("ResourceExpressionEditorSheet_ResourceKey")]
[TypeConverterAttribute("System.Web.UI.Design.ResourceExpressionEditorSheet/ResourceKeyTypeConverter")]
public string ResourceKey { get; public set; }
    public ResourceExpressionEditorSheet(string expression, IServiceProvider serviceProvider);
    public string get_ClassKey();
    public void set_ClassKey(string value);
    public virtual bool get_IsValid();
    public string get_ResourceKey();
    public void set_ResourceKey(string value);
    public virtual string GetExpression();
}
public class System.Web.UI.Design.RouteUrlExpressionEditor : ExpressionEditor {
    public virtual object EvaluateExpression(string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);
    public virtual ExpressionEditorSheet GetExpressionEditorSheet(string expression, IServiceProvider serviceProvider);
}
public class System.Web.UI.Design.RouteUrlExpressionEditorSheet : ExpressionEditorSheet {
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("RouteUrlExpressionEditorSheet_RouteName")]
public string RouteName { get; public set; }
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("RouteUrlExpressionEditorSheet_RouteValues")]
public string RouteValues { get; public set; }
    public bool IsValid { get; }
    public RouteUrlExpressionEditorSheet(string expression, IServiceProvider serviceProvider);
    public string get_RouteName();
    public void set_RouteName(string value);
    public string get_RouteValues();
    public void set_RouteValues(string value);
    public virtual bool get_IsValid();
    public virtual string GetExpression();
}
public class System.Web.UI.Design.RouteValueExpressionEditor : ExpressionEditor {
    public virtual object EvaluateExpression(string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);
    public virtual ExpressionEditorSheet GetExpressionEditorSheet(string expression, IServiceProvider serviceProvider);
}
public class System.Web.UI.Design.RouteValueExpressionEditorSheet : ExpressionEditorSheet {
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("RouteValueExpressionEditorSheet_RouteValue")]
public string RouteValue { get; public set; }
    public bool IsValid { get; }
    public RouteValueExpressionEditorSheet(string expression, IServiceProvider serviceProvider);
    public string get_RouteValue();
    public void set_RouteValue(string value);
    public virtual bool get_IsValid();
    public virtual string GetExpression();
}
public class System.Web.UI.Design.SkinIDTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
[AttributeUsageAttribute("4")]
public class System.Web.UI.Design.SupportsPreviewControlAttribute : Attribute {
    public static SupportsPreviewControlAttribute Default;
    public bool SupportsPreviewControl { get; }
    public SupportsPreviewControlAttribute(bool supportsPreviewControl);
    private static SupportsPreviewControlAttribute();
    public bool get_SupportsPreviewControl();
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
    public virtual bool Equals(object obj);
}
public abstract class System.Web.UI.Design.TemplatedControlDesigner : ControlDesigner {
    [ObsoleteAttribute("Use of this property is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public ITemplateEditingFrame ActiveTemplateEditingFrame { get; }
    public bool CanEnterTemplateMode { get; }
    protected bool DataBindingsEnabled { get; }
    [ObsoleteAttribute("The recommended alternative is System.Web.UI.Design.ControlDesigner.InTemplateMode. http://go.microsoft.com/fwlink/?linkid=14202")]
public bool InTemplateMode { get; }
    internal bool InTemplateModeInternal { get; }
    internal EventHandler TemplateEditingVerbHandler { get; }
    public TemplateGroupCollection TemplateGroups { get; }
    public ITemplateEditingFrame get_ActiveTemplateEditingFrame();
    public bool get_CanEnterTemplateMode();
    protected virtual bool get_DataBindingsEnabled();
    public bool get_InTemplateMode();
    internal bool get_InTemplateModeInternal();
    internal EventHandler get_TemplateEditingVerbHandler();
    public virtual TemplateGroupCollection get_TemplateGroups();
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
protected abstract virtual ITemplateEditingFrame CreateTemplateEditingFrame(TemplateEditingVerb verb);
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public void EnterTemplateMode(ITemplateEditingFrame newTemplateEditingFrame);
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public void ExitTemplateMode(bool fSwitchingTemplates, bool fNested, bool fSave);
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
protected abstract virtual TemplateEditingVerb[] GetCachedTemplateEditingVerbs();
    internal virtual string GetPersistInnerHtmlInternal();
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual string GetTemplateContainerDataItemProperty(string templateName);
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual IEnumerable GetTemplateContainerDataSource(string templateName);
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public abstract virtual string GetTemplateContent(ITemplateEditingFrame editingFrame, string templateName, Boolean& allowEditing);
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public TemplateEditingVerb[] GetTemplateEditingVerbs();
    protected ITemplate GetTemplateFromText(string text);
    internal ITemplate GetTemplateFromText(string text, ITemplate currentTemplate);
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual Type GetTemplatePropertyParentType(string templateName);
    protected string GetTextFromTemplate(ITemplate template);
    public virtual void Initialize(IComponent component);
    [ObsoleteAttribute("The recommended alternative is ControlDesigner.Tag. http://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual void OnBehaviorAttached();
    public virtual void OnComponentChanged(object sender, ComponentChangedEventArgs ce);
    public virtual void OnSetParent();
    protected virtual void OnTemplateModeChanged();
    internal void OnTemplateModeChangedInternal(TemplateModeChangedEventArgs e);
    protected void SaveActiveTemplateEditingFrame();
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public abstract virtual void SetTemplateContent(ITemplateEditingFrame editingFrame, string templateName, string templateContent);
    public virtual void UpdateDesignTimeHtml();
}
public class System.Web.UI.Design.TemplatedEditableDesignerRegion : EditableDesignerRegion {
    public bool IsSingleInstanceTemplate { get; public set; }
    public bool SupportsDataBinding { get; public set; }
    public TemplateDefinition TemplateDefinition { get; }
    public TemplatedEditableDesignerRegion(TemplateDefinition templateDefinition);
    public virtual bool get_IsSingleInstanceTemplate();
    public virtual void set_IsSingleInstanceTemplate(bool value);
    public virtual bool get_SupportsDataBinding();
    public virtual void set_SupportsDataBinding(bool value);
    public TemplateDefinition get_TemplateDefinition();
}
public class System.Web.UI.Design.TemplateDefinition : DesignerObject {
    public bool AllowEditing { get; }
    public string Content { get; public set; }
    public bool ServerControlsOnly { get; }
    public bool SupportsDataBinding { get; public set; }
    public Style Style { get; }
    public object TemplatedObject { get; }
    public string TemplatePropertyName { get; }
    public TemplateDefinition(ControlDesigner designer, string name, object templatedObject, string templatePropertyName);
    public TemplateDefinition(ControlDesigner designer, string name, object templatedObject, string templatePropertyName, Style style);
    public TemplateDefinition(ControlDesigner designer, string name, object templatedObject, string templatePropertyName, bool serverControlsOnly);
    public TemplateDefinition(ControlDesigner designer, string name, object templatedObject, string templatePropertyName, Style style, bool serverControlsOnly);
    public virtual bool get_AllowEditing();
    public virtual string get_Content();
    public virtual void set_Content(string value);
    public bool get_ServerControlsOnly();
    public bool get_SupportsDataBinding();
    public void set_SupportsDataBinding(bool value);
    public Style get_Style();
    public object get_TemplatedObject();
    public string get_TemplatePropertyName();
}
internal class System.Web.UI.Design.TemplateEditingFrame : object {
    public Style ControlStyle { get; }
    public string Name { get; }
    public int InitialHeight { get; public set; }
    public int InitialWidth { get; public set; }
    public String[] TemplateNames { get; }
    public Style[] TemplateStyles { get; }
    public TemplateEditingVerb Verb { get; public set; }
    public TemplateEditingFrame(TemplatedControlDesigner owner, string frameName, String[] templateNames, Style controlStyle, Style[] templateStyles);
    private static TemplateEditingFrame();
    public sealed virtual Style get_ControlStyle();
    public sealed virtual string get_Name();
    public sealed virtual int get_InitialHeight();
    public sealed virtual void set_InitialHeight(int value);
    public sealed virtual int get_InitialWidth();
    public sealed virtual void set_InitialWidth(int value);
    public sealed virtual String[] get_TemplateNames();
    public sealed virtual Style[] get_TemplateStyles();
    public sealed virtual TemplateEditingVerb get_Verb();
    public sealed virtual void set_Verb(TemplateEditingVerb value);
    public sealed virtual void Close(bool saveChanges);
    public sealed virtual void Dispose();
    public sealed virtual void Open();
    public sealed virtual void Resize(int width, int height);
    public sealed virtual void Save();
    public void Show();
    public sealed virtual void UpdateControlName(string newName);
}
[ObsoleteAttribute("Use of this type is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.Web.UI.Design.TemplateEditingService : object {
    public bool SupportsNestedTemplateEditing { get; }
    public TemplateEditingService(IDesignerHost designerHost);
    public sealed virtual bool get_SupportsNestedTemplateEditing();
    public sealed virtual ITemplateEditingFrame CreateFrame(TemplatedControlDesigner designer, string frameName, String[] templateNames);
    public sealed virtual ITemplateEditingFrame CreateFrame(TemplatedControlDesigner designer, string frameName, String[] templateNames, Style controlStyle, Style[] templateStyles);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    public sealed virtual string GetContainingTemplateName(Control control);
}
[ObsoleteAttribute("Use of this type is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.Web.UI.Design.TemplateEditingVerb : DesignerVerb {
    internal ITemplateEditingFrame EditingFrame { get; internal set; }
    public int Index { get; }
    public TemplateEditingVerb(string text, int index, TemplatedControlDesigner designer);
    public TemplateEditingVerb(string text, int index);
    private static TemplateEditingVerb();
    internal ITemplateEditingFrame get_EditingFrame();
    internal void set_EditingFrame(ITemplateEditingFrame value);
    public int get_Index();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
}
public class System.Web.UI.Design.TemplateGroup : object {
    public bool IsEmpty { get; }
    public string GroupName { get; }
    public Style GroupStyle { get; }
    public TemplateDefinition[] Templates { get; }
    public TemplateGroup(string groupName);
    public TemplateGroup(string groupName, Style groupStyle);
    private static TemplateGroup();
    public bool get_IsEmpty();
    public string get_GroupName();
    public Style get_GroupStyle();
    public TemplateDefinition[] get_Templates();
    public void AddTemplateDefinition(TemplateDefinition templateDefinition);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.Design.TemplateGroupCollection : object {
    public int Count { get; }
    public TemplateGroup Item { get; public set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    internal TemplateGroupCollection(TemplateGroup[] verbs);
    public int get_Count();
    public TemplateGroup get_Item(int index);
    public void set_Item(int index, TemplateGroup value);
    public int Add(TemplateGroup group);
    public void AddRange(TemplateGroupCollection groups);
    public void Clear();
    public bool Contains(TemplateGroup group);
    public void CopyTo(TemplateGroup[] array, int index);
    public int IndexOf(TemplateGroup group);
    public void Insert(int index, TemplateGroup group);
    public void Remove(TemplateGroup group);
    public void RemoveAt(int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object o);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object o);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.IndexOf(object o);
    private sealed virtual override void System.Collections.IList.Insert(int index, object o);
    private sealed virtual override void System.Collections.IList.Remove(object o);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
}
public class System.Web.UI.Design.TemplateModeChangedEventArgs : EventArgs {
    public TemplateGroup NewTemplateGroup { get; }
    public TemplateModeChangedEventArgs(TemplateGroup newTemplateGroup);
    public TemplateGroup get_NewTemplateGroup();
}
public class System.Web.UI.Design.TextControlDesigner : ControlDesigner {
    public virtual string GetDesignTimeHtml();
}
public class System.Web.UI.Design.TextDataBindingHandler : DataBindingHandler {
    public virtual void DataBindControl(IDesignerHost designerHost, Control control);
}
public class System.Web.UI.Design.TransactedChangeCallback : MulticastDelegate {
    public TransactedChangeCallback(object object, IntPtr method);
    public virtual bool Invoke(object context);
    public virtual IAsyncResult BeginInvoke(object context, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class System.Web.UI.Design.TypeEnumerableViewSchema : BaseTypeViewSchema {
    public TypeEnumerableViewSchema(string viewName, Type type);
    protected virtual Type GetRowType(Type objectType);
}
internal class System.Web.UI.Design.TypeFieldSchema : object {
    public Type DataType { get; }
    public bool Identity { get; }
    public bool IsReadOnly { get; }
    public bool IsUnique { get; }
    public int Length { get; }
    public string Name { get; }
    public bool Nullable { get; }
    public int Precision { get; }
    public bool PrimaryKey { get; }
    public int Scale { get; }
    public TypeFieldSchema(PropertyDescriptor fieldDescriptor);
    public sealed virtual Type get_DataType();
    public sealed virtual bool get_Identity();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsUnique();
    public sealed virtual int get_Length();
    public sealed virtual string get_Name();
    public sealed virtual bool get_Nullable();
    public sealed virtual int get_Precision();
    public sealed virtual bool get_PrimaryKey();
    public sealed virtual int get_Scale();
}
internal class System.Web.UI.Design.TypeGenericEnumerableViewSchema : BaseTypeViewSchema {
    public TypeGenericEnumerableViewSchema(string viewName, Type type);
    protected virtual Type GetRowType(Type objectType);
}
public class System.Web.UI.Design.TypeSchema : object {
    public TypeSchema(Type type);
    public sealed virtual IDataSourceViewSchema[] GetViews();
    internal static bool IsBoundGenericEnumerable(Type t);
}
internal class System.Web.UI.Design.TypeViewSchema : BaseTypeViewSchema {
    public TypeViewSchema(string viewName, Type type);
    protected virtual Type GetRowType(Type objectType);
}
public class System.Web.UI.Design.UrlBuilder : object {
    public static string BuildUrl(IComponent component, Control owner, string initialUrl, string caption, string filter);
    public static string BuildUrl(IComponent component, Control owner, string initialUrl, string caption, string filter, UrlBuilderOptions options);
    public static string BuildUrl(IServiceProvider serviceProvider, Control owner, string initialUrl, string caption, string filter, UrlBuilderOptions options);
}
[FlagsAttribute]
public enum System.Web.UI.Design.UrlBuilderOptions : Enum {
    public int value__;
    public static UrlBuilderOptions None;
    public static UrlBuilderOptions NoAbsolute;
}
public class System.Web.UI.Design.UrlEditor : UITypeEditor {
    protected string Caption { get; }
    protected UrlBuilderOptions Options { get; }
    protected string Filter { get; }
    protected virtual string get_Caption();
    protected virtual UrlBuilderOptions get_Options();
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    protected virtual string get_Filter();
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
public class System.Web.UI.Design.UserControlDesigner : ControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public bool AllowResize { get; }
    internal bool ShouldCodeSerializeInternal { get; internal set; }
    private static UserControlDesigner();
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual bool get_AllowResize();
    internal virtual bool get_ShouldCodeSerializeInternal();
    internal virtual void set_ShouldCodeSerializeInternal(bool value);
    public virtual string GetDesignTimeHtml();
    internal virtual string GetPersistInnerHtmlInternal();
}
public class System.Web.UI.Design.UserControlFileEditor : UrlEditor {
    protected string Caption { get; }
    protected string Filter { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
}
internal class System.Web.UI.Design.Util.AutoSizeComboBox : ComboBox {
    public void InvalidateDropDownWidth();
    protected virtual void OnDropDown(EventArgs e);
    protected virtual void OnSizeChanged(EventArgs e);
}
internal class System.Web.UI.Design.Util.ColorComboBox : ComboBox {
    public string Color { get; public set; }
    private static ColorComboBox();
    public string get_Color();
    public void set_Color(string value);
    protected virtual void OnHandleCreated(EventArgs e);
}
internal abstract class System.Web.UI.Design.Util.DesignerForm : Form {
    protected internal IServiceProvider ServiceProvider { get; }
    protected string HelpTopic { get; }
    protected DesignerForm(IServiceProvider serviceProvider);
    protected internal IServiceProvider get_ServiceProvider();
    protected virtual void Dispose(bool disposing);
    protected void InitializeForm();
    protected virtual object GetService(Type serviceType);
    protected virtual void OnActivated(EventArgs e);
    protected abstract virtual string get_HelpTopic();
    protected sealed virtual void OnHelpRequested(HelpEventArgs hevent);
    protected virtual void OnInitialActivated(EventArgs e);
    protected virtual void WndProc(Message& m);
}
internal class System.Web.UI.Design.Util.GroupLabel : Label {
    protected virtual void OnPaint(PaintEventArgs e);
}
internal class System.Web.UI.Design.Util.MSHTMLHost : Control {
    protected CreateParams CreateParams { get; }
    public IHTMLDocument2 GetDocument();
    protected virtual CreateParams get_CreateParams();
    public bool CreateTrident();
    public void ActivateTrident();
}
internal class System.Web.UI.Design.Util.NumberEdit : TextBox {
    public bool AllowDecimal { get; public set; }
    public bool AllowNegative { get; public set; }
    public bool get_AllowDecimal();
    public void set_AllowDecimal(bool value);
    public bool get_AllowNegative();
    public void set_AllowNegative(bool value);
    protected virtual void WndProc(Message& m);
}
internal abstract class System.Web.UI.Design.Util.TaskForm : TaskFormBase {
    protected Button OKButton { get; }
    public TaskForm(IServiceProvider serviceProvider);
    protected Button get_OKButton();
    protected virtual void OnCancelButtonClick(object sender, EventArgs e);
    protected virtual void OnOKButtonClick(object sender, EventArgs e);
}
internal abstract class System.Web.UI.Design.Util.TaskFormBase : DesignerForm {
    protected Label CaptionLabel { get; }
    public Image Glyph { get; public set; }
    protected Panel TaskPanel { get; }
    public TaskFormBase(IServiceProvider serviceProvider);
    protected Label get_CaptionLabel();
    public Image get_Glyph();
    public void set_Glyph(Image value);
    protected Panel get_TaskPanel();
    protected virtual void OnFontChanged(EventArgs e);
}
[ClassInterfaceAttribute("0")]
internal class System.Web.UI.Design.Util.TridentSite : object {
    protected Control parentControl;
    protected IOleDocumentView tridentView;
    protected IOleObject tridentOleObject;
    protected IHTMLDocument2 tridentDocument;
    protected EventHandler resizeHandler;
    public TridentSite(Control parent);
    public IHTMLDocument2 GetDocument();
    public void Activate();
    protected virtual void OnParentResize(object src, EventArgs e);
    public virtual void SaveObject();
    public virtual object GetMoniker(int dwAssign, int dwWhichMoniker);
    public virtual int GetContainer(IOleContainer& ppContainer);
    public virtual void ShowObject();
    public virtual void OnShowWindow(int fShow);
    public virtual void RequestNewObjectLayout();
    public virtual int ActivateMe(IOleDocumentView pViewToActivate);
    public virtual IntPtr GetWindow();
    public virtual void ContextSensitiveHelp(int fEnterMode);
    public virtual int CanInPlaceActivate();
    public virtual void OnInPlaceActivate();
    public virtual void OnUIActivate();
    public virtual void GetWindowContext(IOleInPlaceFrame& ppFrame, IOleInPlaceUIWindow& ppDoc, COMRECT lprcPosRect, COMRECT lprcClipRect, tagOIFI lpFrameInfo);
    public virtual int Scroll(tagSIZE scrollExtant);
    public virtual void OnUIDeactivate(int fUndoable);
    public virtual void OnInPlaceDeactivate();
    public virtual void DiscardUndoState();
    public virtual void DeactivateAndUndo();
    public virtual int OnPosRectChange(COMRECT lprcPosRect);
    public virtual void GetBorder(COMRECT lprectBorder);
    public virtual void RequestBorderSpace(COMRECT pborderwidths);
    public virtual void SetBorderSpace(COMRECT pborderwidths);
    public virtual void SetActiveObject(IOleInPlaceActiveObject pActiveObject, string pszObjName);
    public virtual void InsertMenus(IntPtr hmenuShared, object lpMenuWidths);
    public virtual void SetMenu(IntPtr hmenuShared, IntPtr holemenu, IntPtr hwndActiveObject);
    public virtual void RemoveMenus(IntPtr hmenuShared);
    public virtual void SetStatusText(string pszStatusText);
    public virtual void EnableModeless(int fEnable);
    public virtual int TranslateAccelerator(MSG& lpmsg, short wID);
    public virtual int ShowContextMenu(int dwID, POINT pt, object pcmdtReserved, object pdispReserved);
    public virtual int GetHostInfo(DOCHOSTUIINFO info);
    public virtual int EnableModeless(bool fEnable);
    public virtual int ShowUI(int dwID, IOleInPlaceActiveObject activeObject, IOleCommandTarget commandTarget, IOleInPlaceFrame frame, IOleInPlaceUIWindow doc);
    public virtual int HideUI();
    public virtual int UpdateUI();
    public virtual int OnDocWindowActivate(bool fActivate);
    public virtual int OnFrameWindowActivate(bool fActivate);
    public virtual int ResizeBorder(COMRECT rect, IOleInPlaceUIWindow doc, bool fFrameWindow);
    public virtual int GetOptionKeyPath(String[] pbstrKey, int dw);
    public virtual int GetDropTarget(IOleDropTarget pDropTarget, IOleDropTarget& ppDropTarget);
    public virtual int GetExternal(Object& ppDispatch);
    public virtual int TranslateAccelerator(MSG& msg, Guid& group, int nCmdID);
    public virtual int TranslateUrl(int dwTranslate, string strUrlIn, String& pstrUrlOut);
    public virtual int FilterDataObject(IDataObject pDO, IDataObject& ppDORet);
    protected void CreateDocument();
    protected void ActivateDocument();
}
internal static class System.Web.UI.Design.Util.UIHelper : object {
    internal static void UpdateFieldsCheckedListBoxColumnWidth(CheckedListBox checkedListBox);
}
internal static class System.Web.UI.Design.Util.UIServiceHelper : object {
    public static Font GetDialogFont(IServiceProvider serviceProvider);
    public static IWin32Window GetDialogOwnerWindow(IServiceProvider serviceProvider);
    public static DialogResult ShowDialog(IServiceProvider serviceProvider, Form form);
    public static void ShowError(IServiceProvider serviceProvider, string message);
    public static void ShowError(IServiceProvider serviceProvider, Exception ex, string message);
    public static void ShowMessage(IServiceProvider serviceProvider, string message);
    public static DialogResult ShowMessage(IServiceProvider serviceProvider, string message, string caption, MessageBoxButtons buttons);
}
internal class System.Web.UI.Design.Util.UnitControl : Panel {
    public static int UNIT_PX;
    public static int UNIT_PT;
    public static int UNIT_PC;
    public static int UNIT_MM;
    public static int UNIT_CM;
    public static int UNIT_IN;
    public static int UNIT_EM;
    public static int UNIT_EX;
    public static int UNIT_PERCENT;
    public static int UNIT_NONE;
    public bool AllowNegativeValues { get; public set; }
    public bool AllowNonUnitValues { get; public set; }
    public bool AllowPercentValues { get; public set; }
    public int DefaultUnit { get; public set; }
    public int MaxValue { get; public set; }
    public int MinValue { get; public set; }
    public bool ValidateMinMax { get; public set; }
    public string Value { get; public set; }
    public string UnitAccessibleName { get; public set; }
    public string UnitAccessibleDescription { get; public set; }
    public string ValueAccessibleName { get; public set; }
    public string ValueAccessibleDescription { get; public set; }
    private static UnitControl();
    public bool get_AllowNegativeValues();
    public void set_AllowNegativeValues(bool value);
    public bool get_AllowNonUnitValues();
    public void set_AllowNonUnitValues(bool value);
    public bool get_AllowPercentValues();
    public void set_AllowPercentValues(bool value);
    public int get_DefaultUnit();
    public void set_DefaultUnit(int value);
    public int get_MaxValue();
    public void set_MaxValue(int value);
    public int get_MinValue();
    public void set_MinValue(int value);
    protected virtual void OnEnabledChanged(EventArgs e);
    public bool get_ValidateMinMax();
    public void set_ValidateMinMax(bool value);
    public string get_Value();
    public void set_Value(string value);
    public string get_UnitAccessibleName();
    public void set_UnitAccessibleName(string value);
    public string get_UnitAccessibleDescription();
    public void set_UnitAccessibleDescription(string value);
    public string get_ValueAccessibleName();
    public void set_ValueAccessibleName(string value);
    public string get_ValueAccessibleDescription();
    public void set_ValueAccessibleDescription(string value);
    public void add_Changed(EventHandler value);
    public void remove_Changed(EventHandler value);
    protected virtual void OnGotFocus(EventArgs e);
}
internal class System.Web.UI.Design.Util.UnsettableComboBox : ComboBox {
    public string NotSetText { get; public set; }
    public string Text { get; public set; }
    public string get_NotSetText();
    public void set_NotSetText(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void AddItem(object item);
    public void EnsureNotSetItem();
    public bool IsSet();
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
}
internal class System.Web.UI.Design.Util.UrlPath : object {
    internal static string MapPath(IServiceProvider serviceProvider, string path);
}
internal abstract class System.Web.UI.Design.Util.WizardForm : TaskFormBase {
    public Button FinishButton { get; }
    public Button NextButton { get; }
    public Button PreviousButton { get; }
    public WizardForm(IServiceProvider serviceProvider);
    public Button get_FinishButton();
    public Button get_NextButton();
    public Button get_PreviousButton();
    public void NextPanel();
    protected virtual void OnCancelButtonClick(object sender, EventArgs e);
    protected virtual void OnInitialActivated(EventArgs e);
    protected virtual void OnFinishButtonClick(object sender, EventArgs e);
    protected virtual void OnNextButtonClick(object sender, EventArgs e);
    protected virtual void OnPanelChanging(WizardPanelChangingEventArgs e);
    protected virtual void OnPreviousButtonClick(object sender, EventArgs e);
    public void PreviousPanel();
    internal void RegisterPanel(WizardPanel panel);
    protected void SetPanels(WizardPanel[] panels);
}
internal class System.Web.UI.Design.Util.WizardPanel : UserControl {
    public string Caption { get; public set; }
    public WizardPanel NextPanel { get; public set; }
    [BrowsableAttribute("False")]
public WizardForm ParentWizard { get; }
    protected IServiceProvider ServiceProvider { get; }
    public string get_Caption();
    public void set_Caption(string value);
    public WizardPanel get_NextPanel();
    public void set_NextPanel(WizardPanel value);
    public WizardForm get_ParentWizard();
    protected IServiceProvider get_ServiceProvider();
    protected internal virtual void OnComplete();
    public virtual bool OnNext();
    public virtual void OnPrevious();
    internal void SetParentWizard(WizardForm parent);
}
internal class System.Web.UI.Design.Util.WizardPanelChangingEventArgs : EventArgs {
    public WizardPanel CurrentPanel { get; }
    public WizardPanelChangingEventArgs(WizardPanel currentPanel);
    public WizardPanel get_CurrentPanel();
}
public class System.Web.UI.Design.ViewEvent : object {
    public static ViewEvent Click;
    public static ViewEvent Paint;
    public static ViewEvent TemplateModeChanged;
    private static ViewEvent();
}
public class System.Web.UI.Design.ViewEventArgs : EventArgs {
    public EventArgs EventArgs { get; }
    public ViewEvent EventType { get; }
    public DesignerRegion Region { get; }
    public ViewEventArgs(ViewEvent eventType, DesignerRegion region, EventArgs eventArgs);
    public EventArgs get_EventArgs();
    public ViewEvent get_EventType();
    public DesignerRegion get_Region();
}
public class System.Web.UI.Design.ViewEventHandler : MulticastDelegate {
    public ViewEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ViewEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ViewEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum System.Web.UI.Design.ViewFlags : Enum {
    public int value__;
    public static ViewFlags CustomPaint;
    public static ViewFlags DesignTimeHtmlRequiresLoadComplete;
    public static ViewFlags TemplateEditing;
}
public class System.Web.UI.Design.ViewRendering : object {
    public string Content { get; }
    public DesignerRegionCollection Regions { get; }
    public bool Visible { get; }
    public ViewRendering(string content, DesignerRegionCollection regions);
    public ViewRendering(string content, DesignerRegionCollection regions, bool visible);
    public string get_Content();
    public DesignerRegionCollection get_Regions();
    public bool get_Visible();
}
internal class System.Web.UI.Design.WebControls.AccessDataSourceConnectionChooserPanel : SqlDataSourceConnectionPanel {
    public DesignerDataConnection DataConnection { get; }
    public AccessDataSourceConnectionChooserPanel(AccessDataSourceDesigner accessDataSourceDesigner, AccessDataSource accessDataSource);
    public virtual DesignerDataConnection get_DataConnection();
    protected internal virtual void OnComplete();
    public virtual bool OnNext();
    protected virtual void OnVisibleChanged(EventArgs e);
}
public class System.Web.UI.Design.WebControls.AccessDataSourceDesigner : SqlDataSourceDesigner {
    public string DataFile { get; public set; }
    public string get_DataFile();
    public void set_DataFile(string value);
    internal virtual SqlDataSourceWizardForm CreateConfigureDataSourceWizardForm(IServiceProvider serviceProvider, IDataEnvironment dataEnvironment);
    protected virtual string GetConnectionString();
    internal static string GetConnectionString(IServiceProvider serviceProvider, AccessDataSource dataSource);
    protected virtual void PreFilterProperties(IDictionary properties);
}
internal class System.Web.UI.Design.WebControls.AccessDataSourceWizardForm : SqlDataSourceWizardForm {
    protected string HelpTopic { get; }
    public AccessDataSourceWizardForm(IServiceProvider serviceProvider, AccessDataSourceDesigner accessDataSourceDesigner, IDataEnvironment dataEnvironment);
    protected virtual string get_HelpTopic();
    protected virtual SqlDataSourceConnectionPanel CreateConnectionPanel();
}
internal class System.Web.UI.Design.WebControls.AddDataControlFieldDialog : DesignerForm {
    protected string HelpTopic { get; }
    public AddDataControlFieldDialog(DataBoundControlDesigner controlDesigner);
    protected virtual string get_HelpTopic();
    protected virtual void OnClosed(EventArgs e);
}
[SupportsPreviewControlAttribute("True")]
public class System.Web.UI.Design.WebControls.AdRotatorDesigner : DataBoundControlDesigner {
    public virtual string GetDesignTimeHtml();
}
internal static class System.Web.UI.Design.WebControls.AutoFormatSchemes : object {
    internal static String[] BDL_SCHEME_NAMES;
    internal static string BDL_SCHEMES;
    internal static String[] GRIDVIEW_SCHEME_NAMES;
    internal static string GRIDVIEW_SCHEMES;
    internal static String[] TREEVIEW_SCHEME_NAMES;
    internal static string TREEVIEW_SCHEMES;
    internal static String[] LOGIN_SCHEME_NAMES;
    internal static string LOGIN_SCHEMES;
    internal static String[] MENU_SCHEME_NAMES;
    internal static string MENU_SCHEMES;
    internal static String[] CHANGEPASSWORD_SCHEME_NAMES;
    internal static string CHANGEPASSWORD_SCHEMES;
    internal static string PAGER_SCHEMES;
    internal static String[] PASSWORDRECOVERY_SCHEME_NAMES;
    internal static string PASSWORDRECOVERY_SCHEMES;
    internal static String[] DETAILSVIEW_SCHEME_NAMES;
    internal static string DETAILSVIEW_SCHEMES;
    internal static String[] FORMVIEW_SCHEME_NAMES;
    internal static string FORMVIEW_SCHEMES;
    internal static String[] CALENDAR_SCHEME_NAMES;
    internal static string CALENDAR_SCHEMES;
    internal static String[] WIZARD_SCHEME_NAMES;
    internal static string WIZARD_SCHEMES;
    internal static String[] CREATEUSERWIZARD_SCHEME_NAMES;
    internal static string CREATEUSERWIZARD_SCHEMES;
    internal static String[] SITEMAPPATH_SCHEME_NAMES;
    internal static string SITEMAPPATH_SCHEMES;
    internal static String[] WEBPARTZONE_SCHEME_NAMES;
    internal static string WEBPARTZONE_SCHEMES;
    internal static String[] EDITORZONE_SCHEME_NAMES;
    internal static string EDITORZONE_SCHEMES;
    internal static String[] CATALOGZONE_SCHEME_NAMES;
    internal static string CATALOGZONE_SCHEMES;
    internal static String[] CONNECTIONSZONE_SCHEME_NAMES;
    internal static string CONNECTIONSZONE_SCHEMES;
    private static AutoFormatSchemes();
}
internal abstract class System.Web.UI.Design.WebControls.BaseAutoFormat`1 : DesignerAutoFormat {
    public BaseAutoFormat`1(string schemeName, string schemes);
    public virtual void Apply(Control control);
    protected abstract virtual void Apply(T control);
    protected abstract virtual void Initialize(DataRow schemeData);
    protected static bool GetBooleanProperty(string propertyTag, DataRow schemeData);
    protected static int GetIntProperty(string propertyTag, DataRow schemeData);
    protected static int GetIntProperty(string propertyTag, int defaultValue, DataRow schemeData);
    protected static int GetIntProperty(string propertyTag, DataRow schemeData, int defaultValue);
    protected static string GetStringProperty(string propertyTag, DataRow schemeData);
    protected static string GetStringProperty(string propertyTag, DataRow schemeData, string defaultValue);
}
public abstract class System.Web.UI.Design.WebControls.BaseDataBoundControlDesigner : ControlDesigner {
    public string DataSource { get; public set; }
    public string DataSourceID { get; public set; }
    public string get_DataSource();
    public void set_DataSource(string value);
    public string get_DataSourceID();
    public void set_DataSourceID(string value);
    protected abstract virtual bool ConnectToDataSource();
    protected abstract virtual void CreateDataSource();
    protected abstract virtual void DataBind(BaseDataBoundControl dataBoundControl);
    protected abstract virtual void DisconnectFromDataSource();
    protected virtual void Dispose(bool disposing);
    public virtual string GetDesignTimeHtml();
    protected virtual string GetEmptyDesignTimeHtml();
    protected virtual string GetErrorDesignTimeHtml(Exception e);
    public virtual void Initialize(IComponent component);
    protected virtual void OnDataSourceChanged(bool forceUpdateView);
    protected virtual void OnSchemaRefreshed();
    protected virtual void PreFilterProperties(IDictionary properties);
    public static DialogResult ShowCreateDataSourceDialog(ControlDesigner controlDesigner, Type dataSourceType, bool configure, String& dataSourceID);
}
internal class System.Web.UI.Design.WebControls.BaseDataListActionList : DataBoundControlActionList {
    public BaseDataListActionList(ControlDesigner controlDesigner, IDataSourceDesigner dataSourceDesigner);
    public void InvokePropertyBuilder();
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
public abstract class System.Web.UI.Design.WebControls.BaseDataListComponentEditor : WindowsFormsComponentEditor {
    public BaseDataListComponentEditor(int initialPage);
    public virtual bool EditComponent(ITypeDescriptorContext context, object obj, IWin32Window parent);
    protected virtual int GetInitialComponentEditorPageIndex();
}
public abstract class System.Web.UI.Design.WebControls.BaseDataListDesigner : TemplatedControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public string DataKeyField { get; public set; }
    public string DataMember { get; public set; }
    public string DataSource { get; public set; }
    public IDataSourceDesigner DataSourceDesigner { get; }
    public string DataSourceID { get; public set; }
    public DesignerDataSourceView DesignerView { get; }
    private bool System.Web.UI.Design.IDataBindingSchemaProvider.CanRefreshSchema { get; }
    private IDataSourceViewSchema System.Web.UI.Design.IDataBindingSchemaProvider.Schema { get; }
    public virtual DesignerActionListCollection get_ActionLists();
    public string get_DataKeyField();
    public void set_DataKeyField(string value);
    public string get_DataMember();
    public void set_DataMember(string value);
    public string get_DataSource();
    public void set_DataSource(string value);
    public IDataSourceDesigner get_DataSourceDesigner();
    public string get_DataSourceID();
    public void set_DataSourceID(string value);
    public DesignerDataSourceView get_DesignerView();
    protected virtual void Dispose(bool disposing);
    protected IEnumerable GetDesignTimeDataSource(int minimumRows, Boolean& dummyDataSource);
    protected IEnumerable GetDesignTimeDataSource(IEnumerable selectedDataSource, int minimumRows, Boolean& dummyDataSource);
    public sealed virtual IEnumerable GetResolvedSelectedDataSource();
    public sealed virtual object GetSelectedDataSource();
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual IEnumerable GetTemplateContainerDataSource(string templateName);
    public virtual void Initialize(IComponent component);
    protected internal void InvokePropertyBuilder(int initialPage);
    [ObsoleteAttribute("Use of this method is not recommended because the AutoFormat dialog is launched by the designer host. The list of available AutoFormats is exposed on the ControlDesigner in the AutoFormats property. http://go.microsoft.com/fwlink/?linkid=14202")]
protected void OnAutoFormat(object sender, EventArgs e);
    public virtual void OnAutoFormatApplied(DesignerAutoFormat appliedAutoFormat);
    public virtual void OnComponentChanged(object sender, ComponentChangedEventArgs e);
    protected internal virtual void OnDataSourceChanged();
    protected void OnPropertyBuilder(object sender, EventArgs e);
    protected virtual void OnSchemaRefreshed();
    protected internal void OnStylesChanged();
    protected abstract virtual void OnTemplateEditingVerbsChanged();
    protected virtual void PreFilterProperties(IDictionary properties);
    private sealed virtual override bool System.Web.UI.Design.IDataBindingSchemaProvider.get_CanRefreshSchema();
    private sealed virtual override IDataSourceViewSchema System.Web.UI.Design.IDataBindingSchemaProvider.get_Schema();
    private sealed virtual override void System.Web.UI.Design.IDataBindingSchemaProvider.RefreshSchema(bool preferSilent);
}
[SupportsPreviewControlAttribute("True")]
public class System.Web.UI.Design.WebControls.BaseValidatorDesigner : PreviewControlDesigner {
    protected virtual Control CreateViewControl();
    public virtual string GetDesignTimeHtml();
    protected virtual void PreFilterProperties(IDictionary properties);
}
public class System.Web.UI.Design.WebControls.BulletedListDesigner : ListControlDesigner {
    protected bool UsePreviewControl { get; }
    protected virtual bool get_UsePreviewControl();
    protected virtual void PostFilterEvents(IDictionary events);
}
[SupportsPreviewControlAttribute("True")]
public class System.Web.UI.Design.WebControls.ButtonDesigner : ControlDesigner {
    public virtual string GetDesignTimeHtml();
}
internal class System.Web.UI.Design.WebControls.CalendarAutoFormat : BaseAutoFormat`1<Calendar> {
    public CalendarAutoFormat(string schemeName, string schemes);
    protected virtual void Apply(Calendar calendar);
    protected virtual void Initialize(DataRow schemeData);
}
[ToolboxItemAttribute("False")]
[ObsoleteAttribute("Use of this type is not recommended because the AutoFormat dialog is launched by the designer host. The list of available AutoFormats is exposed on the ControlDesigner in the AutoFormats property. http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.Web.UI.Design.WebControls.CalendarAutoFormatDialog : Form {
    public CalendarAutoFormatDialog(Calendar calendar);
    protected void DoDelayLoadActions();
    protected void OnActivated(object source, EventArgs e);
    protected void OnSelChangedScheme(object source, EventArgs e);
    protected void OnOKClicked(object source, EventArgs e);
    protected void SaveComponent();
}
[SupportsPreviewControlAttribute("True")]
public class System.Web.UI.Design.WebControls.CalendarDesigner : ControlDesigner {
    public DesignerAutoFormatCollection AutoFormats { get; }
    public virtual DesignerAutoFormatCollection get_AutoFormats();
    public virtual void Initialize(IComponent component);
    protected void OnAutoFormat(object sender, EventArgs e);
}
internal class System.Web.UI.Design.WebControls.ChangePasswordAutoFormat : BaseAutoFormat`1<ChangePassword> {
    public ChangePasswordAutoFormat(string schemeName, string schemes);
    protected virtual void Apply(ChangePassword changePassword);
    protected virtual void Initialize(DataRow schemeData);
}
public class System.Web.UI.Design.WebControls.ChangePasswordDesigner : ControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public bool AllowResize { get; }
    public DesignerAutoFormatCollection AutoFormats { get; }
    public bool RenderOuterTable { get; public set; }
    public TemplateGroupCollection TemplateGroups { get; }
    protected bool UsePreviewControl { get; }
    private static ChangePasswordDesigner();
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual bool get_AllowResize();
    public virtual DesignerAutoFormatCollection get_AutoFormats();
    public bool get_RenderOuterTable();
    public void set_RenderOuterTable(bool value);
    public virtual TemplateGroupCollection get_TemplateGroups();
    protected virtual bool get_UsePreviewControl();
    public virtual string GetDesignTimeHtml();
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
    public virtual string GetEditableDesignerRegionContent(EditableDesignerRegion region);
    protected virtual string GetErrorDesignTimeHtml(Exception e);
    public virtual void Initialize(IComponent component);
    protected virtual void PreFilterProperties(IDictionary properties);
    public virtual void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content);
}
[SupportsPreviewControlAttribute("True")]
public class System.Web.UI.Design.WebControls.CheckBoxDesigner : ControlDesigner {
    public virtual string GetDesignTimeHtml();
}
internal abstract class System.Web.UI.Design.WebControls.CollectionEditorDialog : DesignerForm {
    protected CollectionEditorDialog(IServiceProvider serviceProvider);
    protected ToolStripButton CreatePushButton(string toolTipText, int imageIndex);
}
public class System.Web.UI.Design.WebControls.CompositeControlDesigner : ControlDesigner {
    protected virtual void CreateChildControls();
    public virtual string GetDesignTimeHtml();
    public virtual void Initialize(IComponent component);
}
public class System.Web.UI.Design.WebControls.ContentDesigner : ControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public bool AllowResize { get; }
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual bool get_AllowResize();
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
    public virtual string GetPersistenceContent();
    public virtual string GetEditableDesignerRegionContent(EditableDesignerRegion region);
    protected virtual void PreFilterEvents(IDictionary events);
    protected virtual void PostFilterProperties(IDictionary properties);
    public virtual void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content);
}
public class System.Web.UI.Design.WebControls.ContentPlaceHolderDesigner : ControlDesigner {
    public bool AllowResize { get; }
    public virtual bool get_AllowResize();
    public virtual string GetDesignTimeHtml();
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
    public virtual string GetEditableDesignerRegionContent(EditableDesignerRegion region);
    public virtual string GetPersistenceContent();
    public virtual void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content);
}
internal class System.Web.UI.Design.WebControls.CreateDataSourceDialog : TaskForm {
    public string DataSourceID { get; }
    protected string HelpTopic { get; }
    public CreateDataSourceDialog(ControlDesigner controlDesigner, Type dataSourceType, bool configure);
    public string get_DataSourceID();
    protected virtual string get_HelpTopic();
    protected virtual void OnClosing(CancelEventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
}
internal class System.Web.UI.Design.WebControls.CreateUserWizardAutoFormat : BaseAutoFormat`1<CreateUserWizard> {
    public CreateUserWizardAutoFormat(string schemeName, string schemes);
    protected virtual void Apply(CreateUserWizard createUserWizard);
    protected virtual void Initialize(DataRow schemeData);
}
public class System.Web.UI.Design.WebControls.CreateUserWizardDesigner : WizardDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public DesignerAutoFormatCollection AutoFormats { get; }
    protected bool UsePreviewControl { get; }
    private static CreateUserWizardDesigner();
    internal virtual bool InRegionEditingMode(Wizard viewControl);
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual DesignerAutoFormatCollection get_AutoFormats();
    protected virtual bool get_UsePreviewControl();
    protected virtual void AddDesignerRegions(DesignerRegionCollection regions);
    protected virtual void ConvertToCustomNavigationTemplate();
    internal virtual string GetEditableDesignerRegionContent(IWizardStepEditableRegion region);
    protected virtual string GetErrorDesignTimeHtml(Exception e);
    public virtual void Initialize(IComponent component);
    protected virtual void PreFilterProperties(IDictionary properties);
}
public class System.Web.UI.Design.WebControls.CreateUserWizardStepCollectionEditor : WizardStepCollectionEditor {
    protected string HelpTopic { get; }
    public CreateUserWizardStepCollectionEditor(Type type);
    protected virtual string get_HelpTopic();
    protected virtual bool CanRemoveInstance(object value);
    protected virtual CollectionForm CreateCollectionForm();
}
internal class System.Web.UI.Design.WebControls.DataBoundControlActionList : DesignerActionList {
    public bool AutoShow { get; public set; }
    [TypeConverterAttribute("System.Web.UI.Design.WebControls.DataSourceIDConverter")]
public string DataSourceID { get; public set; }
    public DataBoundControlActionList(ControlDesigner controlDesigner, IDataSourceDesigner dataSourceDesigner);
    public virtual bool get_AutoShow();
    public virtual void set_AutoShow(bool value);
    public string get_DataSourceID();
    public void set_DataSourceID(string value);
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
public class System.Web.UI.Design.WebControls.DataBoundControlDesigner : BaseDataBoundControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public string DataMember { get; public set; }
    public IDataSourceDesigner DataSourceDesigner { get; }
    public DesignerDataSourceView DesignerView { get; }
    protected int SampleRowCount { get; }
    protected bool UseDataSourcePickerActionList { get; }
    private bool System.Web.UI.Design.IDataBindingSchemaProvider.CanRefreshSchema { get; }
    private IDataSourceViewSchema System.Web.UI.Design.IDataBindingSchemaProvider.Schema { get; }
    public virtual DesignerActionListCollection get_ActionLists();
    public string get_DataMember();
    public void set_DataMember(string value);
    public IDataSourceDesigner get_DataSourceDesigner();
    public DesignerDataSourceView get_DesignerView();
    protected virtual int get_SampleRowCount();
    protected virtual bool get_UseDataSourcePickerActionList();
    protected virtual bool ConnectToDataSource();
    protected virtual void CreateDataSource();
    protected virtual void DataBind(BaseDataBoundControl dataBoundControl);
    protected virtual void DisconnectFromDataSource();
    protected virtual void Dispose(bool disposing);
    protected virtual IEnumerable GetDesignTimeDataSource();
    protected virtual IEnumerable GetSampleDataSource();
    protected virtual void PreFilterProperties(IDictionary properties);
    private sealed virtual override IEnumerable System.Web.UI.Design.IDataSourceProvider.GetResolvedSelectedDataSource();
    private sealed virtual override object System.Web.UI.Design.IDataSourceProvider.GetSelectedDataSource();
    private sealed virtual override bool System.Web.UI.Design.IDataBindingSchemaProvider.get_CanRefreshSchema();
    private sealed virtual override IDataSourceViewSchema System.Web.UI.Design.IDataBindingSchemaProvider.get_Schema();
    private sealed virtual override void System.Web.UI.Design.IDataBindingSchemaProvider.RefreshSchema(bool preferSilent);
}
public abstract class System.Web.UI.Design.WebControls.DataControlFieldDesigner : object {
    public string DefaultNodeText { get; }
    internal DesignerForm DesignerForm { get; internal set; }
    protected IServiceProvider ServiceProvider { get; }
    public bool UsesSchema { get; }
    public abstract virtual string get_DefaultNodeText();
    internal DesignerForm get_DesignerForm();
    internal void set_DesignerForm(DesignerForm value);
    protected IServiceProvider get_ServiceProvider();
    public abstract virtual bool get_UsesSchema();
    public abstract virtual DataControlField CreateField();
    public abstract virtual DataControlField CreateField(IDataSourceFieldSchema fieldSchema);
    public abstract virtual TemplateField CreateTemplateField(DataControlField dataControlField, DataBoundControl dataBoundControl);
    protected string GetNewDataSourceName(Type controlType, DataBoundControlMode mode);
    public abstract virtual string GetNodeText(DataControlField dataControlField);
    protected object GetService(Type serviceType);
    protected ITemplate GetTemplate(DataBoundControl control, string templateContent);
    protected TemplateField GetTemplateField(DataControlField dataControlField, DataBoundControl dataBoundControl);
    public abstract virtual bool IsEnabled(DataBoundControl parent);
}
internal static class System.Web.UI.Design.WebControls.DataControlFieldHelper : object {
    internal static IDictionary`2<Type, DataControlFieldDesigner> GetCustomFieldDesigners(DesignerForm designerForm, DataBoundControl control);
    internal static ITemplate GetTemplate(DataBoundControl control, string templateContent);
    internal static TemplateField GetTemplateField(DataControlField dataControlField, DataBoundControl dataBoundControl);
}
internal class System.Web.UI.Design.WebControls.DataControlFieldsEditor : DesignerForm {
    protected string HelpTopic { get; }
    public DataControlFieldsEditor(DataBoundControlDesigner controlDesigner);
    protected virtual string get_HelpTopic();
    internal string GetNewDataSourceName(Type controlType, DataBoundControlMode mode);
    protected virtual void OnActivated(EventArgs e);
    protected virtual void OnClosed(EventArgs e);
}
public class System.Web.UI.Design.WebControls.DataControlFieldTypeEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Web.UI.Design.WebControls.DataFieldCollectionEditor : StringCollectionEditor {
    public DataFieldCollectionEditor(Type type);
    protected virtual CollectionForm CreateCollectionForm();
}
internal class System.Web.UI.Design.WebControls.DataFieldEditor : DataFieldCollectionEditor {
    public DataFieldEditor(Type type);
    protected virtual Type CreateCollectionItemType();
    protected virtual Object[] GetItems(object editValue);
    protected virtual object SetItems(object editValue, Object[] value);
}
internal class System.Web.UI.Design.WebControls.DataGridAutoFormat : BaseAutoFormat`1<DataGrid> {
    public DataGridAutoFormat(string schemeName, string schemes);
    protected virtual void Apply(DataGrid grid);
    protected virtual void Initialize(DataRow schemeData);
}
public class System.Web.UI.Design.WebControls.DataGridColumnCollectionEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
public class System.Web.UI.Design.WebControls.DataGridComponentEditor : BaseDataListComponentEditor {
    internal static int IDX_GENERAL;
    internal static int IDX_COLUMNS;
    internal static int IDX_PAGING;
    internal static int IDX_FORMAT;
    internal static int IDX_BORDERS;
    public DataGridComponentEditor(int initialPage);
    private static DataGridComponentEditor();
    protected virtual Type[] GetComponentEditorPages();
}
[SupportsPreviewControlAttribute("True")]
public class System.Web.UI.Design.WebControls.DataGridDesigner : BaseDataListDesigner {
    internal static TraceSwitch DataGridDesignerSwitch;
    public DesignerAutoFormatCollection AutoFormats { get; }
    private static DataGridDesigner();
    public virtual DesignerAutoFormatCollection get_AutoFormats();
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual ITemplateEditingFrame CreateTemplateEditingFrame(TemplateEditingVerb verb);
    protected virtual void Dispose(bool disposing);
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual TemplateEditingVerb[] GetCachedTemplateEditingVerbs();
    public virtual string GetDesignTimeHtml();
    protected virtual string GetEmptyDesignTimeHtml();
    protected virtual string GetErrorDesignTimeHtml(Exception e);
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual string GetTemplateContainerDataItemProperty(string templateName);
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual string GetTemplateContent(ITemplateEditingFrame editingFrame, string templateName, Boolean& allowEditing);
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual Type GetTemplatePropertyParentType(string templateName);
    public virtual void OnColumnsChanged();
    protected virtual void OnTemplateEditingVerbsChanged();
    public virtual void Initialize(IComponent component);
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual void SetTemplateContent(ITemplateEditingFrame editingFrame, string templateName, string templateContent);
}
internal class System.Web.UI.Design.WebControls.DataListAutoFormat : BaseAutoFormat`1<DataList> {
    public DataListAutoFormat(string schemeName, string schemes);
    protected virtual void Apply(DataList list);
    public virtual Control GetPreviewControl(Control runtimeControl);
    protected virtual void Initialize(DataRow schemeData);
}
public class System.Web.UI.Design.WebControls.DataListComponentEditor : BaseDataListComponentEditor {
    internal static int IDX_GENERAL;
    internal static int IDX_FORMAT;
    internal static int IDX_BORDERS;
    public DataListComponentEditor(int initialPage);
    private static DataListComponentEditor();
    protected virtual Type[] GetComponentEditorPages();
}
[SupportsPreviewControlAttribute("True")]
public class System.Web.UI.Design.WebControls.DataListDesigner : BaseDataListDesigner {
    internal static TraceSwitch DataListDesignerSwitch;
    public bool AllowResize { get; }
    public DesignerAutoFormatCollection AutoFormats { get; }
    protected bool TemplatesExist { get; }
    private static DataListDesigner();
    public virtual bool get_AllowResize();
    public virtual DesignerAutoFormatCollection get_AutoFormats();
    protected bool get_TemplatesExist();
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual ITemplateEditingFrame CreateTemplateEditingFrame(TemplateEditingVerb verb);
    protected virtual void Dispose(bool disposing);
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual TemplateEditingVerb[] GetCachedTemplateEditingVerbs();
    public virtual string GetDesignTimeHtml();
    protected virtual string GetEmptyDesignTimeHtml();
    protected virtual string GetErrorDesignTimeHtml(Exception e);
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual string GetTemplateContainerDataItemProperty(string templateName);
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual string GetTemplateContent(ITemplateEditingFrame editingFrame, string templateName, Boolean& allowEditing);
    public virtual void Initialize(IComponent component);
    protected virtual void OnSchemaRefreshed();
    protected virtual void OnTemplateEditingVerbsChanged();
    [ObsoleteAttribute("Use of this method is not recommended because template editing is handled in ControlDesigner. To support template editing expose template data in the TemplateGroups property and call SetViewFlags(ViewFlags.TemplateEditing, true). http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual void SetTemplateContent(ITemplateEditingFrame editingFrame, string templateName, string templateContent);
}
public class System.Web.UI.Design.WebControls.DataProviderNameConverter : StringConverter {
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.Web.UI.Design.WebControls.DataSourceIDConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    protected virtual bool IsValidDataSource(IComponent component);
}
internal class System.Web.UI.Design.WebControls.DesignTimeSiteMapProvider : DesignTimeSiteMapProviderBase {
    public SiteMapNode CurrentNode { get; }
    public SiteMapNode RootNode { get; }
    internal IDictionary UrlTable { get; }
    internal DesignTimeSiteMapProvider(IDesignerHost host);
    private static DesignTimeSiteMapProvider();
    public virtual SiteMapNode get_CurrentNode();
    public virtual SiteMapNode get_RootNode();
    internal IDictionary get_UrlTable();
    public virtual SiteMapNode BuildSiteMap();
    public virtual bool IsAccessibleToUser(HttpContext context, SiteMapNode node);
}
internal class System.Web.UI.Design.WebControls.DesignTimeSiteMapProviderBase : StaticSiteMapProvider {
    protected IDesignerHost _host;
    public SiteMapNode CurrentNode { get; }
    internal string DocumentAppRelativeUrl { get; }
    internal DesignTimeSiteMapProviderBase(IDesignerHost host);
    private static DesignTimeSiteMapProviderBase();
    public virtual SiteMapNode get_CurrentNode();
    internal string get_DocumentAppRelativeUrl();
    protected internal virtual SiteMapNode GetRootNodeCore();
    public virtual SiteMapNode BuildSiteMap();
}
internal class System.Web.UI.Design.WebControls.DetailsViewActionList : DesignerActionList {
    internal bool AllowDeleting { get; internal set; }
    internal bool AllowEditing { get; internal set; }
    internal bool AllowInserting { get; internal set; }
    internal bool AllowMoveDown { get; internal set; }
    internal bool AllowMoveUp { get; internal set; }
    internal bool AllowPaging { get; internal set; }
    internal bool AllowRemoveField { get; internal set; }
    public bool AutoShow { get; public set; }
    public bool EnableDeleting { get; public set; }
    public bool EnableEditing { get; public set; }
    public bool EnableInserting { get; public set; }
    public bool EnablePaging { get; public set; }
    public DetailsViewActionList(DetailsViewDesigner detailsViewDesigner);
    internal bool get_AllowDeleting();
    internal void set_AllowDeleting(bool value);
    internal bool get_AllowEditing();
    internal void set_AllowEditing(bool value);
    internal bool get_AllowInserting();
    internal void set_AllowInserting(bool value);
    internal bool get_AllowMoveDown();
    internal void set_AllowMoveDown(bool value);
    internal bool get_AllowMoveUp();
    internal void set_AllowMoveUp(bool value);
    internal bool get_AllowPaging();
    internal void set_AllowPaging(bool value);
    internal bool get_AllowRemoveField();
    internal void set_AllowRemoveField(bool value);
    public virtual bool get_AutoShow();
    public virtual void set_AutoShow(bool value);
    public bool get_EnableDeleting();
    public void set_EnableDeleting(bool value);
    public bool get_EnableEditing();
    public void set_EnableEditing(bool value);
    public bool get_EnableInserting();
    public void set_EnableInserting(bool value);
    public bool get_EnablePaging();
    public void set_EnablePaging(bool value);
    public void AddNewField();
    public void EditFields();
    public void MoveFieldUp();
    public void MoveFieldDown();
    public void RemoveField();
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
internal class System.Web.UI.Design.WebControls.DetailsViewAutoFormat : BaseAutoFormat`1<DetailsView> {
    public DetailsViewAutoFormat(string schemeName, string schemes);
    protected virtual void Apply(DetailsView view);
    protected virtual void Initialize(DataRow schemeData);
}
public class System.Web.UI.Design.WebControls.DetailsViewDesigner : DataBoundControlDesigner {
    internal bool _ignoreSchemaRefreshedEvent;
    public DesignerActionListCollection ActionLists { get; }
    public DesignerAutoFormatCollection AutoFormats { get; }
    internal bool EnableDeleting { get; internal set; }
    internal bool EnableEditing { get; internal set; }
    internal bool EnableInserting { get; internal set; }
    internal bool EnablePaging { get; internal set; }
    protected int SampleRowCount { get; }
    public TemplateGroupCollection TemplateGroups { get; }
    protected bool UsePreviewControl { get; }
    private static DetailsViewDesigner();
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual DesignerAutoFormatCollection get_AutoFormats();
    internal bool get_EnableDeleting();
    internal void set_EnableDeleting(bool value);
    internal bool get_EnableEditing();
    internal void set_EnableEditing(bool value);
    internal bool get_EnableInserting();
    internal void set_EnableInserting(bool value);
    internal bool get_EnablePaging();
    internal void set_EnablePaging(bool value);
    protected virtual int get_SampleRowCount();
    public virtual TemplateGroupCollection get_TemplateGroups();
    protected virtual bool get_UsePreviewControl();
    internal void AddNewField();
    protected virtual void DataBind(BaseDataBoundControl dataBoundControl);
    internal void EditFields();
    public virtual string GetDesignTimeHtml();
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
    public virtual string GetEditableDesignerRegionContent(EditableDesignerRegion region);
    public virtual void Initialize(IComponent component);
    internal void MoveDown();
    internal void MoveUp();
    protected virtual void OnClick(DesignerRegionMouseEventArgs e);
    protected virtual void OnSchemaRefreshed();
    protected virtual void PreFilterProperties(IDictionary properties);
    internal void RemoveField();
    public virtual void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content);
}
public class System.Web.UI.Design.WebControls.EmbeddedMailObjectCollectionEditor : CollectionEditor {
    public EmbeddedMailObjectCollectionEditor(Type type);
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
}
internal class System.Web.UI.Design.WebControls.FormViewActionList : DesignerActionList {
    internal bool AllowDynamicData { get; internal set; }
    internal bool AllowPaging { get; internal set; }
    public bool AutoShow { get; public set; }
    public bool EnableDynamicData { get; public set; }
    public bool EnablePaging { get; public set; }
    public FormViewActionList(FormViewDesigner formViewDesigner);
    internal bool get_AllowDynamicData();
    internal void set_AllowDynamicData(bool value);
    internal bool get_AllowPaging();
    internal void set_AllowPaging(bool value);
    public virtual bool get_AutoShow();
    public virtual void set_AutoShow(bool value);
    public bool get_EnableDynamicData();
    public void set_EnableDynamicData(bool value);
    public bool get_EnablePaging();
    public void set_EnablePaging(bool value);
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
internal class System.Web.UI.Design.WebControls.FormViewAutoFormat : BaseAutoFormat`1<FormView> {
    public FormViewAutoFormat(string schemeName, string schemes);
    protected virtual void Apply(FormView view);
    public virtual Control GetPreviewControl(Control runtimeControl);
    protected virtual void Initialize(DataRow schemeData);
}
public class System.Web.UI.Design.WebControls.FormViewDesigner : DataBoundControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public DesignerAutoFormatCollection AutoFormats { get; }
    internal bool EnableDynamicData { get; internal set; }
    internal bool EnablePaging { get; internal set; }
    public bool RenderOuterTable { get; public set; }
    protected int SampleRowCount { get; }
    public TemplateGroupCollection TemplateGroups { get; }
    protected bool UsePreviewControl { get; }
    private static FormViewDesigner();
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual DesignerAutoFormatCollection get_AutoFormats();
    internal bool get_EnableDynamicData();
    internal void set_EnableDynamicData(bool value);
    internal bool get_EnablePaging();
    internal void set_EnablePaging(bool value);
    public bool get_RenderOuterTable();
    public void set_RenderOuterTable(bool value);
    protected virtual int get_SampleRowCount();
    public virtual TemplateGroupCollection get_TemplateGroups();
    protected virtual bool get_UsePreviewControl();
    public virtual string GetDesignTimeHtml();
    protected virtual string GetEmptyDesignTimeHtml();
    public virtual void Initialize(IComponent component);
    protected virtual void OnSchemaRefreshed();
    protected virtual void PreFilterProperties(IDictionary properties);
}
internal class System.Web.UI.Design.WebControls.GridViewActionList : DesignerActionList {
    internal bool AllowDeleting { get; internal set; }
    internal bool AllowEditing { get; internal set; }
    internal bool AllowMoveLeft { get; internal set; }
    internal bool AllowMoveRight { get; internal set; }
    internal bool AllowPaging { get; internal set; }
    internal bool AllowRemoveField { get; internal set; }
    internal bool AllowSelection { get; internal set; }
    internal bool AllowSorting { get; internal set; }
    public bool AutoShow { get; public set; }
    public bool EnableDeleting { get; public set; }
    public bool EnableEditing { get; public set; }
    public bool EnablePaging { get; public set; }
    public bool EnableSelection { get; public set; }
    public bool EnableSorting { get; public set; }
    public GridViewActionList(GridViewDesigner gridViewDesigner);
    internal bool get_AllowDeleting();
    internal void set_AllowDeleting(bool value);
    internal bool get_AllowEditing();
    internal void set_AllowEditing(bool value);
    internal bool get_AllowMoveLeft();
    internal void set_AllowMoveLeft(bool value);
    internal bool get_AllowMoveRight();
    internal void set_AllowMoveRight(bool value);
    internal bool get_AllowPaging();
    internal void set_AllowPaging(bool value);
    internal bool get_AllowRemoveField();
    internal void set_AllowRemoveField(bool value);
    internal bool get_AllowSelection();
    internal void set_AllowSelection(bool value);
    internal bool get_AllowSorting();
    internal void set_AllowSorting(bool value);
    public virtual bool get_AutoShow();
    public virtual void set_AutoShow(bool value);
    public bool get_EnableDeleting();
    public void set_EnableDeleting(bool value);
    public bool get_EnableEditing();
    public void set_EnableEditing(bool value);
    public bool get_EnablePaging();
    public void set_EnablePaging(bool value);
    public bool get_EnableSelection();
    public void set_EnableSelection(bool value);
    public bool get_EnableSorting();
    public void set_EnableSorting(bool value);
    public void AddNewField();
    public void EditFields();
    public void MoveFieldLeft();
    public void MoveFieldRight();
    public void RemoveField();
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
internal class System.Web.UI.Design.WebControls.GridViewAutoFormat : BaseAutoFormat`1<GridView> {
    public GridViewAutoFormat(string schemeName, string schemes);
    protected virtual void Apply(GridView grid);
    protected virtual void Initialize(DataRow schemeData);
}
public class System.Web.UI.Design.WebControls.GridViewDesigner : DataBoundControlDesigner {
    internal bool _ignoreSchemaRefreshedEvent;
    public DesignerActionListCollection ActionLists { get; }
    public DesignerAutoFormatCollection AutoFormats { get; }
    internal bool EnableDeleting { get; internal set; }
    internal bool EnableEditing { get; internal set; }
    internal bool EnablePaging { get; internal set; }
    internal bool EnableSelection { get; internal set; }
    internal bool EnableSorting { get; internal set; }
    protected int SampleRowCount { get; }
    public TemplateGroupCollection TemplateGroups { get; }
    protected bool UsePreviewControl { get; }
    private static GridViewDesigner();
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual DesignerAutoFormatCollection get_AutoFormats();
    internal bool get_EnableDeleting();
    internal void set_EnableDeleting(bool value);
    internal bool get_EnableEditing();
    internal void set_EnableEditing(bool value);
    internal bool get_EnablePaging();
    internal void set_EnablePaging(bool value);
    internal bool get_EnableSelection();
    internal void set_EnableSelection(bool value);
    internal bool get_EnableSorting();
    internal void set_EnableSorting(bool value);
    protected virtual int get_SampleRowCount();
    public virtual TemplateGroupCollection get_TemplateGroups();
    protected virtual bool get_UsePreviewControl();
    internal void AddNewField();
    protected virtual void DataBind(BaseDataBoundControl dataBoundControl);
    internal void EditFields();
    public virtual string GetDesignTimeHtml();
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
    public virtual string GetEditableDesignerRegionContent(EditableDesignerRegion region);
    public virtual void Initialize(IComponent component);
    internal void MoveLeft();
    internal void MoveRight();
    protected virtual void OnClick(DesignerRegionMouseEventArgs e);
    protected virtual void OnSchemaRefreshed();
    protected virtual void PreFilterProperties(IDictionary properties);
    internal void RemoveField();
    public virtual void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content);
}
public class System.Web.UI.Design.WebControls.HiddenFieldDesigner : ControlDesigner {
    public virtual string GetDesignTimeHtml();
    public virtual void Initialize(IComponent component);
}
internal class System.Web.UI.Design.WebControls.HierarchicalDataBoundControlActionList : DesignerActionList {
    public bool AutoShow { get; public set; }
    [TypeConverterAttribute("System.Web.UI.Design.WebControls.HierarchicalDataSourceIDConverter")]
public string DataSourceID { get; public set; }
    public HierarchicalDataBoundControlActionList(HierarchicalDataBoundControlDesigner controlDesigner, IHierarchicalDataSourceDesigner dataSourceDesigner);
    public virtual bool get_AutoShow();
    public virtual void set_AutoShow(bool value);
    public string get_DataSourceID();
    public void set_DataSourceID(string value);
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
public class System.Web.UI.Design.WebControls.HierarchicalDataBoundControlDesigner : BaseDataBoundControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public IHierarchicalDataSourceDesigner DataSourceDesigner { get; }
    public DesignerHierarchicalDataSourceView DesignerView { get; }
    protected bool UseDataSourcePickerActionList { get; }
    public virtual DesignerActionListCollection get_ActionLists();
    public IHierarchicalDataSourceDesigner get_DataSourceDesigner();
    public DesignerHierarchicalDataSourceView get_DesignerView();
    protected virtual bool get_UseDataSourcePickerActionList();
    protected virtual bool ConnectToDataSource();
    protected virtual void CreateDataSource();
    protected virtual void DataBind(BaseDataBoundControl dataBoundControl);
    protected virtual void DisconnectFromDataSource();
    protected virtual IHierarchicalEnumerable GetDesignTimeDataSource();
    protected virtual IHierarchicalEnumerable GetSampleDataSource();
    protected virtual void PreFilterProperties(IDictionary properties);
}
public class System.Web.UI.Design.WebControls.HierarchicalDataSourceIDConverter : DataSourceIDConverter {
    protected virtual bool IsValidDataSource(IComponent component);
}
public class System.Web.UI.Design.WebControls.HotSpotCollectionEditor : CollectionEditor {
    protected string HelpTopic { get; }
    public HotSpotCollectionEditor(Type type);
    protected virtual bool CanSelectMultipleInstances();
    protected virtual Type[] CreateNewItemTypes();
    protected virtual string get_HelpTopic();
}
[SupportsPreviewControlAttribute("True")]
public class System.Web.UI.Design.WebControls.HyperLinkDesigner : TextControlDesigner {
    public virtual string GetDesignTimeHtml();
    public virtual void OnComponentChanged(object sender, ComponentChangedEventArgs ce);
}
internal interface System.Web.UI.Design.WebControls.IWizardStepEditableRegion {
    public WizardStepBase Step { get; }
    public abstract virtual WizardStepBase get_Step();
}
[SupportsPreviewControlAttribute("True")]
public class System.Web.UI.Design.WebControls.LabelDesigner : TextControlDesigner {
    public virtual void OnComponentChanged(object sender, ComponentChangedEventArgs ce);
}
[SupportsPreviewControlAttribute("True")]
public class System.Web.UI.Design.WebControls.LinkButtonDesigner : TextControlDesigner {
}
internal class System.Web.UI.Design.WebControls.ListControlActionList : DesignerActionList {
    public bool AutoPostBack { get; public set; }
    public bool AutoShow { get; public set; }
    public ListControlActionList(ListControlDesigner listControlDesigner, IDataSourceDesigner dataSourceDesigner);
    public bool get_AutoPostBack();
    public void set_AutoPostBack(bool value);
    public virtual bool get_AutoShow();
    public virtual void set_AutoShow(bool value);
    public void EditItems();
    public void ConnectToDataSource();
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
internal class System.Web.UI.Design.WebControls.ListControlConnectToDataSourceDialog : TaskForm {
    protected string HelpTopic { get; }
    public ListControlConnectToDataSourceDialog(ListControlDesigner controlDesigner);
    protected virtual string get_HelpTopic();
    protected virtual void OnCancelButtonClick(object sender, EventArgs e);
    protected virtual void OnClosed(EventArgs e);
    protected virtual void OnOKButtonClick(object sender, EventArgs e);
}
public class System.Web.UI.Design.WebControls.ListControlDataBindingHandler : DataBindingHandler {
    public virtual void DataBindControl(IDesignerHost designerHost, Control control);
}
[SupportsPreviewControlAttribute("True")]
public class System.Web.UI.Design.WebControls.ListControlDesigner : DataBoundControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public string DataValueField { get; public set; }
    public string DataTextField { get; public set; }
    protected bool UseDataSourcePickerActionList { get; }
    public virtual DesignerActionListCollection get_ActionLists();
    public string get_DataValueField();
    public void set_DataValueField(string value);
    public string get_DataTextField();
    public void set_DataTextField(string value);
    protected virtual bool get_UseDataSourcePickerActionList();
    internal void ConnectToDataSourceAction();
    protected virtual void DataBind(BaseDataBoundControl dataBoundControl);
    internal void EditItems();
    public virtual string GetDesignTimeHtml();
    public IEnumerable GetResolvedSelectedDataSource();
    public object GetSelectedDataSource();
    public virtual void Initialize(IComponent component);
    public virtual void OnDataSourceChanged();
    protected virtual void OnDataSourceChanged(bool forceUpdateView);
    protected virtual void PreFilterProperties(IDictionary properties);
}
internal abstract class System.Web.UI.Design.WebControls.ListControls.BaseDataListPage : ComponentEditorPage {
    protected string HelpKeyword { get; }
    protected bool IsDataGridMode { get; }
    protected abstract virtual string get_HelpKeyword();
    protected bool get_IsDataGridMode();
    protected BaseDataList GetBaseControl();
    protected BaseDataListDesigner GetBaseDesigner();
    public virtual void SetComponent(IComponent component);
    public virtual void ShowHelp();
    public virtual bool SupportsHelp();
}
internal class System.Web.UI.Design.WebControls.ListControls.BordersPage : BaseDataListPage {
    protected string HelpKeyword { get; }
    protected virtual string get_HelpKeyword();
    protected virtual void LoadComponent();
    protected virtual void SaveComponent();
    public virtual void SetComponent(IComponent component);
}
internal class System.Web.UI.Design.WebControls.ListControls.DataGridColumnsPage : BaseDataListPage {
    protected string HelpKeyword { get; }
    protected virtual string get_HelpKeyword();
    protected virtual void LoadComponent();
    protected virtual void SaveComponent();
    public virtual void SetComponent(IComponent component);
}
internal class System.Web.UI.Design.WebControls.ListControls.DataGridGeneralPage : BaseDataListPage {
    protected string HelpKeyword { get; }
    protected virtual string get_HelpKeyword();
    protected virtual void LoadComponent();
    protected virtual void SaveComponent();
    public virtual void SetComponent(IComponent component);
}
internal class System.Web.UI.Design.WebControls.ListControls.DataGridPagingPage : BaseDataListPage {
    protected string HelpKeyword { get; }
    protected virtual string get_HelpKeyword();
    protected virtual void LoadComponent();
    protected virtual void SaveComponent();
    public virtual void SetComponent(IComponent component);
}
internal class System.Web.UI.Design.WebControls.ListControls.DataListGeneralPage : BaseDataListPage {
    protected string HelpKeyword { get; }
    protected virtual string get_HelpKeyword();
    protected virtual void LoadComponent();
    protected virtual void SaveComponent();
    public virtual void SetComponent(IComponent component);
}
internal class System.Web.UI.Design.WebControls.ListControls.FormatPage : BaseDataListPage {
    protected string HelpKeyword { get; }
    protected virtual string get_HelpKeyword();
    protected virtual void LoadComponent();
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void SaveComponent();
    public virtual void SetComponent(IComponent component);
}
public class System.Web.UI.Design.WebControls.ListItemsCollectionEditor : CollectionEditor {
    protected string HelpTopic { get; }
    public ListItemsCollectionEditor(Type type);
    protected virtual bool CanSelectMultipleInstances();
    protected virtual string get_HelpTopic();
}
[SupportsPreviewControlAttribute("True")]
public class System.Web.UI.Design.WebControls.LiteralDesigner : ControlDesigner {
    public virtual void OnComponentChanged(object sender, ComponentChangedEventArgs ce);
}
[SupportsPreviewControlAttribute("True")]
internal class System.Web.UI.Design.WebControls.LocalizeDesigner : LiteralDesigner {
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
    public virtual string GetEditableDesignerRegionContent(EditableDesignerRegion region);
    public virtual void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content);
    protected virtual void PostFilterProperties(IDictionary properties);
}
internal class System.Web.UI.Design.WebControls.LoginAutoFormat : BaseAutoFormat`1<Login> {
    public LoginAutoFormat(string schemeName, string schemes);
    protected virtual void Apply(Login login);
    protected virtual void Initialize(DataRow schemeData);
}
public class System.Web.UI.Design.WebControls.LoginDesigner : CompositeControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public bool AllowResize { get; }
    public bool RenderOuterTable { get; public set; }
    public DesignerAutoFormatCollection AutoFormats { get; }
    public TemplateGroupCollection TemplateGroups { get; }
    protected bool UsePreviewControl { get; }
    private static LoginDesigner();
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual bool get_AllowResize();
    public bool get_RenderOuterTable();
    public void set_RenderOuterTable(bool value);
    public virtual DesignerAutoFormatCollection get_AutoFormats();
    public virtual TemplateGroupCollection get_TemplateGroups();
    protected virtual bool get_UsePreviewControl();
    protected virtual string GetErrorDesignTimeHtml(Exception e);
    public virtual void Initialize(IComponent component);
    protected virtual void PreFilterProperties(IDictionary properties);
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
    public virtual string GetEditableDesignerRegionContent(EditableDesignerRegion region);
    public virtual void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content);
}
internal static class System.Web.UI.Design.WebControls.LoginDesignerUtil : object {
}
public class System.Web.UI.Design.WebControls.LoginNameDesigner : ControlDesigner {
    protected bool UsePreviewControl { get; }
    protected virtual bool get_UsePreviewControl();
    protected virtual string GetErrorDesignTimeHtml(Exception e);
}
public class System.Web.UI.Design.WebControls.LoginStatusDesigner : CompositeControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    protected bool UsePreviewControl { get; }
    public virtual DesignerActionListCollection get_ActionLists();
    protected virtual bool get_UsePreviewControl();
    public virtual string GetDesignTimeHtml();
    public virtual void Initialize(IComponent component);
}
public class System.Web.UI.Design.WebControls.LoginViewDesigner : ControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public TemplateGroupCollection TemplateGroups { get; }
    protected bool UsePreviewControl { get; }
    private static LoginViewDesigner();
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual TemplateGroupCollection get_TemplateGroups();
    protected virtual bool get_UsePreviewControl();
    public virtual string GetDesignTimeHtml();
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
    public virtual string GetEditableDesignerRegionContent(EditableDesignerRegion region);
    protected virtual string GetEmptyDesignTimeHtml();
    protected virtual string GetErrorDesignTimeHtml(Exception e);
    public virtual void Initialize(IComponent component);
    public virtual void OnComponentChanged(object sender, ComponentChangedEventArgs e);
    protected virtual void PreFilterProperties(IDictionary properties);
    public virtual void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content);
}
public class System.Web.UI.Design.WebControls.MailDefinitionBodyFileNameEditor : UrlEditor {
    protected string Caption { get; }
    protected string Filter { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
}
internal class System.Web.UI.Design.WebControls.MenuAutoFormat : ReflectionBasedAutoFormat {
    public MenuAutoFormat(string schemeName, string schemes);
}
public class System.Web.UI.Design.WebControls.MenuBindingsEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Web.UI.Design.WebControls.MenuBindingsEditorForm : DesignerForm {
    protected string HelpTopic { get; }
    public MenuBindingsEditorForm(IServiceProvider serviceProvider, Menu menu, MenuDesigner menuDesigner);
    protected virtual void Dispose(bool disposing);
    protected virtual string get_HelpTopic();
    protected virtual void OnInitialActivated(EventArgs e);
}
public class System.Web.UI.Design.WebControls.MenuDesigner : HierarchicalDataBoundControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public DesignerAutoFormatCollection AutoFormats { get; }
    public TemplateGroupCollection TemplateGroups { get; }
    protected bool UsePreviewControl { get; }
    private bool System.Web.UI.Design.IDataBindingSchemaProvider.CanRefreshSchema { get; }
    protected bool CanRefreshSchema { get; }
    private IDataSourceViewSchema System.Web.UI.Design.IDataBindingSchemaProvider.Schema { get; }
    protected IDataSourceViewSchema Schema { get; }
    private static MenuDesigner();
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual DesignerAutoFormatCollection get_AutoFormats();
    public virtual TemplateGroupCollection get_TemplateGroups();
    protected virtual bool get_UsePreviewControl();
    protected virtual void DataBind(BaseDataBoundControl dataBoundControl);
    public virtual string GetDesignTimeHtml();
    protected virtual string GetEmptyDesignTimeHtml();
    protected virtual string GetErrorDesignTimeHtml(Exception e);
    protected virtual IHierarchicalEnumerable GetSampleDataSource();
    public virtual void Initialize(IComponent component);
    internal void InvokeMenuBindingsEditor();
    internal void InvokeMenuItemCollectionEditor();
    private sealed virtual override bool System.Web.UI.Design.IDataBindingSchemaProvider.get_CanRefreshSchema();
    protected bool get_CanRefreshSchema();
    private sealed virtual override IDataSourceViewSchema System.Web.UI.Design.IDataBindingSchemaProvider.get_Schema();
    protected IDataSourceViewSchema get_Schema();
    protected void RefreshSchema(bool preferSilent);
    private sealed virtual override void System.Web.UI.Design.IDataBindingSchemaProvider.RefreshSchema(bool preferSilent);
}
public class System.Web.UI.Design.WebControls.MenuItemCollectionEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Web.UI.Design.WebControls.MenuItemCollectionEditorDialog : CollectionEditorDialog {
    protected string HelpTopic { get; }
    public MenuItemCollectionEditorDialog(Menu menu, MenuDesigner menuDesigner);
    protected virtual string get_HelpTopic();
    protected virtual void OnInitialActivated(EventArgs e);
}
public class System.Web.UI.Design.WebControls.MenuItemStyleCollectionEditor : CollectionEditor {
    public MenuItemStyleCollectionEditor(Type type);
    protected virtual bool CanSelectMultipleInstances();
    protected virtual CollectionForm CreateCollectionForm();
    protected virtual object CreateInstance(Type itemType);
    protected virtual Type[] CreateNewItemTypes();
}
public class System.Web.UI.Design.WebControls.MultiViewDesigner : ContainerControlDesigner {
    protected bool NoWrap { get; }
    protected virtual bool get_NoWrap();
}
internal class System.Web.UI.Design.WebControls.ObjectDataSourceChooseMethodsPanel : WizardPanel {
    public ObjectDataSourceChooseMethodsPanel(ObjectDataSourceDesigner objectDataSourceDesigner);
    protected internal virtual void OnComplete();
    public virtual bool OnNext();
    public virtual void OnPrevious();
    protected virtual void OnVisibleChanged(EventArgs e);
    public void SetType(Type type);
}
internal class System.Web.UI.Design.WebControls.ObjectDataSourceChooseTypePanel : WizardPanel {
    public ObjectDataSourceChooseTypePanel(ObjectDataSourceDesigner objectDataSourceDesigner);
    protected internal virtual void OnComplete();
    public virtual bool OnNext();
    public virtual void OnPrevious();
    protected virtual void OnVisibleChanged(EventArgs e);
}
internal class System.Web.UI.Design.WebControls.ObjectDataSourceConfigureParametersPanel : WizardPanel {
    public ObjectDataSourceConfigureParametersPanel(ObjectDataSourceDesigner objectDataSourceDesigner);
    public void InitializeParameters(ParameterCollection selectParameters);
    protected internal virtual void OnComplete();
    public virtual bool OnNext();
    public virtual void OnPrevious();
    protected virtual void OnVisibleChanged(EventArgs e);
    public void ResetUI();
    public void SetMethod(MethodInfo selectMethodInfo);
}
public class System.Web.UI.Design.WebControls.ObjectDataSourceDesigner : DataSourceDesigner {
    internal static BindingFlags MethodFilter;
    internal Type SelectMethodReturnType { get; }
    public bool CanConfigure { get; }
    public bool CanRefreshSchema { get; }
    internal object ShowOnlyDataComponentsState { get; internal set; }
    internal ObjectDataSource ObjectDataSource { get; }
    public string SelectMethod { get; public set; }
    public string TypeName { get; public set; }
    internal Type get_SelectMethodReturnType();
    public virtual bool get_CanConfigure();
    public virtual bool get_CanRefreshSchema();
    internal object get_ShowOnlyDataComponentsState();
    internal void set_ShowOnlyDataComponentsState(object value);
    internal ObjectDataSource get_ObjectDataSource();
    public string get_SelectMethod();
    public void set_SelectMethod(string value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public virtual void Configure();
    internal static Type GetType(IServiceProvider serviceProvider, string typeName, bool silent);
    public virtual DesignerDataSourceView GetView(string viewName);
    public virtual String[] GetViewNames();
    internal static bool IsMatchingMethod(MethodInfo method, string methodName, ParameterCollection parameters, Type dataObjectType);
    internal DataTable[] LoadSchema();
    internal static Parameter[] MergeParameters(Parameter[] parameters, MethodInfo methodInfo);
    internal static void MergeParameters(ParameterCollection parameters, MethodInfo methodInfo, Type dataObjectType);
    protected virtual void PreFilterProperties(IDictionary properties);
    public virtual void RefreshSchema(bool preferSilent);
    internal void RefreshSchema(Type objectType, string methodName, Type schemaType, bool preferSilent);
    internal static void SetParameterType(Parameter parameter, Type type);
}
internal class System.Web.UI.Design.WebControls.ObjectDataSourceMethodEditor : UserControl {
    public MethodInfo MethodInfo { get; }
    public Type DataObjectType { get; }
    private static ObjectDataSourceMethodEditor();
    public MethodInfo get_MethodInfo();
    public Type get_DataObjectType();
    public void add_MethodChanged(EventHandler value);
    public void remove_MethodChanged(EventHandler value);
    internal static void AppendTypeName(Type t, bool topLevelFullName, StringBuilder sb);
    internal static string GetMethodSignature(MethodInfo mi);
    public void SetMethodInformation(MethodInfo[] methods, string selectedMethodName, ParameterCollection selectedParameters, DataObjectMethodType methodType, Type dataObjectType);
}
internal class System.Web.UI.Design.WebControls.ObjectDataSourceWizardForm : WizardForm {
    protected string HelpTopic { get; }
    public ObjectDataSourceWizardForm(IServiceProvider serviceProvider, ObjectDataSourceDesigner objectDataSourceDesigner);
    protected virtual string get_HelpTopic();
    internal ObjectDataSourceConfigureParametersPanel GetParametersPanel();
}
public class System.Web.UI.Design.WebControls.ObjectDesignerDataSourceView : DesignerDataSourceView {
    public bool CanDelete { get; }
    public bool CanInsert { get; }
    public bool CanPage { get; }
    public bool CanRetrieveTotalRowCount { get; }
    public bool CanSort { get; }
    public bool CanUpdate { get; }
    public IDataSourceViewSchema Schema { get; }
    public ObjectDesignerDataSourceView(ObjectDataSourceDesigner owner, string viewName);
    public virtual bool get_CanDelete();
    public virtual bool get_CanInsert();
    public virtual bool get_CanPage();
    public virtual bool get_CanRetrieveTotalRowCount();
    public virtual bool get_CanSort();
    public virtual bool get_CanUpdate();
    public virtual IDataSourceViewSchema get_Schema();
    public virtual IEnumerable GetDesignTimeData(int minimumRows, Boolean& isSampleData);
}
public class System.Web.UI.Design.WebControls.PanelContainerDesigner : ContainerControlDesigner {
    internal string DesignTimeHtml { get; }
    public string FrameCaption { get; }
    public Style FrameStyle { get; }
    protected bool UsePreviewControl { get; }
    internal virtual string get_DesignTimeHtml();
    public virtual string get_FrameCaption();
    public virtual Style get_FrameStyle();
    protected virtual void AddDesignTimeCssAttributes(IDictionary styleAttributes);
    protected virtual bool get_UsePreviewControl();
    public virtual void Initialize(IComponent component);
}
[ObsoleteAttribute("The recommended alternative is PanelContainerDesigner because it uses an EditableDesignerRegion for editing the content. Designer regions allow for better control of the content being edited. http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.Web.UI.Design.WebControls.PanelDesigner : ReadWriteControlDesigner {
    protected virtual void MapPropertyToStyle(string propName, object varPropValue);
    [ObsoleteAttribute("The recommended alternative is ControlDesigner.Tag. http://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual void OnBehaviorAttached();
}
public class System.Web.UI.Design.WebControls.ParameterCollectionEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Web.UI.Design.WebControls.ParameterCollectionEditorForm : DesignerForm {
    protected string HelpTopic { get; }
    public ParameterCollectionEditorForm(IServiceProvider serviceProvider, ParameterCollection parameters, ControlDesigner designer);
    protected virtual string get_HelpTopic();
}
public class System.Web.UI.Design.WebControls.ParameterEditorUserControl : UserControl {
    public bool ParametersConfigured { get; }
    public TypeDescriptionProvider TypeDescriptionProvider { get; }
    public ParameterEditorUserControl(IServiceProvider serviceProvider);
    internal ParameterEditorUserControl(IServiceProvider serviceProvider, Control control);
    internal ParameterEditorUserControl(IServiceProvider serviceProvider, Control control, TypeDescriptionProvider provider);
    private static ParameterEditorUserControl();
    public bool get_ParametersConfigured();
    public void add_ParametersChanged(EventHandler value);
    public void remove_ParametersChanged(EventHandler value);
    public TypeDescriptionProvider get_TypeDescriptionProvider();
    internal ListDictionary CreateParameterList();
    public void AddParameters(Parameter[] parameters);
    public void ClearParameters();
    internal static string GetControlDefaultValuePropertyName(string controlID, IServiceProvider serviceProvider, Control control);
    internal static string GetParameterExpression(IServiceProvider serviceProvider, Parameter p, Control control, Boolean& isHelperText);
    public Parameter[] GetParameters();
    protected virtual void OnParametersChanged(object sender, EventArgs e);
    public void SetAllowCollectionChanges(bool allowChanges);
}
internal class System.Web.UI.Design.WebControls.PasswordRecoveryAutoFormat : BaseAutoFormat`1<PasswordRecovery> {
    public PasswordRecoveryAutoFormat(string schemeName, string schemes);
    protected virtual void Apply(PasswordRecovery passwordRecovery);
    protected virtual void Initialize(DataRow schemeData);
}
public class System.Web.UI.Design.WebControls.PasswordRecoveryDesigner : ControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public bool AllowResize { get; }
    public DesignerAutoFormatCollection AutoFormats { get; }
    public bool RenderOuterTable { get; public set; }
    public TemplateGroupCollection TemplateGroups { get; }
    protected bool UsePreviewControl { get; }
    private static PasswordRecoveryDesigner();
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual bool get_AllowResize();
    public virtual DesignerAutoFormatCollection get_AutoFormats();
    public bool get_RenderOuterTable();
    public void set_RenderOuterTable(bool value);
    public virtual TemplateGroupCollection get_TemplateGroups();
    protected virtual bool get_UsePreviewControl();
    public virtual string GetDesignTimeHtml();
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
    protected virtual string GetErrorDesignTimeHtml(Exception e);
    public virtual void Initialize(IComponent component);
    protected virtual void PreFilterProperties(IDictionary properties);
    public virtual string GetEditableDesignerRegionContent(EditableDesignerRegion region);
    public virtual void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content);
}
[SupportsPreviewControlAttribute("True")]
public class System.Web.UI.Design.WebControls.PreviewControlDesigner : ControlDesigner {
    protected bool UsePreviewControl { get; }
    protected virtual bool get_UsePreviewControl();
}
internal class System.Web.UI.Design.WebControls.ReflectionBasedAutoFormat : DesignerAutoFormat {
    public ReflectionBasedAutoFormat(string schemeName, string schemes);
    public virtual void Apply(Control control);
    protected void SetPropertyValue(Control control, string propertyName, string propertyValue);
}
[ToolboxItemAttribute("False")]
public class System.Web.UI.Design.WebControls.RegexEditorDialog : Form {
    public string RegularExpression { get; public set; }
    public RegexEditorDialog(ISite site);
    private static RegexEditorDialog();
    public string get_RegularExpression();
    public void set_RegularExpression(string value);
    protected virtual void Dispose(bool disposing);
    protected void txtExpression_TextChanged(object sender, EventArgs e);
    protected void lstStandardExpressions_SelectedIndexChanged(object sender, EventArgs e);
    protected void RegexTypeEditor_Activated(object sender, EventArgs e);
    protected void cmdTestValidate_Click(object sender, EventArgs args);
    protected void cmdHelp_Click(object sender, EventArgs e);
    protected void cmdOK_Click(object sender, EventArgs e);
}
public class System.Web.UI.Design.WebControls.RegexTypeEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal static class System.Web.UI.Design.WebControls.RenderOuterTableHelper : object {
    internal static String[] fontStyleProperties;
    internal static String[] formViewStylePropertiesOnOuterTable;
    internal static String[] loginStylePropertiesOnOuterTable;
    private static RenderOuterTableHelper();
    internal static bool IsAnyPropertyOnOuterTableChanged(IComponent component, bool isFormView);
    internal static void SetRenderOuterTable(bool value, ControlDesigner designer, bool isFormView);
    internal static void SetupRenderOuterTable(IDictionary properties, IComponent component, bool useFormViewStyleProperties, Type designerType);
}
public class System.Web.UI.Design.WebControls.RepeaterDesigner : ControlDesigner {
    internal static TraceSwitch RepeaterDesignerSwitch;
    public DesignerActionListCollection ActionLists { get; }
    public string DataMember { get; public set; }
    public string DataSource { get; public set; }
    public IDataSourceDesigner DataSourceDesigner { get; }
    public string DataSourceID { get; public set; }
    public DesignerDataSourceView DesignerView { get; }
    protected bool TemplatesExist { get; }
    private static RepeaterDesigner();
    public virtual DesignerActionListCollection get_ActionLists();
    public string get_DataMember();
    public void set_DataMember(string value);
    public string get_DataSource();
    public void set_DataSource(string value);
    public IDataSourceDesigner get_DataSourceDesigner();
    public string get_DataSourceID();
    public void set_DataSourceID(string value);
    public DesignerDataSourceView get_DesignerView();
    protected bool get_TemplatesExist();
    protected virtual void Dispose(bool disposing);
    protected virtual void ExecuteChooseDataSourcePostSteps();
    protected IEnumerable GetDesignTimeDataSource(int minimumRows);
    protected IEnumerable GetDesignTimeDataSource(IEnumerable selectedDataSource, int minimumRows);
    public virtual string GetDesignTimeHtml();
    protected virtual string GetEmptyDesignTimeHtml();
    protected virtual string GetErrorDesignTimeHtml(Exception e);
    public sealed virtual IEnumerable GetResolvedSelectedDataSource();
    public sealed virtual object GetSelectedDataSource();
    public virtual void Initialize(IComponent component);
    public virtual void OnComponentChanged(object source, ComponentChangedEventArgs ce);
    public virtual void OnDataSourceChanged();
    protected virtual void PreFilterProperties(IDictionary properties);
}
public class System.Web.UI.Design.WebControls.RoleGroupCollectionEditor : CollectionEditor {
    public RoleGroupCollectionEditor(Type type);
    protected virtual bool CanSelectMultipleInstances();
}
public class System.Web.UI.Design.WebControls.SiteMapDataSourceDesigner : HierarchicalDataSourceDesigner {
    internal static SiteMapSchema SiteMapHierarchicalSchema;
    public bool CanRefreshSchema { get; }
    internal SiteMapProvider DesignTimeSiteMapProvider { get; }
    internal SiteMapDataSource SiteMapDataSource { get; }
    private bool System.Web.UI.Design.IDataSourceDesigner.CanConfigure { get; }
    private bool System.Web.UI.Design.IDataSourceDesigner.CanRefreshSchema { get; }
    private static SiteMapDataSourceDesigner();
    public virtual bool get_CanRefreshSchema();
    internal SiteMapProvider get_DesignTimeSiteMapProvider();
    internal SiteMapDataSource get_SiteMapDataSource();
    public virtual DesignerHierarchicalDataSourceView GetView(string viewPath);
    public virtual String[] GetViewNames();
    public virtual void Initialize(IComponent component);
    public virtual void OnComponentChanged(object sender, ComponentChangedEventArgs e);
    public virtual void RefreshSchema(bool preferSilent);
    private sealed virtual override bool System.Web.UI.Design.IDataSourceDesigner.get_CanConfigure();
    private sealed virtual override bool System.Web.UI.Design.IDataSourceDesigner.get_CanRefreshSchema();
    private sealed virtual override void System.Web.UI.Design.IDataSourceDesigner.add_DataSourceChanged(EventHandler value);
    private sealed virtual override void System.Web.UI.Design.IDataSourceDesigner.remove_DataSourceChanged(EventHandler value);
    private sealed virtual override void System.Web.UI.Design.IDataSourceDesigner.add_SchemaRefreshed(EventHandler value);
    private sealed virtual override void System.Web.UI.Design.IDataSourceDesigner.remove_SchemaRefreshed(EventHandler value);
    private sealed virtual override void System.Web.UI.Design.IDataSourceDesigner.Configure();
    private sealed virtual override DesignerDataSourceView System.Web.UI.Design.IDataSourceDesigner.GetView(string viewName);
    private sealed virtual override String[] System.Web.UI.Design.IDataSourceDesigner.GetViewNames();
    private sealed virtual override void System.Web.UI.Design.IDataSourceDesigner.RefreshSchema(bool preferSilent);
    private sealed virtual override void System.Web.UI.Design.IDataSourceDesigner.ResumeDataSourceEvents();
    private sealed virtual override void System.Web.UI.Design.IDataSourceDesigner.SuppressDataSourceEvents();
}
public class System.Web.UI.Design.WebControls.SiteMapDesignerDataSourceView : DesignerDataSourceView {
    public IDataSourceViewSchema Schema { get; }
    public SiteMapDesignerDataSourceView(SiteMapDataSourceDesigner owner, string viewName);
    private static SiteMapDesignerDataSourceView();
    public virtual IDataSourceViewSchema get_Schema();
    public virtual IEnumerable GetDesignTimeData(int minimumRows, Boolean& isSampleData);
}
public class System.Web.UI.Design.WebControls.SiteMapDesignerHierarchicalDataSourceView : DesignerHierarchicalDataSourceView {
    public IDataSourceSchema Schema { get; }
    public SiteMapDesignerHierarchicalDataSourceView(SiteMapDataSourceDesigner owner, string viewPath);
    public virtual IDataSourceSchema get_Schema();
    public virtual IHierarchicalEnumerable GetDesignTimeData(Boolean& isSampleData);
}
internal class System.Web.UI.Design.WebControls.SiteMapPathAutoFormat : BaseAutoFormat`1<SiteMapPath> {
    public SiteMapPathAutoFormat(string schemeName, string schemes);
    protected virtual void Apply(SiteMapPath siteMapPath);
    protected virtual void Initialize(DataRow schemeData);
}
public class System.Web.UI.Design.WebControls.SiteMapPathDesigner : ControlDesigner {
    public DesignerAutoFormatCollection AutoFormats { get; }
    public TemplateGroupCollection TemplateGroups { get; }
    protected bool UsePreviewControl { get; }
    private static SiteMapPathDesigner();
    public virtual DesignerAutoFormatCollection get_AutoFormats();
    public virtual TemplateGroupCollection get_TemplateGroups();
    protected virtual bool get_UsePreviewControl();
    public virtual string GetDesignTimeHtml();
    protected virtual string GetErrorDesignTimeHtml(Exception e);
    public virtual void Initialize(IComponent component);
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceAdvancedOptionsForm : DesignerForm {
    public bool GenerateStatements { get; public set; }
    protected string HelpTopic { get; }
    public bool OptimisticConcurrency { get; public set; }
    unknown bool OptimisticConcurrencySupported {public set; }
    public SqlDataSourceAdvancedOptionsForm(IServiceProvider serviceProvider);
    public bool get_GenerateStatements();
    public void set_GenerateStatements(bool value);
    protected virtual string get_HelpTopic();
    public bool get_OptimisticConcurrency();
    public void set_OptimisticConcurrency(bool value);
    public void set_OptimisticConcurrencySupported(bool value);
    protected virtual void OnFontChanged(EventArgs e);
    public void SetAllowAutogenerate(bool allowAutogenerate);
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceColumnData : object {
    public string AliasedName { get; }
    public DesignerDataColumn Column { get; }
    public string SelectName { get; }
    public string EscapedName { get; }
    public string ParameterPlaceholder { get; }
    public string WebParameterName { get; }
    public SqlDataSourceColumnData(DesignerDataConnection connection, DesignerDataColumn column);
    public SqlDataSourceColumnData(DesignerDataConnection connection, DesignerDataColumn column, StringCollection usedNames);
    public string get_AliasedName();
    public DesignerDataColumn get_Column();
    public string get_SelectName();
    public string get_EscapedName();
    public string get_ParameterPlaceholder();
    public string get_WebParameterName();
    internal static string EscapeObjectName(DesignerDataConnection connection, string objectName);
    public string GetOldValueParameterPlaceHolder(string oldValueFormatString);
    public string GetOldValueWebParameterName(string oldValueFormatString);
}
internal static class System.Web.UI.Design.WebControls.SqlDataSourceCommandParser : object {
    public static string GetLastIdentifierPart(string identifier);
    public static String[] ParseSqlString(string sqlString);
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceConfigureFilterForm : DesignerForm {
    public IServiceProvider ServiceProvider { get; }
    public TypeDescriptionProvider TypeDescriptionProvider { get; }
    public IList`1<SqlDataSourceFilterClause> FilterClauses { get; }
    protected string HelpTopic { get; }
    internal SqlDataSourceConfigureFilterForm(ISite site, IServiceProvider serviceProvider, SqlDataSource dataSource, TypeDescriptionProvider provider);
    public SqlDataSourceConfigureFilterForm(SqlDataSourceDesigner sqlDataSourceDesigner, SqlDataSourceTableQuery tableQuery);
    public IServiceProvider get_ServiceProvider();
    public TypeDescriptionProvider get_TypeDescriptionProvider();
    public IList`1<SqlDataSourceFilterClause> get_FilterClauses();
    protected virtual string get_HelpTopic();
    internal IDictionary`2<Type, ParameterEditor> CreateParameterList();
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceConfigureParametersPanel : WizardPanel {
    public SqlDataSourceConfigureParametersPanel(SqlDataSourceDesigner sqlDataSourceDesigner);
    public void InitializeParameters(Parameter[] selectParameters);
    public virtual bool OnNext();
    public virtual void OnPrevious();
    protected virtual void OnVisibleChanged(EventArgs e);
    public void ResetUI();
    public void SetQueries(DesignerDataConnection dataConnection, SqlDataSourceQuery selectQuery, SqlDataSourceQuery insertQuery, SqlDataSourceQuery updateQuery, SqlDataSourceQuery deleteQuery);
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceConfigureSelectPanel : WizardPanel {
    public SqlDataSourceConfigureSelectPanel(SqlDataSourceDesigner sqlDataSourceDesigner);
    protected internal virtual void OnComplete();
    protected virtual void OnFontChanged(EventArgs e);
    public virtual bool OnNext();
    public virtual void OnPrevious();
    protected virtual void OnVisibleChanged(EventArgs e);
    public void ResetUI();
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceConfigureSortForm : DesignerForm {
    protected string HelpTopic { get; }
    public IList`1<SqlDataSourceOrderClause> OrderClauses { get; }
    public SqlDataSourceConfigureSortForm(SqlDataSourceDesigner sqlDataSourceDesigner, SqlDataSourceTableQuery tableQuery);
    protected virtual string get_HelpTopic();
    public IList`1<SqlDataSourceOrderClause> get_OrderClauses();
}
internal abstract class System.Web.UI.Design.WebControls.SqlDataSourceConnectionPanel : WizardPanel {
    public DesignerDataConnection DataConnection { get; }
    protected SqlDataSourceConnectionPanel(SqlDataSourceDesigner sqlDataSourceDesigner);
    public abstract virtual DesignerDataConnection get_DataConnection();
    protected bool CheckValidProvider();
    internal static WizardPanel CreateCommandPanel(SqlDataSourceWizardForm wizard, DesignerDataConnection dataConnection, WizardPanel nextPanel);
    public virtual bool OnNext();
}
public class System.Web.UI.Design.WebControls.SqlDataSourceConnectionStringEditor : ConnectionStringEditor {
    protected virtual string GetProviderName(object instance);
    protected virtual void SetProviderName(object instance, DesignerDataConnection connection);
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceCustomCommandEditor : UserControl {
    public bool HasQuery { get; }
    private static SqlDataSourceCustomCommandEditor();
    public bool get_HasQuery();
    public void add_CommandChanged(EventHandler value);
    public void remove_CommandChanged(EventHandler value);
    public SqlDataSourceQuery GetQuery();
    public void SetCommandData(SqlDataSourceDesigner sqlDataSourceDesigner, QueryBuilderMode editorMode);
    public void SetConnection(DesignerDataConnection dataConnection);
    public void SetQuery(SqlDataSourceQuery query);
    public void SetStoredProcedures(ICollection storedProcedures);
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceCustomCommandPanel : WizardPanel {
    public SqlDataSourceCustomCommandPanel(SqlDataSourceDesigner sqlDataSourceDesigner);
    public virtual bool OnNext();
    public virtual void OnPrevious();
    protected virtual void OnVisibleChanged(EventArgs e);
    public void ResetUI();
    public void SetQueries(DesignerDataConnection dataConnection, SqlDataSourceQuery selectQuery, SqlDataSourceQuery insertQuery, SqlDataSourceQuery updateQuery, SqlDataSourceQuery deleteQuery);
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceDataConnectionChooserPanel : SqlDataSourceConnectionPanel {
    public DesignerDataConnection DataConnection { get; }
    public SqlDataSourceDataConnectionChooserPanel(SqlDataSourceDesigner sqlDataSourceDesigner, IDataEnvironment dataEnvironment);
    public virtual DesignerDataConnection get_DataConnection();
    protected internal virtual void OnComplete();
    protected virtual void OnFontChanged(EventArgs e);
    public virtual bool OnNext();
    protected virtual void OnVisibleChanged(EventArgs e);
}
public class System.Web.UI.Design.WebControls.SqlDataSourceDesigner : DataSourceDesigner {
    internal static string AspNetDatabaseObjectPrefix;
    internal static string DefaultProviderName;
    internal static string DefaultViewName;
    public bool CanConfigure { get; }
    public bool CanRefreshSchema { get; }
    public string ConnectionString { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("SqlDataSourceDesigner_DeleteQuery")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorAttribute("System.Web.UI.Design.WebControls.SqlDataSourceQueryEditor", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
[TypeConverterAttribute("System.Web.UI.Design.WebControls.SqlDataSourceQueryConverter")]
public DataSourceOperation DeleteQuery { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("SqlDataSourceDesigner_InsertQuery")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorAttribute("System.Web.UI.Design.WebControls.SqlDataSourceQueryEditor", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
[TypeConverterAttribute("System.Web.UI.Design.WebControls.SqlDataSourceQueryConverter")]
public DataSourceOperation InsertQuery { get; public set; }
    public string ProviderName { get; public set; }
    internal bool SaveConfiguredConnectionState { get; internal set; }
    public string SelectCommand { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("SqlDataSourceDesigner_SelectQuery")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorAttribute("System.Web.UI.Design.WebControls.SqlDataSourceQueryEditor", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
[TypeConverterAttribute("System.Web.UI.Design.WebControls.SqlDataSourceQueryConverter")]
public DataSourceOperation SelectQuery { get; public set; }
    internal SqlDataSource SqlDataSource { get; }
    internal Hashtable TableQueryState { get; internal set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("SqlDataSourceDesigner_UpdateQuery")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorAttribute("System.Web.UI.Design.WebControls.SqlDataSourceQueryEditor", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
[TypeConverterAttribute("System.Web.UI.Design.WebControls.SqlDataSourceQueryConverter")]
public DataSourceOperation UpdateQuery { get; public set; }
    private static SqlDataSourceDesigner();
    public virtual bool get_CanConfigure();
    public virtual bool get_CanRefreshSchema();
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public DataSourceOperation get_DeleteQuery();
    public void set_DeleteQuery(DataSourceOperation value);
    public DataSourceOperation get_InsertQuery();
    public void set_InsertQuery(DataSourceOperation value);
    public string get_ProviderName();
    public void set_ProviderName(string value);
    internal bool get_SaveConfiguredConnectionState();
    internal void set_SaveConfiguredConnectionState(bool value);
    public string get_SelectCommand();
    public void set_SelectCommand(string value);
    public DataSourceOperation get_SelectQuery();
    public void set_SelectQuery(DataSourceOperation value);
    internal SqlDataSource get_SqlDataSource();
    internal Hashtable get_TableQueryState();
    internal void set_TableQueryState(Hashtable value);
    public DataSourceOperation get_UpdateQuery();
    public void set_UpdateQuery(DataSourceOperation value);
    internal DbCommand BuildSelectCommand(DbProviderFactory factory, DbConnection connection, string commandText, ParameterCollection parameters, SqlDataSourceCommandType commandType);
    public virtual void Configure();
    internal static bool ConnectionsEqual(DesignerDataConnection connection1, DesignerDataConnection connection2);
    internal static TypeCode ConvertDbTypeToTypeCode(DbType dbType);
    internal static DbType ConvertTypeCodeToDbType(TypeCode typeCode);
    internal void CopyList(ICollection source, IList dest);
    internal virtual SqlDataSourceWizardForm CreateConfigureDataSourceWizardForm(IServiceProvider serviceProvider, IDataEnvironment dataEnvironment);
    internal static DbCommand CreateCommand(DbProviderFactory factory, string commandText, DbConnection connection);
    internal static DbDataAdapter CreateDataAdapter(DbProviderFactory factory, DbCommand command);
    internal static DbParameter CreateParameter(DbProviderFactory factory);
    internal static Parameter CreateParameter(DbProviderFactory factory, string name, DbType dbType);
    protected virtual SqlDesignerDataSourceView CreateView(string viewName);
    protected virtual void DeriveParameters(string providerName, DbCommand command);
    protected virtual string GetConnectionString();
    internal static DbProviderFactory GetDbProviderFactory(string providerName);
    internal static DbConnection GetDesignTimeConnection(IServiceProvider serviceProvider, DesignerDataConnection connection);
    public virtual DesignerDataSourceView GetView(string viewName);
    public virtual String[] GetViewNames();
    internal static string GetParameterPlaceholderPrefix(DbProviderFactory factory);
    internal static string GetParameterPrefix(DbProviderFactory factory);
    protected internal virtual Parameter[] InferParameterNames(DesignerDataConnection connection, string commandText, SqlDataSourceCommandType commandType);
    internal static bool IsNewSqlServer2008Type(DbProviderFactory factory, DbType type);
    internal DataTable LoadSchema();
    protected virtual void PreFilterProperties(IDictionary properties);
    public virtual void RefreshSchema(bool preferSilent);
    internal bool RefreshSchema(DesignerDataConnection connection, string commandText, SqlDataSourceCommandType commandType, ParameterCollection parameters, bool preferSilent);
    internal static string StripParameterPrefix(string parameterName);
    internal static bool SupportsNamedParameters(DbProviderFactory factory);
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceFilterClause : object {
    public DesignerDataColumn DesignerDataColumn { get; }
    public bool IsBinary { get; }
    public string OperatorFormat { get; }
    public Parameter Parameter { get; }
    public string Value { get; }
    public SqlDataSourceFilterClause(DesignerDataConnection designerDataConnection, DesignerDataTableBase designerDataTable, DesignerDataColumn designerDataColumn, string operatorFormat, bool isBinary, string value, Parameter parameter);
    public DesignerDataColumn get_DesignerDataColumn();
    public bool get_IsBinary();
    public string get_OperatorFormat();
    public Parameter get_Parameter();
    public string get_Value();
    public virtual string ToString();
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceOrderClause : object {
    public DesignerDataColumn DesignerDataColumn { get; }
    public bool IsDescending { get; }
    public SqlDataSourceOrderClause(DesignerDataConnection designerDataConnection, DesignerDataTableBase designerDataTable, DesignerDataColumn designerDataColumn, bool isDescending);
    public DesignerDataColumn get_DesignerDataColumn();
    public bool get_IsDescending();
    public virtual string ToString();
}
internal static class System.Web.UI.Design.WebControls.SqlDataSourceParameterParser : object {
    public static Parameter[] ParseCommandText(string providerName, string commandText);
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceParameterValueEditorForm : DesignerForm {
    protected string HelpTopic { get; }
    public SqlDataSourceParameterValueEditorForm(IServiceProvider serviceProvider, ParameterCollection parameters);
    protected virtual string get_HelpTopic();
    protected virtual void OnVisibleChanged(EventArgs e);
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceQuery : object {
    public string Command { get; }
    public SqlDataSourceCommandType CommandType { get; }
    public ICollection Parameters { get; }
    public SqlDataSourceQuery(string command, SqlDataSourceCommandType commandType, ICollection parameters);
    public string get_Command();
    public SqlDataSourceCommandType get_CommandType();
    public ICollection get_Parameters();
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceQueryConverter : TypeConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceQueryEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceQueryEditorForm : DesignerForm {
    public string Command { get; }
    protected string HelpTopic { get; }
    public SqlDataSourceQueryEditorForm(IServiceProvider serviceProvider, SqlDataSourceDesigner sqlDataSourceDesigner, string providerName, string connectionString, DataSourceOperation operation, SqlDataSourceCommandType commandType, string command, IList originalParameters);
    public string get_Command();
    protected virtual string get_HelpTopic();
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceRefreshSchemaForm : DesignerForm {
    protected string HelpTopic { get; }
    public SqlDataSourceRefreshSchemaForm(IServiceProvider serviceProvider, SqlDataSourceDesigner sqlDataSourceDesigner, ParameterCollection parameters);
    protected virtual string get_HelpTopic();
    protected virtual void OnVisibleChanged(EventArgs e);
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceSaveConfiguredConnectionPanel : WizardPanel {
    internal static string ConnectionStringExpressionPrefix;
    internal static string ConnectionStringExpressionConnectionSuffix;
    internal static string ConnectionStringExpressionProviderSuffix;
    internal DesignerDataConnection CurrentConnection { get; }
    public SqlDataSourceSaveConfiguredConnectionPanel(SqlDataSourceDesigner sqlDataSourceDesigner, IDataEnvironment dataEnvironment);
    internal DesignerDataConnection get_CurrentConnection();
    protected internal virtual void OnComplete();
    protected virtual void OnFontChanged(EventArgs e);
    public virtual bool OnNext();
    protected virtual void OnVisibleChanged(EventArgs e);
    internal static void PersistConnectionSettings(SqlDataSource sqlDataSource, SqlDataSourceDesigner sqlDataSourceDesigner, DesignerDataConnection dataConnection);
    public void ResetUI();
    public void SetConnectionInfo(DesignerDataConnection dataConnection);
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceSummaryPanel : WizardPanel {
    public SqlDataSourceSummaryPanel(SqlDataSourceDesigner sqlDataSourceDesigner);
    public void SetQueries(DesignerDataConnection dataConnection, SqlDataSourceQuery selectQuery, SqlDataSourceQuery insertQuery, SqlDataSourceQuery updateQuery, SqlDataSourceQuery deleteQuery);
    protected internal virtual void OnComplete();
    public virtual bool OnNext();
    public virtual void OnPrevious();
    protected virtual void OnVisibleChanged(EventArgs e);
    public void ResetUI();
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceTableQuery : object {
    public bool AsteriskField { get; public set; }
    public DesignerDataConnection DesignerDataConnection { get; }
    public DesignerDataTableBase DesignerDataTable { get; }
    public bool Distinct { get; public set; }
    public IList`1<DesignerDataColumn> Fields { get; }
    public IList`1<SqlDataSourceFilterClause> FilterClauses { get; }
    public IList`1<SqlDataSourceOrderClause> OrderClauses { get; }
    public SqlDataSourceTableQuery(DesignerDataConnection designerDataConnection, DesignerDataTableBase designerDataTable);
    public bool get_AsteriskField();
    public void set_AsteriskField(bool value);
    public DesignerDataConnection get_DesignerDataConnection();
    public DesignerDataTableBase get_DesignerDataTable();
    public bool get_Distinct();
    public void set_Distinct(bool value);
    public IList`1<DesignerDataColumn> get_Fields();
    public IList`1<SqlDataSourceFilterClause> get_FilterClauses();
    public IList`1<SqlDataSourceOrderClause> get_OrderClauses();
    public SqlDataSourceTableQuery Clone();
    public SqlDataSourceQuery GetDeleteQuery(string oldValuesFormatString, bool includeOldValues);
    public SqlDataSourceQuery GetInsertQuery();
    public SqlDataSourceQuery GetSelectQuery();
    public string GetTableName();
    public SqlDataSourceQuery GetUpdateQuery(string oldValuesFormatString, bool includeOldValues);
    public bool IsPrimaryKeySelected();
}
internal class System.Web.UI.Design.WebControls.SqlDataSourceWizardForm : WizardForm {
    internal DesignerDataConnection DesignerDataConnection { get; }
    internal IDataEnvironment DataEnvironment { get; }
    protected string HelpTopic { get; }
    internal SqlDataSourceDesigner SqlDataSourceDesigner { get; }
    public SqlDataSourceWizardForm(IServiceProvider serviceProvider, SqlDataSourceDesigner sqlDataSourceDesigner, IDataEnvironment dataEnvironment);
    internal DesignerDataConnection get_DesignerDataConnection();
    internal IDataEnvironment get_DataEnvironment();
    protected virtual string get_HelpTopic();
    internal SqlDataSourceDesigner get_SqlDataSourceDesigner();
    protected virtual SqlDataSourceConnectionPanel CreateConnectionPanel();
    internal SqlDataSourceConfigureParametersPanel GetConfigureParametersPanel();
    internal SqlDataSourceConfigureSelectPanel GetConfigureSelectPanel();
    internal SqlDataSourceCustomCommandPanel GetCustomCommandPanel();
    internal SqlDataSourceSaveConfiguredConnectionPanel GetSaveConfiguredConnectionPanel();
    internal SqlDataSourceSummaryPanel GetSummaryPanel();
    protected virtual void OnPanelChanging(WizardPanelChangingEventArgs e);
}
public class System.Web.UI.Design.WebControls.SqlDesignerDataSourceView : DesignerDataSourceView {
    public bool CanDelete { get; }
    public bool CanInsert { get; }
    public bool CanPage { get; }
    public bool CanRetrieveTotalRowCount { get; }
    public bool CanSort { get; }
    public bool CanUpdate { get; }
    public IDataSourceViewSchema Schema { get; }
    public SqlDesignerDataSourceView(SqlDataSourceDesigner owner, string viewName);
    public virtual bool get_CanDelete();
    public virtual bool get_CanInsert();
    public virtual bool get_CanPage();
    public virtual bool get_CanRetrieveTotalRowCount();
    public virtual bool get_CanSort();
    public virtual bool get_CanUpdate();
    public virtual IDataSourceViewSchema get_Schema();
    public virtual IEnumerable GetDesignTimeData(int minimumRows, Boolean& isSampleData);
}
public class System.Web.UI.Design.WebControls.StyleCollectionEditor : CollectionEditor {
    public StyleCollectionEditor(Type type);
    protected virtual object CreateInstance(Type itemType);
}
public class System.Web.UI.Design.WebControls.SubMenuStyleCollectionEditor : CollectionEditor {
    public SubMenuStyleCollectionEditor(Type type);
    protected virtual bool CanSelectMultipleInstances();
    protected virtual CollectionForm CreateCollectionForm();
    protected virtual object CreateInstance(Type itemType);
    protected virtual Type[] CreateNewItemTypes();
}
[SupportsPreviewControlAttribute("True")]
public class System.Web.UI.Design.WebControls.SubstitutionDesigner : ControlDesigner {
    public virtual string GetDesignTimeHtml();
}
public class System.Web.UI.Design.WebControls.TableCellsCollectionEditor : CollectionEditor {
    public TableCellsCollectionEditor(Type type);
    protected virtual bool CanSelectMultipleInstances();
    protected virtual object CreateInstance(Type itemType);
}
[SupportsPreviewControlAttribute("True")]
public class System.Web.UI.Design.WebControls.TableDesigner : ControlDesigner {
    public virtual string GetDesignTimeHtml();
}
public class System.Web.UI.Design.WebControls.TableRowsCollectionEditor : CollectionEditor {
    public TableRowsCollectionEditor(Type type);
    protected virtual bool CanSelectMultipleInstances();
    protected virtual object CreateInstance(Type itemType);
}
public class System.Web.UI.Design.WebControls.TreeNodeBindingDepthConverter : Int32Converter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Web.UI.Design.WebControls.TreeNodeCollectionEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Web.UI.Design.WebControls.TreeNodeCollectionEditorDialog : CollectionEditorDialog {
    protected string HelpTopic { get; }
    public TreeNodeCollectionEditorDialog(TreeView treeView, TreeViewDesigner treeViewDesigner);
    protected virtual string get_HelpTopic();
    protected virtual void OnInitialActivated(EventArgs e);
}
public class System.Web.UI.Design.WebControls.TreeNodeStyleCollectionEditor : StyleCollectionEditor {
    public TreeNodeStyleCollectionEditor(Type type);
    protected virtual Type CreateCollectionItemType();
}
public class System.Web.UI.Design.WebControls.TreeViewBindingsEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Web.UI.Design.WebControls.TreeViewBindingsEditorForm : DesignerForm {
    protected string HelpTopic { get; }
    public TreeViewBindingsEditorForm(IServiceProvider serviceProvider, TreeView treeView, TreeViewDesigner treeViewDesigner);
    protected virtual void Dispose(bool disposing);
    internal static IDataSourceViewSchema FindViewSchemaRecursive(object schema, int depth, string viewName, int level, IDataSourceViewSchema bestBet);
    protected virtual string get_HelpTopic();
    protected virtual void OnInitialActivated(EventArgs e);
}
public class System.Web.UI.Design.WebControls.TreeViewDesigner : HierarchicalDataBoundControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public DesignerAutoFormatCollection AutoFormats { get; }
    protected bool UsePreviewControl { get; }
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual DesignerAutoFormatCollection get_AutoFormats();
    protected virtual bool get_UsePreviewControl();
    protected void CreateLineImages();
    protected virtual void DataBind(BaseDataBoundControl dataBoundControl);
    protected void EditBindings();
    protected void EditNodes();
    protected virtual IHierarchicalEnumerable GetSampleDataSource();
    public virtual string GetDesignTimeHtml();
    protected virtual string GetEmptyDesignTimeHtml();
    protected virtual string GetErrorDesignTimeHtml(Exception e);
    public virtual void Initialize(IComponent component);
    internal void InvokeTreeNodeCollectionEditor();
    internal void InvokeTreeViewBindingsEditor();
}
internal class System.Web.UI.Design.WebControls.TreeViewImageGenerator : DesignerForm {
    protected string HelpTopic { get; }
    public TreeViewImageGenerator(TreeView treeView);
    protected virtual string get_HelpTopic();
}
internal class System.Web.UI.Design.WebControls.TypeDescriptorContext : object {
    public IContainer Container { get; }
    public object Instance { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public TypeDescriptorContext(IDesignerHost designerHost, PropertyDescriptor propDesc, object instance);
    public sealed virtual IContainer get_Container();
    public sealed virtual object get_Instance();
    public sealed virtual PropertyDescriptor get_PropertyDescriptor();
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual bool OnComponentChanging();
    public sealed virtual void OnComponentChanged();
}
[SupportsPreviewControlAttribute("True")]
public class System.Web.UI.Design.WebControls.ValidationSummaryDesigner : PreviewControlDesigner {
    protected virtual Control CreateViewControl();
    protected virtual void PreFilterProperties(IDictionary properties);
}
public class System.Web.UI.Design.WebControls.ViewDesigner : ContainerControlDesigner {
    protected bool NoWrap { get; }
    public virtual void Initialize(IComponent component);
    protected virtual bool get_NoWrap();
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
    public virtual string GetDesignTimeHtml();
}
public class System.Web.UI.Design.WebControls.WebParts.CatalogPartDesigner : PartDesigner {
    protected virtual Control CreateViewControl();
    public virtual void Initialize(IComponent component);
    public virtual string GetDesignTimeHtml();
}
internal class System.Web.UI.Design.WebControls.WebParts.CatalogZoneAutoFormat : ReflectionBasedAutoFormat {
    internal static string PreviewControlID;
    public CatalogZoneAutoFormat(string schemeName, string schemes);
    public virtual Control GetPreviewControl(Control runtimeControl);
}
public class System.Web.UI.Design.WebControls.WebParts.CatalogZoneDesigner : ToolZoneDesigner {
    public DesignerAutoFormatCollection AutoFormats { get; }
    public TemplateGroupCollection TemplateGroups { get; }
    public virtual DesignerAutoFormatCollection get_AutoFormats();
    public virtual TemplateGroupCollection get_TemplateGroups();
    public virtual string GetDesignTimeHtml();
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
    public virtual string GetEditableDesignerRegionContent(EditableDesignerRegion region);
    protected virtual string GetEmptyDesignTimeHtml();
    public virtual void Initialize(IComponent component);
    public virtual void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content);
}
internal class System.Web.UI.Design.WebControls.WebParts.ConnectionsZoneAutoFormat : ReflectionBasedAutoFormat {
    internal static string PreviewControlID;
    public ConnectionsZoneAutoFormat(string schemeName, string schemes);
    public virtual Control GetPreviewControl(Control runtimeControl);
}
public class System.Web.UI.Design.WebControls.WebParts.ConnectionsZoneDesigner : ToolZoneDesigner {
    public DesignerAutoFormatCollection AutoFormats { get; }
    private static ConnectionsZoneDesigner();
    public virtual DesignerAutoFormatCollection get_AutoFormats();
    public virtual string GetDesignTimeHtml();
    public virtual void Initialize(IComponent component);
    protected virtual void PreFilterProperties(IDictionary properties);
}
public class System.Web.UI.Design.WebControls.WebParts.DeclarativeCatalogPartDesigner : CatalogPartDesigner {
    public TemplateGroupCollection TemplateGroups { get; }
    public virtual TemplateGroupCollection get_TemplateGroups();
    public virtual string GetDesignTimeHtml();
    protected virtual string GetEmptyDesignTimeHtml();
    public virtual void Initialize(IComponent component);
}
internal class System.Web.UI.Design.WebControls.WebParts.DesignerCatalogPartChrome : CatalogPartChrome {
    public DesignerCatalogPartChrome(CatalogZone zone);
    public ViewRendering GetViewRendering(Control control);
    protected virtual void RenderPartContents(HtmlTextWriter writer, CatalogPart catalogPart);
}
internal class System.Web.UI.Design.WebControls.WebParts.DesignerEditorPartChrome : EditorPartChrome {
    public DesignerEditorPartChrome(EditorZone zone);
    public ViewRendering GetViewRendering(Control control);
    protected virtual void RenderPartContents(HtmlTextWriter writer, EditorPart editorPart);
}
internal class System.Web.UI.Design.WebControls.WebParts.DesignerGenericWebPart : GenericWebPart {
    public DesignerGenericWebPart(Control control);
    protected internal virtual void CreateChildControls();
}
internal class System.Web.UI.Design.WebControls.WebParts.DesignerWebPartChrome : WebPartChrome {
    public DesignerWebPartChrome(WebPartZoneBase zone);
    public ViewRendering GetViewRendering(Control control);
    protected virtual void RenderPartContents(HtmlTextWriter writer, WebPart webPart);
}
public class System.Web.UI.Design.WebControls.WebParts.EditorPartDesigner : PartDesigner {
    protected virtual Control CreateViewControl();
    public virtual void Initialize(IComponent component);
    public virtual string GetDesignTimeHtml();
}
internal class System.Web.UI.Design.WebControls.WebParts.EditorZoneAutoFormat : ReflectionBasedAutoFormat {
    internal static string PreviewControlID;
    public EditorZoneAutoFormat(string schemeName, string schemes);
    public virtual Control GetPreviewControl(Control runtimeControl);
}
public class System.Web.UI.Design.WebControls.WebParts.EditorZoneDesigner : ToolZoneDesigner {
    public DesignerAutoFormatCollection AutoFormats { get; }
    public TemplateGroupCollection TemplateGroups { get; }
    public virtual DesignerAutoFormatCollection get_AutoFormats();
    public virtual TemplateGroupCollection get_TemplateGroups();
    public virtual string GetDesignTimeHtml();
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
    public virtual string GetEditableDesignerRegionContent(EditableDesignerRegion region);
    protected virtual string GetEmptyDesignTimeHtml();
    public virtual void Initialize(IComponent component);
    public virtual void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content);
}
public class System.Web.UI.Design.WebControls.WebParts.PageCatalogPartDesigner : CatalogPartDesigner {
    public virtual string GetDesignTimeHtml();
    public virtual void Initialize(IComponent component);
}
public abstract class System.Web.UI.Design.WebControls.WebParts.PartDesigner : CompositeControlDesigner {
    protected bool UsePreviewControl { get; }
    protected virtual bool get_UsePreviewControl();
    internal static Control GetViewControl(Control control);
    public virtual void Initialize(IComponent component);
}
public class System.Web.UI.Design.WebControls.WebParts.ProxyWebPartManagerDesigner : ControlDesigner {
    protected bool UsePreviewControl { get; }
    protected virtual bool get_UsePreviewControl();
    public virtual string GetDesignTimeHtml();
    public virtual void Initialize(IComponent component);
}
public class System.Web.UI.Design.WebControls.WebParts.ToolZoneDesigner : WebZoneDesigner {
    public DesignerActionListCollection ActionLists { get; }
    protected bool ViewInBrowseMode { get; private set; }
    public virtual DesignerActionListCollection get_ActionLists();
    protected bool get_ViewInBrowseMode();
    private void set_ViewInBrowseMode(bool value);
    public virtual void Initialize(IComponent component);
}
public class System.Web.UI.Design.WebControls.WebParts.WebPartDesigner : PartDesigner {
    public virtual void Initialize(IComponent component);
}
public class System.Web.UI.Design.WebControls.WebParts.WebPartManagerDesigner : ControlDesigner {
    protected bool UsePreviewControl { get; }
    protected virtual bool get_UsePreviewControl();
    public virtual string GetDesignTimeHtml();
    public virtual void Initialize(IComponent component);
}
internal class System.Web.UI.Design.WebControls.WebParts.WebPartZoneAutoFormat : ReflectionBasedAutoFormat {
    public WebPartZoneAutoFormat(string schemeName, string schemes);
    public virtual Control GetPreviewControl(Control runtimeControl);
}
public class System.Web.UI.Design.WebControls.WebParts.WebPartZoneBaseDesigner : WebZoneDesigner {
    public virtual void Initialize(IComponent component);
    protected virtual void PreFilterProperties(IDictionary properties);
}
public class System.Web.UI.Design.WebControls.WebParts.WebPartZoneDesigner : WebPartZoneBaseDesigner {
    public DesignerAutoFormatCollection AutoFormats { get; }
    public TemplateGroupCollection TemplateGroups { get; }
    public virtual DesignerAutoFormatCollection get_AutoFormats();
    public virtual TemplateGroupCollection get_TemplateGroups();
    public virtual string GetDesignTimeHtml();
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
    public virtual string GetEditableDesignerRegionContent(EditableDesignerRegion region);
    protected virtual string GetEmptyDesignTimeHtml();
    public virtual void Initialize(IComponent component);
    public virtual void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content);
}
public abstract class System.Web.UI.Design.WebControls.WebParts.WebZoneDesigner : ControlDesigner {
    internal static string _templateName;
    internal TemplateDefinition TemplateDefinition { get; }
    protected bool UsePreviewControl { get; }
    internal TemplateDefinition get_TemplateDefinition();
    internal TemplateGroup CreateZoneTemplateGroup();
    protected virtual bool get_UsePreviewControl();
    public virtual void Initialize(IComponent component);
}
internal class System.Web.UI.Design.WebControls.WindowsFormsEditorServiceHelper : object {
    public WindowsFormsEditorServiceHelper(ComponentDesigner componentDesigner);
    private sealed virtual override void System.Windows.Forms.Design.IWindowsFormsEditorService.CloseDropDown();
    private sealed virtual override void System.Windows.Forms.Design.IWindowsFormsEditorService.DropDownControl(Control control);
    private sealed virtual override DialogResult System.Windows.Forms.Design.IWindowsFormsEditorService.ShowDialog(Form dialog);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
internal class System.Web.UI.Design.WebControls.WizardAutoFormat : BaseAutoFormat`1<Wizard> {
    public WizardAutoFormat(string schemeName, string schemes);
    protected virtual void Apply(Wizard wizard);
    protected virtual void Initialize(DataRow schemeData);
}
public class System.Web.UI.Design.WebControls.WizardDesigner : CompositeControlDesigner {
    internal static string _customNavigationTemplateName;
    internal static string _customNavigationControls;
    internal static string _contentTemplateName;
    internal static int _navigationStyleLength;
    public DesignerActionListCollection ActionLists { get; }
    internal WizardStepBase ActiveStep { get; }
    internal int ActiveStepIndex { get; }
    public DesignerAutoFormatCollection AutoFormats { get; }
    protected bool DisplaySideBar { get; protected set; }
    internal bool SupportsDesignerRegions { get; }
    public TemplateGroupCollection TemplateGroups { get; }
    internal Style[] TemplateStyleArray { get; }
    protected bool UsePreviewControl { get; }
    private static WizardDesigner();
    public virtual DesignerActionListCollection get_ActionLists();
    internal WizardStepBase get_ActiveStep();
    internal int get_ActiveStepIndex();
    public virtual DesignerAutoFormatCollection get_AutoFormats();
    protected bool get_DisplaySideBar();
    protected void set_DisplaySideBar(bool value);
    internal bool get_SupportsDesignerRegions();
    internal virtual bool InRegionEditingMode(Wizard viewControl);
    public virtual TemplateGroupCollection get_TemplateGroups();
    internal Style[] get_TemplateStyleArray();
    protected virtual bool get_UsePreviewControl();
    protected virtual void AddDesignerRegions(DesignerRegionCollection regions);
    protected void ConvertToTemplate(string description, IComponent component, string templateName, String[] keys);
    protected virtual void ConvertToCustomNavigationTemplate();
    internal bool ConvertToCustomNavigationTemplateCallBack(object context);
    protected virtual void CreateChildControls();
    public virtual string GetDesignTimeHtml();
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
    public virtual string GetEditableDesignerRegionContent(EditableDesignerRegion region);
    internal virtual string GetEditableDesignerRegionContent(IWizardStepEditableRegion region);
    internal string GetRegionName(WizardStepBase step);
    public virtual void Initialize(IComponent component);
    protected virtual void OnClick(DesignerRegionMouseEventArgs e);
    public virtual void OnComponentChanged(object sender, ComponentChangedEventArgs ce);
    protected virtual void PreFilterProperties(IDictionary properties);
    protected void ResetTemplate(string description, IComponent component, string templateName);
    public virtual void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content);
}
internal class System.Web.UI.Design.WebControls.WizardSelectableRegion : DesignerRegion {
    internal WizardStepBase Step { get; }
    internal WizardSelectableRegion(WizardDesigner designer, string name, WizardStepBase wizardStep);
    internal WizardStepBase get_Step();
}
internal class System.Web.UI.Design.WebControls.WizardStepBaseTemplateDefinition : TemplateDefinition {
    public string Content { get; public set; }
    public WizardStepBaseTemplateDefinition(WizardDesigner designer, WizardStepBase step, string name, Style style);
    public virtual string get_Content();
    public virtual void set_Content(string value);
}
public class System.Web.UI.Design.WebControls.WizardStepCollectionEditor : CollectionEditor {
    public WizardStepCollectionEditor(Type type);
    protected virtual bool CanSelectMultipleInstances();
    protected virtual CollectionForm CreateCollectionForm();
    protected virtual object CreateInstance(Type itemType);
    protected virtual Type[] CreateNewItemTypes();
}
public class System.Web.UI.Design.WebControls.WizardStepEditableRegion : EditableDesignerRegion {
    public WizardStepBase Step { get; }
    public WizardStepEditableRegion(WizardDesigner designer, WizardStepBase wizardStep);
    public sealed virtual WizardStepBase get_Step();
}
public class System.Web.UI.Design.WebControls.WizardStepTemplatedEditableRegion : TemplatedEditableDesignerRegion {
    public WizardStepBase Step { get; }
    public WizardStepTemplatedEditableRegion(TemplateDefinition templateDefinition, WizardStepBase wizardStep);
    public sealed virtual WizardStepBase get_Step();
}
internal class System.Web.UI.Design.WebControls.XmlDataSourceConfigureDataSourceForm : DesignerForm {
    protected string HelpTopic { get; }
    public XmlDataSourceConfigureDataSourceForm(IServiceProvider serviceProvider, XmlDataSource xmlDataSource);
    protected virtual string get_HelpTopic();
}
public class System.Web.UI.Design.WebControls.XmlDataSourceDesigner : HierarchicalDataSourceDesigner {
    public bool CanConfigure { get; }
    public bool CanRefreshSchema { get; }
    public string Data { get; public set; }
    public string DataFile { get; public set; }
    public string Transform { get; public set; }
    public string TransformFile { get; public set; }
    public string XPath { get; public set; }
    private bool System.Web.UI.Design.IDataSourceDesigner.CanConfigure { get; }
    private bool System.Web.UI.Design.IDataSourceDesigner.CanRefreshSchema { get; }
    private static XmlDataSourceDesigner();
    public virtual bool get_CanConfigure();
    public virtual bool get_CanRefreshSchema();
    public string get_Data();
    public void set_Data(string value);
    public string get_DataFile();
    public void set_DataFile(string value);
    public string get_Transform();
    public void set_Transform(string value);
    public string get_TransformFile();
    public void set_TransformFile(string value);
    public string get_XPath();
    public void set_XPath(string value);
    public virtual void Configure();
    internal XmlDataSource GetDesignTimeXmlDataSource(string viewPath);
    internal IHierarchicalEnumerable GetHierarchicalRuntimeEnumerable(string path);
    internal IEnumerable GetRuntimeEnumerable(string listName);
    public virtual DesignerHierarchicalDataSourceView GetView(string viewPath);
    public virtual void Initialize(IComponent component);
    protected virtual void PreFilterProperties(IDictionary properties);
    public virtual void RefreshSchema(bool preferSilent);
    private sealed virtual override bool System.Web.UI.Design.IDataSourceDesigner.get_CanConfigure();
    private sealed virtual override bool System.Web.UI.Design.IDataSourceDesigner.get_CanRefreshSchema();
    private sealed virtual override void System.Web.UI.Design.IDataSourceDesigner.add_DataSourceChanged(EventHandler value);
    private sealed virtual override void System.Web.UI.Design.IDataSourceDesigner.remove_DataSourceChanged(EventHandler value);
    private sealed virtual override void System.Web.UI.Design.IDataSourceDesigner.add_SchemaRefreshed(EventHandler value);
    private sealed virtual override void System.Web.UI.Design.IDataSourceDesigner.remove_SchemaRefreshed(EventHandler value);
    private sealed virtual override void System.Web.UI.Design.IDataSourceDesigner.Configure();
    private sealed virtual override DesignerDataSourceView System.Web.UI.Design.IDataSourceDesigner.GetView(string viewName);
    private sealed virtual override String[] System.Web.UI.Design.IDataSourceDesigner.GetViewNames();
    private sealed virtual override void System.Web.UI.Design.IDataSourceDesigner.RefreshSchema(bool preferSilent);
    private sealed virtual override void System.Web.UI.Design.IDataSourceDesigner.ResumeDataSourceEvents();
    private sealed virtual override void System.Web.UI.Design.IDataSourceDesigner.SuppressDataSourceEvents();
}
public class System.Web.UI.Design.WebControls.XmlDesigner : ControlDesigner {
    protected virtual void Dispose(bool disposing);
    public virtual string GetDesignTimeHtml();
    protected virtual string GetEmptyDesignTimeHtml();
    public virtual void Initialize(IComponent component);
    internal virtual string GetPersistInnerHtmlInternal();
}
public class System.Web.UI.Design.WebControls.XmlDesignerDataSourceView : DesignerDataSourceView {
    public IDataSourceViewSchema Schema { get; }
    public XmlDesignerDataSourceView(XmlDataSourceDesigner owner, string viewName);
    public virtual IDataSourceViewSchema get_Schema();
    public virtual IEnumerable GetDesignTimeData(int minimumRows, Boolean& isSampleData);
}
public class System.Web.UI.Design.WebControls.XmlDesignerHierarchicalDataSourceView : DesignerHierarchicalDataSourceView {
    public IDataSourceSchema Schema { get; }
    public XmlDesignerHierarchicalDataSourceView(XmlDataSourceDesigner owner, string viewPath);
    public virtual IDataSourceSchema get_Schema();
    public virtual IHierarchicalEnumerable GetDesignTimeData(Boolean& isSampleData);
}
public class System.Web.UI.Design.WebControlToolboxItem : ToolboxItem {
    public WebControlToolboxItem(Type type);
    protected WebControlToolboxItem(SerializationInfo info, StreamingContext context);
    protected virtual IComponent[] CreateComponentsCore(IDesignerHost host);
    protected virtual void Deserialize(SerializationInfo info, StreamingContext context);
    public object GetToolAttributeValue(IDesignerHost host, Type attributeType);
    public string GetToolHtml(IDesignerHost host);
    public Type GetToolType(IDesignerHost host);
    public virtual void Initialize(Type type);
    protected virtual void Serialize(SerializationInfo info, StreamingContext context);
}
public class System.Web.UI.Design.WebFormsDesignerActionService : DesignerActionService {
    public WebFormsDesignerActionService(IServiceProvider serviceProvider);
    protected virtual void GetComponentDesignerActions(IComponent component, DesignerActionListCollection actionLists);
}
public abstract class System.Web.UI.Design.WebFormsReferenceManager : object {
    public abstract virtual Type GetType(string tagPrefix, string tagName);
    public abstract virtual string GetTagPrefix(Type objectType);
    public abstract virtual string RegisterTagPrefix(Type objectType);
    public abstract virtual ICollection GetRegisterDirectives();
    public abstract virtual string GetUserControlPath(string tagPrefix, string tagName);
}
public abstract class System.Web.UI.Design.WebFormsRootDesigner : object {
    public IComponent Component { get; public set; }
    public CultureInfo CurrentCulture { get; }
    public string DocumentUrl { get; }
    public bool IsDesignerViewLocked { get; }
    public bool IsLoading { get; }
    public WebFormsReferenceManager ReferenceManager { get; }
    protected ViewTechnology[] SupportedTechnologies { get; }
    protected DesignerVerbCollection Verbs { get; }
    private DesignerVerbCollection System.ComponentModel.Design.IDesigner.Verbs { get; }
    private ViewTechnology[] System.ComponentModel.Design.IRootDesigner.SupportedTechnologies { get; }
    public virtual IComponent get_Component();
    public virtual void set_Component(IComponent value);
    protected virtual override void Finalize();
    public CultureInfo get_CurrentCulture();
    public abstract virtual string get_DocumentUrl();
    public abstract virtual bool get_IsDesignerViewLocked();
    public abstract virtual bool get_IsLoading();
    public abstract virtual WebFormsReferenceManager get_ReferenceManager();
    protected ViewTechnology[] get_SupportedTechnologies();
    protected DesignerVerbCollection get_Verbs();
    protected internal virtual object GetService(Type serviceType);
    protected object GetView(ViewTechnology viewTechnology);
    public void add_LoadComplete(EventHandler value);
    public void remove_LoadComplete(EventHandler value);
    public abstract virtual void AddClientScriptToDocument(ClientScriptItem scriptItem);
    public abstract virtual string AddControlToDocument(Control newControl, Control referenceControl, ControlLocation location);
    protected virtual DesignerActionService CreateDesignerActionService(IServiceProvider serviceProvider);
    protected virtual IUrlResolutionService CreateUrlResolutionService();
    protected virtual void Dispose(bool disposing);
    public virtual string GenerateEmptyDesignTimeHtml(Control control);
    public virtual string GenerateErrorDesignTimeHtml(Control control, Exception e, string errorMessage);
    public abstract virtual ClientScriptItemCollection GetClientScriptsInDocument();
    protected internal abstract virtual void GetControlViewAndTag(Control control, IControlDesignerView& view, IControlDesignerTag& tag);
    public virtual void Initialize(IComponent component);
    protected virtual void OnLoadComplete(EventArgs e);
    protected virtual void PostFilterAttributes(IDictionary attributes);
    protected virtual void PostFilterEvents(IDictionary events);
    protected virtual void PostFilterProperties(IDictionary properties);
    protected virtual void PreFilterAttributes(IDictionary attributes);
    protected virtual void PreFilterEvents(IDictionary events);
    protected virtual void PreFilterProperties(IDictionary properties);
    public abstract virtual void RemoveClientScriptFromDocument(string clientScriptId);
    public abstract virtual void RemoveControlFromDocument(Control control);
    public string ResolveUrl(string relativeUrl);
    public virtual void SetControlID(Control control, string id);
    private sealed virtual override DesignerVerbCollection System.ComponentModel.Design.IDesigner.get_Verbs();
    private sealed virtual override void System.ComponentModel.Design.IDesigner.DoDefaultAction();
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(IDictionary attributes);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(IDictionary events);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(IDictionary properties);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(IDictionary attributes);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(IDictionary events);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(IDictionary properties);
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override ViewTechnology[] System.ComponentModel.Design.IRootDesigner.get_SupportedTechnologies();
    private sealed virtual override object System.ComponentModel.Design.IRootDesigner.GetView(ViewTechnology viewTechnology);
}
public class System.Web.UI.Design.XmlDataFileEditor : UrlEditor {
    protected string Caption { get; }
    protected string Filter { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
}
internal class System.Web.UI.Design.XmlDocumentFieldSchema : object {
    public Type DataType { get; }
    public bool Identity { get; }
    public bool IsReadOnly { get; }
    public bool IsUnique { get; }
    public int Length { get; }
    public string Name { get; }
    public bool Nullable { get; }
    public int Precision { get; }
    public bool PrimaryKey { get; }
    public int Scale { get; }
    public XmlDocumentFieldSchema(string name);
    public sealed virtual Type get_DataType();
    public sealed virtual bool get_Identity();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsUnique();
    public sealed virtual int get_Length();
    public sealed virtual string get_Name();
    public sealed virtual bool get_Nullable();
    public sealed virtual int get_Precision();
    public sealed virtual bool get_PrimaryKey();
    public sealed virtual int get_Scale();
}
public class System.Web.UI.Design.XmlDocumentSchema : object {
    public XmlDocumentSchema(XmlDocument xmlDocument, string xPath);
    internal XmlDocumentSchema(XmlDocument xmlDocument, string xPath, bool includeSpecialSchema);
    public sealed virtual IDataSourceViewSchema[] GetViews();
}
internal class System.Web.UI.Design.XmlDocumentViewSchema : object {
    public string Name { get; }
    public XmlDocumentViewSchema(string name, Pair data, bool includeSpecialSchema);
    public sealed virtual string get_Name();
    public sealed virtual IDataSourceViewSchema[] GetChildren();
    public sealed virtual IDataSourceFieldSchema[] GetFields();
}
public class System.Web.UI.Design.XmlFileEditor : UITypeEditor {
    internal FileDialog fileDialog;
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
public class System.Web.UI.Design.XmlUrlEditor : UrlEditor {
    protected string Caption { get; }
    protected string Filter { get; }
    protected UrlBuilderOptions Options { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
    protected virtual UrlBuilderOptions get_Options();
}
public class System.Web.UI.Design.XsdSchemaFileEditor : UrlEditor {
    protected string Caption { get; }
    protected string Filter { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
}
public class System.Web.UI.Design.XslTransformFileEditor : UrlEditor {
    protected string Caption { get; }
    protected string Filter { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
}
public class System.Web.UI.Design.XslUrlEditor : UrlEditor {
    protected string Caption { get; }
    protected string Filter { get; }
    protected UrlBuilderOptions Options { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
    protected virtual UrlBuilderOptions get_Options();
}
internal static class System.Windows.Forms.ClientUtils : object {
    public static bool IsCriticalException(Exception ex);
    public static bool IsSecurityOrCriticalException(Exception ex);
    public static int GetBitCount(UInt32 x);
    public static bool IsEnumValid(Enum enumValue, int value, int minValue, int maxValue);
    public static bool IsEnumValid(Enum enumValue, int value, int minValue, int maxValue, int maxNumberOfBitsOn);
    public static bool IsEnumValid_Masked(Enum enumValue, int value, UInt32 mask);
    public static bool IsEnumValid_NotSequential(Enum enumValue, int value, Int32[] enumValues);
}
internal static class System.Windows.Forms.ConfigurationOptions : object {
    internal static Version OSVersion;
    internal static Version RS2Version;
    public static Version NetFrameworkVersion { get; }
    private static ConfigurationOptions();
    public static Version get_NetFrameworkVersion();
    public static string GetConfigSettingValue(string settingName);
}
internal enum System.Windows.Forms.Design.AdornmentType : Enum {
    public int value__;
    public static AdornmentType GrabHandle;
    public static AdornmentType ContainerSelector;
    public static AdornmentType Maximum;
}
internal class System.Windows.Forms.Design.AdvancedBindingEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.Design.AdvancedBindingPropertyDescriptor : PropertyDescriptor {
    internal static AdvancedBindingEditor advancedBindingEditor;
    internal static AdvancedBindingTypeConverter advancedBindingTypeConverter;
    public Type ComponentType { get; }
    public AttributeCollection Attributes { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public TypeConverter Converter { get; }
    private static AdvancedBindingPropertyDescriptor();
    public virtual Type get_ComponentType();
    public virtual AttributeCollection get_Attributes();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual TypeConverter get_Converter();
    public virtual object GetEditor(Type type);
    public virtual bool CanResetValue(object component);
    protected virtual void FillAttributes(IList attributeList);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
public class System.Windows.Forms.Design.AnchorEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.Design.AutoSizeToolboxItem : ToolboxItem {
    public AutoSizeToolboxItem(Type toolType);
    protected virtual IComponent[] CreateComponentsCore(IDesignerHost host);
}
internal class System.Windows.Forms.Design.AxDesigner : ControlDesigner {
    private static AxDesigner();
    public virtual void Initialize(IComponent component);
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    protected virtual void PreFilterProperties(IDictionary properties);
    protected virtual void WndProc(Message& m);
}
internal class System.Windows.Forms.Design.AxHostDesigner : ControlDesigner {
    public DesignerVerbCollection Verbs { get; }
    private static AxHostDesigner();
    public virtual DesignerVerbCollection get_Verbs();
    public virtual void GetOleVerbs(DesignerVerbCollection rval);
    protected virtual bool GetHitTest(Point p);
    protected virtual ControlBodyGlyph GetControlGlyph(GlyphSelectionType selType);
    public virtual void Initialize(IComponent component);
    protected virtual void OnCreateHandle();
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    public virtual void OnVerb(object sender, EventArgs evevent);
    protected virtual void PreFilterProperties(IDictionary properties);
    protected virtual void WndProc(Message& m);
}
public class System.Windows.Forms.Design.AxImporter : object {
    internal Options options;
    internal string typeLibName;
    public String[] GeneratedAssemblies { get; }
    public TYPELIBATTR[] GeneratedTypeLibAttributes { get; }
    public String[] GeneratedSources { get; }
    public AxImporter(Options options);
    public String[] get_GeneratedAssemblies();
    public TYPELIBATTR[] get_GeneratedTypeLibAttributes();
    public String[] get_GeneratedSources();
    internal void AddRCW(ITypeLib typeLib, Assembly assem);
    internal Assembly FindRCW(ITypeLib typeLib);
    public static string GetFileOfTypeLib(TYPELIBATTR& tlibattr);
    internal string GenerateFromActiveXClsid(Guid clsid);
    public string GenerateFromFile(FileInfo file);
    public string GenerateFromTypeLibrary(UCOMITypeLib typeLib);
    public string GenerateFromTypeLibrary(UCOMITypeLib typeLib, Guid clsid);
    internal Assembly GetPrimaryInteropAssembly(ITypeLib typeLib, TypeLibConverter tlbConverter);
}
public class System.Windows.Forms.Design.AxParameterData : object {
    public FieldDirection Direction { get; }
    public bool IsByRef { get; }
    public bool IsIn { get; }
    public bool IsOut { get; }
    public bool IsOptional { get; }
    public string Name { get; public set; }
    public Type ParameterType { get; }
    internal ParameterInfo ParameterInfo { get; }
    internal Type ParameterBaseType { get; }
    public string TypeName { get; }
    public AxParameterData(string inname, string typeName);
    public AxParameterData(string inname, Type type);
    public AxParameterData(ParameterInfo info);
    public AxParameterData(ParameterInfo info, bool ignoreByRefs);
    public FieldDirection get_Direction();
    public bool get_IsByRef();
    public bool get_IsIn();
    public bool get_IsOut();
    public bool get_IsOptional();
    public string get_Name();
    public void set_Name(string value);
    public Type get_ParameterType();
    internal static Type GetByRefBaseType(Type t);
    internal ParameterInfo get_ParameterInfo();
    internal Type get_ParameterBaseType();
    public string get_TypeName();
    public static AxParameterData[] Convert(ParameterInfo[] infos);
    public static AxParameterData[] Convert(ParameterInfo[] infos, bool ignoreByRefs);
}
public class System.Windows.Forms.Design.AxWrapperGen : object {
    public static ArrayList GeneratedSources;
    internal static BooleanSwitch AxWrapper;
    internal static BooleanSwitch AxCodeGen;
    public AxWrapperGen(Type axType);
    private static AxWrapperGen();
    internal static string MapTypeName(Type type);
    internal static CustomAttributeData[] GetAttributeData(ICustomAttributeProvider attributeProvider, Type attributeType);
    internal static string GenerateWrappers(AxImporter importer, Guid axClsid, Assembly rcwAssem, String[] refAssemblies, DateTime tlbTimeStamp, bool ignoreRegisteredOcx, String& assem);
}
internal class System.Windows.Forms.Design.BaseContextMenuStrip : GroupedContextMenuStrip {
    public BaseContextMenuStrip(IServiceProvider provider, Component component);
    public virtual void RefreshItems();
}
public class System.Windows.Forms.Design.Behavior.Adorner : object {
    public BehaviorService BehaviorService { get; public set; }
    public bool Enabled { get; public set; }
    internal bool EnabledInternal { get; internal set; }
    public GlyphCollection Glyphs { get; }
    public BehaviorService get_BehaviorService();
    public void set_BehaviorService(BehaviorService value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    internal bool get_EnabledInternal();
    internal void set_EnabledInternal(bool value);
    public GlyphCollection get_Glyphs();
    public void Invalidate();
    public void Invalidate(Rectangle rectangle);
    public void Invalidate(Region region);
}
public abstract class System.Windows.Forms.Design.Behavior.Behavior : object {
    public Cursor Cursor { get; }
    public bool DisableAllCommands { get; }
    protected Behavior(bool callParentBehavior, BehaviorService behaviorService);
    public virtual Cursor get_Cursor();
    public virtual bool get_DisableAllCommands();
    public virtual MenuCommand FindCommand(CommandID commandId);
    public virtual void OnLoseCapture(Glyph g, EventArgs e);
    public virtual bool OnMouseDoubleClick(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseDown(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseEnter(Glyph g);
    public virtual bool OnMouseHover(Glyph g, Point mouseLoc);
    public virtual bool OnMouseLeave(Glyph g);
    public virtual bool OnMouseMove(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseUp(Glyph g, MouseButtons button);
    public virtual void OnDragDrop(Glyph g, DragEventArgs e);
    public virtual void OnDragEnter(Glyph g, DragEventArgs e);
    public virtual void OnDragLeave(Glyph g, EventArgs e);
    public virtual void OnDragOver(Glyph g, DragEventArgs e);
    public virtual void OnGiveFeedback(Glyph g, GiveFeedbackEventArgs e);
    public virtual void OnQueryContinueDrag(Glyph g, QueryContinueDragEventArgs e);
}
public class System.Windows.Forms.Design.Behavior.BehaviorDragDropEventArgs : EventArgs {
    public ICollection DragComponents { get; }
    public BehaviorDragDropEventArgs(ICollection dragComponents);
    public ICollection get_DragComponents();
}
public class System.Windows.Forms.Design.Behavior.BehaviorDragDropEventHandler : MulticastDelegate {
    public BehaviorDragDropEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BehaviorDragDropEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BehaviorDragDropEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.Design.Behavior.BehaviorService : object {
    public BehaviorServiceAdornerCollection Adorners { get; }
    internal int AdornerWindowIndex { get; }
    internal Control AdornerWindowControl { get; }
    public Graphics AdornerWindowGraphics { get; }
    public Behavior CurrentBehavior { get; }
    internal bool CancelDrag { get; internal set; }
    internal DesignerActionUI DesignerActionUI { get; internal set; }
    internal bool Dragging { get; }
    internal bool HasCapture { get; }
    internal bool UseSnapLines { get; }
    internal bool IsDisposed { get; }
    unknown String[] RecentSnapLines {internal set; }
    internal BehaviorService(IServiceProvider serviceProvider, Control windowFrame);
    private static BehaviorService();
    public BehaviorServiceAdornerCollection get_Adorners();
    internal int get_AdornerWindowIndex();
    internal Control get_AdornerWindowControl();
    public Graphics get_AdornerWindowGraphics();
    public Behavior get_CurrentBehavior();
    internal bool get_CancelDrag();
    internal void set_CancelDrag(bool value);
    internal DesignerActionUI get_DesignerActionUI();
    internal void set_DesignerActionUI(DesignerActionUI value);
    internal bool get_Dragging();
    internal bool get_HasCapture();
    internal bool get_UseSnapLines();
    public Point AdornerWindowPointToScreen(Point p);
    public Point AdornerWindowToScreen();
    public Point ControlToAdornerWindow(Control c);
    public Point MapAdornerWindowPoint(IntPtr handle, Point pt);
    public Rectangle ControlRectInAdornerWindow(Control c);
    internal bool get_IsDisposed();
    internal void set_RecentSnapLines(String[] value);
    public void add_BeginDrag(BehaviorDragDropEventHandler value);
    public void remove_BeginDrag(BehaviorDragDropEventHandler value);
    public void add_EndDrag(BehaviorDragDropEventHandler value);
    public void remove_EndDrag(BehaviorDragDropEventHandler value);
    public void add_Synchronize(EventHandler value);
    public void remove_Synchronize(EventHandler value);
    public sealed virtual void Dispose();
    internal DragDropEffects DoDragDrop(DropSourceBehavior dropSourceBehavior);
    internal void EndDragNotification();
    public Behavior GetNextBehavior(Behavior behavior);
    internal Glyph[] GetIntersectingGlyphs(Glyph primaryGlyph);
    internal void EnableAllAdorners(bool enabled);
    public void Invalidate();
    public void Invalidate(Rectangle rect);
    public void Invalidate(Region r);
    public void SyncSelection();
    public Behavior PopBehavior(Behavior behavior);
    internal void ProcessPaintMessage(Rectangle paintRect);
    public void PushBehavior(Behavior behavior);
    public void PushCaptureBehavior(Behavior behavior);
    public Point ScreenToAdornerWindow(Point p);
    internal void StartDragNotification();
    internal void OnLoseCapture();
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection : CollectionBase {
    public Adorner Item { get; public set; }
    public BehaviorServiceAdornerCollection(BehaviorService behaviorService);
    public BehaviorServiceAdornerCollection(BehaviorServiceAdornerCollection value);
    public BehaviorServiceAdornerCollection(Adorner[] value);
    public Adorner get_Item(int index);
    public void set_Item(int index, Adorner value);
    public int Add(Adorner value);
    public void AddRange(Adorner[] value);
    public void AddRange(BehaviorServiceAdornerCollection value);
    public bool Contains(Adorner value);
    public void CopyTo(Adorner[] array, int index);
    public int IndexOf(Adorner value);
    public void Insert(int index, Adorner value);
    public BehaviorServiceAdornerCollectionEnumerator GetEnumerator();
    public void Remove(Adorner value);
}
public class System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollectionEnumerator : object {
    public Adorner Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public BehaviorServiceAdornerCollectionEnumerator(BehaviorServiceAdornerCollection mappings);
    public Adorner get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public bool MoveNext();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    public void Reset();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
}
public class System.Windows.Forms.Design.Behavior.ComponentGlyph : Glyph {
    public IComponent RelatedComponent { get; }
    public ComponentGlyph(IComponent relatedComponent, Behavior behavior);
    public ComponentGlyph(IComponent relatedComponent);
    public IComponent get_RelatedComponent();
    public virtual Cursor GetHitTest(Point p);
    public virtual void Paint(PaintEventArgs pe);
}
internal class System.Windows.Forms.Design.Behavior.ContainerSelectorBehavior : Behavior {
    public Control ContainerControl { get; }
    public bool OkToMove { get; public set; }
    public Point InitialDragPoint { get; public set; }
    internal ContainerSelectorBehavior(Control containerControl, IServiceProvider serviceProvider);
    internal ContainerSelectorBehavior(Control containerControl, IServiceProvider serviceProvider, bool setInitialDragPoint);
    public Control get_ContainerControl();
    public bool get_OkToMove();
    public void set_OkToMove(bool value);
    public Point get_InitialDragPoint();
    public void set_InitialDragPoint(Point value);
    public virtual bool OnMouseDown(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseMove(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseUp(Glyph g, MouseButtons button);
}
internal class System.Windows.Forms.Design.Behavior.ContainerSelectorGlyph : Glyph {
    public Rectangle Bounds { get; }
    public Behavior RelatedBehavior { get; }
    internal ContainerSelectorGlyph(Rectangle containerBounds, int glyphSize, int glyphOffset, ContainerSelectorBehavior behavior);
    public virtual Rectangle get_Bounds();
    public Behavior get_RelatedBehavior();
    public virtual Cursor GetHitTest(Point p);
    public virtual void Paint(PaintEventArgs pe);
}
public class System.Windows.Forms.Design.Behavior.ControlBodyGlyph : ComponentGlyph {
    public Rectangle Bounds { get; }
    public ControlBodyGlyph(Rectangle bounds, Cursor cursor, IComponent relatedComponent, ControlDesigner designer);
    public ControlBodyGlyph(Rectangle bounds, Cursor cursor, IComponent relatedComponent, Behavior behavior);
    public virtual Cursor GetHitTest(Point p);
    public virtual Rectangle get_Bounds();
}
internal class System.Windows.Forms.Design.Behavior.DesignerActionBehavior : Behavior {
    internal DesignerActionListCollection ActionLists { get; internal set; }
    internal DesignerActionUI ParentUI { get; }
    internal IComponent RelatedComponent { get; }
    unknown bool IgnoreNextMouseUp {internal set; }
    internal DesignerActionBehavior(IServiceProvider serviceProvider, IComponent relatedComponent, DesignerActionListCollection actionLists, DesignerActionUI parentUI);
    internal DesignerActionListCollection get_ActionLists();
    internal void set_ActionLists(DesignerActionListCollection value);
    internal DesignerActionUI get_ParentUI();
    internal IComponent get_RelatedComponent();
    internal void HideUI();
    internal DesignerActionPanel CreateDesignerActionPanel(IComponent relatedComponent);
    internal void ShowUI(Glyph g);
    internal void set_IgnoreNextMouseUp(bool value);
    public virtual bool OnMouseDoubleClick(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseDown(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseUp(Glyph g, MouseButtons button);
}
internal class System.Windows.Forms.Design.Behavior.DesignerActionGlyph : Glyph {
    internal static int CONTROLOVERLAP_X;
    internal static int CONTROLOVERLAP_Y;
    public Rectangle Bounds { get; }
    public DockStyle DockEdge { get; public set; }
    public bool IsInComponentTray { get; }
    public DesignerActionGlyph(DesignerActionBehavior behavior, Adorner adorner);
    public DesignerActionGlyph(DesignerActionBehavior behavior, Rectangle alternativeBounds, Control alternativeParent);
    public virtual Rectangle get_Bounds();
    public DockStyle get_DockEdge();
    public void set_DockEdge(DockStyle value);
    public bool get_IsInComponentTray();
    public virtual Cursor GetHitTest(Point p);
    internal void InvalidateOwnerLocation();
    internal void Invalidate();
    public virtual void Paint(PaintEventArgs pe);
    internal void UpdateAlternativeBounds(Rectangle newBounds);
}
internal class System.Windows.Forms.Design.Behavior.DesignerActionKeyboardBehavior : Behavior {
    public DesignerActionKeyboardBehavior(DesignerActionPanel panel, IServiceProvider serviceProvider, BehaviorService behaviorService);
    private static DesignerActionKeyboardBehavior();
    public virtual MenuCommand FindCommand(CommandID commandId);
}
internal class System.Windows.Forms.Design.Behavior.DragAssistanceManager : object {
    internal DragAssistanceManager(IServiceProvider serviceProvider);
    internal DragAssistanceManager(IServiceProvider serviceProvider, ArrayList dragComponents);
    internal DragAssistanceManager(IServiceProvider serviceProvider, ArrayList dragComponents, bool resizing);
    internal DragAssistanceManager(IServiceProvider serviceProvider, Graphics graphics, ArrayList dragComponents, Image backgroundImage, bool ctrlDrag);
    internal DragAssistanceManager(IServiceProvider serviceProvider, Graphics graphics, ArrayList dragComponents, Image backgroundImage, bool resizing, bool ctrlDrag);
    internal void EraseSnapLines();
    internal Line[] GetRecentLines();
    internal Point OffsetToNearestSnapLocation(Control targetControl, IList targetSnaplines, Point directionOffset);
    internal Point OffsetToNearestSnapLocation(Control targetControl, Point directionOffset);
    internal Point OnMouseMove(Rectangle dragBounds, SnapLine[] snapLines);
    internal Point OnMouseMove(Rectangle dragBounds, SnapLine[] snapLines, Boolean& didSnap, bool shouldSnapHorizontally);
    internal Point OnMouseMove(Rectangle dragBounds);
    internal Point OnMouseMove(Control targetControl, SnapLine[] snapLines, Boolean& didSnap, bool shouldSnapHorizontally);
    internal void RenderSnapLinesInternal(Rectangle dragRect);
    internal void RenderSnapLinesInternal();
    internal void OnMouseUp();
}
internal class System.Windows.Forms.Design.Behavior.DropSourceBehavior : Behavior {
    internal DragDropEffects AllowedEffects { get; }
    internal DataObject DataObject { get; }
    internal DropSourceBehavior(ICollection dragComponents, Control source, Point initialMouseLocation);
    internal DragDropEffects get_AllowedEffects();
    internal DataObject get_DataObject();
    internal void GiveFeedback(object sender, GiveFeedbackEventArgs e);
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
    internal ArrayList GetSortedDragControls(Int32& primaryControlIndex);
    internal void QueryContinueDrag(object sender, QueryContinueDragEventArgs e);
    internal bool ShowHideDragControls(bool show);
    internal void CleanupDrag();
    internal void CleanupDrag(bool clearImages);
}
public abstract class System.Windows.Forms.Design.Behavior.Glyph : object {
    public Behavior Behavior { get; }
    public Rectangle Bounds { get; }
    protected Glyph(Behavior behavior);
    public virtual Behavior get_Behavior();
    public virtual Rectangle get_Bounds();
    public abstract virtual Cursor GetHitTest(Point p);
    public abstract virtual void Paint(PaintEventArgs pe);
    protected void SetBehavior(Behavior behavior);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.Design.Behavior.GlyphCollection : CollectionBase {
    public Glyph Item { get; public set; }
    public GlyphCollection(GlyphCollection value);
    public GlyphCollection(Glyph[] value);
    public Glyph get_Item(int index);
    public void set_Item(int index, Glyph value);
    public int Add(Glyph value);
    public void AddRange(Glyph[] value);
    public void AddRange(GlyphCollection value);
    public bool Contains(Glyph value);
    public void CopyTo(Glyph[] array, int index);
    public int IndexOf(Glyph value);
    public void Insert(int index, Glyph value);
    public void Remove(Glyph value);
}
public enum System.Windows.Forms.Design.Behavior.GlyphSelectionType : Enum {
    public int value__;
    public static GlyphSelectionType NotSelected;
    public static GlyphSelectionType Selected;
    public static GlyphSelectionType SelectedPrimary;
}
internal class System.Windows.Forms.Design.Behavior.GrabHandleGlyph : SelectionGlyphBase {
    internal GrabHandleGlyph(Rectangle controlBounds, GrabHandleGlyphType type, Behavior behavior, bool primarySelection);
    public virtual void Paint(PaintEventArgs pe);
}
internal enum System.Windows.Forms.Design.Behavior.GrabHandleGlyphType : Enum {
    public int value__;
    public static GrabHandleGlyphType UpperLeft;
    public static GrabHandleGlyphType UpperRight;
    public static GrabHandleGlyphType LowerLeft;
    public static GrabHandleGlyphType LowerRight;
    public static GrabHandleGlyphType MiddleTop;
    public static GrabHandleGlyphType MiddleBottom;
    public static GrabHandleGlyphType MiddleLeft;
    public static GrabHandleGlyphType MiddleRight;
}
internal class System.Windows.Forms.Design.Behavior.LockedBorderGlyph : SelectionGlyphBase {
    internal LockedBorderGlyph(Rectangle controlBounds, SelectionBorderGlyphType type);
    public virtual void Paint(PaintEventArgs pe);
}
internal class System.Windows.Forms.Design.Behavior.LockedHandleGlyph : SelectionGlyphBase {
    internal LockedHandleGlyph(Rectangle controlBounds, bool primarySelection);
    public virtual void Paint(PaintEventArgs pe);
}
internal class System.Windows.Forms.Design.Behavior.MiniLockedBorderGlyph : SelectionGlyphBase {
    internal MiniLockedBorderGlyph(Rectangle controlBounds, SelectionBorderGlyphType type, Behavior behavior, bool primarySelection);
    public virtual void Paint(PaintEventArgs pe);
}
internal class System.Windows.Forms.Design.Behavior.NoResizeHandleGlyph : SelectionGlyphBase {
    internal NoResizeHandleGlyph(Rectangle controlBounds, SelectionRules selRules, bool primarySelection, Behavior behavior);
    public virtual void Paint(PaintEventArgs pe);
}
internal class System.Windows.Forms.Design.Behavior.NoResizeSelectionBorderGlyph : SelectionGlyphBase {
    internal NoResizeSelectionBorderGlyph(Rectangle controlBounds, SelectionRules rules, SelectionBorderGlyphType type, Behavior behavior);
    public virtual void Paint(PaintEventArgs pe);
}
internal class System.Windows.Forms.Design.Behavior.ResizeBehavior : Behavior {
    public Cursor Cursor { get; }
    internal ResizeBehavior(IServiceProvider serviceProvider);
    public virtual Cursor get_Cursor();
    public virtual bool OnMouseDown(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual void OnLoseCapture(Glyph g, EventArgs e);
    internal static int AdjustPixelsForIntegralHeight(Control control, int pixelsMoved);
    public virtual bool OnMouseMove(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseUp(Glyph g, MouseButtons button);
}
internal class System.Windows.Forms.Design.Behavior.SelectionBorderGlyph : SelectionGlyphBase {
    internal SelectionBorderGlyph(Rectangle controlBounds, SelectionRules rules, SelectionBorderGlyphType type, Behavior behavior);
    public virtual void Paint(PaintEventArgs pe);
}
internal enum System.Windows.Forms.Design.Behavior.SelectionBorderGlyphType : Enum {
    public int value__;
    public static SelectionBorderGlyphType Top;
    public static SelectionBorderGlyphType Bottom;
    public static SelectionBorderGlyphType Left;
    public static SelectionBorderGlyphType Right;
    public static SelectionBorderGlyphType Body;
}
internal abstract class System.Windows.Forms.Design.Behavior.SelectionGlyphBase : Glyph {
    protected Rectangle bounds;
    protected Rectangle hitBounds;
    protected Cursor hitTestCursor;
    protected SelectionRules rules;
    public SelectionRules SelectionRules { get; }
    public Cursor HitTestCursor { get; }
    public Rectangle Bounds { get; }
    internal SelectionGlyphBase(Behavior behavior);
    public SelectionRules get_SelectionRules();
    public virtual Cursor GetHitTest(Point p);
    public Cursor get_HitTestCursor();
    public virtual Rectangle get_Bounds();
    public virtual void Paint(PaintEventArgs pe);
}
internal class System.Windows.Forms.Design.Behavior.SelectionManager : object {
    internal Adorner BodyGlyphAdorner { get; }
    internal bool NeedRefresh { get; internal set; }
    internal Adorner SelectionGlyphAdorner { get; }
    public SelectionManager(IServiceProvider serviceProvider, BehaviorService behaviorService);
    internal Adorner get_BodyGlyphAdorner();
    internal bool get_NeedRefresh();
    internal void set_NeedRefresh(bool value);
    internal Adorner get_SelectionGlyphAdorner();
    public sealed virtual void Dispose();
    public void Refresh();
    internal void OnBeginDrag(BehaviorDragDropEventArgs e);
}
public class System.Windows.Forms.Design.Behavior.SnapLine : object {
    internal static string Margin;
    internal static string MarginRight;
    internal static string MarginLeft;
    internal static string MarginBottom;
    internal static string MarginTop;
    internal static string Padding;
    internal static string PaddingRight;
    internal static string PaddingLeft;
    internal static string PaddingBottom;
    internal static string PaddingTop;
    public string Filter { get; }
    public bool IsHorizontal { get; }
    public bool IsVertical { get; }
    public int Offset { get; }
    public SnapLinePriority Priority { get; }
    public SnapLineType SnapLineType { get; }
    public SnapLine(SnapLineType type, int offset);
    public SnapLine(SnapLineType type, int offset, string filter);
    public SnapLine(SnapLineType type, int offset, SnapLinePriority priority);
    public SnapLine(SnapLineType type, int offset, string filter, SnapLinePriority priority);
    public string get_Filter();
    public bool get_IsHorizontal();
    public bool get_IsVertical();
    public int get_Offset();
    public SnapLinePriority get_Priority();
    public SnapLineType get_SnapLineType();
    public void AdjustOffset(int adjustment);
    public static bool ShouldSnap(SnapLine line1, SnapLine line2);
    public virtual string ToString();
}
public enum System.Windows.Forms.Design.Behavior.SnapLinePriority : Enum {
    public int value__;
    public static SnapLinePriority Low;
    public static SnapLinePriority Medium;
    public static SnapLinePriority High;
    public static SnapLinePriority Always;
}
public enum System.Windows.Forms.Design.Behavior.SnapLineType : Enum {
    public int value__;
    public static SnapLineType Top;
    public static SnapLineType Bottom;
    public static SnapLineType Left;
    public static SnapLineType Right;
    public static SnapLineType Horizontal;
    public static SnapLineType Vertical;
    public static SnapLineType Baseline;
}
internal class System.Windows.Forms.Design.Behavior.TableLayoutPanelBehavior : Behavior {
    internal TableLayoutPanelBehavior(TableLayoutPanel panel, TableLayoutPanelDesigner designer, IServiceProvider serviceProvider);
    public virtual void OnLoseCapture(Glyph g, EventArgs e);
    public virtual bool OnMouseDown(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseMove(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseUp(Glyph g, MouseButtons button);
}
internal class System.Windows.Forms.Design.Behavior.TableLayoutPanelResizeGlyph : Glyph {
    public Rectangle Bounds { get; }
    public TableLayoutStyle Style { get; }
    public TableLayoutResizeType Type { get; }
    internal TableLayoutPanelResizeGlyph(Rectangle controlBounds, TableLayoutStyle style, Cursor hitTestCursor, Behavior behavior);
    public virtual Rectangle get_Bounds();
    public TableLayoutStyle get_Style();
    public TableLayoutResizeType get_Type();
    public virtual Cursor GetHitTest(Point p);
    public virtual void Paint(PaintEventArgs pe);
}
internal class System.Windows.Forms.Design.Behavior.ToolboxItemSnapLineBehavior : Behavior {
    public bool IsPushed { get; public set; }
    public ToolboxItemSnapLineBehavior(IServiceProvider serviceProvider, BehaviorService behaviorService);
    public ToolboxItemSnapLineBehavior(IServiceProvider serviceProvider, BehaviorService behaviorService, ControlDesigner controlDesigner);
    public ToolboxItemSnapLineBehavior(IServiceProvider serviceProvider, BehaviorService behaviorService, ControlDesigner controlDesigner, bool allowDragBox);
    public bool get_IsPushed();
    public void set_IsPushed(bool value);
    public virtual void OnDragDrop(Glyph g, DragEventArgs e);
    public void OnBeginDrag();
    public virtual bool OnMouseMove(Glyph g, MouseButtons button, Point mouseLoc);
}
internal class System.Windows.Forms.Design.Behavior.ToolboxSnapDragDropEventArgs : DragEventArgs {
    public SnapDirection SnapDirections { get; }
    public Point Offset { get; }
    public ToolboxSnapDragDropEventArgs(SnapDirection snapDirections, Point offset, DragEventArgs origArgs);
    public SnapDirection get_SnapDirections();
    public Point get_Offset();
}
internal class System.Windows.Forms.Design.Behavior.ToolStripPanelSelectionBehavior : Behavior {
    internal ToolStripPanelSelectionBehavior(ToolStripPanel containerControl, IServiceProvider serviceProvider);
    public virtual bool OnMouseDown(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual void OnDragDrop(Glyph g, DragEventArgs e);
    public virtual void OnDragEnter(Glyph g, DragEventArgs e);
    public virtual void OnDragOver(Glyph g, DragEventArgs e);
}
internal class System.Windows.Forms.Design.Behavior.ToolStripPanelSelectionGlyph : ControlBodyGlyph {
    public bool IsExpanded { get; public set; }
    public Rectangle Bounds { get; }
    internal ToolStripPanelSelectionGlyph(Rectangle bounds, Cursor cursor, IComponent relatedComponent, IServiceProvider provider, ToolStripPanelSelectionBehavior behavior);
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public void UpdateGlyph();
    public virtual Rectangle get_Bounds();
    public virtual Cursor GetHitTest(Point p);
    public virtual void Paint(PaintEventArgs pe);
}
internal class System.Windows.Forms.Design.BindingFormattingDialog : Form {
    unknown ControlBindingsCollection Bindings {public set; }
    public ITypeDescriptorContext Context { get; public set; }
    public bool Dirty { get; }
    unknown IDesignerHost Host {public set; }
    public void set_Bindings(ControlBindingsCollection value);
    public ITypeDescriptorContext get_Context();
    public void set_Context(ITypeDescriptorContext value);
    public bool get_Dirty();
    public void set_Host(IDesignerHost value);
}
internal class System.Windows.Forms.Design.BindingFormattingWindowsFormsEditorService : Panel {
    unknown ITypeDescriptorContext Context {public set; }
    private IContainer System.ComponentModel.ITypeDescriptorContext.Container { get; }
    private object System.ComponentModel.ITypeDescriptorContext.Instance { get; }
    private PropertyDescriptor System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor { get; }
    public Binding Binding { get; public set; }
    unknown DataSourceUpdateMode DefaultDataSourceUpdateMode {public set; }
    unknown IComponent OwnerComponent {public set; }
    unknown string PropertyName {public set; }
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    public void set_Context(ITypeDescriptorContext value);
    private sealed virtual override IContainer System.ComponentModel.ITypeDescriptorContext.get_Container();
    private sealed virtual override object System.ComponentModel.ITypeDescriptorContext.get_Instance();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ITypeDescriptorContext.get_PropertyDescriptor();
    private sealed virtual override void System.ComponentModel.ITypeDescriptorContext.OnComponentChanged();
    private sealed virtual override bool System.ComponentModel.ITypeDescriptorContext.OnComponentChanging();
    private sealed virtual override object System.IServiceProvider.GetService(Type type);
    private sealed virtual override void System.Windows.Forms.Design.IWindowsFormsEditorService.CloseDropDown();
    private sealed virtual override void System.Windows.Forms.Design.IWindowsFormsEditorService.DropDownControl(Control ctl);
    private sealed virtual override DialogResult System.Windows.Forms.Design.IWindowsFormsEditorService.ShowDialog(Form form);
    public Binding get_Binding();
    public void set_Binding(Binding value);
    public void set_DefaultDataSourceUpdateMode(DataSourceUpdateMode value);
    public void set_OwnerComponent(IComponent value);
    public void set_PropertyName(string value);
    public void add_PropertyValueChanged(EventHandler value);
    public void remove_PropertyValueChanged(EventHandler value);
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs p);
    protected void OnPropertyValueChanged(EventArgs e);
    protected virtual bool ProcessDialogKey(Keys keyData);
}
internal class System.Windows.Forms.Design.BindingNavigatorDesigner : ToolStripDesigner {
    private static BindingNavigatorDesigner();
    public virtual void Initialize(IComponent component);
    protected virtual void Dispose(bool disposing);
    public virtual void InitializeNewComponent(IDictionary defaultValues);
}
internal class System.Windows.Forms.Design.BindingSourceDesigner : ComponentDesigner {
    unknown bool BindingUpdatedByUser {public set; }
    public void set_BindingUpdatedByUser(bool value);
    public virtual void Initialize(IComponent component);
    protected virtual void Dispose(bool disposing);
}
public class System.Windows.Forms.Design.BorderSidesEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.Design.ButtonBaseDesigner : ControlDesigner {
    public IList SnapLines { get; }
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    public virtual IList get_SnapLines();
}
internal class System.Windows.Forms.Design.ChangeToolStripParentVerb : object {
    internal ChangeToolStripParentVerb(string text, ToolStripDesigner designer);
    public void ChangeParent();
}
internal class System.Windows.Forms.Design.CollectionEditVerbManager : object {
    private IContainer System.ComponentModel.ITypeDescriptorContext.Container { get; }
    public DesignerVerb EditItemsVerb { get; }
    private object System.ComponentModel.ITypeDescriptorContext.Instance { get; }
    private PropertyDescriptor System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor { get; }
    internal CollectionEditVerbManager(string text, ComponentDesigner designer, PropertyDescriptor prop, bool addToDesignerVerbs);
    private sealed virtual override IContainer System.ComponentModel.ITypeDescriptorContext.get_Container();
    public DesignerVerb get_EditItemsVerb();
    private sealed virtual override void System.ComponentModel.ITypeDescriptorContext.OnComponentChanged();
    private sealed virtual override bool System.ComponentModel.ITypeDescriptorContext.OnComponentChanging();
    private sealed virtual override object System.ComponentModel.ITypeDescriptorContext.get_Instance();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ITypeDescriptorContext.get_PropertyDescriptor();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    private sealed virtual override void System.Windows.Forms.Design.IWindowsFormsEditorService.CloseDropDown();
    private sealed virtual override void System.Windows.Forms.Design.IWindowsFormsEditorService.DropDownControl(Control control);
    private sealed virtual override DialogResult System.Windows.Forms.Design.IWindowsFormsEditorService.ShowDialog(Form dialog);
}
internal class System.Windows.Forms.Design.ColumnHeaderCollectionEditor : CollectionEditor {
    protected string HelpTopic { get; }
    public ColumnHeaderCollectionEditor(Type type);
    protected virtual string get_HelpTopic();
    protected virtual object SetItems(object editValue, Object[] value);
    internal virtual void OnItemRemoving(object item);
}
internal class System.Windows.Forms.Design.ComboBoxDesigner : ControlDesigner {
    public IList SnapLines { get; }
    public SelectionRules SelectionRules { get; }
    public DesignerActionListCollection ActionLists { get; }
    public virtual IList get_SnapLines();
    protected virtual void Dispose(bool disposing);
    public virtual void Initialize(IComponent component);
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    public virtual SelectionRules get_SelectionRules();
    public virtual DesignerActionListCollection get_ActionLists();
}
internal class System.Windows.Forms.Design.CommandSet : object {
    protected ISite site;
    protected int selCount;
    protected IComponent primarySelection;
    protected bool controlsOnlySelection;
    protected DragAssistanceManager dragManager;
    protected BehaviorService BehaviorService { get; }
    protected IMenuCommandService MenuService { get; }
    protected ISelectionService SelectionService { get; }
    protected int SelectionVersion { get; }
    protected Timer SnapLineTimer { get; }
    public CommandSet(ISite site);
    protected BehaviorService get_BehaviorService();
    protected IMenuCommandService get_MenuService();
    protected ISelectionService get_SelectionService();
    protected int get_SelectionVersion();
    protected Timer get_SnapLineTimer();
    public virtual void Dispose();
    protected void EndDragManager();
    protected virtual ICollection GetCopySelection();
    protected PropertyDescriptor GetProperty(object comp, string propName);
    protected virtual object GetService(Type serviceType);
    protected virtual void GetSnapInformation(IDesignerHost host, IComponent component, Size& snapSize, IComponent& snapComponent, PropertyDescriptor& snapProperty);
    protected bool CanCheckout(IComponent comp);
    protected virtual bool OnKeyCancel(object sender);
    protected void OnKeyDefault(object sender, EventArgs e);
    protected virtual void OnKeyMove(object sender, EventArgs e);
    protected void OnMenuAlignByPrimary(object sender, EventArgs e);
    protected void OnMenuAlignToGrid(object sender, EventArgs e);
    protected void OnMenuCenterSelection(object sender, EventArgs e);
    protected void OnMenuCopy(object sender, EventArgs e);
    protected void OnMenuCut(object sender, EventArgs e);
    protected void OnMenuDelete(object sender, EventArgs e);
    protected void OnMenuPaste(object sender, EventArgs e);
    protected void OnMenuSelectAll(object sender, EventArgs e);
    protected void OnMenuShowGrid(object sender, EventArgs e);
    protected void OnMenuSizingCommand(object sender, EventArgs e);
    protected void OnMenuSizeToGrid(object sender, EventArgs e);
    protected void OnMenuDesignerProperties(object sender, EventArgs e);
    protected void OnMenuSnapToGrid(object sender, EventArgs e);
    protected void OnMenuSpacingCommand(object sender, EventArgs e);
    protected void OnSelectionChanged(object sender, EventArgs e);
    protected void OnStatusAlways(object sender, EventArgs e);
    protected void OnStatusAnySelection(object sender, EventArgs e);
    protected void OnStatusCopy(object sender, EventArgs e);
    protected void OnStatusCut(object sender, EventArgs e);
    protected void OnStatusDelete(object sender, EventArgs e);
    protected void OnStatusPaste(object sender, EventArgs e);
    protected virtual void OnStatusSelectAll(object sender, EventArgs e);
    protected virtual void OnUpdateCommandStatus();
}
public class System.Windows.Forms.Design.ComponentDocumentDesigner : ComponentDesigner {
    public Control Control { get; }
    public bool TrayAutoArrange { get; public set; }
    public bool TrayLargeIcon { get; public set; }
    private bool System.Windows.Forms.Design.IOleDragClient.CanModifyComponents { get; }
    private ViewTechnology[] System.ComponentModel.Design.IRootDesigner.SupportedTechnologies { get; }
    protected virtual void Dispose(bool disposing);
    public Control get_Control();
    public bool get_TrayAutoArrange();
    public void set_TrayAutoArrange(bool value);
    public bool get_TrayLargeIcon();
    public void set_TrayLargeIcon(bool value);
    protected virtual bool GetToolSupported(ToolboxItem tool);
    public virtual void Initialize(IComponent component);
    protected virtual void PreFilterProperties(IDictionary properties);
    private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.get_CanModifyComponents();
    private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.AddComponent(IComponent component, string name, bool firstAdd);
    private sealed virtual override Control System.Windows.Forms.Design.IOleDragClient.GetControlForComponent(object component);
    private sealed virtual override Control System.Windows.Forms.Design.IOleDragClient.GetDesignerControl();
    private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.IsDropOk(IComponent component);
    private sealed virtual override ViewTechnology[] System.ComponentModel.Design.IRootDesigner.get_SupportedTechnologies();
    private sealed virtual override object System.ComponentModel.Design.IRootDesigner.GetView(ViewTechnology technology);
    private sealed virtual override bool System.Drawing.Design.IToolboxUser.GetToolSupported(ToolboxItem tool);
    private sealed virtual override void System.Drawing.Design.IToolboxUser.ToolPicked(ToolboxItem tool);
    private sealed virtual override bool System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(IComponent component, IDictionary attributes);
    private sealed virtual override bool System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(IComponent component, IDictionary events);
    private sealed virtual override bool System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(IComponent component, IDictionary properties);
}
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[ProvidePropertyAttribute("Location", "System.ComponentModel.IComponent")]
[ProvidePropertyAttribute("TrayLocation", "System.ComponentModel.IComponent")]
public class System.Windows.Forms.Design.ComponentTray : ScrollableControl {
    internal OleDragDropHandler oleDragDropHandler;
    public bool AutoArrange { get; public set; }
    public int ComponentCount { get; }
    internal SelectionUIHandler DragHandler { get; }
    internal GlyphCollection SelectionGlyphs { get; }
    public bool ShowLargeIcons { get; public set; }
    internal bool IsWindowVisible { get; }
    internal Size ParentGridSize { get; }
    private bool System.Windows.Forms.Design.IOleDragClient.CanModifyComponents { get; }
    private IComponent System.Windows.Forms.Design.IOleDragClient.Component { get; }
    public ComponentTray(IDesigner mainDesigner, IServiceProvider serviceProvider);
    private static ComponentTray();
    public bool get_AutoArrange();
    public void set_AutoArrange(bool value);
    public int get_ComponentCount();
    internal virtual SelectionUIHandler get_DragHandler();
    internal GlyphCollection get_SelectionGlyphs();
    public bool get_ShowLargeIcons();
    public void set_ShowLargeIcons(bool value);
    internal bool get_IsWindowVisible();
    internal Size get_ParentGridSize();
    public virtual void AddComponent(IComponent component);
    private sealed virtual override bool System.ComponentModel.IExtenderProvider.CanExtend(object component);
    protected virtual bool CanCreateComponentFromTool(ToolboxItem tool);
    protected virtual bool CanDisplayComponent(IComponent component);
    public void CreateComponentFromTool(ToolboxItem tool);
    protected void DisplayError(Exception e);
    protected virtual void Dispose(bool disposing);
    internal void FocusDesigner();
    internal Size GetDragDimensions();
    public IComponent GetNextComponent(IComponent component, bool forward);
    internal virtual OleDragDropHandler GetOleDragHandler();
    [CategoryAttribute("Layout")]
[LocalizableAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlLocationDescr")]
[DesignOnlyAttribute("True")]
public Point GetLocation(IComponent receiver);
    [CategoryAttribute("Layout")]
[LocalizableAttribute("False")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("ControlLocationDescr")]
[DesignOnlyAttribute("True")]
public Point GetTrayLocation(IComponent receiver);
    protected virtual object GetService(Type serviceType);
    internal TrayControl GetTrayControlFromComponent(IComponent comp);
    public bool IsTrayComponent(IComponent comp);
    internal void UpdatePastePositions(ArrayList components);
    protected virtual void OnMouseDoubleClick(MouseEventArgs e);
    protected virtual void OnGiveFeedback(GiveFeedbackEventArgs gfevent);
    protected virtual void OnDragDrop(DragEventArgs de);
    protected virtual void OnDragEnter(DragEventArgs de);
    protected virtual void OnDragLeave(EventArgs e);
    protected virtual void OnDragOver(DragEventArgs de);
    protected virtual void OnLayout(LayoutEventArgs levent);
    protected virtual void OnLostCapture();
    internal void OnMessage(Message& m);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnPaint(PaintEventArgs pe);
    protected virtual void OnSetCursor();
    public virtual void RemoveComponent(IComponent component);
    public void SetLocation(IComponent receiver, Point location);
    public void SetTrayLocation(IComponent receiver, Point location);
    protected virtual void WndProc(Message& m);
    private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.get_CanModifyComponents();
    private sealed virtual override IComponent System.Windows.Forms.Design.IOleDragClient.get_Component();
    private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.AddComponent(IComponent component, string name, bool firstAdd);
    private sealed virtual override Control System.Windows.Forms.Design.IOleDragClient.GetControlForComponent(object component);
    private sealed virtual override Control System.Windows.Forms.Design.IOleDragClient.GetDesignerControl();
    private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.IsDropOk(IComponent component);
    private sealed virtual override bool System.Windows.Forms.Design.ISelectionUIHandler.BeginDrag(Object[] components, SelectionRules rules, int initialX, int initialY);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIHandler.DragMoved(Object[] components, Rectangle offset);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIHandler.EndDrag(Object[] components, bool cancel);
    private sealed virtual override Rectangle System.Windows.Forms.Design.ISelectionUIHandler.GetComponentBounds(object component);
    private sealed virtual override SelectionRules System.Windows.Forms.Design.ISelectionUIHandler.GetComponentRules(object component);
    private sealed virtual override Rectangle System.Windows.Forms.Design.ISelectionUIHandler.GetSelectionClipRect(object component);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIHandler.OleDragEnter(DragEventArgs de);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIHandler.OleDragDrop(DragEventArgs de);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIHandler.OleDragOver(DragEventArgs de);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIHandler.OleDragLeave();
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIHandler.OnSelectionDoubleClick(IComponent component);
    private sealed virtual override bool System.Windows.Forms.Design.ISelectionUIHandler.QueryBeginDrag(Object[] components, SelectionRules rules, int initialX, int initialY);
    internal void RearrangeInAutoSlots(Control c, Point pos);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIHandler.ShowContextMenu(IComponent component);
}
internal class System.Windows.Forms.Design.CompositionCommandSet : CommandSet {
    public CompositionCommandSet(Control compositionUI, ISite site);
    public virtual void Dispose();
    protected virtual bool OnKeyCancel(object sender);
    protected void OnKeySelect(object sender, EventArgs e);
    protected virtual void OnUpdateCommandStatus();
}
internal class System.Windows.Forms.Design.ContainerSelectorActiveEventArgs : EventArgs {
    public ContainerSelectorActiveEventArgs(object component);
    public ContainerSelectorActiveEventArgs(object component, ContainerSelectorActiveEventArgsType eventType);
}
internal enum System.Windows.Forms.Design.ContainerSelectorActiveEventArgsType : Enum {
    public int value__;
    public static ContainerSelectorActiveEventArgsType Contextmenu;
    public static ContainerSelectorActiveEventArgsType Mouse;
}
internal class System.Windows.Forms.Design.ContainerSelectorActiveEventHandler : MulticastDelegate {
    public ContainerSelectorActiveEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ContainerSelectorActiveEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ContainerSelectorActiveEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Windows.Forms.Design.ContextMenuStripActionList : DesignerActionList {
    public bool AutoShow { get; public set; }
    public bool ShowImageMargin { get; public set; }
    public bool ShowCheckMargin { get; public set; }
    public ToolStripRenderMode RenderMode { get; public set; }
    public ContextMenuStripActionList(ToolStripDropDownDesigner designer);
    public virtual bool get_AutoShow();
    public virtual void set_AutoShow(bool value);
    public bool get_ShowImageMargin();
    public void set_ShowImageMargin(bool value);
    public bool get_ShowCheckMargin();
    public void set_ShowCheckMargin(bool value);
    public ToolStripRenderMode get_RenderMode();
    public void set_RenderMode(ToolStripRenderMode value);
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
internal class System.Windows.Forms.Design.ContextMenuStripGroup : object {
    public List`1<ToolStripItem> Items { get; }
    public ContextMenuStripGroup(string name);
    public List`1<ToolStripItem> get_Items();
}
[DefaultMemberAttribute("Item")]
internal class System.Windows.Forms.Design.ContextMenuStripGroupCollection : DictionaryBase {
    public ContextMenuStripGroup Item { get; }
    public ContextMenuStripGroup get_Item(string key);
    public bool ContainsKey(string key);
    protected virtual void OnInsert(object key, object value);
    protected virtual void OnSet(object key, object oldValue, object newValue);
}
internal class System.Windows.Forms.Design.ControlBindingsConverter : TypeConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.Design.ControlCodeDomSerializer : CodeDomSerializer {
    public virtual object Deserialize(IDesignerSerializationManager manager, object codeObject);
    protected virtual bool HasSitedNonReadonlyChildren(Control parent);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
internal class System.Windows.Forms.Design.ControlCommandSet : CommandSet {
    public ControlCommandSet(ISite site);
    public virtual void Dispose();
    protected virtual void GetSnapInformation(IDesignerHost host, IComponent component, Size& snapSize, IComponent& snapComponent, PropertyDescriptor& snapProperty);
    protected virtual bool OnKeyCancel(object sender);
    protected void OnKeySize(object sender, EventArgs e);
    protected void OnKeySelect(object sender, EventArgs e);
    protected virtual void OnKeyMove(object sender, EventArgs e);
    protected void OnMenuLockControls(object sender, EventArgs e);
    protected void OnStatusAnyControls(object sender, EventArgs e);
    protected void OnStatusControlsOnlySelection(object sender, EventArgs e);
    protected void OnStatusControlsOnlySelectionAndGrid(object sender, EventArgs e);
    protected void OnStatusLockControls(object sender, EventArgs e);
    protected void OnStatusMultiSelect(object sender, EventArgs e);
    protected void OnStatusMultiSelectPrimary(object sender, EventArgs e);
    protected void OnStatusShowGrid(object sender, EventArgs e);
    protected void OnStatusSnapToGrid(object sender, EventArgs e);
    protected virtual void OnUpdateCommandStatus();
}
public class System.Windows.Forms.Design.ControlDesigner : ComponentDesigner {
    protected static Point InvalidPoint;
    protected AccessibleObject accessibilityObj;
    protected BehaviorService BehaviorService { get; }
    internal bool ForceVisible { get; internal set; }
    public ICollection AssociatedComponents { get; }
    public AccessibleObject AccessibilityObject { get; }
    public Control Control { get; }
    protected bool EnableDragRect { get; }
    protected IComponent ParentComponent { get; }
    public bool ParticipatesWithSnapLines { get; }
    public bool AutoResizeHandles { get; public set; }
    public SelectionRules SelectionRules { get; }
    internal bool ControlSupportsSnaplines { get; }
    public IList SnapLines { get; }
    internal Behavior StandardBehavior { get; }
    internal bool SerializePerformLayout { get; }
    internal Behavior MoveBehavior { get; }
    protected InheritanceAttribute InheritanceAttribute { get; }
    private static ControlDesigner();
    protected BehaviorService get_BehaviorService();
    internal bool get_ForceVisible();
    internal void set_ForceVisible(bool value);
    public virtual ICollection get_AssociatedComponents();
    public virtual AccessibleObject get_AccessibilityObject();
    public virtual Control get_Control();
    protected virtual bool get_EnableDragRect();
    protected virtual IComponent get_ParentComponent();
    public virtual bool get_ParticipatesWithSnapLines();
    public virtual int NumberOfInternalControlDesigners();
    public virtual ControlDesigner InternalControlDesigner(int internalControlIndex);
    public bool get_AutoResizeHandles();
    public void set_AutoResizeHandles(bool value);
    public virtual SelectionRules get_SelectionRules();
    internal virtual bool get_ControlSupportsSnaplines();
    internal Point GetOffsetToClientArea();
    internal IList SnapLinesInternal();
    internal IList SnapLinesInternal(Padding margin);
    public virtual IList get_SnapLines();
    internal virtual Behavior get_StandardBehavior();
    internal virtual bool get_SerializePerformLayout();
    internal Behavior get_MoveBehavior();
    protected virtual InheritanceAttribute get_InheritanceAttribute();
    protected void BaseWndProc(Message& m);
    internal virtual bool CanBeAssociatedWith(IDesigner parentDesigner);
    public virtual bool CanBeParentedTo(IDesigner parentDesigner);
    protected void DefWndProc(Message& m);
    protected void DisplayError(Exception e);
    protected virtual void Dispose(bool disposing);
    protected bool EnableDesignMode(Control child, string name);
    protected void EnableDragDrop(bool value);
    protected virtual ControlBodyGlyph GetControlGlyph(GlyphSelectionType selectionType);
    internal ControlBodyGlyph GetControlGlyphInternal(GlyphSelectionType selectionType);
    public virtual GlyphCollection GetGlyphs(GlyphSelectionType selectionType);
    protected virtual bool GetHitTest(Point point);
    protected void HookChildControls(Control firstChild);
    internal void HookChildHandles(IntPtr firstChild);
    internal void RemoveSubclassedWindow(IntPtr hwnd);
    public virtual void Initialize(IComponent component);
    public virtual void InitializeExistingComponent(IDictionary defaultValues);
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    [ObsoleteAttribute("This method has been deprecated. Use InitializeNewComponent instead.  http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual void OnSetComponentDefaults();
    protected virtual void OnContextMenu(int x, int y);
    protected virtual void OnCreateHandle();
    protected virtual void OnDragEnter(DragEventArgs de);
    protected virtual void OnDragComplete(DragEventArgs de);
    protected virtual void OnDragDrop(DragEventArgs de);
    protected virtual void OnDragLeave(EventArgs e);
    protected virtual void OnDragOver(DragEventArgs de);
    protected virtual void OnGiveFeedback(GiveFeedbackEventArgs e);
    protected virtual void OnMouseDragBegin(int x, int y);
    protected virtual void OnMouseDragEnd(bool cancel);
    protected virtual void OnMouseDragMove(int x, int y);
    protected virtual void OnMouseEnter();
    protected virtual void OnMouseHover();
    protected virtual void OnMouseLeave();
    protected virtual void OnPaintAdornments(PaintEventArgs pe);
    protected virtual void OnSetCursor();
    protected virtual void PreFilterProperties(IDictionary properties);
    internal void SetUnhandledException(Control owner, Exception exception);
    protected void UnhookChildControls(Control firstChild);
    protected virtual void WndProc(Message& m);
}
internal class System.Windows.Forms.Design.CustomMenuItemCollection : CollectionBase {
    public int Add(ToolStripItem value);
    public void AddRange(ToolStripItem[] value);
    public virtual void RefreshItems();
}
internal class System.Windows.Forms.Design.DataGridAutoFormatDialog : Form {
    internal static string scheme;
    internal static string data;
    public DataRow SelectedData { get; }
    internal DataGridAutoFormatDialog(DataGrid dgrid);
    public DataRow get_SelectedData();
}
internal class System.Windows.Forms.Design.DataGridColumnCollectionEditor : CollectionEditor {
    public DataGridColumnCollectionEditor(Type type);
    protected virtual Type[] CreateNewItemTypes();
}
internal class System.Windows.Forms.Design.DataGridColumnStyleMappingNameEditor : UITypeEditor {
    public bool IsDropDownResizable { get; }
    public virtual bool get_IsDropDownResizable();
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.Design.DataGridDesigner : ControlDesigner {
    protected DesignerVerbCollection designerVerbs;
    public DesignerVerbCollection Verbs { get; }
    public virtual void Initialize(IComponent component);
    protected virtual void Dispose(bool disposing);
    public virtual DesignerVerbCollection get_Verbs();
}
internal class System.Windows.Forms.Design.DataGridTableStyleMappingNameEditor : UITypeEditor {
    public bool IsDropDownResizable { get; }
    public virtual bool get_IsDropDownResizable();
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.Design.DataGridViewAddColumnDialog : Form {
    public DataGridViewAddColumnDialog(DataGridViewColumnCollection dataGridViewColumns, DataGridView liveDataGridView);
    private static DataGridViewAddColumnDialog();
    protected virtual void Dispose(bool disposing);
    public static ComponentDesigner GetComponentDesignerForType(ITypeResolutionService tr, Type type);
    protected virtual bool ProcessDialogKey(Keys keyData);
    internal void Start(int insertAtPosition, bool persistChangesToDesigner);
    public static bool ValidName(string name, DataGridViewColumnCollection columns, IContainer container, INameCreationService nameCreationService, DataGridViewColumnCollection liveColumns, bool allowDuplicateNameInLiveColumnCollection);
    public static bool ValidName(string name, DataGridViewColumnCollection columns, IContainer container, INameCreationService nameCreationService, DataGridViewColumnCollection liveColumns, bool allowDuplicateNameInLiveColumnCollection, String& errorString);
}
internal class System.Windows.Forms.Design.DataGridViewCellStyleBuilder : Form {
    public DataGridViewCellStyle CellStyle { get; public set; }
    unknown ITypeDescriptorContext Context {public set; }
    public DataGridViewCellStyleBuilder(IServiceProvider serviceProvider, IComponent comp);
    public DataGridViewCellStyle get_CellStyle();
    public void set_CellStyle(DataGridViewCellStyle value);
    public void set_Context(ITypeDescriptorContext value);
    protected virtual void Dispose(bool disposing);
    protected virtual bool ProcessDialogKey(Keys keyData);
}
internal class System.Windows.Forms.Design.DataGridViewCellStyleEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.Design.DataGridViewColumnCollectionDialog : Form {
    internal DataGridViewColumnCollectionDialog(IServiceProvider provider);
    private static DataGridViewColumnCollectionDialog();
    protected virtual void Dispose(bool disposing);
    internal void SetLiveDataGridView(DataGridView dataGridView);
}
internal class System.Windows.Forms.Design.DataGridViewColumnCollectionEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.Design.DataGridViewColumnDataPropertyNameEditor : UITypeEditor {
    public bool IsDropDownResizable { get; }
    public virtual bool get_IsDropDownResizable();
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.Design.DataGridViewColumnDesigner : ComponentDesigner {
    unknown DataGridView LiveDataGridView {public set; }
    public void set_LiveDataGridView(DataGridView value);
    public virtual void Initialize(IComponent component);
    protected virtual void Dispose(bool disposing);
    protected virtual void PreFilterProperties(IDictionary properties);
}
internal class System.Windows.Forms.Design.DataGridViewColumnTypeEditor : UITypeEditor {
    public bool IsDropDownResizable { get; }
    public virtual bool get_IsDropDownResizable();
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
internal class System.Windows.Forms.Design.DataGridViewColumnTypePicker : ContainerControl {
    public Type SelectedType { get; }
    private static DataGridViewColumnTypePicker();
    public Type get_SelectedType();
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    public void Start(IWindowsFormsEditorService edSvc, ITypeDiscoveryService discoveryService, Type defaultType);
}
internal class System.Windows.Forms.Design.DataGridViewComboBoxColumnDesigner : DataGridViewColumnDesigner {
    protected virtual void PreFilterProperties(IDictionary properties);
}
internal class System.Windows.Forms.Design.DataGridViewComponentPropertyGridSite : object {
    public IComponent Component { get; }
    public IContainer Container { get; }
    public bool DesignMode { get; }
    public string Name { get; public set; }
    public DataGridViewComponentPropertyGridSite(IServiceProvider sp, IComponent comp);
    public sealed virtual IComponent get_Component();
    public sealed virtual IContainer get_Container();
    public sealed virtual bool get_DesignMode();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual object GetService(Type t);
}
internal class System.Windows.Forms.Design.DataGridViewDesigner : ControlDesigner {
    protected DesignerVerbCollection designerVerbs;
    public ICollection AssociatedComponents { get; }
    public DataGridViewAutoSizeColumnsMode AutoSizeColumnsMode { get; public set; }
    public object DataSource { get; public set; }
    protected InheritanceAttribute InheritanceAttribute { get; }
    public DesignerVerbCollection Verbs { get; }
    public DesignerActionListCollection ActionLists { get; }
    private static DataGridViewDesigner();
    public virtual ICollection get_AssociatedComponents();
    public DataGridViewAutoSizeColumnsMode get_AutoSizeColumnsMode();
    public void set_AutoSizeColumnsMode(DataGridViewAutoSizeColumnsMode value);
    public object get_DataSource();
    public void set_DataSource(object value);
    protected virtual void Dispose(bool disposing);
    public virtual void Initialize(IComponent component);
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    protected virtual InheritanceAttribute get_InheritanceAttribute();
    public virtual DesignerVerbCollection get_Verbs();
    public virtual DesignerActionListCollection get_ActionLists();
    protected virtual void PreFilterProperties(IDictionary properties);
    internal static void ShowErrorDialog(IUIService uiService, Exception ex, Control dataGridView);
    internal static void ShowErrorDialog(IUIService uiService, string errorString, Control dataGridView);
    public void OnEditColumns(object sender, EventArgs e);
    public void OnAddColumn(object sender, EventArgs e);
}
internal class System.Windows.Forms.Design.DataGridViewRowCollectionCodeDomSerializer : CollectionCodeDomSerializer {
    internal static DataGridViewRowCollectionCodeDomSerializer DefaultSerializer { get; }
    internal static DataGridViewRowCollectionCodeDomSerializer get_DefaultSerializer();
    protected virtual object SerializeCollection(IDesignerSerializationManager manager, CodeExpression targetExpression, Type targetType, ICollection originalCollection, ICollection valuesToSerialize);
}
internal class System.Windows.Forms.Design.DataMemberFieldConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Windows.Forms.Design.DataMemberFieldEditor : UITypeEditor {
    public bool IsDropDownResizable { get; }
    public virtual bool get_IsDropDownResizable();
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.Design.DataMemberListEditor : UITypeEditor {
    public bool IsDropDownResizable { get; }
    public virtual bool get_IsDropDownResizable();
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.Design.DataSourceConverter : ReferenceConverter {
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Windows.Forms.Design.DataSourceListEditor : UITypeEditor {
    public bool IsDropDownResizable { get; }
    public virtual bool get_IsDropDownResizable();
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.Design.DateTimePickerDesigner : ControlDesigner {
    public SelectionRules SelectionRules { get; }
    public IList SnapLines { get; }
    public virtual SelectionRules get_SelectionRules();
    public virtual IList get_SnapLines();
}
[EditorAttribute("System.Windows.Forms.Design.DesignBindingEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
internal class System.Windows.Forms.Design.DesignBinding : object {
    public static DesignBinding Null;
    public bool IsNull { get; }
    public object DataSource { get; }
    public string DataMember { get; }
    public string DataField { get; }
    public DesignBinding(object dataSource, string dataMember);
    private static DesignBinding();
    public bool get_IsNull();
    public object get_DataSource();
    public string get_DataMember();
    public string get_DataField();
    public bool Equals(object dataSource, string dataMember);
}
internal class System.Windows.Forms.Design.DesignBindingConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type destType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class System.Windows.Forms.Design.DesignBindingEditor : UITypeEditor {
    public bool IsDropDownResizable { get; }
    public virtual bool get_IsDropDownResizable();
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
internal class System.Windows.Forms.Design.DesignBindingPicker : ContainerControl {
    private static DesignBindingPicker();
    public DesignBinding Pick(ITypeDescriptorContext context, IServiceProvider provider, bool showDataSources, bool showDataMembers, bool selectListMembers, object rootDataSource, string rootDataMember, DesignBinding initialSelectedItem);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
}
internal class System.Windows.Forms.Design.DesignBindingPropertyDescriptor : PropertyDescriptor {
    public Type ComponentType { get; }
    public TypeConverter Converter { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    internal DesignBindingPropertyDescriptor(PropertyDescriptor property, Attribute[] attrs, bool readOnly);
    private static DesignBindingPropertyDescriptor();
    public virtual Type get_ComponentType();
    public virtual TypeConverter get_Converter();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
internal class System.Windows.Forms.Design.DesignBindingValueUIHandler : object {
    internal Bitmap DataBitmap { get; }
    internal Bitmap get_DataBitmap();
    internal void OnGetUIValueItem(ITypeDescriptorContext context, PropertyDescriptor propDesc, ArrayList valueUIItemList);
    public sealed virtual void Dispose();
}
internal class System.Windows.Forms.Design.DesignerActionToolStripDropDown : ToolStripDropDown {
    public DesignerActionPanel CurrentPanel { get; }
    protected bool TopMost { get; }
    public DesignerActionToolStripDropDown(DesignerActionUI designerActionUI, IWin32Window mainParentWindow);
    public DesignerActionPanel get_CurrentPanel();
    protected virtual bool get_TopMost();
    public void UpdateContainerSize();
    public void CheckFocusIsRight();
    protected virtual void OnLayout(LayoutEventArgs levent);
    protected virtual void OnClosing(ToolStripDropDownClosingEventArgs e);
    public void SetDesignerActionPanel(DesignerActionPanel panel, Glyph relatedGlyph);
    protected virtual void SetVisibleCore(bool visible);
    internal static string GetControlInformation(IntPtr hwnd);
    protected virtual void WndProc(Message& m);
    protected virtual bool ProcessDialogKey(Keys keyData);
}
internal class System.Windows.Forms.Design.DesignerActionUI : object {
    internal DesignerActionToolStripDropDown designerActionHost;
    internal static TraceSwitch DropDownVisibilityDebug;
    internal bool IsDesignerActionPanelVisible { get; }
    internal IComponent LastPanelComponent { get; }
    public DesignerActionUI(IServiceProvider serviceProvider, Adorner containerAdorner);
    private static DesignerActionUI();
    public sealed virtual void Dispose();
    public DesignerActionGlyph GetDesignerActionGlyph(IComponent comp);
    internal DesignerActionGlyph GetDesignerActionGlyph(IComponent comp, DesignerActionListCollection dalColl);
    internal bool ShowDesignerActionPanelForPrimarySelection();
    internal void RemoveActionGlyph(object relatedObject);
    internal void HideDesignerActionPanel();
    internal bool get_IsDesignerActionPanelVisible();
    internal IComponent get_LastPanelComponent();
    internal Point UpdateDAPLocation(IComponent component, DesignerActionGlyph glyph);
    internal void ShowDesignerActionPanel(IComponent relatedComponent, DesignerActionPanel panel, DesignerActionGlyph glyph);
}
internal class System.Windows.Forms.Design.DesignerContextDescriptor : object {
    private IContainer System.ComponentModel.ITypeDescriptorContext.Container { get; }
    private object System.ComponentModel.ITypeDescriptorContext.Instance { get; }
    private PropertyDescriptor System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor { get; }
    public DesignerContextDescriptor(Component component, PropertyDescriptor imageProperty, IDesignerHost host);
    public Image OpenImageCollection();
    private sealed virtual override IContainer System.ComponentModel.ITypeDescriptorContext.get_Container();
    private sealed virtual override object System.ComponentModel.ITypeDescriptorContext.get_Instance();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ITypeDescriptorContext.get_PropertyDescriptor();
    private sealed virtual override void System.ComponentModel.ITypeDescriptorContext.OnComponentChanged();
    private sealed virtual override bool System.ComponentModel.ITypeDescriptorContext.OnComponentChanging();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    private sealed virtual override void System.Windows.Forms.Design.IWindowsFormsEditorService.CloseDropDown();
    private sealed virtual override void System.Windows.Forms.Design.IWindowsFormsEditorService.DropDownControl(Control control);
    private sealed virtual override DialogResult System.Windows.Forms.Design.IWindowsFormsEditorService.ShowDialog(Form dialog);
}
internal class System.Windows.Forms.Design.DesignerExtenders : object {
    public DesignerExtenders(IExtenderProviderService ex);
    public void Dispose();
}
internal class System.Windows.Forms.Design.DesignerFrame : Control {
    internal Point AutoScrollPosition { get; }
    public DesignerFrame(ISite site);
    internal Point get_AutoScrollPosition();
    protected virtual void Dispose(bool disposing);
    public void Initialize(Control view);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual bool ProcessDialogKey(Keys keyData);
    protected virtual void WndProc(Message& m);
    private sealed virtual override int System.Windows.Forms.Design.IOverlayService.PushOverlay(Control control);
    private sealed virtual override void System.Windows.Forms.Design.IOverlayService.RemoveOverlay(Control control);
    private sealed virtual override void System.Windows.Forms.Design.IOverlayService.InsertOverlay(Control control, int index);
    private sealed virtual override void System.Windows.Forms.Design.IOverlayService.InvalidateOverlays(Rectangle screenRectangle);
    private sealed virtual override void System.Windows.Forms.Design.IOverlayService.InvalidateOverlays(Region screenRegion);
    private sealed virtual override void System.Windows.Forms.Design.ISplitWindowService.AddSplitWindow(Control window);
    private sealed virtual override void System.Windows.Forms.Design.ISplitWindowService.RemoveSplitWindow(Control window);
    private sealed virtual override IEnumerable System.Windows.Forms.Design.IContainsThemedScrollbarWindows.ThemedScrollbarWindows();
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.Design.DesignerOptions : object {
    [SRCategoryAttribute("DesignerOptions_LayoutSettings")]
[SRDisplayNameAttribute("DesignerOptions_GridSizeDisplayName")]
[SRDescriptionAttribute("DesignerOptions_GridSizeDesc")]
public Size GridSize { get; public set; }
    [SRCategoryAttribute("DesignerOptions_LayoutSettings")]
[SRDisplayNameAttribute("DesignerOptions_ShowGridDisplayName")]
[SRDescriptionAttribute("DesignerOptions_ShowGridDesc")]
public bool ShowGrid { get; public set; }
    [SRCategoryAttribute("DesignerOptions_LayoutSettings")]
[SRDisplayNameAttribute("DesignerOptions_SnapToGridDisplayName")]
[SRDescriptionAttribute("DesignerOptions_SnapToGridDesc")]
public bool SnapToGrid { get; public set; }
    [SRCategoryAttribute("DesignerOptions_LayoutSettings")]
[SRDescriptionAttribute("DesignerOptions_UseSnapLines")]
public bool UseSnapLines { get; public set; }
    [SRCategoryAttribute("DesignerOptions_LayoutSettings")]
[SRDescriptionAttribute("DesignerOptions_UseSmartTags")]
public bool UseSmartTags { get; public set; }
    [SRDisplayNameAttribute("DesignerOptions_ObjectBoundSmartTagAutoShowDisplayName")]
[SRCategoryAttribute("DesignerOptions_ObjectBoundSmartTagSettings")]
[SRDescriptionAttribute("DesignerOptions_ObjectBoundSmartTagAutoShow")]
public bool ObjectBoundSmartTagAutoShow { get; public set; }
    [SRDisplayNameAttribute("DesignerOptions_CodeGenDisplay")]
[SRCategoryAttribute("DesignerOptions_CodeGenSettings")]
[SRDescriptionAttribute("DesignerOptions_OptimizedCodeGen")]
public bool UseOptimizedCodeGeneration { get; public set; }
    [SRDisplayNameAttribute("DesignerOptions_EnableInSituEditingDisplay")]
[SRCategoryAttribute("DesignerOptions_EnableInSituEditingCat")]
[SRDescriptionAttribute("DesignerOptions_EnableInSituEditingDesc")]
[BrowsableAttribute("False")]
public bool EnableInSituEditing { get; public set; }
    public virtual Size get_GridSize();
    public virtual void set_GridSize(Size value);
    public virtual bool get_ShowGrid();
    public virtual void set_ShowGrid(bool value);
    public virtual bool get_SnapToGrid();
    public virtual void set_SnapToGrid(bool value);
    public virtual bool get_UseSnapLines();
    public virtual void set_UseSnapLines(bool value);
    public virtual bool get_UseSmartTags();
    public virtual void set_UseSmartTags(bool value);
    public virtual bool get_ObjectBoundSmartTagAutoShow();
    public virtual void set_ObjectBoundSmartTagAutoShow(bool value);
    public virtual bool get_UseOptimizedCodeGeneration();
    public virtual void set_UseOptimizedCodeGeneration(bool value);
    public virtual bool get_EnableInSituEditing();
    public virtual void set_EnableInSituEditing(bool value);
}
internal class System.Windows.Forms.Design.DesignerToolStripControlHost : ToolStripControlHost {
    internal ToolStrip parent;
    protected Size DefaultSize { get; }
    public DesignerToolStripControlHost(Control c);
    protected virtual Size get_DefaultSize();
    internal GlyphCollection GetGlyphs(ToolStrip parent, GlyphCollection glyphs, Behavior standardBehavior);
    internal void RefreshSelectionGlyph();
    internal void SelectControl();
}
internal static class System.Windows.Forms.Design.DesignerUtils : object {
    public static int BOXIMAGESIZE;
    public static int SELECTIONBORDERSIZE;
    public static int SELECTIONBORDERHITAREA;
    public static int HANDLESIZE;
    public static int HANDLEOVERLAP;
    public static int SELECTIONBORDEROFFSET;
    public static int NORESIZEHANDLESIZE;
    public static int NORESIZEBORDEROFFSET;
    public static int LOCKHANDLEHEIGHT;
    public static int LOCKHANDLEWIDTH;
    public static int LOCKHANDLEOVERLAP;
    public static int LOCKEDSELECTIONBORDEROFFSET_Y;
    public static int LOCKEDSELECTIONBORDEROFFSET_X;
    public static int LOCKHANDLESIZE_UPPER;
    public static int LOCKHANDLEHEIGHT_LOWER;
    public static int LOCKHANDLEWIDTH_LOWER;
    public static int LOCKHANDLEUPPER_OFFSET;
    public static int LOCKHANDLELOWER_OFFSET;
    public static int CONTAINERGRABHANDLESIZE;
    public static int SNAPELINEDELAY;
    public static int MINIMUMSTYLESIZE;
    public static int MINIMUMSTYLEPERCENT;
    public static int MINCONTROLBITMAPSIZE;
    public static int MINUMUMSTYLESIZEDRAG;
    public static int DEFAULTROWCOUNT;
    public static int DEFAULTCOLUMNCOUNT;
    public static int RESIZEGLYPHSIZE;
    public static int DEFAULTFORMPADDING;
    public static ContentAlignment anyTopAlignment;
    public static ContentAlignment anyMiddleAlignment;
    public static Image BoxImage { get; }
    public static Brush HoverBrush { get; }
    public static Size MinDragSize { get; }
    public static Point LastCursorPoint { get; }
    private static DesignerUtils();
    public static Image get_BoxImage();
    public static Brush get_HoverBrush();
    public static Size get_MinDragSize();
    public static Point get_LastCursorPoint();
    public static void SyncBrushes();
    public static void DrawResizeBorder(Graphics g, Region resizeBorder, Color backColor);
    public static void DrawFrame(Graphics g, Region resizeBorder, FrameStyle style, Color backColor);
    public static void DrawGrabHandle(Graphics graphics, Rectangle bounds, bool isPrimary, Glyph glyph);
    public static void DrawNoResizeHandle(Graphics graphics, Rectangle bounds, bool isPrimary, Glyph glyph);
    public static void DrawLockedHandle(Graphics graphics, Rectangle bounds, bool isPrimary, Glyph glyph);
    public static void DrawSelectionBorder(Graphics graphics, Rectangle bounds);
    public static void GenerateSnapShot(Control control, Image& image, int borderSize, double opacity, Color backColor);
    public static Size GetAdornmentDimensions(AdornmentType adornmentType);
    public static bool UseSnapLines(IServiceProvider provider);
    public static object GetOptionValue(IServiceProvider provider, string name);
    public static void GenerateSnapShotWithBitBlt(Control control, Image& image);
    public static bool GenerateSnapShotWithWM_PRINT(Control control, Image& image);
    public static Rectangle GetBoundsForSelectionType(Rectangle originalBounds, SelectionBorderGlyphType type, int borderSize);
    public static Rectangle GetBoundsForSelectionType(Rectangle originalBounds, SelectionBorderGlyphType type);
    public static Rectangle GetBoundsForNoResizeSelectionType(Rectangle originalBounds, SelectionBorderGlyphType type);
    public static int GetTextBaseline(Control ctrl, ContentAlignment alignment);
    public static Rectangle GetBoundsFromToolboxSnapDragDropInfo(ToolboxSnapDragDropEventArgs e, Rectangle originalBounds, bool isMirrored);
    public static string GetUniqueSiteName(IDesignerHost host, string name);
    public static ICollection FilterGenericTypes(ICollection types);
    public static IContainer CheckForNestedContainer(IContainer container);
    public static ICollection CopyDragObjects(ICollection objects, IServiceProvider svcProvider);
    internal static void GetAssociatedComponents(IComponent component, IDesignerHost host, ArrayList list);
    public static void ApplyTreeViewThemeStyles(TreeView treeView);
    public static void ApplyListViewThemeStyles(ListView listView);
}
internal class System.Windows.Forms.Design.DesignerVerbToolStripMenuItem : ToolStripMenuItem {
    public DesignerVerbToolStripMenuItem(DesignerVerb verb);
    public void RefreshItem();
    protected virtual void OnClick(EventArgs e);
}
public class System.Windows.Forms.Design.DockEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
[ToolboxItemFilterAttribute("System.Windows.Forms")]
public class System.Windows.Forms.Design.DocumentDesigner : ScrollableControlDesigner {
    internal static IDesignerSerializationManager manager;
    protected IMenuEditorService menuEditorService;
    public SelectionRules SelectionRules { get; }
    private ViewTechnology[] System.ComponentModel.Design.IRootDesigner.SupportedTechnologies { get; }
    private static DocumentDesigner();
    public virtual SelectionRules get_SelectionRules();
    private sealed virtual override Control System.Windows.Forms.Design.IOleDragClient.GetControlForComponent(object component);
    internal virtual bool CanDropComponents(DragEventArgs de);
    protected virtual void Dispose(bool disposing);
    public virtual GlyphCollection GetGlyphs(GlyphSelectionType selectionType);
    protected virtual bool GetToolSupported(ToolboxItem tool);
    public virtual void Initialize(IComponent component);
    protected virtual void OnContextMenu(int x, int y);
    protected virtual void OnCreateHandle();
    internal virtual void DoProperMenuSelection(ICollection selComponents);
    protected virtual void EnsureMenuEditorService(IComponent c);
    protected virtual void PreFilterProperties(IDictionary properties);
    protected virtual void ToolPicked(ToolboxItem tool);
    private sealed virtual override ViewTechnology[] System.ComponentModel.Design.IRootDesigner.get_SupportedTechnologies();
    private sealed virtual override object System.ComponentModel.Design.IRootDesigner.GetView(ViewTechnology technology);
    private sealed virtual override bool System.Drawing.Design.IToolboxUser.GetToolSupported(ToolboxItem tool);
    private sealed virtual override void System.Drawing.Design.IToolboxUser.ToolPicked(ToolboxItem tool);
    protected virtual void WndProc(Message& m);
}
internal class System.Windows.Forms.Design.DropDownHolder : Form {
    protected CreateParams CreateParams { get; }
    public Control Component { get; }
    public DropDownHolder(Control parent);
    protected virtual CreateParams get_CreateParams();
    public void DoModalLoop();
    public virtual Control get_Component();
    public virtual bool GetUsed();
    protected virtual void OnMouseDown(MouseEventArgs me);
    public virtual void FocusComponent();
    protected virtual bool ProcessDialogKey(Keys keyData);
    public virtual void SetComponent(Control ctl);
    protected virtual void WndProc(Message& m);
}
internal class System.Windows.Forms.Design.EditorServiceContext : object {
    private IContainer System.ComponentModel.ITypeDescriptorContext.Container { get; }
    private object System.ComponentModel.ITypeDescriptorContext.Instance { get; }
    private PropertyDescriptor System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor { get; }
    internal EditorServiceContext(ComponentDesigner designer);
    internal EditorServiceContext(ComponentDesigner designer, PropertyDescriptor prop);
    internal EditorServiceContext(ComponentDesigner designer, PropertyDescriptor prop, string newVerbText);
    public static object EditValue(ComponentDesigner designer, object objectToChange, string propName);
    private sealed virtual override IContainer System.ComponentModel.ITypeDescriptorContext.get_Container();
    private sealed virtual override void System.ComponentModel.ITypeDescriptorContext.OnComponentChanged();
    private sealed virtual override bool System.ComponentModel.ITypeDescriptorContext.OnComponentChanging();
    private sealed virtual override object System.ComponentModel.ITypeDescriptorContext.get_Instance();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ITypeDescriptorContext.get_PropertyDescriptor();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    private sealed virtual override void System.Windows.Forms.Design.IWindowsFormsEditorService.CloseDropDown();
    private sealed virtual override void System.Windows.Forms.Design.IWindowsFormsEditorService.DropDownControl(Control control);
    private sealed virtual override DialogResult System.Windows.Forms.Design.IWindowsFormsEditorService.ShowDialog(Form dialog);
}
public class System.Windows.Forms.Design.EventHandlerService : object {
    public Control FocusWindow { get; }
    public EventHandlerService(Control focusWnd);
    public sealed virtual void add_EventHandlerChanged(EventHandler value);
    public sealed virtual void remove_EventHandlerChanged(EventHandler value);
    public sealed virtual Control get_FocusWindow();
    public sealed virtual object GetHandler(Type handlerType);
    public sealed virtual void PopHandler(object handler);
    public sealed virtual void PushHandler(object handler);
}
public class System.Windows.Forms.Design.FileNameEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    protected virtual void InitializeDialog(OpenFileDialog openFileDialog);
}
internal class System.Windows.Forms.Design.FlowLayoutPanelDesigner : FlowPanelDesigner {
    protected bool AllowGenericDragBox { get; }
    protected internal bool AllowSetChildIndexOnDrop { get; }
    protected InheritanceAttribute InheritanceAttribute { get; }
    private static FlowLayoutPanelDesigner();
    protected virtual bool get_AllowGenericDragBox();
    protected internal virtual bool get_AllowSetChildIndexOnDrop();
    protected virtual InheritanceAttribute get_InheritanceAttribute();
    public virtual void Initialize(IComponent component);
    protected virtual void OnDragDrop(DragEventArgs de);
    protected virtual void OnDragLeave(EventArgs e);
    protected virtual void OnDragEnter(DragEventArgs de);
    protected virtual void OnDragOver(DragEventArgs de);
    protected virtual void PreFilterProperties(IDictionary properties);
}
internal class System.Windows.Forms.Design.FlowPanelDesigner : PanelDesigner {
    public bool ParticipatesWithSnapLines { get; }
    public IList SnapLines { get; }
    public virtual bool get_ParticipatesWithSnapLines();
    public virtual IList get_SnapLines();
    internal virtual void AddChildControl(Control newChild);
    protected virtual void OnDragDrop(DragEventArgs de);
}
internal class System.Windows.Forms.Design.FolderBrowserDialogDesigner : ComponentDesigner {
    [ObsoleteAttribute("This method has been deprecated. Use InitializeNewComponent instead.  http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual void OnSetComponentDefaults();
}
public class System.Windows.Forms.Design.FolderNameEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    protected virtual void InitializeDialog(FolderBrowser folderBrowser);
}
internal class System.Windows.Forms.Design.FormatControl : UserControl {
    public bool Dirty { get; public set; }
    public string FormatType { get; public set; }
    public FormatTypeClass FormatTypeItem { get; }
    public string NullValue { get; public set; }
    unknown bool NullValueTextBoxEnabled {public set; }
    private static FormatControl();
    public bool get_Dirty();
    public void set_Dirty(bool value);
    public string get_FormatType();
    public void set_FormatType(string value);
    public FormatTypeClass get_FormatTypeItem();
    public string get_NullValue();
    public void set_NullValue(string value);
    public void set_NullValueTextBoxEnabled(bool value);
    public static string FormatTypeStringFromFormatString(string formatString);
    protected virtual bool ProcessMnemonic(char charCode);
    public void ResetFormattingInfo();
    protected virtual void Dispose(bool disposing);
}
internal class System.Windows.Forms.Design.FormatStringDialog : Form {
    unknown DataGridViewCellStyle DataGridViewCellStyle {public set; }
    public bool Dirty { get; }
    unknown ListControl ListControl {public set; }
    public FormatStringDialog(ITypeDescriptorContext context);
    public void set_DataGridViewCellStyle(DataGridViewCellStyle value);
    public bool get_Dirty();
    public void set_ListControl(ListControl value);
    internal void FormatControlFinishedLoading();
    public void End();
    protected virtual bool ProcessDialogKey(Keys keyData);
}
internal class System.Windows.Forms.Design.FormatStringEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.Design.FormDocumentDesigner : DocumentDesigner {
    internal MainMenu Menu { get; internal set; }
    public IList SnapLines { get; }
    internal MainMenu get_Menu();
    internal void set_Menu(MainMenu value);
    public virtual IList get_SnapLines();
    protected virtual void Dispose(bool disposing);
    internal virtual void DoProperMenuSelection(ICollection selComponents);
    protected virtual void EnsureMenuEditorService(IComponent c);
    public virtual void Initialize(IComponent component);
    protected virtual void OnCreateHandle();
    protected virtual void PreFilterProperties(IDictionary properties);
    protected virtual void WndProc(Message& m);
}
internal class System.Windows.Forms.Design.GroupBoxDesigner : ParentControlDesigner {
    protected Point DefaultControlLocation { get; }
    protected virtual Point get_DefaultControlLocation();
    protected virtual void OnPaintAdornments(PaintEventArgs pe);
    protected virtual void WndProc(Message& m);
}
internal class System.Windows.Forms.Design.GroupedContextMenuStrip : ContextMenuStrip {
    unknown bool Populated {public set; }
    public ContextMenuStripGroupCollection Groups { get; }
    public StringCollection GroupOrdering { get; }
    public void set_Populated(bool value);
    public ContextMenuStripGroupCollection get_Groups();
    public StringCollection get_GroupOrdering();
    public void Populate();
    protected virtual void OnOpening(CancelEventArgs e);
    public virtual void RefreshItems();
}
internal class System.Windows.Forms.Design.HelpNamespaceEditor : FileNameEditor {
    protected virtual void InitializeDialog(OpenFileDialog openFileDialog);
}
public interface System.Windows.Forms.Design.IContainsThemedScrollbarWindows {
    public abstract virtual IEnumerable ThemedScrollbarWindows();
}
internal interface System.Windows.Forms.Design.IEventHandlerService {
    public Control FocusWindow { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_EventHandlerChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_EventHandlerChanged(EventHandler value);
    public abstract virtual Control get_FocusWindow();
    public abstract virtual object GetHandler(Type handlerType);
    public abstract virtual void PopHandler(object handler);
    public abstract virtual void PushHandler(object handler);
}
internal class System.Windows.Forms.Design.ImageCollectionEditor : CollectionEditor {
    public ImageCollectionEditor(Type type);
    protected virtual string GetDisplayText(object value);
    protected virtual object CreateInstance(Type type);
    protected virtual CollectionForm CreateCollectionForm();
    protected virtual IList GetObjectsFromInstance(object instance);
}
internal class System.Windows.Forms.Design.ImageIndexEditor : UITypeEditor {
    protected ImageList currentImageList;
    protected WeakReference currentImageListPropRef;
    protected object currentInstance;
    protected UITypeEditor imageEditor;
    protected string parentImageListProperty;
    protected string imageListPropertyName;
    internal UITypeEditor ImageEditor { get; }
    internal string ParentImageListProperty { get; }
    internal UITypeEditor get_ImageEditor();
    internal string get_ParentImageListProperty();
    protected virtual Image GetImage(ITypeDescriptorContext context, int index, string key, bool useIntIndex);
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual void PaintValue(PaintValueEventArgs e);
}
internal class System.Windows.Forms.Design.ImageListActionList : DesignerActionList {
    public ColorDepth ColorDepth { get; public set; }
    public Size ImageSize { get; public set; }
    public ImageListActionList(ImageListDesigner designer);
    public void ChooseImages();
    public ColorDepth get_ColorDepth();
    public void set_ColorDepth(ColorDepth value);
    public Size get_ImageSize();
    public void set_ImageSize(Size value);
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
public class System.Windows.Forms.Design.ImageListCodeDomSerializer : CodeDomSerializer {
    public virtual object Deserialize(IDesignerSerializationManager manager, object codeObject);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
internal class System.Windows.Forms.Design.ImageListDesigner : ComponentDesigner {
    internal ImageList ImageList { get; }
    public DesignerActionListCollection ActionLists { get; }
    internal ImageList get_ImageList();
    protected virtual void PreFilterProperties(IDictionary properties);
    public virtual DesignerActionListCollection get_ActionLists();
}
[EditorAttribute("System.Windows.Forms.Design.ImageListImageEditor", "System.Drawing.Design.UITypeEditor")]
internal class System.Windows.Forms.Design.ImageListImage : object {
    public string Name { get; public set; }
    [BrowsableAttribute("False")]
public Bitmap Image { get; public set; }
    public float HorizontalResolution { get; }
    public float VerticalResolution { get; }
    public PixelFormat PixelFormat { get; }
    public ImageFormat RawFormat { get; }
    public Size Size { get; }
    public SizeF PhysicalDimension { get; }
    public ImageListImage(Bitmap image);
    public ImageListImage(Bitmap image, string name);
    public string get_Name();
    public void set_Name(string value);
    public Bitmap get_Image();
    public void set_Image(Bitmap value);
    public float get_HorizontalResolution();
    public float get_VerticalResolution();
    public PixelFormat get_PixelFormat();
    public ImageFormat get_RawFormat();
    public Size get_Size();
    public SizeF get_PhysicalDimension();
    public static ImageListImage ImageListImageFromStream(Stream stream, bool imageIsIcon);
}
public class System.Windows.Forms.Design.ImageListImageEditor : ImageEditor {
    internal static Type[] imageExtenders;
    private static ImageListImageEditor();
    protected virtual Type[] GetImageExtenders();
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    protected virtual string GetFileDialogDescription();
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual void PaintValue(PaintValueEventArgs e);
}
public interface System.Windows.Forms.Design.IMenuEditorService {
    public abstract virtual Menu GetMenu();
    public abstract virtual bool IsActive();
    public abstract virtual void SetMenu(Menu menu);
    public abstract virtual void SetSelection(MenuItem item);
    public abstract virtual bool MessageFilter(Message& m);
}
internal interface System.Windows.Forms.Design.IMenuStatusHandler {
    public abstract virtual bool OverrideInvoke(MenuCommand cmd);
    public abstract virtual bool OverrideStatus(MenuCommand cmd);
}
internal interface System.Windows.Forms.Design.IMouseHandler {
    public abstract virtual void OnMouseDoubleClick(IComponent component);
    public abstract virtual void OnMouseDown(IComponent component, MouseButtons button, int x, int y);
    public abstract virtual void OnMouseHover(IComponent component);
    public abstract virtual void OnMouseMove(IComponent component, int x, int y);
    public abstract virtual void OnMouseUp(IComponent component, MouseButtons button);
    public abstract virtual void OnSetCursor(IComponent component);
}
internal class System.Windows.Forms.Design.InheritanceUI : object {
    public Bitmap InheritanceGlyph { get; }
    public Rectangle InheritanceGlyphRectangle { get; }
    public Bitmap get_InheritanceGlyph();
    public Rectangle get_InheritanceGlyphRectangle();
    public void AddInheritedControl(Control c, InheritanceLevel level);
    public void Dispose();
    public void RemoveInheritedControl(Control c);
}
internal class System.Windows.Forms.Design.IntegerCollectionEditor : CollectionEditor {
    protected string HelpTopic { get; }
    public IntegerCollectionEditor(Type type);
    protected virtual CollectionForm CreateCollectionForm();
    protected virtual string get_HelpTopic();
}
internal interface System.Windows.Forms.Design.IOleDragClient {
    public IComponent Component { get; }
    public bool CanModifyComponents { get; }
    public abstract virtual IComponent get_Component();
    public abstract virtual bool AddComponent(IComponent component, string name, bool firstAdd);
    public abstract virtual bool get_CanModifyComponents();
    public abstract virtual bool IsDropOk(IComponent component);
    public abstract virtual Control GetDesignerControl();
    public abstract virtual Control GetControlForComponent(object component);
}
internal interface System.Windows.Forms.Design.IOverlayService {
    public abstract virtual int PushOverlay(Control control);
    public abstract virtual void RemoveOverlay(Control control);
    public abstract virtual void InsertOverlay(Control control, int index);
    public abstract virtual void InvalidateOverlays(Rectangle screenRectangle);
    public abstract virtual void InvalidateOverlays(Region screenRegion);
}
internal interface System.Windows.Forms.Design.ISelectionUIHandler {
    public abstract virtual bool BeginDrag(Object[] components, SelectionRules rules, int initialX, int initialY);
    public abstract virtual void DragMoved(Object[] components, Rectangle offset);
    public abstract virtual void EndDrag(Object[] components, bool cancel);
    public abstract virtual Rectangle GetComponentBounds(object component);
    public abstract virtual SelectionRules GetComponentRules(object component);
    public abstract virtual Rectangle GetSelectionClipRect(object component);
    public abstract virtual void OnSelectionDoubleClick(IComponent component);
    public abstract virtual bool QueryBeginDrag(Object[] components, SelectionRules rules, int initialX, int initialY);
    public abstract virtual void ShowContextMenu(IComponent component);
    public abstract virtual void OleDragEnter(DragEventArgs de);
    public abstract virtual void OleDragDrop(DragEventArgs de);
    public abstract virtual void OleDragOver(DragEventArgs de);
    public abstract virtual void OleDragLeave();
}
internal interface System.Windows.Forms.Design.ISelectionUIService {
    public bool Visible { get; public set; }
    public bool Dragging { get; }
    public abstract virtual bool get_Visible();
    public abstract virtual void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ContainerSelectorActive(ContainerSelectorActiveEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ContainerSelectorActive(ContainerSelectorActiveEventHandler value);
    public abstract virtual void AssignSelectionUIHandler(object component, ISelectionUIHandler handler);
    public abstract virtual void ClearSelectionUIHandler(object component, ISelectionUIHandler handler);
    public abstract virtual bool BeginDrag(SelectionRules rules, int initialX, int initialY);
    public abstract virtual bool get_Dragging();
    public abstract virtual void DragMoved(Rectangle offset);
    public abstract virtual void EndDrag(bool cancel);
    public abstract virtual Object[] FilterSelection(Object[] components, SelectionRules selectionRules);
    public abstract virtual Size GetAdornmentDimensions(AdornmentType adornmentType);
    public abstract virtual bool GetAdornmentHitTest(object component, Point pt);
    public abstract virtual bool GetContainerSelected(object component);
    public abstract virtual SelectionRules GetSelectionRules(object component);
    public abstract virtual SelectionStyles GetSelectionStyle(object component);
    public abstract virtual void SetContainerSelected(object component, bool selected);
    public abstract virtual void SetSelectionStyle(object component, SelectionStyles style);
    public abstract virtual void SyncSelection();
    public abstract virtual void SyncComponent(object component);
}
internal interface System.Windows.Forms.Design.ISplitWindowService {
    public abstract virtual void AddSplitWindow(Control window);
    public abstract virtual void RemoveSplitWindow(Control window);
}
[ComVisibleAttribute("True")]
internal interface System.Windows.Forms.Design.ISupportInSituService {
    public bool IgnoreMessages { get; }
    public abstract virtual bool get_IgnoreMessages();
    public abstract virtual void HandleKeyChar();
    public abstract virtual IntPtr GetEditWindow();
}
internal class System.Windows.Forms.Design.ItemTypeToolStripMenuItem : ToolStripMenuItem {
    public Type ItemType { get; }
    public bool ConvertTo { get; public set; }
    public Image Image { get; public set; }
    public string Text { get; public set; }
    public ItemTypeToolStripMenuItem(Type t);
    private static ItemTypeToolStripMenuItem();
    public Type get_ItemType();
    public bool get_ConvertTo();
    public void set_ConvertTo(bool value);
    public virtual Image get_Image();
    public virtual void set_Image(Image value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    protected virtual void Dispose(bool disposing);
}
internal class System.Windows.Forms.Design.LabelDesigner : ControlDesigner {
    public IList SnapLines { get; }
    public SelectionRules SelectionRules { get; }
    public virtual IList get_SnapLines();
    public virtual SelectionRules get_SelectionRules();
}
internal class System.Windows.Forms.Design.LinkAreaEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.Design.LinkedDataMemberFieldEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.Design.ListBoxDesigner : ControlDesigner {
    public bool IntegralHeight { get; public set; }
    public DockStyle Dock { get; public set; }
    public DesignerActionListCollection ActionLists { get; }
    public bool get_IntegralHeight();
    public void set_IntegralHeight(bool value);
    public DockStyle get_Dock();
    public void set_Dock(DockStyle value);
    protected virtual void PreFilterProperties(IDictionary properties);
    protected virtual void Dispose(bool disposing);
    public virtual void Initialize(IComponent component);
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    protected virtual void OnCreateHandle();
    public virtual DesignerActionListCollection get_ActionLists();
}
[ComplexBindingPropertiesAttribute("DataSource", "DataMember")]
internal class System.Windows.Forms.Design.ListControlBoundActionList : DesignerActionList {
    public bool BoundMode { get; public set; }
    [AttributeProviderAttribute("System.ComponentModel.IListSource")]
public object DataSource { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataMemberFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public string DisplayMember { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataMemberFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public string ValueMember { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.Design.DesignBindingConverter")]
[EditorAttribute("System.Windows.Forms.Design.DesignBindingEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public object BoundSelectedValue { get; public set; }
    public ListControlBoundActionList(ControlDesigner owner);
    public virtual DesignerActionItemCollection GetSortedActionItems();
    public bool get_BoundMode();
    public void set_BoundMode(bool value);
    public void InvokeItemsDialog();
    public object get_DataSource();
    public void set_DataSource(object value);
    public string get_DisplayMember();
    public void set_DisplayMember(string value);
    public string get_ValueMember();
    public void set_ValueMember(string value);
    public object get_BoundSelectedValue();
    public void set_BoundSelectedValue(object value);
}
internal class System.Windows.Forms.Design.ListControlStringCollectionEditor : StringCollectionEditor {
    public ListControlStringCollectionEditor(Type type);
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
}
internal class System.Windows.Forms.Design.ListControlUnboundActionList : DesignerActionList {
    public ListControlUnboundActionList(ComponentDesigner designer);
    public void InvokeItemsDialog();
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
internal class System.Windows.Forms.Design.ListViewActionList : DesignerActionList {
    public View View { get; public set; }
    public ImageList LargeImageList { get; public set; }
    public ImageList SmallImageList { get; public set; }
    public ListViewActionList(ComponentDesigner designer);
    public void InvokeItemsDialog();
    public void InvokeColumnsDialog();
    public void InvokeGroupsDialog();
    public View get_View();
    public void set_View(View value);
    public ImageList get_LargeImageList();
    public void set_LargeImageList(ImageList value);
    public ImageList get_SmallImageList();
    public void set_SmallImageList(ImageList value);
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
internal class System.Windows.Forms.Design.ListViewDesigner : ControlDesigner {
    public ICollection AssociatedComponents { get; }
    public DesignerActionListCollection ActionLists { get; }
    public virtual ICollection get_AssociatedComponents();
    protected virtual bool GetHitTest(Point point);
    public virtual void Initialize(IComponent component);
    protected virtual void PreFilterProperties(IDictionary properties);
    protected virtual void WndProc(Message& m);
    public virtual DesignerActionListCollection get_ActionLists();
}
internal class System.Windows.Forms.Design.ListViewGroupCollectionEditor : CollectionEditor {
    public ListViewGroupCollectionEditor(Type type);
    protected virtual object CreateInstance(Type itemType);
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
}
internal class System.Windows.Forms.Design.ListViewItemCollectionEditor : CollectionEditor {
    public ListViewItemCollectionEditor(Type type);
    protected virtual string GetDisplayText(object value);
}
internal class System.Windows.Forms.Design.ListViewSubItemCollectionEditor : CollectionEditor {
    public ListViewSubItemCollectionEditor(Type type);
    private static ListViewSubItemCollectionEditor();
    protected virtual object CreateInstance(Type type);
    protected virtual string GetDisplayText(object value);
    protected virtual Object[] GetItems(object editValue);
    protected virtual object SetItems(object editValue, Object[] value);
}
public abstract class System.Windows.Forms.Design.MaskDescriptor : object {
    public string Mask { get; }
    public string Name { get; }
    public string Sample { get; }
    public Type ValidatingType { get; }
    public CultureInfo Culture { get; }
    public abstract virtual string get_Mask();
    public abstract virtual string get_Name();
    public abstract virtual string get_Sample();
    public abstract virtual Type get_ValidatingType();
    public virtual CultureInfo get_Culture();
    public static bool IsValidMaskDescriptor(MaskDescriptor maskDescriptor);
    public static bool IsValidMaskDescriptor(MaskDescriptor maskDescriptor, String& validationErrorDescription);
    public virtual bool Equals(object maskDescriptor);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.Windows.Forms.Design.MaskDescriptorComparer : object {
    public MaskDescriptorComparer(SortType sortType, SortOrder sortOrder);
    public sealed virtual int Compare(MaskDescriptor maskDescriptorA, MaskDescriptor maskDescriptorB);
    public int GetHashCode(MaskDescriptor maskDescriptor);
    public bool Equals(MaskDescriptor maskDescriptorA, MaskDescriptor maskDescriptorB);
}
internal class System.Windows.Forms.Design.MaskDescriptorTemplate : MaskDescriptor {
    public string Mask { get; }
    public string Name { get; }
    public string Sample { get; }
    public Type ValidatingType { get; }
    public CultureInfo Culture { get; }
    public MaskDescriptorTemplate(string mask, string name, string sample, Type validatingType, CultureInfo culture);
    public MaskDescriptorTemplate(string mask, string name, string sample, Type validatingType, CultureInfo culture, bool skipValidation);
    public virtual string get_Mask();
    public virtual string get_Name();
    public virtual string get_Sample();
    public virtual Type get_ValidatingType();
    public virtual CultureInfo get_Culture();
    public static List`1<MaskDescriptor> GetLocalizedMaskDescriptors(CultureInfo culture);
}
internal class System.Windows.Forms.Design.MaskDesignerDialog : Form {
    public string Mask { get; }
    public Type ValidatingType { get; }
    public IEnumerator MaskDescriptors { get; }
    public MaskDesignerDialog(MaskedTextBox instance, IHelpService helpService);
    public string get_Mask();
    public Type get_ValidatingType();
    public IEnumerator get_MaskDescriptors();
    public void DiscoverMaskDescriptors(ITypeDiscoveryService discoveryService);
}
internal class System.Windows.Forms.Design.MaskedTextBoxDesigner : TextBoxBaseDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public SelectionRules SelectionRules { get; }
    public DesignerVerbCollection Verbs { get; }
    public virtual DesignerActionListCollection get_ActionLists();
    internal static MaskedTextBox GetDesignMaskedTextBox(MaskedTextBox mtb);
    internal static string GetMaskInputRejectedErrorMessage(MaskInputRejectedEventArgs e);
    [ObsoleteAttribute("This method has been deprecated. Use InitializeNewComponent instead.  http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual void OnSetComponentDefaults();
    protected virtual void PreFilterProperties(IDictionary properties);
    public virtual SelectionRules get_SelectionRules();
    public virtual DesignerVerbCollection get_Verbs();
}
internal class System.Windows.Forms.Design.MaskedTextBoxDesignerActionList : DesignerActionList {
    public MaskedTextBoxDesignerActionList(MaskedTextBoxDesigner designer);
    public void SetMask();
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
internal class System.Windows.Forms.Design.MaskedTextBoxTextEditor : UITypeEditor {
    public bool IsDropDownResizable { get; }
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual bool get_IsDropDownResizable();
}
internal class System.Windows.Forms.Design.MaskedTextBoxTextEditorDropDown : UserControl {
    public string Value { get; }
    public MaskedTextBoxTextEditorDropDown(MaskedTextBox maskedTextBox);
    public string get_Value();
    protected virtual bool ProcessDialogKey(Keys keyData);
}
internal class System.Windows.Forms.Design.MaskPropertyEditor : UITypeEditor {
    internal static string EditMask(ITypeDiscoveryService discoverySvc, IUIService uiSvc, MaskedTextBox instance, IHelpService helpService);
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
public class System.Windows.Forms.Design.MenuCommands : StandardCommands {
    public static CommandID SelectionMenu;
    public static CommandID ContainerMenu;
    public static CommandID TraySelectionMenu;
    public static CommandID ComponentTrayMenu;
    public static CommandID DesignerProperties;
    public static CommandID KeyCancel;
    public static CommandID KeyReverseCancel;
    public static CommandID KeyInvokeSmartTag;
    public static CommandID KeyDefaultAction;
    public static CommandID KeyMoveUp;
    public static CommandID KeyMoveDown;
    public static CommandID KeyMoveLeft;
    public static CommandID KeyMoveRight;
    public static CommandID KeyNudgeUp;
    public static CommandID KeyNudgeDown;
    public static CommandID KeyNudgeLeft;
    public static CommandID KeyNudgeRight;
    public static CommandID KeySizeWidthIncrease;
    public static CommandID KeySizeHeightIncrease;
    public static CommandID KeySizeWidthDecrease;
    public static CommandID KeySizeHeightDecrease;
    public static CommandID KeyNudgeWidthIncrease;
    public static CommandID KeyNudgeHeightIncrease;
    public static CommandID KeyNudgeWidthDecrease;
    public static CommandID KeyNudgeHeightDecrease;
    public static CommandID KeySelectNext;
    public static CommandID KeySelectPrevious;
    public static CommandID KeyTabOrderSelect;
    public static CommandID EditLabel;
    public static CommandID KeyHome;
    public static CommandID KeyEnd;
    public static CommandID KeyShiftHome;
    public static CommandID KeyShiftEnd;
    public static CommandID SetStatusText;
    public static CommandID SetStatusRectangle;
    private static MenuCommands();
}
internal class System.Windows.Forms.Design.MonthCalendarDesigner : ControlDesigner {
    public SelectionRules SelectionRules { get; }
    public virtual SelectionRules get_SelectionRules();
}
internal class System.Windows.Forms.Design.NewItemsContextMenuStrip : GroupedContextMenuStrip {
    public NewItemsContextMenuStrip(IComponent component, ToolStripItem currentItem, EventHandler onClick, bool convertTo, IServiceProvider serviceProvider);
    protected virtual void OnOpening(CancelEventArgs e);
    protected virtual bool ProcessDialogKey(Keys keyData);
}
internal class System.Windows.Forms.Design.NoBorderRenderer : ToolStripProfessionalRenderer {
    protected virtual void OnRenderToolStripBorder(ToolStripRenderEventArgs e);
}
internal class System.Windows.Forms.Design.NotifyIconActionList : DesignerActionList {
    public NotifyIconActionList(NotifyIconDesigner designer);
    public void ChooseIcon();
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
internal class System.Windows.Forms.Design.NotifyIconDesigner : ComponentDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    public virtual DesignerActionListCollection get_ActionLists();
}
internal class System.Windows.Forms.Design.OleDragDropHandler : object {
    protected static int AllowLocalMoveOnly;
    public static string CF_CODE;
    public static string CF_COMPONENTTYPES;
    public static string CF_TOOLBOXITEM;
    public static string DataFormat { get; }
    public static string ExtraInfoFormat { get; }
    public static string NestedToolboxItemFormat { get; }
    internal IOleDragClient Destination { get; }
    public bool Dragging { get; }
    public static bool FreezePainting { get; }
    public OleDragDropHandler(SelectionUIHandler selectionHandler, IServiceProvider serviceProvider, IOleDragClient client);
    private static OleDragDropHandler();
    public static string get_DataFormat();
    public static string get_ExtraInfoFormat();
    public static string get_NestedToolboxItemFormat();
    internal IOleDragClient get_Destination();
    protected virtual bool CanDropDataObject(IDataObject dataObj);
    public bool get_Dragging();
    public static bool get_FreezePainting();
    public IComponent[] CreateTool(ToolboxItem tool, Control parent, int x, int y, int width, int height, bool hasLocation, bool hasSize);
    public IComponent[] CreateTool(ToolboxItem tool, Control parent, int x, int y, int width, int height, bool hasLocation, bool hasSize, ToolboxSnapDragDropEventArgs e);
    public bool DoBeginDrag(Object[] components, SelectionRules rules, int initialX, int initialY);
    public void DoEndDrag(Object[] components, bool cancel);
    public void DoOleDragDrop(DragEventArgs de);
    public void DoOleDragEnter(DragEventArgs de);
    public void DoOleDragLeave();
    public void DoOleDragOver(DragEventArgs de);
    public void DoOleGiveFeedback(GiveFeedbackEventArgs e);
    public Object[] GetDraggingObjects(IDataObject dataObj);
    public Object[] GetDraggingObjects(DragEventArgs de);
    protected object GetService(Type t);
    protected virtual void OnInitializeComponent(IComponent comp, int x, int y, int width, int height, bool hasLocation, bool hasSize);
}
internal class System.Windows.Forms.Design.PanelDesigner : ScrollableControlDesigner {
    protected Pen BorderPen { get; }
    protected virtual void DrawBorder(Graphics graphics);
    protected virtual void OnPaintAdornments(PaintEventArgs pe);
    protected Pen get_BorderPen();
}
public class System.Windows.Forms.Design.ParentControlDesigner : ControlDesigner {
    protected bool AllowControlLasso { get; }
    protected bool AllowGenericDragBox { get; }
    protected internal bool AllowSetChildIndexOnDrop { get; }
    protected Point DefaultControlLocation { get; }
    protected bool DrawGrid { get; protected set; }
    protected bool EnableDragRect { get; }
    internal Size ParentGridSize { get; }
    protected Size GridSize { get; protected set; }
    protected ToolboxItem MouseDragTool { get; }
    public IList SnapLines { get; }
    private IComponent System.Windows.Forms.Design.IOleDragClient.Component { get; }
    private bool System.Windows.Forms.Design.IOleDragClient.CanModifyComponents { get; }
    private static ParentControlDesigner();
    protected virtual bool get_AllowControlLasso();
    protected virtual bool get_AllowGenericDragBox();
    protected internal virtual bool get_AllowSetChildIndexOnDrop();
    protected internal virtual bool CanAddComponent(IComponent component);
    protected virtual Point get_DefaultControlLocation();
    protected virtual bool get_DrawGrid();
    protected virtual void set_DrawGrid(bool value);
    protected virtual bool get_EnableDragRect();
    internal Size get_ParentGridSize();
    protected Size get_GridSize();
    protected void set_GridSize(Size value);
    protected ToolboxItem get_MouseDragTool();
    protected virtual Control GetParentForComponent(IComponent component);
    protected void AddPaddingSnapLines(ArrayList& snapLines);
    public virtual IList get_SnapLines();
    internal virtual void AddChildControl(Control newChild);
    internal void AddControl(Control newChild, IDictionary defaultValues);
    protected virtual void Dispose(bool disposing);
    protected static void InvokeCreateTool(ParentControlDesigner toInvoke, ToolboxItem tool);
    public virtual bool CanParent(ControlDesigner controlDesigner);
    public virtual bool CanParent(Control control);
    protected void CreateTool(ToolboxItem tool);
    protected void CreateTool(ToolboxItem tool, Point location);
    protected void CreateTool(ToolboxItem tool, Rectangle bounds);
    protected virtual IComponent[] CreateToolCore(ToolboxItem tool, int x, int y, int width, int height, bool hasLocation, bool hasSize);
    internal Object[] GetComponentsInRect(Rectangle value, bool screenCoords, bool containRect);
    protected Control GetControl(object component);
    protected virtual ControlBodyGlyph GetControlGlyph(GlyphSelectionType selectionType);
    public virtual GlyphCollection GetGlyphs(GlyphSelectionType selectionType);
    internal OleDragDropHandler GetOleDragHandler();
    internal Point GetSnappedPoint(Point pt);
    internal Rectangle GetSnappedRect(Rectangle originalRect, Rectangle dragRect, bool updateSize);
    protected Rectangle GetUpdatedRect(Rectangle originalRect, Rectangle dragRect, bool updateSize);
    public virtual void Initialize(IComponent component);
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    internal void SuspendChangingEvents();
    internal void ResumeChangingEvents();
    internal void ForceComponentChanging();
    protected virtual void OnDragComplete(DragEventArgs de);
    protected virtual void OnDragDrop(DragEventArgs de);
    protected virtual void OnDragEnter(DragEventArgs de);
    protected virtual void OnDragLeave(EventArgs e);
    protected virtual void OnDragOver(DragEventArgs de);
    protected virtual void OnMouseDragBegin(int x, int y);
    protected virtual void OnMouseDragEnd(bool cancel);
    protected virtual void OnMouseDragMove(int x, int y);
    protected virtual void OnPaintAdornments(PaintEventArgs pe);
    protected virtual void OnSetCursor();
    protected virtual void PreFilterProperties(IDictionary properties);
    private sealed virtual override IComponent System.Windows.Forms.Design.IOleDragClient.get_Component();
    private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.AddComponent(IComponent component, string name, bool firstAdd);
    private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.get_CanModifyComponents();
    private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.IsDropOk(IComponent component);
    private sealed virtual override Control System.Windows.Forms.Design.IOleDragClient.GetDesignerControl();
    private sealed virtual override Control System.Windows.Forms.Design.IOleDragClient.GetControlForComponent(object component);
}
internal class System.Windows.Forms.Design.PbrsForward : object {
    public PbrsForward(Control target, IServiceProvider sp);
    public void Dispose();
    private sealed virtual override void System.Windows.Forms.IWindowTarget.OnHandleChange(IntPtr newHandle);
    private sealed virtual override void System.Windows.Forms.IWindowTarget.OnMessage(Message& m);
}
internal class System.Windows.Forms.Design.PictureBoxActionList : DesignerActionList {
    public PictureBoxSizeMode SizeMode { get; public set; }
    public PictureBoxActionList(PictureBoxDesigner designer);
    public PictureBoxSizeMode get_SizeMode();
    public void set_SizeMode(PictureBoxSizeMode value);
    public void ChooseImage();
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
internal class System.Windows.Forms.Design.PictureBoxDesigner : ControlDesigner {
    public SelectionRules SelectionRules { get; }
    public DesignerActionListCollection ActionLists { get; }
    protected virtual void OnPaintAdornments(PaintEventArgs pe);
    public virtual SelectionRules get_SelectionRules();
    public virtual DesignerActionListCollection get_ActionLists();
}
internal class System.Windows.Forms.Design.PrintDialogDesigner : ComponentDesigner {
    public virtual void InitializeNewComponent(IDictionary defaultValues);
}
internal class System.Windows.Forms.Design.PropertyGridDesigner : ControlDesigner {
    protected virtual void PreFilterProperties(IDictionary properties);
}
internal class System.Windows.Forms.Design.PropertyGridSite : object {
    public IComponent Component { get; }
    public IContainer Container { get; }
    public bool DesignMode { get; }
    public string Name { get; public set; }
    public PropertyGridSite(IServiceProvider sp, IComponent comp);
    public sealed virtual IComponent get_Component();
    public sealed virtual IContainer get_Container();
    public sealed virtual bool get_DesignMode();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual object GetService(Type t);
}
internal class System.Windows.Forms.Design.RadioButtonDesigner : ButtonBaseDesigner {
    public virtual void InitializeNewComponent(IDictionary defaultValues);
}
internal class System.Windows.Forms.Design.RichTextBoxActionList : DesignerActionList {
    public RichTextBoxActionList(RichTextBoxDesigner designer);
    public void EditLines();
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
internal class System.Windows.Forms.Design.RichTextBoxContextMenu : ContextMenu {
    public RichTextBoxContextMenu(RichTextBox parent);
    protected virtual void OnPopup(EventArgs e);
}
internal class System.Windows.Forms.Design.RichTextBoxDesigner : TextBoxBaseDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    public virtual DesignerActionListCollection get_ActionLists();
    protected virtual void PreFilterProperties(IDictionary properties);
}
internal static class System.Windows.Forms.Design.RTLAwareMessageBox : object {
    public static bool IsRTLResources { get; }
    public static DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options);
    public static bool get_IsRTLResources();
}
internal class System.Windows.Forms.Design.SaveFileDialogDesigner : ComponentDesigner {
    public virtual void InitializeNewComponent(IDictionary defaultValues);
}
public class System.Windows.Forms.Design.ScrollableControlDesigner : ParentControlDesigner {
    protected virtual bool GetHitTest(Point pt);
    protected virtual void WndProc(Message& m);
}
internal class System.Windows.Forms.Design.SelectedPathEditor : FolderNameEditor {
    protected virtual void InitializeDialog(FolderBrowser folderBrowser);
}
[FlagsAttribute]
public enum System.Windows.Forms.Design.SelectionRules : Enum {
    public int value__;
    public static SelectionRules None;
    public static SelectionRules Moveable;
    public static SelectionRules Visible;
    public static SelectionRules Locked;
    public static SelectionRules TopSizeable;
    public static SelectionRules BottomSizeable;
    public static SelectionRules LeftSizeable;
    public static SelectionRules RightSizeable;
    public static SelectionRules AllSizeable;
}
[FlagsAttribute]
internal enum System.Windows.Forms.Design.SelectionStyles : Enum {
    public int value__;
    public static SelectionStyles None;
    public static SelectionStyles Selected;
    public static SelectionStyles Active;
}
internal abstract class System.Windows.Forms.Design.SelectionUIHandler : object {
    public virtual bool BeginDrag(Object[] components, SelectionRules rules, int initialX, int initialY);
    public virtual void DragMoved(Object[] components, Rectangle offset);
    public virtual void EndDrag(Object[] components, bool cancel);
    protected abstract virtual IComponent GetComponent();
    protected abstract virtual Control GetControl();
    protected abstract virtual Control GetControl(IComponent component);
    protected abstract virtual Size GetCurrentSnapSize();
    protected abstract virtual object GetService(Type serviceType);
    protected abstract virtual bool GetShouldSnapToGrid();
    public abstract virtual Rectangle GetUpdatedRect(Rectangle orignalRect, Rectangle dragRect, bool updateSize);
    public bool QueryBeginDrag(Object[] components, SelectionRules rules, int initialX, int initialY);
    public abstract virtual void SetCursor();
    public virtual void OleDragEnter(DragEventArgs de);
    public virtual void OleDragDrop(DragEventArgs de);
    public virtual void OleDragOver(DragEventArgs de);
    public virtual void OleDragLeave();
}
internal class System.Windows.Forms.Design.SelectionUIService : Control {
    protected CreateParams CreateParams { get; }
    private bool System.Windows.Forms.Design.ISelectionUIService.Dragging { get; }
    private bool System.Windows.Forms.Design.ISelectionUIService.Visible { get; private set; }
    public SelectionUIService(IDesignerHost host);
    private static SelectionUIService();
    protected virtual CreateParams get_CreateParams();
    protected virtual void Dispose(bool disposing);
    public static string GetTransactionName(SelectionRules rules, Object[] objects);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnDragEnter(DragEventArgs devent);
    protected virtual void OnDragOver(DragEventArgs devent);
    protected virtual void OnDragLeave(EventArgs e);
    protected virtual void OnDragDrop(DragEventArgs devent);
    protected virtual void OnDoubleClick(EventArgs devent);
    protected virtual void OnMouseDown(MouseEventArgs me);
    protected virtual void OnMouseMove(MouseEventArgs me);
    protected virtual void OnMouseUp(MouseEventArgs me);
    protected virtual void OnMove(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void WndProc(Message& m);
    private sealed virtual override bool System.Windows.Forms.Design.ISelectionUIService.get_Dragging();
    private sealed virtual override bool System.Windows.Forms.Design.ISelectionUIService.get_Visible();
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.set_Visible(bool value);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.add_ContainerSelectorActive(ContainerSelectorActiveEventHandler value);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.remove_ContainerSelectorActive(ContainerSelectorActiveEventHandler value);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.AssignSelectionUIHandler(object component, ISelectionUIHandler handler);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.ClearSelectionUIHandler(object component, ISelectionUIHandler handler);
    private sealed virtual override bool System.Windows.Forms.Design.ISelectionUIService.BeginDrag(SelectionRules rules, int initialX, int initialY);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.DragMoved(Rectangle offset);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.EndDrag(bool cancel);
    private sealed virtual override Object[] System.Windows.Forms.Design.ISelectionUIService.FilterSelection(Object[] components, SelectionRules selectionRules);
    private sealed virtual override Size System.Windows.Forms.Design.ISelectionUIService.GetAdornmentDimensions(AdornmentType adornmentType);
    private sealed virtual override bool System.Windows.Forms.Design.ISelectionUIService.GetAdornmentHitTest(object component, Point value);
    private sealed virtual override bool System.Windows.Forms.Design.ISelectionUIService.GetContainerSelected(object component);
    private sealed virtual override SelectionRules System.Windows.Forms.Design.ISelectionUIService.GetSelectionRules(object component);
    private sealed virtual override SelectionStyles System.Windows.Forms.Design.ISelectionUIService.GetSelectionStyle(object component);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.SetContainerSelected(object component, bool selected);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.SetSelectionStyle(object component, SelectionStyles style);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.SyncSelection();
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.SyncComponent(object component);
}
[SecurityCriticalAttribute]
public class System.Windows.Forms.Design.ShortcutKeysEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.Design.SplitContainerDesigner : ParentControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    protected bool AllowControlLasso { get; }
    protected bool DrawGrid { get; }
    public IList SnapLines { get; }
    internal SplitterPanel Selected { get; internal set; }
    public ICollection AssociatedComponents { get; }
    private static SplitContainerDesigner();
    public virtual DesignerActionListCollection get_ActionLists();
    protected virtual bool get_AllowControlLasso();
    protected virtual bool get_DrawGrid();
    protected virtual Control GetParentForComponent(IComponent component);
    public virtual IList get_SnapLines();
    public virtual int NumberOfInternalControlDesigners();
    public virtual ControlDesigner InternalControlDesigner(int internalControlIndex);
    internal SplitterPanel get_Selected();
    internal void set_Selected(SplitterPanel value);
    public virtual ICollection get_AssociatedComponents();
    protected virtual void OnDragEnter(DragEventArgs de);
    protected virtual IComponent[] CreateToolCore(ToolboxItem tool, int x, int y, int width, int height, bool hasLocation, bool hasSize);
    protected virtual void Dispose(bool disposing);
    protected virtual bool GetHitTest(Point point);
    protected virtual ControlBodyGlyph GetControlGlyph(GlyphSelectionType selectionType);
    public virtual void Initialize(IComponent component);
    protected virtual void OnPaintAdornments(PaintEventArgs pe);
    public virtual bool CanParent(Control control);
    internal void SplitterPanelHover();
}
internal class System.Windows.Forms.Design.SplitterDesigner : ControlDesigner {
    protected virtual void OnPaintAdornments(PaintEventArgs pe);
    protected virtual void WndProc(Message& m);
}
internal class System.Windows.Forms.Design.SplitterPanelDesigner : PanelDesigner {
    protected InheritanceAttribute InheritanceAttribute { get; }
    internal bool Selected { get; internal set; }
    public IList SnapLines { get; }
    public SelectionRules SelectionRules { get; }
    public virtual bool CanBeParentedTo(IDesigner parentDesigner);
    protected virtual InheritanceAttribute get_InheritanceAttribute();
    internal bool get_Selected();
    internal void set_Selected(bool value);
    protected virtual void OnDragEnter(DragEventArgs de);
    protected virtual void OnDragOver(DragEventArgs de);
    protected virtual void OnDragLeave(EventArgs e);
    protected virtual void OnDragDrop(DragEventArgs de);
    protected virtual void OnMouseHover();
    protected virtual void Dispose(bool disposing);
    public virtual void Initialize(IComponent component);
    internal void DrawSelectedBorder();
    internal void EraseBorder();
    internal void DrawWaterMark(Graphics g);
    protected virtual void OnPaintAdornments(PaintEventArgs pe);
    protected virtual void PreFilterProperties(IDictionary properties);
    public virtual IList get_SnapLines();
    public virtual SelectionRules get_SelectionRules();
}
[AttributeUsageAttribute("708")]
internal class System.Windows.Forms.Design.SRDisplayNameAttribute : DisplayNameAttribute {
    public string DisplayName { get; }
    public SRDisplayNameAttribute(string displayName);
    public virtual string get_DisplayName();
}
internal class System.Windows.Forms.Design.StandardCommandToolStripMenuItem : ToolStripMenuItem {
    public IMenuCommandService MenuService { get; }
    public Image Image { get; public set; }
    public StandardCommandToolStripMenuItem(CommandID menuID, string text, string imageName, IServiceProvider serviceProvider);
    public void RefreshItem();
    public IMenuCommandService get_MenuService();
    public virtual Image get_Image();
    public virtual void set_Image(Image value);
    protected virtual void OnClick(EventArgs e);
}
internal class System.Windows.Forms.Design.StandardGroups : object {
    public static string Code;
    public static string ZORder;
    public static string Grid;
    public static string Lock;
    public static string Verbs;
    public static string Custom;
    public static string Selection;
    public static string Edit;
    public static string Properties;
}
internal class System.Windows.Forms.Design.StandardMenuStripVerb : object {
    internal StandardMenuStripVerb(string text, ToolStripDesigner designer);
    public void InsertItems();
}
internal class System.Windows.Forms.Design.StatusBarDesigner : ControlDesigner {
    public ICollection AssociatedComponents { get; }
    public virtual ICollection get_AssociatedComponents();
}
internal class System.Windows.Forms.Design.StatusCommandUI : object {
    public StatusCommandUI(IServiceProvider provider);
    public void SetStatusInformation(Component selectedComponent, Point location);
    public void SetStatusInformation(Component selectedComponent);
    public void SetStatusInformation(Rectangle bounds);
}
internal class System.Windows.Forms.Design.StringArrayEditor : StringCollectionEditor {
    public StringArrayEditor(Type type);
    protected virtual Type CreateCollectionItemType();
    protected virtual Object[] GetItems(object editValue);
    protected virtual object SetItems(object editValue, Object[] value);
}
internal class System.Windows.Forms.Design.StringCollectionEditor : CollectionEditor {
    protected string HelpTopic { get; }
    public StringCollectionEditor(Type type);
    protected virtual CollectionForm CreateCollectionForm();
    protected virtual string get_HelpTopic();
}
internal class System.Windows.Forms.Design.StyleCollectionEditor : CollectionEditor {
    protected string helptopic;
    protected string HelpTopic { get; }
    public StyleCollectionEditor(Type type);
    protected virtual CollectionForm CreateCollectionForm();
    protected virtual string get_HelpTopic();
}
internal class System.Windows.Forms.Design.TabControlDesigner : ParentControlDesigner {
    protected bool AllowControlLasso { get; }
    protected bool DrawGrid { get; }
    public bool ParticipatesWithSnapLines { get; }
    public DesignerVerbCollection Verbs { get; }
    protected virtual bool get_AllowControlLasso();
    protected virtual bool get_DrawGrid();
    public virtual bool get_ParticipatesWithSnapLines();
    public virtual DesignerVerbCollection get_Verbs();
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    public virtual bool CanParent(Control control);
    protected virtual IComponent[] CreateToolCore(ToolboxItem tool, int x, int y, int width, int height, bool hasLocation, bool hasSize);
    protected virtual void Dispose(bool disposing);
    protected virtual bool GetHitTest(Point point);
    internal static TabPage GetTabPageOfComponent(TabControl parent, object comp);
    public virtual void Initialize(IComponent component);
    protected virtual void OnPaintAdornments(PaintEventArgs pe);
    protected virtual void PreFilterProperties(IDictionary properties);
    protected virtual void OnDragEnter(DragEventArgs de);
    protected virtual void OnDragDrop(DragEventArgs de);
    protected virtual void OnDragLeave(EventArgs e);
    protected virtual void OnDragOver(DragEventArgs de);
    protected virtual void OnGiveFeedback(GiveFeedbackEventArgs e);
    protected virtual void WndProc(Message& m);
}
internal class System.Windows.Forms.Design.TabControlToolboxItem : ToolboxItem {
    protected virtual IComponent[] CreateComponentsCore(IDesignerHost host);
}
internal class System.Windows.Forms.Design.TableLayoutControlCollectionCodeDomSerializer : CollectionCodeDomSerializer {
    protected virtual object SerializeCollection(IDesignerSerializationManager manager, CodeExpression targetExpression, Type targetType, ICollection originalCollection, ICollection valuesToSerialize);
}
internal class System.Windows.Forms.Design.TableLayoutPanelCodeDomSerializer : CodeDomSerializer {
    private static TableLayoutPanelCodeDomSerializer();
    public virtual object Deserialize(IDesignerSerializationManager manager, object codeObject);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
internal class System.Windows.Forms.Design.TableLayoutPanelDesigner : FlowPanelDesigner {
    public int RowCount { get; public set; }
    public int ColumnCount { get; public set; }
    internal TableLayoutPanel Table { get; }
    public DesignerVerbCollection Verbs { get; }
    public DesignerActionListCollection ActionLists { get; }
    protected InheritanceAttribute InheritanceAttribute { get; }
    public int get_RowCount();
    public void set_RowCount(int value);
    public int get_ColumnCount();
    public void set_ColumnCount(int value);
    internal TableLayoutPanel get_Table();
    public virtual DesignerVerbCollection get_Verbs();
    public virtual DesignerActionListCollection get_ActionLists();
    protected internal virtual bool CanAddComponent(IComponent component);
    protected virtual void Dispose(bool disposing);
    protected virtual void DrawBorder(Graphics graphics);
    internal void SuspendEnsureAvailableStyles();
    internal void ResumeEnsureAvailableStyles(bool performEnsure);
    public virtual GlyphCollection GetGlyphs(GlyphSelectionType selectionType);
    public virtual void Initialize(IComponent component);
    protected virtual InheritanceAttribute get_InheritanceAttribute();
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    protected virtual IComponent[] CreateToolCore(ToolboxItem tool, int x, int y, int width, int height, bool hasLocation, bool hasSize);
    protected virtual void OnContextMenu(int x, int y);
    protected virtual void OnDragEnter(DragEventArgs de);
    protected virtual void OnDragLeave(EventArgs e);
    protected virtual void OnDragDrop(DragEventArgs de);
    protected virtual void OnDragOver(DragEventArgs de);
    protected virtual void OnMouseDragBegin(int x, int y);
    protected virtual void OnMouseDragMove(int x, int y);
    protected virtual void OnMouseDragEnd(bool cancel);
    internal void InsertRowCol(bool isRow, int index);
    internal void FixUpControlsOnInsert(bool isRow, int index);
    internal void FixUpControlsOnDelete(bool isRow, int index, ArrayList deleteList);
    internal void DeleteRowCol(bool isRow, int index);
    protected virtual void PreFilterProperties(IDictionary properties);
}
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
internal class System.Windows.Forms.Design.TabOrder : Control {
    public TabOrder(IDesignerHost host);
    protected virtual void Dispose(bool disposing);
    public virtual void OnMouseDoubleClick(IComponent component);
    public virtual void OnMouseDown(IComponent component, MouseButtons button, int x, int y);
    protected virtual void OnMouseDown(MouseEventArgs e);
    public virtual void OnMouseHover(IComponent component);
    public virtual void OnMouseMove(IComponent component, int x, int y);
    protected virtual void OnMouseMove(MouseEventArgs e);
    public virtual void OnMouseUp(IComponent component, MouseButtons button);
    public virtual void OnSetCursor(IComponent component);
    protected virtual void OnPaint(PaintEventArgs e);
    public sealed virtual bool OverrideInvoke(MenuCommand cmd);
    public sealed virtual bool OverrideStatus(MenuCommand cmd);
}
internal class System.Windows.Forms.Design.TabPageCollectionEditor : CollectionEditor {
    protected virtual object SetItems(object editValue, Object[] value);
    protected virtual object CreateInstance(Type itemType);
}
internal class System.Windows.Forms.Design.TabPageDesigner : PanelDesigner {
    public SelectionRules SelectionRules { get; }
    public virtual bool CanBeParentedTo(IDesigner parentDesigner);
    public virtual SelectionRules get_SelectionRules();
    internal void OnDragDropInternal(DragEventArgs de);
    internal void OnDragEnterInternal(DragEventArgs de);
    internal void OnDragLeaveInternal(EventArgs e);
    internal void OnDragOverInternal(DragEventArgs e);
    internal void OnGiveFeedbackInternal(GiveFeedbackEventArgs e);
    protected virtual ControlBodyGlyph GetControlGlyph(GlyphSelectionType selectionType);
}
internal class System.Windows.Forms.Design.TemplateNodeCustomMenuItemCollection : CustomMenuItemCollection {
    public TemplateNodeCustomMenuItemCollection(IServiceProvider provider, Component currentItem);
}
internal enum System.Windows.Forms.Design.TemplateNodeSelectionState : Enum {
    public int value__;
    public static TemplateNodeSelectionState None;
    public static TemplateNodeSelectionState TemplateNodeSelected;
    public static TemplateNodeSelectionState SplitButtonSelected;
    public static TemplateNodeSelectionState DropDownSelected;
    public static TemplateNodeSelectionState MouseOverLabel;
    public static TemplateNodeSelectionState MouseOverHotRegion;
    public static TemplateNodeSelectionState HotRegionSelected;
}
internal class System.Windows.Forms.Design.TextBoxActionList : DesignerActionList {
    public bool Multiline { get; public set; }
    public TextBoxActionList(TextBoxDesigner designer);
    public bool get_Multiline();
    public void set_Multiline(bool value);
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
internal class System.Windows.Forms.Design.TextBoxBaseDesigner : ControlDesigner {
    public IList SnapLines { get; }
    public SelectionRules SelectionRules { get; }
    public virtual IList get_SnapLines();
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    protected virtual void PreFilterProperties(IDictionary properties);
    public virtual SelectionRules get_SelectionRules();
}
internal class System.Windows.Forms.Design.TextBoxDesigner : TextBoxBaseDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
    protected virtual void PreFilterProperties(IDictionary properties);
}
public enum System.Windows.Forms.Design.ThemedScrollbarMode : Enum {
    public int value__;
    public static ThemedScrollbarMode All;
    public static ThemedScrollbarMode None;
    public static ThemedScrollbarMode OnlyTopLevel;
}
public class System.Windows.Forms.Design.ThemedScrollbarWindow : ValueType {
    public IntPtr Handle;
    public ThemedScrollbarMode Mode;
}
internal class System.Windows.Forms.Design.ToolBarButtonDesigner : ComponentDesigner {
    public virtual void InitializeNewComponent(IDictionary defaultValues);
}
internal class System.Windows.Forms.Design.ToolBarDesigner : ControlDesigner {
    public ICollection AssociatedComponents { get; }
    public SelectionRules SelectionRules { get; }
    public virtual ICollection get_AssociatedComponents();
    public virtual SelectionRules get_SelectionRules();
}
internal class System.Windows.Forms.Design.ToolStripActionList : DesignerActionList {
    public bool AutoShow { get; public set; }
    public DockStyle Dock { get; public set; }
    public ToolStripRenderMode RenderMode { get; public set; }
    public ToolStripGripStyle GripStyle { get; public set; }
    public ToolStripActionList(ToolStripDesigner designer);
    public virtual bool get_AutoShow();
    public virtual void set_AutoShow(bool value);
    public DockStyle get_Dock();
    public void set_Dock(DockStyle value);
    public ToolStripRenderMode get_RenderMode();
    public void set_RenderMode(ToolStripRenderMode value);
    public ToolStripGripStyle get_GripStyle();
    public void set_GripStyle(ToolStripGripStyle value);
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
internal class System.Windows.Forms.Design.ToolStripAdornerWindowService : object {
    internal Control ToolStripAdornerWindowControl { get; }
    public Graphics ToolStripAdornerWindowGraphics { get; }
    internal Adorner DropDownAdorner { get; }
    internal ArrayList DropDowns { get; internal set; }
    internal ToolStripAdornerWindowService(IServiceProvider serviceProvider, Control windowFrame);
    internal Control get_ToolStripAdornerWindowControl();
    public Graphics get_ToolStripAdornerWindowGraphics();
    internal Adorner get_DropDownAdorner();
    public sealed virtual void Dispose();
    public Point AdornerWindowPointToScreen(Point p);
    public Point AdornerWindowToScreen();
    public Point ControlToAdornerWindow(Control c);
    public void Invalidate();
    public void Invalidate(Rectangle rect);
    public void Invalidate(Region r);
    internal ArrayList get_DropDowns();
    internal void set_DropDowns(ArrayList value);
    internal void ProcessPaintMessage(Rectangle paintRect);
}
internal class System.Windows.Forms.Design.ToolStripCodeDomSerializer : ControlCodeDomSerializer {
    protected virtual bool HasSitedNonReadonlyChildren(Control parent);
}
internal class System.Windows.Forms.Design.ToolStripCollectionEditor : CollectionEditor {
    protected string HelpTopic { get; }
    protected virtual CollectionForm CreateCollectionForm();
    protected virtual string get_HelpTopic();
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
}
internal class System.Windows.Forms.Design.ToolStripContainerActionList : DesignerActionList {
    public bool TopVisible { get; public set; }
    public bool BottomVisible { get; public set; }
    public bool LeftVisible { get; public set; }
    public bool RightVisible { get; public set; }
    public ToolStripContainerActionList(ToolStripContainer control);
    public void SetDockToForm();
    public void ReparentControls();
    public bool get_TopVisible();
    public void set_TopVisible(bool value);
    public bool get_BottomVisible();
    public void set_BottomVisible(bool value);
    public bool get_LeftVisible();
    public void set_LeftVisible(bool value);
    public bool get_RightVisible();
    public void set_RightVisible(bool value);
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
internal class System.Windows.Forms.Design.ToolStripContainerDesigner : ParentControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    protected bool AllowControlLasso { get; }
    protected bool DrawGrid { get; }
    public IList SnapLines { get; }
    public ICollection AssociatedComponents { get; }
    public virtual DesignerActionListCollection get_ActionLists();
    protected virtual bool get_AllowControlLasso();
    protected virtual bool get_DrawGrid();
    public virtual IList get_SnapLines();
    public virtual int NumberOfInternalControlDesigners();
    public virtual ControlDesigner InternalControlDesigner(int internalControlIndex);
    public virtual ICollection get_AssociatedComponents();
    protected virtual IComponent[] CreateToolCore(ToolboxItem tool, int x, int y, int width, int height, bool hasLocation, bool hasSize);
    public virtual bool CanParent(Control control);
    protected virtual void Dispose(bool disposing);
    protected virtual ControlBodyGlyph GetControlGlyph(GlyphSelectionType selectionType);
    protected virtual Control GetParentForComponent(IComponent component);
    public virtual void Initialize(IComponent component);
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    protected virtual void OnPaintAdornments(PaintEventArgs pe);
    protected virtual void PreFilterProperties(IDictionary properties);
}
internal class System.Windows.Forms.Design.ToolStripContentPanelDesigner : PanelDesigner {
    public IList SnapLines { get; }
    public virtual IList get_SnapLines();
    public virtual bool CanBeParentedTo(IDesigner parentDesigner);
    protected virtual void OnContextMenu(int x, int y);
    protected virtual void PreFilterEvents(IDictionary events);
}
internal class System.Windows.Forms.Design.ToolStripCustomTypeDescriptor : CustomTypeDescriptor {
    public ToolStripCustomTypeDescriptor(ToolStrip instance);
    public virtual object GetPropertyOwner(PropertyDescriptor pd);
    public virtual PropertyDescriptorCollection GetProperties();
    public virtual PropertyDescriptorCollection GetProperties(Attribute[] attributes);
}
internal class System.Windows.Forms.Design.ToolStripDesigner : ControlDesigner {
    internal static Point LastCursorPosition;
    internal static bool _autoAddNewItems;
    internal static ToolStripItem dragItem;
    internal static bool shiftState;
    internal static bool editTemplateNode;
    public DesignerActionListCollection ActionLists { get; }
    public ICollection AssociatedComponents { get; }
    public bool CacheItems { get; public set; }
    internal bool ControlSupportsSnaplines { get; }
    public bool DontCloseOverflow { get; public set; }
    public Rectangle DragBoxFromMouseDown { get; public set; }
    internal bool EditingCollection { get; internal set; }
    public ToolStripEditorManager EditManager { get; }
    internal ToolStripTemplateNode Editor { get; }
    public DesignerToolStripControlHost EditorNode { get; }
    internal ToolStrip EditorToolStrip { get; internal set; }
    public bool FireSyncSelection { get; public set; }
    public int IndexOfItemUnderMouseToDrag { get; public set; }
    protected InheritanceAttribute InheritanceAttribute { get; }
    public DesignerTransaction InsertTansaction { get; public set; }
    public ArrayList Items { get; }
    public DesignerTransaction NewItemTransaction { get; public set; }
    internal ISelectionService SelectionService { get; }
    public bool SupportEditing { get; }
    protected ToolStrip ToolStrip { get; }
    internal bool SerializePerformLayout { get; }
    internal bool Visible { get; internal set; }
    private static ToolStripDesigner();
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual ICollection get_AssociatedComponents();
    public bool get_CacheItems();
    public void set_CacheItems(bool value);
    internal virtual bool get_ControlSupportsSnaplines();
    public bool get_DontCloseOverflow();
    public void set_DontCloseOverflow(bool value);
    public Rectangle get_DragBoxFromMouseDown();
    public void set_DragBoxFromMouseDown(Rectangle value);
    internal bool get_EditingCollection();
    internal void set_EditingCollection(bool value);
    public ToolStripEditorManager get_EditManager();
    internal ToolStripTemplateNode get_Editor();
    public DesignerToolStripControlHost get_EditorNode();
    internal ToolStrip get_EditorToolStrip();
    internal void set_EditorToolStrip(ToolStrip value);
    public bool get_FireSyncSelection();
    public void set_FireSyncSelection(bool value);
    public int get_IndexOfItemUnderMouseToDrag();
    public void set_IndexOfItemUnderMouseToDrag(int value);
    protected virtual InheritanceAttribute get_InheritanceAttribute();
    public DesignerTransaction get_InsertTansaction();
    public void set_InsertTansaction(DesignerTransaction value);
    public ArrayList get_Items();
    public DesignerTransaction get_NewItemTransaction();
    public void set_NewItemTransaction(DesignerTransaction value);
    internal ISelectionService get_SelectionService();
    public bool get_SupportEditing();
    protected ToolStrip get_ToolStrip();
    internal virtual bool get_SerializePerformLayout();
    internal bool get_Visible();
    internal void set_Visible(bool value);
    internal ToolStripItem AddNewItem(Type t, string text, bool enterKeyPressed, bool tabKeyPressed);
    internal void AddNewTemplateNode(ToolStrip wb);
    internal void CancelPendingMenuItemTransaction();
    internal bool Commit();
    protected virtual void Dispose(bool disposing);
    public virtual void DoDefaultAction();
    protected virtual ControlBodyGlyph GetControlGlyph(GlyphSelectionType selectionType);
    public virtual GlyphCollection GetGlyphs(GlyphSelectionType selType);
    protected virtual bool GetHitTest(Point point);
    public virtual void Initialize(IComponent component);
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    internal static bool IsGlyphTotallyVisible(Rectangle itemBounds, Rectangle parentBounds);
    internal static string NameFromText(string text, Type componentType, IServiceProvider serviceProvider, bool adjustCapitalization);
    internal static string NameFromText(string text, Type componentType, IServiceProvider serviceProvider);
    protected virtual void OnContextMenu(int x, int y);
    protected virtual void OnDragEnter(DragEventArgs de);
    protected virtual void OnDragOver(DragEventArgs de);
    protected virtual void OnDragDrop(DragEventArgs de);
    protected virtual void OnMouseDragMove(int x, int y);
    protected virtual void OnSetCursor();
    protected virtual void PreFilterProperties(IDictionary properties);
    internal void RollBack();
    internal void ShowEditNode(bool clicked);
    protected virtual void WndProc(Message& m);
}
internal class System.Windows.Forms.Design.ToolStripDesignerUtils : object {
    public static ArrayList originalSelComps;
    private static ToolStripDesignerUtils();
    public static void GetAdjustedBounds(ToolStripItem item, Rectangle& r);
    public static Bitmap GetToolboxBitmap(Type itemType);
    public static string GetToolboxDescription(Type itemType);
    public static Type[] GetStandardItemTypes(IComponent component);
    public static Type[] GetCustomItemTypes(IComponent component, IServiceProvider serviceProvider);
    public static Type[] GetCustomItemTypes(IComponent component, ITypeDiscoveryService discoveryService);
    public static ToolStripItem[] GetStandardItemMenuItems(IComponent component, EventHandler onClick, bool convertTo);
    public static ToolStripItem[] GetCustomItemMenuItems(IComponent component, EventHandler onClick, bool convertTo, IServiceProvider serviceProvider);
    public static NewItemsContextMenuStrip GetNewItemDropDown(IComponent component, ToolStripItem currentItem, EventHandler onClick, bool convertTo, IServiceProvider serviceProvider, bool populateCustom);
    public static void GetCustomNewItemDropDown(NewItemsContextMenuStrip contextMenu, IComponent component, ToolStripItem currentItem, EventHandler onClick, bool convertTo, IServiceProvider serviceProvider);
    public static void InvalidateSelection(ArrayList originalSelComps, ToolStripItem nextSelection, IServiceProvider provider, bool shiftPressed);
}
internal class System.Windows.Forms.Design.ToolStripDropDownDesigner : ComponentDesigner {
    internal ToolStripMenuItem currentParent;
    public DesignerActionListCollection ActionLists { get; }
    public ICollection AssociatedComponents { get; }
    public ToolStripMenuItem DesignerMenuItem { get; }
    internal bool EditingCollection { get; internal set; }
    protected InheritanceAttribute InheritanceAttribute { get; }
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual ICollection get_AssociatedComponents();
    public ToolStripMenuItem get_DesignerMenuItem();
    internal bool get_EditingCollection();
    internal void set_EditingCollection(bool value);
    protected virtual InheritanceAttribute get_InheritanceAttribute();
    internal void AddSelectionGlyphs();
    protected virtual void Dispose(bool disposing);
    public virtual void Initialize(IComponent component);
    protected virtual void PreFilterProperties(IDictionary properties);
    public void ResetSettingsKey();
    public void ShowMenu();
    public void ShowMenu(ToolStripItem selectedItem);
}
internal class System.Windows.Forms.Design.ToolStripDropDownItemDesigner : ToolStripItemDesigner {
    public ICollection AssociatedComponents { get; }
    public virtual void Initialize(IComponent component);
    public virtual ICollection get_AssociatedComponents();
}
internal class System.Windows.Forms.Design.ToolStripEditorManager : object {
    public ToolStripEditorManager(IComponent comp);
    internal void ActivateEditor(ToolStripItem item, bool clicked);
    internal void CloseManager();
}
internal class System.Windows.Forms.Design.ToolStripInSituService : object {
    public bool IgnoreMessages { get; }
    public ToolStripInSituService(IServiceProvider provider);
    public sealed virtual void Dispose();
    public sealed virtual bool get_IgnoreMessages();
    public sealed virtual void HandleKeyChar();
    public sealed virtual IntPtr GetEditWindow();
}
internal class System.Windows.Forms.Design.ToolStripItemBehavior : Behavior {
    internal Rectangle dragBoxFromMouseDown;
    public virtual bool OnMouseDoubleClick(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseUp(Glyph g, MouseButtons button);
    public virtual bool OnMouseDown(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseEnter(Glyph g);
    public virtual bool OnMouseLeave(Glyph g);
    public virtual bool OnMouseMove(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual void OnDragDrop(Glyph g, DragEventArgs e);
    public virtual void OnDragEnter(Glyph g, DragEventArgs e);
    public virtual void OnDragLeave(Glyph g, EventArgs e);
    public virtual void OnDragOver(Glyph g, DragEventArgs e);
}
internal class System.Windows.Forms.Design.ToolStripItemCustomMenuItemCollection : CustomMenuItemCollection {
    public ToolStripItemCustomMenuItemCollection(IServiceProvider provider, Component currentItem);
    protected void ChangeProperty(string propertyName, object value);
    protected void ChangeProperty(IComponent target, string propertyName, object value);
    public virtual void RefreshItems();
}
internal class System.Windows.Forms.Design.ToolStripItemDataObject : DataObject {
    internal ArrayList DragComponents { get; }
    internal ToolStrip Owner { get; }
    internal ToolStripItem PrimarySelection { get; }
    internal ToolStripItemDataObject(ArrayList dragComponents, ToolStripItem primarySelection, ToolStrip owner);
    internal ArrayList get_DragComponents();
    internal ToolStrip get_Owner();
    internal ToolStripItem get_PrimarySelection();
}
internal class System.Windows.Forms.Design.ToolStripItemDesigner : ComponentDesigner {
    internal ControlBodyGlyph bodyGlyph;
    internal bool dummyItemAdded;
    internal Rectangle dragBoxFromMouseDown;
    internal int indexOfItemUnderMouseToDrag;
    internal bool AutoSize { get; internal set; }
    internal ToolStripTemplateNode Editor { get; internal set; }
    protected InheritanceAttribute InheritanceAttribute { get; }
    internal bool IsEditorActive { get; internal set; }
    internal bool InternalCreate { get; internal set; }
    protected IComponent ImmediateParent { get; }
    protected IComponent ParentComponent { get; }
    public ToolStripItem ToolStripItem { get; }
    protected bool Visible { get; protected set; }
    internal bool get_AutoSize();
    internal void set_AutoSize(bool value);
    internal virtual bool CanBeAssociatedWith(IDesigner parentDesigner);
    internal virtual ToolStripTemplateNode get_Editor();
    internal virtual void set_Editor(ToolStripTemplateNode value);
    protected virtual InheritanceAttribute get_InheritanceAttribute();
    internal bool get_IsEditorActive();
    internal void set_IsEditorActive(bool value);
    internal bool get_InternalCreate();
    internal void set_InternalCreate(bool value);
    protected IComponent get_ImmediateParent();
    protected virtual IComponent get_ParentComponent();
    public ToolStripItem get_ToolStripItem();
    protected bool get_Visible();
    protected void set_Visible(bool value);
    internal ArrayList AddParentTree();
    internal virtual void CommitEdit(Type type, string text, bool commit, bool enterKeyPressed, bool tabKeyPressed);
    protected virtual void Dispose(bool disposing);
    protected virtual Component GetOwnerForActionList();
    internal virtual ToolStrip GetMainToolStrip();
    public Rectangle GetGlyphBounds();
    public void GetGlyphs(GlyphCollection& glyphs, Behavior standardBehavior);
    internal ToolStripDropDown GetFirstDropDown(ToolStripItem currentItem);
    public virtual void Initialize(IComponent component);
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    internal virtual ToolStripItem MorphCurrentItem(Type t);
    protected virtual void PreFilterProperties(IDictionary properties);
    public void RemoveItem();
    internal void SelectNextItem(ISelectionService service, bool enterKeyPressed, ToolStripDesigner designer);
    internal void SetItemVisible(bool toolStripSelected, ToolStripDesigner designer);
    internal virtual void ShowEditNode(bool clicked);
    internal virtual bool SetSelection(bool enterKeyPressed);
    internal virtual void ShowContextMenu(int x, int y);
}
internal class System.Windows.Forms.Design.ToolStripItemGlyph : ControlBodyGlyph {
    public ToolStripItem Item { get; }
    public Rectangle Bounds { get; }
    public ToolStripItemDesigner ItemDesigner { get; }
    public ToolStripItemGlyph(ToolStripItem item, ToolStripItemDesigner itemDesigner, Rectangle bounds, Behavior b);
    public ToolStripItem get_Item();
    public virtual Rectangle get_Bounds();
    public ToolStripItemDesigner get_ItemDesigner();
    public virtual Cursor GetHitTest(Point p);
    public virtual void Paint(PaintEventArgs pe);
}
internal class System.Windows.Forms.Design.ToolStripKeyboardHandlingService : object {
    internal ToolStripTemplateNode ActiveTemplateNode { get; internal set; }
    internal bool ContextMenuShownByKeyBoard { get; internal set; }
    internal bool CopyInProgress { get; internal set; }
    internal bool CutOrDeleteInProgress { get; internal set; }
    internal object SelectedDesignerControl { get; internal set; }
    internal object OwnerItemAfterCut { get; internal set; }
    internal object ShiftPrimaryItem { get; internal set; }
    internal bool TemplateNodeActive { get; internal set; }
    internal bool TemplateNodeContextMenuOpen { get; internal set; }
    public ToolStripKeyboardHandlingService(IServiceProvider serviceProvider);
    internal ToolStripTemplateNode get_ActiveTemplateNode();
    internal void set_ActiveTemplateNode(ToolStripTemplateNode value);
    internal bool get_ContextMenuShownByKeyBoard();
    internal void set_ContextMenuShownByKeyBoard(bool value);
    internal bool get_CopyInProgress();
    internal void set_CopyInProgress(bool value);
    internal bool get_CutOrDeleteInProgress();
    internal void set_CutOrDeleteInProgress(bool value);
    internal object get_SelectedDesignerControl();
    internal void set_SelectedDesignerControl(object value);
    internal object get_OwnerItemAfterCut();
    internal void set_OwnerItemAfterCut(object value);
    internal void set_ShiftPrimaryItem(object value);
    internal object get_ShiftPrimaryItem();
    internal bool get_TemplateNodeActive();
    internal void set_TemplateNodeActive(bool value);
    internal bool get_TemplateNodeContextMenuOpen();
    internal void set_TemplateNodeContextMenuOpen(bool value);
    public void AddCommands();
    public bool OnContextMenu(int x, int y);
    public void ProcessKeySelect(bool reverse, MenuCommand cmd);
    public void ProcessUpDown(bool down);
    public void RestoreCommands();
    internal void ResetActiveTemplateNodeSelectionState();
    public void RemoveCommands();
    public void RotateTab(bool backwards);
}
internal class System.Windows.Forms.Design.ToolStripMenuItemCodeDomSerializer : CodeDomSerializer {
    public virtual object Deserialize(IDesignerSerializationManager manager, object codeObject);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
internal class System.Windows.Forms.Design.ToolStripMenuItemDesigner : ToolStripDropDownItemDesigner {
    public ICollection AssociatedComponents { get; }
    internal ToolStripTemplateNode Editor { get; internal set; }
    protected IComponent ParentComponent { get; }
    public virtual ICollection get_AssociatedComponents();
    internal virtual ToolStripTemplateNode get_Editor();
    internal virtual void set_Editor(ToolStripTemplateNode value);
    protected virtual IComponent get_ParentComponent();
    internal void AddNewTemplateNode(ToolStripDropDown dropDown);
    internal void AddItemBodyGlyph(ToolStripItem item);
    internal virtual void CommitEdit(Type type, string text, bool commit, bool enterKeyPressed, bool tabKeyPressed);
    internal void Commit();
    protected virtual void Dispose(bool disposing);
    internal void EditTemplateNode(bool clicked);
    internal void EnterInSituEdit(ToolStripItem toolItem);
    protected virtual Component GetOwnerForActionList();
    internal virtual ToolStrip GetMainToolStrip();
    internal void HookEvents();
    public virtual void Initialize(IComponent component);
    internal void InitializeBodyGlyphsForItems(bool addGlyphs, ToolStripDropDownItem item);
    internal void InitializeDropDown();
    internal virtual ToolStripItem MorphCurrentItem(Type t);
    protected virtual void PreFilterProperties(IDictionary properties);
    internal void RemoveTypeHereNode(ToolStripDropDownItem ownerItem);
    internal void RemoveItemBodyGlyph(ToolStripItem item);
    internal void ResetGlyphs(ToolStripDropDownItem item);
    internal virtual bool SetSelection(bool enterKeyPressed);
    internal virtual void ShowEditNode(bool clicked);
    internal void ShowOwnerDropDown(ToolStripDropDownItem currentSelection);
    internal void UnHookEvents();
}
internal class System.Windows.Forms.Design.ToolStripPanelDesigner : ScrollableControlDesigner {
    protected InheritanceAttribute InheritanceAttribute { get; }
    public bool ParticipatesWithSnapLines { get; }
    public SelectionRules SelectionRules { get; }
    public ToolStripPanelSelectionGlyph ToolStripPanelSelectorGlyph { get; }
    private static ToolStripPanelDesigner();
    protected virtual InheritanceAttribute get_InheritanceAttribute();
    public virtual bool get_ParticipatesWithSnapLines();
    public virtual SelectionRules get_SelectionRules();
    public ToolStripPanelSelectionGlyph get_ToolStripPanelSelectorGlyph();
    public virtual bool CanParent(Control control);
    public virtual bool CanBeParentedTo(IDesigner parentDesigner);
    protected virtual IComponent[] CreateToolCore(ToolboxItem tool, int x, int y, int width, int height, bool hasLocation, bool hasSize);
    protected virtual void Dispose(bool disposing);
    internal void ExpandTopPanel();
    internal Glyph GetGlyph();
    protected virtual Control GetParentForComponent(IComponent component);
    public virtual void Initialize(IComponent component);
    internal void InvalidateGlyph();
    protected virtual void OnContextMenu(int x, int y);
    protected virtual void OnPaintAdornments(PaintEventArgs pe);
    protected virtual void PreFilterEvents(IDictionary events);
    protected virtual void PreFilterProperties(IDictionary properties);
}
internal class System.Windows.Forms.Design.ToolStripTemplateNode : object {
    internal bool ignoreFirstKeyUp;
    public bool Active { get; public set; }
    public ToolStripItem ActiveItem { get; public set; }
    public Rectangle Bounds { get; public set; }
    public DesignerToolStripControlHost ControlHost { get; public set; }
    public ToolStrip EditorToolStrip { get; }
    internal TextBox EditBox { get; }
    public Rectangle HotRegion { get; public set; }
    public bool IMEModeSet { get; public set; }
    public Type ToolStripItemType { get; public set; }
    internal bool IsSystemContextMenuDisplayed { get; internal set; }
    public ToolStripTemplateNode(IComponent component, string text, Image image);
    private static ToolStripTemplateNode();
    public bool get_Active();
    public void set_Active(bool value);
    public ToolStripItem get_ActiveItem();
    public void set_ActiveItem(ToolStripItem value);
    public void add_Activated(EventHandler value);
    public void remove_Activated(EventHandler value);
    public Rectangle get_Bounds();
    public void set_Bounds(Rectangle value);
    public DesignerToolStripControlHost get_ControlHost();
    public void set_ControlHost(DesignerToolStripControlHost value);
    public void add_Deactivated(EventHandler value);
    public void remove_Deactivated(EventHandler value);
    public void add_Closed(EventHandler value);
    public void remove_Closed(EventHandler value);
    public ToolStrip get_EditorToolStrip();
    internal TextBox get_EditBox();
    public Rectangle get_HotRegion();
    public void set_HotRegion(Rectangle value);
    public bool get_IMEModeSet();
    public void set_IMEModeSet(bool value);
    public Type get_ToolStripItemType();
    public void set_ToolStripItemType(Type value);
    internal bool get_IsSystemContextMenuDisplayed();
    internal void set_IsSystemContextMenuDisplayed(bool value);
    internal void CloseEditor();
    internal void Commit(bool enterKeyPressed, bool tabKeyPressed);
    internal void CommitAndSelect();
    internal void FocusEditor(ToolStripItem currentItem);
    protected void OnActivated(EventArgs e);
    protected void OnClosed(EventArgs e);
    protected void OnDeactivated(EventArgs e);
    public sealed virtual bool OverrideInvoke(MenuCommand cmd);
    public sealed virtual bool OverrideStatus(MenuCommand cmd);
    internal void RollBack();
    internal void ShowContextMenu(Point pt);
    internal void ShowDropDownMenu();
    internal void SetWidth(string text);
}
internal class System.Windows.Forms.Design.TrackBarDesigner : ControlDesigner {
    public SelectionRules SelectionRules { get; }
    public virtual SelectionRules get_SelectionRules();
}
internal class System.Windows.Forms.Design.TreeNodeCollectionEditor : CollectionEditor {
    protected string HelpTopic { get; }
    protected virtual CollectionForm CreateCollectionForm();
    protected virtual string get_HelpTopic();
}
internal class System.Windows.Forms.Design.TreeViewActionList : DesignerActionList {
    public ImageList ImageList { get; public set; }
    public TreeViewActionList(TreeViewDesigner designer);
    public void InvokeNodesDialog();
    public ImageList get_ImageList();
    public void set_ImageList(ImageList value);
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
internal class System.Windows.Forms.Design.TreeViewDesigner : ControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    protected virtual void Dispose(bool disposing);
    protected virtual bool GetHitTest(Point point);
    public virtual void Initialize(IComponent component);
    public virtual DesignerActionListCollection get_ActionLists();
}
internal class System.Windows.Forms.Design.UpDownBaseDesigner : ControlDesigner {
    public SelectionRules SelectionRules { get; }
    public IList SnapLines { get; }
    public virtual SelectionRules get_SelectionRules();
    public virtual IList get_SnapLines();
}
[ToolboxItemFilterAttribute("System.Windows.Forms.UserControl", "1")]
[ToolboxItemFilterAttribute("System.Windows.Forms.MainMenu", "2")]
internal class System.Windows.Forms.Design.UserControlDocumentDesigner : DocumentDesigner {
    internal virtual bool CanDropComponents(DragEventArgs de);
    protected virtual void PreFilterProperties(IDictionary properties);
}
internal class System.Windows.Forms.Design.VsPropertyGrid : PropertyGrid {
    protected Bitmap SortByPropertyImage { get; }
    protected Bitmap SortByCategoryImage { get; }
    protected Bitmap ShowPropertyPageImage { get; }
    public VsPropertyGrid(IServiceProvider serviceProvider);
    private static VsPropertyGrid();
    protected virtual Bitmap get_SortByPropertyImage();
    protected virtual Bitmap get_SortByCategoryImage();
    protected virtual Bitmap get_ShowPropertyPageImage();
}
internal class System.Windows.Forms.Design.WebBrowserDesigner : AxDesigner {
    public Uri Url { get; public set; }
    protected InheritanceAttribute InheritanceAttribute { get; }
    public Uri get_Url();
    public void set_Url(Uri value);
    public virtual void Initialize(IComponent c);
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    protected virtual InheritanceAttribute get_InheritanceAttribute();
    protected virtual void PreFilterProperties(IDictionary properties);
}
public class System.Windows.Forms.Design.WindowsFormsDesignerOptionService : DesignerOptionService {
    public DesignerOptions CompatibilityOptions { get; }
    public virtual DesignerOptions get_CompatibilityOptions();
    protected virtual void PopulateOptionCollection(DesignerOptionCollection options);
}
internal static class System.Windows.Forms.DpiHelper : object {
    internal static double LogicalDpi;
    internal static int DeviceDpi { get; }
    public static bool IsScalingRequired { get; }
    private static DpiHelper();
    internal static bool IsDpiAwarenessValueSet();
    internal static int get_DeviceDpi();
    public static bool get_IsScalingRequired();
    public static int LogicalToDeviceUnits(int value, int devicePixels);
    public static int LogicalToDeviceUnitsX(int value);
    public static int LogicalToDeviceUnitsY(int value);
    public static Size LogicalToDeviceUnits(Size logicalSize, int deviceDpi);
    public static Bitmap CreateResizedBitmap(Bitmap logicalImage, Size targetImageSize);
    public static void ScaleBitmapLogicalToDevice(Bitmap& logicalBitmap, int deviceDpi);
    public static void ScaleButtonImageLogicalToDevice(Button button);
}
internal static class System.Windows.Forms.ImageListUtils : object {
    public static PropertyDescriptor GetImageListProperty(PropertyDescriptor currentComponent, Object& instance);
}
internal static class ThisAssembly : object {
    internal static string Title;
    internal static string Description;
    internal static string DefaultAlias;
    internal static string Copyright;
    internal static string Version;
    internal static string InformationalVersion;
    internal static string DailyBuildNumberStr;
    internal static string BuildRevisionStr;
    internal static int DailyBuildNumber;
}
