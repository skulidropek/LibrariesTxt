public class System.DirectoryServices.Protocols.AddRequest : DirectoryRequest {
    public string DistinguishedName { get; public set; }
    public DirectoryAttributeCollection Attributes { get; }
    public AddRequest(string distinguishedName, DirectoryAttribute[] attributes);
    public AddRequest(string distinguishedName, string objectClass);
    public string get_DistinguishedName();
    public void set_DistinguishedName(string value);
    public DirectoryAttributeCollection get_Attributes();
    protected virtual XmlElement ToXmlNode(XmlDocument doc);
}
public class System.DirectoryServices.Protocols.AddResponse : DirectoryResponse {
}
public class System.DirectoryServices.Protocols.AsqRequestControl : DirectoryControl {
    public string AttributeName { get; public set; }
    public AsqRequestControl(string attributeName);
    public string get_AttributeName();
    public void set_AttributeName(string value);
    public virtual Byte[] GetValue();
}
public class System.DirectoryServices.Protocols.AsqResponseControl : DirectoryControl {
    public ResultCode Result { get; }
    public ResultCode get_Result();
}
public enum System.DirectoryServices.Protocols.AuthType : Enum {
    public int value__;
    public static AuthType Anonymous;
    public static AuthType Basic;
    public static AuthType Negotiate;
    public static AuthType Ntlm;
    public static AuthType Digest;
    public static AuthType Sicily;
    public static AuthType Dpa;
    public static AuthType Msn;
    public static AuthType External;
    public static AuthType Kerberos;
}
public class System.DirectoryServices.Protocols.BerConversionException : DirectoryException {
    protected BerConversionException(SerializationInfo info, StreamingContext context);
    public BerConversionException(string message);
    public BerConversionException(string message, Exception inner);
}
public class System.DirectoryServices.Protocols.BerConverter : object {
    public static Byte[] Encode(string format, Object[] value);
    public static Object[] Decode(string format, Byte[] value);
}
public class System.DirectoryServices.Protocols.CompareRequest : DirectoryRequest {
    public string DistinguishedName { get; public set; }
    public DirectoryAttribute Assertion { get; }
    public CompareRequest(string distinguishedName, string attributeName, string value);
    public CompareRequest(string distinguishedName, string attributeName, Byte[] value);
    public CompareRequest(string distinguishedName, string attributeName, Uri value);
    public CompareRequest(string distinguishedName, DirectoryAttribute assertion);
    public string get_DistinguishedName();
    public void set_DistinguishedName(string value);
    public DirectoryAttribute get_Assertion();
    protected virtual XmlElement ToXmlNode(XmlDocument doc);
}
public class System.DirectoryServices.Protocols.CompareResponse : DirectoryResponse {
}
public class System.DirectoryServices.Protocols.CrossDomainMoveControl : DirectoryControl {
    public string TargetDomainController { get; public set; }
    public CrossDomainMoveControl(string targetDomainController);
    public string get_TargetDomainController();
    public void set_TargetDomainController(string value);
    public virtual Byte[] GetValue();
}
public class System.DirectoryServices.Protocols.DeleteRequest : DirectoryRequest {
    public string DistinguishedName { get; public set; }
    public DeleteRequest(string distinguishedName);
    public string get_DistinguishedName();
    public void set_DistinguishedName(string value);
    protected virtual XmlElement ToXmlNode(XmlDocument doc);
}
public class System.DirectoryServices.Protocols.DeleteResponse : DirectoryResponse {
}
public enum System.DirectoryServices.Protocols.DereferenceAlias : Enum {
    public int value__;
    public static DereferenceAlias Never;
    public static DereferenceAlias InSearching;
    public static DereferenceAlias FindingBaseObject;
    public static DereferenceAlias Always;
}
public class System.DirectoryServices.Protocols.DereferenceConnectionCallback : MulticastDelegate {
    public DereferenceConnectionCallback(object object, IntPtr method);
    public virtual void Invoke(LdapConnection primaryConnection, LdapConnection connectionToDereference);
    public virtual IAsyncResult BeginInvoke(LdapConnection primaryConnection, LdapConnection connectionToDereference, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.Protocols.DirectoryAttribute : CollectionBase {
    public string Name { get; public set; }
    public object Item { get; public set; }
    public DirectoryAttribute(string name, string value);
    public DirectoryAttribute(string name, Byte[] value);
    public DirectoryAttribute(string name, Uri value);
    public DirectoryAttribute(string name, Object[] values);
    private static DirectoryAttribute();
    public string get_Name();
    public void set_Name(string value);
    public Object[] GetValues(Type valuesType);
    public object get_Item(int index);
    public void set_Item(int index, object value);
    public int Add(Byte[] value);
    public int Add(string value);
    public int Add(Uri value);
    internal int Add(object value);
    public void AddRange(Object[] values);
    public bool Contains(object value);
    public void CopyTo(Object[] array, int index);
    public int IndexOf(object value);
    public void Insert(int index, Byte[] value);
    public void Insert(int index, string value);
    public void Insert(int index, Uri value);
    private void Insert(int index, object value);
    public void Remove(object value);
    protected virtual void OnValidate(object value);
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.Protocols.DirectoryAttributeCollection : CollectionBase {
    public DirectoryAttribute Item { get; public set; }
    public DirectoryAttribute get_Item(int index);
    public void set_Item(int index, DirectoryAttribute value);
    public int Add(DirectoryAttribute attribute);
    public void AddRange(DirectoryAttribute[] attributes);
    public void AddRange(DirectoryAttributeCollection attributeCollection);
    public bool Contains(DirectoryAttribute value);
    public void CopyTo(DirectoryAttribute[] array, int index);
    public int IndexOf(DirectoryAttribute value);
    public void Insert(int index, DirectoryAttribute value);
    public void Remove(DirectoryAttribute value);
    protected virtual void OnValidate(object value);
}
public class System.DirectoryServices.Protocols.DirectoryAttributeModification : DirectoryAttribute {
    public DirectoryAttributeOperation Operation { get; public set; }
    public DirectoryAttributeOperation get_Operation();
    public void set_Operation(DirectoryAttributeOperation value);
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection : CollectionBase {
    public DirectoryAttributeModification Item { get; public set; }
    public DirectoryAttributeModification get_Item(int index);
    public void set_Item(int index, DirectoryAttributeModification value);
    public int Add(DirectoryAttributeModification attribute);
    public void AddRange(DirectoryAttributeModification[] attributes);
    public void AddRange(DirectoryAttributeModificationCollection attributeCollection);
    public bool Contains(DirectoryAttributeModification value);
    public void CopyTo(DirectoryAttributeModification[] array, int index);
    public int IndexOf(DirectoryAttributeModification value);
    public void Insert(int index, DirectoryAttributeModification value);
    public void Remove(DirectoryAttributeModification value);
    protected virtual void OnValidate(object value);
}
public enum System.DirectoryServices.Protocols.DirectoryAttributeOperation : Enum {
    public int value__;
    public static DirectoryAttributeOperation Add;
    public static DirectoryAttributeOperation Delete;
    public static DirectoryAttributeOperation Replace;
}
public abstract class System.DirectoryServices.Protocols.DirectoryConnection : object {
    public DirectoryIdentifier Directory { get; }
    public X509CertificateCollection ClientCertificates { get; }
    public TimeSpan Timeout { get; public set; }
    unknown NetworkCredential Credential {public set; }
    public virtual DirectoryIdentifier get_Directory();
    public X509CertificateCollection get_ClientCertificates();
    public virtual TimeSpan get_Timeout();
    public virtual void set_Timeout(TimeSpan value);
    public virtual void set_Credential(NetworkCredential value);
    public abstract virtual DirectoryResponse SendRequest(DirectoryRequest request);
}
public class System.DirectoryServices.Protocols.DirectoryControl : object {
    public string Type { get; }
    public bool IsCritical { get; public set; }
    public bool ServerSide { get; public set; }
    public DirectoryControl(string type, Byte[] value, bool isCritical, bool serverSide);
    public virtual Byte[] GetValue();
    public string get_Type();
    public bool get_IsCritical();
    public void set_IsCritical(bool value);
    public bool get_ServerSide();
    public void set_ServerSide(bool value);
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.Protocols.DirectoryControlCollection : CollectionBase {
    public DirectoryControl Item { get; public set; }
    public DirectoryControl get_Item(int index);
    public void set_Item(int index, DirectoryControl value);
    public int Add(DirectoryControl control);
    public void AddRange(DirectoryControl[] controls);
    public void AddRange(DirectoryControlCollection controlCollection);
    public bool Contains(DirectoryControl value);
    public void CopyTo(DirectoryControl[] array, int index);
    public int IndexOf(DirectoryControl value);
    public void Insert(int index, DirectoryControl value);
    public void Remove(DirectoryControl value);
    protected virtual void OnValidate(object value);
}
public class System.DirectoryServices.Protocols.DirectoryException : Exception {
    protected DirectoryException(SerializationInfo info, StreamingContext context);
    public DirectoryException(string message, Exception inner);
    public DirectoryException(string message);
}
public abstract class System.DirectoryServices.Protocols.DirectoryIdentifier : object {
}
public class System.DirectoryServices.Protocols.DirectoryNotificationControl : DirectoryControl {
}
public abstract class System.DirectoryServices.Protocols.DirectoryOperation : object {
}
public class System.DirectoryServices.Protocols.DirectoryOperationException : DirectoryException {
    public DirectoryResponse Response { get; }
    protected DirectoryOperationException(SerializationInfo info, StreamingContext context);
    public DirectoryOperationException(string message);
    public DirectoryOperationException(string message, Exception inner);
    public DirectoryOperationException(DirectoryResponse response);
    public DirectoryOperationException(DirectoryResponse response, string message);
    public DirectoryOperationException(DirectoryResponse response, string message, Exception inner);
    public DirectoryResponse get_Response();
    public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public abstract class System.DirectoryServices.Protocols.DirectoryRequest : DirectoryOperation {
    public string RequestId { get; public set; }
    public DirectoryControlCollection Controls { get; }
    public string get_RequestId();
    public void set_RequestId(string value);
    public DirectoryControlCollection get_Controls();
    protected abstract virtual XmlElement ToXmlNode(XmlDocument doc);
}
public abstract class System.DirectoryServices.Protocols.DirectoryResponse : DirectoryOperation {
    public string RequestId { get; }
    public string MatchedDN { get; }
    public DirectoryControl[] Controls { get; }
    public ResultCode ResultCode { get; }
    public string ErrorMessage { get; }
    public Uri[] Referral { get; }
    public string get_RequestId();
    public virtual string get_MatchedDN();
    public virtual DirectoryControl[] get_Controls();
    public virtual ResultCode get_ResultCode();
    public virtual string get_ErrorMessage();
    public virtual Uri[] get_Referral();
}
[FlagsAttribute]
public enum System.DirectoryServices.Protocols.DirectorySynchronizationOptions : Enum {
    public long value__;
    public static DirectorySynchronizationOptions None;
    public static DirectorySynchronizationOptions ObjectSecurity;
    public static DirectorySynchronizationOptions ParentsFirst;
    public static DirectorySynchronizationOptions PublicDataOnly;
    public static DirectorySynchronizationOptions IncrementalValues;
}
public class System.DirectoryServices.Protocols.DirSyncRequestControl : DirectoryControl {
    public Byte[] Cookie { get; public set; }
    public DirectorySynchronizationOptions Option { get; public set; }
    public int AttributeCount { get; public set; }
    public DirSyncRequestControl(Byte[] cookie);
    public DirSyncRequestControl(Byte[] cookie, DirectorySynchronizationOptions option);
    public DirSyncRequestControl(Byte[] cookie, DirectorySynchronizationOptions option, int attributeCount);
    public Byte[] get_Cookie();
    public void set_Cookie(Byte[] value);
    public DirectorySynchronizationOptions get_Option();
    public void set_Option(DirectorySynchronizationOptions value);
    public int get_AttributeCount();
    public void set_AttributeCount(int value);
    public virtual Byte[] GetValue();
}
public class System.DirectoryServices.Protocols.DirSyncResponseControl : DirectoryControl {
    public Byte[] Cookie { get; }
    public bool MoreData { get; }
    public int ResultSize { get; }
    public Byte[] get_Cookie();
    public bool get_MoreData();
    public int get_ResultSize();
}
public class System.DirectoryServices.Protocols.DomainScopeControl : DirectoryControl {
}
public class System.DirectoryServices.Protocols.DsmlAuthRequest : DirectoryRequest {
    public string Principal { get; public set; }
    public DsmlAuthRequest(string principal);
    public string get_Principal();
    public void set_Principal(string value);
    protected virtual XmlElement ToXmlNode(XmlDocument doc);
}
public class System.DirectoryServices.Protocols.DsmlAuthResponse : DirectoryResponse {
}
public class System.DirectoryServices.Protocols.DsmlDirectoryIdentifier : DirectoryIdentifier {
    public Uri ServerUri { get; }
    public DsmlDirectoryIdentifier(Uri serverUri);
    public Uri get_ServerUri();
}
public abstract class System.DirectoryServices.Protocols.DsmlDocument : object {
    public abstract virtual XmlDocument ToXml();
}
public enum System.DirectoryServices.Protocols.DsmlDocumentProcessing : Enum {
    public int value__;
    public static DsmlDocumentProcessing Sequential;
    public static DsmlDocumentProcessing Parallel;
}
public enum System.DirectoryServices.Protocols.DsmlErrorProcessing : Enum {
    public int value__;
    public static DsmlErrorProcessing Resume;
    public static DsmlErrorProcessing Exit;
}
public class System.DirectoryServices.Protocols.DsmlErrorResponse : DirectoryResponse {
    public string Message { get; }
    public string Detail { get; }
    public ErrorResponseCategory Type { get; }
    public string MatchedDN { get; }
    public DirectoryControl[] Controls { get; }
    public ResultCode ResultCode { get; }
    public string ErrorMessage { get; }
    public Uri[] Referral { get; }
    public string get_Message();
    public string get_Detail();
    public ErrorResponseCategory get_Type();
    public virtual string get_MatchedDN();
    public virtual DirectoryControl[] get_Controls();
    public virtual ResultCode get_ResultCode();
    public virtual string get_ErrorMessage();
    public virtual Uri[] get_Referral();
}
public class System.DirectoryServices.Protocols.DsmlInvalidDocumentException : DirectoryException {
    public DsmlInvalidDocumentException(string message);
    public DsmlInvalidDocumentException(string message, Exception inner);
    protected DsmlInvalidDocumentException(SerializationInfo info, StreamingContext context);
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.Protocols.DsmlRequestDocument : DsmlDocument {
    public DsmlDocumentProcessing DocumentProcessing { get; public set; }
    public DsmlResponseOrder ResponseOrder { get; public set; }
    public DsmlErrorProcessing ErrorProcessing { get; public set; }
    public string RequestId { get; public set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    protected bool IsFixedSize { get; }
    protected bool IsReadOnly { get; }
    protected object SyncRoot { get; }
    protected bool IsSynchronized { get; }
    public int Count { get; }
    private int System.Collections.ICollection.Count { get; }
    public DirectoryRequest Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public DsmlDocumentProcessing get_DocumentProcessing();
    public void set_DocumentProcessing(DsmlDocumentProcessing value);
    public DsmlResponseOrder get_ResponseOrder();
    public void set_ResponseOrder(DsmlResponseOrder value);
    public DsmlErrorProcessing get_ErrorProcessing();
    public void set_ErrorProcessing(DsmlErrorProcessing value);
    public string get_RequestId();
    public void set_RequestId(string value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public sealed virtual IEnumerator GetEnumerator();
    protected bool get_IsFixedSize();
    protected bool get_IsReadOnly();
    protected object get_SyncRoot();
    protected bool get_IsSynchronized();
    public int get_Count();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    public DirectoryRequest get_Item(int index);
    public void set_Item(int index, DirectoryRequest value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public int Add(DirectoryRequest request);
    private sealed virtual override int System.Collections.IList.Add(object request);
    public void Clear();
    private sealed virtual override void System.Collections.IList.Clear();
    public bool Contains(DirectoryRequest value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    public int IndexOf(DirectoryRequest value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    public void Insert(int index, DirectoryRequest value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    public void Remove(DirectoryRequest value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public void RemoveAt(int index);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    public void CopyTo(DirectoryRequest[] value, int i);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array value, int i);
    public virtual XmlDocument ToXml();
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.Protocols.DsmlResponseDocument : DsmlDocument {
    public bool IsErrorResponse { get; }
    public bool IsOperationError { get; }
    public string RequestId { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private int System.Collections.ICollection.Count { get; }
    protected object SyncRoot { get; }
    protected bool IsSynchronized { get; }
    public int Count { get; }
    public DirectoryResponse Item { get; }
    public bool get_IsErrorResponse();
    public bool get_IsOperationError();
    public string get_RequestId();
    public virtual XmlDocument ToXml();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array value, int i);
    public sealed virtual IEnumerator GetEnumerator();
    protected object get_SyncRoot();
    protected bool get_IsSynchronized();
    public int get_Count();
    public DirectoryResponse get_Item(int index);
    public void CopyTo(DirectoryResponse[] value, int i);
}
public enum System.DirectoryServices.Protocols.DsmlResponseOrder : Enum {
    public int value__;
    public static DsmlResponseOrder Sequential;
    public static DsmlResponseOrder Unordered;
}
public abstract class System.DirectoryServices.Protocols.DsmlSoapConnection : DirectoryConnection {
    public string SessionId { get; }
    public XmlNode SoapRequestHeader { get; public set; }
    public abstract virtual string get_SessionId();
    public XmlNode get_SoapRequestHeader();
    public void set_SoapRequestHeader(XmlNode value);
    public abstract virtual void BeginSession();
    public abstract virtual void EndSession();
}
public class System.DirectoryServices.Protocols.DsmlSoapHttpConnection : DsmlSoapConnection {
    public TimeSpan Timeout { get; public set; }
    public string SoapActionHeader { get; public set; }
    public AuthType AuthType { get; public set; }
    public string SessionId { get; }
    public DsmlSoapHttpConnection(Uri uri);
    public DsmlSoapHttpConnection(DsmlDirectoryIdentifier identifier);
    public DsmlSoapHttpConnection(DsmlDirectoryIdentifier identifier, NetworkCredential credential);
    public DsmlSoapHttpConnection(DsmlDirectoryIdentifier identifier, NetworkCredential credential, AuthType authType);
    public virtual TimeSpan get_Timeout();
    public virtual void set_Timeout(TimeSpan value);
    public string get_SoapActionHeader();
    public void set_SoapActionHeader(string value);
    public AuthType get_AuthType();
    public void set_AuthType(AuthType value);
    public virtual string get_SessionId();
    public virtual void BeginSession();
    public virtual void EndSession();
    public virtual DirectoryResponse SendRequest(DirectoryRequest request);
    public DsmlResponseDocument SendRequest(DsmlRequestDocument request);
    public IAsyncResult BeginSendRequest(DsmlRequestDocument request, AsyncCallback callback, object state);
    public void Abort(IAsyncResult asyncResult);
    public DsmlResponseDocument EndSendRequest(IAsyncResult asyncResult);
}
public enum System.DirectoryServices.Protocols.ErrorResponseCategory : Enum {
    public int value__;
    public static ErrorResponseCategory NotAttempted;
    public static ErrorResponseCategory CouldNotConnect;
    public static ErrorResponseCategory ConnectionClosed;
    public static ErrorResponseCategory MalformedRequest;
    public static ErrorResponseCategory GatewayInternalError;
    public static ErrorResponseCategory AuthenticationFailed;
    public static ErrorResponseCategory UnresolvableUri;
    public static ErrorResponseCategory Other;
}
public class System.DirectoryServices.Protocols.ErrorResponseException : DirectoryException {
    public DsmlErrorResponse Response { get; }
    protected ErrorResponseException(SerializationInfo info, StreamingContext context);
    public ErrorResponseException(string message);
    public ErrorResponseException(string message, Exception inner);
    public ErrorResponseException(DsmlErrorResponse response);
    public ErrorResponseException(DsmlErrorResponse response, string message);
    public ErrorResponseException(DsmlErrorResponse response, string message, Exception inner);
    public DsmlErrorResponse get_Response();
    public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public class System.DirectoryServices.Protocols.ExtendedDNControl : DirectoryControl {
    public ExtendedDNFlag Flag { get; public set; }
    public ExtendedDNControl(ExtendedDNFlag flag);
    public ExtendedDNFlag get_Flag();
    public void set_Flag(ExtendedDNFlag value);
    public virtual Byte[] GetValue();
}
public enum System.DirectoryServices.Protocols.ExtendedDNFlag : Enum {
    public int value__;
    public static ExtendedDNFlag HexString;
    public static ExtendedDNFlag StandardString;
}
public class System.DirectoryServices.Protocols.ExtendedRequest : DirectoryRequest {
    public string RequestName { get; public set; }
    public Byte[] RequestValue { get; public set; }
    public ExtendedRequest(string requestName);
    public ExtendedRequest(string requestName, Byte[] requestValue);
    public string get_RequestName();
    public void set_RequestName(string value);
    public Byte[] get_RequestValue();
    public void set_RequestValue(Byte[] value);
    protected virtual XmlElement ToXmlNode(XmlDocument doc);
}
public class System.DirectoryServices.Protocols.ExtendedResponse : DirectoryResponse {
    public string ResponseName { get; }
    public Byte[] ResponseValue { get; }
    public string get_ResponseName();
    public Byte[] get_ResponseValue();
}
public class System.DirectoryServices.Protocols.LazyCommitControl : DirectoryControl {
}
public class System.DirectoryServices.Protocols.LdapConnection : DirectoryConnection {
    public TimeSpan Timeout { get; public set; }
    public AuthType AuthType { get; public set; }
    public LdapSessionOptions SessionOptions { get; }
    unknown NetworkCredential Credential {public set; }
    public bool AutoBind { get; public set; }
    private static LdapConnection();
    public LdapConnection(string server);
    public LdapConnection(LdapDirectoryIdentifier identifier);
    public LdapConnection(LdapDirectoryIdentifier identifier, NetworkCredential credential);
    public LdapConnection(LdapDirectoryIdentifier identifier, NetworkCredential credential, AuthType authType);
    protected virtual override void Finalize();
    public virtual TimeSpan get_Timeout();
    public virtual void set_Timeout(TimeSpan value);
    public AuthType get_AuthType();
    public void set_AuthType(AuthType value);
    public LdapSessionOptions get_SessionOptions();
    public virtual void set_Credential(NetworkCredential value);
    public bool get_AutoBind();
    public void set_AutoBind(bool value);
    public virtual DirectoryResponse SendRequest(DirectoryRequest request);
    public DirectoryResponse SendRequest(DirectoryRequest request, TimeSpan requestTimeout);
    public IAsyncResult BeginSendRequest(DirectoryRequest request, PartialResultProcessing partialMode, AsyncCallback callback, object state);
    public IAsyncResult BeginSendRequest(DirectoryRequest request, TimeSpan requestTimeout, PartialResultProcessing partialMode, AsyncCallback callback, object state);
    public void Abort(IAsyncResult asyncResult);
    public PartialResultsCollection GetPartialResults(IAsyncResult asyncResult);
    public DirectoryResponse EndSendRequest(IAsyncResult asyncResult);
    public void Bind();
    public void Bind(NetworkCredential newCredential);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class System.DirectoryServices.Protocols.LdapDirectoryIdentifier : DirectoryIdentifier {
    public String[] Servers { get; }
    public bool Connectionless { get; }
    public bool FullyQualifiedDnsHostName { get; }
    public int PortNumber { get; }
    public LdapDirectoryIdentifier(string server);
    public LdapDirectoryIdentifier(string server, int portNumber);
    public LdapDirectoryIdentifier(string server, bool fullyQualifiedDnsHostName, bool connectionless);
    public LdapDirectoryIdentifier(string server, int portNumber, bool fullyQualifiedDnsHostName, bool connectionless);
    public LdapDirectoryIdentifier(String[] servers, bool fullyQualifiedDnsHostName, bool connectionless);
    public LdapDirectoryIdentifier(String[] servers, int portNumber, bool fullyQualifiedDnsHostName, bool connectionless);
    public String[] get_Servers();
    public bool get_Connectionless();
    public bool get_FullyQualifiedDnsHostName();
    public int get_PortNumber();
}
public class System.DirectoryServices.Protocols.LdapException : DirectoryException {
    public int ErrorCode { get; }
    public string ServerErrorMessage { get; }
    public PartialResultsCollection PartialResults { get; }
    protected LdapException(SerializationInfo info, StreamingContext context);
    public LdapException(string message);
    public LdapException(string message, Exception inner);
    public LdapException(int errorCode);
    public LdapException(int errorCode, string message);
    public LdapException(int errorCode, string message, string serverErrorMessage);
    public LdapException(int errorCode, string message, Exception inner);
    public int get_ErrorCode();
    public string get_ServerErrorMessage();
    public PartialResultsCollection get_PartialResults();
    public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public class System.DirectoryServices.Protocols.LdapSessionOptions : object {
    public ReferralChasingOptions ReferralChasing { get; public set; }
    public bool SecureSocketLayer { get; public set; }
    public int ReferralHopLimit { get; public set; }
    public int ProtocolVersion { get; public set; }
    public string HostName { get; public set; }
    public string DomainName { get; public set; }
    public LocatorFlags LocatorFlag { get; public set; }
    public bool HostReachable { get; }
    public TimeSpan PingKeepAliveTimeout { get; public set; }
    public int PingLimit { get; public set; }
    public TimeSpan PingWaitTimeout { get; public set; }
    public bool AutoReconnect { get; public set; }
    public int SspiFlag { get; public set; }
    public SecurityPackageContextConnectionInformation SslInformation { get; }
    public object SecurityContext { get; }
    public bool Signing { get; public set; }
    public bool Sealing { get; public set; }
    public string SaslMethod { get; public set; }
    public bool RootDseCache { get; public set; }
    public bool TcpKeepAlive { get; public set; }
    public TimeSpan SendTimeout { get; public set; }
    public ReferralCallback ReferralCallback { get; public set; }
    public QueryClientCertificateCallback QueryClientCertificate { get; public set; }
    public VerifyServerCertificateCallback VerifyServerCertificate { get; public set; }
    public ReferralChasingOptions get_ReferralChasing();
    public void set_ReferralChasing(ReferralChasingOptions value);
    public bool get_SecureSocketLayer();
    public void set_SecureSocketLayer(bool value);
    public int get_ReferralHopLimit();
    public void set_ReferralHopLimit(int value);
    public int get_ProtocolVersion();
    public void set_ProtocolVersion(int value);
    public string get_HostName();
    public void set_HostName(string value);
    public string get_DomainName();
    public void set_DomainName(string value);
    public LocatorFlags get_LocatorFlag();
    public void set_LocatorFlag(LocatorFlags value);
    public bool get_HostReachable();
    public TimeSpan get_PingKeepAliveTimeout();
    public void set_PingKeepAliveTimeout(TimeSpan value);
    public int get_PingLimit();
    public void set_PingLimit(int value);
    public TimeSpan get_PingWaitTimeout();
    public void set_PingWaitTimeout(TimeSpan value);
    public bool get_AutoReconnect();
    public void set_AutoReconnect(bool value);
    public int get_SspiFlag();
    public void set_SspiFlag(int value);
    public SecurityPackageContextConnectionInformation get_SslInformation();
    public object get_SecurityContext();
    public bool get_Signing();
    public void set_Signing(bool value);
    public bool get_Sealing();
    public void set_Sealing(bool value);
    public string get_SaslMethod();
    public void set_SaslMethod(string value);
    public bool get_RootDseCache();
    public void set_RootDseCache(bool value);
    public bool get_TcpKeepAlive();
    public void set_TcpKeepAlive(bool value);
    public TimeSpan get_SendTimeout();
    public void set_SendTimeout(TimeSpan value);
    public ReferralCallback get_ReferralCallback();
    public void set_ReferralCallback(ReferralCallback value);
    public QueryClientCertificateCallback get_QueryClientCertificate();
    public void set_QueryClientCertificate(QueryClientCertificateCallback value);
    public VerifyServerCertificateCallback get_VerifyServerCertificate();
    public void set_VerifyServerCertificate(VerifyServerCertificateCallback value);
    public void FastConcurrentBind();
    public void StartTransportLayerSecurity(DirectoryControlCollection controls);
    public void StopTransportLayerSecurity();
}
[FlagsAttribute]
public enum System.DirectoryServices.Protocols.LocatorFlags : Enum {
    public long value__;
    public static LocatorFlags None;
    public static LocatorFlags ForceRediscovery;
    public static LocatorFlags DirectoryServicesRequired;
    public static LocatorFlags DirectoryServicesPreferred;
    public static LocatorFlags GCRequired;
    public static LocatorFlags PdcRequired;
    public static LocatorFlags IPRequired;
    public static LocatorFlags KdcRequired;
    public static LocatorFlags TimeServerRequired;
    public static LocatorFlags WriteableRequired;
    public static LocatorFlags GoodTimeServerPreferred;
    public static LocatorFlags AvoidSelf;
    public static LocatorFlags OnlyLdapNeeded;
    public static LocatorFlags IsFlatName;
    public static LocatorFlags IsDnsName;
    public static LocatorFlags ReturnDnsName;
    public static LocatorFlags ReturnFlatName;
}
public class System.DirectoryServices.Protocols.ModifyDNRequest : DirectoryRequest {
    public string DistinguishedName { get; public set; }
    public string NewParentDistinguishedName { get; public set; }
    public string NewName { get; public set; }
    public bool DeleteOldRdn { get; public set; }
    public ModifyDNRequest(string distinguishedName, string newParentDistinguishedName, string newName);
    public string get_DistinguishedName();
    public void set_DistinguishedName(string value);
    public string get_NewParentDistinguishedName();
    public void set_NewParentDistinguishedName(string value);
    public string get_NewName();
    public void set_NewName(string value);
    public bool get_DeleteOldRdn();
    public void set_DeleteOldRdn(bool value);
    protected virtual XmlElement ToXmlNode(XmlDocument doc);
}
public class System.DirectoryServices.Protocols.ModifyDNResponse : DirectoryResponse {
}
public class System.DirectoryServices.Protocols.ModifyRequest : DirectoryRequest {
    public string DistinguishedName { get; public set; }
    public DirectoryAttributeModificationCollection Modifications { get; }
    public ModifyRequest(string distinguishedName, DirectoryAttributeModification[] modifications);
    public ModifyRequest(string distinguishedName, DirectoryAttributeOperation operation, string attributeName, Object[] values);
    public string get_DistinguishedName();
    public void set_DistinguishedName(string value);
    public DirectoryAttributeModificationCollection get_Modifications();
    protected virtual XmlElement ToXmlNode(XmlDocument doc);
}
public class System.DirectoryServices.Protocols.ModifyResponse : DirectoryResponse {
}
public class System.DirectoryServices.Protocols.NotifyOfNewConnectionCallback : MulticastDelegate {
    public NotifyOfNewConnectionCallback(object object, IntPtr method);
    public virtual bool Invoke(LdapConnection primaryConnection, LdapConnection referralFromConnection, string newDistinguishedName, LdapDirectoryIdentifier identifier, LdapConnection newConnection, NetworkCredential credential, long currentUserToken, int errorCodeFromBind);
    public virtual IAsyncResult BeginInvoke(LdapConnection primaryConnection, LdapConnection referralFromConnection, string newDistinguishedName, LdapDirectoryIdentifier identifier, LdapConnection newConnection, NetworkCredential credential, long currentUserToken, int errorCodeFromBind, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class System.DirectoryServices.Protocols.PageResultRequestControl : DirectoryControl {
    public int PageSize { get; public set; }
    public Byte[] Cookie { get; public set; }
    public PageResultRequestControl(int pageSize);
    public PageResultRequestControl(Byte[] cookie);
    public int get_PageSize();
    public void set_PageSize(int value);
    public Byte[] get_Cookie();
    public void set_Cookie(Byte[] value);
    public virtual Byte[] GetValue();
}
public class System.DirectoryServices.Protocols.PageResultResponseControl : DirectoryControl {
    public Byte[] Cookie { get; }
    public int TotalCount { get; }
    public Byte[] get_Cookie();
    public int get_TotalCount();
}
public enum System.DirectoryServices.Protocols.PartialResultProcessing : Enum {
    public int value__;
    public static PartialResultProcessing NoPartialResultSupport;
    public static PartialResultProcessing ReturnPartialResults;
    public static PartialResultProcessing ReturnPartialResultsAndNotifyCallback;
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.Protocols.PartialResultsCollection : ReadOnlyCollectionBase {
    public object Item { get; }
    public object get_Item(int index);
    public bool Contains(object value);
    public int IndexOf(object value);
    public void CopyTo(Object[] values, int index);
}
public class System.DirectoryServices.Protocols.PermissiveModifyControl : DirectoryControl {
}
public class System.DirectoryServices.Protocols.QueryClientCertificateCallback : MulticastDelegate {
    public QueryClientCertificateCallback(object object, IntPtr method);
    public virtual X509Certificate Invoke(LdapConnection connection, Byte[][] trustedCAs);
    public virtual IAsyncResult BeginInvoke(LdapConnection connection, Byte[][] trustedCAs, AsyncCallback callback, object object);
    public virtual X509Certificate EndInvoke(IAsyncResult result);
}
public class System.DirectoryServices.Protocols.QueryForConnectionCallback : MulticastDelegate {
    public QueryForConnectionCallback(object object, IntPtr method);
    public virtual LdapConnection Invoke(LdapConnection primaryConnection, LdapConnection referralFromConnection, string newDistinguishedName, LdapDirectoryIdentifier identifier, NetworkCredential credential, long currentUserToken);
    public virtual IAsyncResult BeginInvoke(LdapConnection primaryConnection, LdapConnection referralFromConnection, string newDistinguishedName, LdapDirectoryIdentifier identifier, NetworkCredential credential, long currentUserToken, AsyncCallback callback, object object);
    public virtual LdapConnection EndInvoke(IAsyncResult result);
}
public class System.DirectoryServices.Protocols.QuotaControl : DirectoryControl {
    public SecurityIdentifier QuerySid { get; public set; }
    public QuotaControl(SecurityIdentifier querySid);
    public SecurityIdentifier get_QuerySid();
    public void set_QuerySid(SecurityIdentifier value);
    public virtual Byte[] GetValue();
}
public class System.DirectoryServices.Protocols.ReferralCallback : object {
    public QueryForConnectionCallback QueryForConnection { get; public set; }
    public NotifyOfNewConnectionCallback NotifyNewConnection { get; public set; }
    public DereferenceConnectionCallback DereferenceConnection { get; public set; }
    public QueryForConnectionCallback get_QueryForConnection();
    public void set_QueryForConnection(QueryForConnectionCallback value);
    public NotifyOfNewConnectionCallback get_NotifyNewConnection();
    public void set_NotifyNewConnection(NotifyOfNewConnectionCallback value);
    public DereferenceConnectionCallback get_DereferenceConnection();
    public void set_DereferenceConnection(DereferenceConnectionCallback value);
}
[FlagsAttribute]
public enum System.DirectoryServices.Protocols.ReferralChasingOptions : Enum {
    public int value__;
    public static ReferralChasingOptions None;
    public static ReferralChasingOptions Subordinate;
    public static ReferralChasingOptions External;
    public static ReferralChasingOptions All;
}
public enum System.DirectoryServices.Protocols.ResultCode : Enum {
    public int value__;
    public static ResultCode Success;
    public static ResultCode OperationsError;
    public static ResultCode ProtocolError;
    public static ResultCode TimeLimitExceeded;
    public static ResultCode SizeLimitExceeded;
    public static ResultCode CompareFalse;
    public static ResultCode CompareTrue;
    public static ResultCode AuthMethodNotSupported;
    public static ResultCode StrongAuthRequired;
    public static ResultCode ReferralV2;
    public static ResultCode Referral;
    public static ResultCode AdminLimitExceeded;
    public static ResultCode UnavailableCriticalExtension;
    public static ResultCode ConfidentialityRequired;
    public static ResultCode SaslBindInProgress;
    public static ResultCode NoSuchAttribute;
    public static ResultCode UndefinedAttributeType;
    public static ResultCode InappropriateMatching;
    public static ResultCode ConstraintViolation;
    public static ResultCode AttributeOrValueExists;
    public static ResultCode InvalidAttributeSyntax;
    public static ResultCode NoSuchObject;
    public static ResultCode AliasProblem;
    public static ResultCode InvalidDNSyntax;
    public static ResultCode AliasDereferencingProblem;
    public static ResultCode InappropriateAuthentication;
    public static ResultCode InsufficientAccessRights;
    public static ResultCode Busy;
    public static ResultCode Unavailable;
    public static ResultCode UnwillingToPerform;
    public static ResultCode LoopDetect;
    public static ResultCode SortControlMissing;
    public static ResultCode OffsetRangeError;
    public static ResultCode NamingViolation;
    public static ResultCode ObjectClassViolation;
    public static ResultCode NotAllowedOnNonLeaf;
    public static ResultCode NotAllowedOnRdn;
    public static ResultCode EntryAlreadyExists;
    public static ResultCode ObjectClassModificationsProhibited;
    public static ResultCode ResultsTooLarge;
    public static ResultCode AffectsMultipleDsas;
    public static ResultCode VirtualListViewError;
    public static ResultCode Other;
}
public enum System.DirectoryServices.Protocols.SearchOption : Enum {
    public int value__;
    public static SearchOption DomainScope;
    public static SearchOption PhantomRoot;
}
public class System.DirectoryServices.Protocols.SearchOptionsControl : DirectoryControl {
    public SearchOption SearchOption { get; public set; }
    public SearchOptionsControl(SearchOption flags);
    public SearchOption get_SearchOption();
    public void set_SearchOption(SearchOption value);
    public virtual Byte[] GetValue();
}
public class System.DirectoryServices.Protocols.SearchRequest : DirectoryRequest {
    public string DistinguishedName { get; public set; }
    public StringCollection Attributes { get; }
    public object Filter { get; public set; }
    public SearchScope Scope { get; public set; }
    public DereferenceAlias Aliases { get; public set; }
    public int SizeLimit { get; public set; }
    public TimeSpan TimeLimit { get; public set; }
    public bool TypesOnly { get; public set; }
    public SearchRequest(string distinguishedName, XmlDocument filter, SearchScope searchScope, String[] attributeList);
    public SearchRequest(string distinguishedName, string ldapFilter, SearchScope searchScope, String[] attributeList);
    public string get_DistinguishedName();
    public void set_DistinguishedName(string value);
    public StringCollection get_Attributes();
    public object get_Filter();
    public void set_Filter(object value);
    public SearchScope get_Scope();
    public void set_Scope(SearchScope value);
    public DereferenceAlias get_Aliases();
    public void set_Aliases(DereferenceAlias value);
    public int get_SizeLimit();
    public void set_SizeLimit(int value);
    public TimeSpan get_TimeLimit();
    public void set_TimeLimit(TimeSpan value);
    public bool get_TypesOnly();
    public void set_TypesOnly(bool value);
    protected virtual XmlElement ToXmlNode(XmlDocument doc);
}
public class System.DirectoryServices.Protocols.SearchResponse : DirectoryResponse {
    public string MatchedDN { get; }
    public DirectoryControl[] Controls { get; }
    public ResultCode ResultCode { get; }
    public string ErrorMessage { get; }
    public Uri[] Referral { get; }
    public SearchResultReferenceCollection References { get; }
    public SearchResultEntryCollection Entries { get; }
    public virtual string get_MatchedDN();
    public virtual DirectoryControl[] get_Controls();
    public virtual ResultCode get_ResultCode();
    public virtual string get_ErrorMessage();
    public virtual Uri[] get_Referral();
    public SearchResultReferenceCollection get_References();
    public SearchResultEntryCollection get_Entries();
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.Protocols.SearchResultAttributeCollection : DictionaryBase {
    public DirectoryAttribute Item { get; }
    public ICollection AttributeNames { get; }
    public ICollection Values { get; }
    public DirectoryAttribute get_Item(string attributeName);
    public ICollection get_AttributeNames();
    public ICollection get_Values();
    public bool Contains(string attributeName);
    public void CopyTo(DirectoryAttribute[] array, int index);
}
public class System.DirectoryServices.Protocols.SearchResultEntry : object {
    public string DistinguishedName { get; }
    public SearchResultAttributeCollection Attributes { get; }
    public DirectoryControl[] Controls { get; }
    public string get_DistinguishedName();
    public SearchResultAttributeCollection get_Attributes();
    public DirectoryControl[] get_Controls();
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.Protocols.SearchResultEntryCollection : ReadOnlyCollectionBase {
    public SearchResultEntry Item { get; }
    public SearchResultEntry get_Item(int index);
    public bool Contains(SearchResultEntry value);
    public int IndexOf(SearchResultEntry value);
    public void CopyTo(SearchResultEntry[] values, int index);
}
public class System.DirectoryServices.Protocols.SearchResultReference : object {
    public Uri[] Reference { get; }
    public DirectoryControl[] Controls { get; }
    public Uri[] get_Reference();
    public DirectoryControl[] get_Controls();
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.Protocols.SearchResultReferenceCollection : ReadOnlyCollectionBase {
    public SearchResultReference Item { get; }
    public SearchResultReference get_Item(int index);
    public bool Contains(SearchResultReference value);
    public int IndexOf(SearchResultReference value);
    public void CopyTo(SearchResultReference[] values, int index);
}
public enum System.DirectoryServices.Protocols.SearchScope : Enum {
    public int value__;
    public static SearchScope Base;
    public static SearchScope OneLevel;
    public static SearchScope Subtree;
}
public class System.DirectoryServices.Protocols.SecurityDescriptorFlagControl : DirectoryControl {
    public SecurityMasks SecurityMasks { get; public set; }
    public SecurityDescriptorFlagControl(SecurityMasks masks);
    public SecurityMasks get_SecurityMasks();
    public void set_SecurityMasks(SecurityMasks value);
    public virtual Byte[] GetValue();
}
[FlagsAttribute]
public enum System.DirectoryServices.Protocols.SecurityMasks : Enum {
    public int value__;
    public static SecurityMasks None;
    public static SecurityMasks Owner;
    public static SecurityMasks Group;
    public static SecurityMasks Dacl;
    public static SecurityMasks Sacl;
}
public class System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation : object {
    public SecurityProtocol Protocol { get; }
    public CipherAlgorithmType AlgorithmIdentifier { get; }
    public int CipherStrength { get; }
    public HashAlgorithmType Hash { get; }
    public int HashStrength { get; }
    public int KeyExchangeAlgorithm { get; }
    public int ExchangeStrength { get; }
    public SecurityProtocol get_Protocol();
    public CipherAlgorithmType get_AlgorithmIdentifier();
    public int get_CipherStrength();
    public HashAlgorithmType get_Hash();
    public int get_HashStrength();
    public int get_KeyExchangeAlgorithm();
    public int get_ExchangeStrength();
}
public enum System.DirectoryServices.Protocols.SecurityProtocol : Enum {
    public int value__;
    public static SecurityProtocol Pct1Server;
    public static SecurityProtocol Pct1Client;
    public static SecurityProtocol Ssl2Server;
    public static SecurityProtocol Ssl2Client;
    public static SecurityProtocol Ssl3Server;
    public static SecurityProtocol Ssl3Client;
    public static SecurityProtocol Tls1Server;
    public static SecurityProtocol Tls1Client;
}
public class System.DirectoryServices.Protocols.ShowDeletedControl : DirectoryControl {
}
public class System.DirectoryServices.Protocols.SortKey : object {
    public string AttributeName { get; public set; }
    public string MatchingRule { get; public set; }
    public bool ReverseOrder { get; public set; }
    public SortKey(string attributeName, string matchingRule, bool reverseOrder);
    public string get_AttributeName();
    public void set_AttributeName(string value);
    public string get_MatchingRule();
    public void set_MatchingRule(string value);
    public bool get_ReverseOrder();
    public void set_ReverseOrder(bool value);
}
public class System.DirectoryServices.Protocols.SortRequestControl : DirectoryControl {
    public SortKey[] SortKeys { get; public set; }
    public SortRequestControl(SortKey[] sortKeys);
    public SortRequestControl(string attributeName, bool reverseOrder);
    public SortRequestControl(string attributeName, string matchingRule, bool reverseOrder);
    public SortKey[] get_SortKeys();
    public void set_SortKeys(SortKey[] value);
    public virtual Byte[] GetValue();
}
public class System.DirectoryServices.Protocols.SortResponseControl : DirectoryControl {
    public ResultCode Result { get; }
    public string AttributeName { get; }
    public ResultCode get_Result();
    public string get_AttributeName();
}
public class System.DirectoryServices.Protocols.TlsOperationException : DirectoryOperationException {
    protected TlsOperationException(SerializationInfo info, StreamingContext context);
    public TlsOperationException(string message);
    public TlsOperationException(string message, Exception inner);
    public TlsOperationException(DirectoryResponse response);
    public TlsOperationException(DirectoryResponse response, string message);
    public TlsOperationException(DirectoryResponse response, string message, Exception inner);
}
public class System.DirectoryServices.Protocols.TreeDeleteControl : DirectoryControl {
}
public class System.DirectoryServices.Protocols.VerifyNameControl : DirectoryControl {
    public string ServerName { get; public set; }
    public int Flag { get; public set; }
    public VerifyNameControl(string serverName);
    public VerifyNameControl(string serverName, int flag);
    public string get_ServerName();
    public void set_ServerName(string value);
    public int get_Flag();
    public void set_Flag(int value);
    public virtual Byte[] GetValue();
}
public class System.DirectoryServices.Protocols.VerifyServerCertificateCallback : MulticastDelegate {
    public VerifyServerCertificateCallback(object object, IntPtr method);
    public virtual bool Invoke(LdapConnection connection, X509Certificate certificate);
    public virtual IAsyncResult BeginInvoke(LdapConnection connection, X509Certificate certificate, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class System.DirectoryServices.Protocols.VlvRequestControl : DirectoryControl {
    public int BeforeCount { get; public set; }
    public int AfterCount { get; public set; }
    public int Offset { get; public set; }
    public int EstimateCount { get; public set; }
    public Byte[] Target { get; public set; }
    public Byte[] ContextId { get; public set; }
    public VlvRequestControl(int beforeCount, int afterCount, int offset);
    public VlvRequestControl(int beforeCount, int afterCount, string target);
    public VlvRequestControl(int beforeCount, int afterCount, Byte[] target);
    public int get_BeforeCount();
    public void set_BeforeCount(int value);
    public int get_AfterCount();
    public void set_AfterCount(int value);
    public int get_Offset();
    public void set_Offset(int value);
    public int get_EstimateCount();
    public void set_EstimateCount(int value);
    public Byte[] get_Target();
    public void set_Target(Byte[] value);
    public Byte[] get_ContextId();
    public void set_ContextId(Byte[] value);
    public virtual Byte[] GetValue();
}
public class System.DirectoryServices.Protocols.VlvResponseControl : DirectoryControl {
    public int TargetPosition { get; }
    public int ContentCount { get; }
    public Byte[] ContextId { get; }
    public ResultCode Result { get; }
    public int get_TargetPosition();
    public int get_ContentCount();
    public Byte[] get_ContextId();
    public ResultCode get_Result();
}
