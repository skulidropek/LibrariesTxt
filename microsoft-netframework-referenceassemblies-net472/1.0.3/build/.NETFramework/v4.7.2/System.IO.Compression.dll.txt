public class System.IO.Compression.ZipArchive : object {
    public ReadOnlyCollection`1<ZipArchiveEntry> Entries { get; }
    public ZipArchiveMode Mode { get; }
    public ZipArchive(Stream stream);
    public ZipArchive(Stream stream, ZipArchiveMode mode);
    public ZipArchive(Stream stream, ZipArchiveMode mode, bool leaveOpen);
    public ZipArchive(Stream stream, ZipArchiveMode mode, bool leaveOpen, Encoding entryNameEncoding);
    public ReadOnlyCollection`1<ZipArchiveEntry> get_Entries();
    public ZipArchiveMode get_Mode();
    public ZipArchiveEntry CreateEntry(string entryName);
    public ZipArchiveEntry CreateEntry(string entryName, CompressionLevel compressionLevel);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public ZipArchiveEntry GetEntry(string entryName);
}
public class System.IO.Compression.ZipArchiveEntry : object {
    public ZipArchive Archive { get; }
    public long CompressedLength { get; }
    public int ExternalAttributes { get; public set; }
    public string FullName { get; private set; }
    public DateTimeOffset LastWriteTime { get; public set; }
    public long Length { get; }
    public string Name { get; }
    public ZipArchive get_Archive();
    public long get_CompressedLength();
    public int get_ExternalAttributes();
    public void set_ExternalAttributes(int value);
    public string get_FullName();
    private void set_FullName(string value);
    public DateTimeOffset get_LastWriteTime();
    public void set_LastWriteTime(DateTimeOffset value);
    public long get_Length();
    public string get_Name();
    public void Delete();
    public Stream Open();
    public virtual string ToString();
}
public enum System.IO.Compression.ZipArchiveMode : Enum {
    public int value__;
    public static ZipArchiveMode Read;
    public static ZipArchiveMode Create;
    public static ZipArchiveMode Update;
}
