public class System.Net.Http.WebRequestHandler : HttpClientHandler {
    public AuthenticationLevel AuthenticationLevel { get; public set; }
    public TokenImpersonationLevel ImpersonationLevel { get; public set; }
    public bool AllowPipelining { get; public set; }
    public bool UnsafeAuthenticatedConnectionSharing { get; public set; }
    public int MaxResponseHeadersLength { get; public set; }
    public int ReadWriteTimeout { get; public set; }
    public RequestCachePolicy CachePolicy { get; public set; }
    public TimeSpan ContinueTimeout { get; public set; }
    public X509CertificateCollection ClientCertificates { get; }
    public RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; public set; }
    public AuthenticationLevel get_AuthenticationLevel();
    public void set_AuthenticationLevel(AuthenticationLevel value);
    public TokenImpersonationLevel get_ImpersonationLevel();
    public void set_ImpersonationLevel(TokenImpersonationLevel value);
    public bool get_AllowPipelining();
    public void set_AllowPipelining(bool value);
    public bool get_UnsafeAuthenticatedConnectionSharing();
    [SecuritySafeCriticalAttribute]
public void set_UnsafeAuthenticatedConnectionSharing(bool value);
    public int get_MaxResponseHeadersLength();
    public void set_MaxResponseHeadersLength(int value);
    public int get_ReadWriteTimeout();
    public void set_ReadWriteTimeout(int value);
    public RequestCachePolicy get_CachePolicy();
    public void set_CachePolicy(RequestCachePolicy value);
    public TimeSpan get_ContinueTimeout();
    public void set_ContinueTimeout(TimeSpan value);
    public X509CertificateCollection get_ClientCertificates();
    public RemoteCertificateValidationCallback get_ServerCertificateValidationCallback();
    public void set_ServerCertificateValidationCallback(RemoteCertificateValidationCallback value);
    internal virtual void InitializeWebRequest(HttpRequestMessage request, HttpWebRequest webRequest);
}
