[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public interface System.Net.INetworkProgress {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProgressChanged(EventHandler`1<NetworkProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProgressChanged(EventHandler`1<NetworkProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProgressCompleted(EventHandler`1<NetworkProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProgressCompleted(EventHandler`1<NetworkProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProgressFailed(EventHandler`1<NetworkProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProgressFailed(EventHandler`1<NetworkProgressChangedEventArgs> value);
}
public class System.Net.IPEndPointCollection : Collection`1<IPEndPoint> {
    protected virtual void SetItem(int index, IPEndPoint item);
    protected virtual void InsertItem(int index, IPEndPoint item);
}
[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public interface System.Net.IUnsafeWebRequestCreate {
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public abstract virtual WebRequest Create(Uri uri);
}
[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public class System.Net.NetworkProgressChangedEventArgs : ProgressChangedEventArgs {
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public int ProcessedBytes { get; }
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public int TotalBytes { get; }
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public NetworkProgressChangedEventArgs(int percentage, int processedBytes, int totalBytes, object userState);
    public int get_ProcessedBytes();
    public int get_TotalBytes();
}
public class System.Net.PeerToPeer.Cloud : object {
    public static Cloud Available;
    public static Cloud AllLinkLocal;
    public string Name { get; }
    public PnrpScope Scope { get; }
    public int ScopeId { get; }
    public static Cloud Global { get; }
    private static Cloud();
    protected Cloud(SerializationInfo info, StreamingContext context);
    public string get_Name();
    public PnrpScope get_Scope();
    public int get_ScopeId();
    public static Cloud get_Global();
    public static Cloud GetCloudByName(string cloudName);
    public static CloudCollection GetAvailableClouds();
    public sealed virtual bool Equals(Cloud other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [SecurityCriticalAttribute]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Net.PeerToPeer.CloudCollection : Collection`1<Cloud> {
    protected virtual void SetItem(int index, Cloud item);
    protected virtual void InsertItem(int index, Cloud item);
}
public class System.Net.PeerToPeer.Collaboration.ApplicationChangedEventArgs : EventArgs {
    public PeerEndPoint PeerEndPoint { get; }
    public PeerContact PeerContact { get; }
    public PeerChangeType PeerChangeType { get; }
    public PeerApplication PeerApplication { get; }
    public PeerEndPoint get_PeerEndPoint();
    public PeerContact get_PeerContact();
    public PeerChangeType get_PeerChangeType();
    public PeerApplication get_PeerApplication();
}
public class System.Net.PeerToPeer.Collaboration.ContactManager : object {
    public static PeerContact LocalContact { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DescriptionAttribute("SynchronizingObject")]
public ISynchronizeInvoke SynchronizingObject { get; public set; }
    [SecurityCriticalAttribute]
public static PeerContact get_LocalContact();
    public ISynchronizeInvoke get_SynchronizingObject();
    public void set_SynchronizingObject(ISynchronizeInvoke value);
    [SecurityCriticalAttribute]
public void add_SubscriptionListChanged(EventHandler`1<SubscriptionListChangedEventArgs> value);
    [SecurityCriticalAttribute]
public void remove_SubscriptionListChanged(EventHandler`1<SubscriptionListChangedEventArgs> value);
    [SecurityCriticalAttribute]
public void add_NameChanged(EventHandler`1<NameChangedEventArgs> value);
    [SecurityCriticalAttribute]
public void remove_NameChanged(EventHandler`1<NameChangedEventArgs> value);
    [SecurityCriticalAttribute]
public void add_PresenceChanged(EventHandler`1<PresenceChangedEventArgs> value);
    [SecurityCriticalAttribute]
public void remove_PresenceChanged(EventHandler`1<PresenceChangedEventArgs> value);
    [SecurityCriticalAttribute]
public void add_ApplicationChanged(EventHandler`1<ApplicationChangedEventArgs> value);
    [SecurityCriticalAttribute]
public void remove_ApplicationChanged(EventHandler`1<ApplicationChangedEventArgs> value);
    [SecurityCriticalAttribute]
public void add_ObjectChanged(EventHandler`1<ObjectChangedEventArgs> value);
    [SecurityCriticalAttribute]
public void remove_ObjectChanged(EventHandler`1<ObjectChangedEventArgs> value);
    [SecurityCriticalAttribute]
public PeerContactCollection GetContacts();
    [SecurityCriticalAttribute]
public PeerContact GetContact(PeerName peerName);
    [SecurityCriticalAttribute]
public PeerContact CreateContact(PeerNearMe peerNearMe);
    public void add_CreateContactCompleted(EventHandler`1<CreateContactCompletedEventArgs> value);
    public void remove_CreateContactCompleted(EventHandler`1<CreateContactCompletedEventArgs> value);
    public void CreateContactAsync(PeerNearMe peerNearMe, object userToken);
    [SecurityCriticalAttribute]
public void AddContact(PeerContact peerContact);
    public void DeleteContact(PeerContact peerContact);
    [SecurityCriticalAttribute]
public void DeleteContact(PeerName peerName);
    [SecurityCriticalAttribute]
public void UpdateContact(PeerContact peerContact);
    [SecurityCriticalAttribute]
public sealed virtual void Dispose();
}
public class System.Net.PeerToPeer.Collaboration.CreateContactCompletedEventArgs : AsyncCompletedEventArgs {
    public PeerContact PeerContact { get; }
    public PeerContact get_PeerContact();
}
public class System.Net.PeerToPeer.Collaboration.InviteCompletedEventArgs : AsyncCompletedEventArgs {
    public PeerInvitationResponse InviteResponse { get; }
    public PeerInvitationResponse get_InviteResponse();
}
public class System.Net.PeerToPeer.Collaboration.NameChangedEventArgs : EventArgs {
    public PeerEndPoint PeerEndPoint { get; }
    public PeerContact PeerContact { get; }
    public string Name { get; }
    public PeerEndPoint get_PeerEndPoint();
    public PeerContact get_PeerContact();
    public string get_Name();
}
public class System.Net.PeerToPeer.Collaboration.ObjectChangedEventArgs : EventArgs {
    public PeerEndPoint PeerEndPoint { get; }
    public PeerContact PeerContact { get; }
    public PeerChangeType PeerChangeType { get; }
    public PeerObject PeerObject { get; }
    public PeerEndPoint get_PeerEndPoint();
    public PeerContact get_PeerContact();
    public PeerChangeType get_PeerChangeType();
    public PeerObject get_PeerObject();
}
public abstract class System.Net.PeerToPeer.Collaboration.Peer : object {
    public PeerEndPointCollection PeerEndPoints { get; }
    public bool IsOnline { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DescriptionAttribute("SynchronizingObject")]
public ISynchronizeInvoke SynchronizingObject { get; public set; }
    protected Peer(SerializationInfo serializationInfo, StreamingContext streamingContext);
    private static Peer();
    public virtual PeerEndPointCollection get_PeerEndPoints();
    public bool get_IsOnline();
    public ISynchronizeInvoke get_SynchronizingObject();
    public void set_SynchronizingObject(ISynchronizeInvoke value);
    [SecurityCriticalAttribute]
public PeerPresenceInfo GetPresenceInfo(PeerEndPoint peerEndPoint);
    [SecurityCriticalAttribute]
public PeerObjectCollection GetObjects();
    [SecurityCriticalAttribute]
public PeerObjectCollection GetObjects(Guid objectId);
    public abstract virtual PeerInvitationResponse Invite();
    public abstract virtual PeerInvitationResponse Invite(PeerApplication applicationToInvite, string message, Byte[] invitationData);
    public void add_InviteCompleted(EventHandler`1<InviteCompletedEventArgs> value);
    public void remove_InviteCompleted(EventHandler`1<InviteCompletedEventArgs> value);
    public abstract virtual void InviteAsync(object userToken);
    public abstract virtual void InviteAsync(PeerApplication applicationToInvite, string message, Byte[] invitationData, object userToken);
    protected virtual void OnInviteCompleted(InviteCompletedEventArgs e);
    [SecurityCriticalAttribute]
public void InviteAsyncCancel(object userToken);
    public sealed virtual bool Equals(Peer other);
    public virtual string ToString();
    public sealed virtual void Dispose();
    [SecurityCriticalAttribute]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual void Dispose(bool disposing);
}
public class System.Net.PeerToPeer.Collaboration.PeerApplication : object {
    public Guid Id { get; public set; }
    public Byte[] Data { get; public set; }
    public string Description { get; public set; }
    public string Path { get; public set; }
    public string CommandLineArgs { get; public set; }
    public PeerScope PeerScope { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DescriptionAttribute("SynchronizingObject")]
public ISynchronizeInvoke SynchronizingObject { get; public set; }
    [SecurityCriticalAttribute]
private static PeerApplication();
    public PeerApplication(Guid id, string description, Byte[] data, string path, string commandLineArgs, PeerScope peerScope);
    protected PeerApplication(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public Guid get_Id();
    public void set_Id(Guid value);
    public Byte[] get_Data();
    public void set_Data(Byte[] value);
    public string get_Description();
    public void set_Description(string value);
    public string get_Path();
    public void set_Path(string value);
    public string get_CommandLineArgs();
    public void set_CommandLineArgs(string value);
    public PeerScope get_PeerScope();
    public void set_PeerScope(PeerScope value);
    public ISynchronizeInvoke get_SynchronizingObject();
    public void set_SynchronizingObject(ISynchronizeInvoke value);
    [SecurityCriticalAttribute]
public void add_ApplicationChanged(EventHandler`1<ApplicationChangedEventArgs> value);
    [SecurityCriticalAttribute]
public void remove_ApplicationChanged(EventHandler`1<ApplicationChangedEventArgs> value);
    protected virtual void OnApplicationChanged(ApplicationChangedEventArgs appChangedArgs);
    public sealed virtual bool Equals(PeerApplication other);
    public virtual bool Equals(object obj);
    public static bool Equals(object objA, object objB);
    public virtual int GetHashCode();
    public virtual string ToString();
    [SecurityCriticalAttribute]
public sealed virtual void Dispose();
    [SecurityCriticalAttribute]
protected virtual void Dispose(bool disposing);
    [SecurityCriticalAttribute]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Net.PeerToPeer.Collaboration.PeerApplicationCollection : Collection`1<PeerApplication> {
    protected virtual void SetItem(int index, PeerApplication item);
    protected virtual void InsertItem(int index, PeerApplication item);
    public virtual string ToString();
}
public class System.Net.PeerToPeer.Collaboration.PeerApplicationLaunchInfo : object {
    public PeerContact PeerContact { get; internal set; }
    public PeerEndPoint PeerEndPoint { get; internal set; }
    public PeerApplication PeerApplication { get; internal set; }
    public Byte[] Data { get; internal set; }
    public string Message { get; internal set; }
    public PeerContact get_PeerContact();
    internal void set_PeerContact(PeerContact value);
    public PeerEndPoint get_PeerEndPoint();
    internal void set_PeerEndPoint(PeerEndPoint value);
    public PeerApplication get_PeerApplication();
    internal void set_PeerApplication(PeerApplication value);
    public Byte[] get_Data();
    internal void set_Data(Byte[] value);
    public string get_Message();
    internal void set_Message(string value);
}
public enum System.Net.PeerToPeer.Collaboration.PeerApplicationRegistrationType : Enum {
    public int value__;
    public static PeerApplicationRegistrationType CurrentUser;
    public static PeerApplicationRegistrationType AllUsers;
}
public enum System.Net.PeerToPeer.Collaboration.PeerChangeType : Enum {
    public int value__;
    public static PeerChangeType Added;
    public static PeerChangeType Deleted;
    public static PeerChangeType Updated;
}
public static class System.Net.PeerToPeer.Collaboration.PeerCollaboration : object {
    public static PeerPresenceInfo LocalPresenceInfo { get; public set; }
    public static string LocalEndPointName { get; public set; }
    public static PeerScope SignInScope { get; }
    public static ContactManager ContactManager { get; }
    public static PeerApplicationLaunchInfo ApplicationLaunchInfo { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DescriptionAttribute("SynchronizingObject")]
public static ISynchronizeInvoke SynchronizingObject { get; public set; }
    [SecurityCriticalAttribute]
public static PeerPresenceInfo get_LocalPresenceInfo();
    [SecurityCriticalAttribute]
public static void set_LocalPresenceInfo(PeerPresenceInfo value);
    [SecurityCriticalAttribute]
public static string get_LocalEndPointName();
    [SecurityCriticalAttribute]
public static void set_LocalEndPointName(string value);
    [SecurityCriticalAttribute]
public static PeerScope get_SignInScope();
    [SecurityCriticalAttribute]
public static ContactManager get_ContactManager();
    [SecurityCriticalAttribute]
public static PeerApplicationLaunchInfo get_ApplicationLaunchInfo();
    public static ISynchronizeInvoke get_SynchronizingObject();
    public static void set_SynchronizingObject(ISynchronizeInvoke value);
    [SecurityCriticalAttribute]
public static void SignIn(PeerScope peerScope);
    [SecurityCriticalAttribute]
public static void SignOut(PeerScope peerScope);
    [SecurityCriticalAttribute]
public static PeerNearMeCollection GetPeersNearMe();
    [SecurityCriticalAttribute]
public static void RegisterApplication(PeerApplication application, PeerApplicationRegistrationType type);
    [SecurityCriticalAttribute]
public static void UnregisterApplication(PeerApplication application, PeerApplicationRegistrationType type);
    public static PeerApplicationCollection GetLocalRegisteredApplications();
    [SecurityCriticalAttribute]
public static PeerApplicationCollection GetLocalRegisteredApplications(PeerApplicationRegistrationType type);
    [SecurityCriticalAttribute]
public static void SetObject(PeerObject peerObject);
    [SecurityCriticalAttribute]
public static void DeleteObject(PeerObject peerObject);
    [SecurityCriticalAttribute]
public static PeerObjectCollection GetLocalSetObjects();
    [SecurityCriticalAttribute]
public static void add_LocalNameChanged(EventHandler`1<NameChangedEventArgs> value);
    [SecurityCriticalAttribute]
public static void remove_LocalNameChanged(EventHandler`1<NameChangedEventArgs> value);
    [SecurityCriticalAttribute]
public static void add_LocalPresenceChanged(EventHandler`1<PresenceChangedEventArgs> value);
    [SecurityCriticalAttribute]
public static void remove_LocalPresenceChanged(EventHandler`1<PresenceChangedEventArgs> value);
    [SecurityCriticalAttribute]
public static void add_LocalObjectChanged(EventHandler`1<ObjectChangedEventArgs> value);
    [SecurityCriticalAttribute]
public static void remove_LocalObjectChanged(EventHandler`1<ObjectChangedEventArgs> value);
    [SecurityCriticalAttribute]
public static void add_LocalApplicationChanged(EventHandler`1<ApplicationChangedEventArgs> value);
    [SecurityCriticalAttribute]
public static void remove_LocalApplicationChanged(EventHandler`1<ApplicationChangedEventArgs> value);
}
public class System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission : CodeAccessPermission {
    public PeerCollaborationPermission(PermissionState state);
    private static PeerCollaborationPermission();
    public sealed virtual bool IsUnrestricted();
    public virtual IPermission Copy();
    public virtual IPermission Union(IPermission target);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public virtual void FromXml(SecurityElement e);
    public virtual SecurityElement ToXml();
}
[AttributeUsageAttribute("109")]
public class System.Net.PeerToPeer.Collaboration.PeerCollaborationPermissionAttribute : CodeAccessSecurityAttribute {
    public PeerCollaborationPermissionAttribute(SecurityAction action);
    public virtual IPermission CreatePermission();
}
public class System.Net.PeerToPeer.Collaboration.PeerContact : Peer {
    public PeerName PeerName { get; internal set; }
    public string Nickname { get; public set; }
    public string DisplayName { get; public set; }
    public MailAddress EmailAddress { get; public set; }
    public SubscriptionType SubscribeAllowed { get; public set; }
    public bool IsSubscribed { get; internal set; }
    public X509Certificate2 Credentials { get; internal set; }
    public PeerEndPointCollection PeerEndPoints { get; }
    [SecurityCriticalAttribute]
private static PeerContact();
    [SecurityCriticalAttribute]
protected PeerContact(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public PeerName get_PeerName();
    internal void set_PeerName(PeerName value);
    public string get_Nickname();
    public void set_Nickname(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public MailAddress get_EmailAddress();
    public void set_EmailAddress(MailAddress value);
    public SubscriptionType get_SubscribeAllowed();
    public void set_SubscribeAllowed(SubscriptionType value);
    public bool get_IsSubscribed();
    internal void set_IsSubscribed(bool value);
    public X509Certificate2 get_Credentials();
    internal void set_Credentials(X509Certificate2 value);
    [SecurityCriticalAttribute]
public virtual PeerEndPointCollection get_PeerEndPoints();
    [SecurityCriticalAttribute]
public string ToXml();
    [SecurityCriticalAttribute]
public static PeerContact FromXml(string peerContactXml);
    public virtual void Subscribe();
    public void add_SubscribeCompleted(EventHandler`1<SubscribeCompletedEventArgs> value);
    public void remove_SubscribeCompleted(EventHandler`1<SubscribeCompletedEventArgs> value);
    public virtual void SubscribeAsync(object userToken);
    protected void OnSubscribeCompleted(SubscribeCompletedEventArgs e);
    public virtual void Unsubscribe();
    [SecurityCriticalAttribute]
public virtual PeerInvitationResponse Invite();
    [SecurityCriticalAttribute]
public virtual PeerInvitationResponse Invite(PeerApplication applicationToInvite, string message, Byte[] invitationData);
    [SecurityCriticalAttribute]
public PeerInvitationResponse Invite(PeerEndPoint peerEndPoint);
    [SecurityCriticalAttribute]
public PeerInvitationResponse Invite(PeerEndPoint peerEndPoint, PeerApplication applicationToInvite, string message, Byte[] invitationData);
    [SecurityCriticalAttribute]
public virtual void InviteAsync(object userToken);
    [SecurityCriticalAttribute]
public virtual void InviteAsync(PeerApplication applicationToInvite, string message, Byte[] invitationData, object userToken);
    [SecurityCriticalAttribute]
public void InviteAsync(PeerEndPoint peerEndPoint, object userToken);
    [SecurityCriticalAttribute]
public void InviteAsync(PeerEndPoint peerEndPoint, string message, Byte[] invitationData, PeerApplication applicationToInvite, object userToken);
    [SecurityCriticalAttribute]
public PeerApplicationCollection GetApplications();
    [SecurityCriticalAttribute]
public PeerApplicationCollection GetApplications(Guid applicationId);
    [SecurityCriticalAttribute]
public PeerApplicationCollection GetApplications(PeerEndPoint peerEndPoint);
    [SecurityCriticalAttribute]
public PeerApplicationCollection GetApplications(PeerEndPoint peerEndPoint, Guid applicationId);
    [SecurityCriticalAttribute]
public PeerObjectCollection GetObjects(PeerEndPoint peerEndPoint);
    [SecurityCriticalAttribute]
public PeerObjectCollection GetObjects(PeerEndPoint peerEndPoint, Guid objectId);
    [SecurityCriticalAttribute]
public void add_ApplicationChanged(EventHandler`1<ApplicationChangedEventArgs> value);
    [SecurityCriticalAttribute]
public void remove_ApplicationChanged(EventHandler`1<ApplicationChangedEventArgs> value);
    protected virtual void OnApplicationChanged(ApplicationChangedEventArgs appChangedArgs);
    [SecurityCriticalAttribute]
public void add_ObjectChanged(EventHandler`1<ObjectChangedEventArgs> value);
    [SecurityCriticalAttribute]
public void remove_ObjectChanged(EventHandler`1<ObjectChangedEventArgs> value);
    protected virtual void OnObjectChanged(ObjectChangedEventArgs objChangedArgs);
    [SecurityCriticalAttribute]
public void add_PresenceChanged(EventHandler`1<PresenceChangedEventArgs> value);
    [SecurityCriticalAttribute]
public void remove_PresenceChanged(EventHandler`1<PresenceChangedEventArgs> value);
    protected virtual void OnPresenceChanged(PresenceChangedEventArgs presenceChangedArgs);
    public sealed virtual bool Equals(PeerContact other);
    public virtual bool Equals(object obj);
    public static bool Equals(object objA, object objB);
    public virtual int GetHashCode();
    public virtual string ToString();
    [SecurityCriticalAttribute]
protected virtual void Dispose(bool disposing);
    [SecurityCriticalAttribute]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Net.PeerToPeer.Collaboration.PeerContactCollection : Collection`1<PeerContact> {
    protected virtual void SetItem(int index, PeerContact item);
    protected virtual void InsertItem(int index, PeerContact item);
    public virtual string ToString();
}
public class System.Net.PeerToPeer.Collaboration.PeerEndPoint : object {
    public string Name { get; public set; }
    public IPEndPoint EndPoint { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DescriptionAttribute("SynchronizingObject")]
public ISynchronizeInvoke SynchronizingObject { get; public set; }
    public PeerEndPoint(IPEndPoint endPoint);
    public PeerEndPoint(IPEndPoint endPoint, string endPointName);
    protected PeerEndPoint(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public string get_Name();
    public void set_Name(string value);
    public IPEndPoint get_EndPoint();
    public void set_EndPoint(IPEndPoint value);
    public ISynchronizeInvoke get_SynchronizingObject();
    public void set_SynchronizingObject(ISynchronizeInvoke value);
    [SecurityCriticalAttribute]
public void add_NameChanged(EventHandler`1<NameChangedEventArgs> value);
    [SecurityCriticalAttribute]
public void remove_NameChanged(EventHandler`1<NameChangedEventArgs> value);
    protected void OnNameChanged(NameChangedEventArgs nameChangedArgs);
    public sealed virtual bool Equals(PeerEndPoint other);
    public virtual bool Equals(object obj);
    public static bool Equals(object objA, object objB);
    public virtual int GetHashCode();
    public virtual string ToString();
    [SecurityCriticalAttribute]
public sealed virtual void Dispose();
    [SecurityCriticalAttribute]
protected virtual void Dispose(bool disposing);
    [SecurityCriticalAttribute]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Net.PeerToPeer.Collaboration.PeerEndPointCollection : Collection`1<PeerEndPoint> {
    protected virtual void SetItem(int index, PeerEndPoint item);
    protected virtual void InsertItem(int index, PeerEndPoint item);
    public virtual string ToString();
    public sealed virtual bool Equals(PeerEndPointCollection other);
}
public class System.Net.PeerToPeer.Collaboration.PeerInvitationResponse : object {
    public PeerInvitationResponseType PeerInvitationResponseType { get; internal set; }
    public PeerInvitationResponseType get_PeerInvitationResponseType();
    internal void set_PeerInvitationResponseType(PeerInvitationResponseType value);
}
public enum System.Net.PeerToPeer.Collaboration.PeerInvitationResponseType : Enum {
    public int value__;
    public static PeerInvitationResponseType Declined;
    public static PeerInvitationResponseType Accepted;
    public static PeerInvitationResponseType Expired;
}
public class System.Net.PeerToPeer.Collaboration.PeerNearMe : Peer {
    public string Nickname { get; internal set; }
    [SecurityCriticalAttribute]
private static PeerNearMe();
    protected PeerNearMe(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public string get_Nickname();
    internal void set_Nickname(string value);
    public PeerContact AddToContactManager();
    public PeerContact AddToContactManager(string displayName, string nickname, MailAddress emailAddress);
    [SecurityCriticalAttribute]
public static PeerNearMe CreateFromPeerEndPoint(PeerEndPoint peerEndPoint);
    [SecurityCriticalAttribute]
public void RefreshData();
    [SecurityCriticalAttribute]
protected internal void InternalRefreshData(object state);
    public void add_RefreshDataCompleted(EventHandler`1<RefreshDataCompletedEventArgs> value);
    public void remove_RefreshDataCompleted(EventHandler`1<RefreshDataCompletedEventArgs> value);
    [SecurityCriticalAttribute]
public void RefreshDataAsync(object userToken);
    protected void OnRefreshDataCompleted(RefreshDataCompletedEventArgs e);
    [SecurityCriticalAttribute]
public static void add_PeerNearMeChanged(EventHandler`1<PeerNearMeChangedEventArgs> value);
    [SecurityCriticalAttribute]
public static void remove_PeerNearMeChanged(EventHandler`1<PeerNearMeChangedEventArgs> value);
    [SecurityCriticalAttribute]
public virtual PeerInvitationResponse Invite(PeerApplication applicationToInvite, string message, Byte[] invitationData);
    [SecurityCriticalAttribute]
public virtual PeerInvitationResponse Invite();
    [SecurityCriticalAttribute]
public virtual void InviteAsync(object userToken);
    [SecurityCriticalAttribute]
public virtual void InviteAsync(PeerApplication applicationToInvite, string message, Byte[] invitationData, object userToken);
    public sealed virtual bool Equals(PeerNearMe other);
    public virtual bool Equals(object obj);
    public static bool Equals(object objA, object objB);
    public virtual int GetHashCode();
    public virtual string ToString();
    protected virtual void Dispose(bool disposing);
    [SecurityCriticalAttribute]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Net.PeerToPeer.Collaboration.PeerNearMeChangedEventArgs : EventArgs {
    public PeerNearMe PeerNearMe { get; }
    public PeerChangeType PeerChangeType { get; }
    public PeerNearMe get_PeerNearMe();
    public PeerChangeType get_PeerChangeType();
}
public class System.Net.PeerToPeer.Collaboration.PeerNearMeCollection : Collection`1<PeerNearMe> {
    protected virtual void SetItem(int index, PeerNearMe item);
    protected virtual void InsertItem(int index, PeerNearMe item);
    public virtual string ToString();
}
public class System.Net.PeerToPeer.Collaboration.PeerObject : object {
    public Guid Id { get; public set; }
    public Byte[] Data { get; public set; }
    public PeerScope PeerScope { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DescriptionAttribute("SynchronizingObject")]
public ISynchronizeInvoke SynchronizingObject { get; public set; }
    [SecurityCriticalAttribute]
private static PeerObject();
    public PeerObject(Guid Id, Byte[] data, PeerScope peerScope);
    protected PeerObject(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public Guid get_Id();
    public void set_Id(Guid value);
    public Byte[] get_Data();
    public void set_Data(Byte[] value);
    public PeerScope get_PeerScope();
    public void set_PeerScope(PeerScope value);
    public ISynchronizeInvoke get_SynchronizingObject();
    public void set_SynchronizingObject(ISynchronizeInvoke value);
    [SecurityCriticalAttribute]
public void add_ObjectChanged(EventHandler`1<ObjectChangedEventArgs> value);
    [SecurityCriticalAttribute]
public void remove_ObjectChanged(EventHandler`1<ObjectChangedEventArgs> value);
    protected virtual void OnObjectChanged(ObjectChangedEventArgs objChangedArgs);
    public sealed virtual bool Equals(PeerObject other);
    public virtual bool Equals(object obj);
    public static bool Equals(object objA, object objB);
    public virtual int GetHashCode();
    public virtual string ToString();
    [SecurityCriticalAttribute]
public sealed virtual void Dispose();
    [SecurityCriticalAttribute]
protected virtual void Dispose(bool disposing);
    [SecurityCriticalAttribute]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Net.PeerToPeer.Collaboration.PeerObjectCollection : Collection`1<PeerObject> {
    protected virtual void SetItem(int index, PeerObject item);
    protected virtual void InsertItem(int index, PeerObject item);
    public virtual string ToString();
}
public class System.Net.PeerToPeer.Collaboration.PeerPresenceInfo : object {
    public PeerPresenceStatus PresenceStatus { get; public set; }
    public string DescriptiveText { get; public set; }
    public PeerPresenceInfo(PeerPresenceStatus presenceStatus, string description);
    public PeerPresenceStatus get_PresenceStatus();
    public void set_PresenceStatus(PeerPresenceStatus value);
    public string get_DescriptiveText();
    public void set_DescriptiveText(string value);
}
public enum System.Net.PeerToPeer.Collaboration.PeerPresenceStatus : Enum {
    public int value__;
    public static PeerPresenceStatus Offline;
    public static PeerPresenceStatus OutToLunch;
    public static PeerPresenceStatus Away;
    public static PeerPresenceStatus BeRightBack;
    public static PeerPresenceStatus Idle;
    public static PeerPresenceStatus Busy;
    public static PeerPresenceStatus OnThePhone;
    public static PeerPresenceStatus Online;
}
public enum System.Net.PeerToPeer.Collaboration.PeerScope : Enum {
    public int value__;
    public static PeerScope None;
    public static PeerScope NearMe;
    public static PeerScope Internet;
    public static PeerScope All;
}
public class System.Net.PeerToPeer.Collaboration.PresenceChangedEventArgs : EventArgs {
    public PeerEndPoint PeerEndPoint { get; }
    public PeerContact PeerContact { get; }
    public PeerChangeType PeerChangeType { get; }
    public PeerPresenceInfo PeerPresenceInfo { get; }
    public PeerEndPoint get_PeerEndPoint();
    public PeerContact get_PeerContact();
    public PeerChangeType get_PeerChangeType();
    public PeerPresenceInfo get_PeerPresenceInfo();
}
public class System.Net.PeerToPeer.Collaboration.RefreshDataCompletedEventArgs : AsyncCompletedEventArgs {
    public PeerEndPoint PeerEndPoint { get; }
    public PeerEndPoint get_PeerEndPoint();
}
public class System.Net.PeerToPeer.Collaboration.SubscribeCompletedEventArgs : AsyncCompletedEventArgs {
    public PeerNearMe PeerNearMe { get; }
    public PeerContact PeerContact { get; }
    public PeerNearMe get_PeerNearMe();
    public PeerContact get_PeerContact();
}
public class System.Net.PeerToPeer.Collaboration.SubscriptionListChangedEventArgs : EventArgs {
    public PeerEndPoint PeerEndPoint { get; }
    public PeerContact PeerContact { get; }
    public PeerChangeType PeerChangeType { get; }
    public PeerEndPoint get_PeerEndPoint();
    public PeerContact get_PeerContact();
    public PeerChangeType get_PeerChangeType();
}
public enum System.Net.PeerToPeer.Collaboration.SubscriptionType : Enum {
    public int value__;
    public static SubscriptionType Blocked;
    public static SubscriptionType Allowed;
}
public class System.Net.PeerToPeer.PeerName : object {
    public string Authority { get; }
    public string Classifier { get; }
    public string PeerHostName { get; }
    public bool IsSecured { get; }
    private static PeerName();
    public PeerName(string remotePeerName);
    [SecurityCriticalAttribute]
public PeerName(string classifier, PeerNameType peerNameType);
    protected PeerName(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public static PeerName CreateFromPeerHostName(string peerHostName);
    [SecurityCriticalAttribute]
public static PeerName CreateRelativePeerName(PeerName peerName, string classifier);
    public virtual string ToString();
    public sealed virtual bool Equals(PeerName other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public string get_Authority();
    public string get_Classifier();
    [SecurityCriticalAttribute]
public string get_PeerHostName();
    public bool get_IsSecured();
    [SecurityCriticalAttribute]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Net.PeerToPeer.PeerNameRecord : object {
    public PeerName PeerName { get; public set; }
    public IPEndPointCollection EndPointCollection { get; }
    public string Comment { get; public set; }
    public Byte[] Data { get; public set; }
    protected PeerNameRecord(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public PeerName get_PeerName();
    public void set_PeerName(PeerName value);
    public IPEndPointCollection get_EndPointCollection();
    public string get_Comment();
    public void set_Comment(string value);
    public Byte[] get_Data();
    public void set_Data(Byte[] value);
}
public class System.Net.PeerToPeer.PeerNameRecordCollection : Collection`1<PeerNameRecord> {
    protected virtual void SetItem(int index, PeerNameRecord item);
    protected virtual void InsertItem(int index, PeerNameRecord item);
}
public class System.Net.PeerToPeer.PeerNameRegistration : object {
    public int Port { get; public set; }
    public PeerName PeerName { get; public set; }
    public IPEndPointCollection EndPointCollection { get; }
    public Cloud Cloud { get; public set; }
    public string Comment { get; public set; }
    public Byte[] Data { get; public set; }
    public bool UseAutoEndPointSelection { get; public set; }
    private static PeerNameRegistration();
    public PeerNameRegistration(PeerName name, int port);
    public PeerNameRegistration(PeerName name, int port, Cloud cloud);
    protected PeerNameRegistration(SerializationInfo info, StreamingContext context);
    public int get_Port();
    public void set_Port(int value);
    public PeerName get_PeerName();
    public void set_PeerName(PeerName value);
    public IPEndPointCollection get_EndPointCollection();
    public Cloud get_Cloud();
    public void set_Cloud(Cloud value);
    public string get_Comment();
    public void set_Comment(string value);
    public Byte[] get_Data();
    public void set_Data(Byte[] value);
    public bool get_UseAutoEndPointSelection();
    public void set_UseAutoEndPointSelection(bool value);
    public bool IsRegistered();
    [SecurityCriticalAttribute]
public void Start();
    [SecurityCriticalAttribute]
public void Update();
    [SecurityCriticalAttribute]
public void Stop();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [SecurityCriticalAttribute]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Net.PeerToPeer.PeerNameResolver : object {
    private static PeerNameResolver();
    public void add_ResolveProgressChanged(EventHandler`1<ResolveProgressChangedEventArgs> value);
    public void remove_ResolveProgressChanged(EventHandler`1<ResolveProgressChangedEventArgs> value);
    public void add_ResolveCompleted(EventHandler`1<ResolveCompletedEventArgs> value);
    public void remove_ResolveCompleted(EventHandler`1<ResolveCompletedEventArgs> value);
    public PeerNameRecordCollection Resolve(PeerName peerName);
    public PeerNameRecordCollection Resolve(PeerName peerName, Cloud cloud);
    public PeerNameRecordCollection Resolve(PeerName peerName, int maxRecords);
    [SecurityCriticalAttribute]
public PeerNameRecordCollection Resolve(PeerName peerName, Cloud cloud, int maxRecords);
    public void ResolveAsync(PeerName peerName, object userState);
    public void ResolveAsync(PeerName peerName, Cloud cloud, object userState);
    public void ResolveAsync(PeerName peerName, int maxRecords, object userState);
    [SecurityCriticalAttribute]
public void ResolveAsync(PeerName peerName, Cloud cloud, int maxRecords, object userState);
    protected void OnResolveProgressChanged(ResolveProgressChangedEventArgs e);
    protected void OnResolveCompleted(ResolveCompletedEventArgs e);
    [SecurityCriticalAttribute]
public void ResolveAsyncCancel(object userState);
}
public enum System.Net.PeerToPeer.PeerNameType : Enum {
    public int value__;
    public static PeerNameType Secured;
    public static PeerNameType Unsecured;
}
public class System.Net.PeerToPeer.PeerToPeerException : Exception {
    public PeerToPeerException(string message);
    public PeerToPeerException(string message, Exception innerException);
    protected PeerToPeerException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Net.PeerToPeer.PnrpPermission : CodeAccessPermission {
    public PnrpPermission(PermissionState state);
    private static PnrpPermission();
    public sealed virtual bool IsUnrestricted();
    public virtual IPermission Copy();
    public virtual IPermission Union(IPermission target);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public virtual void FromXml(SecurityElement e);
    public virtual SecurityElement ToXml();
}
[AttributeUsageAttribute("109")]
public class System.Net.PeerToPeer.PnrpPermissionAttribute : CodeAccessSecurityAttribute {
    public PnrpPermissionAttribute(SecurityAction action);
    public virtual IPermission CreatePermission();
}
public enum System.Net.PeerToPeer.PnrpScope : Enum {
    public int value__;
    public static PnrpScope All;
    public static PnrpScope Global;
    public static PnrpScope SiteLocal;
    public static PnrpScope LinkLocal;
}
public class System.Net.PeerToPeer.ResolveCompletedEventArgs : AsyncCompletedEventArgs {
    public PeerNameRecordCollection PeerNameRecordCollection { get; }
    public ResolveCompletedEventArgs(PeerNameRecordCollection peerNameRecordCollection, Exception error, bool canceled, object userToken);
    public PeerNameRecordCollection get_PeerNameRecordCollection();
}
public class System.Net.PeerToPeer.ResolveProgressChangedEventArgs : ProgressChangedEventArgs {
    public PeerNameRecord PeerNameRecord { get; }
    public ResolveProgressChangedEventArgs(PeerNameRecord peerNameRecord, object userToken);
    public PeerNameRecord get_PeerNameRecord();
}
[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public class System.Net.Sockets.HttpPolicyDownloaderProtocol : object {
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public SocketPolicy Result { get; }
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public HttpPolicyDownloaderProtocol(Uri appUri, IPAddress address);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public void Abort();
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public void BeginDownload(SecurityCriticalAction callback);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public void DownloadCallback(IAsyncResult ar);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public void ReadCallback(IAsyncResult ar);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public static void RegisterUnsafeWebRequestCreator(IUnsafeWebRequestCreate creator);
    public SocketPolicy get_Result();
}
[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public class System.Net.Sockets.SecurityCriticalAction : MulticastDelegate {
    public SecurityCriticalAction(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public class System.Net.Sockets.SocketPolicy : object {
}
[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public class System.Net.Sockets.UdpAnySourceMulticastClient : object {
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public bool MulticastLoopback { get; public set; }
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public int ReceiveBufferSize { get; public set; }
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public int SendBufferSize { get; public set; }
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public UdpAnySourceMulticastClient(IPAddress groupAddress, int localPort);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public IAsyncResult BeginJoinGroup(AsyncCallback callback, object state);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public IAsyncResult BeginReceiveFromGroup(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public IAsyncResult BeginSendTo(Byte[] buffer, int offset, int count, IPEndPoint remoteEndPoint, AsyncCallback callback, object state);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public IAsyncResult BeginSendToGroup(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public void BlockSource(IPAddress sourceAddress);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public sealed virtual void Dispose();
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public void EndJoinGroup(IAsyncResult result);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public int EndReceiveFromGroup(IAsyncResult result, IPEndPoint& source);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public void EndSendTo(IAsyncResult result);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public void EndSendToGroup(IAsyncResult result);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public void UnblockSource(IPAddress sourceAddress);
    [CompilerGeneratedAttribute]
public bool get_MulticastLoopback();
    [CompilerGeneratedAttribute]
public void set_MulticastLoopback(bool value);
    [CompilerGeneratedAttribute]
public int get_ReceiveBufferSize();
    [CompilerGeneratedAttribute]
public void set_ReceiveBufferSize(int value);
    [CompilerGeneratedAttribute]
public int get_SendBufferSize();
    [CompilerGeneratedAttribute]
public void set_SendBufferSize(int value);
}
[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public class System.Net.Sockets.UdpSingleSourceMulticastClient : object {
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public int ReceiveBufferSize { get; public set; }
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public int SendBufferSize { get; public set; }
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public UdpSingleSourceMulticastClient(IPAddress sourceAddress, IPAddress groupAddress, int localPort);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public IAsyncResult BeginJoinGroup(AsyncCallback callback, object state);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public IAsyncResult BeginReceiveFromSource(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public IAsyncResult BeginSendToSource(Byte[] buffer, int offset, int count, int remotePort, AsyncCallback callback, object state);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public sealed virtual void Dispose();
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public void EndJoinGroup(IAsyncResult result);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public int EndReceiveFromSource(IAsyncResult result, Int32& sourcePort);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public void EndSendToSource(IAsyncResult result);
    [CompilerGeneratedAttribute]
public int get_ReceiveBufferSize();
    [CompilerGeneratedAttribute]
public void set_ReceiveBufferSize(int value);
    [CompilerGeneratedAttribute]
public int get_SendBufferSize();
    [CompilerGeneratedAttribute]
public void set_SendBufferSize(int value);
}
[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public static class System.Net.UiSynchronizationContext : object {
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public static SynchronizationContext Current { get; public set; }
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public static int ManagedUiThreadId { get; public set; }
    [CompilerGeneratedAttribute]
public static SynchronizationContext get_Current();
    [CompilerGeneratedAttribute]
public static void set_Current(SynchronizationContext value);
    [CompilerGeneratedAttribute]
public static int get_ManagedUiThreadId();
    [CompilerGeneratedAttribute]
public static void set_ManagedUiThreadId(int value);
}
