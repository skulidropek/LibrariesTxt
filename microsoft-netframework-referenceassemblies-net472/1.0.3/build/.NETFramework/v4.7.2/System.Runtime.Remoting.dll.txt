public class System.Runtime.Remoting.Channels.BinaryClientFormatterSink : object {
    public IMessageSink NextSink { get; }
    public IClientChannelSink NextChannelSink { get; }
    public IDictionary Properties { get; }
    public BinaryClientFormatterSink(IClientChannelSink nextSink);
    public sealed virtual IMessageSink get_NextSink();
    public sealed virtual IMessage SyncProcessMessage(IMessage msg);
    public sealed virtual IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink);
    public sealed virtual void ProcessMessage(IMessage msg, ITransportHeaders requestHeaders, Stream requestStream, ITransportHeaders& responseHeaders, Stream& responseStream);
    public sealed virtual void AsyncProcessRequest(IClientChannelSinkStack sinkStack, IMessage msg, ITransportHeaders headers, Stream stream);
    public sealed virtual void AsyncProcessResponse(IClientResponseChannelSinkStack sinkStack, object state, ITransportHeaders headers, Stream stream);
    public sealed virtual Stream GetRequestStream(IMessage msg, ITransportHeaders headers);
    public sealed virtual IClientChannelSink get_NextChannelSink();
    public sealed virtual IDictionary get_Properties();
}
public class System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider : object {
    public IClientChannelSinkProvider Next { get; public set; }
    public BinaryClientFormatterSinkProvider(IDictionary properties, ICollection providerData);
    public sealed virtual IClientChannelSink CreateSink(IChannelSender channel, string url, object remoteChannelData);
    public sealed virtual IClientChannelSinkProvider get_Next();
    public sealed virtual void set_Next(IClientChannelSinkProvider value);
}
public class System.Runtime.Remoting.Channels.BinaryServerFormatterSink : object {
    [ComVisibleAttribute("False")]
public TypeFilterLevel TypeFilterLevel { get; public set; }
    public IServerChannelSink NextChannelSink { get; }
    public IDictionary Properties { get; }
    public BinaryServerFormatterSink(Protocol protocol, IServerChannelSink nextSink, IChannelReceiver receiver);
    public TypeFilterLevel get_TypeFilterLevel();
    public void set_TypeFilterLevel(TypeFilterLevel value);
    public sealed virtual ServerProcessing ProcessMessage(IServerChannelSinkStack sinkStack, IMessage requestMsg, ITransportHeaders requestHeaders, Stream requestStream, IMessage& responseMsg, ITransportHeaders& responseHeaders, Stream& responseStream);
    public sealed virtual void AsyncProcessResponse(IServerResponseChannelSinkStack sinkStack, object state, IMessage msg, ITransportHeaders headers, Stream stream);
    public sealed virtual Stream GetResponseStream(IServerResponseChannelSinkStack sinkStack, object state, IMessage msg, ITransportHeaders headers);
    public sealed virtual IServerChannelSink get_NextChannelSink();
    public sealed virtual IDictionary get_Properties();
}
public class System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider : object {
    public IServerChannelSinkProvider Next { get; public set; }
    [ComVisibleAttribute("False")]
public TypeFilterLevel TypeFilterLevel { get; public set; }
    public BinaryServerFormatterSinkProvider(IDictionary properties, ICollection providerData);
    public sealed virtual void GetChannelData(IChannelDataStore channelData);
    public sealed virtual IServerChannelSink CreateSink(IChannelReceiver channel);
    public sealed virtual IServerChannelSinkProvider get_Next();
    public sealed virtual void set_Next(IServerChannelSinkProvider value);
    public TypeFilterLevel get_TypeFilterLevel();
    public void set_TypeFilterLevel(TypeFilterLevel value);
}
public class System.Runtime.Remoting.Channels.CommonTransportKeys : object {
    public static string IPAddress;
    public static string ConnectionId;
    public static string RequestUri;
}
[DefaultMemberAttribute("Item")]
public class System.Runtime.Remoting.Channels.Http.HttpChannel : BaseChannelWithProperties {
    public bool IsSecured { get; public set; }
    public int ChannelPriority { get; }
    public string ChannelName { get; }
    public object ChannelData { get; }
    public string ChannelScheme { get; }
    public bool WantsToListen { get; public set; }
    public IServerChannelSink ChannelSinkChain { get; }
    public IDictionary Properties { get; }
    public object Item { get; public set; }
    public ICollection Keys { get; }
    public HttpChannel(int port);
    public HttpChannel(IDictionary properties, IClientChannelSinkProvider clientSinkProvider, IServerChannelSinkProvider serverSinkProvider);
    private static HttpChannel();
    public sealed virtual bool get_IsSecured();
    public sealed virtual void set_IsSecured(bool value);
    public sealed virtual int get_ChannelPriority();
    public sealed virtual string get_ChannelName();
    public sealed virtual string Parse(string url, String& objectURI);
    public sealed virtual IMessageSink CreateMessageSink(string url, object remoteChannelData, String& objectURI);
    public sealed virtual object get_ChannelData();
    public sealed virtual String[] GetUrlsForUri(string objectURI);
    public sealed virtual void StartListening(object data);
    public sealed virtual void StopListening(object data);
    public sealed virtual string get_ChannelScheme();
    public sealed virtual bool get_WantsToListen();
    public void set_WantsToListen(bool value);
    public sealed virtual IServerChannelSink get_ChannelSinkChain();
    public sealed virtual void AddHookChannelUri(string channelUri);
    public virtual IDictionary get_Properties();
    public virtual object get_Item(object key);
    public virtual void set_Item(object key, object value);
    public virtual ICollection get_Keys();
}
[DefaultMemberAttribute("Item")]
public class System.Runtime.Remoting.Channels.Http.HttpClientChannel : BaseChannelWithProperties {
    public bool IsSecured { get; public set; }
    public int ChannelPriority { get; }
    public string ChannelName { get; }
    public object Item { get; public set; }
    public ICollection Keys { get; }
    public HttpClientChannel(string name, IClientChannelSinkProvider sinkProvider);
    public HttpClientChannel(IDictionary properties, IClientChannelSinkProvider sinkProvider);
    private static HttpClientChannel();
    public sealed virtual bool get_IsSecured();
    public sealed virtual void set_IsSecured(bool value);
    public sealed virtual int get_ChannelPriority();
    public sealed virtual string get_ChannelName();
    public sealed virtual string Parse(string url, String& objectURI);
    public virtual IMessageSink CreateMessageSink(string url, object remoteChannelData, String& objectURI);
    public virtual object get_Item(object key);
    public virtual void set_Item(object key, object value);
    public virtual ICollection get_Keys();
}
public class System.Runtime.Remoting.Channels.Http.HttpRemotingHandler : object {
    public bool IsReusable { get; }
    public HttpRemotingHandler(Type type, object srvID);
    private static HttpRemotingHandler();
    public sealed virtual void ProcessRequest(HttpContext context);
    public sealed virtual bool get_IsReusable();
}
public class System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory : object {
    private static HttpRemotingHandlerFactory();
    public sealed virtual IHttpHandler GetHandler(HttpContext context, string verb, string url, string filePath);
    public sealed virtual void ReleaseHandler(IHttpHandler handler);
}
[DefaultMemberAttribute("Item")]
public class System.Runtime.Remoting.Channels.Http.HttpServerChannel : BaseChannelWithProperties {
    public int ChannelPriority { get; }
    public string ChannelName { get; }
    public object ChannelData { get; }
    public string ChannelScheme { get; }
    public bool WantsToListen { get; public set; }
    public IServerChannelSink ChannelSinkChain { get; }
    public object Item { get; public set; }
    public ICollection Keys { get; }
    public HttpServerChannel(int port);
    public HttpServerChannel(string name, int port);
    public HttpServerChannel(string name, int port, IServerChannelSinkProvider sinkProvider);
    public HttpServerChannel(IDictionary properties, IServerChannelSinkProvider sinkProvider);
    public sealed virtual int get_ChannelPriority();
    public sealed virtual string get_ChannelName();
    public sealed virtual string Parse(string url, String& objectURI);
    public sealed virtual object get_ChannelData();
    public string GetChannelUri();
    public virtual String[] GetUrlsForUri(string objectUri);
    public sealed virtual void StartListening(object data);
    public sealed virtual void StopListening(object data);
    public sealed virtual string get_ChannelScheme();
    public sealed virtual bool get_WantsToListen();
    public void set_WantsToListen(bool value);
    public sealed virtual IServerChannelSink get_ChannelSinkChain();
    public sealed virtual void AddHookChannelUri(string channelUri);
    public virtual object get_Item(object key);
    public virtual void set_Item(object key, object value);
    public virtual ICollection get_Keys();
}
public interface System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection {
    public abstract virtual bool IsConnectingEndPointAuthorized(EndPoint endPoint);
    public abstract virtual bool IsConnectingIdentityAuthorized(IIdentity identity);
}
public class System.Runtime.Remoting.Channels.Ipc.IpcChannel : object {
    public bool IsSecured { get; public set; }
    public int ChannelPriority { get; }
    public string ChannelName { get; }
    public object ChannelData { get; }
    public IpcChannel(string portName);
    public IpcChannel(IDictionary properties, IClientChannelSinkProvider clientSinkProvider, IServerChannelSinkProvider serverSinkProvider);
    public IpcChannel(IDictionary properties, IClientChannelSinkProvider clientSinkProvider, IServerChannelSinkProvider serverSinkProvider, CommonSecurityDescriptor securityDescriptor);
    public sealed virtual bool get_IsSecured();
    public sealed virtual void set_IsSecured(bool value);
    public sealed virtual int get_ChannelPriority();
    public sealed virtual string get_ChannelName();
    public sealed virtual string Parse(string url, String& objectURI);
    public sealed virtual IMessageSink CreateMessageSink(string url, object remoteChannelData, String& objectURI);
    public sealed virtual object get_ChannelData();
    public sealed virtual String[] GetUrlsForUri(string objectURI);
    public sealed virtual void StartListening(object data);
    public sealed virtual void StopListening(object data);
}
public class System.Runtime.Remoting.Channels.Ipc.IpcClientChannel : object {
    public bool IsSecured { get; public set; }
    public int ChannelPriority { get; }
    public string ChannelName { get; }
    public IpcClientChannel(string name, IClientChannelSinkProvider sinkProvider);
    public IpcClientChannel(IDictionary properties, IClientChannelSinkProvider sinkProvider);
    public sealed virtual bool get_IsSecured();
    public sealed virtual void set_IsSecured(bool value);
    public sealed virtual int get_ChannelPriority();
    public sealed virtual string get_ChannelName();
    public sealed virtual string Parse(string url, String& objectURI);
    public virtual IMessageSink CreateMessageSink(string url, object remoteChannelData, String& objectURI);
}
public class System.Runtime.Remoting.Channels.Ipc.IpcServerChannel : object {
    public bool IsSecured { get; public set; }
    public int ChannelPriority { get; }
    public string ChannelName { get; }
    public object ChannelData { get; }
    public IpcServerChannel(string portName);
    public IpcServerChannel(string name, string portName);
    public IpcServerChannel(string name, string portName, IServerChannelSinkProvider sinkProvider);
    public IpcServerChannel(IDictionary properties, IServerChannelSinkProvider sinkProvider);
    public IpcServerChannel(IDictionary properties, IServerChannelSinkProvider sinkProvider, CommonSecurityDescriptor securityDescriptor);
    public sealed virtual bool get_IsSecured();
    public sealed virtual void set_IsSecured(bool value);
    public sealed virtual int get_ChannelPriority();
    public sealed virtual string get_ChannelName();
    public sealed virtual string Parse(string url, String& objectURI);
    public sealed virtual object get_ChannelData();
    public string GetChannelUri();
    public virtual String[] GetUrlsForUri(string objectUri);
    public sealed virtual void StartListening(object data);
    public sealed virtual void StopListening(object data);
}
public class System.Runtime.Remoting.Channels.SoapClientFormatterSink : object {
    public IMessageSink NextSink { get; }
    public IClientChannelSink NextChannelSink { get; }
    public IDictionary Properties { get; }
    public SoapClientFormatterSink(IClientChannelSink nextSink);
    public sealed virtual IMessageSink get_NextSink();
    public sealed virtual IMessage SyncProcessMessage(IMessage msg);
    public sealed virtual IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink);
    public sealed virtual void ProcessMessage(IMessage msg, ITransportHeaders requestHeaders, Stream requestStream, ITransportHeaders& responseHeaders, Stream& responseStream);
    public sealed virtual void AsyncProcessRequest(IClientChannelSinkStack sinkStack, IMessage msg, ITransportHeaders headers, Stream stream);
    public sealed virtual void AsyncProcessResponse(IClientResponseChannelSinkStack sinkStack, object state, ITransportHeaders headers, Stream stream);
    public sealed virtual Stream GetRequestStream(IMessage msg, ITransportHeaders headers);
    public sealed virtual IClientChannelSink get_NextChannelSink();
    public sealed virtual IDictionary get_Properties();
}
public class System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider : object {
    public IClientChannelSinkProvider Next { get; public set; }
    public SoapClientFormatterSinkProvider(IDictionary properties, ICollection providerData);
    public sealed virtual IClientChannelSink CreateSink(IChannelSender channel, string url, object remoteChannelData);
    public sealed virtual IClientChannelSinkProvider get_Next();
    public sealed virtual void set_Next(IClientChannelSinkProvider value);
}
public class System.Runtime.Remoting.Channels.SoapServerFormatterSink : object {
    [ComVisibleAttribute("False")]
public TypeFilterLevel TypeFilterLevel { get; public set; }
    public IServerChannelSink NextChannelSink { get; }
    public IDictionary Properties { get; }
    public SoapServerFormatterSink(Protocol protocol, IServerChannelSink nextSink, IChannelReceiver receiver);
    public TypeFilterLevel get_TypeFilterLevel();
    public void set_TypeFilterLevel(TypeFilterLevel value);
    public sealed virtual ServerProcessing ProcessMessage(IServerChannelSinkStack sinkStack, IMessage requestMsg, ITransportHeaders requestHeaders, Stream requestStream, IMessage& responseMsg, ITransportHeaders& responseHeaders, Stream& responseStream);
    public sealed virtual void AsyncProcessResponse(IServerResponseChannelSinkStack sinkStack, object state, IMessage msg, ITransportHeaders headers, Stream stream);
    public sealed virtual Stream GetResponseStream(IServerResponseChannelSinkStack sinkStack, object state, IMessage msg, ITransportHeaders headers);
    public sealed virtual IServerChannelSink get_NextChannelSink();
    public sealed virtual IDictionary get_Properties();
}
public class System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider : object {
    public IServerChannelSinkProvider Next { get; public set; }
    [ComVisibleAttribute("False")]
public TypeFilterLevel TypeFilterLevel { get; public set; }
    public SoapServerFormatterSinkProvider(IDictionary properties, ICollection providerData);
    public sealed virtual void GetChannelData(IChannelDataStore channelData);
    public sealed virtual IServerChannelSink CreateSink(IChannelReceiver channel);
    public sealed virtual IServerChannelSinkProvider get_Next();
    public sealed virtual void set_Next(IServerChannelSinkProvider value);
    public TypeFilterLevel get_TypeFilterLevel();
    public void set_TypeFilterLevel(TypeFilterLevel value);
}
public enum System.Runtime.Remoting.Channels.SocketCachePolicy : Enum {
    public int value__;
    public static SocketCachePolicy Default;
    public static SocketCachePolicy AbsoluteTimeout;
}
public class System.Runtime.Remoting.Channels.Tcp.TcpChannel : object {
    public bool IsSecured { get; public set; }
    public int ChannelPriority { get; }
    public string ChannelName { get; }
    public object ChannelData { get; }
    public TcpChannel(int port);
    public TcpChannel(IDictionary properties, IClientChannelSinkProvider clientSinkProvider, IServerChannelSinkProvider serverSinkProvider);
    public sealed virtual bool get_IsSecured();
    public sealed virtual void set_IsSecured(bool value);
    public sealed virtual int get_ChannelPriority();
    public sealed virtual string get_ChannelName();
    public sealed virtual string Parse(string url, String& objectURI);
    public sealed virtual IMessageSink CreateMessageSink(string url, object remoteChannelData, String& objectURI);
    public sealed virtual object get_ChannelData();
    public sealed virtual String[] GetUrlsForUri(string objectURI);
    public sealed virtual void StartListening(object data);
    public sealed virtual void StopListening(object data);
}
public class System.Runtime.Remoting.Channels.Tcp.TcpClientChannel : object {
    public bool IsSecured { get; public set; }
    public int ChannelPriority { get; }
    public string ChannelName { get; }
    public TcpClientChannel(string name, IClientChannelSinkProvider sinkProvider);
    public TcpClientChannel(IDictionary properties, IClientChannelSinkProvider sinkProvider);
    public sealed virtual bool get_IsSecured();
    public sealed virtual void set_IsSecured(bool value);
    public sealed virtual int get_ChannelPriority();
    public sealed virtual string get_ChannelName();
    public sealed virtual string Parse(string url, String& objectURI);
    public virtual IMessageSink CreateMessageSink(string url, object remoteChannelData, String& objectURI);
}
public class System.Runtime.Remoting.Channels.Tcp.TcpServerChannel : object {
    public bool IsSecured { get; public set; }
    public int ChannelPriority { get; }
    public string ChannelName { get; }
    public object ChannelData { get; }
    public TcpServerChannel(int port);
    public TcpServerChannel(string name, int port);
    public TcpServerChannel(string name, int port, IServerChannelSinkProvider sinkProvider);
    public TcpServerChannel(IDictionary properties, IServerChannelSinkProvider sinkProvider);
    public TcpServerChannel(IDictionary properties, IServerChannelSinkProvider sinkProvider, IAuthorizeRemotingConnection authorizeCallback);
    public sealed virtual bool get_IsSecured();
    public sealed virtual void set_IsSecured(bool value);
    public sealed virtual int get_ChannelPriority();
    public sealed virtual string get_ChannelName();
    public sealed virtual string Parse(string url, String& objectURI);
    public sealed virtual object get_ChannelData();
    public string GetChannelUri();
    public virtual String[] GetUrlsForUri(string objectUri);
    public sealed virtual void StartListening(object data);
    public sealed virtual void StopListening(object data);
}
public class System.Runtime.Remoting.MetadataServices.MetaData : object {
    public static void ConvertTypesToSchemaToFile(Type[] types, SdlType sdlType, string path);
    public static void ConvertTypesToSchemaToStream(Type[] types, SdlType sdlType, Stream outputStream);
    public static void ConvertTypesToSchemaToFile(ServiceType[] types, SdlType sdlType, string path);
    public static void ConvertTypesToSchemaToStream(ServiceType[] serviceTypes, SdlType sdlType, Stream outputStream);
    public static void RetrieveSchemaFromUrlToStream(string url, Stream outputStream);
    public static void RetrieveSchemaFromUrlToFile(string url, string path);
    public static void ConvertSchemaStreamToCodeSourceStream(bool clientProxy, string outputDirectory, Stream inputStream, ArrayList outCodeStreamList, string proxyUrl, string proxyNamespace);
    public static void ConvertSchemaStreamToCodeSourceStream(bool clientProxy, string outputDirectory, Stream inputStream, ArrayList outCodeStreamList, string proxyUrl);
    public static void ConvertSchemaStreamToCodeSourceStream(bool clientProxy, string outputDirectory, Stream inputStream, ArrayList outCodeStreamList);
    public static void ConvertCodeSourceStreamToAssemblyFile(ArrayList outCodeStreamList, string assemblyPath, string strongNameFilename);
    public static void ConvertCodeSourceFileToAssemblyFile(string codePath, string assemblyPath, string strongNameFilename);
    public static void SaveStreamToFile(Stream inputStream, string path);
}
public class System.Runtime.Remoting.MetadataServices.SdlChannelSink : object {
    public IServerChannelSink NextChannelSink { get; }
    public IDictionary Properties { get; }
    public SdlChannelSink(IChannelReceiver receiver, IServerChannelSink nextSink);
    public sealed virtual ServerProcessing ProcessMessage(IServerChannelSinkStack sinkStack, IMessage requestMsg, ITransportHeaders requestHeaders, Stream requestStream, IMessage& responseMsg, ITransportHeaders& responseHeaders, Stream& responseStream);
    public sealed virtual void AsyncProcessResponse(IServerResponseChannelSinkStack sinkStack, object state, IMessage msg, ITransportHeaders headers, Stream stream);
    public sealed virtual Stream GetResponseStream(IServerResponseChannelSinkStack sinkStack, object state, IMessage msg, ITransportHeaders headers);
    public sealed virtual IServerChannelSink get_NextChannelSink();
    public sealed virtual IDictionary get_Properties();
}
public class System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider : object {
    public IServerChannelSinkProvider Next { get; public set; }
    public SdlChannelSinkProvider(IDictionary properties, ICollection providerData);
    public sealed virtual void GetChannelData(IChannelDataStore localChannelData);
    public sealed virtual IServerChannelSink CreateSink(IChannelReceiver channel);
    public sealed virtual IServerChannelSinkProvider get_Next();
    public sealed virtual void set_Next(IServerChannelSinkProvider value);
}
public enum System.Runtime.Remoting.MetadataServices.SdlType : Enum {
    public int value__;
    public static SdlType Sdl;
    public static SdlType Wsdl;
}
public class System.Runtime.Remoting.MetadataServices.ServiceType : object {
    public Type ObjectType { get; }
    public string Url { get; }
    public ServiceType(Type type);
    public ServiceType(Type type, string url);
    public Type get_ObjectType();
    public string get_Url();
}
public class System.Runtime.Remoting.MetadataServices.SUDSGeneratorException : Exception {
    internal SUDSGeneratorException(string msg);
    protected SUDSGeneratorException(SerializationInfo info, StreamingContext context);
}
public class System.Runtime.Remoting.MetadataServices.SUDSParserException : Exception {
    internal SUDSParserException(string message);
    protected SUDSParserException(SerializationInfo info, StreamingContext context);
}
[ComVisibleAttribute("True")]
public abstract class System.Runtime.Remoting.Services.RemotingClientProxy : Component {
    protected Type _type;
    protected object _tp;
    protected string _url;
    public bool AllowAutoRedirect { get; public set; }
    public object Cookies { get; }
    public bool EnableCookies { get; public set; }
    public bool PreAuthenticate { get; public set; }
    public string Path { get; public set; }
    public int Timeout { get; public set; }
    public string Url { get; public set; }
    public string UserAgent { get; public set; }
    public string Username { get; public set; }
    public string Password { get; public set; }
    public string Domain { get; public set; }
    public string ProxyName { get; public set; }
    public int ProxyPort { get; public set; }
    protected void ConfigureProxy(Type type, string url);
    protected void ConnectProxy();
    public bool get_AllowAutoRedirect();
    public void set_AllowAutoRedirect(bool value);
    public object get_Cookies();
    public bool get_EnableCookies();
    public void set_EnableCookies(bool value);
    public bool get_PreAuthenticate();
    public void set_PreAuthenticate(bool value);
    public string get_Path();
    public void set_Path(string value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public string get_Url();
    public void set_Url(string value);
    public string get_UserAgent();
    public void set_UserAgent(string value);
    public string get_Username();
    public void set_Username(string value);
    public string get_Password();
    public void set_Password(string value);
    public string get_Domain();
    public void set_Domain(string value);
    public string get_ProxyName();
    public void set_ProxyName(string value);
    public int get_ProxyPort();
    public void set_ProxyPort(int value);
}
public class System.Runtime.Remoting.Services.RemotingService : Component {
    public HttpApplicationState Application { get; }
    public HttpContext Context { get; }
    public HttpSessionState Session { get; }
    public HttpServerUtility Server { get; }
    public IPrincipal User { get; }
    public HttpApplicationState get_Application();
    public HttpContext get_Context();
    public HttpSessionState get_Session();
    public HttpServerUtility get_Server();
    public IPrincipal get_User();
}
