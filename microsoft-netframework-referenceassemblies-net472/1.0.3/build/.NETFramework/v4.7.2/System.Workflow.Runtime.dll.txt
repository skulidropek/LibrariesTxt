internal class DigestComparer : object {
    private sealed virtual override int System.Collections.Generic.IComparer<System.Byte[]>.Compare(Byte[] digest1, Byte[] digest2);
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<System.Byte[]>.Equals(Byte[] digest1, Byte[] digest2);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<System.Byte[]>.GetHashCode(Byte[] checksumBytes);
    internal static string GetMD5DigestString(Byte[] md5Digest);
}
[ObsoleteAttribute("The WF3 Types are deprecated. Instead, please use the new WF4 Types from System.Activities.*")]
public class System.Activities.Statements.Interop : NativeActivity {
    internal static string InArgumentSuffix;
    internal static string OutArgumentSuffix;
    [DefaultValueAttribute("")]
public Type ActivityType { get; public set; }
    [BrowsableAttribute("False")]
public IDictionary`2<string, Argument> ActivityProperties { get; }
    [BrowsableAttribute("False")]
public IDictionary`2<string, object> ActivityMetaProperties { get; }
    protected bool CanInduceIdle { get; }
    internal Activity ComponentModelActivity { get; }
    internal IList`1<PropertyInfo> OutputPropertyDefinitions { get; }
    internal bool HasNameCollision { get; }
    private static Interop();
    public Type get_ActivityType();
    public void set_ActivityType(Type value);
    public IDictionary`2<string, Argument> get_ActivityProperties();
    public IDictionary`2<string, object> get_ActivityMetaProperties();
    protected virtual bool get_CanInduceIdle();
    internal Activity get_ComponentModelActivity();
    internal IList`1<PropertyInfo> get_OutputPropertyDefinitions();
    internal bool get_HasNameCollision();
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
    protected virtual void Cancel(NativeActivityContext context);
    internal void SetOutputArgumentValues(IDictionary`2<string, object> outputs, NativeActivityContext context);
    internal IDictionary`2<string, object> GetInputArgumentValues(NativeActivityContext context);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
    internal void OnClose(NativeActivityContext context, Exception exception);
    internal void Persist(NativeActivityContext context);
    internal void OnPersistComplete(NativeActivityContext context, ActivityInstance completedInstance);
    internal void CreateTransaction(NativeActivityContext context, TransactionOptions txOptions);
    internal void CommitTransaction(NativeActivityContext context);
    internal void AddResourceManager(NativeActivityContext context, VolatileResourceManager resourceManager);
}
internal class System.Activities.Statements.InteropEnvironment : object {
    public Interop Activity { get; public set; }
    public InteropEnvironment(InteropExecutor interopExecutor, NativeActivityContext nativeActivityContext, BookmarkCallback bookmarkCallback, Interop activity, Transaction transaction);
    private static InteropEnvironment();
    [CompilerGeneratedAttribute]
public Interop get_Activity();
    [CompilerGeneratedAttribute]
public void set_Activity(Interop value);
    private sealed virtual override void System.IDisposable.Dispose();
    public void Execute(Activity definition, NativeActivityContext context);
    public void Cancel();
    public void EnqueueEvent(IComparable queueName, object item);
    public void TrackActivityStatusChange(Activity activity, int eventCounter);
    public void TrackData(Activity activity, int eventCounter, string key, object data);
    public void Resume();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    public void Persist();
    public void CreateTransaction(TransactionOptions transactionOptions);
    public void CommitTransaction();
    public void AddResourceManager(VolatileResourceManager resourceManager);
}
[DataContractAttribute]
internal class System.Activities.Statements.InteropExecutor : object {
    public Activity CurrentActivity { get; public set; }
    public IDictionary`2<string, object> Outputs { get; }
    public IEnumerable`1<IComparable> Queues { get; }
    public Dictionary`2<Bookmark, IComparable> BookmarkQueueMap { get; }
    public InteropEnvironment ServiceProvider { get; public set; }
    public Activity CurrentAtomicActivity { get; }
    public Guid InstanceID { get; }
    public bool IsDynamicallyUpdated { get; }
    public Activity RootActivity { get; }
    public WaitCallback ProcessTimersCallback { get; }
    public WorkBatchCollection BatchCollection { get; }
    public bool TrackingEnabled { get; public set; }
    public bool HasCheckedForTrackingParticipant { get; public set; }
    public InteropExecutor(Guid instanceId, Activity rootActivity, IList`1<PropertyInfo> outputProperties, Activity activityDefinition);
    public sealed virtual Activity get_CurrentActivity();
    public void set_CurrentActivity(Activity value);
    public IDictionary`2<string, object> get_Outputs();
    public IEnumerable`1<IComparable> get_Queues();
    public Dictionary`2<Bookmark, IComparable> get_BookmarkQueueMap();
    [CompilerGeneratedAttribute]
public InteropEnvironment get_ServiceProvider();
    [CompilerGeneratedAttribute]
public void set_ServiceProvider(InteropEnvironment value);
    public sealed virtual Activity get_CurrentAtomicActivity();
    public sealed virtual Guid get_InstanceID();
    public sealed virtual bool get_IsDynamicallyUpdated();
    public sealed virtual Activity get_RootActivity();
    public sealed virtual WaitCallback get_ProcessTimersCallback();
    public sealed virtual WorkBatchCollection get_BatchCollection();
    public bool get_TrackingEnabled();
    public void set_TrackingEnabled(bool value);
    public bool get_HasCheckedForTrackingParticipant();
    public void set_HasCheckedForTrackingParticipant(bool value);
    public ActivityExecutionStatus EnqueueEvent(IComparable queueName, object item);
    public ActivityExecutionStatus Resume();
    public void SetAmbientTransactionAndServiceEnvironment(Transaction transaction);
    public void ClearAmbientTransactionAndServiceEnvironment();
    public bool CheckAndProcessTransactionAborted(TransactionalProperties transactionalProperties);
    public bool IsActivityInAtomicContext(Activity activity, Activity& atomicActivity);
    public ActivityExecutionStatus Execute();
    public ActivityExecutionStatus Cancel();
    public void Initialize(Activity definition, IDictionary`2<string, object> inputs, bool hasNameCollision);
    internal void EnsureReload(Interop activity);
    public void Reload(Activity definitionActivity, IList`1<PropertyInfo> outputProperties);
    public sealed virtual void ActivityStatusChanged(Activity activity, bool transacted, bool committed);
    public sealed virtual void CheckpointInstanceState(Activity atomicActivity);
    public sealed virtual void DisposeCheckpointState();
    public sealed virtual Activity GetContextActivityForId(int id);
    public sealed virtual int GetNewContextActivityId();
    public sealed virtual object GetService(Activity currentActivity, Type serviceType);
    public sealed virtual Activity LoadContextActivity(ActivityExecutionContextInfo contextInfo, Activity outerContextActivity);
    public sealed virtual void OnAfterDynamicChange(bool updateSucceeded, IList`1<WorkflowChangeAction> changes);
    public sealed virtual bool OnBeforeDynamicChange(IList`1<WorkflowChangeAction> changes);
    public sealed virtual void PersistInstanceState(Activity activity);
    public sealed virtual void RaiseActivityExecuting(Activity activity);
    public sealed virtual void RaiseException(Exception e, Activity activity, string responsibleActivity);
    public sealed virtual void RaiseHandlerInvoked();
    public sealed virtual void RaiseHandlerInvoking(Delegate delegateHandler);
    public sealed virtual void RegisterContextActivity(Activity activity);
    public sealed virtual void RequestRevertToCheckpointState(Activity currentActivity, EventHandler`1<EventArgs> callbackHandler, EventArgs callbackData, bool suspendOnRevert, string suspendReason);
    private sealed virtual override bool System.Workflow.ComponentModel.IWorkflowCoreRuntime.Resume();
    public sealed virtual void SaveContextActivity(Activity contextActivity);
    public sealed virtual void ScheduleItem(SchedulableItem item, bool isInAtomicTransaction, bool transacted, bool queueInTransaction);
    public sealed virtual IDisposable SetCurrentActivity(Activity activity);
    public sealed virtual Guid StartWorkflow(Type workflowType, Dictionary`2<string, object> namedArgumentValues);
    public sealed virtual bool SuspendInstance(string suspendDescription);
    public sealed virtual void TerminateInstance(Exception e);
    public sealed virtual void Track(string key, object data);
    public sealed virtual void UnregisterContextActivity(Activity activity);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
[ObsoleteAttribute("The WF3 Types are deprecated. Instead, please use the new WF4 Types from System.Activities.*")]
public class System.Activities.Tracking.InteropTrackingRecord : CustomTrackingRecord {
    public TrackingRecord TrackingRecord { get; private set; }
    public InteropTrackingRecord(string activityDisplayName, TrackingRecord v1TrackingRecord);
    protected InteropTrackingRecord(InteropTrackingRecord record);
    [CompilerGeneratedAttribute]
public TrackingRecord get_TrackingRecord();
    [CompilerGeneratedAttribute]
private void set_TrackingRecord(TrackingRecord value);
    protected virtual TrackingRecord Clone();
}
internal class System.TelemetryEventSource : EventSource {
    internal static EventKeywords Reserved44Keyword;
    internal static EventKeywords TelemetryKeyword;
    internal static EventKeywords MeasuresKeyword;
    internal static EventKeywords CriticalDataKeyword;
    internal static EventTags CoreData;
    internal static EventTags InjectXToken;
    internal static EventTags RealtimeLatency;
    internal static EventTags NormalLatency;
    internal static EventTags CriticalPersistence;
    internal static EventTags NormalPersistence;
    internal static EventTags DropPii;
    internal static EventTags HashPii;
    internal static EventTags MarkPii;
    internal static EventFieldTags DropPiiField;
    internal static EventFieldTags HashPiiField;
    internal TelemetryEventSource(string eventSourceName);
    private static TelemetryEventSource();
    internal static EventSourceOptions TelemetryOptions();
    internal static EventSourceOptions MeasuresOptions();
    internal static EventSourceOptions CriticalDataOptions();
    internal void V1Runtime();
}
internal abstract class System.Workflow.Runtime.AmbientEnvironment : object {
    protected AmbientEnvironment(object env);
    private sealed virtual override void System.IDisposable.Dispose();
    internal static object Retrieve();
}
internal static class System.Workflow.Runtime.AppSettings : object {
    internal static bool FIPSRequired { get; }
    private static AppSettings();
    internal static bool get_FIPSRequired();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Configuration.WorkflowRuntimeSection : ConfigurationSection {
    internal static string DefaultSectionName;
    [ConfigurationPropertyAttribute("WorkflowDefinitionCacheCapacity")]
public int WorkflowDefinitionCacheCapacity { get; public set; }
    [ConfigurationPropertyAttribute("Name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("ValidateOnCreate")]
public bool ValidateOnCreate { get; public set; }
    [ConfigurationPropertyAttribute("EnablePerformanceCounters")]
public bool EnablePerformanceCounters { get; public set; }
    [ConfigurationPropertyAttribute("Services")]
public WorkflowRuntimeServiceElementCollection Services { get; }
    [ConfigurationPropertyAttribute("CommonParameters")]
public NameValueConfigurationCollection CommonParameters { get; }
    public int get_WorkflowDefinitionCacheCapacity();
    public void set_WorkflowDefinitionCacheCapacity(int value);
    public string get_Name();
    public void set_Name(string value);
    public bool get_ValidateOnCreate();
    public void set_ValidateOnCreate(bool value);
    public bool get_EnablePerformanceCounters();
    public void set_EnablePerformanceCounters(bool value);
    public WorkflowRuntimeServiceElementCollection get_Services();
    public NameValueConfigurationCollection get_CommonParameters();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement : ConfigurationElement {
    public NameValueCollection Parameters { get; }
    [ConfigurationPropertyAttribute("type")]
public string Type { get; public set; }
    public NameValueCollection get_Parameters();
    public string get_Type();
    public void set_Type(string value);
    protected virtual bool OnDeserializeUnrecognizedAttribute(string name, string value);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElementCollection : ConfigurationElementCollection {
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement settings);
    public void Add(WorkflowRuntimeServiceElement serviceSettings);
}
internal static class System.Workflow.Runtime.ContextActivityUtils : object {
    internal static int ContextId(Activity activity);
    internal static Activity ContextActivity(Activity activity);
    internal static Activity ParentContextActivity(Activity activity);
    internal static IWorkflowCoreRuntime RetrieveWorkflowExecutor(Activity activity);
    internal static Activity RootContextActivity(Activity activity);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.CorrelationProperty : object {
    public object Value { get; }
    public string Name { get; }
    public CorrelationProperty(string name, object value);
    public object get_Value();
    public string get_Name();
}
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.DependencyObjectCodeDomSerializer", "System.ComponentModel.Design.Serialization.CodeDomSerializer")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.CorrelationToken : DependencyObject {
    internal static DependencyProperty NameProperty;
    internal static DependencyProperty OwnerActivityNameProperty;
    internal static DependencyProperty PropertiesProperty;
    internal static DependencyProperty SubscriptionsProperty;
    internal static DependencyProperty InitializedProperty;
    [BrowsableAttribute("False")]
public string Name { get; public set; }
    [TypeConverterAttribute("System.Workflow.ComponentModel.Design.PropertyValueProviderTypeConverter")]
public string OwnerActivityName { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ICollection`1<CorrelationProperty> Properties { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Initialized { get; }
    public CorrelationToken(string name);
    private static CorrelationToken();
    public string get_Name();
    public void set_Name(string value);
    public string get_OwnerActivityName();
    public void set_OwnerActivityName(string value);
    public ICollection`1<CorrelationProperty> get_Properties();
    public bool get_Initialized();
    private sealed virtual override ICollection System.Workflow.ComponentModel.Design.IPropertyValueProvider.GetPropertyValues(ITypeDescriptorContext context);
    public void Initialize(Activity activity, ICollection`1<CorrelationProperty> propertyValues);
    internal void Uninitialize(Activity activity);
    public void SubscribeForCorrelationTokenInitializedEvent(Activity activity, IActivityEventListener`1<CorrelationTokenEventArgs> dataChangeListener);
    public void UnsubscribeFromCorrelationTokenInitializedEvent(Activity activity, IActivityEventListener`1<CorrelationTokenEventArgs> dataChangeListener);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.CorrelationTokenCollection : KeyedCollection`2<string, CorrelationToken> {
    public static DependencyProperty CorrelationTokenCollectionProperty;
    private static CorrelationTokenCollection();
    public CorrelationToken GetItem(string key);
    protected virtual string GetKeyForItem(CorrelationToken item);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, CorrelationToken item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, CorrelationToken item);
    internal static void UninitializeCorrelationTokens(Activity activity);
    public static CorrelationToken GetCorrelationToken(Activity activity, string correlationTokenName, string ownerActivityName);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.CorrelationTokenEventArgs : EventArgs {
    public bool IsInitializing { get; }
    public CorrelationToken CorrelationToken { get; }
    internal CorrelationTokenEventArgs(CorrelationToken correlator, bool initialized);
    public bool get_IsInitializing();
    public CorrelationToken get_CorrelationToken();
}
internal class System.Workflow.Runtime.CreationContext : object {
    internal Type Type;
    internal XmlReader XomlReader;
    internal XmlReader RulesReader;
    internal WorkflowExecutor InvokerExecutor;
    internal string InvokeActivityID;
    internal Dictionary`2<string, object> Args;
    internal bool IsActivation;
    internal bool Created;
    internal CreationContext(Type type, WorkflowExecutor invokerExec, string invokeActivityID, Dictionary`2<string, object> args);
    internal CreationContext(XmlReader xomlReader, XmlReader rulesReader, Dictionary`2<string, object> args);
}
internal class System.Workflow.Runtime.DbRetry : object {
    internal short MaxRetries { get; }
    internal DbRetry(bool enableRetries);
    internal short get_MaxRetries();
    internal bool TryDoRetry(Int16& retryCount);
    internal bool CanRetry(short retryCount);
    internal void RetrySleep(short retryCount);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.DebugEngine.ActivityHandlerDescriptor : ValueType {
    public string Name;
    public int Token;
}
internal abstract class System.Workflow.Runtime.DebugEngine.BreakSafeBase`1 : object {
    protected BreakSafeBase`1(int controllerManagedThreadId);
    protected object GetControllerUpdateObject();
    protected void SetControllerUpdateObject(object updateObject);
    protected T GetReaderData();
    protected T GetWriterData();
    protected void SaveData(T data);
    protected void Lock();
    protected void Unlock();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.DebugEngine.DebugController : MarshalByRefObject {
    internal DebugController(WorkflowRuntime serviceContainer, string hostName);
    private static DebugController();
    internal static void InitializeProcessSecurity();
    public virtual object InitializeLifetimeService();
    internal void Attach(Guid programId, int attachTimeout, int detachPingInterval, String& hostName, String& uri, Int32& controllerThreadId, Boolean& isSynchronousAttach);
    public void AttachToConduit(Uri url);
    internal void Close();
}
internal class System.Workflow.Runtime.DebugEngine.DebugControllerThread : object {
    public int ThreadId { get; }
    public int ManagedThreadId { get; }
    private static DebugControllerThread();
    public void RunThread(IInstanceTable instanceTable);
    public void StopThread();
    public void ExpressionEvaluationFunction();
    public int get_ThreadId();
    public int get_ManagedThreadId();
}
public class System.Workflow.Runtime.DebugEngine.DebugEngineCallback : MulticastDelegate {
    public DebugEngineCallback(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class System.Workflow.Runtime.DebugEngine.Guids : object {
    internal static string CLSID_WDEProgramPublisher;
    public static string IID_IWDEProgramNode;
    public static string IID_IWDEProgramPublisher;
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.Runtime.DebugEngine.IExpressionEvaluationFrame {
    public abstract virtual void CreateEvaluationFrame(IInstanceTable instanceTable, DebugEngineCallback callback);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.Runtime.DebugEngine.IInstanceTable {
    public abstract virtual Activity GetActivity(string instanceId, string activityName);
}
internal class System.Workflow.Runtime.DebugEngine.InstanceData : object {
    public Activity RootActivity { get; public set; }
    public InstanceData(Activity rootActivity);
    public Activity get_RootActivity();
    public void set_RootActivity(Activity value);
    private sealed virtual override object System.ICloneable.Clone();
}
internal class System.Workflow.Runtime.DebugEngine.InstanceMap : Dictionary`2<Guid, InstanceData> {
    private sealed virtual override object System.ICloneable.Clone();
}
internal class System.Workflow.Runtime.DebugEngine.InstanceTable : BreakSafeBase`1<InstanceMap> {
    public InstanceTable(int controllerManagedThreadId);
    public void AddInstance(Guid instanceId, Activity rootActivity);
    public void RemoveInstance(Guid instanceId);
    public Activity GetRootActivity(Guid instanceId);
    public void UpdateRootActivity(Guid instanceId, Activity rootActivity);
    private sealed virtual override Activity System.Workflow.Runtime.DebugEngine.IInstanceTable.GetActivity(string instanceId, string activityQualifiedName);
}
[GuidAttribute("e5e93adb-a6fe-435e-8640-31ae310d812f")]
[InterfaceTypeAttribute("1")]
internal interface System.Workflow.Runtime.DebugEngine.IWDEProgramNode {
    public abstract virtual void Attach(Guid& programId, int attachTimeout, int detachPingInterval, String& hostName, String& uri, Int32& controllerThreadId, Boolean& isSynchronousAttach);
}
[GuidAttribute("2BE74789-F70B-42a3-80CA-E91743385844")]
[InterfaceTypeAttribute("1")]
internal interface System.Workflow.Runtime.DebugEngine.IWDEProgramPublisher {
    public abstract virtual void Publish(object ProgramNode);
    public abstract virtual void Unpublish(object ProgramNode);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.Runtime.DebugEngine.IWorkflowDebugger {
    public abstract virtual void InstanceCreated(Guid programId, Guid instanceId, Guid scheduleTypeId);
    public abstract virtual void InstanceDynamicallyUpdated(Guid programId, Guid instanceId, Guid scheduleTypeId);
    public abstract virtual void InstanceCompleted(Guid programId, Guid instanceId);
    public abstract virtual void BeforeActivityStatusChanged(Guid programId, Guid scheduleTypeId, Guid instanceId, string activityQualifiedName, string hierarchicalActivityId, ActivityExecutionStatus status, int stateReaderId);
    public abstract virtual void ActivityStatusChanged(Guid programId, Guid scheduleTypeId, Guid instanceId, string activityQualifiedName, string hierarchicalActivityId, ActivityExecutionStatus status, int stateReaderId);
    public abstract virtual void SetInitialActivityStatus(Guid programId, Guid scheduleTypeId, Guid instanceId, string activityQualifiedName, string hierarchicalActivityId, ActivityExecutionStatus status, int stateReaderId);
    public abstract virtual void ScheduleTypeLoaded(Guid programId, Guid scheduleTypeId, string assemblyFullName, string fileName, string md5Digest, bool isDynamic, string scheduleNamespace, string scheduleName, string workflowMarkup);
    public abstract virtual void UpdateHandlerMethodsForActivity(Guid programId, Guid scheduleTypeId, string activityQualifiedName, List`1<ActivityHandlerDescriptor> handlerMethods);
    public abstract virtual void AssemblyLoaded(Guid programId, string assemblyPath, bool fromGlobalAssemblyCache);
    public abstract virtual void HandlerInvoked(Guid programId, Guid instanceId, int threadId, string activityQualifiedName);
    public abstract virtual void BeforeHandlerInvoked(Guid programId, Guid scheduleTypeId, string activityQualifiedName, ActivityHandlerDescriptor handlerMethod);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.Runtime.DebugEngine.IWorkflowDebuggerService {
    public abstract virtual void NotifyHandlerInvoking(Delegate delegateHandler);
    public abstract virtual void NotifyHandlerInvoked();
}
internal static class System.Workflow.Runtime.DebugEngine.NativeMethods : object {
    public static int STANDARD_RIGHTS_REQUIRED;
    public static int TOKEN_ASSIGN_PRIMARY;
    public static int TOKEN_DUPLICATE;
    public static int TOKEN_IMPERSONATE;
    public static int TOKEN_QUERY;
    public static int TOKEN_QUERY_SOURCE;
    public static int TOKEN_ADJUST_PRIVILEGES;
    public static int TOKEN_ADJUST_GROUPS;
    public static int TOKEN_ADJUST_DEFAULT;
    public static int TOKEN_ADJUST_SESSIONID;
    public static int TOKEN_ALL_ACCESS;
    public static int GetCurrentThreadId();
    public static IntPtr GetCurrentProcess();
    public static bool RevertToSelf();
    public static bool OpenProcessToken(IntPtr ProcessHandle, UInt32 DesiredAccess, IntPtr& TokenHandle);
    public static bool GetKernelObjectSecurity(IntPtr Handle, SECURITY_INFORMATION RequestedInformation, IntPtr pSecurityDescriptor, UInt32 nLength, UInt32& lpnLengthNeeded);
    public static bool SetKernelObjectSecurity(IntPtr Handle, SECURITY_INFORMATION SecurityInformation, IntPtr SecurityDescriptor);
    public static bool CloseHandle(IntPtr hObject);
}
internal class System.Workflow.Runtime.DebugEngine.ProgramNode : object {
    public ProgramNode(DebugController controller);
    private sealed virtual override void System.Workflow.Runtime.DebugEngine.IWDEProgramNode.Attach(Guid& programId, int attachTimeout, int detachPingInterval, String& hostName, String& uri, Int32& controllerThreadId, Boolean& isSynchronousAttach);
}
internal class System.Workflow.Runtime.DebugEngine.ProgramPublisher : object {
    public bool Publish(DebugController controller);
    public void Unpublish();
}
internal static class System.Workflow.Runtime.DebugEngine.RegistryKeys : object {
    internal static string ProductRootRegKey;
    internal static string DebuggerSubKey;
    private static RegistryKeys();
}
[GuidAttribute("B6C0E598-314D-4b63-8C5C-4014F2A1B737")]
internal class System.Workflow.Runtime.DebugEngine.WDEProgramPublisher : object {
}
internal class System.Workflow.Runtime.DebugEngine.WorkflowDebuggerService : object {
    internal WorkflowDebuggerService(IWorkflowCoreRuntime coreRuntime);
    private sealed virtual override void System.Workflow.Runtime.DebugEngine.IWorkflowDebuggerService.NotifyHandlerInvoking(Delegate delegateHandler);
    private sealed virtual override void System.Workflow.Runtime.DebugEngine.IWorkflowDebuggerService.NotifyHandlerInvoked();
}
[AttributeUsageAttribute("4")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingAttribute : Attribute {
    public WorkflowDebuggerSteppingOption SteppingOption { get; }
    public WorkflowDebuggerSteppingAttribute(WorkflowDebuggerSteppingOption steppingOption);
    public WorkflowDebuggerSteppingOption get_SteppingOption();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingOption : Enum {
    public int value__;
    public static WorkflowDebuggerSteppingOption Sequential;
    public static WorkflowDebuggerSteppingOption Concurrent;
}
internal class System.Workflow.Runtime.DebuggerThreadMarker : AmbientEnvironment {
    internal static bool IsInDebuggerThread();
}
internal class System.Workflow.Runtime.EventQueueState : object {
    internal IComparable queueName;
    internal Queue Messages { get; }
    internal List`1<ActivityExecutorDelegateInfo`1<QueueEventArgs>> AsynchronousListeners { get; }
    internal List`1<ActivityExecutorDelegateInfo`1<QueueEventArgs>> SynchronousListeners { get; }
    internal bool Enabled { get; internal set; }
    internal bool Transactional { get; internal set; }
    internal bool Dirty { get; internal set; }
    internal Queue get_Messages();
    internal List`1<ActivityExecutorDelegateInfo`1<QueueEventArgs>> get_AsynchronousListeners();
    internal List`1<ActivityExecutorDelegateInfo`1<QueueEventArgs>> get_SynchronousListeners();
    internal bool get_Enabled();
    internal void set_Enabled(bool value);
    internal bool get_Transactional();
    internal void set_Transactional(bool value);
    internal bool get_Dirty();
    internal void set_Dirty(bool value);
    internal void CopyFrom(EventQueueState copyFromState);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Workflow.Runtime.ExecutionStringManager : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AsyncCallbackThrewException { get; }
    internal static string AttemptToBindUnknownProperties { get; }
    internal static string CannotAbortBeforeStart { get; }
    internal static string CannotCauseEventInEvent { get; }
    internal static string CannotCreateRootActivity { get; }
    internal static string CannotResetIsPrivate { get; }
    internal static string CannotStartInstanceTwice { get; }
    internal static string CannotSuspendBeforeStart { get; }
    internal static string CantAddContainerToItself { get; }
    internal static string CantAddServiceTwice { get; }
    internal static string CantBeEmptyGuid { get; }
    internal static string CantChangeImmutableContainer { get; }
    internal static string CantChangeNameAfterStart { get; }
    internal static string CantRemoveServiceNotContained { get; }
    internal static string CompletedScopeNotFound { get; }
    internal static string ConfigurationSectionNotFound { get; }
    internal static string CorrelationAlreadyInitialized { get; }
    internal static string DuplicateManualScheduleKey { get; }
    internal static string DynamicUpdateIsNotPending { get; }
    internal static string EndCalledTwice { get; }
    internal static string Error_InsideAtomicScope { get; }
    internal static string EventQueueException { get; }
    internal static string InstanceIDNotFound { get; }
    internal static string InstanceNotFound { get; }
    internal static string InstanceOperationNotValidinWorkflowThread { get; }
    internal static string InteropArgumentDirectionMismatch { get; }
    internal static string InteropBodyMustHavePublicDefaultConstructor { get; }
    internal static string InteropBodyNestedPersistOnCloseWithinTransactionScope { get; }
    internal static string InteropBodyNestedTransactionScope { get; }
    internal static string InteropBodyNestedViolation { get; }
    internal static string InteropBodyNotSet { get; }
    internal static string InteropBodyRootLevelViolation { get; }
    internal static string InteropCantFindTimerExtension { get; }
    internal static string InteropExceptionTraceMessage { get; }
    internal static string InteropInvalidPropertyDescriptor { get; }
    internal static string InteropNonSupportedBehavior { get; }
    internal static string InteropTimerIdCantBeEmpty { get; }
    internal static string InteropWorkflowRuntimeServiceNotSupported { get; }
    internal static string InteropWrongBody { get; }
    internal static string InvalidActivityEventReader { get; }
    internal static string InvalidActivityName { get; }
    internal static string InvalidActivityTrackingRecordParameter { get; }
    internal static string InvalidArgumentType { get; }
    internal static string InvalidAsyncResult { get; }
    internal static string InvalidAttemptToLoad { get; }
    internal static string InvalidAttemptToSuspend { get; }
    internal static string InvalidCacheItem { get; }
    internal static string InvalidCommandBadConnection { get; }
    internal static string InvalidConnection { get; }
    internal static string InvalidDbConnection { get; }
    internal static string InvalidDefinitionReader { get; }
    internal static string InvalidEnlist { get; }
    internal static string InvalidEventSourceName { get; }
    internal static string InvalidExecutionContext { get; }
    internal static string InvalidMember { get; }
    internal static string InvalidOpConnectionNotLocal { get; }
    internal static string InvalidOpConnectionReset { get; }
    internal static string InvalidOperationRequest { get; }
    internal static string InvalidOwnershipTimeoutValue { get; }
    internal static string InvalidProfileCheckValue { get; }
    internal static string InvalidProfileVersion { get; }
    internal static string InvalidRevertRequest { get; }
    internal static string InvalidSenderWorkflowExecutor { get; }
    internal static string InvalidSqlDataReader { get; }
    internal static string InvalidStatus { get; }
    internal static string InvalidTrackingService { get; }
    internal static string InvalidTransaction { get; }
    internal static string InvalidUserEventReader { get; }
    internal static string InvalidUserTrackingRecordParameter { get; }
    internal static string InvalidWaitForIdleOnSuspendedWorkflow { get; }
    internal static string InvalidWorkflowChangeArgs { get; }
    internal static string InvalidWorkflowChangeEventArgsParameter { get; }
    internal static string InvalidWorkflowChangeEventArgsReader { get; }
    internal static string InvalidWorkflowEvent { get; }
    internal static string InvalidWorkflowInstanceEventReader { get; }
    internal static string InvalidWorkflowInstanceInternalId { get; }
    internal static string InvalidWorkflowParameterValue { get; }
    internal static string InvalidWorkflowRuntimeConfiguration { get; }
    internal static string InvalidWorkflowTrackingRecordParameter { get; }
    internal static string InvalidXAML { get; }
    internal static string ItemAlreadyExist { get; }
    internal static string ListenerNotInCache { get; }
    internal static string ListenerNotInCacheDisposed { get; }
    internal static string LoadContextActivityFailed { get; }
    internal static string LoadingIntervalTooLarge { get; }
    internal static string MetaPropertyDoesNotExist { get; }
    internal static string MissingActivityEvents { get; }
    internal static string MissingActivityType { get; }
    internal static string MissingArgumentType { get; }
    internal static string MissingConnectionString { get; }
    internal static string MissingMemberName { get; }
    internal static string MissingParameters { get; }
    internal static string MissingParametersTrack { get; }
    internal static string MissingPersistenceService { get; }
    internal static string MissingPersistenceServiceWithPersistOnClose { get; }
    internal static string MissingProfileForService { get; }
    internal static string MissingProfileForVersion { get; }
    internal static string MissingTrackingService { get; }
    internal static string MissingWorkflowEvents { get; }
    internal static string MoreThanOneRuntime { get; }
    internal static string MoreThanOneService { get; }
    internal static string MustUseRuntimeThread { get; }
    internal static string NoChannels { get; }
    internal static string NoMatchingLocation { get; }
    internal static string NoMatchingLocations { get; }
    internal static string NoReaderLock { get; }
    internal static string NullAmbientTransaction { get; }
    internal static string NullChannel { get; }
    internal static string NullEngine { get; }
    internal static string NullParameters { get; }
    internal static string NullProfileForChannel { get; }
    internal static string NullTrackingBroker { get; }
    internal static string OwnerActivityMissing { get; }
    internal static string PerformanceCounterCategory { get; }
    internal static string PerformanceCounterSchedulesAbortedDescription { get; }
    internal static string PerformanceCounterSchedulesAbortedName { get; }
    internal static string PerformanceCounterSchedulesAbortedRateDescription { get; }
    internal static string PerformanceCounterSchedulesAbortedRateName { get; }
    internal static string PerformanceCounterSchedulesCompletedDescription { get; }
    internal static string PerformanceCounterSchedulesCompletedName { get; }
    internal static string PerformanceCounterSchedulesCompletedRateDescription { get; }
    internal static string PerformanceCounterSchedulesCompletedRateName { get; }
    internal static string PerformanceCounterSchedulesCreatedDescription { get; }
    internal static string PerformanceCounterSchedulesCreatedName { get; }
    internal static string PerformanceCounterSchedulesCreatedRateDescription { get; }
    internal static string PerformanceCounterSchedulesCreatedRateName { get; }
    internal static string PerformanceCounterSchedulesExecutingDescription { get; }
    internal static string PerformanceCounterSchedulesExecutingName { get; }
    internal static string PerformanceCounterSchedulesIdleRateDescription { get; }
    internal static string PerformanceCounterSchedulesIdleRateName { get; }
    internal static string PerformanceCounterSchedulesInMemoryDescription { get; }
    internal static string PerformanceCounterSchedulesInMemoryName { get; }
    internal static string PerformanceCounterSchedulesLoadedDescription { get; }
    internal static string PerformanceCounterSchedulesLoadedName { get; }
    internal static string PerformanceCounterSchedulesLoadedRateDescription { get; }
    internal static string PerformanceCounterSchedulesLoadedRateName { get; }
    internal static string PerformanceCounterSchedulesPersistedDescription { get; }
    internal static string PerformanceCounterSchedulesPersistedName { get; }
    internal static string PerformanceCounterSchedulesPersistedRateDescription { get; }
    internal static string PerformanceCounterSchedulesPersistedRateName { get; }
    internal static string PerformanceCounterSchedulesRunnableDescription { get; }
    internal static string PerformanceCounterSchedulesRunnableName { get; }
    internal static string PerformanceCounterSchedulesSuspendedDescription { get; }
    internal static string PerformanceCounterSchedulesSuspendedName { get; }
    internal static string PerformanceCounterSchedulesSuspendedRateDescription { get; }
    internal static string PerformanceCounterSchedulesSuspendedRateName { get; }
    internal static string PerformanceCounterSchedulesTerminatedDescription { get; }
    internal static string PerformanceCounterSchedulesTerminatedName { get; }
    internal static string PerformanceCounterSchedulesTerminatedRateDescription { get; }
    internal static string PerformanceCounterSchedulesTerminatedRateName { get; }
    internal static string PerformanceCounterSchedulesUnloadedDescription { get; }
    internal static string PerformanceCounterSchedulesUnloadedName { get; }
    internal static string PerformanceCounterSchedulesUnloadedRateDescription { get; }
    internal static string PerformanceCounterSchedulesUnloadedRateName { get; }
    internal static string PerformanceCounterWorkflowsWaitingDescription { get; }
    internal static string PerformanceCounterWorkflowsWaitingName { get; }
    internal static string PersistenceException { get; }
    internal static string ProfileCacheInsertFailure { get; }
    internal static string ProfileIsNotPrivate { get; }
    internal static string PromotionNotSupported { get; }
    internal static string QueueBusyException { get; }
    internal static string QueueNotEnabled { get; }
    internal static string QueueNotFound { get; }
    internal static string RTProfileActCacheDupKey { get; }
    internal static string RTProfileDynamicActCacheIsNull { get; }
    internal static string SemanticErrorInvalidNamedParameter { get; }
    internal static string ServiceAlreadyStarted { get; }
    internal static string ServiceNotAddedToRuntime { get; }
    internal static string ServiceNotStarted { get; }
    internal static string SharedConnectionStringSpecificationConflict { get; }
    internal static string SqlTrackingTypeNotFound { get; }
    internal static string TerminatedEventLogText { get; }
    internal static string TrackingDeserializationCloseElementNotFound { get; }
    internal static string TrackingDeserializationInvalidPosition { get; }
    internal static string TrackingDeserializationInvalidType { get; }
    internal static string TrackingDeserializationSchemaError { get; }
    internal static string TrackingProfileInvalidMember { get; }
    internal static string TrackingProfileManagerNotInitialized { get; }
    internal static string TrackingProfileUpdate { get; }
    internal static string TrackingRecord { get; }
    internal static string TrackingSerializationInvalidExtract { get; }
    internal static string TrackingSerializationNoTrackPoints { get; }
    internal static string TypeMustHavePublicDefaultConstructor { get; }
    internal static string TypeMustImplementRootActivity { get; }
    internal static string UnknownActivityActionType { get; }
    internal static string UnknownConfigurationParameter { get; }
    internal static string UnsupportedSqlProvider { get; }
    internal static string UpdatedProfile { get; }
    internal static string WorkBatchNotFound { get; }
    internal static string WorkflowChange { get; }
    internal static string WorkflowMarkupDeserializationError { get; }
    internal static string WorkflowNotValid { get; }
    internal static string WorkflowOwnershipException { get; }
    internal static string WorkflowRuntimeNotStarted { get; }
    internal static string WorkflowTypeMismatch { get; }
    internal static string WorkflowValidationFailure { get; }
    internal static string WorkflowWithIdAlreadyExists { get; }
    internal static string XomlWorkflowHasClassName { get; }
    internal static string XomlWorkflowHasCode { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AsyncCallbackThrewException();
    internal static string get_AttemptToBindUnknownProperties();
    internal static string get_CannotAbortBeforeStart();
    internal static string get_CannotCauseEventInEvent();
    internal static string get_CannotCreateRootActivity();
    internal static string get_CannotResetIsPrivate();
    internal static string get_CannotStartInstanceTwice();
    internal static string get_CannotSuspendBeforeStart();
    internal static string get_CantAddContainerToItself();
    internal static string get_CantAddServiceTwice();
    internal static string get_CantBeEmptyGuid();
    internal static string get_CantChangeImmutableContainer();
    internal static string get_CantChangeNameAfterStart();
    internal static string get_CantRemoveServiceNotContained();
    internal static string get_CompletedScopeNotFound();
    internal static string get_ConfigurationSectionNotFound();
    internal static string get_CorrelationAlreadyInitialized();
    internal static string get_DuplicateManualScheduleKey();
    internal static string get_DynamicUpdateIsNotPending();
    internal static string get_EndCalledTwice();
    internal static string get_Error_InsideAtomicScope();
    internal static string get_EventQueueException();
    internal static string get_InstanceIDNotFound();
    internal static string get_InstanceNotFound();
    internal static string get_InstanceOperationNotValidinWorkflowThread();
    internal static string get_InteropArgumentDirectionMismatch();
    internal static string get_InteropBodyMustHavePublicDefaultConstructor();
    internal static string get_InteropBodyNestedPersistOnCloseWithinTransactionScope();
    internal static string get_InteropBodyNestedTransactionScope();
    internal static string get_InteropBodyNestedViolation();
    internal static string get_InteropBodyNotSet();
    internal static string get_InteropBodyRootLevelViolation();
    internal static string get_InteropCantFindTimerExtension();
    internal static string get_InteropExceptionTraceMessage();
    internal static string get_InteropInvalidPropertyDescriptor();
    internal static string get_InteropNonSupportedBehavior();
    internal static string get_InteropTimerIdCantBeEmpty();
    internal static string get_InteropWorkflowRuntimeServiceNotSupported();
    internal static string get_InteropWrongBody();
    internal static string get_InvalidActivityEventReader();
    internal static string get_InvalidActivityName();
    internal static string get_InvalidActivityTrackingRecordParameter();
    internal static string get_InvalidArgumentType();
    internal static string get_InvalidAsyncResult();
    internal static string get_InvalidAttemptToLoad();
    internal static string get_InvalidAttemptToSuspend();
    internal static string get_InvalidCacheItem();
    internal static string get_InvalidCommandBadConnection();
    internal static string get_InvalidConnection();
    internal static string get_InvalidDbConnection();
    internal static string get_InvalidDefinitionReader();
    internal static string get_InvalidEnlist();
    internal static string get_InvalidEventSourceName();
    internal static string get_InvalidExecutionContext();
    internal static string get_InvalidMember();
    internal static string get_InvalidOpConnectionNotLocal();
    internal static string get_InvalidOpConnectionReset();
    internal static string get_InvalidOperationRequest();
    internal static string get_InvalidOwnershipTimeoutValue();
    internal static string get_InvalidProfileCheckValue();
    internal static string get_InvalidProfileVersion();
    internal static string get_InvalidRevertRequest();
    internal static string get_InvalidSenderWorkflowExecutor();
    internal static string get_InvalidSqlDataReader();
    internal static string get_InvalidStatus();
    internal static string get_InvalidTrackingService();
    internal static string get_InvalidTransaction();
    internal static string get_InvalidUserEventReader();
    internal static string get_InvalidUserTrackingRecordParameter();
    internal static string get_InvalidWaitForIdleOnSuspendedWorkflow();
    internal static string get_InvalidWorkflowChangeArgs();
    internal static string get_InvalidWorkflowChangeEventArgsParameter();
    internal static string get_InvalidWorkflowChangeEventArgsReader();
    internal static string get_InvalidWorkflowEvent();
    internal static string get_InvalidWorkflowInstanceEventReader();
    internal static string get_InvalidWorkflowInstanceInternalId();
    internal static string get_InvalidWorkflowParameterValue();
    internal static string get_InvalidWorkflowRuntimeConfiguration();
    internal static string get_InvalidWorkflowTrackingRecordParameter();
    internal static string get_InvalidXAML();
    internal static string get_ItemAlreadyExist();
    internal static string get_ListenerNotInCache();
    internal static string get_ListenerNotInCacheDisposed();
    internal static string get_LoadContextActivityFailed();
    internal static string get_LoadingIntervalTooLarge();
    internal static string get_MetaPropertyDoesNotExist();
    internal static string get_MissingActivityEvents();
    internal static string get_MissingActivityType();
    internal static string get_MissingArgumentType();
    internal static string get_MissingConnectionString();
    internal static string get_MissingMemberName();
    internal static string get_MissingParameters();
    internal static string get_MissingParametersTrack();
    internal static string get_MissingPersistenceService();
    internal static string get_MissingPersistenceServiceWithPersistOnClose();
    internal static string get_MissingProfileForService();
    internal static string get_MissingProfileForVersion();
    internal static string get_MissingTrackingService();
    internal static string get_MissingWorkflowEvents();
    internal static string get_MoreThanOneRuntime();
    internal static string get_MoreThanOneService();
    internal static string get_MustUseRuntimeThread();
    internal static string get_NoChannels();
    internal static string get_NoMatchingLocation();
    internal static string get_NoMatchingLocations();
    internal static string get_NoReaderLock();
    internal static string get_NullAmbientTransaction();
    internal static string get_NullChannel();
    internal static string get_NullEngine();
    internal static string get_NullParameters();
    internal static string get_NullProfileForChannel();
    internal static string get_NullTrackingBroker();
    internal static string get_OwnerActivityMissing();
    internal static string get_PerformanceCounterCategory();
    internal static string get_PerformanceCounterSchedulesAbortedDescription();
    internal static string get_PerformanceCounterSchedulesAbortedName();
    internal static string get_PerformanceCounterSchedulesAbortedRateDescription();
    internal static string get_PerformanceCounterSchedulesAbortedRateName();
    internal static string get_PerformanceCounterSchedulesCompletedDescription();
    internal static string get_PerformanceCounterSchedulesCompletedName();
    internal static string get_PerformanceCounterSchedulesCompletedRateDescription();
    internal static string get_PerformanceCounterSchedulesCompletedRateName();
    internal static string get_PerformanceCounterSchedulesCreatedDescription();
    internal static string get_PerformanceCounterSchedulesCreatedName();
    internal static string get_PerformanceCounterSchedulesCreatedRateDescription();
    internal static string get_PerformanceCounterSchedulesCreatedRateName();
    internal static string get_PerformanceCounterSchedulesExecutingDescription();
    internal static string get_PerformanceCounterSchedulesExecutingName();
    internal static string get_PerformanceCounterSchedulesIdleRateDescription();
    internal static string get_PerformanceCounterSchedulesIdleRateName();
    internal static string get_PerformanceCounterSchedulesInMemoryDescription();
    internal static string get_PerformanceCounterSchedulesInMemoryName();
    internal static string get_PerformanceCounterSchedulesLoadedDescription();
    internal static string get_PerformanceCounterSchedulesLoadedName();
    internal static string get_PerformanceCounterSchedulesLoadedRateDescription();
    internal static string get_PerformanceCounterSchedulesLoadedRateName();
    internal static string get_PerformanceCounterSchedulesPersistedDescription();
    internal static string get_PerformanceCounterSchedulesPersistedName();
    internal static string get_PerformanceCounterSchedulesPersistedRateDescription();
    internal static string get_PerformanceCounterSchedulesPersistedRateName();
    internal static string get_PerformanceCounterSchedulesRunnableDescription();
    internal static string get_PerformanceCounterSchedulesRunnableName();
    internal static string get_PerformanceCounterSchedulesSuspendedDescription();
    internal static string get_PerformanceCounterSchedulesSuspendedName();
    internal static string get_PerformanceCounterSchedulesSuspendedRateDescription();
    internal static string get_PerformanceCounterSchedulesSuspendedRateName();
    internal static string get_PerformanceCounterSchedulesTerminatedDescription();
    internal static string get_PerformanceCounterSchedulesTerminatedName();
    internal static string get_PerformanceCounterSchedulesTerminatedRateDescription();
    internal static string get_PerformanceCounterSchedulesTerminatedRateName();
    internal static string get_PerformanceCounterSchedulesUnloadedDescription();
    internal static string get_PerformanceCounterSchedulesUnloadedName();
    internal static string get_PerformanceCounterSchedulesUnloadedRateDescription();
    internal static string get_PerformanceCounterSchedulesUnloadedRateName();
    internal static string get_PerformanceCounterWorkflowsWaitingDescription();
    internal static string get_PerformanceCounterWorkflowsWaitingName();
    internal static string get_PersistenceException();
    internal static string get_ProfileCacheInsertFailure();
    internal static string get_ProfileIsNotPrivate();
    internal static string get_PromotionNotSupported();
    internal static string get_QueueBusyException();
    internal static string get_QueueNotEnabled();
    internal static string get_QueueNotFound();
    internal static string get_RTProfileActCacheDupKey();
    internal static string get_RTProfileDynamicActCacheIsNull();
    internal static string get_SemanticErrorInvalidNamedParameter();
    internal static string get_ServiceAlreadyStarted();
    internal static string get_ServiceNotAddedToRuntime();
    internal static string get_ServiceNotStarted();
    internal static string get_SharedConnectionStringSpecificationConflict();
    internal static string get_SqlTrackingTypeNotFound();
    internal static string get_TerminatedEventLogText();
    internal static string get_TrackingDeserializationCloseElementNotFound();
    internal static string get_TrackingDeserializationInvalidPosition();
    internal static string get_TrackingDeserializationInvalidType();
    internal static string get_TrackingDeserializationSchemaError();
    internal static string get_TrackingProfileInvalidMember();
    internal static string get_TrackingProfileManagerNotInitialized();
    internal static string get_TrackingProfileUpdate();
    internal static string get_TrackingRecord();
    internal static string get_TrackingSerializationInvalidExtract();
    internal static string get_TrackingSerializationNoTrackPoints();
    internal static string get_TypeMustHavePublicDefaultConstructor();
    internal static string get_TypeMustImplementRootActivity();
    internal static string get_UnknownActivityActionType();
    internal static string get_UnknownConfigurationParameter();
    internal static string get_UnsupportedSqlProvider();
    internal static string get_UpdatedProfile();
    internal static string get_WorkBatchNotFound();
    internal static string get_WorkflowChange();
    internal static string get_WorkflowMarkupDeserializationError();
    internal static string get_WorkflowNotValid();
    internal static string get_WorkflowOwnershipException();
    internal static string get_WorkflowRuntimeNotStarted();
    internal static string get_WorkflowTypeMismatch();
    internal static string get_WorkflowValidationFailure();
    internal static string get_WorkflowWithIdAlreadyExists();
    internal static string get_XomlWorkflowHasClassName();
    internal static string get_XomlWorkflowHasCode();
}
internal class System.Workflow.Runtime.ExecutorLocksHeldException : Exception {
    internal ManualResetEvent Handle { get; }
    public ExecutorLocksHeldException(ManualResetEvent handle);
    internal ManualResetEvent get_Handle();
}
[DefaultMemberAttribute("Item")]
internal class System.Workflow.Runtime.FanOutOnKeyDictionary`2 : object {
    public Dictionary`2<K, V> Item { get; }
    public FanOutOnKeyDictionary`2(int fanDegree);
    public Dictionary`2<K, V> get_Item(K key);
    public bool SafeTryGetValue(K key, V& value);
    public sealed virtual IEnumerator`1<Dictionary`2<K, V>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class System.Workflow.Runtime.HashHelper : object {
    internal static Guid HashServiceType(Type serviceType);
    internal static Guid HashServiceType(string serviceFullTypeName);
}
internal class System.Workflow.Runtime.Hosting.DbResourceAllocator : object {
    internal static string ConnectionStringToken;
    internal string ConnectionString { get; }
    internal DbResourceAllocator(WorkflowRuntime runtime, NameValueCollection parameters, string connectionString);
    internal string get_ConnectionString();
    internal void DetectSharedConnectionConflict(WorkflowCommitWorkBatchService transactionService);
    internal DbConnection OpenNewConnection();
    internal DbConnection OpenNewConnectionNoEnlist();
    internal DbConnection OpenNewConnection(bool disallowEnlist);
    internal DbConnection GetEnlistedConnection(WorkflowCommitWorkBatchService txSvc, Transaction transaction, Boolean& isNewConnection);
    internal static DbTransaction GetLocalTransaction(WorkflowCommitWorkBatchService txSvc, Transaction transaction);
    internal DbCommand NewCommand();
    internal static DbCommand NewCommand(DbConnection dbConnection);
    internal static DbCommand NewCommand(string commandText, DbConnection dbConnection, DbTransaction transaction);
    internal DbParameter NewDbParameter();
    internal DbParameter NewDbParameter(string parameterName, DbType type);
    internal DbParameter NewDbParameter(string parameterName, DbType type, ParameterDirection direction);
    internal DbParameter NewDbParameter(string parameterName, object value);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService : WorkflowCommitWorkBatchService {
    public bool EnableRetries { get; public set; }
    public DefaultWorkflowCommitWorkBatchService(NameValueCollection parameters);
    public bool get_EnableRetries();
    public void set_EnableRetries(bool value);
    protected internal virtual void Start();
    protected virtual void OnStopped();
    protected internal virtual void CommitWorkBatch(CommitWorkBatchCallback commitWorkBatchCallback);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Hosting.DefaultWorkflowLoaderService : WorkflowLoaderService {
    protected internal virtual Activity CreateInstance(Type workflowType);
    protected internal virtual Activity CreateInstance(XmlReader workflowDefinitionReader, XmlReader rulesReader);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService : WorkflowSchedulerService {
    public int MaxSimultaneousWorkflows { get; }
    public DefaultWorkflowSchedulerService(int maxSimultaneousWorkflows);
    public DefaultWorkflowSchedulerService(NameValueCollection parameters);
    private static DefaultWorkflowSchedulerService();
    public int get_MaxSimultaneousWorkflows();
    protected internal virtual void Schedule(WaitCallback callback, Guid workflowInstanceId);
    protected internal virtual void Schedule(WaitCallback callback, Guid workflowInstanceId, DateTime whenUtc, Guid timerId);
    protected internal virtual void Cancel(Guid timerId);
    protected virtual void OnStarted();
    protected internal virtual void Stop();
}
internal class System.Workflow.Runtime.Hosting.LocalTransaction : object {
    public DbConnection Connection { get; }
    public DbTransaction Transaction { get; }
    internal LocalTransaction(DbResourceAllocator dbHelper, ManualResetEvent handle);
    public DbConnection get_Connection();
    public DbTransaction get_Transaction();
    public sealed virtual void Initialize();
    public sealed virtual void SinglePhaseCommit(SinglePhaseEnlistment en);
    public sealed virtual void Rollback(SinglePhaseEnlistment en);
    public sealed virtual Byte[] Promote();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService : WorkflowSchedulerService {
    public ManualWorkflowSchedulerService(bool useActiveTimers);
    public ManualWorkflowSchedulerService(NameValueCollection parameters);
    private static ManualWorkflowSchedulerService();
    protected internal virtual void Schedule(WaitCallback callback, Guid workflowInstanceId);
    protected internal virtual void Schedule(WaitCallback callback, Guid workflowInstanceId, DateTime whenUtc, Guid timerId);
    protected internal virtual void Cancel(Guid timerId);
    public bool RunWorkflow(Guid workflowInstanceId);
    protected virtual void OnStarted();
    protected internal virtual void Stop();
}
internal class System.Workflow.Runtime.Hosting.PendingWorkItem : object {
    public ItemType Type;
    public Guid InstanceId;
    public Guid StateId;
    public Byte[] SerializedActivity;
    public int Status;
    public int Blocked;
    public string Info;
    public bool Unlocked;
    public SqlDateTime NextTimer;
}
internal class System.Workflow.Runtime.Hosting.PersistenceDBAccessor : object {
    internal PersistenceDBAccessor(DbResourceAllocator dbResourceAllocator, Transaction transaction, WorkflowCommitWorkBatchService transactionService);
    internal PersistenceDBAccessor(DbResourceAllocator dbResourceAllocator, bool enableRetries);
    public sealed virtual void Dispose();
    public void InsertInstanceState(PendingWorkItem item, Guid ownerId, DateTime ownedUntil);
    public void InsertCompletedScope(Guid instanceId, Guid scopeId, Byte[] state);
    public void ActivationComplete(Guid instanceId, Guid ownerId);
    public IList`1<Guid> RetrieveNonblockingInstanceStateIds(Guid ownerId, DateTime ownedUntil);
    public bool TryRetrieveANonblockingInstanceStateId(Guid ownerId, DateTime ownedUntil, Guid& instanceId);
    public IList`1<Guid> RetrieveExpiredTimerIds(Guid ownerId, DateTime ownedUntil);
    public Byte[] RetrieveInstanceState(Guid instanceStateId, Guid ownerId, DateTime timeout);
    public Byte[] RetrieveCompletedScope(Guid scopeId);
    internal IEnumerable`1<SqlPersistenceWorkflowInstanceDescription> RetrieveAllInstanceDescriptions();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Hosting.PersistenceException : SystemException {
    public PersistenceException(string message);
    public PersistenceException(string message, Exception innerException);
    protected PersistenceException(SerializationInfo info, StreamingContext context);
}
internal enum System.Workflow.Runtime.Hosting.Provider : Enum {
    public int value__;
    public static Provider SqlClient;
    public static Provider OleDB;
}
internal class System.Workflow.Runtime.Hosting.SharedConnectionInfo : object {
    internal DbConnection DBConnection { get; }
    internal DbTransaction DBTransaction { get; }
    internal SharedConnectionInfo(DbResourceAllocator dbResourceAllocator, Transaction transaction, bool wantPromotable, ManualResetEvent handle);
    internal DbConnection get_DBConnection();
    internal DbTransaction get_DBTransaction();
    public sealed virtual void Dispose();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService : WorkflowCommitWorkBatchService {
    internal string ConnectionString { get; }
    public bool EnableRetries { get; public set; }
    public SharedConnectionWorkflowCommitWorkBatchService(string connectionString);
    public SharedConnectionWorkflowCommitWorkBatchService(NameValueCollection parameters);
    internal string get_ConnectionString();
    public bool get_EnableRetries();
    public void set_EnableRetries(bool value);
    protected internal virtual void Start();
    protected virtual void OnStopped();
    protected internal virtual void CommitWorkBatch(CommitWorkBatchCallback commitWorkBatchCallback);
    internal SharedConnectionInfo GetConnectionInfo(Transaction transaction);
}
internal class System.Workflow.Runtime.Hosting.SmartTimer : object {
    public SmartTimer(TimerCallback callback, object state, TimeSpan due, TimeSpan period);
    public void Update(DateTime newNext);
    public sealed virtual void Dispose();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Hosting.SqlPersistenceWorkflowInstanceDescription : object {
    public Guid WorkflowInstanceId { get; }
    public WorkflowStatus Status { get; }
    public bool IsBlocked { get; }
    public string SuspendOrTerminateDescription { get; }
    public SqlDateTime NextTimerExpiration { get; }
    internal SqlPersistenceWorkflowInstanceDescription(Guid workflowInstanceId, WorkflowStatus status, bool isBlocked, string suspendOrTerminateDescription, SqlDateTime nextTimerExpiration);
    public Guid get_WorkflowInstanceId();
    public WorkflowStatus get_Status();
    public bool get_IsBlocked();
    public string get_SuspendOrTerminateDescription();
    public SqlDateTime get_NextTimerExpiration();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService : WorkflowPersistenceService {
    public Guid ServiceInstanceId { get; }
    public TimeSpan LoadingInterval { get; }
    public bool EnableRetries { get; public set; }
    public SqlWorkflowPersistenceService(string connectionString);
    public SqlWorkflowPersistenceService(NameValueCollection parameters);
    public SqlWorkflowPersistenceService(string connectionString, bool unloadOnIdle, TimeSpan instanceOwnershipDuration, TimeSpan loadingInterval);
    private static SqlWorkflowPersistenceService();
    public Guid get_ServiceInstanceId();
    public TimeSpan get_LoadingInterval();
    public bool get_EnableRetries();
    public void set_EnableRetries(bool value);
    protected internal virtual void Start();
    protected virtual void OnStarted();
    protected internal virtual void Stop();
    protected internal virtual void SaveWorkflowInstanceState(Activity rootActivity, bool unlock);
    protected internal virtual void UnlockWorkflowInstanceState(Activity rootActivity);
    protected internal virtual Activity LoadWorkflowInstanceState(Guid id);
    public IList`1<Guid> LoadExpiredTimerWorkflowIds();
    protected internal virtual void SaveCompletedContextActivity(Activity completedScopeActivity);
    protected internal virtual Activity LoadCompletedContextActivity(Guid id, Activity outerActivity);
    protected internal virtual bool UnloadOnIdle(Activity activity);
    public IEnumerable`1<SqlPersistenceWorkflowInstanceDescription> GetAllWorkflows();
    private sealed virtual override bool System.Workflow.Runtime.IPendingWork.MustCommit(ICollection items);
    private sealed virtual override void System.Workflow.Runtime.IPendingWork.Commit(Transaction transaction, ICollection items);
    private sealed virtual override void System.Workflow.Runtime.IPendingWork.Complete(bool succeeded, ICollection items);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService : WorkflowRuntimeService {
    protected internal virtual void CommitWorkBatch(CommitWorkBatchCallback commitWorkBatchCallback);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.Runtime.Hosting.WorkflowLoaderService : WorkflowRuntimeService {
    protected internal abstract virtual Activity CreateInstance(Type workflowType);
    protected internal abstract virtual Activity CreateInstance(XmlReader workflowDefinitionReader, XmlReader rulesReader);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.Runtime.Hosting.WorkflowPersistenceService : WorkflowRuntimeService {
    protected internal abstract virtual void SaveWorkflowInstanceState(Activity rootActivity, bool unlock);
    protected internal abstract virtual void UnlockWorkflowInstanceState(Activity rootActivity);
    protected internal abstract virtual Activity LoadWorkflowInstanceState(Guid instanceId);
    protected internal abstract virtual void SaveCompletedContextActivity(Activity activity);
    protected internal abstract virtual Activity LoadCompletedContextActivity(Guid scopeId, Activity outerActivity);
    protected internal abstract virtual bool UnloadOnIdle(Activity activity);
    protected static Byte[] GetDefaultSerializedForm(Activity activity);
    protected static Activity RestoreFromDefaultSerializedForm(Byte[] activityBytes, Activity outerActivity);
    protected internal static bool GetIsBlocked(Activity rootActivity);
    protected internal static string GetSuspendOrTerminateInfo(Activity rootActivity);
    protected internal static WorkflowStatus GetWorkflowStatus(Activity rootActivity);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.Runtime.Hosting.WorkflowRuntimeService : object {
    protected WorkflowRuntime Runtime { get; }
    protected WorkflowRuntimeServiceState State { get; }
    protected WorkflowRuntime get_Runtime();
    internal void SetRuntime(WorkflowRuntime runtime);
    protected void RaiseServicesExceptionNotHandledEvent(Exception exception, Guid instanceId);
    internal void RaiseExceptionNotHandledEvent(Exception exception, Guid instanceId);
    protected WorkflowRuntimeServiceState get_State();
    protected internal virtual void Start();
    protected internal virtual void Stop();
    protected virtual void OnStarted();
    protected virtual void OnStopped();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState : Enum {
    public int value__;
    public static WorkflowRuntimeServiceState Stopped;
    public static WorkflowRuntimeServiceState Starting;
    public static WorkflowRuntimeServiceState Started;
    public static WorkflowRuntimeServiceState Stopping;
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.Runtime.Hosting.WorkflowSchedulerService : WorkflowRuntimeService {
    protected internal abstract virtual void Schedule(WaitCallback callback, Guid workflowInstanceId);
    protected internal abstract virtual void Schedule(WaitCallback callback, Guid workflowInstanceId, DateTime whenUtc, Guid timerId);
    protected internal abstract virtual void Cancel(Guid timerId);
}
internal class System.Workflow.Runtime.Hosting.WorkflowTimerService : WorkflowRuntimeService {
    public sealed virtual void ScheduleTimer(WaitCallback callback, Guid workflowInstanceId, DateTime whenUtc, Guid timerId);
    public sealed virtual void CancelTimer(Guid timerId);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Hosting.WorkflowWebHostingModule : object {
    private sealed virtual override void System.Web.IHttpModule.Init(HttpApplication application);
    private sealed virtual override void System.Web.IHttpModule.Dispose();
}
internal class System.Workflow.Runtime.InstanceLock : object {
    internal int Priority { get; }
    internal LockPriorityOperator Operator { get; }
    internal Guid InstanceId { get; }
    internal InstanceLock(Guid id, string name, int priority, LockPriorityOperator lockOperator);
    private static InstanceLock();
    [ConditionalAttribute("DEBUG")]
internal static void AssertNoLocksHeld();
    [ConditionalAttribute("DEBUG")]
internal static void AssertIsLocked(InstanceLock theLock);
    internal int get_Priority();
    internal LockPriorityOperator get_Operator();
    internal Guid get_InstanceId();
    internal InstanceLockGuard Enter();
    internal bool TryEnter();
    internal void Exit();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.Runtime.IPendingWork {
    public abstract virtual bool MustCommit(ICollection items);
    public abstract virtual void Commit(Transaction transaction, ICollection items);
    public abstract virtual void Complete(bool succeeded, ICollection items);
}
internal interface System.Workflow.Runtime.ISupportInterop {
    public WorkBatchCollection BatchCollection { get; }
    public abstract virtual WorkBatchCollection get_BatchCollection();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.Runtime.IWorkBatch {
    public abstract virtual void Add(IPendingWork work, object workItem);
}
internal class System.Workflow.Runtime.KeyedPriorityQueue`3 : object {
    public int Count { get; }
    public ReadOnlyCollection`1<V> Values { get; }
    public ReadOnlyCollection`1<K> Keys { get; }
    [CompilerGeneratedAttribute]
public void add_FirstElementChanged(EventHandler`1<KeyedPriorityQueueHeadChangedEventArgs`1<V>> value);
    [CompilerGeneratedAttribute]
public void remove_FirstElementChanged(EventHandler`1<KeyedPriorityQueueHeadChangedEventArgs`1<V>> value);
    public void Enqueue(K key, V value, P priority);
    public V Dequeue();
    public V Remove(K key);
    public V Peek();
    public int get_Count();
    public V FindByPriority(P priority, Predicate`1<V> match);
    public ReadOnlyCollection`1<V> get_Values();
    public ReadOnlyCollection`1<K> get_Keys();
    public void Clear();
    protected virtual bool IsHigher(P p1, P p2);
}
internal class System.Workflow.Runtime.KeyedPriorityQueueHeadChangedEventArgs`1 : EventArgs {
    public T OldFirstElement { get; }
    public T NewFirstElement { get; }
    public KeyedPriorityQueueHeadChangedEventArgs`1(T oldFirstElement, T newFirstElement);
    public T get_OldFirstElement();
    public T get_NewFirstElement();
}
internal static class System.Workflow.Runtime.LockFactory : object {
    internal static InstanceLock CreateWorkflowExecutorLock(Guid id);
    internal static InstanceLock CreateWorkflowSchedulerLock(Guid id);
    internal static InstanceLock CreateWorkflowMessageDeliveryLock(Guid id);
}
internal enum System.Workflow.Runtime.LockPriorityOperator : Enum {
    public int value__;
    public static LockPriorityOperator GreaterThan;
    public static LockPriorityOperator GreaterThanOrReentrant;
}
internal static class System.Workflow.Runtime.MD5HashHelper : object {
    public static Byte[] ComputeHash(Byte[] buffer);
}
internal static class System.Workflow.Runtime.MD5PInvokeHelper : object {
    internal static int StatusSuccess;
    internal static string BCryptHashLength;
    internal static SafeBCryptAlgorithmHandle MD5AlgorithmProvider { get; }
    private static MD5PInvokeHelper();
    internal static SafeBCryptAlgorithmHandle get_MD5AlgorithmProvider();
    internal static int BCryptOpenAlgorithmProvider(SafeBCryptAlgorithmHandle& algorithmHandle, string algIdString, string implementationString, BCryptOpenAlgorithmProviderFlags flags);
    internal static int BCryptGetProperty(SafeBCryptHandle handleObject, string propertyString, Void* outputBuffer, int outputByteLength, Int32& resultSize, int flags);
    internal static int BCryptCreateHash(SafeBCryptAlgorithmHandle algorithmHandle, SafeBCryptHashHandle& hashHandle, IntPtr hashObject, int hashObjectByteLength, Byte[] secretBuffer, int secretByteLength, BCryptCreateHashFlags flags);
    internal static int BCryptHashData(SafeBCryptHashHandle hashHandle, Byte* inputBuffer, int inputByteLength, int flags);
    internal static int BCryptFinishHash(SafeBCryptHashHandle hashHandle, Byte[] outputBuffer, int outputByteLength, int flags);
    internal static int BCryptDestroyHash(IntPtr hashHandle);
    internal static int BCryptCloseAlgorithmProvider(IntPtr algorithmHandle, int flags);
    internal static void DisposeMD5Handles();
    internal static Byte[] CalculateHash(Byte[] inputBuffer);
}
internal enum System.Workflow.Runtime.PerformanceCounterAction : Enum {
    public int value__;
    public static PerformanceCounterAction Aborted;
    public static PerformanceCounterAction Completion;
    public static PerformanceCounterAction Creation;
    public static PerformanceCounterAction Unloading;
    public static PerformanceCounterAction Executing;
    public static PerformanceCounterAction Idle;
    public static PerformanceCounterAction NotExecuting;
    public static PerformanceCounterAction Persisted;
    public static PerformanceCounterAction Loading;
    public static PerformanceCounterAction Runnable;
    public static PerformanceCounterAction Suspension;
    public static PerformanceCounterAction Resumption;
    public static PerformanceCounterAction Termination;
    public static PerformanceCounterAction Starting;
}
internal class System.Workflow.Runtime.PerformanceCounterActionMapping : ValueType {
    internal PerformanceCounterOperation Operation;
    internal PerformanceCounterAction Action;
    internal PerformanceCounterActionMapping(PerformanceCounterAction action, PerformanceCounterOperation operation);
}
internal class System.Workflow.Runtime.PerformanceCounterData : ValueType {
    internal string Name;
    internal string Description;
    internal PerformanceCounterType CounterType;
    internal PerformanceCounterActionMapping[] Mappings;
    internal PerformanceCounterData(string name, string description, PerformanceCounterType counterType, PerformanceCounterActionMapping[] mappings);
}
internal class System.Workflow.Runtime.PerformanceCounterManager : object {
    private static PerformanceCounterManager();
    internal void Initialize(WorkflowRuntime runtime);
    internal void Uninitialize(WorkflowRuntime runtime);
    internal void SetInstanceName(string instanceName);
    internal List`1<PerformanceCounter> CreateCounters(string name);
}
internal enum System.Workflow.Runtime.PerformanceCounterOperation : Enum {
    public int value__;
    public static PerformanceCounterOperation Increment;
    public static PerformanceCounterOperation Decrement;
}
internal class System.Workflow.Runtime.PerformanceCounterStatement : ValueType {
    internal List`1<PerformanceCounter> Counters;
    internal PerformanceCounterOperation Operation;
    internal PerformanceCounterStatement(List`1<PerformanceCounter> counters, PerformanceCounterOperation operation);
}
internal class System.Workflow.Runtime.QueueException : InvalidOperationException {
    public MessageQueueErrorCode ErrorCode { get; }
    public QueueException(string message, MessageQueueErrorCode errorCode);
    protected QueueException(SerializationInfo info, StreamingContext context);
    public MessageQueueErrorCode get_ErrorCode();
}
internal class System.Workflow.Runtime.RTTrackingProfile : object {
    internal bool IsPrivate { get; internal set; }
    internal Type WorkflowType { get; }
    internal Version Version { get; }
    internal RTTrackingProfile(TrackingProfile profile, Activity root, Type serviceType);
    internal bool get_IsPrivate();
    internal void set_IsPrivate(bool value);
    internal Type get_WorkflowType();
    internal Version get_Version();
    internal bool TryTrackActivityEvent(Activity activity, ActivityExecutionStatus status, IServiceProvider provider, ActivityTrackingRecord record);
    internal bool TryTrackUserEvent(Activity activity, string keyName, object argument, WorkflowExecutor exec, UserTrackingRecord record);
    internal bool TryTrackInstanceEvent(TrackingWorkflowEvent status, WorkflowTrackingRecord record);
    internal bool ActivitySubscriptionNeeded(Activity activity);
    public void WorkflowChangeBegin(IList`1<WorkflowChangeAction> changeActions);
    public void WorkflowChangeCommit();
    public void WorkflowChangeRollback();
    public IList`1<Activity> GetAllEnabledActivities(CompositeActivity compositeActivity);
    private sealed virtual override object System.ICloneable.Clone();
    internal RTTrackingProfile Clone();
}
internal class System.Workflow.Runtime.RuntimeEnvironment : object {
    internal static WorkflowRuntime CurrentRuntime { get; }
    public RuntimeEnvironment(WorkflowRuntime runtime);
    internal static WorkflowRuntime get_CurrentRuntime();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class System.Workflow.Runtime.Scheduler : object {
    internal static DependencyProperty HighPriorityEntriesQueueProperty;
    internal static DependencyProperty NormalPriorityEntriesQueueProperty;
    protected WorkflowExecutor RootWorkflowExecutor { get; }
    public bool IsStalledNow { get; }
    public bool CanRun { get; public set; }
    internal bool AbortOrTerminateRequested { get; internal set; }
    public Scheduler(WorkflowExecutor rootExec, bool canRun);
    private static Scheduler();
    public virtual string ToString();
    protected WorkflowExecutor get_RootWorkflowExecutor();
    public bool get_IsStalledNow();
    public bool get_CanRun();
    public void set_CanRun(bool value);
    internal bool get_AbortOrTerminateRequested();
    internal void set_AbortOrTerminateRequested(bool value);
    public void Run();
    public void Resume();
    public void ResumeIfRunnable();
    public void ScheduleItem(SchedulableItem s, bool isInAtomicTransaction, bool transacted);
    public void PostPersist();
    public void Rollback();
}
internal class System.Workflow.Runtime.SchedulerLockGuard : object {
    internal SchedulerLockGuard(InstanceLock il, WorkflowExecutor w);
    internal static void Exit(InstanceLock il, WorkflowExecutor w);
    public sealed virtual void Dispose();
}
internal class System.Workflow.Runtime.SchedulerLockGuardInfo : object {
    internal object Sender { get; }
    internal WorkflowEventInternal EventType { get; }
    internal object EventInfo { get; }
    internal SchedulerLockGuardInfo(object _sender, WorkflowEventInternal _eventType);
    internal SchedulerLockGuardInfo(object _sender, WorkflowEventInternal _eventType, object _eventInfo);
    internal object get_Sender();
    internal WorkflowEventInternal get_EventType();
    internal object get_EventInfo();
}
internal class System.Workflow.Runtime.ScheduleWork : object {
    [ThreadStaticAttribute]
protected static ScheduleInfo scheduleInfo;
    protected ScheduleInfo oldValue;
    unknown static bool NeedsService {public set; }
    unknown static WorkflowExecutor Executor {public set; }
    public ScheduleWork(WorkflowExecutor executor);
    public ScheduleWork(WorkflowExecutor executor, bool suppress);
    public static void set_NeedsService(bool value);
    public static void set_Executor(WorkflowExecutor value);
    public virtual void Dispose();
}
internal class System.Workflow.Runtime.ServiceEnvironment : AmbientEnvironment {
    internal static Guid debuggerThreadGuid;
    internal static IWorkBatch WorkBatch { get; }
    internal static Guid WorkflowInstanceId { get; }
    internal static WorkflowQueuingService QueuingService { get; }
    internal ServiceEnvironment(Activity currentActivity);
    private static ServiceEnvironment();
    internal static IWorkBatch get_WorkBatch();
    internal static Guid get_WorkflowInstanceId();
    internal static WorkflowQueuingService get_QueuingService();
    internal static bool IsInServiceThread(Guid instanceId);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs : EventArgs {
    public Exception Exception { get; }
    public Guid WorkflowInstanceId { get; }
    internal ServicesExceptionNotHandledEventArgs(Exception exception, Guid instanceId);
    public Exception get_Exception();
    public Guid get_WorkflowInstanceId();
}
[DefaultMemberAttribute("Item")]
internal class System.Workflow.Runtime.Set`1 : object {
    public int Count { get; }
    public T Item { get; }
    public Set`1(int capacity);
    public int get_Count();
    public void Add(T item);
    public bool TryAdd(T item);
    public bool Contains(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public bool TryGetValue(T item, T& value);
    public T get_Item(int index);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.TimerEventSubscription : object {
    public DateTime ExpiresAt { get; }
    public Guid SubscriptionId { get; }
    public IComparable QueueName { get; protected set; }
    public Guid WorkflowInstanceId { get; }
    public TimerEventSubscription(Guid workflowInstanceId, DateTime expiresAt);
    public TimerEventSubscription(Guid timerId, Guid workflowInstanceId, DateTime expiresAt);
    public virtual DateTime get_ExpiresAt();
    public virtual Guid get_SubscriptionId();
    public virtual IComparable get_QueueName();
    protected virtual void set_QueueName(IComparable value);
    public virtual Guid get_WorkflowInstanceId();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.TimerEventSubscriptionCollection : object {
    public static DependencyProperty TimerCollectionProperty;
    internal IWorkflowCoreRuntime Executor { get; internal set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    internal TimerEventSubscriptionCollection(IWorkflowCoreRuntime executor, Guid instanceId);
    private static TimerEventSubscriptionCollection();
    internal void Enqueue(TimerEventSubscription timerEventSubscription);
    internal IWorkflowCoreRuntime get_Executor();
    internal void set_Executor(IWorkflowCoreRuntime value);
    public TimerEventSubscription Peek();
    internal TimerEventSubscription Dequeue();
    public void Remove(Guid timerSubscriptionId);
    internal void SuspendDelivery();
    internal void ResumeDelivery();
    public void Add(TimerEventSubscription item);
    public void Remove(TimerEventSubscription item);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.ActivityDataTrackingExtract : TrackingExtract {
    public string Member { get; public set; }
    public TrackingAnnotationCollection Annotations { get; }
    public ActivityDataTrackingExtract(string member);
    public virtual string get_Member();
    public virtual void set_Member(string value);
    public virtual TrackingAnnotationCollection get_Annotations();
    internal virtual void GetData(Activity activity, IServiceProvider provider, IList`1<TrackingDataItem> items);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.ActivityTrackingCondition : TrackingCondition {
    public string Value { get; public set; }
    public string Member { get; public set; }
    public ComparisonOperator Operator { get; public set; }
    public ActivityTrackingCondition(string member, string value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual string get_Member();
    public virtual void set_Member(string value);
    public virtual ComparisonOperator get_Operator();
    public virtual void set_Operator(ComparisonOperator value);
    internal virtual bool Match(object obj);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.ActivityTrackingLocation : object {
    public Type ActivityType { get; public set; }
    public string ActivityTypeName { get; public set; }
    public bool MatchDerivedTypes { get; public set; }
    public IList`1<ActivityExecutionStatus> ExecutionStatusEvents { get; }
    public TrackingConditionCollection Conditions { get; }
    public ActivityTrackingLocation(string activityTypeName);
    public ActivityTrackingLocation(Type activityType);
    public ActivityTrackingLocation(string activityTypeName, IEnumerable`1<ActivityExecutionStatus> executionStatusEvents);
    public ActivityTrackingLocation(Type activityType, IEnumerable`1<ActivityExecutionStatus> executionStatusEvents);
    public ActivityTrackingLocation(string activityTypeName, bool matchDerivedTypes, IEnumerable`1<ActivityExecutionStatus> executionStatusEvents);
    public ActivityTrackingLocation(Type activityType, bool matchDerivedTypes, IEnumerable`1<ActivityExecutionStatus> executionStatusEvents);
    public Type get_ActivityType();
    public void set_ActivityType(Type value);
    public string get_ActivityTypeName();
    public void set_ActivityTypeName(string value);
    public bool get_MatchDerivedTypes();
    public void set_MatchDerivedTypes(bool value);
    public IList`1<ActivityExecutionStatus> get_ExecutionStatusEvents();
    public TrackingConditionCollection get_Conditions();
    internal bool Match(Activity activity, bool typeMatchOnly);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.ActivityTrackingLocationCollection : List`1<ActivityTrackingLocation> {
    public ActivityTrackingLocationCollection(IEnumerable`1<ActivityTrackingLocation> locations);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.ActivityTrackingRecord : TrackingRecord {
    public string QualifiedName { get; public set; }
    public Guid ContextGuid { get; public set; }
    public Guid ParentContextGuid { get; public set; }
    public Type ActivityType { get; public set; }
    public ActivityExecutionStatus ExecutionStatus { get; public set; }
    public IList`1<TrackingDataItem> Body { get; }
    public DateTime EventDateTime { get; public set; }
    public int EventOrder { get; public set; }
    public EventArgs EventArgs { get; public set; }
    public TrackingAnnotationCollection Annotations { get; }
    public ActivityTrackingRecord(Type activityType, string qualifiedName, Guid contextGuid, Guid parentContextGuid, ActivityExecutionStatus executionStatus, DateTime eventDateTime, int eventOrder, EventArgs eventArgs);
    public string get_QualifiedName();
    public void set_QualifiedName(string value);
    public Guid get_ContextGuid();
    public void set_ContextGuid(Guid value);
    public Guid get_ParentContextGuid();
    public void set_ParentContextGuid(Guid value);
    public Type get_ActivityType();
    public void set_ActivityType(Type value);
    public ActivityExecutionStatus get_ExecutionStatus();
    public void set_ExecutionStatus(ActivityExecutionStatus value);
    public IList`1<TrackingDataItem> get_Body();
    public virtual DateTime get_EventDateTime();
    public virtual void set_EventDateTime(DateTime value);
    public virtual int get_EventOrder();
    public virtual void set_EventOrder(int value);
    public virtual EventArgs get_EventArgs();
    public virtual void set_EventArgs(EventArgs value);
    public virtual TrackingAnnotationCollection get_Annotations();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.ActivityTrackPoint : object {
    public ActivityTrackingLocationCollection MatchingLocations { get; }
    public ActivityTrackingLocationCollection ExcludedLocations { get; }
    public TrackingAnnotationCollection Annotations { get; }
    public ExtractCollection Extracts { get; }
    public ActivityTrackingLocationCollection get_MatchingLocations();
    public ActivityTrackingLocationCollection get_ExcludedLocations();
    public TrackingAnnotationCollection get_Annotations();
    public ExtractCollection get_Extracts();
    internal bool IsMatch(Activity activity, List`1& status, Boolean& hasCondition);
    internal bool IsMatch(Activity activity, ActivityExecutionStatus status);
    internal void Track(Activity activity, IServiceProvider provider, IList`1<TrackingDataItem> items);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.ActivityTrackPointCollection : List`1<ActivityTrackPoint> {
    public ActivityTrackPointCollection(IEnumerable`1<ActivityTrackPoint> points);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.Runtime.Tracking.ComparisonOperator : Enum {
    public int value__;
    public static ComparisonOperator Equals;
    public static ComparisonOperator NotEquals;
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.ExtractCollection : List`1<TrackingExtract> {
    public ExtractCollection(IEnumerable`1<TrackingExtract> extracts);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.Runtime.Tracking.IProfileNotification {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProfileUpdated(EventHandler`1<ProfileUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProfileUpdated(EventHandler`1<ProfileUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProfileRemoved(EventHandler`1<ProfileRemovedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProfileRemoved(EventHandler`1<ProfileRemovedEventArgs> value);
}
[AttributeUsageAttribute("4")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.PreviousTrackingServiceAttribute : Attribute {
    public string AssemblyQualifiedName { get; }
    public PreviousTrackingServiceAttribute(string assemblyQualifiedName);
    public string get_AssemblyQualifiedName();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.ProfileRemovedEventArgs : EventArgs {
    public Type WorkflowType { get; public set; }
    public ProfileRemovedEventArgs(Type workflowType);
    public Type get_WorkflowType();
    public void set_WorkflowType(Type value);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.ProfileUpdatedEventArgs : EventArgs {
    public TrackingProfile TrackingProfile { get; public set; }
    public Type WorkflowType { get; public set; }
    public ProfileUpdatedEventArgs(Type workflowType, TrackingProfile profile);
    public TrackingProfile get_TrackingProfile();
    public void set_TrackingProfile(TrackingProfile value);
    public Type get_WorkflowType();
    public void set_WorkflowType(Type value);
}
internal class System.Workflow.Runtime.Tracking.PropertyHelper : object {
    internal static void GetProperty(string name, Activity activity, TrackingAnnotationCollection annotations, TrackingDataItem& item);
    internal static object GetProperty(string name, object obj);
    internal static void GetPropertyOrField(string name, object o, Object& obj);
    internal static void GetEnumerationMember(IEnumerable collection, int index, Object& obj);
    internal static object GetRuntimeValue(object o, Activity activity);
    internal static void GetAllMembers(Activity activity, IList`1<TrackingDataItem> items, TrackingAnnotationCollection annotations);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.SqlTrackingQuery : object {
    public string ConnectionString { get; public set; }
    public SqlTrackingQuery(string connectionString);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public bool TryGetWorkflow(Guid workflowInstanceId, SqlTrackingWorkflowInstance& workflowInstance);
    public IList`1<SqlTrackingWorkflowInstance> GetWorkflows(SqlTrackingQueryOptions options);
    internal static SqlTrackingWorkflowInstance BuildInstance(SqlDataReader reader, string connectionString);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions : object {
    public Type WorkflowType { get; public set; }
    public Nullable`1<WorkflowStatus> WorkflowStatus { get; public set; }
    public DateTime StatusMinDateTime { get; public set; }
    public DateTime StatusMaxDateTime { get; public set; }
    public IList`1<TrackingDataItemValue> TrackingDataItems { get; }
    public Type get_WorkflowType();
    public void set_WorkflowType(Type value);
    public Nullable`1<WorkflowStatus> get_WorkflowStatus();
    public void set_WorkflowStatus(Nullable`1<WorkflowStatus> value);
    public DateTime get_StatusMinDateTime();
    public void set_StatusMinDateTime(DateTime value);
    public DateTime get_StatusMaxDateTime();
    public void set_StatusMaxDateTime(DateTime value);
    public IList`1<TrackingDataItemValue> get_TrackingDataItems();
    public void Clear();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.SqlTrackingService : TrackingService {
    public string ConnectionString { get; }
    public bool IsTransactional { get; public set; }
    public bool PartitionOnCompletion { get; public set; }
    public bool UseDefaultProfile { get; public set; }
    public double ProfileChangeCheckInterval { get; public set; }
    public bool EnableRetries { get; public set; }
    internal DbResourceAllocator DbResourceAllocator { get; }
    public SqlTrackingService(string connectionString);
    public SqlTrackingService(NameValueCollection parameters);
    private static SqlTrackingService();
    public string get_ConnectionString();
    public bool get_IsTransactional();
    public void set_IsTransactional(bool value);
    public bool get_PartitionOnCompletion();
    public void set_PartitionOnCompletion(bool value);
    public bool get_UseDefaultProfile();
    public void set_UseDefaultProfile(bool value);
    public double get_ProfileChangeCheckInterval();
    public void set_ProfileChangeCheckInterval(double value);
    public bool get_EnableRetries();
    public void set_EnableRetries(bool value);
    internal DbResourceAllocator get_DbResourceAllocator();
    protected internal virtual void Start();
    protected internal virtual TrackingChannel GetTrackingChannel(TrackingParameters parameters);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProfileUpdated(EventHandler`1<ProfileUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProfileUpdated(EventHandler`1<ProfileUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProfileRemoved(EventHandler`1<ProfileRemovedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProfileRemoved(EventHandler`1<ProfileRemovedEventArgs> value);
    protected internal virtual TrackingProfile GetProfile(Type workflowType, Version profileVersion);
    protected internal virtual bool TryGetProfile(Type workflowType, TrackingProfile& profile);
    protected internal virtual TrackingProfile GetProfile(Guid scheduleInstanceId);
    protected internal virtual bool TryReloadProfile(Type workflowType, Guid scheduleInstanceId, TrackingProfile& profile);
    internal static XmlWriter CreateXmlWriter(TextWriter output);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance : object {
    public bool AutoRefresh { get; public set; }
    public Guid WorkflowInstanceId { get; public set; }
    public long WorkflowInstanceInternalId { get; public set; }
    public DateTime Initialized { get; public set; }
    public Guid InvokingWorkflowInstanceId { get; public set; }
    public WorkflowStatus Status { get; public set; }
    public Type WorkflowType { get; public set; }
    public bool WorkflowDefinitionUpdated { get; }
    public IList`1<ActivityTrackingRecord> ActivityEvents { get; }
    public IList`1<UserTrackingRecord> UserEvents { get; }
    public IList`1<WorkflowTrackingRecord> WorkflowEvents { get; }
    public Activity WorkflowDefinition { get; }
    public IList`1<SqlTrackingWorkflowInstance> InvokedWorkflows { get; }
    internal SqlTrackingWorkflowInstance(string connectionString);
    private static SqlTrackingWorkflowInstance();
    public bool get_AutoRefresh();
    public void set_AutoRefresh(bool value);
    public Guid get_WorkflowInstanceId();
    public void set_WorkflowInstanceId(Guid value);
    public long get_WorkflowInstanceInternalId();
    public void set_WorkflowInstanceInternalId(long value);
    public DateTime get_Initialized();
    public void set_Initialized(DateTime value);
    public Guid get_InvokingWorkflowInstanceId();
    public void set_InvokingWorkflowInstanceId(Guid value);
    public WorkflowStatus get_Status();
    public void set_Status(WorkflowStatus value);
    public Type get_WorkflowType();
    public void set_WorkflowType(Type value);
    public bool get_WorkflowDefinitionUpdated();
    public IList`1<ActivityTrackingRecord> get_ActivityEvents();
    public IList`1<UserTrackingRecord> get_UserEvents();
    public IList`1<WorkflowTrackingRecord> get_WorkflowEvents();
    public Activity get_WorkflowDefinition();
    public IList`1<SqlTrackingWorkflowInstance> get_InvokedWorkflows();
    public void Refresh();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.TrackingAnnotationCollection : List`1<string> {
    public TrackingAnnotationCollection(IEnumerable`1<string> annotations);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.Runtime.Tracking.TrackingChannel : object {
    protected internal abstract virtual void Send(TrackingRecord record);
    protected internal abstract virtual void InstanceCompletedOrTerminated();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.Runtime.Tracking.TrackingCondition : object {
    public string Value { get; public set; }
    public string Member { get; public set; }
    public ComparisonOperator Operator { get; public set; }
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual string get_Member();
    public abstract virtual void set_Member(string value);
    public abstract virtual ComparisonOperator get_Operator();
    public abstract virtual void set_Operator(ComparisonOperator value);
    internal abstract virtual bool Match(object obj);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.TrackingConditionCollection : List`1<TrackingCondition> {
    public TrackingConditionCollection(IEnumerable`1<TrackingCondition> conditions);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.TrackingDataItem : object {
    public TrackingAnnotationCollection Annotations { get; }
    public string FieldName { get; public set; }
    public object Data { get; public set; }
    public TrackingAnnotationCollection get_Annotations();
    public string get_FieldName();
    public void set_FieldName(string value);
    public object get_Data();
    public void set_Data(object value);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.TrackingDataItemValue : object {
    public string FieldName { get; public set; }
    public string DataValue { get; public set; }
    public string QualifiedName { get; public set; }
    public TrackingDataItemValue(string qualifiedName, string fieldName, string dataValue);
    public string get_FieldName();
    public void set_FieldName(string value);
    public string get_DataValue();
    public void set_DataValue(string value);
    public string get_QualifiedName();
    public void set_QualifiedName(string value);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.Runtime.Tracking.TrackingExtract : object {
    public TrackingAnnotationCollection Annotations { get; }
    public string Member { get; public set; }
    public abstract virtual TrackingAnnotationCollection get_Annotations();
    public abstract virtual string get_Member();
    public abstract virtual void set_Member(string value);
    internal abstract virtual void GetData(Activity activity, IServiceProvider provider, IList`1<TrackingDataItem> items);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.TrackingParameters : object {
    public Guid InstanceId { get; }
    public Type WorkflowType { get; }
    public Activity RootActivity { get; }
    public IList`1<string> CallPath { get; }
    public Guid CallerInstanceId { get; }
    public Guid ContextGuid { get; }
    public Guid CallerContextGuid { get; }
    public Guid CallerParentContextGuid { get; }
    public TrackingParameters(Guid instanceId, Type workflowType, Activity rootActivity, IList`1<string> callPath, Guid callerInstanceId, Guid contextGuid, Guid callerContextGuid, Guid callerParentContextGuid);
    public Guid get_InstanceId();
    public Type get_WorkflowType();
    public Activity get_RootActivity();
    public IList`1<string> get_CallPath();
    public Guid get_CallerInstanceId();
    public Guid get_ContextGuid();
    public Guid get_CallerContextGuid();
    public Guid get_CallerParentContextGuid();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.TrackingProfile : object {
    public ActivityTrackPointCollection ActivityTrackPoints { get; }
    public UserTrackPointCollection UserTrackPoints { get; }
    public WorkflowTrackPointCollection WorkflowTrackPoints { get; }
    public Version Version { get; public set; }
    public ActivityTrackPointCollection get_ActivityTrackPoints();
    public UserTrackPointCollection get_UserTrackPoints();
    public WorkflowTrackPointCollection get_WorkflowTrackPoints();
    public Version get_Version();
    public void set_Version(Version value);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public static class System.Workflow.Runtime.Tracking.TrackingProfileCache : object {
    public static void Clear();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException : SystemException {
    public IList`1<ValidationEventArgs> ValidationEventArgs { get; }
    public TrackingProfileDeserializationException(string message);
    public TrackingProfileDeserializationException(string message, Exception innerException);
    private TrackingProfileDeserializationException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public IList`1<ValidationEventArgs> get_ValidationEventArgs();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.TrackingProfileSerializer : object {
    internal static string _xsd;
    public XmlSchema Schema { get; }
    public XmlSchema get_Schema();
    public TrackingProfile Deserialize(TextReader reader);
    public void Serialize(TextWriter writer, TrackingProfile profile);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.Runtime.Tracking.TrackingRecord : object {
    public DateTime EventDateTime { get; public set; }
    public int EventOrder { get; public set; }
    public EventArgs EventArgs { get; public set; }
    public TrackingAnnotationCollection Annotations { get; }
    public abstract virtual DateTime get_EventDateTime();
    public abstract virtual void set_EventDateTime(DateTime value);
    public abstract virtual int get_EventOrder();
    public abstract virtual void set_EventOrder(int value);
    public abstract virtual EventArgs get_EventArgs();
    public abstract virtual void set_EventArgs(EventArgs value);
    public abstract virtual TrackingAnnotationCollection get_Annotations();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.Runtime.Tracking.TrackingService : WorkflowRuntimeService {
    protected internal abstract virtual TrackingChannel GetTrackingChannel(TrackingParameters parameters);
    protected internal abstract virtual bool TryGetProfile(Type workflowType, TrackingProfile& profile);
    protected internal abstract virtual TrackingProfile GetProfile(Type workflowType, Version profileVersionId);
    protected internal abstract virtual TrackingProfile GetProfile(Guid workflowInstanceId);
    protected internal abstract virtual bool TryReloadProfile(Type workflowType, Guid workflowInstanceId, TrackingProfile& profile);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.TrackingWorkflowChangedEventArgs : EventArgs {
    public IList`1<WorkflowChangeAction> Changes { get; }
    public Activity Definition { get; }
    internal TrackingWorkflowChangedEventArgs(IList`1<WorkflowChangeAction> changes, Activity definition);
    public IList`1<WorkflowChangeAction> get_Changes();
    public Activity get_Definition();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.Runtime.Tracking.TrackingWorkflowEvent : Enum {
    public int value__;
    public static TrackingWorkflowEvent Created;
    public static TrackingWorkflowEvent Completed;
    public static TrackingWorkflowEvent Idle;
    public static TrackingWorkflowEvent Suspended;
    public static TrackingWorkflowEvent Resumed;
    public static TrackingWorkflowEvent Persisted;
    public static TrackingWorkflowEvent Unloaded;
    public static TrackingWorkflowEvent Loaded;
    public static TrackingWorkflowEvent Exception;
    public static TrackingWorkflowEvent Terminated;
    public static TrackingWorkflowEvent Aborted;
    public static TrackingWorkflowEvent Changed;
    public static TrackingWorkflowEvent Started;
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs : EventArgs {
    public Exception Exception { get; }
    public string CurrentActivityPath { get; }
    public string OriginalActivityPath { get; }
    public Guid ContextGuid { get; }
    public Guid ParentContextGuid { get; }
    internal TrackingWorkflowExceptionEventArgs(Exception exception, string currentPath, string originalPath, Guid contextGuid, Guid parentContextGuid);
    public Exception get_Exception();
    public string get_CurrentActivityPath();
    public string get_OriginalActivityPath();
    public Guid get_ContextGuid();
    public Guid get_ParentContextGuid();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.TrackingWorkflowSuspendedEventArgs : EventArgs {
    public string Error { get; }
    internal TrackingWorkflowSuspendedEventArgs(string error);
    public string get_Error();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs : EventArgs {
    public Exception Exception { get; }
    internal TrackingWorkflowTerminatedEventArgs(Exception exception);
    internal TrackingWorkflowTerminatedEventArgs(string error);
    public Exception get_Exception();
}
internal class System.Workflow.Runtime.Tracking.TypeMatch : object {
    internal static bool IsMatch(object obj, string name, bool matchDerived);
    internal static bool IsMatch(object obj, Type matchType, bool matchDerived);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.UserTrackingLocation : object {
    public string KeyName { get; public set; }
    public Type ArgumentType { get; public set; }
    public string ArgumentTypeName { get; public set; }
    public bool MatchDerivedArgumentTypes { get; public set; }
    public Type ActivityType { get; public set; }
    public string ActivityTypeName { get; public set; }
    public bool MatchDerivedActivityTypes { get; public set; }
    public TrackingConditionCollection Conditions { get; }
    public UserTrackingLocation(Type argumentType);
    public UserTrackingLocation(Type argumentType, Type activityType);
    public UserTrackingLocation(Type argumentType, string activityTypeName);
    public UserTrackingLocation(string argumentTypeName);
    public UserTrackingLocation(string argumentTypeName, string activityTypeName);
    public UserTrackingLocation(string argumentTypeName, Type activityType);
    public string get_KeyName();
    public void set_KeyName(string value);
    public Type get_ArgumentType();
    public void set_ArgumentType(Type value);
    public string get_ArgumentTypeName();
    public void set_ArgumentTypeName(string value);
    public bool get_MatchDerivedArgumentTypes();
    public void set_MatchDerivedArgumentTypes(bool value);
    public Type get_ActivityType();
    public void set_ActivityType(Type value);
    public string get_ActivityTypeName();
    public void set_ActivityTypeName(string value);
    public bool get_MatchDerivedActivityTypes();
    public void set_MatchDerivedActivityTypes(bool value);
    public TrackingConditionCollection get_Conditions();
    internal bool Match(Activity activity);
    internal bool Match(Activity activity, string keyName, object arg);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.UserTrackingLocationCollection : List`1<UserTrackingLocation> {
    public UserTrackingLocationCollection(IEnumerable`1<UserTrackingLocation> locations);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.UserTrackingRecord : TrackingRecord {
    public string QualifiedName { get; public set; }
    public Guid ContextGuid { get; public set; }
    public Guid ParentContextGuid { get; public set; }
    public Type ActivityType { get; public set; }
    public IList`1<TrackingDataItem> Body { get; }
    public string UserDataKey { get; public set; }
    public object UserData { get; public set; }
    public DateTime EventDateTime { get; public set; }
    public int EventOrder { get; public set; }
    public TrackingAnnotationCollection Annotations { get; }
    public EventArgs EventArgs { get; public set; }
    public UserTrackingRecord(Type activityType, string qualifiedName, Guid contextGuid, Guid parentContextGuid, DateTime eventDateTime, int eventOrder, string userDataKey, object userData);
    public string get_QualifiedName();
    public void set_QualifiedName(string value);
    public Guid get_ContextGuid();
    public void set_ContextGuid(Guid value);
    public Guid get_ParentContextGuid();
    public void set_ParentContextGuid(Guid value);
    public Type get_ActivityType();
    public void set_ActivityType(Type value);
    public IList`1<TrackingDataItem> get_Body();
    public string get_UserDataKey();
    public void set_UserDataKey(string value);
    public object get_UserData();
    public void set_UserData(object value);
    public virtual DateTime get_EventDateTime();
    public virtual void set_EventDateTime(DateTime value);
    public virtual int get_EventOrder();
    public virtual void set_EventOrder(int value);
    public virtual TrackingAnnotationCollection get_Annotations();
    public virtual EventArgs get_EventArgs();
    public virtual void set_EventArgs(EventArgs value);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.UserTrackPoint : object {
    public UserTrackingLocationCollection MatchingLocations { get; }
    public UserTrackingLocationCollection ExcludedLocations { get; }
    public TrackingAnnotationCollection Annotations { get; }
    public ExtractCollection Extracts { get; }
    public UserTrackingLocationCollection get_MatchingLocations();
    public UserTrackingLocationCollection get_ExcludedLocations();
    public TrackingAnnotationCollection get_Annotations();
    public ExtractCollection get_Extracts();
    internal bool IsMatch(Activity activity);
    internal bool IsMatch(Activity activity, string keyName, object argument);
    internal void Track(Activity activity, object arg, IServiceProvider provider, IList`1<TrackingDataItem> items);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.UserTrackPointCollection : List`1<UserTrackPoint> {
    public UserTrackPointCollection(IEnumerable`1<UserTrackPoint> points);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.WorkflowDataTrackingExtract : TrackingExtract {
    public string Member { get; public set; }
    public TrackingAnnotationCollection Annotations { get; }
    public WorkflowDataTrackingExtract(string member);
    public virtual string get_Member();
    public virtual void set_Member(string value);
    public virtual TrackingAnnotationCollection get_Annotations();
    internal virtual void GetData(Activity activity, IServiceProvider provider, IList`1<TrackingDataItem> items);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.WorkflowTrackingLocation : object {
    public IList`1<TrackingWorkflowEvent> Events { get; }
    public WorkflowTrackingLocation(IList`1<TrackingWorkflowEvent> events);
    public IList`1<TrackingWorkflowEvent> get_Events();
    internal bool Match(TrackingWorkflowEvent status);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.WorkflowTrackingRecord : TrackingRecord {
    public TrackingWorkflowEvent TrackingWorkflowEvent { get; public set; }
    public DateTime EventDateTime { get; public set; }
    public int EventOrder { get; public set; }
    public EventArgs EventArgs { get; public set; }
    public TrackingAnnotationCollection Annotations { get; }
    public WorkflowTrackingRecord(TrackingWorkflowEvent trackingWorkflowEvent, DateTime eventDateTime, int eventOrder, EventArgs eventArgs);
    public TrackingWorkflowEvent get_TrackingWorkflowEvent();
    public void set_TrackingWorkflowEvent(TrackingWorkflowEvent value);
    public virtual DateTime get_EventDateTime();
    public virtual void set_EventDateTime(DateTime value);
    public virtual int get_EventOrder();
    public virtual void set_EventOrder(int value);
    public virtual EventArgs get_EventArgs();
    public virtual void set_EventArgs(EventArgs value);
    public virtual TrackingAnnotationCollection get_Annotations();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.WorkflowTrackPoint : object {
    public WorkflowTrackingLocation MatchingLocation { get; public set; }
    public TrackingAnnotationCollection Annotations { get; }
    public WorkflowTrackingLocation get_MatchingLocation();
    public void set_MatchingLocation(WorkflowTrackingLocation value);
    public TrackingAnnotationCollection get_Annotations();
    internal bool IsMatch(TrackingWorkflowEvent status);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Tracking.WorkflowTrackPointCollection : List`1<WorkflowTrackPoint> {
    public WorkflowTrackPointCollection(IEnumerable`1<WorkflowTrackPoint> points);
}
internal class System.Workflow.Runtime.TrackingCallingState : object {
    internal IList`1<string> CallerActivityPathProxy { get; internal set; }
    public Guid CallerWorkflowInstanceId { get; public set; }
    public Guid CallerContextGuid { get; public set; }
    public Guid CallerParentContextGuid { get; public set; }
    internal IList`1<string> get_CallerActivityPathProxy();
    internal void set_CallerActivityPathProxy(IList`1<string> value);
    public Guid get_CallerWorkflowInstanceId();
    public void set_CallerWorkflowInstanceId(Guid value);
    public Guid get_CallerContextGuid();
    public void set_CallerContextGuid(Guid value);
    public Guid get_CallerParentContextGuid();
    public void set_CallerParentContextGuid(Guid value);
}
internal class System.Workflow.Runtime.TrackingChannelWrapper : object {
    internal Type TrackingServiceType { get; }
    internal TrackingChannel TrackingChannel { get; }
    public TrackingChannelWrapper(TrackingChannel channel, Type serviceType, Type workflowType, RTTrackingProfile profile);
    internal Type get_TrackingServiceType();
    internal TrackingChannel get_TrackingChannel();
    internal RTTrackingProfile GetTrackingProfile(WorkflowExecutor skedExec);
    internal void SetTrackingProfile(RTTrackingProfile profile);
    internal void MakeProfilePrivate(WorkflowExecutor exec);
}
internal class System.Workflow.Runtime.TrackingListener : object {
    internal TrackingListenerBroker Broker { get; internal set; }
    internal TrackingListener(TrackingListenerFactory factory, Activity sked, WorkflowExecutor exec, List`1<TrackingChannelWrapper> channels, TrackingListenerBroker broker, bool load);
    internal TrackingListenerBroker get_Broker();
    internal void set_Broker(TrackingListenerBroker value);
    internal void ReloadProfiles(WorkflowExecutor exec, Guid instanceId);
    internal void ActivityStatusChange(object sender, ActivityStatusChangeEventArgs e);
    internal void UserTrackPoint(object sender, UserTrackPointEventArgs e);
    internal void WorkflowExecutionEvent(object sender, WorkflowExecutionEventArgs e);
    internal void DynamicUpdateBegin(object sender, DynamicUpdateEventArgs e);
    internal void DynamicUpdateRollback(object sender, DynamicUpdateEventArgs e);
    internal void DynamicUpdateCommit(object sender, DynamicUpdateEventArgs e);
}
internal class System.Workflow.Runtime.TrackingListenerBroker : object {
    unknown TrackingListener TrackingListener {internal set; }
    internal TrackingListenerBroker(TrackingListener listener);
    internal void set_TrackingListener(TrackingListener value);
    internal bool ContainsService(Type trackingServiceType);
    internal void AddService(Type trackingServiceType, Version profileVersionId);
    internal void ReplaceServices(Dictionary`2<string, Type> replacements);
    internal void RemoveService(Type trackingServiceType);
    internal bool TryGetProfileVersionId(Type trackingServiceType, Version& profileVersionId);
    internal void MakeProfilePrivate(Type trackingServiceType);
    internal bool IsProfilePrivate(Type trackingServiceType);
    internal void MakeProfileInstance(Type trackingServiceType);
    internal bool IsProfileInstance(Type trackingServiceType);
    internal int GetNextEventOrderId();
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class System.Workflow.Runtime.TrackingListenerFactory : object {
    internal TrackingProfileManager TrackingProfileManager { get; }
    internal TrackingProfileManager get_TrackingProfileManager();
    internal void Initialize(WorkflowRuntime runtime);
    internal void Uninitialize(WorkflowRuntime runtime);
    internal TrackingListener GetTrackingListener(Activity sked, WorkflowExecutor skedExec);
    internal TrackingListener GetTrackingListener(Activity sked, WorkflowExecutor skedExec, TrackingListenerBroker broker);
    internal void ReloadProfiles(WorkflowExecutor exec);
    internal void ReloadProfiles(WorkflowExecutor exec, Guid instanceId, TrackingListenerBroker& broker, List`1& channels);
    internal Guid GetContext(Activity activity);
}
internal class System.Workflow.Runtime.TrackingProfileManager : object {
    public static void ClearCache();
    internal void ClearCacheImpl();
    internal void Initialize(WorkflowRuntime runtime);
    internal void Uninitialize();
    internal RTTrackingProfile GetProfile(TrackingService service, Activity schedule);
    internal RTTrackingProfile GetProfile(TrackingService service, Activity workflow, Version versionId);
    internal RTTrackingProfile GetProfile(TrackingService service, Activity workflow, Guid instanceId);
}
internal class System.Workflow.Runtime.TransactionalProperties : object {
    internal TransactionProcessState TransactionState;
    internal Transaction Transaction;
    internal TransactionScope TransactionScope;
    internal List`1<SchedulableItem> ItemsToBeScheduledAtCompletion;
    internal WorkflowQueuingService LocalQueuingService;
}
internal enum System.Workflow.Runtime.TransactionProcessState : Enum {
    public int value__;
    public static TransactionProcessState Ok;
    public static TransactionProcessState Aborted;
    public static TransactionProcessState AbortProcessed;
}
internal class System.Workflow.Runtime.VolatileResourceManager : object {
    internal WorkBatchCollection BatchCollection { get; }
    internal bool IsBatchDirty { get; }
    internal WorkBatchCollection get_BatchCollection();
    internal bool get_IsBatchDirty();
    internal void Commit();
    internal void Complete();
    internal void HandleFault();
    internal void ClearAllBatchedWork();
}
internal class System.Workflow.Runtime.WorkBatch : object {
    internal int Count { get; }
    internal bool IsDirty { get; }
    internal WorkBatch(WorkBatchCollection workBackCollection);
    internal int get_Count();
    internal void SetWorkBatchCollection(WorkBatchCollection workBatchCollection);
    private sealed virtual override void System.Workflow.Runtime.IWorkBatch.Add(IPendingWork work, object workItem);
    internal bool get_IsDirty();
    internal void Commit(Transaction transaction);
    internal void Complete(bool succeeded);
    internal void Merge(WorkBatch batch);
    public sealed virtual void Dispose();
}
internal class System.Workflow.Runtime.WorkBatchCollection : Dictionary`2<object, WorkBatch> {
    internal long WorkItemOrderId { get; internal set; }
    internal long get_WorkItemOrderId();
    internal void set_WorkItemOrderId(long value);
    internal long GetNextWorkItemOrderId(IPendingWork pendingWork);
    internal IWorkBatch GetBatch(object id);
    internal IWorkBatch GetTransientBatch();
    internal WorkBatch GetMergedBatch();
    internal void RollbackBatch(object id);
    internal void RollbackAllBatchedWork();
    internal void ClearSubBatches();
    internal void ClearTransientBatch();
}
internal enum System.Workflow.Runtime.WorkBatchState : Enum {
    public int value__;
    public static WorkBatchState Usable;
    public static WorkBatchState Merged;
    public static WorkBatchState Completed;
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.WorkflowCompletedEventArgs : WorkflowEventArgs {
    public Dictionary`2<string, object> OutputParameters { get; }
    public Activity WorkflowDefinition { get; }
    internal WorkflowCompletedEventArgs(WorkflowInstance instance, Activity workflowDefinition);
    public Dictionary`2<string, object> get_OutputParameters();
    public Activity get_WorkflowDefinition();
}
internal class System.Workflow.Runtime.WorkflowDefinitionDispenser : object {
    internal static DependencyProperty WorkflowDefinitionHashCodeProperty;
    internal WorkflowDefinitionDispenser(WorkflowRuntime runtime, bool validateOnCreate, int capacity);
    private static WorkflowDefinitionDispenser();
    [CompilerGeneratedAttribute]
internal void add_WorkflowDefinitionLoaded(EventHandler`1<WorkflowDefinitionEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_WorkflowDefinitionLoaded(EventHandler`1<WorkflowDefinitionEventArgs> value);
    internal ReadOnlyCollection`1<PropertyInfo> GetOutputParameters(Activity rootActivity);
    internal void GetWorkflowTypes(ReadOnlyCollection`1& keys, ReadOnlyCollection`1& values);
    internal void GetWorkflowDefinitions(ReadOnlyCollection`1& keys, ReadOnlyCollection`1& values);
    internal Activity GetWorkflowDefinition(Byte[] xomlHashCode);
    internal Activity GetWorkflowDefinition(Type workflowType);
    internal Activity GetRootActivity(Type workflowType, bool createNew, bool initForRuntime);
    internal Activity GetRootActivity(string xomlText, string rulesText, bool createNew, bool initForRuntime);
    internal void ValidateDefinition(Activity root, bool isNewType, ITypeProvider typeProvider);
    public sealed virtual void Dispose();
}
internal class System.Workflow.Runtime.WorkflowDefinitionEventArgs : EventArgs {
    public Type WorkflowType { get; }
    public Byte[] WorkflowDefinitionHashCode { get; }
    internal WorkflowDefinitionEventArgs(Type scheduleType);
    internal WorkflowDefinitionEventArgs(Byte[] scheduleDefHash);
    public Type get_WorkflowType();
    public Byte[] get_WorkflowDefinitionHashCode();
}
internal class System.Workflow.Runtime.WorkflowDefinitionLock : object {
    internal static DependencyProperty WorkflowDefinitionLockObjectProperty;
    public WorkflowDefinitionLock(Activity definition);
    private static WorkflowDefinitionLock();
    internal static object GetWorkflowDefinitionLockObject(DependencyObject dependencyObject);
    internal static void SetWorkflowDefinitionLockObject(DependencyObject dependencyObject, object value);
    public sealed virtual void Dispose();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public static class System.Workflow.Runtime.WorkflowEnvironment : object {
    public static IWorkBatch WorkBatch { get; }
    public static Guid WorkflowInstanceId { get; }
    public static IWorkBatch get_WorkBatch();
    public static Guid get_WorkflowInstanceId();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.WorkflowEventArgs : EventArgs {
    public WorkflowInstance WorkflowInstance { get; }
    internal WorkflowEventArgs(WorkflowInstance instance);
    public WorkflowInstance get_WorkflowInstance();
}
internal enum System.Workflow.Runtime.WorkflowEventInternal : Enum {
    public int value__;
    public static WorkflowEventInternal Created;
    public static WorkflowEventInternal Completing;
    public static WorkflowEventInternal Completed;
    public static WorkflowEventInternal SchedulerEmpty;
    public static WorkflowEventInternal Idle;
    public static WorkflowEventInternal Suspending;
    public static WorkflowEventInternal Suspended;
    public static WorkflowEventInternal Resuming;
    public static WorkflowEventInternal Resumed;
    public static WorkflowEventInternal Persisting;
    public static WorkflowEventInternal Persisted;
    public static WorkflowEventInternal Unloading;
    public static WorkflowEventInternal Unloaded;
    public static WorkflowEventInternal Loaded;
    public static WorkflowEventInternal Exception;
    public static WorkflowEventInternal Terminating;
    public static WorkflowEventInternal Terminated;
    public static WorkflowEventInternal Aborting;
    public static WorkflowEventInternal Aborted;
    public static WorkflowEventInternal Runnable;
    public static WorkflowEventInternal Executing;
    public static WorkflowEventInternal NotExecuting;
    public static WorkflowEventInternal UserTrackPoint;
    public static WorkflowEventInternal ActivityStatusChange;
    public static WorkflowEventInternal ActivityStateCreated;
    public static WorkflowEventInternal HandlerEntered;
    public static WorkflowEventInternal HandlerExited;
    public static WorkflowEventInternal DynamicChangeBegin;
    public static WorkflowEventInternal DynamicChangeRollback;
    public static WorkflowEventInternal DynamicChangeCommit;
    public static WorkflowEventInternal Creating;
    public static WorkflowEventInternal Starting;
    public static WorkflowEventInternal Started;
    public static WorkflowEventInternal Changed;
    public static WorkflowEventInternal HandlerInvoking;
    public static WorkflowEventInternal HandlerInvoked;
    public static WorkflowEventInternal ActivityExecuting;
    public static WorkflowEventInternal Loading;
}
internal class System.Workflow.Runtime.WorkflowExecutor : object {
    internal static DependencyProperty WorkflowExecutorProperty;
    internal static DependencyProperty TransientBatchProperty;
    internal static DependencyProperty TransactionalPropertiesProperty;
    internal static DependencyProperty WorkflowInstanceIdProperty;
    internal static DependencyProperty IsBlockedProperty;
    internal static DependencyProperty WorkflowStatusProperty;
    internal static DependencyProperty SuspendOrTerminateInfoProperty;
    internal static DependencyProperty TrackingListenerBrokerProperty;
    internal Activity currentAtomicActivity;
    internal bool stateChangedSincePersistence;
    internal TrackingCallingState TrackingCallingState { get; }
    internal WorkflowRuntime WorkflowRuntime { get; }
    internal bool IsInstanceValid { get; internal set; }
    internal bool IsIdle { get; internal set; }
    internal string AdditionalInformation { get; }
    public WorkBatchCollection BatchCollection { get; }
    internal VolatileResourceManager ResourceManager { get; }
    internal Activity WorkflowDefinition { get; }
    internal Activity RootActivity { get; }
    internal Guid InstanceId { get; private set; }
    internal string InstanceIdString { get; }
    internal InstanceLock MessageDeliveryLock { get; }
    internal InstanceLock ExecutorLock { get; }
    internal WorkflowStateRollbackService WorkflowStateRollbackService { get; }
    internal WorkflowInstance WorkflowInstance { get; }
    internal Activity CurrentActivity { get; internal set; }
    internal Hashtable CompletedContextActivities { get; internal set; }
    internal List`1<SchedulerLockGuardInfo> EventsToFireList { get; }
    internal Scheduler Scheduler { get; }
    internal Guid ID { get; }
    internal WorkflowStatus WorkflowStatus { get; private set; }
    internal TimerEventSubscriptionCollection TimerQueue { get; private set; }
    internal bool IsUnloadableNow { get; }
    internal Exception ThrownException { get; internal set; }
    private bool System.Workflow.ComponentModel.IWorkflowCoreRuntime.IsDynamicallyUpdated { get; }
    private WaitCallback System.Workflow.ComponentModel.IWorkflowCoreRuntime.ProcessTimersCallback { get; }
    private Activity System.Workflow.ComponentModel.IWorkflowCoreRuntime.CurrentActivity { get; }
    private Activity System.Workflow.ComponentModel.IWorkflowCoreRuntime.CurrentAtomicActivity { get; }
    private Guid System.Workflow.ComponentModel.IWorkflowCoreRuntime.InstanceID { get; }
    private Activity System.Workflow.ComponentModel.IWorkflowCoreRuntime.RootActivity { get; }
    private static WorkflowExecutor();
    internal WorkflowExecutor(Guid instanceId);
    internal void Initialize(Activity rootActivity, WorkflowExecutor invokerExec, string invokeActivityID, Guid instanceId, IDictionary`2<string, object> namedArguments, WorkflowInstance workflowInstance);
    internal void RegisterWithRuntime(WorkflowRuntime workflowRuntime);
    internal void Reload(Activity rootActivity, WorkflowInstance workflowInstance);
    internal void ReRegisterWithRuntime(WorkflowRuntime workflowRuntime);
    internal void Registered(bool isActivation);
    internal void Initialize(Activity rootActivity, WorkflowRuntime runtime, WorkflowExecutor previousWorkflowExecutor);
    internal TrackingCallingState get_TrackingCallingState();
    internal WorkflowRuntime get_WorkflowRuntime();
    internal bool get_IsInstanceValid();
    internal void set_IsInstanceValid(bool value);
    internal bool get_IsIdle();
    internal void set_IsIdle(bool value);
    internal string get_AdditionalInformation();
    public sealed virtual WorkBatchCollection get_BatchCollection();
    internal VolatileResourceManager get_ResourceManager();
    internal Activity get_WorkflowDefinition();
    internal Activity get_RootActivity();
    internal Guid get_InstanceId();
    private void set_InstanceId(Guid value);
    internal string get_InstanceIdString();
    internal InstanceLock get_MessageDeliveryLock();
    internal InstanceLock get_ExecutorLock();
    internal WorkflowStateRollbackService get_WorkflowStateRollbackService();
    internal WorkflowInstance get_WorkflowInstance();
    internal void Start();
    internal Activity get_CurrentActivity();
    internal void set_CurrentActivity(Activity value);
    internal Hashtable get_CompletedContextActivities();
    internal void set_CompletedContextActivities(Hashtable value);
    internal List`1<SchedulerLockGuardInfo> get_EventsToFireList();
    internal void ScheduleForWork();
    internal void RequestHostingService();
    internal void DeliverTimerSubscriptions();
    internal void RunSome(object ignored);
    internal Scheduler get_Scheduler();
    internal Guid get_ID();
    internal WorkflowStatus get_WorkflowStatus();
    private void set_WorkflowStatus(WorkflowStatus value);
    internal TimerEventSubscriptionCollection get_TimerQueue();
    private void set_TimerQueue(TimerEventSubscriptionCollection value);
    internal void Persist(Activity dynamicActivity, bool unlock, bool needsCompensation);
    internal void ProcessQueuedEvents();
    internal void EnqueueItem(IComparable queueName, object item, IPendingWork pendingWork, object workItem);
    internal void EnqueueItemOnIdle(IComparable queueName, object item, IPendingWork pendingWork, object workItem);
    internal ReadOnlyCollection`1<WorkflowQueueInfo> GetWorkflowQueueInfos();
    internal DateTime GetWorkflowNextTimerExpiration();
    internal void RegisterDynamicActivity(Activity dynamicActivity, bool load);
    internal void UnregisterDynamicActivity(Activity dynamicActivity);
    internal Activity GetContextActivityForId(int stateId);
    internal bool get_IsUnloadableNow();
    internal bool TryUnload();
    internal void Unload();
    internal void Terminate(string error);
    internal bool TerminateOnIdle(string error);
    internal void Abort();
    internal void AbortOnIdle();
    internal bool Suspend(string error);
    internal bool SuspendOnIdle(string error);
    internal void Resume();
    internal bool ResumeOnIdle(bool outsideThread);
    internal bool IsActivityInAtomicContext(Activity activity, Activity& atomicActivity);
    internal static bool CheckAndProcessTransactionAborted(TransactionalProperties transactionalProperties);
    internal void ExceptionOccured(Exception exp, Activity currentActivity, string originalActivityId);
    internal Exception get_ThrownException();
    internal void set_ThrownException(Exception value);
    internal static bool IsIrrecoverableException(Exception e);
    internal void Track(Activity activity, string key, object args);
    internal void FireExceptionOccured(Exception e, string currentActivityPath, string originalActivityPath, Guid contextGuid, Guid parentContextGuid);
    internal Activity GetWorkflowDefinition(string workflowContext);
    internal Activity GetWorkflowDefinitionClone(string workflowContext);
    internal void ApplyWorkflowChanges(WorkflowChanges workflowChanges);
    internal bool OnBeforeDynamicChange(IList`1<WorkflowChangeAction> changes);
    internal void OnAfterDynamicChange(bool updateSucceeded, IList`1<WorkflowChangeAction> changes);
    private sealed virtual override bool System.Workflow.ComponentModel.IWorkflowCoreRuntime.get_IsDynamicallyUpdated();
    private sealed virtual override WaitCallback System.Workflow.ComponentModel.IWorkflowCoreRuntime.get_ProcessTimersCallback();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    private sealed virtual override Activity System.Workflow.ComponentModel.IWorkflowCoreRuntime.get_CurrentActivity();
    private sealed virtual override Activity System.Workflow.ComponentModel.IWorkflowCoreRuntime.get_CurrentAtomicActivity();
    private sealed virtual override Guid System.Workflow.ComponentModel.IWorkflowCoreRuntime.StartWorkflow(Type workflowType, Dictionary`2<string, object> namedArgumentValues);
    private sealed virtual override void System.Workflow.ComponentModel.IWorkflowCoreRuntime.ScheduleItem(SchedulableItem item, bool isInAtomicTransaction, bool transacted, bool queueInTransaction);
    public sealed virtual IDisposable SetCurrentActivity(Activity activity);
    private sealed virtual override Guid System.Workflow.ComponentModel.IWorkflowCoreRuntime.get_InstanceID();
    private sealed virtual override bool System.Workflow.ComponentModel.IWorkflowCoreRuntime.SuspendInstance(string suspendDescription);
    private sealed virtual override void System.Workflow.ComponentModel.IWorkflowCoreRuntime.TerminateInstance(Exception e);
    private sealed virtual override bool System.Workflow.ComponentModel.IWorkflowCoreRuntime.Resume();
    private sealed virtual override void System.Workflow.ComponentModel.IWorkflowCoreRuntime.RaiseHandlerInvoking(Delegate handlerDelegate);
    private sealed virtual override void System.Workflow.ComponentModel.IWorkflowCoreRuntime.RaiseActivityExecuting(Activity activity);
    private sealed virtual override void System.Workflow.ComponentModel.IWorkflowCoreRuntime.RaiseHandlerInvoked();
    private sealed virtual override void System.Workflow.ComponentModel.IWorkflowCoreRuntime.CheckpointInstanceState(Activity currentActivity);
    private sealed virtual override void System.Workflow.ComponentModel.IWorkflowCoreRuntime.RequestRevertToCheckpointState(Activity currentActivity, EventHandler`1<EventArgs> callbackHandler, EventArgs callbackData, bool suspendOnRevert, string suspendInfo);
    private sealed virtual override void System.Workflow.ComponentModel.IWorkflowCoreRuntime.DisposeCheckpointState();
    private sealed virtual override int System.Workflow.ComponentModel.IWorkflowCoreRuntime.GetNewContextActivityId();
    private sealed virtual override Activity System.Workflow.ComponentModel.IWorkflowCoreRuntime.GetContextActivityForId(int stateId);
    private sealed virtual override void System.Workflow.ComponentModel.IWorkflowCoreRuntime.RaiseException(Exception e, Activity activity, string responsibleActivity);
    private sealed virtual override void System.Workflow.ComponentModel.IWorkflowCoreRuntime.RegisterContextActivity(Activity activity);
    private sealed virtual override void System.Workflow.ComponentModel.IWorkflowCoreRuntime.UnregisterContextActivity(Activity activity);
    private sealed virtual override void System.Workflow.ComponentModel.IWorkflowCoreRuntime.ActivityStatusChanged(Activity activity, bool transacted, bool committed);
    private sealed virtual override void System.Workflow.ComponentModel.IWorkflowCoreRuntime.PersistInstanceState(Activity activity);
    private sealed virtual override Activity System.Workflow.ComponentModel.IWorkflowCoreRuntime.LoadContextActivity(ActivityExecutionContextInfo contextInfo, Activity outerActivity);
    private sealed virtual override void System.Workflow.ComponentModel.IWorkflowCoreRuntime.SaveContextActivity(Activity contextActivity);
    private sealed virtual override Activity System.Workflow.ComponentModel.IWorkflowCoreRuntime.get_RootActivity();
    private sealed virtual override object System.Workflow.ComponentModel.IWorkflowCoreRuntime.GetService(Activity activity, Type serviceType);
    private sealed virtual override bool System.Workflow.ComponentModel.IWorkflowCoreRuntime.OnBeforeDynamicChange(IList`1<WorkflowChangeAction> changes);
    private sealed virtual override void System.Workflow.ComponentModel.IWorkflowCoreRuntime.OnAfterDynamicChange(bool updateSucceeded, IList`1<WorkflowChangeAction> changes);
    private sealed virtual override void System.Workflow.ComponentModel.IWorkflowCoreRuntime.Track(string key, object args);
    internal void add_WorkflowExecutionEvent(EventHandler`1<WorkflowExecutionEventArgs> value);
    internal void remove_WorkflowExecutionEvent(EventHandler`1<WorkflowExecutionEventArgs> value);
    internal void FireWorkflowExecutionEvent(object sender, WorkflowEventInternal eventType);
    internal void FireWorkflowHandlerInvokingEvent(object sender, WorkflowEventInternal eventType, Delegate delegateHandler);
    internal void FireWorkflowSuspended(string error);
    internal void FireWorkflowTerminated(Exception exception);
    internal void FireWorkflowTerminated(string error);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.WorkflowInstance : object {
    public Guid InstanceId { get; }
    public WorkflowRuntime WorkflowRuntime { get; }
    unknown WorkflowExecutor DeadWorkflow {internal set; }
    internal WorkflowInstance(Guid instanceId, WorkflowRuntime workflowRuntime);
    public Guid get_InstanceId();
    public WorkflowRuntime get_WorkflowRuntime();
    internal void set_DeadWorkflow(WorkflowExecutor value);
    public ReadOnlyCollection`1<WorkflowQueueInfo> GetWorkflowQueueData();
    public DateTime GetWorkflowNextTimerExpiration();
    public Activity GetWorkflowDefinition();
    public void Load();
    public bool TryUnload();
    public void Suspend(string error);
    public void Unload();
    public void Resume();
    internal void ProcessTimers(object ignored);
    internal void ProcessTimers();
    public void Terminate(string error);
    public void Abort();
    public void ReloadTrackingProfiles();
    public void ApplyWorkflowChanges(WorkflowChanges workflowChanges);
    public void EnqueueItem(IComparable queueName, object item, IPendingWork pendingWork, object workItem);
    public void EnqueueItemOnIdle(IComparable queueName, object item, IPendingWork pendingWork, object workItem);
    internal WorkflowExecutor GetWorkflowResourceUNSAFE();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Start();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.WorkflowOwnershipException : Exception {
    public Guid InstanceId { get; public set; }
    public WorkflowOwnershipException(string message);
    public WorkflowOwnershipException(string message, Exception innerException);
    public WorkflowOwnershipException(Guid instanceId);
    public WorkflowOwnershipException(Guid instanceId, string message);
    public WorkflowOwnershipException(Guid instanceId, string message, Exception innerException);
    protected WorkflowOwnershipException(SerializationInfo info, StreamingContext context);
    public Guid get_InstanceId();
    public void set_InstanceId(Guid value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.WorkflowQueue : object {
    public IComparable QueueName { get; }
    public WorkflowQueuingService QueuingService { get; }
    public int Count { get; }
    public bool Enabled { get; public set; }
    internal WorkflowQueue(WorkflowQueuingService qService, IComparable queueName);
    public void add_QueueItemAvailable(EventHandler`1<QueueEventArgs> value);
    public void remove_QueueItemAvailable(EventHandler`1<QueueEventArgs> value);
    public void RegisterForQueueItemAvailable(IActivityEventListener`1<QueueEventArgs> eventListener);
    public void RegisterForQueueItemAvailable(IActivityEventListener`1<QueueEventArgs> eventListener, string subscriberQualifiedName);
    public void UnregisterForQueueItemAvailable(IActivityEventListener`1<QueueEventArgs> eventListener);
    public void add_QueueItemArrived(EventHandler`1<QueueEventArgs> value);
    public void remove_QueueItemArrived(EventHandler`1<QueueEventArgs> value);
    public void RegisterForQueueItemArrived(IActivityEventListener`1<QueueEventArgs> eventListener);
    public void UnregisterForQueueItemArrived(IActivityEventListener`1<QueueEventArgs> eventListener);
    public IComparable get_QueueName();
    public WorkflowQueuingService get_QueuingService();
    public void Enqueue(object item);
    public object Dequeue();
    public object Peek();
    public int get_Count();
    public bool get_Enabled();
    public void set_Enabled(bool value);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.WorkflowQueueInfo : object {
    public IComparable QueueName { get; }
    public ICollection Items { get; }
    public ReadOnlyCollection`1<string> SubscribedActivityNames { get; }
    internal WorkflowQueueInfo(IComparable queueName, ICollection items, ReadOnlyCollection`1<string> subscribedActivityNames);
    public IComparable get_QueueName();
    public ICollection get_Items();
    public ReadOnlyCollection`1<string> get_SubscribedActivityNames();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.WorkflowQueuingService : object {
    public static DependencyProperty PendingMessagesProperty;
    internal static DependencyProperty RootPersistedQueueStatesProperty;
    internal static DependencyProperty LocalPersistedQueueStatesProperty;
    internal object SyncRoot { get; }
    internal Activity CallingActivity { get; internal set; }
    internal IEnumerable`1<IComparable> QueueNames { get; }
    internal WorkflowQueuingService(IWorkflowCoreRuntime rootWorkflowExecutor);
    internal WorkflowQueuingService(WorkflowQueuingService copyFromQueuingService);
    private static WorkflowQueuingService();
    public WorkflowQueue CreateWorkflowQueue(IComparable queueName, bool transactional);
    public void DeleteWorkflowQueue(IComparable queueName);
    public bool Exists(IComparable queueName);
    public WorkflowQueue GetWorkflowQueue(IComparable queueName);
    internal object get_SyncRoot();
    internal void EnqueueEvent(IComparable queueName, object item);
    internal bool SafeEnqueueEvent(IComparable queueName, object item);
    internal object Peek(IComparable queueName);
    internal object DequeueEvent(IComparable queueName);
    internal EventQueueState GetQueueState(IComparable eventType);
    internal Activity get_CallingActivity();
    internal void set_CallingActivity(Activity value);
    internal void ProcessesQueuedAsynchronousEvents();
    internal void NotifyAsynchronousSubscribers(IComparable queueName, EventQueueState qState, int numberOfNotification);
    internal void MoveAllMessagesToPendingQueue();
    internal EventQueueState GetQueue(IComparable queueID);
    internal IEnumerable`1<IComparable> get_QueueNames();
    internal void Complete(bool commitSucceeded);
    internal void PostPersist(bool isPersistSuccessful);
    internal void PrePersist();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.WorkflowRuntime : object {
    internal static string DefaultName;
    internal bool IsZombie { get; }
    internal WorkflowDefinitionDispenser DefinitionDispenser { get; }
    internal List`1<TrackingService> TrackingServices { get; }
    internal WorkflowSchedulerService SchedulerService { get; }
    internal WorkflowCommitWorkBatchService TransactionService { get; }
    internal WorkflowPersistenceService WorkflowPersistenceService { get; }
    internal PerformanceCounterManager PerformanceCounterManager { get; private set; }
    internal TrackingListenerFactory TrackingListenerFactory { get; }
    public string Name { get; public set; }
    internal NameValueConfigurationCollection CommonParameters { get; }
    internal Dictionary`2<string, Type> TrackingServiceReplacement { get; }
    public bool IsStarted { get; }
    private static WorkflowRuntime();
    public WorkflowRuntime(string configSectionName);
    public WorkflowRuntime(WorkflowRuntimeSection settings);
    public sealed virtual void Dispose();
    internal bool get_IsZombie();
    public WorkflowInstance GetWorkflow(Guid instanceId);
    public ReadOnlyCollection`1<WorkflowInstance> GetLoadedWorkflows();
    internal WorkflowDefinitionDispenser get_DefinitionDispenser();
    internal List`1<TrackingService> get_TrackingServices();
    internal WorkflowSchedulerService get_SchedulerService();
    internal WorkflowCommitWorkBatchService get_TransactionService();
    internal WorkflowPersistenceService get_WorkflowPersistenceService();
    internal PerformanceCounterManager get_PerformanceCounterManager();
    private void set_PerformanceCounterManager(PerformanceCounterManager value);
    internal TrackingListenerFactory get_TrackingListenerFactory();
    internal Activity GetWorkflowDefinition(Type workflowType);
    public WorkflowInstance CreateWorkflow(Type workflowType);
    public WorkflowInstance CreateWorkflow(Type workflowType, Dictionary`2<string, object> namedArgumentValues);
    public WorkflowInstance CreateWorkflow(XmlReader workflowDefinitionReader);
    public WorkflowInstance CreateWorkflow(XmlReader workflowDefinitionReader, XmlReader rulesReader, Dictionary`2<string, object> namedArgumentValues);
    public WorkflowInstance CreateWorkflow(Type workflowType, Dictionary`2<string, object> namedArgumentValues, Guid instanceId);
    public WorkflowInstance CreateWorkflow(XmlReader workflowDefinitionReader, XmlReader rulesReader, Dictionary`2<string, object> namedArgumentValues, Guid instanceId);
    internal WorkflowInstance InternalCreateWorkflow(CreationContext context, Guid instanceId);
    [CompilerGeneratedAttribute]
internal void add_WorkflowExecutorInitializing(EventHandler`1<WorkflowExecutorInitializingEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_WorkflowExecutorInitializing(EventHandler`1<WorkflowExecutorInitializingEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_WorkflowIdled(EventHandler`1<WorkflowEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_WorkflowIdled(EventHandler`1<WorkflowEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_WorkflowCreated(EventHandler`1<WorkflowEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_WorkflowCreated(EventHandler`1<WorkflowEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_WorkflowStarted(EventHandler`1<WorkflowEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_WorkflowStarted(EventHandler`1<WorkflowEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_WorkflowLoaded(EventHandler`1<WorkflowEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_WorkflowLoaded(EventHandler`1<WorkflowEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_WorkflowUnloaded(EventHandler`1<WorkflowEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_WorkflowUnloaded(EventHandler`1<WorkflowEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_WorkflowCompleted(EventHandler`1<WorkflowCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_WorkflowCompleted(EventHandler`1<WorkflowCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_WorkflowTerminated(EventHandler`1<WorkflowTerminatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_WorkflowTerminated(EventHandler`1<WorkflowTerminatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_WorkflowAborted(EventHandler`1<WorkflowEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_WorkflowAborted(EventHandler`1<WorkflowEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_WorkflowSuspended(EventHandler`1<WorkflowSuspendedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_WorkflowSuspended(EventHandler`1<WorkflowSuspendedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_WorkflowPersisted(EventHandler`1<WorkflowEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_WorkflowPersisted(EventHandler`1<WorkflowEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_WorkflowResumed(EventHandler`1<WorkflowEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_WorkflowResumed(EventHandler`1<WorkflowEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_WorkflowDynamicallyChanged(EventHandler`1<WorkflowEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_WorkflowDynamicallyChanged(EventHandler`1<WorkflowEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ServicesExceptionNotHandled(EventHandler`1<ServicesExceptionNotHandledEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ServicesExceptionNotHandled(EventHandler`1<ServicesExceptionNotHandledEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Stopped(EventHandler`1<WorkflowRuntimeEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Stopped(EventHandler`1<WorkflowRuntimeEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Started(EventHandler`1<WorkflowRuntimeEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Started(EventHandler`1<WorkflowRuntimeEventArgs> value);
    internal WorkflowExecutor Load(WorkflowInstance instance);
    internal WorkflowExecutor Load(Guid key, CreationContext context, WorkflowInstance workflowInstance);
    internal void ReplaceWorkflowExecutor(Guid instanceId, WorkflowExecutor oldWorkflowExecutor, WorkflowExecutor newWorkflowExecutor);
    internal void OnIdle(WorkflowExecutor executor);
    internal void OnScheduleCompleted(WorkflowExecutor schedule, WorkflowCompletedEventArgs args);
    internal void OnScheduleSuspended(WorkflowExecutor schedule, WorkflowSuspendedEventArgs args);
    internal void OnScheduleTerminated(WorkflowExecutor schedule, WorkflowTerminatedEventArgs args);
    internal void OnScheduleLoaded(WorkflowExecutor schedule);
    internal void OnScheduleAborted(WorkflowExecutor schedule);
    internal void OnScheduleUnloaded(WorkflowExecutor schedule);
    internal void OnScheduleResumed(WorkflowExecutor schedule);
    internal void OnScheduleDynamicallyChanged(WorkflowExecutor schedule);
    internal void OnSchedulePersisted(WorkflowExecutor schedule);
    internal void RaiseServicesExceptionNotHandledEvent(Exception exception, Guid instanceId);
    public string get_Name();
    public void set_Name(string value);
    internal NameValueConfigurationCollection get_CommonParameters();
    internal Dictionary`2<string, Type> get_TrackingServiceReplacement();
    public void AddService(object service);
    public void RemoveService(object service);
    public ReadOnlyCollection`1<object> GetAllServices(Type serviceType);
    public T GetService();
    public ReadOnlyCollection`1<T> GetAllServices();
    public sealed virtual object GetService(Type serviceType);
    public void StartRuntime();
    internal void WorkflowExecutorCreated(WorkflowExecutor workflowExecutor, bool loaded);
    public void StopRuntime();
    public bool get_IsStarted();
    internal static TypeProvider CreateTypeProvider(Activity rootActivity);
    internal static void ClearTrackingProfileCache();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.WorkflowRuntimeEventArgs : EventArgs {
    public bool IsStarted { get; }
    internal WorkflowRuntimeEventArgs(bool isStarted);
    public bool get_IsStarted();
}
internal class System.Workflow.Runtime.WorkflowStateRollbackService : object {
    internal bool IsInstanceStateRevertRequested { get; }
    public WorkflowStateRollbackService(WorkflowExecutor workflowExecutor);
    internal bool get_IsInstanceStateRevertRequested();
    internal void CheckpointInstanceState();
    internal void RequestRevertToCheckpointState(Activity currentActivity, EventHandler`1<EventArgs> callbackHandler, EventArgs callbackData, bool suspendOnRevert, string suspendInfo);
    internal void DisposeCheckpointState();
    internal void RevertToCheckpointState();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.Runtime.WorkflowStatus : Enum {
    public int value__;
    public static WorkflowStatus Running;
    public static WorkflowStatus Completed;
    public static WorkflowStatus Suspended;
    public static WorkflowStatus Terminated;
    public static WorkflowStatus Created;
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.WorkflowSuspendedEventArgs : WorkflowEventArgs {
    public string Error { get; }
    internal WorkflowSuspendedEventArgs(WorkflowInstance instance, string error);
    public string get_Error();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.WorkflowTerminatedEventArgs : WorkflowEventArgs {
    public Exception Exception { get; }
    internal WorkflowTerminatedEventArgs(WorkflowInstance instance, string error);
    internal WorkflowTerminatedEventArgs(WorkflowInstance instance, Exception e);
    public Exception get_Exception();
}
internal class System.Workflow.Runtime.WorkflowTraceTransfer : object {
    public WorkflowTraceTransfer(Guid instanceId);
    public sealed virtual void Dispose();
}
