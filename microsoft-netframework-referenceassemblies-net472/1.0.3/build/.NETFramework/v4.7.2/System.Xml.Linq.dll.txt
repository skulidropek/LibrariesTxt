internal class MS.Internal.Xml.Linq.ComponentModel.XTypeDescriptionProvider`1 : TypeDescriptionProvider {
    public virtual ICustomTypeDescriptor GetTypeDescriptor(Type type, object instance);
}
[ExtensionAttribute]
public static class System.Xml.Linq.Extensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<XAttribute> Attributes(IEnumerable`1<XElement> source);
    [ExtensionAttribute]
public static IEnumerable`1<XAttribute> Attributes(IEnumerable`1<XElement> source, XName name);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> Ancestors(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> Ancestors(IEnumerable`1<T> source, XName name);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> AncestorsAndSelf(IEnumerable`1<XElement> source);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> AncestorsAndSelf(IEnumerable`1<XElement> source, XName name);
    [IteratorStateMachineAttribute("System.Xml.Linq.Extensions/<Nodes>d__6`1")]
[ExtensionAttribute]
public static IEnumerable`1<XNode> Nodes(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<XNode> DescendantNodes(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> Descendants(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> Descendants(IEnumerable`1<T> source, XName name);
    [ExtensionAttribute]
public static IEnumerable`1<XNode> DescendantNodesAndSelf(IEnumerable`1<XElement> source);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> DescendantsAndSelf(IEnumerable`1<XElement> source);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> DescendantsAndSelf(IEnumerable`1<XElement> source, XName name);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> Elements(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> Elements(IEnumerable`1<T> source, XName name);
    [ExtensionAttribute]
public static IEnumerable`1<T> InDocumentOrder(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static void Remove(IEnumerable`1<XAttribute> source);
    [ExtensionAttribute]
public static void Remove(IEnumerable`1<T> source);
}
[FlagsAttribute]
public enum System.Xml.Linq.LoadOptions : Enum {
    public int value__;
    public static LoadOptions None;
    public static LoadOptions PreserveWhitespace;
    public static LoadOptions SetBaseUri;
    public static LoadOptions SetLineInfo;
}
internal class System.Xml.Linq.NameSerializer : object {
    private sealed virtual override object System.Runtime.Serialization.IObjectReference.GetRealObject(StreamingContext context);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum System.Xml.Linq.ReaderOptions : Enum {
    public int value__;
    public static ReaderOptions None;
    public static ReaderOptions OmitDuplicateNamespaces;
}
[FlagsAttribute]
public enum System.Xml.Linq.SaveOptions : Enum {
    public int value__;
    public static SaveOptions None;
    public static SaveOptions DisableFormatting;
    public static SaveOptions OmitDuplicateNamespaces;
}
[TypeDescriptionProviderAttribute("MS.Internal.Xml.Linq.ComponentModel.XTypeDescriptionProvider`1<System.Xml.Linq.XAttribute>")]
public class System.Xml.Linq.XAttribute : XObject {
    public static IEnumerable`1<XAttribute> EmptySequence { get; }
    public bool IsNamespaceDeclaration { get; }
    public XName Name { get; }
    public XAttribute NextAttribute { get; }
    public XmlNodeType NodeType { get; }
    public XAttribute PreviousAttribute { get; }
    public string Value { get; public set; }
    public XAttribute(XName name, object value);
    public XAttribute(XAttribute other);
    public static IEnumerable`1<XAttribute> get_EmptySequence();
    public bool get_IsNamespaceDeclaration();
    public XName get_Name();
    public XAttribute get_NextAttribute();
    public virtual XmlNodeType get_NodeType();
    public XAttribute get_PreviousAttribute();
    public string get_Value();
    public void set_Value(string value);
    public void Remove();
    public void SetValue(object value);
    public virtual string ToString();
    [CLSCompliantAttribute("False")]
public static string op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static bool op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static Nullable`1<bool> op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static int op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static Nullable`1<int> op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static UInt32 op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static long op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static Nullable`1<long> op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static ulong op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static float op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static Nullable`1<float> op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static double op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static Nullable`1<double> op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static decimal op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static Nullable`1<decimal> op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static DateTime op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static Nullable`1<DateTime> op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static DateTimeOffset op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static Nullable`1<DateTimeOffset> op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static TimeSpan op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static Nullable`1<TimeSpan> op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static Guid op_Explicit(XAttribute attribute);
    [CLSCompliantAttribute("False")]
public static Nullable`1<Guid> op_Explicit(XAttribute attribute);
}
public class System.Xml.Linq.XCData : XText {
    public XmlNodeType NodeType { get; }
    public XCData(string value);
    public XCData(XCData other);
    public virtual XmlNodeType get_NodeType();
    public virtual void WriteTo(XmlWriter writer);
}
public class System.Xml.Linq.XComment : XNode {
    public XmlNodeType NodeType { get; }
    public string Value { get; public set; }
    public XComment(string value);
    public XComment(XComment other);
    public virtual XmlNodeType get_NodeType();
    public string get_Value();
    public void set_Value(string value);
    public virtual void WriteTo(XmlWriter writer);
}
public abstract class System.Xml.Linq.XContainer : XNode {
    public XNode FirstNode { get; }
    public XNode LastNode { get; }
    public XNode get_FirstNode();
    public XNode get_LastNode();
    public void Add(object content);
    public void Add(Object[] content);
    public void AddFirst(object content);
    public void AddFirst(Object[] content);
    public XmlWriter CreateWriter();
    public IEnumerable`1<XNode> DescendantNodes();
    public IEnumerable`1<XElement> Descendants();
    public IEnumerable`1<XElement> Descendants(XName name);
    public XElement Element(XName name);
    public IEnumerable`1<XElement> Elements();
    public IEnumerable`1<XElement> Elements(XName name);
    [IteratorStateMachineAttribute("System.Xml.Linq.XContainer/<Nodes>d__18")]
public IEnumerable`1<XNode> Nodes();
    public void RemoveNodes();
    public void ReplaceNodes(object content);
    public void ReplaceNodes(Object[] content);
}
public class System.Xml.Linq.XDeclaration : object {
    public string Encoding { get; public set; }
    public string Standalone { get; public set; }
    public string Version { get; public set; }
    public XDeclaration(string version, string encoding, string standalone);
    public XDeclaration(XDeclaration other);
    public string get_Encoding();
    public void set_Encoding(string value);
    public string get_Standalone();
    public void set_Standalone(string value);
    public string get_Version();
    public void set_Version(string value);
    public virtual string ToString();
}
public class System.Xml.Linq.XDocument : XContainer {
    public XDeclaration Declaration { get; public set; }
    public XDocumentType DocumentType { get; }
    public XmlNodeType NodeType { get; }
    public XElement Root { get; }
    public XDocument(Object[] content);
    public XDocument(XDeclaration declaration, Object[] content);
    public XDocument(XDocument other);
    public XDeclaration get_Declaration();
    public void set_Declaration(XDeclaration value);
    public XDocumentType get_DocumentType();
    public virtual XmlNodeType get_NodeType();
    public XElement get_Root();
    public static XDocument Load(string uri);
    public static XDocument Load(string uri, LoadOptions options);
    public static XDocument Load(Stream stream);
    public static XDocument Load(Stream stream, LoadOptions options);
    public static XDocument Load(TextReader textReader);
    public static XDocument Load(TextReader textReader, LoadOptions options);
    public static XDocument Load(XmlReader reader);
    public static XDocument Load(XmlReader reader, LoadOptions options);
    public static XDocument Parse(string text);
    public static XDocument Parse(string text, LoadOptions options);
    public void Save(string fileName);
    public void Save(string fileName, SaveOptions options);
    public void Save(Stream stream);
    public void Save(Stream stream, SaveOptions options);
    public void Save(TextWriter textWriter);
    public void Save(TextWriter textWriter, SaveOptions options);
    public void Save(XmlWriter writer);
    public virtual void WriteTo(XmlWriter writer);
}
public class System.Xml.Linq.XDocumentType : XNode {
    public string InternalSubset { get; public set; }
    public string Name { get; public set; }
    public XmlNodeType NodeType { get; }
    public string PublicId { get; public set; }
    public string SystemId { get; public set; }
    public XDocumentType(string name, string publicId, string systemId, string internalSubset);
    public XDocumentType(XDocumentType other);
    public string get_InternalSubset();
    public void set_InternalSubset(string value);
    public string get_Name();
    public void set_Name(string value);
    public virtual XmlNodeType get_NodeType();
    public string get_PublicId();
    public void set_PublicId(string value);
    public string get_SystemId();
    public void set_SystemId(string value);
    public virtual void WriteTo(XmlWriter writer);
}
[XmlSchemaProviderAttribute("")]
[TypeDescriptionProviderAttribute("MS.Internal.Xml.Linq.ComponentModel.XTypeDescriptionProvider`1<System.Xml.Linq.XElement>")]
public class System.Xml.Linq.XElement : XContainer {
    public static IEnumerable`1<XElement> EmptySequence { get; }
    public XAttribute FirstAttribute { get; }
    public bool HasAttributes { get; }
    public bool HasElements { get; }
    public bool IsEmpty { get; }
    public XAttribute LastAttribute { get; }
    public XName Name { get; public set; }
    public XmlNodeType NodeType { get; }
    public string Value { get; public set; }
    public XElement(XName name);
    public XElement(XName name, object content);
    public XElement(XName name, Object[] content);
    public XElement(XElement other);
    public XElement(XStreamingElement other);
    public static IEnumerable`1<XElement> get_EmptySequence();
    public XAttribute get_FirstAttribute();
    public bool get_HasAttributes();
    public bool get_HasElements();
    public bool get_IsEmpty();
    public XAttribute get_LastAttribute();
    public XName get_Name();
    public void set_Name(XName value);
    public virtual XmlNodeType get_NodeType();
    public string get_Value();
    public void set_Value(string value);
    public IEnumerable`1<XElement> AncestorsAndSelf();
    public IEnumerable`1<XElement> AncestorsAndSelf(XName name);
    public XAttribute Attribute(XName name);
    public IEnumerable`1<XAttribute> Attributes();
    public IEnumerable`1<XAttribute> Attributes(XName name);
    public IEnumerable`1<XNode> DescendantNodesAndSelf();
    public IEnumerable`1<XElement> DescendantsAndSelf();
    public IEnumerable`1<XElement> DescendantsAndSelf(XName name);
    public XNamespace GetDefaultNamespace();
    public XNamespace GetNamespaceOfPrefix(string prefix);
    public string GetPrefixOfNamespace(XNamespace ns);
    public static XElement Load(string uri);
    public static XElement Load(string uri, LoadOptions options);
    public static XElement Load(Stream stream);
    public static XElement Load(Stream stream, LoadOptions options);
    public static XElement Load(TextReader textReader);
    public static XElement Load(TextReader textReader, LoadOptions options);
    public static XElement Load(XmlReader reader);
    public static XElement Load(XmlReader reader, LoadOptions options);
    public static XElement Parse(string text);
    public static XElement Parse(string text, LoadOptions options);
    public void RemoveAll();
    public void RemoveAttributes();
    public void ReplaceAll(object content);
    public void ReplaceAll(Object[] content);
    public void ReplaceAttributes(object content);
    public void ReplaceAttributes(Object[] content);
    public void Save(string fileName);
    public void Save(string fileName, SaveOptions options);
    public void Save(Stream stream);
    public void Save(Stream stream, SaveOptions options);
    public void Save(TextWriter textWriter);
    public void Save(TextWriter textWriter, SaveOptions options);
    public void Save(XmlWriter writer);
    public void SetAttributeValue(XName name, object value);
    public void SetElementValue(XName name, object value);
    public void SetValue(object value);
    public virtual void WriteTo(XmlWriter writer);
    [CLSCompliantAttribute("False")]
public static string op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static bool op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static Nullable`1<bool> op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static int op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static Nullable`1<int> op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static UInt32 op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static long op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static Nullable`1<long> op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static ulong op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static float op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static Nullable`1<float> op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static double op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static Nullable`1<double> op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static decimal op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static Nullable`1<decimal> op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static DateTime op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static Nullable`1<DateTime> op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static DateTimeOffset op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static Nullable`1<DateTimeOffset> op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static TimeSpan op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static Nullable`1<TimeSpan> op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static Guid op_Explicit(XElement element);
    [CLSCompliantAttribute("False")]
public static Nullable`1<Guid> op_Explicit(XElement element);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
}
[KnownTypeAttribute("System.Xml.Linq.NameSerializer")]
public class System.Xml.Linq.XName : object {
    public string LocalName { get; }
    public XNamespace Namespace { get; }
    public string NamespaceName { get; }
    public string get_LocalName();
    public XNamespace get_Namespace();
    public string get_NamespaceName();
    public virtual string ToString();
    public static XName Get(string expandedName);
    public static XName Get(string localName, string namespaceName);
    [CLSCompliantAttribute("False")]
public static XName op_Implicit(string expandedName);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(XName left, XName right);
    public static bool op_Inequality(XName left, XName right);
    private sealed virtual override bool System.IEquatable<System.Xml.Linq.XName>.Equals(XName other);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Xml.Linq.XNamespace : object {
    public string NamespaceName { get; }
    public static XNamespace None { get; }
    public static XNamespace Xml { get; }
    public static XNamespace Xmlns { get; }
    public string get_NamespaceName();
    public XName GetName(string localName);
    public virtual string ToString();
    public static XNamespace get_None();
    public static XNamespace get_Xml();
    public static XNamespace get_Xmlns();
    public static XNamespace Get(string namespaceName);
    [CLSCompliantAttribute("False")]
public static XNamespace op_Implicit(string namespaceName);
    public static XName op_Addition(XNamespace ns, string localName);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(XNamespace left, XNamespace right);
    public static bool op_Inequality(XNamespace left, XNamespace right);
}
public abstract class System.Xml.Linq.XNode : XObject {
    public XNode NextNode { get; }
    public XNode PreviousNode { get; }
    public static XNodeDocumentOrderComparer DocumentOrderComparer { get; }
    public static XNodeEqualityComparer EqualityComparer { get; }
    public XNode get_NextNode();
    public XNode get_PreviousNode();
    public static XNodeDocumentOrderComparer get_DocumentOrderComparer();
    public static XNodeEqualityComparer get_EqualityComparer();
    public void AddAfterSelf(object content);
    public void AddAfterSelf(Object[] content);
    public void AddBeforeSelf(object content);
    public void AddBeforeSelf(Object[] content);
    public IEnumerable`1<XElement> Ancestors();
    public IEnumerable`1<XElement> Ancestors(XName name);
    public static int CompareDocumentOrder(XNode n1, XNode n2);
    public XmlReader CreateReader();
    public XmlReader CreateReader(ReaderOptions readerOptions);
    [IteratorStateMachineAttribute("System.Xml.Linq.XNode/<NodesAfterSelf>d__21")]
public IEnumerable`1<XNode> NodesAfterSelf();
    [IteratorStateMachineAttribute("System.Xml.Linq.XNode/<NodesBeforeSelf>d__22")]
public IEnumerable`1<XNode> NodesBeforeSelf();
    public IEnumerable`1<XElement> ElementsAfterSelf();
    public IEnumerable`1<XElement> ElementsAfterSelf(XName name);
    public IEnumerable`1<XElement> ElementsBeforeSelf();
    public IEnumerable`1<XElement> ElementsBeforeSelf(XName name);
    public bool IsAfter(XNode node);
    public bool IsBefore(XNode node);
    public static XNode ReadFrom(XmlReader reader);
    public void Remove();
    public void ReplaceWith(object content);
    public void ReplaceWith(Object[] content);
    public virtual string ToString();
    public string ToString(SaveOptions options);
    public static bool DeepEquals(XNode n1, XNode n2);
    public abstract virtual void WriteTo(XmlWriter writer);
}
public class System.Xml.Linq.XNodeDocumentOrderComparer : object {
    public sealed virtual int Compare(XNode x, XNode y);
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
}
public class System.Xml.Linq.XNodeEqualityComparer : object {
    public sealed virtual bool Equals(XNode x, XNode y);
    public sealed virtual int GetHashCode(XNode obj);
    private sealed virtual override bool System.Collections.IEqualityComparer.Equals(object x, object y);
    private sealed virtual override int System.Collections.IEqualityComparer.GetHashCode(object obj);
}
public abstract class System.Xml.Linq.XObject : object {
    public string BaseUri { get; }
    public XDocument Document { get; }
    public XmlNodeType NodeType { get; }
    public XElement Parent { get; }
    private int System.Xml.IXmlLineInfo.LineNumber { get; }
    private int System.Xml.IXmlLineInfo.LinePosition { get; }
    public string get_BaseUri();
    public XDocument get_Document();
    public abstract virtual XmlNodeType get_NodeType();
    public XElement get_Parent();
    public void AddAnnotation(object annotation);
    public object Annotation(Type type);
    public T Annotation();
    public IEnumerable`1<object> Annotations(Type type);
    [IteratorStateMachineAttribute("System.Xml.Linq.XObject/<Annotations>d__16`1")]
public IEnumerable`1<T> Annotations();
    public void RemoveAnnotations(Type type);
    public void RemoveAnnotations();
    public void add_Changed(EventHandler`1<XObjectChangeEventArgs> value);
    public void remove_Changed(EventHandler`1<XObjectChangeEventArgs> value);
    public void add_Changing(EventHandler`1<XObjectChangeEventArgs> value);
    public void remove_Changing(EventHandler`1<XObjectChangeEventArgs> value);
    private sealed virtual override bool System.Xml.IXmlLineInfo.HasLineInfo();
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LineNumber();
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LinePosition();
}
public enum System.Xml.Linq.XObjectChange : Enum {
    public int value__;
    public static XObjectChange Add;
    public static XObjectChange Remove;
    public static XObjectChange Name;
    public static XObjectChange Value;
}
public class System.Xml.Linq.XObjectChangeEventArgs : EventArgs {
    public static XObjectChangeEventArgs Add;
    public static XObjectChangeEventArgs Remove;
    public static XObjectChangeEventArgs Name;
    public static XObjectChangeEventArgs Value;
    public XObjectChange ObjectChange { get; }
    public XObjectChangeEventArgs(XObjectChange objectChange);
    private static XObjectChangeEventArgs();
    public XObjectChange get_ObjectChange();
}
public class System.Xml.Linq.XProcessingInstruction : XNode {
    public string Data { get; public set; }
    public XmlNodeType NodeType { get; }
    public string Target { get; public set; }
    public XProcessingInstruction(string target, string data);
    public XProcessingInstruction(XProcessingInstruction other);
    public string get_Data();
    public void set_Data(string value);
    public virtual XmlNodeType get_NodeType();
    public string get_Target();
    public void set_Target(string value);
    public virtual void WriteTo(XmlWriter writer);
}
public class System.Xml.Linq.XStreamingElement : object {
    public XName Name { get; public set; }
    public XStreamingElement(XName name);
    public XStreamingElement(XName name, object content);
    public XStreamingElement(XName name, Object[] content);
    public XName get_Name();
    public void set_Name(XName value);
    public void Add(object content);
    public void Add(Object[] content);
    public void Save(string fileName);
    public void Save(string fileName, SaveOptions options);
    public void Save(Stream stream);
    public void Save(Stream stream, SaveOptions options);
    public void Save(TextWriter textWriter);
    public void Save(TextWriter textWriter, SaveOptions options);
    public void Save(XmlWriter writer);
    public virtual string ToString();
    public string ToString(SaveOptions options);
    public void WriteTo(XmlWriter writer);
}
public class System.Xml.Linq.XText : XNode {
    public XmlNodeType NodeType { get; }
    public string Value { get; public set; }
    public XText(string value);
    public XText(XText other);
    public virtual XmlNodeType get_NodeType();
    public string get_Value();
    public void set_Value(string value);
    public virtual void WriteTo(XmlWriter writer);
}
[ExtensionAttribute]
public static class System.Xml.Schema.Extensions : object {
    [ExtensionAttribute]
public static IXmlSchemaInfo GetSchemaInfo(XElement source);
    [ExtensionAttribute]
public static IXmlSchemaInfo GetSchemaInfo(XAttribute source);
    [ExtensionAttribute]
public static void Validate(XDocument source, XmlSchemaSet schemas, ValidationEventHandler validationEventHandler);
    [ExtensionAttribute]
public static void Validate(XDocument source, XmlSchemaSet schemas, ValidationEventHandler validationEventHandler, bool addSchemaInfo);
    [ExtensionAttribute]
public static void Validate(XElement source, XmlSchemaObject partialValidationType, XmlSchemaSet schemas, ValidationEventHandler validationEventHandler);
    [ExtensionAttribute]
public static void Validate(XElement source, XmlSchemaObject partialValidationType, XmlSchemaSet schemas, ValidationEventHandler validationEventHandler, bool addSchemaInfo);
    [ExtensionAttribute]
public static void Validate(XAttribute source, XmlSchemaObject partialValidationType, XmlSchemaSet schemas, ValidationEventHandler validationEventHandler);
    [ExtensionAttribute]
public static void Validate(XAttribute source, XmlSchemaObject partialValidationType, XmlSchemaSet schemas, ValidationEventHandler validationEventHandler, bool addSchemaInfo);
}
[ExtensionAttribute]
public static class System.Xml.XPath.Extensions : object {
    [ExtensionAttribute]
public static XPathNavigator CreateNavigator(XNode node);
    [ExtensionAttribute]
public static XPathNavigator CreateNavigator(XNode node, XmlNameTable nameTable);
    [ExtensionAttribute]
public static object XPathEvaluate(XNode node, string expression);
    [ExtensionAttribute]
public static object XPathEvaluate(XNode node, string expression, IXmlNamespaceResolver resolver);
    [ExtensionAttribute]
public static XElement XPathSelectElement(XNode node, string expression);
    [ExtensionAttribute]
public static XElement XPathSelectElement(XNode node, string expression, IXmlNamespaceResolver resolver);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> XPathSelectElements(XNode node, string expression);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> XPathSelectElements(XNode node, string expression, IXmlNamespaceResolver resolver);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class System.Xml.XPath.XDocumentExtensions : object {
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static IXPathNavigable ToXPathNavigable(XNode node);
}
