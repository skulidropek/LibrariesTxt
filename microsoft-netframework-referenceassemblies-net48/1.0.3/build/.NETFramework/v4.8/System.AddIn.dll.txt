[AttributeUsageAttribute("4")]
public class System.AddIn.AddInAttribute : Attribute {
    public string Name { get; }
    public string Publisher { get; public set; }
    public string Version { get; public set; }
    public string Description { get; public set; }
    public AddInAttribute(string name);
    public string get_Name();
    public string get_Publisher();
    public void set_Publisher(string value);
    public string get_Version();
    public void set_Version(string value);
    public string get_Description();
    public void set_Description(string value);
}
public class System.AddIn.Hosting.AddInController : object {
    public AppDomain AppDomain { get; }
    public AddInToken Token { get; }
    public AddInEnvironment AddInEnvironment { get; }
    public static AddInController GetAddInController(object addIn);
    [ReliabilityContractAttribute("3", "1")]
public void Shutdown();
    public AppDomain get_AppDomain();
    public AddInToken get_Token();
    public AddInEnvironment get_AddInEnvironment();
}
public class System.AddIn.Hosting.AddInEnvironment : object {
    public AddInProcess Process { get; }
    public AddInEnvironment(AppDomain appDomain);
    public AddInProcess get_Process();
}
public class System.AddIn.Hosting.AddInProcess : object {
    public TimeSpan StartupTimeout { get; public set; }
    public Platform Platform { get; }
    public int ProcessId { get; }
    public bool IsCurrentProcess { get; }
    public bool KeepAlive { get; public set; }
    [SecurityCriticalAttribute]
public AddInProcess(Platform platform);
    private static AddInProcess();
    public TimeSpan get_StartupTimeout();
    public void set_StartupTimeout(TimeSpan value);
    public Platform get_Platform();
    public int get_ProcessId();
    public bool get_IsCurrentProcess();
    public bool get_KeepAlive();
    public void set_KeepAlive(bool value);
    [CompilerGeneratedAttribute]
public void add_ShuttingDown(EventHandler`1<CancelEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ShuttingDown(EventHandler`1<CancelEventArgs> value);
    [SecurityCriticalAttribute]
public bool Start();
    public bool Shutdown();
}
public enum System.AddIn.Hosting.AddInSecurityLevel : Enum {
    public int value__;
    public static AddInSecurityLevel Internet;
    public static AddInSecurityLevel Intranet;
    public static AddInSecurityLevel FullTrust;
    public static AddInSecurityLevel Host;
}
public class System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException : Exception {
    public AddInSegmentDirectoryNotFoundException(string message);
    public AddInSegmentDirectoryNotFoundException(string message, Exception innerException);
    protected AddInSegmentDirectoryNotFoundException(SerializationInfo info, StreamingContext context);
}
public enum System.AddIn.Hosting.AddInSegmentType : Enum {
    public int value__;
    public static AddInSegmentType HostViewOfAddIn;
    public static AddInSegmentType HostSideAdapter;
    public static AddInSegmentType Contract;
    public static AddInSegmentType AddInSideAdapter;
    public static AddInSegmentType AddInView;
    public static AddInSegmentType AddIn;
}
public static class System.AddIn.Hosting.AddInStore : object {
    private static AddInStore();
    [SecuritySafeCriticalAttribute]
public static String[] Update(PipelineStoreLocation location);
    [SecurityCriticalAttribute]
public static String[] Update(string pipelineRootFolderPath);
    [SecurityCriticalAttribute]
public static String[] UpdateAddIns(string addInsFolderPath);
    [SecurityCriticalAttribute]
public static String[] RebuildAddIns(string addInsFolderPath);
    [SecurityCriticalAttribute]
public static String[] Rebuild(string pipelineRootFolderPath);
    [SecuritySafeCriticalAttribute]
public static String[] Rebuild(PipelineStoreLocation location);
    [SecuritySafeCriticalAttribute]
public static Collection`1<AddInToken> FindAddIns(Type hostViewOfAddIn, PipelineStoreLocation location);
    [SecurityCriticalAttribute]
public static Collection`1<AddInToken> FindAddIns(Type hostViewOfAddIn, PipelineStoreLocation location, String[] addInFolderPaths);
    [SecurityCriticalAttribute]
public static Collection`1<AddInToken> FindAddIns(Type hostViewOfAddIn, string pipelineRootFolderPath, String[] addInFolderPaths);
    [SecurityCriticalAttribute]
public static Collection`1<AddInToken> FindAddIn(Type hostViewOfAddIn, string pipelineRootFolderPath, string addInFilePath, string addInTypeName);
}
public class System.AddIn.Hosting.AddInToken : object {
    public static bool EnableDirectConnect { get; public set; }
    public IDictionary`2<AddInSegmentType, IDictionary`2<string, string>> QualificationData { get; }
    public string AddInFullName { get; }
    public string Name { get; }
    public string Publisher { get; }
    public string Version { get; }
    public string Description { get; }
    public AssemblyName AssemblyName { get; }
    public static bool get_EnableDirectConnect();
    public static void set_EnableDirectConnect(bool value);
    public IDictionary`2<AddInSegmentType, IDictionary`2<string, string>> get_QualificationData();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<QualificationDataItem> GetEnumerator();
    public string get_AddInFullName();
    public string get_Name();
    public string get_Publisher();
    public string get_Version();
    public string get_Description();
    public virtual string ToString();
    public AssemblyName get_AssemblyName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public T Activate(AddInSecurityLevel trustLevel);
    public T Activate(AddInSecurityLevel trustLevel, string appDomainName);
    public T Activate(AppDomain target);
    public T Activate(PermissionSet permissions);
    [SecuritySafeCriticalAttribute]
public T Activate(AddInProcess process, PermissionSet permissionSet);
    [SecuritySafeCriticalAttribute]
public T Activate(AddInProcess process, AddInSecurityLevel level);
    public T Activate(AddInEnvironment environment);
}
public class System.AddIn.Hosting.InvalidPipelineStoreException : Exception {
    public InvalidPipelineStoreException(string message);
    public InvalidPipelineStoreException(string message, Exception innerException);
    protected InvalidPipelineStoreException(SerializationInfo info, StreamingContext context);
}
public enum System.AddIn.Hosting.PipelineStoreLocation : Enum {
    public int value__;
    public static PipelineStoreLocation ApplicationBase;
}
public enum System.AddIn.Hosting.Platform : Enum {
    public int value__;
    public static Platform Host;
    public static Platform AnyCpu;
    public static Platform X86;
    public static Platform X64;
    public static Platform ARM;
}
public class System.AddIn.Hosting.QualificationDataItem : ValueType {
    private AddInSegmentType m_type;
    private string m_key;
    private string m_value;
    public AddInSegmentType Segment { get; }
    public string Name { get; }
    public string Value { get; }
    public AddInSegmentType get_Segment();
    public string get_Name();
    public string get_Value();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(QualificationDataItem item1, QualificationDataItem item2);
    public static bool op_Inequality(QualificationDataItem item1, QualificationDataItem item2);
}
[AttributeUsageAttribute("4")]
public class System.AddIn.Pipeline.AddInAdapterAttribute : Attribute {
}
[AttributeUsageAttribute("1028")]
public class System.AddIn.Pipeline.AddInBaseAttribute : Attribute {
    public Type[] ActivatableAs { get; public set; }
    public Type[] get_ActivatableAs();
    public void set_ActivatableAs(Type[] value);
}
public static class System.AddIn.Pipeline.CollectionAdapters : object {
    public static IListContract`1<TContract> ToIListContract(IList`1<TView> collection, Converter`2<TView, TContract> viewContractAdapter, Converter`2<TContract, TView> contractViewAdapter);
    public static IListContract`1<T> ToIListContract(IList`1<T> collection);
    public static IList`1<TView> ToIList(IListContract`1<TContract> collection, Converter`2<TContract, TView> contractViewAdapter, Converter`2<TView, TContract> viewContractAdapter);
    public static IList`1<T> ToIList(IListContract`1<T> collection);
}
public static class System.AddIn.Pipeline.ContractAdapter : object {
    public static ContractHandle ViewToContractAdapter(object view);
    [SecuritySafeCriticalAttribute]
public static TView ContractToViewAdapter(ContractHandle contract, PipelineStoreLocation location);
    [SecuritySafeCriticalAttribute]
public static TView ContractToViewAdapter(ContractHandle contract, string pipelineRoot);
}
public class System.AddIn.Pipeline.ContractBase : MarshalByRefObject {
    public virtual bool RemoteEquals(IContract contract);
    public virtual string RemoteToString();
    public virtual int GetRemoteHashCode();
    public virtual IContract QueryContract(string contractIdentifier);
    public sealed virtual int AcquireLifetimeToken();
    [SecuritySafeCriticalAttribute]
public sealed virtual void RevokeLifetimeToken(int token);
    protected virtual void OnFinalRevoke();
    [SecurityCriticalAttribute]
public sealed virtual TimeSpan Renewal(ILease lease);
}
public class System.AddIn.Pipeline.ContractHandle : object {
    public IContract Contract { get; }
    public ContractHandle(IContract contract);
    public IContract get_Contract();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public static bool ContractOwnsAppDomain(IContract contract, AppDomain domain);
    public static IContract AppDomainOwner(AppDomain domain);
}
[AttributeUsageAttribute("4")]
public class System.AddIn.Pipeline.HostAdapterAttribute : Attribute {
}
