public class System.Data.Services.Client.ChangeOperationResponse : OperationResponse {
    public Descriptor Descriptor { get; }
    public Descriptor get_Descriptor();
}
[DebuggerDisplayAttribute("{Message}")]
public class System.Data.Services.Client.DataServiceClientException : InvalidOperationException {
    public int StatusCode { get; }
    public DataServiceClientException(string message);
    public DataServiceClientException(string message, Exception innerException);
    public DataServiceClientException(string message, int statusCode);
    public DataServiceClientException(string message, Exception innerException, int statusCode);
    protected DataServiceClientException(SerializationInfo serializationInfo, StreamingContext context);
    public int get_StatusCode();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Data.Services.Client.DataServiceCollection`1 : ObservableCollection`1<T> {
    public DataServiceQueryContinuation`1<T> Continuation { get; public set; }
    public DataServiceCollection`1(IEnumerable`1<T> items);
    public DataServiceCollection`1(IEnumerable`1<T> items, TrackingMode trackingMode);
    public DataServiceCollection`1(DataServiceContext context);
    public DataServiceCollection`1(DataServiceContext context, string entitySetName, Func`2<EntityChangedParams, bool> entityChangedCallback, Func`2<EntityCollectionChangedParams, bool> collectionChangedCallback);
    public DataServiceCollection`1(IEnumerable`1<T> items, TrackingMode trackingMode, string entitySetName, Func`2<EntityChangedParams, bool> entityChangedCallback, Func`2<EntityCollectionChangedParams, bool> collectionChangedCallback);
    public DataServiceCollection`1(DataServiceContext context, IEnumerable`1<T> items, TrackingMode trackingMode, string entitySetName, Func`2<EntityChangedParams, bool> entityChangedCallback, Func`2<EntityCollectionChangedParams, bool> collectionChangedCallback);
    public DataServiceQueryContinuation`1<T> get_Continuation();
    public void set_Continuation(DataServiceQueryContinuation`1<T> value);
    public void Load(IEnumerable`1<T> items);
    public void Load(T item);
    public void Clear(bool stopTracking);
    public void Detach();
    protected virtual void InsertItem(int index, T item);
}
public class System.Data.Services.Client.DataServiceContext : object {
    public Uri BaseUri { get; }
    public ICredentials Credentials { get; public set; }
    public MergeOption MergeOption { get; public set; }
    public bool ApplyingChanges { get; internal set; }
    public bool IgnoreMissingProperties { get; public set; }
    public string DataNamespace { get; public set; }
    public Func`2<Type, string> ResolveName { get; public set; }
    public Func`2<string, Type> ResolveType { get; public set; }
    public int Timeout { get; public set; }
    public Uri TypeScheme { get; public set; }
    public bool UsePostTunneling { get; public set; }
    public ReadOnlyCollection`1<LinkDescriptor> Links { get; }
    public ReadOnlyCollection`1<EntityDescriptor> Entities { get; }
    public SaveChangesOptions SaveChangesDefaultOptions { get; public set; }
    public bool IgnoreResourceNotFoundException { get; public set; }
    public DataServiceContext(Uri serviceRoot);
    private static DataServiceContext();
    [CompilerGeneratedAttribute]
public void add_SendingRequest(EventHandler`1<SendingRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SendingRequest(EventHandler`1<SendingRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ReadingEntity(EventHandler`1<ReadingWritingEntityEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ReadingEntity(EventHandler`1<ReadingWritingEntityEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_WritingEntity(EventHandler`1<ReadingWritingEntityEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_WritingEntity(EventHandler`1<ReadingWritingEntityEventArgs> value);
    public Uri get_BaseUri();
    public ICredentials get_Credentials();
    public void set_Credentials(ICredentials value);
    public MergeOption get_MergeOption();
    public void set_MergeOption(MergeOption value);
    public bool get_ApplyingChanges();
    internal void set_ApplyingChanges(bool value);
    public bool get_IgnoreMissingProperties();
    public void set_IgnoreMissingProperties(bool value);
    public string get_DataNamespace();
    public void set_DataNamespace(string value);
    public Func`2<Type, string> get_ResolveName();
    public void set_ResolveName(Func`2<Type, string> value);
    public Func`2<string, Type> get_ResolveType();
    public void set_ResolveType(Func`2<string, Type> value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public Uri get_TypeScheme();
    public void set_TypeScheme(Uri value);
    public bool get_UsePostTunneling();
    public void set_UsePostTunneling(bool value);
    public ReadOnlyCollection`1<LinkDescriptor> get_Links();
    public ReadOnlyCollection`1<EntityDescriptor> get_Entities();
    public SaveChangesOptions get_SaveChangesDefaultOptions();
    public void set_SaveChangesDefaultOptions(SaveChangesOptions value);
    public bool get_IgnoreResourceNotFoundException();
    public void set_IgnoreResourceNotFoundException(bool value);
    public EntityDescriptor GetEntityDescriptor(object entity);
    public LinkDescriptor GetLinkDescriptor(object source, string sourceProperty, object target);
    public void CancelRequest(IAsyncResult asyncResult);
    public DataServiceQuery`1<T> CreateQuery(string entitySetName);
    public Uri GetMetadataUri();
    public IAsyncResult BeginLoadProperty(object entity, string propertyName, AsyncCallback callback, object state);
    public IAsyncResult BeginLoadProperty(object entity, string propertyName, Uri nextLinkUri, AsyncCallback callback, object state);
    public IAsyncResult BeginLoadProperty(object entity, string propertyName, DataServiceQueryContinuation continuation, AsyncCallback callback, object state);
    public QueryOperationResponse EndLoadProperty(IAsyncResult asyncResult);
    public QueryOperationResponse LoadProperty(object entity, string propertyName);
    public QueryOperationResponse LoadProperty(object entity, string propertyName, Uri nextLinkUri);
    public QueryOperationResponse LoadProperty(object entity, string propertyName, DataServiceQueryContinuation continuation);
    public QueryOperationResponse`1<T> LoadProperty(object entity, string propertyName, DataServiceQueryContinuation`1<T> continuation);
    public Uri GetReadStreamUri(object entity);
    public IAsyncResult BeginGetReadStream(object entity, DataServiceRequestArgs args, AsyncCallback callback, object state);
    public DataServiceStreamResponse EndGetReadStream(IAsyncResult asyncResult);
    public DataServiceStreamResponse GetReadStream(object entity);
    public DataServiceStreamResponse GetReadStream(object entity, string acceptContentType);
    public DataServiceStreamResponse GetReadStream(object entity, DataServiceRequestArgs args);
    public void SetSaveStream(object entity, Stream stream, bool closeStream, string contentType, string slug);
    public void SetSaveStream(object entity, Stream stream, bool closeStream, DataServiceRequestArgs args);
    public IAsyncResult BeginExecuteBatch(AsyncCallback callback, object state, DataServiceRequest[] queries);
    public DataServiceResponse EndExecuteBatch(IAsyncResult asyncResult);
    public DataServiceResponse ExecuteBatch(DataServiceRequest[] queries);
    public IAsyncResult BeginExecute(Uri requestUri, AsyncCallback callback, object state);
    public IAsyncResult BeginExecute(DataServiceQueryContinuation`1<T> continuation, AsyncCallback callback, object state);
    public IEnumerable`1<TElement> EndExecute(IAsyncResult asyncResult);
    public IEnumerable`1<TElement> Execute(Uri requestUri);
    public QueryOperationResponse`1<T> Execute(DataServiceQueryContinuation`1<T> continuation);
    public IAsyncResult BeginSaveChanges(AsyncCallback callback, object state);
    public IAsyncResult BeginSaveChanges(SaveChangesOptions options, AsyncCallback callback, object state);
    public DataServiceResponse EndSaveChanges(IAsyncResult asyncResult);
    public DataServiceResponse SaveChanges();
    public DataServiceResponse SaveChanges(SaveChangesOptions options);
    public void AddLink(object source, string sourceProperty, object target);
    public void AttachLink(object source, string sourceProperty, object target);
    public bool DetachLink(object source, string sourceProperty, object target);
    public void DeleteLink(object source, string sourceProperty, object target);
    public void SetLink(object source, string sourceProperty, object target);
    public void AddObject(string entitySetName, object entity);
    public void AddRelatedObject(object source, string sourceProperty, object target);
    public void AttachTo(string entitySetName, object entity);
    public void AttachTo(string entitySetName, object entity, string etag);
    public void DeleteObject(object entity);
    public bool Detach(object entity);
    public void UpdateObject(object entity);
    public bool TryGetEntity(Uri identity, TEntity& entity);
    public bool TryGetUri(object entity, Uri& identity);
}
public abstract class System.Data.Services.Client.DataServiceQuery : DataServiceRequest {
    public Expression Expression { get; }
    public IQueryProvider Provider { get; }
    public abstract virtual Expression get_Expression();
    public abstract virtual IQueryProvider get_Provider();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IEnumerable Execute();
    public IAsyncResult BeginExecute(AsyncCallback callback, object state);
    public IEnumerable EndExecute(IAsyncResult asyncResult);
}
public class System.Data.Services.Client.DataServiceQuery`1 : DataServiceQuery {
    public Type ElementType { get; }
    public Expression Expression { get; }
    public IQueryProvider Provider { get; }
    public Uri RequestUri { get; }
    public virtual Type get_ElementType();
    public virtual Expression get_Expression();
    public virtual IQueryProvider get_Provider();
    public virtual Uri get_RequestUri();
    public IAsyncResult BeginExecute(AsyncCallback callback, object state);
    public IEnumerable`1<TElement> EndExecute(IAsyncResult asyncResult);
    public IEnumerable`1<TElement> Execute();
    public DataServiceQuery`1<TElement> Expand(string path);
    public DataServiceQuery`1<TElement> IncludeTotalCount();
    public DataServiceQuery`1<TElement> AddQueryOption(string name, object value);
    public sealed virtual IEnumerator`1<TElement> GetEnumerator();
    public virtual string ToString();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DebuggerDisplayAttribute("{NextLinkUri}")]
public abstract class System.Data.Services.Client.DataServiceQueryContinuation : object {
    public Uri NextLinkUri { get; }
    public Uri get_NextLinkUri();
    public virtual string ToString();
}
public class System.Data.Services.Client.DataServiceQueryContinuation`1 : DataServiceQueryContinuation {
}
[DebuggerDisplayAttribute("{Message}")]
public class System.Data.Services.Client.DataServiceQueryException : InvalidOperationException {
    public QueryOperationResponse Response { get; }
    public DataServiceQueryException(string message);
    public DataServiceQueryException(string message, Exception innerException);
    public DataServiceQueryException(string message, Exception innerException, QueryOperationResponse response);
    protected DataServiceQueryException(SerializationInfo info, StreamingContext context);
    public QueryOperationResponse get_Response();
}
public abstract class System.Data.Services.Client.DataServiceRequest : object {
    public Type ElementType { get; }
    public Uri RequestUri { get; }
    public abstract virtual Type get_ElementType();
    public abstract virtual Uri get_RequestUri();
    public virtual string ToString();
}
public class System.Data.Services.Client.DataServiceRequest`1 : DataServiceRequest {
    public Type ElementType { get; }
    public Uri RequestUri { get; }
    public DataServiceRequest`1(Uri requestUri);
    public virtual Type get_ElementType();
    public virtual Uri get_RequestUri();
}
public class System.Data.Services.Client.DataServiceRequestArgs : object {
    public string AcceptContentType { get; public set; }
    public string ContentType { get; public set; }
    public string Slug { get; public set; }
    public Dictionary`2<string, string> Headers { get; }
    public string get_AcceptContentType();
    public void set_AcceptContentType(string value);
    public string get_ContentType();
    public void set_ContentType(string value);
    public string get_Slug();
    public void set_Slug(string value);
    public Dictionary`2<string, string> get_Headers();
}
[DebuggerDisplayAttribute("{Message}")]
public class System.Data.Services.Client.DataServiceRequestException : InvalidOperationException {
    public DataServiceResponse Response { get; }
    public DataServiceRequestException(string message);
    public DataServiceRequestException(string message, Exception innerException);
    public DataServiceRequestException(string message, Exception innerException, DataServiceResponse response);
    protected DataServiceRequestException(SerializationInfo info, StreamingContext context);
    public DataServiceResponse get_Response();
}
public class System.Data.Services.Client.DataServiceResponse : object {
    public IDictionary`2<string, string> BatchHeaders { get; }
    public int BatchStatusCode { get; }
    public bool IsBatchResponse { get; }
    public IDictionary`2<string, string> get_BatchHeaders();
    public int get_BatchStatusCode();
    public bool get_IsBatchResponse();
    public sealed virtual IEnumerator`1<OperationResponse> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Data.Services.Client.DataServiceStreamResponse : object {
    public string ContentType { get; }
    public string ContentDisposition { get; }
    public Dictionary`2<string, string> Headers { get; }
    public Stream Stream { get; }
    public string get_ContentType();
    public string get_ContentDisposition();
    public Dictionary`2<string, string> get_Headers();
    public Stream get_Stream();
    public sealed virtual void Dispose();
}
public abstract class System.Data.Services.Client.Descriptor : object {
    public EntityStates State { get; internal set; }
    public EntityStates get_State();
    internal void set_State(EntityStates value);
}
public class System.Data.Services.Client.EntityChangedParams : object {
    public DataServiceContext Context { get; }
    public object Entity { get; }
    public string PropertyName { get; }
    public object PropertyValue { get; }
    public string SourceEntitySet { get; }
    public string TargetEntitySet { get; }
    public DataServiceContext get_Context();
    public object get_Entity();
    public string get_PropertyName();
    public object get_PropertyValue();
    public string get_SourceEntitySet();
    public string get_TargetEntitySet();
}
public class System.Data.Services.Client.EntityCollectionChangedParams : object {
    public DataServiceContext Context { get; }
    public object SourceEntity { get; }
    public string PropertyName { get; }
    public string SourceEntitySet { get; }
    public object TargetEntity { get; }
    public string TargetEntitySet { get; }
    public ICollection Collection { get; }
    public NotifyCollectionChangedAction Action { get; }
    public DataServiceContext get_Context();
    public object get_SourceEntity();
    public string get_PropertyName();
    public string get_SourceEntitySet();
    public object get_TargetEntity();
    public string get_TargetEntitySet();
    public ICollection get_Collection();
    public NotifyCollectionChangedAction get_Action();
}
[DebuggerDisplayAttribute("State = {state}, Uri = {editLink}, Element = {entity.GetType().ToString()}")]
public class System.Data.Services.Client.EntityDescriptor : Descriptor {
    public string Identity { get; internal set; }
    public Uri SelfLink { get; internal set; }
    public Uri EditLink { get; internal set; }
    public Uri ReadStreamUri { get; internal set; }
    public Uri EditStreamUri { get; internal set; }
    public object Entity { get; }
    public string ETag { get; internal set; }
    public string StreamETag { get; internal set; }
    public EntityDescriptor ParentForInsert { get; }
    public string ParentPropertyForInsert { get; }
    public string ServerTypeName { get; internal set; }
    public string get_Identity();
    internal void set_Identity(string value);
    public Uri get_SelfLink();
    internal void set_SelfLink(Uri value);
    public Uri get_EditLink();
    internal void set_EditLink(Uri value);
    public Uri get_ReadStreamUri();
    internal void set_ReadStreamUri(Uri value);
    public Uri get_EditStreamUri();
    internal void set_EditStreamUri(Uri value);
    public object get_Entity();
    public string get_ETag();
    internal void set_ETag(string value);
    public string get_StreamETag();
    internal void set_StreamETag(string value);
    public EntityDescriptor get_ParentForInsert();
    public string get_ParentPropertyForInsert();
    public string get_ServerTypeName();
    internal void set_ServerTypeName(string value);
}
[FlagsAttribute]
public enum System.Data.Services.Client.EntityStates : Enum {
    public int value__;
    public static EntityStates Detached;
    public static EntityStates Unchanged;
    public static EntityStates Added;
    public static EntityStates Deleted;
    public static EntityStates Modified;
}
[DebuggerDisplayAttribute("State = {state}")]
public class System.Data.Services.Client.LinkDescriptor : Descriptor {
    public object Target { get; }
    public object Source { get; }
    public string SourceProperty { get; }
    private static LinkDescriptor();
    public object get_Target();
    public object get_Source();
    public string get_SourceProperty();
}
[AttributeUsageAttribute("4")]
public class System.Data.Services.Client.MediaEntryAttribute : Attribute {
    public string MediaMemberName { get; }
    public MediaEntryAttribute(string mediaMemberName);
    public string get_MediaMemberName();
}
public enum System.Data.Services.Client.MergeOption : Enum {
    public int value__;
    public static MergeOption AppendOnly;
    public static MergeOption OverwriteChanges;
    public static MergeOption PreserveChanges;
    public static MergeOption NoTracking;
}
[AttributeUsageAttribute("4")]
public class System.Data.Services.Client.MimeTypePropertyAttribute : Attribute {
    public string DataPropertyName { get; }
    public string MimeTypePropertyName { get; }
    public MimeTypePropertyAttribute(string dataPropertyName, string mimeTypePropertyName);
    public string get_DataPropertyName();
    public string get_MimeTypePropertyName();
}
public abstract class System.Data.Services.Client.OperationResponse : object {
    public IDictionary`2<string, string> Headers { get; }
    public int StatusCode { get; internal set; }
    public Exception Error { get; public set; }
    public IDictionary`2<string, string> get_Headers();
    public int get_StatusCode();
    internal void set_StatusCode(int value);
    public Exception get_Error();
    public void set_Error(Exception value);
}
public class System.Data.Services.Client.QueryOperationResponse : OperationResponse {
    public DataServiceRequest Query { get; }
    public long TotalCount { get; }
    public DataServiceRequest get_Query();
    public virtual long get_TotalCount();
    public sealed virtual IEnumerator GetEnumerator();
    public DataServiceQueryContinuation GetContinuation();
    public DataServiceQueryContinuation GetContinuation(IEnumerable collection);
    public DataServiceQueryContinuation`1<T> GetContinuation(IEnumerable`1<T> collection);
}
public class System.Data.Services.Client.QueryOperationResponse`1 : QueryOperationResponse {
    public long TotalCount { get; }
    public virtual long get_TotalCount();
    public DataServiceQueryContinuation`1<T> GetContinuation();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
}
public class System.Data.Services.Client.ReadingWritingEntityEventArgs : EventArgs {
    public object Entity { get; }
    public XElement Data { get; }
    public object get_Entity();
    [DebuggerStepThroughAttribute]
public XElement get_Data();
}
[FlagsAttribute]
public enum System.Data.Services.Client.SaveChangesOptions : Enum {
    public int value__;
    public static SaveChangesOptions None;
    public static SaveChangesOptions Batch;
    public static SaveChangesOptions ContinueOnError;
    public static SaveChangesOptions ReplaceOnUpdate;
}
public class System.Data.Services.Client.SendingRequestEventArgs : EventArgs {
    public WebRequest Request { get; public set; }
    public WebHeaderCollection RequestHeaders { get; }
    public WebRequest get_Request();
    public void set_Request(WebRequest value);
    public WebHeaderCollection get_RequestHeaders();
}
public enum System.Data.Services.Client.TrackingMode : Enum {
    public int value__;
    public static TrackingMode None;
    public static TrackingMode AutoChangeTracking;
}
[AttributeUsageAttribute("4")]
public class System.Data.Services.Common.DataServiceEntityAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class System.Data.Services.Common.DataServiceKeyAttribute : Attribute {
    public ReadOnlyCollection`1<string> KeyNames { get; }
    public DataServiceKeyAttribute(string keyName);
    public DataServiceKeyAttribute(String[] keyNames);
    public ReadOnlyCollection`1<string> get_KeyNames();
}
public enum System.Data.Services.Common.DataServiceProtocolVersion : Enum {
    public int value__;
    public static DataServiceProtocolVersion V1;
    public static DataServiceProtocolVersion V2;
}
[AttributeUsageAttribute("4")]
public class System.Data.Services.Common.EntityPropertyMappingAttribute : Attribute {
    public string SourcePath { get; }
    public string TargetPath { get; }
    public SyndicationItemProperty TargetSyndicationItem { get; }
    public string TargetNamespacePrefix { get; }
    public string TargetNamespaceUri { get; }
    public SyndicationTextContentKind TargetTextContentKind { get; }
    public bool KeepInContent { get; }
    public EntityPropertyMappingAttribute(string sourcePath, SyndicationItemProperty targetSyndicationItem, SyndicationTextContentKind targetTextContentKind, bool keepInContent);
    public EntityPropertyMappingAttribute(string sourcePath, string targetPath, string targetNamespacePrefix, string targetNamespaceUri, bool keepInContent);
    public string get_SourcePath();
    public string get_TargetPath();
    public SyndicationItemProperty get_TargetSyndicationItem();
    public string get_TargetNamespacePrefix();
    public string get_TargetNamespaceUri();
    public SyndicationTextContentKind get_TargetTextContentKind();
    public bool get_KeepInContent();
}
[AttributeUsageAttribute("4")]
public class System.Data.Services.Common.EntitySetAttribute : Attribute {
    public string EntitySet { get; }
    public EntitySetAttribute(string entitySet);
    public string get_EntitySet();
}
[AttributeUsageAttribute("4")]
public class System.Data.Services.Common.HasStreamAttribute : Attribute {
}
public enum System.Data.Services.Common.SyndicationItemProperty : Enum {
    public int value__;
    public static SyndicationItemProperty CustomProperty;
    public static SyndicationItemProperty AuthorEmail;
    public static SyndicationItemProperty AuthorName;
    public static SyndicationItemProperty AuthorUri;
    public static SyndicationItemProperty ContributorEmail;
    public static SyndicationItemProperty ContributorName;
    public static SyndicationItemProperty ContributorUri;
    public static SyndicationItemProperty Updated;
    public static SyndicationItemProperty Published;
    public static SyndicationItemProperty Rights;
    public static SyndicationItemProperty Summary;
    public static SyndicationItemProperty Title;
}
public enum System.Data.Services.Common.SyndicationTextContentKind : Enum {
    public int value__;
    public static SyndicationTextContentKind Plaintext;
    public static SyndicationTextContentKind Html;
    public static SyndicationTextContentKind Xhtml;
}
