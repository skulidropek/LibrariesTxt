internal class Microsoft.Internal.Performance.CodeMarkerExStartEnd : ValueType {
    private int _end;
    private Byte[] _aBuff;
    internal CodeMarkerExStartEnd(int begin, int end, Byte[] aBuff);
    internal CodeMarkerExStartEnd(int begin, int end, Guid guidData);
    internal CodeMarkerExStartEnd(int begin, int end, string stringData);
    internal CodeMarkerExStartEnd(int begin, int end, UInt32 uintData);
    internal CodeMarkerExStartEnd(int begin, int end, ulong ulongData);
    public sealed virtual void Dispose();
}
internal class Microsoft.Internal.Performance.CodeMarkers : object {
    public static CodeMarkers Instance;
    public bool IsEnabled { get; }
    private static CodeMarkers();
    public bool get_IsEnabled();
    public bool CodeMarker(int nTimerID);
    public bool CodeMarkerEx(int nTimerID, Byte[] aBuff);
    public bool CodeMarkerEx(int nTimerID, Guid guidData);
    public bool CodeMarkerEx(int nTimerID, string stringData);
    public bool CodeMarkerEx(int nTimerID, UInt32 uintData);
    public bool CodeMarkerEx(int nTimerID, ulong ulongData);
    public bool InitPerformanceDll(int iApp, string strRegRoot);
    public bool InitPerformanceDll(int iApp, string strRegRoot, RegistryView registryView);
    public void UninitializePerformanceDLL(int iApp);
}
internal class Microsoft.Internal.Performance.CodeMarkerStartEnd : ValueType {
    private int _end;
    internal CodeMarkerStartEnd(int begin, int end);
    public sealed virtual void Dispose();
}
[SecurityCriticalAttribute]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("9FD93CCF-3280-4391-B3A9-96E1CDE77C8D")]
internal interface Microsoft.Runtime.Hosting.IClrStrongName {
    public abstract virtual int GetHashFromAssemblyFile(string pszFilePath, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int GetHashFromAssemblyFileW(string pwzFilePath, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int GetHashFromBlob(IntPtr pbBlob, int cchBlob, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int GetHashFromFile(string pszFilePath, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int GetHashFromFileW(string pwzFilePath, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int GetHashFromHandle(IntPtr hFile, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int StrongNameCompareAssemblies(string pwzAssembly1, string pwzAssembly2, Int32& dwResult);
    public abstract virtual int StrongNameFreeBuffer(IntPtr pbMemory);
    public abstract virtual int StrongNameGetBlob(string pwzFilePath, Byte[] pbBlob, Int32& pcbBlob);
    public abstract virtual int StrongNameGetBlobFromImage(IntPtr pbBase, int dwLength, Byte[] pbBlob, Int32& pcbBlob);
    public abstract virtual int StrongNameGetPublicKey(string pwzKeyContainer, Byte[] pbKeyBlob, int cbKeyBlob, IntPtr& ppbPublicKeyBlob, Int32& pcbPublicKeyBlob);
    public abstract virtual int StrongNameHashSize(int ulHashAlg, Int32& cbSize);
    public abstract virtual int StrongNameKeyDelete(string pwzKeyContainer);
    public abstract virtual int StrongNameKeyGen(string pwzKeyContainer, int dwFlags, IntPtr& ppbKeyBlob, Int32& pcbKeyBlob);
    public abstract virtual int StrongNameKeyGenEx(string pwzKeyContainer, int dwFlags, int dwKeySize, IntPtr& ppbKeyBlob, Int32& pcbKeyBlob);
    public abstract virtual int StrongNameKeyInstall(string pwzKeyContainer, Byte[] pbKeyBlob, int cbKeyBlob);
    public abstract virtual int StrongNameSignatureGeneration(string pwzFilePath, string pwzKeyContainer, Byte[] pbKeyBlob, int cbKeyBlob, IntPtr ppbSignatureBlob, Int32& pcbSignatureBlob);
    public abstract virtual int StrongNameSignatureGenerationEx(string wszFilePath, string wszKeyContainer, Byte[] pbKeyBlob, int cbKeyBlob, IntPtr ppbSignatureBlob, Int32& pcbSignatureBlob, int dwFlags);
    public abstract virtual int StrongNameSignatureSize(Byte[] pbPublicKeyBlob, int cbPublicKeyBlob, Int32& pcbSize);
    public abstract virtual int StrongNameSignatureVerification(string pwzFilePath, int dwInFlags, Int32& dwOutFlags);
    public abstract virtual int StrongNameSignatureVerificationEx(string pwzFilePath, bool fForceVerification, Boolean& fWasVerified);
    public abstract virtual int StrongNameSignatureVerificationFromImage(IntPtr pbBase, int dwLength, int dwInFlags, Int32& dwOutFlags);
    public abstract virtual int StrongNameTokenFromAssembly(string pwzFilePath, IntPtr& ppbStrongNameToken, Int32& pcbStrongNameToken);
    public abstract virtual int StrongNameTokenFromAssemblyEx(string pwzFilePath, IntPtr& ppbStrongNameToken, Int32& pcbStrongNameToken, IntPtr& ppbPublicKeyBlob, Int32& pcbPublicKeyBlob);
    public abstract virtual int StrongNameTokenFromPublicKey(Byte[] pbPublicKeyBlob, int cbPublicKeyBlob, IntPtr& ppbStrongNameToken, Int32& pcbStrongNameToken);
}
[SecurityCriticalAttribute]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("9FD93CCF-3280-4391-B3A9-96E1CDE77C8D")]
internal interface Microsoft.Runtime.Hosting.IClrStrongNameUsingIntPtr {
    public abstract virtual int GetHashFromAssemblyFile(string pszFilePath, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int GetHashFromAssemblyFileW(string pwzFilePath, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int GetHashFromBlob(IntPtr pbBlob, int cchBlob, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int GetHashFromFile(string pszFilePath, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int GetHashFromFileW(string pwzFilePath, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int GetHashFromHandle(IntPtr hFile, Int32& piHashAlg, Byte[] pbHash, int cchHash, Int32& pchHash);
    public abstract virtual int StrongNameCompareAssemblies(string pwzAssembly1, string pwzAssembly2, Int32& dwResult);
    public abstract virtual int StrongNameFreeBuffer(IntPtr pbMemory);
    public abstract virtual int StrongNameGetBlob(string pwzFilePath, Byte[] pbBlob, Int32& pcbBlob);
    public abstract virtual int StrongNameGetBlobFromImage(IntPtr pbBase, int dwLength, Byte[] pbBlob, Int32& pcbBlob);
    public abstract virtual int StrongNameGetPublicKey(string pwzKeyContainer, IntPtr pbKeyBlob, int cbKeyBlob, IntPtr& ppbPublicKeyBlob, Int32& pcbPublicKeyBlob);
    public abstract virtual int StrongNameHashSize(int ulHashAlg, Int32& cbSize);
    public abstract virtual int StrongNameKeyDelete(string pwzKeyContainer);
    public abstract virtual int StrongNameKeyGen(string pwzKeyContainer, int dwFlags, IntPtr& ppbKeyBlob, Int32& pcbKeyBlob);
    public abstract virtual int StrongNameKeyGenEx(string pwzKeyContainer, int dwFlags, int dwKeySize, IntPtr& ppbKeyBlob, Int32& pcbKeyBlob);
    public abstract virtual int StrongNameKeyInstall(string pwzKeyContainer, IntPtr pbKeyBlob, int cbKeyBlob);
    public abstract virtual int StrongNameSignatureGeneration(string pwzFilePath, string pwzKeyContainer, IntPtr pbKeyBlob, int cbKeyBlob, IntPtr ppbSignatureBlob, Int32& pcbSignatureBlob);
    public abstract virtual int StrongNameSignatureGenerationEx(string wszFilePath, string wszKeyContainer, IntPtr pbKeyBlob, int cbKeyBlob, IntPtr ppbSignatureBlob, Int32& pcbSignatureBlob, int dwFlags);
    public abstract virtual int StrongNameSignatureSize(IntPtr pbPublicKeyBlob, int cbPublicKeyBlob, Int32& pcbSize);
    public abstract virtual int StrongNameSignatureVerification(string pwzFilePath, int dwInFlags, Int32& dwOutFlags);
    public abstract virtual int StrongNameSignatureVerificationEx(string pwzFilePath, bool fForceVerification, Boolean& fWasVerified);
    public abstract virtual int StrongNameSignatureVerificationFromImage(IntPtr pbBase, int dwLength, int dwInFlags, Int32& dwOutFlags);
    public abstract virtual int StrongNameTokenFromAssembly(string pwzFilePath, IntPtr& ppbStrongNameToken, Int32& pcbStrongNameToken);
    public abstract virtual int StrongNameTokenFromAssemblyEx(string pwzFilePath, IntPtr& ppbStrongNameToken, Int32& pcbStrongNameToken, IntPtr& ppbPublicKeyBlob, Int32& pcbPublicKeyBlob);
    public abstract virtual int StrongNameTokenFromPublicKey(IntPtr pbPublicKeyBlob, int cbPublicKeyBlob, IntPtr& ppbStrongNameToken, Int32& pcbStrongNameToken);
}
internal static class Microsoft.Runtime.Hosting.StrongNameHelpers : object {
    [SecurityCriticalAttribute]
public static int StrongNameErrorInfo();
    [SecurityCriticalAttribute]
public static void StrongNameFreeBuffer(IntPtr pbMemory);
    [SecurityCriticalAttribute]
public static bool StrongNameGetPublicKey(string pwzKeyContainer, IntPtr pbKeyBlob, int cbKeyBlob, IntPtr& ppbPublicKeyBlob, Int32& pcbPublicKeyBlob);
    [SecurityCriticalAttribute]
public static bool StrongNameKeyDelete(string pwzKeyContainer);
    [SecurityCriticalAttribute]
public static bool StrongNameKeyGen(string pwzKeyContainer, int dwFlags, IntPtr& ppbKeyBlob, Int32& pcbKeyBlob);
    [SecurityCriticalAttribute]
public static bool StrongNameKeyInstall(string pwzKeyContainer, IntPtr pbKeyBlob, int cbKeyBlob);
    [SecurityCriticalAttribute]
public static bool StrongNameSignatureGeneration(string pwzFilePath, string pwzKeyContainer, IntPtr pbKeyBlob, int cbKeyBlob);
    [SecurityCriticalAttribute]
public static bool StrongNameSignatureGeneration(string pwzFilePath, string pwzKeyContainer, IntPtr pbKeyBlob, int cbKeyBlob, IntPtr& ppbSignatureBlob, Int32& pcbSignatureBlob);
    [SecurityCriticalAttribute]
public static bool StrongNameSignatureSize(IntPtr pbPublicKeyBlob, int cbPublicKeyBlob, Int32& pcbSize);
    [SecurityCriticalAttribute]
public static bool StrongNameSignatureVerification(string pwzFilePath, int dwInFlags, Int32& pdwOutFlags);
    [SecurityCriticalAttribute]
public static bool StrongNameSignatureVerificationEx(string pwzFilePath, bool fForceVerification, Boolean& pfWasVerified);
    [SecurityCriticalAttribute]
public static bool StrongNameTokenFromPublicKey(IntPtr pbPublicKeyBlob, int cbPublicKeyBlob, IntPtr& ppbStrongNameToken, Int32& pcbStrongNameToken);
    [SecurityCriticalAttribute]
public static bool StrongNameSignatureSize(Byte[] bPublicKeyBlob, int cbPublicKeyBlob, Int32& pcbSize);
    [SecurityCriticalAttribute]
public static bool StrongNameTokenFromPublicKey(Byte[] bPublicKeyBlob, int cbPublicKeyBlob, IntPtr& ppbStrongNameToken, Int32& pcbStrongNameToken);
    [SecurityCriticalAttribute]
public static bool StrongNameGetPublicKey(string pwzKeyContainer, Byte[] bKeyBlob, int cbKeyBlob, IntPtr& ppbPublicKeyBlob, Int32& pcbPublicKeyBlob);
    [SecurityCriticalAttribute]
public static bool StrongNameKeyInstall(string pwzKeyContainer, Byte[] bKeyBlob, int cbKeyBlob);
    [SecurityCriticalAttribute]
public static bool StrongNameSignatureGeneration(string pwzFilePath, string pwzKeyContainer, Byte[] bKeyBlob, int cbKeyBlob);
    [SecurityCriticalAttribute]
public static bool StrongNameSignatureGeneration(string pwzFilePath, string pwzKeyContainer, Byte[] bKeyBlob, int cbKeyBlob, IntPtr& ppbSignatureBlob, Int32& pcbSignatureBlob);
}
internal static class System.AccessibilityImprovements : object {
    internal static string UseLegacyAccessibilityFeaturesSwitchName;
    internal static string UseLegacyAccessibilityFeatures2SwitchName;
    internal static string UseLegacyAccessibilityFeatures3SwitchName;
    internal static string UseLegacyToolTipDisplaySwitchName;
    internal static bool Level1 { get; }
    internal static bool Level2 { get; }
    internal static bool Level3 { get; }
    internal static bool UseLegacyToolTipDisplay { get; }
    internal static bool get_Level1();
    internal static bool get_Level2();
    internal static bool get_Level3();
    internal static bool get_UseLegacyToolTipDisplay();
    internal static void ValidateLevels();
}
internal static class System.AppContextDefaultValues : object {
    public static void PopulateDefaultValues();
}
internal class System.Deployment.Application.ActivationDescription : CommitApplicationParams {
    public ActivationType ActType { get; public set; }
    public void SetApplicationManifest(AssemblyManifest manifest, Uri manifestUri, string manifestPath);
    public void SetDeploymentManifest(AssemblyManifest manifest, Uri manifestUri, string manifestPath);
    public string ToAppCodebase();
    public ActivationContext ToActivationContext();
    public ActivationType get_ActType();
    public void set_ActType(ActivationType value);
}
internal enum System.Deployment.Application.ActivationType : Enum {
    public int value__;
    public static ActivationType None;
    public static ActivationType InstallViaDotApplication;
    public static ActivationType InstallViaShortcut;
    public static ActivationType InstallViaFileAssociation;
    public static ActivationType UpdateViaShortcutOrFA;
}
internal class System.Deployment.Application.ApplicationActivator : object {
    private static ApplicationActivator();
    public void ActivateDeployment(string activationUrl, bool isShortcut);
    public void ActivateDeploymentEx(string activationUrl, int unsignedPolicy, int signedPolicy);
    public void ActivateApplicationExtension(string textualSubId, string deploymentProviderUrl, string targetAssociatedFile);
}
public class System.Deployment.Application.ApplicationDeployment : object {
    public static ApplicationDeployment CurrentDeployment { get; }
    public static bool IsNetworkDeployed { get; }
    public Version CurrentVersion { get; }
    public Version UpdatedVersion { get; }
    public string UpdatedApplicationFullName { get; }
    public DateTime TimeOfLastUpdateCheck { get; }
    public Uri UpdateLocation { get; }
    public Uri ActivationUri { get; }
    public string DataDirectory { get; }
    public bool IsFirstRun { get; }
    private static ApplicationDeployment();
    public static ApplicationDeployment get_CurrentDeployment();
    public static bool get_IsNetworkDeployed();
    public Version get_CurrentVersion();
    public Version get_UpdatedVersion();
    public string get_UpdatedApplicationFullName();
    public DateTime get_TimeOfLastUpdateCheck();
    public Uri get_UpdateLocation();
    public Uri get_ActivationUri();
    public string get_DataDirectory();
    public bool get_IsFirstRun();
    public UpdateCheckInfo CheckForDetailedUpdate();
    public UpdateCheckInfo CheckForDetailedUpdate(bool persistUpdateCheckResult);
    public bool CheckForUpdate();
    public bool CheckForUpdate(bool persistUpdateCheckResult);
    public void CheckForUpdateAsync();
    public void CheckForUpdateAsyncCancel();
    public void add_CheckForUpdateProgressChanged(DeploymentProgressChangedEventHandler value);
    public void remove_CheckForUpdateProgressChanged(DeploymentProgressChangedEventHandler value);
    public void add_CheckForUpdateCompleted(CheckForUpdateCompletedEventHandler value);
    public void remove_CheckForUpdateCompleted(CheckForUpdateCompletedEventHandler value);
    public bool Update();
    public void UpdateAsync();
    public void UpdateAsyncCancel();
    public void add_UpdateProgressChanged(DeploymentProgressChangedEventHandler value);
    public void remove_UpdateProgressChanged(DeploymentProgressChangedEventHandler value);
    public void add_UpdateCompleted(AsyncCompletedEventHandler value);
    public void remove_UpdateCompleted(AsyncCompletedEventHandler value);
    public void DownloadFileGroup(string groupName);
    public void DownloadFileGroupAsync(string groupName);
    public void DownloadFileGroupAsync(string groupName, object userState);
    public bool IsFileGroupDownloaded(string groupName);
    public void DownloadFileGroupAsyncCancel(string groupName);
    public void add_DownloadFileGroupProgressChanged(DeploymentProgressChangedEventHandler value);
    public void remove_DownloadFileGroupProgressChanged(DeploymentProgressChangedEventHandler value);
    public void add_DownloadFileGroupCompleted(DownloadFileGroupCompletedEventHandler value);
    public void remove_DownloadFileGroupCompleted(DownloadFileGroupCompletedEventHandler value);
}
internal static class System.Deployment.Application.ApplicationTrust : object {
    public static ApplicationTrust RequestTrust(SubscriptionState subState, bool isShellVisible, bool isUpdate, ActivationContext actCtx);
    public static ApplicationTrust RequestTrust(SubscriptionState subState, bool isShellVisible, bool isUpdate, ActivationContext actCtx, TrustManagerContext tmc);
    public static void RemoveCachedTrust(DefinitionAppId appId);
    public static ApplicationTrust PersistTrustWithoutEvaluation(ActivationContext actCtx);
}
internal enum System.Deployment.Application.AppType : Enum {
    public int value__;
    public static AppType None;
    public static AppType Installed;
    public static AppType Online;
    public static AppType CustomHostSpecified;
    public static AppType CustomUX;
}
internal static class System.Deployment.Application.AssemblyIdentityItems : object {
    public static string Name;
    public static string PublicKeyToken;
    public static string Version;
    public static string ProcessorArchitecture;
    public static string Culture;
    public static string Type;
    public static string Language;
}
internal class System.Deployment.Application.ASSEMBLYMETADATA : ValueType {
    public ushort usMajorVersion;
    public ushort usMinorVersion;
    public ushort usBuildNumber;
    public ushort usRevisionNumber;
    public IntPtr rpLocale;
    public UInt32 cchLocale;
    public IntPtr rpProcessors;
    public UInt32 cProcessors;
    public IntPtr rOses;
    public UInt32 cOses;
}
internal class System.Deployment.Application.AssemblyMetaDataImport : DisposableBase {
    public AssemblyModule[] Files { get; }
    public AssemblyName Name { get; }
    public AssemblyReference[] References { get; }
    public AssemblyMetaDataImport(string sourceFile);
    private static AssemblyMetaDataImport();
    public AssemblyModule[] get_Files();
    public AssemblyName get_Name();
    public AssemblyReference[] get_References();
    protected virtual void DisposeUnmanagedResources();
}
internal class System.Deployment.Application.AssemblyModule : object {
    public string Name { get; }
    public Byte[] Hash { get; }
    public AssemblyModule(string name, Byte[] hash);
    public string get_Name();
    public Byte[] get_Hash();
}
internal class System.Deployment.Application.AssemblyReference : object {
    public AssemblyName Name { get; }
    public AssemblyReference(AssemblyName name);
    public AssemblyName get_Name();
}
internal class System.Deployment.Application.Base32String : object {
    protected static Char[] charList;
    private static Base32String();
    public static string FromBytes(Byte[] bytes);
}
internal class System.Deployment.Application.BindCompletedEventArgs : AsyncCompletedEventArgs {
    public ActivationContext ActivationContext { get; }
    public string FriendlyName { get; }
    public bool IsCached { get; }
    internal BindCompletedEventArgs(Exception error, bool cancelled, object userState, ActivationContext actCtx, string name, bool cached);
    public ActivationContext get_ActivationContext();
    public string get_FriendlyName();
    public bool get_IsCached();
}
internal class System.Deployment.Application.BindCompletedEventHandler : MulticastDelegate {
    public BindCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BindCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BindCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Deployment.Application.CheckForUpdateCompletedEventArgs : AsyncCompletedEventArgs {
    public bool UpdateAvailable { get; }
    public Version AvailableVersion { get; }
    public bool IsUpdateRequired { get; }
    public Version MinimumRequiredVersion { get; }
    public long UpdateSizeBytes { get; }
    internal CheckForUpdateCompletedEventArgs(Exception error, bool cancelled, object userState, bool updateAvailable, Version availableVersion, bool isUpdateRequired, Version minimumRequiredVersion, long updateSize);
    public bool get_UpdateAvailable();
    public Version get_AvailableVersion();
    public bool get_IsUpdateRequired();
    public Version get_MinimumRequiredVersion();
    public long get_UpdateSizeBytes();
}
public class System.Deployment.Application.CheckForUpdateCompletedEventHandler : MulticastDelegate {
    public CheckForUpdateCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CheckForUpdateCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CheckForUpdateCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class System.Deployment.Application.ClickOnceConstants : object {
    public static double LogicalDpi;
    public static int DpiScaledMinimumButtonSizeWidth;
    public static int DpiScaledMinimumButtonSizeHeight;
    public static int DpiScaledPaddingUnits2;
    public static int DpiScaledPaddingUnits3;
    public static int DpiScaledPaddingUnits4;
    public static int DpiScaledPaddingUnits6;
    public static int DpiScaledPaddingUnits7;
    public static int DpiScaledPaddingUnits8;
    public static int DpiScaledPaddingUnits9;
    public static int DpiScaledPaddingUnits10;
    public static int DpiScaledPaddingUnits11;
    public static int DpiScaledPaddingUnits12;
    public static int DpiScaledPaddingUnits15;
    public static int DpiScaledPaddingUnits18;
    public static int DpiScaledPaddingUnits20;
    public static int DpiScaledPaddingUnits22;
    public static int DpiScaledPaddingUnits29;
    public static int DpiScaledMinimumSizeUnits28;
    public static int DpiScaledMinimumSizeUnits32;
    public static int DpiScaledMinimumSizeUnits78;
    public static int DpiScaledMinimumSizeUnits61;
    public static int DpiScaledMinimumSizeUnits88;
    public static int DpiScaledMinimumSizeUnits112;
    public static int DpiScaledMinimumSizeUnits123;
    public static int DpiScaledMinimumSizeUnits240;
    public static int DpiScaledMinimumSizeUnits280;
    public static int DpiScaledMinimumSizeUnits349;
    public static int DpiScaledMinimumSizeUnits373;
    public static int DpiScaledMinimumSizeUnits384;
    public static int DpiScaledMinimumSizeUnits466;
    public static int DpiScaledMinimumSizeUnits498;
    public static int DpiScaledMinimumSizeUnits515;
    private static ClickOnceConstants();
    public static void ScaleConstantsToMatchDpi(int deviceDpi);
}
internal static class System.Deployment.Application.CodeMarker_Singleton : object {
    public static CodeMarkers Instance { get; }
    private static CodeMarker_Singleton();
    public static CodeMarkers get_Instance();
}
internal class System.Deployment.Application.CommitApplicationParams : object {
    public DefinitionAppId AppId;
    public bool CommitApp;
    public AssemblyManifest AppManifest;
    public Uri AppSourceUri;
    public string AppManifestPath;
    public string AppPayloadPath;
    public string AppGroup;
    public bool CommitDeploy;
    public AssemblyManifest DeployManifest;
    public Uri DeploySourceUri;
    public string DeployManifestPath;
    public DateTime TimeStamp;
    public bool IsConfirmed;
    public bool IsUpdate;
    public bool IsRequiredUpdate;
    public bool IsUpdateInPKTGroup;
    public bool IsFullTrustRequested;
    public AppType appType;
    public ApplicationTrust Trust;
    public Description EffectiveDescription { get; }
    public string EffectiveCertificatePublicKeyToken { get; }
    public CommitApplicationParams(CommitApplicationParams src);
    public Description get_EffectiveDescription();
    public string get_EffectiveCertificatePublicKeyToken();
}
public class System.Deployment.Application.CompatibleFramework : object {
    public string SupportedRuntime { get; }
    public string Profile { get; }
    public string TargetVersion { get; }
    internal CompatibleFramework(CompatibleFrameworkEntry compatibleFrameworkEntry);
    public string get_SupportedRuntime();
    public string get_Profile();
    public string get_TargetVersion();
}
public class System.Deployment.Application.CompatibleFrameworkMissingException : DependentPlatformMissingException {
    public CompatibleFrameworks CompatibleFrameworks { get; }
    public CompatibleFrameworkMissingException(string message);
    public CompatibleFrameworkMissingException(string message, Exception innerException);
    protected CompatibleFrameworkMissingException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    internal CompatibleFrameworkMissingException(string message, Uri supportUrl, CompatibleFrameworks compatibleFrameworks);
    public CompatibleFrameworks get_CompatibleFrameworks();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Deployment.Application.CompatibleFrameworks : object {
    public Uri SupportUrl { get; }
    public IList`1<CompatibleFramework> Frameworks { get; }
    internal CompatibleFrameworks(CompatibleFrameworksMetadataEntry compatibleFrameworksMetadataEntry, CompatibleFramework[] frameworks);
    public Uri get_SupportUrl();
    public IList`1<CompatibleFramework> get_Frameworks();
}
internal class System.Deployment.Application.ComponentStore : object {
    private static ComponentStore();
    public static ComponentStore GetStore(ComponentStoreType storeType, SubscriptionStore subStore);
    internal ulong GetOnlineAppQuotaInBytes();
    internal ulong GetPrivateSize(ArrayList deployAppIds);
    internal ulong GetSharedSize(ArrayList deployAppIds);
    internal ArrayList CollectCrossGroupApplications(Uri codebaseUri, DefinitionIdentity deploymentIdentity, Boolean& identityGroupFound, Boolean& locationGroupFound, String& identityGroupProductName);
    internal void RemoveApplicationInstance(SubscriptionState subState, DefinitionAppId appId);
    public void RefreshStorePointer();
    public void CleanOnlineAppCache();
    public void CommitApplication(SubscriptionState subState, CommitApplicationParams commitParams);
    public void RemoveSubscription(SubscriptionState subState);
    public void RollbackSubscription(SubscriptionState subState);
    public void SetPendingDeployment(SubscriptionState subState, DefinitionIdentity deployId, DateTime checkTime);
    public void SetUpdateSkipTime(SubscriptionState subState, DefinitionIdentity updateSkippedDeployment, DateTime updateSkipTime);
    public SubscriptionStateInternal GetSubscriptionStateInternal(SubscriptionState subState);
    public SubscriptionStateInternal GetSubscriptionStateInternal(DefinitionIdentity subId);
    public void ActivateApplication(DefinitionAppId appId, string activationParameter, bool useActivationParameter);
    public bool IsAssemblyInstalled(DefinitionIdentity asmId);
    public IPathLock LockApplicationPath(DefinitionAppId definitionAppId);
    public IPathLock LockAssemblyPath(DefinitionIdentity asmId);
    public bool CheckGroupInstalled(DefinitionAppId appId, string groupName);
    public bool CheckGroupInstalled(DefinitionAppId appId, AssemblyManifest appManifest, string groupName);
}
internal enum System.Deployment.Application.ComponentStoreType : Enum {
    public int value__;
    public static ComponentStoreType UserStore;
    public static ComponentStoreType SystemStore;
}
internal class System.Deployment.Application.ComponentVerifier : object {
    protected ArrayList _verificationComponents;
    protected static CMS_HASH_DIGESTMETHOD[] _supportedDigestMethods;
    protected static CMS_HASH_TRANSFORM[] _supportedTransforms;
    public static CMS_HASH_TRANSFORM[] VerifiableTransformTypes { get; }
    public static CMS_HASH_DIGESTMETHOD[] VerifiableDigestMethods { get; }
    private static ComponentVerifier();
    public void AddFileForVerification(string filePath, HashCollection verificationHashCollection);
    public void AddSimplyNamedAssemblyForVerification(string filePath, AssemblyManifest assemblyManifest);
    public void AddStrongNameAssemblyForVerification(string filePath, AssemblyManifest assemblyManifest);
    public void VerifyComponents();
    public static void VerifyFileHash(string filePath, HashCollection hashCollection);
    public static void VerifyFileHash(string filePath, Hash hash);
    public static Byte[] GenerateDigestValue(string filePath, CMS_HASH_DIGESTMETHOD digestMethod, CMS_HASH_TRANSFORM transform);
    public static bool IsVerifiableHashCollection(HashCollection hashCollection);
    public static bool IsVerifiableHash(Hash hash);
    public static HashAlgorithm GetHashAlgorithm(CMS_HASH_DIGESTMETHOD digestMethod);
    public static Stream GetTransformedStream(string filePath, CMS_HASH_TRANSFORM transform);
    public static CMS_HASH_TRANSFORM[] get_VerifiableTransformTypes();
    public static CMS_HASH_DIGESTMETHOD[] get_VerifiableDigestMethods();
    public static void VerifySimplyNamedAssembly(string filePath, AssemblyManifest assemblyManifest);
    public static void VerifyStrongNameAssembly(string filePath, AssemblyManifest assemblyManifest);
    protected static void VerifyManifestComponentFiles(AssemblyManifest manifest, string componentPath, bool ignoreSelfReferentialFileHash);
}
internal static class System.Deployment.Application.Constants : object {
    public static string ShimDll;
    public static string DfDll;
    public static string DeploymentFolder;
    public static string Dfsvc;
    public static string SystemDeploymentDll;
    public static string Kernel32Dll;
    public static string MscoreeDll;
    public static string WininetDll;
    public static string ClrDll;
    public static string SrClientDll;
    public static string WinInetDll;
    public static string Shell32Dll;
    public static string ShellAppShortcutExtension;
    public static string ShellSupportShortcutExtension;
    public static int SupportIconIndex;
    public static int ShortCutRemovalRetryTimes;
    public static int ShortCutRemovalRetryInternal;
    public static string UninstallSubkeyName;
    public static string DeploymentSubkeyName;
    public static string LUAPolicyKeyName;
    public static string OnlineAppQuotaInKBValueName;
    public static string OnlineAppQuotaUsageEstimateValueName;
    public static string LUAPolicyValueName;
    public static string ClassesSubKeyName;
    public static string AppIdValueName;
    public static string DPUrlValueName;
    public static string IconFileValueName;
    public static string ContentTypeValueName;
    public static string ShellKeyName;
    public static string OpenCommandKeyName;
    public static string IconHandlerKeyName;
    public static string CLSIDKeyName;
    public static string InProcServerKeyName;
    public static string GuidValueName;
    public static string RootKeyName;
    public static string RequireSignedManifests;
    public static string RequireHashInManifests;
    public static string SkipSignatureValidationValueName;
    public static string SkipDeploymentProviderValueName;
    public static string SkipSchemaValidationValueName;
    public static string SkipSemanticValidationValueName;
    public static string SkipApplicationDependencyHashCheckValueName;
    public static string SuppressLimitOnNumberOfActivationsValueName;
    public static string DisableGenericExceptionHandler;
    public static string LogVerbosityLevel;
    public static string DeploymentManifestSuffix;
    public static string ManifestSuffix;
    public static string DllSuffix;
    public static string ExeSuffix;
    public static string MapFileExtensionsSuffix;
    public static string InstallReferenceIdentifier;
    public static Guid DeploymentPropertySet;
    public static string SubscriptionStoreLock;
    public static TimeSpan OnlineAppScavengingGracePeriod;
    public static string IsShellVisible;
    public static string CurrentBind;
    public static string PreviousBind;
    public static string PendingBind;
    public static string ExcludedDeployment;
    public static string PendingDeployment;
    public static string DeploymentProviderUri;
    public static string MinimumRequiredVersion;
    public static string LastCheckTime;
    public static string UpdateSkipTime;
    public static string UpdateSkippedDeployment;
    public static string AppType;
    public static string UseApplicationManifestDescription;
    public static string DeploymentSourceUri;
    public static string ApplicationSourceUri;
    public static string IsFullTrust;
    public static string CLRCoreComp;
    public static string CommonLanguageRuntime;
    public static Version V2CLRVersion;
    public static Version V4CLRVersion;
    public static UInt32 MinVersionCLRMajor;
    public static string MSIL;
    public static string X86;
    public static string AMD64;
    public static string IA64;
    public static string AsmV1Namespace;
    public static string AsmV2Namespace;
    public static string XmlDSigNamespace;
    public static string AdaptiveSchemaResourceName;
    public static string PublicIdForDTD4XMLSchemas;
    public static string XMLSchemaDTDResourceName;
    public static string PublicIdForDTD4DataTypes;
    public static string DataTypesDTDResourceName;
    public static string UnsignedPublicKeyToken;
    public static string RequireAdministrator;
    public static string HighestAvailable;
    public static int MaxNumberOfFilesInApplication;
    public static int MaxNumberOfFileAssociationsInApplication;
    public static int MaxNumberOfFileExtensionLength;
    public static int MaxNumberOfAssembliesInApplication;
    public static int MaxNumberOfGroupsInApplication;
    public static int MaxUrlLength;
    public static int MaxLiveActivation;
    public static int MaxIdentityLength;
    public static int MaxAppIdLength;
    public static int MaxShortcutFileSize;
    public static int MaxManifestFileSize;
    public static int MaxValueForMaximumAge;
    public static int MaxErrorUrlLength;
    public static UInt32 DefaultOnlineAppQuotaInKB;
    public static int LifetimeDefaultMinutes;
    public static TimeSpan LockTimeout;
    public static TimeSpan AssertApplicationRequirementsTimeout;
    public static int LockRetryIntervalMs;
    public static int MinProgressCallbackIntervalInMs;
    public static string DefaultLogTextualId;
    public static int MAX_PATH;
    public static string LogFileExtension;
    public static string LogFilePathRegistryString;
    public static string WininetCacheLogUrlPrefix;
    public static string GACDetectionTempManifestAsmIdText;
    public static string DataDirectory;
    public static int HRESULT_DiskFull;
    public static UInt32 MASK_NOTPINNABLE;
    public static UInt32 MASK_DONT_SHOW_INSTALL_DIALOG;
    public static string Client35SP1SignatureAssembly;
    public static string Full35SP1SignatureAssembly;
    public static string DotNetFX35SP1;
    public static string SkipSKUDetectionKeyName;
    public static string SkipSKUDetectionValueName;
    public static string SetupKeyCommonPath;
    public static string PreV4ClientSetupKeyCommonPath;
    public static string V30SetupKeyPath;
    public static string NetFxKeyCommonPath;
    public static string TFMFormatNoProfile;
    public static string TFMFormatWithProfile;
    public static string FullProfileName;
    public static string PreV4ClientProfileName;
    public static string PreV4SetupValueName;
    public static string V4SetupValueName;
    public static string InstallValueName;
    public static string V30InstallValueName;
    public static string FrameworkGroupName;
    public static int CLSCTX_INPROC_SERVER;
    public static Guid CLSID_StartMenuPin;
    public static Guid IID_IUnknown;
    public static Guid uuid;
    private static Constants();
}
[FlagsAttribute]
internal enum System.Deployment.Application.CorAssemblyFlags : Enum {
    public UInt32 value__;
    public static CorAssemblyFlags afPublicKey;
}
[GuidAttribute("E5CB7A31-7512-11d2-89CE-0080C792E5D8")]
[TypeLibTypeAttribute("2")]
[ClassInterfaceAttribute("0")]
internal class System.Deployment.Application.CorMetaDataDispenser : object {
}
internal class System.Deployment.Application.DefinitionAppId : object {
    public ulong Hash { get; }
    public IDefinitionAppId ComPointer { get; }
    public string Codebase { get; }
    public DefinitionIdentity DeploymentIdentity { get; }
    public DefinitionIdentity ApplicationIdentity { get; }
    public DefinitionAppId(DefinitionIdentity[] idPath);
    public DefinitionAppId(string codebase, DefinitionIdentity[] idPath);
    public DefinitionAppId(string text);
    public DefinitionAppId(IDefinitionAppId idComPtr);
    public ulong get_Hash();
    public IDefinitionAppId get_ComPointer();
    public string get_Codebase();
    public DefinitionIdentity get_DeploymentIdentity();
    public DefinitionIdentity get_ApplicationIdentity();
    public DefinitionAppId ToDeploymentAppId();
    public ApplicationIdentity ToApplicationIdentity();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class System.Deployment.Application.DefinitionIdentity : object {
    public string Item { get; public set; }
    unknown string Item {public set; }
    public string Name { get; public set; }
    public Version Version { get; }
    public string PublicKeyToken { get; }
    public string ProcessorArchitecture { get; }
    public ulong Hash { get; }
    public string KeyForm { get; }
    public IDENTITY_ATTRIBUTE[] Attributes { get; }
    public bool IsEmpty { get; }
    public IDefinitionIdentity ComPointer { get; }
    public DefinitionIdentity(string text);
    public DefinitionIdentity(IDefinitionIdentity idComPtr);
    public DefinitionIdentity(ReferenceIdentity refId);
    public DefinitionIdentity(AssemblyName asmName);
    public string get_Item(string name);
    public void set_Item(string name, string value);
    public void set_Item(string ns, string name, string value);
    public string get_Name();
    public void set_Name(string value);
    public Version get_Version();
    public string get_PublicKeyToken();
    public string get_ProcessorArchitecture();
    public ulong get_Hash();
    public string get_KeyForm();
    public bool Matches(ReferenceIdentity refId, bool exact);
    public IDENTITY_ATTRIBUTE[] get_Attributes();
    public bool get_IsEmpty();
    public DefinitionIdentity ToSubscriptionId();
    public DefinitionIdentity ToPKTGroupId();
    public IDefinitionIdentity get_ComPointer();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual object Clone();
}
public class System.Deployment.Application.DependentPlatformMissingException : DeploymentException {
    public Uri SupportUrl { get; }
    public DependentPlatformMissingException(string message);
    public DependentPlatformMissingException(string message, Exception innerException);
    protected DependentPlatformMissingException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public DependentPlatformMissingException(string message, Uri supportUrl);
    internal DependentPlatformMissingException(ExceptionTypes exceptionType, string message);
    internal DependentPlatformMissingException(ExceptionTypes exceptionType, string message, Exception innerException);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public Uri get_SupportUrl();
}
public class System.Deployment.Application.DeploymentDownloadException : DeploymentException {
    public DeploymentDownloadException(string message);
    public DeploymentDownloadException(string message, Exception innerException);
    internal DeploymentDownloadException(ExceptionTypes exceptionType, string message);
    internal DeploymentDownloadException(ExceptionTypes exceptionType, string message, Exception innerException);
    protected DeploymentDownloadException(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public class System.Deployment.Application.DeploymentException : SystemException {
    internal ExceptionTypes SubType { get; }
    public DeploymentException(string message);
    public DeploymentException(string message, Exception innerException);
    internal DeploymentException(ExceptionTypes exceptionType, string message);
    internal DeploymentException(ExceptionTypes exceptionType, string message, Exception innerException);
    protected DeploymentException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal ExceptionTypes get_SubType();
}
internal class System.Deployment.Application.DeploymentManager : object {
    public CallerType Callertype { get; public set; }
    public LogIdentity LogId { get; }
    public bool CancellationPending { get; }
    public string ShortcutAppId { get; }
    public string LogFilePath { get; }
    internal ActivationDescription ActivationDescription { get; }
    public DeploymentManager(string appId);
    public DeploymentManager(Uri deploymentSource);
    internal DeploymentManager(Uri deploymentSource, bool isUpdate, bool isConfirmed, DownloadOptions downloadOptions, AsyncOperation optionalAsyncOp);
    internal DeploymentManager(string appId, bool isUpdate, bool isConfirmed, DownloadOptions downloadOptions, AsyncOperation optionalAsyncOp);
    private static DeploymentManager();
    public CallerType get_Callertype();
    public void set_Callertype(CallerType value);
    public LogIdentity get_LogId();
    public void BindAsync();
    public ActivationContext Bind();
    public void DeterminePlatformRequirements();
    public void DetermineTrust(TrustParams trustParams);
    public void SynchronizeAsync();
    public void Synchronize();
    public void SynchronizeAsync(string groupName);
    public void SynchronizeAsync(string groupName, object userState);
    public void Synchronize(string groupName);
    public ObjectHandle ExecuteNewDomain();
    public void ExecuteNewProcess();
    public void CancelAsync();
    public bool get_CancellationPending();
    public void CancelAsync(string groupName);
    public string get_ShortcutAppId();
    public string get_LogFilePath();
    public void add_BindCompleted(BindCompletedEventHandler value);
    public void remove_BindCompleted(BindCompletedEventHandler value);
    public void add_SynchronizeCompleted(SynchronizeCompletedEventHandler value);
    public void remove_SynchronizeCompleted(SynchronizeCompletedEventHandler value);
    public void add_ProgressChanged(DeploymentProgressChangedEventHandler value);
    public void remove_ProgressChanged(DeploymentProgressChangedEventHandler value);
    public sealed virtual void Dispose();
    private sealed virtual override void System.Deployment.Application.IDownloadNotification.DownloadModified(object sender, DownloadEventArgs e);
    private sealed virtual override void System.Deployment.Application.IDownloadNotification.DownloadCompleted(object sender, DownloadEventArgs e);
    internal ActivationDescription get_ActivationDescription();
    public void PersistTrustWithoutEvaluation();
}
public class System.Deployment.Application.DeploymentProgressChangedEventArgs : ProgressChangedEventArgs {
    public long BytesCompleted { get; }
    public long BytesTotal { get; }
    public DeploymentProgressState State { get; }
    public string Group { get; }
    internal DeploymentProgressChangedEventArgs(int progressPercentage, object userState, long bytesCompleted, long bytesTotal, DeploymentProgressState state, string groupName);
    public long get_BytesCompleted();
    public long get_BytesTotal();
    public DeploymentProgressState get_State();
    public string get_Group();
}
public class System.Deployment.Application.DeploymentProgressChangedEventHandler : MulticastDelegate {
    public DeploymentProgressChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DeploymentProgressChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DeploymentProgressChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Deployment.Application.DeploymentProgressState : Enum {
    public int value__;
    public static DeploymentProgressState DownloadingDeploymentInformation;
    public static DeploymentProgressState DownloadingApplicationInformation;
    public static DeploymentProgressState DownloadingApplicationFiles;
}
[GuidAttribute("20FD4E26-8E0F-4F73-A0E0-F27B8C57BE6F")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class System.Deployment.Application.DeploymentServiceCom : object {
    public void ActivateDeployment(string deploymentLocation, bool isShortcut);
    public void ActivateDeploymentEx(string deploymentLocation, int unsignedPolicy, int signedPolicy);
    public void ActivateApplicationExtension(string textualSubId, string deploymentProviderUrl, string targetAssociatedFile);
    public void MaintainSubscription(string textualSubId);
    public void CheckForDeploymentUpdate(string textualSubId);
    public void EndServiceRightNow();
    public void CleanOnlineAppCache();
}
internal class System.Deployment.Application.DeploymentServiceComWrapper : object {
    public sealed virtual void ActivateApplicationExtension(string textualSubId, string deploymentProviderUrl, string targetAssociatedFile);
    public sealed virtual void ActivateDeployment(string deploymentLocation, bool isShortcut);
    public sealed virtual void ActivateDeploymentEx(string deploymentLocation, int unsignedPolicy, int signedPolicy);
    public sealed virtual void CheckForDeploymentUpdate(string textualSubId);
    public sealed virtual void CleanOnlineAppCache();
    public sealed virtual void EndServiceRightNow();
    public sealed virtual void MaintainSubscription(string textualSubId);
}
internal static class System.Deployment.Application.DFServiceEntryPoint : object {
    public static void Initialize(String[] args);
}
internal abstract class System.Deployment.Application.DisposableBase : object {
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void DisposeManagedResources();
    protected virtual void DisposeUnmanagedResources();
}
public class System.Deployment.Application.DownloadApplicationCompletedEventArgs : AsyncCompletedEventArgs {
    public string LogFilePath { get; }
    public string ShortcutAppId { get; }
    internal DownloadApplicationCompletedEventArgs(AsyncCompletedEventArgs e, string logFilePath, string shortcutAppId);
    public string get_LogFilePath();
    public string get_ShortcutAppId();
}
internal class System.Deployment.Application.DownloadCancelledException : DeploymentDownloadException {
    public DownloadCancelledException(string message);
    public DownloadCancelledException(string message, Exception innerException);
    protected DownloadCancelledException(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
internal class System.Deployment.Application.DownloadEventArgs : EventArgs {
    internal int _progress;
    internal int _filesCompleted;
    internal int _filesTotal;
    internal long _bytesCompleted;
    internal long _bytesTotal;
    internal Uri _fileSourceUri;
    internal Uri _fileResponseUri;
    internal string _fileLocalPath;
    internal object _cookie;
    public int Progress { get; }
    public long BytesCompleted { get; }
    public long BytesTotal { get; }
    public Uri FileSourceUri { get; }
    public Uri FileResponseUri { get; }
    internal string FileLocalPath { get; internal set; }
    internal object Cookie { get; internal set; }
    public int get_Progress();
    public long get_BytesCompleted();
    public long get_BytesTotal();
    public Uri get_FileSourceUri();
    public Uri get_FileResponseUri();
    internal string get_FileLocalPath();
    internal void set_FileLocalPath(string value);
    internal object get_Cookie();
    internal void set_Cookie(object value);
}
public class System.Deployment.Application.DownloadFileGroupCompletedEventArgs : AsyncCompletedEventArgs {
    public string Group { get; }
    internal DownloadFileGroupCompletedEventArgs(Exception error, bool cancelled, object userState, string groupName);
    public string get_Group();
}
public class System.Deployment.Application.DownloadFileGroupCompletedEventHandler : MulticastDelegate {
    public DownloadFileGroupCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DownloadFileGroupCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DownloadFileGroupCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class System.Deployment.Application.DownloadManager : object {
    private static DownloadManager();
    public static AssemblyManifest DownloadDeploymentManifest(SubscriptionStore subStore, Uri& sourceUri, TempFile& tempFile);
    public static AssemblyManifest DownloadDeploymentManifest(SubscriptionStore subStore, Uri& sourceUri, TempFile& tempFile, IDownloadNotification notification, DownloadOptions options);
    public static bool FollowDeploymentProviderUri(SubscriptionStore subStore, AssemblyManifest& deployment, Uri& sourceUri, TempFile& tempFile, IDownloadNotification notification, DownloadOptions options);
    public static AssemblyManifest DownloadDeploymentManifestBypass(SubscriptionStore subStore, Uri& sourceUri, TempFile& tempFile, SubscriptionState& subState, IDownloadNotification notification, DownloadOptions options);
    public static AssemblyManifest DownloadApplicationManifest(AssemblyManifest deploymentManifest, string targetDir, Uri deploymentUri, Uri& appSourceUri, String& appManifestPath);
    public static AssemblyManifest DownloadApplicationManifest(AssemblyManifest deploymentManifest, string targetDir, Uri deploymentUri, IDownloadNotification notification, DownloadOptions options, Uri& appSourceUri, String& appManifestPath);
    public static void DownloadDependencies(SubscriptionState subState, AssemblyManifest deployManifest, AssemblyManifest appManifest, Uri sourceUriBase, string targetDirectory, string group, IDownloadNotification notification, DownloadOptions options);
}
internal class System.Deployment.Application.DownloadOptions : object {
    public bool Background;
    public bool EnforceSizeLimit;
    public ulong SizeLimit;
    public ulong Size;
    public virtual string ToString();
}
public class System.Deployment.Application.DownloadProgressChangedEventArgs : ProgressChangedEventArgs {
    public long BytesDownloaded { get; }
    public long TotalBytesToDownload { get; }
    public DeploymentProgressState State { get; }
    internal DownloadProgressChangedEventArgs(int progressPercentage, object userState, long bytesCompleted, long bytesTotal, DeploymentProgressState downloadProgressState);
    public long get_BytesDownloaded();
    public long get_TotalBytesToDownload();
    public DeploymentProgressState get_State();
}
internal class System.Deployment.Application.DownloadResult : object {
    public Uri ResponseUri { get; public set; }
    public ServerInformation ServerInformation { get; }
    public Uri get_ResponseUri();
    public void set_ResponseUri(Uri value);
    public ServerInformation get_ServerInformation();
}
internal class System.Deployment.Application.ErrorPiece : ModalPiece {
    public ErrorPiece(UserInterfaceForm parentForm, string errorTitle, string errorMessage, string logFileLocation, string linkUrl, string linkUrlMessage, ManualResetEvent modalEvent);
}
internal enum System.Deployment.Application.ExceptionTypes : Enum {
    public int value__;
    public static ExceptionTypes Unknown;
    public static ExceptionTypes Activation;
    public static ExceptionTypes ComponentStore;
    public static ExceptionTypes ActivationInProgress;
    public static ExceptionTypes InvalidShortcut;
    public static ExceptionTypes InvalidARPEntry;
    public static ExceptionTypes LockTimeout;
    public static ExceptionTypes Subscription;
    public static ExceptionTypes SubscriptionState;
    public static ExceptionTypes ActivationLimitExceeded;
    public static ExceptionTypes DiskIsFull;
    public static ExceptionTypes GroupMultipleMatch;
    public static ExceptionTypes InvalidManifest;
    public static ExceptionTypes Manifest;
    public static ExceptionTypes ManifestLoad;
    public static ExceptionTypes ManifestParse;
    public static ExceptionTypes ManifestSemanticValidation;
    public static ExceptionTypes ManifestComponentSemanticValidation;
    public static ExceptionTypes UnsupportedElevetaionRequest;
    public static ExceptionTypes SubscriptionSemanticValidation;
    public static ExceptionTypes UriSchemeNotSupported;
    public static ExceptionTypes Zone;
    public static ExceptionTypes DeploymentUriDifferent;
    public static ExceptionTypes SizeLimitForPartialTrustOnlineAppExceeded;
    public static ExceptionTypes Validation;
    public static ExceptionTypes HashValidation;
    public static ExceptionTypes SignatureValidation;
    public static ExceptionTypes RefDefValidation;
    public static ExceptionTypes ClrValidation;
    public static ExceptionTypes StronglyNamedAssemblyVerification;
    public static ExceptionTypes IdentityMatchValidationForMixedModeAssembly;
    public static ExceptionTypes AppFileLocationValidation;
    public static ExceptionTypes FileSizeValidation;
    public static ExceptionTypes TrustFailDependentPlatform;
}
internal class System.Deployment.Application.ExceptionUtility : object {
    public static bool IsHardException(Exception exception);
}
internal abstract class System.Deployment.Application.FileDownloader : object {
    protected Queue _fileQueue;
    protected DownloadEventArgs _eventArgs;
    protected DownloadOptions _options;
    protected ArrayList _downloadResults;
    protected long _accumulatedBytesTotal;
    protected long _expectedBytesTotal;
    protected ComponentVerifier _componentVerifier;
    protected bool _fCancelPending;
    protected Byte[] _buffer;
    public X509Certificate2 ClientCertificate { get; protected set; }
    unknown DownloadOptions Options {public set; }
    public ComponentVerifier ComponentVerifier { get; }
    public DownloadResult[] DownloadResults { get; }
    [CompilerGeneratedAttribute]
public void add_DownloadModified(DownloadModifiedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DownloadModified(DownloadModifiedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_DownloadCompleted(DownloadCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DownloadCompleted(DownloadCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_ClientCertificate();
    [CompilerGeneratedAttribute]
protected void set_ClientCertificate(X509Certificate2 value);
    public static FileDownloader Create();
    public void set_Options(DownloadOptions value);
    public void AddNotification(IDownloadNotification notification);
    public void RemoveNotification(IDownloadNotification notification);
    protected void OnModified();
    protected void OnCompleted();
    public void AddFile(Uri sourceUri, string targetFilePath);
    public void AddFile(Uri sourceUri, string targetFilePath, int maxFileSize);
    public void AddFile(Uri sourceUri, string targetFilePath, object cookie, HashCollection hashCollection);
    public void AddFile(Uri sourceUri, string targetFilePath, object cookie, HashCollection hashCollection, int maxFileSize);
    public ComponentVerifier get_ComponentVerifier();
    public void Download(SubscriptionState subState, X509Certificate2 clientCertificate);
    public DownloadResult[] get_DownloadResults();
    public void SetExpectedBytesTotal(long total);
    protected void SetBytesTotal();
    internal void CheckForSizeLimit(ulong bytesDownloaded, bool addToSize);
    protected void OnModifiedWithThrottle(Int32& lastTick);
    public virtual void Cancel();
    protected abstract virtual void DownloadAllFiles();
}
internal class System.Deployment.Application.FormPiece : Panel {
    public virtual bool OnClosing();
}
public class System.Deployment.Application.GetManifestCompletedEventArgs : AsyncCompletedEventArgs {
    public ApplicationIdentity ApplicationIdentity { get; }
    public Version Version { get; }
    public bool IsCached { get; }
    public string ProductName { get; }
    public Uri SupportUri { get; }
    public string LogFilePath { get; }
    public XmlReader DeploymentManifest { get; }
    public XmlReader ApplicationManifest { get; }
    public ActivationContext ActivationContext { get; }
    public string SubscriptionIdentity { get; }
    internal GetManifestCompletedEventArgs(BindCompletedEventArgs e, ActivationDescription activationDescription, string logFilePath, LogIdentity log);
    internal GetManifestCompletedEventArgs(BindCompletedEventArgs e, Exception error, string logFilePath);
    internal GetManifestCompletedEventArgs(BindCompletedEventArgs e, string logFilePath);
    public ApplicationIdentity get_ApplicationIdentity();
    public Version get_Version();
    public bool get_IsCached();
    public string get_ProductName();
    public Uri get_SupportUri();
    public string get_LogFilePath();
    public XmlReader get_DeploymentManifest();
    public XmlReader get_ApplicationManifest();
    public ActivationContext get_ActivationContext();
    public string get_SubscriptionIdentity();
}
internal class System.Deployment.Application.Hash : object {
    public Byte[] DigestValue { get; }
    public CMS_HASH_DIGESTMETHOD DigestMethod { get; }
    public CMS_HASH_TRANSFORM Transform { get; }
    public string CompositString { get; }
    protected string TranformCodeString { get; }
    protected string DigestMethodCodeString { get; }
    public Hash(Byte[] digestValue, CMS_HASH_DIGESTMETHOD digestMethod, CMS_HASH_TRANSFORM transform);
    public Byte[] get_DigestValue();
    public CMS_HASH_DIGESTMETHOD get_DigestMethod();
    public CMS_HASH_TRANSFORM get_Transform();
    public string get_CompositString();
    protected string get_TranformCodeString();
    protected string get_DigestMethodCodeString();
    protected static string ToCodedString(UInt32 value);
}
internal class System.Deployment.Application.HashCollection : object {
    protected ArrayList _hashes;
    public int Count { get; }
    public void AddHash(Byte[] digestValue, CMS_HASH_DIGESTMETHOD digestMethod, CMS_HASH_TRANSFORM transform);
    public int get_Count();
    public HashEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class System.Deployment.Application.HexString : object {
    public static string FromBytes(Byte[] bytes);
}
internal interface System.Deployment.Application.IDownloadNotification {
    public abstract virtual void DownloadModified(object sender, DownloadEventArgs e);
    public abstract virtual void DownloadCompleted(object sender, DownloadEventArgs e);
}
[GuidAttribute("B3CA4E79-0107-4CA7-9708-3BE0A97957FB")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Application.IManagedDeploymentServiceCom {
    public abstract virtual void ActivateDeployment(string deploymentLocation, bool isShortcut);
    public abstract virtual void ActivateDeploymentEx(string deploymentLocation, int unsignedPolicy, int signedPolicy);
    public abstract virtual void ActivateApplicationExtension(string textualSubId, string deploymentProviderUrl, string targetAssociatedFile);
    public abstract virtual void MaintainSubscription(string textualSubId);
    public abstract virtual void CheckForDeploymentUpdate(string textualSubId);
    public abstract virtual void EndServiceRightNow();
    public abstract virtual void CleanOnlineAppCache();
}
[GuidAttribute("EE62470B-E94B-424e-9B7C-2F00C9249F93")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Application.IMetaDataAssemblyImport {
    public abstract virtual void GetAssemblyProps(UInt32 mdAsm, IntPtr& pPublicKeyPtr, UInt32& ucbPublicKeyPtr, UInt32& uHashAlg, Char[] strName, UInt32 cchNameIn, UInt32& cchNameRequired, IntPtr amdInfo, UInt32& dwFlags);
    public abstract virtual void GetAssemblyRefProps(UInt32 mdAsmRef, IntPtr& ppbPublicKeyOrToken, UInt32& pcbPublicKeyOrToken, Char[] strName, UInt32 cchNameIn, UInt32& pchNameOut, IntPtr amdInfo, IntPtr& ppbHashValue, UInt32& pcbHashValue, UInt32& pdwAssemblyRefFlags);
    public abstract virtual void GetFileProps(UInt32 mdFile, Char[] strName, UInt32 cchName, UInt32& cchNameRequired, IntPtr& bHashData, UInt32& cchHashBytes, UInt32& dwFileFlags);
    public abstract virtual void GetExportedTypeProps();
    public abstract virtual void GetManifestResourceProps();
    public abstract virtual void EnumAssemblyRefs(IntPtr& phEnum, UInt32[] asmRefs, UInt32 asmRefCount, UInt32& iFetched);
    public abstract virtual void EnumFiles(IntPtr& phEnum, UInt32[] fileRefs, UInt32 fileRefCount, UInt32& iFetched);
    public abstract virtual void EnumExportedTypes();
    public abstract virtual void EnumManifestResources();
    public abstract virtual void GetAssemblyFromScope(UInt32& mdAsm);
    public abstract virtual void FindExportedTypeByName();
    public abstract virtual void FindManifestResourceByName();
    public abstract virtual void CloseEnum(IntPtr phEnum);
    public abstract virtual void FindAssembliesByName();
}
[GuidAttribute("809c652e-7396-11d2-9771-00a0c9b4d50c")]
[InterfaceTypeAttribute("1")]
[TypeLibTypeAttribute("512")]
internal interface System.Deployment.Application.IMetaDataDispenser {
    public abstract virtual object DefineScope(Guid& rclsid, UInt32 dwCreateFlags, Guid& riid);
    public abstract virtual object OpenScope(string szScope, UInt32 dwOpenFlags, Guid& riid);
    public abstract virtual object OpenScopeOnMemory(IntPtr pData, UInt32 cbData, UInt32 dwOpenFlags, Guid& riid);
}
[GuidAttribute("7DAC8207-D3AE-4c75-9B67-92801A497D44")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Application.IMetaDataImport {
    public abstract virtual void CloseEnum();
    public abstract virtual void CountEnum(IntPtr iRef, UInt32& ulCount);
    public abstract virtual void ResetEnum();
    public abstract virtual void EnumTypeDefs();
    public abstract virtual void EnumInterfaceImpls();
    public abstract virtual void EnumTypeRefs();
    public abstract virtual void FindTypeDefByName();
    public abstract virtual void GetScopeProps();
    public abstract virtual void GetModuleFromScope();
    public abstract virtual void GetTypeDefProps();
    public abstract virtual void GetInterfaceImplProps();
    public abstract virtual void GetTypeRefProps();
    public abstract virtual void ResolveTypeRef();
    public abstract virtual void EnumMembers();
    public abstract virtual void EnumMembersWithName();
    public abstract virtual void EnumMethods();
    public abstract virtual void EnumMethodsWithName();
    public abstract virtual void EnumFields();
    public abstract virtual void EnumFieldsWithName();
    public abstract virtual void EnumParams();
    public abstract virtual void EnumMemberRefs();
    public abstract virtual void EnumMethodImpls();
    public abstract virtual void EnumPermissionSets();
    public abstract virtual void FindMember();
    public abstract virtual void FindMethod();
    public abstract virtual void FindField();
    public abstract virtual void FindMemberRef();
    public abstract virtual void GetMethodProps();
    public abstract virtual void GetMemberRefProps();
    public abstract virtual void EnumProperties();
    public abstract virtual void EnumEvents();
    public abstract virtual void GetEventProps();
    public abstract virtual void EnumMethodSemantics();
    public abstract virtual void GetMethodSemantics();
    public abstract virtual void GetClassLayout();
    public abstract virtual void GetFieldMarshal();
    public abstract virtual void GetRVA();
    public abstract virtual void GetPermissionSetProps();
    public abstract virtual void GetSigFromToken();
    public abstract virtual void GetModuleRefProps();
    public abstract virtual void EnumModuleRefs();
    public abstract virtual void GetTypeSpecFromToken();
    public abstract virtual void GetNameFromToken();
    public abstract virtual void EnumUnresolvedMethods();
    public abstract virtual void GetUserString();
    public abstract virtual void GetPinvokeMap();
    public abstract virtual void EnumSignatures();
    public abstract virtual void EnumTypeSpecs();
    public abstract virtual void EnumUserStrings();
    public abstract virtual void GetParamForMethodIndex();
    public abstract virtual void EnumCustomAttributes();
    public abstract virtual void GetCustomAttributeProps();
    public abstract virtual void FindTypeRef();
    public abstract virtual void GetMemberProps();
    public abstract virtual void GetFieldProps();
    public abstract virtual void GetPropertyProps();
    public abstract virtual void GetParamProps();
    public abstract virtual void GetCustomAttributeByName();
    public abstract virtual void IsValidToken();
    public abstract virtual void GetNestedClassProps();
    public abstract virtual void GetNativeCallConvFromSig();
    public abstract virtual void IsGlobal();
}
public class System.Deployment.Application.InPlaceHostingManager : object {
    public InPlaceHostingManager(Uri deploymentManifest, bool launchInHostProcess);
    public InPlaceHostingManager(Uri deploymentManifest);
    public void GetManifestAsync();
    public void AssertApplicationRequirements();
    public void AssertApplicationRequirements(bool grantApplicationTrust);
    public void DownloadApplicationAsync();
    public ObjectHandle Execute();
    public void CancelAsync();
    public sealed virtual void Dispose();
    public static void UninstallCustomUXApplication(string subscriptionId);
    public static void UninstallCustomAddIn(string subscriptionId);
    [CompilerGeneratedAttribute]
public void add_GetManifestCompleted(EventHandler`1<GetManifestCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_GetManifestCompleted(EventHandler`1<GetManifestCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DownloadProgressChanged(EventHandler`1<DownloadProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DownloadProgressChanged(EventHandler`1<DownloadProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DownloadApplicationCompleted(EventHandler`1<DownloadApplicationCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DownloadApplicationCompleted(EventHandler`1<DownloadApplicationCompletedEventArgs> value);
}
public class System.Deployment.Application.InvalidDeploymentException : DeploymentException {
    public InvalidDeploymentException(string message);
    public InvalidDeploymentException(string message, Exception innerException);
    internal InvalidDeploymentException(ExceptionTypes exceptionType, string message);
    internal InvalidDeploymentException(ExceptionTypes exceptionType, string message, Exception innerException);
    protected InvalidDeploymentException(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
internal static class System.Deployment.Application.LifetimeManager : object {
    private static LifetimeManager();
    public static void StartOperation();
    public static void EndOperation();
    public static void ExtendLifetime();
    public static bool WaitForEnd();
    public static void EndImmediately();
}
internal static class System.Deployment.Application.LockedFile : object {
    private static LockedFile();
    public static IDisposable AcquireLock(string path, TimeSpan timeout, bool writer);
}
internal class System.Deployment.Application.Logger : object {
    protected SourceSection _sources;
    protected IdentitySection _identities;
    protected SummarySection _summary;
    protected ErrorSection _errors;
    protected WarningSection _warnings;
    protected PhaseSection _phases;
    protected ExecutionFlowSection _executionFlow;
    protected TransactionSection _transactions;
    protected LogIdentity _logIdentity;
    protected string _logFilePath;
    protected string _urlName;
    protected LogFileLocation _logFileLocation;
    protected static object _logFileEncoding;
    protected static Hashtable _loggerCollection;
    protected static Hashtable _threadLogIdTable;
    protected static object _logAccessLock;
    protected static bool _detailedLoggingEnabled;
    protected static object _header;
    protected TransactionSection Transactions { get; }
    protected ErrorSection Errors { get; }
    protected WarningSection Warnings { get; }
    protected PhaseSection Phases { get; }
    protected ExecutionFlowSection ExecutionFlow { get; }
    protected SourceSection Sources { get; }
    protected IdentitySection Identities { get; }
    protected SummarySection Summary { get; }
    protected LogIdentity Identity { get; }
    protected string LogFilePath { get; }
    protected static Encoding LogFileEncoding { get; }
    protected static HeaderSection Header { get; }
    private static Logger();
    protected TransactionSection get_Transactions();
    protected ErrorSection get_Errors();
    protected WarningSection get_Warnings();
    protected PhaseSection get_Phases();
    protected ExecutionFlowSection get_ExecutionFlow();
    protected SourceSection get_Sources();
    protected IdentitySection get_Identities();
    protected SummarySection get_Summary();
    protected LogIdentity get_Identity();
    protected static string GetRegitsryBasedLogFilePath();
    protected string GetWinInetBasedLogFilePath();
    protected string get_LogFilePath();
    protected FileStream CreateLogFileStream();
    protected static Encoding get_LogFileEncoding();
    protected bool FlushLogs();
    protected void EndLogOperation();
    protected static UInt32 GetCurrentLogThreadId();
    protected static Logger GetCurrentThreadLogger();
    protected static Logger GetLogger(LogIdentity logIdentity);
    protected static void AddLogger(Logger logger);
    protected static void AddCurrentThreadLogger(Logger logger);
    protected static void RemoveLogger(LogIdentity logIdentity);
    protected static void RemoveCurrentThreadLogger();
    protected static HeaderSection get_Header();
    internal static LogIdentity StartCurrentThreadLogging();
    internal static void EndCurrentThreadLogging();
    internal static LogIdentity StartLogging();
    internal static void EndLogging(LogIdentity logIdentity);
    internal static void SetSubscriptionUrl(Uri subscriptionUri);
    internal static void SetSubscriptionUrl(LogIdentity log, Uri subscriptionUri);
    internal static void SetSubscriptionServerInformation(ServerInformation serverInformation);
    internal static void SetSubscriptionUrl(string subscrioptionUrl);
    internal static void SetDeploymentProviderUrl(Uri deploymentProviderUri);
    internal static void SetDeploymentProviderServerInformation(ServerInformation serverInformation);
    internal static void SetApplicationUrl(Uri applicationUri);
    internal static void SetApplicationUrl(LogIdentity log, Uri applicationUri);
    internal static void SetApplicationServerInformation(ServerInformation serverInformation);
    internal static void SetTextualSubscriptionIdentity(string textualIdentity);
    internal static void SetTextualSubscriptionIdentity(LogIdentity log, string textualIdentity);
    internal void SetTextualSubscriptionIdentity(DefinitionIdentity definitionIdentity);
    internal static void SetDeploymentManifest(AssemblyManifest deploymentManifest);
    internal static void SetDeploymentManifest(LogIdentity log, AssemblyManifest deploymentManifest);
    internal static void SetApplicationManifest(AssemblyManifest applicationManifest);
    internal static void SetApplicationManifest(LogIdentity log, AssemblyManifest applicationManifest);
    internal static void AddErrorInformation(string message, Exception exception, DateTime time);
    internal static void AddErrorInformation(LogIdentity log, string message, Exception exception, DateTime time);
    internal static void AddWarningInformation(string message, DateTime time);
    internal static void AddPhaseInformation(string message, DateTime time);
    internal static void AddMethodCall(string message, DateTime time);
    internal static void AddMethodCall(LogIdentity log, string message, DateTime time);
    internal static void AddInternalState(string message, DateTime time);
    internal static void AddInternalState(LogIdentity log, string message, DateTime time);
    internal static void AddTransactionInformation(StoreTransactionOperation[] storeOperations, UInt32[] rgDispositions, Int32[] rgResults, DateTime time);
    internal static void AddErrorInformation(string message, Exception exception);
    internal static void AddErrorInformation(LogIdentity log, string message, Exception exception);
    internal static void AddErrorInformation(Exception exception, string messageFormat, Object[] args);
    internal static void AddWarningInformation(string message);
    internal static void AddPhaseInformation(string message);
    internal static void AddMethodCall(string message);
    internal static void AddMethodCall(LogIdentity log, string message);
    internal static void AddMethodCall(string messageFormat, Object[] args);
    internal static void AddInternalState(LogIdentity log, string message);
    internal static void AddInternalState(string message);
    internal static void AddPhaseInformation(string messageFormat, Object[] args);
    internal static void AddTransactionInformation(StoreTransactionOperation[] storeOperations, UInt32[] rgDispositions, Int32[] rgResults);
    internal static string GetLogFilePath();
    internal static string GetLogFilePath(LogIdentity log);
    internal static string GetLogFilePath(Logger logger);
    internal static bool FlushCurrentThreadLogs();
    internal static bool FlushLog(LogIdentity log);
    internal static string Serialize(WebRequest httpreq);
    internal static string Serialize(WebResponse response);
    internal static string Serialize(TrustManagerContext tmc);
}
[FlagsAttribute]
internal enum System.Deployment.Application.MaintenanceFlags : Enum {
    public int value__;
    public static MaintenanceFlags ClearFlag;
    public static MaintenanceFlags RestorationPossible;
    public static MaintenanceFlags RestoreSelected;
    public static MaintenanceFlags RemoveSelected;
}
internal class System.Deployment.Application.MaintenanceInfo : object {
    public MaintenanceFlags maintenanceFlags;
}
internal class System.Deployment.Application.MaintenancePiece : ModalPiece {
    public MaintenancePiece(UserInterfaceForm parentForm, UserInterfaceInfo info, MaintenanceInfo maintenanceInfo, ManualResetEvent modalEvent);
}
internal class System.Deployment.Application.Manifest.AssemblyManifest : object {
    public string RawXmlFilePath { get; }
    public Byte[] RawXmlBytes { get; }
    public DefinitionIdentity Identity { get; }
    public ulong SizeInBytes { get; }
    public DefinitionIdentity Id1Identity { get; }
    public DefinitionIdentity ComplibIdentity { get; }
    public bool Id1ManifestPresent { get; }
    public string Id1RequestedExecutionLevel { get; }
    public UInt32 ManifestFlags { get; }
    public string RequestedExecutionLevel { get; }
    public bool RequestedExecutionLevelUIAccess { get; }
    public bool Application { get; }
    public bool UseManifestForTrust { get; }
    public Description Description { get; }
    public Deployment Deployment { get; }
    public DependentOS DependentOS { get; }
    public DependentAssembly[] DependentAssemblies { get; }
    public FileAssociation[] FileAssociations { get; }
    public File[] Files { get; }
    public CompatibleFrameworks CompatibleFrameworks { get; }
    public EntryPoint[] EntryPoints { get; }
    public DependentAssembly MainDependentAssembly { get; }
    public DependentAssembly CLRDependentAssembly { get; }
    public bool RequiredHashMissing { get; }
    public bool Signed { get; }
    public ManifestSourceFormat ManifestSourceFormat { get; }
    public AssemblyManifest(FileStream fileStream);
    public AssemblyManifest(Stream stream);
    public AssemblyManifest(string filePath);
    public AssemblyManifest(ICMS cms);
    private static AssemblyManifest();
    public string get_RawXmlFilePath();
    public Byte[] get_RawXmlBytes();
    public DefinitionIdentity get_Identity();
    public ulong get_SizeInBytes();
    public DefinitionIdentity get_Id1Identity();
    public DefinitionIdentity get_ComplibIdentity();
    public bool get_Id1ManifestPresent();
    public string get_Id1RequestedExecutionLevel();
    public UInt32 get_ManifestFlags();
    public string get_RequestedExecutionLevel();
    public bool get_RequestedExecutionLevelUIAccess();
    public bool get_Application();
    public bool get_UseManifestForTrust();
    public Description get_Description();
    public Deployment get_Deployment();
    public DependentOS get_DependentOS();
    public DependentAssembly[] get_DependentAssemblies();
    public FileAssociation[] get_FileAssociations();
    public File[] get_Files();
    public CompatibleFrameworks get_CompatibleFrameworks();
    public EntryPoint[] get_EntryPoints();
    public DependentAssembly get_MainDependentAssembly();
    public DependentAssembly get_CLRDependentAssembly();
    public bool get_RequiredHashMissing();
    public bool get_Signed();
    public void ValidateSemantics(ManifestType manifestType);
    public File[] GetFilesInGroup(string group, bool optionalOnly);
    public DependentAssembly[] GetPrivateAssembliesInGroup(string group, bool optionalOnly);
    public DependentAssembly GetDependentAssemblyByIdentity(IReferenceIdentity refid);
    public File GetFileFromName(string fileName);
    public ulong CalculateDependenciesSize();
    public ManifestSourceFormat get_ManifestSourceFormat();
    internal void ValidateSignature(Stream s);
    internal static void ReValidateManifestSignatures(AssemblyManifest depManifest, AssemblyManifest appManifest);
    internal void ValidateSemanticsForDeploymentRole();
    internal void ValidateSemanticsForApplicationRole();
    internal static CertificateStatus AnalyzeManifestCertificate(string manifestPath);
    internal static Uri UriFromMetadataEntry(string uriString, string exResourceStr);
}
internal class System.Deployment.Application.Manifest.DependentAssembly : object {
    public ReferenceIdentity Identity { get; }
    public string Codebase { get; }
    public ulong Size { get; }
    public string Group { get; }
    public string CodebaseFS { get; }
    public string Description { get; }
    public Uri SupportUrl { get; }
    public string ResourceFallbackCulture { get; }
    public bool IsPreRequisite { get; }
    public bool IsOptional { get; }
    public HashCollection HashCollection { get; }
    public DependentAssembly(ReferenceIdentity refId);
    public DependentAssembly(AssemblyReferenceEntry assemblyReferenceEntry);
    public ReferenceIdentity get_Identity();
    public string get_Codebase();
    public ulong get_Size();
    public string get_Group();
    public string get_CodebaseFS();
    public string get_Description();
    public Uri get_SupportUrl();
    public string get_ResourceFallbackCulture();
    public bool get_IsPreRequisite();
    public bool get_IsOptional();
    public HashCollection get_HashCollection();
}
internal class System.Deployment.Application.Manifest.DependentOS : object {
    public ushort MajorVersion { get; }
    public ushort MinorVersion { get; }
    public ushort BuildNumber { get; }
    public byte ServicePackMajor { get; }
    public byte ServicePackMinor { get; }
    public Uri SupportUrl { get; }
    public DependentOS(DependentOSMetadataEntry dependentOSMetadataEntry);
    public ushort get_MajorVersion();
    public ushort get_MinorVersion();
    public ushort get_BuildNumber();
    public byte get_ServicePackMajor();
    public byte get_ServicePackMinor();
    public Uri get_SupportUrl();
}
internal class System.Deployment.Application.Manifest.Deployment : object {
    public Uri ProviderCodebaseUri { get; }
    public DeploymentUpdate DeploymentUpdate { get; }
    public Version MinimumRequiredVersion { get; }
    public bool DisallowUrlActivation { get; }
    public bool Install { get; }
    public bool TrustURLParameters { get; }
    public bool MapFileExtensions { get; }
    public bool CreateDesktopShortcut { get; }
    public bool IsUpdateSectionPresent { get; }
    public bool IsInstalledAndNoDeploymentProvider { get; }
    public Deployment(DeploymentMetadataEntry deploymentMetadataEntry);
    public Uri get_ProviderCodebaseUri();
    public DeploymentUpdate get_DeploymentUpdate();
    public Version get_MinimumRequiredVersion();
    public bool get_DisallowUrlActivation();
    public bool get_Install();
    public bool get_TrustURLParameters();
    public bool get_MapFileExtensions();
    public bool get_CreateDesktopShortcut();
    public bool get_IsUpdateSectionPresent();
    public bool get_IsInstalledAndNoDeploymentProvider();
}
internal class System.Deployment.Application.Manifest.DeploymentUpdate : object {
    public bool BeforeApplicationStartup { get; }
    public bool MaximumAgeSpecified { get; }
    public TimeSpan MaximumAgeAllowed { get; }
    public DeploymentUpdate(DeploymentMetadataEntry entry);
    public bool get_BeforeApplicationStartup();
    public bool get_MaximumAgeSpecified();
    public TimeSpan get_MaximumAgeAllowed();
}
internal class System.Deployment.Application.Manifest.Description : object {
    public string Publisher { get; }
    public string Product { get; }
    public Uri SupportUri { get; }
    public string SupportUrl { get; }
    public string IconFile { get; }
    public string IconFileFS { get; }
    public Uri ErrorReportUri { get; }
    public string ErrorReportUrl { get; }
    public string FilteredPublisher { get; }
    public string FilteredProduct { get; }
    public string FilteredSuiteName { get; }
    public Description(DescriptionMetadataEntry descriptionMetadataEntry);
    public string get_Publisher();
    public string get_Product();
    public Uri get_SupportUri();
    public string get_SupportUrl();
    public string get_IconFile();
    public string get_IconFileFS();
    public Uri get_ErrorReportUri();
    public string get_ErrorReportUrl();
    public string get_FilteredPublisher();
    public string get_FilteredProduct();
    public string get_FilteredSuiteName();
}
internal class System.Deployment.Application.Manifest.EntryPoint : object {
    public DependentAssembly Assembly { get; }
    public string CommandFile { get; }
    public bool HostInBrowser { get; }
    public bool CustomHostSpecified { get; }
    public bool CustomUX { get; }
    public string CommandParameters { get; }
    public EntryPoint(EntryPointEntry entryPointEntry, AssemblyManifest manifest);
    public DependentAssembly get_Assembly();
    public string get_CommandFile();
    public bool get_HostInBrowser();
    public bool get_CustomHostSpecified();
    public bool get_CustomUX();
    public string get_CommandParameters();
}
internal class System.Deployment.Application.Manifest.File : object {
    public string Name { get; }
    public ulong Size { get; }
    public string Group { get; }
    public bool IsOptional { get; }
    public bool IsData { get; }
    public string NameFS { get; }
    public HashCollection HashCollection { get; }
    protected internal File(string name, ulong size);
    public File(string name, Byte[] hash, ulong size);
    public File(FileEntry fileEntry);
    public string get_Name();
    public ulong get_Size();
    public string get_Group();
    public bool get_IsOptional();
    public bool get_IsData();
    public string get_NameFS();
    public HashCollection get_HashCollection();
}
internal class System.Deployment.Application.Manifest.FileAssociation : object {
    public string Extension { get; }
    public string Description { get; }
    public string ProgID { get; }
    public string DefaultIcon { get; }
    public string Parameter { get; }
    public FileAssociation(FileAssociationEntry fileAssociationEntry);
    public string get_Extension();
    public string get_Description();
    public string get_ProgID();
    public string get_DefaultIcon();
    public string get_Parameter();
    public virtual string ToString();
}
internal enum System.Deployment.Application.Manifest.hashAlgorithmType : Enum {
    public int value__;
    public static hashAlgorithmType sha1;
    public static hashAlgorithmType sha256;
    public static hashAlgorithmType sha384;
    public static hashAlgorithmType sha512;
}
internal enum System.Deployment.Application.Manifest.ManifestSourceFormat : Enum {
    public int value__;
    public static ManifestSourceFormat XmlFile;
    public static ManifestSourceFormat CompLib;
    public static ManifestSourceFormat ID_1;
    public static ManifestSourceFormat Stream;
    public static ManifestSourceFormat Unknown;
}
internal enum System.Deployment.Application.Manifest.timeUnitType : Enum {
    public int value__;
    public static timeUnitType hours;
    public static timeUnitType days;
    public static timeUnitType weeks;
}
internal static class System.Deployment.Application.ManifestGenerator : object {
    private static ManifestGenerator();
    public static DefinitionIdentity GenerateManifest(ReferenceIdentity suggestedReferenceIdentity, AssemblyManifest manifest, string outputManifest);
    public static void GenerateGACDetectionManifest(ReferenceIdentity refId, string outputManifest);
}
internal static class System.Deployment.Application.ManifestReader : object {
    internal static AssemblyManifest FromDocument(string localPath, ManifestType manifestType, Uri sourceUri);
    internal static AssemblyManifest FromDocumentNoValidation(string localPath);
}
internal static class System.Deployment.Application.ManifestValidatingReader : object {
    private static ManifestValidatingReader();
    public static XmlReader Create(Stream stream);
}
internal class System.Deployment.Application.ModalPiece : FormPiece {
    protected ManualResetEvent _modalEvent;
    protected UserInterfaceModalResult _modalResult;
    public UserInterfaceModalResult ModalResult { get; }
    public UserInterfaceModalResult get_ModalResult();
    public virtual bool OnClosing();
    protected virtual void Dispose(bool disposing);
}
internal static class System.Deployment.Application.NativeMethods : object {
    internal static IntPtr INVALID_HANDLE_VALUE;
    public static ushort PROCESSOR_ARCHITECTURE_INTEL;
    public static ushort PROCESSOR_ARCHITECTURE_IA64;
    public static ushort PROCESSOR_ARCHITECTURE_AMD64;
    private static NativeMethods();
    public static void GetSystemInfo(SYSTEM_INFO& sysInfo);
    public static void GetNativeSystemInfo(SYSTEM_INFO& sysInfo);
    public static bool VerifyVersionInfo(OSVersionInfoEx osvi, UInt32 dwTypeMask, ulong dwConditionMask);
    public static ulong VerSetConditionMask(ulong ConditionMask, UInt32 TypeMask, byte Condition);
    public static IntPtr LoadLibraryEx(string lpModuleName, IntPtr hFile, UInt32 dwFlags);
    public static IntPtr LoadLibrary(string lpModuleName);
    public static IntPtr GetProcAddress(IntPtr hModule, string procedureName);
    public static bool FreeLibrary(IntPtr hModule);
    public static IntPtr FindResource(IntPtr hModule, string lpName, string lpType);
    public static IntPtr LoadResource(IntPtr hModule, IntPtr handle);
    public static IntPtr LockResource(IntPtr hglobal);
    public static UInt32 SizeofResource(IntPtr hModule, IntPtr handle);
    internal static bool CloseHandle(HandleRef handle);
    internal static int GetShortPathName(string LongPath, StringBuilder ShortPath, int BufferSize);
    internal static SafeFileHandle CreateFile(string lpFileName, UInt32 dwDesiredAccess, UInt32 dwShareMode, IntPtr lpSecurityAttributes, UInt32 dwCreationDisposition, UInt32 dwFlagsAndAttributes, IntPtr hTemplateFile);
    internal static void CorLaunchApplication(UInt32 hostType, string applicationFullName, int manifestPathsCount, String[] manifestPaths, int activationDataCount, String[] activationData, PROCESS_INFORMATION processInformation);
    internal static void CreateAssemblyCache(IAssemblyCache& ppAsmCache, int reserved);
    internal static object GetAssemblyIdentityFromFile(string filePath, Guid& riid);
    internal static void CreateAssemblyNameObject(IAssemblyName& ppEnum, string szAssemblyName, UInt32 dwFlags, IntPtr pvReserved);
    internal static void CreateAssemblyEnum(IAssemblyEnum& ppEnum, IApplicationContext pAppCtx, IAssemblyName pName, UInt32 dwFlags, IntPtr pvReserved);
    internal static IntPtr CreateActCtxW(ACTCTXW actCtx);
    internal static void ReleaseActCtx(IntPtr hActCtx);
    internal static string GetLoadedModulePath(string moduleName);
    public static IntPtr GetModuleHandle(string moduleName);
    public static int GetModuleFileName(IntPtr module, StringBuilder fileName, int size);
    public static UInt32 GetCurrentThreadId();
    internal static bool CreateUrlCacheEntry(string urlName, int expectedFileSize, string fileExtension, StringBuilder fileName, int dwReserved);
    internal static bool CommitUrlCacheEntry(string lpszUrlName, string lpszLocalFileName, long ExpireTime, long LastModifiedTime, UInt32 CacheEntryType, string lpHeaderInfo, int dwHeaderSize, string lpszFileExtension, string lpszOriginalUrl);
    public static IAssemblyCache GetAssemblyCacheInterface(string CLRVersionString, bool FetchRuntimeHost, CCorRuntimeHost& RuntimeHost);
    public static bool VerifyCLRVersionInfo(Version v, string procArch);
    [SecurityCriticalAttribute]
public static void GetFileVersion(string szFileName, StringBuilder szBuffer, UInt32 cchBuffer, UInt32& dwLength);
    public static void GetRequestedRuntimeInfo(string pExe, string pwszVersion, string pConfigurationFile, UInt32 startupFlags, UInt32 runtimeInfoFlags, StringBuilder pDirectory, UInt32 dwDirectory, UInt32& dwDirectoryLength, StringBuilder pVersion, UInt32 cchBuffer, UInt32& dwLength);
    public static bool InternetGetCookieW(string url, string cookieName, StringBuilder cookieData, UInt32& bytes);
    public static void SHChangeNotify(int eventID, UInt32 flags, IntPtr item1, IntPtr item2);
    public static UInt32 SHCreateItemFromParsingName(string pszPath, IntPtr pbc, Guid riid, Object& ppv);
    public static UInt32 CoCreateInstance(Guid& clsid, object punkOuter, int context, Guid& iid, Object& o);
}
internal static class System.Deployment.Application.PathHelper : object {
    public static string ShortShimDllPath { get; }
    public static string GetShortPath(string longPath);
    public static string get_ShortShimDllPath();
    public static string GenerateRandomPath(UInt32 segmentCount);
    public static string GetRootSegmentPath(string path, UInt32 segmentCount);
}
internal static class System.Deployment.Application.PathTwiddler : object {
    public static string FilterString(string input, char chReplace, bool fMultiReplace);
}
internal class System.Deployment.Application.PEStream : Stream {
    protected bool _canRead;
    protected bool _canSeek;
    protected FileStream _peFile;
    protected long _length;
    protected long _position;
    protected static ushort _id1ManifestId;
    protected static ushort _id1ManifestLanguageId;
    protected StreamComponentList _streamComponents;
    internal static ushort IMAGE_DOS_SIGNATURE;
    internal static UInt32 IMAGE_NT_SIGNATURE;
    internal static UInt32 IMAGE_NT_OPTIONAL_HDR32_MAGIC;
    internal static UInt32 IMAGE_NT_OPTIONAL_HDR64_MAGIC;
    internal static UInt32 IMAGE_NUMBEROF_DIRECTORY_ENTRIES;
    internal static UInt32 IMAGE_FILE_DLL;
    protected static UInt32 IMAGE_DIRECTORY_ENTRY_EXPORT;
    protected static UInt32 IMAGE_DIRECTORY_ENTRY_IMPORT;
    protected static UInt32 IMAGE_DIRECTORY_ENTRY_RESOURCE;
    protected static UInt32 IMAGE_DIRECTORY_ENTRY_EXCEPTION;
    protected static UInt32 IMAGE_DIRECTORY_ENTRY_SECURITY;
    protected static UInt32 IMAGE_DIRECTORY_ENTRY_BASERELOC;
    protected static UInt32 IMAGE_DIRECTORY_ENTRY_DEBUG;
    protected static UInt32 IMAGE_DIRECTORY_ENTRY_ARCHITECTURE;
    protected static UInt32 IMAGE_DIRECTORY_ENTRY_GLOBALPTR;
    protected static UInt32 IMAGE_DIRECTORY_ENTRY_TLS;
    protected static UInt32 IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG;
    protected static UInt32 IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT;
    protected static UInt32 IMAGE_DIRECTORY_ENTRY_IAT;
    protected static UInt32 IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT;
    protected static UInt32 IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR;
    protected static UInt32 IMAGE_RESOURCE_NAME_IS_STRING;
    protected static UInt32 IMAGE_RESOURCE_DATA_IS_DIRECTORY;
    protected DosHeader _dosHeader;
    protected DosStub _dosStub;
    protected NtSignature _ntSignature;
    protected FileHeader _fileHeader;
    protected OptionalHeader _optionalHeader;
    protected ArrayList _dataDirectories;
    protected ArrayList _sectionHeaders;
    protected ArrayList _sections;
    protected ResourceSection _resourceSection;
    protected bool _partialConstruct;
    protected static ushort ManifestDirId;
    protected static int ErrorBadFormat;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public bool IsImageFileDll { get; }
    public static ushort Id1ManifestId { get; }
    public static ushort Id1ManifestLanguageId { get; }
    public PEStream(string filePath);
    public PEStream(string filePath, bool partialConstruct);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public bool get_IsImageFileDll();
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
    public void ZeroOutOptionalHeaderCheckSum();
    public void ZeroOutManifestResource(ushort manifestId, ushort languageId);
    public Byte[] GetManifestResource(ushort manifestId, ushort languageId);
    public static ushort get_Id1ManifestId();
    public static ushort get_Id1ManifestLanguageId();
    public Byte[] GetDefaultId1ManifestResource();
    public void ZeroOutDefaultId1ManifestResource();
    protected ResourceData GetId1ManifestResource();
    protected ResourceComponent RetrieveResource(Object[] keys);
    protected ResourceComponent RetrieveResource(ResourceDirectory resourcesDirectory, Object[] keys, UInt32 keyIndex);
    protected void ConstructPEImage(FileStream file, bool partialConstruct);
    protected void ConstructStream();
}
internal static class System.Deployment.Application.PlatformDetector : object {
    private static PlatformDetector();
    public static string FormatFrameworkString(CompatibleFramework framework);
    public static bool DetectFrameworkInRegistry(string setupKeyPath, string setupValueName, Version versionRequired, bool detectInstallValue);
    public static bool DetectTFMInRegistry(string clrVersion, string frameworkVersion, string profile);
    public static bool CheckCompatibleFramework(CompatibleFramework framework, Version& clrVersion, String& clrVersionString, string clrProcArch);
    public static bool IsCLRDependencyText(string clrTextName);
    public static bool IsSupportedProcessorArchitecture(string arch);
    public static bool VerifyOSDependency(OSDependency& osd);
    public static bool VerifyGACDependency(IAssemblyCache AssemblyCache, bool targetOtherClr, CCorRuntimeHost RuntimeHost, ReferenceIdentity refId, string tempDir);
    public static bool VerifyGACDependencyWhidbey(IAssemblyCache AssemblyCache, bool targetOtherClr, CCorRuntimeHost RuntimeHost, ReferenceIdentity refId);
    public static bool VerifyGACDependencyXP(ReferenceIdentity refId, string tempDir);
    public static bool IsWin8orLater();
    public static void VerifyPlatformDependencies(AssemblyManifest appManifest, AssemblyManifest deployManifest, string tempDir);
}
internal class System.Deployment.Application.PlatformPiece : ModalPiece {
    public PlatformPiece(UserInterfaceForm parentForm, string platformDetectionErrorMsg, Uri supportUrl, ManualResetEvent modalEvent);
}
internal static class System.Deployment.Application.PlatformSpecific : object {
    public static bool OnWin9x { get; }
    public static bool OnWinMe { get; }
    public static bool OnXPOrAbove { get; }
    public static bool OnWindows2003 { get; }
    public static bool OnVistaOrAbove { get; }
    public static bool get_OnWin9x();
    public static bool get_OnWinMe();
    public static bool get_OnXPOrAbove();
    public static bool get_OnWindows2003();
    public static bool get_OnVistaOrAbove();
}
internal static class System.Deployment.Application.PolicyKeys : object {
    public static bool RequireSignedManifests();
    public static bool RequireHashInManifests();
    public static bool SkipDeploymentProvider();
    public static bool SkipApplicationDependencyHashCheck();
    public static bool SkipSignatureValidation();
    public static bool SkipSchemaValidation();
    public static bool SkipSemanticValidation();
    public static bool SuppressLimitOnNumberOfActivations();
    public static bool DisableGenericExceptionHandler();
    public static ushort GetLogVerbosityLevel();
    public static bool ProduceDetailedExecutionSectionInLog();
    public static HostType ClrHostType();
    public static bool SkipSKUDetection();
}
internal class System.Deployment.Application.ProgressPiece : FormPiece {
    public ProgressPiece(UserInterfaceForm parentForm, UserInterfaceInfo info);
    private static ProgressPiece();
    public sealed virtual void DownloadModified(object sender, DownloadEventArgs e);
    public sealed virtual void DownloadCompleted(object sender, DownloadEventArgs e);
    public virtual bool OnClosing();
}
[DefaultMemberAttribute("Item")]
internal class System.Deployment.Application.ReferenceIdentity : object {
    public string Item { get; public set; }
    public string Name { get; }
    public string Culture { get; }
    public Version Version { get; }
    public string PublicKeyToken { get; }
    public string ProcessorArchitecture { get; public set; }
    public ulong Hash { get; }
    public IDENTITY_ATTRIBUTE[] Attributes { get; }
    public IReferenceIdentity ComPointer { get; }
    public ReferenceIdentity(string text);
    public ReferenceIdentity(IReferenceIdentity idComPtr);
    public string get_Item(string name);
    public void set_Item(string name, string value);
    public string get_Name();
    public string get_Culture();
    public Version get_Version();
    public string get_PublicKeyToken();
    public string get_ProcessorArchitecture();
    public void set_ProcessorArchitecture(string value);
    public ulong get_Hash();
    public IDENTITY_ATTRIBUTE[] get_Attributes();
    public IReferenceIdentity get_ComPointer();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual object Clone();
}
internal static class System.Deployment.Application.Resources : object {
    private static Resources();
    public static string GetString(string s);
    public static Image GetImage(string imageName);
    public static Icon GetIcon(string iconName, int width, int height);
}
internal class System.Deployment.Application.ServerInformation : object {
    public string Server { get; public set; }
    public string PoweredBy { get; public set; }
    public string AspNetVersion { get; public set; }
    public string get_Server();
    public void set_Server(string value);
    public string get_PoweredBy();
    public void set_PoweredBy(string value);
    public string get_AspNetVersion();
    public void set_AspNetVersion(string value);
}
internal static class System.Deployment.Application.ShellExposure : object {
    public static void UpdateSubscriptionShellExposure(SubscriptionState subState);
    public static void RemoveSubscriptionShellExposure(SubscriptionState subState);
    public static void RemoveShellExtensions(DefinitionIdentity subId, AssemblyManifest appManifest, string productName);
    public static void ParseAppShortcut(string shortcutFile, DefinitionIdentity& subId, Uri& providerUri);
    internal static void RemovePins(SubscriptionState subState);
    public static void UpdateShellExtensions(SubscriptionState subState, ShellExposureInformation& shellExposureInformation);
}
internal class System.Deployment.Application.SplashInfo : object {
    public bool initializedAsWait;
    public ManualResetEvent pieceReady;
    public bool cancelled;
}
internal class System.Deployment.Application.SplashPiece : FormPiece {
    public SplashPiece(UserInterfaceForm parentForm, SplashInfo info);
    public virtual bool OnClosing();
    protected virtual void Dispose(bool disposing);
}
internal class System.Deployment.Application.SubscriptionState : object {
    public DefinitionIdentity SubscriptionId { get; }
    public SubscriptionStore SubscriptionStore { get; }
    public bool IsInstalled { get; }
    public bool IsShellVisible { get; }
    public DefinitionAppId CurrentBind { get; }
    public DefinitionAppId PreviousBind { get; }
    public DefinitionAppId PendingBind { get; }
    public DefinitionIdentity PendingDeployment { get; }
    public DefinitionIdentity ExcludedDeployment { get; }
    public Uri DeploymentProviderUri { get; }
    public Version MinimumRequiredVersion { get; }
    public DateTime LastCheckTime { get; }
    public DefinitionIdentity UpdateSkippedDeployment { get; }
    public DateTime UpdateSkipTime { get; }
    public AppType appType { get; }
    public DefinitionIdentity CurrentDeployment { get; }
    public DefinitionIdentity RollbackDeployment { get; }
    public AssemblyManifest CurrentDeploymentManifest { get; }
    public Uri CurrentDeploymentSourceUri { get; }
    public AssemblyManifest CurrentApplicationManifest { get; }
    public Uri CurrentApplicationSourceUri { get; }
    public AssemblyManifest PreviousApplicationManifest { get; }
    public DefinitionIdentity PKTGroupId { get; }
    public Description EffectiveDescription { get; }
    public string EffectiveCertificatePublicKeyToken { get; }
    public SubscriptionState(SubscriptionStore subStore, DefinitionIdentity subId);
    public SubscriptionState(SubscriptionStore subStore, AssemblyManifest deployment);
    public void Invalidate();
    public DefinitionIdentity get_SubscriptionId();
    public SubscriptionStore get_SubscriptionStore();
    public bool get_IsInstalled();
    public bool get_IsShellVisible();
    public DefinitionAppId get_CurrentBind();
    public DefinitionAppId get_PreviousBind();
    public DefinitionAppId get_PendingBind();
    public DefinitionIdentity get_PendingDeployment();
    public DefinitionIdentity get_ExcludedDeployment();
    public Uri get_DeploymentProviderUri();
    public Version get_MinimumRequiredVersion();
    public DateTime get_LastCheckTime();
    public DefinitionIdentity get_UpdateSkippedDeployment();
    public DateTime get_UpdateSkipTime();
    public AppType get_appType();
    public DefinitionIdentity get_CurrentDeployment();
    public DefinitionIdentity get_RollbackDeployment();
    public AssemblyManifest get_CurrentDeploymentManifest();
    public Uri get_CurrentDeploymentSourceUri();
    public AssemblyManifest get_CurrentApplicationManifest();
    public Uri get_CurrentApplicationSourceUri();
    public AssemblyManifest get_PreviousApplicationManifest();
    public DefinitionIdentity get_PKTGroupId();
    public Description get_EffectiveDescription();
    public string get_EffectiveCertificatePublicKeyToken();
    public virtual string ToString();
}
internal class System.Deployment.Application.SubscriptionStateInternal : object {
    public bool IsInstalled;
    public bool IsShellVisible;
    public DefinitionAppId CurrentBind;
    public DefinitionAppId PreviousBind;
    public DefinitionAppId PendingBind;
    public DefinitionIdentity PendingDeployment;
    public DefinitionIdentity ExcludedDeployment;
    public Uri DeploymentProviderUri;
    public Version MinimumRequiredVersion;
    public DateTime LastCheckTime;
    public DateTime UpdateSkipTime;
    public DefinitionIdentity UpdateSkippedDeployment;
    public AppType appType;
    public DefinitionIdentity CurrentDeployment;
    public DefinitionIdentity RollbackDeployment;
    public AssemblyManifest CurrentDeploymentManifest;
    public Uri CurrentDeploymentSourceUri;
    public DefinitionIdentity CurrentApplication;
    public AssemblyManifest CurrentApplicationManifest;
    public Uri CurrentApplicationSourceUri;
    public DefinitionIdentity PreviousApplication;
    public AssemblyManifest PreviousApplicationManifest;
    public SubscriptionStateInternal(SubscriptionState subState);
    public virtual string ToString();
    public void Reset();
}
internal class System.Deployment.Application.SubscriptionStateVariable : object {
    public string PropertyName;
    public object NewValue;
    public object OldValue;
    public bool IsUnchanged { get; }
    public SubscriptionStateVariable(string name, object newValue, object oldValue);
    public bool get_IsUnchanged();
}
internal class System.Deployment.Application.SubscriptionStore : object {
    public static SubscriptionStore CurrentUser { get; }
    private static SubscriptionStore();
    public static SubscriptionStore get_CurrentUser();
    public void RefreshStorePointer();
    public void CleanOnlineAppCache();
    public void CommitApplication(SubscriptionState& subState, CommitApplicationParams commitParams);
    public void RollbackSubscription(SubscriptionState subState);
    public void UninstallSubscription(SubscriptionState subState);
    public void UninstallCustomUXSubscription(SubscriptionState subState);
    public void UninstallCustomHostSpecifiedSubscription(SubscriptionState subState);
    public void SetPendingDeployment(SubscriptionState subState, DefinitionIdentity deployId, DateTime checkTime);
    public void SetLastCheckTimeToNow(SubscriptionState subState);
    public void SetUpdateSkipTime(SubscriptionState subState, DefinitionIdentity updateSkippedDeployment, DateTime updateSkipTime);
    public bool CheckAndReferenceApplication(SubscriptionState subState, DefinitionAppId appId, long transactionId);
    public void ActivateApplication(DefinitionAppId appId, string activationParameter, bool useActivationParameter);
    public FileStream AcquireReferenceTransaction(Int64& transactionId);
    public SubscriptionState GetSubscriptionState(DefinitionIdentity subId);
    public SubscriptionState GetSubscriptionState(AssemblyManifest deployment);
    public SubscriptionStateInternal GetSubscriptionStateInternal(SubscriptionState subState);
    public void CheckForDeploymentUpdate(SubscriptionState subState);
    public Version CheckUpdateInManifest(SubscriptionState subState, Uri updateCodebaseUri, AssemblyManifest deployment, Version currentVersion);
    public Version CheckUpdateInManifest(SubscriptionState subState, Uri updateCodebaseUri, AssemblyManifest deployment, Version currentVersion, Boolean& bUpdateInPKTGroup);
    public void CheckDeploymentSubscriptionState(SubscriptionState subState, AssemblyManifest deployment);
    public void CheckCustomUXFlag(SubscriptionState subState, AssemblyManifest application);
    public void ValidateFileAssoctiation(SubscriptionState subState, CommitApplicationParams commitParams);
    public void CheckInstalledAndShellVisible(SubscriptionState subState);
    public static void CheckInstalled(SubscriptionState subState);
    public static void CheckShellVisible(SubscriptionState subState);
    public bool CheckGroupInstalled(SubscriptionState subState, DefinitionAppId appId, string groupName);
    public bool CheckGroupInstalled(SubscriptionState subState, DefinitionAppId appId, AssemblyManifest appManifest, string groupName);
    public IDisposable AcquireSubscriptionReaderLock(SubscriptionState subState);
    public IDisposable AcquireSubscriptionWriterLock(SubscriptionState subState);
    public IDisposable AcquireStoreReaderLock();
    public IDisposable AcquireStoreWriterLock();
    public TempDirectory AcquireTempDirectory();
    public TempFile AcquireTempFile(string suffix);
    internal ulong GetPrivateSize(DefinitionAppId appId);
    internal ulong GetSharedSize(DefinitionAppId appId);
    internal ulong GetOnlineAppQuotaInBytes();
    internal ulong GetSizeLimitInBytesForSemiTrustApps();
    internal IPathLock LockApplicationPath(DefinitionAppId definitionAppId);
}
public class System.Deployment.Application.SupportedRuntimeMissingException : DependentPlatformMissingException {
    public string SupportedRuntimeVersion { get; }
    public SupportedRuntimeMissingException(string message);
    public SupportedRuntimeMissingException(string message, Exception innerException);
    protected SupportedRuntimeMissingException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    internal SupportedRuntimeMissingException(string message, Uri supportUrl, string supportedRuntimeVersion);
    public string get_SupportedRuntimeVersion();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class System.Deployment.Application.SyncGroupHelper : object {
    public bool CancellationPending { get; }
    public string Group { get; }
    public object UserState { get; }
    public SyncGroupHelper(string groupName, object userState, AsyncOperation asyncOp, SendOrPostCallback progressReporterDelegate);
    public void SetComplete();
    public void CancelAsync();
    public bool get_CancellationPending();
    public sealed virtual void DownloadModified(object sender, DownloadEventArgs e);
    public sealed virtual void DownloadCompleted(object sender, DownloadEventArgs e);
    public string get_Group();
    public object get_UserState();
}
internal class System.Deployment.Application.SynchronizeCompletedEventArgs : AsyncCompletedEventArgs {
    public string Group { get; }
    internal SynchronizeCompletedEventArgs(Exception error, bool cancelled, object userState, string groupName);
    public string get_Group();
}
internal class System.Deployment.Application.SynchronizeCompletedEventHandler : MulticastDelegate {
    public SynchronizeCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SynchronizeCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SynchronizeCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Deployment.Application.SystemNetDownloader : FileDownloader {
    protected void DownloadSingleFile(DownloadQueueItem next);
    protected virtual void DownloadAllFiles();
}
internal class System.Deployment.Application.TempDirectory : DisposableBase {
    public string Path { get; }
    public TempDirectory(string basePath);
    protected virtual void DisposeUnmanagedResources();
    public string get_Path();
}
internal class System.Deployment.Application.TempFile : DisposableBase {
    public string Path { get; }
    public TempFile(string basePath);
    public TempFile(string basePath, string suffix);
    protected virtual void DisposeUnmanagedResources();
    public string get_Path();
}
public class System.Deployment.Application.TrustNotGrantedException : DeploymentException {
    public TrustNotGrantedException(string message);
    public TrustNotGrantedException(string message, Exception innerException);
    internal TrustNotGrantedException(ExceptionTypes exceptionType, string message);
    internal TrustNotGrantedException(ExceptionTypes exceptionType, string message, Exception innerException);
    protected TrustNotGrantedException(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
internal class System.Deployment.Application.TrustParams : object {
    public bool NoPrompt { get; public set; }
    public bool get_NoPrompt();
    public void set_NoPrompt(bool value);
}
public class System.Deployment.Application.UpdateCheckInfo : object {
    public bool UpdateAvailable { get; }
    public Version AvailableVersion { get; }
    public bool IsUpdateRequired { get; }
    public Version MinimumRequiredVersion { get; }
    public long UpdateSizeBytes { get; }
    internal UpdateCheckInfo(bool updateAvailable, Version availableVersion, bool isUpdateRequired, Version minimumRequiredVersion, long updateSize);
    public bool get_UpdateAvailable();
    public Version get_AvailableVersion();
    public bool get_IsUpdateRequired();
    public Version get_MinimumRequiredVersion();
    public long get_UpdateSizeBytes();
}
internal class System.Deployment.Application.UpdatePiece : ModalPiece {
    public UpdatePiece(UserInterfaceForm parentForm, UserInterfaceInfo info, ManualResetEvent modalEvent);
}
internal static class System.Deployment.Application.UriHelper : object {
    private static UriHelper();
    public static void ValidateSupportedScheme(Uri uri);
    public static void ValidateSupportedSchemeInArgument(Uri uri, string argumentName);
    public static bool IsSupportedScheme(Uri uri);
    public static Uri UriFromRelativeFilePath(Uri baseUri, string path);
    public static bool IsValidRelativeFilePath(string path);
    public static string NormalizePathDirectorySeparators(string path);
    public static bool PathContainDirectorySeparators(string path);
}
internal class System.Deployment.Application.UserInterface : object {
    public UserInterface(bool wait);
    public sealed virtual void Dispose();
    public ProgressPiece ShowProgress(UserInterfaceInfo info);
    public UserInterfaceModalResult ShowUpdate(UserInterfaceInfo info);
    public UserInterfaceModalResult ShowMaintenance(UserInterfaceInfo info, MaintenanceInfo maintenanceInfo);
    public void ShowMessage(string message, string caption);
    public void ShowPlatform(string platformDetectionErrorMsg, Uri supportUrl);
    public void ShowError(string title, string message, string logFileLocation, string linkUrl, string linkUrlMessage);
    public void Hide();
    public void Activate();
    public bool SplashCancelled();
    public static string GetDisplaySite(Uri sourceUri);
    public static string LimitDisplayTextLength(string displayText);
    public static bool IsValidHttpUrl(string url);
    public static void LaunchUrlInBrowser(string url);
}
internal class System.Deployment.Application.UserInterfaceForm : Form {
    public UserInterfaceForm(ManualResetEvent readyEvent, SplashInfo splashInfo);
    public ProgressPiece ConstructProgressPiece(UserInterfaceInfo info);
    public UpdatePiece ConstructUpdatePiece(UserInterfaceInfo info, ManualResetEvent modalEvent);
    public ErrorPiece ConstructErrorPiece(string title, string message, string logFileLocation, string linkUrl, string linkUrlMessage, ManualResetEvent modalEvent);
    public PlatformPiece ConstructPlatformPiece(string platformDetectionErrorMsg, Uri supportUrl, ManualResetEvent modalEvent);
    public MaintenancePiece ConstructMaintenancePiece(UserInterfaceInfo info, MaintenanceInfo maintenanceInfo, ManualResetEvent modalEvent);
    public void ShowSimpleMessageBox(string message, string caption);
    public void SwitchUserInterfacePiece(FormPiece piece);
    protected virtual void OnLoad(EventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    protected virtual void OnClosing(CancelEventArgs e);
    protected virtual void SetVisibleCore(bool value);
    protected virtual void Dispose(bool disposing);
}
internal class System.Deployment.Application.UserInterfaceInfo : object {
    public string formTitle;
    public string productName;
    public string sourceSite;
    public string supportUrl;
    public string iconFilePath;
}
internal enum System.Deployment.Application.UserInterfaceModalResult : Enum {
    public int value__;
    public static UserInterfaceModalResult Unknown;
    public static UserInterfaceModalResult Ok;
    public static UserInterfaceModalResult Cancel;
    public static UserInterfaceModalResult Skip;
}
internal static class System.Deployment.Application.Utilities : object {
    public static int CompareWithNullEqEmpty(string s1, string s2, StringComparison comparisonType);
    public static bool DoesRegistryKeyExist(RegistryKey regRoot, string regKey);
    public static string BuildTFM(string targetVersion, string profile);
    public static void SetMarkOfTheWeb(string path);
    public static bool IsAppRepCheckRequired(string url);
}
internal class System.Deployment.Application.Win32InterOp.SystemUtils : object {
    public static Byte[] GetManifestFromPEResources(string filePath);
    internal static AssemblyInfo QueryAssemblyInfo(IAssemblyCache AssemblyCache, QueryAssemblyInfoFlags flags, string assemblyName);
    internal static DefinitionIdentity GetDefinitionIdentityFromManagedAssembly(string filePath);
    internal static void CheckSupportedImageAndCLRVersions(string path);
}
internal class System.Deployment.Internal.CodeSigning.BLOBHEADER : ValueType {
    internal byte bType;
    internal byte bVersion;
    internal short reserved;
    internal UInt32 aiKeyAlg;
}
internal class System.Deployment.Internal.CodeSigning.CmiAuthenticodeSignerInfo : object {
    internal int ErrorCode { get; internal set; }
    internal UInt32 HashAlgId { get; internal set; }
    internal string Hash { get; internal set; }
    internal string Description { get; internal set; }
    internal string DescriptionUrl { get; internal set; }
    internal CmiAuthenticodeTimestamperInfo TimestamperInfo { get; }
    internal X509Chain SignerChain { get; internal set; }
    internal CmiAuthenticodeSignerInfo(int errorCode);
    internal CmiAuthenticodeSignerInfo(AXL_SIGNER_INFO signerInfo, AXL_TIMESTAMPER_INFO timestamperInfo);
    internal int get_ErrorCode();
    internal void set_ErrorCode(int value);
    internal UInt32 get_HashAlgId();
    internal void set_HashAlgId(UInt32 value);
    internal string get_Hash();
    internal void set_Hash(string value);
    internal string get_Description();
    internal void set_Description(string value);
    internal string get_DescriptionUrl();
    internal void set_DescriptionUrl(string value);
    internal CmiAuthenticodeTimestamperInfo get_TimestamperInfo();
    internal X509Chain get_SignerChain();
    internal void set_SignerChain(X509Chain value);
}
internal class System.Deployment.Internal.CodeSigning.CmiAuthenticodeTimestamperInfo : object {
    internal int ErrorCode { get; }
    internal UInt32 HashAlgId { get; }
    internal DateTime TimestampTime { get; }
    internal X509Chain TimestamperChain { get; }
    internal CmiAuthenticodeTimestamperInfo(AXL_TIMESTAMPER_INFO timestamperInfo);
    internal int get_ErrorCode();
    internal UInt32 get_HashAlgId();
    internal DateTime get_TimestampTime();
    internal X509Chain get_TimestamperChain();
}
internal class System.Deployment.Internal.CodeSigning.CmiManifestSigner : object {
    internal static UInt32 CimManifestSignerFlagMask;
    internal AsymmetricAlgorithm StrongNameKey { get; }
    internal X509Certificate2 Certificate { get; }
    internal string Description { get; internal set; }
    internal string DescriptionUrl { get; internal set; }
    internal X509Certificate2Collection ExtraStore { get; }
    internal X509IncludeOption IncludeOption { get; internal set; }
    internal CmiManifestSignerFlag Flag { get; internal set; }
    internal CmiManifestSigner(AsymmetricAlgorithm strongNameKey);
    internal CmiManifestSigner(AsymmetricAlgorithm strongNameKey, X509Certificate2 certificate);
    internal AsymmetricAlgorithm get_StrongNameKey();
    internal X509Certificate2 get_Certificate();
    internal string get_Description();
    internal void set_Description(string value);
    internal string get_DescriptionUrl();
    internal void set_DescriptionUrl(string value);
    internal X509Certificate2Collection get_ExtraStore();
    internal X509IncludeOption get_IncludeOption();
    internal void set_IncludeOption(X509IncludeOption value);
    internal CmiManifestSignerFlag get_Flag();
    internal void set_Flag(CmiManifestSignerFlag value);
}
internal class System.Deployment.Internal.CodeSigning.CmiManifestSigner2 : object {
    internal static UInt32 CimManifestSignerFlagMask;
    internal bool UseSha256 { get; }
    internal AsymmetricAlgorithm StrongNameKey { get; }
    internal X509Certificate2 Certificate { get; }
    internal string Description { get; internal set; }
    internal string DescriptionUrl { get; internal set; }
    internal X509Certificate2Collection ExtraStore { get; }
    internal X509IncludeOption IncludeOption { get; internal set; }
    internal CmiManifestSignerFlag Flag { get; internal set; }
    internal CmiManifestSigner2(AsymmetricAlgorithm strongNameKey);
    internal CmiManifestSigner2(AsymmetricAlgorithm strongNameKey, X509Certificate2 certificate, bool useSha256);
    internal bool get_UseSha256();
    internal AsymmetricAlgorithm get_StrongNameKey();
    internal X509Certificate2 get_Certificate();
    internal string get_Description();
    internal void set_Description(string value);
    internal string get_DescriptionUrl();
    internal void set_DescriptionUrl(string value);
    internal X509Certificate2Collection get_ExtraStore();
    internal X509IncludeOption get_IncludeOption();
    internal void set_IncludeOption(X509IncludeOption value);
    internal CmiManifestSignerFlag get_Flag();
    internal void set_Flag(CmiManifestSignerFlag value);
}
[FlagsAttribute]
internal enum System.Deployment.Internal.CodeSigning.CmiManifestSignerFlag : Enum {
    public int value__;
    public static CmiManifestSignerFlag None;
    public static CmiManifestSignerFlag DontReplacePublicKeyToken;
}
[FlagsAttribute]
internal enum System.Deployment.Internal.CodeSigning.CmiManifestVerifyFlags : Enum {
    public int value__;
    public static CmiManifestVerifyFlags None;
    public static CmiManifestVerifyFlags RevocationNoCheck;
    public static CmiManifestVerifyFlags RevocationCheckEndCertOnly;
    public static CmiManifestVerifyFlags RevocationCheckEntireChain;
    public static CmiManifestVerifyFlags UrlCacheOnlyRetrieval;
    public static CmiManifestVerifyFlags LifetimeSigning;
    public static CmiManifestVerifyFlags TrustMicrosoftRootOnly;
    public static CmiManifestVerifyFlags StrongNameOnly;
}
internal class System.Deployment.Internal.CodeSigning.CmiStrongNameSignerInfo : object {
    internal int ErrorCode { get; internal set; }
    internal string PublicKeyToken { get; internal set; }
    internal AsymmetricAlgorithm PublicKey { get; internal set; }
    internal CmiStrongNameSignerInfo(int errorCode, string publicKeyToken);
    internal int get_ErrorCode();
    internal void set_ErrorCode(int value);
    internal string get_PublicKeyToken();
    internal void set_PublicKeyToken(string value);
    internal AsymmetricAlgorithm get_PublicKey();
    internal void set_PublicKey(AsymmetricAlgorithm value);
}
internal class System.Deployment.Internal.CodeSigning.ManifestSignedXml : SignedXml {
    internal ManifestSignedXml(XmlElement elem);
    internal ManifestSignedXml(XmlDocument document);
    internal ManifestSignedXml(XmlDocument document, bool verify);
    public virtual XmlElement GetIdElement(XmlDocument document, string idValue);
}
internal class System.Deployment.Internal.CodeSigning.ManifestSignedXml2 : SignedXml {
    internal ManifestSignedXml2(XmlElement elem);
    internal ManifestSignedXml2(XmlDocument document);
    internal ManifestSignedXml2(XmlDocument document, bool verify);
    public virtual XmlElement GetIdElement(XmlDocument document, string idValue);
}
public class System.Deployment.Internal.CodeSigning.RSAPKCS1SHA256SignatureDescription : SignatureDescription {
    public virtual AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key);
    public virtual AsymmetricSignatureFormatter CreateFormatter(AsymmetricAlgorithm key);
}
internal class System.Deployment.Internal.CodeSigning.SignedCmiManifest : object {
    internal CmiStrongNameSignerInfo StrongNameSignerInfo { get; }
    internal CmiAuthenticodeSignerInfo AuthenticodeSignerInfo { get; }
    internal SignedCmiManifest(XmlDocument manifestDom);
    private static SignedCmiManifest();
    internal void Sign(CmiManifestSigner signer);
    internal void Sign(CmiManifestSigner signer, string timeStampUrl);
    internal void Verify(CmiManifestVerifyFlags verifyFlags);
    internal CmiStrongNameSignerInfo get_StrongNameSignerInfo();
    internal CmiAuthenticodeSignerInfo get_AuthenticodeSignerInfo();
}
internal class System.Deployment.Internal.CodeSigning.SignedCmiManifest2 : object {
    internal CmiStrongNameSignerInfo StrongNameSignerInfo { get; }
    internal CmiAuthenticodeSignerInfo AuthenticodeSignerInfo { get; }
    internal SignedCmiManifest2(XmlDocument manifestDom, bool useSha256);
    private static SignedCmiManifest2();
    internal void Sign(CmiManifestSigner2 signer);
    internal void Sign(CmiManifestSigner2 signer, string timeStampUrl);
    internal void Verify(CmiManifestVerifyFlags verifyFlags);
    internal CmiStrongNameSignerInfo get_StrongNameSignerInfo();
    internal CmiAuthenticodeSignerInfo get_AuthenticodeSignerInfo();
    internal static RSACryptoServiceProvider GetFixedRSACryptoServiceProvider(RSACryptoServiceProvider oldCsp, bool useSha256);
}
internal static class System.Deployment.Internal.CodeSigning.Win32 : object {
    internal static string CRYPT32;
    internal static string KERNEL32;
    internal static string MSCORWKS;
    internal static int S_OK;
    internal static int NTE_BAD_HASH;
    internal static int NTE_BAD_KEY;
    internal static int TRUST_E_SYSTEM_ERROR;
    internal static int TRUST_E_NO_SIGNER_CERT;
    internal static int TRUST_E_COUNTER_SIGNER;
    internal static int TRUST_E_CERT_SIGNATURE;
    internal static int TRUST_E_TIME_STAMP;
    internal static int TRUST_E_BAD_DIGEST;
    internal static int TRUST_E_BASIC_CONSTRAINTS;
    internal static int TRUST_E_FINANCIAL_CRITERIA;
    internal static int TRUST_E_PROVIDER_UNKNOWN;
    internal static int TRUST_E_ACTION_UNKNOWN;
    internal static int TRUST_E_SUBJECT_FORM_UNKNOWN;
    internal static int TRUST_E_SUBJECT_NOT_TRUSTED;
    internal static int TRUST_E_NOSIGNATURE;
    internal static int CERT_E_UNTRUSTEDROOT;
    internal static int TRUST_E_FAIL;
    internal static int TRUST_E_EXPLICIT_DISTRUST;
    internal static int CERT_E_CHAINING;
    internal static int AXL_REVOCATION_NO_CHECK;
    internal static int AXL_REVOCATION_CHECK_END_CERT_ONLY;
    internal static int AXL_REVOCATION_CHECK_ENTIRE_CHAIN;
    internal static int AXL_URL_CACHE_ONLY_RETRIEVAL;
    internal static int AXL_LIFETIME_SIGNING;
    internal static int AXL_TRUST_MICROSOFT_ROOT_ONLY;
    internal static int WTPF_IGNOREREVOKATION;
    internal static string szOID_KP_LIFETIME_SIGNING;
    internal static string szOID_RSA_signingTime;
    internal static string szOID_OIWSEC_sha1;
    internal static string szOID_NIST_sha256;
    internal static string szOID_RSA_messageDigest;
    internal static string szOID_PKIX_KP_TIMESTAMP_SIGNING;
    internal static IntPtr GetProcessHeap();
    internal static bool HeapFree(IntPtr hHeap, UInt32 dwFlags, IntPtr lpMem);
    internal static int CertTimestampAuthenticodeLicense(CRYPT_DATA_BLOB& pSignedLicenseBlob, string pwszTimestampURI, CRYPT_DATA_BLOB& pTimestampSignatureBlob);
    internal static int CertVerifyAuthenticodeLicense(CRYPT_DATA_BLOB& pLicenseBlob, UInt32 dwFlags, AXL_SIGNER_INFO& pSignerInfo, AXL_TIMESTAMPER_INFO& pTimestamperInfo);
    internal static int CertFreeAuthenticodeSignerInfo(AXL_SIGNER_INFO& pSignerInfo);
    internal static int CertFreeAuthenticodeTimestamperInfo(AXL_TIMESTAMPER_INFO& pTimestamperInfo);
    internal static int _AxlGetIssuerPublicKeyHash(IntPtr pCertContext, IntPtr& ppwszPublicKeyHash);
    internal static int _AxlRSAKeyValueToPublicKeyToken(CRYPT_DATA_BLOB& pModulusBlob, CRYPT_DATA_BLOB& pExponentBlob, IntPtr& ppwszPublicKeyToken);
    internal static int _AxlPublicKeyBlobToPublicKeyToken(CRYPT_DATA_BLOB& pCspPublicKeyBlob, IntPtr& ppwszPublicKeyToken);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static bool CryptRetrieveTimeStamp(string wszUrl, UInt32 dwRetrievalFlags, int dwTimeout, string pszHashId, CRYPT_TIMESTAMP_PARA& pPara, Byte[] pbData, int cbData, IntPtr& ppTsContext, IntPtr& ppTsSigner, IntPtr& phStore);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static bool CryptVerifyTimeStampSignature(Byte[] pbTSContentInfo, int cbTSContentInfo, Byte[] pbData, int cbData, IntPtr hAdditionalStore, IntPtr& ppTsContext, IntPtr& ppTsSigner, IntPtr& phStore);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static bool CertFreeCertificateContext(IntPtr pCertContext);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static bool CertCloseStore(IntPtr pCertContext, int dwFlags);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static void CryptMemFree(IntPtr pv);
}
internal class System.Deployment.Internal.Isolation.ApplicationContext : object {
    public DefinitionAppId Identity { get; }
    public string BasePath { get; }
    public EnumDefinitionIdentity Components { get; }
    public string StateLocation { get; }
    internal ApplicationContext(IActContext a);
    public ApplicationContext(DefinitionAppId appid);
    public ApplicationContext(ReferenceAppId appid);
    public DefinitionAppId get_Identity();
    public string get_BasePath();
    public string ReplaceStrings(string culture, string toreplace);
    internal ICMS GetComponentManifest(DefinitionIdentity component);
    internal string GetComponentManifestPath(DefinitionIdentity component);
    public string GetComponentPath(DefinitionIdentity component);
    public DefinitionIdentity MatchReference(ReferenceIdentity TheRef);
    public EnumDefinitionIdentity get_Components();
    public void PrepareForExecution();
    public ApplicationStateDisposition SetApplicationState(ApplicationState s);
    public string get_StateLocation();
}
internal class System.Deployment.Internal.Isolation.BLOB : ValueType {
    public UInt32 Size;
    public IntPtr BlobData;
    [SecuritySafeCriticalAttribute]
public sealed virtual void Dispose();
}
internal class System.Deployment.Internal.Isolation.CATEGORY : ValueType {
    public IDefinitionIdentity DefinitionIdentity;
}
internal class System.Deployment.Internal.Isolation.CATEGORY_INSTANCE : ValueType {
    public IDefinitionAppId DefinitionAppId_Application;
    public string XMLSnippet;
}
internal class System.Deployment.Internal.Isolation.CATEGORY_SUBCATEGORY : ValueType {
    public string Subcategory;
}
internal class System.Deployment.Internal.Isolation.DefinitionAppId : object {
    internal IDefinitionAppId _id;
    public string SubscriptionId { get; public set; }
    public string Codebase { get; public set; }
    public EnumDefinitionIdentity AppPath { get; }
    internal DefinitionAppId(IDefinitionAppId id);
    public string get_SubscriptionId();
    public void set_SubscriptionId(string value);
    public string get_Codebase();
    public void set_Codebase(string value);
    public EnumDefinitionIdentity get_AppPath();
}
internal class System.Deployment.Internal.Isolation.DefinitionIdentity : object {
    internal IDefinitionIdentity _id;
    internal DefinitionIdentity(IDefinitionIdentity i);
}
internal class System.Deployment.Internal.Isolation.EnumDefinitionIdentity : object {
    private object System.Collections.IEnumerator.Current { get; }
    public DefinitionIdentity Current { get; }
    internal EnumDefinitionIdentity(IEnumDefinitionIdentity e);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public DefinitionIdentity get_Current();
    public IEnumerator GetEnumerator();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
internal class System.Deployment.Internal.Isolation.EnumReferenceIdentity : object {
    private object System.Collections.IEnumerator.Current { get; }
    public ReferenceIdentity Current { get; }
    internal EnumReferenceIdentity(IEnumReferenceIdentity e);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public ReferenceIdentity get_Current();
    public IEnumerator GetEnumerator();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
[GuidAttribute("0af57545-a72a-4fbe-813c-8554ed7d4528")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IActContext {
    [SecurityCriticalAttribute]
public abstract virtual void GetAppId(Object& AppId);
    [SecurityCriticalAttribute]
public abstract virtual void EnumCategories(UInt32 Flags, IReferenceIdentity CategoryToMatch, Guid& riid, Object& EnumOut);
    [SecurityCriticalAttribute]
public abstract virtual void EnumSubcategories(UInt32 Flags, IDefinitionIdentity CategoryId, string SubcategoryPattern, Guid& riid, Object& EnumOut);
    [SecurityCriticalAttribute]
public abstract virtual void EnumCategoryInstances(UInt32 Flags, IDefinitionIdentity CategoryId, string Subcategory, Guid& riid, Object& EnumOut);
    [SecurityCriticalAttribute]
public abstract virtual void ReplaceStringMacros(UInt32 Flags, string Culture, string ReplacementPattern, String& Replaced);
    [SecurityCriticalAttribute]
public abstract virtual void GetComponentStringTableStrings(UInt32 Flags, IntPtr ComponentIndex, IntPtr StringCount, String[] SourceStrings, String[]& DestinationStrings, IntPtr CultureFallbacks);
    [SecurityCriticalAttribute]
public abstract virtual void GetApplicationProperties(UInt32 Flags, UIntPtr cProperties, String[] PropertyNames, String[]& PropertyValues, UIntPtr[]& ComponentIndicies);
    [SecurityCriticalAttribute]
public abstract virtual void ApplicationBasePath(UInt32 Flags, String& ApplicationPath);
    [SecurityCriticalAttribute]
public abstract virtual void GetComponentManifest(UInt32 Flags, IDefinitionIdentity ComponentId, Guid& riid, Object& ManifestInteface);
    [SecurityCriticalAttribute]
public abstract virtual void GetComponentPayloadPath(UInt32 Flags, IDefinitionIdentity ComponentId, String& PayloadPath);
    [SecurityCriticalAttribute]
public abstract virtual void FindReferenceInContext(UInt32 dwFlags, IReferenceIdentity Reference, Object& MatchedDefinition);
    [SecurityCriticalAttribute]
public abstract virtual void CreateActContextFromCategoryInstance(UInt32 dwFlags, CATEGORY_INSTANCE& CategoryInstance, Object& ppCreatedAppContext);
    [SecurityCriticalAttribute]
public abstract virtual void EnumComponents(UInt32 dwFlags, Object& ppIdentityEnum);
    [SecurityCriticalAttribute]
public abstract virtual void PrepareForExecution(IntPtr Inputs, IntPtr Outputs);
    [SecurityCriticalAttribute]
public abstract virtual void SetApplicationRunningState(UInt32 dwFlags, UInt32 ulState, UInt32& ulDisposition);
    [SecurityCriticalAttribute]
public abstract virtual void GetApplicationStateFilesystemLocation(UInt32 dwFlags, UIntPtr Component, IntPtr pCoordinateList, String& ppszPath);
    [SecurityCriticalAttribute]
public abstract virtual void FindComponentsByDefinition(UInt32 dwFlags, UIntPtr ComponentCount, IDefinitionIdentity[] Components, UIntPtr[] Indicies, UInt32[] Dispositions);
    [SecurityCriticalAttribute]
public abstract virtual void FindComponentsByReference(UInt32 dwFlags, UIntPtr Components, IReferenceIdentity[] References, UIntPtr[] Indicies, UInt32[] Dispositions);
}
[GuidAttribute("8c87810c-2541-4f75-b2d0-9af515488e23")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IAppIdAuthority {
    [SecurityCriticalAttribute]
public abstract virtual IDefinitionAppId TextToDefinition(UInt32 Flags, string Identity);
    [SecurityCriticalAttribute]
public abstract virtual IReferenceAppId TextToReference(UInt32 Flags, string Identity);
    [SecurityCriticalAttribute]
public abstract virtual string DefinitionToText(UInt32 Flags, IDefinitionAppId DefinitionAppId);
    [SecurityCriticalAttribute]
public abstract virtual string ReferenceToText(UInt32 Flags, IReferenceAppId ReferenceAppId);
    [SecurityCriticalAttribute]
public abstract virtual bool AreDefinitionsEqual(UInt32 Flags, IDefinitionAppId Definition1, IDefinitionAppId Definition2);
    [SecurityCriticalAttribute]
public abstract virtual bool AreReferencesEqual(UInt32 Flags, IReferenceAppId Reference1, IReferenceAppId Reference2);
    [SecurityCriticalAttribute]
public abstract virtual bool AreTextualDefinitionsEqual(UInt32 Flags, string AppIdLeft, string AppIdRight);
    [SecurityCriticalAttribute]
public abstract virtual bool AreTextualReferencesEqual(UInt32 Flags, string AppIdLeft, string AppIdRight);
    [SecurityCriticalAttribute]
public abstract virtual bool DoesDefinitionMatchReference(UInt32 Flags, IDefinitionAppId DefinitionIdentity, IReferenceAppId ReferenceIdentity);
    [SecurityCriticalAttribute]
public abstract virtual bool DoesTextualDefinitionMatchTextualReference(UInt32 Flags, string Definition, string Reference);
    [SecurityCriticalAttribute]
public abstract virtual ulong HashReference(UInt32 Flags, IReferenceAppId ReferenceIdentity);
    [SecurityCriticalAttribute]
public abstract virtual ulong HashDefinition(UInt32 Flags, IDefinitionAppId DefinitionIdentity);
    [SecurityCriticalAttribute]
public abstract virtual string GenerateDefinitionKey(UInt32 Flags, IDefinitionAppId DefinitionIdentity);
    [SecurityCriticalAttribute]
public abstract virtual string GenerateReferenceKey(UInt32 Flags, IReferenceAppId ReferenceIdentity);
    [SecurityCriticalAttribute]
public abstract virtual IDefinitionAppId CreateDefinition();
    [SecurityCriticalAttribute]
public abstract virtual IReferenceAppId CreateReference();
}
[FlagsAttribute]
internal enum System.Deployment.Internal.Isolation.IAPPIDAUTHORITY_ARE_DEFINITIONS_EQUAL_FLAGS : Enum {
    public int value__;
    public static IAPPIDAUTHORITY_ARE_DEFINITIONS_EQUAL_FLAGS IAPPIDAUTHORITY_ARE_DEFINITIONS_EQUAL_FLAG_IGNORE_VERSION;
}
[FlagsAttribute]
internal enum System.Deployment.Internal.Isolation.IAPPIDAUTHORITY_ARE_REFERENCES_EQUAL_FLAGS : Enum {
    public int value__;
    public static IAPPIDAUTHORITY_ARE_REFERENCES_EQUAL_FLAGS IAPPIDAUTHORITY_ARE_REFERENCES_EQUAL_FLAG_IGNORE_VERSION;
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("285a8860-c84a-11d7-850f-005cd062464f")]
internal interface System.Deployment.Internal.Isolation.ICDF {
    public object _NewEnum { get; }
    public UInt32 Count { get; }
    public abstract virtual ISection GetRootSection(UInt32 SectionId);
    public abstract virtual ISectionEntry GetRootSectionEntry(UInt32 SectionId);
    public abstract virtual object get__NewEnum();
    public abstract virtual UInt32 get_Count();
    public abstract virtual object GetItem(UInt32 SectionId);
}
[GuidAttribute("d91e12d8-98ed-47fa-9936-39421283d59b")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IDefinitionAppId {
    [SecurityCriticalAttribute]
public abstract virtual string get_SubscriptionId();
    public abstract virtual void put_SubscriptionId(string Subscription);
    [SecurityCriticalAttribute]
public abstract virtual string get_Codebase();
    [SecurityCriticalAttribute]
public abstract virtual void put_Codebase(string CodeBase);
    [SecurityCriticalAttribute]
public abstract virtual IEnumDefinitionIdentity EnumAppPath();
    [SecurityCriticalAttribute]
public abstract virtual void SetAppPath(UInt32 cIDefinitionIdentity, IDefinitionIdentity[] DefinitionIdentity);
}
[GuidAttribute("587bf538-4d90-4a3c-9ef1-58a200a8a9e7")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IDefinitionIdentity {
    [SecurityCriticalAttribute]
public abstract virtual string GetAttribute(string Namespace, string Name);
    [SecurityCriticalAttribute]
public abstract virtual void SetAttribute(string Namespace, string Name, string Value);
    [SecurityCriticalAttribute]
public abstract virtual IEnumIDENTITY_ATTRIBUTE EnumAttributes();
    [SecurityCriticalAttribute]
public abstract virtual IDefinitionIdentity Clone(IntPtr cDeltas, IDENTITY_ATTRIBUTE[] Deltas);
}
internal class System.Deployment.Internal.Isolation.IDENTITY_ATTRIBUTE : ValueType {
    public string Namespace;
    public string Name;
    public string Value;
}
[GuidAttribute("f3549d9c-fc73-4793-9c00-1cd204254c0c")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IEnumDefinitionIdentity {
    [SecurityCriticalAttribute]
public abstract virtual UInt32 Next(UInt32 celt, IDefinitionIdentity[] DefinitionIdentity);
    [SecurityCriticalAttribute]
public abstract virtual void Skip(UInt32 celt);
    [SecurityCriticalAttribute]
public abstract virtual void Reset();
    [SecurityCriticalAttribute]
public abstract virtual IEnumDefinitionIdentity Clone();
}
[GuidAttribute("9cdaae75-246e-4b00-a26d-b9aec137a3eb")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IEnumIDENTITY_ATTRIBUTE {
    [SecurityCriticalAttribute]
public abstract virtual UInt32 Next(UInt32 celt, IDENTITY_ATTRIBUTE[] rgAttributes);
    [SecurityCriticalAttribute]
public abstract virtual IntPtr CurrentIntoBuffer(IntPtr Available, Byte[] Data);
    [SecurityCriticalAttribute]
public abstract virtual void Skip(UInt32 celt);
    [SecurityCriticalAttribute]
public abstract virtual void Reset();
    [SecurityCriticalAttribute]
public abstract virtual IEnumIDENTITY_ATTRIBUTE Clone();
}
[GuidAttribute("b30352cf-23da-4577-9b3f-b4e6573be53b")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IEnumReferenceIdentity {
    [SecurityCriticalAttribute]
public abstract virtual UInt32 Next(UInt32 celt, IReferenceIdentity[] ReferenceIdentity);
    [SecurityCriticalAttribute]
public abstract virtual void Skip(UInt32 celt);
    [SecurityCriticalAttribute]
public abstract virtual void Reset();
    [SecurityCriticalAttribute]
public abstract virtual IEnumReferenceIdentity Clone();
}
[GuidAttribute("a5c637bf-6eaa-4e5f-b535-55299657e33e")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IEnumSTORE_ASSEMBLY {
    [SecurityCriticalAttribute]
public abstract virtual UInt32 Next(UInt32 celt, STORE_ASSEMBLY[] rgelt);
    [SecurityCriticalAttribute]
public abstract virtual void Skip(UInt32 celt);
    [SecurityCriticalAttribute]
public abstract virtual void Reset();
    [SecurityCriticalAttribute]
public abstract virtual IEnumSTORE_ASSEMBLY Clone();
}
[GuidAttribute("a5c6aaa3-03e4-478d-b9f5-2e45908d5e4f")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IEnumSTORE_ASSEMBLY_FILE {
    [SecurityCriticalAttribute]
public abstract virtual UInt32 Next(UInt32 celt, STORE_ASSEMBLY_FILE[] rgelt);
    [SecurityCriticalAttribute]
public abstract virtual void Skip(UInt32 celt);
    [SecurityCriticalAttribute]
public abstract virtual void Reset();
    [SecurityCriticalAttribute]
public abstract virtual IEnumSTORE_ASSEMBLY_FILE Clone();
}
[GuidAttribute("d8b1aacb-5142-4abb-bcc1-e9dc9052a89e")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IEnumSTORE_ASSEMBLY_INSTALLATION_REFERENCE {
    [SecurityCriticalAttribute]
public abstract virtual UInt32 Next(UInt32 celt, StoreApplicationReference[] rgelt);
    [SecurityCriticalAttribute]
public abstract virtual void Skip(UInt32 celt);
    [SecurityCriticalAttribute]
public abstract virtual void Reset();
    [SecurityCriticalAttribute]
public abstract virtual IEnumSTORE_ASSEMBLY_INSTALLATION_REFERENCE Clone();
}
[GuidAttribute("b840a2f5-a497-4a6d-9038-cd3ec2fbd222")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IEnumSTORE_CATEGORY {
    [SecurityCriticalAttribute]
public abstract virtual UInt32 Next(UInt32 celt, STORE_CATEGORY[] rgElements);
    [SecurityCriticalAttribute]
public abstract virtual void Skip(UInt32 ulElements);
    [SecurityCriticalAttribute]
public abstract virtual void Reset();
    [SecurityCriticalAttribute]
public abstract virtual IEnumSTORE_CATEGORY Clone();
}
[GuidAttribute("5ba7cb30-8508-4114-8c77-262fcda4fadb")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IEnumSTORE_CATEGORY_INSTANCE {
    [SecurityCriticalAttribute]
public abstract virtual UInt32 Next(UInt32 ulElements, STORE_CATEGORY_INSTANCE[] rgInstances);
    [SecurityCriticalAttribute]
public abstract virtual void Skip(UInt32 ulElements);
    [SecurityCriticalAttribute]
public abstract virtual void Reset();
    [SecurityCriticalAttribute]
public abstract virtual IEnumSTORE_CATEGORY_INSTANCE Clone();
}
[GuidAttribute("19be1967-b2fc-4dc1-9627-f3cb6305d2a7")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IEnumSTORE_CATEGORY_SUBCATEGORY {
    [SecurityCriticalAttribute]
public abstract virtual UInt32 Next(UInt32 celt, STORE_CATEGORY_SUBCATEGORY[] rgElements);
    [SecurityCriticalAttribute]
public abstract virtual void Skip(UInt32 ulElements);
    [SecurityCriticalAttribute]
public abstract virtual void Reset();
    [SecurityCriticalAttribute]
public abstract virtual IEnumSTORE_CATEGORY_SUBCATEGORY Clone();
}
[GuidAttribute("f9fd4090-93db-45c0-af87-624940f19cff")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IEnumSTORE_DEPLOYMENT_METADATA {
    [SecurityCriticalAttribute]
public abstract virtual UInt32 Next(UInt32 celt, IDefinitionAppId[] AppIds);
    [SecurityCriticalAttribute]
public abstract virtual void Skip(UInt32 celt);
    [SecurityCriticalAttribute]
public abstract virtual void Reset();
    [SecurityCriticalAttribute]
public abstract virtual IEnumSTORE_DEPLOYMENT_METADATA Clone();
}
[GuidAttribute("5fa4f590-a416-4b22-ac79-7c3f0d31f303")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IEnumSTORE_DEPLOYMENT_METADATA_PROPERTY {
    [SecurityCriticalAttribute]
public abstract virtual UInt32 Next(UInt32 celt, StoreOperationMetadataProperty[] AppIds);
    [SecurityCriticalAttribute]
public abstract virtual void Skip(UInt32 celt);
    [SecurityCriticalAttribute]
public abstract virtual void Reset();
    [SecurityCriticalAttribute]
public abstract virtual IEnumSTORE_DEPLOYMENT_METADATA_PROPERTY Clone();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000100-0000-0000-C000-000000000046")]
internal interface System.Deployment.Internal.Isolation.IEnumUnknown {
    public abstract virtual int Next(UInt32 celt, Object[] rgelt, UInt32& celtFetched);
    public abstract virtual int Skip(UInt32 celt);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IEnumUnknown& enumUnknown);
}
[GuidAttribute("261a6983-c35d-4d0d-aa5b-7867259e77bc")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IIdentityAuthority {
    [SecurityCriticalAttribute]
public abstract virtual IDefinitionIdentity TextToDefinition(UInt32 Flags, string Identity);
    [SecurityCriticalAttribute]
public abstract virtual IReferenceIdentity TextToReference(UInt32 Flags, string Identity);
    [SecurityCriticalAttribute]
public abstract virtual string DefinitionToText(UInt32 Flags, IDefinitionIdentity DefinitionIdentity);
    [SecurityCriticalAttribute]
public abstract virtual UInt32 DefinitionToTextBuffer(UInt32 Flags, IDefinitionIdentity DefinitionIdentity, UInt32 BufferSize, Char[] Buffer);
    [SecurityCriticalAttribute]
public abstract virtual string ReferenceToText(UInt32 Flags, IReferenceIdentity ReferenceIdentity);
    [SecurityCriticalAttribute]
public abstract virtual UInt32 ReferenceToTextBuffer(UInt32 Flags, IReferenceIdentity ReferenceIdentity, UInt32 BufferSize, Char[] Buffer);
    [SecurityCriticalAttribute]
public abstract virtual bool AreDefinitionsEqual(UInt32 Flags, IDefinitionIdentity Definition1, IDefinitionIdentity Definition2);
    [SecurityCriticalAttribute]
public abstract virtual bool AreReferencesEqual(UInt32 Flags, IReferenceIdentity Reference1, IReferenceIdentity Reference2);
    [SecurityCriticalAttribute]
public abstract virtual bool AreTextualDefinitionsEqual(UInt32 Flags, string IdentityLeft, string IdentityRight);
    [SecurityCriticalAttribute]
public abstract virtual bool AreTextualReferencesEqual(UInt32 Flags, string IdentityLeft, string IdentityRight);
    [SecurityCriticalAttribute]
public abstract virtual bool DoesDefinitionMatchReference(UInt32 Flags, IDefinitionIdentity DefinitionIdentity, IReferenceIdentity ReferenceIdentity);
    [SecurityCriticalAttribute]
public abstract virtual bool DoesTextualDefinitionMatchTextualReference(UInt32 Flags, string Definition, string Reference);
    [SecurityCriticalAttribute]
public abstract virtual ulong HashReference(UInt32 Flags, IReferenceIdentity ReferenceIdentity);
    [SecurityCriticalAttribute]
public abstract virtual ulong HashDefinition(UInt32 Flags, IDefinitionIdentity DefinitionIdentity);
    [SecurityCriticalAttribute]
public abstract virtual string GenerateDefinitionKey(UInt32 Flags, IDefinitionIdentity DefinitionIdentity);
    [SecurityCriticalAttribute]
public abstract virtual string GenerateReferenceKey(UInt32 Flags, IReferenceIdentity ReferenceIdentity);
    [SecurityCriticalAttribute]
public abstract virtual IDefinitionIdentity CreateDefinition();
    [SecurityCriticalAttribute]
public abstract virtual IReferenceIdentity CreateReference();
}
internal enum System.Deployment.Internal.Isolation.IIDENTITYAUTHORITY_DEFINITION_IDENTITY_TO_TEXT_FLAGS : Enum {
    public int value__;
    public static IIDENTITYAUTHORITY_DEFINITION_IDENTITY_TO_TEXT_FLAGS IIDENTITYAUTHORITY_DEFINITION_IDENTITY_TO_TEXT_FLAG_CANONICAL;
}
internal enum System.Deployment.Internal.Isolation.IIDENTITYAUTHORITY_DOES_DEFINITION_MATCH_REFERENCE_FLAGS : Enum {
    public int value__;
    public static IIDENTITYAUTHORITY_DOES_DEFINITION_MATCH_REFERENCE_FLAGS IIDENTITYAUTHORITY_DOES_DEFINITION_MATCH_REFERENCE_FLAG_EXACT_MATCH_REQUIRED;
}
internal enum System.Deployment.Internal.Isolation.IIDENTITYAUTHORITY_REFERENCE_IDENTITY_TO_TEXT_FLAGS : Enum {
    public int value__;
    public static IIDENTITYAUTHORITY_REFERENCE_IDENTITY_TO_TEXT_FLAGS IIDENTITYAUTHORITY_REFERENCE_IDENTITY_TO_TEXT_FLAG_CANONICAL;
}
[GuidAttribute("81c85208-fe61-4c15-b5bb-ff5ea66baad9")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IManifestInformation {
    [SecurityCriticalAttribute]
public abstract virtual void get_FullPath(String& FullPath);
}
[GuidAttribute("ace1b703-1aac-4956-ab87-90cac8b93ce6")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IManifestParseErrorCallback {
    [SecurityCriticalAttribute]
public abstract virtual void OnError(UInt32 StartLine, UInt32 nStartColumn, UInt32 cCharacterCount, int hr, string ErrorStatusHostFile, UInt32 ParameterCount, String[] Parameters);
}
[GuidAttribute("054f0bef-9e45-4363-8f5a-2f8e142d9a3b")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IReferenceAppId {
    [SecurityCriticalAttribute]
public abstract virtual string get_SubscriptionId();
    public abstract virtual void put_SubscriptionId(string Subscription);
    [SecurityCriticalAttribute]
public abstract virtual string get_Codebase();
    public abstract virtual void put_Codebase(string CodeBase);
    [SecurityCriticalAttribute]
public abstract virtual IEnumReferenceIdentity EnumAppPath();
}
[GuidAttribute("6eaf5ace-7917-4f3c-b129-e046a9704766")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IReferenceIdentity {
    [SecurityCriticalAttribute]
public abstract virtual string GetAttribute(string Namespace, string Name);
    [SecurityCriticalAttribute]
public abstract virtual void SetAttribute(string Namespace, string Name, string Value);
    [SecurityCriticalAttribute]
public abstract virtual IEnumIDENTITY_ATTRIBUTE EnumAttributes();
    [SecurityCriticalAttribute]
public abstract virtual IReferenceIdentity Clone(IntPtr cDeltas, IDENTITY_ATTRIBUTE[] Deltas);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("285a8862-c84a-11d7-850f-005cd062464f")]
internal interface System.Deployment.Internal.Isolation.ISection {
    public object _NewEnum { get; }
    public UInt32 Count { get; }
    public UInt32 SectionID { get; }
    public string SectionName { get; }
    public abstract virtual object get__NewEnum();
    public abstract virtual UInt32 get_Count();
    public abstract virtual UInt32 get_SectionID();
    public abstract virtual string get_SectionName();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("285a8861-c84a-11d7-850f-005cd062464f")]
internal interface System.Deployment.Internal.Isolation.ISectionEntry {
    public abstract virtual object GetField(UInt32 fieldId);
    public abstract virtual string GetFieldName(UInt32 fieldId);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("285a8876-c84a-11d7-850f-005cd062464f")]
internal interface System.Deployment.Internal.Isolation.ISectionWithReferenceIdentityKey {
    public abstract virtual void Lookup(IReferenceIdentity ReferenceIdentityKey, Object& ppUnknown);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("285a8871-c84a-11d7-850f-005cd062464f")]
internal interface System.Deployment.Internal.Isolation.ISectionWithStringKey {
    public bool IsCaseInsensitive { get; }
    public abstract virtual void Lookup(string wzStringKey, Object& ppUnknown);
    public abstract virtual bool get_IsCaseInsensitive();
}
internal static class System.Deployment.Internal.Isolation.IsolationInterop : object {
    public static string IsolationDllName;
    public static Guid IID_ICMS;
    public static Guid IID_IDefinitionIdentity;
    public static Guid IID_IManifestInformation;
    public static Guid IID_IEnumSTORE_ASSEMBLY;
    public static Guid IID_IEnumSTORE_ASSEMBLY_FILE;
    public static Guid IID_IEnumSTORE_CATEGORY;
    public static Guid IID_IEnumSTORE_CATEGORY_INSTANCE;
    public static Guid IID_IEnumSTORE_DEPLOYMENT_METADATA;
    public static Guid IID_IEnumSTORE_DEPLOYMENT_METADATA_PROPERTY;
    public static Guid IID_IStore;
    public static Guid GUID_SXS_INSTALL_REFERENCE_SCHEME_OPAQUESTRING;
    public static Guid SXS_INSTALL_REFERENCE_SCHEME_SXS_STRONGNAME_SIGNED_PRIVATE_ASSEMBLY;
    public static Store UserStore { get; }
    public static Store SystemStore { get; }
    public static IIdentityAuthority IdentityAuthority { get; }
    public static IAppIdAuthority AppIdAuthority { get; }
    private static IsolationInterop();
    public static Store get_UserStore();
    [SecuritySafeCriticalAttribute]
public static Store GetUserStore();
    public static Store get_SystemStore();
    [SecuritySafeCriticalAttribute]
public static IIdentityAuthority get_IdentityAuthority();
    [SecuritySafeCriticalAttribute]
public static IAppIdAuthority get_AppIdAuthority();
    [SecuritySafeCriticalAttribute]
internal static IActContext CreateActContext(IDefinitionAppId AppId);
    internal static IActContext CreateActContext(IReferenceAppId AppId);
    internal static object CreateActContext(CreateActContextParameters& Params);
    [SecurityCriticalAttribute]
internal static object CreateCMSFromXml(Byte[] buffer, UInt32 bufferSize, IManifestParseErrorCallback Callback, Guid& riid);
    [SecurityCriticalAttribute]
internal static object ParseManifest(string pszManifestPath, IManifestParseErrorCallback pIManifestParseErrorCallback, Guid& riid);
    internal static object GetUserStateManager(UInt32 Flags, IntPtr hToken, Guid& riid);
    internal static Guid GetGuidOfType(Type type);
}
[GuidAttribute("07662534-750b-4ed5-9cfb-1c5bc5acfd07")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IStateManager {
    [SecurityCriticalAttribute]
public abstract virtual void PrepareApplicationState(UIntPtr Inputs, UIntPtr& Outputs);
    [SecurityCriticalAttribute]
public abstract virtual void SetApplicationRunningState(UInt32 Flags, IActContext Context, UInt32 RunningState, UInt32& Disposition);
    [SecurityCriticalAttribute]
public abstract virtual void GetApplicationStateFilesystemLocation(UInt32 Flags, IDefinitionAppId Appidentity, IDefinitionIdentity ComponentIdentity, UIntPtr Coordinates, String& Path);
    [SecurityCriticalAttribute]
public abstract virtual void Scavenge(UInt32 Flags, UInt32& Disposition);
}
[GuidAttribute("a5c62f6d-5e3e-4cd9-b345-6b281d7a1d1e")]
[InterfaceTypeAttribute("1")]
internal interface System.Deployment.Internal.Isolation.IStore {
    [SecurityCriticalAttribute]
public abstract virtual void Transact(IntPtr cOperation, StoreTransactionOperation[] rgOperations, UInt32[] rgDispositions, Int32[] rgResults);
    [SecurityCriticalAttribute]
public abstract virtual object BindReferenceToAssembly(UInt32 Flags, IReferenceIdentity ReferenceIdentity, UInt32 cDeploymentsToIgnore, IDefinitionIdentity[] DefinitionIdentity_DeploymentsToIgnore, Guid& riid);
    [SecurityCriticalAttribute]
public abstract virtual void CalculateDelimiterOfDeploymentsBasedOnQuota(UInt32 dwFlags, IntPtr cDeployments, IDefinitionAppId[] rgpIDefinitionAppId_Deployments, StoreApplicationReference& InstallerReference, ulong ulonglongQuota, IntPtr& Delimiter, UInt64& SizeSharedWithExternalDeployment, UInt64& SizeConsumedByInputDeploymentArray);
    [SecurityCriticalAttribute]
public abstract virtual IntPtr BindDefinitions(UInt32 Flags, IntPtr Count, IDefinitionIdentity[] DefsToBind, UInt32 DeploymentsToIgnore, IDefinitionIdentity[] DefsToIgnore);
    [SecurityCriticalAttribute]
public abstract virtual object GetAssemblyInformation(UInt32 Flags, IDefinitionIdentity DefinitionIdentity, Guid& riid);
    [SecurityCriticalAttribute]
public abstract virtual object EnumAssemblies(UInt32 Flags, IReferenceIdentity ReferenceIdentity_ToMatch, Guid& riid);
    [SecurityCriticalAttribute]
public abstract virtual object EnumFiles(UInt32 Flags, IDefinitionIdentity DefinitionIdentity, Guid& riid);
    [SecurityCriticalAttribute]
public abstract virtual object EnumInstallationReferences(UInt32 Flags, IDefinitionIdentity DefinitionIdentity, Guid& riid);
    [SecurityCriticalAttribute]
public abstract virtual string LockAssemblyPath(UInt32 Flags, IDefinitionIdentity DefinitionIdentity, IntPtr& Cookie);
    [SecurityCriticalAttribute]
public abstract virtual void ReleaseAssemblyPath(IntPtr Cookie);
    [SecurityCriticalAttribute]
public abstract virtual ulong QueryChangeID(IDefinitionIdentity DefinitionIdentity);
    [SecurityCriticalAttribute]
public abstract virtual object EnumCategories(UInt32 Flags, IReferenceIdentity ReferenceIdentity_ToMatch, Guid& riid);
    [SecurityCriticalAttribute]
public abstract virtual object EnumSubcategories(UInt32 Flags, IDefinitionIdentity CategoryId, string SubcategoryPathPattern, Guid& riid);
    [SecurityCriticalAttribute]
public abstract virtual object EnumCategoryInstances(UInt32 Flags, IDefinitionIdentity CategoryId, string SubcategoryPath, Guid& riid);
    [SecurityCriticalAttribute]
public abstract virtual void GetDeploymentProperty(UInt32 Flags, IDefinitionAppId DeploymentInPackage, StoreApplicationReference& Reference, Guid& PropertySet, string pcwszPropertyName, BLOB& blob);
    [SecurityCriticalAttribute]
public abstract virtual string LockApplicationPath(UInt32 Flags, IDefinitionAppId ApId, IntPtr& Cookie);
    [SecurityCriticalAttribute]
public abstract virtual void ReleaseApplicationPath(IntPtr Cookie);
    [SecurityCriticalAttribute]
public abstract virtual object EnumPrivateFiles(UInt32 Flags, IDefinitionAppId Application, IDefinitionIdentity DefinitionIdentity, Guid& riid);
    [SecurityCriticalAttribute]
public abstract virtual object EnumInstallerDeploymentMetadata(UInt32 Flags, StoreApplicationReference& Reference, IReferenceAppId Filter, Guid& riid);
    [SecurityCriticalAttribute]
public abstract virtual object EnumInstallerDeploymentMetadataProperties(UInt32 Flags, StoreApplicationReference& Reference, IDefinitionAppId Filter, Guid& riid);
}
[FlagsAttribute]
internal enum System.Deployment.Internal.Isolation.ISTORE_BIND_REFERENCE_TO_ASSEMBLY_FLAGS : Enum {
    public int value__;
    public static ISTORE_BIND_REFERENCE_TO_ASSEMBLY_FLAGS ISTORE_BIND_REFERENCE_TO_ASSEMBLY_FLAG_FORCE_LIBRARY_SEMANTICS;
}
internal class System.Deployment.Internal.Isolation.IStore_BindingResult : ValueType {
    public UInt32 Flags;
    public UInt32 Disposition;
    public IStore_BindingResult_BoundVersion Component;
    public Guid CacheCoherencyGuid;
    public IntPtr Reserved;
}
internal class System.Deployment.Internal.Isolation.IStore_BindingResult_BoundVersion : ValueType {
    public ushort Revision;
    public ushort Build;
    public ushort Minor;
    public ushort Major;
}
[FlagsAttribute]
internal enum System.Deployment.Internal.Isolation.ISTORE_ENUM_ASSEMBLIES_FLAGS : Enum {
    public int value__;
    public static ISTORE_ENUM_ASSEMBLIES_FLAGS ISTORE_ENUM_ASSEMBLIES_FLAG_LIMIT_TO_VISIBLE_ONLY;
    public static ISTORE_ENUM_ASSEMBLIES_FLAGS ISTORE_ENUM_ASSEMBLIES_FLAG_MATCH_SERVICING;
    public static ISTORE_ENUM_ASSEMBLIES_FLAGS ISTORE_ENUM_ASSEMBLIES_FLAG_FORCE_LIBRARY_SEMANTICS;
}
[FlagsAttribute]
internal enum System.Deployment.Internal.Isolation.ISTORE_ENUM_FILES_FLAGS : Enum {
    public int value__;
    public static ISTORE_ENUM_FILES_FLAGS ISTORE_ENUM_FILES_FLAG_INCLUDE_INSTALLED_FILES;
    public static ISTORE_ENUM_FILES_FLAGS ISTORE_ENUM_FILES_FLAG_INCLUDE_MISSING_FILES;
}
internal class System.Deployment.Internal.Isolation.Manifest.AssemblyReferenceDependentAssemblyEntry : object {
    public string Group;
    public string Codebase;
    public ulong Size;
    public IntPtr HashValue;
    public UInt32 HashValueSize;
    public UInt32 HashAlgorithm;
    public UInt32 Flags;
    public string ResourceFallbackCulture;
    public string Description;
    public string SupportUrl;
    public ISection HashElements;
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    [SecuritySafeCriticalAttribute]
public void Dispose(bool fDisposing);
}
internal enum System.Deployment.Internal.Isolation.Manifest.AssemblyReferenceDependentAssemblyEntryFieldId : Enum {
    public int value__;
    public static AssemblyReferenceDependentAssemblyEntryFieldId AssemblyReferenceDependentAssembly_Group;
    public static AssemblyReferenceDependentAssemblyEntryFieldId AssemblyReferenceDependentAssembly_Codebase;
    public static AssemblyReferenceDependentAssemblyEntryFieldId AssemblyReferenceDependentAssembly_Size;
    public static AssemblyReferenceDependentAssemblyEntryFieldId AssemblyReferenceDependentAssembly_HashValue;
    public static AssemblyReferenceDependentAssemblyEntryFieldId AssemblyReferenceDependentAssembly_HashValueSize;
    public static AssemblyReferenceDependentAssemblyEntryFieldId AssemblyReferenceDependentAssembly_HashAlgorithm;
    public static AssemblyReferenceDependentAssemblyEntryFieldId AssemblyReferenceDependentAssembly_Flags;
    public static AssemblyReferenceDependentAssemblyEntryFieldId AssemblyReferenceDependentAssembly_ResourceFallbackCulture;
    public static AssemblyReferenceDependentAssemblyEntryFieldId AssemblyReferenceDependentAssembly_Description;
    public static AssemblyReferenceDependentAssemblyEntryFieldId AssemblyReferenceDependentAssembly_SupportUrl;
    public static AssemblyReferenceDependentAssemblyEntryFieldId AssemblyReferenceDependentAssembly_HashElements;
}
internal class System.Deployment.Internal.Isolation.Manifest.AssemblyReferenceEntry : object {
    public IReferenceIdentity ReferenceIdentity;
    public UInt32 Flags;
    public AssemblyReferenceDependentAssemblyEntry DependentAssembly;
}
internal enum System.Deployment.Internal.Isolation.Manifest.AssemblyReferenceEntryFieldId : Enum {
    public int value__;
    public static AssemblyReferenceEntryFieldId AssemblyReference_Flags;
    public static AssemblyReferenceEntryFieldId AssemblyReference_DependentAssembly;
}
internal class System.Deployment.Internal.Isolation.Manifest.AssemblyRequestEntry : object {
    public string Name;
    public string permissionSetID;
}
internal enum System.Deployment.Internal.Isolation.Manifest.AssemblyRequestEntryFieldId : Enum {
    public int value__;
    public static AssemblyRequestEntryFieldId AssemblyRequest_permissionSetID;
}
internal class System.Deployment.Internal.Isolation.Manifest.CategoryMembershipDataEntry : object {
    public UInt32 index;
    public string Xml;
    public string Description;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CategoryMembershipDataEntryFieldId : Enum {
    public int value__;
    public static CategoryMembershipDataEntryFieldId CategoryMembershipData_Xml;
    public static CategoryMembershipDataEntryFieldId CategoryMembershipData_Description;
}
internal class System.Deployment.Internal.Isolation.Manifest.CategoryMembershipEntry : object {
    public IDefinitionIdentity Identity;
    public ISection SubcategoryMembership;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CategoryMembershipEntryFieldId : Enum {
    public int value__;
    public static CategoryMembershipEntryFieldId CategoryMembership_SubcategoryMembership;
}
internal class System.Deployment.Internal.Isolation.Manifest.CLRSurrogateEntry : object {
    public Guid Clsid;
    public string RuntimeVersion;
    public string ClassName;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CLRSurrogateEntryFieldId : Enum {
    public int value__;
    public static CLRSurrogateEntryFieldId CLRSurrogate_RuntimeVersion;
    public static CLRSurrogateEntryFieldId CLRSurrogate_ClassName;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMS_ASSEMBLY_DEPLOYMENT_FLAG : Enum {
    public int value__;
    public static CMS_ASSEMBLY_DEPLOYMENT_FLAG CMS_ASSEMBLY_DEPLOYMENT_FLAG_BEFORE_APPLICATION_STARTUP;
    public static CMS_ASSEMBLY_DEPLOYMENT_FLAG CMS_ASSEMBLY_DEPLOYMENT_FLAG_RUN_AFTER_INSTALL;
    public static CMS_ASSEMBLY_DEPLOYMENT_FLAG CMS_ASSEMBLY_DEPLOYMENT_FLAG_INSTALL;
    public static CMS_ASSEMBLY_DEPLOYMENT_FLAG CMS_ASSEMBLY_DEPLOYMENT_FLAG_TRUST_URL_PARAMETERS;
    public static CMS_ASSEMBLY_DEPLOYMENT_FLAG CMS_ASSEMBLY_DEPLOYMENT_FLAG_DISALLOW_URL_ACTIVATION;
    public static CMS_ASSEMBLY_DEPLOYMENT_FLAG CMS_ASSEMBLY_DEPLOYMENT_FLAG_MAP_FILE_EXTENSIONS;
    public static CMS_ASSEMBLY_DEPLOYMENT_FLAG CMS_ASSEMBLY_DEPLOYMENT_FLAG_CREATE_DESKTOP_SHORTCUT;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMS_ASSEMBLY_REFERENCE_DEPENDENT_ASSEMBLY_FLAG : Enum {
    public int value__;
    public static CMS_ASSEMBLY_REFERENCE_DEPENDENT_ASSEMBLY_FLAG CMS_ASSEMBLY_REFERENCE_DEPENDENT_ASSEMBLY_FLAG_OPTIONAL;
    public static CMS_ASSEMBLY_REFERENCE_DEPENDENT_ASSEMBLY_FLAG CMS_ASSEMBLY_REFERENCE_DEPENDENT_ASSEMBLY_FLAG_VISIBLE;
    public static CMS_ASSEMBLY_REFERENCE_DEPENDENT_ASSEMBLY_FLAG CMS_ASSEMBLY_REFERENCE_DEPENDENT_ASSEMBLY_FLAG_PREREQUISITE;
    public static CMS_ASSEMBLY_REFERENCE_DEPENDENT_ASSEMBLY_FLAG CMS_ASSEMBLY_REFERENCE_DEPENDENT_ASSEMBLY_FLAG_RESOURCE_FALLBACK_CULTURE_INTERNAL;
    public static CMS_ASSEMBLY_REFERENCE_DEPENDENT_ASSEMBLY_FLAG CMS_ASSEMBLY_REFERENCE_DEPENDENT_ASSEMBLY_FLAG_INSTALL;
    public static CMS_ASSEMBLY_REFERENCE_DEPENDENT_ASSEMBLY_FLAG CMS_ASSEMBLY_REFERENCE_DEPENDENT_ASSEMBLY_FLAG_ALLOW_DELAYED_BINDING;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMS_ASSEMBLY_REFERENCE_FLAG : Enum {
    public int value__;
    public static CMS_ASSEMBLY_REFERENCE_FLAG CMS_ASSEMBLY_REFERENCE_FLAG_OPTIONAL;
    public static CMS_ASSEMBLY_REFERENCE_FLAG CMS_ASSEMBLY_REFERENCE_FLAG_VISIBLE;
    public static CMS_ASSEMBLY_REFERENCE_FLAG CMS_ASSEMBLY_REFERENCE_FLAG_FOLLOW;
    public static CMS_ASSEMBLY_REFERENCE_FLAG CMS_ASSEMBLY_REFERENCE_FLAG_IS_PLATFORM;
    public static CMS_ASSEMBLY_REFERENCE_FLAG CMS_ASSEMBLY_REFERENCE_FLAG_CULTURE_WILDCARDED;
    public static CMS_ASSEMBLY_REFERENCE_FLAG CMS_ASSEMBLY_REFERENCE_FLAG_PROCESSOR_ARCHITECTURE_WILDCARDED;
    public static CMS_ASSEMBLY_REFERENCE_FLAG CMS_ASSEMBLY_REFERENCE_FLAG_PREREQUISITE;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMS_COM_SERVER_FLAG : Enum {
    public int value__;
    public static CMS_COM_SERVER_FLAG CMS_COM_SERVER_FLAG_IS_CLR_CLASS;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMS_DIRECTORY_FLAG : Enum {
    public int value__;
    public static CMS_DIRECTORY_FLAG CMS_DIRECTORY_FLAG_OWNER;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMS_ENTRY_POINT_FLAG : Enum {
    public int value__;
    public static CMS_ENTRY_POINT_FLAG CMS_ENTRY_POINT_FLAG_HOST_IN_BROWSER;
    public static CMS_ENTRY_POINT_FLAG CMS_ENTRY_POINT_FLAG_CUSTOMHOSTSPECIFIED;
    public static CMS_ENTRY_POINT_FLAG CMS_ENTRY_POINT_FLAG_CUSTOMUX;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMS_FILE_FLAG : Enum {
    public int value__;
    public static CMS_FILE_FLAG CMS_FILE_FLAG_OPTIONAL;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMS_FILE_HASH_ALGORITHM : Enum {
    public int value__;
    public static CMS_FILE_HASH_ALGORITHM CMS_FILE_HASH_ALGORITHM_SHA1;
    public static CMS_FILE_HASH_ALGORITHM CMS_FILE_HASH_ALGORITHM_SHA256;
    public static CMS_FILE_HASH_ALGORITHM CMS_FILE_HASH_ALGORITHM_SHA384;
    public static CMS_FILE_HASH_ALGORITHM CMS_FILE_HASH_ALGORITHM_SHA512;
    public static CMS_FILE_HASH_ALGORITHM CMS_FILE_HASH_ALGORITHM_MD5;
    public static CMS_FILE_HASH_ALGORITHM CMS_FILE_HASH_ALGORITHM_MD4;
    public static CMS_FILE_HASH_ALGORITHM CMS_FILE_HASH_ALGORITHM_MD2;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMS_FILE_WRITABLE_TYPE : Enum {
    public int value__;
    public static CMS_FILE_WRITABLE_TYPE CMS_FILE_WRITABLE_TYPE_NOT_WRITABLE;
    public static CMS_FILE_WRITABLE_TYPE CMS_FILE_WRITABLE_TYPE_APPLICATION_DATA;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMS_HASH_DIGESTMETHOD : Enum {
    public int value__;
    public static CMS_HASH_DIGESTMETHOD CMS_HASH_DIGESTMETHOD_SHA1;
    public static CMS_HASH_DIGESTMETHOD CMS_HASH_DIGESTMETHOD_SHA256;
    public static CMS_HASH_DIGESTMETHOD CMS_HASH_DIGESTMETHOD_SHA384;
    public static CMS_HASH_DIGESTMETHOD CMS_HASH_DIGESTMETHOD_SHA512;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMS_HASH_TRANSFORM : Enum {
    public int value__;
    public static CMS_HASH_TRANSFORM CMS_HASH_TRANSFORM_IDENTITY;
    public static CMS_HASH_TRANSFORM CMS_HASH_TRANSFORM_MANIFESTINVARIANT;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMS_MANIFEST_FLAG : Enum {
    public int value__;
    public static CMS_MANIFEST_FLAG CMS_MANIFEST_FLAG_ASSEMBLY;
    public static CMS_MANIFEST_FLAG CMS_MANIFEST_FLAG_CATEGORY;
    public static CMS_MANIFEST_FLAG CMS_MANIFEST_FLAG_FEATURE;
    public static CMS_MANIFEST_FLAG CMS_MANIFEST_FLAG_APPLICATION;
    public static CMS_MANIFEST_FLAG CMS_MANIFEST_FLAG_USEMANIFESTFORTRUST;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMS_REGISTRY_KEY_FLAG : Enum {
    public int value__;
    public static CMS_REGISTRY_KEY_FLAG CMS_REGISTRY_KEY_FLAG_OWNER;
    public static CMS_REGISTRY_KEY_FLAG CMS_REGISTRY_KEY_FLAG_LEAF_IN_MANIFEST;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMS_REGISTRY_VALUE_FLAG : Enum {
    public int value__;
    public static CMS_REGISTRY_VALUE_FLAG CMS_REGISTRY_VALUE_FLAG_OWNER;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMS_REGISTRY_VALUE_HINT : Enum {
    public int value__;
    public static CMS_REGISTRY_VALUE_HINT CMS_REGISTRY_VALUE_HINT_REPLACE;
    public static CMS_REGISTRY_VALUE_HINT CMS_REGISTRY_VALUE_HINT_APPEND;
    public static CMS_REGISTRY_VALUE_HINT CMS_REGISTRY_VALUE_HINT_PREPEND;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMS_REGISTRY_VALUE_TYPE : Enum {
    public int value__;
    public static CMS_REGISTRY_VALUE_TYPE CMS_REGISTRY_VALUE_TYPE_NONE;
    public static CMS_REGISTRY_VALUE_TYPE CMS_REGISTRY_VALUE_TYPE_SZ;
    public static CMS_REGISTRY_VALUE_TYPE CMS_REGISTRY_VALUE_TYPE_EXPAND_SZ;
    public static CMS_REGISTRY_VALUE_TYPE CMS_REGISTRY_VALUE_TYPE_MULTI_SZ;
    public static CMS_REGISTRY_VALUE_TYPE CMS_REGISTRY_VALUE_TYPE_BINARY;
    public static CMS_REGISTRY_VALUE_TYPE CMS_REGISTRY_VALUE_TYPE_DWORD;
    public static CMS_REGISTRY_VALUE_TYPE CMS_REGISTRY_VALUE_TYPE_DWORD_LITTLE_ENDIAN;
    public static CMS_REGISTRY_VALUE_TYPE CMS_REGISTRY_VALUE_TYPE_DWORD_BIG_ENDIAN;
    public static CMS_REGISTRY_VALUE_TYPE CMS_REGISTRY_VALUE_TYPE_LINK;
    public static CMS_REGISTRY_VALUE_TYPE CMS_REGISTRY_VALUE_TYPE_RESOURCE_LIST;
    public static CMS_REGISTRY_VALUE_TYPE CMS_REGISTRY_VALUE_TYPE_FULL_RESOURCE_DESCRIPTOR;
    public static CMS_REGISTRY_VALUE_TYPE CMS_REGISTRY_VALUE_TYPE_RESOURCE_REQUIREMENTS_LIST;
    public static CMS_REGISTRY_VALUE_TYPE CMS_REGISTRY_VALUE_TYPE_QWORD;
    public static CMS_REGISTRY_VALUE_TYPE CMS_REGISTRY_VALUE_TYPE_QWORD_LITTLE_ENDIAN;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMS_SCHEMA_VERSION : Enum {
    public int value__;
    public static CMS_SCHEMA_VERSION CMS_SCHEMA_VERSION_V1;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMS_SYSTEM_PROTECTION : Enum {
    public int value__;
    public static CMS_SYSTEM_PROTECTION CMS_SYSTEM_PROTECTION_READ_ONLY_IGNORE_WRITES;
    public static CMS_SYSTEM_PROTECTION CMS_SYSTEM_PROTECTION_READ_ONLY_FAIL_WRITES;
    public static CMS_SYSTEM_PROTECTION CMS_SYSTEM_PROTECTION_OS_ONLY_IGNORE_WRITES;
    public static CMS_SYSTEM_PROTECTION CMS_SYSTEM_PROTECTION_OS_ONLY_FAIL_WRITES;
    public static CMS_SYSTEM_PROTECTION CMS_SYSTEM_PROTECTION_TRANSACTED;
    public static CMS_SYSTEM_PROTECTION CMS_SYSTEM_PROTECTION_APPLICATION_VIRTUALIZED;
    public static CMS_SYSTEM_PROTECTION CMS_SYSTEM_PROTECTION_USER_VIRTUALIZED;
    public static CMS_SYSTEM_PROTECTION CMS_SYSTEM_PROTECTION_APPLICATION_AND_USER_VIRTUALIZED;
    public static CMS_SYSTEM_PROTECTION CMS_SYSTEM_PROTECTION_INHERIT;
    public static CMS_SYSTEM_PROTECTION CMS_SYSTEM_PROTECTION_NOT_PROTECTED;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMS_TIME_UNIT_TYPE : Enum {
    public int value__;
    public static CMS_TIME_UNIT_TYPE CMS_TIME_UNIT_TYPE_HOURS;
    public static CMS_TIME_UNIT_TYPE CMS_TIME_UNIT_TYPE_DAYS;
    public static CMS_TIME_UNIT_TYPE CMS_TIME_UNIT_TYPE_WEEKS;
    public static CMS_TIME_UNIT_TYPE CMS_TIME_UNIT_TYPE_MONTHS;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMS_USAGE_PATTERN : Enum {
    public int value__;
    public static CMS_USAGE_PATTERN CMS_USAGE_PATTERN_SCOPE_APPLICATION;
    public static CMS_USAGE_PATTERN CMS_USAGE_PATTERN_SCOPE_PROCESS;
    public static CMS_USAGE_PATTERN CMS_USAGE_PATTERN_SCOPE_MACHINE;
    public static CMS_USAGE_PATTERN CMS_USAGE_PATTERN_SCOPE_MASK;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CMSSECTIONID : Enum {
    public int value__;
    public static CMSSECTIONID CMSSECTIONID_FILE_SECTION;
    public static CMSSECTIONID CMSSECTIONID_CATEGORY_INSTANCE_SECTION;
    public static CMSSECTIONID CMSSECTIONID_COM_REDIRECTION_SECTION;
    public static CMSSECTIONID CMSSECTIONID_PROGID_REDIRECTION_SECTION;
    public static CMSSECTIONID CMSSECTIONID_CLR_SURROGATE_SECTION;
    public static CMSSECTIONID CMSSECTIONID_ASSEMBLY_REFERENCE_SECTION;
    public static CMSSECTIONID CMSSECTIONID_WINDOW_CLASS_SECTION;
    public static CMSSECTIONID CMSSECTIONID_STRING_SECTION;
    public static CMSSECTIONID CMSSECTIONID_ENTRYPOINT_SECTION;
    public static CMSSECTIONID CMSSECTIONID_PERMISSION_SET_SECTION;
    public static CMSSECTIONID CMSSECTIONENTRYID_METADATA;
    public static CMSSECTIONID CMSSECTIONID_ASSEMBLY_REQUEST_SECTION;
    public static CMSSECTIONID CMSSECTIONID_REGISTRY_KEY_SECTION;
    public static CMSSECTIONID CMSSECTIONID_DIRECTORY_SECTION;
    public static CMSSECTIONID CMSSECTIONID_FILE_ASSOCIATION_SECTION;
    public static CMSSECTIONID CMSSECTIONID_COMPATIBLE_FRAMEWORKS_SECTION;
    public static CMSSECTIONID CMSSECTIONID_EVENT_SECTION;
    public static CMSSECTIONID CMSSECTIONID_EVENT_MAP_SECTION;
    public static CMSSECTIONID CMSSECTIONID_EVENT_TAG_SECTION;
    public static CMSSECTIONID CMSSECTIONID_COUNTERSET_SECTION;
    public static CMSSECTIONID CMSSECTIONID_COUNTER_SECTION;
}
internal class System.Deployment.Internal.Isolation.Manifest.CompatibleFrameworkEntry : object {
    public UInt32 index;
    public string TargetVersion;
    public string Profile;
    public string SupportedRuntime;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CompatibleFrameworkEntryFieldId : Enum {
    public int value__;
    public static CompatibleFrameworkEntryFieldId CompatibleFramework_TargetVersion;
    public static CompatibleFrameworkEntryFieldId CompatibleFramework_Profile;
    public static CompatibleFrameworkEntryFieldId CompatibleFramework_SupportedRuntime;
}
internal class System.Deployment.Internal.Isolation.Manifest.CompatibleFrameworksMetadataEntry : object {
    public string SupportUrl;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CompatibleFrameworksMetadataEntryFieldId : Enum {
    public int value__;
    public static CompatibleFrameworksMetadataEntryFieldId CompatibleFrameworksMetadata_SupportUrl;
}
internal class System.Deployment.Internal.Isolation.Manifest.COMServerEntry : object {
    public Guid Clsid;
    public UInt32 Flags;
    public Guid ConfiguredGuid;
    public Guid ImplementedClsid;
    public Guid TypeLibrary;
    public UInt32 ThreadingModel;
    public string RuntimeVersion;
    public string HostFile;
}
internal enum System.Deployment.Internal.Isolation.Manifest.COMServerEntryFieldId : Enum {
    public int value__;
    public static COMServerEntryFieldId COMServer_Flags;
    public static COMServerEntryFieldId COMServer_ConfiguredGuid;
    public static COMServerEntryFieldId COMServer_ImplementedClsid;
    public static COMServerEntryFieldId COMServer_TypeLibrary;
    public static COMServerEntryFieldId COMServer_ThreadingModel;
    public static COMServerEntryFieldId COMServer_RuntimeVersion;
    public static COMServerEntryFieldId COMServer_HostFile;
}
internal class System.Deployment.Internal.Isolation.Manifest.CounterEntry : object {
    public Guid CounterSetGuid;
    public UInt32 CounterId;
    public string Name;
    public string Description;
    public UInt32 CounterType;
    public ulong Attributes;
    public UInt32 BaseId;
    public UInt32 DefaultScale;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CounterEntryFieldId : Enum {
    public int value__;
    public static CounterEntryFieldId Counter_CounterId;
    public static CounterEntryFieldId Counter_Name;
    public static CounterEntryFieldId Counter_Description;
    public static CounterEntryFieldId Counter_CounterType;
    public static CounterEntryFieldId Counter_Attributes;
    public static CounterEntryFieldId Counter_BaseId;
    public static CounterEntryFieldId Counter_DefaultScale;
}
internal class System.Deployment.Internal.Isolation.Manifest.CounterSetEntry : object {
    public Guid CounterSetGuid;
    public Guid ProviderGuid;
    public string Name;
    public string Description;
    public bool InstanceType;
}
internal enum System.Deployment.Internal.Isolation.Manifest.CounterSetEntryFieldId : Enum {
    public int value__;
    public static CounterSetEntryFieldId CounterSet_ProviderGuid;
    public static CounterSetEntryFieldId CounterSet_Name;
    public static CounterSetEntryFieldId CounterSet_Description;
    public static CounterSetEntryFieldId CounterSet_InstanceType;
}
internal class System.Deployment.Internal.Isolation.Manifest.DependentOSMetadataEntry : object {
    public string SupportUrl;
    public string Description;
    public ushort MajorVersion;
    public ushort MinorVersion;
    public ushort BuildNumber;
    public byte ServicePackMajor;
    public byte ServicePackMinor;
}
internal enum System.Deployment.Internal.Isolation.Manifest.DependentOSMetadataEntryFieldId : Enum {
    public int value__;
    public static DependentOSMetadataEntryFieldId DependentOSMetadata_SupportUrl;
    public static DependentOSMetadataEntryFieldId DependentOSMetadata_Description;
    public static DependentOSMetadataEntryFieldId DependentOSMetadata_MajorVersion;
    public static DependentOSMetadataEntryFieldId DependentOSMetadata_MinorVersion;
    public static DependentOSMetadataEntryFieldId DependentOSMetadata_BuildNumber;
    public static DependentOSMetadataEntryFieldId DependentOSMetadata_ServicePackMajor;
    public static DependentOSMetadataEntryFieldId DependentOSMetadata_ServicePackMinor;
}
internal class System.Deployment.Internal.Isolation.Manifest.DeploymentMetadataEntry : object {
    public string DeploymentProviderCodebase;
    public string MinimumRequiredVersion;
    public ushort MaximumAge;
    public byte MaximumAge_Unit;
    public UInt32 DeploymentFlags;
}
internal enum System.Deployment.Internal.Isolation.Manifest.DeploymentMetadataEntryFieldId : Enum {
    public int value__;
    public static DeploymentMetadataEntryFieldId DeploymentMetadata_DeploymentProviderCodebase;
    public static DeploymentMetadataEntryFieldId DeploymentMetadata_MinimumRequiredVersion;
    public static DeploymentMetadataEntryFieldId DeploymentMetadata_MaximumAge;
    public static DeploymentMetadataEntryFieldId DeploymentMetadata_MaximumAge_Unit;
    public static DeploymentMetadataEntryFieldId DeploymentMetadata_DeploymentFlags;
}
internal class System.Deployment.Internal.Isolation.Manifest.DescriptionMetadataEntry : object {
    public string Publisher;
    public string Product;
    public string SupportUrl;
    public string IconFile;
    public string ErrorReportUrl;
    public string SuiteName;
}
internal enum System.Deployment.Internal.Isolation.Manifest.DescriptionMetadataEntryFieldId : Enum {
    public int value__;
    public static DescriptionMetadataEntryFieldId DescriptionMetadata_Publisher;
    public static DescriptionMetadataEntryFieldId DescriptionMetadata_Product;
    public static DescriptionMetadataEntryFieldId DescriptionMetadata_SupportUrl;
    public static DescriptionMetadataEntryFieldId DescriptionMetadata_IconFile;
    public static DescriptionMetadataEntryFieldId DescriptionMetadata_ErrorReportUrl;
    public static DescriptionMetadataEntryFieldId DescriptionMetadata_SuiteName;
}
internal class System.Deployment.Internal.Isolation.Manifest.DirectoryEntry : object {
    public UInt32 Flags;
    public UInt32 Protection;
    public string BuildFilter;
    public IntPtr SecurityDescriptor;
    public UInt32 SecurityDescriptorSize;
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    [SecuritySafeCriticalAttribute]
public void Dispose(bool fDisposing);
}
internal enum System.Deployment.Internal.Isolation.Manifest.DirectoryEntryFieldId : Enum {
    public int value__;
    public static DirectoryEntryFieldId Directory_Flags;
    public static DirectoryEntryFieldId Directory_Protection;
    public static DirectoryEntryFieldId Directory_BuildFilter;
    public static DirectoryEntryFieldId Directory_SecurityDescriptor;
    public static DirectoryEntryFieldId Directory_SecurityDescriptorSize;
}
internal class System.Deployment.Internal.Isolation.Manifest.EntryPointEntry : object {
    public string Name;
    public string CommandLine_File;
    public string CommandLine_Parameters;
    public IReferenceIdentity Identity;
    public UInt32 Flags;
}
internal enum System.Deployment.Internal.Isolation.Manifest.EntryPointEntryFieldId : Enum {
    public int value__;
    public static EntryPointEntryFieldId EntryPoint_CommandLine_File;
    public static EntryPointEntryFieldId EntryPoint_CommandLine_Parameters;
    public static EntryPointEntryFieldId EntryPoint_Identity;
    public static EntryPointEntryFieldId EntryPoint_Flags;
}
internal class System.Deployment.Internal.Isolation.Manifest.EventEntry : object {
    public UInt32 EventID;
    public UInt32 Level;
    public UInt32 Version;
    public Guid Guid;
    public string SubTypeName;
    public UInt32 SubTypeValue;
    public string DisplayName;
    public UInt32 EventNameMicrodomIndex;
}
internal enum System.Deployment.Internal.Isolation.Manifest.EventEntryFieldId : Enum {
    public int value__;
    public static EventEntryFieldId Event_Level;
    public static EventEntryFieldId Event_Version;
    public static EventEntryFieldId Event_Guid;
    public static EventEntryFieldId Event_SubTypeName;
    public static EventEntryFieldId Event_SubTypeValue;
    public static EventEntryFieldId Event_DisplayName;
    public static EventEntryFieldId Event_EventNameMicrodomIndex;
}
internal class System.Deployment.Internal.Isolation.Manifest.EventMapEntry : object {
    public string MapName;
    public string Name;
    public UInt32 Value;
    public bool IsValueMap;
}
internal enum System.Deployment.Internal.Isolation.Manifest.EventMapEntryFieldId : Enum {
    public int value__;
    public static EventMapEntryFieldId EventMap_Name;
    public static EventMapEntryFieldId EventMap_Value;
    public static EventMapEntryFieldId EventMap_IsValueMap;
}
internal class System.Deployment.Internal.Isolation.Manifest.EventTagEntry : object {
    public string TagData;
    public UInt32 EventID;
}
internal enum System.Deployment.Internal.Isolation.Manifest.EventTagEntryFieldId : Enum {
    public int value__;
    public static EventTagEntryFieldId EventTag_EventID;
}
internal class System.Deployment.Internal.Isolation.Manifest.FileAssociationEntry : object {
    public string Extension;
    public string Description;
    public string ProgID;
    public string DefaultIcon;
    public string Parameter;
}
internal enum System.Deployment.Internal.Isolation.Manifest.FileAssociationEntryFieldId : Enum {
    public int value__;
    public static FileAssociationEntryFieldId FileAssociation_Description;
    public static FileAssociationEntryFieldId FileAssociation_ProgID;
    public static FileAssociationEntryFieldId FileAssociation_DefaultIcon;
    public static FileAssociationEntryFieldId FileAssociation_Parameter;
}
internal class System.Deployment.Internal.Isolation.Manifest.FileEntry : object {
    public string Name;
    public UInt32 HashAlgorithm;
    public string LoadFrom;
    public string SourcePath;
    public string ImportPath;
    public string SourceName;
    public string Location;
    public IntPtr HashValue;
    public UInt32 HashValueSize;
    public ulong Size;
    public string Group;
    public UInt32 Flags;
    public MuiResourceMapEntry MuiMapping;
    public UInt32 WritableType;
    public ISection HashElements;
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    [SecuritySafeCriticalAttribute]
public void Dispose(bool fDisposing);
}
internal enum System.Deployment.Internal.Isolation.Manifest.FileEntryFieldId : Enum {
    public int value__;
    public static FileEntryFieldId File_HashAlgorithm;
    public static FileEntryFieldId File_LoadFrom;
    public static FileEntryFieldId File_SourcePath;
    public static FileEntryFieldId File_ImportPath;
    public static FileEntryFieldId File_SourceName;
    public static FileEntryFieldId File_Location;
    public static FileEntryFieldId File_HashValue;
    public static FileEntryFieldId File_HashValueSize;
    public static FileEntryFieldId File_Size;
    public static FileEntryFieldId File_Group;
    public static FileEntryFieldId File_Flags;
    public static FileEntryFieldId File_MuiMapping;
    public static FileEntryFieldId File_WritableType;
    public static FileEntryFieldId File_HashElements;
}
internal class System.Deployment.Internal.Isolation.Manifest.HashElementEntry : object {
    public UInt32 index;
    public byte Transform;
    public IntPtr TransformMetadata;
    public UInt32 TransformMetadataSize;
    public byte DigestMethod;
    public IntPtr DigestValue;
    public UInt32 DigestValueSize;
    public string Xml;
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    [SecuritySafeCriticalAttribute]
public void Dispose(bool fDisposing);
}
internal enum System.Deployment.Internal.Isolation.Manifest.HashElementEntryFieldId : Enum {
    public int value__;
    public static HashElementEntryFieldId HashElement_Transform;
    public static HashElementEntryFieldId HashElement_TransformMetadata;
    public static HashElementEntryFieldId HashElement_TransformMetadataSize;
    public static HashElementEntryFieldId HashElement_DigestMethod;
    public static HashElementEntryFieldId HashElement_DigestValue;
    public static HashElementEntryFieldId HashElement_DigestValueSize;
    public static HashElementEntryFieldId HashElement_Xml;
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C31FF59E-CD25-47b8-9EF3-CF4433EB97CC")]
internal interface System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceDependentAssemblyEntry {
    public AssemblyReferenceDependentAssemblyEntry AllData { get; }
    public string Group { get; }
    public string Codebase { get; }
    public ulong Size { get; }
    public object HashValue { get; }
    public UInt32 HashAlgorithm { get; }
    public UInt32 Flags { get; }
    public string ResourceFallbackCulture { get; }
    public string Description { get; }
    public string SupportUrl { get; }
    public ISection HashElements { get; }
    [SecurityCriticalAttribute]
public abstract virtual AssemblyReferenceDependentAssemblyEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual string get_Group();
    [SecurityCriticalAttribute]
public abstract virtual string get_Codebase();
    [SecurityCriticalAttribute]
public abstract virtual ulong get_Size();
    [SecurityCriticalAttribute]
public abstract virtual object get_HashValue();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_HashAlgorithm();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_Flags();
    [SecurityCriticalAttribute]
public abstract virtual string get_ResourceFallbackCulture();
    [SecurityCriticalAttribute]
public abstract virtual string get_Description();
    [SecurityCriticalAttribute]
public abstract virtual string get_SupportUrl();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_HashElements();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("FD47B733-AFBC-45e4-B7C2-BBEB1D9F766C")]
internal interface System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceEntry {
    public AssemblyReferenceEntry AllData { get; }
    public IReferenceIdentity ReferenceIdentity { get; }
    public UInt32 Flags { get; }
    public IAssemblyReferenceDependentAssemblyEntry DependentAssembly { get; }
    [SecurityCriticalAttribute]
public abstract virtual AssemblyReferenceEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual IReferenceIdentity get_ReferenceIdentity();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_Flags();
    [SecurityCriticalAttribute]
public abstract virtual IAssemblyReferenceDependentAssemblyEntry get_DependentAssembly();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2474ECB4-8EFD-4410-9F31-B3E7C4A07731")]
internal interface System.Deployment.Internal.Isolation.Manifest.IAssemblyRequestEntry {
    public AssemblyRequestEntry AllData { get; }
    public string Name { get; }
    public string permissionSetID { get; }
    [SecurityCriticalAttribute]
public abstract virtual AssemblyRequestEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual string get_Name();
    [SecurityCriticalAttribute]
public abstract virtual string get_permissionSetID();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DA0C3B27-6B6B-4b80-A8F8-6CE14F4BC0A4")]
internal interface System.Deployment.Internal.Isolation.Manifest.ICategoryMembershipDataEntry {
    public CategoryMembershipDataEntry AllData { get; }
    public UInt32 index { get; }
    public string Xml { get; }
    public string Description { get; }
    [SecurityCriticalAttribute]
public abstract virtual CategoryMembershipDataEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_index();
    [SecurityCriticalAttribute]
public abstract virtual string get_Xml();
    [SecurityCriticalAttribute]
public abstract virtual string get_Description();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("97FDCA77-B6F2-4718-A1EB-29D0AECE9C03")]
internal interface System.Deployment.Internal.Isolation.Manifest.ICategoryMembershipEntry {
    public CategoryMembershipEntry AllData { get; }
    public IDefinitionIdentity Identity { get; }
    public ISection SubcategoryMembership { get; }
    [SecurityCriticalAttribute]
public abstract virtual CategoryMembershipEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual IDefinitionIdentity get_Identity();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_SubcategoryMembership();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1E0422A1-F0D2-44ae-914B-8A2DECCFD22B")]
internal interface System.Deployment.Internal.Isolation.Manifest.ICLRSurrogateEntry {
    public CLRSurrogateEntry AllData { get; }
    public Guid Clsid { get; }
    public string RuntimeVersion { get; }
    public string ClassName { get; }
    [SecurityCriticalAttribute]
public abstract virtual CLRSurrogateEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual Guid get_Clsid();
    [SecurityCriticalAttribute]
public abstract virtual string get_RuntimeVersion();
    [SecurityCriticalAttribute]
public abstract virtual string get_ClassName();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("a504e5b0-8ccf-4cb4-9902-c9d1b9abd033")]
internal interface System.Deployment.Internal.Isolation.Manifest.ICMS {
    public IDefinitionIdentity Identity { get; }
    public ISection FileSection { get; }
    public ISection CategoryMembershipSection { get; }
    public ISection COMRedirectionSection { get; }
    public ISection ProgIdRedirectionSection { get; }
    public ISection CLRSurrogateSection { get; }
    public ISection AssemblyReferenceSection { get; }
    public ISection WindowClassSection { get; }
    public ISection StringSection { get; }
    public ISection EntryPointSection { get; }
    public ISection PermissionSetSection { get; }
    public ISectionEntry MetadataSectionEntry { get; }
    public ISection AssemblyRequestSection { get; }
    public ISection RegistryKeySection { get; }
    public ISection DirectorySection { get; }
    public ISection FileAssociationSection { get; }
    public ISection CompatibleFrameworksSection { get; }
    public ISection EventSection { get; }
    public ISection EventMapSection { get; }
    public ISection EventTagSection { get; }
    public ISection CounterSetSection { get; }
    public ISection CounterSection { get; }
    [SecurityCriticalAttribute]
public abstract virtual IDefinitionIdentity get_Identity();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_FileSection();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_CategoryMembershipSection();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_COMRedirectionSection();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_ProgIdRedirectionSection();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_CLRSurrogateSection();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_AssemblyReferenceSection();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_WindowClassSection();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_StringSection();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_EntryPointSection();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_PermissionSetSection();
    [SecurityCriticalAttribute]
public abstract virtual ISectionEntry get_MetadataSectionEntry();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_AssemblyRequestSection();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_RegistryKeySection();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_DirectorySection();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_FileAssociationSection();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_CompatibleFrameworksSection();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_EventSection();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_EventMapSection();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_EventTagSection();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_CounterSetSection();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_CounterSection();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C98BFE2A-62C9-40AD-ADCE-A9037BE2BE6C")]
internal interface System.Deployment.Internal.Isolation.Manifest.ICompatibleFrameworkEntry {
    public CompatibleFrameworkEntry AllData { get; }
    public UInt32 index { get; }
    public string TargetVersion { get; }
    public string Profile { get; }
    public string SupportedRuntime { get; }
    [SecurityCriticalAttribute]
public abstract virtual CompatibleFrameworkEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_index();
    [SecurityCriticalAttribute]
public abstract virtual string get_TargetVersion();
    [SecurityCriticalAttribute]
public abstract virtual string get_Profile();
    [SecurityCriticalAttribute]
public abstract virtual string get_SupportedRuntime();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4A33D662-2210-463A-BE9F-FBDF1AA554E3")]
internal interface System.Deployment.Internal.Isolation.Manifest.ICompatibleFrameworksMetadataEntry {
    public CompatibleFrameworksMetadataEntry AllData { get; }
    public string SupportUrl { get; }
    [SecurityCriticalAttribute]
public abstract virtual CompatibleFrameworksMetadataEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual string get_SupportUrl();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3903B11B-FBE8-477c-825F-DB828B5FD174")]
internal interface System.Deployment.Internal.Isolation.Manifest.ICOMServerEntry {
    public COMServerEntry AllData { get; }
    public Guid Clsid { get; }
    public UInt32 Flags { get; }
    public Guid ConfiguredGuid { get; }
    public Guid ImplementedClsid { get; }
    public Guid TypeLibrary { get; }
    public UInt32 ThreadingModel { get; }
    public string RuntimeVersion { get; }
    public string HostFile { get; }
    [SecurityCriticalAttribute]
public abstract virtual COMServerEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual Guid get_Clsid();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_Flags();
    [SecurityCriticalAttribute]
public abstract virtual Guid get_ConfiguredGuid();
    [SecurityCriticalAttribute]
public abstract virtual Guid get_ImplementedClsid();
    [SecurityCriticalAttribute]
public abstract virtual Guid get_TypeLibrary();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_ThreadingModel();
    [SecurityCriticalAttribute]
public abstract virtual string get_RuntimeVersion();
    [SecurityCriticalAttribute]
public abstract virtual string get_HostFile();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8CD3FC86-AFD3-477a-8FD5-146C291195BB")]
internal interface System.Deployment.Internal.Isolation.Manifest.ICounterEntry {
    public CounterEntry AllData { get; }
    public Guid CounterSetGuid { get; }
    public UInt32 CounterId { get; }
    public string Name { get; }
    public string Description { get; }
    public UInt32 CounterType { get; }
    public ulong Attributes { get; }
    public UInt32 BaseId { get; }
    public UInt32 DefaultScale { get; }
    [SecurityCriticalAttribute]
public abstract virtual CounterEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual Guid get_CounterSetGuid();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_CounterId();
    [SecurityCriticalAttribute]
public abstract virtual string get_Name();
    [SecurityCriticalAttribute]
public abstract virtual string get_Description();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_CounterType();
    [SecurityCriticalAttribute]
public abstract virtual ulong get_Attributes();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_BaseId();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_DefaultScale();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8CD3FC85-AFD3-477a-8FD5-146C291195BB")]
internal interface System.Deployment.Internal.Isolation.Manifest.ICounterSetEntry {
    public CounterSetEntry AllData { get; }
    public Guid CounterSetGuid { get; }
    public Guid ProviderGuid { get; }
    public string Name { get; }
    public string Description { get; }
    public bool InstanceType { get; }
    [SecurityCriticalAttribute]
public abstract virtual CounterSetEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual Guid get_CounterSetGuid();
    [SecurityCriticalAttribute]
public abstract virtual Guid get_ProviderGuid();
    [SecurityCriticalAttribute]
public abstract virtual string get_Name();
    [SecurityCriticalAttribute]
public abstract virtual string get_Description();
    [SecurityCriticalAttribute]
public abstract virtual bool get_InstanceType();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CF168CF4-4E8F-4d92-9D2A-60E5CA21CF85")]
internal interface System.Deployment.Internal.Isolation.Manifest.IDependentOSMetadataEntry {
    public DependentOSMetadataEntry AllData { get; }
    public string SupportUrl { get; }
    public string Description { get; }
    public ushort MajorVersion { get; }
    public ushort MinorVersion { get; }
    public ushort BuildNumber { get; }
    public byte ServicePackMajor { get; }
    public byte ServicePackMinor { get; }
    [SecurityCriticalAttribute]
public abstract virtual DependentOSMetadataEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual string get_SupportUrl();
    [SecurityCriticalAttribute]
public abstract virtual string get_Description();
    [SecurityCriticalAttribute]
public abstract virtual ushort get_MajorVersion();
    [SecurityCriticalAttribute]
public abstract virtual ushort get_MinorVersion();
    [SecurityCriticalAttribute]
public abstract virtual ushort get_BuildNumber();
    [SecurityCriticalAttribute]
public abstract virtual byte get_ServicePackMajor();
    [SecurityCriticalAttribute]
public abstract virtual byte get_ServicePackMinor();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CFA3F59F-334D-46bf-A5A5-5D11BB2D7EBC")]
internal interface System.Deployment.Internal.Isolation.Manifest.IDeploymentMetadataEntry {
    public DeploymentMetadataEntry AllData { get; }
    public string DeploymentProviderCodebase { get; }
    public string MinimumRequiredVersion { get; }
    public ushort MaximumAge { get; }
    public byte MaximumAge_Unit { get; }
    public UInt32 DeploymentFlags { get; }
    [SecurityCriticalAttribute]
public abstract virtual DeploymentMetadataEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual string get_DeploymentProviderCodebase();
    [SecurityCriticalAttribute]
public abstract virtual string get_MinimumRequiredVersion();
    [SecurityCriticalAttribute]
public abstract virtual ushort get_MaximumAge();
    [SecurityCriticalAttribute]
public abstract virtual byte get_MaximumAge_Unit();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_DeploymentFlags();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CB73147E-5FC2-4c31-B4E6-58D13DBE1A08")]
internal interface System.Deployment.Internal.Isolation.Manifest.IDescriptionMetadataEntry {
    public DescriptionMetadataEntry AllData { get; }
    public string Publisher { get; }
    public string Product { get; }
    public string SupportUrl { get; }
    public string IconFile { get; }
    public string ErrorReportUrl { get; }
    public string SuiteName { get; }
    [SecurityCriticalAttribute]
public abstract virtual DescriptionMetadataEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual string get_Publisher();
    [SecurityCriticalAttribute]
public abstract virtual string get_Product();
    [SecurityCriticalAttribute]
public abstract virtual string get_SupportUrl();
    [SecurityCriticalAttribute]
public abstract virtual string get_IconFile();
    [SecurityCriticalAttribute]
public abstract virtual string get_ErrorReportUrl();
    [SecurityCriticalAttribute]
public abstract virtual string get_SuiteName();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9f27c750-7dfb-46a1-a673-52e53e2337a9")]
internal interface System.Deployment.Internal.Isolation.Manifest.IDirectoryEntry {
    public DirectoryEntry AllData { get; }
    public UInt32 Flags { get; }
    public UInt32 Protection { get; }
    public string BuildFilter { get; }
    public object SecurityDescriptor { get; }
    [SecurityCriticalAttribute]
public abstract virtual DirectoryEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_Flags();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_Protection();
    [SecurityCriticalAttribute]
public abstract virtual string get_BuildFilter();
    [SecurityCriticalAttribute]
public abstract virtual object get_SecurityDescriptor();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1583EFE9-832F-4d08-B041-CAC5ACEDB948")]
internal interface System.Deployment.Internal.Isolation.Manifest.IEntryPointEntry {
    public EntryPointEntry AllData { get; }
    public string Name { get; }
    public string CommandLine_File { get; }
    public string CommandLine_Parameters { get; }
    public IReferenceIdentity Identity { get; }
    public UInt32 Flags { get; }
    [SecurityCriticalAttribute]
public abstract virtual EntryPointEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual string get_Name();
    [SecurityCriticalAttribute]
public abstract virtual string get_CommandLine_File();
    [SecurityCriticalAttribute]
public abstract virtual string get_CommandLine_Parameters();
    [SecurityCriticalAttribute]
public abstract virtual IReferenceIdentity get_Identity();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_Flags();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8AD3FC86-AFD3-477a-8FD5-146C291195BB")]
internal interface System.Deployment.Internal.Isolation.Manifest.IEventEntry {
    public EventEntry AllData { get; }
    public UInt32 EventID { get; }
    public UInt32 Level { get; }
    public UInt32 Version { get; }
    public Guid Guid { get; }
    public string SubTypeName { get; }
    public UInt32 SubTypeValue { get; }
    public string DisplayName { get; }
    public UInt32 EventNameMicrodomIndex { get; }
    [SecurityCriticalAttribute]
public abstract virtual EventEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_EventID();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_Level();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_Version();
    [SecurityCriticalAttribute]
public abstract virtual Guid get_Guid();
    [SecurityCriticalAttribute]
public abstract virtual string get_SubTypeName();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_SubTypeValue();
    [SecurityCriticalAttribute]
public abstract virtual string get_DisplayName();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_EventNameMicrodomIndex();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8AD3FC86-AFD3-477a-8FD5-146C291195BC")]
internal interface System.Deployment.Internal.Isolation.Manifest.IEventMapEntry {
    public EventMapEntry AllData { get; }
    public string MapName { get; }
    public string Name { get; }
    public UInt32 Value { get; }
    public bool IsValueMap { get; }
    [SecurityCriticalAttribute]
public abstract virtual EventMapEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual string get_MapName();
    [SecurityCriticalAttribute]
public abstract virtual string get_Name();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_Value();
    [SecurityCriticalAttribute]
public abstract virtual bool get_IsValueMap();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8AD3FC86-AFD3-477a-8FD5-146C291195BD")]
internal interface System.Deployment.Internal.Isolation.Manifest.IEventTagEntry {
    public EventTagEntry AllData { get; }
    public string TagData { get; }
    public UInt32 EventID { get; }
    [SecurityCriticalAttribute]
public abstract virtual EventTagEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual string get_TagData();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_EventID();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0C66F299-E08E-48c5-9264-7CCBEB4D5CBB")]
internal interface System.Deployment.Internal.Isolation.Manifest.IFileAssociationEntry {
    public FileAssociationEntry AllData { get; }
    public string Extension { get; }
    public string Description { get; }
    public string ProgID { get; }
    public string DefaultIcon { get; }
    public string Parameter { get; }
    [SecurityCriticalAttribute]
public abstract virtual FileAssociationEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual string get_Extension();
    [SecurityCriticalAttribute]
public abstract virtual string get_Description();
    [SecurityCriticalAttribute]
public abstract virtual string get_ProgID();
    [SecurityCriticalAttribute]
public abstract virtual string get_DefaultIcon();
    [SecurityCriticalAttribute]
public abstract virtual string get_Parameter();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A2A55FAD-349B-469b-BF12-ADC33D14A937")]
internal interface System.Deployment.Internal.Isolation.Manifest.IFileEntry {
    public FileEntry AllData { get; }
    public string Name { get; }
    public UInt32 HashAlgorithm { get; }
    public string LoadFrom { get; }
    public string SourcePath { get; }
    public string ImportPath { get; }
    public string SourceName { get; }
    public string Location { get; }
    public object HashValue { get; }
    public ulong Size { get; }
    public string Group { get; }
    public UInt32 Flags { get; }
    public IMuiResourceMapEntry MuiMapping { get; }
    public UInt32 WritableType { get; }
    public ISection HashElements { get; }
    [SecurityCriticalAttribute]
public abstract virtual FileEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual string get_Name();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_HashAlgorithm();
    [SecurityCriticalAttribute]
public abstract virtual string get_LoadFrom();
    [SecurityCriticalAttribute]
public abstract virtual string get_SourcePath();
    [SecurityCriticalAttribute]
public abstract virtual string get_ImportPath();
    [SecurityCriticalAttribute]
public abstract virtual string get_SourceName();
    [SecurityCriticalAttribute]
public abstract virtual string get_Location();
    [SecurityCriticalAttribute]
public abstract virtual object get_HashValue();
    [SecurityCriticalAttribute]
public abstract virtual ulong get_Size();
    [SecurityCriticalAttribute]
public abstract virtual string get_Group();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_Flags();
    [SecurityCriticalAttribute]
public abstract virtual IMuiResourceMapEntry get_MuiMapping();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_WritableType();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_HashElements();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9D46FB70-7B54-4f4f-9331-BA9E87833FF5")]
internal interface System.Deployment.Internal.Isolation.Manifest.IHashElementEntry {
    public HashElementEntry AllData { get; }
    public UInt32 index { get; }
    public byte Transform { get; }
    public object TransformMetadata { get; }
    public byte DigestMethod { get; }
    public object DigestValue { get; }
    public string Xml { get; }
    [SecurityCriticalAttribute]
public abstract virtual HashElementEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_index();
    [SecurityCriticalAttribute]
public abstract virtual byte get_Transform();
    [SecurityCriticalAttribute]
public abstract virtual object get_TransformMetadata();
    [SecurityCriticalAttribute]
public abstract virtual byte get_DigestMethod();
    [SecurityCriticalAttribute]
public abstract virtual object get_DigestValue();
    [SecurityCriticalAttribute]
public abstract virtual string get_Xml();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("AB1ED79F-943E-407d-A80B-0744E3A95B28")]
internal interface System.Deployment.Internal.Isolation.Manifest.IMetadataSectionEntry {
    public MetadataSectionEntry AllData { get; }
    public UInt32 SchemaVersion { get; }
    public UInt32 ManifestFlags { get; }
    public UInt32 UsagePatterns { get; }
    public IDefinitionIdentity CdfIdentity { get; }
    public string LocalPath { get; }
    public UInt32 HashAlgorithm { get; }
    public object ManifestHash { get; }
    public string ContentType { get; }
    public string RuntimeImageVersion { get; }
    public object MvidValue { get; }
    public IDescriptionMetadataEntry DescriptionData { get; }
    public IDeploymentMetadataEntry DeploymentData { get; }
    public IDependentOSMetadataEntry DependentOSData { get; }
    public string defaultPermissionSetID { get; }
    public string RequestedExecutionLevel { get; }
    public bool RequestedExecutionLevelUIAccess { get; }
    public IReferenceIdentity ResourceTypeResourcesDependency { get; }
    public IReferenceIdentity ResourceTypeManifestResourcesDependency { get; }
    public string KeyInfoElement { get; }
    public ICompatibleFrameworksMetadataEntry CompatibleFrameworksData { get; }
    [SecurityCriticalAttribute]
public abstract virtual MetadataSectionEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_SchemaVersion();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_ManifestFlags();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_UsagePatterns();
    [SecurityCriticalAttribute]
public abstract virtual IDefinitionIdentity get_CdfIdentity();
    [SecurityCriticalAttribute]
public abstract virtual string get_LocalPath();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_HashAlgorithm();
    [SecurityCriticalAttribute]
public abstract virtual object get_ManifestHash();
    [SecurityCriticalAttribute]
public abstract virtual string get_ContentType();
    [SecurityCriticalAttribute]
public abstract virtual string get_RuntimeImageVersion();
    [SecurityCriticalAttribute]
public abstract virtual object get_MvidValue();
    [SecurityCriticalAttribute]
public abstract virtual IDescriptionMetadataEntry get_DescriptionData();
    [SecurityCriticalAttribute]
public abstract virtual IDeploymentMetadataEntry get_DeploymentData();
    [SecurityCriticalAttribute]
public abstract virtual IDependentOSMetadataEntry get_DependentOSData();
    [SecurityCriticalAttribute]
public abstract virtual string get_defaultPermissionSetID();
    [SecurityCriticalAttribute]
public abstract virtual string get_RequestedExecutionLevel();
    [SecurityCriticalAttribute]
public abstract virtual bool get_RequestedExecutionLevelUIAccess();
    [SecurityCriticalAttribute]
public abstract virtual IReferenceIdentity get_ResourceTypeResourcesDependency();
    [SecurityCriticalAttribute]
public abstract virtual IReferenceIdentity get_ResourceTypeManifestResourcesDependency();
    [SecurityCriticalAttribute]
public abstract virtual string get_KeyInfoElement();
    [SecurityCriticalAttribute]
public abstract virtual ICompatibleFrameworksMetadataEntry get_CompatibleFrameworksData();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("24abe1f7-a396-4a03-9adf-1d5b86a5569f")]
internal interface System.Deployment.Internal.Isolation.Manifest.IMuiResourceIdLookupMapEntry {
    public MuiResourceIdLookupMapEntry AllData { get; }
    public UInt32 Count { get; }
    [SecurityCriticalAttribute]
public abstract virtual MuiResourceIdLookupMapEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_Count();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("397927f5-10f2-4ecb-bfe1-3c264212a193")]
internal interface System.Deployment.Internal.Isolation.Manifest.IMuiResourceMapEntry {
    public MuiResourceMapEntry AllData { get; }
    public object ResourceTypeIdInt { get; }
    public object ResourceTypeIdString { get; }
    [SecurityCriticalAttribute]
public abstract virtual MuiResourceMapEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual object get_ResourceTypeIdInt();
    [SecurityCriticalAttribute]
public abstract virtual object get_ResourceTypeIdString();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("55b2dec1-d0f6-4bf4-91b1-30f73ad8e4df")]
internal interface System.Deployment.Internal.Isolation.Manifest.IMuiResourceTypeIdIntEntry {
    public MuiResourceTypeIdIntEntry AllData { get; }
    public object StringIds { get; }
    public object IntegerIds { get; }
    [SecurityCriticalAttribute]
public abstract virtual MuiResourceTypeIdIntEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual object get_StringIds();
    [SecurityCriticalAttribute]
public abstract virtual object get_IntegerIds();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("11df5cad-c183-479b-9a44-3842b71639ce")]
internal interface System.Deployment.Internal.Isolation.Manifest.IMuiResourceTypeIdStringEntry {
    public MuiResourceTypeIdStringEntry AllData { get; }
    public object StringIds { get; }
    public object IntegerIds { get; }
    [SecurityCriticalAttribute]
public abstract virtual MuiResourceTypeIdStringEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual object get_StringIds();
    [SecurityCriticalAttribute]
public abstract virtual object get_IntegerIds();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("EBE5A1ED-FEBC-42c4-A9E1-E087C6E36635")]
internal interface System.Deployment.Internal.Isolation.Manifest.IPermissionSetEntry {
    public PermissionSetEntry AllData { get; }
    public string Id { get; }
    public string XmlSegment { get; }
    [SecurityCriticalAttribute]
public abstract virtual PermissionSetEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual string get_Id();
    [SecurityCriticalAttribute]
public abstract virtual string get_XmlSegment();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("54F198EC-A63A-45ea-A984-452F68D9B35B")]
internal interface System.Deployment.Internal.Isolation.Manifest.IProgIdRedirectionEntry {
    public ProgIdRedirectionEntry AllData { get; }
    public string ProgId { get; }
    public Guid RedirectedGuid { get; }
    [SecurityCriticalAttribute]
public abstract virtual ProgIdRedirectionEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual string get_ProgId();
    [SecurityCriticalAttribute]
public abstract virtual Guid get_RedirectedGuid();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("186685d1-6673-48c3-bc83-95859bb591df")]
internal interface System.Deployment.Internal.Isolation.Manifest.IRegistryKeyEntry {
    public RegistryKeyEntry AllData { get; }
    public UInt32 Flags { get; }
    public UInt32 Protection { get; }
    public string BuildFilter { get; }
    public object SecurityDescriptor { get; }
    public object Values { get; }
    public object Keys { get; }
    [SecurityCriticalAttribute]
public abstract virtual RegistryKeyEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_Flags();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_Protection();
    [SecurityCriticalAttribute]
public abstract virtual string get_BuildFilter();
    [SecurityCriticalAttribute]
public abstract virtual object get_SecurityDescriptor();
    [SecurityCriticalAttribute]
public abstract virtual object get_Values();
    [SecurityCriticalAttribute]
public abstract virtual object get_Keys();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("49e1fe8d-ebb8-4593-8c4e-3e14c845b142")]
internal interface System.Deployment.Internal.Isolation.Manifest.IRegistryValueEntry {
    public RegistryValueEntry AllData { get; }
    public UInt32 Flags { get; }
    public UInt32 OperationHint { get; }
    public UInt32 Type { get; }
    public string Value { get; }
    public string BuildFilter { get; }
    [SecurityCriticalAttribute]
public abstract virtual RegistryValueEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_Flags();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_OperationHint();
    [SecurityCriticalAttribute]
public abstract virtual UInt32 get_Type();
    [SecurityCriticalAttribute]
public abstract virtual string get_Value();
    [SecurityCriticalAttribute]
public abstract virtual string get_BuildFilter();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("70A4ECEE-B195-4c59-85BF-44B6ACA83F07")]
internal interface System.Deployment.Internal.Isolation.Manifest.IResourceTableMappingEntry {
    public ResourceTableMappingEntry AllData { get; }
    public string id { get; }
    public string FinalStringMapped { get; }
    [SecurityCriticalAttribute]
public abstract virtual ResourceTableMappingEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual string get_id();
    [SecurityCriticalAttribute]
public abstract virtual string get_FinalStringMapped();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("a75b74e9-2c00-4ebb-b3f9-62a670aaa07e")]
internal interface System.Deployment.Internal.Isolation.Manifest.ISecurityDescriptorReferenceEntry {
    public SecurityDescriptorReferenceEntry AllData { get; }
    public string Name { get; }
    public string BuildFilter { get; }
    [SecurityCriticalAttribute]
public abstract virtual SecurityDescriptorReferenceEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual string get_Name();
    [SecurityCriticalAttribute]
public abstract virtual string get_BuildFilter();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("5A7A54D7-5AD5-418e-AB7A-CF823A8D48D0")]
internal interface System.Deployment.Internal.Isolation.Manifest.ISubcategoryMembershipEntry {
    public SubcategoryMembershipEntry AllData { get; }
    public string Subcategory { get; }
    public ISection CategoryMembershipData { get; }
    [SecurityCriticalAttribute]
public abstract virtual SubcategoryMembershipEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual string get_Subcategory();
    [SecurityCriticalAttribute]
public abstract virtual ISection get_CategoryMembershipData();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8AD3FC86-AFD3-477a-8FD5-146C291195BA")]
internal interface System.Deployment.Internal.Isolation.Manifest.IWindowClassEntry {
    public WindowClassEntry AllData { get; }
    public string ClassName { get; }
    public string HostDll { get; }
    public bool fVersioned { get; }
    [SecurityCriticalAttribute]
public abstract virtual WindowClassEntry get_AllData();
    [SecurityCriticalAttribute]
public abstract virtual string get_ClassName();
    [SecurityCriticalAttribute]
public abstract virtual string get_HostDll();
    [SecurityCriticalAttribute]
public abstract virtual bool get_fVersioned();
}
internal class System.Deployment.Internal.Isolation.Manifest.MetadataSectionEntry : object {
    public UInt32 SchemaVersion;
    public UInt32 ManifestFlags;
    public UInt32 UsagePatterns;
    public IDefinitionIdentity CdfIdentity;
    public string LocalPath;
    public UInt32 HashAlgorithm;
    public IntPtr ManifestHash;
    public UInt32 ManifestHashSize;
    public string ContentType;
    public string RuntimeImageVersion;
    public IntPtr MvidValue;
    public UInt32 MvidValueSize;
    public DescriptionMetadataEntry DescriptionData;
    public DeploymentMetadataEntry DeploymentData;
    public DependentOSMetadataEntry DependentOSData;
    public string defaultPermissionSetID;
    public string RequestedExecutionLevel;
    public bool RequestedExecutionLevelUIAccess;
    public IReferenceIdentity ResourceTypeResourcesDependency;
    public IReferenceIdentity ResourceTypeManifestResourcesDependency;
    public string KeyInfoElement;
    public CompatibleFrameworksMetadataEntry CompatibleFrameworksData;
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    [SecuritySafeCriticalAttribute]
public void Dispose(bool fDisposing);
}
internal enum System.Deployment.Internal.Isolation.Manifest.MetadataSectionEntryFieldId : Enum {
    public int value__;
    public static MetadataSectionEntryFieldId MetadataSection_SchemaVersion;
    public static MetadataSectionEntryFieldId MetadataSection_ManifestFlags;
    public static MetadataSectionEntryFieldId MetadataSection_UsagePatterns;
    public static MetadataSectionEntryFieldId MetadataSection_CdfIdentity;
    public static MetadataSectionEntryFieldId MetadataSection_LocalPath;
    public static MetadataSectionEntryFieldId MetadataSection_HashAlgorithm;
    public static MetadataSectionEntryFieldId MetadataSection_ManifestHash;
    public static MetadataSectionEntryFieldId MetadataSection_ManifestHashSize;
    public static MetadataSectionEntryFieldId MetadataSection_ContentType;
    public static MetadataSectionEntryFieldId MetadataSection_RuntimeImageVersion;
    public static MetadataSectionEntryFieldId MetadataSection_MvidValue;
    public static MetadataSectionEntryFieldId MetadataSection_MvidValueSize;
    public static MetadataSectionEntryFieldId MetadataSection_DescriptionData;
    public static MetadataSectionEntryFieldId MetadataSection_DeploymentData;
    public static MetadataSectionEntryFieldId MetadataSection_DependentOSData;
    public static MetadataSectionEntryFieldId MetadataSection_defaultPermissionSetID;
    public static MetadataSectionEntryFieldId MetadataSection_RequestedExecutionLevel;
    public static MetadataSectionEntryFieldId MetadataSection_RequestedExecutionLevelUIAccess;
    public static MetadataSectionEntryFieldId MetadataSection_ResourceTypeResourcesDependency;
    public static MetadataSectionEntryFieldId MetadataSection_ResourceTypeManifestResourcesDependency;
    public static MetadataSectionEntryFieldId MetadataSection_KeyInfoElement;
    public static MetadataSectionEntryFieldId MetadataSection_CompatibleFrameworksData;
}
internal class System.Deployment.Internal.Isolation.Manifest.MuiResourceIdLookupMapEntry : object {
    public UInt32 Count;
}
internal enum System.Deployment.Internal.Isolation.Manifest.MuiResourceIdLookupMapEntryFieldId : Enum {
    public int value__;
    public static MuiResourceIdLookupMapEntryFieldId MuiResourceIdLookupMap_Count;
}
internal class System.Deployment.Internal.Isolation.Manifest.MuiResourceMapEntry : object {
    public IntPtr ResourceTypeIdInt;
    public UInt32 ResourceTypeIdIntSize;
    public IntPtr ResourceTypeIdString;
    public UInt32 ResourceTypeIdStringSize;
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    [SecuritySafeCriticalAttribute]
public void Dispose(bool fDisposing);
}
internal enum System.Deployment.Internal.Isolation.Manifest.MuiResourceMapEntryFieldId : Enum {
    public int value__;
    public static MuiResourceMapEntryFieldId MuiResourceMap_ResourceTypeIdInt;
    public static MuiResourceMapEntryFieldId MuiResourceMap_ResourceTypeIdIntSize;
    public static MuiResourceMapEntryFieldId MuiResourceMap_ResourceTypeIdString;
    public static MuiResourceMapEntryFieldId MuiResourceMap_ResourceTypeIdStringSize;
}
internal class System.Deployment.Internal.Isolation.Manifest.MuiResourceTypeIdIntEntry : object {
    public IntPtr StringIds;
    public UInt32 StringIdsSize;
    public IntPtr IntegerIds;
    public UInt32 IntegerIdsSize;
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    [SecuritySafeCriticalAttribute]
public void Dispose(bool fDisposing);
}
internal enum System.Deployment.Internal.Isolation.Manifest.MuiResourceTypeIdIntEntryFieldId : Enum {
    public int value__;
    public static MuiResourceTypeIdIntEntryFieldId MuiResourceTypeIdInt_StringIds;
    public static MuiResourceTypeIdIntEntryFieldId MuiResourceTypeIdInt_StringIdsSize;
    public static MuiResourceTypeIdIntEntryFieldId MuiResourceTypeIdInt_IntegerIds;
    public static MuiResourceTypeIdIntEntryFieldId MuiResourceTypeIdInt_IntegerIdsSize;
}
internal class System.Deployment.Internal.Isolation.Manifest.MuiResourceTypeIdStringEntry : object {
    public IntPtr StringIds;
    public UInt32 StringIdsSize;
    public IntPtr IntegerIds;
    public UInt32 IntegerIdsSize;
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    [SecuritySafeCriticalAttribute]
public void Dispose(bool fDisposing);
}
internal enum System.Deployment.Internal.Isolation.Manifest.MuiResourceTypeIdStringEntryFieldId : Enum {
    public int value__;
    public static MuiResourceTypeIdStringEntryFieldId MuiResourceTypeIdString_StringIds;
    public static MuiResourceTypeIdStringEntryFieldId MuiResourceTypeIdString_StringIdsSize;
    public static MuiResourceTypeIdStringEntryFieldId MuiResourceTypeIdString_IntegerIds;
    public static MuiResourceTypeIdStringEntryFieldId MuiResourceTypeIdString_IntegerIdsSize;
}
internal class System.Deployment.Internal.Isolation.Manifest.PermissionSetEntry : object {
    public string Id;
    public string XmlSegment;
}
internal enum System.Deployment.Internal.Isolation.Manifest.PermissionSetEntryFieldId : Enum {
    public int value__;
    public static PermissionSetEntryFieldId PermissionSet_XmlSegment;
}
internal class System.Deployment.Internal.Isolation.Manifest.ProgIdRedirectionEntry : object {
    public string ProgId;
    public Guid RedirectedGuid;
}
internal enum System.Deployment.Internal.Isolation.Manifest.ProgIdRedirectionEntryFieldId : Enum {
    public int value__;
    public static ProgIdRedirectionEntryFieldId ProgIdRedirection_RedirectedGuid;
}
internal class System.Deployment.Internal.Isolation.Manifest.RegistryKeyEntry : object {
    public UInt32 Flags;
    public UInt32 Protection;
    public string BuildFilter;
    public IntPtr SecurityDescriptor;
    public UInt32 SecurityDescriptorSize;
    public IntPtr Values;
    public UInt32 ValuesSize;
    public IntPtr Keys;
    public UInt32 KeysSize;
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    [SecuritySafeCriticalAttribute]
public void Dispose(bool fDisposing);
}
internal enum System.Deployment.Internal.Isolation.Manifest.RegistryKeyEntryFieldId : Enum {
    public int value__;
    public static RegistryKeyEntryFieldId RegistryKey_Flags;
    public static RegistryKeyEntryFieldId RegistryKey_Protection;
    public static RegistryKeyEntryFieldId RegistryKey_BuildFilter;
    public static RegistryKeyEntryFieldId RegistryKey_SecurityDescriptor;
    public static RegistryKeyEntryFieldId RegistryKey_SecurityDescriptorSize;
    public static RegistryKeyEntryFieldId RegistryKey_Values;
    public static RegistryKeyEntryFieldId RegistryKey_ValuesSize;
    public static RegistryKeyEntryFieldId RegistryKey_Keys;
    public static RegistryKeyEntryFieldId RegistryKey_KeysSize;
}
internal class System.Deployment.Internal.Isolation.Manifest.RegistryValueEntry : object {
    public UInt32 Flags;
    public UInt32 OperationHint;
    public UInt32 Type;
    public string Value;
    public string BuildFilter;
}
internal enum System.Deployment.Internal.Isolation.Manifest.RegistryValueEntryFieldId : Enum {
    public int value__;
    public static RegistryValueEntryFieldId RegistryValue_Flags;
    public static RegistryValueEntryFieldId RegistryValue_OperationHint;
    public static RegistryValueEntryFieldId RegistryValue_Type;
    public static RegistryValueEntryFieldId RegistryValue_Value;
    public static RegistryValueEntryFieldId RegistryValue_BuildFilter;
}
internal class System.Deployment.Internal.Isolation.Manifest.ResourceTableMappingEntry : object {
    public string id;
    public string FinalStringMapped;
}
internal enum System.Deployment.Internal.Isolation.Manifest.ResourceTableMappingEntryFieldId : Enum {
    public int value__;
    public static ResourceTableMappingEntryFieldId ResourceTableMapping_FinalStringMapped;
}
internal class System.Deployment.Internal.Isolation.Manifest.SecurityDescriptorReferenceEntry : object {
    public string Name;
    public string BuildFilter;
}
internal enum System.Deployment.Internal.Isolation.Manifest.SecurityDescriptorReferenceEntryFieldId : Enum {
    public int value__;
    public static SecurityDescriptorReferenceEntryFieldId SecurityDescriptorReference_Name;
    public static SecurityDescriptorReferenceEntryFieldId SecurityDescriptorReference_BuildFilter;
}
internal class System.Deployment.Internal.Isolation.Manifest.SubcategoryMembershipEntry : object {
    public string Subcategory;
    public ISection CategoryMembershipData;
}
internal enum System.Deployment.Internal.Isolation.Manifest.SubcategoryMembershipEntryFieldId : Enum {
    public int value__;
    public static SubcategoryMembershipEntryFieldId SubcategoryMembership_CategoryMembershipData;
}
internal class System.Deployment.Internal.Isolation.Manifest.WindowClassEntry : object {
    public string ClassName;
    public string HostDll;
    public bool fVersioned;
}
internal enum System.Deployment.Internal.Isolation.Manifest.WindowClassEntryFieldId : Enum {
    public int value__;
    public static WindowClassEntryFieldId WindowClass_HostDll;
    public static WindowClassEntryFieldId WindowClass_fVersioned;
}
internal class System.Deployment.Internal.Isolation.ReferenceAppId : object {
    internal IReferenceAppId _id;
    public string SubscriptionId { get; public set; }
    public string Codebase { get; public set; }
    public EnumReferenceIdentity AppPath { get; }
    internal ReferenceAppId(IReferenceAppId id);
    public string get_SubscriptionId();
    public void set_SubscriptionId(string value);
    public string get_Codebase();
    public void set_Codebase(string value);
    public EnumReferenceIdentity get_AppPath();
}
internal class System.Deployment.Internal.Isolation.ReferenceIdentity : object {
    internal IReferenceIdentity _id;
    internal ReferenceIdentity(IReferenceIdentity i);
}
internal enum System.Deployment.Internal.Isolation.StateManager_RunningState : Enum {
    public int value__;
    public static StateManager_RunningState Undefined;
    public static StateManager_RunningState Starting;
    public static StateManager_RunningState Running;
}
internal class System.Deployment.Internal.Isolation.Store : object {
    public IStore InternalStore { get; }
    public Store(IStore pStore);
    public IStore get_InternalStore();
    [SecuritySafeCriticalAttribute]
public UInt32[] Transact(StoreTransactionOperation[] operations);
    public void Transact(StoreTransactionOperation[] operations, UInt32[] rgDispositions, Int32[] rgResults);
    [SecuritySafeCriticalAttribute]
public IDefinitionIdentity BindReferenceToAssemblyIdentity(UInt32 Flags, IReferenceIdentity ReferenceIdentity, UInt32 cDeploymentsToIgnore, IDefinitionIdentity[] DefinitionIdentity_DeploymentsToIgnore);
    [SecuritySafeCriticalAttribute]
public void CalculateDelimiterOfDeploymentsBasedOnQuota(UInt32 dwFlags, UInt32 cDeployments, IDefinitionAppId[] rgpIDefinitionAppId_Deployments, StoreApplicationReference& InstallerReference, ulong ulonglongQuota, UInt32& Delimiter, UInt64& SizeSharedWithExternalDeployment, UInt64& SizeConsumedByInputDeploymentArray);
    [SecuritySafeCriticalAttribute]
public ICMS BindReferenceToAssemblyManifest(UInt32 Flags, IReferenceIdentity ReferenceIdentity, UInt32 cDeploymentsToIgnore, IDefinitionIdentity[] DefinitionIdentity_DeploymentsToIgnore);
    [SecuritySafeCriticalAttribute]
public ICMS GetAssemblyManifest(UInt32 Flags, IDefinitionIdentity DefinitionIdentity);
    [SecuritySafeCriticalAttribute]
public IDefinitionIdentity GetAssemblyIdentity(UInt32 Flags, IDefinitionIdentity DefinitionIdentity);
    public StoreAssemblyEnumeration EnumAssemblies(EnumAssembliesFlags Flags);
    [SecuritySafeCriticalAttribute]
public StoreAssemblyEnumeration EnumAssemblies(EnumAssembliesFlags Flags, IReferenceIdentity refToMatch);
    [SecuritySafeCriticalAttribute]
public StoreAssemblyFileEnumeration EnumFiles(EnumAssemblyFilesFlags Flags, IDefinitionIdentity Assembly);
    [SecuritySafeCriticalAttribute]
public StoreAssemblyFileEnumeration EnumPrivateFiles(EnumApplicationPrivateFiles Flags, IDefinitionAppId Application, IDefinitionIdentity Assembly);
    [SecuritySafeCriticalAttribute]
public IEnumSTORE_ASSEMBLY_INSTALLATION_REFERENCE EnumInstallationReferences(EnumAssemblyInstallReferenceFlags Flags, IDefinitionIdentity Assembly);
    [SecuritySafeCriticalAttribute]
public IPathLock LockAssemblyPath(IDefinitionIdentity asm);
    [SecuritySafeCriticalAttribute]
public IPathLock LockApplicationPath(IDefinitionAppId app);
    [SecuritySafeCriticalAttribute]
public ulong QueryChangeID(IDefinitionIdentity asm);
    [SecuritySafeCriticalAttribute]
public StoreCategoryEnumeration EnumCategories(EnumCategoriesFlags Flags, IReferenceIdentity CategoryMatch);
    public StoreSubcategoryEnumeration EnumSubcategories(EnumSubcategoriesFlags Flags, IDefinitionIdentity CategoryMatch);
    [SecuritySafeCriticalAttribute]
public StoreSubcategoryEnumeration EnumSubcategories(EnumSubcategoriesFlags Flags, IDefinitionIdentity Category, string SearchPattern);
    [SecuritySafeCriticalAttribute]
public StoreCategoryInstanceEnumeration EnumCategoryInstances(EnumCategoryInstancesFlags Flags, IDefinitionIdentity Category, string SubCat);
    [SecurityCriticalAttribute]
public Byte[] GetDeploymentProperty(GetPackagePropertyFlags Flags, IDefinitionAppId Deployment, StoreApplicationReference Reference, Guid PropertySet, string PropertyName);
    [SecuritySafeCriticalAttribute]
public StoreDeploymentMetadataEnumeration EnumInstallerDeployments(Guid InstallerId, string InstallerName, string InstallerMetadata, IReferenceAppId DeploymentFilter);
    [SecuritySafeCriticalAttribute]
public StoreDeploymentMetadataPropertyEnumeration EnumInstallerDeploymentProperties(Guid InstallerId, string InstallerName, string InstallerMetadata, IDefinitionAppId Deployment);
}
internal class System.Deployment.Internal.Isolation.STORE_ASSEMBLY : ValueType {
    public UInt32 Status;
    public IDefinitionIdentity DefinitionIdentity;
    public string ManifestPath;
    public ulong AssemblySize;
    public ulong ChangeId;
}
internal class System.Deployment.Internal.Isolation.STORE_ASSEMBLY_FILE : ValueType {
    public UInt32 Size;
    public UInt32 Flags;
    public string FileName;
    public UInt32 FileStatusFlags;
}
[FlagsAttribute]
internal enum System.Deployment.Internal.Isolation.STORE_ASSEMBLY_FILE_STATUS_FLAGS : Enum {
    public int value__;
    public static STORE_ASSEMBLY_FILE_STATUS_FLAGS STORE_ASSEMBLY_FILE_STATUS_FLAG_PRESENT;
}
[FlagsAttribute]
internal enum System.Deployment.Internal.Isolation.STORE_ASSEMBLY_STATUS_FLAGS : Enum {
    public int value__;
    public static STORE_ASSEMBLY_STATUS_FLAGS STORE_ASSEMBLY_STATUS_MANIFEST_ONLY;
    public static STORE_ASSEMBLY_STATUS_FLAGS STORE_ASSEMBLY_STATUS_PAYLOAD_RESIDENT;
    public static STORE_ASSEMBLY_STATUS_FLAGS STORE_ASSEMBLY_STATUS_PARTIAL_INSTALL;
}
internal class System.Deployment.Internal.Isolation.STORE_CATEGORY : ValueType {
    public IDefinitionIdentity DefinitionIdentity;
}
internal class System.Deployment.Internal.Isolation.STORE_CATEGORY_INSTANCE : ValueType {
    public IDefinitionAppId DefinitionAppId_Application;
    public string XMLSnippet;
}
internal class System.Deployment.Internal.Isolation.STORE_CATEGORY_SUBCATEGORY : ValueType {
    public string Subcategory;
}
internal class System.Deployment.Internal.Isolation.StoreApplicationReference : ValueType {
    public UInt32 Size;
    public RefFlags Flags;
    public Guid GuidScheme;
    public string Identifier;
    public string NonCanonicalData;
    public StoreApplicationReference(Guid RefScheme, string Id, string NcData);
    [SecurityCriticalAttribute]
public IntPtr ToIntPtr();
    [SecurityCriticalAttribute]
public static void Destroy(IntPtr ip);
}
internal class System.Deployment.Internal.Isolation.StoreAssemblyEnumeration : object {
    private object System.Collections.IEnumerator.Current { get; }
    public STORE_ASSEMBLY Current { get; }
    public StoreAssemblyEnumeration(IEnumSTORE_ASSEMBLY pI);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public STORE_ASSEMBLY get_Current();
    public IEnumerator GetEnumerator();
    [SecuritySafeCriticalAttribute]
public sealed virtual bool MoveNext();
    [SecuritySafeCriticalAttribute]
public sealed virtual void Reset();
}
internal class System.Deployment.Internal.Isolation.StoreAssemblyFileEnumeration : object {
    private object System.Collections.IEnumerator.Current { get; }
    public STORE_ASSEMBLY_FILE Current { get; }
    public StoreAssemblyFileEnumeration(IEnumSTORE_ASSEMBLY_FILE pI);
    public IEnumerator GetEnumerator();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public STORE_ASSEMBLY_FILE get_Current();
    [SecuritySafeCriticalAttribute]
public sealed virtual bool MoveNext();
    [SecuritySafeCriticalAttribute]
public sealed virtual void Reset();
}
internal class System.Deployment.Internal.Isolation.StoreCategoryEnumeration : object {
    private object System.Collections.IEnumerator.Current { get; }
    public STORE_CATEGORY Current { get; }
    public StoreCategoryEnumeration(IEnumSTORE_CATEGORY pI);
    public IEnumerator GetEnumerator();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public STORE_CATEGORY get_Current();
    [SecuritySafeCriticalAttribute]
public sealed virtual bool MoveNext();
    [SecuritySafeCriticalAttribute]
public sealed virtual void Reset();
}
internal class System.Deployment.Internal.Isolation.StoreCategoryInstanceEnumeration : object {
    private object System.Collections.IEnumerator.Current { get; }
    public STORE_CATEGORY_INSTANCE Current { get; }
    public StoreCategoryInstanceEnumeration(IEnumSTORE_CATEGORY_INSTANCE pI);
    public IEnumerator GetEnumerator();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public STORE_CATEGORY_INSTANCE get_Current();
    [SecuritySafeCriticalAttribute]
public sealed virtual bool MoveNext();
    [SecuritySafeCriticalAttribute]
public sealed virtual void Reset();
}
internal class System.Deployment.Internal.Isolation.StoreDeploymentMetadataEnumeration : object {
    private object System.Collections.IEnumerator.Current { get; }
    public IDefinitionAppId Current { get; }
    public StoreDeploymentMetadataEnumeration(IEnumSTORE_DEPLOYMENT_METADATA pI);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public IDefinitionAppId get_Current();
    public IEnumerator GetEnumerator();
    [SecuritySafeCriticalAttribute]
public sealed virtual bool MoveNext();
    [SecuritySafeCriticalAttribute]
public sealed virtual void Reset();
}
internal class System.Deployment.Internal.Isolation.StoreDeploymentMetadataPropertyEnumeration : object {
    private object System.Collections.IEnumerator.Current { get; }
    public StoreOperationMetadataProperty Current { get; }
    public StoreDeploymentMetadataPropertyEnumeration(IEnumSTORE_DEPLOYMENT_METADATA_PROPERTY pI);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public StoreOperationMetadataProperty get_Current();
    public IEnumerator GetEnumerator();
    [SecuritySafeCriticalAttribute]
public sealed virtual bool MoveNext();
    [SecuritySafeCriticalAttribute]
public sealed virtual void Reset();
}
internal class System.Deployment.Internal.Isolation.StoreOperationInstallDeployment : ValueType {
    public UInt32 Size;
    public OpFlags Flags;
    public IDefinitionAppId Application;
    public IntPtr Reference;
    public StoreOperationInstallDeployment(IDefinitionAppId App, StoreApplicationReference reference);
    [SecuritySafeCriticalAttribute]
public StoreOperationInstallDeployment(IDefinitionAppId App, bool UninstallOthers, StoreApplicationReference reference);
    [SecurityCriticalAttribute]
public void Destroy();
}
internal class System.Deployment.Internal.Isolation.StoreOperationMetadataProperty : ValueType {
    public Guid GuidPropertySet;
    public string Name;
    public IntPtr ValueSize;
    public string Value;
    public StoreOperationMetadataProperty(Guid PropertySet, string Name);
    public StoreOperationMetadataProperty(Guid PropertySet, string Name, string Value);
}
internal class System.Deployment.Internal.Isolation.StoreOperationPinDeployment : ValueType {
    public UInt32 Size;
    public OpFlags Flags;
    public IDefinitionAppId Application;
    public long ExpirationTime;
    public IntPtr Reference;
    [SecuritySafeCriticalAttribute]
public StoreOperationPinDeployment(IDefinitionAppId AppId, StoreApplicationReference Ref);
    public StoreOperationPinDeployment(IDefinitionAppId AppId, DateTime Expiry, StoreApplicationReference Ref);
    [SecurityCriticalAttribute]
public void Destroy();
}
internal class System.Deployment.Internal.Isolation.StoreOperationScavenge : ValueType {
    public UInt32 Size;
    public OpFlags Flags;
    public ulong SizeReclaimationLimit;
    public ulong RuntimeLimit;
    public UInt32 ComponentCountLimit;
    public StoreOperationScavenge(bool Light, ulong SizeLimit, ulong RunLimit, UInt32 ComponentLimit);
    public StoreOperationScavenge(bool Light);
    public void Destroy();
}
internal class System.Deployment.Internal.Isolation.StoreOperationSetCanonicalizationContext : ValueType {
    public UInt32 Size;
    public OpFlags Flags;
    public string BaseAddressFilePath;
    public string ExportsFilePath;
    [SecurityCriticalAttribute]
public StoreOperationSetCanonicalizationContext(string Bases, string Exports);
    public void Destroy();
}
internal class System.Deployment.Internal.Isolation.StoreOperationSetDeploymentMetadata : ValueType {
    public UInt32 Size;
    public OpFlags Flags;
    public IDefinitionAppId Deployment;
    public IntPtr InstallerReference;
    public IntPtr cPropertiesToTest;
    public IntPtr PropertiesToTest;
    public IntPtr cPropertiesToSet;
    public IntPtr PropertiesToSet;
    public StoreOperationSetDeploymentMetadata(IDefinitionAppId Deployment, StoreApplicationReference Reference, StoreOperationMetadataProperty[] SetProperties);
    [SecuritySafeCriticalAttribute]
public StoreOperationSetDeploymentMetadata(IDefinitionAppId Deployment, StoreApplicationReference Reference, StoreOperationMetadataProperty[] SetProperties, StoreOperationMetadataProperty[] TestProperties);
    [SecurityCriticalAttribute]
public void Destroy();
}
internal class System.Deployment.Internal.Isolation.StoreOperationStageComponent : ValueType {
    public UInt32 Size;
    public OpFlags Flags;
    public IDefinitionAppId Application;
    public IDefinitionIdentity Component;
    public string ManifestPath;
    public StoreOperationStageComponent(IDefinitionAppId app, string Manifest);
    public StoreOperationStageComponent(IDefinitionAppId app, IDefinitionIdentity comp, string Manifest);
    public void Destroy();
}
internal class System.Deployment.Internal.Isolation.StoreOperationStageComponentFile : ValueType {
    public UInt32 Size;
    public OpFlags Flags;
    public IDefinitionAppId Application;
    public IDefinitionIdentity Component;
    public string ComponentRelativePath;
    public string SourceFilePath;
    public StoreOperationStageComponentFile(IDefinitionAppId App, string CompRelPath, string SrcFile);
    public StoreOperationStageComponentFile(IDefinitionAppId App, IDefinitionIdentity Component, string CompRelPath, string SrcFile);
    public void Destroy();
}
internal class System.Deployment.Internal.Isolation.StoreOperationUninstallDeployment : ValueType {
    public UInt32 Size;
    public OpFlags Flags;
    public IDefinitionAppId Application;
    public IntPtr Reference;
    [SecuritySafeCriticalAttribute]
public StoreOperationUninstallDeployment(IDefinitionAppId appid, StoreApplicationReference AppRef);
    [SecurityCriticalAttribute]
public void Destroy();
}
internal class System.Deployment.Internal.Isolation.StoreOperationUnpinDeployment : ValueType {
    public UInt32 Size;
    public OpFlags Flags;
    public IDefinitionAppId Application;
    public IntPtr Reference;
    [SecuritySafeCriticalAttribute]
public StoreOperationUnpinDeployment(IDefinitionAppId app, StoreApplicationReference reference);
    [SecurityCriticalAttribute]
public void Destroy();
}
internal class System.Deployment.Internal.Isolation.StoreSubcategoryEnumeration : object {
    private object System.Collections.IEnumerator.Current { get; }
    public STORE_CATEGORY_SUBCATEGORY Current { get; }
    public StoreSubcategoryEnumeration(IEnumSTORE_CATEGORY_SUBCATEGORY pI);
    public IEnumerator GetEnumerator();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public STORE_CATEGORY_SUBCATEGORY get_Current();
    [SecuritySafeCriticalAttribute]
public sealed virtual bool MoveNext();
    [SecuritySafeCriticalAttribute]
public sealed virtual void Reset();
}
internal class System.Deployment.Internal.Isolation.StoreTransaction : object {
    public StoreTransactionOperation[] Operations { get; }
    public void Add(StoreOperationInstallDeployment o);
    public void Add(StoreOperationPinDeployment o);
    public void Add(StoreOperationSetCanonicalizationContext o);
    public void Add(StoreOperationSetDeploymentMetadata o);
    public void Add(StoreOperationStageComponent o);
    public void Add(StoreOperationStageComponentFile o);
    public void Add(StoreOperationUninstallDeployment o);
    public void Add(StoreOperationUnpinDeployment o);
    public void Add(StoreOperationScavenge o);
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    public StoreTransactionOperation[] get_Operations();
}
internal class System.Deployment.Internal.Isolation.StoreTransactionData : ValueType {
    public IntPtr DataPtr;
}
internal class System.Deployment.Internal.Isolation.StoreTransactionOperation : ValueType {
    public StoreTransactionOperationType Operation;
    public StoreTransactionData Data;
}
internal enum System.Deployment.Internal.Isolation.StoreTransactionOperationType : Enum {
    public int value__;
    public static StoreTransactionOperationType Invalid;
    public static StoreTransactionOperationType SetCanonicalizationContext;
    public static StoreTransactionOperationType StageComponent;
    public static StoreTransactionOperationType PinDeployment;
    public static StoreTransactionOperationType UnpinDeployment;
    public static StoreTransactionOperationType StageComponentFile;
    public static StoreTransactionOperationType InstallDeployment;
    public static StoreTransactionOperationType UninstallDeployment;
    public static StoreTransactionOperationType SetDeploymentMetadata;
    public static StoreTransactionOperationType Scavenge;
}
internal static class System.LocalAppContext : object {
    private static LocalAppContext();
    public static bool IsSwitchEnabled(string switchName);
    internal static bool GetCachedSwitchValue(string switchName, Int32& switchValue);
    internal static void DefineSwitchDefault(string switchName, bool initialValue);
}
internal static class System.Security.Cryptography.CngLightup : object {
    private static CngLightup();
    internal static RSA GetRSAPublicKey(X509Certificate2 cert);
    internal static RSA GetRSAPrivateKey(X509Certificate2 cert);
    internal static DSA GetDSAPublicKey(X509Certificate2 cert);
    internal static DSA GetDSAPrivateKey(X509Certificate2 cert);
    internal static ECDsa GetECDsaPublicKey(X509Certificate2 cert);
    internal static ECDsa GetECDsaPrivateKey(X509Certificate2 cert);
    internal static Byte[] Pkcs1SignData(RSA rsa, Byte[] data, string hashAlgorithmName);
    internal static bool Pkcs1VerifyData(RSA rsa, Byte[] data, Byte[] signature, string hashAlgorithmName);
    internal static Byte[] Pkcs1Encrypt(RSA rsa, Byte[] data);
    internal static Byte[] Pkcs1Decrypt(RSA rsa, Byte[] data);
    internal static Byte[] OaepSha1Encrypt(RSA rsa, Byte[] data);
    internal static Byte[] OaepSha1Decrypt(RSA rsa, Byte[] data);
}
