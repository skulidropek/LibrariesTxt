internal static class Microsoft.InfoCards.Diagnostics.DiagnosticUtility : object {
    internal static string EventSourceName;
    internal static string DefaultTraceListenerName;
    internal static LegacyDiagnosticTrace DiagnosticTrace { get; }
    internal static ExceptionUtility ExceptionUtility { get; }
    internal static Utility Utility { get; }
    internal static bool TracingEnabled { get; }
    internal static bool ShouldTraceCritical { get; }
    internal static bool ShouldUseActivity { get; }
    internal static bool ShouldTraceError { get; }
    internal static bool ShouldTraceWarning { get; }
    internal static bool ShouldTraceInformation { get; }
    internal static bool ShouldTraceVerbose { get; }
    private static DiagnosticUtility();
    internal static LegacyDiagnosticTrace get_DiagnosticTrace();
    internal static ExceptionUtility get_ExceptionUtility();
    internal static Utility get_Utility();
    internal static void InitDiagnosticTraceImpl(TraceSourceKind sourceType, string traceSourceName);
    internal static bool get_TracingEnabled();
    internal static bool ShouldTrace(TraceEventType type);
    internal static bool get_ShouldTraceCritical();
    internal static bool get_ShouldUseActivity();
    internal static bool get_ShouldTraceError();
    internal static bool get_ShouldTraceWarning();
    internal static bool get_ShouldTraceInformation();
    internal static bool get_ShouldTraceVerbose();
    [ConditionalAttribute("DEBUG")]
internal static void DebugAssert(bool condition, string message);
    [ConditionalAttribute("DEBUG")]
internal static void DebugAssert(string message);
    internal static Exception FailFast(string message);
    internal static Exception InvokeFinalHandler(Exception exception);
}
internal enum Microsoft.InfoCards.Diagnostics.EventCode : Enum {
    public int value__;
    public static EventCode AUDIT_CARD_WRITTEN;
    public static EventCode AUDIT_CARD_DELETE;
    public static EventCode AUDIT_CARD_IMPORT;
    public static EventCode AUDIT_STORE_IMPORT;
    public static EventCode AUDIT_STORE_EXPORT;
    public static EventCode AUDIT_STORE_DELETE;
    public static EventCode AUDIT_SERVICE_IDLE_STOP;
    public static EventCode E_ICARD_COMMUNICATION;
    public static EventCode E_ICARD_DATA_ACCESS;
    public static EventCode E_ICARD_EXPORT;
    public static EventCode E_ICARD_IDENTITY;
    public static EventCode E_ICARD_IMPORT;
    public static EventCode E_ICARD_ARGUMENT;
    public static EventCode E_ICARD_REQUEST;
    public static EventCode E_ICARD_INFORMATIONCARD;
    public static EventCode E_ICARD_STOREKEY;
    public static EventCode E_ICARD_LOGOVALIDATION;
    public static EventCode E_ICARD_PASSWORDVALIDATION;
    public static EventCode E_ICARD_POLICY;
    public static EventCode E_ICARD_PROCESSDIED;
    public static EventCode E_ICARD_SERVICEBUSY;
    public static EventCode E_ICARD_SERVICE;
    public static EventCode E_ICARD_SHUTTINGDOWN;
    public static EventCode E_ICARD_TOKENCREATION;
    public static EventCode E_ICARD_TRUSTEXCHANGE;
    public static EventCode E_ICARD_UNTRUSTED;
    public static EventCode E_ICARD_USERCANCELLED;
    public static EventCode E_ICARD_STORE_IMPORT;
    public static EventCode E_ICARD_FAILEDUISTART;
    public static EventCode E_ICARD_UNSUPPORTED;
    public static EventCode E_ICARD_MAXSESSIONCOUNT;
    public static EventCode E_ICARD_FILE_ACCESS;
    public static EventCode E_ICARD_MALFORMED_REQUEST;
    public static EventCode E_ICARD_UI_INITIALIZATION;
    public static EventCode E_ICARD_REFRESH_REQUIRED;
    public static EventCode E_ICARD_MISSING_APPLIESTO;
    public static EventCode E_ICARD_INVALID_PROOF_KEY;
    public static EventCode E_ICARD_UNKNOWN_REFERENCE;
    public static EventCode E_ICARD_FAILED_REQUIRED_CLAIMS;
    public static EventCode E_INVALIDARG;
    public static EventCode E_OUTOFMEMORY;
    public static EventCode SCARD_W_CANCELLED_BY_USER;
}
internal enum Microsoft.InfoCards.Diagnostics.InfoCardEventCategory : Enum {
    public short value__;
    public static InfoCardEventCategory General;
}
internal static class Microsoft.InfoCards.Diagnostics.InfoCardTrace : object {
    public static bool ShouldTraceCritical { get; }
    public static bool ShouldTraceError { get; }
    public static bool ShouldTraceWarning { get; }
    public static bool ShouldTraceInformation { get; }
    public static bool ShouldTraceVerbose { get; }
    private static InfoCardTrace();
    [ReliabilityContractAttribute("3", "2")]
public static bool IsFatal(Exception e);
    public static TimerCallback ThunkCallback(TimerCallback callback);
    public static WaitCallback ThunkCallback(WaitCallback callback);
    public static void CloseInvalidOutSafeHandle(SafeHandle handle);
    public static void Audit(EventCode code);
    public static void Audit(EventCode code, string message);
    public static void Assert(bool condition, string format, Object[] parameters);
    [ConditionalAttribute("DEBUG")]
public static void DebugAssert(bool condition, string format, Object[] parameters);
    public static void FailFast(string message);
    [ConditionalAttribute("DEBUG")]
public static void TraceVerbose(int traceCode);
    [ConditionalAttribute("DEBUG")]
public static void TraceVerbose(int traceCode, Object[] parameters);
    [ConditionalAttribute("DEBUG")]
public static void TraceInfo(int traceCode);
    [ConditionalAttribute("DEBUG")]
public static void TraceInfo(int traceCode, Object[] parameters);
    [ConditionalAttribute("DEBUG")]
public static void TraceWarning(int traceCode);
    [ConditionalAttribute("DEBUG")]
public static void TraceWarning(int traceCode, Object[] parameters);
    [ConditionalAttribute("DEBUG")]
public static void TraceError(int traceCode);
    [ConditionalAttribute("DEBUG")]
public static void TraceError(int traceCode, Object[] parameters);
    [ConditionalAttribute("DEBUG")]
public static void TraceCritical(int traceCode);
    [ConditionalAttribute("DEBUG")]
public static void TraceCritical(int traceCode, Object[] parameters);
    [ConditionalAttribute("DEBUG")]
public static void Trace(TraceEventType level, int traceCode);
    [ConditionalAttribute("DEBUG")]
public static void Trace(TraceEventType level, int traceCode, Object[] parameters);
    [ConditionalAttribute("DEBUG")]
public static void TraceDebug(string format, Object[] parameters);
    [ConditionalAttribute("DEBUG")]
public static void TraceDebug(string message);
    public static void TraceAndLogException(Exception e);
    [ConditionalAttribute("DEBUG")]
public static void TraceException(Exception e);
    public static Exception ThrowHelperError(Exception e);
    public static Exception ThrowHelperErrorWithNoLogging(Exception e);
    public static Exception ThrowHelperWarning(Exception e);
    public static Exception ThrowHelperCritical(Exception e);
    public static void ThrowInvalidArgumentConditional(bool condition, string argument);
    public static Exception ThrowHelperArgumentNull(string err);
    public static Exception ThrowHelperArgument(string message);
    public static Exception ThrowHelperArgumentNull(string err, string message);
    public static bool ShouldTrace(TraceEventType type);
    public static bool get_ShouldTraceCritical();
    public static bool get_ShouldTraceError();
    public static bool get_ShouldTraceWarning();
    public static bool get_ShouldTraceInformation();
    public static bool get_ShouldTraceVerbose();
    public static Guid GetActivityId();
    public static void SetActivityId(Guid activityId);
}
internal enum Microsoft.InfoCards.Diagnostics.InfoCardTraceCode : Enum {
    public int value__;
    public static InfoCardTraceCode None;
    public static InfoCardTraceCode General;
    public static InfoCardTraceCode Store;
    public static InfoCardTraceCode UIAgent;
    public static InfoCardTraceCode Engine;
    public static InfoCardTraceCode Client;
    public static InfoCardTraceCode Service;
    public static InfoCardTraceCode GeneralInformation;
    public static InfoCardTraceCode StoreLoading;
    public static InfoCardTraceCode StoreBeginTransaction;
    public static InfoCardTraceCode StoreCommitTransaction;
    public static InfoCardTraceCode StoreRollbackTransaction;
    public static InfoCardTraceCode StoreClosing;
    public static InfoCardTraceCode StoreFailedToOpenStore;
    public static InfoCardTraceCode StoreSignatureNotValid;
    public static InfoCardTraceCode StoreInvalidKey;
    public static InfoCardTraceCode StoreDeleting;
    public static InfoCardTraceCode AgentInfoCardSelected;
    public static InfoCardTraceCode AgentPiiDisclosed;
    public static InfoCardTraceCode ClientInformation;
}
internal class Microsoft.InfoCards.Diagnostics.InfoCardTraceRecord : TraceRecord {
    internal string EventId { get; }
    public InfoCardTraceRecord(string eventID, string message);
    internal virtual string get_EventId();
    internal virtual void WriteTo(XmlWriter writer);
    public virtual string ToString();
}
internal class Microsoft.InfoCards.GlobalAllocSafeHandle : SafeHandle {
    public int Length { get; public set; }
    public bool IsInvalid { get; }
    [SuppressUnmanagedCodeSecurityAttribute]
[ReliabilityContractAttribute("3", "2")]
public static void ZeroMemory(IntPtr dest, int size);
    [SuppressUnmanagedCodeSecurityAttribute]
[ReliabilityContractAttribute("3", "2")]
public static IntPtr GlobalFree(IntPtr hMem);
    public void set_Length(int value);
    public int get_Length();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.InfoCards.HGlobalSafeHandle : SafeHandle {
    public bool IsInvalid { get; }
    public static HGlobalSafeHandle Construct();
    public static HGlobalSafeHandle Construct(string managedString);
    public static HGlobalSafeHandle Construct(int bytes);
    [SuppressUnmanagedCodeSecurityAttribute]
[ReliabilityContractAttribute("3", "2")]
public static void ZeroMemory(IntPtr dest, int size);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.InfoCards.InfoCardArgumentException : InfoCardBaseException {
    public InfoCardArgumentException(string message);
    public InfoCardArgumentException(string message, Exception inner);
    protected InfoCardArgumentException(SerializationInfo si, StreamingContext sc);
}
internal abstract class Microsoft.InfoCards.InfoCardBaseException : Exception {
    public int NativeHResult { get; }
    public bool Logged { get; }
    public string ExtendedMessage { get; }
    protected InfoCardBaseException(int result);
    protected InfoCardBaseException(int result, string message);
    protected InfoCardBaseException(int result, string message, string extendedMessage);
    protected InfoCardBaseException(int result, string message, Exception innerException);
    protected InfoCardBaseException(int result, SerializationInfo info, StreamingContext context);
    public int get_NativeHResult();
    public bool get_Logged();
    public void MarkLogged();
    public string get_ExtendedMessage();
}
internal static class Microsoft.InfoCards.InfoCardCryptoHelper : object {
    internal static bool IsAsymmetricAlgorithm(string algorithm);
    internal static bool IsSymmetricAlgorithm(string algorithm);
}
internal class Microsoft.InfoCards.SR : object {
    internal static string ServiceInformation;
    internal static string ServiceTooManyCryptoSessions;
    internal static string ServiceProcessHasExited;
    internal static string ServiceUnknownCryptoSessionId;
    internal static string ServiceInvalidAsyncHandle;
    internal static string ServiceAsyncOpGeneratedException;
    internal static string ServiceTooManyAsyncOperations;
    internal static string ServiceBadKeySizeInPolicy;
    internal static string ServiceInvalidEprInPolicy;
    internal static string ServiceUnableToDeserializeInfoCardStream;
    internal static string ServicePopulateIdBeforeInfoCardGet;
    internal static string ServicePopulateIdBeforeInfoCardGetClaims;
    internal static string ServicePopulateIdBeforeInfoCardGetLedger;
    internal static string ServiceObjectIsNotOfExpectedType;
    internal static string ServiceCantSerializeIncompleteInfoCard;
    internal static string ServiceCantGetRowWithNullID;
    internal static string ServiceEncounteredFatalError;
    internal static string ServiceCrashedWithoutException;
    internal static string ServiceClientProcessExited;
    internal static string ServiceUnableToReadUIAgentSleepTime;
    internal static string ServiceErrorGettingClientTSSession;
    internal static string ServiceErrorGettingClientPid;
    internal static string ServiceInUseOnAnotherSession;
    internal static string ServiceInvalidClaimUri;
    internal static string ServiceUnsupportedKeyDerivationAlgorithm;
    internal static string ServiceSTSCommunicationFailed;
    internal static string ServiceCanNotExportCertIdentityPrivateKey;
    internal static string ServiceInvalidCredentialSelector;
    internal static string ServiceInvalidTokenService;
    internal static string ServiceUnsupportedKeyIdentifierType;
    internal static string ServiceInvalidThumbPrintValue;
    internal static string ServiceInvalidSerialNumber;
    internal static string ServiceInvalidUri;
    internal static string ServiceDoesNotSupportThisTokenType;
    internal static string ServiceDoesNotSupportThisClaim;
    internal static string ServiceInvalidDataInRequest;
    internal static string ServiceInaccessibleFile;
    internal static string ServiceInvalidArguments;
    internal static string ServiceInvalidArgument;
    internal static string ServiceFailedToWriteToken;
    internal static string ServiceUnsupportedFileSystem;
    internal static string UserIdentityEqualSystemNotSupported;
    internal static string FailedToSerializeObject;
    internal static string CreateProcessFailed;
    internal static string FailedToVerifySignature;
    internal static string NoTokenReturned;
    internal static string InvalidFlagsSpecified;
    internal static string UnableToBuildChainForNonHARecipient;
    internal static string InvalidHACertificateStructure;
    internal static string ServiceCouldNotRetrieveCertNameString;
    internal static string InvalidPolicyLength;
    internal static string InvalidAppliesToInPolicy;
    internal static string AppliesToMustOnlyHaveEndpointAddress;
    internal static string RecipientNotFromSameSecurityDomain;
    internal static string UnableToAuthenticateUIAgent;
    internal static string RemoteCryptoSessionUnavailable;
    internal static string ServiceRequestBufferLengthInvalid;
    internal static string FailedToCreateProcessMutex;
    internal static string InvalidOrCorruptArgumentStream;
    internal static string ServiceInvalidCallerToken;
    internal static string ServiceUnableToValidateCallerToken;
    internal static string MultipleTokenTypeElementsFound;
    internal static string MultipleKeySizeElementsFound;
    internal static string MultipleLifetimeElementsFound;
    internal static string MultipleRequestedSecurityTokenElementsFound;
    internal static string MultipleRequestedProofTokenElementsFound;
    internal static string MultipleEntropyElementsFound;
    internal static string MultipleRequestedDisplayTokenElementsFound;
    internal static string MultipleRequestedAttachedReferenceElementsFound;
    internal static string MultipleRequestedUnattachedReferenceElementsFound;
    internal static string MultipleRequestTypeElementsFound;
    internal static string KeySizeMustBeGreaterThanZero;
    internal static string NoIssuedTokenXml;
    internal static string EntropyModeCannotHaveComputedKey;
    internal static string EntropyModeRequiresProofToken;
    internal static string ProofTokenXmlUnexpectedInRstr;
    internal static string ServiceInvalidPrivacyNoticeVersion;
    internal static string ServiceCardEncryptionFailed;
    internal static string ServiceCardDecryptionFailed;
    internal static string ServiceCardWrongVersion;
    internal static string ServiceEprDoesNotHaveValidMetadata;
    internal static string NoIssuerSpecifiedWhenMexIsSpecified;
    internal static string OnlyIssueRequestTypeSupported;
    internal static string ServiceDisplayTokenNoClaimName;
    internal static string SelfOrAnonIssuerNotAllowedWhenMexSpecified;
    internal static string MoreThanOneEndPointFoundWhenNoIssuerIsSpecified;
    internal static string NoAppropriateEndPointFound;
    internal static string ServiceInvalidEncryptedClaimValues;
    internal static string ServiceInvalidAsymmetricKeySize;
    internal static string ServiceUnsupportedPolicyElementFound;
    internal static string ServiceTokenEncryptionFailed;
    internal static string InvalidKeyOption;
    internal static string RPStsWithNoSSLFailure;
    internal static string UnsupportedIdentityType;
    internal static string StoreBeginTransaction;
    internal static string StoreCanNotUnmountSystemStorage;
    internal static string StoreClosing;
    internal static string StoreCommitTransaction;
    internal static string StoreCryptProtectDataAsSystemFailed;
    internal static string StoreCryptProtectDataFailed;
    internal static string StoreCryptUnprotectDataAsSystemFailed;
    internal static string StoreCryptUnprotectDataFailed;
    internal static string StoreDataSourceCanNotImportToSelf;
    internal static string StoreDataSourceIdOutOfRange;
    internal static string StoreDataSourceInvalidIndexName;
    internal static string StoreDataSourceRowNotOwned;
    internal static string StoreDataSourceWriteLockNotHeld;
    internal static string StoreDecryptedKeyIsNotValid;
    internal static string StoreDeleting;
    internal static string StoreFailedToOpenStore;
    internal static string StoreFileNotProtectedByPassphrase;
    internal static string StoreFileNotProtectedWithDPAPI;
    internal static string StoreFreeListSizeOutOfRange;
    internal static string StoreFreeListValueOutOfRange;
    internal static string StoreHashUtilityDataOutOfRange;
    internal static string StoreHashUtilityDataToHashOutOfRange;
    internal static string StoreHighValueOutOfRange;
    internal static string StoreImpersonateLoggedOnUserFailed;
    internal static string StoreIndexDataBufferDataLengthOutOfRange;
    internal static string StoreIndexDataBufferIndexOutOfRange;
    internal static string StoreIndexGrowthFactorInvalid;
    internal static string StoreIndexInitialSizeInvalid;
    internal static string StoreIndexNameInvalid;
    internal static string StoreIndexObjectBufferOverflow;
    internal static string StoreIndexObjectCanNotBeCanonicalized;
    internal static string StoreIndexObjectCanNotBeCompiled;
    internal static string StoreIndexValueCanNotBeNull;
    internal static string StoreIndexedDataBufferNullOrEmptyDataIndexBuffer;
    internal static string StoreIndexedDataBufferNullOrEmptyMasterIndexBuffer;
    internal static string StoreKeyAlreadyProtected;
    internal static string StoreKeyNotAlreadyProtected;
    internal static string StoreLastIndexOutOfRange;
    internal static string StoreLoading;
    internal static string StoreLocalIdOutOfRange;
    internal static string StoreLowValueOutOfRange;
    internal static string StoreMoreThanOneRowReturnedInSingleMatchQuery;
    internal static string StoreNullIndexValueNotPermitted;
    internal static string StorePassphraseKeyAlreadyProtected;
    internal static string StorePassphraseNotAlreadyProtected;
    internal static string StoreProcessingTransaction;
    internal static string StoreRollbackTransaction;
    internal static string StoreRowOwnedByOtherDataSource;
    internal static string StoreSignatureNotValid;
    internal static string StoreSourceAlreadyMounted;
    internal static string StoreSourceIdOutOfRange;
    internal static string StoreUnableToGetStoreKeyFromDPAPI;
    internal static string StoreUniqueIndexConstraintBroken;
    internal static string StoreIsAlreadyLoaded;
    internal static string StoreInvalidDataFilePath;
    internal static string StoreNoReparsePointAllowed;
    internal static string StoreFileInUse;
    internal static string UIAgentCrash;
    internal static string ClientCryptoSessionDisposed;
    internal static string ClientUnsupportedCryptoAlgorithm;
    internal static string TooManyIssuedSecurityTokenParameters;
    internal static string LedgerEntryIncorrectType;
    internal static string ClaimIdNull;
    internal static string InvalidSelfIssuedUri;
    internal static string InvalidDisplayClaimType;
    internal static string NoAuthenticationServicesInCard;
    internal static string InvalidImportFile;
    internal static string SelfIssuedUriUsed;
    internal static string InvalidUriFormat;
    internal static string SignatureNotVerified;
    internal static string NoCertificateFoundInSignature;
    internal static string ImportInaccesibleFile;
    internal static string ImportFileNotFound;
    internal static string SchemaValidationError;
    internal static string CannotOpenImportFile;
    internal static string InvalidImportFileName;
    internal static string TooLongClaimValue;
    internal static string MultipleIssuerInformation;
    internal static string ExtendedInfoInSelfIssued;
    internal static string MultiplePolicyElementsWithSameID;
    internal static string NoPolicyElementFound;
    internal static string MultipleTokenElementsFoundInPolicy;
    internal static string NoValidPolicyElementFound;
    internal static string IndigoNoSuitableEndpointsForAddress;
    internal static string InvalidServiceUri;
    internal static string EndpointNotFound;
    internal static string NonHttpsURIFound;
    internal static string InvalidDisplayToken;
    internal static string InvalidIPSTSPolicy;
    internal static string NoSymmetricKeyFound;
    internal static string InvalidIssuerForIssuedToken;
    internal static string FailedReadingIPSTSPolicy;
    internal static string IPSTSClientInvalidTokenReference;
    internal static string UnsupportedEncryptionAlgorithm;
    internal static string UnsupportedEncryptWithAlgorithm;
    internal static string UnsupportedSignWithAlgorithm;
    internal static string UnsupportedSignatureAlgorithm;
    internal static string CardDoesNotMatchRequiredAuthType;
    internal static string IdentityProviderRequestedUnsupportedAuthType;
    internal static string ProblemRetrievingTokenFromIdentityProvider;
    internal static string OnlyPSha1SupportedCurrently;
    internal static string InvalidEntropyContents;
    internal static string IPStsPolicyRequestingNonPpidClaims;
    internal static string NoCertificateInEndPoint;
    internal static string StsCommunicationException;
    internal static string ClientAPIInfocardError;
    internal static string ClientAPIUserCancellationError;
    internal static string ClientAPIServiceNotStartedError;
    internal static string ClientAPIUntrustedRecipientError;
    internal static string ClientAPIInvalidIdentity;
    internal static string ClientAPIServiceBusy;
    internal static string ClientStsCommunicationException;
    internal static string ClientAPIInvalidPolicy;
    internal static string ClientAPIUnsupportedPolicyOptions;
    internal static string ClientAPICannotImport;
    internal static string ClientAPIUIInitializationFailed;
    internal static string ClientAPIServiceNotInstalledError;
    internal static string ClientAPIDetailedExceptionMessage;
    internal static string LogoInvalidAsnLength;
    internal static string LogoInvalidCertificateLength;
    internal static string LogoInvalidLogoType;
    internal static string LogosPresentButNoHashes;
    internal static string LogoHashValidationFailed;
    internal static string LogoCouldNotCreateHashAlgorithm;
    internal static string LogoUnsupportedType;
    internal static string LogoUnsupportedIndirectReferences;
    internal static string LogoUnsupportedAudio;
    internal static string UnexpectedElement;
    internal static string GeneralInformation;
    internal static string InvalidRecipientSpecified;
    internal static string NoRecipientCertificateFound;
    internal static string RecipientCertificateNotValid;
    internal static string InvalidPolicySpecified;
    internal static string NonApprovedlistedElementFound;
    internal static string NoClaimsFoundInPolicy;
    internal static string UnableToQueueThreadpool;
    internal static string TooManyClientRequests;
    internal static string TooManyClientUIConnections;
    internal static string StoreAclsTamperedWith;
    internal static string StoreVersionNotSupported;
    internal static string NoCachedCertificateForRecipient;
    internal static string NoCardNameSpecified;
    internal static string GeneralExceptionMessage;
    internal static string EventLogMessage;
    internal static string GeneralTraceMessage;
    internal static string InnerExceptionTraceFormat;
    internal static string CallStackTraceFormat;
    internal static string SelfIssuedIssuerName;
    internal static string GivenNameText;
    internal static string SurnameText;
    internal static string EmailAddressText;
    internal static string StreetAddressText;
    internal static string LocalityText;
    internal static string StateOrProvinceText;
    internal static string PostalCodeText;
    internal static string CountryText;
    internal static string HomePhoneText;
    internal static string OtherPhoneText;
    internal static string MobilePhoneText;
    internal static string DateOfBirthText;
    internal static string GenderText;
    internal static string PPIDText;
    internal static string WebPageText;
    internal static string GivenNameDescription;
    internal static string SurnameDescription;
    internal static string EmailAddressDescription;
    internal static string StreetAddressDescription;
    internal static string LocalityDescription;
    internal static string StateOrProvinceDescription;
    internal static string PostalCodeDescription;
    internal static string CountryDescription;
    internal static string HomePhoneDescription;
    internal static string OtherPhoneDescription;
    internal static string MobilePhoneDescription;
    internal static string DateOfBirthDescription;
    internal static string GenderDescription;
    internal static string PPIDDescription;
    internal static string WebPageDescription;
    internal static string NonceLengthTooShort;
    internal static string Invalid3DesKeySize;
    internal static string CouldNotGenerateStrong3DesKey;
    internal static string KeyTypeNotRecognized;
    internal static string FailedToBindToService;
    internal static string SchemaValidationFailed;
    internal static string ValueMustBePositive;
    internal static string ValueMustBeInRange;
    internal static string ValueMustBeNonNegative;
    internal static string NoProofKeyOnlyAllowedInBrowser;
    internal static string ProofKeyTypeMismatch;
    internal static string SymmetricProofKeyLengthMismatch;
    internal static string X509ChainBuildFail;
    internal static string X509ChainFailAndPeerTrustFail;
    internal static string FaultMessageFormat;
    public static ResourceManager Resources { get; }
    private static SR();
    public static ResourceManager get_Resources();
    public static string GetString(string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(string name, Boolean& usedFallback);
    public static object GetObject(string name);
}
[AttributeUsageAttribute("32767")]
internal class Microsoft.InfoCards.SRCategoryAttribute : CategoryAttribute {
    public SRCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class Microsoft.InfoCards.SRDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public SRDescriptionAttribute(string description);
    public virtual string get_Description();
}
internal class Microsoft.InfoCards.UserCancelledException : InfoCardBaseException {
    public UserCancelledException(string message);
    public UserCancelledException(string message, Exception inner);
    protected UserCancelledException(SerializationInfo si, StreamingContext sc);
}
internal class System.IdentityModel.Selectors.AsymmetricCryptoHandle : ProofTokenCryptoHandle {
    public AsymmetricCryptoHandle(InternalRefCountedHandle nativeHandle, DateTime expiration, IntPtr parameters);
    protected virtual CryptoHandle OnDuplicate();
    protected virtual InfoCardProofToken OnCreateProofToken();
}
public class System.IdentityModel.Selectors.CardSpaceException : Exception {
    public CardSpaceException(string message);
    public CardSpaceException(string message, Exception innerException);
    protected CardSpaceException(SerializationInfo info, StreamingContext context);
}
public class System.IdentityModel.Selectors.CardSpacePolicyElement : object {
    public bool IsManagedIssuer { get; public set; }
    public XmlElement Target { get; public set; }
    public XmlElement Issuer { get; public set; }
    public Collection`1<XmlElement> Parameters { get; }
    public Uri PolicyNoticeLink { get; public set; }
    public int PolicyNoticeVersion { get; public set; }
    public CardSpacePolicyElement(XmlElement target, XmlElement issuer, Collection`1<XmlElement> parameters, Uri privacyNoticeLink, int privacyNoticeVersion, bool isManagedIssuer);
    public bool get_IsManagedIssuer();
    public void set_IsManagedIssuer(bool value);
    public XmlElement get_Target();
    public void set_Target(XmlElement value);
    public XmlElement get_Issuer();
    public void set_Issuer(XmlElement value);
    public Collection`1<XmlElement> get_Parameters();
    public Uri get_PolicyNoticeLink();
    public void set_PolicyNoticeLink(Uri value);
    public int get_PolicyNoticeVersion();
    public void set_PolicyNoticeVersion(int value);
}
public static class System.IdentityModel.Selectors.CardSpaceSelector : object {
    internal static int MaxPolicyChainLength;
    private static CardSpaceSelector();
    public static GenericXmlSecurityToken GetToken(XmlElement endpoint, IEnumerable`1<XmlElement> policy, XmlElement requiredRemoteTokenIssuer, SecurityTokenSerializer tokenSerializer);
    public static GenericXmlSecurityToken GetToken(CardSpacePolicyElement[] policyChain, SecurityTokenSerializer tokenSerializer);
    public static void Manage();
    public static void Import(string fileName);
    internal static CardSpaceShim GetShim();
    internal static string XmlToString(IEnumerable`1<XmlElement> xml);
}
internal class System.IdentityModel.Selectors.CardSpaceShim : object {
    public CsV2ManageCardSpace m_csShimManageCardSpace;
    public CsV2GetToken m_csShimGetToken;
    public CsV2ImportInformationCard m_csShimImportInformationCard;
    public CsV2Encrypt m_csShimEncrypt;
    public CsV2Decrypt m_csShimDecrypt;
    public CsV2SignHash m_csShimSignHash;
    public CsV2VerifyHash m_csShimVerifyHash;
    public CsV2GenerateDerivedKey m_csShimGenerateDerivedKey;
    public CsV2GetCryptoTransform m_csShimGetCryptoTransform;
    public CsV2TransformBlock m_csShimTransformBlock;
    public CsV2TransformFinalBlock m_csShimTransformFinalBlock;
    public CsV2GetKeyedHash m_csShimGetKeyedHash;
    public CsV2HashCore m_csShimHashCore;
    public CsV2HashFinal m_csShimHashFinal;
    public CsV2FreeToken m_csShimFreeToken;
    public CsV2CloseCryptoHandle m_csShimCloseCryptoHandle;
    public void InitializeIfNecessary();
}
internal abstract class System.IdentityModel.Selectors.CryptoHandle : object {
    public InternalRefCountedHandle InternalHandle { get; }
    public DateTime Expiration { get; }
    public object Parameters { get; }
    protected CryptoHandle(InternalRefCountedHandle nativeHandle, DateTime expiration, IntPtr nativeParameters, Type paramType);
    protected CryptoHandle(InternalRefCountedHandle internalHandle);
    public InternalRefCountedHandle get_InternalHandle();
    public DateTime get_Expiration();
    public object get_Parameters();
    public CryptoHandle Duplicate();
    protected abstract virtual CryptoHandle OnDuplicate();
    protected void ThrowIfDisposed();
    public sealed virtual void Dispose();
    internal static CryptoHandle Create(InternalRefCountedHandle nativeHandle);
}
internal static class System.IdentityModel.Selectors.ExceptionHelper : object {
    public static void ThrowIfCardSpaceException(int status);
}
internal class System.IdentityModel.Selectors.HashCryptoHandle : CryptoHandle {
    public HashCryptoHandle(InternalRefCountedHandle nativeHandle, DateTime expiration, IntPtr parameters);
    protected virtual CryptoHandle OnDuplicate();
}
public class System.IdentityModel.Selectors.IdentityValidationException : Exception {
    public IdentityValidationException(string message);
    public IdentityValidationException(string message, Exception innerException);
    protected IdentityValidationException(SerializationInfo info, StreamingContext context);
}
internal class System.IdentityModel.Selectors.InfoCardAsymmetricCrypto : AsymmetricSecurityKey {
    public int KeySize { get; }
    public InfoCardAsymmetricCrypto(AsymmetricCryptoHandle cryptoHandle);
    public virtual int get_KeySize();
    public virtual bool HasPrivateKey();
    public virtual AsymmetricAlgorithm GetAsymmetricAlgorithm(string algorithmUri, bool privateKey);
    public virtual HashAlgorithm GetHashAlgorithmForSignature(string algorithmUri);
    public virtual AsymmetricSignatureDeformatter GetSignatureDeformatter(string algorithmUri);
    public virtual AsymmetricSignatureFormatter GetSignatureFormatter(string algorithmUri);
    public virtual Byte[] DecryptKey(string algorithmUri, Byte[] keyData);
    public virtual Byte[] EncryptKey(string algorithmUri, Byte[] keyData);
    public virtual bool IsSupportedAlgorithm(string algorithmUri);
    public virtual bool IsSymmetricAlgorithm(string algorithmUri);
    public virtual bool IsAsymmetricAlgorithm(string algorithmUri);
    public sealed virtual void Dispose();
}
internal class System.IdentityModel.Selectors.InfoCardKeyedHashAlgorithm : KeyedHashAlgorithm {
    public Byte[] Key { get; }
    public int HashSize { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public bool CanTransformMultipleBlocks { get; }
    public bool CanReuseTransform { get; }
    public InfoCardKeyedHashAlgorithm(SymmetricCryptoHandle cryptoHandle);
    public virtual Byte[] get_Key();
    public virtual int get_HashSize();
    public virtual int get_InputBlockSize();
    public virtual int get_OutputBlockSize();
    public virtual bool get_CanTransformMultipleBlocks();
    public virtual bool get_CanReuseTransform();
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    protected virtual void Dispose(bool disposing);
}
internal class System.IdentityModel.Selectors.InfoCardProofToken : SecurityToken {
    public string Id { get; }
    public ReadOnlyCollection`1<SecurityKey> SecurityKeys { get; }
    public DateTime ValidTo { get; }
    public DateTime ValidFrom { get; }
    public InfoCardProofToken(AsymmetricCryptoHandle cryptoHandle, DateTime expiration);
    public InfoCardProofToken(SymmetricCryptoHandle cryptoHandle, DateTime expiration);
    public virtual string get_Id();
    public virtual ReadOnlyCollection`1<SecurityKey> get_SecurityKeys();
    public virtual DateTime get_ValidTo();
    public virtual DateTime get_ValidFrom();
    public sealed virtual void Dispose();
}
internal class System.IdentityModel.Selectors.InfoCardRSACryptoProvider : RSA {
    public string SignatureAlgorithm { get; }
    public string KeyExchangeAlgorithm { get; }
    public InfoCardRSACryptoProvider(AsymmetricCryptoHandle cryptoHandle);
    public virtual string get_SignatureAlgorithm();
    public virtual string get_KeyExchangeAlgorithm();
    public virtual Byte[] EncryptValue(Byte[] rgb);
    public virtual Byte[] DecryptValue(Byte[] rgb);
    public Byte[] Decrypt(Byte[] inData, bool fAOEP);
    public Byte[] Encrypt(Byte[] inData, bool fAOEP);
    public Byte[] SignHash(Byte[] hash, string hashAlgOid);
    public bool VerifyHash(Byte[] hash, string hashAlgOid, Byte[] sig);
    public virtual RSAParameters ExportParameters(bool includePrivateParameters);
    public virtual string ToXmlString(bool includePrivateParameters);
    public virtual void FromXmlString(string xmlString);
    public virtual void ImportParameters(RSAParameters parameters);
    protected virtual void Dispose(bool disposing);
}
internal class System.IdentityModel.Selectors.InfoCardRSAOAEPKeyExchangeDeformatter : RSAOAEPKeyExchangeDeformatter {
    public InfoCardRSAOAEPKeyExchangeDeformatter(AsymmetricAlgorithm key);
    public virtual Byte[] DecryptKeyExchange(Byte[] rgbData);
    public virtual void SetKey(AsymmetricAlgorithm key);
}
internal class System.IdentityModel.Selectors.InfoCardRSAOAEPKeyExchangeFormatter : RSAOAEPKeyExchangeFormatter {
    public InfoCardRSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm key);
    public virtual void SetKey(AsymmetricAlgorithm key);
    public virtual Byte[] CreateKeyExchange(Byte[] rgbData);
}
internal class System.IdentityModel.Selectors.InfoCardRSAPKCS1KeyExchangeDeformatter : RSAPKCS1KeyExchangeDeformatter {
    public InfoCardRSAPKCS1KeyExchangeDeformatter(AsymmetricAlgorithm key);
    public virtual Byte[] DecryptKeyExchange(Byte[] rgbIn);
    public virtual void SetKey(AsymmetricAlgorithm key);
}
internal class System.IdentityModel.Selectors.InfoCardRSAPKCS1KeyExchangeFormatter : RSAPKCS1KeyExchangeFormatter {
    public InfoCardRSAPKCS1KeyExchangeFormatter(AsymmetricAlgorithm key);
    public virtual void SetKey(AsymmetricAlgorithm key);
    public virtual Byte[] CreateKeyExchange(Byte[] rgbData);
}
internal class System.IdentityModel.Selectors.InfoCardRSAPKCS1SignatureDeformatter : RSAPKCS1SignatureDeformatter {
    public InfoCardRSAPKCS1SignatureDeformatter(AsymmetricAlgorithm key);
    public virtual void SetKey(AsymmetricAlgorithm key);
    public virtual void SetHashAlgorithm(string strName);
    public virtual bool VerifySignature(Byte[] rgbHash, Byte[] rgbSignature);
}
internal class System.IdentityModel.Selectors.InfoCardRSAPKCS1SignatureFormatter : RSAPKCS1SignatureFormatter {
    public InfoCardRSAPKCS1SignatureFormatter(AsymmetricAlgorithm key);
    public virtual void SetKey(AsymmetricAlgorithm key);
    public virtual void SetHashAlgorithm(string strName);
    public virtual Byte[] CreateSignature(Byte[] rgbHash);
}
internal class System.IdentityModel.Selectors.InfoCardSymmetricAlgorithm : SymmetricAlgorithm {
    public Byte[] Key { get; public set; }
    public InfoCardSymmetricAlgorithm(SymmetricCryptoHandle cryptoHandle);
    private static InfoCardSymmetricAlgorithm();
    protected virtual void Dispose(bool disposing);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public virtual ICryptoTransform CreateEncryptor();
    public virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual ICryptoTransform CreateDecryptor();
    public virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual void GenerateKey();
    public virtual void GenerateIV();
}
internal class System.IdentityModel.Selectors.InfoCardSymmetricCrypto : SymmetricSecurityKey {
    public int KeySize { get; }
    public InfoCardSymmetricCrypto(SymmetricCryptoHandle cryptoHandle);
    public virtual int get_KeySize();
    public virtual Byte[] DecryptKey(string algorithmUri, Byte[] keyData);
    public virtual Byte[] EncryptKey(string algorithmUri, Byte[] keyData);
    public virtual bool IsAsymmetricAlgorithm(string algorithmUri);
    public virtual bool IsSupportedAlgorithm(string algorithmUri);
    public virtual bool IsSymmetricAlgorithm(string algorithmUri);
    public virtual Byte[] GenerateDerivedKey(string algorithmUri, Byte[] label, Byte[] nonce, int derivedKeyLength, int offset);
    public virtual ICryptoTransform GetDecryptionTransform(string algorithmUri, Byte[] iv);
    public virtual ICryptoTransform GetEncryptionTransform(string algorithmUri, Byte[] iv);
    public virtual int GetIVSize(string algorithmUri);
    public virtual KeyedHashAlgorithm GetKeyedHashAlgorithm(string algorithmUri);
    public virtual SymmetricAlgorithm GetSymmetricAlgorithm(string algorithmUri);
    public virtual Byte[] GetSymmetricKey();
    public sealed virtual void Dispose();
}
internal class System.IdentityModel.Selectors.InternalPolicyElement : object {
    public static int Size { get; }
    public InternalPolicyElement(CardSpacePolicyElement element);
    public static int get_Size();
    public void DoMarshal(IntPtr ptr);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
internal class System.IdentityModel.Selectors.InternalRefCountedHandle : SafeHandle {
    public object Parameters { get; }
    public DateTime Expiration { get; }
    public bool IsInvalid { get; }
    public void Initialize(DateTime expiration, object parameters);
    public object get_Parameters();
    public DateTime get_Expiration();
    public void AddRef();
    public void Release();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal static class System.IdentityModel.Selectors.NativeMethods : object {
    public static IntPtr GetProcAddressWrapper(SafeLibraryHandle implDll, string procName);
    public static Win32Exception ThrowWin32ExceptionWithContext(Win32Exception wex, string context);
}
internal class System.IdentityModel.Selectors.NativePolicyElement : ValueType {
    public string targetEndpointAddress;
    public string issuerEndpointAddress;
    public string issuedTokenParameters;
    public string policyNoticeLink;
    public int policyNoticeVersion;
    public bool isManagedCardProvider;
}
internal class System.IdentityModel.Selectors.PolicyChain : object {
    public int Length { get; }
    public PolicyChain(CardSpacePolicyElement[] elements);
    public int get_Length();
    public SafeHandle DoMarshal();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
public class System.IdentityModel.Selectors.PolicyValidationException : Exception {
    public PolicyValidationException(string message);
    public PolicyValidationException(string message, Exception innerException);
    protected PolicyValidationException(SerializationInfo info, StreamingContext context);
}
internal abstract class System.IdentityModel.Selectors.ProofTokenCryptoHandle : CryptoHandle {
    protected ProofTokenCryptoHandle(InternalRefCountedHandle nativeHandle, DateTime expiration, IntPtr nativeParameters, Type paramType);
    protected ProofTokenCryptoHandle(InternalRefCountedHandle internalHandle);
    public InfoCardProofToken CreateProofToken();
    protected abstract virtual InfoCardProofToken OnCreateProofToken();
}
internal class System.IdentityModel.Selectors.RpcAsymmetricCryptoParameters : ValueType {
    public int keySize;
    public string keyExchangeAlgorithm;
    public string signatureAlgorithm;
}
internal class System.IdentityModel.Selectors.RpcGenericXmlToken : ValueType {
    public long createDate;
    public long expiryDate;
    public string xmlToken;
    public string internalTokenReference;
    public string externalTokenReference;
}
internal class System.IdentityModel.Selectors.RpcHashCryptoParameters : ValueType {
    public int hashSize;
    public RpcTransformCryptoParameters transform;
}
internal class System.IdentityModel.Selectors.RpcInfoCardCryptoHandle : ValueType {
    public HandleType type;
    public long expiration;
    public IntPtr cryptoParameters;
}
internal class System.IdentityModel.Selectors.RpcInfoCardOptions : ValueType {
    public bool UISuppression;
    public int cchKeyLength;
    public string keyType;
    public int cbKeyValue;
    public Byte[] keyValue;
}
internal class System.IdentityModel.Selectors.RpcSymmetricCryptoParameters : ValueType {
    public int keySize;
    public int blockSize;
    public int feedbackSize;
}
internal class System.IdentityModel.Selectors.RpcTokenRequestDetail : ValueType {
    public int uriLength;
    public string recipientUri;
    public int cbRecipientToken;
    public Byte[] recipientToken;
    public int cchPolicy;
    public string policy;
}
internal class System.IdentityModel.Selectors.RpcTransformCryptoParameters : ValueType {
    public int inputBlockSize;
    public int outputBlockSize;
    public bool canTransformMultipleBlocks;
    public bool canReuseTransform;
}
internal class System.IdentityModel.Selectors.SafeLibraryHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
    internal static SafeLibraryHandle LoadLibraryW(string dllname);
    internal static bool FreeLibrary(IntPtr hModule);
}
internal class System.IdentityModel.Selectors.SafeTokenHandle : SafeHandle {
    public bool IsInvalid { get; }
    [SuppressUnmanagedCodeSecurityAttribute]
[ReliabilityContractAttribute("3", "2")]
public static int FreeToken(IntPtr token);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
public class System.IdentityModel.Selectors.ServiceBusyException : Exception {
    public ServiceBusyException(string message);
    public ServiceBusyException(string message, Exception innerException);
    protected ServiceBusyException(SerializationInfo info, StreamingContext context);
}
public class System.IdentityModel.Selectors.ServiceNotStartedException : Exception {
    public ServiceNotStartedException(string message);
    public ServiceNotStartedException(string message, Exception innerException);
    protected ServiceNotStartedException(SerializationInfo info, StreamingContext context);
}
public class System.IdentityModel.Selectors.StsCommunicationException : Exception {
    public StsCommunicationException(string message);
    public StsCommunicationException(string message, Exception innerException);
    protected StsCommunicationException(SerializationInfo info, StreamingContext context);
}
internal class System.IdentityModel.Selectors.SymmetricCryptoHandle : ProofTokenCryptoHandle {
    public SymmetricCryptoHandle(InternalRefCountedHandle nativeHandle, DateTime expiration, IntPtr parameters);
    protected virtual CryptoHandle OnDuplicate();
    protected virtual InfoCardProofToken OnCreateProofToken();
}
internal class System.IdentityModel.Selectors.ThrowOnMultipleAssignment`1 : object {
    public T Value { get; public set; }
    public ThrowOnMultipleAssignment`1(string errorString);
    public T get_Value();
    public void set_Value(T value);
}
internal class System.IdentityModel.Selectors.TransformCryptoHandle : CryptoHandle {
    public TransformCryptoHandle(InternalRefCountedHandle nativeHandle, DateTime expiration, IntPtr parameters);
    protected virtual CryptoHandle OnDuplicate();
}
internal class System.IdentityModel.Selectors.UIInitializationException : Exception {
    public UIInitializationException(string message);
    public UIInitializationException(string message, Exception innerException);
    protected UIInitializationException(SerializationInfo info, StreamingContext context);
}
public class System.IdentityModel.Selectors.UnsupportedPolicyOptionsException : Exception {
    public UnsupportedPolicyOptionsException(string message);
    public UnsupportedPolicyOptionsException(string message, Exception innerException);
    protected UnsupportedPolicyOptionsException(SerializationInfo info, StreamingContext context);
}
public class System.IdentityModel.Selectors.UntrustedRecipientException : Exception {
    public UntrustedRecipientException(string message);
    public UntrustedRecipientException(string message, Exception innerException);
    protected UntrustedRecipientException(SerializationInfo info, StreamingContext context);
}
public class System.IdentityModel.Selectors.UserCancellationException : Exception {
    public UserCancellationException(string message);
    public UserCancellationException(string message, Exception innerException);
    protected UserCancellationException(SerializationInfo info, StreamingContext context);
}
