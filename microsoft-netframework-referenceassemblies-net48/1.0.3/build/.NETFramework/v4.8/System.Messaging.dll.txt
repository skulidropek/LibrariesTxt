public class System.Messaging.AccessControlEntry : object {
    public AccessControlEntryType EntryType { get; public set; }
    protected int CustomAccessRights { get; protected set; }
    public GenericAccessRights GenericAccessRights { get; public set; }
    public StandardAccessRights StandardAccessRights { get; public set; }
    public Trustee Trustee { get; public set; }
    public AccessControlEntry(Trustee trustee);
    public AccessControlEntry(Trustee trustee, GenericAccessRights genericAccessRights, StandardAccessRights standardAccessRights, AccessControlEntryType entryType);
    public AccessControlEntryType get_EntryType();
    public void set_EntryType(AccessControlEntryType value);
    protected int get_CustomAccessRights();
    protected void set_CustomAccessRights(int value);
    public GenericAccessRights get_GenericAccessRights();
    public void set_GenericAccessRights(GenericAccessRights value);
    public StandardAccessRights get_StandardAccessRights();
    public void set_StandardAccessRights(StandardAccessRights value);
    public Trustee get_Trustee();
    public void set_Trustee(Trustee value);
}
public enum System.Messaging.AccessControlEntryType : Enum {
    public int value__;
    public static AccessControlEntryType Allow;
    public static AccessControlEntryType Set;
    public static AccessControlEntryType Deny;
    public static AccessControlEntryType Revoke;
}
public class System.Messaging.AccessControlList : CollectionBase {
    private static AccessControlList();
    public int Add(AccessControlEntry entry);
    public void Insert(int index, AccessControlEntry entry);
    public int IndexOf(AccessControlEntry entry);
    public bool Contains(AccessControlEntry entry);
    public void Remove(AccessControlEntry entry);
    public void CopyTo(AccessControlEntry[] array, int index);
}
[FlagsAttribute]
public enum System.Messaging.AcknowledgeTypes : Enum {
    public int value__;
    public static AcknowledgeTypes PositiveArrival;
    public static AcknowledgeTypes PositiveReceive;
    public static AcknowledgeTypes NegativeReceive;
    public static AcknowledgeTypes None;
    public static AcknowledgeTypes NotAcknowledgeReachQueue;
    public static AcknowledgeTypes NotAcknowledgeReceive;
    public static AcknowledgeTypes FullReachQueue;
    public static AcknowledgeTypes FullReceive;
}
public enum System.Messaging.Acknowledgment : Enum {
    public int value__;
    public static Acknowledgment None;
    public static Acknowledgment AccessDenied;
    public static Acknowledgment BadDestinationQueue;
    public static Acknowledgment BadEncryption;
    public static Acknowledgment BadSignature;
    public static Acknowledgment CouldNotEncrypt;
    public static Acknowledgment HopCountExceeded;
    public static Acknowledgment NotTransactionalQueue;
    public static Acknowledgment NotTransactionalMessage;
    public static Acknowledgment Purged;
    public static Acknowledgment QueueDeleted;
    public static Acknowledgment QueueExceedMaximumSize;
    public static Acknowledgment QueuePurged;
    public static Acknowledgment ReachQueue;
    public static Acknowledgment ReachQueueTimeout;
    public static Acknowledgment ReceiveTimeout;
    public static Acknowledgment Receive;
}
public class System.Messaging.ActiveXMessageFormatter : object {
    public sealed virtual bool CanRead(Message message);
    public sealed virtual object Clone();
    public static void InitStreamedObject(object streamedObject);
    public sealed virtual object Read(Message message);
    public sealed virtual void Write(Message message, object obj);
}
public class System.Messaging.BinaryMessageFormatter : object {
    [MessagingDescriptionAttribute("MsgTopObjectFormat")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FormatterAssemblyStyle TopObjectFormat { get; public set; }
    [MessagingDescriptionAttribute("MsgTypeFormat")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FormatterTypeStyle TypeFormat { get; public set; }
    public BinaryMessageFormatter(FormatterAssemblyStyle topObjectFormat, FormatterTypeStyle typeFormat);
    public FormatterAssemblyStyle get_TopObjectFormat();
    public void set_TopObjectFormat(FormatterAssemblyStyle value);
    public FormatterTypeStyle get_TypeFormat();
    public void set_TypeFormat(FormatterTypeStyle value);
    public sealed virtual bool CanRead(Message message);
    public sealed virtual object Clone();
    public sealed virtual object Read(Message message);
    public sealed virtual void Write(Message message, object obj);
}
public enum System.Messaging.CryptographicProviderType : Enum {
    public int value__;
    public static CryptographicProviderType None;
    public static CryptographicProviderType RsaFull;
    public static CryptographicProviderType RsqSig;
    public static CryptographicProviderType Dss;
    public static CryptographicProviderType Fortezza;
    public static CryptographicProviderType MicrosoftExchange;
    public static CryptographicProviderType Ssl;
    public static CryptographicProviderType SttMer;
    public static CryptographicProviderType SttAcq;
    public static CryptographicProviderType SttBrnd;
    public static CryptographicProviderType SttRoot;
    public static CryptographicProviderType SttIss;
}
public class System.Messaging.Cursor : object {
    public void Close();
    public sealed virtual void Dispose();
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public class System.Messaging.DefaultPropertiesToSend : object {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[MessagingDescriptionAttribute("MsgAcknowledgeType")]
public AcknowledgeTypes AcknowledgeType { get; public set; }
    [DefaultValueAttribute("")]
[MessagingDescriptionAttribute("MsgAdministrationQueue")]
public MessageQueue AdministrationQueue { get; public set; }
    [DefaultValueAttribute("0")]
[MessagingDescriptionAttribute("MsgAppSpecific")]
public int AppSpecific { get; public set; }
    [DefaultValueAttribute("True")]
[MessagingDescriptionAttribute("MsgAttachSenderId")]
public bool AttachSenderId { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[MessagingDescriptionAttribute("MsgEncryptionAlgorithm")]
public EncryptionAlgorithm EncryptionAlgorithm { get; public set; }
    [EditorAttribute("System.ComponentModel.Design.ArrayEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[MessagingDescriptionAttribute("MsgExtension")]
public Byte[] Extension { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[MessagingDescriptionAttribute("MsgHashAlgorithm")]
public HashAlgorithm HashAlgorithm { get; public set; }
    [DefaultValueAttribute("")]
[MessagingDescriptionAttribute("MsgLabel")]
public string Label { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[MessagingDescriptionAttribute("MsgPriority")]
public MessagePriority Priority { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgRecoverable")]
public bool Recoverable { get; public set; }
    [DefaultValueAttribute("")]
[MessagingDescriptionAttribute("MsgResponseQueue")]
public MessageQueue ResponseQueue { get; public set; }
    [TypeConverterAttribute("System.Messaging.Design.TimeoutConverter")]
[MessagingDescriptionAttribute("MsgTimeToBeReceived")]
public TimeSpan TimeToBeReceived { get; public set; }
    [TypeConverterAttribute("System.Messaging.Design.TimeoutConverter")]
[MessagingDescriptionAttribute("MsgTimeToReachQueue")]
public TimeSpan TimeToReachQueue { get; public set; }
    [DefaultValueAttribute("")]
[MessagingDescriptionAttribute("MsgTransactionStatusQueue")]
public MessageQueue TransactionStatusQueue { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgUseAuthentication")]
public bool UseAuthentication { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgUseDeadLetterQueue")]
public bool UseDeadLetterQueue { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgUseEncryption")]
public bool UseEncryption { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgUseJournalQueue")]
public bool UseJournalQueue { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgUseTracing")]
public bool UseTracing { get; public set; }
    public AcknowledgeTypes get_AcknowledgeType();
    public void set_AcknowledgeType(AcknowledgeTypes value);
    public MessageQueue get_AdministrationQueue();
    public void set_AdministrationQueue(MessageQueue value);
    public int get_AppSpecific();
    public void set_AppSpecific(int value);
    public bool get_AttachSenderId();
    public void set_AttachSenderId(bool value);
    public EncryptionAlgorithm get_EncryptionAlgorithm();
    public void set_EncryptionAlgorithm(EncryptionAlgorithm value);
    public Byte[] get_Extension();
    public void set_Extension(Byte[] value);
    public HashAlgorithm get_HashAlgorithm();
    public void set_HashAlgorithm(HashAlgorithm value);
    public string get_Label();
    public void set_Label(string value);
    public MessagePriority get_Priority();
    public void set_Priority(MessagePriority value);
    public bool get_Recoverable();
    public void set_Recoverable(bool value);
    public MessageQueue get_ResponseQueue();
    public void set_ResponseQueue(MessageQueue value);
    public TimeSpan get_TimeToBeReceived();
    public void set_TimeToBeReceived(TimeSpan value);
    public TimeSpan get_TimeToReachQueue();
    public void set_TimeToReachQueue(TimeSpan value);
    public MessageQueue get_TransactionStatusQueue();
    public void set_TransactionStatusQueue(MessageQueue value);
    public bool get_UseAuthentication();
    public void set_UseAuthentication(bool value);
    public bool get_UseDeadLetterQueue();
    public void set_UseDeadLetterQueue(bool value);
    public bool get_UseEncryption();
    public void set_UseEncryption(bool value);
    public bool get_UseJournalQueue();
    public void set_UseJournalQueue(bool value);
    public bool get_UseTracing();
    public void set_UseTracing(bool value);
}
internal class System.Messaging.Design.MessageFormatterConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
internal class System.Messaging.Design.MessageQueueConverter : TypeConverter {
    private static MessageQueueConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Messaging.Design.QueuePathDialog : Form {
    public string Path { get; }
    public QueuePathDialog(IServiceProvider provider);
    public QueuePathDialog(IUIService uiService);
    private static QueuePathDialog();
    public string get_Path();
    public void ChoosePath();
    public void DoubleClicked(object source, EventArgs e);
    public void SelectQueue(MessageQueue queue);
    protected virtual void OnFormClosing(FormClosingEventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
}
public class System.Messaging.Design.QueuePathEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Messaging.Design.SizeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Messaging.Design.TimeoutConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public enum System.Messaging.EncryptionAlgorithm : Enum {
    public int value__;
    public static EncryptionAlgorithm None;
    public static EncryptionAlgorithm Rc2;
    public static EncryptionAlgorithm Rc4;
}
public enum System.Messaging.EncryptionRequired : Enum {
    public int value__;
    public static EncryptionRequired None;
    public static EncryptionRequired Optional;
    public static EncryptionRequired Body;
}
[FlagsAttribute]
public enum System.Messaging.GenericAccessRights : Enum {
    public int value__;
    public static GenericAccessRights All;
    public static GenericAccessRights Execute;
    public static GenericAccessRights Write;
    public static GenericAccessRights Read;
    public static GenericAccessRights None;
}
public enum System.Messaging.HashAlgorithm : Enum {
    public int value__;
    public static HashAlgorithm None;
    public static HashAlgorithm Md2;
    public static HashAlgorithm Md4;
    public static HashAlgorithm Md5;
    public static HashAlgorithm Sha;
    public static HashAlgorithm Mac;
    public static HashAlgorithm Sha256;
    public static HashAlgorithm Sha384;
    public static HashAlgorithm Sha512;
}
[TypeConverterAttribute("System.Messaging.Design.MessageFormatterConverter")]
public interface System.Messaging.IMessageFormatter {
    public abstract virtual bool CanRead(Message message);
    public abstract virtual object Read(Message message);
    public abstract virtual void Write(Message message, object obj);
}
[DesignerAttribute("System.Messaging.Design.MessageDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Messaging.Message : Component {
    public static TimeSpan InfiniteTimeout;
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgAcknowledgement")]
public Acknowledgment Acknowledgment { get; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgAcknowledgeType")]
public AcknowledgeTypes AcknowledgeType { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgAdministrationQueue")]
public MessageQueue AdministrationQueue { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgAppSpecific")]
public int AppSpecific { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgArrivedTime")]
public DateTime ArrivedTime { get; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgAttachSenderId")]
public bool AttachSenderId { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgAuthenticated")]
public bool Authenticated { get; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgAuthenticationProviderName")]
public string AuthenticationProviderName { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgAuthenticationProviderType")]
public CryptographicProviderType AuthenticationProviderType { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object Body { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorAttribute("System.ComponentModel.Design.BinaryEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[MessagingDescriptionAttribute("MsgBodyStream")]
public Stream BodyStream { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgBodyType")]
public int BodyType { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgConnectorType")]
public Guid ConnectorType { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgCorrelationId")]
public string CorrelationId { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgDestinationQueue")]
public MessageQueue DestinationQueue { get; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgDestinationSymmetricKey")]
public Byte[] DestinationSymmetricKey { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgDigitalSignature")]
public Byte[] DigitalSignature { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgEncryptionAlgorithm")]
public EncryptionAlgorithm EncryptionAlgorithm { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgExtension")]
public Byte[] Extension { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IMessageFormatter Formatter { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgHashAlgorithm")]
public HashAlgorithm HashAlgorithm { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgId")]
public string Id { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgIsFirstInTransaction")]
public bool IsFirstInTransaction { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgIsLastInTransaction")]
public bool IsLastInTransaction { get; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgLabel")]
public string Label { get; public set; }
    public long LookupId { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgMessageType")]
public MessageType MessageType { get; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgPriority")]
public MessagePriority Priority { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgRecoverable")]
public bool Recoverable { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgResponseQueue")]
public MessageQueue ResponseQueue { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
public SecurityContext SecurityContext { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgSenderCertificate")]
public Byte[] SenderCertificate { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgSenderId")]
public Byte[] SenderId { get; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgSenderVersion")]
public long SenderVersion { get; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgSentTime")]
public DateTime SentTime { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgSourceMachine")]
public string SourceMachine { get; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[TypeConverterAttribute("System.Messaging.Design.TimeoutConverter")]
[MessagingDescriptionAttribute("MsgTimeToBeReceived")]
public TimeSpan TimeToBeReceived { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[TypeConverterAttribute("System.Messaging.Design.TimeoutConverter")]
[MessagingDescriptionAttribute("MsgTimeToReachQueue")]
public TimeSpan TimeToReachQueue { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgTransactionId")]
public string TransactionId { get; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgTransactionStatusQueue")]
public MessageQueue TransactionStatusQueue { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgUseAuthentication")]
public bool UseAuthentication { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgUseDeadLetterQueue")]
public bool UseDeadLetterQueue { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgUseEncryption")]
public bool UseEncryption { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgUseJournalQueue")]
public bool UseJournalQueue { get; public set; }
    [ReadOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MsgUseTracing")]
public bool UseTracing { get; public set; }
    public Message(object body);
    public Message(object body, IMessageFormatter formatter);
    private static Message();
    public Acknowledgment get_Acknowledgment();
    public AcknowledgeTypes get_AcknowledgeType();
    public void set_AcknowledgeType(AcknowledgeTypes value);
    public MessageQueue get_AdministrationQueue();
    public void set_AdministrationQueue(MessageQueue value);
    public int get_AppSpecific();
    public void set_AppSpecific(int value);
    public DateTime get_ArrivedTime();
    public bool get_AttachSenderId();
    public void set_AttachSenderId(bool value);
    public bool get_Authenticated();
    public string get_AuthenticationProviderName();
    public void set_AuthenticationProviderName(string value);
    public CryptographicProviderType get_AuthenticationProviderType();
    public void set_AuthenticationProviderType(CryptographicProviderType value);
    public object get_Body();
    public void set_Body(object value);
    public Stream get_BodyStream();
    public void set_BodyStream(Stream value);
    public int get_BodyType();
    public void set_BodyType(int value);
    public Guid get_ConnectorType();
    public void set_ConnectorType(Guid value);
    public string get_CorrelationId();
    public void set_CorrelationId(string value);
    public MessageQueue get_DestinationQueue();
    public Byte[] get_DestinationSymmetricKey();
    public void set_DestinationSymmetricKey(Byte[] value);
    public Byte[] get_DigitalSignature();
    public void set_DigitalSignature(Byte[] value);
    public EncryptionAlgorithm get_EncryptionAlgorithm();
    public void set_EncryptionAlgorithm(EncryptionAlgorithm value);
    public Byte[] get_Extension();
    public void set_Extension(Byte[] value);
    public IMessageFormatter get_Formatter();
    public void set_Formatter(IMessageFormatter value);
    public HashAlgorithm get_HashAlgorithm();
    public void set_HashAlgorithm(HashAlgorithm value);
    public string get_Id();
    public bool get_IsFirstInTransaction();
    public bool get_IsLastInTransaction();
    public string get_Label();
    public void set_Label(string value);
    public long get_LookupId();
    public MessageType get_MessageType();
    public MessagePriority get_Priority();
    public void set_Priority(MessagePriority value);
    public bool get_Recoverable();
    public void set_Recoverable(bool value);
    public MessageQueue get_ResponseQueue();
    public void set_ResponseQueue(MessageQueue value);
    public SecurityContext get_SecurityContext();
    public void set_SecurityContext(SecurityContext value);
    public Byte[] get_SenderCertificate();
    public void set_SenderCertificate(Byte[] value);
    public Byte[] get_SenderId();
    public long get_SenderVersion();
    public DateTime get_SentTime();
    public string get_SourceMachine();
    public TimeSpan get_TimeToBeReceived();
    public void set_TimeToBeReceived(TimeSpan value);
    public TimeSpan get_TimeToReachQueue();
    public void set_TimeToReachQueue(TimeSpan value);
    public string get_TransactionId();
    public MessageQueue get_TransactionStatusQueue();
    public void set_TransactionStatusQueue(MessageQueue value);
    public bool get_UseAuthentication();
    public void set_UseAuthentication(bool value);
    public bool get_UseDeadLetterQueue();
    public void set_UseDeadLetterQueue(bool value);
    public bool get_UseEncryption();
    public void set_UseEncryption(bool value);
    public bool get_UseJournalQueue();
    public void set_UseJournalQueue(bool value);
    public bool get_UseTracing();
    public void set_UseTracing(bool value);
}
public class System.Messaging.MessageEnumerator : MarshalByRefObject {
    public Message Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public IntPtr CursorHandle { get; }
    public Message get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public IntPtr get_CursorHandle();
    public void Close();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual bool MoveNext();
    public bool MoveNext(TimeSpan timeout);
    public Message RemoveCurrent();
    public Message RemoveCurrent(MessageQueueTransaction transaction);
    public Message RemoveCurrent(MessageQueueTransactionType transactionType);
    public Message RemoveCurrent(TimeSpan timeout);
    public Message RemoveCurrent(TimeSpan timeout, MessageQueueTransaction transaction);
    public Message RemoveCurrent(TimeSpan timeout, MessageQueueTransactionType transactionType);
    public sealed virtual void Reset();
}
public enum System.Messaging.MessageLookupAction : Enum {
    public int value__;
    public static MessageLookupAction Current;
    public static MessageLookupAction Next;
    public static MessageLookupAction Previous;
    public static MessageLookupAction First;
    public static MessageLookupAction Last;
}
public enum System.Messaging.MessagePriority : Enum {
    public int value__;
    public static MessagePriority Lowest;
    public static MessagePriority VeryLow;
    public static MessagePriority Low;
    public static MessagePriority Normal;
    public static MessagePriority AboveNormal;
    public static MessagePriority High;
    public static MessagePriority VeryHigh;
    public static MessagePriority Highest;
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public class System.Messaging.MessagePropertyFilter : object {
    [DefaultValueAttribute("True")]
[MessagingDescriptionAttribute("MsgAcknowledgement")]
public bool Acknowledgment { get; public set; }
    [DefaultValueAttribute("True")]
[MessagingDescriptionAttribute("MsgAcknowledgeType")]
public bool AcknowledgeType { get; public set; }
    [DefaultValueAttribute("True")]
[MessagingDescriptionAttribute("MsgAdministrationQueue")]
public bool AdministrationQueue { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgAppSpecific")]
public bool AppSpecific { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgArrivedTime")]
public bool ArrivedTime { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgAttachSenderId")]
public bool AttachSenderId { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgAuthenticated")]
public bool Authenticated { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgAuthenticationProviderName")]
public bool AuthenticationProviderName { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgAuthenticationProviderType")]
public bool AuthenticationProviderType { get; public set; }
    [DefaultValueAttribute("True")]
[MessagingDescriptionAttribute("MsgBody")]
public bool Body { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgConnectorType")]
public bool ConnectorType { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgCorrelationId")]
public bool CorrelationId { get; public set; }
    [DefaultValueAttribute("1024")]
[MessagingDescriptionAttribute("MsgDefaultBodySize")]
public int DefaultBodySize { get; public set; }
    [DefaultValueAttribute("255")]
[MessagingDescriptionAttribute("MsgDefaultExtensionSize")]
public int DefaultExtensionSize { get; public set; }
    [DefaultValueAttribute("255")]
[MessagingDescriptionAttribute("MsgDefaultLabelSize")]
public int DefaultLabelSize { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgDestinationQueue")]
public bool DestinationQueue { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgDestinationSymmetricKey")]
public bool DestinationSymmetricKey { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgDigitalSignature")]
public bool DigitalSignature { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgEncryptionAlgorithm")]
public bool EncryptionAlgorithm { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgExtension")]
public bool Extension { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgHashAlgorithm")]
public bool HashAlgorithm { get; public set; }
    [DefaultValueAttribute("True")]
[MessagingDescriptionAttribute("MsgId")]
public bool Id { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgIsFirstInTransaction")]
public bool IsFirstInTransaction { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgIsLastInTransaction")]
public bool IsLastInTransaction { get; public set; }
    [DefaultValueAttribute("True")]
[MessagingDescriptionAttribute("MsgLabel")]
public bool Label { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgLookupId")]
public bool LookupId { get; public set; }
    [DefaultValueAttribute("True")]
[MessagingDescriptionAttribute("MsgMessageType")]
public bool MessageType { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgPriority")]
public bool Priority { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgRecoverable")]
public bool Recoverable { get; public set; }
    [DefaultValueAttribute("True")]
[MessagingDescriptionAttribute("MsgResponseQueue")]
public bool ResponseQueue { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgSenderCertificate")]
public bool SenderCertificate { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgSenderId")]
public bool SenderId { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgSenderVersion")]
public bool SenderVersion { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgSentTime")]
public bool SentTime { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgSourceMachine")]
public bool SourceMachine { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgTimeToBeReceived")]
public bool TimeToBeReceived { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgTimeToReachQueue")]
public bool TimeToReachQueue { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgTransactionId")]
public bool TransactionId { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgTransactionStatusQueue")]
public bool TransactionStatusQueue { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgUseAuthentication")]
public bool UseAuthentication { get; public set; }
    [DefaultValueAttribute("True")]
[MessagingDescriptionAttribute("MsgUseDeadLetterQueue")]
public bool UseDeadLetterQueue { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgUseEncryption")]
public bool UseEncryption { get; public set; }
    [DefaultValueAttribute("True")]
[MessagingDescriptionAttribute("MsgUseJournalQueue")]
public bool UseJournalQueue { get; public set; }
    [DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MsgUseTracing")]
public bool UseTracing { get; public set; }
    public bool get_Acknowledgment();
    public void set_Acknowledgment(bool value);
    public bool get_AcknowledgeType();
    public void set_AcknowledgeType(bool value);
    public bool get_AdministrationQueue();
    public void set_AdministrationQueue(bool value);
    public bool get_AppSpecific();
    public void set_AppSpecific(bool value);
    public bool get_ArrivedTime();
    public void set_ArrivedTime(bool value);
    public bool get_AttachSenderId();
    public void set_AttachSenderId(bool value);
    public bool get_Authenticated();
    public void set_Authenticated(bool value);
    public bool get_AuthenticationProviderName();
    public void set_AuthenticationProviderName(bool value);
    public bool get_AuthenticationProviderType();
    public void set_AuthenticationProviderType(bool value);
    public bool get_Body();
    public void set_Body(bool value);
    public bool get_ConnectorType();
    public void set_ConnectorType(bool value);
    public bool get_CorrelationId();
    public void set_CorrelationId(bool value);
    public int get_DefaultBodySize();
    public void set_DefaultBodySize(int value);
    public int get_DefaultExtensionSize();
    public void set_DefaultExtensionSize(int value);
    public int get_DefaultLabelSize();
    public void set_DefaultLabelSize(int value);
    public bool get_DestinationQueue();
    public void set_DestinationQueue(bool value);
    public bool get_DestinationSymmetricKey();
    public void set_DestinationSymmetricKey(bool value);
    public bool get_DigitalSignature();
    public void set_DigitalSignature(bool value);
    public bool get_EncryptionAlgorithm();
    public void set_EncryptionAlgorithm(bool value);
    public bool get_Extension();
    public void set_Extension(bool value);
    public bool get_HashAlgorithm();
    public void set_HashAlgorithm(bool value);
    public bool get_Id();
    public void set_Id(bool value);
    public bool get_IsFirstInTransaction();
    public void set_IsFirstInTransaction(bool value);
    public bool get_IsLastInTransaction();
    public void set_IsLastInTransaction(bool value);
    public bool get_Label();
    public void set_Label(bool value);
    public bool get_LookupId();
    public void set_LookupId(bool value);
    public bool get_MessageType();
    public void set_MessageType(bool value);
    public bool get_Priority();
    public void set_Priority(bool value);
    public bool get_Recoverable();
    public void set_Recoverable(bool value);
    public bool get_ResponseQueue();
    public void set_ResponseQueue(bool value);
    public bool get_SenderCertificate();
    public void set_SenderCertificate(bool value);
    public bool get_SenderId();
    public void set_SenderId(bool value);
    public bool get_SenderVersion();
    public void set_SenderVersion(bool value);
    public bool get_SentTime();
    public void set_SentTime(bool value);
    public bool get_SourceMachine();
    public void set_SourceMachine(bool value);
    public bool get_TimeToBeReceived();
    public void set_TimeToBeReceived(bool value);
    public bool get_TimeToReachQueue();
    public void set_TimeToReachQueue(bool value);
    public bool get_TransactionId();
    public void set_TransactionId(bool value);
    public bool get_TransactionStatusQueue();
    public void set_TransactionStatusQueue(bool value);
    public bool get_UseAuthentication();
    public void set_UseAuthentication(bool value);
    public bool get_UseDeadLetterQueue();
    public void set_UseDeadLetterQueue(bool value);
    public bool get_UseEncryption();
    public void set_UseEncryption(bool value);
    public bool get_UseJournalQueue();
    public void set_UseJournalQueue(bool value);
    public bool get_UseTracing();
    public void set_UseTracing(bool value);
    public void ClearAll();
    public void SetDefaults();
    public void SetAll();
    public virtual object Clone();
}
[DefaultEventAttribute("ReceiveCompleted")]
[TypeConverterAttribute("System.Messaging.Design.MessageQueueConverter")]
[EditorAttribute("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[InstallerTypeAttribute("System.Messaging.MessageQueueInstaller")]
[MessagingDescriptionAttribute("MessageQueueDesc")]
public class System.Messaging.MessageQueue : Component {
    public static TimeSpan InfiniteTimeout;
    public static long InfiniteQueueSize;
    public QueueAccessMode AccessMode { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MQ_Authenticate")]
public bool Authenticate { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MQ_BasePriority")]
public short BasePriority { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MQ_CanRead")]
public bool CanRead { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MQ_CanWrite")]
public bool CanWrite { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MQ_Category")]
public Guid Category { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MQ_CreateTime")]
public DateTime CreateTime { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
[MessagingDescriptionAttribute("MQ_DefaultPropertiesToSend")]
public DefaultPropertiesToSend DefaultPropertiesToSend { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[MessagingDescriptionAttribute("MQ_DenySharedReceive")]
public bool DenySharedReceive { get; public set; }
    [BrowsableAttribute("False")]
public static bool EnableConnectionCache { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MQ_EncryptionRequired")]
public EncryptionRequired EncryptionRequired { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MQ_FormatName")]
public string FormatName { get; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Messaging.Design.MessageFormatterConverter")]
[BrowsableAttribute("False")]
[MessagingDescriptionAttribute("MQ_Formatter")]
public IMessageFormatter Formatter { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MQ_GuidId")]
public Guid Id { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MQ_Label")]
public string Label { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MQ_LastModifyTime")]
public DateTime LastModifyTime { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MQ_MachineName")]
public string MachineName { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MQ_MaximumJournalSize")]
[TypeConverterAttribute("System.Messaging.Design.SizeConverter")]
public long MaximumJournalSize { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MQ_MaximumQueueSize")]
[TypeConverterAttribute("System.Messaging.Design.SizeConverter")]
public long MaximumQueueSize { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
[MessagingDescriptionAttribute("MQ_MessageReadPropertyFilter")]
public MessagePropertyFilter MessageReadPropertyFilter { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("")]
[MessagingDescriptionAttribute("MQ_MulticastAddress")]
public string MulticastAddress { get; public set; }
    [EditorAttribute("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SettingsBindableAttribute("True")]
[RefreshPropertiesAttribute("1")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[MessagingDescriptionAttribute("MQ_Path")]
public string Path { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MQ_QueueName")]
public string QueueName { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MQ_ReadHandle")]
public IntPtr ReadHandle { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[MessagingDescriptionAttribute("MQ_SynchronizingObject")]
public ISynchronizeInvoke SynchronizingObject { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MQ_Transactional")]
public bool Transactional { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MQ_UseJournalQueue")]
public bool UseJournalQueue { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("MQ_WriteHandle")]
public IntPtr WriteHandle { get; }
    private static MessageQueue();
    public MessageQueue(string path);
    public MessageQueue(string path, QueueAccessMode accessMode);
    public MessageQueue(string path, bool sharedModeDenyReceive);
    public MessageQueue(string path, bool sharedModeDenyReceive, bool enableCache);
    public MessageQueue(string path, bool sharedModeDenyReceive, bool enableCache, QueueAccessMode accessMode);
    public QueueAccessMode get_AccessMode();
    public bool get_Authenticate();
    public void set_Authenticate(bool value);
    public short get_BasePriority();
    public void set_BasePriority(short value);
    public bool get_CanRead();
    public bool get_CanWrite();
    public Guid get_Category();
    public void set_Category(Guid value);
    public DateTime get_CreateTime();
    public DefaultPropertiesToSend get_DefaultPropertiesToSend();
    public void set_DefaultPropertiesToSend(DefaultPropertiesToSend value);
    public bool get_DenySharedReceive();
    public void set_DenySharedReceive(bool value);
    public static bool get_EnableConnectionCache();
    public static void set_EnableConnectionCache(bool value);
    public EncryptionRequired get_EncryptionRequired();
    public void set_EncryptionRequired(EncryptionRequired value);
    public string get_FormatName();
    public IMessageFormatter get_Formatter();
    public void set_Formatter(IMessageFormatter value);
    public Guid get_Id();
    public string get_Label();
    public void set_Label(string value);
    public DateTime get_LastModifyTime();
    public string get_MachineName();
    public void set_MachineName(string value);
    public long get_MaximumJournalSize();
    public void set_MaximumJournalSize(long value);
    public long get_MaximumQueueSize();
    public void set_MaximumQueueSize(long value);
    public MessagePropertyFilter get_MessageReadPropertyFilter();
    public void set_MessageReadPropertyFilter(MessagePropertyFilter value);
    public string get_MulticastAddress();
    public void set_MulticastAddress(string value);
    public string get_Path();
    public void set_Path(string value);
    public string get_QueueName();
    public void set_QueueName(string value);
    public IntPtr get_ReadHandle();
    public ISynchronizeInvoke get_SynchronizingObject();
    public void set_SynchronizingObject(ISynchronizeInvoke value);
    public bool get_Transactional();
    public bool get_UseJournalQueue();
    public void set_UseJournalQueue(bool value);
    public IntPtr get_WriteHandle();
    public void add_PeekCompleted(PeekCompletedEventHandler value);
    public void remove_PeekCompleted(PeekCompletedEventHandler value);
    public void add_ReceiveCompleted(ReceiveCompletedEventHandler value);
    public void remove_ReceiveCompleted(ReceiveCompletedEventHandler value);
    public IAsyncResult BeginPeek();
    public IAsyncResult BeginPeek(TimeSpan timeout);
    public IAsyncResult BeginPeek(TimeSpan timeout, object stateObject);
    public IAsyncResult BeginPeek(TimeSpan timeout, object stateObject, AsyncCallback callback);
    public IAsyncResult BeginPeek(TimeSpan timeout, Cursor cursor, PeekAction action, object state, AsyncCallback callback);
    public IAsyncResult BeginReceive();
    public IAsyncResult BeginReceive(TimeSpan timeout);
    public IAsyncResult BeginReceive(TimeSpan timeout, object stateObject);
    public IAsyncResult BeginReceive(TimeSpan timeout, object stateObject, AsyncCallback callback);
    public IAsyncResult BeginReceive(TimeSpan timeout, Cursor cursor, object state, AsyncCallback callback);
    public static void ClearConnectionCache();
    public void Close();
    public static MessageQueue Create(string path);
    public static MessageQueue Create(string path, bool transactional);
    public Cursor CreateCursor();
    public static void Delete(string path);
    protected virtual void Dispose(bool disposing);
    public Message EndPeek(IAsyncResult asyncResult);
    public Message EndReceive(IAsyncResult asyncResult);
    public static bool Exists(string path);
    public Message[] GetAllMessages();
    [ObsoleteAttribute("This method returns a MessageEnumerator that implements RemoveCurrent family of methods incorrectly. Please use GetMessageEnumerator2 instead.")]
public sealed virtual IEnumerator GetEnumerator();
    public static Guid GetMachineId(string machineName);
    public static SecurityContext GetSecurityContext();
    public static MessageQueueEnumerator GetMessageQueueEnumerator();
    public static MessageQueueEnumerator GetMessageQueueEnumerator(MessageQueueCriteria criteria);
    [ObsoleteAttribute("This method returns a MessageEnumerator that implements RemoveCurrent family of methods incorrectly. Please use GetMessageEnumerator2 instead.")]
public MessageEnumerator GetMessageEnumerator();
    public MessageEnumerator GetMessageEnumerator2();
    public static MessageQueue[] GetPrivateQueuesByMachine(string machineName);
    public static MessageQueue[] GetPublicQueues();
    public static MessageQueue[] GetPublicQueues(MessageQueueCriteria criteria);
    public static MessageQueue[] GetPublicQueuesByCategory(Guid category);
    public static MessageQueue[] GetPublicQueuesByLabel(string label);
    public static MessageQueue[] GetPublicQueuesByMachine(string machineName);
    public Message Peek();
    public Message Peek(TimeSpan timeout);
    public Message Peek(TimeSpan timeout, Cursor cursor, PeekAction action);
    public Message PeekById(string id);
    public Message PeekById(string id, TimeSpan timeout);
    public Message PeekByCorrelationId(string correlationId);
    public Message PeekByCorrelationId(string correlationId, TimeSpan timeout);
    public void Purge();
    public Message Receive();
    public Message Receive(MessageQueueTransaction transaction);
    public Message Receive(MessageQueueTransactionType transactionType);
    public Message Receive(TimeSpan timeout);
    public Message Receive(TimeSpan timeout, Cursor cursor);
    public Message Receive(TimeSpan timeout, MessageQueueTransaction transaction);
    public Message Receive(TimeSpan timeout, MessageQueueTransactionType transactionType);
    public Message Receive(TimeSpan timeout, Cursor cursor, MessageQueueTransaction transaction);
    public Message Receive(TimeSpan timeout, Cursor cursor, MessageQueueTransactionType transactionType);
    public Message ReceiveById(string id);
    public Message ReceiveById(string id, MessageQueueTransaction transaction);
    public Message ReceiveById(string id, MessageQueueTransactionType transactionType);
    public Message ReceiveById(string id, TimeSpan timeout);
    public Message ReceiveById(string id, TimeSpan timeout, MessageQueueTransaction transaction);
    public Message ReceiveById(string id, TimeSpan timeout, MessageQueueTransactionType transactionType);
    public Message ReceiveByCorrelationId(string correlationId);
    public Message ReceiveByCorrelationId(string correlationId, MessageQueueTransaction transaction);
    public Message ReceiveByCorrelationId(string correlationId, MessageQueueTransactionType transactionType);
    public Message ReceiveByCorrelationId(string correlationId, TimeSpan timeout);
    public Message ReceiveByCorrelationId(string correlationId, TimeSpan timeout, MessageQueueTransaction transaction);
    public Message ReceiveByCorrelationId(string correlationId, TimeSpan timeout, MessageQueueTransactionType transactionType);
    public Message ReceiveByLookupId(long lookupId);
    public Message ReceiveByLookupId(MessageLookupAction action, long lookupId, MessageQueueTransactionType transactionType);
    public Message ReceiveByLookupId(MessageLookupAction action, long lookupId, MessageQueueTransaction transaction);
    public Message PeekByLookupId(long lookupId);
    public Message PeekByLookupId(MessageLookupAction action, long lookupId);
    public void Refresh();
    public void Send(object obj);
    public void Send(object obj, MessageQueueTransaction transaction);
    public void Send(object obj, MessageQueueTransactionType transactionType);
    public void Send(object obj, string label);
    public void Send(object obj, string label, MessageQueueTransaction transaction);
    public void Send(object obj, string label, MessageQueueTransactionType transactionType);
    public void ResetPermissions();
    public void SetPermissions(string user, MessageQueueAccessRights rights);
    public void SetPermissions(string user, MessageQueueAccessRights rights, AccessControlEntryType entryType);
    public void SetPermissions(MessageQueueAccessControlEntry ace);
    public void SetPermissions(AccessControlList dacl);
}
public class System.Messaging.MessageQueueAccessControlEntry : AccessControlEntry {
    public MessageQueueAccessRights MessageQueueAccessRights { get; public set; }
    public MessageQueueAccessControlEntry(Trustee trustee, MessageQueueAccessRights rights);
    public MessageQueueAccessControlEntry(Trustee trustee, MessageQueueAccessRights rights, AccessControlEntryType entryType);
    public MessageQueueAccessRights get_MessageQueueAccessRights();
    public void set_MessageQueueAccessRights(MessageQueueAccessRights value);
}
[FlagsAttribute]
public enum System.Messaging.MessageQueueAccessRights : Enum {
    public int value__;
    public static MessageQueueAccessRights DeleteMessage;
    public static MessageQueueAccessRights PeekMessage;
    public static MessageQueueAccessRights WriteMessage;
    public static MessageQueueAccessRights DeleteJournalMessage;
    public static MessageQueueAccessRights SetQueueProperties;
    public static MessageQueueAccessRights GetQueueProperties;
    public static MessageQueueAccessRights DeleteQueue;
    public static MessageQueueAccessRights GetQueuePermissions;
    public static MessageQueueAccessRights ChangeQueuePermissions;
    public static MessageQueueAccessRights TakeQueueOwnership;
    public static MessageQueueAccessRights ReceiveMessage;
    public static MessageQueueAccessRights ReceiveJournalMessage;
    public static MessageQueueAccessRights GenericRead;
    public static MessageQueueAccessRights GenericWrite;
    public static MessageQueueAccessRights FullControl;
}
public class System.Messaging.MessageQueueCriteria : object {
    public DateTime CreatedAfter { get; public set; }
    public DateTime CreatedBefore { get; public set; }
    public string Label { get; public set; }
    public string MachineName { get; public set; }
    public DateTime ModifiedAfter { get; public set; }
    public DateTime ModifiedBefore { get; public set; }
    public Guid Category { get; public set; }
    private static MessageQueueCriteria();
    public DateTime get_CreatedAfter();
    public void set_CreatedAfter(DateTime value);
    public DateTime get_CreatedBefore();
    public void set_CreatedBefore(DateTime value);
    public string get_Label();
    public void set_Label(string value);
    public string get_MachineName();
    public void set_MachineName(string value);
    public DateTime get_ModifiedAfter();
    public void set_ModifiedAfter(DateTime value);
    public DateTime get_ModifiedBefore();
    public void set_ModifiedBefore(DateTime value);
    public Guid get_Category();
    public void set_Category(Guid value);
    public void ClearAll();
}
public class System.Messaging.MessageQueueEnumerator : MarshalByRefObject {
    public MessageQueue Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public IntPtr LocatorHandle { get; }
    public MessageQueue get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public void Close();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public IntPtr get_LocatorHandle();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public enum System.Messaging.MessageQueueErrorCode : Enum {
    public int value__;
    public static MessageQueueErrorCode Base;
    public static MessageQueueErrorCode Generic;
    public static MessageQueueErrorCode Property;
    public static MessageQueueErrorCode QueueNotFound;
    public static MessageQueueErrorCode QueueExists;
    public static MessageQueueErrorCode InvalidParameter;
    public static MessageQueueErrorCode InvalidHandle;
    public static MessageQueueErrorCode OperationCanceled;
    public static MessageQueueErrorCode SharingViolation;
    public static MessageQueueErrorCode ServiceNotAvailable;
    public static MessageQueueErrorCode MachineNotFound;
    public static MessageQueueErrorCode IllegalSort;
    public static MessageQueueErrorCode IllegalUser;
    public static MessageQueueErrorCode NoDs;
    public static MessageQueueErrorCode IllegalQueuePathName;
    public static MessageQueueErrorCode IllegalPropertyValue;
    public static MessageQueueErrorCode IllegalPropertyVt;
    public static MessageQueueErrorCode BufferOverflow;
    public static MessageQueueErrorCode IOTimeout;
    public static MessageQueueErrorCode IllegalCursorAction;
    public static MessageQueueErrorCode MessageAlreadyReceived;
    public static MessageQueueErrorCode IllegalFormatName;
    public static MessageQueueErrorCode FormatNameBufferTooSmall;
    public static MessageQueueErrorCode UnsupportedFormatNameOperation;
    public static MessageQueueErrorCode IllegalSecurityDescriptor;
    public static MessageQueueErrorCode SenderIdBufferTooSmall;
    public static MessageQueueErrorCode SecurityDescriptorBufferTooSmall;
    public static MessageQueueErrorCode CannotImpersonateClient;
    public static MessageQueueErrorCode AccessDenied;
    public static MessageQueueErrorCode PrivilegeNotHeld;
    public static MessageQueueErrorCode InsufficientResources;
    public static MessageQueueErrorCode UserBufferTooSmall;
    public static MessageQueueErrorCode MessageStorageFailed;
    public static MessageQueueErrorCode SenderCertificateBufferTooSmall;
    public static MessageQueueErrorCode InvalidCertificate;
    public static MessageQueueErrorCode CorruptedInternalCertificate;
    public static MessageQueueErrorCode NoInternalUserCertificate;
    public static MessageQueueErrorCode CorruptedSecurityData;
    public static MessageQueueErrorCode CorruptedPersonalCertStore;
    public static MessageQueueErrorCode ComputerDoesNotSupportEncryption;
    public static MessageQueueErrorCode BadSecurityContext;
    public static MessageQueueErrorCode CouldNotGetUserSid;
    public static MessageQueueErrorCode CouldNotGetAccountInfo;
    public static MessageQueueErrorCode IllegalCriteriaColumns;
    public static MessageQueueErrorCode IllegalPropertyId;
    public static MessageQueueErrorCode IllegalRelation;
    public static MessageQueueErrorCode IllegalPropertySize;
    public static MessageQueueErrorCode IllegalRestrictionPropertyId;
    public static MessageQueueErrorCode IllegalQueueProperties;
    public static MessageQueueErrorCode PropertyNotAllowed;
    public static MessageQueueErrorCode InsufficientProperties;
    public static MessageQueueErrorCode MachineExists;
    public static MessageQueueErrorCode IllegalMessageProperties;
    public static MessageQueueErrorCode DsIsFull;
    public static MessageQueueErrorCode DsError;
    public static MessageQueueErrorCode InvalidOwner;
    public static MessageQueueErrorCode UnsupportedAccessMode;
    public static MessageQueueErrorCode ResultBufferTooSmall;
    public static MessageQueueErrorCode DeleteConnectedNetworkInUse;
    public static MessageQueueErrorCode NoResponseFromObjectServer;
    public static MessageQueueErrorCode ObjectServerNotAvailable;
    public static MessageQueueErrorCode QueueNotAvailable;
    public static MessageQueueErrorCode DtcConnect;
    public static MessageQueueErrorCode TransactionImport;
    public static MessageQueueErrorCode TransactionUsage;
    public static MessageQueueErrorCode TransactionSequence;
    public static MessageQueueErrorCode MissingConnectorType;
    public static MessageQueueErrorCode StaleHandle;
    public static MessageQueueErrorCode TransactionEnlist;
    public static MessageQueueErrorCode QueueDeleted;
    public static MessageQueueErrorCode IllegalContext;
    public static MessageQueueErrorCode IllegalSortPropertyId;
    public static MessageQueueErrorCode LabelBufferTooSmall;
    public static MessageQueueErrorCode MqisServerEmpty;
    public static MessageQueueErrorCode MqisReadOnlyMode;
    public static MessageQueueErrorCode SymmetricKeyBufferTooSmall;
    public static MessageQueueErrorCode SignatureBufferTooSmall;
    public static MessageQueueErrorCode ProviderNameBufferTooSmall;
    public static MessageQueueErrorCode IllegalOperation;
    public static MessageQueueErrorCode WriteNotAllowed;
    public static MessageQueueErrorCode WksCantServeClient;
    public static MessageQueueErrorCode DependentClientLicenseOverflow;
    public static MessageQueueErrorCode CorruptedQueueWasDeleted;
    public static MessageQueueErrorCode RemoteMachineNotAvailable;
    public static MessageQueueErrorCode UnsupportedOperation;
    public static MessageQueueErrorCode EncryptionProviderNotSupported;
    public static MessageQueueErrorCode CannotSetCryptographicSecurityDescriptor;
    public static MessageQueueErrorCode CertificateNotProvided;
    public static MessageQueueErrorCode QDnsPropertyNotSupported;
    public static MessageQueueErrorCode CannotCreateCertificateStore;
    public static MessageQueueErrorCode CannotOpenCertificateStore;
    public static MessageQueueErrorCode IllegalEnterpriseOperation;
    public static MessageQueueErrorCode CannotGrantAddGuid;
    public static MessageQueueErrorCode CannotLoadMsmqOcm;
    public static MessageQueueErrorCode NoEntryPointMsmqOcm;
    public static MessageQueueErrorCode NoMsmqServersOnDc;
    public static MessageQueueErrorCode CannotJoinDomain;
    public static MessageQueueErrorCode CannotCreateOnGlobalCatalog;
    public static MessageQueueErrorCode GuidNotMatching;
    public static MessageQueueErrorCode PublicKeyNotFound;
    public static MessageQueueErrorCode PublicKeyDoesNotExist;
    public static MessageQueueErrorCode IllegalPrivateProperties;
    public static MessageQueueErrorCode NoGlobalCatalogInDomain;
    public static MessageQueueErrorCode NoMsmqServersOnGlobalCatalog;
    public static MessageQueueErrorCode CannotGetDistinguishedName;
    public static MessageQueueErrorCode CannotHashDataEx;
    public static MessageQueueErrorCode CannotSignDataEx;
    public static MessageQueueErrorCode CannotCreateHashEx;
    public static MessageQueueErrorCode FailVerifySignatureEx;
    public static MessageQueueErrorCode MessageNotFound;
}
public class System.Messaging.MessageQueueException : ExternalException {
    public MessageQueueErrorCode MessageQueueErrorCode { get; }
    public string Message { get; }
    protected MessageQueueException(SerializationInfo info, StreamingContext context);
    public MessageQueueErrorCode get_MessageQueueErrorCode();
    public virtual string get_Message();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Messaging.MessageQueueInstaller : ComponentInstaller {
    [DefaultValueAttribute("False")]
public bool Authenticate { get; public set; }
    [DefaultValueAttribute("0")]
public short BasePriority { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.GuidConverter, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public Guid Category { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public EncryptionRequired EncryptionRequired { get; public set; }
    [DefaultValueAttribute("")]
public string Label { get; public set; }
    [TypeConverterAttribute("System.Messaging.Design.SizeConverter")]
public long MaximumJournalSize { get; public set; }
    [TypeConverterAttribute("System.Messaging.Design.SizeConverter")]
public long MaximumQueueSize { get; public set; }
    [DefaultValueAttribute("")]
public string MulticastAddress { get; public set; }
    [EditorAttribute("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string Path { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public AccessControlList Permissions { get; public set; }
    [DefaultValueAttribute("False")]
public bool Transactional { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public UninstallAction UninstallAction { get; public set; }
    [DefaultValueAttribute("False")]
public bool UseJournalQueue { get; public set; }
    public MessageQueueInstaller(MessageQueue componentToCopy);
    public bool get_Authenticate();
    public void set_Authenticate(bool value);
    public short get_BasePriority();
    public void set_BasePriority(short value);
    public Guid get_Category();
    public void set_Category(Guid value);
    public EncryptionRequired get_EncryptionRequired();
    public void set_EncryptionRequired(EncryptionRequired value);
    public string get_Label();
    public void set_Label(string value);
    public long get_MaximumJournalSize();
    public void set_MaximumJournalSize(long value);
    public long get_MaximumQueueSize();
    public void set_MaximumQueueSize(long value);
    public string get_MulticastAddress();
    public void set_MulticastAddress(string value);
    public string get_Path();
    public void set_Path(string value);
    public AccessControlList get_Permissions();
    public void set_Permissions(AccessControlList value);
    public bool get_Transactional();
    public void set_Transactional(bool value);
    public UninstallAction get_UninstallAction();
    public void set_UninstallAction(UninstallAction value);
    public bool get_UseJournalQueue();
    public void set_UseJournalQueue(bool value);
    public virtual void Commit(IDictionary savedState);
    public virtual void CopyFromComponent(IComponent component);
    public virtual void Install(IDictionary stateSaver);
    public virtual bool IsEquivalentInstaller(ComponentInstaller otherInstaller);
    public virtual void Rollback(IDictionary savedState);
    public virtual void Uninstall(IDictionary savedState);
}
public class System.Messaging.MessageQueuePermission : CodeAccessPermission {
    public MessageQueuePermissionEntryCollection PermissionEntries { get; }
    public MessageQueuePermission(PermissionState state);
    public MessageQueuePermission(MessageQueuePermissionAccess permissionAccess, string path);
    public MessageQueuePermission(MessageQueuePermissionAccess permissionAccess, string machineName, string label, string category);
    public MessageQueuePermission(MessageQueuePermissionEntry[] permissionAccessEntries);
    public MessageQueuePermissionEntryCollection get_PermissionEntries();
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement securityElement);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[FlagsAttribute]
public enum System.Messaging.MessageQueuePermissionAccess : Enum {
    public int value__;
    public static MessageQueuePermissionAccess None;
    public static MessageQueuePermissionAccess Browse;
    public static MessageQueuePermissionAccess Send;
    public static MessageQueuePermissionAccess Peek;
    public static MessageQueuePermissionAccess Receive;
    public static MessageQueuePermissionAccess Administer;
}
[AttributeUsageAttribute("621")]
public class System.Messaging.MessageQueuePermissionAttribute : CodeAccessSecurityAttribute {
    public string Category { get; public set; }
    public string Label { get; public set; }
    public string MachineName { get; public set; }
    public string Path { get; public set; }
    public MessageQueuePermissionAccess PermissionAccess { get; public set; }
    public MessageQueuePermissionAttribute(SecurityAction action);
    public string get_Category();
    public void set_Category(string value);
    public string get_Label();
    public void set_Label(string value);
    public string get_MachineName();
    public void set_MachineName(string value);
    public string get_Path();
    public void set_Path(string value);
    public MessageQueuePermissionAccess get_PermissionAccess();
    public void set_PermissionAccess(MessageQueuePermissionAccess value);
    public virtual IPermission CreatePermission();
}
public class System.Messaging.MessageQueuePermissionEntry : object {
    public string Category { get; }
    public string Label { get; }
    public string MachineName { get; }
    public string Path { get; }
    public MessageQueuePermissionAccess PermissionAccess { get; }
    public MessageQueuePermissionEntry(MessageQueuePermissionAccess permissionAccess, string path);
    public MessageQueuePermissionEntry(MessageQueuePermissionAccess permissionAccess, string machineName, string label, string category);
    public string get_Category();
    public string get_Label();
    public string get_MachineName();
    public string get_Path();
    public MessageQueuePermissionAccess get_PermissionAccess();
}
[DefaultMemberAttribute("Item")]
public class System.Messaging.MessageQueuePermissionEntryCollection : CollectionBase {
    public MessageQueuePermissionEntry Item { get; public set; }
    public MessageQueuePermissionEntry get_Item(int index);
    public void set_Item(int index, MessageQueuePermissionEntry value);
    public int Add(MessageQueuePermissionEntry value);
    public void AddRange(MessageQueuePermissionEntry[] value);
    public void AddRange(MessageQueuePermissionEntryCollection value);
    public bool Contains(MessageQueuePermissionEntry value);
    public void CopyTo(MessageQueuePermissionEntry[] array, int index);
    public int IndexOf(MessageQueuePermissionEntry value);
    public void Insert(int index, MessageQueuePermissionEntry value);
    public void Remove(MessageQueuePermissionEntry value);
    protected virtual void OnClear();
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnRemove(int index, object value);
    protected virtual void OnSet(int index, object oldValue, object newValue);
}
public class System.Messaging.MessageQueueTransaction : object {
    public MessageQueueTransactionStatus Status { get; }
    public MessageQueueTransactionStatus get_Status();
    public void Abort();
    public void Begin();
    public void Commit();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public enum System.Messaging.MessageQueueTransactionStatus : Enum {
    public int value__;
    public static MessageQueueTransactionStatus Aborted;
    public static MessageQueueTransactionStatus Committed;
    public static MessageQueueTransactionStatus Initialized;
    public static MessageQueueTransactionStatus Pending;
}
public enum System.Messaging.MessageQueueTransactionType : Enum {
    public int value__;
    public static MessageQueueTransactionType None;
    public static MessageQueueTransactionType Automatic;
    public static MessageQueueTransactionType Single;
}
public enum System.Messaging.MessageType : Enum {
    public int value__;
    public static MessageType Acknowledgment;
    public static MessageType Normal;
    public static MessageType Report;
}
[AttributeUsageAttribute("32767")]
public class System.Messaging.MessagingDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public MessagingDescriptionAttribute(string description);
    public virtual string get_Description();
}
public enum System.Messaging.PeekAction : Enum {
    public int value__;
    public static PeekAction Current;
    public static PeekAction Next;
}
public class System.Messaging.PeekCompletedEventArgs : EventArgs {
    public IAsyncResult AsyncResult { get; public set; }
    public Message Message { get; }
    public IAsyncResult get_AsyncResult();
    public void set_AsyncResult(IAsyncResult value);
    public Message get_Message();
}
public class System.Messaging.PeekCompletedEventHandler : MulticastDelegate {
    public PeekCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PeekCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PeekCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Messaging.QueueAccessMode : Enum {
    public int value__;
    public static QueueAccessMode Send;
    public static QueueAccessMode Peek;
    public static QueueAccessMode Receive;
    public static QueueAccessMode PeekAndAdmin;
    public static QueueAccessMode ReceiveAndAdmin;
    public static QueueAccessMode SendAndReceive;
}
public class System.Messaging.ReceiveCompletedEventArgs : EventArgs {
    public IAsyncResult AsyncResult { get; public set; }
    public Message Message { get; }
    public IAsyncResult get_AsyncResult();
    public void set_AsyncResult(IAsyncResult value);
    public Message get_Message();
}
public class System.Messaging.ReceiveCompletedEventHandler : MulticastDelegate {
    public ReceiveCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ReceiveCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ReceiveCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Messaging.SecurityContext : object {
    public sealed virtual void Dispose();
}
[FlagsAttribute]
public enum System.Messaging.StandardAccessRights : Enum {
    public int value__;
    public static StandardAccessRights Delete;
    public static StandardAccessRights ReadSecurity;
    public static StandardAccessRights WriteSecurity;
    public static StandardAccessRights Synchronize;
    public static StandardAccessRights ModifyOwner;
    public static StandardAccessRights Read;
    public static StandardAccessRights Write;
    public static StandardAccessRights Execute;
    public static StandardAccessRights Required;
    public static StandardAccessRights All;
    public static StandardAccessRights None;
}
public class System.Messaging.Trustee : object {
    public string Name { get; public set; }
    public string SystemName { get; public set; }
    public TrusteeType TrusteeType { get; public set; }
    public Trustee(string name);
    public Trustee(string name, string systemName);
    public Trustee(string name, string systemName, TrusteeType trusteeType);
    public string get_Name();
    public void set_Name(string value);
    public string get_SystemName();
    public void set_SystemName(string value);
    public TrusteeType get_TrusteeType();
    public void set_TrusteeType(TrusteeType value);
}
public enum System.Messaging.TrusteeType : Enum {
    public int value__;
    public static TrusteeType Unknown;
    public static TrusteeType User;
    public static TrusteeType Group;
    public static TrusteeType Domain;
    public static TrusteeType Alias;
    public static TrusteeType Computer;
}
public class System.Messaging.XmlMessageFormatter : object {
    [MessagingDescriptionAttribute("XmlMsgTargetTypeNames")]
public String[] TargetTypeNames { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[MessagingDescriptionAttribute("XmlMsgTargetTypes")]
public Type[] TargetTypes { get; public set; }
    public XmlMessageFormatter(String[] targetTypeNames);
    public XmlMessageFormatter(Type[] targetTypes);
    public String[] get_TargetTypeNames();
    public void set_TargetTypeNames(String[] value);
    public Type[] get_TargetTypes();
    public void set_TargetTypes(Type[] value);
    public sealed virtual bool CanRead(Message message);
    public sealed virtual object Clone();
    public sealed virtual object Read(Message message);
    public sealed virtual void Write(Message message, object obj);
}
