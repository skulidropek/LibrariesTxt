public abstract class System.Runtime.Caching.CacheEntryChangeMonitor : ChangeMonitor {
    public ReadOnlyCollection`1<string> CacheKeys { get; }
    public DateTimeOffset LastModified { get; }
    public string RegionName { get; }
    public abstract virtual ReadOnlyCollection`1<string> get_CacheKeys();
    public abstract virtual DateTimeOffset get_LastModified();
    public abstract virtual string get_RegionName();
}
public class System.Runtime.Caching.CacheEntryRemovedArguments : object {
    public CacheItem CacheItem { get; }
    public CacheEntryRemovedReason RemovedReason { get; }
    public ObjectCache Source { get; }
    public CacheEntryRemovedArguments(ObjectCache source, CacheEntryRemovedReason reason, CacheItem cacheItem);
    public CacheItem get_CacheItem();
    public CacheEntryRemovedReason get_RemovedReason();
    public ObjectCache get_Source();
}
public class System.Runtime.Caching.CacheEntryRemovedCallback : MulticastDelegate {
    public CacheEntryRemovedCallback(object object, IntPtr method);
    public virtual void Invoke(CacheEntryRemovedArguments arguments);
    public virtual IAsyncResult BeginInvoke(CacheEntryRemovedArguments arguments, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Runtime.Caching.CacheEntryRemovedReason : Enum {
    public int value__;
    public static CacheEntryRemovedReason Removed;
    public static CacheEntryRemovedReason Expired;
    public static CacheEntryRemovedReason Evicted;
    public static CacheEntryRemovedReason ChangeMonitorChanged;
    public static CacheEntryRemovedReason CacheSpecificEviction;
}
public class System.Runtime.Caching.CacheEntryUpdateArguments : object {
    public string Key { get; }
    public CacheEntryRemovedReason RemovedReason { get; }
    public string RegionName { get; }
    public ObjectCache Source { get; }
    public CacheItem UpdatedCacheItem { get; public set; }
    public CacheItemPolicy UpdatedCacheItemPolicy { get; public set; }
    public CacheEntryUpdateArguments(ObjectCache source, CacheEntryRemovedReason reason, string key, string regionName);
    public string get_Key();
    public CacheEntryRemovedReason get_RemovedReason();
    public string get_RegionName();
    public ObjectCache get_Source();
    public CacheItem get_UpdatedCacheItem();
    public void set_UpdatedCacheItem(CacheItem value);
    public CacheItemPolicy get_UpdatedCacheItemPolicy();
    public void set_UpdatedCacheItemPolicy(CacheItemPolicy value);
}
public class System.Runtime.Caching.CacheEntryUpdateCallback : MulticastDelegate {
    public CacheEntryUpdateCallback(object object, IntPtr method);
    public virtual void Invoke(CacheEntryUpdateArguments arguments);
    public virtual IAsyncResult BeginInvoke(CacheEntryUpdateArguments arguments, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Runtime.Caching.CacheItem : object {
    public string Key { get; public set; }
    public object Value { get; public set; }
    public string RegionName { get; public set; }
    public CacheItem(string key);
    public CacheItem(string key, object value);
    public CacheItem(string key, object value, string regionName);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public string get_RegionName();
    [CompilerGeneratedAttribute]
public void set_RegionName(string value);
}
public class System.Runtime.Caching.CacheItemPolicy : object {
    public DateTimeOffset AbsoluteExpiration { get; public set; }
    public Collection`1<ChangeMonitor> ChangeMonitors { get; }
    public CacheItemPriority Priority { get; public set; }
    public CacheEntryRemovedCallback RemovedCallback { get; public set; }
    public TimeSpan SlidingExpiration { get; public set; }
    public CacheEntryUpdateCallback UpdateCallback { get; public set; }
    public DateTimeOffset get_AbsoluteExpiration();
    public void set_AbsoluteExpiration(DateTimeOffset value);
    public Collection`1<ChangeMonitor> get_ChangeMonitors();
    public CacheItemPriority get_Priority();
    public void set_Priority(CacheItemPriority value);
    public CacheEntryRemovedCallback get_RemovedCallback();
    public void set_RemovedCallback(CacheEntryRemovedCallback value);
    public TimeSpan get_SlidingExpiration();
    public void set_SlidingExpiration(TimeSpan value);
    public CacheEntryUpdateCallback get_UpdateCallback();
    public void set_UpdateCallback(CacheEntryUpdateCallback value);
}
public enum System.Runtime.Caching.CacheItemPriority : Enum {
    public int value__;
    public static CacheItemPriority Default;
    public static CacheItemPriority NotRemovable;
}
public abstract class System.Runtime.Caching.ChangeMonitor : object {
    public bool HasChanged { get; }
    public bool IsDisposed { get; }
    public string UniqueId { get; }
    private static ChangeMonitor();
    protected abstract virtual void Dispose(bool disposing);
    protected void InitializationComplete();
    protected void OnChanged(object state);
    public bool get_HasChanged();
    public bool get_IsDisposed();
    public abstract virtual string get_UniqueId();
    public sealed virtual void Dispose();
    public void NotifyOnChanged(OnChangedCallback onChangedCallback);
}
public class System.Runtime.Caching.Configuration.CachingSectionGroup : ConfigurationSectionGroup {
    [ConfigurationPropertyAttribute("memoryCache")]
public MemoryCacheSection MemoryCaches { get; }
    public MemoryCacheSection get_MemoryCaches();
}
public class System.Runtime.Caching.Configuration.MemoryCacheElement : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
[TypeConverterAttribute("System.Configuration.WhiteSpaceTrimStringConverter")]
[StringValidatorAttribute]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("physicalMemoryLimitPercentage")]
[IntegerValidatorAttribute]
public int PhysicalMemoryLimitPercentage { get; public set; }
    [ConfigurationPropertyAttribute("cacheMemoryLimitMegabytes")]
[IntegerValidatorAttribute]
public int CacheMemoryLimitMegabytes { get; public set; }
    [ConfigurationPropertyAttribute("pollingInterval")]
[TypeConverterAttribute("System.Configuration.InfiniteTimeSpanConverter")]
public TimeSpan PollingInterval { get; public set; }
    private static MemoryCacheElement();
    public MemoryCacheElement(string name);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public void set_Name(string value);
    public int get_PhysicalMemoryLimitPercentage();
    public void set_PhysicalMemoryLimitPercentage(int value);
    public int get_CacheMemoryLimitMegabytes();
    public void set_CacheMemoryLimitMegabytes(int value);
    public TimeSpan get_PollingInterval();
    public void set_PollingInterval(TimeSpan value);
}
public class System.Runtime.Caching.Configuration.MemoryCacheSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("namedCaches")]
public MemoryCacheSettingsCollection NamedCaches { get; }
    private static MemoryCacheSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public MemoryCacheSettingsCollection get_NamedCaches();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Runtime.Caching.Configuration.MemoryCacheElement")]
public class System.Runtime.Caching.Configuration.MemoryCacheSettingsCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public MemoryCacheElement Item { get; public set; }
    public MemoryCacheElement Item { get; }
    public ConfigurationElementCollectionType CollectionType { get; }
    private static MemoryCacheSettingsCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public MemoryCacheElement get_Item(int index);
    public void set_Item(int index, MemoryCacheElement value);
    public MemoryCacheElement get_Item(string key);
    public virtual ConfigurationElementCollectionType get_CollectionType();
    public int IndexOf(MemoryCacheElement cache);
    public void Add(MemoryCacheElement cache);
    public void Remove(MemoryCacheElement cache);
    public void RemoveAt(int index);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual ConfigurationElement CreateNewElement(string elementName);
    protected virtual object GetElementKey(ConfigurationElement element);
}
[FlagsAttribute]
public enum System.Runtime.Caching.DefaultCacheCapabilities : Enum {
    public int value__;
    public static DefaultCacheCapabilities None;
    public static DefaultCacheCapabilities InMemoryProvider;
    public static DefaultCacheCapabilities OutOfProcessProvider;
    public static DefaultCacheCapabilities CacheEntryChangeMonitors;
    public static DefaultCacheCapabilities AbsoluteExpirations;
    public static DefaultCacheCapabilities SlidingExpirations;
    public static DefaultCacheCapabilities CacheEntryUpdateCallback;
    public static DefaultCacheCapabilities CacheEntryRemovedCallback;
    public static DefaultCacheCapabilities CacheRegions;
}
public abstract class System.Runtime.Caching.FileChangeMonitor : ChangeMonitor {
    public ReadOnlyCollection`1<string> FilePaths { get; }
    public DateTimeOffset LastModified { get; }
    public abstract virtual ReadOnlyCollection`1<string> get_FilePaths();
    public abstract virtual DateTimeOffset get_LastModified();
}
public class System.Runtime.Caching.HostFileChangeMonitor : FileChangeMonitor {
    public ReadOnlyCollection`1<string> FilePaths { get; }
    public string UniqueId { get; }
    public DateTimeOffset LastModified { get; }
    public HostFileChangeMonitor(IList`1<string> filePaths);
    protected virtual void Dispose(bool disposing);
    public virtual ReadOnlyCollection`1<string> get_FilePaths();
    public virtual string get_UniqueId();
    public virtual DateTimeOffset get_LastModified();
}
public interface System.Runtime.Caching.Hosting.IApplicationIdentifier {
    public abstract virtual string GetApplicationId();
}
public interface System.Runtime.Caching.Hosting.IFileChangeNotificationSystem {
    public abstract virtual void StartMonitoring(string filePath, OnChangedCallback onChangedCallback, Object& state, DateTimeOffset& lastWriteTime, Int64& fileSize);
    public abstract virtual void StopMonitoring(string filePath, object state);
}
public interface System.Runtime.Caching.Hosting.IMemoryCacheManager {
    public abstract virtual void UpdateCacheSize(long size, MemoryCache cache);
    public abstract virtual void ReleaseCache(MemoryCache cache);
}
[DefaultMemberAttribute("Item")]
public class System.Runtime.Caching.MemoryCache : ObjectCache {
    public long CacheMemoryLimit { get; }
    public static MemoryCache Default { get; }
    public DefaultCacheCapabilities DefaultCacheCapabilities { get; }
    public string Name { get; }
    public long PhysicalMemoryLimit { get; }
    public TimeSpan PollingInterval { get; }
    public object Item { get; public set; }
    public MemoryCache(string name, NameValueCollection config);
    public MemoryCache(string name, NameValueCollection config, bool ignoreConfigSection);
    private static MemoryCache();
    public long get_CacheMemoryLimit();
    public static MemoryCache get_Default();
    public virtual DefaultCacheCapabilities get_DefaultCacheCapabilities();
    public virtual string get_Name();
    public long get_PhysicalMemoryLimit();
    public TimeSpan get_PollingInterval();
    public virtual CacheEntryChangeMonitor CreateCacheEntryChangeMonitor(IEnumerable`1<string> keys, string regionName);
    public sealed virtual void Dispose();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    public long Trim(int percent);
    public virtual object get_Item(string key);
    public virtual void set_Item(string key, object value);
    public virtual bool Contains(string key, string regionName);
    public virtual bool Add(CacheItem item, CacheItemPolicy policy);
    public virtual object AddOrGetExisting(string key, object value, DateTimeOffset absoluteExpiration, string regionName);
    public virtual CacheItem AddOrGetExisting(CacheItem item, CacheItemPolicy policy);
    public virtual object AddOrGetExisting(string key, object value, CacheItemPolicy policy, string regionName);
    public virtual object Get(string key, string regionName);
    public virtual CacheItem GetCacheItem(string key, string regionName);
    public virtual void Set(string key, object value, DateTimeOffset absoluteExpiration, string regionName);
    public virtual void Set(CacheItem item, CacheItemPolicy policy);
    public virtual void Set(string key, object value, CacheItemPolicy policy, string regionName);
    public virtual object Remove(string key, string regionName);
    public object Remove(string key, CacheEntryRemovedReason reason, string regionName);
    public virtual long GetCount(string regionName);
    public long GetLastSize(string regionName);
    public virtual IDictionary`2<string, object> GetValues(IEnumerable`1<string> keys, string regionName);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Runtime.Caching.ObjectCache : object {
    public static DateTimeOffset InfiniteAbsoluteExpiration;
    public static TimeSpan NoSlidingExpiration;
    public static IServiceProvider Host { get; public set; }
    public DefaultCacheCapabilities DefaultCacheCapabilities { get; }
    public string Name { get; }
    public object Item { get; public set; }
    private static ObjectCache();
    [SecurityCriticalAttribute]
public static IServiceProvider get_Host();
    [SecurityCriticalAttribute]
public static void set_Host(IServiceProvider value);
    public abstract virtual DefaultCacheCapabilities get_DefaultCacheCapabilities();
    public abstract virtual string get_Name();
    public abstract virtual object get_Item(string key);
    public abstract virtual void set_Item(string key, object value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public abstract virtual CacheEntryChangeMonitor CreateCacheEntryChangeMonitor(IEnumerable`1<string> keys, string regionName);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    protected abstract virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    public abstract virtual bool Contains(string key, string regionName);
    public virtual bool Add(string key, object value, DateTimeOffset absoluteExpiration, string regionName);
    public virtual bool Add(CacheItem item, CacheItemPolicy policy);
    public virtual bool Add(string key, object value, CacheItemPolicy policy, string regionName);
    public abstract virtual object AddOrGetExisting(string key, object value, DateTimeOffset absoluteExpiration, string regionName);
    public abstract virtual CacheItem AddOrGetExisting(CacheItem value, CacheItemPolicy policy);
    public abstract virtual object AddOrGetExisting(string key, object value, CacheItemPolicy policy, string regionName);
    public abstract virtual object Get(string key, string regionName);
    public abstract virtual CacheItem GetCacheItem(string key, string regionName);
    public abstract virtual void Set(string key, object value, DateTimeOffset absoluteExpiration, string regionName);
    public abstract virtual void Set(CacheItem item, CacheItemPolicy policy);
    public abstract virtual void Set(string key, object value, CacheItemPolicy policy, string regionName);
    public abstract virtual IDictionary`2<string, object> GetValues(IEnumerable`1<string> keys, string regionName);
    public virtual IDictionary`2<string, object> GetValues(string regionName, String[] keys);
    public abstract virtual object Remove(string key, string regionName);
    public abstract virtual long GetCount(string regionName);
}
public class System.Runtime.Caching.OnChangedCallback : MulticastDelegate {
    public OnChangedCallback(object object, IntPtr method);
    public virtual void Invoke(object state);
    public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Runtime.Caching.SqlChangeMonitor : ChangeMonitor {
    public string UniqueId { get; }
    public SqlChangeMonitor(SqlDependency dependency);
    public virtual string get_UniqueId();
    protected virtual void Dispose(bool disposing);
}
