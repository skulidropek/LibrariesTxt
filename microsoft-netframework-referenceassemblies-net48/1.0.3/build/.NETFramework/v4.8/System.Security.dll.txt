public class System.Security.Cryptography.CryptographicAttributeObject : object {
    public Oid Oid { get; }
    public AsnEncodedDataCollection Values { get; }
    public CryptographicAttributeObject(Oid oid);
    public CryptographicAttributeObject(Oid oid, AsnEncodedDataCollection values);
    public Oid get_Oid();
    public AsnEncodedDataCollection get_Values();
}
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.CryptographicAttributeObjectCollection : object {
    public CryptographicAttributeObject Item { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public CryptographicAttributeObjectCollection(CryptographicAttributeObject attribute);
    public int Add(AsnEncodedData asnEncodedData);
    public int Add(CryptographicAttributeObject attribute);
    public void Remove(CryptographicAttributeObject attribute);
    public CryptographicAttributeObject get_Item(int index);
    public sealed virtual int get_Count();
    public CryptographicAttributeObjectEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public void CopyTo(CryptographicAttributeObject[] array, int index);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
}
public class System.Security.Cryptography.CryptographicAttributeObjectEnumerator : object {
    public CryptographicAttributeObject Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public CryptographicAttributeObject get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public enum System.Security.Cryptography.DataProtectionScope : Enum {
    public int value__;
    public static DataProtectionScope CurrentUser;
    public static DataProtectionScope LocalMachine;
}
public abstract class System.Security.Cryptography.DataProtector : object {
    protected string ApplicationName { get; }
    protected bool PrependHashedPurposeToPlaintext { get; }
    protected string PrimaryPurpose { get; }
    protected IEnumerable`1<string> SpecificPurposes { get; }
    protected DataProtector(string applicationName, string primaryPurpose, String[] specificPurposes);
    protected string get_ApplicationName();
    protected virtual bool get_PrependHashedPurposeToPlaintext();
    protected virtual Byte[] GetHashedPurpose();
    public abstract virtual bool IsReprotectRequired(Byte[] encryptedData);
    protected string get_PrimaryPurpose();
    protected IEnumerable`1<string> get_SpecificPurposes();
    public static DataProtector Create(string providerClass, string applicationName, string primaryPurpose, String[] specificPurposes);
    public Byte[] Protect(Byte[] userData);
    protected abstract virtual Byte[] ProviderProtect(Byte[] userData);
    protected abstract virtual Byte[] ProviderUnprotect(Byte[] encryptedData);
    public Byte[] Unprotect(Byte[] encryptedData);
}
public class System.Security.Cryptography.DpapiDataProtector : DataProtector {
    public DataProtectionScope Scope { get; public set; }
    protected bool PrependHashedPurposeToPlaintext { get; }
    [SecuritySafeCriticalAttribute]
public DpapiDataProtector(string appName, string primaryPurpose, String[] specificPurpose);
    [CompilerGeneratedAttribute]
public DataProtectionScope get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(DataProtectionScope value);
    protected virtual bool get_PrependHashedPurposeToPlaintext();
    [SecuritySafeCriticalAttribute]
protected virtual Byte[] ProviderProtect(Byte[] userData);
    [SecuritySafeCriticalAttribute]
protected virtual Byte[] ProviderUnprotect(Byte[] encryptedData);
    public virtual bool IsReprotectRequired(Byte[] encryptedData);
}
public enum System.Security.Cryptography.MemoryProtectionScope : Enum {
    public int value__;
    public static MemoryProtectionScope SameProcess;
    public static MemoryProtectionScope CrossProcess;
    public static MemoryProtectionScope SameLogon;
}
public class System.Security.Cryptography.Pkcs.AlgorithmIdentifier : object {
    public Oid Oid { get; public set; }
    public int KeyLength { get; public set; }
    public Byte[] Parameters { get; public set; }
    public AlgorithmIdentifier(Oid oid);
    public AlgorithmIdentifier(Oid oid, int keyLength);
    public Oid get_Oid();
    public void set_Oid(Oid value);
    public int get_KeyLength();
    public void set_KeyLength(int value);
    public Byte[] get_Parameters();
    public void set_Parameters(Byte[] value);
}
public class System.Security.Cryptography.Pkcs.CmsRecipient : object {
    public SubjectIdentifierType RecipientIdentifierType { get; }
    public X509Certificate2 Certificate { get; }
    public CmsRecipient(X509Certificate2 certificate);
    public CmsRecipient(SubjectIdentifierType recipientIdentifierType, X509Certificate2 certificate);
    public SubjectIdentifierType get_RecipientIdentifierType();
    public X509Certificate2 get_Certificate();
}
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.Pkcs.CmsRecipientCollection : object {
    public CmsRecipient Item { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public CmsRecipientCollection(CmsRecipient recipient);
    public CmsRecipientCollection(SubjectIdentifierType recipientIdentifierType, X509Certificate2Collection certificates);
    public CmsRecipient get_Item(int index);
    public sealed virtual int get_Count();
    public int Add(CmsRecipient recipient);
    public void Remove(CmsRecipient recipient);
    public CmsRecipientEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(CmsRecipient[] array, int index);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
}
public class System.Security.Cryptography.Pkcs.CmsRecipientEnumerator : object {
    public CmsRecipient Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public CmsRecipient get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public class System.Security.Cryptography.Pkcs.CmsSigner : object {
    public SubjectIdentifierType SignerIdentifierType { get; public set; }
    public X509Certificate2 Certificate { get; public set; }
    public Oid DigestAlgorithm { get; public set; }
    public CryptographicAttributeObjectCollection SignedAttributes { get; }
    public CryptographicAttributeObjectCollection UnsignedAttributes { get; }
    public X509Certificate2Collection Certificates { get; }
    public X509IncludeOption IncludeOption { get; public set; }
    public CmsSigner(SubjectIdentifierType signerIdentifierType);
    public CmsSigner(X509Certificate2 certificate);
    [SecuritySafeCriticalAttribute]
public CmsSigner(CspParameters parameters);
    public CmsSigner(SubjectIdentifierType signerIdentifierType, X509Certificate2 certificate);
    public SubjectIdentifierType get_SignerIdentifierType();
    public void set_SignerIdentifierType(SubjectIdentifierType value);
    public X509Certificate2 get_Certificate();
    public void set_Certificate(X509Certificate2 value);
    public Oid get_DigestAlgorithm();
    public void set_DigestAlgorithm(Oid value);
    public CryptographicAttributeObjectCollection get_SignedAttributes();
    public CryptographicAttributeObjectCollection get_UnsignedAttributes();
    public X509Certificate2Collection get_Certificates();
    public X509IncludeOption get_IncludeOption();
    public void set_IncludeOption(X509IncludeOption value);
}
public class System.Security.Cryptography.Pkcs.ContentInfo : object {
    public Oid ContentType { get; }
    public Byte[] Content { get; }
    public ContentInfo(Byte[] content);
    public ContentInfo(Oid contentType, Byte[] content);
    public Oid get_ContentType();
    public Byte[] get_Content();
    [SecuritySafeCriticalAttribute]
protected virtual override void Finalize();
    [SecuritySafeCriticalAttribute]
public static Oid GetContentType(Byte[] encodedMessage);
}
public class System.Security.Cryptography.Pkcs.EnvelopedCms : object {
    public int Version { get; }
    public ContentInfo ContentInfo { get; }
    public AlgorithmIdentifier ContentEncryptionAlgorithm { get; }
    public X509Certificate2Collection Certificates { get; }
    public CryptographicAttributeObjectCollection UnprotectedAttributes { get; }
    public RecipientInfoCollection RecipientInfos { get; }
    public EnvelopedCms(ContentInfo contentInfo);
    public EnvelopedCms(SubjectIdentifierType recipientIdentifierType, ContentInfo contentInfo);
    public EnvelopedCms(ContentInfo contentInfo, AlgorithmIdentifier encryptionAlgorithm);
    [SecuritySafeCriticalAttribute]
public EnvelopedCms(SubjectIdentifierType recipientIdentifierType, ContentInfo contentInfo, AlgorithmIdentifier encryptionAlgorithm);
    public int get_Version();
    public ContentInfo get_ContentInfo();
    public AlgorithmIdentifier get_ContentEncryptionAlgorithm();
    public X509Certificate2Collection get_Certificates();
    public CryptographicAttributeObjectCollection get_UnprotectedAttributes();
    [SecuritySafeCriticalAttribute]
public RecipientInfoCollection get_RecipientInfos();
    [SecuritySafeCriticalAttribute]
public Byte[] Encode();
    [SecuritySafeCriticalAttribute]
public void Decode(Byte[] encodedMessage);
    public void Encrypt();
    public void Encrypt(CmsRecipient recipient);
    public void Encrypt(CmsRecipientCollection recipients);
    public void Decrypt();
    public void Decrypt(RecipientInfo recipientInfo);
    public void Decrypt(X509Certificate2Collection extraStore);
    public void Decrypt(RecipientInfo recipientInfo, X509Certificate2Collection extraStore);
}
public enum System.Security.Cryptography.Pkcs.KeyAgreeKeyChoice : Enum {
    public int value__;
    public static KeyAgreeKeyChoice Unknown;
    public static KeyAgreeKeyChoice EphemeralKey;
    public static KeyAgreeKeyChoice StaticKey;
}
public class System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo : RecipientInfo {
    public int Version { get; }
    public SubjectIdentifierOrKey OriginatorIdentifierOrKey { get; }
    public SubjectIdentifier RecipientIdentifier { get; }
    public DateTime Date { get; }
    public CryptographicAttributeObject OtherKeyAttribute { get; }
    public AlgorithmIdentifier KeyEncryptionAlgorithm { get; }
    public Byte[] EncryptedKey { get; }
    public virtual int get_Version();
    [SecuritySafeCriticalAttribute]
public SubjectIdentifierOrKey get_OriginatorIdentifierOrKey();
    [SecuritySafeCriticalAttribute]
public virtual SubjectIdentifier get_RecipientIdentifier();
    public DateTime get_Date();
    [SecuritySafeCriticalAttribute]
public CryptographicAttributeObject get_OtherKeyAttribute();
    [SecuritySafeCriticalAttribute]
public virtual AlgorithmIdentifier get_KeyEncryptionAlgorithm();
    [SecuritySafeCriticalAttribute]
public virtual Byte[] get_EncryptedKey();
}
public class System.Security.Cryptography.Pkcs.KeyTransRecipientInfo : RecipientInfo {
    public int Version { get; }
    public SubjectIdentifier RecipientIdentifier { get; }
    public AlgorithmIdentifier KeyEncryptionAlgorithm { get; }
    public Byte[] EncryptedKey { get; }
    public virtual int get_Version();
    [SecuritySafeCriticalAttribute]
public virtual SubjectIdentifier get_RecipientIdentifier();
    [SecuritySafeCriticalAttribute]
public virtual AlgorithmIdentifier get_KeyEncryptionAlgorithm();
    [SecuritySafeCriticalAttribute]
public virtual Byte[] get_EncryptedKey();
}
public class System.Security.Cryptography.Pkcs.Pkcs9AttributeObject : AsnEncodedData {
    public Oid Oid { get; }
    internal Pkcs9AttributeObject(Oid oid);
    public Pkcs9AttributeObject(string oid, Byte[] encodedData);
    public Pkcs9AttributeObject(Oid oid, Byte[] encodedData);
    public Pkcs9AttributeObject(AsnEncodedData asnEncodedData);
    public Oid get_Oid();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
}
public class System.Security.Cryptography.Pkcs.Pkcs9ContentType : Pkcs9AttributeObject {
    public Oid ContentType { get; }
    internal Pkcs9ContentType(Byte[] encodedContentType);
    public Oid get_ContentType();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
}
public class System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription : Pkcs9AttributeObject {
    public string DocumentDescription { get; }
    public Pkcs9DocumentDescription(string documentDescription);
    public Pkcs9DocumentDescription(Byte[] encodedDocumentDescription);
    public string get_DocumentDescription();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
}
public class System.Security.Cryptography.Pkcs.Pkcs9DocumentName : Pkcs9AttributeObject {
    public string DocumentName { get; }
    public Pkcs9DocumentName(string documentName);
    public Pkcs9DocumentName(Byte[] encodedDocumentName);
    public string get_DocumentName();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
}
public class System.Security.Cryptography.Pkcs.Pkcs9MessageDigest : Pkcs9AttributeObject {
    public Byte[] MessageDigest { get; }
    internal Pkcs9MessageDigest(Byte[] encodedMessageDigest);
    public Byte[] get_MessageDigest();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
}
public class System.Security.Cryptography.Pkcs.Pkcs9SigningTime : Pkcs9AttributeObject {
    public DateTime SigningTime { get; }
    public Pkcs9SigningTime(DateTime signingTime);
    public Pkcs9SigningTime(Byte[] encodedSigningTime);
    public DateTime get_SigningTime();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
}
public class System.Security.Cryptography.Pkcs.PublicKeyInfo : object {
    public AlgorithmIdentifier Algorithm { get; }
    public Byte[] KeyValue { get; }
    public AlgorithmIdentifier get_Algorithm();
    public Byte[] get_KeyValue();
}
public abstract class System.Security.Cryptography.Pkcs.RecipientInfo : object {
    public RecipientInfoType Type { get; }
    public int Version { get; }
    public SubjectIdentifier RecipientIdentifier { get; }
    public AlgorithmIdentifier KeyEncryptionAlgorithm { get; }
    public Byte[] EncryptedKey { get; }
    public RecipientInfoType get_Type();
    public abstract virtual int get_Version();
    public abstract virtual SubjectIdentifier get_RecipientIdentifier();
    public abstract virtual AlgorithmIdentifier get_KeyEncryptionAlgorithm();
    public abstract virtual Byte[] get_EncryptedKey();
}
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.Pkcs.RecipientInfoCollection : object {
    public RecipientInfo Item { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public RecipientInfo get_Item(int index);
    public sealed virtual int get_Count();
    public RecipientInfoEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(RecipientInfo[] array, int index);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
}
public class System.Security.Cryptography.Pkcs.RecipientInfoEnumerator : object {
    public RecipientInfo Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public RecipientInfo get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public enum System.Security.Cryptography.Pkcs.RecipientInfoType : Enum {
    public int value__;
    public static RecipientInfoType Unknown;
    public static RecipientInfoType KeyTransport;
    public static RecipientInfoType KeyAgreement;
}
public class System.Security.Cryptography.Pkcs.SignedCms : object {
    public int Version { get; }
    public ContentInfo ContentInfo { get; }
    public bool Detached { get; }
    public X509Certificate2Collection Certificates { get; }
    public SignerInfoCollection SignerInfos { get; }
    public SignedCms(SubjectIdentifierType signerIdentifierType);
    public SignedCms(ContentInfo contentInfo);
    public SignedCms(SubjectIdentifierType signerIdentifierType, ContentInfo contentInfo);
    public SignedCms(ContentInfo contentInfo, bool detached);
    [SecuritySafeCriticalAttribute]
public SignedCms(SubjectIdentifierType signerIdentifierType, ContentInfo contentInfo, bool detached);
    [SecuritySafeCriticalAttribute]
public int get_Version();
    public ContentInfo get_ContentInfo();
    public bool get_Detached();
    [SecuritySafeCriticalAttribute]
public X509Certificate2Collection get_Certificates();
    [SecuritySafeCriticalAttribute]
public SignerInfoCollection get_SignerInfos();
    [SecuritySafeCriticalAttribute]
public Byte[] Encode();
    [SecuritySafeCriticalAttribute]
public void Decode(Byte[] encodedMessage);
    public void ComputeSignature();
    public void ComputeSignature(CmsSigner signer);
    [SecuritySafeCriticalAttribute]
public void ComputeSignature(CmsSigner signer, bool silent);
    [SecuritySafeCriticalAttribute]
public void RemoveSignature(int index);
    [SecuritySafeCriticalAttribute]
public void RemoveSignature(SignerInfo signerInfo);
    public void CheckSignature(bool verifySignatureOnly);
    [SecuritySafeCriticalAttribute]
public void CheckSignature(X509Certificate2Collection extraStore, bool verifySignatureOnly);
    [SecuritySafeCriticalAttribute]
public void CheckHash();
}
public class System.Security.Cryptography.Pkcs.SignerInfo : object {
    public int Version { get; }
    public X509Certificate2 Certificate { get; }
    public SubjectIdentifier SignerIdentifier { get; }
    public Oid DigestAlgorithm { get; }
    public CryptographicAttributeObjectCollection SignedAttributes { get; }
    public CryptographicAttributeObjectCollection UnsignedAttributes { get; }
    public SignerInfoCollection CounterSignerInfos { get; }
    public Oid SignatureAlgorithm { get; }
    public int get_Version();
    public X509Certificate2 get_Certificate();
    [SecuritySafeCriticalAttribute]
public SubjectIdentifier get_SignerIdentifier();
    public Oid get_DigestAlgorithm();
    [SecuritySafeCriticalAttribute]
public CryptographicAttributeObjectCollection get_SignedAttributes();
    [SecuritySafeCriticalAttribute]
public CryptographicAttributeObjectCollection get_UnsignedAttributes();
    public SignerInfoCollection get_CounterSignerInfos();
    public void ComputeCounterSignature();
    public void ComputeCounterSignature(CmsSigner signer);
    [SecuritySafeCriticalAttribute]
public void RemoveCounterSignature(int index);
    [SecuritySafeCriticalAttribute]
public void RemoveCounterSignature(SignerInfo counterSignerInfo);
    public void CheckSignature(bool verifySignatureOnly);
    public void CheckSignature(X509Certificate2Collection extraStore, bool verifySignatureOnly);
    [SecuritySafeCriticalAttribute]
public void CheckHash();
    [SecuritySafeCriticalAttribute]
public Byte[] GetSignature();
    public Oid get_SignatureAlgorithm();
}
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.Pkcs.SignerInfoCollection : object {
    public SignerInfo Item { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public SignerInfo get_Item(int index);
    public sealed virtual int get_Count();
    public SignerInfoEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(SignerInfo[] array, int index);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
}
public class System.Security.Cryptography.Pkcs.SignerInfoEnumerator : object {
    public SignerInfo Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public SignerInfo get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public class System.Security.Cryptography.Pkcs.SubjectIdentifier : object {
    public SubjectIdentifierType Type { get; }
    public object Value { get; }
    public SubjectIdentifierType get_Type();
    public object get_Value();
}
public class System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey : object {
    public SubjectIdentifierOrKeyType Type { get; }
    public object Value { get; }
    public SubjectIdentifierOrKeyType get_Type();
    public object get_Value();
}
public enum System.Security.Cryptography.Pkcs.SubjectIdentifierOrKeyType : Enum {
    public int value__;
    public static SubjectIdentifierOrKeyType Unknown;
    public static SubjectIdentifierOrKeyType IssuerAndSerialNumber;
    public static SubjectIdentifierOrKeyType SubjectKeyIdentifier;
    public static SubjectIdentifierOrKeyType PublicKeyInfo;
}
public enum System.Security.Cryptography.Pkcs.SubjectIdentifierType : Enum {
    public int value__;
    public static SubjectIdentifierType Unknown;
    public static SubjectIdentifierType IssuerAndSerialNumber;
    public static SubjectIdentifierType SubjectKeyIdentifier;
    public static SubjectIdentifierType NoSignature;
}
public static class System.Security.Cryptography.ProtectedData : object {
    [SecuritySafeCriticalAttribute]
public static Byte[] Protect(Byte[] userData, Byte[] optionalEntropy, DataProtectionScope scope);
    [SecuritySafeCriticalAttribute]
public static Byte[] Unprotect(Byte[] encryptedData, Byte[] optionalEntropy, DataProtectionScope scope);
}
public static class System.Security.Cryptography.ProtectedMemory : object {
    [SecuritySafeCriticalAttribute]
public static void Protect(Byte[] userData, MemoryProtectionScope scope);
    [SecuritySafeCriticalAttribute]
public static void Unprotect(Byte[] encryptedData, MemoryProtectionScope scope);
}
public static class System.Security.Cryptography.X509Certificates.X509Certificate2UI : object {
    [SecuritySafeCriticalAttribute]
public static void DisplayCertificate(X509Certificate2 certificate);
    [SecurityCriticalAttribute]
public static void DisplayCertificate(X509Certificate2 certificate, IntPtr hwndParent);
    public static X509Certificate2Collection SelectFromCollection(X509Certificate2Collection certificates, string title, string message, X509SelectionFlag selectionFlag);
    [SecurityCriticalAttribute]
public static X509Certificate2Collection SelectFromCollection(X509Certificate2Collection certificates, string title, string message, X509SelectionFlag selectionFlag, IntPtr hwndParent);
}
public enum System.Security.Cryptography.X509Certificates.X509SelectionFlag : Enum {
    public int value__;
    public static X509SelectionFlag SingleSelection;
    public static X509SelectionFlag MultiSelection;
}
public class System.Security.Cryptography.Xml.CipherData : object {
    public CipherReference CipherReference { get; public set; }
    public Byte[] CipherValue { get; public set; }
    public CipherData(Byte[] cipherValue);
    public CipherData(CipherReference cipherReference);
    public CipherReference get_CipherReference();
    public void set_CipherReference(CipherReference value);
    public Byte[] get_CipherValue();
    public void set_CipherValue(Byte[] value);
    public XmlElement GetXml();
    public void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.CipherReference : EncryptedReference {
    public CipherReference(string uri);
    public CipherReference(string uri, TransformChain transformChain);
    public virtual XmlElement GetXml();
    public virtual void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.DataObject : object {
    public string Id { get; public set; }
    public string MimeType { get; public set; }
    public string Encoding { get; public set; }
    public XmlNodeList Data { get; public set; }
    public DataObject(string id, string mimeType, string encoding, XmlElement data);
    public string get_Id();
    public void set_Id(string value);
    public string get_MimeType();
    public void set_MimeType(string value);
    public string get_Encoding();
    public void set_Encoding(string value);
    public XmlNodeList get_Data();
    public void set_Data(XmlNodeList value);
    public XmlElement GetXml();
    public void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.DataReference : EncryptedReference {
    public DataReference(string uri);
    public DataReference(string uri, TransformChain transformChain);
}
public class System.Security.Cryptography.Xml.DSAKeyValue : KeyInfoClause {
    public DSA Key { get; public set; }
    public DSAKeyValue(DSA key);
    public DSA get_Key();
    public void set_Key(DSA value);
    public virtual XmlElement GetXml();
    public virtual void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.EncryptedData : EncryptedType {
    public virtual void LoadXml(XmlElement value);
    public virtual XmlElement GetXml();
}
public class System.Security.Cryptography.Xml.EncryptedKey : EncryptedType {
    public string Recipient { get; public set; }
    public string CarriedKeyName { get; public set; }
    public ReferenceList ReferenceList { get; }
    public string get_Recipient();
    public void set_Recipient(string value);
    public string get_CarriedKeyName();
    public void set_CarriedKeyName(string value);
    public ReferenceList get_ReferenceList();
    public void AddReference(DataReference dataReference);
    public void AddReference(KeyReference keyReference);
    public virtual void LoadXml(XmlElement value);
    public virtual XmlElement GetXml();
}
public abstract class System.Security.Cryptography.Xml.EncryptedReference : object {
    public string Uri { get; public set; }
    public TransformChain TransformChain { get; public set; }
    protected string ReferenceType { get; protected set; }
    protected internal bool CacheValid { get; }
    protected EncryptedReference(string uri);
    protected EncryptedReference(string uri, TransformChain transformChain);
    public string get_Uri();
    public void set_Uri(string value);
    public TransformChain get_TransformChain();
    public void set_TransformChain(TransformChain value);
    public void AddTransform(Transform transform);
    protected string get_ReferenceType();
    protected void set_ReferenceType(string value);
    protected internal bool get_CacheValid();
    public virtual XmlElement GetXml();
    public virtual void LoadXml(XmlElement value);
}
public abstract class System.Security.Cryptography.Xml.EncryptedType : object {
    public string Id { get; public set; }
    public string Type { get; public set; }
    public string MimeType { get; public set; }
    public string Encoding { get; public set; }
    public KeyInfo KeyInfo { get; public set; }
    public EncryptionMethod EncryptionMethod { get; public set; }
    public EncryptionPropertyCollection EncryptionProperties { get; }
    public CipherData CipherData { get; public set; }
    public virtual string get_Id();
    public virtual void set_Id(string value);
    public virtual string get_Type();
    public virtual void set_Type(string value);
    public virtual string get_MimeType();
    public virtual void set_MimeType(string value);
    public virtual string get_Encoding();
    public virtual void set_Encoding(string value);
    public KeyInfo get_KeyInfo();
    public void set_KeyInfo(KeyInfo value);
    public virtual EncryptionMethod get_EncryptionMethod();
    public virtual void set_EncryptionMethod(EncryptionMethod value);
    public virtual EncryptionPropertyCollection get_EncryptionProperties();
    public void AddProperty(EncryptionProperty ep);
    public virtual CipherData get_CipherData();
    public virtual void set_CipherData(CipherData value);
    public abstract virtual void LoadXml(XmlElement value);
    public abstract virtual XmlElement GetXml();
}
public class System.Security.Cryptography.Xml.EncryptedXml : object {
    public static string XmlEncNamespaceUrl;
    public static string XmlEncElementUrl;
    public static string XmlEncElementContentUrl;
    public static string XmlEncEncryptedKeyUrl;
    public static string XmlEncDESUrl;
    public static string XmlEncTripleDESUrl;
    public static string XmlEncAES128Url;
    public static string XmlEncAES256Url;
    public static string XmlEncAES192Url;
    public static string XmlEncRSA15Url;
    public static string XmlEncRSAOAEPUrl;
    public static string XmlEncTripleDESKeyWrapUrl;
    public static string XmlEncAES128KeyWrapUrl;
    public static string XmlEncAES256KeyWrapUrl;
    public static string XmlEncAES192KeyWrapUrl;
    public static string XmlEncSHA256Url;
    public static string XmlEncSHA512Url;
    public int XmlDSigSearchDepth { get; public set; }
    public Evidence DocumentEvidence { get; public set; }
    public XmlResolver Resolver { get; public set; }
    public PaddingMode Padding { get; public set; }
    public CipherMode Mode { get; public set; }
    public Encoding Encoding { get; public set; }
    public string Recipient { get; public set; }
    public EncryptedXml(XmlDocument document);
    public EncryptedXml(XmlDocument document, Evidence evidence);
    public int get_XmlDSigSearchDepth();
    public void set_XmlDSigSearchDepth(int value);
    public Evidence get_DocumentEvidence();
    public void set_DocumentEvidence(Evidence value);
    public XmlResolver get_Resolver();
    public void set_Resolver(XmlResolver value);
    public PaddingMode get_Padding();
    public void set_Padding(PaddingMode value);
    public CipherMode get_Mode();
    public void set_Mode(CipherMode value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public string get_Recipient();
    public void set_Recipient(string value);
    public virtual XmlElement GetIdElement(XmlDocument document, string idValue);
    public virtual Byte[] GetDecryptionIV(EncryptedData encryptedData, string symmetricAlgorithmUri);
    public virtual SymmetricAlgorithm GetDecryptionKey(EncryptedData encryptedData, string symmetricAlgorithmUri);
    public virtual Byte[] DecryptEncryptedKey(EncryptedKey encryptedKey);
    public void AddKeyNameMapping(string keyName, object keyObject);
    public void ClearKeyNameMappings();
    public EncryptedData Encrypt(XmlElement inputElement, X509Certificate2 certificate);
    public EncryptedData Encrypt(XmlElement inputElement, string keyName);
    public void DecryptDocument();
    public Byte[] EncryptData(Byte[] plaintext, SymmetricAlgorithm symmetricAlgorithm);
    public Byte[] EncryptData(XmlElement inputElement, SymmetricAlgorithm symmetricAlgorithm, bool content);
    public Byte[] DecryptData(EncryptedData encryptedData, SymmetricAlgorithm symmetricAlgorithm);
    public void ReplaceData(XmlElement inputElement, Byte[] decryptedData);
    public static void ReplaceElement(XmlElement inputElement, EncryptedData encryptedData, bool content);
    public static Byte[] EncryptKey(Byte[] keyData, SymmetricAlgorithm symmetricAlgorithm);
    public static Byte[] EncryptKey(Byte[] keyData, RSA rsa, bool useOAEP);
    public static Byte[] DecryptKey(Byte[] keyData, SymmetricAlgorithm symmetricAlgorithm);
    public static Byte[] DecryptKey(Byte[] keyData, RSA rsa, bool useOAEP);
}
public class System.Security.Cryptography.Xml.EncryptionMethod : object {
    public int KeySize { get; public set; }
    public string KeyAlgorithm { get; public set; }
    public EncryptionMethod(string algorithm);
    public int get_KeySize();
    public void set_KeySize(int value);
    public string get_KeyAlgorithm();
    public void set_KeyAlgorithm(string value);
    public XmlElement GetXml();
    public void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.EncryptionProperty : object {
    public string Id { get; }
    public string Target { get; }
    public XmlElement PropertyElement { get; public set; }
    public EncryptionProperty(XmlElement elementProperty);
    public string get_Id();
    public string get_Target();
    public XmlElement get_PropertyElement();
    public void set_PropertyElement(XmlElement value);
    public XmlElement GetXml();
    public void LoadXml(XmlElement value);
}
[DefaultMemberAttribute("ItemOf")]
public class System.Security.Cryptography.Xml.EncryptionPropertyCollection : object {
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public EncryptionProperty ItemOf { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int get_Count();
    private sealed virtual override int System.Collections.IList.Add(object value);
    public int Add(EncryptionProperty value);
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    public bool Contains(EncryptionProperty value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    public int IndexOf(EncryptionProperty value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    public void Insert(int index, EncryptionProperty value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public void Remove(EncryptionProperty value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public EncryptionProperty Item(int index);
    public EncryptionProperty get_ItemOf(int index);
    public void set_ItemOf(int index, EncryptionProperty value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(EncryptionProperty[] array, int index);
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
}
public interface System.Security.Cryptography.Xml.IRelDecryptor {
    public abstract virtual Stream Decrypt(EncryptionMethod encryptionMethod, KeyInfo keyInfo, Stream toDecrypt);
}
public class System.Security.Cryptography.Xml.KeyInfo : object {
    public string Id { get; public set; }
    public int Count { get; }
    public string get_Id();
    public void set_Id(string value);
    public XmlElement GetXml();
    public void LoadXml(XmlElement value);
    public int get_Count();
    public void AddClause(KeyInfoClause clause);
    public sealed virtual IEnumerator GetEnumerator();
    public IEnumerator GetEnumerator(Type requestedObjectType);
}
public abstract class System.Security.Cryptography.Xml.KeyInfoClause : object {
    public abstract virtual XmlElement GetXml();
    public abstract virtual void LoadXml(XmlElement element);
}
public class System.Security.Cryptography.Xml.KeyInfoEncryptedKey : KeyInfoClause {
    public EncryptedKey EncryptedKey { get; public set; }
    public KeyInfoEncryptedKey(EncryptedKey encryptedKey);
    public EncryptedKey get_EncryptedKey();
    public void set_EncryptedKey(EncryptedKey value);
    public virtual XmlElement GetXml();
    public virtual void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.KeyInfoName : KeyInfoClause {
    public string Value { get; public set; }
    public KeyInfoName(string keyName);
    public string get_Value();
    public void set_Value(string value);
    public virtual XmlElement GetXml();
    public virtual void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.KeyInfoNode : KeyInfoClause {
    public XmlElement Value { get; public set; }
    public KeyInfoNode(XmlElement node);
    public XmlElement get_Value();
    public void set_Value(XmlElement value);
    public virtual XmlElement GetXml();
    public virtual void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.KeyInfoRetrievalMethod : KeyInfoClause {
    public string Uri { get; public set; }
    [ComVisibleAttribute("False")]
public string Type { get; public set; }
    public KeyInfoRetrievalMethod(string strUri);
    public KeyInfoRetrievalMethod(string strUri, string typeName);
    public string get_Uri();
    public void set_Uri(string value);
    public string get_Type();
    public void set_Type(string value);
    public virtual XmlElement GetXml();
    public virtual void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.KeyInfoX509Data : KeyInfoClause {
    public ArrayList Certificates { get; }
    public ArrayList SubjectKeyIds { get; }
    public ArrayList SubjectNames { get; }
    public ArrayList IssuerSerials { get; }
    public Byte[] CRL { get; public set; }
    public KeyInfoX509Data(Byte[] rgbCert);
    public KeyInfoX509Data(X509Certificate cert);
    [SecuritySafeCriticalAttribute]
public KeyInfoX509Data(X509Certificate cert, X509IncludeOption includeOption);
    public ArrayList get_Certificates();
    public void AddCertificate(X509Certificate certificate);
    public ArrayList get_SubjectKeyIds();
    public void AddSubjectKeyId(Byte[] subjectKeyId);
    [ComVisibleAttribute("False")]
public void AddSubjectKeyId(string subjectKeyId);
    public ArrayList get_SubjectNames();
    public void AddSubjectName(string subjectName);
    public ArrayList get_IssuerSerials();
    public void AddIssuerSerial(string issuerName, string serialNumber);
    public Byte[] get_CRL();
    public void set_CRL(Byte[] value);
    public virtual XmlElement GetXml();
    public virtual void LoadXml(XmlElement element);
}
public class System.Security.Cryptography.Xml.KeyReference : EncryptedReference {
    public KeyReference(string uri);
    public KeyReference(string uri, TransformChain transformChain);
}
public class System.Security.Cryptography.Xml.Reference : object {
    public string Id { get; public set; }
    public string Uri { get; public set; }
    public string Type { get; public set; }
    public string DigestMethod { get; public set; }
    public Byte[] DigestValue { get; public set; }
    public TransformChain TransformChain { get; public set; }
    public Reference(Stream stream);
    public Reference(string uri);
    public string get_Id();
    public void set_Id(string value);
    public string get_Uri();
    public void set_Uri(string value);
    public string get_Type();
    public void set_Type(string value);
    public string get_DigestMethod();
    public void set_DigestMethod(string value);
    public Byte[] get_DigestValue();
    public void set_DigestValue(Byte[] value);
    public TransformChain get_TransformChain();
    [ComVisibleAttribute("False")]
public void set_TransformChain(TransformChain value);
    public XmlElement GetXml();
    public void LoadXml(XmlElement value);
    public void AddTransform(Transform transform);
}
[DefaultMemberAttribute("ItemOf")]
public class System.Security.Cryptography.Xml.ReferenceList : object {
    public int Count { get; }
    public EncryptedReference ItemOf { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public EncryptedReference Item(int index);
    public EncryptedReference get_ItemOf(int index);
    public void set_ItemOf(int index, EncryptedReference value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
}
public class System.Security.Cryptography.Xml.RSAKeyValue : KeyInfoClause {
    public RSA Key { get; public set; }
    public RSAKeyValue(RSA key);
    public RSA get_Key();
    public void set_Key(RSA value);
    public virtual XmlElement GetXml();
    public virtual void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.Signature : object {
    public string Id { get; public set; }
    public SignedInfo SignedInfo { get; public set; }
    public Byte[] SignatureValue { get; public set; }
    public KeyInfo KeyInfo { get; public set; }
    public IList ObjectList { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    public SignedInfo get_SignedInfo();
    public void set_SignedInfo(SignedInfo value);
    public Byte[] get_SignatureValue();
    public void set_SignatureValue(Byte[] value);
    public KeyInfo get_KeyInfo();
    public void set_KeyInfo(KeyInfo value);
    public IList get_ObjectList();
    public void set_ObjectList(IList value);
    public XmlElement GetXml();
    public void LoadXml(XmlElement value);
    public void AddObject(DataObject dataObject);
}
public class System.Security.Cryptography.Xml.SignedInfo : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public string Id { get; public set; }
    public string CanonicalizationMethod { get; public set; }
    [ComVisibleAttribute("False")]
public Transform CanonicalizationMethodObject { get; }
    public string SignatureMethod { get; public set; }
    public string SignatureLength { get; public set; }
    public ArrayList References { get; }
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public string get_Id();
    public void set_Id(string value);
    public string get_CanonicalizationMethod();
    public void set_CanonicalizationMethod(string value);
    public Transform get_CanonicalizationMethodObject();
    public string get_SignatureMethod();
    public void set_SignatureMethod(string value);
    public string get_SignatureLength();
    public void set_SignatureLength(string value);
    public ArrayList get_References();
    public XmlElement GetXml();
    public void LoadXml(XmlElement value);
    public void AddReference(Reference reference);
}
public class System.Security.Cryptography.Xml.SignedXml : object {
    protected Signature m_signature;
    protected string m_strSigningKeyName;
    public static string XmlDsigNamespaceUrl;
    public static string XmlDsigMinimalCanonicalizationUrl;
    public static string XmlDsigCanonicalizationUrl;
    public static string XmlDsigCanonicalizationWithCommentsUrl;
    public static string XmlDsigSHA1Url;
    public static string XmlDsigDSAUrl;
    public static string XmlDsigRSASHA1Url;
    public static string XmlDsigHMACSHA1Url;
    public static string XmlDsigSHA256Url;
    public static string XmlDsigRSASHA256Url;
    public static string XmlDsigSHA384Url;
    public static string XmlDsigRSASHA384Url;
    public static string XmlDsigSHA512Url;
    public static string XmlDsigRSASHA512Url;
    public static string XmlDsigC14NTransformUrl;
    public static string XmlDsigC14NWithCommentsTransformUrl;
    public static string XmlDsigExcC14NTransformUrl;
    public static string XmlDsigExcC14NWithCommentsTransformUrl;
    public static string XmlDsigBase64TransformUrl;
    public static string XmlDsigXPathTransformUrl;
    public static string XmlDsigXsltTransformUrl;
    public static string XmlDsigEnvelopedSignatureTransformUrl;
    public static string XmlDecryptionTransformUrl;
    public static string XmlLicenseTransformUrl;
    public string SigningKeyName { get; public set; }
    [ComVisibleAttribute("False")]
unknown XmlResolver Resolver {public set; }
    public Func`2<SignedXml, bool> SignatureFormatValidator { get; public set; }
    public Collection`1<string> SafeCanonicalizationMethods { get; }
    public AsymmetricAlgorithm SigningKey { get; public set; }
    [ComVisibleAttribute("False")]
public EncryptedXml EncryptedXml { get; public set; }
    public Signature Signature { get; }
    public SignedInfo SignedInfo { get; }
    public string SignatureMethod { get; }
    public string SignatureLength { get; }
    public Byte[] SignatureValue { get; }
    public KeyInfo KeyInfo { get; public set; }
    public SignedXml(XmlDocument document);
    public SignedXml(XmlElement elem);
    private static SignedXml();
    public string get_SigningKeyName();
    public void set_SigningKeyName(string value);
    public void set_Resolver(XmlResolver value);
    public Func`2<SignedXml, bool> get_SignatureFormatValidator();
    public void set_SignatureFormatValidator(Func`2<SignedXml, bool> value);
    public Collection`1<string> get_SafeCanonicalizationMethods();
    public AsymmetricAlgorithm get_SigningKey();
    public void set_SigningKey(AsymmetricAlgorithm value);
    public EncryptedXml get_EncryptedXml();
    public void set_EncryptedXml(EncryptedXml value);
    public Signature get_Signature();
    public SignedInfo get_SignedInfo();
    public string get_SignatureMethod();
    public string get_SignatureLength();
    public Byte[] get_SignatureValue();
    public KeyInfo get_KeyInfo();
    public void set_KeyInfo(KeyInfo value);
    public XmlElement GetXml();
    public void LoadXml(XmlElement value);
    public void AddReference(Reference reference);
    public void AddObject(DataObject dataObject);
    public bool CheckSignature();
    public bool CheckSignatureReturningKey(AsymmetricAlgorithm& signingKey);
    public bool CheckSignature(AsymmetricAlgorithm key);
    public bool CheckSignature(KeyedHashAlgorithm macAlg);
    [ComVisibleAttribute("False")]
[SecuritySafeCriticalAttribute]
public bool CheckSignature(X509Certificate2 certificate, bool verifySignatureOnly);
    public void ComputeSignature();
    public void ComputeSignature(KeyedHashAlgorithm macAlg);
    protected virtual AsymmetricAlgorithm GetPublicKey();
    public virtual XmlElement GetIdElement(XmlDocument document, string idValue);
}
public abstract class System.Security.Cryptography.Xml.Transform : object {
    public string Algorithm { get; public set; }
    [ComVisibleAttribute("False")]
internal XmlResolver Resolver { get; public set; }
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    [ComVisibleAttribute("False")]
public XmlElement Context { get; public set; }
    [ComVisibleAttribute("False")]
public Hashtable PropagatedNamespaces { get; }
    public string get_Algorithm();
    public void set_Algorithm(string value);
    public void set_Resolver(XmlResolver value);
    internal XmlResolver get_Resolver();
    public abstract virtual Type[] get_InputTypes();
    public abstract virtual Type[] get_OutputTypes();
    public XmlElement GetXml();
    public abstract virtual void LoadInnerXml(XmlNodeList nodeList);
    protected abstract virtual XmlNodeList GetInnerXml();
    public abstract virtual void LoadInput(object obj);
    public abstract virtual object GetOutput();
    public abstract virtual object GetOutput(Type type);
    [ComVisibleAttribute("False")]
public virtual Byte[] GetDigestedOutput(HashAlgorithm hash);
    public XmlElement get_Context();
    public void set_Context(XmlElement value);
    public Hashtable get_PropagatedNamespaces();
}
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.Xml.TransformChain : object {
    public int Count { get; }
    public Transform Item { get; }
    public void Add(Transform transform);
    public IEnumerator GetEnumerator();
    public int get_Count();
    public Transform get_Item(int index);
}
public class System.Security.Cryptography.Xml.X509IssuerSerial : ValueType {
    private string issuerName;
    private string serialNumber;
    public string IssuerName { get; public set; }
    public string SerialNumber { get; public set; }
    public string get_IssuerName();
    public void set_IssuerName(string value);
    public string get_SerialNumber();
    public void set_SerialNumber(string value);
}
public class System.Security.Cryptography.Xml.XmlDecryptionTransform : Transform {
    public EncryptedXml EncryptedXml { get; public set; }
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    protected virtual bool IsTargetElement(XmlElement inputElement, string idValue);
    public EncryptedXml get_EncryptedXml();
    public void set_EncryptedXml(EncryptedXml value);
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    public void AddExceptUri(string uri);
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    protected virtual XmlNodeList GetInnerXml();
    public virtual void LoadInput(object obj);
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
}
public class System.Security.Cryptography.Xml.XmlDsigBase64Transform : Transform {
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    protected virtual XmlNodeList GetInnerXml();
    public virtual void LoadInput(object obj);
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
}
public class System.Security.Cryptography.Xml.XmlDsigC14NTransform : Transform {
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public XmlDsigC14NTransform(bool includeComments);
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    protected virtual XmlNodeList GetInnerXml();
    public virtual void LoadInput(object obj);
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
    [ComVisibleAttribute("False")]
public virtual Byte[] GetDigestedOutput(HashAlgorithm hash);
}
public class System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform : XmlDsigC14NTransform {
}
public class System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform : Transform {
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public XmlDsigEnvelopedSignatureTransform(bool includeComments);
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    protected virtual XmlNodeList GetInnerXml();
    public virtual void LoadInput(object obj);
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
}
public class System.Security.Cryptography.Xml.XmlDsigExcC14NTransform : Transform {
    public string InclusiveNamespacesPrefixList { get; public set; }
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public XmlDsigExcC14NTransform(bool includeComments);
    public XmlDsigExcC14NTransform(string inclusiveNamespacesPrefixList);
    public XmlDsigExcC14NTransform(bool includeComments, string inclusiveNamespacesPrefixList);
    public string get_InclusiveNamespacesPrefixList();
    public void set_InclusiveNamespacesPrefixList(string value);
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    public virtual void LoadInput(object obj);
    protected virtual XmlNodeList GetInnerXml();
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
    public virtual Byte[] GetDigestedOutput(HashAlgorithm hash);
}
public class System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform : XmlDsigExcC14NTransform {
    public XmlDsigExcC14NWithCommentsTransform(string inclusiveNamespacesPrefixList);
}
public class System.Security.Cryptography.Xml.XmlDsigXPathTransform : Transform {
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    protected virtual XmlNodeList GetInnerXml();
    public virtual void LoadInput(object obj);
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
}
public class System.Security.Cryptography.Xml.XmlDsigXsltTransform : Transform {
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public XmlDsigXsltTransform(bool includeComments);
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    protected virtual XmlNodeList GetInnerXml();
    public virtual void LoadInput(object obj);
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
}
public class System.Security.Cryptography.Xml.XmlLicenseTransform : Transform {
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public IRelDecryptor Decryptor { get; public set; }
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    public IRelDecryptor get_Decryptor();
    public void set_Decryptor(IRelDecryptor value);
    protected virtual XmlNodeList GetInnerXml();
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    public virtual void LoadInput(object obj);
}
public class System.Security.Permissions.DataProtectionPermission : CodeAccessPermission {
    public DataProtectionPermissionFlags Flags { get; public set; }
    public DataProtectionPermission(PermissionState state);
    public DataProtectionPermission(DataProtectionPermissionFlags flag);
    public void set_Flags(DataProtectionPermissionFlags value);
    public DataProtectionPermissionFlags get_Flags();
    public sealed virtual bool IsUnrestricted();
    public virtual IPermission Union(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public virtual IPermission Intersect(IPermission target);
    public virtual IPermission Copy();
    public virtual SecurityElement ToXml();
    public virtual void FromXml(SecurityElement securityElement);
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.DataProtectionPermissionAttribute : CodeAccessSecurityAttribute {
    public DataProtectionPermissionFlags Flags { get; public set; }
    public bool ProtectData { get; public set; }
    public bool UnprotectData { get; public set; }
    public bool ProtectMemory { get; public set; }
    public bool UnprotectMemory { get; public set; }
    public DataProtectionPermissionAttribute(SecurityAction action);
    public DataProtectionPermissionFlags get_Flags();
    public void set_Flags(DataProtectionPermissionFlags value);
    public bool get_ProtectData();
    public void set_ProtectData(bool value);
    public bool get_UnprotectData();
    public void set_UnprotectData(bool value);
    public bool get_ProtectMemory();
    public void set_ProtectMemory(bool value);
    public bool get_UnprotectMemory();
    public void set_UnprotectMemory(bool value);
    public virtual IPermission CreatePermission();
}
[FlagsAttribute]
public enum System.Security.Permissions.DataProtectionPermissionFlags : Enum {
    public int value__;
    public static DataProtectionPermissionFlags NoFlags;
    public static DataProtectionPermissionFlags ProtectData;
    public static DataProtectionPermissionFlags UnprotectData;
    public static DataProtectionPermissionFlags ProtectMemory;
    public static DataProtectionPermissionFlags UnprotectMemory;
    public static DataProtectionPermissionFlags AllFlags;
}
