public interface Microsoft.Windows.Input.IPreviewCommand {
    public abstract virtual void Preview(object parameter);
    public abstract virtual void CancelPreview();
}
public interface Microsoft.Windows.Input.IPreviewCommandSource {
    public object PreviewCommandParameter { get; }
    public abstract virtual object get_PreviewCommandParameter();
}
public class System.Windows.Automation.Peers.RibbonApplicationMenuAutomationPeer : RibbonMenuButtonAutomationPeer {
    public RibbonApplicationMenuAutomationPeer(RibbonApplicationMenu owner);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
}
public class System.Windows.Automation.Peers.RibbonAutomationPeer : SelectorAutomationPeer {
    private bool System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    public ExpandCollapseState ExpandCollapseState { get; }
    public RibbonAutomationPeer(Ribbon owner);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual void SetFocusCore();
    protected virtual bool IsOffscreenCore();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    public sealed virtual void Collapse();
    public sealed virtual void Expand();
    public sealed virtual ExpandCollapseState get_ExpandCollapseState();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
}
public class System.Windows.Automation.Peers.RibbonButtonAutomationPeer : ButtonAutomationPeer {
    public RibbonButtonAutomationPeer(RibbonButton owner);
    protected virtual string GetAccessKeyCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual string GetHelpTextCore();
}
public class System.Windows.Automation.Peers.RibbonCheckBoxAutomationPeer : CheckBoxAutomationPeer {
    public RibbonCheckBoxAutomationPeer(RibbonCheckBox owner);
    protected virtual string GetAccessKeyCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual string GetHelpTextCore();
}
public class System.Windows.Automation.Peers.RibbonComboBoxAutomationPeer : RibbonMenuButtonAutomationPeer {
    public bool IsReadOnly { get; }
    public string Value { get; }
    public RibbonComboBoxAutomationPeer(RibbonComboBox owner);
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual void SetFocusCore();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void SetValue(string value);
    public sealed virtual string get_Value();
}
public class System.Windows.Automation.Peers.RibbonContextMenuAutomationPeer : ItemsControlAutomationPeer {
    public RibbonContextMenuAutomationPeer(RibbonContextMenu owner);
    protected virtual string GetClassNameCore();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsContentElementCore();
}
public class System.Windows.Automation.Peers.RibbonContextualTabGroupAutomationPeer : FrameworkElementAutomationPeer {
    public RibbonContextualTabGroupAutomationPeer(RibbonContextualTabGroup owner);
    protected virtual string GetNameCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.RibbonContextualTabGroupDataAutomationPeer : ItemAutomationPeer {
    public RibbonContextualTabGroupDataAutomationPeer(object item, RibbonContextualTabGroupItemsControlAutomationPeer owner);
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsContentElementCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
}
public class System.Windows.Automation.Peers.RibbonContextualTabGroupItemsControlAutomationPeer : ItemsControlAutomationPeer {
    public RibbonContextualTabGroupItemsControlAutomationPeer(RibbonContextualTabGroupItemsControl owner);
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    public virtual object GetPattern(PatternInterface patternInterface);
}
public class System.Windows.Automation.Peers.RibbonControlAutomationPeer : FrameworkElementAutomationPeer {
    public RibbonControlAutomationPeer(FrameworkElement owner);
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.RibbonControlDataAutomationPeer : ItemAutomationPeer {
    public RibbonControlDataAutomationPeer(object item, ItemsControlAutomationPeer itemsControlPeer);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
}
public class System.Windows.Automation.Peers.RibbonControlGroupAutomationPeer : ItemsControlAutomationPeer {
    public RibbonControlGroupAutomationPeer(RibbonControlGroup owner);
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
}
public class System.Windows.Automation.Peers.RibbonGalleryAutomationPeer : ItemsControlAutomationPeer {
    private bool System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    public RibbonGalleryAutomationPeer(RibbonGallery owner);
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual string GetClassNameCore();
    protected virtual string GetHelpTextCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ISelectionProvider.GetSelection();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
}
public class System.Windows.Automation.Peers.RibbonGalleryCategoryAutomationPeer : ItemsControlAutomationPeer {
    public RibbonGalleryCategoryAutomationPeer(RibbonGalleryCategory owner);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
}
public class System.Windows.Automation.Peers.RibbonGalleryCategoryDataAutomationPeer : ItemAutomationPeer {
    public RibbonGalleryCategoryDataAutomationPeer(object owner, ItemsControlAutomationPeer itemsControlAutomationPeer);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView();
}
public class System.Windows.Automation.Peers.RibbonGalleryItemAutomationPeer : FrameworkElementAutomationPeer {
    public RibbonGalleryItemAutomationPeer(RibbonGalleryItem owner);
    protected virtual string GetClassNameCore();
    protected virtual string GetAccessKeyCore();
    protected virtual string GetHelpTextCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
}
public class System.Windows.Automation.Peers.RibbonGalleryItemDataAutomationPeer : ItemAutomationPeer {
    public RibbonGalleryCategoryDataAutomationPeer ParentCategoryDataAutomationPeer { get; }
    private bool System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer { get; }
    public RibbonGalleryItemDataAutomationPeer(object owner, ItemsControlAutomationPeer itemsControlAutomationPeer, RibbonGalleryCategoryDataAutomationPeer parentCategoryDataAutomationPeer);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    public RibbonGalleryCategoryDataAutomationPeer get_ParentCategoryDataAutomationPeer();
    private sealed virtual override void System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionItemProvider.get_IsSelected();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.Select();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.get_SelectionContainer();
}
public class System.Windows.Automation.Peers.RibbonGroupAutomationPeer : ItemsControlAutomationPeer {
    public RibbonGroupAutomationPeer(RibbonGroup owner);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual void SetFocusCore();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
}
public class System.Windows.Automation.Peers.RibbonGroupDataAutomationPeer : ItemAutomationPeer {
    private ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState { get; }
    public RibbonGroupDataAutomationPeer(object item, RibbonTabAutomationPeer itemsControlPeer);
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    private sealed virtual override void System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Expand();
    private sealed virtual override ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.get_ExpandCollapseState();
}
public class System.Windows.Automation.Peers.RibbonGroupHeaderAutomationPeer : FrameworkElementAutomationPeer {
    public RibbonGroupHeaderAutomationPeer(FrameworkElement owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsContentElementCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
}
public class System.Windows.Automation.Peers.RibbonMenuButtonAutomationPeer : ItemsControlAutomationPeer {
    private ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState { get; }
    private bool System.Windows.Automation.Provider.ITransformProvider.CanMove { get; }
    private bool System.Windows.Automation.Provider.ITransformProvider.CanResize { get; }
    private bool System.Windows.Automation.Provider.ITransformProvider.CanRotate { get; }
    public RibbonMenuButtonAutomationPeer(RibbonMenuButton owner);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetAccessKeyCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual string GetHelpTextCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Expand();
    private sealed virtual override ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.get_ExpandCollapseState();
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanMove();
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanResize();
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanRotate();
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Move(double x, double y);
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Resize(double width, double height);
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Rotate(double degrees);
}
public class System.Windows.Automation.Peers.RibbonMenuItemAutomationPeer : ItemsControlAutomationPeer {
    public RibbonMenuItemAutomationPeer(RibbonMenuItem owner);
    protected virtual string GetAccessKeyCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetHelpTextCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
}
public class System.Windows.Automation.Peers.RibbonMenuItemDataAutomationPeer : ItemAutomationPeer {
    private ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState { get; }
    private ToggleState System.Windows.Automation.Provider.IToggleProvider.ToggleState { get; }
    private bool System.Windows.Automation.Provider.ITransformProvider.CanMove { get; }
    private bool System.Windows.Automation.Provider.ITransformProvider.CanResize { get; }
    private bool System.Windows.Automation.Provider.ITransformProvider.CanRotate { get; }
    public RibbonMenuItemDataAutomationPeer(object item, ItemsControlAutomationPeer itemsControlPeer);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Expand();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse();
    private sealed virtual override ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.get_ExpandCollapseState();
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
    private sealed virtual override void System.Windows.Automation.Provider.IToggleProvider.Toggle();
    private sealed virtual override ToggleState System.Windows.Automation.Provider.IToggleProvider.get_ToggleState();
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanMove();
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanResize();
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanRotate();
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Move(double x, double y);
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Resize(double width, double height);
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Rotate(double degrees);
}
public class System.Windows.Automation.Peers.RibbonQuickAccessToolBarAutomationPeer : ItemsControlAutomationPeer {
    public ExpandCollapseState ExpandCollapseState { get; }
    public RibbonQuickAccessToolBarAutomationPeer(RibbonQuickAccessToolBar owner);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    public sealed virtual void Collapse();
    public sealed virtual void Expand();
    public sealed virtual ExpandCollapseState get_ExpandCollapseState();
}
public class System.Windows.Automation.Peers.RibbonRadioButtonAutomationPeer : RadioButtonAutomationPeer {
    public RibbonRadioButtonAutomationPeer(RibbonRadioButton owner);
    protected virtual string GetAccessKeyCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual string GetHelpTextCore();
}
public class System.Windows.Automation.Peers.RibbonSeparatorAutomationPeer : SeparatorAutomationPeer {
    public RibbonSeparatorAutomationPeer(RibbonSeparator owner);
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
}
public class System.Windows.Automation.Peers.RibbonSplitButtonAutomationPeer : RibbonMenuButtonAutomationPeer {
    private ToggleState System.Windows.Automation.Provider.IToggleProvider.ToggleState { get; }
    public RibbonSplitButtonAutomationPeer(RibbonSplitButton owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IToggleProvider.Toggle();
    private sealed virtual override ToggleState System.Windows.Automation.Provider.IToggleProvider.get_ToggleState();
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
}
public class System.Windows.Automation.Peers.RibbonTabAutomationPeer : ItemsControlAutomationPeer {
    public RibbonTabAutomationPeer(RibbonTab owner);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    protected virtual Rect GetBoundingRectangleCore();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    internal virtual Rect GetVisibleBoundingRectCore();
}
public class System.Windows.Automation.Peers.RibbonTabDataAutomationPeer : SelectorItemAutomationPeer {
    private ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState { get; }
    public RibbonTabDataAutomationPeer(object item, RibbonAutomationPeer itemsControlPeer);
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Expand();
    private sealed virtual override ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.get_ExpandCollapseState();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.RibbonTabHeaderAutomationPeer : FrameworkElementAutomationPeer {
    public RibbonTabHeaderAutomationPeer(RibbonTabHeader owner);
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.RibbonTabHeaderDataAutomationPeer : ItemAutomationPeer {
    public RibbonTabHeaderDataAutomationPeer(object item, RibbonTabHeaderItemsControlAutomationPeer itemsControlPeer);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsContentElementCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
}
public class System.Windows.Automation.Peers.RibbonTabHeaderItemsControlAutomationPeer : ItemsControlAutomationPeer {
    public RibbonTabHeaderItemsControlAutomationPeer(RibbonTabHeaderItemsControl owner);
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
}
public class System.Windows.Automation.Peers.RibbonTextBoxAutomationPeer : TextBoxAutomationPeer {
    public RibbonTextBoxAutomationPeer(RibbonTextBox owner);
    protected virtual string GetAccessKeyCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual string GetHelpTextCore();
    protected virtual string GetAcceleratorKeyCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
}
public class System.Windows.Automation.Peers.RibbonTitleAutomationPeer : FrameworkElementAutomationPeer {
    public RibbonTitleAutomationPeer(FrameworkElement owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsContentElementCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
}
public class System.Windows.Automation.Peers.RibbonToggleButtonAutomationPeer : ToggleButtonAutomationPeer {
    public RibbonToggleButtonAutomationPeer(RibbonToggleButton owner);
    protected virtual string GetAccessKeyCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual string GetHelpTextCore();
}
public class System.Windows.Automation.Peers.RibbonToolTipAutomationPeer : ToolTipAutomationPeer {
    public RibbonToolTipAutomationPeer(RibbonToolTip owner);
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
}
public class System.Windows.Automation.Peers.RibbonTwoLineTextAutomationPeer : FrameworkElementAutomationPeer {
    public RibbonTwoLineTextAutomationPeer(RibbonTwoLineText owner);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsControlElementCore();
    protected virtual string GetNameCore();
}
public class System.Windows.Controls.ActivatingKeyTipEventArgs : RoutedEventArgs {
    public KeyTipHorizontalPlacement KeyTipHorizontalPlacement { get; public set; }
    public KeyTipVerticalPlacement KeyTipVerticalPlacement { get; public set; }
    public UIElement PlacementTarget { get; public set; }
    public double KeyTipHorizontalOffset { get; public set; }
    public double KeyTipVerticalOffset { get; public set; }
    public Visibility KeyTipVisibility { get; public set; }
    [CompilerGeneratedAttribute]
public KeyTipHorizontalPlacement get_KeyTipHorizontalPlacement();
    [CompilerGeneratedAttribute]
public void set_KeyTipHorizontalPlacement(KeyTipHorizontalPlacement value);
    [CompilerGeneratedAttribute]
public KeyTipVerticalPlacement get_KeyTipVerticalPlacement();
    [CompilerGeneratedAttribute]
public void set_KeyTipVerticalPlacement(KeyTipVerticalPlacement value);
    [CompilerGeneratedAttribute]
public UIElement get_PlacementTarget();
    [CompilerGeneratedAttribute]
public void set_PlacementTarget(UIElement value);
    public double get_KeyTipHorizontalOffset();
    public void set_KeyTipHorizontalOffset(double value);
    public double get_KeyTipVerticalOffset();
    public void set_KeyTipVerticalOffset(double value);
    [CompilerGeneratedAttribute]
public Visibility get_KeyTipVisibility();
    [CompilerGeneratedAttribute]
public void set_KeyTipVisibility(Visibility value);
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Controls.ActivatingKeyTipEventHandler : MulticastDelegate {
    public ActivatingKeyTipEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ActivatingKeyTipEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ActivatingKeyTipEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Controls.KeyTipAccessedEventArgs : RoutedEventArgs {
    public DependencyObject TargetKeyTipScope { get; public set; }
    [CompilerGeneratedAttribute]
public DependencyObject get_TargetKeyTipScope();
    [CompilerGeneratedAttribute]
public void set_TargetKeyTipScope(DependencyObject value);
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Controls.KeyTipAccessedEventHandler : MulticastDelegate {
    public KeyTipAccessedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, KeyTipAccessedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, KeyTipAccessedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Controls.KeyTipControl : Control {
    public static DependencyProperty TextProperty;
    public string Text { get; public set; }
    private static KeyTipControl();
    public string get_Text();
    public void set_Text(string value);
}
public enum System.Windows.Controls.KeyTipHorizontalPlacement : Enum {
    public int value__;
    public static KeyTipHorizontalPlacement KeyTipLeftAtTargetLeft;
    public static KeyTipHorizontalPlacement KeyTipLeftAtTargetCenter;
    public static KeyTipHorizontalPlacement KeyTipLeftAtTargetRight;
    public static KeyTipHorizontalPlacement KeyTipCenterAtTargetLeft;
    public static KeyTipHorizontalPlacement KeyTipCenterAtTargetCenter;
    public static KeyTipHorizontalPlacement KeyTipCenterAtTargetRight;
    public static KeyTipHorizontalPlacement KeyTipRightAtTargetLeft;
    public static KeyTipHorizontalPlacement KeyTipRightAtTargetCenter;
    public static KeyTipHorizontalPlacement KeyTipRightAtTargetRight;
}
public class System.Windows.Controls.KeyTipService : object {
    public static DependencyProperty KeyTipProperty;
    public static DependencyProperty IsKeyTipScopeProperty;
    public static DependencyProperty KeyTipStyleProperty;
    public static RoutedEvent ActivatingKeyTipEvent;
    public static RoutedEvent PreviewKeyTipAccessedEvent;
    public static RoutedEvent KeyTipAccessedEvent;
    private static KeyTipService();
    public static string GetKeyTip(DependencyObject element);
    public static void SetKeyTip(DependencyObject element, string value);
    public static bool GetIsKeyTipScope(DependencyObject element);
    public static void SetIsKeyTipScope(DependencyObject element, bool value);
    public static Style GetKeyTipStyle(DependencyObject element);
    public static void SetKeyTipStyle(DependencyObject element, Style value);
    public static void AddActivatingKeyTipHandler(DependencyObject element, ActivatingKeyTipEventHandler handler);
    public static void RemoveActivatingKeyTipHandler(DependencyObject element, ActivatingKeyTipEventHandler handler);
    public static void AddPreviewKeyTipAccessedHandler(DependencyObject element, KeyTipAccessedEventHandler handler);
    public static void RemovePreviewKeyTipAccessedHandler(DependencyObject element, KeyTipAccessedEventHandler handler);
    public static void AddKeyTipAccessedHandler(DependencyObject element, KeyTipAccessedEventHandler handler);
    public static void RemoveKeyTipAccessedHandler(DependencyObject element, KeyTipAccessedEventHandler handler);
    public static void DismissKeyTips();
}
public enum System.Windows.Controls.KeyTipVerticalPlacement : Enum {
    public int value__;
    public static KeyTipVerticalPlacement KeyTipTopAtTargetTop;
    public static KeyTipVerticalPlacement KeyTipTopAtTargetCenter;
    public static KeyTipVerticalPlacement KeyTipTopAtTargetBottom;
    public static KeyTipVerticalPlacement KeyTipCenterAtTargetTop;
    public static KeyTipVerticalPlacement KeyTipCenterAtTargetCenter;
    public static KeyTipVerticalPlacement KeyTipCenterAtTargetBottom;
    public static KeyTipVerticalPlacement KeyTipBottomAtTargetTop;
    public static KeyTipVerticalPlacement KeyTipBottomAtTargetCenter;
    public static KeyTipVerticalPlacement KeyTipBottomAtTargetBottom;
}
public interface System.Windows.Controls.Ribbon.Primitives.IProvideStarLayoutInfo {
    public IEnumerable`1<StarLayoutInfo> StarLayoutCombinations { get; }
    public abstract virtual IEnumerable`1<StarLayoutInfo> get_StarLayoutCombinations();
    public abstract virtual void OnStarSizeAllocationCompleted();
}
public interface System.Windows.Controls.Ribbon.Primitives.IProvideStarLayoutInfoBase {
    public UIElement TargetElement { get; }
    public abstract virtual void OnInitializeLayout();
    public abstract virtual UIElement get_TargetElement();
}
public interface System.Windows.Controls.Ribbon.Primitives.ISupportStarLayout {
    public bool IsStarLayoutPass { get; }
    public abstract virtual void RegisterStarLayoutProvider(IProvideStarLayoutInfoBase starLayoutInfoProvider);
    public abstract virtual void UnregisterStarLayoutProvider(IProvideStarLayoutInfoBase starLayoutInfoProvider);
    public abstract virtual bool get_IsStarLayoutPass();
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonContextualTabGroupsPanel : Panel {
    public static DependencyProperty RibbonProperty;
    public Ribbon Ribbon { get; }
    private static RibbonContextualTabGroupsPanel();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void OnRender(DrawingContext drawingContext);
    protected virtual void OnIsItemsHostChanged(bool oldIsItemsHost, bool newIsItemsHost);
    public Ribbon get_Ribbon();
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonGalleryCategoriesPanel : Panel {
    public UIElement TargetElement { get; }
    [DefaultValueAttribute("False")]
public bool CanHorizontallyScroll { get; public set; }
    [DefaultValueAttribute("True")]
public bool CanVerticallyScroll { get; public set; }
    public double ExtentWidth { get; }
    public double ExtentHeight { get; }
    public double ViewportWidth { get; }
    public double ViewportHeight { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public double HorizontalOffset { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public double VerticalOffset { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public ScrollViewer ScrollOwner { get; public set; }
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    public sealed virtual void OnInitializeLayout();
    public sealed virtual UIElement get_TargetElement();
    public sealed virtual void LineUp();
    public sealed virtual void LineDown();
    public sealed virtual void LineLeft();
    public sealed virtual void LineRight();
    public sealed virtual void PageUp();
    public sealed virtual void PageDown();
    public sealed virtual void PageLeft();
    public sealed virtual void PageRight();
    public sealed virtual void MouseWheelUp();
    public sealed virtual void MouseWheelDown();
    public sealed virtual void MouseWheelLeft();
    public sealed virtual void MouseWheelRight();
    public sealed virtual void SetHorizontalOffset(double offset);
    public sealed virtual void SetVerticalOffset(double offset);
    public sealed virtual Rect MakeVisible(Visual visual, Rect rectangle);
    public sealed virtual bool get_CanHorizontallyScroll();
    public sealed virtual void set_CanHorizontallyScroll(bool value);
    public sealed virtual bool get_CanVerticallyScroll();
    public sealed virtual void set_CanVerticallyScroll(bool value);
    public sealed virtual double get_ExtentWidth();
    public sealed virtual double get_ExtentHeight();
    public sealed virtual double get_ViewportWidth();
    public sealed virtual double get_ViewportHeight();
    public sealed virtual double get_HorizontalOffset();
    public sealed virtual double get_VerticalOffset();
    public sealed virtual ScrollViewer get_ScrollOwner();
    public sealed virtual void set_ScrollOwner(ScrollViewer value);
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonGalleryItemsPanel : Panel {
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonGroupItemsPanel : Panel {
    public IEnumerable`1<StarLayoutInfo> StarLayoutCombinations { get; }
    public UIElement TargetElement { get; }
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    public sealed virtual IEnumerable`1<StarLayoutInfo> get_StarLayoutCombinations();
    public sealed virtual void OnStarSizeAllocationCompleted();
    public sealed virtual UIElement get_TargetElement();
    public sealed virtual void OnInitializeLayout();
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonGroupsPanel : StackPanel {
    public static DependencyProperty IsStarLayoutPassProperty;
    public bool IsStarLayoutPass { get; private set; }
    private static RibbonGroupsPanel();
    public sealed virtual void RegisterStarLayoutProvider(IProvideStarLayoutInfoBase starLayoutInfoProvider);
    public sealed virtual void UnregisterStarLayoutProvider(IProvideStarLayoutInfoBase starLayoutInfoProvider);
    protected virtual Size MeasureOverride(Size availableSize);
    public sealed virtual bool get_IsStarLayoutPass();
    private void set_IsStarLayoutPass(bool value);
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonMenuItemsPanel : VirtualizingStackPanel {
    public bool IsStarLayoutPass { get; }
    private static RibbonMenuItemsPanel();
    public sealed virtual void RegisterStarLayoutProvider(IProvideStarLayoutInfoBase starLayoutInfoProvider);
    public sealed virtual void UnregisterStarLayoutProvider(IProvideStarLayoutInfoBase starLayoutInfoProvider);
    public sealed virtual bool get_IsStarLayoutPass();
    protected virtual void OnIsItemsHostChanged(bool oldIsItemsHost, bool newIsItemsHost);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonQuickAccessToolBarOverflowPanel : Panel {
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonQuickAccessToolBarPanel : VirtualizingPanel {
    protected virtual void OnItemsChanged(object sender, ItemsChangedEventArgs args);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonScrollButtonVisibilityConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonTabHeadersPanel : Panel {
    public static DependencyProperty RibbonProperty;
    public Ribbon Ribbon { get; }
    public ScrollViewer ScrollOwner { get; public set; }
    public double ExtentWidth { get; }
    public double HorizontalOffset { get; }
    public double ViewportWidth { get; }
    public bool CanVerticallyScroll { get; public set; }
    public bool CanHorizontallyScroll { get; public set; }
    public double ExtentHeight { get; }
    public double VerticalOffset { get; }
    public double ViewportHeight { get; }
    private static RibbonTabHeadersPanel();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void OnRender(DrawingContext drawingContext);
    protected virtual void OnIsItemsHostChanged(bool oldIsItemsHost, bool newIsItemsHost);
    public Ribbon get_Ribbon();
    public sealed virtual ScrollViewer get_ScrollOwner();
    public sealed virtual void set_ScrollOwner(ScrollViewer value);
    public sealed virtual void SetHorizontalOffset(double offset);
    public sealed virtual double get_ExtentWidth();
    public sealed virtual double get_HorizontalOffset();
    public sealed virtual double get_ViewportWidth();
    public sealed virtual void LineLeft();
    public sealed virtual void LineRight();
    public sealed virtual Rect MakeVisible(Visual visual, Rect rectangle);
    public sealed virtual void MouseWheelDown();
    public sealed virtual void MouseWheelLeft();
    public sealed virtual void MouseWheelRight();
    public sealed virtual void MouseWheelUp();
    public sealed virtual void LineDown();
    public sealed virtual void LineUp();
    public sealed virtual void PageDown();
    public sealed virtual void PageLeft();
    public sealed virtual void PageRight();
    public sealed virtual void PageUp();
    public sealed virtual void SetVerticalOffset(double offset);
    public sealed virtual bool get_CanVerticallyScroll();
    public sealed virtual void set_CanVerticallyScroll(bool value);
    public sealed virtual bool get_CanHorizontallyScroll();
    public sealed virtual void set_CanHorizontallyScroll(bool value);
    public sealed virtual double get_ExtentHeight();
    public sealed virtual double get_VerticalOffset();
    public sealed virtual double get_ViewportHeight();
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonTabsPanel : Panel {
    public ScrollViewer ScrollOwner { get; public set; }
    public double ExtentWidth { get; }
    public double HorizontalOffset { get; }
    public double ViewportWidth { get; }
    public bool CanVerticallyScroll { get; public set; }
    public bool CanHorizontallyScroll { get; public set; }
    public double ExtentHeight { get; }
    public double VerticalOffset { get; }
    public double ViewportHeight { get; }
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    public sealed virtual ScrollViewer get_ScrollOwner();
    public sealed virtual void set_ScrollOwner(ScrollViewer value);
    public sealed virtual void SetHorizontalOffset(double offset);
    public sealed virtual double get_ExtentWidth();
    public sealed virtual double get_HorizontalOffset();
    public sealed virtual double get_ViewportWidth();
    public sealed virtual void LineLeft();
    public sealed virtual void LineRight();
    public sealed virtual Rect MakeVisible(Visual visual, Rect rectangle);
    public sealed virtual void MouseWheelDown();
    public sealed virtual void MouseWheelLeft();
    public sealed virtual void MouseWheelRight();
    public sealed virtual void MouseWheelUp();
    public sealed virtual void LineDown();
    public sealed virtual void LineUp();
    public sealed virtual void PageDown();
    public sealed virtual void PageLeft();
    public sealed virtual void PageRight();
    public sealed virtual void PageUp();
    public sealed virtual void SetVerticalOffset(double offset);
    public sealed virtual bool get_CanVerticallyScroll();
    public sealed virtual void set_CanVerticallyScroll(bool value);
    public sealed virtual bool get_CanHorizontallyScroll();
    public sealed virtual void set_CanHorizontallyScroll(bool value);
    public sealed virtual double get_ExtentHeight();
    public sealed virtual double get_VerticalOffset();
    public sealed virtual double get_ViewportHeight();
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonTitlePanel : Panel {
    public static DependencyProperty RibbonProperty;
    public Ribbon Ribbon { get; }
    private static RibbonTitlePanel();
    public Ribbon get_Ribbon();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonWindowSmallIconConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class System.Windows.Controls.Ribbon.Primitives.StarLayoutInfo : DependencyObject {
    public static DependencyProperty RequestedStarWeightProperty;
    public static DependencyProperty RequestedStarMinWidthProperty;
    public static DependencyProperty RequestedStarMaxWidthProperty;
    public static DependencyProperty AllocatedStarWidthProperty;
    public double RequestedStarWeight { get; public set; }
    public double RequestedStarMinWidth { get; public set; }
    public double RequestedStarMaxWidth { get; public set; }
    public double AllocatedStarWidth { get; public set; }
    private static StarLayoutInfo();
    public double get_RequestedStarWeight();
    public void set_RequestedStarWeight(double value);
    public double get_RequestedStarMinWidth();
    public void set_RequestedStarMinWidth(double value);
    public double get_RequestedStarMaxWidth();
    public void set_RequestedStarMaxWidth(double value);
    public double get_AllocatedStarWidth();
    public void set_AllocatedStarWidth(double value);
}
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.Ribbon : Selector {
    public static RoutedEvent ExpandedEvent;
    public static RoutedEvent CollapsedEvent;
    public static DependencyProperty WindowIconVisibilityProperty;
    public static DependencyProperty IsHostedInRibbonWindowProperty;
    public static DependencyProperty ApplicationMenuProperty;
    public static DependencyProperty QuickAccessToolBarProperty;
    public static DependencyProperty HelpPaneContentProperty;
    public static DependencyProperty HelpPaneContentTemplateProperty;
    public static DependencyProperty IsMinimizedProperty;
    public static DependencyProperty IsDropDownOpenProperty;
    public static DependencyProperty IsCollapsedProperty;
    public static DependencyProperty TitleProperty;
    public static DependencyProperty TitleTemplateProperty;
    public static DependencyProperty ShowQuickAccessToolBarOnTopProperty;
    public static DependencyProperty ContextualTabGroupsSourceProperty;
    public static DependencyProperty ContextualTabGroupHeaderTemplateProperty;
    public static DependencyProperty ContextualTabGroupStyleProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty PressedBorderBrushProperty;
    public static DependencyProperty PressedBackgroundProperty;
    public static DependencyProperty CheckedBorderBrushProperty;
    public static DependencyProperty CheckedBackgroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty FocusedBackgroundProperty;
    public static DependencyProperty TabHeaderStyleProperty;
    public static DependencyProperty TabHeaderTemplateProperty;
    public Visibility WindowIconVisibility { get; public set; }
    public bool IsHostedInRibbonWindow { get; private set; }
    public RibbonApplicationMenu ApplicationMenu { get; public set; }
    public RibbonQuickAccessToolBar QuickAccessToolBar { get; public set; }
    public object HelpPaneContent { get; public set; }
    public DataTemplate HelpPaneContentTemplate { get; public set; }
    public bool IsMinimized { get; public set; }
    public bool IsDropDownOpen { get; public set; }
    public bool IsCollapsed { get; public set; }
    public object Title { get; public set; }
    public DataTemplate TitleTemplate { get; public set; }
    public bool ShowQuickAccessToolBarOnTop { get; public set; }
    public IEnumerable ContextualTabGroupsSource { get; public set; }
    [BindableAttribute("True")]
public Collection`1<RibbonContextualTabGroup> ContextualTabGroups { get; }
    public DataTemplate ContextualTabGroupHeaderTemplate { get; public set; }
    public Style ContextualTabGroupStyle { get; public set; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush PressedBorderBrush { get; public set; }
    public Brush PressedBackground { get; public set; }
    public Brush CheckedBorderBrush { get; public set; }
    public Brush CheckedBackground { get; public set; }
    public Brush FocusedBorderBrush { get; public set; }
    public Brush FocusedBackground { get; public set; }
    public Style TabHeaderStyle { get; public set; }
    public DataTemplate TabHeaderTemplate { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    private static Ribbon();
    public void add_Expanded(RoutedEventHandler value);
    public void remove_Expanded(RoutedEventHandler value);
    public void add_Collapsed(RoutedEventHandler value);
    public void remove_Collapsed(RoutedEventHandler value);
    public Visibility get_WindowIconVisibility();
    public void set_WindowIconVisibility(Visibility value);
    public bool get_IsHostedInRibbonWindow();
    private void set_IsHostedInRibbonWindow(bool value);
    public RibbonApplicationMenu get_ApplicationMenu();
    public void set_ApplicationMenu(RibbonApplicationMenu value);
    public RibbonQuickAccessToolBar get_QuickAccessToolBar();
    public void set_QuickAccessToolBar(RibbonQuickAccessToolBar value);
    public object get_HelpPaneContent();
    public void set_HelpPaneContent(object value);
    public DataTemplate get_HelpPaneContentTemplate();
    public void set_HelpPaneContentTemplate(DataTemplate value);
    public bool get_IsMinimized();
    public void set_IsMinimized(bool value);
    public bool get_IsDropDownOpen();
    public void set_IsDropDownOpen(bool value);
    public bool get_IsCollapsed();
    public void set_IsCollapsed(bool value);
    public object get_Title();
    public void set_Title(object value);
    public DataTemplate get_TitleTemplate();
    public void set_TitleTemplate(DataTemplate value);
    public bool get_ShowQuickAccessToolBarOnTop();
    public void set_ShowQuickAccessToolBarOnTop(bool value);
    public IEnumerable get_ContextualTabGroupsSource();
    public void set_ContextualTabGroupsSource(IEnumerable value);
    public Collection`1<RibbonContextualTabGroup> get_ContextualTabGroups();
    public DataTemplate get_ContextualTabGroupHeaderTemplate();
    public void set_ContextualTabGroupHeaderTemplate(DataTemplate value);
    public Style get_ContextualTabGroupStyle();
    public void set_ContextualTabGroupStyle(Style value);
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_PressedBorderBrush();
    public void set_PressedBorderBrush(Brush value);
    public Brush get_PressedBackground();
    public void set_PressedBackground(Brush value);
    public Brush get_CheckedBorderBrush();
    public void set_CheckedBorderBrush(Brush value);
    public Brush get_CheckedBackground();
    public void set_CheckedBackground(Brush value);
    public Brush get_FocusedBorderBrush();
    public void set_FocusedBorderBrush(Brush value);
    public Brush get_FocusedBackground();
    public void set_FocusedBackground(Brush value);
    public Style get_TabHeaderStyle();
    public void set_TabHeaderStyle(Style value);
    public DataTemplate get_TabHeaderTemplate();
    public void set_TabHeaderTemplate(DataTemplate value);
    public virtual void OnApplyTemplate();
    protected internal virtual IEnumerator get_LogicalChildren();
    protected virtual void OnPreviewMouseWheel(MouseWheelEventArgs e);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnSelectionChanged(SelectionChangedEventArgs e);
    protected virtual void OnPreviewMouseDown(MouseButtonEventArgs e);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.Ribbon.RibbonApplicationMenu : RibbonMenuButton {
    public static DependencyProperty FooterPaneContentProperty;
    public static DependencyProperty FooterPaneContentTemplateProperty;
    public static DependencyProperty FooterPaneContentTemplateSelectorProperty;
    public static DependencyProperty AuxiliaryPaneContentProperty;
    public static DependencyProperty AuxiliaryPaneContentTemplateProperty;
    public static DependencyProperty AuxiliaryPaneContentTemplateSelectorProperty;
    public object FooterPaneContent { get; public set; }
    public DataTemplate FooterPaneContentTemplate { get; public set; }
    public DataTemplateSelector FooterPaneContentTemplateSelector { get; public set; }
    public object AuxiliaryPaneContent { get; public set; }
    public DataTemplate AuxiliaryPaneContentTemplate { get; public set; }
    public DataTemplateSelector AuxiliaryPaneContentTemplateSelector { get; public set; }
    private static RibbonApplicationMenu();
    public object get_FooterPaneContent();
    public void set_FooterPaneContent(object value);
    public DataTemplate get_FooterPaneContentTemplate();
    public void set_FooterPaneContentTemplate(DataTemplate value);
    public DataTemplateSelector get_FooterPaneContentTemplateSelector();
    public void set_FooterPaneContentTemplateSelector(DataTemplateSelector value);
    public object get_AuxiliaryPaneContent();
    public void set_AuxiliaryPaneContent(object value);
    public DataTemplate get_AuxiliaryPaneContentTemplate();
    public void set_AuxiliaryPaneContentTemplate(DataTemplate value);
    public DataTemplateSelector get_AuxiliaryPaneContentTemplateSelector();
    public void set_AuxiliaryPaneContentTemplateSelector(DataTemplateSelector value);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool ShouldApplyItemContainerStyle(DependencyObject container, object item);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public virtual void OnApplyTemplate();
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
}
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.Ribbon.RibbonApplicationMenuItem : RibbonMenuItem {
    public static DependencyProperty LevelProperty;
    public RibbonApplicationMenuItemLevel Level { get; internal set; }
    private static RibbonApplicationMenuItem();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool ShouldApplyItemContainerStyle(DependencyObject container, object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    public virtual void OnApplyTemplate();
    public RibbonApplicationMenuItemLevel get_Level();
    internal void set_Level(RibbonApplicationMenuItemLevel value);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
}
public enum System.Windows.Controls.Ribbon.RibbonApplicationMenuItemLevel : Enum {
    public int value__;
    public static RibbonApplicationMenuItemLevel Top;
    public static RibbonApplicationMenuItemLevel Middle;
    public static RibbonApplicationMenuItemLevel Sub;
}
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.Ribbon.RibbonApplicationSplitMenuItem : RibbonSplitMenuItem {
    public static DependencyProperty LevelProperty;
    public RibbonApplicationMenuItemLevel Level { get; internal set; }
    private static RibbonApplicationSplitMenuItem();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool ShouldApplyItemContainerStyle(DependencyObject container, object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    public virtual void OnApplyTemplate();
    public RibbonApplicationMenuItemLevel get_Level();
    internal void set_Level(RibbonApplicationMenuItemLevel value);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
}
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonButton : Button {
    public static DependencyProperty LargeImageSourceProperty;
    public static DependencyProperty SmallImageSourceProperty;
    public static DependencyProperty LabelProperty;
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty ControlSizeDefinitionProperty;
    public static DependencyProperty IsInControlGroupProperty;
    public static DependencyProperty QuickAccessToolBarControlSizeDefinitionProperty;
    public static DependencyProperty IsInQuickAccessToolBarProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty PressedBorderBrushProperty;
    public static DependencyProperty PressedBackgroundProperty;
    public static DependencyProperty FocusedBackgroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty ShowKeyboardCuesProperty;
    public static DependencyProperty QuickAccessToolBarIdProperty;
    public static DependencyProperty CanAddToQuickAccessToolBarDirectlyProperty;
    public static DependencyProperty KeyTipProperty;
    public ImageSource LargeImageSource { get; public set; }
    public ImageSource SmallImageSource { get; public set; }
    public string Label { get; public set; }
    public string ToolTipTitle { get; public set; }
    public string ToolTipDescription { get; public set; }
    public ImageSource ToolTipImageSource { get; public set; }
    public string ToolTipFooterTitle { get; public set; }
    public string ToolTipFooterDescription { get; public set; }
    public ImageSource ToolTipFooterImageSource { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    public RibbonControlSizeDefinition ControlSizeDefinition { get; public set; }
    public bool IsInControlGroup { get; internal set; }
    public RibbonControlSizeDefinition QuickAccessToolBarControlSizeDefinition { get; public set; }
    public bool IsInQuickAccessToolBar { get; internal set; }
    public Ribbon Ribbon { get; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush PressedBorderBrush { get; public set; }
    public Brush PressedBackground { get; public set; }
    public Brush FocusedBackground { get; public set; }
    public Brush FocusedBorderBrush { get; public set; }
    public bool ShowKeyboardCues { get; }
    public object QuickAccessToolBarId { get; public set; }
    public bool CanAddToQuickAccessToolBarDirectly { get; public set; }
    public string KeyTip { get; public set; }
    private static RibbonButton();
    public virtual void OnApplyTemplate();
    public ImageSource get_LargeImageSource();
    public void set_LargeImageSource(ImageSource value);
    public ImageSource get_SmallImageSource();
    public void set_SmallImageSource(ImageSource value);
    public string get_Label();
    public void set_Label(string value);
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public string get_ToolTipDescription();
    public void set_ToolTipDescription(string value);
    public ImageSource get_ToolTipImageSource();
    public void set_ToolTipImageSource(ImageSource value);
    public string get_ToolTipFooterTitle();
    public void set_ToolTipFooterTitle(string value);
    public string get_ToolTipFooterDescription();
    public void set_ToolTipFooterDescription(string value);
    public ImageSource get_ToolTipFooterImageSource();
    public void set_ToolTipFooterImageSource(ImageSource value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public RibbonControlSizeDefinition get_ControlSizeDefinition();
    public void set_ControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInControlGroup();
    internal void set_IsInControlGroup(bool value);
    public RibbonControlSizeDefinition get_QuickAccessToolBarControlSizeDefinition();
    public void set_QuickAccessToolBarControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInQuickAccessToolBar();
    internal void set_IsInQuickAccessToolBar(bool value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public Ribbon get_Ribbon();
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_PressedBorderBrush();
    public void set_PressedBorderBrush(Brush value);
    public Brush get_PressedBackground();
    public void set_PressedBackground(Brush value);
    public Brush get_FocusedBackground();
    public void set_FocusedBackground(Brush value);
    public Brush get_FocusedBorderBrush();
    public void set_FocusedBorderBrush(Brush value);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    public bool get_ShowKeyboardCues();
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnClick();
    public object get_QuickAccessToolBarId();
    public void set_QuickAccessToolBarId(object value);
    public bool get_CanAddToQuickAccessToolBarDirectly();
    public void set_CanAddToQuickAccessToolBarDirectly(bool value);
    public string get_KeyTip();
    public void set_KeyTip(string value);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonCheckBox : CheckBox {
    public static DependencyProperty LargeImageSourceProperty;
    public static DependencyProperty SmallImageSourceProperty;
    public static DependencyProperty LabelProperty;
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    public static DependencyProperty ControlSizeDefinitionProperty;
    public static DependencyProperty IsInControlGroupProperty;
    public static DependencyProperty QuickAccessToolBarControlSizeDefinitionProperty;
    public static DependencyProperty IsInQuickAccessToolBarProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty PressedBorderBrushProperty;
    public static DependencyProperty PressedBackgroundProperty;
    public static DependencyProperty CheckedBackgroundProperty;
    public static DependencyProperty CheckedBorderBrushProperty;
    public static DependencyProperty FocusedBackgroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty ShowKeyboardCuesProperty;
    public static DependencyProperty QuickAccessToolBarIdProperty;
    public static DependencyProperty CanAddToQuickAccessToolBarDirectlyProperty;
    public static DependencyProperty KeyTipProperty;
    public ImageSource LargeImageSource { get; public set; }
    public ImageSource SmallImageSource { get; public set; }
    public string Label { get; public set; }
    public string ToolTipTitle { get; public set; }
    public string ToolTipDescription { get; public set; }
    public ImageSource ToolTipImageSource { get; public set; }
    public string ToolTipFooterTitle { get; public set; }
    public string ToolTipFooterDescription { get; public set; }
    public ImageSource ToolTipFooterImageSource { get; public set; }
    public RibbonControlSizeDefinition ControlSizeDefinition { get; public set; }
    public bool IsInControlGroup { get; internal set; }
    public RibbonControlSizeDefinition QuickAccessToolBarControlSizeDefinition { get; public set; }
    public bool IsInQuickAccessToolBar { get; internal set; }
    public Ribbon Ribbon { get; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush PressedBorderBrush { get; public set; }
    public Brush PressedBackground { get; public set; }
    public Brush CheckedBackground { get; public set; }
    public Brush CheckedBorderBrush { get; public set; }
    public Brush FocusedBackground { get; public set; }
    public Brush FocusedBorderBrush { get; public set; }
    public bool ShowKeyboardCues { get; }
    public object QuickAccessToolBarId { get; public set; }
    public bool CanAddToQuickAccessToolBarDirectly { get; public set; }
    public string KeyTip { get; public set; }
    private static RibbonCheckBox();
    public virtual void OnApplyTemplate();
    public ImageSource get_LargeImageSource();
    public void set_LargeImageSource(ImageSource value);
    public ImageSource get_SmallImageSource();
    public void set_SmallImageSource(ImageSource value);
    public string get_Label();
    public void set_Label(string value);
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public string get_ToolTipDescription();
    public void set_ToolTipDescription(string value);
    public ImageSource get_ToolTipImageSource();
    public void set_ToolTipImageSource(ImageSource value);
    public string get_ToolTipFooterTitle();
    public void set_ToolTipFooterTitle(string value);
    public string get_ToolTipFooterDescription();
    public void set_ToolTipFooterDescription(string value);
    public ImageSource get_ToolTipFooterImageSource();
    public void set_ToolTipFooterImageSource(ImageSource value);
    public RibbonControlSizeDefinition get_ControlSizeDefinition();
    public void set_ControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInControlGroup();
    internal void set_IsInControlGroup(bool value);
    public RibbonControlSizeDefinition get_QuickAccessToolBarControlSizeDefinition();
    public void set_QuickAccessToolBarControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInQuickAccessToolBar();
    internal void set_IsInQuickAccessToolBar(bool value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public Ribbon get_Ribbon();
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_PressedBorderBrush();
    public void set_PressedBorderBrush(Brush value);
    public Brush get_PressedBackground();
    public void set_PressedBackground(Brush value);
    public Brush get_CheckedBackground();
    public void set_CheckedBackground(Brush value);
    public Brush get_CheckedBorderBrush();
    public void set_CheckedBorderBrush(Brush value);
    public Brush get_FocusedBackground();
    public void set_FocusedBackground(Brush value);
    public Brush get_FocusedBorderBrush();
    public void set_FocusedBorderBrush(Brush value);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    public bool get_ShowKeyboardCues();
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnClick();
    public object get_QuickAccessToolBarId();
    public void set_QuickAccessToolBarId(object value);
    public bool get_CanAddToQuickAccessToolBarDirectly();
    public void set_CanAddToQuickAccessToolBarDirectly(bool value);
    public string get_KeyTip();
    public void set_KeyTip(string value);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
public class System.Windows.Controls.Ribbon.RibbonComboBox : RibbonMenuButton {
    public static DependencyProperty IsEditableProperty;
    public static DependencyProperty TextProperty;
    public static DependencyProperty IsReadOnlyProperty;
    public static DependencyProperty ShowKeyboardCuesProperty;
    public static DependencyProperty SelectionBoxWidthProperty;
    public static DependencyProperty SelectionBoxItemProperty;
    public static DependencyProperty SelectionBoxItemTemplateProperty;
    public static DependencyProperty SelectionBoxItemTemplateSelectorProperty;
    public static DependencyProperty SelectionBoxItemStringFormatProperty;
    public static DependencyProperty StaysOpenOnEditProperty;
    public bool IsEditable { get; public set; }
    public string Text { get; public set; }
    public bool IsReadOnly { get; public set; }
    public bool ShowKeyboardCues { get; }
    public double SelectionBoxWidth { get; public set; }
    public object SelectionBoxItem { get; private set; }
    public DataTemplate SelectionBoxItemTemplate { get; private set; }
    public DataTemplateSelector SelectionBoxItemTemplateSelector { get; private set; }
    public string SelectionBoxItemStringFormat { get; private set; }
    public bool StaysOpenOnEdit { get; public set; }
    private static RibbonComboBox();
    public bool get_IsEditable();
    public void set_IsEditable(bool value);
    public string get_Text();
    public void set_Text(string value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public bool get_ShowKeyboardCues();
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    public double get_SelectionBoxWidth();
    public void set_SelectionBoxWidth(double value);
    public object get_SelectionBoxItem();
    private void set_SelectionBoxItem(object value);
    public DataTemplate get_SelectionBoxItemTemplate();
    private void set_SelectionBoxItemTemplate(DataTemplate value);
    public DataTemplateSelector get_SelectionBoxItemTemplateSelector();
    private void set_SelectionBoxItemTemplateSelector(DataTemplateSelector value);
    public string get_SelectionBoxItemStringFormat();
    private void set_SelectionBoxItemStringFormat(string value);
    public bool get_StaysOpenOnEdit();
    public void set_StaysOpenOnEdit(bool value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnPreviewMouseDown(MouseButtonEventArgs e);
    protected virtual void OnTextInput(TextCompositionEventArgs e);
    public virtual void OnApplyTemplate();
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
public static class System.Windows.Controls.Ribbon.RibbonCommands : object {
    public static RoutedUICommand AddToQuickAccessToolBarCommand { get; private set; }
    public static RoutedUICommand RemoveFromQuickAccessToolBarCommand { get; private set; }
    public static RoutedUICommand MinimizeRibbonCommand { get; private set; }
    public static RoutedUICommand MaximizeRibbonCommand { get; private set; }
    public static RoutedUICommand ShowQuickAccessToolBarAboveRibbonCommand { get; private set; }
    public static RoutedUICommand ShowQuickAccessToolBarBelowRibbonCommand { get; private set; }
    private static RibbonCommands();
    [CompilerGeneratedAttribute]
public static RoutedUICommand get_AddToQuickAccessToolBarCommand();
    [CompilerGeneratedAttribute]
private static void set_AddToQuickAccessToolBarCommand(RoutedUICommand value);
    [CompilerGeneratedAttribute]
public static RoutedUICommand get_RemoveFromQuickAccessToolBarCommand();
    [CompilerGeneratedAttribute]
private static void set_RemoveFromQuickAccessToolBarCommand(RoutedUICommand value);
    [CompilerGeneratedAttribute]
public static RoutedUICommand get_MinimizeRibbonCommand();
    [CompilerGeneratedAttribute]
private static void set_MinimizeRibbonCommand(RoutedUICommand value);
    [CompilerGeneratedAttribute]
public static RoutedUICommand get_MaximizeRibbonCommand();
    [CompilerGeneratedAttribute]
private static void set_MaximizeRibbonCommand(RoutedUICommand value);
    [CompilerGeneratedAttribute]
public static RoutedUICommand get_ShowQuickAccessToolBarAboveRibbonCommand();
    [CompilerGeneratedAttribute]
private static void set_ShowQuickAccessToolBarAboveRibbonCommand(RoutedUICommand value);
    [CompilerGeneratedAttribute]
public static RoutedUICommand get_ShowQuickAccessToolBarBelowRibbonCommand();
    [CompilerGeneratedAttribute]
private static void set_ShowQuickAccessToolBarBelowRibbonCommand(RoutedUICommand value);
}
public class System.Windows.Controls.Ribbon.RibbonContentPresenter : ContentPresenter {
    public static DependencyProperty ControlSizeDefinitionProperty;
    public static DependencyProperty IsInControlGroupProperty;
    public static DependencyProperty IsInQuickAccessToolBarProperty;
    public RibbonControlSizeDefinition ControlSizeDefinition { get; public set; }
    public bool IsInControlGroup { get; internal set; }
    public bool IsInQuickAccessToolBar { get; internal set; }
    private static RibbonContentPresenter();
    public RibbonControlSizeDefinition get_ControlSizeDefinition();
    public void set_ControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInControlGroup();
    internal void set_IsInControlGroup(bool value);
    public bool get_IsInQuickAccessToolBar();
    internal void set_IsInQuickAccessToolBar(bool value);
    public virtual void OnApplyTemplate();
    protected virtual void OnTemplateChanged(DataTemplate oldTemplate, DataTemplate newTemplate);
}
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.Ribbon.RibbonContextMenu : ContextMenu {
    public static DependencyProperty HasGalleryProperty;
    public bool HasGallery { get; private set; }
    private static RibbonContextMenu();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool ShouldApplyItemContainerStyle(DependencyObject container, object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    public bool get_HasGallery();
    private void set_HasGallery(bool value);
}
[ContentPropertyAttribute("Header")]
public class System.Windows.Controls.Ribbon.RibbonContextualTabGroup : Control {
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty HeaderTemplateProperty;
    public static DependencyProperty HeaderTemplateSelectorProperty;
    public static DependencyProperty HeaderStringFormatProperty;
    public static DependencyProperty RibbonProperty;
    public object Header { get; public set; }
    public DataTemplate HeaderTemplate { get; public set; }
    public DataTemplateSelector HeaderTemplateSelector { get; public set; }
    public string HeaderStringFormat { get; public set; }
    public Ribbon Ribbon { get; }
    private static RibbonContextualTabGroup();
    public object get_Header();
    public void set_Header(object value);
    protected virtual void OnHeaderChanged(object oldHeader, object newHeader);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public DataTemplateSelector get_HeaderTemplateSelector();
    public void set_HeaderTemplateSelector(DataTemplateSelector value);
    public string get_HeaderStringFormat();
    public void set_HeaderStringFormat(string value);
    public Ribbon get_Ribbon();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    protected virtual void OnMouseUp(MouseButtonEventArgs e);
}
public class System.Windows.Controls.Ribbon.RibbonContextualTabGroupItemsControl : ItemsControl {
    public static DependencyProperty RibbonProperty;
    public Ribbon Ribbon { get; }
    private static RibbonContextualTabGroupItemsControl();
    public Ribbon get_Ribbon();
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public virtual void OnApplyTemplate();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
}
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonControl : ContentControl {
    public static DependencyProperty ControlSizeDefinitionProperty;
    public static DependencyProperty IsInControlGroupProperty;
    public static DependencyProperty IsInQuickAccessToolBarProperty;
    public RibbonControlSizeDefinition ControlSizeDefinition { get; public set; }
    public bool IsInControlGroup { get; internal set; }
    public bool IsInQuickAccessToolBar { get; internal set; }
    private static RibbonControl();
    public RibbonControlSizeDefinition get_ControlSizeDefinition();
    public void set_ControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInControlGroup();
    internal void set_IsInControlGroup(bool value);
    public bool get_IsInQuickAccessToolBar();
    internal void set_IsInQuickAccessToolBar(bool value);
    public virtual void OnApplyTemplate();
    protected virtual void OnTemplateChanged(ControlTemplate oldTemplate, ControlTemplate newTemplate);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
public class System.Windows.Controls.Ribbon.RibbonControlGroup : ItemsControl {
    public static DependencyProperty ControlSizeDefinitionProperty;
    public static DependencyProperty RibbonProperty;
    public RibbonControlSizeDefinition ControlSizeDefinition { get; public set; }
    public Ribbon Ribbon { get; }
    private static RibbonControlGroup();
    public virtual void OnApplyTemplate();
    public RibbonControlSizeDefinition get_ControlSizeDefinition();
    public void set_ControlSizeDefinition(RibbonControlSizeDefinition value);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    public Ribbon get_Ribbon();
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[TypeConverterAttribute("System.Windows.Controls.Ribbon.RibbonControlLengthConverter")]
public class System.Windows.Controls.Ribbon.RibbonControlLength : ValueType {
    private double _unitValue;
    private RibbonControlLengthUnitType _unitType;
    public bool IsAbsolute { get; }
    public bool IsAuto { get; }
    public bool IsStar { get; }
    public double Value { get; }
    public RibbonControlLengthUnitType RibbonControlLengthUnitType { get; }
    public static RibbonControlLength Auto { get; }
    public RibbonControlLength(double pixels);
    public RibbonControlLength(double value, RibbonControlLengthUnitType type);
    private static RibbonControlLength();
    public static bool op_Equality(RibbonControlLength length1, RibbonControlLength length2);
    public static bool op_Inequality(RibbonControlLength length1, RibbonControlLength length2);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RibbonControlLength other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public bool get_IsAbsolute();
    public bool get_IsAuto();
    public bool get_IsStar();
    public double get_Value();
    public RibbonControlLengthUnitType get_RibbonControlLengthUnitType();
    public static RibbonControlLength get_Auto();
}
public class System.Windows.Controls.Ribbon.RibbonControlLengthConverter : TypeConverter {
    private static RibbonControlLengthConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public enum System.Windows.Controls.Ribbon.RibbonControlLengthUnitType : Enum {
    public int value__;
    public static RibbonControlLengthUnitType Auto;
    public static RibbonControlLengthUnitType Pixel;
    public static RibbonControlLengthUnitType Item;
    public static RibbonControlLengthUnitType Star;
}
public static class System.Windows.Controls.Ribbon.RibbonControlService : object {
    public static DependencyProperty LargeImageSourceProperty;
    public static DependencyProperty SmallImageSourceProperty;
    public static DependencyProperty LabelProperty;
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty PressedBorderBrushProperty;
    public static DependencyProperty PressedBackgroundProperty;
    public static DependencyProperty CheckedBackgroundProperty;
    public static DependencyProperty CheckedBorderBrushProperty;
    public static DependencyProperty FocusedBackgroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty ControlSizeDefinitionProperty;
    public static DependencyProperty DefaultControlSizeDefinitionProperty;
    public static DependencyProperty IsInControlGroupProperty;
    public static DependencyProperty CanAddToQuickAccessToolBarDirectlyProperty;
    public static DependencyProperty IsInQuickAccessToolBarProperty;
    public static DependencyProperty QuickAccessToolBarControlSizeDefinitionProperty;
    public static DependencyProperty QuickAccessToolBarIdProperty;
    public static DependencyProperty ShowKeyboardCuesProperty;
    public static RoutedEvent DismissPopupEvent;
    private static RibbonControlService();
    public static ImageSource GetLargeImageSource(DependencyObject element);
    public static void SetLargeImageSource(DependencyObject element, ImageSource value);
    public static ImageSource GetSmallImageSource(DependencyObject element);
    public static void SetSmallImageSource(DependencyObject element, ImageSource value);
    public static string GetLabel(DependencyObject element);
    public static void SetLabel(DependencyObject element, string value);
    public static string GetToolTipTitle(DependencyObject element);
    public static void SetToolTipTitle(DependencyObject element, string value);
    public static string GetToolTipDescription(DependencyObject element);
    public static void SetToolTipDescription(DependencyObject element, string value);
    public static ImageSource GetToolTipImageSource(DependencyObject element);
    public static void SetToolTipImageSource(DependencyObject element, ImageSource value);
    public static string GetToolTipFooterTitle(DependencyObject element);
    public static void SetToolTipFooterTitle(DependencyObject element, string value);
    public static string GetToolTipFooterDescription(DependencyObject element);
    public static void SetToolTipFooterDescription(DependencyObject element, string value);
    public static ImageSource GetToolTipFooterImageSource(DependencyObject element);
    public static void SetToolTipFooterImageSource(DependencyObject element, ImageSource value);
    public static Ribbon GetRibbon(DependencyObject element);
    public static Brush GetMouseOverBorderBrush(DependencyObject element);
    public static void SetMouseOverBorderBrush(DependencyObject element, Brush value);
    public static Brush GetMouseOverBackground(DependencyObject element);
    public static void SetMouseOverBackground(DependencyObject element, Brush value);
    public static Brush GetPressedBorderBrush(DependencyObject element);
    public static void SetPressedBorderBrush(DependencyObject element, Brush value);
    public static Brush GetPressedBackground(DependencyObject element);
    public static void SetPressedBackground(DependencyObject element, Brush value);
    public static Brush GetCheckedBackground(DependencyObject element);
    public static void SetCheckedBackground(DependencyObject element, Brush value);
    public static Brush GetCheckedBorderBrush(DependencyObject element);
    public static void SetCheckedBorderBrush(DependencyObject element, Brush value);
    public static Brush GetFocusedBackground(DependencyObject element);
    public static void SetFocusedBackground(DependencyObject element, Brush value);
    public static Brush GetFocusedBorderBrush(DependencyObject element);
    public static void SetFocusedBorderBrush(DependencyObject element, Brush value);
    public static CornerRadius GetCornerRadius(DependencyObject element);
    public static void SetCornerRadius(DependencyObject element, CornerRadius value);
    public static RibbonControlSizeDefinition GetControlSizeDefinition(DependencyObject element);
    public static void SetControlSizeDefinition(DependencyObject element, RibbonControlSizeDefinition value);
    public static RibbonControlSizeDefinition GetDefaultControlSizeDefinition(DependencyObject element);
    public static void SetDefaultControlSizeDefinition(DependencyObject element, RibbonControlSizeDefinition value);
    public static bool GetIsInControlGroup(DependencyObject element);
    public static bool GetCanAddToQuickAccessToolBarDirectly(DependencyObject element);
    public static void SetCanAddToQuickAccessToolBarDirectly(DependencyObject element, bool value);
    public static bool GetIsInQuickAccessToolBar(DependencyObject element);
    public static RibbonControlSizeDefinition GetQuickAccessToolBarControlSizeDefinition(DependencyObject element);
    public static void SetQuickAccessToolBarControlSizeDefinition(DependencyObject element, RibbonControlSizeDefinition value);
    public static object GetQuickAccessToolBarId(DependencyObject element);
    public static void SetQuickAccessToolBarId(DependencyObject element, object value);
    public static bool GetShowKeyboardCues(DependencyObject element);
    public static void AddDismissPopupHandler(DependencyObject element, RibbonDismissPopupEventHandler handler);
    public static void RemoveDismissPopupHandler(DependencyObject element, RibbonDismissPopupEventHandler handler);
}
public class System.Windows.Controls.Ribbon.RibbonControlSizeDefinition : Freezable {
    public static DependencyProperty ImageSizeProperty;
    public static DependencyProperty IsLabelVisibleProperty;
    public static DependencyProperty IsCollapsedProperty;
    public static DependencyProperty WidthProperty;
    public static DependencyProperty MinWidthProperty;
    public static DependencyProperty MaxWidthProperty;
    public RibbonImageSize ImageSize { get; public set; }
    public bool IsLabelVisible { get; public set; }
    public bool IsCollapsed { get; public set; }
    public RibbonControlLength Width { get; public set; }
    public RibbonControlLength MinWidth { get; public set; }
    public RibbonControlLength MaxWidth { get; public set; }
    private static RibbonControlSizeDefinition();
    public RibbonImageSize get_ImageSize();
    public void set_ImageSize(RibbonImageSize value);
    public bool get_IsLabelVisible();
    public void set_IsLabelVisible(bool value);
    public bool get_IsCollapsed();
    public void set_IsCollapsed(bool value);
    public RibbonControlLength get_Width();
    public void set_Width(RibbonControlLength value);
    public RibbonControlLength get_MinWidth();
    public void set_MinWidth(RibbonControlLength value);
    public RibbonControlLength get_MaxWidth();
    public void set_MaxWidth(RibbonControlLength value);
    protected virtual Freezable CreateInstanceCore();
}
public class System.Windows.Controls.Ribbon.RibbonControlSizeDefinitionCollection : FreezableCollection`1<RibbonControlSizeDefinition> {
    protected virtual Freezable CreateInstanceCore();
}
public class System.Windows.Controls.Ribbon.RibbonDismissPopupEventArgs : RoutedEventArgs {
    public RibbonDismissPopupMode DismissMode { get; private set; }
    public RibbonDismissPopupEventArgs(RibbonDismissPopupMode dismissMode);
    [CompilerGeneratedAttribute]
public RibbonDismissPopupMode get_DismissMode();
    [CompilerGeneratedAttribute]
private void set_DismissMode(RibbonDismissPopupMode value);
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Controls.Ribbon.RibbonDismissPopupEventHandler : MulticastDelegate {
    public RibbonDismissPopupEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RibbonDismissPopupEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RibbonDismissPopupEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Controls.Ribbon.RibbonDismissPopupMode : Enum {
    public int value__;
    public static RibbonDismissPopupMode Always;
    public static RibbonDismissPopupMode MousePhysicallyNotOver;
}
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonFilterMenuButton : RibbonMenuButton {
    private static RibbonFilterMenuButton();
    public virtual void OnApplyTemplate();
    protected virtual void OnDismissPopup(RibbonDismissPopupEventArgs e);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
}
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonGallery : ItemsControl {
    public static DependencyProperty MinColumnCountProperty;
    public static DependencyProperty MaxColumnCountProperty;
    public static DependencyProperty ColumnsStretchToFillProperty;
    public static DependencyProperty IsSharedColumnSizeScopeProperty;
    public static RoutedEvent SelectionChangedEvent;
    public static DependencyProperty SelectedItemProperty;
    public static DependencyProperty SelectedValueProperty;
    public static DependencyProperty SelectedValuePathProperty;
    public static DependencyProperty IsSynchronizedWithCurrentItemProperty;
    public static DependencyProperty HighlightedItemProperty;
    public static DependencyProperty CanUserFilterProperty;
    public static DependencyProperty FilterItemContainerStyleProperty;
    public static DependencyProperty AllFilterItemContainerStyleProperty;
    public static DependencyProperty FilterItemContainerStyleSelectorProperty;
    public static DependencyProperty FilterMenuButtonStyleProperty;
    public static DependencyProperty FilterPaneContentProperty;
    public static DependencyProperty FilterPaneContentTemplateProperty;
    public static DependencyProperty FilterItemTemplateProperty;
    public static DependencyProperty AllFilterItemTemplateProperty;
    public static DependencyProperty FilterItemTemplateSelectorProperty;
    public static DependencyProperty CategoryTemplateProperty;
    public static DependencyProperty CategoryStyleProperty;
    public static DependencyProperty GalleryItemTemplateProperty;
    public static DependencyProperty GalleryItemStyleProperty;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty PreviewCommandParameterProperty;
    public static DependencyProperty CommandTargetProperty;
    public static DependencyProperty SmallImageSourceProperty;
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty QuickAccessToolBarIdProperty;
    public static DependencyProperty CanAddToQuickAccessToolBarDirectlyProperty;
    public int MinColumnCount { get; public set; }
    public int MaxColumnCount { get; public set; }
    public bool ColumnsStretchToFill { get; public set; }
    public bool IsSharedColumnSizeScope { get; public set; }
    public object SelectedItem { get; public set; }
    public object SelectedValue { get; public set; }
    [LocalizabilityAttribute("17")]
public string SelectedValuePath { get; public set; }
    public Nullable`1<bool> IsSynchronizedWithCurrentItem { get; public set; }
    public object HighlightedItem { get; internal set; }
    public static RoutedCommand FilterCommand { get; private set; }
    public bool CanUserFilter { get; public set; }
    public Style FilterItemContainerStyle { get; public set; }
    public Style AllFilterItemContainerStyle { get; public set; }
    public StyleSelector FilterItemContainerStyleSelector { get; public set; }
    public Style FilterMenuButtonStyle { get; public set; }
    public object FilterPaneContent { get; public set; }
    public DataTemplate FilterPaneContentTemplate { get; public set; }
    public DataTemplate FilterItemTemplate { get; public set; }
    public DataTemplate AllFilterItemTemplate { get; public set; }
    public DataTemplateSelector FilterItemTemplateSelector { get; public set; }
    public static object AllFilterItem { get; }
    [BindableAttribute("True")]
public DataTemplate CategoryTemplate { get; public set; }
    public Style CategoryStyle { get; public set; }
    public DataTemplate GalleryItemTemplate { get; public set; }
    public Style GalleryItemStyle { get; public set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public object PreviewCommandParameter { get; public set; }
    public IInputElement CommandTarget { get; public set; }
    protected bool IsEnabledCore { get; }
    public ImageSource SmallImageSource { get; public set; }
    public string ToolTipTitle { get; public set; }
    public string ToolTipDescription { get; public set; }
    public ImageSource ToolTipImageSource { get; public set; }
    public string ToolTipFooterTitle { get; public set; }
    public string ToolTipFooterDescription { get; public set; }
    public ImageSource ToolTipFooterImageSource { get; public set; }
    public Ribbon Ribbon { get; }
    public object QuickAccessToolBarId { get; public set; }
    public bool CanAddToQuickAccessToolBarDirectly { get; public set; }
    private static RibbonGallery();
    public virtual void OnApplyTemplate();
    public int get_MinColumnCount();
    public void set_MinColumnCount(int value);
    public int get_MaxColumnCount();
    public void set_MaxColumnCount(int value);
    public bool get_ColumnsStretchToFill();
    public void set_ColumnsStretchToFill(bool value);
    public bool get_IsSharedColumnSizeScope();
    public void set_IsSharedColumnSizeScope(bool value);
    public void add_SelectionChanged(RoutedPropertyChangedEventHandler`1<object> value);
    public void remove_SelectionChanged(RoutedPropertyChangedEventHandler`1<object> value);
    protected virtual void OnSelectionChanged(RoutedPropertyChangedEventArgs`1<object> e);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    public object get_SelectedValue();
    public void set_SelectedValue(object value);
    public string get_SelectedValuePath();
    public void set_SelectedValuePath(string value);
    public Nullable`1<bool> get_IsSynchronizedWithCurrentItem();
    public void set_IsSynchronizedWithCurrentItem(Nullable`1<bool> value);
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue);
    private sealed virtual override bool System.Windows.IWeakEventListener.ReceiveWeakEvent(Type managerType, object sender, EventArgs e);
    public object get_HighlightedItem();
    internal void set_HighlightedItem(object value);
    protected virtual void OnHighlightedItemChanged(DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public static RoutedCommand get_FilterCommand();
    [CompilerGeneratedAttribute]
private static void set_FilterCommand(RoutedCommand value);
    public bool get_CanUserFilter();
    public void set_CanUserFilter(bool value);
    public Style get_FilterItemContainerStyle();
    public void set_FilterItemContainerStyle(Style value);
    public Style get_AllFilterItemContainerStyle();
    public void set_AllFilterItemContainerStyle(Style value);
    public StyleSelector get_FilterItemContainerStyleSelector();
    public void set_FilterItemContainerStyleSelector(StyleSelector value);
    public Style get_FilterMenuButtonStyle();
    public void set_FilterMenuButtonStyle(Style value);
    public object get_FilterPaneContent();
    public void set_FilterPaneContent(object value);
    public DataTemplate get_FilterPaneContentTemplate();
    public void set_FilterPaneContentTemplate(DataTemplate value);
    public DataTemplate get_FilterItemTemplate();
    public void set_FilterItemTemplate(DataTemplate value);
    public DataTemplate get_AllFilterItemTemplate();
    public void set_AllFilterItemTemplate(DataTemplate value);
    public DataTemplateSelector get_FilterItemTemplateSelector();
    public void set_FilterItemTemplateSelector(DataTemplateSelector value);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    protected virtual void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e);
    public static object get_AllFilterItem();
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    public DataTemplate get_CategoryTemplate();
    public void set_CategoryTemplate(DataTemplate value);
    public Style get_CategoryStyle();
    public void set_CategoryStyle(Style value);
    public DataTemplate get_GalleryItemTemplate();
    public void set_GalleryItemTemplate(DataTemplate value);
    public Style get_GalleryItemStyle();
    public void set_GalleryItemStyle(Style value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnMouseEnter(MouseEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    public sealed virtual ICommand get_Command();
    public void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public void set_CommandParameter(object value);
    public sealed virtual object get_PreviewCommandParameter();
    public void set_PreviewCommandParameter(object value);
    public sealed virtual IInputElement get_CommandTarget();
    public void set_CommandTarget(IInputElement value);
    protected virtual bool get_IsEnabledCore();
    public ImageSource get_SmallImageSource();
    public void set_SmallImageSource(ImageSource value);
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public string get_ToolTipDescription();
    public void set_ToolTipDescription(string value);
    public ImageSource get_ToolTipImageSource();
    public void set_ToolTipImageSource(ImageSource value);
    public string get_ToolTipFooterTitle();
    public void set_ToolTipFooterTitle(string value);
    public string get_ToolTipFooterDescription();
    public void set_ToolTipFooterDescription(string value);
    public ImageSource get_ToolTipFooterImageSource();
    public void set_ToolTipFooterImageSource(ImageSource value);
    public Ribbon get_Ribbon();
    public void ScrollIntoView(object item);
    public object get_QuickAccessToolBarId();
    public void set_QuickAccessToolBarId(object value);
    public bool get_CanAddToQuickAccessToolBarDirectly();
    public void set_CanAddToQuickAccessToolBarDirectly(bool value);
}
[StyleTypedPropertyAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonGalleryCategory : HeaderedItemsControl {
    public static DependencyProperty MinColumnCountProperty;
    public static DependencyProperty MaxColumnCountProperty;
    public static DependencyProperty ColumnsStretchToFillProperty;
    public static DependencyProperty IsSharedColumnSizeScopeProperty;
    public static DependencyProperty HeaderVisibilityProperty;
    public int MinColumnCount { get; public set; }
    public int MaxColumnCount { get; public set; }
    public bool ColumnsStretchToFill { get; public set; }
    public bool IsSharedColumnSizeScope { get; public set; }
    public Visibility HeaderVisibility { get; public set; }
    private static RibbonGalleryCategory();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    public virtual void OnApplyTemplate();
    public int get_MinColumnCount();
    public void set_MinColumnCount(int value);
    public int get_MaxColumnCount();
    public void set_MaxColumnCount(int value);
    public bool get_ColumnsStretchToFill();
    public void set_ColumnsStretchToFill(bool value);
    public bool get_IsSharedColumnSizeScope();
    public void set_IsSharedColumnSizeScope(bool value);
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue);
    private sealed virtual override bool System.Windows.IWeakEventListener.ReceiveWeakEvent(Type managerType, object sender, EventArgs e);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public Visibility get_HeaderVisibility();
    public void set_HeaderVisibility(Visibility value);
}
public class System.Windows.Controls.Ribbon.RibbonGalleryItem : ContentControl {
    public static RoutedEvent SelectedEvent;
    public static RoutedEvent UnselectedEvent;
    public static DependencyProperty IsSelectedProperty;
    public static DependencyProperty IsHighlightedProperty;
    public static DependencyProperty IsPressedProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty PressedBorderBrushProperty;
    public static DependencyProperty PressedBackgroundProperty;
    public static DependencyProperty CheckedBackgroundProperty;
    public static DependencyProperty CheckedBorderBrushProperty;
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    public static DependencyProperty KeyTipProperty;
    public bool IsSelected { get; public set; }
    public bool IsHighlighted { get; internal set; }
    public bool IsPressed { get; private set; }
    public Ribbon Ribbon { get; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush PressedBorderBrush { get; public set; }
    public Brush PressedBackground { get; public set; }
    public Brush CheckedBackground { get; public set; }
    public Brush CheckedBorderBrush { get; public set; }
    public string ToolTipTitle { get; public set; }
    public string ToolTipDescription { get; public set; }
    public ImageSource ToolTipImageSource { get; public set; }
    public string ToolTipFooterTitle { get; public set; }
    public string ToolTipFooterDescription { get; public set; }
    public ImageSource ToolTipFooterImageSource { get; public set; }
    public string KeyTip { get; public set; }
    private static RibbonGalleryItem();
    public void add_Selected(RoutedEventHandler value);
    public void remove_Selected(RoutedEventHandler value);
    protected internal virtual void OnSelected(RoutedEventArgs e);
    public void add_Unselected(RoutedEventHandler value);
    public void remove_Unselected(RoutedEventHandler value);
    protected internal virtual void OnUnselected(RoutedEventArgs e);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public bool get_IsHighlighted();
    internal void set_IsHighlighted(bool value);
    public bool get_IsPressed();
    private void set_IsPressed(bool value);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public Ribbon get_Ribbon();
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_PressedBorderBrush();
    public void set_PressedBorderBrush(Brush value);
    public Brush get_PressedBackground();
    public void set_PressedBackground(Brush value);
    public Brush get_CheckedBackground();
    public void set_CheckedBackground(Brush value);
    public Brush get_CheckedBorderBrush();
    public void set_CheckedBorderBrush(Brush value);
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public string get_ToolTipDescription();
    public void set_ToolTipDescription(string value);
    public ImageSource get_ToolTipImageSource();
    public void set_ToolTipImageSource(ImageSource value);
    public string get_ToolTipFooterTitle();
    public void set_ToolTipFooterTitle(string value);
    public string get_ToolTipFooterDescription();
    public void set_ToolTipFooterDescription(string value);
    public ImageSource get_ToolTipFooterImageSource();
    public void set_ToolTipFooterImageSource(ImageSource value);
    public string get_KeyTip();
    public void set_KeyTip(string value);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonGroup : HeaderedItemsControl {
    public static DependencyProperty IsCollapsedProperty;
    public static DependencyProperty GroupSizeDefinitionsProperty;
    public static DependencyProperty SmallImageSourceProperty;
    public static DependencyProperty LargeImageSourceProperty;
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty IsInQuickAccessToolBarProperty;
    public static DependencyProperty IsDropDownOpenProperty;
    public static DependencyProperty QuickAccessToolBarIdProperty;
    public static DependencyProperty CanAddToQuickAccessToolBarDirectlyProperty;
    public static DependencyProperty KeyTipProperty;
    public bool IsCollapsed { get; internal set; }
    public RibbonGroupSizeDefinitionBaseCollection GroupSizeDefinitions { get; public set; }
    public ImageSource SmallImageSource { get; public set; }
    public ImageSource LargeImageSource { get; public set; }
    public string ToolTipTitle { get; public set; }
    public string ToolTipDescription { get; public set; }
    public ImageSource ToolTipImageSource { get; public set; }
    public string ToolTipFooterTitle { get; public set; }
    public string ToolTipFooterDescription { get; public set; }
    public ImageSource ToolTipFooterImageSource { get; public set; }
    public Ribbon Ribbon { get; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public bool IsInQuickAccessToolBar { get; internal set; }
    public bool IsDropDownOpen { get; public set; }
    public object QuickAccessToolBarId { get; public set; }
    public bool CanAddToQuickAccessToolBarDirectly { get; public set; }
    public string KeyTip { get; public set; }
    private static RibbonGroup();
    public virtual void OnApplyTemplate();
    protected virtual void OnMouseEnter(MouseEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    protected internal virtual void OnRenderSizeChanged(SizeChangedInfo info);
    public bool get_IsCollapsed();
    internal void set_IsCollapsed(bool value);
    public RibbonGroupSizeDefinitionBaseCollection get_GroupSizeDefinitions();
    public void set_GroupSizeDefinitions(RibbonGroupSizeDefinitionBaseCollection value);
    public ImageSource get_SmallImageSource();
    public void set_SmallImageSource(ImageSource value);
    public ImageSource get_LargeImageSource();
    public void set_LargeImageSource(ImageSource value);
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public string get_ToolTipDescription();
    public void set_ToolTipDescription(string value);
    public ImageSource get_ToolTipImageSource();
    public void set_ToolTipImageSource(ImageSource value);
    public string get_ToolTipFooterTitle();
    public void set_ToolTipFooterTitle(string value);
    public string get_ToolTipFooterDescription();
    public void set_ToolTipFooterDescription(string value);
    public ImageSource get_ToolTipFooterImageSource();
    public void set_ToolTipFooterImageSource(ImageSource value);
    public Ribbon get_Ribbon();
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public bool get_IsInQuickAccessToolBar();
    internal void set_IsInQuickAccessToolBar(bool value);
    public bool get_IsDropDownOpen();
    public void set_IsDropDownOpen(bool value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnPreviewMouseDown(MouseButtonEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    public object get_QuickAccessToolBarId();
    public void set_QuickAccessToolBarId(object value);
    public bool get_CanAddToQuickAccessToolBarDirectly();
    public void set_CanAddToQuickAccessToolBarDirectly(bool value);
    public string get_KeyTip();
    public void set_KeyTip(string value);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
[ContentPropertyAttribute("ControlSizeDefinitions")]
public class System.Windows.Controls.Ribbon.RibbonGroupSizeDefinition : RibbonGroupSizeDefinitionBase {
    public static DependencyProperty ControlSizeDefinitionsProperty;
    public RibbonControlSizeDefinitionCollection ControlSizeDefinitions { get; public set; }
    private static RibbonGroupSizeDefinition();
    public RibbonControlSizeDefinitionCollection get_ControlSizeDefinitions();
    public void set_ControlSizeDefinitions(RibbonControlSizeDefinitionCollection value);
    protected virtual Freezable CreateInstanceCore();
}
public abstract class System.Windows.Controls.Ribbon.RibbonGroupSizeDefinitionBase : Freezable {
    public static DependencyProperty IsCollapsedProperty;
    public bool IsCollapsed { get; public set; }
    private static RibbonGroupSizeDefinitionBase();
    public bool get_IsCollapsed();
    public void set_IsCollapsed(bool value);
}
public class System.Windows.Controls.Ribbon.RibbonGroupSizeDefinitionBaseCollection : FreezableCollection`1<RibbonGroupSizeDefinitionBase> {
    protected virtual Freezable CreateInstanceCore();
}
[ContentPropertyAttribute("ContentTemplate")]
public class System.Windows.Controls.Ribbon.RibbonGroupTemplateSizeDefinition : RibbonGroupSizeDefinitionBase {
    public static DependencyProperty ContentTemplateProperty;
    public DataTemplate ContentTemplate { get; public set; }
    private static RibbonGroupTemplateSizeDefinition();
    public DataTemplate get_ContentTemplate();
    public void set_ContentTemplate(DataTemplate value);
    protected virtual Freezable CreateInstanceCore();
}
public enum System.Windows.Controls.Ribbon.RibbonImageSize : Enum {
    public int value__;
    public static RibbonImageSize Collapsed;
    public static RibbonImageSize Small;
    public static RibbonImageSize Large;
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.Ribbon.RibbonMenuButton : Menu {
    public static DependencyProperty LargeImageSourceProperty;
    public static DependencyProperty SmallImageSourceProperty;
    public static DependencyProperty LabelProperty;
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    public static DependencyProperty ControlSizeDefinitionProperty;
    public static DependencyProperty IsInControlGroupProperty;
    public static DependencyProperty QuickAccessToolBarControlSizeDefinitionProperty;
    public static DependencyProperty IsInQuickAccessToolBarProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty PressedBorderBrushProperty;
    public static DependencyProperty PressedBackgroundProperty;
    public static DependencyProperty FocusedBackgroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty IsDropDownOpenProperty;
    public static DependencyProperty DropDownHeightProperty;
    public static DependencyProperty CanUserResizeVerticallyProperty;
    public static DependencyProperty CanUserResizeHorizontallyProperty;
    public static DependencyProperty HasGalleryProperty;
    public static DependencyProperty IsDropDownPositionedAboveProperty;
    public static DependencyProperty QuickAccessToolBarIdProperty;
    public static DependencyProperty CanAddToQuickAccessToolBarDirectlyProperty;
    public static DependencyProperty KeyTipProperty;
    public ImageSource LargeImageSource { get; public set; }
    public ImageSource SmallImageSource { get; public set; }
    public string Label { get; public set; }
    public string ToolTipTitle { get; public set; }
    public string ToolTipDescription { get; public set; }
    public ImageSource ToolTipImageSource { get; public set; }
    public string ToolTipFooterTitle { get; public set; }
    public string ToolTipFooterDescription { get; public set; }
    public ImageSource ToolTipFooterImageSource { get; public set; }
    public RibbonControlSizeDefinition ControlSizeDefinition { get; public set; }
    public bool IsInControlGroup { get; internal set; }
    public RibbonControlSizeDefinition QuickAccessToolBarControlSizeDefinition { get; public set; }
    public bool IsInQuickAccessToolBar { get; internal set; }
    public Ribbon Ribbon { get; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush PressedBorderBrush { get; public set; }
    public Brush PressedBackground { get; public set; }
    public Brush FocusedBackground { get; public set; }
    public Brush FocusedBorderBrush { get; public set; }
    public bool IsDropDownOpen { get; public set; }
    public double DropDownHeight { get; public set; }
    public bool CanUserResizeVertically { get; public set; }
    public bool CanUserResizeHorizontally { get; public set; }
    public bool HasGallery { get; private set; }
    public bool IsDropDownPositionedAbove { get; private set; }
    protected internal bool HandlesScrolling { get; }
    public object QuickAccessToolBarId { get; public set; }
    public bool CanAddToQuickAccessToolBarDirectly { get; public set; }
    public string KeyTip { get; public set; }
    private static RibbonMenuButton();
    public ImageSource get_LargeImageSource();
    public void set_LargeImageSource(ImageSource value);
    public ImageSource get_SmallImageSource();
    public void set_SmallImageSource(ImageSource value);
    public string get_Label();
    public void set_Label(string value);
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public string get_ToolTipDescription();
    public void set_ToolTipDescription(string value);
    public ImageSource get_ToolTipImageSource();
    public void set_ToolTipImageSource(ImageSource value);
    public string get_ToolTipFooterTitle();
    public void set_ToolTipFooterTitle(string value);
    public string get_ToolTipFooterDescription();
    public void set_ToolTipFooterDescription(string value);
    public ImageSource get_ToolTipFooterImageSource();
    public void set_ToolTipFooterImageSource(ImageSource value);
    public RibbonControlSizeDefinition get_ControlSizeDefinition();
    public void set_ControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInControlGroup();
    internal void set_IsInControlGroup(bool value);
    public RibbonControlSizeDefinition get_QuickAccessToolBarControlSizeDefinition();
    public void set_QuickAccessToolBarControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInQuickAccessToolBar();
    internal void set_IsInQuickAccessToolBar(bool value);
    public Ribbon get_Ribbon();
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_PressedBorderBrush();
    public void set_PressedBorderBrush(Brush value);
    public Brush get_PressedBackground();
    public void set_PressedBackground(Brush value);
    public Brush get_FocusedBackground();
    public void set_FocusedBackground(Brush value);
    public Brush get_FocusedBorderBrush();
    public void set_FocusedBorderBrush(Brush value);
    [CompilerGeneratedAttribute]
public void add_DropDownOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DropDownOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_DropDownClosed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DropDownClosed(EventHandler value);
    public bool get_IsDropDownOpen();
    public void set_IsDropDownOpen(bool value);
    public double get_DropDownHeight();
    public void set_DropDownHeight(double value);
    public bool get_CanUserResizeVertically();
    public void set_CanUserResizeVertically(bool value);
    public bool get_CanUserResizeHorizontally();
    public void set_CanUserResizeHorizontally(bool value);
    public bool get_HasGallery();
    private void set_HasGallery(bool value);
    public bool get_IsDropDownPositionedAbove();
    private void set_IsDropDownPositionedAbove(bool value);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    protected virtual bool ShouldApplyItemContainerStyle(DependencyObject container, object item);
    protected internal virtual bool get_HandlesScrolling();
    public virtual void OnApplyTemplate();
    protected virtual void OnTemplateChanged(ControlTemplate oldTemplate, ControlTemplate newTemplate);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void HandleMouseButton(MouseButtonEventArgs e);
    protected virtual void OnDismissPopup(RibbonDismissPopupEventArgs e);
    protected virtual void OnPreviewMouseDown(MouseButtonEventArgs e);
    protected virtual void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    public object get_QuickAccessToolBarId();
    public void set_QuickAccessToolBarId(object value);
    public bool get_CanAddToQuickAccessToolBarDirectly();
    public void set_CanAddToQuickAccessToolBarDirectly(bool value);
    public string get_KeyTip();
    public void set_KeyTip(string value);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.Ribbon.RibbonMenuItem : MenuItem {
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    public static DependencyProperty ImageSourceProperty;
    public static DependencyProperty QuickAccessToolBarImageSourceProperty;
    public static DependencyProperty IsDropDownPositionedLeftProperty;
    public static DependencyProperty CanUserResizeVerticallyProperty;
    public static DependencyProperty CanUserResizeHorizontallyProperty;
    public static DependencyProperty DropDownHeightProperty;
    public static DependencyProperty HasGalleryProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty PressedBorderBrushProperty;
    public static DependencyProperty PressedBackgroundProperty;
    public static DependencyProperty CheckedBackgroundProperty;
    public static DependencyProperty CheckedBorderBrushProperty;
    public static DependencyProperty QuickAccessToolBarIdProperty;
    public static DependencyProperty CanAddToQuickAccessToolBarDirectlyProperty;
    public static DependencyProperty KeyTipProperty;
    public string ToolTipTitle { get; public set; }
    public string ToolTipDescription { get; public set; }
    public ImageSource ToolTipImageSource { get; public set; }
    public string ToolTipFooterTitle { get; public set; }
    public string ToolTipFooterDescription { get; public set; }
    public ImageSource ToolTipFooterImageSource { get; public set; }
    public ImageSource ImageSource { get; public set; }
    public ImageSource QuickAccessToolBarImageSource { get; public set; }
    public bool IsDropDownPositionedLeft { get; private set; }
    public bool CanUserResizeVertically { get; public set; }
    public bool CanUserResizeHorizontally { get; public set; }
    public double DropDownHeight { get; public set; }
    public bool HasGallery { get; private set; }
    public Ribbon Ribbon { get; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush PressedBorderBrush { get; public set; }
    public Brush PressedBackground { get; public set; }
    public Brush CheckedBackground { get; public set; }
    public Brush CheckedBorderBrush { get; public set; }
    public object QuickAccessToolBarId { get; public set; }
    public bool CanAddToQuickAccessToolBarDirectly { get; public set; }
    public string KeyTip { get; public set; }
    private static RibbonMenuItem();
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public string get_ToolTipDescription();
    public void set_ToolTipDescription(string value);
    public ImageSource get_ToolTipImageSource();
    public void set_ToolTipImageSource(ImageSource value);
    public string get_ToolTipFooterTitle();
    public void set_ToolTipFooterTitle(string value);
    public string get_ToolTipFooterDescription();
    public void set_ToolTipFooterDescription(string value);
    public ImageSource get_ToolTipFooterImageSource();
    public void set_ToolTipFooterImageSource(ImageSource value);
    public ImageSource get_ImageSource();
    public void set_ImageSource(ImageSource value);
    public ImageSource get_QuickAccessToolBarImageSource();
    public void set_QuickAccessToolBarImageSource(ImageSource value);
    public bool get_IsDropDownPositionedLeft();
    private void set_IsDropDownPositionedLeft(bool value);
    public bool get_CanUserResizeVertically();
    public void set_CanUserResizeVertically(bool value);
    public bool get_CanUserResizeHorizontally();
    public void set_CanUserResizeHorizontally(bool value);
    public double get_DropDownHeight();
    public void set_DropDownHeight(double value);
    public bool get_HasGallery();
    private void set_HasGallery(bool value);
    public Ribbon get_Ribbon();
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_PressedBorderBrush();
    public void set_PressedBorderBrush(Brush value);
    public Brush get_PressedBackground();
    public void set_PressedBackground(Brush value);
    public Brush get_CheckedBackground();
    public void set_CheckedBackground(Brush value);
    public Brush get_CheckedBorderBrush();
    public void set_CheckedBorderBrush(Brush value);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool ShouldApplyItemContainerStyle(DependencyObject container, object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    public virtual void OnApplyTemplate();
    protected virtual void OnMouseEnter(MouseEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnPreviewKeyUp(KeyEventArgs e);
    protected virtual void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnClick();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public object get_QuickAccessToolBarId();
    public void set_QuickAccessToolBarId(object value);
    public bool get_CanAddToQuickAccessToolBarDirectly();
    public void set_CanAddToQuickAccessToolBarDirectly(bool value);
    public string get_KeyTip();
    public void set_KeyTip(string value);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonQuickAccessToolBar : ItemsControl {
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty IsOverflowOpenProperty;
    public static DependencyProperty HasOverflowItemsProperty;
    public static DependencyProperty IsOverflowItemProperty;
    public static RoutedEvent CloneEvent;
    public static DependencyProperty CustomizeMenuButtonProperty;
    public Ribbon Ribbon { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public bool IsOverflowOpen { get; public set; }
    public bool HasOverflowItems { get; internal set; }
    public RibbonMenuButton CustomizeMenuButton { get; public set; }
    private static RibbonQuickAccessToolBar();
    public Ribbon get_Ribbon();
    public bool get_IsOverflowOpen();
    public void set_IsOverflowOpen(bool value);
    public bool get_HasOverflowItems();
    internal void set_HasOverflowItems(bool value);
    public static bool GetIsOverflowItem(DependencyObject element);
    public virtual void OnApplyTemplate();
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    public static void AddCloneHandler(DependencyObject element, RibbonQuickAccessToolBarCloneEventHandler handler);
    public static void RemoveCloneHandler(DependencyObject element, RibbonQuickAccessToolBarCloneEventHandler handler);
    public RibbonMenuButton get_CustomizeMenuButton();
    public void set_CustomizeMenuButton(RibbonMenuButton value);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnPreviewKeyTipAccessed(KeyTipAccessedEventArgs e);
}
public class System.Windows.Controls.Ribbon.RibbonQuickAccessToolBarCloneEventArgs : RoutedEventArgs {
    public UIElement InstanceToBeCloned { get; }
    public UIElement CloneInstance { get; public set; }
    public RibbonQuickAccessToolBarCloneEventArgs(UIElement targetElement);
    public UIElement get_InstanceToBeCloned();
    [CompilerGeneratedAttribute]
public UIElement get_CloneInstance();
    [CompilerGeneratedAttribute]
public void set_CloneInstance(UIElement value);
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Controls.Ribbon.RibbonQuickAccessToolBarCloneEventHandler : MulticastDelegate {
    public RibbonQuickAccessToolBarCloneEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RibbonQuickAccessToolBarCloneEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RibbonQuickAccessToolBarCloneEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonRadioButton : RadioButton {
    public static DependencyProperty LargeImageSourceProperty;
    public static DependencyProperty SmallImageSourceProperty;
    public static DependencyProperty LabelProperty;
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty ControlSizeDefinitionProperty;
    public static DependencyProperty IsInControlGroupProperty;
    public static DependencyProperty QuickAccessToolBarControlSizeDefinitionProperty;
    public static DependencyProperty IsInQuickAccessToolBarProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty PressedBorderBrushProperty;
    public static DependencyProperty PressedBackgroundProperty;
    public static DependencyProperty CheckedBackgroundProperty;
    public static DependencyProperty CheckedBorderBrushProperty;
    public static DependencyProperty FocusedBackgroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty ShowKeyboardCuesProperty;
    public static DependencyProperty QuickAccessToolBarIdProperty;
    public static DependencyProperty CanAddToQuickAccessToolBarDirectlyProperty;
    public static DependencyProperty KeyTipProperty;
    public ImageSource LargeImageSource { get; public set; }
    public ImageSource SmallImageSource { get; public set; }
    public string Label { get; public set; }
    public string ToolTipTitle { get; public set; }
    public string ToolTipDescription { get; public set; }
    public ImageSource ToolTipImageSource { get; public set; }
    public string ToolTipFooterTitle { get; public set; }
    public string ToolTipFooterDescription { get; public set; }
    public ImageSource ToolTipFooterImageSource { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    public RibbonControlSizeDefinition ControlSizeDefinition { get; public set; }
    public bool IsInControlGroup { get; internal set; }
    public RibbonControlSizeDefinition QuickAccessToolBarControlSizeDefinition { get; public set; }
    public bool IsInQuickAccessToolBar { get; internal set; }
    public Ribbon Ribbon { get; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush PressedBorderBrush { get; public set; }
    public Brush PressedBackground { get; public set; }
    public Brush CheckedBackground { get; public set; }
    public Brush CheckedBorderBrush { get; public set; }
    public Brush FocusedBackground { get; public set; }
    public Brush FocusedBorderBrush { get; public set; }
    public bool ShowKeyboardCues { get; }
    public object QuickAccessToolBarId { get; public set; }
    public bool CanAddToQuickAccessToolBarDirectly { get; public set; }
    public string KeyTip { get; public set; }
    private static RibbonRadioButton();
    public virtual void OnApplyTemplate();
    public ImageSource get_LargeImageSource();
    public void set_LargeImageSource(ImageSource value);
    public ImageSource get_SmallImageSource();
    public void set_SmallImageSource(ImageSource value);
    public string get_Label();
    public void set_Label(string value);
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public string get_ToolTipDescription();
    public void set_ToolTipDescription(string value);
    public ImageSource get_ToolTipImageSource();
    public void set_ToolTipImageSource(ImageSource value);
    public string get_ToolTipFooterTitle();
    public void set_ToolTipFooterTitle(string value);
    public string get_ToolTipFooterDescription();
    public void set_ToolTipFooterDescription(string value);
    public ImageSource get_ToolTipFooterImageSource();
    public void set_ToolTipFooterImageSource(ImageSource value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public RibbonControlSizeDefinition get_ControlSizeDefinition();
    public void set_ControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInControlGroup();
    internal void set_IsInControlGroup(bool value);
    public RibbonControlSizeDefinition get_QuickAccessToolBarControlSizeDefinition();
    public void set_QuickAccessToolBarControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInQuickAccessToolBar();
    internal void set_IsInQuickAccessToolBar(bool value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public Ribbon get_Ribbon();
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_PressedBorderBrush();
    public void set_PressedBorderBrush(Brush value);
    public Brush get_PressedBackground();
    public void set_PressedBackground(Brush value);
    public Brush get_CheckedBackground();
    public void set_CheckedBackground(Brush value);
    public Brush get_CheckedBorderBrush();
    public void set_CheckedBorderBrush(Brush value);
    public Brush get_FocusedBackground();
    public void set_FocusedBackground(Brush value);
    public Brush get_FocusedBorderBrush();
    public void set_FocusedBorderBrush(Brush value);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    public bool get_ShowKeyboardCues();
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnClick();
    public object get_QuickAccessToolBarId();
    public void set_QuickAccessToolBarId(object value);
    public bool get_CanAddToQuickAccessToolBarDirectly();
    public void set_CanAddToQuickAccessToolBarDirectly(bool value);
    public string get_KeyTip();
    public void set_KeyTip(string value);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
public class System.Windows.Controls.Ribbon.RibbonSeparator : Separator {
    public static DependencyProperty LabelProperty;
    public static DependencyProperty RibbonProperty;
    public string Label { get; public set; }
    public Ribbon Ribbon { get; }
    private static RibbonSeparator();
    public string get_Label();
    public void set_Label(string value);
    public Ribbon get_Ribbon();
    protected internal virtual void OnVisualParentChanged(DependencyObject oldParent);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonSplitButton : RibbonMenuButton {
    public static DependencyProperty CheckedBackgroundProperty;
    public static DependencyProperty CheckedBorderBrushProperty;
    public static DependencyProperty DropDownToolTipTitleProperty;
    public static DependencyProperty DropDownToolTipDescriptionProperty;
    public static DependencyProperty DropDownToolTipImageSourceProperty;
    public static DependencyProperty DropDownToolTipFooterTitleProperty;
    public static DependencyProperty DropDownToolTipFooterDescriptionProperty;
    public static DependencyProperty DropDownToolTipFooterImageSourceProperty;
    public static RoutedEvent ClickEvent;
    public static DependencyProperty LabelPositionProperty;
    public static DependencyProperty IsCheckableProperty;
    public static DependencyProperty IsCheckedProperty;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty CommandTargetProperty;
    public static DependencyProperty HeaderQuickAccessToolBarIdProperty;
    public static DependencyProperty HeaderKeyTipProperty;
    public Brush CheckedBackground { get; public set; }
    public Brush CheckedBorderBrush { get; public set; }
    public string DropDownToolTipTitle { get; public set; }
    public string DropDownToolTipDescription { get; public set; }
    public ImageSource DropDownToolTipImageSource { get; public set; }
    public string DropDownToolTipFooterTitle { get; public set; }
    public string DropDownToolTipFooterDescription { get; public set; }
    public ImageSource DropDownToolTipFooterImageSource { get; public set; }
    public RibbonSplitButtonLabelPosition LabelPosition { get; public set; }
    public bool IsCheckable { get; public set; }
    public bool IsChecked { get; public set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public IInputElement CommandTarget { get; public set; }
    public object HeaderQuickAccessToolBarId { get; public set; }
    public string HeaderKeyTip { get; public set; }
    private static RibbonSplitButton();
    public virtual void OnApplyTemplate();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public Brush get_CheckedBackground();
    public void set_CheckedBackground(Brush value);
    public Brush get_CheckedBorderBrush();
    public void set_CheckedBorderBrush(Brush value);
    public string get_DropDownToolTipTitle();
    public void set_DropDownToolTipTitle(string value);
    public string get_DropDownToolTipDescription();
    public void set_DropDownToolTipDescription(string value);
    public ImageSource get_DropDownToolTipImageSource();
    public void set_DropDownToolTipImageSource(ImageSource value);
    public string get_DropDownToolTipFooterTitle();
    public void set_DropDownToolTipFooterTitle(string value);
    public string get_DropDownToolTipFooterDescription();
    public void set_DropDownToolTipFooterDescription(string value);
    public ImageSource get_DropDownToolTipFooterImageSource();
    public void set_DropDownToolTipFooterImageSource(ImageSource value);
    public void add_Click(RoutedEventHandler value);
    public void remove_Click(RoutedEventHandler value);
    public RibbonSplitButtonLabelPosition get_LabelPosition();
    public void set_LabelPosition(RibbonSplitButtonLabelPosition value);
    public bool get_IsCheckable();
    public void set_IsCheckable(bool value);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    public sealed virtual ICommand get_Command();
    public void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public void set_CommandParameter(object value);
    public sealed virtual IInputElement get_CommandTarget();
    public void set_CommandTarget(IInputElement value);
    public object get_HeaderQuickAccessToolBarId();
    public void set_HeaderQuickAccessToolBarId(object value);
    public string get_HeaderKeyTip();
    public void set_HeaderKeyTip(string value);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
}
public enum System.Windows.Controls.Ribbon.RibbonSplitButtonLabelPosition : Enum {
    public int value__;
    public static RibbonSplitButtonLabelPosition Header;
    public static RibbonSplitButtonLabelPosition DropDown;
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonSplitMenuItem : RibbonMenuItem {
    public static DependencyProperty DropDownToolTipTitleProperty;
    public static DependencyProperty DropDownToolTipDescriptionProperty;
    public static DependencyProperty DropDownToolTipImageSourceProperty;
    public static DependencyProperty DropDownToolTipFooterTitleProperty;
    public static DependencyProperty DropDownToolTipFooterDescriptionProperty;
    public static DependencyProperty DropDownToolTipFooterImageSourceProperty;
    public static DependencyProperty HeaderQuickAccessToolBarIdProperty;
    public static DependencyProperty HeaderKeyTipProperty;
    public string DropDownToolTipTitle { get; public set; }
    public string DropDownToolTipDescription { get; public set; }
    public ImageSource DropDownToolTipImageSource { get; public set; }
    public string DropDownToolTipFooterTitle { get; public set; }
    public string DropDownToolTipFooterDescription { get; public set; }
    public ImageSource DropDownToolTipFooterImageSource { get; public set; }
    protected bool IsEnabledCore { get; }
    public object HeaderQuickAccessToolBarId { get; public set; }
    public string HeaderKeyTip { get; public set; }
    private static RibbonSplitMenuItem();
    public string get_DropDownToolTipTitle();
    public void set_DropDownToolTipTitle(string value);
    public string get_DropDownToolTipDescription();
    public void set_DropDownToolTipDescription(string value);
    public ImageSource get_DropDownToolTipImageSource();
    public void set_DropDownToolTipImageSource(ImageSource value);
    public string get_DropDownToolTipFooterTitle();
    public void set_DropDownToolTipFooterTitle(string value);
    public string get_DropDownToolTipFooterDescription();
    public void set_DropDownToolTipFooterDescription(string value);
    public ImageSource get_DropDownToolTipFooterImageSource();
    public void set_DropDownToolTipFooterImageSource(ImageSource value);
    public virtual void OnApplyTemplate();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual bool get_IsEnabledCore();
    public object get_HeaderQuickAccessToolBarId();
    public void set_HeaderQuickAccessToolBarId(object value);
    public string get_HeaderKeyTip();
    public void set_HeaderKeyTip(string value);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.Ribbon.RibbonTab : HeaderedItemsControl {
    public static DependencyProperty GroupSizeReductionOrderProperty;
    public static DependencyProperty IsSelectedProperty;
    public static DependencyProperty ContextualTabGroupHeaderProperty;
    public static DependencyProperty ContextualTabGroupProperty;
    public static DependencyProperty HeaderStyleProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty TabHeaderLeftProperty;
    public static DependencyProperty TabHeaderRightProperty;
    public static DependencyProperty KeyTipProperty;
    protected internal bool HandlesScrolling { get; }
    [TypeConverterAttribute("System.Windows.Controls.Ribbon.StringCollectionConverter")]
public StringCollection GroupSizeReductionOrder { get; public set; }
    public bool IsSelected { get; public set; }
    public object ContextualTabGroupHeader { get; public set; }
    public RibbonContextualTabGroup ContextualTabGroup { get; internal set; }
    public Style HeaderStyle { get; public set; }
    public Ribbon Ribbon { get; }
    public double TabHeaderLeft { get; internal set; }
    public double TabHeaderRight { get; internal set; }
    public string KeyTip { get; public set; }
    private static RibbonTab();
    protected internal virtual bool get_HandlesScrolling();
    public StringCollection get_GroupSizeReductionOrder();
    public void set_GroupSizeReductionOrder(StringCollection value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public object get_ContextualTabGroupHeader();
    public void set_ContextualTabGroupHeader(object value);
    public RibbonContextualTabGroup get_ContextualTabGroup();
    internal void set_ContextualTabGroup(RibbonContextualTabGroup value);
    public Style get_HeaderStyle();
    public void set_HeaderStyle(Style value);
    public Ribbon get_Ribbon();
    public double get_TabHeaderLeft();
    internal void set_TabHeaderLeft(double value);
    public double get_TabHeaderRight();
    internal void set_TabHeaderRight(double value);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    protected virtual void OnSelected(RoutedEventArgs e);
    protected virtual void OnUnselected(RoutedEventArgs e);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public string get_KeyTip();
    public void set_KeyTip(string value);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonTabHeader : ContentControl {
    public static DependencyProperty IsRibbonTabSelectedProperty;
    public static DependencyProperty ContextualTabGroupProperty;
    public static DependencyProperty IsContextualTabProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty FocusedBackgroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty CheckedBackgroundProperty;
    public static DependencyProperty CheckedBorderBrushProperty;
    public bool IsRibbonTabSelected { get; internal set; }
    public RibbonContextualTabGroup ContextualTabGroup { get; private set; }
    public bool IsContextualTab { get; private set; }
    public Ribbon Ribbon { get; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush FocusedBackground { get; public set; }
    public Brush FocusedBorderBrush { get; public set; }
    public Brush CheckedBackground { get; public set; }
    public Brush CheckedBorderBrush { get; public set; }
    private static RibbonTabHeader();
    public bool get_IsRibbonTabSelected();
    internal void set_IsRibbonTabSelected(bool value);
    public RibbonContextualTabGroup get_ContextualTabGroup();
    private void set_ContextualTabGroup(RibbonContextualTabGroup value);
    public bool get_IsContextualTab();
    private void set_IsContextualTab(bool value);
    public Ribbon get_Ribbon();
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_FocusedBackground();
    public void set_FocusedBackground(Brush value);
    public Brush get_FocusedBorderBrush();
    public void set_FocusedBorderBrush(Brush value);
    public Brush get_CheckedBackground();
    public void set_CheckedBackground(Brush value);
    public Brush get_CheckedBorderBrush();
    public void set_CheckedBorderBrush(Brush value);
    public virtual void OnApplyTemplate();
    protected virtual void OnRender(DrawingContext drawingContext);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
public class System.Windows.Controls.Ribbon.RibbonTabHeaderItemsControl : ItemsControl {
    protected internal bool HandlesScrolling { get; }
    private static RibbonTabHeaderItemsControl();
    protected internal virtual bool get_HandlesScrolling();
    public virtual void OnApplyTemplate();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
}
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonTextBox : TextBox {
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty CommandTargetProperty;
    public static DependencyProperty LargeImageSourceProperty;
    public static DependencyProperty SmallImageSourceProperty;
    public static DependencyProperty LabelProperty;
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    public static DependencyProperty ControlSizeDefinitionProperty;
    public static DependencyProperty IsInControlGroupProperty;
    public static DependencyProperty QuickAccessToolBarControlSizeDefinitionProperty;
    public static DependencyProperty IsInQuickAccessToolBarProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty FocusedBackgroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty ShowKeyboardCuesProperty;
    public static DependencyProperty TextBoxWidthProperty;
    public static DependencyProperty QuickAccessToolBarIdProperty;
    public static DependencyProperty CanAddToQuickAccessToolBarDirectlyProperty;
    public static DependencyProperty KeyTipProperty;
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public IInputElement CommandTarget { get; public set; }
    protected bool IsEnabledCore { get; }
    public ImageSource LargeImageSource { get; public set; }
    public ImageSource SmallImageSource { get; public set; }
    public string Label { get; public set; }
    public string ToolTipTitle { get; public set; }
    public string ToolTipDescription { get; public set; }
    public ImageSource ToolTipImageSource { get; public set; }
    public string ToolTipFooterTitle { get; public set; }
    public string ToolTipFooterDescription { get; public set; }
    public ImageSource ToolTipFooterImageSource { get; public set; }
    public RibbonControlSizeDefinition ControlSizeDefinition { get; public set; }
    public bool IsInControlGroup { get; internal set; }
    public RibbonControlSizeDefinition QuickAccessToolBarControlSizeDefinition { get; public set; }
    public bool IsInQuickAccessToolBar { get; internal set; }
    public Ribbon Ribbon { get; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush FocusedBackground { get; public set; }
    public Brush FocusedBorderBrush { get; public set; }
    public bool ShowKeyboardCues { get; }
    public double TextBoxWidth { get; public set; }
    public object QuickAccessToolBarId { get; public set; }
    public bool CanAddToQuickAccessToolBarDirectly { get; public set; }
    public string KeyTip { get; public set; }
    private static RibbonTextBox();
    public virtual void OnApplyTemplate();
    protected virtual void OnTemplateChanged(ControlTemplate oldTemplate, ControlTemplate newTemplate);
    public sealed virtual ICommand get_Command();
    public void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public void set_CommandParameter(object value);
    public sealed virtual IInputElement get_CommandTarget();
    public void set_CommandTarget(IInputElement value);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual bool get_IsEnabledCore();
    public ImageSource get_LargeImageSource();
    public void set_LargeImageSource(ImageSource value);
    public ImageSource get_SmallImageSource();
    public void set_SmallImageSource(ImageSource value);
    public string get_Label();
    public void set_Label(string value);
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public string get_ToolTipDescription();
    public void set_ToolTipDescription(string value);
    public ImageSource get_ToolTipImageSource();
    public void set_ToolTipImageSource(ImageSource value);
    public string get_ToolTipFooterTitle();
    public void set_ToolTipFooterTitle(string value);
    public string get_ToolTipFooterDescription();
    public void set_ToolTipFooterDescription(string value);
    public ImageSource get_ToolTipFooterImageSource();
    public void set_ToolTipFooterImageSource(ImageSource value);
    public RibbonControlSizeDefinition get_ControlSizeDefinition();
    public void set_ControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInControlGroup();
    internal void set_IsInControlGroup(bool value);
    public RibbonControlSizeDefinition get_QuickAccessToolBarControlSizeDefinition();
    public void set_QuickAccessToolBarControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInQuickAccessToolBar();
    internal void set_IsInQuickAccessToolBar(bool value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public Ribbon get_Ribbon();
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_FocusedBackground();
    public void set_FocusedBackground(Brush value);
    public Brush get_FocusedBorderBrush();
    public void set_FocusedBorderBrush(Brush value);
    public bool get_ShowKeyboardCues();
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    public double get_TextBoxWidth();
    public void set_TextBoxWidth(double value);
    public object get_QuickAccessToolBarId();
    public void set_QuickAccessToolBarId(object value);
    public bool get_CanAddToQuickAccessToolBarDirectly();
    public void set_CanAddToQuickAccessToolBarDirectly(bool value);
    public string get_KeyTip();
    public void set_KeyTip(string value);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonToggleButton : ToggleButton {
    public static DependencyProperty LargeImageSourceProperty;
    public static DependencyProperty SmallImageSourceProperty;
    public static DependencyProperty LabelProperty;
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty ControlSizeDefinitionProperty;
    public static DependencyProperty IsInControlGroupProperty;
    public static DependencyProperty QuickAccessToolBarControlSizeDefinitionProperty;
    public static DependencyProperty IsInQuickAccessToolBarProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty PressedBorderBrushProperty;
    public static DependencyProperty PressedBackgroundProperty;
    public static DependencyProperty CheckedBackgroundProperty;
    public static DependencyProperty CheckedBorderBrushProperty;
    public static DependencyProperty FocusedBackgroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty ShowKeyboardCuesProperty;
    public static DependencyProperty QuickAccessToolBarIdProperty;
    public static DependencyProperty CanAddToQuickAccessToolBarDirectlyProperty;
    public static DependencyProperty KeyTipProperty;
    public ImageSource LargeImageSource { get; public set; }
    public ImageSource SmallImageSource { get; public set; }
    public string Label { get; public set; }
    public string ToolTipTitle { get; public set; }
    public string ToolTipDescription { get; public set; }
    public ImageSource ToolTipImageSource { get; public set; }
    public string ToolTipFooterTitle { get; public set; }
    public string ToolTipFooterDescription { get; public set; }
    public ImageSource ToolTipFooterImageSource { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    public RibbonControlSizeDefinition ControlSizeDefinition { get; public set; }
    public bool IsInControlGroup { get; internal set; }
    public RibbonControlSizeDefinition QuickAccessToolBarControlSizeDefinition { get; public set; }
    public bool IsInQuickAccessToolBar { get; internal set; }
    public Ribbon Ribbon { get; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush PressedBorderBrush { get; public set; }
    public Brush PressedBackground { get; public set; }
    public Brush CheckedBackground { get; public set; }
    public Brush CheckedBorderBrush { get; public set; }
    public Brush FocusedBackground { get; public set; }
    public Brush FocusedBorderBrush { get; public set; }
    public bool ShowKeyboardCues { get; }
    public object QuickAccessToolBarId { get; public set; }
    public bool CanAddToQuickAccessToolBarDirectly { get; public set; }
    public string KeyTip { get; public set; }
    private static RibbonToggleButton();
    public virtual void OnApplyTemplate();
    public ImageSource get_LargeImageSource();
    public void set_LargeImageSource(ImageSource value);
    public ImageSource get_SmallImageSource();
    public void set_SmallImageSource(ImageSource value);
    public string get_Label();
    public void set_Label(string value);
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public string get_ToolTipDescription();
    public void set_ToolTipDescription(string value);
    public ImageSource get_ToolTipImageSource();
    public void set_ToolTipImageSource(ImageSource value);
    public string get_ToolTipFooterTitle();
    public void set_ToolTipFooterTitle(string value);
    public string get_ToolTipFooterDescription();
    public void set_ToolTipFooterDescription(string value);
    public ImageSource get_ToolTipFooterImageSource();
    public void set_ToolTipFooterImageSource(ImageSource value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public RibbonControlSizeDefinition get_ControlSizeDefinition();
    public void set_ControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInControlGroup();
    internal void set_IsInControlGroup(bool value);
    public RibbonControlSizeDefinition get_QuickAccessToolBarControlSizeDefinition();
    public void set_QuickAccessToolBarControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInQuickAccessToolBar();
    internal void set_IsInQuickAccessToolBar(bool value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public Ribbon get_Ribbon();
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_PressedBorderBrush();
    public void set_PressedBorderBrush(Brush value);
    public Brush get_PressedBackground();
    public void set_PressedBackground(Brush value);
    public Brush get_CheckedBackground();
    public void set_CheckedBackground(Brush value);
    public Brush get_CheckedBorderBrush();
    public void set_CheckedBorderBrush(Brush value);
    public Brush get_FocusedBackground();
    public void set_FocusedBackground(Brush value);
    public Brush get_FocusedBorderBrush();
    public void set_FocusedBorderBrush(Brush value);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    public bool get_ShowKeyboardCues();
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnClick();
    public object get_QuickAccessToolBarId();
    public void set_QuickAccessToolBarId(object value);
    public bool get_CanAddToQuickAccessToolBarDirectly();
    public void set_CanAddToQuickAccessToolBarDirectly(bool value);
    public string get_KeyTip();
    public void set_KeyTip(string value);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
public class System.Windows.Controls.Ribbon.RibbonToolTip : ToolTip {
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty TitleProperty;
    public static DependencyProperty DescriptionProperty;
    public static DependencyProperty ImageSourceProperty;
    public static DependencyProperty HasHeaderProperty;
    public static DependencyProperty FooterTitleProperty;
    public static DependencyProperty FooterDescriptionProperty;
    public static DependencyProperty FooterImageSourceProperty;
    public static DependencyProperty HasFooterProperty;
    public static DependencyProperty IsPlacementTargetInRibbonGroupProperty;
    public Ribbon Ribbon { get; private set; }
    internal bool ShouldShowOnKeyboardFocus { get; }
    public string Title { get; public set; }
    public string Description { get; public set; }
    public ImageSource ImageSource { get; public set; }
    public bool HasHeader { get; internal set; }
    public string FooterTitle { get; public set; }
    public string FooterDescription { get; public set; }
    public ImageSource FooterImageSource { get; public set; }
    public bool HasFooter { get; internal set; }
    public bool IsPlacementTargetInRibbonGroup { get; internal set; }
    private static RibbonToolTip();
    public Ribbon get_Ribbon();
    private void set_Ribbon(Ribbon value);
    internal virtual bool get_ShouldShowOnKeyboardFocus();
    public string get_Title();
    public void set_Title(string value);
    public string get_Description();
    public void set_Description(string value);
    public ImageSource get_ImageSource();
    public void set_ImageSource(ImageSource value);
    public bool get_HasHeader();
    internal void set_HasHeader(bool value);
    public string get_FooterTitle();
    public void set_FooterTitle(string value);
    public string get_FooterDescription();
    public void set_FooterDescription(string value);
    public ImageSource get_FooterImageSource();
    public void set_FooterImageSource(ImageSource value);
    public bool get_HasFooter();
    internal void set_HasFooter(bool value);
    public bool get_IsPlacementTargetInRibbonGroup();
    internal void set_IsPlacementTargetInRibbonGroup(bool value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonTwoLineText : Control {
    public static DependencyProperty TextDecorationsProperty;
    public static DependencyProperty TextEffectsProperty;
    public static DependencyProperty BaselineOffsetProperty;
    public static DependencyProperty PaddingProperty;
    public static DependencyProperty TextAlignmentProperty;
    public static DependencyProperty TextTrimmingProperty;
    public static DependencyProperty LineHeightProperty;
    public static DependencyProperty LineStackingStrategyProperty;
    public static DependencyProperty PathFillProperty;
    public static DependencyProperty PathStrokeProperty;
    public static DependencyProperty TextProperty;
    public static DependencyProperty PathDataProperty;
    public static DependencyProperty HasTwoLinesProperty;
    public TextDecorationCollection TextDecorations { get; public set; }
    public TextEffectCollection TextEffects { get; public set; }
    public double BaselineOffset { get; public set; }
    public Thickness Padding { get; public set; }
    public TextAlignment TextAlignment { get; public set; }
    public TextTrimming TextTrimming { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double LineHeight { get; public set; }
    public LineStackingStrategy LineStackingStrategy { get; public set; }
    public Brush PathFill { get; public set; }
    public Brush PathStroke { get; public set; }
    public string Text { get; public set; }
    private static RibbonTwoLineText();
    public TextDecorationCollection get_TextDecorations();
    public void set_TextDecorations(TextDecorationCollection value);
    public TextEffectCollection get_TextEffects();
    public void set_TextEffects(TextEffectCollection value);
    public double get_BaselineOffset();
    public void set_BaselineOffset(double value);
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    public TextTrimming get_TextTrimming();
    public void set_TextTrimming(TextTrimming value);
    public double get_LineHeight();
    public void set_LineHeight(double value);
    public LineStackingStrategy get_LineStackingStrategy();
    public void set_LineStackingStrategy(LineStackingStrategy value);
    public Brush get_PathFill();
    public void set_PathFill(Brush value);
    public Brush get_PathStroke();
    public void set_PathStroke(Brush value);
    public string get_Text();
    public void set_Text(string value);
    public static Geometry GetPathData(DependencyObject element);
    public static void SetPathData(DependencyObject element, Geometry value);
    public static bool GetHasTwoLines(DependencyObject element);
    public static void SetHasTwoLines(DependencyObject element, bool value);
    public virtual void OnApplyTemplate();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonWindow : Window {
    private static RibbonWindow();
    public virtual void OnApplyTemplate();
}
public class System.Windows.Controls.Ribbon.StringCollectionConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
