internal class SR : object {
    internal static string Activity;
    internal static string Handlers;
    internal static string Conditions;
    internal static string ConditionedActivityConditions;
    internal static string Correlations;
    internal static string CorrelationSet;
    internal static string NameDescr;
    internal static string EnabledDescr;
    internal static string DescriptionDescr;
    internal static string UnlessConditionDescr;
    internal static string InitializeDescr;
    internal static string CatchTypeDescr;
    internal static string ExceptionTypeDescr;
    internal static string FaultDescription;
    internal static string FaultTypeDescription;
    internal static string ContainingAssemblyDescr;
    internal static string ExecutionModeDescr;
    internal static string Error_ReadOnlyTemplateActivity;
    internal static string Error_TypeNotString;
    internal static string Error_InvalidErrorType;
    internal static string Error_LiteralConversionFailed;
    internal static string Error_TypeNotPrimitive;
    internal static string CompletedCaleeDescr;
    internal static string ProxyClassDescr;
    internal static string ActivitySetDescr;
    internal static string VersionDescr;
    internal static string ActivationDescr;
    internal static string CorrelationSetsDescr;
    internal static string CompanionClassDescr;
    internal static string TransactionTypeDescr;
    internal static string SynchronizedDescr;
    internal static string IsolationLevelDescr;
    internal static string TimeoutDescr;
    internal static string BatchableDescr;
    internal static string LRTTimeoutDescr;
    internal static string OnGetCalleeCountDescr;
    internal static string CompensatableActivityDescr;
    internal static string OnAfterEventDescr;
    internal static string OnBeforeMethodInvokeDescr;
    internal static string AssignedToDescr;
    internal static string TypeDescr;
    internal static string TemplateActivityDescr;
    internal static string ErrorMessageDescr;
    internal static string WebServiceSynchronizedDescr;
    internal static string CorrelationSetDescr;
    internal static string ExecutionTypeDescr;
    internal static string RoleDescr;
    internal static string OnInitializeClonesDescr;
    internal static string CorrelationSetDisplayName;
    internal static string PastingActivities;
    internal static string DeletingActivities;
    internal static string DragDropActivities;
    internal static string ChangingEnabled;
    internal static string ChangingHandler;
    internal static string ChangingParameter;
    internal static string CollectionItem;
    internal static string AddingConditionalBranch;
    internal static string AddingEventActivity;
    internal static string AddingListenBranch;
    internal static string AddingParallelBranch;
    internal static string CurrentProject;
    internal static string ReferencedAssemblies;
    internal static string CollectionText;
    internal static string ParameterDescription;
    internal static string InvokeParameterDescription;
    internal static string ParametersDescription;
    internal static string ChangingParameters;
    internal static string Condition;
    internal static string MovingActivities;
    internal static string MemberNameDescr;
    internal static string OnScopeInitializedDescr;
    internal static string OnGeneratorInitializedDescr;
    internal static string OnScopeCompletedDescr;
    internal static string OnGeneratorCompletedDescr;
    internal static string DataElementRuntimeTypeDescr;
    internal static string RuleConditionReferencesDescr;
    internal static string CreateActivityFromToolbox;
    internal static string MoveMultipleActivities;
    internal static string MoveSingleActivity;
    internal static string CutMultipleActivities;
    internal static string CutSingleActivity;
    internal static string CutActivity;
    internal static string FaultActivityDescription;
    internal static string NullConditionExpression;
    internal static string ParameterTypeDescription;
    internal static string ParameterCategory;
    internal static string ParameterDirectionDescription;
    internal static string ParameterElementDescription;
    internal static string ParameterDlgDescription;
    internal static string ParameterDlgHeader;
    internal static string SuspendActivityDescription;
    internal static string SuspendErrorMessageDescr;
    internal static string TerminateActivityDescription;
    internal static string TerminateErrorMessageDescr;
    internal static string DeclarationCategory;
    internal static string NoValidActivityPropertiesAvailable;
    internal static string ChooseActivityDatasource;
    internal static string Promote;
    internal static string Type;
    internal static string NoMatchingActivityProperties;
    internal static string ActivityBindIDDescription;
    internal static string ActivityBindPathDescription;
    internal static string XPathDescription;
    internal static string TransformerDescription;
    internal static string CustomPropertiesCollectionFormHeader;
    internal static string CustomPropertiesCollectionFormDescription;
    internal static string BaseTypePropertyName;
    internal static string CustomActivityBaseClassTypeFilterProviderDesc;
    internal static string CustomActivityDesignerTypeFilterProviderDesc;
    internal static string CustomActivityValidatorTypeFilterProviderDesc;
    internal static string CustomActivityExecutorTypeFilterProviderDesc;
    internal static string GenericParameters;
    internal static string ToolboxItem;
    internal static string ToolboxItemCompanionClassDesc;
    internal static string Error_SerializationInsufficientState;
    internal static string Error_ActivityHasParent;
    internal static string Error_CompensantionParentNotScope;
    internal static string Error_ConditionedActivityParentNotCAG;
    internal static string Error_CorrelationTypeNotComparable;
    internal static string Error_ArgumentTypeNotMatchParameter;
    internal static string Error_TypeTypeMismatch;
    internal static string Error_ParameterTypeMismatch;
    internal static string Error_InvokeParameterTypeMismatch;
    internal static string Error_ParameterPropertyNotSet;
    internal static string Error_DataSourceNameNotSet;
    internal static string Error_DataSourceInvalidIdentifier;
    internal static string Error_ParameterTypeNotExist;
    internal static string Error_InvalidParameterName;
    internal static string Error_InvalidParameterType;
    internal static string Error_InvalidParameterElement;
    internal static string Error_InvalidPropertyType;
    internal static string Error_TypeNotResolvedInMethodName;
    internal static string Error_DelegateNoInvoke;
    internal static string Error_TypeNotDelegate;
    internal static string Error_MethodSignatureMismatch;
    internal static string Error_MethodReturnTypeMismatch;
    internal static string Error_PropertyNotSet;
    internal static string Error_ScopeCouldNotBeResolved;
    internal static string Error_IfElseNotAllIfElseBranchDecl;
    internal static string Error_TypeTypeMismatchAmbiguity;
    internal static string Error_InvalidCorrelationSetDatasource;
    internal static string Error_InvalidCorrelationSetType;
    internal static string Error_MissingCorrelationParameterAttribute;
    internal static string Error_CorrelationTypeNotConsistent;
    internal static string Error_CorrelationInvalid;
    internal static string Error_MissingDelegateMethod;
    internal static string Error_MissingHostInterface;
    internal static string Error_MissingMethodName;
    internal static string Error_NoBoundType;
    internal static string Error_PortTypeNotAnInterface;
    internal static string Error_MethodNotExists;
    internal static string Error_InvalidRequestResponseMethod;
    internal static string General_MissingService;
    internal static string Error_ScopeDuplicatedNameActivity;
    internal static string Error_DuplicatedActivityID;
    internal static string Error_DuplicatedParameterName;
    internal static string Error_ScopeMissingSerializableAttribute;
    internal static string Error_FieldNotExists;
    internal static string Error_PropertyNotExists;
    internal static string Error_FieldTypeMismatch;
    internal static string Error_PropertyTypeMismatch;
    internal static string Error_TypeNotResolvedInFieldName;
    internal static string Error_TypeNotResolvedInPropertyName;
    internal static string Error_FieldGenericParamTypeMismatch;
    internal static string Error_TypeNotResolved;
    internal static string Error_TypeIsUnboundedGeneric;
    internal static string Error_MissingRootActivity;
    internal static string Error_PropertyNotReadable;
    internal static string Error_PropertyNotWritable;
    internal static string Error_NotCompositeActivity;
    internal static string Error_TypeNotExist;
    internal static string Error_ActivityRefNotResolved;
    internal static string Error_ActivityRefNotMatchType;
    internal static string Error_ActivityValidation;
    internal static string Error_ActiveChildExist;
    internal static string Error_ActiveChildContextExist;
    internal static string Error_CannotCompleteContext;
    internal static string Error_NoPasteSupport;
    internal static string Error_UnknownSerializationStore;
    internal static string Error_MissingCorrelationSet;
    internal static string Error_CreateVariable;
    internal static string Error_DuplicateCorrelationSetName;
    internal static string Error_DragDropInvalid;
    internal static string AddingImplicitActivity;
    internal static string Failure_DoDefaultAction;
    internal static string Failure_DoDefaultActionCaption;
    internal static string Error_FaultInsideAtomicScope;
    internal static string Error_ListenNotMoreThanOneDelay;
    internal static string Error_AtomicScopeWithFaultHandlersActivityDecl;
    internal static string Error_AtomicScopeWithCancellationHandlerActivity;
    internal static string Error_ScopeDuplicateFaultHandlerActivityForAll;
    internal static string Error_ScopeDuplicateFaultHandlerActivityFor;
    internal static string Error_AtomicScopeNestedInNonLRT;
    internal static string Error_LRTScopeNestedInNonLRT;
    internal static string Error_CAGNotAllChildrenConditioned;
    internal static string Error_ConditionedActivityChildCount;
    internal static string Error_NegativeValue;
    internal static string Error_MethodWithReturnType;
    internal static string Error_SendReceiveOrderIncorrect;
    internal static string Error_ReceiveSendOrderIncorrect;
    internal static string Error_CompensateBadNesting;
    internal static string Error_ReferencedAssemblyIsInvalid;
    internal static string Error_TypeToXsdConversion;
    internal static string Error_FieldTypeNotResolved;
    internal static string Error_PropertyTypeNotResolved;
    internal static string Error_CouldNotDeserializeXomlFile;
    internal static string Error_InternalCompilerError;
    internal static string Error_TypeNotAsseblyQualified;
    internal static string CompilerWarning_StandardAssemlbyInReferences;
    internal static string Error_SuspendInAtomicScope;
    internal static string Error_InvalidActivityExecutionContext;
    internal static string Error_NoRuntimeAvailable;
    internal static string Error_CanNotChangeAtRuntime;
    internal static string Error_DataContextNotInitialized;
    internal static string Error_DataContextAlreadyInitialized;
    internal static string Error_ParseActivityNameDoesNotExist;
    internal static string Error_NoParameterPropertyDeclared;
    internal static string Error_PropertyInvalidIdentifier;
    internal static string Error_WorkflowDefinitionModified;
    internal static string Error_FieldAlreadyExist;
    internal static string Failure_FieldAlreadyExist;
    internal static string Error_DifferentTypeFieldExists;
    internal static string Error_RootActivityTypeInvalid;
    internal static string Error_RootActivityTypeInvalid2;
    internal static string Error_CannotCompile_No_XClass;
    internal static string Error_TemplateActivityIsNotActivity;
    internal static string Error_TypeIsNotRootActivity;
    internal static string Error_NoTypeProvider;
    internal static string Error_NotCodeGeneratorType;
    internal static string Error_NotDataContext;
    internal static string Error_MissingDefaultConstructor;
    internal static string Error_ContextStackItemMissing;
    internal static string Error_UnexpectedArgumentType;
    internal static string Error_EmptyArgument;
    internal static string Error_DPAlreadyExist;
    internal static string Error_DuplicateDynamicProperty;
    internal static string Error_DynamicPropertyTypeValueMismatch;
    internal static string Error_DynamicPropertyNoSupport;
    internal static string Error_NoContextForDatasource;
    internal static string Error_NoContextForDatasourceCaption;
    internal static string Error_DataSourceHasParent;
    internal static string OnTaskCompletedDescr;
    internal static string OnTaskInitializedDescr;
    internal static string Error_InvalidXmlData;
    internal static string Error_HandlerNotOnRoot;
    internal static string Error_InvalidArgumentIndex;
    internal static string Error_UITypeEditorTypeNotUITypeEditor;
    internal static string FilterDescription_UITypeEditor;
    internal static string Error_UserCodeFilesNotAllowed;
    internal static string Error_CodeWithinNotAllowed;
    internal static string Error_TypeNotAuthorized;
    internal static string Error_CantDetermineBaseType;
    internal static string Error_MultipleSelectNotSupportedForBindAndPromote;
    internal static string Error_CantDetermineBaseTypeCaption;
    internal static string Error_CantDeterminePropertyBaseType;
    internal static string Error_NullCustomActivityTypeName;
    internal static string Error_InvalidAttribute;
    internal static string Error_InvalidAttributes;
    internal static string Error_ConfigFileMissingOrInvalid;
    internal static string Error_CantHaveContextActivity;
    internal static string Error_SynchronizedNeedsDataContext;
    internal static string Error_MoreThanOneFaultHandlersActivityDecl;
    internal static string Error_MoreThanOneEventHandlersDecl;
    internal static string Error_MoreThanOneCancelHandler;
    internal static string Error_MetaDataInterfaceMissing;
    internal static string Error_NonActivityExecutor;
    internal static string Error_DynamicUpdateEvaluation;
    internal static string Error_CollectionHasNullEntry;
    internal static string Error_MissingContextProperty;
    internal static string Error_AssociatedDesignerMissing;
    internal static string Error_MissingContextActivityProperty;
    internal static string Error_MissingActivityProperty;
    internal static string Error_MissingOwnerTypeProperty;
    internal static string Error_DOIsNotAnActivity;
    internal static string Error_PropertyCanBeOnlyCleared;
    internal static string Error_PropertyDefaultTypeMismatch;
    internal static string Error_PropertyDefaultIsReference;
    internal static string Error_WorkflowLoadFailed;
    internal static string Error_WorkflowLoadValidationFailed;
    internal static string Error_WorkflowLoadDeserializationFailed;
    internal static string Error_WorkflowLoadTypeMismatch;
    internal static string Error_WorkflowLoadInvalidXoml;
    internal static string Error_WorkflowLoadNotValidRootType;
    internal static string Error_CantCreateInstanceOfComponent;
    internal static string Error_NotComponentFactoryType;
    internal static string Error_WorkflowTerminated;
    internal static string Error_SerializerAttributesFoundInComplexProperty;
    internal static string Error_InvalidDataFound;
    internal static string Error_InvalidDataFoundForType;
    internal static string Error_InvalidDataFoundForType1;
    internal static string Error_SerializerTypeNotResolved;
    internal static string Error_MarkupSerializerTypeNotResolved;
    internal static string Error_SerializerTypeNotResolvedWithInnerError;
    internal static string Error_SerializerNotAvailable;
    internal static string Error_SerializerNotAvailableForSerialize;
    internal static string Error_SerializerCreateInstanceFailed;
    internal static string Error_SerializerAddChildFailed;
    internal static string Error_SerializerNoPropertyAvailable;
    internal static string Error_SerializerPrimitivePropertyReadOnly;
    internal static string Error_SerializerCantChangeIsLocked;
    internal static string Error_SerializerPrimitivePropertySetFailed;
    internal static string Error_SerializerPropertyGetFailed;
    internal static string Error_SerializerPrimitivePropertyNoLogic;
    internal static string Error_SerializerPrimitivePropertyParentIsNull;
    internal static string Error_SerializerComplexPropertySetFailed;
    internal static string Error_SerializerNoChildNotion;
    internal static string Error_SerializerNoDynamicPropertySupport;
    internal static string Error_SerializerNoSerializeLogic;
    internal static string Error_SerializerReadOnlyPropertyAndValueIsNull;
    internal static string Error_SerializerReadOnlyParametersNoChild;
    internal static string Error_SerializerNotParameterBindingObject;
    internal static string Error_SerializerThrewException;
    internal static string Error_ActivityCollectionSerializer;
    internal static string Error_MissingClassAttribute;
    internal static string Error_MissingClassAttributeValue;
    internal static string ExecutorCreationFailedErrorMessage;
    internal static string VariableGetterCode_VB;
    internal static string VariableGetterCode_CS;
    internal static string VariableSetterCode_VB;
    internal static string VariableSetterCode_CS;
    internal static string StaticVariableGetterCode_VB;
    internal static string StaticVariableGetterCode_CS;
    internal static string StaticVariableSetterCode_VB;
    internal static string StaticVariableSetterCode_CS;
    internal static string EnterCodeBesidesCode_VB;
    internal static string EnterCodeBesidesCode_CS;
    internal static string LeaveCodeBesides1Code_VB;
    internal static string LeaveCodeBesides2Code_VB;
    internal static string LeaveCodeBesides1Code_CS;
    internal static string LeaveCodeBesides2Code_CS;
    internal static string VariableSetterName;
    internal static string VariableGetterName;
    internal static string HandlerGetterName;
    internal static string WorkflowCreatorName;
    internal static string ActivityMethod;
    internal static string CustomActivityPrivateField;
    internal static string InitializedVariableDeclaration_VB;
    internal static string InitializedVariableDeclaration_CS;
    internal static string In;
    internal static string Out;
    internal static string Ref;
    internal static string Required;
    internal static string Optional;
    internal static string Parameters;
    internal static string Properties;
    internal static string Error_RecursionDetected;
    internal static string Warning_UnverifiedRecursion;
    internal static string AddConstructorCode;
    internal static string Error_UninitializedCorrelation;
    internal static string Error_CorrelationAlreadyInitialized;
    internal static string Error_CorrelatedSendReceiveAtomicScope;
    internal static string Warning_ActivityValidation;
    internal static string Warning_EmptyBehaviourActivity;
    internal static string Error_ParallelActivationNoCorrelation;
    internal static string Error_MethodNotAccessible;
    internal static string Error_FieldNotAccessible;
    internal static string Error_PropertyNotAccessible;
    internal static string Error_GenericArgumentsNotAllowed;
    internal static string Error_InvalidIdentifier;
    internal static string Error_InvalidLanguageIdentifier;
    internal static string DuplicateActivityIdentifier;
    internal static string Error_MissingAttribute;
    internal static string Error_LoadUIPropertiesFile;
    internal static string Error_SerializerEventGetFailed;
    internal static string Error_SerializerEventFailed;
    internal static string Error_SerializerNoMemberFound;
    internal static string Error_DynamicEventConflict;
    internal static string Error_SerializerMemberSetFailed;
    internal static string Error_ContentPropertyCouldNotBeFound;
    internal static string Error_ContentPropertyValueInvalid;
    internal static string Error_ContentPropertyNoSetter;
    internal static string Error_ContentCanNotBeConverted;
    internal static string Error_ContentPropertyCanNotBeNull;
    internal static string Error_SerializerTypeMismatch;
    internal static string Error_CouldNotAddValueInContentProperty;
    internal static string Error_SerializerTypeRequirement;
    internal static string Error_CanNotAddActivityInBlackBoxActivity;
    internal static string Error_ContentPropertyCanNotSupportCompactFormat;
    internal static string Error_ContentPropertyNoMultipleContents;
    internal static string Error_InternalSerializerError;
    internal static string Error_DictionarySerializerNonDictionaryObject;
    internal static string Error_DictionarySerializerKeyNotFound;
    internal static string Error_InvalidCancelActivityState;
    internal static string Error_InvalidCompensateActivityState;
    internal static string Error_InvalidCloseActivityState;
    internal static string Error_SealedPropertyMetadata;
    internal static string Error_MemberNotFound;
    internal static string Error_EmptyPathValue;
    internal static string Error_InvalidCompensatingState;
    internal static string Error_InvalidCancelingState;
    internal static string Error_InvalidClosingState;
    internal static string Error_InvalidStateToExecuteChild;
    internal static string Error_InvalidExecutionState;
    internal static string Error_InvalidInitializingState;
    internal static string Error_InvalidInvokingState;
    internal static string Error_NotRegisteredAs;
    internal static string Error_AlreadyRegisteredAs;
    internal static string Error_InsertingChildControls;
    internal static string Error_EmptyToolTipRectangle;
    internal static string Error_EmptyRectangleValue;
    internal static string Error_InvalidShadowRectangle;
    internal static string Error_InvalidShadowDepth;
    internal static string Error_InvalidLightSource;
    internal static string Error_ChangingDock;
    internal static string Error_NullOrEmptyValue;
    internal static string Error_InvalidStateImages;
    internal static string Error_InvalidConnectorSegment;
    internal static string Error_InvalidConnectorSource;
    internal static string Error_CreatingToolTip;
    internal static string Error_InvalidDockStyle;
    internal static string Error_InvalidConnectorValue;
    internal static string Error_InvalidDesignerVerbValue;
    internal static string Error_InvalidRuntimeType;
    internal static string Error_InvalidArgumentValue;
    internal static string Error_InvalidRadiusValue;
    internal static string ToolTipString;
    internal static string CollectionEditorCaption;
    internal static string CollectionEditorProperties;
    internal static string CollectionEditorPropertiesMultiSelect;
    internal static string CollectionEditorPropertiesNone;
    internal static string CollectionEditorCantRemoveItem;
    internal static string CollectionEditorUndoBatchDesc;
    internal static string CollectionEditorInheritedReadOnlySelection;
    internal static string Error_ParameterAlreadyExists;
    internal static string Error_PropertyAlreadyExists;
    internal static string Error_HiddenPropertyAlreadyExists;
    internal static string Error_CorrelationInUse;
    internal static string Error_ItemNotExists;
    internal static string Error_NoHelpAvailable;
    internal static string Error_DuplicateWorkflow;
    internal static string Error_Recursion;
    internal static string Error_RootActivity;
    internal static string Error_ConditionDefinitionDeserializationFailed;
    internal static string Error_InvalidConditionDefinition;
    internal static string SR_InvokeTransactionalFromAtomic;
    internal static string Error_SuspendInAtomicCallChain;
    internal static string Error_LiteralPassedToOutRef;
    internal static string Error_GeneratorShouldContainSingleActivity;
    internal static string Error_DeclaringPropertyNotSupported;
    internal static string Error_DeclaringEventNotSupported;
    internal static string Error_DynamicEventNotSupported;
    internal static string Error_DynamicPropertyNotSupported;
    internal static string Error_ParameterTypeResolution;
    internal static string Error_DynamicActivity;
    internal static string Error_DynamicActivity2;
    internal static string Error_CompilerValidationFailed;
    internal static string Error_RuntimeValidationFailed;
    internal static string Error_TransactionAlreadyCanceled;
    internal static string Error_RemoveExecutingActivity;
    internal static string Error_InsideAtomicScope;
    internal static string SuspendReason_WorkflowChange;
    internal static string FilterDescription_ParameterDeclaration;
    internal static string FilterDescription_GenericArgument;
    internal static string LibraryPathIsInvalid;
    internal static string Error_CreateValidator;
    internal static string Error_InvalidPackageFile;
    internal static string Error_AddAssemblyRef;
    internal static string Error_AssemblyBadImage;
    internal static string BindPropertySetterName;
    internal static string Error_CannotResolveActivity;
    internal static string Error_CannotResolveRelativeActivity;
    internal static string Error_PathNotSetForActivitySource;
    internal static string Error_InvalidMemberPath;
    internal static string Error_TargetTypeMismatch;
    internal static string Warning_ParameterBinding;
    internal static string Error_ReferencedActivityPropertyNotBind;
    internal static string Error_TargetTypeDataSourcePathMismatch;
    internal static string Bind_ActivityDataSourceRecursionDetected;
    internal static string Bind_DuplicateDataSourceNames;
    internal static string Error_PathNotSetForXmlDataSource;
    internal static string Error_XmlDocumentLoadFailed;
    internal static string Error_XmlDataSourceInvalidPath;
    internal static string Error_XmlDataSourceMultipleNodes;
    internal static string Error_XmlDataSourceInvalidXPath;
    internal static string Error_InvalidObjectRefFormat;
    internal static string Error_ReadOnlyDataSource;
    internal static string Error_HandlerReadOnly;
    internal static string Error_XmlDataSourceReadOnly;
    internal static string Error_DataSourceNotExist;
    internal static string Error_PropertyNoGetter;
    internal static string Error_PropertyNoSetter;
    internal static string Error_PropertyHasNoGetterDefined;
    internal static string Error_PropertyHasNoSetterDefined;
    internal static string Error_PropertyReferenceNoGetter;
    internal static string Error_PropertyReferenceGetterNoAccess;
    internal static string Error_PropertyHasIndexParameters;
    internal static string Error_ReadOnlyField;
    internal static string Error_NoEnclosingContext;
    internal static string Error_NestedPersistOnClose;
    internal static string Error_NestedCompensatableActivity;
    internal static string Error_InvalidActivityForObjectDatasource;
    internal static string Error_DataSourceTypeConversionFailed;
    internal static string Error_BindDialogWrongPropertyType;
    internal static string Error_BindDialogNoValidPropertySelected;
    internal static string Error_BindDialogBindNotValid;
    internal static string Error_BindDialogCanNotBindToItself;
    internal static string Error_BindActivityReference;
    internal static string Error_NoTargetTypeForMethod;
    internal static string Error_MethodDataSourceIsReadOnly;
    internal static string Error_NotMethodDataSource;
    internal static string Error_MethodDataSourceWithPath;
    internal static string Error_PathSyntax;
    internal static string Error_UnmatchedParen;
    internal static string Error_UnmatchedBracket;
    internal static string Error_MemberWithSameNameExists;
    internal static string Error_ActivityIdentifierCanNotBeEmpty;
    internal static string Error_InvalidActivityIdentifier;
    internal static string Error_ActivityBindTypeConversionError;
    internal static string EmptyValue;
    internal static string Error_PropertyTypeNotDefined;
    internal static string Error_CompilationFailed;
    internal static string Error_MissingCompilationContext;
    internal static string InvokeWorkflowReference_VB;
    internal static string InvokeWorkflowReference_CS;
    internal static string Error_InvalidListItem;
    internal static string ParserMapPINoWhitespace;
    internal static string ParserMapPIBadCharEqual;
    internal static string ParserMapPIBadCharQuote;
    internal static string ParserMapPIBadKey;
    internal static string ParserMapPIMissingKey;
    internal static string ParserMapPIKeyNotSet;
    internal static string ParserMismatchDelimiter;
    internal static string ParserDanglingClause;
    internal static string UnknownDefinitionTag;
    internal static string CDATASection;
    internal static string TextSection;
    internal static string IncorrectSyntax;
    internal static string IncorrectTypeSyntax;
    internal static string Error_MultipleRootActivityCreator;
    internal static string Error_MustHaveParent;
    internal static string Error_ReferenceObjNotInitialized;
    internal static string Error_ReferenceInitResourceManager;
    internal static string Error_ResourceReferenceGetObject;
    internal static string Error_RefBindCantFindRef;
    internal static string Error_RefBindMissingReferenceName;
    internal static string Error_RefBindMissingAttribute;
    internal static string Error_ReferenceLoad;
    internal static string Error_ReferenceMissingAttribute;
    internal static string Error_ReferenceInvalidResourceFile;
    internal static string Error_ReferenceEmptyName;
    internal static string HandlerInvokerName;
    internal static string HandlerInvokerSwitchPrefix_CS;
    internal static string HandlerInvokerSwitchPrefix_VB;
    internal static string HandlerInvokerSwitchSuffix_CS;
    internal static string HandlerInvokerSwitchSuffix_VB;
    internal static string HandlerInvokerCaseBegin_CS;
    internal static string HandlerInvokerCaseBegin_VB;
    internal static string Standard;
    internal static string Base;
    internal static string ValidatorCompanionClassDesc;
    internal static string ExecutorCompanionClassDesc;
    internal static string DesignerCompanionClassDesc;
    internal static string CustomActivityBaseTypeDesc;
    internal static string ActivityProperties;
    internal static string ActivityPropertiesDesc;
    internal static string CompanionClasses;
    internal static string ActivityDesc;
    internal static string Error_TypeConversionFailed;
    internal static string SupportDataContext;
    internal static string AdvancedCategory;
    internal static string SupportDataContextDesc;
    internal static string BaseCompanionClassName;
    internal static string BaseCompanionClassDesc;
    internal static string Designer;
    internal static string Validator;
    internal static string Executor;
    internal static string BaseActivityType;
    internal static string Error_NotBuiltInActivity;
    internal static string NoChildActivities_Message;
    internal static string NoChildActivities_Caption;
    internal static string Error_CustomActivityCantCreate;
    internal static string Error_CantChangeBuiltInActivity;
    internal static string Error_CantAddBeforeBuiltInActivity;
    internal static string Error_CantAddAfterNonBuiltInActivity;
    internal static string Error_CannotAddRemoveChildActivities;
    internal static string Error_CantFindBuiltInActivity;
    internal static string Error_MissingBaseCompanionClassAttribute;
    internal static string Error_CantFindBuiltInParent;
    internal static string Error_CantCreateInstanceOfBaseType;
    internal static string Error_CustomActivityTypeCouldNotBeFound;
    internal static string None;
    internal static string AtomicTransaction;
    internal static string LocalDataContext;
    internal static string LocalDataContextDesc;
    internal static string CompanionClass;
    internal static string Error_AlreadyRootActivity;
    internal static string RootActivityName;
    internal static string RootActivityNameDesc;
    internal static string CustomProperties;
    internal static string VisibleDescr;
    internal static string EditableDescr;
    internal static string Error_CantCreateMethod;
    internal static string Error_CantEditNullValue;
    internal static string Error_CompanionTypeNotSet;
    internal static string Error_CompanionClassNameCanNotBeEmpty;
    internal static string Error_CouldNotEmitFieldInLocalDataContext;
    internal static string Error_CouldNotEmitMethodInLocalDataContext;
    internal static string Error_DerivationFromTypeWithLocalDataContext;
    internal static string Error_CompanionTypeDerivationError;
    internal static string Error_CantCreateDataContextClass;
    internal static string ArrayExistingBind;
    internal static string Error_NoMatchingFieldsOrProperties;
    internal static string ChooseFieldPropertyDatasource;
    internal static string SupportsTransaction;
    internal static string SupportsExceptions;
    internal static string SupportsCancellationHandlerActivity;
    internal static string SupportsEvents;
    internal static string SupportsDataSources;
    internal static string SupportsCompensationHandler;
    internal static string SupportsCompensationHandlerDesc;
    internal static string SupportsTransactionDesc;
    internal static string SupportsExceptionsDesc;
    internal static string SupportsCancelHandlerDesc;
    internal static string SupportsEventsDesc;
    internal static string TransactionDesc;
    internal static string Error_BaseTypeMustBeActivity;
    internal static string ExistingActivityBindTitle;
    internal static string ExistingActivityBindLabel;
    internal static string ExistingFieldPropBindTitle;
    internal static string ExistingFieldPropBindLabel;
    internal static string ProvidesSynchronization;
    internal static string ProvidesSynchronizationDesc;
    internal static string SynchronizationHandles;
    internal static string SynchronizationHandlesDesc;
    internal static string Error_TransactionAlreadyApplied;
    internal static string Error_BindBaseTypeNotSpecified;
    internal static string NonDelegateTargetType;
    internal static string Error_ClassnameNotInRootNamespace;
    internal static string Error_CantUseCurrentProjectTypeAsBase;
    internal static string Error_UnboundGenericType;
    internal static string Error_UnboundGenericTypeDataSource;
    internal static string Error_BaseTypeUnknown;
    internal static string Error_UnconfiguredBind;
    internal static string Error_CanNotEmitMemberInLocalDataContext;
    internal static string Error_DesignedTypeNotFound;
    internal static string Error_PathCouldNotBeResolvedToMember;
    internal static string Error_EdittingNullCollection;
    internal static string Error_MoreThanOneCompensationDecl;
    internal static string Error_ParentDoesNotSupportCompensation;
    internal static string Error_CantResolveEventHandler;
    internal static string Error_XSDObjectTypeNotSerializable;
    internal static string AEC_InvalidActivity;
    internal static string GetDynamicActivities_InvalidActivity;
    internal static string AEC_InvalidNestedActivity;
    internal static string Error_IDNotSetForActivitySource;
    internal static string Error_InvalidCustomPropertyName;
    internal static string Error_InvalidCustomPropertyType;
    internal static string Error_DPReadOnly;
    internal static string Error_DPMetaPropertyBinding;
    internal static string Error_DPSetValueBind;
    internal static string Error_DPSetValueHandler;
    internal static string Error_DPGetValueHandler;
    internal static string Error_DPAddHandlerNonEvent;
    internal static string Error_DPAddHandlerMetaProperty;
    internal static string Error_DPRemoveHandlerBind;
    internal static string Error_LanguageNeedsToBeVBCSharp;
    internal static string Error_TargetFxNotSupported;
    internal static string Error_CantConvertValueValue;
    internal static string Error_TypeIsNotValid;
    internal static string Error_TypePropertyInvalid;
    internal static string Error_EventCantBeMetaProperty;
    internal static string Error_EventMustBeDelegate;
    internal static string Error_DPPropertyTypeMissing;
    internal static string TransactionalContextActivityDescription;
    internal static string CompensatableTransactionalContextActivityDescription;
    internal static string SynchronizationScopeActivityDescription;
    internal static string SequenceActivityDescription;
    internal static string CompensateActivityDescription;
    internal static string Error_CompensateBadTargetTX;
    internal static string Error_CancelHandlerParentNotScope;
    internal static string FaultHandlerActivityDescription;
    internal static string Error_ExceptionTypeNotException;
    internal static string Error_FaultIsNotOfFaultType;
    internal static string Error_FaultTypeNoDefaultConstructor;
    internal static string FilterDescription_FaultHandlerActivity;
    internal static string Error_FaultHandlerActivityParentNotFaultHandlersActivity;
    internal static string Error_FaultHandlerActivityAllMustBeLast;
    internal static string Error_FaultHandlersActivityDeclNotAllFaultHandlerActivityDecl;
    internal static string Error_FaultHandlerActivityWrongOrder;
    internal static string Error_SenderMustBeActivityExecutionContext;
    internal static string Error_XomlWorkflowHasCode;
    internal static string Error_WrongParamForActivityResolveEventArgs;
    internal static string Error_ValidatorThrewException;
    internal static string Error_Missing_CanModifyProperties_True;
    internal static string Error_Missing_CanModifyProperties_False;
    internal static string Error_ModelingConstructsCanNotContainModelingConstructs;
    internal static string Error_RootIsNotEnabled;
    internal static string Error_MissingSetAccessor;
    internal static string Error_MissingAddHandler;
    internal static string Error_MissingCLRProperty;
    internal static string Error_NotReadOnlyProperty;
    internal static string Error_InvalidDependencyProperty;
    internal static string Error_ActivityNameExist;
    internal static string CannotCreateAttribute;
    internal static string NamespaceAndDeclaringTypeCannotBeNull;
    internal static string NotElementType;
    internal static string Error_LayoutSerializationActivityNotFound;
    internal static string Error_LayoutSerializationAssociatedActivityNotFound;
    internal static string Error_LayoutSerializationPersistenceSupport;
    internal static string Error_LayoutSerializationRootDesignerNotFound;
    internal static string Error_ParameterCannotBeEmpty;
    internal static string InvalidExecutionStatus;
    internal static string Error_LayoutDeserialization;
    internal static string Error_LayoutSerialization;
    internal static string Error_SerializerStackOverflow;
    internal static string Error_InvalidActivityForWorkflowChanges;
    internal static string Error_InvalidMemberType;
    internal static string Error_BindPathNullValue;
    internal static string Error_MarkupExtensionMissingTerminatingCharacter;
    internal static string Error_MarkupExtensionDeserializeFailed;
    internal static string Error_ApplyDynamicChangeFailed;
    internal static string Error_ActivityCircularReference;
    internal static string Error_ValidatorTypeIsInvalid;
    internal static string Error_InvalidServiceProvider;
    internal static string Error_InvalidRootForWorkflowChanges;
    internal static string Error_ExtraCharacterFoundAtEnd;
    internal static string Error_WorkflowChangesNotSupported;
    internal static string Error_TypeSystemAttributeArgument;
    internal static string Error_InvalidElementFoundForType;
    internal static string Error_ActivitySaveLoadNotCalled;
    internal static string Error_CanNotBindProperty;
    private static SR();
    internal static string GetString(string name, Object[] args);
    internal static string GetString(CultureInfo culture, string name, Object[] args);
    internal static string GetString(string name);
    internal static string GetString(CultureInfo culture, string name);
}
[AttributeUsageAttribute("32767")]
internal class SRCategoryAttribute : CategoryAttribute {
    public SRCategoryAttribute(string category);
    public SRCategoryAttribute(string category, string resourceSet);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class SRDescriptionAttribute : DescriptionAttribute {
    public SRDescriptionAttribute(string description);
    public SRDescriptionAttribute(string description, string resourceSet);
}
[AttributeUsageAttribute("32767")]
internal class SRDisplayNameAttribute : DisplayNameAttribute {
    public SRDisplayNameAttribute(string name);
    public SRDisplayNameAttribute(string name, string resourceSet);
}
internal static class System.AppContextDefaultValues : object {
    public static void PopulateDefaultValues();
}
internal static class System.LocalAppContext : object {
    private static LocalAppContext();
    public static bool IsSwitchEnabled(string switchName);
    internal static bool GetCachedSwitchValue(string switchName, Int32& switchValue);
    internal static void DefineSwitchDefault(string switchName, bool initialValue);
}
internal static class System.Runtime.Serialization.FormatterServicesNoSerializableCheck : object {
    internal static string FakeNameSeparatorString;
    private static FormatterServicesNoSerializableCheck();
    public static MemberInfo[] GetSerializableMembers(Type type, String[]& names);
}
[ActivityCodeGeneratorAttribute("System.Workflow.ComponentModel.Compiler.ActivityCodeGenerator")]
[ActivityValidatorAttribute("System.Workflow.ComponentModel.Compiler.ActivityValidator")]
[ToolboxBitmapAttribute("System.Workflow.ComponentModel.Activity", "Design.Resources.Activity.png")]
[ToolboxItemFilterAttribute("Microsoft.Workflow.VSDesigner", "3")]
[ToolboxItemFilterAttribute("System.Workflow.ComponentModel.Design.ActivitySet", "0")]
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializer", "System.ComponentModel.Design.Serialization.CodeDomSerializer")]
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.ActivityTypeCodeDomSerializer", "System.ComponentModel.Design.Serialization.TypeCodeDomSerializer")]
[DesignerCategoryAttribute("Component")]
[ActivityExecutorAttribute("System.Workflow.ComponentModel.ActivityExecutor`1<System.Workflow.ComponentModel.Activity>")]
[DesignerAttribute("System.Workflow.ComponentModel.Design.ActivityDesigner", "System.ComponentModel.Design.IDesigner")]
[DesignerAttribute("System.Workflow.ComponentModel.Design.ActivityDesigner", "System.ComponentModel.Design.IRootDesigner")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[RuntimeNamePropertyAttribute("Name")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Activity : DependencyObject {
    internal static DependencyProperty WorkflowXamlMarkupProperty;
    internal static DependencyProperty WorkflowRulesMarkupProperty;
    internal static DependencyProperty SynchronizationHandlesProperty;
    internal static DependencyProperty ActivityExecutionContextInfoProperty;
    public static DependencyProperty ActivityContextGuidProperty;
    internal static DependencyProperty CompletedExecutionContextsProperty;
    internal static DependencyProperty ActiveExecutionContextsProperty;
    internal static DependencyProperty CompletedOrderIdProperty;
    internal static DependencyProperty ExecutionStatusProperty;
    internal static DependencyProperty ExecutionResultProperty;
    internal static DependencyProperty WasExecutingProperty;
    internal static DependencyProperty HasPrimaryClosedProperty;
    internal static DependencyProperty WorkflowDefinitionProperty;
    internal static DependencyProperty WorkflowRuntimeProperty;
    [ThreadStaticAttribute]
internal static Hashtable ContextIdToActivityMap;
    [ThreadStaticAttribute]
internal static Activity DefinitionActivity;
    [ThreadStaticAttribute]
internal static ArrayList ActivityRoots;
    internal CompositeActivity parent;
    internal static DependencyProperty CustomActivityProperty;
    internal static Type ActivityType;
    public static DependencyProperty StatusChangedEvent;
    internal static DependencyProperty LockCountOnStatusChangeChangedEvent;
    internal static DependencyProperty StatusChangedLockedEvent;
    public static DependencyProperty CancelingEvent;
    public static DependencyProperty FaultingEvent;
    public static DependencyProperty ClosedEvent;
    public static DependencyProperty ExecutingEvent;
    public static DependencyProperty CompensatingEvent;
    protected Guid WorkflowInstanceId { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public CompositeActivity Parent { get; }
    [BrowsableAttribute("True")]
[SRCategoryAttribute("Activity")]
[ParenthesizePropertyNameAttribute("True")]
[SRDescriptionAttribute("NameDescr")]
[MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
public string Name { get; public set; }
    [BrowsableAttribute("True")]
[SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("EnabledDescr")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string QualifiedName { get; }
    [BrowsableAttribute("True")]
[SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("DescriptionDescr")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
public string Description { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
internal int LockCountOnStatusChange { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
internal bool HasPrimaryClosed { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ActivityExecutionStatus ExecutionStatus { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ActivityExecutionResult ExecutionResult { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsDynamicActivity { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
internal bool WasExecuting { get; }
    internal string DottedPath { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
internal IWorkflowCoreRuntime WorkflowCoreRuntime { get; }
    internal bool DynamicUpdateMode { get; internal set; }
    internal string CachedDottedPath { get; }
    internal bool IsContextActivity { get; }
    internal int ContextId { get; }
    internal Guid ContextGuid { get; }
    internal Activity ContextActivity { get; }
    internal Activity ParentContextActivity { get; }
    internal Activity RootContextActivity { get; }
    internal Activity RootActivity { get; }
    internal bool CanUninitializeNow { get; }
    internal bool NeedsCompensation { get; }
    internal bool SupportsTransaction { get; }
    internal bool SupportsSynchronization { get; }
    internal bool PersistOnClose { get; }
    private static Activity();
    public Activity(string name);
    protected internal virtual void Initialize(IServiceProvider provider);
    protected internal virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected internal virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    protected internal virtual ActivityExecutionStatus HandleFault(ActivityExecutionContext executionContext, Exception exception);
    protected virtual void OnClosed(IServiceProvider provider);
    protected internal virtual void Uninitialize(IServiceProvider provider);
    protected internal virtual void OnActivityExecutionContextLoad(IServiceProvider provider);
    protected internal virtual void OnActivityExecutionContextUnload(IServiceProvider provider);
    protected internal void RaiseGenericEvent(DependencyProperty dependencyEvent, object sender, T e);
    protected internal void RaiseEvent(DependencyProperty dependencyEvent, object sender, EventArgs e);
    protected void TrackData(object userData);
    protected void TrackData(string userDataKey, object userData);
    protected Guid get_WorkflowInstanceId();
    protected internal void Invoke(EventHandler`1<T> handler, T e);
    protected internal void Invoke(IActivityEventListener`1<T> eventListener, T e);
    public CompositeActivity get_Parent();
    internal void SetParent(CompositeActivity compositeActivity);
    public string get_Name();
    public void set_Name(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public string get_QualifiedName();
    public string get_Description();
    public void set_Description(string value);
    public void add_StatusChanged(EventHandler`1<ActivityExecutionStatusChangedEventArgs> value);
    public void remove_StatusChanged(EventHandler`1<ActivityExecutionStatusChangedEventArgs> value);
    internal void HoldLockOnStatusChange(IActivityEventListener`1<ActivityExecutionStatusChangedEventArgs> eventListener);
    internal void ReleaseLockOnStatusChange(IActivityEventListener`1<ActivityExecutionStatusChangedEventArgs> eventListener);
    internal int get_LockCountOnStatusChange();
    internal bool get_HasPrimaryClosed();
    public void add_Canceling(EventHandler`1<ActivityExecutionStatusChangedEventArgs> value);
    public void remove_Canceling(EventHandler`1<ActivityExecutionStatusChangedEventArgs> value);
    public void add_Faulting(EventHandler`1<ActivityExecutionStatusChangedEventArgs> value);
    public void remove_Faulting(EventHandler`1<ActivityExecutionStatusChangedEventArgs> value);
    public void add_Closed(EventHandler`1<ActivityExecutionStatusChangedEventArgs> value);
    public void remove_Closed(EventHandler`1<ActivityExecutionStatusChangedEventArgs> value);
    public void add_Executing(EventHandler`1<ActivityExecutionStatusChangedEventArgs> value);
    public void remove_Executing(EventHandler`1<ActivityExecutionStatusChangedEventArgs> value);
    public void add_Compensating(EventHandler`1<ActivityExecutionStatusChangedEventArgs> value);
    public void remove_Compensating(EventHandler`1<ActivityExecutionStatusChangedEventArgs> value);
    public void RegisterForStatusChange(DependencyProperty dependencyProp, IActivityEventListener`1<ActivityExecutionStatusChangedEventArgs> activityStatusChangeListener);
    public void UnregisterForStatusChange(DependencyProperty dependencyProp, IActivityEventListener`1<ActivityExecutionStatusChangedEventArgs> activityStatusChangeListener);
    public ActivityExecutionStatus get_ExecutionStatus();
    public ActivityExecutionResult get_ExecutionResult();
    public bool get_IsDynamicActivity();
    internal bool get_WasExecuting();
    public Activity GetActivityByName(string activityQualifiedName);
    public Activity GetActivityByName(string activityQualifiedName, bool withinThisActivityOnly);
    internal void ResetAllKnownDependencyProperties();
    internal virtual Activity TraverseDottedPath(string dottedPath);
    internal Activity TraverseDottedPathFromRoot(string dottedPathFromRoot);
    internal string get_DottedPath();
    internal IWorkflowCoreRuntime get_WorkflowCoreRuntime();
    internal bool get_DynamicUpdateMode();
    internal void set_DynamicUpdateMode(bool value);
    internal string get_CachedDottedPath();
    public Activity Clone();
    public void Save(Stream stream);
    public void Save(Stream stream, IFormatter formatter);
    public static Activity Load(Stream stream, Activity outerActivity);
    public static Activity Load(Stream stream, Activity outerActivity, IFormatter formatter);
    internal static void add_ActivityResolve(ActivityResolveEventHandler value);
    internal static void remove_ActivityResolve(ActivityResolveEventHandler value);
    internal static void add_WorkflowChangeActionsResolve(WorkflowChangeActionsResolveEventHandler value);
    internal static void remove_WorkflowChangeActionsResolve(WorkflowChangeActionsResolveEventHandler value);
    internal static Activity OnResolveActivityDefinition(Type type, string workflowMarkup, string rulesMarkup, bool createNew, bool initForRuntime, IServiceProvider serviceProvider);
    internal static ArrayList OnResolveWorkflowChangeActions(string workflowChangesMarkup, Activity root);
    internal bool get_IsContextActivity();
    internal int get_ContextId();
    internal Guid get_ContextGuid();
    internal Activity get_ContextActivity();
    internal Activity get_ParentContextActivity();
    internal Activity get_RootContextActivity();
    internal Activity get_RootActivity();
    internal virtual void OnInitializeDefinitionForRuntime();
    internal virtual void OnInitializeInstanceForRuntime(IWorkflowCoreRuntime workflowCoreRuntime);
    internal virtual void OnInitializeActivatingInstanceForRuntime(IWorkflowCoreRuntime workflowCoreRuntime);
    internal virtual void FixUpMetaProperties(DependencyObject originalObject);
    internal virtual void FixUpParentChildRelationship(Activity definitionActivity, Activity parentActivity, Hashtable deserializedActivities);
    internal virtual IList`1<Activity> CollectNestedActivities();
    internal void SetStatus(ActivityExecutionStatus newStatus, bool transacted);
    internal void MarkCanceled();
    internal void MarkCompleted();
    internal void MarkCompensated();
    internal void MarkFaulted();
    internal bool get_CanUninitializeNow();
    internal bool get_NeedsCompensation();
    internal bool get_SupportsTransaction();
    internal bool get_SupportsSynchronization();
    internal bool get_PersistOnClose();
    internal int IncrementCompletedOrderId();
    internal void DecrementCompletedOrderId();
    internal static string ActivityExecutionStatusEnumToString(ActivityExecutionStatus status);
    internal static string ActivityExecutionResultEnumToString(ActivityExecutionResult activityExecutionResult);
    public virtual string ToString();
}
[BrowsableAttribute("True")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.ActivityBindTypeConverter")]
[ActivityValidatorAttribute("System.Workflow.ComponentModel.Compiler.ActivityBindValidator")]
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.BindMarkupExtensionSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.ActivityBind : MarkupExtension {
    internal bool DynamicUpdateMode { get; internal set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IDictionary UserData { get; }
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("ActivityBindIDDescription")]
[ConstructorArgumentAttribute("name")]
public string Name { get; public set; }
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("ActivityBindPathDescription")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.ActivityBindPathTypeConverter")]
public string Path { get; public set; }
    public ActivityBind(string name);
    public ActivityBind(string name, string path);
    internal void SetContext(Activity activity);
    internal bool get_DynamicUpdateMode();
    internal void set_DynamicUpdateMode(bool value);
    public IDictionary get_UserData();
    internal static object GetDataSourceObject(Activity activity, string inputName, String& name);
    public string get_Name();
    public void set_Name(string value);
    public string get_Path();
    public void set_Path(string value);
    public virtual object ProvideValue(IServiceProvider provider);
    public object GetRuntimeValue(Activity activity, Type targetType);
    public object GetRuntimeValue(Activity activity);
    public void SetRuntimeValue(Activity activity, object value);
    public virtual string ToString();
    internal static MemberInfo GetMemberInfo(Type dataSourceType, string path, Type targetType);
    internal static string GetRelativePathExpression(Activity parentActivity, Activity childActivity);
    private sealed virtual override ICollection System.Workflow.ComponentModel.Design.IPropertyValueProvider.GetPropertyValues(ITypeDescriptorContext context);
}
internal class System.Workflow.ComponentModel.ActivityBindPropertyInfo : PropertyInfo {
    public string Name { get; }
    public Type PropertyType { get; }
    public PropertyAttributes Attributes { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public Type DeclaringType { get; }
    public Type ReflectedType { get; }
    public ActivityBindPropertyInfo(Type declaringType, MethodInfo getMethod, MethodInfo setMethod, string propertyName, PropertyInfo originalPropertyInfo);
    public virtual string get_Name();
    public virtual MethodInfo GetGetMethod(bool nonPublic);
    public virtual MethodInfo GetSetMethod(bool nonPublic);
    public virtual Type get_PropertyType();
    public virtual ParameterInfo[] GetIndexParameters();
    public virtual object GetValue(object obj, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture);
    public virtual void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture);
    public virtual MethodInfo[] GetAccessors(bool nonPublic);
    public virtual PropertyAttributes get_Attributes();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual Type get_DeclaringType();
    public virtual Type get_ReflectedType();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
}
internal enum System.Workflow.ComponentModel.ActivityBindTypes : Enum {
    public int value__;
    public static ActivityBindTypes Field;
    public static ActivityBindTypes Property;
    public static ActivityBindTypes Method;
}
[DesignerSerializerAttribute("System.Workflow.ComponentModel.ActivityChangeActionMarkupSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.ComponentModel.ActivityChangeAction : WorkflowChangeAction {
    [DesignerSerializationVisibilityAttribute("1")]
public string OwnerActivityDottedPath { get; internal set; }
    protected ActivityChangeAction(CompositeActivity compositeActivity);
    public string get_OwnerActivityDottedPath();
    internal void set_OwnerActivityDottedPath(string value);
    protected internal virtual ValidationErrorCollection ValidateChanges(Activity contextActivity);
}
internal class System.Workflow.ComponentModel.ActivityChangeActionMarkupSerializer : WorkflowMarkupSerializer {
    protected internal virtual PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj);
}
[DefaultMemberAttribute("Item")]
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.ActivityCollectionMarkupSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.ActivityCollection : List`1<Activity> {
    internal Activity Owner { get; }
    private Activity System.Collections.Generic.IList<System.Workflow.ComponentModel.Activity>.Item { get; private set; }
    private bool System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.IsReadOnly { get; }
    private int System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.Count { get; }
    public int Count { get; }
    public Activity Item { get; public set; }
    public Activity Item { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ActivityCollection(Activity owner);
    [CompilerGeneratedAttribute]
internal void add_ListChanging(EventHandler`1<ActivityCollectionChangeEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_ListChanging(EventHandler`1<ActivityCollectionChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ListChanged(EventHandler`1<ActivityCollectionChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ListChanged(EventHandler`1<ActivityCollectionChangeEventArgs> value);
    internal Activity get_Owner();
    internal void InnerAdd(Activity activity);
    private sealed virtual override void System.Collections.Generic.IList<System.Workflow.ComponentModel.Activity>.RemoveAt(int index);
    private sealed virtual override void System.Collections.Generic.IList<System.Workflow.ComponentModel.Activity>.Insert(int index, Activity item);
    private sealed virtual override Activity System.Collections.Generic.IList<System.Workflow.ComponentModel.Activity>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<System.Workflow.ComponentModel.Activity>.set_Item(int index, Activity value);
    private sealed virtual override int System.Collections.Generic.IList<System.Workflow.ComponentModel.Activity>.IndexOf(Activity item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.Contains(Activity item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.Remove(Activity item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.Clear();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.Add(Activity item);
    private sealed virtual override int System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.get_Count();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>.CopyTo(Activity[] array, int arrayIndex);
    private sealed virtual override IEnumerator`1<Activity> System.Collections.Generic.IEnumerable<System.Workflow.ComponentModel.Activity>.GetEnumerator();
    public sealed virtual int get_Count();
    public void Add(Activity item);
    public void Clear();
    public void Insert(int index, Activity item);
    public bool Remove(Activity item);
    public sealed virtual void RemoveAt(int index);
    public Activity get_Item(int index);
    public void set_Item(int index, Activity value);
    public Activity get_Item(string key);
    public int IndexOf(Activity item);
    public bool Contains(Activity item);
    public IEnumerator`1<Activity> GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.ComponentModel.ActivityCollectionChangeAction : Enum {
    public int value__;
    public static ActivityCollectionChangeAction Add;
    public static ActivityCollectionChangeAction Remove;
    public static ActivityCollectionChangeAction Replace;
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs : EventArgs {
    public IList`1<Activity> RemovedItems { get; }
    public IList`1<Activity> AddedItems { get; }
    public object Owner { get; }
    public int Index { get; }
    public ActivityCollectionChangeAction Action { get; }
    public ActivityCollectionChangeEventArgs(int index, ICollection`1<Activity> removedItems, ICollection`1<Activity> addedItems, object owner, ActivityCollectionChangeAction action);
    public ActivityCollectionChangeEventArgs(int index, Activity removedActivity, Activity addedActivity, object owner, ActivityCollectionChangeAction action);
    public IList`1<Activity> get_RemovedItems();
    public IList`1<Activity> get_AddedItems();
    public object get_Owner();
    public int get_Index();
    public ActivityCollectionChangeAction get_Action();
}
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.DependencyObjectCodeDomSerializer", "System.ComponentModel.Design.Serialization.CodeDomSerializer")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.ConditionTypeConverter")]
[ActivityValidatorAttribute("System.Workflow.ComponentModel.Compiler.ConditionValidator")]
[MergablePropertyAttribute("False")]
[BrowsableAttribute("True")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.ComponentModel.ActivityCondition : DependencyObject {
    public abstract virtual bool Evaluate(Activity activity, IServiceProvider provider);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.ActivityExecutionContext : object {
    public static DependencyProperty CurrentExceptionProperty;
    internal static DependencyProperty GrantedLocksProperty;
    internal static DependencyProperty CachedGrantedLocksProperty;
    internal static DependencyProperty LockAcquiredCallbackProperty;
    public Activity Activity { get; }
    public ActivityExecutionContextManager ExecutionContextManager { get; }
    public Guid ContextGuid { get; }
    internal int ContextId { get; }
    internal IWorkflowCoreRuntime WorkflowCoreRuntime { get; }
    internal ActivityExecutionContext(Activity activity);
    internal ActivityExecutionContext(Activity activity, bool allowSignalsOnCurrentActivity);
    private static ActivityExecutionContext();
    public Activity get_Activity();
    public ActivityExecutionContextManager get_ExecutionContextManager();
    public T GetService();
    public sealed virtual object GetService(Type serviceType);
    public Guid get_ContextGuid();
    internal int get_ContextId();
    internal void InitializeActivity(Activity activity);
    public void ExecuteActivity(Activity activity);
    public void CancelActivity(Activity activity);
    internal void CompensateActivity(Activity activity);
    internal void FaultActivity(Exception e);
    public void CloseActivity();
    internal void Invoke(EventHandler`1<T> handler, T e);
    public void TrackData(object userData);
    public void TrackData(string userDataKey, object userData);
    internal bool AcquireLocks(IActivityEventListener`1<EventArgs> locksAcquiredCallback);
    internal void ReleaseLocks(bool transactional);
    internal void SuspendWorkflowInstance(string suspendDescription);
    internal void TerminateWorkflowInstance(Exception e);
    internal void CheckpointInstanceState();
    internal void RequestRevertToCheckpointState(EventHandler`1<EventArgs> handler, EventArgs data, bool suspendOnRevert, string suspendOnRevertInfo);
    internal void DisposeCheckpointState();
    internal bool IsValidChild(Activity activity, bool allowContextVariance);
    internal bool IsValidNestedChild(Activity activity);
    internal IWorkflowCoreRuntime get_WorkflowCoreRuntime();
    internal static bool IsInAtomicTransaction(Activity activity);
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class System.Workflow.ComponentModel.ActivityExecutionContextInfo : object {
    internal int ContextId { get; }
    public Guid ContextGuid { get; }
    public string ActivityQualifiedName { get; }
    public int CompletedOrderId { get; }
    internal int ParentContextId { get; }
    internal PersistFlags Flags { get; internal set; }
    internal ActivityExecutionContextInfo(string qualifiedName, int contextId, Guid contextGuid, int parentContextId);
    internal int get_ContextId();
    public Guid get_ContextGuid();
    public string get_ActivityQualifiedName();
    public int get_CompletedOrderId();
    internal int get_ParentContextId();
    internal void SetCompletedOrderId(int completedOrderId);
    internal PersistFlags get_Flags();
    internal void set_Flags(PersistFlags value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.ActivityExecutionContextManager : object {
    public ReadOnlyCollection`1<ActivityExecutionContext> ExecutionContexts { get; }
    public IEnumerable`1<Guid> PersistedExecutionContexts { get; }
    internal ReadOnlyCollection`1<ActivityExecutionContextInfo> CompletedExecutionContexts { get; }
    internal ActivityExecutionContextManager(ActivityExecutionContext ownerContext);
    public ReadOnlyCollection`1<ActivityExecutionContext> get_ExecutionContexts();
    public ActivityExecutionContext CreateExecutionContext(Activity activity);
    public void CompleteExecutionContext(ActivityExecutionContext childContext);
    public void CompleteExecutionContext(ActivityExecutionContext childContext, bool forcePersist);
    public ActivityExecutionContext GetExecutionContext(Activity activity);
    public IEnumerable`1<Guid> get_PersistedExecutionContexts();
    public ActivityExecutionContext GetPersistedExecutionContext(Guid contextGuid);
    internal void Dispose();
    internal ReadOnlyCollection`1<ActivityExecutionContextInfo> get_CompletedExecutionContexts();
    internal ActivityExecutionContext DiscardPersistedExecutionContext(ActivityExecutionContextInfo contextInfo);
}
internal abstract class System.Workflow.ComponentModel.ActivityExecutionFilter : ActivityExecutor {
    public virtual void OnActivityAdded(ActivityExecutionContext executionContext, Activity addedActivity);
    public virtual void OnActivityRemoved(ActivityExecutionContext executionContext, Activity removedActivity);
    public virtual void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext);
    public virtual ActivityExecutionStatus Execute(Activity activity, ActivityExecutionContext executionContext);
    public virtual ActivityExecutionStatus Cancel(Activity activity, ActivityExecutionContext executionContext);
    public virtual ActivityExecutionStatus HandleFault(Activity activity, ActivityExecutionContext executionContext, Exception exception);
    public virtual ActivityExecutionStatus Compensate(Activity activity, ActivityExecutionContext executionContext);
    protected ActivityExecutor NextActivityExecutorInChain(Activity activity);
    protected ISupportWorkflowChanges NextDynamicChangeExecutorInChain(Activity activity);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.ComponentModel.ActivityExecutionResult : Enum {
    public byte value__;
    public static ActivityExecutionResult None;
    public static ActivityExecutionResult Succeeded;
    public static ActivityExecutionResult Canceled;
    public static ActivityExecutionResult Compensated;
    public static ActivityExecutionResult Faulted;
    public static ActivityExecutionResult Uninitialized;
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.ComponentModel.ActivityExecutionStatus : Enum {
    public byte value__;
    public static ActivityExecutionStatus Initialized;
    public static ActivityExecutionStatus Executing;
    public static ActivityExecutionStatus Canceling;
    public static ActivityExecutionStatus Closed;
    public static ActivityExecutionStatus Compensating;
    public static ActivityExecutionStatus Faulting;
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs : EventArgs {
    public ActivityExecutionStatus ExecutionStatus { get; }
    public ActivityExecutionResult ExecutionResult { get; }
    public Activity Activity { get; }
    unknown IWorkflowCoreRuntime BaseExecutor {internal set; }
    internal ActivityExecutionStatusChangedEventArgs(ActivityExecutionStatus executionStatus, ActivityExecutionResult executionResult, Activity activity);
    public ActivityExecutionStatus get_ExecutionStatus();
    public ActivityExecutionResult get_ExecutionResult();
    public Activity get_Activity();
    internal void set_BaseExecutor(IWorkflowCoreRuntime value);
    public virtual string ToString();
}
internal abstract class System.Workflow.ComponentModel.ActivityExecutor : object {
    public abstract virtual ActivityExecutionStatus Execute(Activity activity, ActivityExecutionContext executionContext);
    public abstract virtual ActivityExecutionStatus Cancel(Activity activity, ActivityExecutionContext executionContext);
    public abstract virtual ActivityExecutionStatus HandleFault(Activity activity, ActivityExecutionContext executionContext, Exception exception);
    public abstract virtual ActivityExecutionStatus Compensate(Activity activity, ActivityExecutionContext executionContext);
}
internal class System.Workflow.ComponentModel.ActivityExecutor`1 : ActivityExecutor {
    public sealed virtual ActivityExecutionStatus Execute(Activity activity, ActivityExecutionContext executionContext);
    public sealed virtual ActivityExecutionStatus Cancel(Activity activity, ActivityExecutionContext executionContext);
    public sealed virtual ActivityExecutionStatus HandleFault(Activity activity, ActivityExecutionContext executionContext, Exception exception);
    public sealed virtual ActivityExecutionStatus Compensate(Activity activity, ActivityExecutionContext executionContext);
    protected virtual ActivityExecutionStatus Execute(T activity, ActivityExecutionContext executionContext);
    protected virtual ActivityExecutionStatus Cancel(T activity, ActivityExecutionContext executionContext);
    protected virtual ActivityExecutionStatus HandleFault(T activity, ActivityExecutionContext executionContext, Exception exception);
    protected virtual ActivityExecutionStatus Compensate(T activity, ActivityExecutionContext executionContext);
}
[AttributeUsageAttribute("1028")]
internal class System.Workflow.ComponentModel.ActivityExecutorAttribute : Attribute {
    public string ExecutorTypeName { get; }
    public ActivityExecutorAttribute(Type executorType);
    public ActivityExecutorAttribute(string executorTypeName);
    public string get_ExecutorTypeName();
}
internal class System.Workflow.ComponentModel.ActivityExecutorDelegateInfo`1 : object {
    public string ActivityQualifiedName { get; }
    public string SubscribedActivityQualifiedName { get; public set; }
    public int ContextId { get; }
    public EventHandler`1<T> HandlerDelegate { get; }
    public IActivityEventListener`1<T> EventListener { get; }
    public ActivityExecutorDelegateInfo`1(EventHandler`1<T> delegateValue, Activity contextActivity);
    public ActivityExecutorDelegateInfo`1(IActivityEventListener`1<T> eventListener, Activity contextActivity);
    public ActivityExecutorDelegateInfo`1(EventHandler`1<T> delegateValue, Activity contextActivity, bool wantInTransact);
    public ActivityExecutorDelegateInfo`1(IActivityEventListener`1<T> eventListener, Activity contextActivity, bool wantInTransact);
    internal ActivityExecutorDelegateInfo`1(bool useCurrentContext, EventHandler`1<T> delegateValue, Activity contextActivity);
    internal ActivityExecutorDelegateInfo`1(bool useCurrentContext, IActivityEventListener`1<T> eventListener, Activity contextActivity);
    public string get_ActivityQualifiedName();
    public string get_SubscribedActivityQualifiedName();
    public void set_SubscribedActivityQualifiedName(string value);
    public int get_ContextId();
    public EventHandler`1<T> get_HandlerDelegate();
    public IActivityEventListener`1<T> get_EventListener();
    internal void InvokeDelegate(Activity currentContextActivity, T e, bool sync, bool transacted);
    public void InvokeDelegate(Activity currentContextActivity, T e, bool transacted);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Workflow.ComponentModel.ActivityExecutorOperation : SchedulableItem {
    public ActivityExecutorOperation(Activity activity, ActivityOperationType opt, int contextId);
    public ActivityExecutorOperation(Activity activity, ActivityOperationType opt, int contextId, Exception e);
    public virtual bool Run(IWorkflowCoreRuntime workflowCoreRuntime);
    public virtual string ToString();
}
internal static class System.Workflow.ComponentModel.ActivityExecutors : object {
    private static ActivityExecutors();
    internal static ActivityExecutor[] GetActivityExecutors(Activity activity);
    public static ActivityExecutor GetActivityExecutorFromType(Type executorType);
    public static ActivityExecutor GetActivityExecutor(Activity activity);
}
internal enum System.Workflow.ComponentModel.ActivityOperationType : Enum {
    public byte value__;
    public static ActivityOperationType Execute;
    public static ActivityOperationType Cancel;
    public static ActivityOperationType Compensate;
    public static ActivityOperationType HandleFault;
}
internal class System.Workflow.ComponentModel.ActivityResolveEventArgs : EventArgs {
    public Type Type { get; }
    public string WorkflowMarkup { get; }
    public string RulesMarkup { get; }
    public bool CreateNewDefinition { get; }
    public bool InitializeForRuntime { get; }
    public IServiceProvider ServiceProvider { get; }
    internal ActivityResolveEventArgs(Type activityType, string workflowMarkup, string rulesMarkup, bool createNew, bool initForRuntime, IServiceProvider serviceProvider);
    public Type get_Type();
    public string get_WorkflowMarkup();
    public string get_RulesMarkup();
    public bool get_CreateNewDefinition();
    public bool get_InitializeForRuntime();
    public IServiceProvider get_ServiceProvider();
}
internal class System.Workflow.ComponentModel.ActivityResolveEventHandler : MulticastDelegate {
    public ActivityResolveEventHandler(object object, IntPtr method);
    public virtual Activity Invoke(object sender, ActivityResolveEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ActivityResolveEventArgs e, AsyncCallback callback, object object);
    public virtual Activity EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.AddedActivityAction : ActivityChangeAction {
    public int Index { get; internal set; }
    public Activity AddedActivity { get; internal set; }
    public AddedActivityAction(CompositeActivity compositeActivity, Activity activityAdded);
    public int get_Index();
    internal void set_Index(int value);
    public Activity get_AddedActivity();
    internal void set_AddedActivity(Activity value);
    protected internal virtual bool ApplyTo(Activity rootActivity);
}
[AttributeUsageAttribute("4")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.AlternateFlowActivityAttribute : Attribute {
}
internal static class System.Workflow.ComponentModel.AppSettings : object {
    internal static bool AllowXCode { get; }
    internal static int XOMLMaximumNestedObjectDepth { get; }
    internal static bool DisableActivitySurrogateSelectorTypeCheck { get; }
    internal static bool DisableXOMLSerializerDefaultUnauthorizedTypes { get; }
    internal static bool DisableXOMLSerializerTypeChecking { get; }
    private static AppSettings();
    internal static bool get_AllowXCode();
    internal static int get_XOMLMaximumNestedObjectDepth();
    internal static bool get_DisableActivitySurrogateSelectorTypeCheck();
    internal static bool get_DisableXOMLSerializerDefaultUnauthorizedTypes();
    internal static bool get_DisableXOMLSerializerTypeChecking();
}
internal class System.Workflow.ComponentModel.AssemblyRef : object {
    internal static string ActivitiesAssemblyRef;
    internal static string RuntimeAssemblyRef;
}
[BrowsableAttribute("False")]
internal abstract class System.Workflow.ComponentModel.BindBase : object {
    protected bool designMode;
    public abstract virtual object GetRuntimeValue(Activity activity);
    public abstract virtual object GetRuntimeValue(Activity activity, Type targetType);
    public abstract virtual void SetRuntimeValue(Activity activity, object value);
    protected virtual void OnRuntimeInitialized(Activity activity);
}
internal static class System.Workflow.ComponentModel.BindHelpers : object {
    internal static Type GetBaseType(IServiceProvider serviceProvider, PropertyValidationContext validationContext);
    internal static AccessTypes GetAccessType(IServiceProvider serviceProvider, PropertyValidationContext validationContext);
    internal static object ResolveActivityPath(Activity refActivity, string path);
    internal static PropertyInfo GetMatchedPropertyInfo(Type memberType, String[] aryArgName, Object[] args);
    internal static bool MatchIndexerParameters(PropertyInfo propertyInfo, String[] argNames, Object[] args);
    internal static Type GetMemberType(MemberInfo memberInfo);
}
internal class System.Workflow.ComponentModel.BindRecursionContext : object {
    public bool Contains(Activity activity, ActivityBind bind);
    public void Add(Activity activity, ActivityBind bind);
}
[ToolboxItemAttribute("False")]
[DesignerAttribute("System.Workflow.ComponentModel.Design.CancellationHandlerActivityDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxBitmapAttribute("System.Workflow.ComponentModel.CancellationHandlerActivity", "Resources.CancellationHandler.bmp")]
[ActivityValidatorAttribute("System.Workflow.ComponentModel.CancellationHandlerValidator")]
[AlternateFlowActivityAttribute]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.CancellationHandlerActivity : CompositeActivity {
    public CancellationHandlerActivity(string name);
    protected internal virtual void Initialize(IServiceProvider provider);
    protected internal virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected internal virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e);
    protected internal virtual void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity);
    protected internal virtual void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext);
}
internal class System.Workflow.ComponentModel.CancellationHandlerValidator : CompositeActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
[SRDescriptionAttribute("CompensatableTransactionalContextActivityDescription")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[ToolboxBitmapAttribute("System.Workflow.ComponentModel.CompensatableTransactionScopeActivity", "Resources.Sequence.png")]
[DesignerAttribute("System.Workflow.ComponentModel.Design.CompensatableTransactionScopeActivityDesigner", "System.ComponentModel.Design.IDesigner")]
[PersistOnCloseAttribute]
[SupportsTransactionAttribute]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.CompensatableTransactionScopeActivity : CompositeActivity {
    internal static DependencyProperty TransactionOptionsProperty;
    [SRDescriptionAttribute("TransactionDesc")]
[MergablePropertyAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
[ReadOnlyAttribute("True")]
public WorkflowTransactionOptions TransactionOptions { get; public set; }
    public CompensatableTransactionScopeActivity(string name);
    private static CompensatableTransactionScopeActivity();
    public WorkflowTransactionOptions get_TransactionOptions();
    public void set_TransactionOptions(WorkflowTransactionOptions value);
    protected internal virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected internal virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e);
    protected internal virtual void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity);
    protected internal virtual void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext);
    private sealed virtual override ActivityExecutionStatus System.Workflow.ComponentModel.ICompensatableActivity.Compensate(ActivityExecutionContext executionContext);
}
[SRDescriptionAttribute("CompensateActivityDescription")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[DesignerAttribute("System.Workflow.ComponentModel.CompensateDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxBitmapAttribute("System.Workflow.ComponentModel.CompensateActivity", "Resources.Compensate.png")]
[ActivityValidatorAttribute("System.Workflow.ComponentModel.CompensateValidator")]
[SRCategoryAttribute("Standard")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.CompensateActivity : Activity {
    public static DependencyProperty TargetActivityNameProperty;
    [SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("CompensatableActivityDescr")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.PropertyValueProviderTypeConverter")]
[MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
public string TargetActivityName { get; public set; }
    public CompensateActivity(string name);
    private static CompensateActivity();
    public string get_TargetActivityName();
    public void set_TargetActivityName(string value);
    protected internal virtual void Initialize(IServiceProvider provider);
    protected internal virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e);
    private sealed virtual override ICollection System.Workflow.ComponentModel.Design.IPropertyValueProvider.GetPropertyValues(ITypeDescriptorContext context);
    internal static StringCollection GetCompensatableTargets(CompensateActivity compensate);
}
[ActivityDesignerThemeAttribute("System.Workflow.ComponentModel.CompensateDesignerTheme")]
internal class System.Workflow.ComponentModel.CompensateDesigner : ActivityDesigner {
    public virtual bool CanBeParentedTo(CompositeActivityDesigner parentActivityDesigner);
}
internal class System.Workflow.ComponentModel.CompensateDesignerTheme : ActivityDesignerTheme {
    public CompensateDesignerTheme(WorkflowTheme theme);
}
internal class System.Workflow.ComponentModel.CompensateValidator : ActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
[ToolboxItemAttribute("False")]
[DesignerAttribute("System.Workflow.ComponentModel.Design.CompensationHandlerActivityDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxBitmapAttribute("System.Workflow.ComponentModel.CompensationHandlerActivity", "Resources.Compensation.png")]
[ActivityValidatorAttribute("System.Workflow.ComponentModel.CompensationValidator")]
[AlternateFlowActivityAttribute]
[SRCategoryAttribute("Standard")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.CompensationHandlerActivity : CompositeActivity {
    public CompensationHandlerActivity(string name);
    protected internal virtual void Initialize(IServiceProvider provider);
    protected internal virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected internal virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e);
    protected internal virtual void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity);
    protected internal virtual void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext);
}
internal class System.Workflow.ComponentModel.CompensationHandlingFilter : ActivityExecutionFilter {
    public static DependencyProperty CompensateProcessedProperty;
    internal static DependencyProperty LastCompensatedOrderIdProperty;
    private static CompensationHandlingFilter();
    public virtual ActivityExecutionStatus Compensate(Activity activity, ActivityExecutionContext executionContext);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e);
    internal static Activity GetCompensationHandler(Activity activityWithCompensation);
}
internal static class System.Workflow.ComponentModel.CompensationUtils : object {
    internal static bool TryCompensateLastCompletedChildActivity(ActivityExecutionContext context, Activity targetActivity, IActivityEventListener`1<ActivityExecutionStatusChangedEventArgs> statusChangeHandler);
    internal static Activity[] GetCompensatableChildren(CompositeActivity compositeActivity);
    internal static Activity GetLastCompensatableChild(CompositeActivity compositeActivity);
}
internal class System.Workflow.ComponentModel.CompensationValidator : CompositeActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
[FlagsAttribute]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.ComponentModel.Compiler.AccessTypes : Enum {
    public int value__;
    public static AccessTypes Read;
    public static AccessTypes Write;
    public static AccessTypes ReadWrite;
}
internal class System.Workflow.ComponentModel.Compiler.ActivityBindValidator : Validator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
    internal static bool DoesTargetTypeMatch(Type baseType, Type memberType, AccessTypes access);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.ActivityCodeGenerator : object {
    public virtual void GenerateCode(CodeGenerationManager manager, object obj);
    protected CodeTypeDeclaration GetCodeTypeDeclaration(CodeGenerationManager manager, string fullClassName);
}
[AttributeUsageAttribute("1028")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.ActivityCodeGeneratorAttribute : Attribute {
    public string CodeGeneratorTypeName { get; }
    public ActivityCodeGeneratorAttribute(Type codeGeneratorType);
    public ActivityCodeGeneratorAttribute(string codeGeneratorTypeName);
    public string get_CodeGeneratorTypeName();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.ActivityValidator : DependencyObjectValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
[AttributeUsageAttribute("1028")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.ActivityValidatorAttribute : Attribute {
    public string ValidatorTypeName { get; }
    public ActivityValidatorAttribute(Type validatorType);
    public ActivityValidatorAttribute(string validatorTypeName);
    public string get_ValidatorTypeName();
}
internal class System.Workflow.ComponentModel.Compiler.AssemblyLoader : object {
    internal AssemblyName AssemblyName { get; }
    internal Assembly Assembly { get; }
    internal AssemblyLoader(TypeProvider typeProvider, string filePath);
    internal AssemblyLoader(TypeProvider typeProvider, Assembly assembly, bool isLocalAssembly);
    internal Type GetType(string typeName);
    internal Type[] GetTypes();
    internal AssemblyName get_AssemblyName();
    internal Assembly get_Assembly();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.AttributeInfo : object {
    public Type AttributeType { get; }
    public ReadOnlyCollection`1<object> ArgumentValues { get; }
    public bool Creatable { get; }
    internal AttributeInfo(Type attributeType, String[] argumentNames, Object[] argumentValues);
    public Type get_AttributeType();
    public ReadOnlyCollection`1<object> get_ArgumentValues();
    public bool get_Creatable();
    public Attribute CreateAttribute();
    public object GetArgumentValueAs(IServiceProvider serviceProvider, int argumentIndex, Type requestedType);
}
[CLSCompliantAttribute("False")]
[AttributeUsageAttribute("132")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.AttributeInfoAttribute : Attribute {
    public AttributeInfo AttributeInfo { get; }
    internal AttributeInfoAttribute(AttributeInfo attributeInfo);
    internal static AttributeInfoAttribute CreateAttributeInfoAttribute(Type attributeType, String[] argumentNames, Object[] argumentValues);
    public AttributeInfo get_AttributeInfo();
}
[XmlTypeAttribute("authorizedType")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.AuthorizedType : object {
    [XmlAttributeAttribute]
public string Assembly { get; public set; }
    [XmlAttributeAttribute]
public string Namespace { get; public set; }
    [XmlAttributeAttribute]
public string TypeName { get; public set; }
    [XmlAttributeAttribute]
public string Authorized { get; public set; }
    [XmlIgnoreAttribute]
public Regex RegularExpression { get; }
    public string get_Assembly();
    public void set_Assembly(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public string get_Authorized();
    public void set_Authorized(string value);
    public Regex get_RegularExpression();
}
internal class System.Workflow.ComponentModel.Compiler.AuthorizedTypesSectionHandler : object {
    private sealed virtual override object System.Configuration.IConfigurationSectionHandler.Create(object parent, object configContext, XmlNode section);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.BindValidationContext : object {
    public Type TargetType { get; }
    public AccessTypes Access { get; }
    public BindValidationContext(Type targetType);
    public BindValidationContext(Type targetType, AccessTypes access);
    public Type get_TargetType();
    public AccessTypes get_Access();
}
internal static class System.Workflow.ComponentModel.Compiler.BindValidatorHelper : object {
    internal static Type GetActivityType(IServiceProvider serviceProvider, Activity refActivity);
}
internal class System.Workflow.ComponentModel.Compiler.CodeDomLoader : object {
    internal CodeDomLoader(TypeProvider typeProvider, CodeCompileUnit codeCompileUnit);
    internal void Refresh(EventHandler refresher);
    public sealed virtual void Dispose();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.CodeGenerationManager : object {
    public ContextStack Context { get; }
    public CodeGenerationManager(IServiceProvider serviceProvider);
    public ContextStack get_Context();
    public sealed virtual object GetService(Type serviceType);
    public ActivityCodeGenerator[] GetCodeGenerators(Type type);
}
internal static class System.Workflow.ComponentModel.Compiler.CompilerHelpers : object {
    private static CompilerHelpers();
    internal static CodeDomProvider CreateCodeProviderInstance(Type type);
    internal static CodeDomProvider CreateCodeProviderInstance(Type type, string compilerVersion);
    internal static CodeDomProvider GetCodeDomProvider(SupportedLanguages language);
    internal static CodeDomProvider GetCodeDomProvider(SupportedLanguages language, string compilerVersion);
    internal static SupportedLanguages GetSupportedLanguage(IServiceProvider serviceProvider);
    internal static SupportedLanguages GetSupportedLanguage(string language);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.CompileWorkflowCleanupTask : Task {
    public ITaskItem[] TemporaryFiles { get; public set; }
    public ITaskItem[] get_TemporaryFiles();
    public void set_TemporaryFiles(ITaskItem[] value);
    public virtual bool Execute();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.CompileWorkflowTask : Task {
    public string ProjectDirectory { get; public set; }
    public string ProjectExtension { get; public set; }
    public string RootNamespace { get; public set; }
    public string AssemblyName { get; public set; }
    public string Imports { get; public set; }
    public ITaskItem[] WorkflowMarkupFiles { get; public set; }
    public ITaskItem[] ReferenceFiles { get; public set; }
    public ITaskItem[] ResourceFiles { get; public set; }
    public ITaskItem[] SourceCodeFiles { get; public set; }
    public ITaskItem[] CompilationOptions { get; public set; }
    public bool DelaySign { get; public set; }
    public string TargetFramework { get; public set; }
    public string KeyContainer { get; public set; }
    public string KeyFile { get; public set; }
    public object HostObject { get; }
    private ITaskHost Microsoft.Build.Framework.ITask.HostObject { get; private set; }
    public bool BuildingProject { get; public set; }
    [OutputAttribute]
public ITaskItem[] OutputFiles { get; }
    [OutputAttribute]
public string KeepTemporaryFiles { get; }
    [OutputAttribute]
public String[] TemporaryFiles { get; }
    public string get_ProjectDirectory();
    public void set_ProjectDirectory(string value);
    public string get_ProjectExtension();
    public void set_ProjectExtension(string value);
    public string get_RootNamespace();
    public void set_RootNamespace(string value);
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
    public string get_Imports();
    public void set_Imports(string value);
    public ITaskItem[] get_WorkflowMarkupFiles();
    public void set_WorkflowMarkupFiles(ITaskItem[] value);
    public ITaskItem[] get_ReferenceFiles();
    public void set_ReferenceFiles(ITaskItem[] value);
    public ITaskItem[] get_ResourceFiles();
    public void set_ResourceFiles(ITaskItem[] value);
    public ITaskItem[] get_SourceCodeFiles();
    public void set_SourceCodeFiles(ITaskItem[] value);
    public ITaskItem[] get_CompilationOptions();
    public void set_CompilationOptions(ITaskItem[] value);
    public bool get_DelaySign();
    public void set_DelaySign(bool value);
    public string get_TargetFramework();
    public void set_TargetFramework(string value);
    public string get_KeyContainer();
    public void set_KeyContainer(string value);
    public string get_KeyFile();
    public void set_KeyFile(string value);
    public object get_HostObject();
    private sealed virtual override ITaskHost Microsoft.Build.Framework.ITask.get_HostObject();
    private sealed virtual override void Microsoft.Build.Framework.ITask.set_HostObject(ITaskHost value);
    [CompilerGeneratedAttribute]
public bool get_BuildingProject();
    [CompilerGeneratedAttribute]
public void set_BuildingProject(bool value);
    public ITaskItem[] get_OutputFiles();
    public string get_KeepTemporaryFiles();
    public String[] get_TemporaryFiles();
    public virtual bool Execute();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.CompositeActivityCodeGenerator : ActivityCodeGenerator {
    public virtual void GenerateCode(CodeGenerationManager manager, object obj);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.CompositeActivityValidator : ActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
    public virtual ValidationError ValidateActivityChange(Activity activity, ActivityChangeAction action);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.ConditionValidator : DependencyObjectValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
[GuidAttribute("0A3976C5-4529-4ef8-B0B0-42EED37082CD")]
internal class System.Workflow.ComponentModel.Compiler.CorSymReader_SxS : object {
}
internal class System.Workflow.ComponentModel.Compiler.CreateWorkflowManifestResourceNameForCSharp : CreateCSharpManifestResourceName {
    [OutputAttribute]
public ITaskItem[] ResourceFilesWithManifestResourceNames { get; public set; }
    public ITaskItem[] get_ResourceFilesWithManifestResourceNames();
    public void set_ResourceFilesWithManifestResourceNames(ITaskItem[] value);
    protected virtual string CreateManifestName(string fileName, string linkFileName, string rootNamespace, string dependentUponFileName, Stream binaryStream);
    protected virtual bool IsSourceFile(string fileName);
}
internal class System.Workflow.ComponentModel.Compiler.CreateWorkflowManifestResourceNameForVB : CreateVisualBasicManifestResourceName {
    protected virtual string CreateManifestName(string fileName, string linkFileName, string rootNamespace, string dependentUponFileName, Stream binaryStream);
    protected virtual bool IsSourceFile(string fileName);
}
internal static class System.Workflow.ComponentModel.Compiler.Culture : object {
    internal static ItemCultureInfo GetItemCultureInfo(string name);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.DependencyObjectValidator : Validator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
internal class System.Workflow.ComponentModel.Compiler.DesignTimeConstructorInfo : ConstructorInfo {
    public RuntimeMethodHandle MethodHandle { get; }
    public MethodAttributes Attributes { get; }
    public string Name { get; }
    public Type DeclaringType { get; }
    public Type ReflectedType { get; }
    internal DesignTimeConstructorInfo(DesignTimeType declaringType, CodeMemberMethod codeConstructor);
    public virtual object Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture);
    public virtual ParameterInfo[] GetParameters();
    public virtual MethodImplAttributes GetMethodImplementationFlags();
    public virtual RuntimeMethodHandle get_MethodHandle();
    public virtual MethodAttributes get_Attributes();
    public virtual object Invoke(object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture);
    public virtual string get_Name();
    public virtual Type get_DeclaringType();
    public virtual Type get_ReflectedType();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
}
internal class System.Workflow.ComponentModel.Compiler.DesignTimeEventInfo : EventInfo {
    public EventAttributes Attributes { get; }
    public string Name { get; }
    public Type DeclaringType { get; }
    public Type ReflectedType { get; }
    internal bool IsPublic { get; }
    internal bool IsStatic { get; }
    internal DesignTimeEventInfo(DesignTimeType declaringType, CodeMemberEvent codeDomEvent);
    public virtual MethodInfo GetAddMethod(bool nonPublic);
    public virtual MethodInfo GetRemoveMethod(bool nonPublic);
    public virtual MethodInfo GetRaiseMethod(bool nonPublic);
    public virtual EventAttributes get_Attributes();
    public virtual string get_Name();
    public virtual Type get_DeclaringType();
    public virtual Type get_ReflectedType();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    internal bool get_IsPublic();
    internal bool get_IsStatic();
}
internal class System.Workflow.ComponentModel.Compiler.DesignTimeFieldInfo : FieldInfo {
    public RuntimeFieldHandle FieldHandle { get; }
    public Type FieldType { get; }
    public FieldAttributes Attributes { get; }
    public string Name { get; }
    public Type DeclaringType { get; }
    public Type ReflectedType { get; }
    internal DesignTimeFieldInfo(DesignTimeType declaringType, CodeMemberField codeDomField);
    public virtual RuntimeFieldHandle get_FieldHandle();
    public virtual Type get_FieldType();
    public virtual object GetValue(object obj);
    public virtual void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture);
    public virtual FieldAttributes get_Attributes();
    public virtual string get_Name();
    public virtual Type get_DeclaringType();
    public virtual Type get_ReflectedType();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
}
internal class System.Workflow.ComponentModel.Compiler.DesignTimeMethodInfo : MethodInfo {
    public Type ReturnType { get; }
    public ICustomAttributeProvider ReturnTypeCustomAttributes { get; }
    public ParameterInfo ReturnParameter { get; }
    public RuntimeMethodHandle MethodHandle { get; }
    public MethodAttributes Attributes { get; }
    public string Name { get; }
    public Type DeclaringType { get; }
    public Type ReflectedType { get; }
    internal DesignTimeMethodInfo(DesignTimeType declaringType, CodeMemberMethod methodInfo, bool isSpecialName);
    internal DesignTimeMethodInfo(DesignTimeType declaringType, CodeMemberMethod methodInfo);
    public virtual Type get_ReturnType();
    public virtual ICustomAttributeProvider get_ReturnTypeCustomAttributes();
    public virtual MethodInfo GetBaseDefinition();
    public virtual ParameterInfo get_ReturnParameter();
    public virtual ParameterInfo[] GetParameters();
    public virtual MethodImplAttributes GetMethodImplementationFlags();
    public virtual RuntimeMethodHandle get_MethodHandle();
    public virtual MethodAttributes get_Attributes();
    public virtual object Invoke(object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture);
    public virtual string get_Name();
    public virtual Type get_DeclaringType();
    public virtual Type get_ReflectedType();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
}
internal class System.Workflow.ComponentModel.Compiler.DesignTimeParameterInfo : ParameterInfo {
    public Type ParameterType { get; }
    internal DesignTimeParameterInfo(CodeParameterDeclarationExpression codeParameter, int position, MemberInfo member);
    internal DesignTimeParameterInfo(CodeTypeReference codeParameterType, MemberInfo member);
    public virtual Type get_ParameterType();
}
internal class System.Workflow.ComponentModel.Compiler.DesignTimePropertyInfo : PropertyInfo {
    internal CodeMemberProperty CodeMemberProperty { get; }
    public Type PropertyType { get; }
    public PropertyAttributes Attributes { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public string Name { get; }
    public Type DeclaringType { get; }
    public Type ReflectedType { get; }
    internal DesignTimePropertyInfo(DesignTimeType declaringType, CodeMemberProperty property);
    internal CodeMemberProperty get_CodeMemberProperty();
    public virtual Type get_PropertyType();
    public virtual void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture);
    public virtual MethodInfo[] GetAccessors(bool nonPublic);
    public virtual MethodInfo GetGetMethod(bool nonPublic);
    public virtual MethodInfo GetSetMethod(bool nonPublic);
    public virtual ParameterInfo[] GetIndexParameters();
    public virtual PropertyAttributes get_Attributes();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual object GetValue(object obj, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture);
    public virtual string get_Name();
    public virtual Type get_DeclaringType();
    public virtual Type get_ReflectedType();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
}
internal class System.Workflow.ComponentModel.Compiler.DesignTimeType : Type {
    internal ITypeProvider Provider { get; }
    public Assembly Assembly { get; }
    public string AssemblyQualifiedName { get; }
    public Type BaseType { get; }
    public Type DeclaringType { get; }
    public string FullName { get; }
    public Guid GUID { get; }
    public Module Module { get; }
    public string Name { get; }
    public string Namespace { get; }
    public RuntimeTypeHandle TypeHandle { get; }
    public Type UnderlyingSystemType { get; }
    internal DesignTimeType(Type declaringType, string typeName, CodeNamespaceImportCollection codeNamespaceImports, string namespaceName, ITypeProvider typeProvider);
    internal DesignTimeType(Type declaringType, string elementTypeFullName, ITypeProvider typeProvider);
    private static DesignTimeType();
    internal ITypeProvider get_Provider();
    internal void AddCodeTypeDeclaration(CodeTypeDeclaration codeDomType);
    public virtual Assembly get_Assembly();
    public virtual string get_AssemblyQualifiedName();
    public virtual Type get_BaseType();
    public Type GetEnumType();
    public virtual Type get_DeclaringType();
    public virtual string get_FullName();
    public virtual Guid get_GUID();
    public virtual Module get_Module();
    public virtual string get_Name();
    public virtual string get_Namespace();
    public virtual RuntimeTypeHandle get_TypeHandle();
    public virtual Type get_UnderlyingSystemType();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
    public virtual EventInfo GetEvent(string name, BindingFlags bindingAttr);
    public virtual EventInfo[] GetEvents(BindingFlags bindingAttr);
    public virtual FieldInfo GetField(string name, BindingFlags bindingAttr);
    public virtual FieldInfo[] GetFields(BindingFlags bindingAttr);
    public virtual MethodInfo[] GetMethods(BindingFlags bindingAttr);
    public virtual PropertyInfo[] GetProperties(BindingFlags bindingAttr);
    public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr);
    public virtual MemberInfo[] GetMembers(BindingFlags bindingAttr);
    public virtual MemberInfo[] GetDefaultMembers();
    public virtual Type GetNestedType(string name, BindingFlags bindingAttr);
    public virtual Type[] GetNestedTypes(BindingFlags bindingAttr);
    public virtual Type GetInterface(string name, bool ignoreCase);
    public virtual Type[] GetInterfaces();
    public virtual object InvokeMember(string name, BindingFlags bindingFlags, Binder binder, object target, Object[] providedArgs, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParams);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual Type GetElementType();
    public virtual int GetArrayRank();
    public virtual bool IsAssignableFrom(Type c);
    public virtual bool IsSubclassOf(Type c);
    public virtual Type MakeArrayType();
    internal Type ResolveType(string name);
    internal MemberInfo GetBaseMember(Type type, Type baseType, BindingFlags bindingAttr, MemberSignature memberSignature);
    internal static string GetTypeNameFromCodeTypeReference(CodeTypeReference codeTypeReference, DesignTimeType declaringType);
    protected virtual ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    protected virtual MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    protected virtual PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    protected virtual TypeAttributes GetAttributeFlagsImpl();
    protected virtual bool HasElementTypeImpl();
    protected virtual bool IsArrayImpl();
    protected virtual bool IsByRefImpl();
    public virtual Type MakeByRefType();
    protected virtual bool IsCOMObjectImpl();
    protected virtual bool IsContextfulImpl();
    protected virtual bool IsMarshalByRefImpl();
    protected virtual bool IsPointerImpl();
    protected virtual bool IsPrimitiveImpl();
    public sealed virtual object Clone();
}
internal class System.Workflow.ComponentModel.Compiler.FieldBindValidator : Validator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
internal static class System.Workflow.ComponentModel.Compiler.Helper : object {
    internal static ParameterAttributes ConvertToParameterAttributes(FieldDirection direction);
    internal static MethodAttributes ConvertToMethodAttributes(MemberAttributes memberAttributes);
    internal static FieldAttributes ConvertToFieldAttributes(MemberAttributes memberAttributes);
    internal static TypeAttributes ConvertToTypeAttributes(MemberAttributes memberAttributes, Type declaringType);
    internal static bool IncludeAccessor(MethodInfo accessor, bool nonPublic);
    internal static Attribute[] LoadCustomAttributes(CodeAttributeDeclarationCollection codeAttributeCollection, DesignTimeType declaringType);
    internal static Object[] GetCustomAttributes(Type attributeType, bool inherit, Attribute[] attributes, MemberInfo memberInfo);
    internal static bool IsDefined(Type attributeType, bool inherit, Attribute[] attributes, MemberInfo memberInfo);
    internal static string EnsureTypeName(string typeName);
}
[InterfaceTypeAttribute("1")]
[CoClassAttribute("System.Workflow.ComponentModel.Compiler.MetaDataDispenser")]
[GuidAttribute("809C652E-7396-11d2-9771-00A0C9B4D50C")]
internal interface System.Workflow.ComponentModel.Compiler.IMetaDataDispenser {
    public abstract virtual void DefineScope();
    public abstract virtual void OpenScope(string scope, UInt32 flags, Guid& riid, Object& unknown);
    public abstract virtual void OpenScopeOnMemory();
}
[GuidAttribute("6d5140c1-7436-11ce-8034-00aa006009fa")]
[InterfaceTypeAttribute("1")]
internal interface System.Workflow.ComponentModel.Compiler.IOleServiceProvider {
    public abstract virtual int QueryService(Guid& guidService, Guid& riid, IntPtr& ppvObject);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("40DE4037-7C81-3E1E-B022-AE1ABFF2CA08")]
internal interface System.Workflow.ComponentModel.Compiler.ISymUnmanagedDocument {
    public abstract virtual void GetURL(UInt32 urlLength, UInt32& actualUrlLength, string url);
    public abstract virtual void GetDocumentType();
    public abstract virtual void GetLanguage();
    public abstract virtual void GetLanguageVendor();
    public abstract virtual void GetCheckSumAlgorithmId();
    public abstract virtual void GetCheckSum();
    public abstract virtual void FindClosestLine();
    public abstract virtual void HasEmbeddedSource();
    public abstract virtual void GetSourceLength();
    public abstract virtual void GetSourceRange();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B62B923C-B500-3158-A543-24F307A8B7E1")]
internal interface System.Workflow.ComponentModel.Compiler.ISymUnmanagedMethod {
    public abstract virtual UInt32 GetToken();
    public abstract virtual UInt32 GetSequencePointCount();
    public abstract virtual object GetRootScope();
    public abstract virtual object GetScopeFromOffset(UInt32 offset);
    public abstract virtual UInt32 GetOffset(ISymUnmanagedDocument document, UInt32 line, UInt32 column);
    public abstract virtual void GetRanges(ISymUnmanagedDocument document, UInt32 line, UInt32 column, UInt32 rangeCount, UInt32& actualRangeCount, UInt32[] ranges);
    public abstract virtual void GetParameters();
    public abstract virtual void GetNamespace();
    public abstract virtual void GetSourceStartEnd(ISymUnmanagedDocument[] documents, UInt32[] lines, UInt32[] columns, Boolean& positionsDefined);
    public abstract virtual void GetSequencePoints(UInt32 pointsCount, UInt32& actualPointsCount, UInt32[] offsets, ISymUnmanagedDocument[] documents, UInt32[] lines, UInt32[] columns, UInt32[] endLines, UInt32[] endColumns);
}
[CoClassAttribute("System.Workflow.ComponentModel.Compiler.CorSymReader_SxS")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("B4CE6286-2A6B-3712-A3B7-1EE1DAD467B5")]
internal interface System.Workflow.ComponentModel.Compiler.ISymUnmanagedReader {
    public abstract virtual void GetDocument();
    public abstract virtual void GetDocuments();
    public abstract virtual void GetUserEntryPoint();
    public abstract virtual ISymUnmanagedMethod GetMethod(UInt32 methodDef);
    public abstract virtual void GetMethodByVersion();
    public abstract virtual void GetVariables();
    public abstract virtual void GetGlobalVariables();
    public abstract virtual void GetMethodFromDocumentPosition();
    public abstract virtual void GetSymAttribute();
    public abstract virtual void GetNamespaces();
    public abstract virtual void Initialize(object metaDataImport, string pdbPath, string searchPath, object stream);
    public abstract virtual void UpdateSymbolStore();
    public abstract virtual void ReplaceSymbolStore();
    public abstract virtual void GetSymbolStoreFileName();
    public abstract virtual void GetMethodsFromDocumentPosition();
    public abstract virtual void GetDocumentVersion();
    public abstract virtual void GetMethodVersion();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.ComponentModel.Compiler.ITypeProvider {
    public Assembly LocalAssembly { get; }
    public ICollection`1<Assembly> ReferencedAssemblies { get; }
    public IDictionary`2<object, Exception> TypeLoadErrors { get; }
    public abstract virtual Type GetType(string name);
    public abstract virtual Type GetType(string name, bool throwOnError);
    public abstract virtual Type[] GetTypes();
    public abstract virtual Assembly get_LocalAssembly();
    public abstract virtual ICollection`1<Assembly> get_ReferencedAssemblies();
    public abstract virtual IDictionary`2<object, Exception> get_TypeLoadErrors();
    [CompilerGeneratedAttribute]
public abstract virtual void add_TypesChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TypesChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TypeLoadErrorsChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TypeLoadErrorsChanged(EventHandler value);
}
[GuidAttribute("59B2D1D0-5DB0-4F9F-9609-13F0168516D6")]
[InterfaceTypeAttribute("1")]
internal interface System.Workflow.ComponentModel.Compiler.IVsHierarchy {
}
[GuidAttribute("8AA9644E-1F6A-4F4C-83E3-D0BAD4B2BB21")]
[InterfaceTypeAttribute("1")]
internal interface System.Workflow.ComponentModel.Compiler.IWorkflowBuildHostProperties {
    public bool SkipWorkflowCompilation { get; public set; }
    public abstract virtual bool get_SkipWorkflowCompilation();
    public abstract virtual void set_SkipWorkflowCompilation(bool value);
}
[GuidAttribute("AEA0CDAE-ADB5-46c6-A5ED-DBD516B3E0C1")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
internal interface System.Workflow.ComponentModel.Compiler.IWorkflowCompilerError {
    public string Document { get; }
    public bool IsWarning { get; }
    public string Text { get; }
    public string ErrorNumber { get; }
    public int LineNumber { get; }
    public int ColumnNumber { get; }
    public abstract virtual string get_Document();
    public abstract virtual bool get_IsWarning();
    public abstract virtual string get_Text();
    public abstract virtual string get_ErrorNumber();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_ColumnNumber();
}
[GuidAttribute("A5367E37-D7AF-4372-8079-D1D6726AEDC8")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("False")]
internal interface System.Workflow.ComponentModel.Compiler.IWorkflowCompilerErrorLogger {
    public abstract virtual void LogError(IWorkflowCompilerError error);
    public abstract virtual void LogMessage(string message);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService {
    public string RootNamespace { get; }
    public string Language { get; }
    public bool CheckTypes { get; }
    public abstract virtual string get_RootNamespace();
    public abstract virtual string get_Language();
    public abstract virtual bool get_CheckTypes();
}
[GuidAttribute("E5CB7A31-7512-11d2-89CE-0080C792E5D8")]
internal class System.Workflow.ComponentModel.Compiler.MetaDataDispenser : object {
}
internal static class System.Workflow.ComponentModel.Compiler.MetaDataReader : object {
    [IteratorStateMachineAttribute("System.Workflow.ComponentModel.Compiler.MetaDataReader/<GetTypeRefNames>d__9")]
internal static IEnumerable GetTypeRefNames(string assemblyLocation);
}
internal class System.Workflow.ComponentModel.Compiler.MethodBindValidator : Validator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
internal class System.Workflow.ComponentModel.Compiler.MultiTargetingInfo : object {
    internal static Version DefaultTargetFramework;
    internal static string TargetFramework30CompilerVersion;
    internal static string TargetFramework35CompilerVersion;
    internal static string TargetFramework40CompilerVersion;
    public FrameworkName TargetFramework { get; }
    public string CompilerVersion { get; }
    public MultiTargetingInfo(string targetFramework);
    protected MultiTargetingInfo(SerializationInfo info, StreamingContext context);
    private static MultiTargetingInfo();
    public FrameworkName get_TargetFramework();
    public string get_CompilerVersion();
    [SecurityCriticalAttribute]
public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal static class System.Workflow.ComponentModel.Compiler.ParseHelpers : object {
    private static ParseHelpers();
    internal static bool ParseTypeName(string inputTypeName, ParseTypeNameLanguage parseTypeNameLanguage, String& typeName, String[]& parameters, String& elemantDecorator);
    internal static bool AssemblyNameEquals(AssemblyName thisName, AssemblyName thatName);
    internal static bool AssemblyNameEquals(AssemblyName thisName, string thatName);
    internal static string FormatType(Type type, SupportedLanguages language);
    internal static string FormatType(string type, SupportedLanguages language);
    internal static Type ParseTypeName(ITypeProvider typeProvider, SupportedLanguages language, string typeName);
}
internal class System.Workflow.ComponentModel.Compiler.PDBReader : object {
    public PDBReader(string assemblyPath);
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    private void Dispose();
    public void GetSourceLocationForOffset(UInt32 methodDef, UInt32 offset, String& fileLocation, UInt32& line, UInt32& column);
}
internal class System.Workflow.ComponentModel.Compiler.PropertyBindValidator : Validator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.PropertyValidationContext : object {
    public string PropertyName { get; }
    public object PropertyOwner { get; }
    public object Property { get; }
    public PropertyValidationContext(object propertyOwner, PropertyInfo propertyInfo, string propertyName);
    public PropertyValidationContext(object propertyOwner, DependencyProperty dependencyProperty);
    public string get_PropertyName();
    public object get_PropertyOwner();
    public object get_Property();
}
internal class System.Workflow.ComponentModel.Compiler.ReferencedAssemblyResolver : object {
    public ReferencedAssemblyResolver(StringCollection referencedAssemblies, Assembly localAssembly);
    public Assembly ResolveEventHandler(object sender, ResolveEventArgs args);
    internal void SetLocalAssembly(Assembly localAsm);
}
internal class System.Workflow.ComponentModel.Compiler.RTTypeWrapper : Type {
    internal ITypeProvider Provider { get; }
    public int MetadataToken { get; }
    public Assembly Assembly { get; }
    public string AssemblyQualifiedName { get; }
    public Type BaseType { get; }
    public Type DeclaringType { get; }
    public string FullName { get; }
    public Guid GUID { get; }
    public Module Module { get; }
    public string Name { get; }
    public string Namespace { get; }
    public RuntimeTypeHandle TypeHandle { get; }
    public Type UnderlyingSystemType { get; }
    public bool IsGenericTypeDefinition { get; }
    public bool IsGenericParameter { get; }
    public int GenericParameterPosition { get; }
    public bool IsGenericType { get; }
    public bool ContainsGenericParameters { get; }
    internal RTTypeWrapper(ITypeProvider typeProvider, Type runtimeType);
    internal ITypeProvider get_Provider();
    public virtual int get_MetadataToken();
    public virtual Assembly get_Assembly();
    public virtual string get_AssemblyQualifiedName();
    public virtual Type get_BaseType();
    public virtual Type get_DeclaringType();
    public virtual string get_FullName();
    public virtual Guid get_GUID();
    public virtual Module get_Module();
    public virtual string get_Name();
    public virtual string get_Namespace();
    public virtual RuntimeTypeHandle get_TypeHandle();
    public virtual Type get_UnderlyingSystemType();
    internal Type ResolveTypeFromTypeSystem(Type type);
    internal Type ResolveGenericTypeFromTypeSystem(Type type);
    public virtual bool Equals(object obj);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
    public virtual EventInfo GetEvent(string name, BindingFlags bindingAttr);
    public virtual EventInfo[] GetEvents(BindingFlags bindingAttr);
    public virtual FieldInfo GetField(string name, BindingFlags bindingAttr);
    public virtual FieldInfo[] GetFields(BindingFlags bindingAttr);
    public virtual MethodInfo[] GetMethods(BindingFlags bindingAttr);
    public virtual PropertyInfo[] GetProperties(BindingFlags bindingAttr);
    public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr);
    public virtual MemberInfo[] GetMembers(BindingFlags bindingAttr);
    public virtual Type GetNestedType(string name, BindingFlags bindingAttr);
    public virtual Type[] GetNestedTypes(BindingFlags bindingAttr);
    public virtual Type GetInterface(string name, bool ignoreCase);
    public virtual Type[] GetInterfaces();
    public virtual object InvokeMember(string name, BindingFlags bindingFlags, Binder binder, object target, Object[] providedArgs, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParams);
    public virtual bool IsSubclassOf(Type potentialBaseType);
    public virtual bool IsAssignableFrom(Type c);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual Type GetElementType();
    internal MethodInfo EnsureMethodWrapped(MethodInfo realInfo);
    public virtual bool get_IsGenericTypeDefinition();
    public virtual bool get_IsGenericParameter();
    public virtual int get_GenericParameterPosition();
    public virtual bool get_IsGenericType();
    public virtual bool get_ContainsGenericParameters();
    public virtual Type[] GetGenericArguments();
    public virtual Type GetGenericTypeDefinition();
    public virtual Type MakeGenericType(Type[] typeArgs);
    public virtual Type MakeByRefType();
    public virtual Type MakePointerType();
    internal void OnAssemblyRemoved(Assembly removedAssembly);
    protected virtual ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    protected virtual MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    protected virtual PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    protected virtual TypeAttributes GetAttributeFlagsImpl();
    protected virtual bool HasElementTypeImpl();
    public virtual int GetArrayRank();
    protected virtual bool IsArrayImpl();
    protected virtual bool IsByRefImpl();
    protected virtual bool IsCOMObjectImpl();
    protected virtual bool IsContextfulImpl();
    protected virtual bool IsMarshalByRefImpl();
    protected virtual bool IsPointerImpl();
    protected virtual bool IsPrimitiveImpl();
    public sealed virtual object Clone();
}
internal class System.Workflow.ComponentModel.Compiler.ServiceProvider : object {
    public ServiceProvider(IOleServiceProvider sp);
    private static ServiceProvider();
    public sealed virtual object GetService(Type serviceType);
}
internal enum System.Workflow.ComponentModel.Compiler.SupportedLanguages : Enum {
    public int value__;
    public static SupportedLanguages VB;
    public static SupportedLanguages CSharp;
}
internal class System.Workflow.ComponentModel.Compiler.SynchronizationValidator : Validator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
internal static class System.Workflow.ComponentModel.Compiler.TasksHelper : object {
    internal static string GetXomlManifestName(string fileName, string linkFileName, string rootNamespace, Stream binaryStream);
}
internal class System.Workflow.ComponentModel.Compiler.TransactionContextValidator : Validator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
    public virtual ValidationError ValidateActivityChange(Activity activity, ActivityChangeAction action);
}
internal class System.Workflow.ComponentModel.Compiler.TypeAuthorizerClass : object {
    public IList`1<AuthorizedType> AuthorizedTypes { get; private set; }
    public WorkflowCompilerResults Results { get; private set; }
    public string Filename { get; private set; }
    public TypeAuthorizerClass(IList`1<AuthorizedType> authorizedTypes, WorkflowCompilerResults results, string filename);
    [CompilerGeneratedAttribute]
public IList`1<AuthorizedType> get_AuthorizedTypes();
    [CompilerGeneratedAttribute]
private void set_AuthorizedTypes(IList`1<AuthorizedType> value);
    [CompilerGeneratedAttribute]
public WorkflowCompilerResults get_Results();
    [CompilerGeneratedAttribute]
private void set_Results(WorkflowCompilerResults value);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
private void set_Filename(string value);
    public sealed virtual bool IsTypeAuthorized(Type typeToAuthorize);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.TypeProvider : object {
    internal static Char[] nameSeparators;
    public Func`2<Type, string> AssemblyNameResolver { get; public set; }
    public Func`3<PropertyInfo, object, bool> IsSupportedPropertyResolver { get; public set; }
    public IDictionary`2<object, Exception> TypeLoadErrors { get; }
    public Assembly LocalAssembly { get; }
    public ICollection`1<Assembly> ReferencedAssemblies { get; }
    public TypeProvider(IServiceProvider serviceProvider);
    private static TypeProvider();
    public void SetLocalAssembly(Assembly assembly);
    public void AddAssembly(Assembly assembly);
    public void RemoveAssembly(Assembly assembly);
    public void AddAssemblyReference(string path);
    public void RemoveAssemblyReference(string path);
    public void AddCodeCompileUnit(CodeCompileUnit codeCompileUnit);
    public void RemoveCodeCompileUnit(CodeCompileUnit codeCompileUnit);
    public void RefreshCodeCompileUnit(CodeCompileUnit codeCompileUnit, EventHandler refresher);
    [CompilerGeneratedAttribute]
public Func`2<Type, string> get_AssemblyNameResolver();
    [CompilerGeneratedAttribute]
public void set_AssemblyNameResolver(Func`2<Type, string> value);
    [CompilerGeneratedAttribute]
public Func`3<PropertyInfo, object, bool> get_IsSupportedPropertyResolver();
    [CompilerGeneratedAttribute]
public void set_IsSupportedPropertyResolver(Func`3<PropertyInfo, object, bool> value);
    public string GetAssemblyName(Type type);
    public bool IsSupportedProperty(PropertyInfo property, object declaringInstance);
    public sealed virtual Type GetType(string name);
    public sealed virtual Type GetType(string name, bool throwOnError);
    public sealed virtual Type[] GetTypes();
    public sealed virtual IDictionary`2<object, Exception> get_TypeLoadErrors();
    public sealed virtual Assembly get_LocalAssembly();
    [CompilerGeneratedAttribute]
public sealed virtual void add_TypeLoadErrorsChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TypeLoadErrorsChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TypesChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TypesChanged(EventHandler value);
    public sealed virtual ICollection`1<Assembly> get_ReferencedAssemblies();
    public static Type GetEventHandlerType(EventInfo eventInfo);
    internal static bool IsRepresentingTheSameType(Type firstType, Type secondType);
    internal static bool IsAssignable(Type toType, Type fromType, bool equalBasedOnSameTypeRepresenting);
    public static bool IsAssignable(Type toType, Type fromType);
    public static bool IsSubclassOf(Type subclass, Type superClass);
    public static bool IsEnum(Type type);
    public static String[] GetEnumNames(Type enumType);
    internal void AddType(Type type);
    internal void RemoveTypes(Type[] types);
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual void Dispose();
}
internal class System.Workflow.ComponentModel.Compiler.TypeSystemSR : object {
    private static TypeSystemSR();
    internal static string GetString(string name, Object[] args);
    internal static string GetString(CultureInfo culture, string name, Object[] args);
    internal static string GetString(string name);
    internal static string GetString(CultureInfo culture, string name);
}
public class System.Workflow.ComponentModel.Compiler.ValidationError : object {
    public string PropertyName { get; public set; }
    public string ErrorText { get; }
    public bool IsWarning { get; }
    public int ErrorNumber { get; }
    public IDictionary UserData { get; }
    public ValidationError(string errorText, int errorNumber);
    public ValidationError(string errorText, int errorNumber, bool isWarning);
    public ValidationError(string errorText, int errorNumber, bool isWarning, string propertyName);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    public string get_ErrorText();
    public bool get_IsWarning();
    public int get_ErrorNumber();
    public IDictionary get_UserData();
    public static ValidationError GetNotSetValidationError(string propertyName);
    public virtual string ToString();
}
public class System.Workflow.ComponentModel.Compiler.ValidationErrorCollection : Collection`1<ValidationError> {
    public bool HasErrors { get; }
    public bool HasWarnings { get; }
    public ValidationErrorCollection(ValidationErrorCollection value);
    public ValidationErrorCollection(IEnumerable`1<ValidationError> value);
    protected virtual void InsertItem(int index, ValidationError item);
    protected virtual void SetItem(int index, ValidationError item);
    public void AddRange(IEnumerable`1<ValidationError> value);
    public bool get_HasErrors();
    public bool get_HasWarnings();
    public ValidationError[] ToArray();
}
internal static class System.Workflow.ComponentModel.Compiler.ValidationHelpers : object {
    internal static void ValidateIdentifier(IServiceProvider serviceProvider, string identifier);
    internal static ValidationError ValidateIdentifier(string propName, IServiceProvider context, string identifier);
    internal static ValidationError ValidateNameProperty(string propName, IServiceProvider context, string identifier);
    internal static ValidationErrorCollection ValidateUniqueIdentifiers(Activity rootActivity);
    internal static bool IsActivitySourceInOrder(Activity request, Activity response);
    internal static ValidationErrorCollection ValidateObject(ValidationManager manager, object obj);
    internal static ValidationErrorCollection ValidateActivity(ValidationManager manager, Activity activity);
    internal static ValidationErrorCollection ValidateProperty(ValidationManager manager, Activity activity, object obj, PropertyValidationContext propertyValidationContext);
    internal static ValidationErrorCollection ValidateProperty(ValidationManager manager, Activity activity, object obj, PropertyValidationContext propertyValidationContext, object extendedPropertyContext);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.ValidationManager : object {
    public ContextStack Context { get; }
    public bool ValidateChildActivities { get; }
    public ValidationManager(IServiceProvider serviceProvider);
    public ValidationManager(IServiceProvider serviceProvider, bool validateChildActivities);
    public ContextStack get_Context();
    public bool get_ValidateChildActivities();
    public Validator[] GetValidators(Type type);
    public sealed virtual object GetService(Type serviceType);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.ComponentModel.Compiler.ValidationOption : Enum {
    public int value__;
    public static ValidationOption None;
    public static ValidationOption Optional;
    public static ValidationOption Required;
}
[AttributeUsageAttribute("640")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute : Attribute {
    public ValidationOption ValidationOption { get; }
    public ValidationOptionAttribute(ValidationOption validationOption);
    public ValidationOption get_ValidationOption();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.Validator : object {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
    public virtual ValidationError ValidateActivityChange(Activity activity, ActivityChangeAction action);
    public virtual ValidationErrorCollection ValidateProperties(ValidationManager manager, object obj);
    protected string GetFullPropertyName(ValidationManager manager);
    protected internal ValidationErrorCollection ValidateProperty(PropertyInfo propertyInfo, object propertyOwner, object propertyValue, ValidationManager manager);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.WorkflowCompilationContext : object {
    public static WorkflowCompilationContext Current { get; private set; }
    public string RootNamespace { get; }
    public string Language { get; }
    public bool CheckTypes { get; }
    internal FrameworkName TargetFramework { get; }
    internal Version TargetFrameworkVersion { get; }
    internal IServiceProvider ServiceProvider { get; }
    private static WorkflowCompilationContext();
    public static WorkflowCompilationContext get_Current();
    private static void set_Current(WorkflowCompilationContext value);
    public string get_RootNamespace();
    public string get_Language();
    public bool get_CheckTypes();
    internal FrameworkName get_TargetFramework();
    internal Version get_TargetFrameworkVersion();
    internal IServiceProvider get_ServiceProvider();
    public static IDisposable CreateScope(IServiceProvider serviceProvider);
    public IList`1<AuthorizedType> GetAuthorizedTypes();
    internal static IDisposable CreateScope(IServiceProvider serviceProvider, WorkflowCompilerParameters parameters);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.WorkflowCompiler : object {
    public WorkflowCompilerResults Compile(WorkflowCompilerParameters parameters, String[] files);
}
internal class System.Workflow.ComponentModel.Compiler.WorkflowCompilerConfigurationSectionGroup : ConfigurationSectionGroup {
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.WorkflowCompilerError : CompilerError {
    public string PropertyName { get; public set; }
    public IDictionary UserData { get; }
    private string System.Workflow.ComponentModel.Compiler.IWorkflowCompilerError.Document { get; }
    private bool System.Workflow.ComponentModel.Compiler.IWorkflowCompilerError.IsWarning { get; }
    private string System.Workflow.ComponentModel.Compiler.IWorkflowCompilerError.Text { get; }
    private string System.Workflow.ComponentModel.Compiler.IWorkflowCompilerError.ErrorNumber { get; }
    private int System.Workflow.ComponentModel.Compiler.IWorkflowCompilerError.LineNumber { get; }
    private int System.Workflow.ComponentModel.Compiler.IWorkflowCompilerError.ColumnNumber { get; }
    public WorkflowCompilerError(string fileName, int line, int column, string errorNumber, string errorText);
    public WorkflowCompilerError(string fileName, WorkflowMarkupSerializationException exception);
    internal WorkflowCompilerError(CompilerError error);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    public IDictionary get_UserData();
    public virtual string ToString();
    private sealed virtual override string System.Workflow.ComponentModel.Compiler.IWorkflowCompilerError.get_Document();
    private sealed virtual override bool System.Workflow.ComponentModel.Compiler.IWorkflowCompilerError.get_IsWarning();
    private sealed virtual override string System.Workflow.ComponentModel.Compiler.IWorkflowCompilerError.get_Text();
    private sealed virtual override string System.Workflow.ComponentModel.Compiler.IWorkflowCompilerError.get_ErrorNumber();
    private sealed virtual override int System.Workflow.ComponentModel.Compiler.IWorkflowCompilerError.get_LineNumber();
    private sealed virtual override int System.Workflow.ComponentModel.Compiler.IWorkflowCompilerError.get_ColumnNumber();
}
internal class System.Workflow.ComponentModel.Compiler.WorkflowCompilerInternal : MarshalByRefObject {
    public virtual object InitializeLifetimeService();
    public WorkflowCompilerResults Compile(WorkflowCompilerParameters parameters, String[] allFiles);
    internal static CodeCompileUnit GenerateCodeFromFileBatch(String[] files, WorkflowCompilerParameters parameters, WorkflowCompilerResults results);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.WorkflowCompilerOptionsService : object {
    internal static string DefaultLanguage;
    public string RootNamespace { get; }
    public string Language { get; }
    public bool CheckTypes { get; }
    public string TargetFrameworkMoniker { get; }
    public virtual string get_RootNamespace();
    public virtual string get_Language();
    public virtual bool get_CheckTypes();
    public virtual string get_TargetFrameworkMoniker();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters : CompilerParameters {
    internal static string NoCodeSwitch;
    internal static string CheckTypesSwitch;
    public string CompilerOptions { get; public set; }
    public bool GenerateCodeCompileUnitOnly { get; public set; }
    public string LanguageToUse { get; public set; }
    public StringCollection LibraryPaths { get; }
    public IList`1<CodeCompileUnit> UserCodeCompileUnits { get; }
    internal Assembly LocalAssembly { get; internal set; }
    internal bool CompileWithNoCode { get; }
    internal bool CheckTypes { get; }
    internal string CompilerVersion { get; }
    internal MultiTargetingInfo MultiTargetingInformation { get; internal set; }
    public WorkflowCompilerParameters(String[] assemblyNames);
    public WorkflowCompilerParameters(String[] assemblyNames, string outputName);
    public WorkflowCompilerParameters(String[] assemblyNames, string outputName, bool includeDebugInformation);
    public WorkflowCompilerParameters(WorkflowCompilerParameters parameters);
    internal WorkflowCompilerParameters(WorkflowCompilerParameters parameters, String[] newReferencedAssemblies);
    public string get_CompilerOptions();
    public void set_CompilerOptions(string value);
    public bool get_GenerateCodeCompileUnitOnly();
    public void set_GenerateCodeCompileUnitOnly(bool value);
    public string get_LanguageToUse();
    public void set_LanguageToUse(string value);
    public StringCollection get_LibraryPaths();
    public IList`1<CodeCompileUnit> get_UserCodeCompileUnits();
    internal Assembly get_LocalAssembly();
    internal void set_LocalAssembly(Assembly value);
    internal bool get_CompileWithNoCode();
    internal bool get_CheckTypes();
    internal string get_CompilerVersion();
    internal MultiTargetingInfo get_MultiTargetingInformation();
    internal void set_MultiTargetingInformation(MultiTargetingInfo value);
    internal static string ExtractRootNamespace(WorkflowCompilerParameters parameters);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.WorkflowCompilerResults : CompilerResults {
    public CodeCompileUnit CompiledUnit { get; internal set; }
    internal WorkflowCompilerResults(TempFileCollection tempFiles);
    public CodeCompileUnit get_CompiledUnit();
    internal void set_CompiledUnit(CodeCompileUnit value);
    internal void AddCompilerErrorsFromCompilerResults(CompilerResults results);
}
[AttributeUsageAttribute("4")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.WorkflowMarkupSourceAttribute : Attribute {
    public string FileName { get; }
    public string MD5Digest { get; }
    public WorkflowMarkupSourceAttribute(string fileName, string md5Digest);
    public string get_FileName();
    public string get_MD5Digest();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException : Exception {
    public ValidationErrorCollection Errors { get; }
    private WorkflowValidationFailedException(SerializationInfo info, StreamingContext context);
    public WorkflowValidationFailedException(string message);
    public WorkflowValidationFailedException(string message, Exception innerException);
    public WorkflowValidationFailedException(string message, ValidationErrorCollection errors);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public ValidationErrorCollection get_Errors();
}
internal static class System.Workflow.ComponentModel.Compiler.XomlCompilerHelper : object {
    internal static object LineNumber;
    internal static object ColumnNumber;
    private static XomlCompilerHelper();
    internal static void InternalCompileFromDomBatch(String[] files, String[] codeFiles, WorkflowCompilerParameters parameters, WorkflowCompilerResults results, string localAssemblyPath);
    internal static string ProcessCompilerOptions(string options, Boolean& noCode, Boolean& checkTypes);
    internal static CompilerParameters CloneCompilerParameters(WorkflowCompilerParameters sourceParams);
    internal static void FixReferencedAssemblies(WorkflowCompilerParameters parameters, WorkflowCompilerResults results, StringCollection libraryPaths);
    internal static string TrimDirectorySeparatorChar(string dir);
    internal static bool CheckPathName(string pathName);
    internal static WorkflowCompilerError CreateXomlCompilerError(ValidationError error, WorkflowCompilerParameters parameters);
    internal static ValidationErrorCollection MorphIntoFriendlyValidationErrors(IEnumerable`1<ValidationError> errors);
    internal static bool HasCodeWithin(Activity rootActivity);
    internal static void ValidateActivity(Activity activity, WorkflowCompilerParameters parameters, WorkflowCompilerResults results);
    internal static String[] GenerateFiles(CodeDomProvider codeDomProvider, CompilerParameters parameters, CodeCompileUnit[] ccus);
}
internal static class System.Workflow.ComponentModel.ComponentDispenser : object {
    internal static IList`1<IExtenderProvider> Extenders { get; }
    private static ComponentDispenser();
    internal static ActivityExecutor[] CreateActivityExecutors(Activity activity);
    internal static Object[] CreateComponents(Type objectType, Type componentTypeAttribute);
    internal static void RegisterComponentExtenders(Type extendingType, IExtenderProvider[] extenders);
    internal static IList`1<IExtenderProvider> get_Extenders();
}
[ContentPropertyAttribute("Activities")]
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.CompositeActivityMarkupSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
[ActivityCodeGeneratorAttribute("System.Workflow.ComponentModel.Compiler.CompositeActivityCodeGenerator")]
[ActivityValidatorAttribute("System.Workflow.ComponentModel.Compiler.CompositeActivityValidator")]
[ActivityExecutorAttribute("System.Workflow.ComponentModel.CompositeActivityExecutor`1<System.Workflow.ComponentModel.CompositeActivity>")]
[TypeDescriptionProviderAttribute("System.Workflow.ComponentModel.Serialization.CompositeActivityTypeDescriptorProvider")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.CompositeActivity : Activity {
    [DesignerSerializationVisibilityAttribute("2")]
[BrowsableAttribute("False")]
public ActivityCollection Activities { get; }
    protected internal bool CanModifyActivities { get; protected internal set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public ReadOnlyCollection`1<Activity> EnabledActivities { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
private IList`1<Activity> System.Workflow.ComponentModel.ISupportAlternateFlow.AlternateFlowActivities { get; }
    public CompositeActivity(IEnumerable`1<Activity> children);
    public CompositeActivity(string name);
    private static CompositeActivity();
    protected Activity[] GetDynamicActivities(Activity activity);
    protected internal virtual void Initialize(IServiceProvider provider);
    protected internal virtual void Uninitialize(IServiceProvider provider);
    protected internal virtual void OnActivityExecutionContextLoad(IServiceProvider provider);
    protected internal virtual void OnActivityExecutionContextUnload(IServiceProvider provider);
    protected internal virtual ActivityExecutionStatus HandleFault(ActivityExecutionContext executionContext, Exception exception);
    protected void ApplyWorkflowChanges(WorkflowChanges workflowChanges);
    protected internal virtual void OnActivityChangeAdd(ActivityExecutionContext executionContext, Activity addedActivity);
    protected internal virtual void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity);
    protected internal virtual void OnWorkflowChangesCompleted(ActivityExecutionContext rootContext);
    public ActivityCollection get_Activities();
    protected internal bool get_CanModifyActivities();
    protected internal void set_CanModifyActivities(bool value);
    public ReadOnlyCollection`1<Activity> get_EnabledActivities();
    private sealed virtual override IList`1<Activity> System.Workflow.ComponentModel.ISupportAlternateFlow.get_AlternateFlowActivities();
    internal virtual Activity TraverseDottedPath(string dottedPath);
    internal virtual void OnInitializeDefinitionForRuntime();
    internal virtual void OnInitializeInstanceForRuntime(IWorkflowCoreRuntime workflowCoreRuntime);
    internal virtual void OnInitializeActivatingInstanceForRuntime(IWorkflowCoreRuntime workflowCoreRuntime);
    internal virtual void FixUpMetaProperties(DependencyObject originalObject);
    internal virtual void FixUpParentChildRelationship(Activity definitionActivity, Activity parentActivity, Hashtable deserializedActivities);
    internal virtual IList`1<Activity> CollectNestedActivities();
    protected virtual void OnListChanging(ActivityCollectionChangeEventArgs e);
    protected virtual void OnListChanged(ActivityCollectionChangeEventArgs e);
    protected virtual void Dispose(bool disposing);
}
internal class System.Workflow.ComponentModel.CompositeActivityExecutor`1 : ActivityExecutor`1<T> {
    private sealed virtual override void System.Workflow.ComponentModel.ISupportWorkflowChanges.OnActivityAdded(ActivityExecutionContext executionContext, Activity addedActivity);
    private sealed virtual override void System.Workflow.ComponentModel.ISupportWorkflowChanges.OnActivityRemoved(ActivityExecutionContext executionContext, Activity removedActivity);
    private sealed virtual override void System.Workflow.ComponentModel.ISupportWorkflowChanges.OnWorkflowChangesCompleted(ActivityExecutionContext executionContext);
    protected virtual ActivityExecutionStatus Execute(T activity, ActivityExecutionContext executionContext);
    protected virtual ActivityExecutionStatus Cancel(T activity, ActivityExecutionContext executionContext);
}
internal class System.Workflow.ComponentModel.DelegateTypeInfo : object {
    internal CodeParameterDeclarationExpression[] Parameters { get; }
    internal Type[] ParameterTypes { get; }
    internal CodeTypeReference ReturnType { get; }
    internal DelegateTypeInfo(Type delegateClass);
    internal CodeParameterDeclarationExpression[] get_Parameters();
    internal Type[] get_ParameterTypes();
    internal CodeTypeReference get_ReturnType();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.DependencyObjectCodeDomSerializer", "System.ComponentModel.Design.Serialization.CodeDomSerializer")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.ComponentModel.DependencyObject : object {
    internal bool Readonly { get; internal set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IDictionary UserData { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected internal bool DesignMode { get; }
    protected DependencyObject ParentDependencyObject { get; }
    internal IList`1<DependencyProperty> MetaDependencyProperties { get; }
    internal IDictionary`2<DependencyProperty, object> DependencyPropertyValues { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public ISite Site { get; public set; }
    private static DependencyObject();
    protected virtual override void Finalize();
    internal bool get_Readonly();
    internal void set_Readonly(bool value);
    public IDictionary get_UserData();
    protected internal bool get_DesignMode();
    protected DependencyObject get_ParentDependencyObject();
    public void SetBinding(DependencyProperty dependencyProperty, ActivityBind bind);
    public ActivityBind GetBinding(DependencyProperty dependencyProperty);
    public object GetValue(DependencyProperty dependencyProperty);
    [EditorBrowsableAttribute("1")]
public object GetValueBase(DependencyProperty dependencyProperty);
    protected internal void SetReadOnlyPropertyValue(DependencyProperty dependencyProperty, object value);
    [EditorBrowsableAttribute("1")]
public void SetValueBase(DependencyProperty dependencyProperty, object value);
    public void SetValue(DependencyProperty dependencyProperty, object value);
    internal void SetValueCommon(DependencyProperty dependencyProperty, object value, PropertyMetadata metadata, bool shouldCallSetValueOverrideIfExists);
    public bool RemoveProperty(DependencyProperty dependencyProperty);
    public void AddHandler(DependencyProperty dependencyEvent, object value);
    public void RemoveHandler(DependencyProperty dependencyEvent, object value);
    internal object GetHandler(DependencyProperty dependencyEvent);
    public bool IsBindingSet(DependencyProperty dependencyProperty);
    public bool MetaEquals(DependencyObject dependencyObject);
    private sealed virtual override void System.Workflow.ComponentModel.IDependencyObjectAccessor.InitializeInstanceForRuntime(IWorkflowCoreRuntime workflowCoreRuntime);
    internal virtual void OnInitializeInstanceForRuntime(IWorkflowCoreRuntime workflowCoreRuntime);
    private sealed virtual override void System.Workflow.ComponentModel.IDependencyObjectAccessor.InitializeActivatingInstanceForRuntime(DependencyObject parentDependencyObject, IWorkflowCoreRuntime workflowCoreRuntime);
    internal virtual void OnInitializeActivatingInstanceForRuntime(IWorkflowCoreRuntime workflowCoreRuntime);
    private sealed virtual override void System.Workflow.ComponentModel.IDependencyObjectAccessor.InitializeDefinitionForRuntime(DependencyObject parentDependencyObject);
    internal virtual void OnInitializeDefinitionForRuntime();
    protected virtual void InitializeProperties();
    internal virtual void FixUpMetaProperties(DependencyObject originalObject);
    private sealed virtual override T[] System.Workflow.ComponentModel.IDependencyObjectAccessor.GetInvocationList(DependencyProperty dependencyEvent);
    protected T[] GetInvocationList(DependencyProperty dependencyEvent);
    internal IList`1<DependencyProperty> get_MetaDependencyProperties();
    internal IDictionary`2<DependencyProperty, object> get_DependencyPropertyValues();
    [EditorBrowsableAttribute("1")]
protected virtual object GetBoundValue(ActivityBind bind, Type targetType);
    [EditorBrowsableAttribute("1")]
protected virtual void SetBoundValue(ActivityBind bind, object value);
    private sealed virtual override void System.ComponentModel.IComponent.add_Disposed(EventHandler value);
    private sealed virtual override void System.ComponentModel.IComponent.remove_Disposed(EventHandler value);
    public sealed virtual ISite get_Site();
    public sealed virtual void set_Site(ISite value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.DependencyProperty : object {
    public bool IsEvent { get; }
    public bool IsAttached { get; }
    public string Name { get; }
    public Type PropertyType { get; }
    public Type OwnerType { get; }
    public PropertyMetadata DefaultMetadata { get; }
    public Type ValidatorType { get; }
    internal byte KnownIndex { get; internal set; }
    internal bool IsKnown { get; }
    internal PropertyValidity Validity { get; }
    private static DependencyProperty();
    public static DependencyProperty Register(string name, Type propertyType, Type ownerType);
    public static DependencyProperty Register(string name, Type propertyType, Type ownerType, PropertyMetadata defaultMetadata);
    public static DependencyProperty RegisterAttached(string name, Type propertyType, Type ownerType);
    public static DependencyProperty RegisterAttached(string name, Type propertyType, Type ownerType, PropertyMetadata defaultMetadata);
    internal static void RegisterAsKnown(DependencyProperty dependencyProperty, byte byteVal, PropertyValidity propertyValidity);
    internal static DependencyProperty FromKnown(byte byteVal);
    public static DependencyProperty RegisterAttached(string name, Type propertyType, Type ownerType, PropertyMetadata defaultMetadata, Type validatorType);
    public static DependencyProperty FromName(string propertyName, Type ownerType);
    public static IList`1<DependencyProperty> FromType(Type ownerType);
    public bool get_IsEvent();
    public bool get_IsAttached();
    public string get_Name();
    public Type get_PropertyType();
    public Type get_OwnerType();
    public PropertyMetadata get_DefaultMetadata();
    public Type get_ValidatorType();
    internal byte get_KnownIndex();
    internal void set_KnownIndex(byte value);
    internal bool get_IsKnown();
    internal PropertyValidity get_Validity();
    public virtual string ToString();
    public virtual int GetHashCode();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.ComponentModel.DependencyPropertyOptions : Enum {
    public byte value__;
    public static DependencyPropertyOptions Default;
    public static DependencyPropertyOptions ReadOnly;
    public static DependencyPropertyOptions Optional;
    public static DependencyPropertyOptions Metadata;
    public static DependencyPropertyOptions NonSerialized;
    public static DependencyPropertyOptions DelegateProperty;
}
internal class System.Workflow.ComponentModel.Design.ActionButton : object {
    internal Image[] StateImages { get; internal set; }
    internal States State { get; internal set; }
    internal string Description { get; internal set; }
    internal ActionButton(Image[] stateImages);
    [CompilerGeneratedAttribute]
internal void add_StateChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_StateChanged(EventHandler value);
    private sealed virtual override void System.IDisposable.Dispose();
    internal Image[] get_StateImages();
    internal void set_StateImages(Image[] value);
    internal States get_State();
    internal void set_State(States value);
    internal string get_Description();
    internal void set_Description(string value);
}
internal class System.Workflow.ComponentModel.Design.ActivityBindForm : Form {
    public ActivityBind Binding { get; }
    public bool CreateNew { get; }
    public bool CreateNewProperty { get; }
    public string NewMemberName { get; }
    public ActivityBindForm(IServiceProvider serviceProvider, ITypeDescriptorContext context);
    public ActivityBind get_Binding();
    public bool get_CreateNew();
    public bool get_CreateNewProperty();
    public string get_NewMemberName();
    protected virtual void OnHelpRequested(HelpEventArgs e);
    protected virtual void Dispose(bool disposing);
}
internal class System.Workflow.ComponentModel.Design.ActivityBindNamePropertyDescriptor : DynamicPropertyDescriptor {
    public ActivityBindNamePropertyDescriptor(ITypeDescriptorContext context, PropertyDescriptor realPropertyDescriptor);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
}
internal class System.Workflow.ComponentModel.Design.ActivityBindPathPropertyDescriptor : DynamicPropertyDescriptor {
    internal ITypeDescriptorContext OuterPropertyContext { get; }
    public ActivityBindPathPropertyDescriptor(ITypeDescriptorContext context, PropertyDescriptor realPropertyDescriptor);
    internal ITypeDescriptorContext get_OuterPropertyContext();
}
internal class System.Workflow.ComponentModel.Design.ActivityBindPathTypeConverter : PropertyValueProviderTypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Workflow.ComponentModel.Design.ActivityBindPropertyDescriptor : DynamicPropertyDescriptor {
    public bool IsReadOnly { get; }
    public TypeConverter Converter { get; }
    public AttributeCollection Attributes { get; }
    internal object PropertyOwner { get; }
    internal ActivityBindPropertyDescriptor(IServiceProvider serviceProvider, PropertyDescriptor realPropertyDescriptor, object propertyOwner);
    public virtual bool get_IsReadOnly();
    public virtual TypeConverter get_Converter();
    public virtual AttributeCollection get_Attributes();
    public virtual object GetEditor(Type editorBaseType);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    internal object get_PropertyOwner();
    internal static IList`1<MemberInfo> GetBindableMembers(object obj, ITypeDescriptorContext context);
    internal static bool CreateField(ITypeDescriptorContext context, ActivityBind activityBind, bool throwOnError);
    internal static bool IsBindableProperty(PropertyDescriptor propertyDescriptor);
    internal static MemberInfo FindMatchingMember(string name, Type ownerType, bool ignoreCase);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ActivityBindTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object valueToConvert);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ActivityChangedEventArgs : EventArgs {
    public Activity Activity { get; }
    public MemberDescriptor Member { get; }
    public object OldValue { get; }
    public object NewValue { get; }
    public ActivityChangedEventArgs(Activity activity, MemberDescriptor member, object oldValue, object newValue);
    public Activity get_Activity();
    public MemberDescriptor get_Member();
    public object get_OldValue();
    public object get_NewValue();
}
[ActivityDesignerThemeAttribute("System.Workflow.ComponentModel.Design.ActivityDesignerTheme")]
[SRCategoryAttribute("ActivityDesigners", "System.Workflow.ComponentModel.Design.DesignerResources")]
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Design.ActivityDesignerLayoutSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
[ToolboxItemFilterAttribute("Microsoft.Workflow.VSDesigner", "3")]
[ToolboxItemFilterAttribute("System.Workflow.ComponentModel.Design.ActivitySet", "1")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ActivityDesigner : object {
    public Activity Activity { get; }
    public CompositeActivityDesigner ParentDesigner { get; }
    public bool IsSelected { get; }
    public bool IsPrimarySelection { get; }
    public AccessibleObject AccessibilityObject { get; }
    public bool IsVisible { get; }
    public bool IsLocked { get; }
    public Point Location { get; public set; }
    public Size Size { get; public set; }
    public Size MinimumSize { get; }
    public Rectangle Bounds { get; }
    public Image Image { get; protected set; }
    public string Text { get; protected set; }
    public ActivityDesignerTheme DesignerTheme { get; }
    public bool IsRootDesigner { get; }
    protected internal WorkflowView ParentView { get; }
    protected ActivityDesignerVerbCollection Verbs { get; }
    protected bool ShowSmartTag { get; }
    protected ReadOnlyCollection`1<ActivityDesignerVerb> SmartTagVerbs { get; }
    protected Rectangle SmartTagRectangle { get; }
    protected internal ReadOnlyCollection`1<DesignerAction> DesignerActions { get; }
    protected internal ActivityDesignerGlyphCollection Glyphs { get; }
    protected Rectangle TextRectangle { get; }
    protected Rectangle ImageRectangle { get; }
    protected CompositeActivityDesigner InvokingDesigner { get; protected set; }
    protected ReadOnlyCollection`1<WorkflowDesignerMessageFilter> MessageFilters { get; }
    protected internal bool EnableVisualResizing { get; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("1")]
internal string Name { get; internal set; }
    internal bool SupportsLayoutPersistence { get; }
    internal WorkflowLayout SupportedLayout { get; }
    internal SmartTag DesignerSmartTag { get; }
    internal DrawingStates DrawingState { get; internal set; }
    internal Image StockImage { get; }
    internal bool SmartTagVisible { get; internal set; }
    private IComponent System.ComponentModel.Design.IDesigner.Component { get; }
    private DesignerVerbCollection System.ComponentModel.Design.IDesigner.Verbs { get; }
    private ViewTechnology[] System.ComponentModel.Design.IRootDesigner.SupportedTechnologies { get; }
    private CompositeActivityDesigner System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.InvokingDesigner { get; private set; }
    private ReadOnlyCollection`1<WorkflowDesignerMessageFilter> System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.MessageFilters { get; }
    private bool System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.SupportsLayoutPersistence { get; }
    protected virtual override void Finalize();
    public Activity get_Activity();
    public CompositeActivityDesigner get_ParentDesigner();
    public bool get_IsSelected();
    public bool get_IsPrimarySelection();
    public virtual AccessibleObject get_AccessibilityObject();
    public virtual bool get_IsVisible();
    public bool get_IsLocked();
    public virtual Point get_Location();
    public virtual void set_Location(Point value);
    public virtual Size get_Size();
    public virtual void set_Size(Size value);
    public virtual Size get_MinimumSize();
    public Rectangle get_Bounds();
    public virtual Image get_Image();
    protected virtual void set_Image(Image value);
    public virtual string get_Text();
    protected virtual void set_Text(string value);
    public ActivityDesignerTheme get_DesignerTheme();
    public bool get_IsRootDesigner();
    protected internal WorkflowView get_ParentView();
    protected virtual ActivityDesignerVerbCollection get_Verbs();
    protected virtual bool get_ShowSmartTag();
    protected virtual ReadOnlyCollection`1<ActivityDesignerVerb> get_SmartTagVerbs();
    protected virtual Rectangle get_SmartTagRectangle();
    protected internal virtual ReadOnlyCollection`1<DesignerAction> get_DesignerActions();
    protected internal virtual ActivityDesignerGlyphCollection get_Glyphs();
    protected virtual Rectangle get_TextRectangle();
    protected virtual Rectangle get_ImageRectangle();
    protected virtual CompositeActivityDesigner get_InvokingDesigner();
    protected virtual void set_InvokingDesigner(CompositeActivityDesigner value);
    protected virtual ReadOnlyCollection`1<WorkflowDesignerMessageFilter> get_MessageFilters();
    protected internal virtual bool get_EnableVisualResizing();
    internal string get_Name();
    internal void set_Name(string value);
    internal virtual bool get_SupportsLayoutPersistence();
    internal virtual WorkflowLayout get_SupportedLayout();
    internal SmartTag get_DesignerSmartTag();
    internal DrawingStates get_DrawingState();
    internal void set_DrawingState(DrawingStates value);
    internal Image get_StockImage();
    internal virtual bool get_SmartTagVisible();
    internal virtual void set_SmartTagVisible(bool value);
    public static ActivityDesigner GetRootDesigner(IServiceProvider serviceProvider);
    public static bool IsCommentedActivity(Activity activity);
    public virtual bool CanBeParentedTo(CompositeActivityDesigner parentActivityDesigner);
    public virtual HitTestInfo HitTest(Point point);
    public void EnsureVisible();
    public virtual ReadOnlyCollection`1<ConnectionPoint> GetConnectionPoints(DesignerEdges edges);
    public void Invalidate();
    public void Invalidate(Rectangle rectangle);
    public Image GetPreviewImage(Graphics compatibleGraphics);
    protected virtual void Initialize(Activity activity);
    protected virtual void Dispose(bool disposing);
    protected internal virtual ReadOnlyCollection`1<Point> GetConnections(DesignerEdges edges);
    protected virtual void DoDefaultAction();
    protected virtual void PreFilterAttributes(IDictionary attributes);
    protected virtual void PreFilterProperties(IDictionary properties);
    protected virtual void PreFilterEvents(IDictionary events);
    protected virtual void PostFilterAttributes(IDictionary attributes);
    protected virtual void PostFilterProperties(IDictionary properties);
    protected virtual void PostFilterEvents(IDictionary events);
    protected object GetService(Type serviceType);
    protected virtual void OnMouseDragBegin(Point initialDragPoint, MouseEventArgs e);
    protected virtual void OnMouseDragMove(MouseEventArgs e);
    protected virtual void OnMouseDragEnd();
    protected virtual void OnMouseEnter(MouseEventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseHover(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseDoubleClick(MouseEventArgs e);
    protected virtual void OnMouseLeave();
    protected virtual void OnMouseCaptureChanged();
    protected virtual void OnDragEnter(ActivityDragEventArgs e);
    protected virtual void OnDragOver(ActivityDragEventArgs e);
    protected virtual void OnDragLeave();
    protected virtual void OnDragDrop(ActivityDragEventArgs e);
    protected virtual void OnGiveFeedback(GiveFeedbackEventArgs e);
    protected virtual void OnQueryContinueDrag(QueryContinueDragEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnScroll(ScrollBar sender, int value);
    protected virtual void OnProcessMessage(Message message);
    protected internal virtual void RefreshDesignerActions();
    protected internal virtual void OnExecuteDesignerAction(DesignerAction designerAction);
    protected virtual void OnSmartTagVisibilityChanged(bool visible);
    protected virtual void OnShowSmartTagVerbs(Point smartTagPoint);
    protected virtual void OnThemeChange(ActivityDesignerTheme newTheme);
    protected virtual void SaveViewState(BinaryWriter writer);
    protected virtual void LoadViewState(BinaryReader reader);
    protected virtual bool IsSupportedActivityType(Type activityType);
    protected virtual WorkflowView CreateView(ViewTechnology viewTechnology);
    protected void RefreshDesignerVerbs();
    protected virtual void OnPaint(ActivityDesignerPaintEventArgs e);
    protected virtual void OnLayoutPosition(ActivityDesignerLayoutEventArgs e);
    protected virtual Size OnLayoutSize(ActivityDesignerLayoutEventArgs e);
    protected virtual void OnBeginResizing(ActivityDesignerResizeEventArgs e);
    protected virtual void OnResizing(ActivityDesignerResizeEventArgs e);
    protected virtual void OnEndResizing();
    protected virtual bool CanConnect(ConnectionPoint source, ConnectionPoint target);
    protected virtual void OnConnected(ConnectionPoint source, ConnectionPoint target);
    protected virtual void OnActivityChanged(ActivityChangedEventArgs e);
    protected void ShowInfoTip(string title, string infoTip);
    protected void ShowInfoTip(string infoTip);
    protected void ShowInPlaceTip(string infoTip, Rectangle rectangle);
    protected void PerformLayout();
    protected Point PointToScreen(Point point);
    protected Point PointToLogical(Point point);
    protected Rectangle RectangleToScreen(Rectangle rectangle);
    internal Rectangle InternalRectangleToScreen(Rectangle rectangle);
    protected Rectangle RectangleToLogical(Rectangle rectangle);
    internal static ActivityDesigner GetSafeRootDesigner(IServiceProvider serviceProvider);
    internal static ActivityDesigner GetDesigner(Activity activity);
    internal static string GetActivityDescription(Type activityType);
    internal static CompositeActivityDesigner GetParentDesigner(object obj);
    internal static ActivityDesigner CreateTransientDesigner(Activity activity);
    internal static Type GetDesignerType(IServiceProvider serviceProvider, Type activityType, Type designerBaseType);
    internal static ActivityDesigner CreateDesigner(IServiceProvider serviceProvider, Activity activity);
    public sealed virtual void Dispose();
    private sealed virtual override IComponent System.ComponentModel.Design.IDesigner.get_Component();
    private sealed virtual override DesignerVerbCollection System.ComponentModel.Design.IDesigner.get_Verbs();
    private sealed virtual override void System.ComponentModel.Design.IDesigner.Initialize(IComponent component);
    private sealed virtual override void System.ComponentModel.Design.IDesigner.DoDefaultAction();
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(IDictionary attributes);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(IDictionary properties);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(IDictionary events);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(IDictionary attributes);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(IDictionary properties);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(IDictionary events);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IConnectableDesigner.CanConnect(ConnectionPoint source, ConnectionPoint target);
    private sealed virtual override void System.Workflow.ComponentModel.Design.IConnectableDesigner.OnConnected(ConnectionPoint source, ConnectionPoint target);
    private sealed virtual override ViewTechnology[] System.ComponentModel.Design.IRootDesigner.get_SupportedTechnologies();
    private sealed virtual override object System.ComponentModel.Design.IRootDesigner.GetView(ViewTechnology technology);
    private sealed virtual override CompositeActivityDesigner System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.get_InvokingDesigner();
    private sealed virtual override void System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.set_InvokingDesigner(CompositeActivityDesigner value);
    private sealed virtual override ReadOnlyCollection`1<WorkflowDesignerMessageFilter> System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.get_MessageFilters();
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.IsSupportedActivityType(Type activityType);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.get_SupportsLayoutPersistence();
    private sealed virtual override bool System.Drawing.Design.IToolboxUser.GetToolSupported(ToolboxItem toolboxItem);
    private sealed virtual override void System.Drawing.Design.IToolboxUser.ToolPicked(ToolboxItem toolboxItem);
    private sealed virtual override void System.Workflow.ComponentModel.Design.IPersistUIState.SaveViewState(BinaryWriter writer);
    private sealed virtual override void System.Workflow.ComponentModel.Design.IPersistUIState.LoadViewState(BinaryReader reader);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseDown(MouseEventArgs e);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseMove(MouseEventArgs e);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseUp(MouseEventArgs e);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseDoubleClick(MouseEventArgs e);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseEnter(MouseEventArgs e);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseHover(MouseEventArgs e);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseLeave();
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseWheel(MouseEventArgs e);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseCaptureChanged();
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseDragBegin(Point initialPoint, MouseEventArgs e);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseDragMove(MouseEventArgs e);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseDragEnd();
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnDragEnter(DragEventArgs e);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnDragOver(DragEventArgs e);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnDragLeave();
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnDragDrop(DragEventArgs e);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnGiveFeedback(GiveFeedbackEventArgs e);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnQueryContinueDrag(QueryContinueDragEventArgs e);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnKeyDown(KeyEventArgs e);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnKeyUp(KeyEventArgs e);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnScroll(ScrollBar sender, int value);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnShowContextMenu(Point screenMenuPoint);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.ProcessMessage(Message message);
    private sealed virtual override void System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnLayout(LayoutEventArgs layoutEventArgs);
    private sealed virtual override void System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnLayoutPosition(Graphics graphics);
    private sealed virtual override void System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnLayoutSize(Graphics graphics);
    private sealed virtual override void System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnBeginResizing(DesignerEdges sizingEdge);
    private sealed virtual override void System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnResizing(DesignerEdges sizingEdge, Rectangle bounds);
    private sealed virtual override void System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnEndResizing();
    private sealed virtual override void System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnThemeChange();
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnPaint(PaintEventArgs e, Rectangle viewPort);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnPaintWorkflowAdornments(PaintEventArgs e, Rectangle viewPort);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject : AccessibleObject {
    public Rectangle Bounds { get; }
    public string DefaultAction { get; }
    public string Description { get; }
    public string Help { get; }
    public string Name { get; public set; }
    public AccessibleObject Parent { get; }
    public AccessibleRole Role { get; }
    public AccessibleStates State { get; }
    protected ActivityDesigner ActivityDesigner { get; }
    public ActivityDesignerAccessibleObject(ActivityDesigner activityDesigner);
    public virtual Rectangle get_Bounds();
    public virtual string get_DefaultAction();
    public virtual string get_Description();
    public virtual string get_Help();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual AccessibleObject get_Parent();
    public virtual AccessibleRole get_Role();
    public virtual AccessibleStates get_State();
    public virtual void DoDefaultAction();
    public virtual AccessibleObject Navigate(AccessibleNavigation navdir);
    public virtual void Select(AccessibleSelection flags);
    protected object GetService(Type serviceType);
    protected ActivityDesigner get_ActivityDesigner();
}
internal static class System.Workflow.ComponentModel.Design.ActivityDesignerConnectorRouter : object {
    public static Point[] Route(IServiceProvider serviceProvider, object source, object target, ICollection`1<Rectangle> userDefinedRoutingObstacles);
    public static void GetRoutingObstacles(IServiceProvider serviceProvider, object source, object target, List`1& rectanglesToExclude, List`1& linesToExclude, List`1& pointsToExclude);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection : List`1<DesignerGlyph> {
    internal DesignerGlyph Item { get; }
    public ActivityDesignerGlyphCollection(IEnumerable`1<DesignerGlyph> glyphs);
    public ActivityDesignerGlyphCollection(ActivityDesignerGlyphCollection glyphs);
    internal DesignerGlyph get_Item(Type type);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs : EventArgs {
    public AmbientTheme AmbientTheme { get; }
    public ActivityDesignerTheme DesignerTheme { get; }
    public Graphics Graphics { get; }
    public ActivityDesignerLayoutEventArgs(Graphics graphics, ActivityDesignerTheme designerTheme);
    public AmbientTheme get_AmbientTheme();
    public ActivityDesignerTheme get_DesignerTheme();
    public Graphics get_Graphics();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ActivityDesignerLayoutSerializer : WorkflowMarkupSerializer {
    protected virtual void OnBeforeSerialize(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected virtual object CreateInstance(WorkflowMarkupSerializationManager serializationManager, Type type);
    protected internal virtual PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj);
}
internal class System.Workflow.ComponentModel.Design.ActivityDesignerLayoutSerializerProvider : object {
    private sealed virtual override object System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public static class System.Workflow.ComponentModel.Design.ActivityDesignerPaint : object {
    private static ActivityDesignerPaint();
    internal static Size MeasureString(Graphics graphics, Font font, string text, StringAlignment alignment, Size maxSize);
    public static void DrawText(Graphics graphics, Font font, string text, Rectangle boundingRect, StringAlignment alignment, TextQuality textQuality, Brush textBrush);
    public static void DrawImage(Graphics graphics, Image image, Rectangle destination, DesignerContentAlignment alignment);
    internal static void DrawImage(Graphics graphics, Image image, Rectangle destination, float transparency);
    public static void DrawImage(Graphics graphics, Image image, Rectangle destination, Rectangle source, DesignerContentAlignment alignment, float transparency, bool grayscale);
    internal static Rectangle GetRectangleFromAlignment(DesignerContentAlignment alignment, Rectangle destination, Size size);
    internal static void DrawSelection(Graphics graphics, Rectangle boundingRect, bool isPrimary, Size selectionSize, Rectangle[] grabHandles);
    internal static void DrawGrabHandles(Graphics graphics, Rectangle[] grabHandles, bool isPrimary);
    public static void Draw3DButton(Graphics graphics, Image image, Rectangle bounds, float transparency, ButtonState buttonState);
    internal static void DrawGrid(Graphics graphics, Rectangle viewableRectangle);
    public static void DrawExpandButton(Graphics graphics, Rectangle boundingRect, bool drawExpanded, CompositeDesignerTheme compositeDesignerTheme);
    public static void DrawRoundedRectangle(Graphics graphics, Pen drawingPen, Rectangle rectangle, int radius);
    internal static void DrawDropShadow(Graphics graphics, Rectangle shadowSourceRectangle, Color baseColor, int shadowDepth, LightSourcePosition lightSourcePosition, float lightSourceIntensity, bool roundEdges);
    internal static void DrawDesignerBackground(Graphics graphics, ActivityDesigner designer);
    internal static GraphicsPath GetDesignerPath(ActivityDesigner designer, bool enableRoundedCorners);
    internal static GraphicsPath GetDesignerPath(ActivityDesigner designer, Point offset, Size inflate, DesignerEdges edgeToInflate);
    internal static GraphicsPath GetDesignerPath(ActivityDesigner designer, Point offset, Size inflate, DesignerEdges edgeToInflate, bool enableRoundedCorners);
    internal static void DrawInvalidDesignerIndicator(Graphics graphics, ActivityDesigner activityDesigner);
    internal static void DrawConnectors(Graphics graphics, Pen pen, Point[] points, Size connectorCapSize, Size maxCapSize, LineAnchor startConnectorCap, LineAnchor endConnectorCap);
    internal static GraphicsPath GetLineCap(LineAnchor lineCap, int capsize, Single& capinset);
    public static GraphicsPath GetRoundedRectanglePath(Rectangle rectangle, int radius);
    internal static GraphicsPath GetScrollIndicatorPath(Rectangle bounds, ScrollButton button);
    internal static GraphicsPath[] GetPagePaths(Rectangle pageBounds, int pageFoldSize, DesignerContentAlignment foldAlignment);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs : EventArgs {
    public Graphics Graphics { get; }
    public Rectangle ClipRectangle { get; }
    public AmbientTheme AmbientTheme { get; }
    public ActivityDesignerTheme DesignerTheme { get; }
    internal Rectangle ViewPort { get; }
    public ActivityDesignerPaintEventArgs(Graphics graphics, Rectangle clipRectangle, Rectangle viewPort, ActivityDesignerTheme designerTheme);
    public Graphics get_Graphics();
    public Rectangle get_ClipRectangle();
    public AmbientTheme get_AmbientTheme();
    public ActivityDesignerTheme get_DesignerTheme();
    internal Rectangle get_ViewPort();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs : EventArgs {
    public DesignerEdges SizingEdge { get; }
    public Rectangle Bounds { get; }
    public ActivityDesignerResizeEventArgs(DesignerEdges sizingEdge, Rectangle newBounds);
    public DesignerEdges get_SizingEdge();
    public Rectangle get_Bounds();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ActivityDesignerTheme : DesignerTheme {
    [DispIdAttribute("1")]
[SRDescriptionAttribute("ImageDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
[EditorAttribute("System.Workflow.ComponentModel.Design.ImageBrowserEditor", "System.Drawing.Design.UITypeEditor")]
public string DesignerImagePath { get; public set; }
    [DispIdAttribute("2")]
[SRDescriptionAttribute("ForeColorDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
[EditorAttribute("System.Workflow.ComponentModel.Design.ColorPickerEditor", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.ColorPickerConverter")]
public Color ForeColor { get; public set; }
    [DispIdAttribute("3")]
[SRDescriptionAttribute("BorderColorDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
[EditorAttribute("System.Workflow.ComponentModel.Design.ColorPickerEditor", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.ColorPickerConverter")]
public Color BorderColor { get; public set; }
    [DispIdAttribute("4")]
[SRDescriptionAttribute("BorderStyleDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.FilteredEnumConverter")]
public DashStyle BorderStyle { get; public set; }
    [DispIdAttribute("5")]
[SRDescriptionAttribute("BackColorStartDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
[EditorAttribute("System.Workflow.ComponentModel.Design.ColorPickerEditor", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.ColorPickerConverter")]
public Color BackColorStart { get; public set; }
    [DispIdAttribute("6")]
[SRDescriptionAttribute("BackColorEndDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
[EditorAttribute("System.Workflow.ComponentModel.Design.ColorPickerEditor", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.ColorPickerConverter")]
public Color BackColorEnd { get; public set; }
    [DispIdAttribute("7")]
[SRDescriptionAttribute("BackgroundStyleDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
public LinearGradientMode BackgroundStyle { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Pen ForegroundPen { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Brush ForegroundBrush { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Pen BorderPen { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Size Size { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DesignerGeometry DesignerGeometry { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Image DesignerImage { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Size ImageSize { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Font Font { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Font BoldFont { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public int BorderWidth { get; }
    public ActivityDesignerTheme(WorkflowTheme theme);
    private static ActivityDesignerTheme();
    protected virtual void Dispose(bool disposing);
    public virtual void Initialize();
    public virtual string get_DesignerImagePath();
    public virtual void set_DesignerImagePath(string value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual DashStyle get_BorderStyle();
    public virtual void set_BorderStyle(DashStyle value);
    public virtual Color get_BackColorStart();
    public virtual void set_BackColorStart(Color value);
    public virtual Color get_BackColorEnd();
    public virtual void set_BackColorEnd(Color value);
    public virtual LinearGradientMode get_BackgroundStyle();
    public virtual void set_BackgroundStyle(LinearGradientMode value);
    public Pen get_ForegroundPen();
    public Brush get_ForegroundBrush();
    public Pen get_BorderPen();
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Brush GetBackgroundBrush(Rectangle rectangle);
    public Size get_Size();
    public DesignerGeometry get_DesignerGeometry();
    public Image get_DesignerImage();
    public Size get_ImageSize();
    public Font get_Font();
    public Font get_BoldFont();
    public int get_BorderWidth();
    public virtual void OnAmbientPropertyChanged(AmbientProperty ambientProperty);
    internal virtual ICollection GetPropertyValues(ITypeDescriptorContext context);
}
[AttributeUsageAttribute("4")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute : Attribute {
    public Type DesignerThemeType { get; }
    public string Xml { get; public set; }
    public ActivityDesignerThemeAttribute(Type designerThemeType);
    public Type get_DesignerThemeType();
    public string get_Xml();
    public void set_Xml(string value);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ActivityDesignerVerb : DesignerVerb {
    public int OleStatus { get; }
    public CommandID CommandID { get; }
    public DesignerVerbGroup Group { get; }
    internal int Id { get; internal set; }
    internal ActivityDesigner ActivityDesigner { get; }
    public ActivityDesignerVerb(ActivityDesigner activityDesigner, DesignerVerbGroup verbGroup, string text, EventHandler invokeHandler);
    public ActivityDesignerVerb(ActivityDesigner activityDesigner, DesignerVerbGroup verbGroup, string text, EventHandler invokeHandler, EventHandler statusHandler);
    public virtual int get_OleStatus();
    public virtual CommandID get_CommandID();
    public DesignerVerbGroup get_Group();
    internal int get_Id();
    internal void set_Id(int value);
    internal ActivityDesigner get_ActivityDesigner();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection : DesignerVerbCollection {
    internal ActivityDesignerVerbCollection SafeCollection { get; }
    public ActivityDesignerVerbCollection(IEnumerable`1<ActivityDesignerVerb> verbs);
    protected virtual void OnValidate(object value);
    internal ActivityDesignerVerbCollection get_SafeCollection();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ActivityDragEventArgs : DragEventArgs {
    public ReadOnlyCollection`1<Activity> Activities { get; }
    public Point DragImageSnapPoint { get; public set; }
    public Point DragInitiationPoint { get; }
    internal ActivityDragEventArgs(DragEventArgs dragEventArgs, Point dragInitiationPoint, Point point, List`1<Activity> draggedActivities);
    public ReadOnlyCollection`1<Activity> get_Activities();
    public Point get_DragImageSnapPoint();
    public void set_DragImageSnapPoint(Point value);
    public Point get_DragInitiationPoint();
}
internal abstract class System.Workflow.ComponentModel.Design.ActivityHostDesigner : SequentialActivityDesigner {
    public ReadOnlyCollection`1<ActivityDesigner> ContainedDesigners { get; }
    protected Activity RootActivity { get; }
    public virtual ReadOnlyCollection`1<ActivityDesigner> get_ContainedDesigners();
    protected void RefreshHostedActivity();
    protected abstract virtual Activity get_RootActivity();
    public virtual bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert);
    public virtual void InsertActivities(HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert);
    public virtual bool CanRemoveActivities(ReadOnlyCollection`1<Activity> activitiesToRemove);
    public virtual void RemoveActivities(ReadOnlyCollection`1<Activity> activitiesToRemove);
    protected virtual void Dispose(bool disposing);
    protected virtual void SaveViewState(BinaryWriter writer);
    protected virtual void LoadViewState(BinaryReader reader);
}
[ActivityDesignerThemeAttribute("System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme")]
[SRCategoryAttribute("ActivityPreviewDesigners", "System.Workflow.ComponentModel.Design.DesignerResources")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ActivityPreviewDesigner : SequentialActivityDesigner {
    public bool ShowPreview { get; public set; }
    public ActivityDesigner PreviewedDesigner { get; }
    public ReadOnlyCollection`1<ActivityDesigner> ContainedDesigners { get; }
    public Point Location { get; public set; }
    public object FirstSelectableObject { get; }
    public object LastSelectableObject { get; }
    public AccessibleObject AccessibilityObject { get; }
    protected string HelpText { get; protected set; }
    protected int CurrentDropTarget { get; protected set; }
    protected ActivityDesignerVerbCollection Verbs { get; }
    protected internal ActivityDesignerGlyphCollection Glyphs { get; }
    public bool get_ShowPreview();
    public void set_ShowPreview(bool value);
    public ActivityDesigner get_PreviewedDesigner();
    public virtual ReadOnlyCollection`1<ActivityDesigner> get_ContainedDesigners();
    public virtual Point get_Location();
    public virtual void set_Location(Point value);
    public virtual object get_FirstSelectableObject();
    public virtual object get_LastSelectableObject();
    public virtual AccessibleObject get_AccessibilityObject();
    protected virtual string get_HelpText();
    protected virtual void set_HelpText(string value);
    protected virtual int get_CurrentDropTarget();
    protected virtual void set_CurrentDropTarget(int value);
    protected virtual ActivityDesignerVerbCollection get_Verbs();
    protected internal virtual Rectangle[] GetConnectors();
    protected internal virtual ActivityDesignerGlyphCollection get_Glyphs();
    public void RefreshPreview();
    public virtual HitTestInfo HitTest(Point point);
    public virtual bool IsContainedDesignerVisible(ActivityDesigner containedDesigner);
    public virtual void EnsureVisibleContainedDesigner(ActivityDesigner containedDesigner);
    public virtual object GetNextSelectableObject(object obj, DesignerNavigationDirection direction);
    protected virtual void Initialize(Activity activity);
    protected virtual void Dispose(bool disposing);
    protected virtual Rectangle[] GetDropTargets(Point dropPoint);
    protected virtual void OnPaint(ActivityDesignerPaintEventArgs e);
    protected virtual void OnDragEnter(ActivityDragEventArgs e);
    protected virtual void OnDragOver(ActivityDragEventArgs e);
    protected virtual void OnLayoutPosition(ActivityDesignerLayoutEventArgs e);
    protected virtual Size OnLayoutSize(ActivityDesignerLayoutEventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseDoubleClick(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseLeave();
    protected virtual void SaveViewState(BinaryWriter writer);
    protected virtual void LoadViewState(BinaryReader reader);
    protected virtual void OnThemeChange(ActivityDesignerTheme newTheme);
    protected internal virtual void RefreshDesignerActions();
    protected virtual void OnContainedActivitiesChanged(ActivityCollectionChangeEventArgs listChangeArgs);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme : CompositeDesignerTheme {
    internal static Bitmap LeftScrollImage;
    internal static Bitmap LeftScrollImageUp;
    internal static Bitmap RightScrollImage;
    internal static Bitmap RightScrollImageUp;
    internal static Bitmap PreviewButtonImage;
    internal static Bitmap EditButtonImage;
    internal static Bitmap PreviewImage;
    [DispIdAttribute("13")]
[SRDescriptionAttribute("PreviewForeColorDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
[EditorAttribute("System.Workflow.ComponentModel.Design.ColorPickerEditor", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.ColorPickerConverter")]
public Color PreviewForeColor { get; public set; }
    [DispIdAttribute("14")]
[SRDescriptionAttribute("PreviewBackColorDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
[EditorAttribute("System.Workflow.ComponentModel.Design.ColorPickerEditor", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.ColorPickerConverter")]
public Color PreviewBackColor { get; public set; }
    [DispIdAttribute("15")]
[SRDescriptionAttribute("PreviewBorderColorDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
[EditorAttribute("System.Workflow.ComponentModel.Design.ColorPickerEditor", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.ColorPickerConverter")]
public Color PreviewBorderColor { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
internal Size PreviewItemSize { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
internal int PreviewItemCount { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
internal Size PreviewWindowSize { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
internal Size PreviewButtonSize { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
internal Pen PreviewBorderPen { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
internal Brush PreviewForegroundBrush { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
internal Brush PreviewBackgroundBrush { get; }
    public ActivityPreviewDesignerTheme(WorkflowTheme theme);
    private static ActivityPreviewDesignerTheme();
    protected virtual void Dispose(bool disposing);
    public virtual void Initialize();
    public Color get_PreviewForeColor();
    public void set_PreviewForeColor(Color value);
    public Color get_PreviewBackColor();
    public void set_PreviewBackColor(Color value);
    public Color get_PreviewBorderColor();
    public void set_PreviewBorderColor(Color value);
    internal Size get_PreviewItemSize();
    internal int get_PreviewItemCount();
    internal Size get_PreviewWindowSize();
    internal Size get_PreviewButtonSize();
    internal Pen get_PreviewBorderPen();
    internal Brush get_PreviewForegroundBrush();
    internal Brush get_PreviewBackgroundBrush();
    public virtual void OnAmbientPropertyChanged(AmbientProperty ambientProperty);
}
internal class System.Workflow.ComponentModel.Design.ActivityRootLayout : DefaultWorkflowLayout {
    public Size Extent { get; }
    internal ActivityRootLayout(IServiceProvider serviceProvider);
    public virtual Size get_Extent();
    public virtual void OnPaint(PaintEventArgs e, ViewPortData viewPortData);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ActivityToolboxItem : ToolboxItem {
    public ActivityToolboxItem(Type type);
    protected ActivityToolboxItem(SerializationInfo info, StreamingContext context);
    public virtual IComponent[] CreateComponentsWithUI(IDesignerHost host);
    protected virtual IComponent[] CreateComponentsCore(IDesignerHost host);
    public static Image GetToolboxImage(Type activityType);
    public static string GetToolboxDisplayName(Type activityType);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.ComponentModel.Design.AmbientProperty : Enum {
    public int value__;
    public static AmbientProperty DesignerSize;
    public static AmbientProperty OperatingSystemSetting;
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.AmbientTheme : DesignerTheme {
    internal static float WatermarkTransparency;
    internal static int ArcDiameter;
    internal static int DropShadowWidth;
    internal static Color TransparentColor;
    internal static Image ConfigErrorImage;
    internal static Image ScrollIndicatorImage;
    internal static Image DropIndicatorImage;
    internal static Image LockImage;
    internal static Image ReadOnlyImage;
    internal static Pen SmartTagBorderPen;
    internal static Pen MagnifierPen;
    internal static Pen WorkflowBorderPen;
    internal static Brush WorkspaceBackgroundBrush;
    internal static Brush FadeBrush;
    internal static Brush DisabledBrush;
    internal static Brush PageShadowBrush;
    internal static float ScrollIndicatorTransparency;
    internal static Size DragImageMargins;
    internal static Size DragImageTextSize;
    internal static Size DragImageIconSize;
    internal static int MinZoom;
    internal static int MaxZoom;
    internal static int ScrollUnit;
    internal static int MinShadowDepth;
    internal static int MaxShadowDepth;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool UseOperatingSystemSettings { get; internal set; }
    [DispIdAttribute("1")]
[SRDescriptionAttribute("FontDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("WorkflowAppearanceCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.FontFamilyConverter")]
public string FontName { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("2")]
[SRDescriptionAttribute("TextQualityDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("WorkflowAppearanceCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
public TextQuality TextQuality { get; public set; }
    [DispIdAttribute("3")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowConfigErrorDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("WorkflowAppearanceCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
public bool ShowConfigErrors { get; public set; }
    [DefaultValueAttribute("False")]
[DispIdAttribute("6")]
[SRDescriptionAttribute("GrayscaleWorkflowDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("WorkflowAppearanceCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
public bool DrawGrayscale { get; public set; }
    [DispIdAttribute("7")]
[SRDescriptionAttribute("DropHiliteDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
[EditorAttribute("System.Workflow.ComponentModel.Design.ColorPickerEditor", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.ColorPickerConverter")]
public Color DropIndicatorColor { get; public set; }
    [DispIdAttribute("8")]
[SRDescriptionAttribute("SelectionForegroundDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
[EditorAttribute("System.Workflow.ComponentModel.Design.ColorPickerEditor", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.ColorPickerConverter")]
public Color SelectionForeColor { get; public set; }
    [DispIdAttribute("9")]
[SRDescriptionAttribute("SelectionPatternDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
[EditorAttribute("System.Workflow.ComponentModel.Design.ColorPickerEditor", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.ColorPickerConverter")]
public Color SelectionPatternColor { get; public set; }
    [DispIdAttribute("10")]
[SRDescriptionAttribute("WorkflowForegroundDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
[EditorAttribute("System.Workflow.ComponentModel.Design.ColorPickerEditor", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.ColorPickerConverter")]
public Color ForeColor { get; public set; }
    [DispIdAttribute("11")]
[SRDescriptionAttribute("CommentColorDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
[EditorAttribute("System.Workflow.ComponentModel.Design.ColorPickerEditor", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.ColorPickerConverter")]
public Color CommentIndicatorColor { get; public set; }
    [DispIdAttribute("12")]
[SRDescriptionAttribute("LockColorDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
[EditorAttribute("System.Workflow.ComponentModel.Design.ColorPickerEditor", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.ColorPickerConverter")]
public Color ReadonlyIndicatorColor { get; public set; }
    [DispIdAttribute("13")]
[SRDescriptionAttribute("WorkflowBackgroundDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
[EditorAttribute("System.Workflow.ComponentModel.Design.ColorPickerEditor", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.ColorPickerConverter")]
public Color BackColor { get; public set; }
    [DefaultValueAttribute("False")]
[DispIdAttribute("14")]
[SRDescriptionAttribute("WorkflowShadowDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("WorkflowAppearanceCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
public bool DrawShadow { get; public set; }
    [DispIdAttribute("15")]
[SRDescriptionAttribute("WorkflowWatermarkDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
[EditorAttribute("System.Workflow.ComponentModel.Design.ImageBrowserEditor", "System.Drawing.Design.UITypeEditor")]
public string WatermarkImagePath { get; public set; }
    [DispIdAttribute("16")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("WatermarkAlignmentDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
public DesignerContentAlignment WatermarkAlignment { get; public set; }
    [DefaultValueAttribute("False")]
[DispIdAttribute("17")]
[SRDescriptionAttribute("ShowGridDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
public bool ShowGrid { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("18")]
[SRDescriptionAttribute("GridStyleDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
public DashStyle GridStyle { get; public set; }
    [DispIdAttribute("19")]
[SRDescriptionAttribute("GridColorDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
[EditorAttribute("System.Workflow.ComponentModel.Design.ColorPickerEditor", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.ColorPickerConverter")]
public Color GridColor { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("20")]
[SRDescriptionAttribute("DesignerSizeDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("ActivityAppearanceCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
public DesignerSize DesignerSize { get; public set; }
    [DefaultValueAttribute("True")]
[DispIdAttribute("21")]
[SRDescriptionAttribute("DrawRoundedDesignersDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("ActivityAppearanceCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
public bool DrawRounded { get; public set; }
    [DefaultValueAttribute("True")]
[DispIdAttribute("24")]
[SRDescriptionAttribute("DesignerBorderDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("ActivityAppearanceCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
public bool ShowDesignerBorder { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Size Margin { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Size SelectionSize { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Size GlyphSize { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
internal Size ScrollIndicatorSize { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
internal Size DropIndicatorSize { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
internal Size MagnifierSize { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
internal int ShadowDepth { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Size GridSize { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public int BorderWidth { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Pen MajorGridPen { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Brush MajorGridBrush { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Pen MinorGridPen { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
internal Brush MinorGridBrush { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Pen SelectionPatternPen { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Pen SelectionForegroundPen { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Brush SelectionForegroundBrush { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Pen DropIndicatorPen { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Brush DropIndicatorBrush { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Pen ForegroundPen { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Pen CommentIndicatorPen { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Brush CommentIndicatorBrush { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Brush ReadonlyIndicatorBrush { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Brush ForegroundBrush { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Brush BackgroundBrush { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Image WorkflowWatermarkImage { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Font Font { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Font BoldFont { get; }
    internal static String[] SupportedFonts { get; }
    public AmbientTheme(WorkflowTheme theme);
    private static AmbientTheme();
    protected virtual void Dispose(bool disposing);
    public virtual void Initialize();
    public virtual bool get_UseOperatingSystemSettings();
    internal virtual void set_UseOperatingSystemSettings(bool value);
    public virtual string get_FontName();
    public virtual void set_FontName(string value);
    public virtual TextQuality get_TextQuality();
    public virtual void set_TextQuality(TextQuality value);
    public virtual bool get_ShowConfigErrors();
    public virtual void set_ShowConfigErrors(bool value);
    public virtual bool get_DrawGrayscale();
    public virtual void set_DrawGrayscale(bool value);
    public virtual Color get_DropIndicatorColor();
    public virtual void set_DropIndicatorColor(Color value);
    public virtual Color get_SelectionForeColor();
    public virtual void set_SelectionForeColor(Color value);
    public virtual Color get_SelectionPatternColor();
    public virtual void set_SelectionPatternColor(Color value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual Color get_CommentIndicatorColor();
    public virtual void set_CommentIndicatorColor(Color value);
    public virtual Color get_ReadonlyIndicatorColor();
    public virtual void set_ReadonlyIndicatorColor(Color value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual bool get_DrawShadow();
    public virtual void set_DrawShadow(bool value);
    public virtual string get_WatermarkImagePath();
    public virtual void set_WatermarkImagePath(string value);
    public virtual DesignerContentAlignment get_WatermarkAlignment();
    public virtual void set_WatermarkAlignment(DesignerContentAlignment value);
    public virtual bool get_ShowGrid();
    public virtual void set_ShowGrid(bool value);
    public virtual DashStyle get_GridStyle();
    public virtual void set_GridStyle(DashStyle value);
    public virtual Color get_GridColor();
    public virtual void set_GridColor(Color value);
    public virtual DesignerSize get_DesignerSize();
    public virtual void set_DesignerSize(DesignerSize value);
    public virtual bool get_DrawRounded();
    public virtual void set_DrawRounded(bool value);
    public virtual bool get_ShowDesignerBorder();
    public virtual void set_ShowDesignerBorder(bool value);
    public virtual Size get_Margin();
    public virtual Size get_SelectionSize();
    public virtual Size get_GlyphSize();
    internal Size get_ScrollIndicatorSize();
    internal Size get_DropIndicatorSize();
    internal Size get_MagnifierSize();
    internal int get_ShadowDepth();
    public virtual Size get_GridSize();
    public virtual int get_BorderWidth();
    public Pen get_MajorGridPen();
    public Brush get_MajorGridBrush();
    public Pen get_MinorGridPen();
    internal Brush get_MinorGridBrush();
    public Pen get_SelectionPatternPen();
    public Pen get_SelectionForegroundPen();
    public Brush get_SelectionForegroundBrush();
    public Pen get_DropIndicatorPen();
    public Brush get_DropIndicatorBrush();
    public Pen get_ForegroundPen();
    public Pen get_CommentIndicatorPen();
    public Brush get_CommentIndicatorBrush();
    public Brush get_ReadonlyIndicatorBrush();
    public Brush get_ForegroundBrush();
    public Brush get_BackgroundBrush();
    public Image get_WorkflowWatermarkImage();
    public Font get_Font();
    public Font get_BoldFont();
    internal void UseDefaultFont();
    internal void UpdateFont();
    public virtual void OnAmbientPropertyChanged(AmbientProperty ambientProperty);
    internal static String[] get_SupportedFonts();
    internal virtual ICollection GetPropertyValues(ITypeDescriptorContext context);
}
internal enum System.Workflow.ComponentModel.Design.AnchorAlignment : Enum {
    public int value__;
    public static AnchorAlignment Near;
    public static AnchorAlignment Far;
}
internal class System.Workflow.ComponentModel.Design.AutoExpandingMessageFilter : WorkflowDesignerMessageFilter {
    protected virtual bool OnDragEnter(DragEventArgs eventArgs);
    protected virtual bool OnDragOver(DragEventArgs eventArgs);
    protected virtual bool OnDragDrop(DragEventArgs eventArgs);
    protected virtual bool OnDragLeave();
}
internal class System.Workflow.ComponentModel.Design.AutoScrollingMessageFilter : WorkflowDesignerMessageFilter {
    protected virtual bool OnDragEnter(DragEventArgs eventArgs);
    protected virtual bool OnDragOver(DragEventArgs eventArgs);
    protected virtual bool OnDragLeave();
    protected virtual bool OnDragDrop(DragEventArgs eventArgs);
    protected virtual bool OnPaintWorkflowAdornments(PaintEventArgs e, Rectangle viewPort, AmbientTheme ambientTheme);
}
internal class System.Workflow.ComponentModel.Design.BaseClassTypeFilterProvider : object {
    private string System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription { get; }
    public BaseClassTypeFilterProvider(IServiceProvider serviceProvider);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(Type type, bool throwOnError);
    private sealed virtual override string System.Workflow.ComponentModel.Design.ITypeFilterProvider.get_FilterDescription();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.BindUITypeEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider serviceProvider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext typeDescriptorContext);
    internal static object EditValue(ITypeDescriptorContext context);
}
internal class System.Workflow.ComponentModel.Design.CancellationDesignerTheme : CompositeDesignerTheme {
    public CancellationDesignerTheme(WorkflowTheme theme);
}
[ActivityDesignerThemeAttribute("System.Workflow.ComponentModel.Design.CancellationDesignerTheme")]
internal class System.Workflow.ComponentModel.Design.CancellationHandlerActivityDesigner : SequentialActivityDesigner {
    public bool CanExpandCollapse { get; }
    public ReadOnlyCollection`1<DesignerView> Views { get; }
    public virtual bool get_CanExpandCollapse();
    public virtual ReadOnlyCollection`1<DesignerView> get_Views();
    public virtual bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert);
}
internal class System.Workflow.ComponentModel.Design.ColorMarkupSerializer : WorkflowMarkupSerializer {
    protected internal virtual bool CanSerializeToString(WorkflowMarkupSerializationManager serializationManager, object value);
    protected internal virtual string SerializeToString(WorkflowMarkupSerializationManager serializationManager, object value);
    protected internal virtual object DeserializeFromString(WorkflowMarkupSerializationManager serializationManager, Type propertyType, string value);
}
internal class System.Workflow.ComponentModel.Design.ColorPickerConverter : ColorConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
internal class System.Workflow.ComponentModel.Design.ColorPickerEditor : UITypeEditor {
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual void PaintValue(PaintValueEventArgs e);
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
}
internal class System.Workflow.ComponentModel.Design.CommandSet : object {
    internal static CommandID[] NavigationToolCommandIds;
    public CommandSet(IServiceProvider serviceProvider);
    private static CommandSet();
    public sealed virtual void Dispose();
    internal void UpdateCommandSet();
    internal void UpdateZoomCommands(bool enable);
    internal void UpdatePageLayoutCommands(bool enable);
    internal void UpdatePanCommands(bool enable);
}
internal class System.Workflow.ComponentModel.Design.CommandSetItem : MenuCommand {
    public int OleStatus { get; }
    public CommandSetItem(EventHandler statusHandler, EventHandler invokeHandler, CommandID id);
    public CommandSetItem(EventHandler statusHandler, EventHandler invokeHandler, CommandID id, string text);
    public CommandSetItem(EventHandler statusHandler, EventHandler invokeHandler, CommandID id, bool immidiateStatusUpdate);
    public virtual int get_OleStatus();
    public void UpdateStatus();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.CommentGlyph : DesignerGlyph {
    internal static CommentGlyph Default { get; }
    public int Priority { get; }
    private static CommentGlyph();
    internal static CommentGlyph get_Default();
    public virtual Rectangle GetBounds(ActivityDesigner designer, bool activated);
    public virtual int get_Priority();
    protected virtual void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer);
}
internal class System.Workflow.ComponentModel.Design.CompensatableTransactionScopeActivityDesigner : SequenceDesigner {
    public ReadOnlyCollection`1<DesignerView> Views { get; }
    public virtual ReadOnlyCollection`1<DesignerView> get_Views();
}
internal class System.Workflow.ComponentModel.Design.CompensationDesignerTheme : CompositeDesignerTheme {
    public CompensationDesignerTheme(WorkflowTheme theme);
}
[ActivityDesignerThemeAttribute("System.Workflow.ComponentModel.Design.CompensationDesignerTheme")]
internal class System.Workflow.ComponentModel.Design.CompensationHandlerActivityDesigner : SequentialActivityDesigner {
    public ReadOnlyCollection`1<DesignerView> Views { get; }
    public bool CanExpandCollapse { get; }
    public virtual ReadOnlyCollection`1<DesignerView> get_Views();
    public virtual bool get_CanExpandCollapse();
    public virtual bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert);
}
internal class System.Workflow.ComponentModel.Design.ComponentChangeDispatcher : object {
    public ComponentChangeDispatcher(IServiceProvider serviceProvider, object component, PropertyDescriptor propertyDescriptor);
    public sealed virtual void Dispose();
}
[ActivityDesignerThemeAttribute("System.Workflow.ComponentModel.Design.CompositeDesignerTheme")]
[SRCategoryAttribute("CompositeActivityDesigners", "System.Workflow.ComponentModel.Design.DesignerResources")]
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Design.CompositeActivityDesignerLayoutSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.ComponentModel.Design.CompositeActivityDesigner : ActivityDesigner {
    public bool IsEditable { get; }
    public bool CanExpandCollapse { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public bool Expanded { get; public set; }
    public ReadOnlyCollection`1<ActivityDesigner> ContainedDesigners { get; }
    public object FirstSelectableObject { get; }
    public object LastSelectableObject { get; }
    public AccessibleObject AccessibilityObject { get; }
    public Point Location { get; public set; }
    protected Rectangle ExpandButtonRectangle { get; }
    protected int TitleHeight { get; }
    protected Rectangle ImageRectangle { get; }
    protected Rectangle TextRectangle { get; }
    protected internal ActivityDesignerGlyphCollection Glyphs { get; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("2")]
internal List`1<ActivityDesigner> Designers { get; }
    public bool get_IsEditable();
    public virtual bool get_CanExpandCollapse();
    public virtual bool get_Expanded();
    public virtual void set_Expanded(bool value);
    public virtual ReadOnlyCollection`1<ActivityDesigner> get_ContainedDesigners();
    public virtual object get_FirstSelectableObject();
    public virtual object get_LastSelectableObject();
    public virtual AccessibleObject get_AccessibilityObject();
    public virtual Point get_Location();
    public virtual void set_Location(Point value);
    protected virtual Rectangle get_ExpandButtonRectangle();
    protected virtual int get_TitleHeight();
    protected virtual Rectangle get_ImageRectangle();
    protected virtual Rectangle get_TextRectangle();
    protected internal virtual ActivityDesignerGlyphCollection get_Glyphs();
    internal List`1<ActivityDesigner> get_Designers();
    public static void InsertActivities(CompositeActivityDesigner compositeActivityDesigner, HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert, string undoTransactionDescription);
    public static void RemoveActivities(IServiceProvider serviceProvider, ReadOnlyCollection`1<Activity> activitiesToRemove, string transactionDescription);
    public static IDataObject SerializeActivitiesToDataObject(IServiceProvider serviceProvider, Activity[] activities);
    public static Activity[] DeserializeActivitiesFromDataObject(IServiceProvider serviceProvider, IDataObject dataObj);
    internal static Activity[] DeserializeActivitiesFromDataObject(IServiceProvider serviceProvider, IDataObject dataObj, bool addAssemblyReference);
    internal static Activity[] DeserializeActivitiesFromToolboxItem(IServiceProvider serviceProvider, ToolboxItem toolboxItem, bool addAssemblyReference);
    public static ActivityDesigner[] GetIntersectingDesigners(ActivityDesigner topLevelDesigner, Rectangle rectangle);
    public virtual bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert);
    public virtual void InsertActivities(HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert);
    public virtual bool CanMoveActivities(HitTestInfo moveLocation, ReadOnlyCollection`1<Activity> activitiesToMove);
    public virtual void MoveActivities(HitTestInfo moveLocation, ReadOnlyCollection`1<Activity> activitiesToMove);
    public virtual bool CanRemoveActivities(ReadOnlyCollection`1<Activity> activitiesToRemove);
    public virtual void RemoveActivities(ReadOnlyCollection`1<Activity> activitiesToRemove);
    public virtual bool IsContainedDesignerVisible(ActivityDesigner containedDesigner);
    public virtual void EnsureVisibleContainedDesigner(ActivityDesigner containedDesigner);
    public virtual object GetNextSelectableObject(object current, DesignerNavigationDirection direction);
    public virtual HitTestInfo HitTest(Point point);
    protected virtual void OnContainedActivityChanged(ActivityChangedEventArgs e);
    protected virtual void OnContainedActivitiesChanging(ActivityCollectionChangeEventArgs listChangeArgs);
    protected virtual void OnContainedActivitiesChanged(ActivityCollectionChangeEventArgs listChangeArgs);
    protected virtual void Initialize(Activity activity);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnPaint(ActivityDesignerPaintEventArgs e);
    protected virtual void OnLayoutPosition(ActivityDesignerLayoutEventArgs e);
    protected virtual Size OnLayoutSize(ActivityDesignerLayoutEventArgs e);
    protected virtual void SaveViewState(BinaryWriter writer);
    protected virtual void LoadViewState(BinaryReader reader);
    protected virtual void OnThemeChange(ActivityDesignerTheme designerTheme);
    protected void PaintContainedDesigners(ActivityDesignerPaintEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    internal virtual void OnPaintContainedDesigners(ActivityDesignerPaintEventArgs e);
    public static void MoveDesigners(ActivityDesigner activityDesigner, bool moveBack);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.CompositeActivityDesignerLayoutSerializer : ActivityDesignerLayoutSerializer {
    protected internal virtual PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.CompositeDesignerAccessibleObject : ActivityDesignerAccessibleObject {
    public AccessibleStates State { get; }
    public CompositeDesignerAccessibleObject(CompositeActivityDesigner activityDesigner);
    public virtual AccessibleStates get_State();
    public virtual AccessibleObject GetChild(int index);
    public virtual int GetChildCount();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.CompositeDesignerTheme : ActivityDesignerTheme {
    internal static Pen ExpandButtonForegoundPen;
    internal static Pen ExpandButtonBorderPen;
    [DispIdAttribute("8")]
[SRDescriptionAttribute("WatermarkDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
[EditorAttribute("System.Workflow.ComponentModel.Design.ImageBrowserEditor", "System.Drawing.Design.UITypeEditor")]
public string WatermarkImagePath { get; public set; }
    [DispIdAttribute("9")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("WatermarkAlignmentDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
public DesignerContentAlignment WatermarkAlignment { get; public set; }
    [DefaultValueAttribute("False")]
[DispIdAttribute("10")]
[SRDescriptionAttribute("DropShadowDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("BackgroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
public bool ShowDropShadow { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("11")]
[SRDescriptionAttribute("ConnectorStartCapDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
public LineAnchor ConnectorStartCap { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("12")]
[SRDescriptionAttribute("ConnectorEndCapDesc", "System.Workflow.ComponentModel.Design.DesignerResources")]
[SRCategoryAttribute("ForegroundCategory", "System.Workflow.ComponentModel.Design.DesignerResources")]
public LineAnchor ConnectorEndCap { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Size ConnectorSize { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Size ExpandButtonSize { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Image WatermarkImage { get; }
    public CompositeDesignerTheme(WorkflowTheme theme);
    private static CompositeDesignerTheme();
    protected virtual void Dispose(bool disposing);
    public virtual void Initialize();
    public virtual string get_WatermarkImagePath();
    public virtual void set_WatermarkImagePath(string value);
    public virtual DesignerContentAlignment get_WatermarkAlignment();
    public virtual void set_WatermarkAlignment(DesignerContentAlignment value);
    public virtual bool get_ShowDropShadow();
    public virtual void set_ShowDropShadow(bool value);
    public virtual LineAnchor get_ConnectorStartCap();
    public virtual void set_ConnectorStartCap(LineAnchor value);
    public virtual LineAnchor get_ConnectorEndCap();
    public virtual void set_ConnectorEndCap(LineAnchor value);
    public virtual Size get_ConnectorSize();
    public virtual Size get_ExpandButtonSize();
    public Brush GetExpandButtonBackgroundBrush(Rectangle rectangle);
    public Image get_WatermarkImage();
    public virtual void OnAmbientPropertyChanged(AmbientProperty ambientProperty);
}
internal class System.Workflow.ComponentModel.Design.ConditionTypeConverter : TypeConverter {
    internal static Type RuleConditionReferenceType;
    internal static Type RuleDefinitionsType;
    internal static Type CodeConditionType;
    internal static DependencyProperty DeclarativeConditionDynamicProp;
    private static ConditionTypeConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ConfigErrorGlyph : DesignerGlyph {
    internal static ConfigErrorGlyph Default { get; }
    public bool CanBeActivated { get; }
    public int Priority { get; }
    private static ConfigErrorGlyph();
    internal static ConfigErrorGlyph get_Default();
    public virtual bool get_CanBeActivated();
    public virtual int get_Priority();
    public virtual Rectangle GetBounds(ActivityDesigner designer, bool activated);
    protected virtual void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer);
    protected virtual void OnActivate(ActivityDesigner designer);
}
internal class System.Workflow.ComponentModel.Design.ConnectionManager : WorkflowDesignerMessageFilter {
    internal static Cursor SnappedConnectionCursor;
    internal static Cursor NewConnectorCursor;
    internal ConnectionPoint SnappedConnectionPoint { get; }
    private static ConnectionManager();
    protected virtual void Initialize(WorkflowView parentView);
    protected virtual void Dispose(bool disposing);
    protected virtual bool OnMouseDown(MouseEventArgs eventArgs);
    protected virtual bool OnMouseMove(MouseEventArgs eventArgs);
    protected virtual bool OnMouseEnter(MouseEventArgs eventArgs);
    protected virtual bool OnMouseLeave();
    protected virtual bool OnMouseCaptureChanged();
    protected virtual bool OnMouseUp(MouseEventArgs eventArgs);
    protected virtual bool OnKeyDown(KeyEventArgs eventArgs);
    protected virtual bool OnPaint(PaintEventArgs e, Rectangle viewPort, AmbientTheme ambientTheme);
    internal ConnectionPoint get_SnappedConnectionPoint();
    internal static FreeformActivityDesigner GetConnectorContainer(ActivityDesigner associatedDesigner);
    private sealed virtual override ActivityDesignerGlyphCollection System.Workflow.ComponentModel.Design.IDesignerGlyphProvider.GetGlyphs(ActivityDesigner activityDesigner);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ConnectionPoint : object {
    public ActivityDesigner AssociatedDesigner { get; }
    public int ConnectionIndex { get; }
    public DesignerEdges ConnectionEdge { get; }
    public Point Location { get; }
    public Rectangle Bounds { get; }
    public ConnectionPoint(ActivityDesigner associatedDesigner, DesignerEdges designerEdge, int connectionIndex);
    public ActivityDesigner get_AssociatedDesigner();
    public int get_ConnectionIndex();
    public DesignerEdges get_ConnectionEdge();
    public virtual Point get_Location();
    public virtual Rectangle get_Bounds();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void OnPaint(ActivityDesignerPaintEventArgs e, bool drawHighlighted);
    internal static void Draw(ActivityDesignerPaintEventArgs e, Rectangle bounds);
}
internal class System.Workflow.ComponentModel.Design.ConnectionPointGlyph : DesignerGlyph {
    public int Priority { get; }
    internal ConnectionPointGlyph(ConnectionPoint connectionPoint);
    protected virtual void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer);
    public virtual int get_Priority();
}
internal class System.Workflow.ComponentModel.Design.ConnectionPointHitTestInfo : HitTestInfo {
    internal ConnectionPoint ConnectionPoint { get; }
    internal ConnectionPointHitTestInfo(ConnectionPoint connectionPoint);
    internal ConnectionPoint get_ConnectionPoint();
}
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Design.ConnectorLayoutSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.Connector : object {
    public AccessibleObject AccessibilityObject { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public ConnectionPoint Source { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public ConnectionPoint Target { get; public set; }
    public ReadOnlyCollection`1<Point> ConnectorSegments { get; }
    public Rectangle Bounds { get; }
    public FreeformActivityDesigner ParentDesigner { get; }
    public bool ConnectorModified { get; }
    protected WorkflowView ParentView { get; }
    protected internal ICollection`1<Rectangle> ExcludedRoutingRectangles { get; }
    internal FreeformActivityDesigner RenderingOwner { get; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("2")]
internal string SourceActivity { get; internal set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("2")]
internal int SourceConnectionIndex { get; internal set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("2")]
internal DesignerEdges SourceConnectionEdge { get; internal set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("2")]
internal string TargetActivity { get; internal set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("2")]
internal int TargetConnectionIndex { get; internal set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("2")]
internal DesignerEdges TargetConnectionEdge { get; internal set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("2")]
internal List`1<Point> Segments { get; }
    public Connector(ConnectionPoint source, ConnectionPoint target);
    private sealed virtual override void System.IDisposable.Dispose();
    public virtual AccessibleObject get_AccessibilityObject();
    public ConnectionPoint get_Source();
    public void set_Source(ConnectionPoint value);
    public ConnectionPoint get_Target();
    public void set_Target(ConnectionPoint value);
    public virtual ReadOnlyCollection`1<Point> get_ConnectorSegments();
    public Rectangle get_Bounds();
    public FreeformActivityDesigner get_ParentDesigner();
    public virtual bool HitTest(Point point);
    public virtual void Offset(Size size);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Invalidate();
    public bool get_ConnectorModified();
    protected WorkflowView get_ParentView();
    protected void PerformLayout();
    protected internal virtual ICollection`1<Rectangle> get_ExcludedRoutingRectangles();
    protected internal void SetConnectorSegments(ICollection`1<Point> segments);
    protected internal virtual void OnLayout(ActivityDesignerLayoutEventArgs e);
    protected internal virtual void OnPaint(ActivityDesignerPaintEventArgs e);
    protected internal virtual void OnPaintSelected(ActivityDesignerPaintEventArgs e, bool primarySelection, Point[] segmentEditPoints);
    protected internal virtual void OnPaintEdited(ActivityDesignerPaintEventArgs e, Point[] segments, Point[] segmentEditPoints);
    protected virtual object GetService(Type serviceType);
    internal void SetConnectorModified(bool modified);
    internal FreeformActivityDesigner get_RenderingOwner();
    internal void SetParent(FreeformActivityDesigner parentDesigner);
    internal static Connector GetConnectorFromSelectedObject(object selectedObject);
    internal string get_SourceActivity();
    internal void set_SourceActivity(string value);
    internal int get_SourceConnectionIndex();
    internal void set_SourceConnectionIndex(int value);
    internal DesignerEdges get_SourceConnectionEdge();
    internal void set_SourceConnectionEdge(DesignerEdges value);
    internal string get_TargetActivity();
    internal void set_TargetActivity(string value);
    internal int get_TargetConnectionIndex();
    internal void set_TargetConnectionIndex(int value);
    internal DesignerEdges get_TargetConnectionEdge();
    internal void set_TargetConnectionEdge(DesignerEdges value);
    internal List`1<Point> get_Segments();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ConnectorAccessibleObject : AccessibleObject {
    public Rectangle Bounds { get; }
    public string Name { get; public set; }
    public AccessibleObject Parent { get; }
    public AccessibleRole Role { get; }
    public ConnectorAccessibleObject(Connector connector);
    public virtual Rectangle get_Bounds();
    public virtual AccessibleObject HitTest(int x, int y);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual AccessibleObject get_Parent();
    public virtual AccessibleRole get_Role();
}
internal class System.Workflow.ComponentModel.Design.ConnectorDragDropGlyph : DesignerGlyph {
    public int Priority { get; }
    public ConnectorDragDropGlyph(int connectorIndex, Point connectorCenter);
    public virtual Rectangle GetBounds(ActivityDesigner designer, bool activated);
    protected virtual void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer);
    public virtual int get_Priority();
}
internal class System.Workflow.ComponentModel.Design.ConnectorEditor : object {
    public ConnectionPoint EditedConectionPoint { get; }
    public Connector EditedConnector { get; }
    public ConnectorEditor(Connector connectorEdited);
    public ConnectionPoint get_EditedConectionPoint();
    public Connector get_EditedConnector();
    public Cursor GetCursor(Point cursorPoint);
    public bool OnBeginEditing(Point point);
    public void OnContinueEditing(Point point);
    public void OnEndEditing(Point point, bool commitChanges);
    public bool HitTest(Point point);
    public void OnPaint(ActivityDesignerPaintEventArgs e, bool drawSelected, bool drawPrimarySelection);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ConnectorEventArgs : EventArgs {
    public Connector Connector { get; }
    internal ConnectorEventArgs(Connector connector);
    public Connector get_Connector();
}
public class System.Workflow.ComponentModel.Design.ConnectorEventHandler : MulticastDelegate {
    public ConnectorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ConnectorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ConnectorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ConnectorHitTestInfo : HitTestInfo {
    public Rectangle Bounds { get; }
    public object SelectableObject { get; }
    public ConnectorHitTestInfo(CompositeActivityDesigner compositeActivityDesigner, HitTestLocations flags, int connector);
    public virtual Rectangle get_Bounds();
    public virtual object get_SelectableObject();
    public virtual int MapToIndex();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ConnectorLayoutSerializer : WorkflowMarkupSerializer {
    protected internal virtual PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected virtual object CreateInstance(WorkflowMarkupSerializationManager serializationManager, Type type);
    protected virtual void OnAfterDeserialize(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected Dictionary`2<string, string> GetConnectorConstructionArguments(WorkflowMarkupSerializationManager serializationManager, Type type);
}
internal static class System.Workflow.ComponentModel.Design.ConnectorRouter : object {
    private static ConnectorRouter();
    public static Point[] Route(Point begin, Point end, Size margin, Rectangle enclosingRectangle, Rectangle[] rectanglesToExclude, Point[] linesToExclude, Point[] pointsToExclude);
}
internal abstract class System.Workflow.ComponentModel.Design.ConnectorSelectionGlyph : SelectionGlyph {
    protected int connectorIndex;
    protected bool isPrimarySelectionGlyph;
    public ConnectorSelectionGlyph(int connectorIndex, bool isPrimarySelectionGlyph);
}
internal class System.Workflow.ComponentModel.Design.CustomActivityDesignerAdapter : object {
    public CustomActivityDesignerAdapter(IServiceProvider serviceProvider);
    private sealed virtual override void System.IDisposable.Dispose();
}
internal static class System.Workflow.ComponentModel.Design.CustomActivityDesignerHelper : object {
    public static Type GetCustomActivityType(IServiceProvider serviceProvider);
    public static void SetBaseTypeName(string typeName, IServiceProvider serviceProvider);
    internal static List`1<CustomProperty> GetCustomProperties(IServiceProvider serviceProvider);
    internal static void SetCustomProperties(List`1<CustomProperty> customProperties, IServiceProvider serviceProvider);
}
[ProvidePropertyAttribute("BaseActivityType", "System.Workflow.ComponentModel.Activity")]
internal class System.Workflow.ComponentModel.Design.CustomActivityPropertyExtender : object {
    [DesignerSerializationVisibilityAttribute("0")]
[SRDisplayNameAttribute("BaseActivityType")]
[SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("CustomActivityBaseTypeDesc")]
[EditorAttribute("System.Workflow.ComponentModel.Design.TypeBrowserEditor", "System.Drawing.Design.UITypeEditor")]
[DesignOnlyAttribute("True")]
[TypeFilterProviderAttribute("System.Workflow.ComponentModel.Design.BaseClassTypeFilterProvider")]
[DefaultValueAttribute("System.Workflow.ComponentModel.Sequence")]
public string GetBaseActivityType(Activity activity);
    public void SetBaseActivityType(Activity activity, string baseActivityTypeName);
    private sealed virtual override bool System.ComponentModel.IExtenderProvider.CanExtend(object extendee);
}
internal class System.Workflow.ComponentModel.Design.CustomProperty : object {
    public string oldPropertyName;
    public string oldPropertyType;
    public string Name { get; public set; }
    public string Type { get; public set; }
    public string Description { get; public set; }
    public string Category { get; public set; }
    public bool Browseable { get; public set; }
    public DesignerSerializationVisibility DesignerSerializationVisibility { get; public set; }
    public string UITypeEditor { get; public set; }
    public bool IsEvent { get; public set; }
    public bool Hidden { get; public set; }
    public bool GenerateDependencyProperty { get; public set; }
    public CustomProperty(IServiceProvider serviceProvider);
    public string get_Name();
    public void set_Name(string value);
    public string get_Type();
    public void set_Type(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_Category();
    public void set_Category(string value);
    public bool get_Browseable();
    public void set_Browseable(bool value);
    public DesignerSerializationVisibility get_DesignerSerializationVisibility();
    public void set_DesignerSerializationVisibility(DesignerSerializationVisibility value);
    public string get_UITypeEditor();
    public void set_UITypeEditor(string value);
    public bool get_IsEvent();
    public void set_IsEvent(bool value);
    public bool get_Hidden();
    public void set_Hidden(bool value);
    public bool get_GenerateDependencyProperty();
    public void set_GenerateDependencyProperty(bool value);
    public static CustomProperty CreateCustomProperty(IServiceProvider serviceProvider, string customPropertyName, PropertyDescriptor propertyDescriptor, object propertyOwner);
}
internal static class System.Workflow.ComponentModel.Design.DebuggerHelpers : object {
    internal static Activity ParseActivity(Activity parsingContext, string activityName);
}
internal abstract class System.Workflow.ComponentModel.Design.DefaultWorkflowLayout : WorkflowLayout {
    public static Size Separator;
    public float Scaling { get; }
    public Size Extent { get; }
    public Point RootDesignerAlignment { get; }
    public DefaultWorkflowLayout(IServiceProvider serviceProvider);
    private static DefaultWorkflowLayout();
    public virtual float get_Scaling();
    public virtual Size get_Extent();
    public virtual Point get_RootDesignerAlignment();
    public virtual bool IsCoOrdInLayout(Point logicalCoOrd);
    public virtual Rectangle MapInRectangleToLayout(Rectangle logicalRectangle);
    public virtual Rectangle MapOutRectangleFromLayout(Rectangle logicalRectangle);
    public virtual Point MapInCoOrdToLayout(Point logicalPoint);
    public virtual Point MapOutCoOrdFromLayout(Point logicalPoint);
    public virtual void Update(Graphics graphics, LayoutUpdateReason reason);
    public virtual void OnPaint(PaintEventArgs e, ViewPortData viewPortData);
    public virtual void OnPaintWorkflow(PaintEventArgs e, ViewPortData viewPortData);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.DesignerAction : object {
    public string PropertyName { get; public set; }
    public int ActionId { get; }
    public string Text { get; }
    public Image Image { get; }
    public IDictionary UserData { get; }
    public DesignerAction(ActivityDesigner activityDesigner, int actionId, string text);
    public DesignerAction(ActivityDesigner activityDesigner, int actionId, string text, Image image);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    public int get_ActionId();
    public string get_Text();
    public Image get_Image();
    public IDictionary get_UserData();
    public void Invoke();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.ComponentModel.Design.DesignerContentAlignment : Enum {
    public int value__;
    public static DesignerContentAlignment Left;
    public static DesignerContentAlignment Top;
    public static DesignerContentAlignment Right;
    public static DesignerContentAlignment Bottom;
    public static DesignerContentAlignment Center;
    public static DesignerContentAlignment TopLeft;
    public static DesignerContentAlignment TopCenter;
    public static DesignerContentAlignment TopRight;
    public static DesignerContentAlignment CenterLeft;
    public static DesignerContentAlignment CenterRight;
    public static DesignerContentAlignment BottomLeft;
    public static DesignerContentAlignment BottomCenter;
    public static DesignerContentAlignment BottomRight;
    public static DesignerContentAlignment Fill;
}
[FlagsAttribute]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.ComponentModel.Design.DesignerEdges : Enum {
    public int value__;
    public static DesignerEdges None;
    public static DesignerEdges Left;
    public static DesignerEdges Top;
    public static DesignerEdges Right;
    public static DesignerEdges Bottom;
    public static DesignerEdges All;
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.ComponentModel.Design.DesignerGeometry : Enum {
    public int value__;
    public static DesignerGeometry Rectangle;
    public static DesignerGeometry RoundedRectangle;
}
internal static class System.Workflow.ComponentModel.Design.DesignerGeometryHelper : object {
    internal static DesignerEdges ClosestEdgeToPoint(Point point, Rectangle rect, DesignerEdges edgesToConsider);
    internal static Rectangle RectangleFromLineSegments(Point[] segments);
    internal static bool PointOnLineSegment(Point point, Point[] line, Size hitAreaSize);
    internal static double DistanceFromPointToRectangle(Point point, Rectangle rect);
    internal static double DistanceFromPointToLineSegment(Point point, Point[] line);
    internal static float SlopeOfLineSegment(Point start, Point end);
    internal static double DistanceBetweenPoints(Point point1, Point point2);
    internal static double DistanceOfLineSegments(Point[] segments);
    internal static Point MidPointOfLineSegment(Point point1, Point point2);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.ComponentModel.Design.DesignerGlyph : object {
    public static int HighestPriority;
    public static int NormalPriority;
    public static int LowestPriority;
    internal static int ConnectionPointPriority;
    internal static int MoveAnchorPriority;
    internal static int ConfigErrorPriority;
    internal static int ConnectorDragDropPriority;
    internal static int FadeGlyphPriority;
    internal static int LockedGlyphPriority;
    internal static int ReadOnlyGlyphPriority;
    internal static int CommentPriority;
    internal static int SelectionPriority;
    internal static int NonExecutionStatePriority;
    public bool CanBeActivated { get; }
    public int Priority { get; }
    public virtual bool get_CanBeActivated();
    public virtual int get_Priority();
    public virtual Rectangle GetBounds(ActivityDesigner designer, bool activated);
    protected abstract virtual void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer);
    protected virtual void OnActivate(ActivityDesigner designer);
    internal void DrawActivated(Graphics graphics, ActivityDesigner designer);
    internal void Draw(Graphics graphics, ActivityDesigner designer);
    internal void Activate(ActivityDesigner designer);
    internal static int OnComparePriority(DesignerGlyph x, DesignerGlyph y);
}
internal static class System.Workflow.ComponentModel.Design.DesignerHelpers : object {
    internal static string DeclarativeRulesRef;
    internal static string SequentialWorkflowTypeRef;
    internal static string StateMachineWorkflowTypeRef;
    internal static string EventHandlersTypeRef;
    internal static string IfElseBranchTypeRef;
    internal static string CodeActivityTypeRef;
    internal static string DesignerPerUserRegistryKey { get; }
    private static DesignerHelpers();
    internal static Point SnapToGrid(Point location);
    internal static string get_DesignerPerUserRegistryKey();
    internal static bool AreAssociatedDesignersMovable(ICollection components);
    internal static Activity GetNextSelectableActivity(Activity currentActivity);
    internal static void SerializeDesignerStates(IDesignerHost designerHost, BinaryWriter writer);
    internal static bool DeserializeDesignerStates(IDesignerHost designerHost, BinaryReader reader);
    internal static void MakePropertiesReadOnly(IServiceProvider serviceProvider, object topComponent);
    internal static void UpdateSiteName(Activity activity, string newID);
    internal static DialogResult ShowMessage(IServiceProvider serviceProvider, string message, string title, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton);
    internal static void ShowHelpFromKeyword(IServiceProvider serviceProvider, string helpKeyword);
    internal static void ShowError(IServiceProvider serviceProvider, string message);
    internal static void ShowError(IServiceProvider serviceProvider, Exception e);
    internal static bool IsValidImageResource(DesignerTheme designerTheme, string directory, string path);
    internal static string GetRelativePath(string pathFrom, string pathTo);
    internal static Image GetImageFromPath(DesignerTheme designerTheme, string directory, string path);
    internal static DesignerVerb[] GetDesignerActionVerbs(ActivityDesigner designer, ReadOnlyCollection`1<DesignerAction> designerActions);
    internal static void ShowDesignerVerbs(ActivityDesigner designer, Point location, ICollection`1<DesignerVerb> designerVerbs);
    internal static string CreateUniqueMethodName(IComponent component, string propName, Type delegateType);
    internal static string GenerateUniqueIdentifier(IServiceProvider serviceProvider, string baseIdentifier, String[] existingNames);
    internal static IDictionary`2<string, string> GetDeclarativeRules(Activity activity);
    internal static void RefreshDesignerActions(IServiceProvider serviceProvider);
    internal static bool AreComponentsRemovable(ICollection components);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.ComponentModel.Design.DesignerNavigationDirection : Enum {
    public int value__;
    public static DesignerNavigationDirection Down;
    public static DesignerNavigationDirection Up;
    public static DesignerNavigationDirection Left;
    public static DesignerNavigationDirection Right;
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.ComponentModel.Design.DesignerSize : Enum {
    public int value__;
    public static DesignerSize Small;
    public static DesignerSize Medium;
    public static DesignerSize Large;
}
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Design.DesignerTheme/ThemeSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.ThemeTypeConverter")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.ComponentModel.Design.DesignerTheme : object {
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
protected WorkflowTheme ContainingTheme { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Type DesignerType { get; public set; }
    [BrowsableAttribute("False")]
public string ApplyTo { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool ReadOnly { get; internal set; }
    protected DesignerTheme(WorkflowTheme theme);
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    public virtual void Initialize();
    protected virtual void Dispose(bool disposing);
    protected WorkflowTheme get_ContainingTheme();
    public virtual Type get_DesignerType();
    public virtual void set_DesignerType(Type value);
    public virtual string get_ApplyTo();
    public virtual void set_ApplyTo(string value);
    public virtual void OnAmbientPropertyChanged(AmbientProperty ambientProperty);
    public bool get_ReadOnly();
    internal void set_ReadOnly(bool value);
    private sealed virtual override ICollection System.Workflow.ComponentModel.Design.IPropertyValueProvider.GetPropertyValues(ITypeDescriptorContext context);
    internal virtual ICollection GetPropertyValues(ITypeDescriptorContext context);
}
internal static class System.Workflow.ComponentModel.Design.DesignerUserDataKeys : object {
    internal static Guid DesignerAction;
    internal static Guid DesignerVerb;
    internal static Guid Image;
    internal static Guid ViewActivity;
    internal static Guid PreviewActivity;
    internal static Guid DesignerView;
    internal static Guid TemplateActivityIndex;
    internal static Guid MoveBranchKey;
    internal static Guid Designer;
    internal static Guid Activity;
    internal static Guid ZOrderKey;
    private static DesignerUserDataKeys();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.ComponentModel.Design.DesignerVerbGroup : Enum {
    public int value__;
    public static DesignerVerbGroup General;
    public static DesignerVerbGroup View;
    public static DesignerVerbGroup Edit;
    public static DesignerVerbGroup Options;
    public static DesignerVerbGroup Actions;
    public static DesignerVerbGroup Misc;
}
internal class System.Workflow.ComponentModel.Design.DesignerVerbProviderService : object {
    private ReadOnlyCollection`1<IDesignerVerbProvider> System.Workflow.ComponentModel.Design.IDesignerVerbProviderService.VerbProviders { get; }
    private sealed virtual override void System.Workflow.ComponentModel.Design.IDesignerVerbProviderService.AddVerbProvider(IDesignerVerbProvider verbProvider);
    private sealed virtual override void System.Workflow.ComponentModel.Design.IDesignerVerbProviderService.RemoveVerbProvider(IDesignerVerbProvider verbProvider);
    private sealed virtual override ReadOnlyCollection`1<IDesignerVerbProvider> System.Workflow.ComponentModel.Design.IDesignerVerbProviderService.get_VerbProviders();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.DesignerView : object {
    public int ViewId { get; }
    public string Text { get; }
    public Image Image { get; }
    public IDictionary UserData { get; }
    public ActivityDesigner AssociatedDesigner { get; }
    public DesignerView(int viewId, string text, Image image);
    public DesignerView(int viewId, string text, Image image, ActivityDesigner associatedDesigner);
    private static DesignerView();
    public int get_ViewId();
    public string get_Text();
    public Image get_Image();
    public IDictionary get_UserData();
    public virtual ActivityDesigner get_AssociatedDesigner();
    public virtual void OnActivate();
    public virtual void OnDeactivate();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class System.Workflow.ComponentModel.Design.DR : object {
    internal static string ResourceSet;
    internal static string ViewPreviousActivity;
    internal static string ViewNextActivity;
    internal static string PreviewActivity;
    internal static string EditActivity;
    internal static string GenerateEventHandlers;
    internal static string PromoteBindings;
    internal static string BindSelectedProperty;
    internal static string BindSelectedPropertyFormat;
    internal static string BindProperty;
    internal static string PackageFileInvalid;
    internal static string PackageFileInvalidChars;
    internal static string PackageFileDefault;
    internal static string PackageInvalidValidatorType;
    internal static string PackageFileExist;
    internal static string OpenfileDialogTitle;
    internal static string PackageAssemblyReferenceFilter;
    internal static string CreatePackageTitle;
    internal static string ActivitySetDefaultName;
    internal static string ActivitySetNoName;
    internal static string ActivitySetNoActivity;
    internal static string ModifyPackageTitle;
    internal static string ViewPackageTitle;
    internal static string ErrorInitPackage;
    internal static string CheckAll;
    internal static string NoHelpAvailable;
    internal static string ActivitySetDefaultFileName;
    internal static string TypeInvalid;
    internal static string FilterDescription;
    internal static string Zoom400Mode;
    internal static string Zoom300Mode;
    internal static string Zoom200Mode;
    internal static string Zoom150Mode;
    internal static string Zoom100Mode;
    internal static string Zoom75Mode;
    internal static string Zoom50Mode;
    internal static string ZoomShowAll;
    internal static string ActivityInsertError;
    internal static string InvalidOperationBadClipboardFormat;
    internal static string ArgumentExceptionDesignerVerbIdsRange;
    internal static string InvalidOperationStoreAlreadyClosed;
    internal static string InvalidOperationDeserializationReturnedNonActivity;
    internal static string AccessibleAction;
    internal static string LeftScrollButtonAccessibleDescription;
    internal static string RightScrollButtonAccessibleDescription;
    internal static string ActivityDesignerAccessibleDescription;
    internal static string LeftScrollButtonAccessibleHelp;
    internal static string RightScrollButtonAccessibleHelp;
    internal static string ActivityDesignerAccessibleHelp;
    internal static string LeftScrollButtonName;
    internal static string RightScrollButtonName;
    internal static string SelectActivityDesc;
    internal static string PreviewMode;
    internal static string EditMode;
    internal static string PreviewButtonAccessibleDescription;
    internal static string PreviewButtonAccessibleHelp;
    internal static string PreviewButtonName;
    internal static string CancelDescriptionString;
    internal static string HeaderFooterStringNone;
    internal static string HeaderFooterStringCustom;
    internal static string HeaderFooterFormat1;
    internal static string HeaderFooterFormat2;
    internal static string HeaderFooterFormat3;
    internal static string HeaderFooterFormat4;
    internal static string HeaderFooterFormat5;
    internal static string HeaderFooterFormat6;
    internal static string HeaderFooterFormat7;
    internal static string HeaderFooterFormat8;
    internal static string HeaderFooterFormat9;
    internal static string EnteredMarginsAreNotValidErrorMessage;
    internal static string ChildActivitiesNotConfigured;
    internal static string ConnectorAccessibleDescription;
    internal static string ConnectorAccessibleHelp;
    internal static string ConnectorDesc;
    internal static string WorkflowDesc;
    internal static string AddBranch;
    internal static string DropActivitiesHere;
    internal static string DesignerNotInitialized;
    internal static string MyFavoriteTheme;
    internal static string AmbientThemeException;
    internal static string ThemeTypesMismatch;
    internal static string DesignerThemeException;
    internal static string CustomStyleNotSupported;
    internal static string EmptyFontFamilyNotSupported;
    internal static string FontFamilyNotSupported;
    internal static string ContentAlignmentNotSupported;
    internal static string ZoomLevelException2;
    internal static string ShadowDepthException;
    internal static string ThereIsNoPrinterInstalledErrorMessage;
    internal static string WorkflowViewAccessibleDescription;
    internal static string WorkflowViewAccessibleHelp;
    internal static string WorkflowViewAccessibleName;
    internal static string SelectedPrinterIsInvalidErrorMessage;
    internal static string ObjectDoesNotSupportIPropertyValuesProvider;
    internal static string ThemeFileFilter;
    internal static string ThemeConfig;
    internal static string ThemeNameNotValid;
    internal static string ThemePathNotValid;
    internal static string ThemeFileNotXml;
    internal static string UpdateRelativePaths;
    internal static string ThemeDescription;
    internal static string ThemeFileCreationError;
    internal static string Preview;
    internal static string ArgumentExceptionSmartActionIdsRange;
    internal static string ActivitiesDesc;
    internal static string MoveLeftDesc;
    internal static string MoveRightDesc;
    internal static string DropExceptionsHere;
    internal static string SpecifyTargetWorkflow;
    internal static string ServiceHelpText;
    internal static string StartWorkFlow;
    internal static string Complete;
    internal static string ServiceExceptions;
    internal static string ServiceEvents;
    internal static string ServiceCompensation;
    internal static string ScopeDesc;
    internal static string EventsDesc;
    internal static string InvokeWebServiceDisplayName;
    internal static string InvalidClassNameIdentifier;
    internal static string InvalidBaseTypeOfCompanion;
    internal static string Error_InvalidActivity;
    internal static string Error_MultiviewSequentialActivityDesigner;
    internal static string AddingBranch;
    internal static string WorkflowPrintDocumentNotFound;
    internal static string DefaultTheme;
    internal static string DefaultThemeDescription;
    internal static string OSTheme;
    internal static string SystemThemeDescription;
    internal static string ActivitySetMessageBoxTitle;
    internal static string ViewExceptions;
    internal static string ViewEvents;
    internal static string ViewCompensation;
    internal static string ViewCancelHandler;
    internal static string ViewActivity;
    internal static string ThemeMessageBoxTitle;
    internal static string InfoTipTitle;
    internal static string InfoTipId;
    internal static string InfoTipDescription;
    internal static string TypeBrowser_ProblemsLoadingAssembly;
    internal static string TypeBrowser_UnableToLoadOneOrMoreTypes;
    internal static string StartWorkflow;
    internal static string EndWorkflow;
    internal static string Error_FailedToDeserializeComponents;
    internal static string Error_Reason;
    internal static string WorkflowDesignerTitle;
    internal static string RuleName;
    internal static string RuleExpression;
    internal static string DeclarativeRules;
    internal static string Error_ThemeAttributeMissing;
    internal static string Error_ThemeTypeMissing;
    internal static string Error_ThemeTypesMismatch;
    internal static string ZOrderUndoDescription;
    internal static string SendToBack;
    internal static string BringToFront;
    internal static string ResizeUndoDescription;
    internal static string FitToScreenDescription;
    internal static string FitToWorkflowDescription;
    internal static string BMPImageFormat;
    internal static string JPEGImageFormat;
    internal static string PNGImageFormat;
    internal static string TIFFImageFormat;
    internal static string WMFImageFormat;
    internal static string EXIFImageFormat;
    internal static string EMFImageFormat;
    internal static string CustomEventType;
    internal static string CustomPropertyType;
    internal static string SaveWorkflowImageDialogTitle;
    internal static string ImageFileFilter;
    internal static string Rules;
    internal static string More;
    internal static string Empty;
    internal static string InvalidDockingStyle;
    internal static string ButtonInformationMissing;
    internal static string InvalidDesignerSpecified;
    internal static string WorkflowViewNull;
    internal static string Error_AddConnector1;
    internal static string Error_AddConnector2;
    internal static string Error_AddConnector3;
    internal static string Error_ConnectionPoint;
    internal static string Error_Connector1;
    internal static string Error_Connector2;
    internal static string Error_WorkflowNotLoaded;
    internal static string Error_InvalidImageResource;
    internal static string ThemePropertyReadOnly;
    internal static string Error_TabExistsWithSameId;
    internal static string Error_WorkflowLayoutNull;
    internal static string BuildTargetWorkflow;
    internal static string Activity;
    internal static string MoveLeft;
    internal static string MoveLeftUp;
    internal static string MoveRight;
    internal static string MoveRightUp;
    internal static string PreviewModeIcon;
    internal static string EditModeIcon;
    internal static string PreviewIndicator;
    internal static string ReadOnly;
    internal static string ConfigError;
    internal static string SmartTag;
    internal static string ArrowLeft;
    internal static string DropShapeShort;
    internal static string FitToWorkflow;
    internal static string MoveAnchor;
    internal static string Activities;
    internal static string Compensation;
    internal static string SequenceArrow;
    internal static string Exception;
    internal static string Event;
    internal static string Start;
    internal static string End;
    internal static string FitToScreen;
    internal static string Bind;
    private static DR();
    internal static string GetString(string resID, Object[] args);
    internal static string GetString(CultureInfo culture, string resID, Object[] args);
    internal static Image GetImage(string resID);
}
internal class System.Workflow.ComponentModel.Design.DragDropManager : WorkflowDesignerMessageFilter {
    public ActivityDesigner DropTargetDesigner { get; }
    public ActivityDesigner DraggedDesigner { get; }
    public IList`1<Activity> DraggedActivities { get; }
    public Point DragInitiationPoint { get; }
    protected virtual void Initialize(WorkflowView parentView);
    protected virtual void Dispose(bool disposing);
    protected virtual bool OnMouseDown(MouseEventArgs eventArgs);
    protected virtual bool OnMouseMove(MouseEventArgs eventArgs);
    protected virtual bool OnMouseUp(MouseEventArgs eventArgs);
    protected virtual bool OnMouseEnter(MouseEventArgs eventArgs);
    protected virtual bool OnMouseHover(MouseEventArgs eventArgs);
    protected virtual bool OnMouseLeave();
    protected virtual bool OnMouseCaptureChanged();
    protected virtual bool OnKeyDown(KeyEventArgs eventArgs);
    protected virtual bool OnKeyUp(KeyEventArgs eventArgs);
    protected virtual bool OnDragEnter(DragEventArgs eventArgs);
    protected virtual bool OnDragOver(DragEventArgs eventArgs);
    protected virtual bool OnDragDrop(DragEventArgs eventArgs);
    protected virtual bool OnDragLeave();
    protected virtual bool OnGiveFeedback(GiveFeedbackEventArgs gfbevent);
    protected virtual bool OnQueryContinueDrag(QueryContinueDragEventArgs qcdevent);
    protected virtual bool OnPaintWorkflowAdornments(PaintEventArgs e, Rectangle viewPort, AmbientTheme ambientTheme);
    public ActivityDesigner get_DropTargetDesigner();
    public ActivityDesigner get_DraggedDesigner();
    public IList`1<Activity> get_DraggedActivities();
    public Point get_DragInitiationPoint();
    protected virtual void CreateDragFeedbackImages(IList`1<Activity> draggedActivities);
    protected virtual void DestroyDragFeedbackImages();
    internal bool IsValidDropContext(HitTestInfo dropLocation);
}
internal class System.Workflow.ComponentModel.Design.DragRectangleMessageFilter : WorkflowDesignerMessageFilter {
    internal Rectangle DragRectangle { get; }
    protected bool DragStarted { get; protected set; }
    [CompilerGeneratedAttribute]
internal void add_DragComplete(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_DragComplete(EventHandler value);
    protected virtual void Dispose(bool disposing);
    protected virtual bool OnMouseCaptureChanged();
    protected virtual bool OnMouseDown(MouseEventArgs eventArgs);
    protected virtual bool OnMouseMove(MouseEventArgs eventArgs);
    protected virtual bool OnMouseUp(MouseEventArgs eventArgs);
    protected virtual bool OnKeyDown(KeyEventArgs eventArgs);
    protected virtual bool OnPaint(PaintEventArgs e, Rectangle viewPort, AmbientTheme ambientTheme);
    internal Rectangle get_DragRectangle();
    protected bool get_DragStarted();
    protected void set_DragStarted(bool value);
}
internal class System.Workflow.ComponentModel.Design.DragSelectionMessageFilter : DragRectangleMessageFilter {
    protected virtual bool OnMouseDown(MouseEventArgs eventArgs);
    protected virtual bool OnMouseMove(MouseEventArgs eventArgs);
    protected virtual bool OnMouseUp(MouseEventArgs eventArgs);
    protected virtual bool OnKeyUp(KeyEventArgs eventArgs);
}
internal class System.Workflow.ComponentModel.Design.DummyTypeDescriptorContext : object {
    public IContainer Container { get; }
    public object Instance { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public DummyTypeDescriptorContext(IServiceProvider serviceProvider, object component, PropertyDescriptor propDescriptor);
    public sealed virtual IContainer get_Container();
    public sealed virtual object get_Instance();
    public sealed virtual PropertyDescriptor get_PropertyDescriptor();
    public sealed virtual void OnComponentChanged();
    public sealed virtual bool OnComponentChanging();
    public sealed virtual object GetService(Type serviceType);
}
internal class System.Workflow.ComponentModel.Design.DynamicAction : object {
    internal IList`1<ActionButton> Buttons { get; }
    internal Size DockMargin { get; internal set; }
    internal ActionTypes ActionType { get; }
    internal ButtonSizes ButtonSize { get; internal set; }
    internal DesignerContentAlignment DockAlignment { get; internal set; }
    internal float Transparency { get; internal set; }
    internal Rectangle Bounds { get; }
    private static DynamicAction();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal IList`1<ActionButton> get_Buttons();
    internal Size get_DockMargin();
    internal void set_DockMargin(Size value);
    internal ActionTypes get_ActionType();
    internal ButtonSizes get_ButtonSize();
    internal void set_ButtonSize(ButtonSizes value);
    internal DesignerContentAlignment get_DockAlignment();
    internal void set_DockAlignment(DesignerContentAlignment value);
    internal float get_Transparency();
    internal void set_Transparency(float value);
    internal void Draw(Graphics graphics);
    internal Rectangle get_Bounds();
    internal Rectangle GetButtonBounds(int buttonIndex);
}
internal class System.Workflow.ComponentModel.Design.DynamicActionMessageFilter : WorkflowDesignerMessageFilter {
    internal void AddAction(DynamicAction action);
    internal bool ActionExists(DynamicAction action);
    internal void RemoveAction(DynamicAction action);
    internal void RefreshAction(DynamicAction action);
    protected virtual void Initialize(WorkflowView parentView);
    protected virtual void Dispose(bool disposing);
    protected virtual bool OnMouseEnter(MouseEventArgs eventArgs);
    protected virtual bool OnMouseDown(MouseEventArgs eventArgs);
    protected virtual bool OnMouseMove(MouseEventArgs eventArgs);
    protected virtual bool OnMouseDoubleClick(MouseEventArgs eventArgs);
    protected virtual bool OnMouseUp(MouseEventArgs eventArgs);
    protected virtual bool OnMouseLeave();
    protected virtual bool OnMouseCaptureChanged();
    protected virtual bool OnPaintWorkflowAdornments(PaintEventArgs e, Rectangle viewPort, AmbientTheme ambientTheme);
}
internal class System.Workflow.ComponentModel.Design.DynamicPropertyDescriptor : PropertyDescriptor {
    public IServiceProvider ServiceProvider { get; }
    public PropertyDescriptor RealPropertyDescriptor { get; }
    public string Category { get; }
    public AttributeCollection Attributes { get; }
    public TypeConverter Converter { get; }
    public string Description { get; }
    public string DisplayName { get; }
    public Type ComponentType { get; }
    public Type PropertyType { get; }
    public bool IsReadOnly { get; }
    public DynamicPropertyDescriptor(IServiceProvider serviceProvider, PropertyDescriptor descriptor);
    public IServiceProvider get_ServiceProvider();
    public PropertyDescriptor get_RealPropertyDescriptor();
    public virtual string get_Category();
    public virtual AttributeCollection get_Attributes();
    public virtual TypeConverter get_Converter();
    public virtual string get_Description();
    public virtual string get_DisplayName();
    public virtual Type get_ComponentType();
    public virtual Type get_PropertyType();
    public virtual bool get_IsReadOnly();
    public virtual void ResetValue(object component);
    public virtual bool CanResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
}
internal static class System.Workflow.ComponentModel.Design.ExtenderHelpers : object {
    internal static void FilterDependencyProperties(IServiceProvider serviceProvider, Activity activity);
}
[ActivityDesignerThemeAttribute("System.Workflow.ComponentModel.Design.FaultHandlerActivityDesignerTheme")]
internal class System.Workflow.ComponentModel.Design.FaultHandlerActivityDesigner : SequentialActivityDesigner {
    public ReadOnlyCollection`1<DesignerView> Views { get; }
    public bool CanExpandCollapse { get; }
    protected virtual void PreFilterProperties(IDictionary properties);
    public virtual ReadOnlyCollection`1<DesignerView> get_Views();
    public virtual bool get_CanExpandCollapse();
    protected virtual void OnActivityChanged(ActivityChangedEventArgs e);
    public virtual bool CanBeParentedTo(CompositeActivityDesigner parentActivityDesigner);
}
internal class System.Workflow.ComponentModel.Design.FaultHandlerActivityDesignerTheme : CompositeDesignerTheme {
    public FaultHandlerActivityDesignerTheme(WorkflowTheme theme);
}
[ActivityDesignerThemeAttribute("System.Workflow.ComponentModel.Design.FaultHandlersActivityDesignerTheme")]
internal class System.Workflow.ComponentModel.Design.FaultHandlersActivityDesigner : ActivityPreviewDesigner {
    public ReadOnlyCollection`1<DesignerView> Views { get; }
    public bool CanExpandCollapse { get; }
    public object FirstSelectableObject { get; }
    public object LastSelectableObject { get; }
    protected virtual void Initialize(Activity activity);
    public virtual ReadOnlyCollection`1<DesignerView> get_Views();
    public virtual bool get_CanExpandCollapse();
    public virtual bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert);
    public virtual object get_FirstSelectableObject();
    public virtual object get_LastSelectableObject();
}
internal class System.Workflow.ComponentModel.Design.FaultHandlersActivityDesignerTheme : ActivityPreviewDesignerTheme {
    public FaultHandlersActivityDesignerTheme(WorkflowTheme theme);
}
internal class System.Workflow.ComponentModel.Design.FilteredEnumConverter : PropertyValueProviderTypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class System.Workflow.ComponentModel.Design.FontFamilyConverter : TypeConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Design.FreeformActivityDesignerLayoutSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.FreeformActivityDesigner : CompositeActivityDesigner {
    internal static Size DefaultAutoSizeMargin;
    public AccessibleObject AccessibilityObject { get; }
    [DefaultValueAttribute("True")]
public bool AutoSize { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AutoSizeMode AutoSizeMode { get; public set; }
    public Size AutoSizeMargin { get; public set; }
    [DefaultValueAttribute("True")]
public bool EnableUserDrawnConnectors { get; public set; }
    public bool CanExpandCollapse { get; }
    public object FirstSelectableObject { get; }
    public object LastSelectableObject { get; }
    public Size MinimumSize { get; }
    public Point Location { get; public set; }
    public ReadOnlyCollection`1<Connector> Connectors { get; }
    protected bool ShowConnectorsInForeground { get; }
    protected internal bool EnableVisualResizing { get; }
    protected internal ActivityDesignerGlyphCollection Glyphs { get; }
    internal WorkflowLayout SupportedLayout { get; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("2")]
internal List`1<Connector> DesignerConnectors { get; }
    private static FreeformActivityDesigner();
    [CompilerGeneratedAttribute]
public void add_ConnectorAdded(ConnectorEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ConnectorAdded(ConnectorEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ConnectorChanged(ConnectorEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ConnectorChanged(ConnectorEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ConnectorRemoved(ConnectorEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ConnectorRemoved(ConnectorEventHandler value);
    public virtual AccessibleObject get_AccessibilityObject();
    public bool get_AutoSize();
    public void set_AutoSize(bool value);
    public AutoSizeMode get_AutoSizeMode();
    public void set_AutoSizeMode(AutoSizeMode value);
    public Size get_AutoSizeMargin();
    public void set_AutoSizeMargin(Size value);
    public bool get_EnableUserDrawnConnectors();
    public void set_EnableUserDrawnConnectors(bool value);
    public virtual bool get_CanExpandCollapse();
    public virtual object get_FirstSelectableObject();
    public virtual object get_LastSelectableObject();
    public virtual Size get_MinimumSize();
    public virtual Point get_Location();
    public virtual void set_Location(Point value);
    public ReadOnlyCollection`1<Connector> get_Connectors();
    protected virtual bool get_ShowConnectorsInForeground();
    protected internal virtual bool get_EnableVisualResizing();
    protected internal virtual ActivityDesignerGlyphCollection get_Glyphs();
    internal virtual WorkflowLayout get_SupportedLayout();
    internal List`1<Connector> get_DesignerConnectors();
    public Connector AddConnector(ConnectionPoint source, ConnectionPoint target);
    public void RemoveConnector(Connector connector);
    public void SendToBack(ActivityDesigner containedDesigner);
    public void BringToFront(ActivityDesigner containedDesigner);
    public void MoveContainedDesigner(ActivityDesigner containedDesigner, Point newLocation);
    public void ResizeContainedDesigner(ActivityDesigner containedDesigner, Size newSize);
    public virtual HitTestInfo HitTest(Point point);
    public virtual void MoveActivities(HitTestInfo moveLocation, ReadOnlyCollection`1<Activity> activitiesToMove);
    public virtual object GetNextSelectableObject(object current, DesignerNavigationDirection navigate);
    protected virtual void Initialize(Activity activity);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnContainedActivitiesChanging(ActivityCollectionChangeEventArgs listChangeArgs);
    protected internal virtual Connector CreateConnector(ConnectionPoint source, ConnectionPoint target);
    protected internal virtual bool CanConnectContainedDesigners(ConnectionPoint source, ConnectionPoint target);
    protected internal virtual void OnContainedDesignersConnected(ConnectionPoint source, ConnectionPoint target);
    protected internal virtual bool CanResizeContainedDesigner(ActivityDesigner containedDesigner);
    protected virtual void OnConnectorAdded(ConnectorEventArgs e);
    protected internal virtual void OnConnectorChanged(ConnectorEventArgs e);
    protected virtual void OnConnectorRemoved(ConnectorEventArgs e);
    protected virtual void OnLayoutPosition(ActivityDesignerLayoutEventArgs e);
    protected virtual Size OnLayoutSize(ActivityDesignerLayoutEventArgs e);
    protected virtual void OnThemeChange(ActivityDesignerTheme newTheme);
    protected virtual void OnDragOver(ActivityDragEventArgs e);
    protected virtual void OnDragDrop(ActivityDragEventArgs e);
    public virtual void InsertActivities(HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert);
    protected virtual void OnResizing(ActivityDesignerResizeEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    internal static void SetDesignerBounds(ActivityDesigner designer, Rectangle bounds);
    internal virtual void OnPaintContainedDesigners(ActivityDesignerPaintEventArgs e);
    internal bool CanUpdateZOrder(ActivityDesigner activityDesigner, ZOrder zorder);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.FreeformActivityDesignerLayoutSerializer : CompositeActivityDesignerLayoutSerializer {
    protected internal virtual PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj);
}
internal class System.Workflow.ComponentModel.Design.FreeFormDesignerVerbProvider : object {
    private sealed virtual override ActivityDesignerVerbCollection System.Workflow.ComponentModel.Design.IDesignerVerbProvider.GetVerbs(ActivityDesigner activityDesigner);
}
internal class System.Workflow.ComponentModel.Design.FreeFormDragDropManager : DragDropManager {
    private static FreeFormDragDropManager();
    protected virtual bool OnDragEnter(DragEventArgs eventArgs);
    protected virtual bool OnDragOver(DragEventArgs eventArgs);
    protected virtual bool OnGiveFeedback(GiveFeedbackEventArgs gfbevent);
    protected virtual bool OnMouseMove(MouseEventArgs eventArgs);
    protected virtual bool OnMouseLeave();
    protected virtual bool OnScroll(ScrollBar sender, int value);
    protected virtual bool OnPaintWorkflowAdornments(PaintEventArgs eventArgs, Rectangle viewPort, AmbientTheme ambientTheme);
    protected virtual bool OnPaint(PaintEventArgs eventArgs, Rectangle viewPort, AmbientTheme ambientTheme);
    protected virtual void CreateDragFeedbackImages(IList`1<Activity> draggedActivities);
    protected virtual void DestroyDragFeedbackImages();
    internal static Point[] GetDesignerLocations(Point startPoint, Point endPoint, ICollection`1<Activity> activitiesToMove);
}
internal class System.Workflow.ComponentModel.Design.GlyphManager : WorkflowDesignerMessageFilter {
    private ReadOnlyCollection`1<IDesignerGlyphProvider> System.Workflow.ComponentModel.Design.IDesignerGlyphProviderService.GlyphProviders { get; }
    protected virtual void Dispose(bool disposing);
    protected virtual void Initialize(WorkflowView parentView);
    protected virtual bool OnMouseDown(MouseEventArgs eventArgs);
    protected virtual bool OnMouseDoubleClick(MouseEventArgs eventArgs);
    protected virtual bool OnMouseMove(MouseEventArgs eventArgs);
    protected virtual bool OnMouseEnter(MouseEventArgs eventArgs);
    protected virtual bool OnMouseHover(MouseEventArgs eventArgs);
    private sealed virtual override void System.Workflow.ComponentModel.Design.IDesignerGlyphProviderService.AddGlyphProvider(IDesignerGlyphProvider glyphProvider);
    private sealed virtual override void System.Workflow.ComponentModel.Design.IDesignerGlyphProviderService.RemoveGlyphProvider(IDesignerGlyphProvider glyphProvider);
    private sealed virtual override ReadOnlyCollection`1<IDesignerGlyphProvider> System.Workflow.ComponentModel.Design.IDesignerGlyphProviderService.get_GlyphProviders();
    internal void DrawDesignerGlyphs(ActivityDesignerPaintEventArgs e, ActivityDesigner designer);
    internal ActivityDesignerGlyphCollection GetDesignerGlyphs(ActivityDesigner designer);
}
internal static class System.Workflow.ComponentModel.Design.Helpers : object {
    internal static string ProductRootRegKey;
    internal static string ProductInstallDirectory;
    internal static string ProductSDKInstallDirectory;
    internal static string TypeProviderAssemblyRegValueName;
    internal static string ProductInstallDirectory30;
    internal static int FILENAME_MAX;
    internal static string PerUserRegistryKey { get; }
    private static Helpers();
    internal static string get_PerUserRegistryKey();
    internal static bool IsFileNameValid(string fileName);
    internal static bool AreAllActivities(ICollection c);
    internal static IDictionary PairUpCommonParentActivities(ICollection activities);
    internal static Activity[] GetTopLevelActivities(ICollection activities);
    internal static Activity[] GetNestedActivities(CompositeActivity compositeActivity);
    internal static IList GetIdentifiersInCompositeActivity(CompositeActivity compositeActivity);
    internal static Activity[] GetAllNestedActivities(CompositeActivity compositeActivity);
    internal static string MergeNamespaces(string primaryNs, string secondaryNs);
    internal static Activity GetRootActivity(Activity activity);
    internal static Stream SerializeDesignersToStream(ICollection activities);
    internal static void DeserializeDesignersFromStream(ICollection activities, Stream stateStream);
    internal static string GetBaseIdentifier(Activity activity);
    internal static string GetRootNamespace(IServiceProvider serviceProvider);
    internal static Type GetDataSourceClass(Activity activity, IServiceProvider serviceProvider);
    internal static Activity GetDataSourceActivity(Activity activity, string inputName, String& name);
    internal static void GetNamespaceAndClassName(string fullQualifiedName, String& namespaceName, String& className);
    internal static CodeTypeDeclaration GetCodeNamespaceAndClass(CodeNamespaceCollection namespaces, string namespaceName, string className, CodeNamespace& codeNamespace);
    internal static string GetClassName(string fullQualifiedName);
    internal static Type GetBaseType(PropertyInfo property, object owner, IServiceProvider serviceProvider);
    internal static AccessTypes GetAccessType(PropertyInfo property, object owner, IServiceProvider serviceProvider);
    internal static bool IsChildActivity(CompositeActivity parent, Activity activity);
    internal static bool TypesEqual(CodeTypeReference typeLeft, Type typeRight);
    internal static bool TypesEqual(CodeTypeReference typeLeft, CodeTypeReference typeRight);
    internal static DesignerSerializationVisibility GetSerializationVisibility(MemberInfo memberInfo);
    internal static MethodInfo GetMethodExactMatch(Type type, string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
    internal static T GetAttributeFromObject(object attributeObject);
    internal static Type GetDelegateFromEvent(EventInfo eventInfo);
    internal static void AddTypeProviderAssembliesFromRegistry(TypeProvider typeProvider, IServiceProvider serviceProvider);
    internal static void UpdateTypeProviderAssembliesRegistry(string assemblyName);
    internal static CompositeActivity GetDeclaringActivity(Activity activity);
    internal static bool IsActivityLocked(Activity activity);
    internal static Activity GetEnclosingActivity(Activity activity);
    public static IList`1<Activity> GetAllEnabledActivities(CompositeActivity compositeActivity);
    public static bool IsFrameworkActivity(Activity activity);
    internal static MethodInfo GetInterfaceMethod(Type interfaceType, string methodName);
    internal static XmlWriter CreateXmlWriter(object output);
    internal static string GetDesignTimeTypeName(object owner, object key);
    internal static void SetDesignTimeTypeName(object owner, object key, string value);
    internal static bool IsCustomActivity(CompositeActivity compositeActivity);
    internal static Activity ParseActivity(Activity parsingContext, string activityName);
    internal static Activity ParseActivityForBind(Activity context, string activityName);
    internal static bool IsAlternateFlowActivity(Activity activity);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.HitTestInfo : object {
    public static HitTestInfo Nowhere { get; }
    [BrowsableAttribute("False")]
public ActivityDesigner AssociatedDesigner { get; }
    [BrowsableAttribute("False")]
public HitTestLocations HitLocation { get; }
    [BrowsableAttribute("False")]
public Rectangle Bounds { get; }
    [BrowsableAttribute("False")]
public object SelectableObject { get; }
    [BrowsableAttribute("False")]
public IDictionary UserData { get; }
    public HitTestInfo(ActivityDesigner designer, HitTestLocations location);
    public static HitTestInfo get_Nowhere();
    public ActivityDesigner get_AssociatedDesigner();
    public HitTestLocations get_HitLocation();
    public virtual Rectangle get_Bounds();
    public virtual object get_SelectableObject();
    public IDictionary get_UserData();
    public virtual int MapToIndex();
}
[FlagsAttribute]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.ComponentModel.Design.HitTestLocations : Enum {
    public int value__;
    public static HitTestLocations None;
    public static HitTestLocations Designer;
    public static HitTestLocations ActionArea;
    public static HitTestLocations Left;
    public static HitTestLocations Top;
    public static HitTestLocations Right;
    public static HitTestLocations Bottom;
    public static HitTestLocations Connector;
}
internal interface System.Workflow.ComponentModel.Design.IConnectableDesigner {
    public abstract virtual bool CanConnect(ConnectionPoint source, ConnectionPoint target);
    public abstract virtual void OnConnected(ConnectionPoint source, ConnectionPoint target);
}
internal class System.Workflow.ComponentModel.Design.IdentifierCreationService : object {
    internal CodeDomProvider Provider { get; }
    internal IdentifierCreationService(IServiceProvider serviceProvider, WorkflowDesignerLoader loader);
    internal CodeDomProvider get_Provider();
    private sealed virtual override void System.Workflow.ComponentModel.Design.IIdentifierCreationService.ValidateIdentifier(Activity activity, string identifier);
    private sealed virtual override void System.Workflow.ComponentModel.Design.IIdentifierCreationService.EnsureUniqueIdentifiers(CompositeActivity parentActivity, ICollection childActivities);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.ComponentModel.Design.IDesignerGlyphProvider {
    public abstract virtual ActivityDesignerGlyphCollection GetGlyphs(ActivityDesigner activityDesigner);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.ComponentModel.Design.IDesignerGlyphProviderService {
    public ReadOnlyCollection`1<IDesignerGlyphProvider> GlyphProviders { get; }
    public abstract virtual void AddGlyphProvider(IDesignerGlyphProvider glyphProvider);
    public abstract virtual void RemoveGlyphProvider(IDesignerGlyphProvider glyphProvider);
    public abstract virtual ReadOnlyCollection`1<IDesignerGlyphProvider> get_GlyphProviders();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.ComponentModel.Design.IDesignerVerbProvider {
    public abstract virtual ActivityDesignerVerbCollection GetVerbs(ActivityDesigner activityDesigner);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.ComponentModel.Design.IDesignerVerbProviderService {
    public ReadOnlyCollection`1<IDesignerVerbProvider> VerbProviders { get; }
    public abstract virtual void AddVerbProvider(IDesignerVerbProvider verbProvider);
    public abstract virtual void RemoveVerbProvider(IDesignerVerbProvider verbProvider);
    public abstract virtual ReadOnlyCollection`1<IDesignerVerbProvider> get_VerbProviders();
}
internal class System.Workflow.ComponentModel.Design.IDPropertyDescriptor : DynamicPropertyDescriptor {
    internal IDPropertyDescriptor(IServiceProvider serviceProvider, PropertyDescriptor actualPropDesc);
    public virtual bool CanResetValue(object component);
    public virtual void SetValue(object component, object value);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.ComponentModel.Design.IExtendedUIService {
    public abstract virtual DialogResult AddWebReference(Uri& url, Type& proxyClass);
    public abstract virtual Uri GetUrlForProxyClass(Type proxyClass);
    public abstract virtual Type GetProxyClassForUrl(Uri url);
    public abstract virtual void AddDesignerActions(DesignerAction[] actions);
    public abstract virtual void RemoveDesignerActions();
    public abstract virtual bool NavigateToProperty(string propName);
    public abstract virtual ITypeDescriptorContext GetSelectedPropertyContext();
    public abstract virtual void ShowToolsOptions();
    public abstract virtual Dictionary`2<string, Type> GetXsdProjectItemsInfo();
    public abstract virtual void AddAssemblyReference(AssemblyName assemblyName);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.ComponentModel.Design.IExtendedUIService2 {
    public abstract virtual long GetTargetFrameworkVersion();
    public abstract virtual bool IsSupportedType(Type type);
    public abstract virtual Assembly GetReflectionAssembly(AssemblyName assemblyName);
    public abstract virtual Type GetRuntimeType(Type reflectionType);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.ComponentModel.Design.IIdentifierCreationService {
    public abstract virtual void EnsureUniqueIdentifiers(CompositeActivity parentActivity, ICollection childActivities);
    public abstract virtual void ValidateIdentifier(Activity activity, string identifier);
}
internal class System.Workflow.ComponentModel.Design.ImageBrowserEditor : UITypeEditor {
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.ComponentModel.Design.IMemberCreationService {
    public abstract virtual void CreateField(string className, string fieldName, Type fieldType, Type[] genericParameterTypes, MemberAttributes attributes, CodeSnippetExpression initializationExpression, bool overwriteExisting);
    public abstract virtual void CreateProperty(string className, string propertyName, Type propertyType, AttributeInfo[] attributes, bool emitDependencyProperty, bool isMetaProperty, bool isAttached, Type ownerType, bool isReadOnly);
    public abstract virtual void CreateEvent(string className, string eventName, Type eventType, AttributeInfo[] attributes, bool emitDependencyProperty);
    public abstract virtual void UpdateTypeName(string oldClassName, string newClassName);
    public abstract virtual void UpdateBaseType(string className, Type baseType);
    public abstract virtual void UpdateProperty(string className, string oldPropertyName, Type oldPropertyType, string newPropertyName, Type newPropertyType, AttributeInfo[] attributes, bool emitDependencyProperty, bool isMetaProperty);
    public abstract virtual void UpdateEvent(string className, string oldEventName, Type oldEventType, string newEventName, Type newEventType, AttributeInfo[] attributes, bool emitDependencyProperty, bool isMetaProperty);
    public abstract virtual void RemoveProperty(string className, string propertyName, Type propertyType);
    public abstract virtual void RemoveEvent(string className, string eventName, Type eventType);
    public abstract virtual void ShowCode(Activity activity, string methodName, Type delegateType);
    public abstract virtual void ShowCode();
}
[ActivityDesignerThemeAttribute("System.Workflow.ComponentModel.Design.InvokeWorkflowDesignerTheme")]
internal class System.Workflow.ComponentModel.Design.InvokeWorkflowDesigner : ActivityHostDesigner {
    internal static string InvokeWorkflowRef;
    protected Activity RootActivity { get; }
    private static InvokeWorkflowDesigner();
    protected virtual void Initialize(Activity activity);
    protected virtual Activity get_RootActivity();
    protected virtual void PreFilterProperties(IDictionary properties);
    protected virtual void OnActivityChanged(ActivityChangedEventArgs e);
    internal void RefreshTargetWorkflowType();
}
internal class System.Workflow.ComponentModel.Design.InvokeWorkflowDesignerTheme : CompositeDesignerTheme {
    public InvokeWorkflowDesignerTheme(WorkflowTheme theme);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.ComponentModel.Design.IPersistUIState {
    public abstract virtual void SaveViewState(BinaryWriter writer);
    public abstract virtual void LoadViewState(BinaryReader reader);
}
internal interface System.Workflow.ComponentModel.Design.IPropertyValueProvider {
    public abstract virtual ICollection GetPropertyValues(ITypeDescriptorContext typeDescriptorContext);
}
internal class System.Workflow.ComponentModel.Design.ItemInfo : object {
    public int Identifier { get; }
    public IDictionary UserData { get; }
    public Image Image { get; }
    public string Text { get; }
    public ItemInfo(int id);
    public ItemInfo(int id, Image image, string text);
    public int get_Identifier();
    public IDictionary get_UserData();
    public Image get_Image();
    public string get_Text();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Workflow.ComponentModel.Design.ItemPalette : object {
    public IList`1<ItemInfo> Items { get; }
    public ItemInfo SelectedItem { get; public set; }
    public bool IsVisible { get; }
    [CompilerGeneratedAttribute]
public void add_SelectionChanged(SelectionChangeEventHandler`1<SelectionChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SelectionChanged(SelectionChangeEventHandler`1<SelectionChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Closed(EventHandler value);
    public IList`1<ItemInfo> get_Items();
    public ItemInfo get_SelectedItem();
    public void set_SelectedItem(ItemInfo value);
    public void SetFont(Font font);
    public bool get_IsVisible();
    public void Show(Point location);
}
internal abstract class System.Workflow.ComponentModel.Design.ItemStrip : object {
    protected IServiceProvider serviceProvider;
    public IList`1<ItemInfo> Items { get; }
    public ItemInfo SelectedItem { get; public set; }
    public Point Location { get; public set; }
    public Size Size { get; public set; }
    public Rectangle Bounds { get; }
    public int ScrollPosition { get; public set; }
    public Size RequiredSize { get; }
    public Size ItemSize { get; }
    protected internal int MaxVisibleItems { get; }
    protected ItemInfo HighlitedItem { get; private set; }
    public ItemStrip(IServiceProvider serviceProvider, Orientation orientation, Size itemSize, Size margin);
    [CompilerGeneratedAttribute]
public void add_SelectionChanged(SelectionChangeEventHandler`1<SelectionChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SelectionChanged(SelectionChangeEventHandler`1<SelectionChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ScrollPositionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ScrollPositionChanged(EventHandler value);
    public IList`1<ItemInfo> get_Items();
    public ItemInfo get_SelectedItem();
    public void set_SelectedItem(ItemInfo value);
    public Point get_Location();
    public void set_Location(Point value);
    public Size get_Size();
    public void set_Size(Size value);
    public Rectangle get_Bounds();
    public int get_ScrollPosition();
    public void set_ScrollPosition(int value);
    public Rectangle GetItemBounds(ItemInfo itemInfo);
    public abstract virtual void Draw(Graphics graphics);
    public ItemInfo HitTest(Point point);
    public Size get_RequiredSize();
    public Size get_ItemSize();
    public virtual void OnMouseDragBegin(Point initialDragPoint, MouseEventArgs e);
    public virtual void OnMouseDragMove(MouseEventArgs e);
    public virtual void OnMouseDragEnd();
    public virtual void OnMouseEnter(MouseEventArgs e);
    public virtual void OnMouseDown(MouseEventArgs e);
    public virtual void OnMouseMove(MouseEventArgs e);
    public virtual void OnMouseUp(MouseEventArgs e);
    public virtual void OnMouseLeave();
    protected internal int get_MaxVisibleItems();
    protected ItemInfo get_HighlitedItem();
    private void set_HighlitedItem(ItemInfo value);
    protected void Invalidate();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.ComponentModel.Design.ITypeFilterProvider {
    public string FilterDescription { get; }
    public abstract virtual bool CanFilterType(Type type, bool throwOnError);
    public abstract virtual string get_FilterDescription();
}
[GuidAttribute("0E6DF9D7-B4B5-4af7-9647-FC335CCE393F")]
[ComVisibleAttribute("True")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.ComponentModel.Design.ITypeProviderCreator {
    public abstract virtual ITypeProvider GetTypeProvider(object obj);
    public abstract virtual Assembly GetLocalAssembly(object obj);
    public abstract virtual Assembly GetTransientAssembly(AssemblyName assemblyName);
    public abstract virtual ITypeResolutionService GetTypeResolutionService(object obj);
}
internal interface System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink {
    public abstract virtual bool OnMouseDown(MouseEventArgs e);
    public abstract virtual bool OnMouseMove(MouseEventArgs e);
    public abstract virtual bool OnMouseUp(MouseEventArgs e);
    public abstract virtual bool OnMouseDoubleClick(MouseEventArgs e);
    public abstract virtual bool OnMouseEnter(MouseEventArgs e);
    public abstract virtual bool OnMouseHover(MouseEventArgs e);
    public abstract virtual bool OnMouseLeave();
    public abstract virtual bool OnMouseWheel(MouseEventArgs e);
    public abstract virtual bool OnMouseCaptureChanged();
    public abstract virtual bool OnMouseDragBegin(Point initialPoint, MouseEventArgs e);
    public abstract virtual bool OnMouseDragMove(MouseEventArgs e);
    public abstract virtual bool OnMouseDragEnd();
    public abstract virtual bool OnDragEnter(DragEventArgs e);
    public abstract virtual bool OnDragOver(DragEventArgs e);
    public abstract virtual bool OnDragLeave();
    public abstract virtual bool OnDragDrop(DragEventArgs e);
    public abstract virtual bool OnGiveFeedback(GiveFeedbackEventArgs e);
    public abstract virtual bool OnQueryContinueDrag(QueryContinueDragEventArgs e);
    public abstract virtual bool OnKeyDown(KeyEventArgs e);
    public abstract virtual bool OnKeyUp(KeyEventArgs e);
    public abstract virtual bool OnScroll(ScrollBar sender, int value);
    public abstract virtual bool OnShowContextMenu(Point screenMenuPoint);
    public abstract virtual bool ProcessMessage(Message message);
    public abstract virtual void OnLayout(LayoutEventArgs layoutEventArgs);
    public abstract virtual void OnLayoutPosition(Graphics graphics);
    public abstract virtual void OnLayoutSize(Graphics graphics);
    public abstract virtual void OnThemeChange();
    public abstract virtual void OnBeginResizing(DesignerEdges sizingEdge);
    public abstract virtual void OnResizing(DesignerEdges sizingEdge, Rectangle bounds);
    public abstract virtual void OnEndResizing();
    public abstract virtual bool OnPaint(PaintEventArgs e, Rectangle viewPort);
    public abstract virtual bool OnPaintWorkflowAdornments(PaintEventArgs e, Rectangle viewPort);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.ComponentModel.Design.IWorkflowRootDesigner {
    public CompositeActivityDesigner InvokingDesigner { get; public set; }
    public ReadOnlyCollection`1<WorkflowDesignerMessageFilter> MessageFilters { get; }
    public bool SupportsLayoutPersistence { get; }
    public abstract virtual CompositeActivityDesigner get_InvokingDesigner();
    public abstract virtual void set_InvokingDesigner(CompositeActivityDesigner value);
    public abstract virtual ReadOnlyCollection`1<WorkflowDesignerMessageFilter> get_MessageFilters();
    public abstract virtual bool IsSupportedActivityType(Type activityType);
    public abstract virtual bool get_SupportsLayoutPersistence();
}
[FlagsAttribute]
internal enum System.Workflow.ComponentModel.Design.LightSourcePosition : Enum {
    public int value__;
    public static LightSourcePosition Left;
    public static LightSourcePosition Right;
    public static LightSourcePosition Top;
    public static LightSourcePosition Bottom;
    public static LightSourcePosition Center;
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.ComponentModel.Design.LineAnchor : Enum {
    public int value__;
    public static LineAnchor None;
    public static LineAnchor Arrow;
    public static LineAnchor ArrowAnchor;
    public static LineAnchor Diamond;
    public static LineAnchor DiamondAnchor;
    public static LineAnchor Round;
    public static LineAnchor RoundAnchor;
    public static LineAnchor Rectangle;
    public static LineAnchor RectangleAnchor;
    public static LineAnchor RoundedRectangle;
    public static LineAnchor RoundedRectangleAnchor;
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.LockedActivityGlyph : DesignerGlyph {
    internal static LockedActivityGlyph Default { get; }
    public int Priority { get; }
    private static LockedActivityGlyph();
    internal static LockedActivityGlyph get_Default();
    public virtual Rectangle GetBounds(ActivityDesigner designer, bool activated);
    public virtual int get_Priority();
    protected virtual void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer);
}
internal class System.Workflow.ComponentModel.Design.NamePropertyDescriptor : DynamicPropertyDescriptor {
    public string Category { get; }
    public string Description { get; }
    internal NamePropertyDescriptor(IServiceProvider serviceProvider, PropertyDescriptor actualPropDesc);
    public virtual string get_Category();
    public virtual string get_Description();
    public virtual void SetValue(object component, object value);
    public virtual bool CanResetValue(object component);
}
internal class System.Workflow.ComponentModel.Design.NonPrimarySelectionGlyph : SelectionGlyph {
    internal static NonPrimarySelectionGlyph Default { get; }
    public bool IsPrimarySelection { get; }
    private static NonPrimarySelectionGlyph();
    internal static NonPrimarySelectionGlyph get_Default();
    public virtual bool get_IsPrimarySelection();
}
internal class System.Workflow.ComponentModel.Design.PageSetupData : object {
    internal static int DefaultScaleFactor;
    internal static int DefaultMinScaleFactor;
    internal static int DefaultMaxScaleFactor;
    internal static int DefaultPages;
    internal static int DefaultHeaderMargin;
    internal static int DefaultFooterMargin;
    public bool Landscape { get; public set; }
    public bool AdjustToScaleFactor { get; public set; }
    public int ScaleFactor { get; public set; }
    public int PagesWide { get; public set; }
    public int PagesTall { get; public set; }
    public Margins Margins { get; public set; }
    public int HeaderMargin { get; public set; }
    public int FooterMargin { get; public set; }
    public string HeaderTemplate { get; public set; }
    public string FooterTemplate { get; public set; }
    public HorizontalAlignment HeaderAlignment { get; public set; }
    public HorizontalAlignment FooterAlignment { get; public set; }
    public bool HeaderCustom { get; public set; }
    public bool FooterCustom { get; public set; }
    public bool CenterHorizontally { get; public set; }
    public bool CenterVertically { get; public set; }
    private static PageSetupData();
    public void StorePropertiesToRegistry();
    public bool get_Landscape();
    public void set_Landscape(bool value);
    public bool get_AdjustToScaleFactor();
    public void set_AdjustToScaleFactor(bool value);
    public int get_ScaleFactor();
    public void set_ScaleFactor(int value);
    public int get_PagesWide();
    public void set_PagesWide(int value);
    public int get_PagesTall();
    public void set_PagesTall(int value);
    public Margins get_Margins();
    public void set_Margins(Margins value);
    public int get_HeaderMargin();
    public void set_HeaderMargin(int value);
    public int get_FooterMargin();
    public void set_FooterMargin(int value);
    public string get_HeaderTemplate();
    public void set_HeaderTemplate(string value);
    public string get_FooterTemplate();
    public void set_FooterTemplate(string value);
    public HorizontalAlignment get_HeaderAlignment();
    public void set_HeaderAlignment(HorizontalAlignment value);
    public HorizontalAlignment get_FooterAlignment();
    public void set_FooterAlignment(HorizontalAlignment value);
    public bool get_HeaderCustom();
    public void set_HeaderCustom(bool value);
    public bool get_FooterCustom();
    public void set_FooterCustom(bool value);
    public bool get_CenterHorizontally();
    public void set_CenterHorizontally(bool value);
    public bool get_CenterVertically();
    public void set_CenterVertically(bool value);
}
internal class System.Workflow.ComponentModel.Design.PageStrip : ScrollableItemStrip {
    public PageStrip(IServiceProvider serviceProvider, Size itemSize);
    private static PageStrip();
    protected virtual ItemStrip CreateItemStrip(IServiceProvider serviceProvider, Orientation orientation, Size itemSize, Size margin);
    public virtual void Draw(Graphics graphics);
}
internal class System.Workflow.ComponentModel.Design.PanningMessageFilter : WorkflowDesignerMessageFilter {
    private static PanningMessageFilter();
    protected virtual void Initialize(WorkflowView parentView);
    protected virtual void Dispose(bool disposing);
    protected virtual bool OnShowContextMenu(Point menuPoint);
    protected virtual bool OnMouseEnter(MouseEventArgs eventArgs);
    protected virtual bool OnMouseDown(MouseEventArgs eventArgs);
    protected virtual bool OnMouseMove(MouseEventArgs eventArgs);
    protected virtual bool OnMouseUp(MouseEventArgs eventArgs);
    protected virtual bool OnDragEnter(DragEventArgs eventArgs);
    protected virtual bool OnKeyDown(KeyEventArgs eventArgs);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ParallelActivityDesigner : StructuredCompositeActivityDesigner {
    public object FirstSelectableObject { get; }
    public object LastSelectableObject { get; }
    protected ActivityDesignerVerbCollection Verbs { get; }
    public virtual object get_FirstSelectableObject();
    public virtual object get_LastSelectableObject();
    protected virtual ActivityDesignerVerbCollection get_Verbs();
    public virtual object GetNextSelectableObject(object obj, DesignerNavigationDirection direction);
    public virtual bool CanRemoveActivities(ReadOnlyCollection`1<Activity> activitiesToRemove);
    public virtual bool CanMoveActivities(HitTestInfo moveLocation, ReadOnlyCollection`1<Activity> activitiesToMove);
    protected virtual CompositeActivity OnCreateNewBranch();
    protected virtual void OnPaint(ActivityDesignerPaintEventArgs e);
    protected virtual void OnLayoutPosition(ActivityDesignerLayoutEventArgs e);
    protected virtual Size OnLayoutSize(ActivityDesignerLayoutEventArgs e);
    protected virtual Rectangle[] GetDropTargets(Point dropPoint);
}
internal class System.Workflow.ComponentModel.Design.ParameterInfoBasedPropertyDescriptor : PropertyDescriptor {
    internal Type ParameterType { get; }
    public string Description { get; }
    public string Category { get; }
    public string DisplayName { get; }
    public bool IsReadOnly { get; }
    public Type ComponentType { get; }
    public string Name { get; }
    public Type PropertyType { get; }
    public TypeConverter Converter { get; }
    public AttributeCollection Attributes { get; }
    internal ParameterInfoBasedPropertyDescriptor(Type componentType, ParameterInfo paramInfo, bool avoidDuplication, Attribute[] attributes);
    internal ParameterInfoBasedPropertyDescriptor(Type componentType, string propertyName, Type propertyType, bool avoidDuplication, Attribute[] attributes);
    internal Type get_ParameterType();
    public virtual string get_Description();
    public virtual string get_Category();
    public virtual object GetEditor(Type editorBaseType);
    public virtual string get_DisplayName();
    public virtual bool get_IsReadOnly();
    public virtual Type get_ComponentType();
    public virtual string get_Name();
    internal static MemberInfo FindMatchingMember(string name, Type ownerType, bool ignoreCase);
    public virtual Type get_PropertyType();
    public virtual TypeConverter get_Converter();
    public virtual AttributeCollection get_Attributes();
    public virtual void ResetValue(object component);
    public virtual bool CanResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual object GetValue(object component);
    public static string GetParameterPropertyName(Type componentType, string paramName);
}
internal class System.Workflow.ComponentModel.Design.PointMarkupSerializer : WorkflowMarkupSerializer {
    protected internal virtual bool CanSerializeToString(WorkflowMarkupSerializationManager serializationManager, object value);
    protected internal virtual PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected internal virtual string SerializeToString(WorkflowMarkupSerializationManager serializationManager, object value);
    protected internal virtual object DeserializeFromString(WorkflowMarkupSerializationManager serializationManager, Type propertyType, string value);
}
internal class System.Workflow.ComponentModel.Design.PreviewItemStrip : object {
    public IList`1<ItemInfo> Items { get; }
    public AccessibleObject[] AccessibilityObjects { get; }
    public ItemInfo ActiveItem { get; public set; }
    public int ActiveDropTarget { get; public set; }
    public string HelpText { get; public set; }
    public Rectangle[] DropTargets { get; }
    public Point Location { get; public set; }
    public Size Size { get; }
    public Rectangle Bounds { get; }
    public PreviewItemStrip(ActivityPreviewDesigner parentDesigner);
    [CompilerGeneratedAttribute]
public void add_SelectionChanged(SelectionChangeEventHandler`1<SelectionChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SelectionChanged(SelectionChangeEventHandler`1<SelectionChangeEventArgs> value);
    public IList`1<ItemInfo> get_Items();
    public AccessibleObject[] get_AccessibilityObjects();
    public ItemInfo get_ActiveItem();
    public void set_ActiveItem(ItemInfo value);
    public int get_ActiveDropTarget();
    public void set_ActiveDropTarget(int value);
    public string get_HelpText();
    public void set_HelpText(string value);
    public Rectangle[] get_DropTargets();
    public Rectangle GetItemBounds(ItemInfo itemInfo);
    public Point get_Location();
    public void set_Location(Point value);
    public Size get_Size();
    public Rectangle get_Bounds();
    public ItemInfo HitTest(Point point);
    public void OnMouseDown(MouseEventArgs e);
    public void OnMouseUp(MouseEventArgs e);
    public void OnMouseLeave();
    public void OnLayoutSize(Graphics graphics);
    public void Draw(Graphics graphics);
}
internal class System.Workflow.ComponentModel.Design.PreviewWindow : object {
    public AccessibleObject AccessibilityObject { get; }
    public Rectangle Bounds { get; }
    public Point Location { get; public set; }
    public Size Size { get; }
    public Activity PreviewedActivity { get; public set; }
    public bool PreviewMode { get; public set; }
    public PreviewWindow(ActivityPreviewDesigner parent);
    [CompilerGeneratedAttribute]
public void add_PreviewModeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PreviewModeChanged(EventHandler value);
    public AccessibleObject get_AccessibilityObject();
    public Rectangle get_Bounds();
    public Point get_Location();
    public void set_Location(Point value);
    public Size get_Size();
    public Activity get_PreviewedActivity();
    public void set_PreviewedActivity(Activity value);
    public void Refresh();
    public bool get_PreviewMode();
    public void set_PreviewMode(bool value);
    public void OnMouseDown(MouseEventArgs e);
    public void OnLayoutSize(Graphics graphics, int minWidth);
    public void Draw(Graphics graphics, Rectangle viewPort);
}
internal class System.Workflow.ComponentModel.Design.PrimarySelectionGlyph : SelectionGlyph {
    internal static PrimarySelectionGlyph Default { get; }
    public bool IsPrimarySelection { get; }
    private static PrimarySelectionGlyph();
    internal static PrimarySelectionGlyph get_Default();
    public virtual bool get_IsPrimarySelection();
}
internal class System.Workflow.ComponentModel.Design.PrintPreviewLayout : WorkflowLayout {
    public float Scaling { get; }
    public Size Extent { get; }
    public Point RootDesignerAlignment { get; }
    internal PrintPreviewLayout(IServiceProvider serviceProvider, WorkflowPrintDocument printDoc);
    private static PrintPreviewLayout();
    public virtual float get_Scaling();
    public virtual Size get_Extent();
    public virtual Point get_RootDesignerAlignment();
    public virtual bool IsCoOrdInLayout(Point logicalCoOrd);
    public virtual Rectangle MapInRectangleToLayout(Rectangle logicalRectangle);
    public virtual Rectangle MapOutRectangleFromLayout(Rectangle logicalRectangle);
    public virtual Point MapInCoOrdToLayout(Point logicalPoint);
    public virtual Point MapOutCoOrdFromLayout(Point logicalPoint);
    public virtual void OnPaint(PaintEventArgs e, ViewPortData viewPortData);
    public virtual void OnPaintWorkflow(PaintEventArgs e, ViewPortData viewPortData);
    public virtual void Update(Graphics graphics, LayoutUpdateReason reason);
}
internal static class System.Workflow.ComponentModel.Design.PropertyDescriptorFilter : object {
    internal static PropertyDescriptorCollection FilterProperties(IServiceProvider serviceProvider, object propertyOwner, PropertyDescriptorCollection props);
    internal static void FilterProperties(IServiceProvider serviceProvider, object propertyOwner, IDictionary props);
    internal static PropertyDescriptorCollection GetPropertiesForEvents(IServiceProvider serviceProvider, object eventOwner);
}
internal static class System.Workflow.ComponentModel.Design.PropertyDescriptorUtils : object {
    internal static ISite GetSite(IServiceProvider serviceProvider, object component);
    internal static IComponent GetComponent(ITypeDescriptorContext context);
    internal static Type GetBaseType(PropertyDescriptor property, object owner, IServiceProvider serviceProvider);
    internal static void SetPropertyValue(IServiceProvider serviceProvider, PropertyDescriptor propertyDescriptor, object component, object value);
}
internal class System.Workflow.ComponentModel.Design.PropertySegment : object {
    internal object Object { get; }
    internal IServiceProvider ServiceProvider { get; }
    internal PropertyDescriptor PropertyDescriptor { get; }
    public PropertySegment(IServiceProvider serviceProvider, object obj);
    internal PropertySegment(IServiceProvider serviceProvider, object obj, PropertyInfo property);
    internal PropertySegment(IServiceProvider serviceProvider, object obj, PropertyDescriptor propertyDescriptor);
    internal object get_Object();
    internal IServiceProvider get_ServiceProvider();
    internal PropertyDescriptor get_PropertyDescriptor();
    internal PropertyInfo[] GetProperties(IServiceProvider serviceProvider);
}
internal class System.Workflow.ComponentModel.Design.PropertySegmentPropertyInfo : PropertyInfo {
    internal PropertySegment PropertySegment { get; }
    public Type PropertyType { get; }
    public PropertyAttributes Attributes { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public string Name { get; }
    public Type DeclaringType { get; }
    public Type ReflectedType { get; }
    internal PropertySegmentPropertyInfo(PropertySegment propertySegment, PropertyInfo realPropInfo);
    internal PropertySegmentPropertyInfo(PropertySegment propertySegment, PropertyDescriptor realPropDesc);
    internal PropertySegment get_PropertySegment();
    public virtual Type get_PropertyType();
    public virtual object GetValue(object obj, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture);
    public virtual void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture);
    public virtual MethodInfo[] GetAccessors(bool nonPublic);
    public virtual MethodInfo GetGetMethod(bool nonPublic);
    public virtual MethodInfo GetSetMethod(bool nonPublic);
    public virtual ParameterInfo[] GetIndexParameters();
    public virtual PropertyAttributes get_Attributes();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual string get_Name();
    public virtual Type get_DeclaringType();
    public virtual Type get_ReflectedType();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
}
internal class System.Workflow.ComponentModel.Design.PropertyValueProviderTypeConverter : TypeConverter {
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ReadOnlyActivityGlyph : DesignerGlyph {
    public int Priority { get; }
    public virtual Rectangle GetBounds(ActivityDesigner designer, bool activated);
    public virtual int get_Priority();
    protected virtual void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer);
}
internal class System.Workflow.ComponentModel.Design.ReadonlyEventDescriptor : EventDescriptor {
    public string Category { get; }
    public AttributeCollection Attributes { get; }
    public string Description { get; }
    public Type ComponentType { get; }
    public Type EventType { get; }
    public bool IsMulticast { get; }
    internal ReadonlyEventDescriptor(EventDescriptor e);
    public virtual string get_Category();
    public virtual AttributeCollection get_Attributes();
    public virtual string get_Description();
    public virtual Type get_ComponentType();
    public virtual Type get_EventType();
    public virtual bool get_IsMulticast();
    public virtual void AddEventHandler(object component, Delegate value);
    public virtual void RemoveEventHandler(object component, Delegate value);
}
internal class System.Workflow.ComponentModel.Design.ReadonlyMessageFilter : WorkflowDesignerMessageFilter {
    protected virtual bool OnMouseDown(MouseEventArgs eventArgs);
    protected virtual bool OnMouseMove(MouseEventArgs eventArgs);
    protected virtual bool OnMouseUp(MouseEventArgs eventArgs);
    protected virtual bool OnMouseDoubleClick(MouseEventArgs eventArgs);
    protected virtual bool OnMouseEnter(MouseEventArgs eventArgs);
    protected virtual bool OnMouseHover(MouseEventArgs eventArgs);
    protected virtual bool OnMouseLeave();
    protected virtual bool OnMouseWheel(MouseEventArgs eventArgs);
    protected virtual bool OnMouseCaptureChanged();
    protected virtual bool OnDragEnter(DragEventArgs eventArgs);
    protected virtual bool OnDragOver(DragEventArgs eventArgs);
    protected virtual bool OnDragLeave();
    protected virtual bool OnDragDrop(DragEventArgs eventArgs);
    protected virtual bool OnGiveFeedback(GiveFeedbackEventArgs gfbevent);
    protected virtual bool OnQueryContinueDrag(QueryContinueDragEventArgs qcdevent);
    protected virtual bool OnKeyDown(KeyEventArgs eventArgs);
    protected virtual bool OnKeyUp(KeyEventArgs eventArgs);
    protected virtual bool OnShowContextMenu(Point menuPoint);
}
internal class System.Workflow.ComponentModel.Design.ReadonlyPropertyDescriptor : PropertyDescriptor {
    public string Category { get; }
    public AttributeCollection Attributes { get; }
    public TypeConverter Converter { get; }
    public string Description { get; }
    public Type ComponentType { get; }
    public Type PropertyType { get; }
    public bool IsReadOnly { get; }
    internal ReadonlyPropertyDescriptor(PropertyDescriptor descriptor);
    public virtual string get_Category();
    public virtual AttributeCollection get_Attributes();
    public virtual TypeConverter get_Converter();
    public virtual string get_Description();
    public virtual Type get_ComponentType();
    public virtual Type get_PropertyType();
    public virtual bool get_IsReadOnly();
    public virtual void ResetValue(object component);
    public virtual bool CanResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
}
internal class System.Workflow.ComponentModel.Design.ReadonlyTypeDescriptonProvider : TypeDescriptionProvider {
    internal ReadonlyTypeDescriptonProvider(TypeDescriptionProvider realProvider);
    public virtual ICustomTypeDescriptor GetTypeDescriptor(Type type, object instance);
}
internal class System.Workflow.ComponentModel.Design.ReadonlyTypeDescriptor : CustomTypeDescriptor {
    internal ReadonlyTypeDescriptor(ICustomTypeDescriptor realTypeDescriptor);
    public virtual AttributeCollection GetAttributes();
    public virtual PropertyDescriptorCollection GetProperties();
    public virtual EventDescriptorCollection GetEvents(Attribute[] attributes);
}
internal class System.Workflow.ComponentModel.Design.ReferenceService : object {
    internal ReferenceService(IServiceProvider provider);
    private static ReferenceService();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private sealed virtual override IComponent System.ComponentModel.Design.IReferenceService.GetComponent(object reference);
    private sealed virtual override string System.ComponentModel.Design.IReferenceService.GetName(object reference);
    private sealed virtual override object System.ComponentModel.Design.IReferenceService.GetReference(string name);
    private sealed virtual override Object[] System.ComponentModel.Design.IReferenceService.GetReferences();
    private sealed virtual override Object[] System.ComponentModel.Design.IReferenceService.GetReferences(Type baseType);
}
internal class System.Workflow.ComponentModel.Design.ResizingMessageFilter : WorkflowDesignerMessageFilter {
    protected virtual void Dispose(bool disposing);
    protected virtual bool OnMouseDown(MouseEventArgs eventArgs);
    protected virtual bool OnMouseMove(MouseEventArgs eventArgs);
    protected virtual bool OnMouseUp(MouseEventArgs eventArgs);
    protected virtual bool OnMouseLeave();
    protected virtual bool OnKeyDown(KeyEventArgs eventArgs);
    protected virtual bool OnMouseCaptureChanged();
}
internal abstract class System.Workflow.ComponentModel.Design.ScrollableItemStrip : object {
    protected IServiceProvider serviceProvider;
    protected ItemStrip itemStrip;
    public IList`1<ItemInfo> Items { get; }
    public ItemInfo SelectedItem { get; public set; }
    public Point Location { get; public set; }
    public Size Size { get; public set; }
    public Rectangle Bounds { get; }
    public Orientation Orientation { get; }
    protected ScrollButton ActiveButton { get; private set; }
    public ScrollableItemStrip(IServiceProvider serviceProvider, Orientation orientation, Size itemSize, Size margin);
    public IList`1<ItemInfo> get_Items();
    public ItemInfo get_SelectedItem();
    public void set_SelectedItem(ItemInfo value);
    public void add_SelectionChanged(SelectionChangeEventHandler`1<SelectionChangeEventArgs> value);
    public void remove_SelectionChanged(SelectionChangeEventHandler`1<SelectionChangeEventArgs> value);
    public Point get_Location();
    public void set_Location(Point value);
    public Size get_Size();
    public void set_Size(Size value);
    public Rectangle get_Bounds();
    public Orientation get_Orientation();
    public abstract virtual void Draw(Graphics graphics);
    public virtual void OnMouseDragBegin(Point initialDragPoint, MouseEventArgs e);
    public virtual void OnMouseDragMove(MouseEventArgs e);
    public virtual void OnMouseDragEnd();
    public virtual void OnMouseEnter(MouseEventArgs e);
    public virtual void OnMouseDown(MouseEventArgs e);
    public virtual void OnMouseMove(MouseEventArgs e);
    public virtual void OnMouseUp(MouseEventArgs e);
    public virtual void OnMouseLeave();
    protected abstract virtual ItemStrip CreateItemStrip(IServiceProvider serviceProvider, Orientation orientation, Size itemSize, Size margin);
    protected Rectangle GetButtonBounds(ScrollButton scrollButton);
    protected ScrollButton HitTest(Point mousePoint);
    protected ScrollButton get_ActiveButton();
    private void set_ActiveButton(ScrollButton value);
    protected void Invalidate();
}
internal class System.Workflow.ComponentModel.Design.SecondaryView : DesignerView {
    internal static Guid UserDataKey_ActivityType;
    internal static Guid UserDataKey_Designer;
    public ActivityDesigner AssociatedDesigner { get; }
    internal SecondaryView(StructuredCompositeActivityDesigner parentDesigner, int id, string text, Type activityType);
    private static SecondaryView();
    public virtual ActivityDesigner get_AssociatedDesigner();
    public virtual void OnActivate();
}
internal static class System.Workflow.ComponentModel.Design.SecondaryViewProvider : object {
    internal static ReadOnlyCollection`1<DesignerView> GetViews(StructuredCompositeActivityDesigner designer);
    internal static IList`1<Type> GetActivityTypes(StructuredCompositeActivityDesigner designer);
    internal static void OnViewRemoved(StructuredCompositeActivityDesigner designer, Type viewTypeRemoved);
    internal static Activity FindActivity(StructuredCompositeActivityDesigner designer, Type activityType);
}
internal class System.Workflow.ComponentModel.Design.SelectionChangeEventArgs : EventArgs {
    public ItemInfo CurrentItem { get; }
    public SelectionChangeEventArgs(ItemInfo previousItem, ItemInfo currentItem);
    public ItemInfo get_CurrentItem();
}
internal class System.Workflow.ComponentModel.Design.SelectionChangeEventHandler`1 : MulticastDelegate {
    public SelectionChangeEventHandler`1(object object, IntPtr method);
    public virtual void Invoke(object sender, T e);
    public virtual IAsyncResult BeginInvoke(object sender, T e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.ComponentModel.Design.SelectionGlyph : DesignerGlyph {
    public int Priority { get; }
    public bool IsPrimarySelection { get; }
    public virtual Rectangle GetBounds(ActivityDesigner designer, bool activated);
    protected virtual void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer);
    public virtual int get_Priority();
    public abstract virtual bool get_IsPrimarySelection();
    public virtual Rectangle[] GetGrabHandles(ActivityDesigner designer);
}
[ActivityDesignerThemeAttribute("System.Workflow.ComponentModel.Design.SequenceDesignerTheme")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.SequenceDesigner : SequentialActivityDesigner {
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.SequenceDesignerAccessibleObject : CompositeDesignerAccessibleObject {
    public SequenceDesignerAccessibleObject(SequentialActivityDesigner activityDesigner);
    public virtual AccessibleObject GetChild(int index);
    public virtual int GetChildCount();
    public virtual AccessibleObject Navigate(AccessibleNavigation navdir);
}
internal class System.Workflow.ComponentModel.Design.SequenceDesignerTheme : CompositeDesignerTheme {
    public SequenceDesignerTheme(WorkflowTheme theme);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.SequentialActivityDesigner : StructuredCompositeActivityDesigner {
    public bool Expanded { get; public set; }
    public bool CanExpandCollapse { get; }
    public object FirstSelectableObject { get; }
    public object LastSelectableObject { get; }
    public AccessibleObject AccessibilityObject { get; }
    protected string HelpText { get; protected set; }
    protected Rectangle HelpTextRectangle { get; }
    protected internal ActivityDesignerGlyphCollection Glyphs { get; }
    protected Size HelpTextSize { get; }
    private static SequentialActivityDesigner();
    public virtual bool get_Expanded();
    public virtual void set_Expanded(bool value);
    public virtual bool get_CanExpandCollapse();
    public virtual object get_FirstSelectableObject();
    public virtual object get_LastSelectableObject();
    public virtual AccessibleObject get_AccessibilityObject();
    protected virtual string get_HelpText();
    protected virtual void set_HelpText(string value);
    protected virtual Rectangle get_HelpTextRectangle();
    protected internal virtual Rectangle[] GetConnectors();
    protected internal virtual ActivityDesignerGlyphCollection get_Glyphs();
    protected Size get_HelpTextSize();
    public virtual HitTestInfo HitTest(Point point);
    public virtual object GetNextSelectableObject(object obj, DesignerNavigationDirection direction);
    protected virtual void Initialize(Activity activity);
    protected virtual Rectangle[] GetDropTargets(Point dropPoint);
    protected virtual void OnPaint(ActivityDesignerPaintEventArgs e);
    protected virtual void OnLayoutPosition(ActivityDesignerLayoutEventArgs e);
    protected virtual Size OnLayoutSize(ActivityDesignerLayoutEventArgs e);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter : object {
    internal Size textSize;
    public Image Image { get; public set; }
    public string Text { get; public set; }
    public Rectangle Bounds { get; }
    public Rectangle TextRectangle { get; }
    public Rectangle ImageRectangle { get; }
    protected SequentialWorkflowRootDesigner AssociatedDesigner { get; }
    public SequentialWorkflowHeaderFooter(SequentialWorkflowRootDesigner parent, bool isHeader);
    public virtual Image get_Image();
    public virtual void set_Image(Image value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual Rectangle get_Bounds();
    public virtual Rectangle get_TextRectangle();
    public virtual Rectangle get_ImageRectangle();
    public virtual void OnLayout(ActivityDesignerLayoutEventArgs e);
    public virtual void OnPaint(ActivityDesignerPaintEventArgs e);
    protected SequentialWorkflowRootDesigner get_AssociatedDesigner();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner : SequentialActivityDesigner {
    public string Text { get; }
    public Image Image { get; }
    protected Rectangle ImageRectangle { get; }
    public bool CanExpandCollapse { get; }
    public Size MinimumSize { get; }
    protected SequentialWorkflowHeaderFooter Header { get; }
    protected SequentialWorkflowHeaderFooter Footer { get; }
    protected int TitleHeight { get; }
    protected bool ShowSmartTag { get; }
    protected Rectangle SmartTagRectangle { get; }
    protected CompositeActivityDesigner InvokingDesigner { get; protected set; }
    protected internal ActivityDesignerGlyphCollection Glyphs { get; }
    internal WorkflowLayout SupportedLayout { get; }
    private static SequentialWorkflowRootDesigner();
    public virtual string get_Text();
    public virtual Image get_Image();
    protected virtual Rectangle get_ImageRectangle();
    public virtual bool get_CanExpandCollapse();
    public virtual Size get_MinimumSize();
    protected virtual SequentialWorkflowHeaderFooter get_Header();
    protected virtual SequentialWorkflowHeaderFooter get_Footer();
    protected virtual int get_TitleHeight();
    protected virtual bool get_ShowSmartTag();
    protected virtual Rectangle get_SmartTagRectangle();
    protected virtual CompositeActivityDesigner get_InvokingDesigner();
    protected virtual void set_InvokingDesigner(CompositeActivityDesigner value);
    protected internal virtual ActivityDesignerGlyphCollection get_Glyphs();
    internal virtual WorkflowLayout get_SupportedLayout();
    public virtual bool CanBeParentedTo(CompositeActivityDesigner parentActivityDesigner);
    protected virtual ReadOnlyCollection`1<Point> GetInnerConnections(DesignerEdges edges);
    protected virtual void OnSmartTagVisibilityChanged(bool visible);
    protected virtual Size OnLayoutSize(ActivityDesignerLayoutEventArgs e);
    protected virtual void OnPaint(ActivityDesignerPaintEventArgs e);
    internal void InternalPerformLayout();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ShadowGlyph : DesignerGlyph {
    internal static ShadowGlyph Default { get; }
    public int Priority { get; }
    private static ShadowGlyph();
    internal static ShadowGlyph get_Default();
    public virtual Rectangle GetBounds(ActivityDesigner designer, bool activated);
    protected virtual void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer);
    public virtual int get_Priority();
}
internal class System.Workflow.ComponentModel.Design.SizeMarkupSerializer : WorkflowMarkupSerializer {
    protected internal virtual bool CanSerializeToString(WorkflowMarkupSerializationManager serializationManager, object value);
    protected internal virtual PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected internal virtual string SerializeToString(WorkflowMarkupSerializationManager serializationManager, object value);
    protected internal virtual object DeserializeFromString(WorkflowMarkupSerializationManager serializationManager, Type propertyType, string value);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner : CompositeActivityDesigner {
    public ReadOnlyCollection`1<ActivityDesigner> ContainedDesigners { get; }
    public object FirstSelectableObject { get; }
    public object LastSelectableObject { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public DesignerView ActiveView { get; public set; }
    public Size MinimumSize { get; }
    public ReadOnlyCollection`1<DesignerView> Views { get; }
    protected int CurrentDropTarget { get; protected set; }
    protected bool ShowSmartTag { get; }
    protected ReadOnlyCollection`1<ActivityDesignerVerb> SmartTagVerbs { get; }
    internal ActivityDesigner ActiveDesigner { get; }
    internal bool SmartTagVisible { get; internal set; }
    public virtual ReadOnlyCollection`1<ActivityDesigner> get_ContainedDesigners();
    public virtual object get_FirstSelectableObject();
    public virtual object get_LastSelectableObject();
    public DesignerView get_ActiveView();
    public void set_ActiveView(DesignerView value);
    public virtual Size get_MinimumSize();
    public virtual ReadOnlyCollection`1<DesignerView> get_Views();
    protected virtual int get_CurrentDropTarget();
    protected virtual void set_CurrentDropTarget(int value);
    protected virtual bool get_ShowSmartTag();
    protected virtual ReadOnlyCollection`1<ActivityDesignerVerb> get_SmartTagVerbs();
    internal ActivityDesigner get_ActiveDesigner();
    internal virtual bool get_SmartTagVisible();
    internal virtual void set_SmartTagVisible(bool value);
    public virtual bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert);
    public virtual void InsertActivities(HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert);
    public virtual void MoveActivities(HitTestInfo moveLocation, ReadOnlyCollection`1<Activity> activitiesToMove);
    public virtual bool CanRemoveActivities(ReadOnlyCollection`1<Activity> activitiesToRemove);
    public virtual void EnsureVisibleContainedDesigner(ActivityDesigner containedDesigner);
    public virtual object GetNextSelectableObject(object current, DesignerNavigationDirection direction);
    protected virtual void Initialize(Activity activity);
    protected virtual ReadOnlyCollection`1<Point> GetInnerConnections(DesignerEdges edges);
    protected virtual Rectangle[] GetDropTargets(Point dropPoint);
    protected virtual void OnContainedActivitiesChanging(ActivityCollectionChangeEventArgs listChangeArgs);
    protected void DrawConnectors(Graphics graphics, Pen pen, Point[] points, LineAnchor startCap, LineAnchor endCap);
    protected virtual void OnDragEnter(ActivityDragEventArgs e);
    protected virtual void OnDragOver(ActivityDragEventArgs e);
    protected virtual void OnDragLeave();
    protected virtual void OnDragDrop(ActivityDragEventArgs e);
    protected virtual void OnLayoutPosition(ActivityDesignerLayoutEventArgs e);
    protected virtual Size OnLayoutSize(ActivityDesignerLayoutEventArgs e);
    protected virtual void SaveViewState(BinaryWriter writer);
    protected virtual void LoadViewState(BinaryReader reader);
    protected virtual void OnViewChanged(DesignerView view);
    protected virtual void OnShowSmartTagVerbs(Point smartTagPoint);
    protected virtual void OnActivityChanged(ActivityChangedEventArgs e);
    internal virtual void OnPaintContainedDesigners(ActivityDesignerPaintEventArgs e);
}
internal class System.Workflow.ComponentModel.Design.SupportedImageFormats : object {
    public string Description;
    public ImageFormat Format;
    public SupportedImageFormats(string description, ImageFormat imageFormat);
}
[ActivityDesignerThemeAttribute("System.Workflow.ComponentModel.Design.SuspendDesignerTheme")]
internal class System.Workflow.ComponentModel.Design.SuspendDesigner : ActivityDesigner {
}
internal class System.Workflow.ComponentModel.Design.SuspendDesignerTheme : ActivityDesignerTheme {
    public SuspendDesignerTheme(WorkflowTheme theme);
}
[ToolboxItemAttribute("False")]
internal class System.Workflow.ComponentModel.Design.TabControl : Control {
    public ScrollBar ScrollBar { get; }
    public TabStrip TabStrip { get; }
    public TabControl(DockStyle dockStyle, AnchorAlignment stripAnchor);
    protected virtual void Dispose(bool disposing);
    public ScrollBar get_ScrollBar();
    public TabStrip get_TabStrip();
    protected virtual void OnLayout(LayoutEventArgs levent);
    protected virtual void OnDockChanged(EventArgs e);
}
internal class System.Workflow.ComponentModel.Design.TabSelectionChangeEventArgs : SelectionChangeEventArgs {
    public Rectangle SelectedTabBounds { get; }
    public TabSelectionChangeEventArgs(ItemInfo previousItem, ItemInfo currentItem, Rectangle selectedTabBounds);
    public Rectangle get_SelectedTabBounds();
}
[ToolboxItemAttribute("False")]
internal class System.Workflow.ComponentModel.Design.TabStrip : Control {
    public IList`1<ItemInfo> Tabs { get; }
    public int SelectedTab { get; public set; }
    public int MinimumRequiredSize { get; }
    public int MaximumRequiredSize { get; }
    public TabStrip(Orientation orientation, int tabSize);
    [CompilerGeneratedAttribute]
public void add_TabChange(SelectionChangeEventHandler`1<TabSelectionChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TabChange(SelectionChangeEventHandler`1<TabSelectionChangeEventArgs> value);
    protected virtual void Dispose(bool disposing);
    public IList`1<ItemInfo> get_Tabs();
    public int get_SelectedTab();
    public void set_SelectedTab(int value);
    public int get_MinimumRequiredSize();
    public int get_MaximumRequiredSize();
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnLayout(LayoutEventArgs levent);
}
[ActivityDesignerThemeAttribute("System.Workflow.ComponentModel.Design.TerminateDesignerTheme")]
internal class System.Workflow.ComponentModel.Design.TerminateDesigner : ActivityDesigner {
}
internal class System.Workflow.ComponentModel.Design.TerminateDesignerTheme : ActivityDesignerTheme {
    public TerminateDesignerTheme(WorkflowTheme theme);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.ComponentModel.Design.TextQuality : Enum {
    public int value__;
    public static TextQuality Aliased;
    public static TextQuality AntiAliased;
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.ThemeConfigurationDialog : Form {
    public WorkflowTheme ComposedTheme { get; }
    public ThemeConfigurationDialog(IServiceProvider serviceProvider);
    public ThemeConfigurationDialog(IServiceProvider serviceProvider, WorkflowTheme theme);
    protected virtual void Dispose(bool disposing);
    public WorkflowTheme get_ComposedTheme();
    protected virtual void OnLoad(EventArgs e);
    protected virtual void OnClosing(CancelEventArgs e);
    protected virtual void OnHelpRequested(HelpEventArgs e);
}
internal class System.Workflow.ComponentModel.Design.ThemeSerializationProvider : WorkflowMarkupSerializationProvider {
    public virtual object GetSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.ComponentModel.Design.ThemeType : Enum {
    public int value__;
    public static ThemeType Default;
    public static ThemeType System;
    public static ThemeType UserDefined;
}
internal class System.Workflow.ComponentModel.Design.ThemeTypeConverter : ExpandableObjectConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
[ActivityDesignerThemeAttribute("System.Workflow.ComponentModel.Design.ThrowDesignerTheme")]
internal class System.Workflow.ComponentModel.Design.ThrowDesigner : ActivityDesigner {
}
internal class System.Workflow.ComponentModel.Design.ThrowDesignerTheme : ActivityDesignerTheme {
    public ThrowDesignerTheme(WorkflowTheme theme);
}
internal class System.Workflow.ComponentModel.Design.TransactionScopeActivityDesigner : SequenceDesigner {
    public ReadOnlyCollection`1<DesignerView> Views { get; }
    public virtual ReadOnlyCollection`1<DesignerView> get_Views();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.TypeBrowserDialog : Form {
    public Type SelectedType { get; }
    private IComponent System.ComponentModel.ISite.Component { get; }
    private bool System.ComponentModel.ISite.DesignMode { get; }
    private string System.ComponentModel.ISite.Name { get; private set; }
    private IContainer System.ComponentModel.ISite.Container { get; }
    private static TypeBrowserDialog();
    public TypeBrowserDialog(IServiceProvider serviceProvider, ITypeFilterProvider filterProvider, string selectedTypeName, TypeProvider typeProvider);
    public TypeBrowserDialog(IServiceProvider serviceProvider, ITypeFilterProvider filterProvider, string selectedTypeName);
    internal void InitializeDialog(IServiceProvider serviceProvider, ITypeFilterProvider filterProvider, string selectedTypeName);
    protected virtual void Dispose(bool disposing);
    public Type get_SelectedType();
    protected virtual void OnLoad(EventArgs e);
    protected virtual void OnClosing(CancelEventArgs e);
    protected virtual void OnPaint(PaintEventArgs paintArgs);
    protected virtual bool ProcessCmdKey(Message& msg, Keys keyData);
    protected virtual void OnHelpRequested(HelpEventArgs e);
    private sealed virtual override IComponent System.ComponentModel.ISite.get_Component();
    private sealed virtual override bool System.ComponentModel.ISite.get_DesignMode();
    private sealed virtual override string System.ComponentModel.ISite.get_Name();
    private sealed virtual override void System.ComponentModel.ISite.set_Name(string value);
    private sealed virtual override IContainer System.ComponentModel.ISite.get_Container();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.TypeBrowserEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext typeDescriptorContext, IServiceProvider serviceProvider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext typeDescriptorContext);
}
internal class System.Workflow.ComponentModel.Design.TypeDescriptorContext : object {
    public IContainer Container { get; }
    public object Instance { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public TypeDescriptorContext(IServiceProvider serviceProvider, PropertyDescriptor propDesc, object instance);
    public sealed virtual IContainer get_Container();
    public sealed virtual object get_Instance();
    public sealed virtual PropertyDescriptor get_PropertyDescriptor();
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual bool OnComponentChanging();
    public sealed virtual void OnComponentChanged();
}
[AttributeUsageAttribute("192")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.TypeFilterProviderAttribute : Attribute {
    public string TypeFilterProviderTypeName { get; }
    public TypeFilterProviderAttribute(Type type);
    public TypeFilterProviderAttribute(string typeName);
    public string get_TypeFilterProviderTypeName();
}
internal class System.Workflow.ComponentModel.Design.TypePropertyDescriptor : DynamicPropertyDescriptor {
    public TypeConverter Converter { get; }
    public TypePropertyDescriptor(IServiceProvider serviceProvider, PropertyDescriptor actualPropDesc);
    public virtual TypeConverter get_Converter();
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
}
internal class System.Workflow.ComponentModel.Design.TypePropertyTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object valueToConvert);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Workflow.ComponentModel.Design.TypePropertyValueProviderTypeConverter : TypePropertyTypeConverter {
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
}
internal static class System.Workflow.ComponentModel.Design.UnsafeNativeMethods : object {
    internal static int S_OK;
    internal static int S_FALSE;
    internal static int GWL_EXSTYLE;
    internal static int WS_EX_LAYOUTRTL;
    private static UnsafeNativeMethods();
    internal static int GetWindowLong(IntPtr hWnd, int nIndex);
}
internal class System.Workflow.ComponentModel.Design.ViewPortData : object {
    public Rectangle LogicalViewPort;
    public Bitmap MemoryBitmap;
    public SizeF Scaling;
    public Point Translation;
    public Size ShadowDepth;
    public Color TransparentColor;
    public Size ViewPortSize;
}
internal class System.Workflow.ComponentModel.Design.WindowManager : WorkflowDesignerMessageFilter {
    protected virtual bool OnMouseDown(MouseEventArgs eventArgs);
    protected virtual bool OnMouseMove(MouseEventArgs eventArgs);
    protected virtual bool OnMouseUp(MouseEventArgs eventArgs);
    protected virtual bool OnMouseDoubleClick(MouseEventArgs eventArgs);
    protected virtual bool OnMouseEnter(MouseEventArgs eventArgs);
    protected virtual bool OnMouseHover(MouseEventArgs eventArgs);
    protected virtual bool OnMouseLeave();
    protected virtual bool OnMouseWheel(MouseEventArgs eventArgs);
    protected virtual bool OnMouseCaptureChanged();
    protected virtual bool OnDragEnter(DragEventArgs eventArgs);
    protected virtual bool OnKeyDown(KeyEventArgs eventArgs);
    protected virtual bool OnKeyUp(KeyEventArgs eventArgs);
    protected virtual bool OnScroll(ScrollBar sender, int value);
    protected virtual bool OnShowContextMenu(Point screenMenuPoint);
    protected virtual void OnLayout(LayoutEventArgs eventArgs);
    protected virtual bool ProcessMessage(Message message);
    protected virtual void OnThemeChange();
}
internal class System.Workflow.ComponentModel.Design.WorkflowDesignerEventsCoordinator : object {
    public WorkflowDesignerEventsCoordinator(IDesignerLoaderHost serviceProvider);
    private sealed virtual override void System.IDisposable.Dispose();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.ComponentModel.Design.WorkflowDesignerLoader : BasicDesignerLoader {
    internal static string DesignerLayoutFileExtension;
    public string FileName { get; }
    public bool InDebugMode { get; }
    protected TypeDescriptionProvider TargetFrameworkTypeDescriptionProvider { get; }
    private static WorkflowDesignerLoader();
    protected virtual void Initialize();
    public virtual void Dispose();
    public abstract virtual TextReader GetFileReader(string filePath);
    public abstract virtual TextWriter GetFileWriter(string filePath);
    public abstract virtual string get_FileName();
    public virtual void ForceReload();
    public virtual void Flush();
    public virtual bool get_InDebugMode();
    protected virtual TypeDescriptionProvider get_TargetFrameworkTypeDescriptionProvider();
    public void AddActivityToDesigner(Activity activity);
    public void RemoveActivityFromDesigner(Activity activity);
    protected virtual void PerformLoad(IDesignerSerializationManager serializationManager);
    protected virtual void PerformFlush(IDesignerSerializationManager serializationManager);
    protected virtual void OnEndLoad(bool successful, ICollection errors);
    protected void LoadDesignerLayoutFromResource(Type type, string manifestResourceName, IList& errors);
    protected void LoadDesignerLayout(XmlReader layoutReader, IList& layoutLoadErrors);
    protected void SaveDesignerLayout(XmlWriter layoutWriter, ActivityDesigner rootDesigner, IList& layoutSaveErrors);
    internal void SetModified(bool modified);
    internal static void AddActivityToDesigner(IServiceProvider serviceProvider, Activity activity);
    internal static void RemoveActivityFromDesigner(IServiceProvider serviceProvider, Activity activity);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter : object {
    protected WorkflowView ParentView { get; }
    protected HitTestInfo MessageHitTestContext { get; }
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Initialize(WorkflowView parentView);
    protected virtual void Dispose(bool disposing);
    protected virtual bool OnMouseDown(MouseEventArgs eventArgs);
    protected virtual bool OnMouseMove(MouseEventArgs eventArgs);
    protected virtual bool OnMouseUp(MouseEventArgs eventArgs);
    protected virtual bool OnMouseDoubleClick(MouseEventArgs eventArgs);
    protected virtual bool OnMouseEnter(MouseEventArgs eventArgs);
    protected virtual bool OnMouseHover(MouseEventArgs eventArgs);
    protected virtual bool OnMouseLeave();
    protected virtual bool OnMouseWheel(MouseEventArgs eventArgs);
    protected virtual bool OnMouseCaptureChanged();
    protected virtual bool OnDragEnter(DragEventArgs eventArgs);
    protected virtual bool OnDragOver(DragEventArgs eventArgs);
    protected virtual bool OnDragLeave();
    protected virtual bool OnDragDrop(DragEventArgs eventArgs);
    protected virtual bool OnGiveFeedback(GiveFeedbackEventArgs eventArgs);
    protected virtual bool OnQueryContinueDrag(QueryContinueDragEventArgs eventArgs);
    protected virtual bool OnKeyDown(KeyEventArgs eventArgs);
    protected virtual bool OnKeyUp(KeyEventArgs eventArgs);
    protected virtual bool OnScroll(ScrollBar sender, int value);
    protected virtual bool OnShowContextMenu(Point screenMenuPoint);
    protected virtual bool OnPaint(PaintEventArgs eventArgs, Rectangle viewPort, AmbientTheme ambientTheme);
    protected virtual bool OnPaintWorkflowAdornments(PaintEventArgs eventArgs, Rectangle viewPort, AmbientTheme ambientTheme);
    protected virtual bool ProcessMessage(Message message);
    protected virtual void OnLayout(LayoutEventArgs eventArgs);
    protected virtual void OnThemeChange();
    protected WorkflowView get_ParentView();
    protected HitTestInfo get_MessageHitTestContext();
    internal object GetService(Type serviceType);
    internal void SetParentView(WorkflowView parentView);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseDown(MouseEventArgs eventArgs);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseMove(MouseEventArgs eventArgs);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseUp(MouseEventArgs eventArgs);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseDoubleClick(MouseEventArgs eventArgs);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseEnter(MouseEventArgs eventArgs);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseHover(MouseEventArgs eventArgs);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseLeave();
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseWheel(MouseEventArgs eventArgs);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseCaptureChanged();
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseDragBegin(Point initialPoint, MouseEventArgs eventArgs);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseDragMove(MouseEventArgs eventArgs);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnMouseDragEnd();
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnDragEnter(DragEventArgs eventArgs);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnDragOver(DragEventArgs eventArgs);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnDragLeave();
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnDragDrop(DragEventArgs eventArgs);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnGiveFeedback(GiveFeedbackEventArgs eventArgs);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnQueryContinueDrag(QueryContinueDragEventArgs eventArgs);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnKeyDown(KeyEventArgs eventArgs);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnKeyUp(KeyEventArgs eventArgs);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnScroll(ScrollBar sender, int value);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnShowContextMenu(Point screenMenuPoint);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnPaint(PaintEventArgs eventArgs, Rectangle viewPort);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnPaintWorkflowAdornments(PaintEventArgs eventArgs, Rectangle viewPort);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.ProcessMessage(Message message);
    private sealed virtual override void System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnLayout(LayoutEventArgs layoutEventArgs);
    private sealed virtual override void System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnLayoutPosition(Graphics graphics);
    private sealed virtual override void System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnLayoutSize(Graphics graphics);
    private sealed virtual override void System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnThemeChange();
    private sealed virtual override void System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnBeginResizing(DesignerEdges sizingEdge);
    private sealed virtual override void System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnResizing(DesignerEdges sizingEdge, Rectangle bounds);
    private sealed virtual override void System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnEndResizing();
}
internal abstract class System.Workflow.ComponentModel.Design.WorkflowLayout : object {
    protected IServiceProvider serviceProvider;
    protected WorkflowView parentView;
    public float Scaling { get; }
    public Size Extent { get; }
    public Point RootDesignerAlignment { get; }
    public WorkflowLayout(IServiceProvider serviceProvider);
    public virtual void Dispose();
    public abstract virtual float get_Scaling();
    public abstract virtual Size get_Extent();
    public abstract virtual Point get_RootDesignerAlignment();
    public abstract virtual bool IsCoOrdInLayout(Point logicalCoOrd);
    public abstract virtual Rectangle MapInRectangleToLayout(Rectangle logicalRectangle);
    public abstract virtual Rectangle MapOutRectangleFromLayout(Rectangle logicalRectangle);
    public abstract virtual Point MapInCoOrdToLayout(Point logicalPoint);
    public abstract virtual Point MapOutCoOrdFromLayout(Point logicalPoint);
    public abstract virtual void OnPaint(PaintEventArgs e, ViewPortData viewPortData);
    public abstract virtual void OnPaintWorkflow(PaintEventArgs e, ViewPortData viewPortData);
    public abstract virtual void Update(Graphics graphics, LayoutUpdateReason reason);
}
internal class System.Workflow.ComponentModel.Design.WorkflowMarkupSerializationStore : SerializationStore {
    public ICollection Errors { get; }
    internal WorkflowMarkupSerializationStore(IServiceProvider serviceProvider);
    internal void AddObject(object value);
    internal void AddMember(object value, MemberDescriptor member);
    internal IList Deserialize(IServiceProvider serviceProvider);
    internal ICollection Deserialize(IServiceProvider serviceProvider, IContainer container);
    internal void DeserializeTo(IServiceProvider serviceProvider, IContainer container);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual void Save(Stream stream);
    public virtual void Close();
    public virtual ICollection get_Errors();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.WorkflowMenuCommands : StandardCommands {
    public static Guid WorkflowCommandSetId;
    public static Guid DebugCommandSetId;
    public static Guid DebugWorkflowGroupId;
    internal static Guid StandardCommandSet97Id;
    internal static Guid StandardCommandSet2kId;
    public static int WorkflowToolBar;
    public static int FirstZoomCommand;
    public static int LastZoomCommand;
    public static int VerbGroupGeneral;
    public static int VerbGroupView;
    public static int VerbGroupEdit;
    public static int VerbGroupOptions;
    public static int VerbGroupActions;
    public static int VerbGroupMisc;
    public static int VerbGroupDesignerActions;
    public static Guid MenuGuid;
    public static CommandID SelectionMenu;
    public static CommandID DesignerActionsMenu;
    public static CommandID InsertBreakpointMenu;
    public static CommandID EnableBreakpointMenu;
    public static CommandID ToggleBreakpointMenu;
    public static CommandID ClearBreakpointsMenu;
    public static CommandID ShowNextStatementMenu;
    public static CommandID RunToCursorMenu;
    public static CommandID SetNextStatementMenu;
    public static CommandID GotoDisassemblyMenu;
    public static CommandID NewFileTracePointMenu;
    public static CommandID NewDataBreakpointMenu;
    public static CommandID InsertTracePointMenu;
    public static CommandID BreakpointLocationMenu;
    public static CommandID BreakpointConditionMenu;
    public static CommandID BreakpointHitCountMenu;
    public static CommandID BreakpointConstraintsMenu;
    public static CommandID BreakpointActionMenu;
    public static CommandID ExecutionStateMenu;
    public static CommandID DebugStepInstanceMenu;
    public static CommandID DebugStepBranchMenu;
    public static CommandID Print;
    public static CommandID PageSetup;
    public static CommandID PrintPreview;
    public static CommandID PageUp;
    public static CommandID PageDown;
    public static CommandID DesignerProperties;
    public static CommandID ZoomMenu;
    public static CommandID PageLayoutMenu;
    public static CommandID PanMenu;
    public static CommandID Zoom400Mode;
    public static CommandID Zoom300Mode;
    public static CommandID Zoom200Mode;
    public static CommandID Zoom150Mode;
    public static CommandID Zoom100Mode;
    public static CommandID Zoom75Mode;
    public static CommandID Zoom50Mode;
    public static CommandID ShowAll;
    public static CommandID DefaultPage;
    public static CommandID PrintPreviewPage;
    public static CommandID Expand;
    public static CommandID Collapse;
    public static CommandID Disable;
    public static CommandID Enable;
    public static CommandID ChangeTheme;
    public static CommandID CreateTheme;
    public static CommandID ZoomIn;
    public static CommandID ZoomOut;
    public static CommandID Pan;
    public static CommandID DefaultFilter;
    public static CommandID ZoomLevelCombo;
    public static CommandID ZoomLevelListHandler;
    public static CommandID SaveAsImage;
    public static CommandID CopyToClipboard;
    private static WorkflowMenuCommands();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.WorkflowOutline : UserControl {
    protected internal bool NeedsExpandAll { get; protected internal set; }
    protected internal TreeNode RootNode { get; }
    protected internal TreeView TreeView { get; }
    public WorkflowOutline(IServiceProvider serviceProvider);
    protected virtual void Dispose(bool disposing);
    protected internal bool get_NeedsExpandAll();
    protected internal void set_NeedsExpandAll(bool value);
    protected internal TreeNode get_RootNode();
    public void ReloadWorkflowOutline();
    public void RefreshWorkflowOutline();
    protected virtual void OnLoad(EventArgs e);
    protected virtual void OnBeginUpdate();
    protected virtual void OnEndUpdate();
    protected virtual void OnRefreshNode(WorkflowOutlineNode node);
    protected virtual WorkflowOutlineNode CreateNewNode(Activity activity);
    protected virtual void OnNodeSelected(WorkflowOutlineNode node);
    protected virtual void OnNodeAdded(WorkflowOutlineNode node);
    protected WorkflowOutlineNode GetNode(Activity activity);
    protected void RefreshNode(WorkflowOutlineNode nodeToUpdate, bool refreshChildNodes);
    protected virtual object GetService(Type serviceType);
    protected internal TreeView get_TreeView();
    protected internal void add_Expanding(TreeViewCancelEventHandler value);
    protected internal void remove_Expanding(TreeViewCancelEventHandler value);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.WorkflowOutlineNode : TreeNode {
    public Activity Activity { get; }
    public WorkflowOutlineNode(Activity activity);
    public Activity get_Activity();
    public virtual void RefreshNode();
    public virtual void OnActivityRename(string newName);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.WorkflowPageSetupDialog : Form {
    public WorkflowPageSetupDialog(IServiceProvider serviceProvider);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnHelpRequested(HelpEventArgs hlpevent);
}
[ToolboxItemAttribute("False")]
internal class System.Workflow.ComponentModel.Design.WorkflowPrintDocument : PrintDocument {
    internal PrintPreviewLayout PrintPreviewLayout { get; }
    internal PageSetupData PageSetupData { get; }
    public WorkflowPrintDocument(WorkflowView workflowView);
    protected virtual void Dispose(bool disposing);
    internal PrintPreviewLayout get_PrintPreviewLayout();
    internal PageSetupData get_PageSetupData();
    protected virtual void OnBeginPrint(PrintEventArgs printArgs);
    protected virtual void OnPrintPage(PrintPageEventArgs printPageArg);
    internal Margins GetHardMargins(Graphics graphics);
    internal void PrintHeaderFooter(Graphics graphics, bool drawHeader, HeaderFooterData headerFooterPrintData);
}
internal class System.Workflow.ComponentModel.Design.WorkflowRootLayout : DefaultWorkflowLayout {
    public WorkflowRootLayout(IServiceProvider serviceProvider);
    public virtual Rectangle MapInRectangleToLayout(Rectangle logicalRectangle);
    public virtual Rectangle MapOutRectangleFromLayout(Rectangle logicalRectangle);
    public virtual Point MapInCoOrdToLayout(Point logicalPoint);
    public virtual Point MapOutCoOrdFromLayout(Point logicalPoint);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.WorkflowTheme : object {
    internal static string DefaultThemeFileExtension;
    internal static string DefaultNamespace;
    internal static IUIService UIService { get; internal set; }
    public static string RegistryKeyPath { get; }
    public static WorkflowTheme CurrentTheme { get; public set; }
    public static bool EnableChangeNotification { get; public set; }
    public static string LookupPath { get; }
    public static IDictionary`2<ThemeType, String[]> StandardThemes { get; }
    public string Name { get; public set; }
    public string Version { get; public set; }
    public string Description { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public string FilePath { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public string ContainingFileDirectory { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public IList DesignerThemes { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public AmbientTheme AmbientTheme { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public ThemeType Type { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public bool ReadOnly { get; public set; }
    private static WorkflowTheme();
    [CompilerGeneratedAttribute]
public static void add_ThemeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_ThemeChanged(EventHandler value);
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    internal static IUIService get_UIService();
    internal static void set_UIService(IUIService value);
    internal static Font GetDefaultFont();
    public static string get_RegistryKeyPath();
    public static WorkflowTheme get_CurrentTheme();
    public static void set_CurrentTheme(WorkflowTheme value);
    public static bool get_EnableChangeNotification();
    public static void set_EnableChangeNotification(bool value);
    public static string get_LookupPath();
    public static string GenerateThemeFilePath();
    public static WorkflowTheme LoadThemeSettingFromRegistry();
    public static void SaveThemeSettingToRegistry();
    public static WorkflowTheme CreateStandardTheme(ThemeType standardThemeType);
    public static IDictionary`2<ThemeType, String[]> get_StandardThemes();
    internal static void FireThemeChange();
    public static WorkflowTheme Load(string themeFilePath);
    public static WorkflowTheme Load(IDesignerSerializationManager serializationManager, string themeFilePath);
    public void Save(string themeFilePath);
    public WorkflowTheme Clone();
    public string get_Name();
    public void set_Name(string value);
    public string get_Version();
    public void set_Version(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_FilePath();
    public void set_FilePath(string value);
    public string get_ContainingFileDirectory();
    public IList get_DesignerThemes();
    public AmbientTheme get_AmbientTheme();
    [DesignerSerializationVisibilityAttribute("0")]
public ActivityDesignerTheme GetDesignerTheme(ActivityDesigner designer);
    internal DesignerTheme GetTheme(Type designerType);
    internal void AmbientPropertyChanged(AmbientProperty ambientProperty);
    public ThemeType get_Type();
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
}
internal class System.Workflow.ComponentModel.Design.WorkflowTimer : object {
    internal static WorkflowTimer Default { get; }
    internal static WorkflowTimer get_Default();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    internal void Subscribe(int elapsedInterval, EventHandler elapsedEventHandler);
    internal void Unsubscribe(EventHandler elapsedEventHandler);
}
internal class System.Workflow.ComponentModel.Design.WorkflowToolTip : object {
    internal WorkflowToolTip(Control parentControl);
    private sealed virtual override void System.IDisposable.Dispose();
    public void SetText(string title, string text);
    public void SetText(string text, Rectangle rectangle);
    public void RelayParentNotify(Message& msg);
}
[ToolboxItemAttribute("False")]
[ActivityDesignerThemeAttribute("System.Workflow.ComponentModel.Design.AmbientTheme")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.WorkflowView : UserControl {
    internal static string ThemeXml;
    public int Zoom { get; public set; }
    public ActivityDesigner RootDesigner { get; public set; }
    public int ShadowDepth { get; public set; }
    public Rectangle ViewPortRectangle { get; }
    public Size ViewPortSize { get; }
    public Point ScrollPosition { get; public set; }
    public bool PrintPreviewMode { get; public set; }
    public PrintDocument PrintDocument { get; }
    public HScrollBar HScrollBar { get; }
    public VScrollBar VScrollBar { get; }
    public bool EnableFitToScreen { get; public set; }
    internal bool DragDropInProgress { get; }
    internal bool ShowToolContainer { get; internal set; }
    internal HitTestInfo MessageHitTestContext { get; }
    internal WorkflowLayout ActiveLayout { get; internal set; }
    public WorkflowView(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public void add_ZoomChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ZoomChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_RootDesignerChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RootDesignerChanged(EventHandler value);
    protected virtual void Dispose(bool disposing);
    public int get_Zoom();
    public void set_Zoom(int value);
    public ActivityDesigner get_RootDesigner();
    public void set_RootDesigner(ActivityDesigner value);
    public int get_ShadowDepth();
    public void set_ShadowDepth(int value);
    public Rectangle get_ViewPortRectangle();
    public Size get_ViewPortSize();
    public Point get_ScrollPosition();
    public void set_ScrollPosition(Point value);
    public bool get_PrintPreviewMode();
    public void set_PrintPreviewMode(bool value);
    public PrintDocument get_PrintDocument();
    public void add_Idle(EventHandler value);
    public void remove_Idle(EventHandler value);
    public HScrollBar get_HScrollBar();
    public VScrollBar get_VScrollBar();
    public bool get_EnableFitToScreen();
    public void set_EnableFitToScreen(bool value);
    internal bool get_DragDropInProgress();
    internal bool get_ShowToolContainer();
    internal void set_ShowToolContainer(bool value);
    internal HitTestInfo get_MessageHitTestContext();
    internal WorkflowLayout get_ActiveLayout();
    internal void set_ActiveLayout(WorkflowLayout value);
    public void AddDesignerMessageFilter(WorkflowDesignerMessageFilter designerMessageFilter);
    public void RemoveDesignerMessageFilter(WorkflowDesignerMessageFilter designerMessageFilter);
    public void ShowInPlaceToolTip(string toolTipText, Rectangle toolTipRectangle);
    public void ShowInfoTip(string text);
    public void ShowInfoTip(string title, string text);
    public void EnsureVisible(object selectableObject);
    public void PerformLayout(bool immediateUpdate);
    public void SaveViewState(Stream viewState);
    public void LoadViewState(Stream viewState);
    public void FitToScreenSize();
    public void FitToWorkflowSize();
    public void SaveWorkflowImage(string imageFile, ImageFormat imageFormat);
    public void SaveWorkflowImage(Stream stream, ImageFormat imageFormat);
    public void SaveWorkflowImageToClipboard();
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnZoomChanged();
    protected virtual void OnRootDesignerChanged();
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseDoubleClick(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseHover(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseCaptureChanged(EventArgs e);
    protected virtual void OnMouseWheel(MouseEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnLayout(LayoutEventArgs levent);
    protected virtual void OnDragEnter(DragEventArgs dragEventArgs);
    protected virtual void OnDragOver(DragEventArgs dragEventArgs);
    protected virtual void OnDragLeave(EventArgs e);
    protected virtual void OnDragDrop(DragEventArgs dragEventArgs);
    protected virtual void OnGiveFeedback(GiveFeedbackEventArgs gfbevent);
    protected virtual void OnQueryContinueDrag(QueryContinueDragEventArgs qcdevent);
    protected virtual void WndProc(Message& m);
    protected virtual void OnControlAdded(ControlEventArgs e);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    internal void OnCommandKey(KeyEventArgs e);
    internal static void TakeWorkflowSnapShot(WorkflowView workflowView, ViewPortData viewPortData);
    internal void OnThemeChange(object sender, EventArgs e);
    public void InvalidateClientRectangle(Rectangle clientRectangle);
    public void InvalidateLogicalRectangle(Rectangle logicalRectangle);
    public Point LogicalPointToScreen(Point logicalPoint);
    public Point ScreenPointToLogical(Point screenPoint);
    public Point LogicalPointToClient(Point logicalPoint);
    public Point ClientPointToLogical(Point clientPoint);
    public Size LogicalSizeToClient(Size logicalSize);
    public Size ClientSizeToLogical(Size clientSize);
    public Rectangle LogicalRectangleToClient(Rectangle rectangle);
    public Rectangle ClientRectangleToLogical(Rectangle rectangle);
    internal bool IsClientPointInActiveLayout(Point clientPoint);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    protected virtual object GetService(Type serviceType);
    private sealed virtual override bool System.Windows.Forms.IMessageFilter.PreFilterMessage(Message& m);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject : ControlAccessibleObject {
    public Rectangle Bounds { get; }
    public string DefaultAction { get; }
    public string Description { get; }
    public string Help { get; }
    public string Name { get; public set; }
    public AccessibleRole Role { get; }
    public WorkflowViewAccessibleObject(WorkflowView workflowView);
    public virtual Rectangle get_Bounds();
    public virtual string get_DefaultAction();
    public virtual string get_Description();
    public virtual string get_Help();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual AccessibleRole get_Role();
    public virtual AccessibleObject GetChild(int index);
    public virtual int GetChildCount();
    public virtual AccessibleObject Navigate(AccessibleNavigation navdir);
}
internal class System.Workflow.ComponentModel.Design.XomlComponentSerializationService : ComponentSerializationService {
    internal XomlComponentSerializationService(IServiceProvider serviceProvider);
    public virtual SerializationStore CreateStore();
    public virtual SerializationStore LoadStore(Stream stream);
    public virtual void SerializeAbsolute(SerializationStore store, object value);
    public virtual void Serialize(SerializationStore store, object value);
    public virtual void SerializeMemberAbsolute(SerializationStore store, object owningObject, MemberDescriptor member);
    public virtual void SerializeMember(SerializationStore store, object owningObject, MemberDescriptor member);
    public virtual ICollection Deserialize(SerializationStore store);
    public virtual ICollection Deserialize(SerializationStore store, IContainer container);
    public virtual void DeserializeTo(SerializationStore store, IContainer container, bool validateRecycledTypes, bool applyDefaults);
    internal static PropertyInfo GetProperty(Type type, string name, BindingFlags bindingFlags);
}
internal class System.Workflow.ComponentModel.Design.ZoomingMessageFilter : WorkflowDesignerMessageFilter {
    internal bool ZoomingIn { get; }
    internal ZoomingMessageFilter(bool initiateZoomIn);
    private static ZoomingMessageFilter();
    protected virtual void Initialize(WorkflowView parentView);
    protected virtual void Dispose(bool disposing);
    protected virtual bool OnShowContextMenu(Point menuPoint);
    protected virtual bool OnMouseEnter(MouseEventArgs eventArgs);
    protected virtual bool OnMouseDown(MouseEventArgs eventArgs);
    protected virtual bool OnMouseMove(MouseEventArgs eventArgs);
    protected virtual bool OnMouseDoubleClick(MouseEventArgs eventArgs);
    protected virtual bool OnMouseLeave();
    protected virtual bool OnMouseCaptureChanged();
    protected virtual bool OnMouseUp(MouseEventArgs eventArgs);
    protected virtual bool OnKeyDown(KeyEventArgs eventArgs);
    protected virtual bool OnKeyUp(KeyEventArgs eventArgs);
    protected virtual bool OnDragEnter(DragEventArgs eventArgs);
    internal bool get_ZoomingIn();
}
internal enum System.Workflow.ComponentModel.Design.ZOrder : Enum {
    public int value__;
    public static ZOrder Foreground;
    public static ZOrder Background;
}
internal enum System.Workflow.ComponentModel.DrillIn : Enum {
    public int value__;
    public static DrillIn Never;
    public static DrillIn IfNeeded;
}
internal static class System.Workflow.ComponentModel.ErrorNumbers : object {
    public static int Error_InsideAtomicScope;
    public static int Error_DynamicActivity;
    public static int Error_CreateValidator;
    public static int Error_ParameterPropertyNotSet;
    public static int Error_ParameterTypeNotExist;
    public static int Error_MissingAttribute;
    public static int Error_ReferenceInvalidResourceFile;
    public static int Error_RefBindMissingReferenceName;
    public static int Error_RefBindCantFindRef;
    public static int Error_MissingRootActivity;
    public static int Bind_DuplicateDataSourceNames;
    public static int Error_ScopeDuplicatedNameActivity;
    public static int Error_TypeNotExist;
    public static int Error_TypeTypeMismatchAmbiguity;
    public static int Error_PropertyNotSet;
    public static int Error_CustomActivityCantCreate;
    public static int Error_InvalidIdentifier;
    public static int Error_TypeNotAsseblyQualified;
    public static int Error_RemoveExecutingActivity;
    public static int Error_TypeNotResolvedInFieldName;
    public static int Error_FieldNotExists;
    public static int Error_FieldNotAccessible;
    public static int Error_FieldTypeNotResolved;
    public static int Error_CannotResolveRelativeActivity;
    public static int Error_CannotResolveActivity;
    public static int Error_BindActivityReference;
    public static int Error_PathNotSetForActivitySource;
    public static int Error_InvalidMemberPath;
    public static int Error_TargetTypeMismatch;
    public static int Error_ReferencedActivityPropertyNotBind;
    public static int Bind_ActivityDataSourceRecursionDetected;
    public static int Error_NoEnclosingContext;
    public static int Error_DataSourceNotExist;
    public static int Error_MethodDataSourceWithPath;
    public static int Error_HandlerReadOnly;
    public static int Error_TypeNotDelegate;
    public static int Error_TypeNotResolvedInMethodName;
    public static int Error_MethodSignatureMismatch;
    public static int Error_MethodNotExists;
    public static int Error_MethodNotAccessible;
    public static int Error_MethodReturnTypeMismatch;
    public static int Error_TypeNotPrimitive;
    public static int Error_LiteralConversionFailed;
    public static int Error_DataSourceNameNotSet;
    public static int Error_DataSourceInvalidIdentifier;
    public static int Error_FieldTypeMismatch;
    public static int Error_TargetTypeDataSourcePathMismatch;
    public static int Error_PropertyNoGetter;
    public static int Error_PropertyNoSetter;
    public static int Error_PropertyHasIndexParameters;
    public static int Error_ReadOnlyField;
    public static int Error_XmlDataSourceReadOnly;
    public static int Error_PathNotSetForXmlDataSource;
    public static int Error_CorrelationAttributeInvalid;
    public static int Error_DuplicateCorrelationAttribute;
    public static int Error_MissingCorrelationParameterAttribute;
    public static int Error_CorrelationParameterNotFound;
    public static int Error_CorrelationTypeNotConsistent;
    public static int Error_GenericMethodsNotSupported;
    public static int Error_ReturnTypeNotVoid;
    public static int Error_OutRefParameterNotSupported;
    public static int Error_CorrelationInvalid;
    public static int Error_CorrelationInitializerNotDefinied;
    public static int Error_SerializationError;
    public static int Error_UnknownCompilerException;
    public static int Error_MultipleRootActivityCreator;
    public static int Error_LibraryPath;
    public static int Error_TypeLoad;
    public static int Error_InvalidReferencedAssembly;
    public static int Error_TypeNotResolvedInPropertyName;
    public static int Error_PropertyNotExists;
    public static int Error_PropertyNotAccessible;
    public static int Error_PropertyTypeNotResolved;
    public static int Error_PropertyTypeMismatch;
    public static int Error_PropertyReferenceNoGetter;
    public static int Error_UserCodeFilesNotAllowed;
    public static int Error_CodeWithinNotAllowed;
    public static int Error_TypeNotAuthorized;
    public static int Error_CompanionClassNameCanNotBeEmpty;
    public static int Error_DerivationFromTypeWithLocalDataContext;
    public static int Error_CompanionTypeDerivationError;
    public static int Error_DuplicatedParameterName;
    public static int Error_ConfigFileMissingOrInvalid;
    public static int Error_CyclicalExpression;
    public static int Error_InvalidAssignTarget;
    public static int Error_InvalidCharacter;
    public static int Error_InvalidEscapeSequence;
    public static int Error_UnterminatedCharacterLiteral;
    public static int Error_InvalidExponentDigit;
    public static int Error_InvalidHexDigit;
    public static int Error_MissingLparenAfterCommand;
    public static int Error_InvalidUpdateExpression;
    public static int Error_MissingRParenAfterArgumentList;
    public static int Error_MissingOperand;
    public static int Error_MissingRParenInSubexpression;
    public static int Error_MissingIdentifierAfterDot;
    public static int Error_UnknownFieldOrProperty;
    public static int Error_UnknownLiteral;
    public static int Error_UnknownIdentifier;
    public static int Error_MissingDotAfterNamespace;
    public static int Error_UnknownNamespaceMember;
    public static int Error_MissingTypeArguments;
    public static int Error_NotAGenericType;
    public static int Error_BadTypeArgCount;
    public static int Error_InvalidTypeArgument;
    public static int Error_MissingCloseAngleBracket;
    public static int Error_EmptyExpression;
    public static int Error_ExtraCharactersIgnored;
    public static int Error_InvalidIntegerLiteral;
    public static int Error_UnterminatedStringLiteral;
    public static int Error_CouldNotDetermineMemberType;
    public static int Error_InvalidWildCardInPathQualifier;
    public static int Error_MethodArgCountMismatch;
    public static int Error_MethodDirectionMismatch;
    public static int Error_MethodArgumentTypeMismatch;
    public static int Error_MethodOverloadNotFound;
    public static int Error_MissingCloseSquareBracket;
    public static int Error_CannotIndexType;
    public static int Error_ArrayIndexBadRank;
    public static int Error_IndexerArgCannotBeRefOrOut;
    public static int Error_ArrayIndexBadType;
    public static int Error_IndexerCountMismatch;
    public static int Error_IndexerNotFound;
    public static int Error_IndexerOverloadNotFound;
    public static int Error_NestedPersistOnClose;
    public static int Warning_EmptyBehaviourActivity;
    public static int Error_InvalidRuleAttributeParameter;
    public static int Error_InvokeAttrRefersToParameterAttribute;
    public static int Error_NestedCompensatableActivity;
    public static int Error_InvalidRealLiteral;
    public static int Error_PropertyDefaultIsReference;
    public static int Error_PropertyDefaultTypeMismatch;
    public static int Error_NoArrayCreationSize;
    public static int Error_MissingRCurlyAfterInitializers;
    public static int Error_GetCalleeWorkflow;
    public static int SR_InvokeTransactionalFromAtomic;
    public static int Error_ExecInAtomicScope;
    public static int Error_DuplicateParameter;
    public static int Error_ParameterNotFound;
    public static int Error_RecursionDetected;
    public static int Warning_UnverifiedRecursion;
    public static int Error_SuspendInAtomicCallChain;
    public static int Error_CompensateBadNesting;
    public static int Error_ActivityRefNotResolved;
    public static int Error_CompensantionParentNotScope;
    public static int Error_IfElseLessThanOneChildren;
    public static int Error_IfElseNotAllIfElseBranchDecl;
    public static int Error_ConditionalBranchParentNotConditional;
    public static int Error_DynamicActivity2;
    public static int Error_EventDrivenParentNotListen;
    public static int Error_EventDrivenNoFirstActivity;
    public static int Error_EventDrivenInvalidFirstActivity;
    public static int Error_ListenLessThanTwoChildren;
    public static int Error_ListenNotAllEventDriven;
    public static int Error_ListenNotMoreThanOneDelay;
    public static int Error_ParallelLessThanTwoChildren;
    public static int Error_ParallelNotAllSequence;
    public static int Error_FaultHandlerActivityParentNotFaultHandlersActivity;
    public static int Error_TypeTypeMismatch;
    public static int Error_ExceptionVariableNotAssignable;
    public static int Error_FaultHandlerActivityAllMustBeLast;
    public static int Error_FaultHandlersActivityDeclNotAllFaultHandlerActivityDecl;
    public static int Error_ScopeDuplicateFaultHandlerActivityForAll;
    public static int Error_ScopeDuplicateFaultHandlerActivityFor;
    public static int Error_FaultHandlerActivityWrongOrder;
    public static int Error_EventHandlersDeclParentNotScope;
    public static int Error_EventDrivenMultipleEventActivity;
    public static int Error_SuspendInAtomicScope;
    public static int Error_GeneratorShouldContainSingleActivity;
    public static int Error_ScopeMoreThanOneEventHandlersDecl;
    public static int Error_MissingMethodName;
    public static int Error_MissingHostInterface;
    public static int Error_ScopeMoreThanOneFaultHandlersActivityDecl;
    public static int Error_ScopeMoreThanOneCompensationDecl;
    public static int Error_AtomicScopeWithFaultHandlersActivityDecl;
    public static int Error_AtomicScopeNestedInNonLRT;
    public static int Error_LRTScopeNestedInNonLRT;
    public static int Error_NegativeValue;
    public static int Error_DuplicateCorrelation;
    public static int Error_ParallelActivationNoCorrelation;
    public static int Error_UninitializedCorrelation;
    public static int Error_CorrelatedSendReceiveAtomicScope;
    public static int Error_CorrelationAlreadyInitialized;
    public static int Error_ParameterNotSet;
    public static int Error_ConditionNotFound;
    public static int Error_DuplicateConditions;
    public static int Error_InvalidConditionName;
    public static int Error_LeftOperandMissing;
    public static int Error_LeftOperandInvalidType;
    public static int Error_RightOperandMissing;
    public static int Error_RightOperandInvalidType;
    public static int Error_OperandTypesIncompatible;
    public static int Error_BindingTypeMissing;
    public static int Error_ConditionMustBeBoolean;
    public static int Error_CodeExpressionNotHandled;
    public static int Error_UnableToResolveType;
    public static int Error_CannotResolveMember;
    public static int Warning_UnreachableCode;
    public static int Error_InvalidConditionExpression;
    public static int Error_WebServiceResponseNotFound;
    public static int Error_WebServiceReceiveNotFound;
    public static int Error_StaticMember;
    public static int Error_NonStaticMember;
    public static int Error_CompensateBadTargetTX;
    public static int Error_WebServiceReceiveNotValid;
    public static int Error_WebServiceResponseNotNeeded;
    public static int Error_WebServiceReceiveNotConfigured;
    public static int Error_TypeNotPublicSerializable;
    public static int Error_ActivationActivityNotFirst;
    public static int Error_WebServiceReceiveNotMarkedActivate;
    public static int Error_DuplicateWebServiceResponseFound;
    public static int Warning_RuleAttributeNoMatch;
    public static int Error_PolicyGetRuleSetNotImplemented;
    public static int Error_PolicyGetRuleSetNull;
    public static int Error_TypeNotPublic;
    public static int Error_InterfaceTypeNotInterface;
    public static int Error_ParameterTypeNotFound;
    public static int Error_ReturnTypeNotFound;
    public static int Error_CancelHandlerParentNotScope;
    public static int Error_DuplicateWebServiceFaultFound;
    public static int Error_AtomicScopeWithCancellationHandlerActivity;
    public static int Error_RuleSetNotFound;
    public static int Error_InvalidRuleSetExpression;
    public static int Error_InvalidRuleSetName;
    public static int Error_ActivationActivityInsideLoop;
    public static int Error_WebServiceFaultNotNeeded;
    public static int Error_InvalidUpdate;
    public static int Error_MissingRuleCondition;
    public static int Error_InvalidCompositeStateChild;
    public static int Error_InvalidLeafStateChild;
    public static int Error_SetStateOnlyWorksOnStateMachineWorkflow;
    public static int Error_SetStateMustPointToAState;
    public static int Error_SetStateMustPointToALeafNodeState;
    public static int Error_InitialStateMustPointToAState;
    public static int Error_CompletedStateMustPointToAState;
    public static int Error_InitialStateMustPointToALeafNodeState;
    public static int Error_CompletedStateMustPointToALeafNodeState;
    public static int Error_CompletedStateCannotContainActivities;
    public static int Error_DuplicatedActivityID;
    public static int Error_EventActivityNotValidInStateHandler;
    public static int Error_MultipleStateInitializationActivities;
    public static int Error_InvalidTargetStateInStateInitialization;
    public static int Error_StateHandlerParentNotState;
    public static int Error_SynchronizedNeedsDataContext;
    public static int Error_PropertyReferenceGetterNoAccess;
    public static int Error_WhileShouldHaveOneChild;
    public static int Error_CantHaveContextActivity;
    public static int Error_PathCouldNotBeResolvedToMember;
    public static int Error_TypeIsNotRootActivity;
    public static int Error_CantResolveEventHandler;
    public static int Error_XSDObjectTypeNotSerializable;
    public static int Error_IDNotSetForActivitySource;
    public static int Error_ExecWithActivationReceive;
    public static int Error_NestedConstrainedGroupConditions;
    public static int Error_MissingDataExchangeServiceAttribute;
    public static int Error_MissingEventName;
    public static int Error_CorrelationTokenInReplicator;
    public static int Error_TypePropertyInvalid;
    public static int Error_MultipleStateFinalizationActivities;
    public static int Error_CantRemoveState;
    public static int Error_XomlWorkflowHasClassName;
    public static int Error_XomlWorkflowHasCode;
    public static int Error_MoreThanTwoActivitiesInEventHandlingScope;
    public static int Error_ModelingConstructsCanNotContainModelingConstructs;
    public static int Error_CantRemoveEventDrivenFromExecutingState;
    public static int Error_StateMachineWorkflowMustBeARootActivity;
    public static int Error_ParentDoesNotSupportCompensation;
    public static int Error_BlackBoxCustomStateNotSupported;
    public static int Warning_ParameterBinding;
    public static int Error_BindBaseTypeNotSpecified;
    public static int Error_ValidatorThrewException;
    public static int Error_RootIsNotEnabled;
    public static int Error_InvalidMemberType;
    public static int Error_CannotNestThisActivity;
    public static int Error_InvalidStateActivityParent;
    public static int Error_InitialStateMustBeDifferentThanCompletedState;
    public static int Error_InitializerInReplicator;
    public static int Error_InitializerFollowerInTxnlScope;
    public static int Error_DynamicActivity3;
    public static int Warning_AdditionalBindingsFound;
}
internal class System.Workflow.ComponentModel.FaultAndCancellationHandlingFilter : ActivityExecutionFilter {
    public static DependencyProperty FaultProcessedProperty;
    private static FaultAndCancellationHandlingFilter();
    public virtual ActivityExecutionStatus Execute(Activity activity, ActivityExecutionContext executionContext);
    public virtual ActivityExecutionStatus HandleFault(Activity activity, ActivityExecutionContext executionContext, Exception exception);
    public sealed virtual void OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e);
    internal static CompositeActivity GetFaultHandlers(Activity activityWithExceptionHandlers);
    internal static Activity GetCancellationHandler(Activity activityWithCancelHandler);
}
[SRDescriptionAttribute("FaultHandlerActivityDescription")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[ToolboxBitmapAttribute("System.Workflow.ComponentModel.FaultHandlerActivity", "Resources.Exception.png")]
[SRCategoryAttribute("Standard")]
[DesignerAttribute("System.Workflow.ComponentModel.Design.FaultHandlerActivityDesigner", "System.ComponentModel.Design.IDesigner")]
[ActivityValidatorAttribute("System.Workflow.ComponentModel.FaultHandlerActivityValidator")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.FaultHandlerActivity : CompositeActivity {
    public static DependencyProperty FaultTypeProperty;
    internal static DependencyProperty FaultProperty;
    [EditorAttribute("System.Workflow.ComponentModel.Design.TypeBrowserEditor", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("ExceptionTypeDescr")]
[MergablePropertyAttribute("False")]
public Type FaultType { get; public set; }
    [SRDescriptionAttribute("FaultDescription")]
[MergablePropertyAttribute("False")]
[ReadOnlyAttribute("True")]
public Exception Fault { get; }
    private string System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription { get; }
    public FaultHandlerActivity(string name);
    private static FaultHandlerActivity();
    public Type get_FaultType();
    public void set_FaultType(Type value);
    public Exception get_Fault();
    internal void SetException(Exception e);
    protected internal virtual void Initialize(IServiceProvider provider);
    protected internal virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected internal virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e);
    protected internal virtual void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity);
    protected internal virtual void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(Type type, bool throwOnError);
    private sealed virtual override string System.Workflow.ComponentModel.Design.ITypeFilterProvider.get_FilterDescription();
    private sealed virtual override Type System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider serviceProvider, string propertyName);
    private sealed virtual override AccessTypes System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider serviceProvider, string propertyName);
}
internal class System.Workflow.ComponentModel.FaultHandlerActivityValidator : CompositeActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
[ToolboxItemAttribute("False")]
[DesignerAttribute("System.Workflow.ComponentModel.Design.FaultHandlersActivityDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxBitmapAttribute("System.Workflow.ComponentModel.FaultHandlersActivity", "Resources.Exceptions.png")]
[ActivityValidatorAttribute("System.Workflow.ComponentModel.FaultHandlersActivityValidator")]
[AlternateFlowActivityAttribute]
[SRCategoryAttribute("Standard")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.FaultHandlersActivity : CompositeActivity {
    public FaultHandlersActivity(string name);
    protected internal virtual void Initialize(IServiceProvider provider);
    protected internal virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected internal virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e);
    protected internal virtual void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity);
    protected internal virtual void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext);
    protected virtual void OnClosed(IServiceProvider provider);
}
internal class System.Workflow.ComponentModel.FaultHandlersActivityValidator : CompositeActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
[ActivityValidatorAttribute("System.Workflow.ComponentModel.Compiler.FieldBindValidator")]
internal class System.Workflow.ComponentModel.FieldBind : MemberBind {
    public string Path { get; public set; }
    public FieldBind(string name);
    public FieldBind(string name, string path);
    public string get_Path();
    public void set_Path(string value);
    public virtual object GetRuntimeValue(Activity activity, Type targetType);
    public virtual object GetRuntimeValue(Activity activity);
    public virtual void SetRuntimeValue(Activity activity, object value);
    protected virtual void OnRuntimeInitialized(Activity activity);
}
public class System.Workflow.ComponentModel.GetValueOverride : MulticastDelegate {
    public GetValueOverride(object object, IntPtr method);
    public virtual object Invoke(DependencyObject d);
    public virtual IAsyncResult BeginInvoke(DependencyObject d, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class System.Workflow.ComponentModel.GrantedLock : object {
    public Activity Holder { get; public set; }
    public IList`1<Activity> WaitList { get; }
    public GrantedLock(Activity holder);
    public Activity get_Holder();
    public void set_Holder(Activity value);
    public IList`1<Activity> get_WaitList();
    public sealed virtual object Clone();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.ComponentModel.IActivityEventListener`1 {
    public abstract virtual void OnEvent(object sender, T e);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.ComponentModel.ICompensatableActivity {
    public abstract virtual ActivityExecutionStatus Compensate(ActivityExecutionContext executionContext);
}
internal interface System.Workflow.ComponentModel.IDependencyObjectAccessor {
    public abstract virtual void InitializeDefinitionForRuntime(DependencyObject parentDependencyObject);
    public abstract virtual void InitializeInstanceForRuntime(IWorkflowCoreRuntime workflowCoreRuntime);
    public abstract virtual void InitializeActivatingInstanceForRuntime(DependencyObject parentDependencyObject, IWorkflowCoreRuntime workflowCoreRuntime);
    public abstract virtual T[] GetInvocationList(DependencyProperty dependencyEvent);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.ComponentModel.IDynamicPropertyTypeProvider {
    public abstract virtual Type GetPropertyType(IServiceProvider serviceProvider, string propertyName);
    public abstract virtual AccessTypes GetAccessType(IServiceProvider serviceProvider, string propertyName);
}
internal static class System.Workflow.ComponentModel.InternalHelpers : object {
    internal static string GenerateQualifiedNameForLockedActivity(Activity activity, string id);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.ComponentModel.IStartWorkflow {
    public abstract virtual Guid StartWorkflow(Type workflowType, Dictionary`2<string, object> namedArgumentValues);
}
internal interface System.Workflow.ComponentModel.ISupportAlternateFlow {
    public IList`1<Activity> AlternateFlowActivities { get; }
    public abstract virtual IList`1<Activity> get_AlternateFlowActivities();
}
internal interface System.Workflow.ComponentModel.ISupportWorkflowChanges {
    public abstract virtual void OnActivityAdded(ActivityExecutionContext rootContext, Activity addedActivity);
    public abstract virtual void OnActivityRemoved(ActivityExecutionContext rootContext, Activity removedActivity);
    public abstract virtual void OnWorkflowChangesCompleted(ActivityExecutionContext rootContext);
}
[DefaultMemberAttribute("Item")]
internal class System.Workflow.ComponentModel.ItemList`1 : List`1<T> {
    protected object Owner { get; }
    private bool IsFixedSize { get; }
    private T System.Collections.Generic.IList<T>.Item { get; private set; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    private int System.Collections.Generic.ICollection<T>.Count { get; }
    public T Item { get; public set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal ItemList`1(object owner);
    [CompilerGeneratedAttribute]
internal void add_ListChanging(ItemListChangeEventHandler`1<T> value);
    [CompilerGeneratedAttribute]
internal void remove_ListChanging(ItemListChangeEventHandler`1<T> value);
    protected object get_Owner();
    private bool get_IsFixedSize();
    [CompilerGeneratedAttribute]
public void add_ListChanged(ItemListChangeEventHandler`1<T> value);
    [CompilerGeneratedAttribute]
public void remove_ListChanged(ItemListChangeEventHandler`1<T> value);
    private sealed virtual override void System.Collections.Generic.IList<T>.RemoveAt(int index);
    private sealed virtual override void System.Collections.Generic.IList<T>.Insert(int index, T item);
    private sealed virtual override T System.Collections.Generic.IList<T>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<T>.set_Item(int index, T value);
    private sealed virtual override int System.Collections.Generic.IList<T>.IndexOf(T item);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Contains(T item);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    private sealed virtual override int System.Collections.Generic.ICollection<T>.get_Count();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    public void Add(T item);
    public void AddRange(IEnumerable`1<T> collection);
    public void InsertRange(int index, IEnumerable`1<T> collection);
    public void Clear();
    public void Insert(int index, T item);
    public bool Remove(T item);
    public sealed virtual void RemoveAt(int index);
    public T get_Item(int index);
    public void set_Item(int index, T value);
    protected virtual void FireListChanging(ItemListChangeEventArgs`1<T> eventArgs);
    protected virtual void FireListChanged(ItemListChangeEventArgs`1<T> eventArgs);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[FlagsAttribute]
internal enum System.Workflow.ComponentModel.ItemListChangeAction : Enum {
    public int value__;
    public static ItemListChangeAction Add;
    public static ItemListChangeAction Remove;
    public static ItemListChangeAction Replace;
}
internal class System.Workflow.ComponentModel.ItemListChangeEventArgs`1 : EventArgs {
    public IList`1<T> RemovedItems { get; }
    public IList`1<T> AddedItems { get; }
    public object Owner { get; }
    public int Index { get; }
    public ItemListChangeAction Action { get; }
    public ItemListChangeEventArgs`1(int index, ICollection`1<T> removedItems, ICollection`1<T> addedItems, object owner, ItemListChangeAction action);
    public ItemListChangeEventArgs`1(int index, T removedActivity, T addedActivity, object owner, ItemListChangeAction action);
    public IList`1<T> get_RemovedItems();
    public IList`1<T> get_AddedItems();
    public object get_Owner();
    public int get_Index();
    public ItemListChangeAction get_Action();
}
internal class System.Workflow.ComponentModel.ItemListChangeEventHandler`1 : MulticastDelegate {
    public ItemListChangeEventHandler`1(object object, IntPtr method);
    public virtual void Invoke(object sender, ItemListChangeEventArgs`1<T> e);
    public virtual IAsyncResult BeginInvoke(object sender, ItemListChangeEventArgs`1<T> e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal interface System.Workflow.ComponentModel.ITimerService {
    public abstract virtual void ScheduleTimer(WaitCallback callback, Guid workflowInstanceId, DateTime whenUtc, Guid timerId);
    public abstract virtual void CancelTimer(Guid timerId);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.ComponentModel.IWorkflowChangeDiff {
    public abstract virtual IList`1<WorkflowChangeAction> Diff(object originalDefinition, object changedDefinition);
}
internal interface System.Workflow.ComponentModel.IWorkflowCoreRuntime {
    public Activity RootActivity { get; }
    public Activity CurrentActivity { get; }
    public Activity CurrentAtomicActivity { get; }
    public bool IsDynamicallyUpdated { get; }
    public Guid InstanceID { get; }
    public WaitCallback ProcessTimersCallback { get; }
    public abstract virtual Activity get_RootActivity();
    public abstract virtual Activity get_CurrentActivity();
    public abstract virtual Activity get_CurrentAtomicActivity();
    public abstract virtual IDisposable SetCurrentActivity(Activity activity);
    public abstract virtual void ScheduleItem(SchedulableItem item, bool isInAtomicTransaction, bool transacted, bool queueInTransaction);
    public abstract virtual void ActivityStatusChanged(Activity activity, bool transacted, bool committed);
    public abstract virtual void RaiseException(Exception e, Activity activity, string responsibleActivity);
    public abstract virtual void RaiseActivityExecuting(Activity activity);
    public abstract virtual void RaiseHandlerInvoking(Delegate delegateHandler);
    public abstract virtual void RaiseHandlerInvoked();
    public abstract virtual Guid StartWorkflow(Type workflowType, Dictionary`2<string, object> namedArgumentValues);
    public abstract virtual int GetNewContextActivityId();
    public abstract virtual void RegisterContextActivity(Activity activity);
    public abstract virtual void UnregisterContextActivity(Activity activity);
    public abstract virtual Activity LoadContextActivity(ActivityExecutionContextInfo contextInfo, Activity outerContextActivity);
    public abstract virtual void SaveContextActivity(Activity contextActivity);
    public abstract virtual Activity GetContextActivityForId(int id);
    public abstract virtual object GetService(Activity currentActivity, Type serviceType);
    public abstract virtual void PersistInstanceState(Activity activity);
    public abstract virtual bool OnBeforeDynamicChange(IList`1<WorkflowChangeAction> changes);
    public abstract virtual void OnAfterDynamicChange(bool updateSucceeded, IList`1<WorkflowChangeAction> changes);
    public abstract virtual bool get_IsDynamicallyUpdated();
    public abstract virtual Guid get_InstanceID();
    public abstract virtual bool SuspendInstance(string suspendDescription);
    public abstract virtual void TerminateInstance(Exception e);
    public abstract virtual bool Resume();
    public abstract virtual void CheckpointInstanceState(Activity currentActivity);
    public abstract virtual void RequestRevertToCheckpointState(Activity currentActivity, EventHandler`1<EventArgs> callbackHandler, EventArgs callbackData, bool suspendOnRevert, string suspendReason);
    public abstract virtual void DisposeCheckpointState();
    public abstract virtual void Track(string key, object data);
    public abstract virtual WaitCallback get_ProcessTimersCallback();
}
internal static class System.Workflow.ComponentModel.LocalAppContextSwitches : object {
    public static bool UseLegacyHashForXomlFileChecksum { get; }
    public static bool get_UseLegacyHashForXomlFileChecksum();
}
internal abstract class System.Workflow.ComponentModel.MemberBind : BindBase {
    [DefaultValueAttribute("")]
public string Name { get; }
    protected MemberBind(string name);
    public string get_Name();
    internal static object GetValue(MemberInfo memberInfo, object dataContext, string path);
    internal static void SetValue(object dataContext, string path, object value);
    internal static ValidationError ValidateTypesInPath(Type srcType, string path);
    internal static MemberInfo GetMemberInfo(Type srcType, string path);
}
[ActivityValidatorAttribute("System.Workflow.ComponentModel.Compiler.MethodBindValidator")]
internal class System.Workflow.ComponentModel.MethodBind : MemberBind {
    public MethodBind(string name);
    public virtual object GetRuntimeValue(Activity activity, Type targetType);
    public virtual object GetRuntimeValue(Activity activity);
    public virtual void SetRuntimeValue(Activity activity, object value);
}
internal class System.Workflow.ComponentModel.PathErrorInfoEventArgs : EventArgs {
    public PathErrorInfoEventArgs(SourceValueInfo info, string currentPath);
}
internal class System.Workflow.ComponentModel.PathMemberInfoEventArgs : EventArgs {
    public string Path { get; }
    public MemberInfo MemberInfo { get; }
    public PathMemberKind MemberKind { get; }
    public Object[] IndexParameters { get; }
    public bool LastMemberInThePath { get; }
    public PathWalkAction Action { get; public set; }
    public PathMemberInfoEventArgs(string path, Type parentType, MemberInfo memberInfo, PathMemberKind memberKind, bool lastMemberInThePath);
    public PathMemberInfoEventArgs(string path, Type parentType, MemberInfo memberInfo, PathMemberKind memberKind, bool lastMemberInThePath, Object[] indexParameters);
    public string get_Path();
    public MemberInfo get_MemberInfo();
    public PathMemberKind get_MemberKind();
    public Object[] get_IndexParameters();
    public bool get_LastMemberInThePath();
    public PathWalkAction get_Action();
    public void set_Action(PathWalkAction value);
}
internal enum System.Workflow.ComponentModel.PathMemberKind : Enum {
    public int value__;
    public static PathMemberKind Field;
    public static PathMemberKind Event;
    public static PathMemberKind Property;
    public static PathMemberKind IndexedProperty;
    public static PathMemberKind Index;
}
internal class System.Workflow.ComponentModel.PathParser : object {
    internal string Error { get; }
    private static PathParser();
    internal string get_Error();
    internal List`1<SourceValueInfo> Parse(string path, bool returnResultBeforeError);
}
internal enum System.Workflow.ComponentModel.PathWalkAction : Enum {
    public int value__;
    public static PathWalkAction Continue;
    public static PathWalkAction Stop;
    public static PathWalkAction Cancel;
}
internal class System.Workflow.ComponentModel.PathWalker : object {
    public EventHandler`1<PathMemberInfoEventArgs> MemberFound;
    public EventHandler`1<PathErrorInfoEventArgs> PathErrorFound;
    public bool TryWalkPropertyPath(Type rootType, string path);
}
[FlagsAttribute]
internal enum System.Workflow.ComponentModel.PersistFlags : Enum {
    public byte value__;
    public static PersistFlags NeedsCompensation;
    public static PersistFlags ForcePersist;
}
[AttributeUsageAttribute("4")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.PersistOnCloseAttribute : Attribute {
}
[ActivityValidatorAttribute("System.Workflow.ComponentModel.Compiler.PropertyBindValidator")]
internal class System.Workflow.ComponentModel.PropertyBind : MemberBind {
    public string Path { get; public set; }
    public PropertyBind(string name);
    public PropertyBind(string name, string path);
    public string get_Path();
    public void set_Path(string value);
    public virtual object GetRuntimeValue(Activity activity, Type targetType);
    public virtual object GetRuntimeValue(Activity activity);
    public virtual void SetRuntimeValue(Activity activity, object value);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.PropertyMetadata : object {
    public object DefaultValue { get; public set; }
    public DependencyPropertyOptions Options { get; public set; }
    public bool IsMetaProperty { get; }
    public bool IsNonSerialized { get; }
    public bool IsReadOnly { get; }
    public GetValueOverride GetValueOverride { get; public set; }
    public SetValueOverride SetValueOverride { get; public set; }
    protected bool IsSealed { get; }
    internal bool ShouldAlwaysCallOverride { get; }
    public PropertyMetadata(object defaultValue);
    public PropertyMetadata(DependencyPropertyOptions options);
    public PropertyMetadata(object defaultValue, DependencyPropertyOptions options);
    public PropertyMetadata(object defaultValue, Attribute[] attributes);
    public PropertyMetadata(object defaultValue, DependencyPropertyOptions options, Attribute[] attributes);
    public PropertyMetadata(DependencyPropertyOptions options, Attribute[] attributes);
    public PropertyMetadata(Attribute[] attributes);
    public PropertyMetadata(object defaultValue, DependencyPropertyOptions options, GetValueOverride getValueOverride, SetValueOverride setValueOverride);
    public PropertyMetadata(object defaultValue, DependencyPropertyOptions options, GetValueOverride getValueOverride, SetValueOverride setValueOverride, Attribute[] attributes);
    internal PropertyMetadata(object defaultValue, DependencyPropertyOptions options, GetValueOverride getValueOverride, SetValueOverride setValueOverride, bool shouldAlwaysCallOverride, Attribute[] attributes);
    public Attribute[] GetAttributes();
    public Attribute[] GetAttributes(Type attributeType);
    public object get_DefaultValue();
    public void set_DefaultValue(object value);
    public DependencyPropertyOptions get_Options();
    public void set_Options(DependencyPropertyOptions value);
    public bool get_IsMetaProperty();
    public bool get_IsNonSerialized();
    public bool get_IsReadOnly();
    public GetValueOverride get_GetValueOverride();
    public void set_GetValueOverride(GetValueOverride value);
    public SetValueOverride get_SetValueOverride();
    public void set_SetValueOverride(SetValueOverride value);
    protected virtual void OnApply(DependencyProperty dependencyProperty, Type targetType);
    protected bool get_IsSealed();
    internal bool get_ShouldAlwaysCallOverride();
    internal void Seal(DependencyProperty dependencyProperty, Type targetType);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.QueueEventArgs : EventArgs {
    public IComparable QueueName { get; }
    internal QueueEventArgs(IComparable queueName);
    public IComparable get_QueueName();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.RemovedActivityAction : ActivityChangeAction {
    [DesignerSerializationVisibilityAttribute("1")]
public int RemovedActivityIndex { get; internal set; }
    [DesignerSerializationVisibilityAttribute("0")]
public Activity OriginalRemovedActivity { get; internal set; }
    public RemovedActivityAction(int removedActivityIndex, Activity originalActivity, CompositeActivity clonedParentActivity);
    public int get_RemovedActivityIndex();
    internal void set_RemovedActivityIndex(int value);
    public Activity get_OriginalRemovedActivity();
    internal void set_OriginalRemovedActivity(Activity value);
    protected internal virtual ValidationErrorCollection ValidateChanges(Activity contextActivity);
    protected internal virtual bool ApplyTo(Activity rootActivity);
}
internal abstract class System.Workflow.ComponentModel.SchedulableItem : object {
    public int ContextId { get; }
    public string ActivityId { get; }
    protected SchedulableItem(int contextId, string activityId);
    public int get_ContextId();
    public string get_ActivityId();
    public abstract virtual bool Run(IWorkflowCoreRuntime workflowCoreRuntime);
}
internal static class System.Workflow.ComponentModel.SequenceHelper : object {
    private static SequenceHelper();
    public static ActivityExecutionStatus Execute(CompositeActivity activity, ActivityExecutionContext executionContext);
    public static ActivityExecutionStatus Cancel(CompositeActivity activity, ActivityExecutionContext executionContext);
    public static void OnEvent(CompositeActivity activity, object sender, ActivityExecutionStatusChangedEventArgs e);
    public static void OnActivityChangeRemove(CompositeActivity activity, ActivityExecutionContext executionContext, Activity removedActivity);
    public static void OnWorkflowChangesCompleted(CompositeActivity activity, ActivityExecutionContext executionContext);
}
internal class System.Workflow.ComponentModel.Serialization.ActivityCodeDomReferenceService : object {
    public ActivityCodeDomReferenceService(IReferenceService referenceService);
    public sealed virtual Object[] GetReferences(Type baseType);
    public sealed virtual Object[] GetReferences();
    public sealed virtual IComponent GetComponent(object reference);
    public sealed virtual object GetReference(string name);
    public sealed virtual string GetName(object reference);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager : object {
    public ContextStack Context { get; }
    public PropertyDescriptorCollection Properties { get; }
    protected IDesignerSerializationManager SerializationManager { get; protected set; }
    public ActivityCodeDomSerializationManager(IDesignerSerializationManager manager);
    public sealed virtual void add_SerializationComplete(EventHandler value);
    public sealed virtual void remove_SerializationComplete(EventHandler value);
    public sealed virtual void SetName(object instance, string name);
    public sealed virtual string GetName(object value);
    public sealed virtual object CreateInstance(Type type, ICollection arguments, string name, bool addToContainer);
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual object GetSerializer(Type objectType, Type serializerType);
    public sealed virtual object GetInstance(string name);
    public sealed virtual void AddSerializationProvider(IDesignerSerializationProvider provider);
    public sealed virtual void RemoveSerializationProvider(IDesignerSerializationProvider provider);
    public sealed virtual void ReportError(object errorInformation);
    public sealed virtual ContextStack get_Context();
    public sealed virtual void add_ResolveName(ResolveNameEventHandler value);
    public sealed virtual void remove_ResolveName(ResolveNameEventHandler value);
    public sealed virtual PropertyDescriptorCollection get_Properties();
    public sealed virtual Type GetType(string typeName);
    protected IDesignerSerializationManager get_SerializationManager();
    protected void set_SerializationManager(IDesignerSerializationManager value);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializer : DependencyObjectCodeDomSerializer {
    public static DependencyProperty MarkupFileNameProperty;
    private static ActivityCodeDomSerializer();
    public virtual object Serialize(IDesignerSerializationManager manager, object obj);
}
internal class System.Workflow.ComponentModel.Serialization.ActivityCollectionMarkupSerializer : CollectionMarkupSerializer {
    protected internal virtual IList GetChildren(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected internal virtual void ClearChildren(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected internal virtual void AddChild(WorkflowMarkupSerializationManager serializationManager, object obj, object childObj);
}
internal class System.Workflow.ComponentModel.Serialization.ActivityExecutorSurrogate : object {
    public sealed virtual void GetObjectData(object obj, SerializationInfo info, StreamingContext context);
    public sealed virtual object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
}
internal class System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializationProvider : WorkflowMarkupSerializationProvider {
    public virtual object GetSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType);
}
[DefaultSerializationProviderAttribute("System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializationProvider")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer : WorkflowMarkupSerializer {
    public static DependencyProperty StartLineProperty;
    public static DependencyProperty StartColumnProperty;
    public static DependencyProperty EndLineProperty;
    public static DependencyProperty EndColumnProperty;
    private static ActivityMarkupSerializer();
    protected virtual void OnBeforeSerialize(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected virtual object CreateInstance(WorkflowMarkupSerializationManager serializationManager, Type type);
    protected virtual void OnAfterSerialize(WorkflowMarkupSerializationManager serializationManager, object obj);
    internal static void ReplaceChildActivities(CompositeActivity instanceActivity, CompositeActivity xomlActivity);
}
internal class System.Workflow.ComponentModel.Serialization.ActivitySurrogate : object {
    public sealed virtual void GetObjectData(object obj, SerializationInfo info, StreamingContext context);
    public sealed virtual object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector : SurrogateSelector {
    public static ActivitySurrogateSelector Default { get; }
    private static ActivitySurrogateSelector();
    public static ActivitySurrogateSelector get_Default();
    public virtual ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, ISurrogateSelector& selector);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Serialization.ActivityTypeCodeDomSerializer : TypeCodeDomSerializer {
    private static ActivityTypeCodeDomSerializer();
    protected virtual CodeMemberMethod GetInitializeMethod(IDesignerSerializationManager manager, CodeTypeDeclaration typeDecl, object value);
    protected virtual CodeMemberMethod[] GetInitializeMethods(IDesignerSerializationManager manager, CodeTypeDeclaration typeDecl);
    public virtual CodeTypeDeclaration Serialize(IDesignerSerializationManager manager, object root, ICollection members);
    public virtual object Deserialize(IDesignerSerializationManager manager, CodeTypeDeclaration declaration);
}
[ContentPropertyAttribute("Items")]
internal class System.Workflow.ComponentModel.Serialization.ArrayExtension : MarkupExtension {
    public Type Type { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public IList Items { get; }
    public ArrayExtension(Type arrayType);
    public ArrayExtension(Array elements);
    public Type get_Type();
    public void set_Type(Type value);
    public IList get_Items();
    public virtual object ProvideValue(IServiceProvider provider);
}
internal class System.Workflow.ComponentModel.Serialization.BindMarkupExtensionSerializer : MarkupExtensionSerializer {
    protected virtual InstanceDescriptor GetInstanceDescriptor(WorkflowMarkupSerializationManager serializationManager, object value);
}
internal class System.Workflow.ComponentModel.Serialization.CodeTypeReferenceSerializer : WorkflowMarkupSerializer {
    internal static string QualifiedName;
    protected internal virtual bool CanSerializeToString(WorkflowMarkupSerializationManager serializationManager, object value);
    protected internal virtual string SerializeToString(WorkflowMarkupSerializationManager serializationManager, object value);
    protected internal virtual object DeserializeFromString(WorkflowMarkupSerializationManager serializationManager, Type propertyType, string value);
}
internal class System.Workflow.ComponentModel.Serialization.CollectionMarkupSerializer : WorkflowMarkupSerializer {
    protected internal virtual IList GetChildren(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected internal virtual PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected internal virtual bool ShouldSerializeValue(WorkflowMarkupSerializationManager serializationManager, object value);
    protected internal virtual void ClearChildren(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected internal virtual void AddChild(WorkflowMarkupSerializationManager serializationManager, object parentObj, object childObj);
    internal static bool IsValidCollectionType(Type collectionType);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Serialization.CompositeActivityMarkupSerializer : ActivityMarkupSerializer {
    internal virtual void OnBeforeSerializeContents(WorkflowMarkupSerializationManager serializationManager, object obj);
}
internal class System.Workflow.ComponentModel.Serialization.CompositeActivityTypeDescriptor : CustomTypeDescriptor {
    public CompositeActivityTypeDescriptor(ICustomTypeDescriptor realTypeDescriptor);
    public virtual PropertyDescriptorCollection GetProperties(Attribute[] attributes);
}
internal class System.Workflow.ComponentModel.Serialization.CompositeActivityTypeDescriptorProvider : TypeDescriptionProvider {
    public virtual ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance);
}
[AttributeUsageAttribute("128")]
public class System.Workflow.ComponentModel.Serialization.ConstructorArgumentAttribute : Attribute {
    public string ArgumentName { get; }
    public ConstructorArgumentAttribute(string argumentName);
    public string get_ArgumentName();
}
[AttributeUsageAttribute("4")]
public class System.Workflow.ComponentModel.Serialization.ContentPropertyAttribute : Attribute {
    public string Name { get; }
    public ContentPropertyAttribute(string name);
    public string get_Name();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.Serialization.DependencyObjectCodeDomSerializer : CodeDomSerializer {
    public virtual object Serialize(IDesignerSerializationManager manager, object obj);
}
internal class System.Workflow.ComponentModel.Serialization.DependencyStoreSurrogate : object {
    private sealed virtual override void System.Runtime.Serialization.ISerializationSurrogate.GetObjectData(object obj, SerializationInfo info, StreamingContext context);
    private sealed virtual override object System.Runtime.Serialization.ISerializationSurrogate.SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
}
internal class System.Workflow.ComponentModel.Serialization.DictionaryMarkupSerializer : WorkflowMarkupSerializer {
    protected internal virtual IList GetChildren(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected internal virtual PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected internal virtual bool ShouldSerializeValue(WorkflowMarkupSerializationManager serializationManager, object value);
    protected internal virtual void ClearChildren(WorkflowMarkupSerializationManager serializationManager, object deserializedObject);
    protected internal virtual void AddChild(WorkflowMarkupSerializationManager serializationManager, object parentObj, object childObj);
    internal virtual void OnBeforeSerializeContents(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected virtual void OnAfterSerialize(WorkflowMarkupSerializationManager serializationManager, object obj);
    internal virtual void OnBeforeDeserializeContents(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected virtual void OnAfterDeserialize(WorkflowMarkupSerializationManager serializationManager, object obj);
    internal virtual ExtendedPropertyInfo[] GetExtendedProperties(WorkflowMarkupSerializationManager manager, object extendee);
}
internal class System.Workflow.ComponentModel.Serialization.DictionarySurrogate : object {
    private sealed virtual override void System.Runtime.Serialization.ISerializationSurrogate.GetObjectData(object obj, SerializationInfo info, StreamingContext context);
    private sealed virtual override object System.Runtime.Serialization.ISerializationSurrogate.SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
}
internal class System.Workflow.ComponentModel.Serialization.ExtendedPropertyInfo : PropertyInfo {
    internal PropertyInfo RealPropertyInfo { get; }
    internal WorkflowMarkupSerializationManager SerializationManager { get; }
    public string Name { get; }
    public Type DeclaringType { get; }
    public Type ReflectedType { get; }
    public Type PropertyType { get; }
    public PropertyAttributes Attributes { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    internal ExtendedPropertyInfo(PropertyInfo propertyInfo, GetValueHandler getValueHandler, SetValueHandler setValueHandler, GetQualifiedNameHandler qualifiedNameHandler);
    internal ExtendedPropertyInfo(PropertyInfo propertyInfo, GetValueHandler getValueHandler, SetValueHandler setValueHandler, GetQualifiedNameHandler qualifiedNameHandler, WorkflowMarkupSerializationManager manager);
    internal PropertyInfo get_RealPropertyInfo();
    internal WorkflowMarkupSerializationManager get_SerializationManager();
    public virtual string get_Name();
    public virtual Type get_DeclaringType();
    public virtual Type get_ReflectedType();
    public virtual Type get_PropertyType();
    public virtual MethodInfo[] GetAccessors(bool nonPublic);
    public virtual MethodInfo GetGetMethod(bool nonPublic);
    public virtual MethodInfo GetSetMethod(bool nonPublic);
    public virtual object GetValue(object obj, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture);
    public virtual void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture);
    public XmlQualifiedName GetXmlQualifiedName(WorkflowMarkupSerializationManager manager, String& prefix);
    public virtual ParameterInfo[] GetIndexParameters();
    public virtual PropertyAttributes get_Attributes();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    internal static bool IsExtendedProperty(WorkflowMarkupSerializationManager manager, XmlQualifiedName xmlQualifiedName);
    internal static bool IsExtendedProperty(WorkflowMarkupSerializationManager manager, IList`1<PropertyInfo> propInfos, XmlQualifiedName xmlQualifiedName);
}
internal class System.Workflow.ComponentModel.Serialization.GenericQueueSurrogate : object {
    private sealed virtual override void System.Runtime.Serialization.ISerializationSurrogate.GetObjectData(object obj, SerializationInfo info, StreamingContext context);
    private sealed virtual override object System.Runtime.Serialization.ISerializationSurrogate.SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
}
internal class System.Workflow.ComponentModel.Serialization.GetQualifiedNameHandler : MulticastDelegate {
    public GetQualifiedNameHandler(object object, IntPtr method);
    public virtual XmlQualifiedName Invoke(ExtendedPropertyInfo extendedProperty, WorkflowMarkupSerializationManager manager, String& prefix);
    public virtual IAsyncResult BeginInvoke(ExtendedPropertyInfo extendedProperty, WorkflowMarkupSerializationManager manager, String& prefix, AsyncCallback callback, object object);
    public virtual XmlQualifiedName EndInvoke(String& prefix, IAsyncResult result);
}
internal class System.Workflow.ComponentModel.Serialization.GetValueHandler : MulticastDelegate {
    public GetValueHandler(object object, IntPtr method);
    public virtual object Invoke(ExtendedPropertyInfo extendedProperty, object extendee);
    public virtual IAsyncResult BeginInvoke(ExtendedPropertyInfo extendedProperty, object extendee, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal interface System.Workflow.ComponentModel.Serialization.ITypeAuthorizer {
    public abstract virtual bool IsTypeAuthorized(Type typeToAuthorize);
}
internal class System.Workflow.ComponentModel.Serialization.ListSurrogate : object {
    private sealed virtual override void System.Runtime.Serialization.ISerializationSurrogate.GetObjectData(object obj, SerializationInfo info, StreamingContext context);
    private sealed virtual override object System.Runtime.Serialization.ISerializationSurrogate.SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
}
public abstract class System.Workflow.ComponentModel.Serialization.MarkupExtension : object {
    public abstract virtual object ProvideValue(IServiceProvider provider);
}
internal class System.Workflow.ComponentModel.Serialization.MarkupExtensionSerializer : WorkflowMarkupSerializer {
    protected internal sealed virtual bool CanSerializeToString(WorkflowMarkupSerializationManager serializationManager, object value);
    protected internal sealed virtual string SerializeToString(WorkflowMarkupSerializationManager serializationManager, object value);
    protected virtual InstanceDescriptor GetInstanceDescriptor(WorkflowMarkupSerializationManager serializationManager, object value);
}
internal class System.Workflow.ComponentModel.Serialization.ModifyActivitiesPropertyDescriptor : PropertyDescriptor {
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public ModifyActivitiesPropertyDescriptor(PropertyInfo propInfo);
    public virtual bool CanResetValue(object component);
    public virtual Type get_ComponentType();
    public virtual object GetValue(object component);
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.MarkupExtensionSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
internal class System.Workflow.ComponentModel.Serialization.NullExtension : MarkupExtension {
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
internal class System.Workflow.ComponentModel.Serialization.PrimitiveCodeDomSerializer : CodeDomSerializer {
    internal static PrimitiveCodeDomSerializer Default { get; }
    private static PrimitiveCodeDomSerializer();
    internal static PrimitiveCodeDomSerializer get_Default();
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
internal class System.Workflow.ComponentModel.Serialization.PropertySegmentSerializationProvider : WorkflowMarkupSerializationProvider {
    public virtual object GetSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType);
}
internal class System.Workflow.ComponentModel.Serialization.PropertySegmentSerializer : WorkflowMarkupSerializer {
    public PropertySegmentSerializer(WorkflowMarkupSerializer containedSerializer);
    protected internal virtual PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected virtual object CreateInstance(WorkflowMarkupSerializationManager serializationManager, Type type);
    protected internal virtual bool ShouldSerializeValue(WorkflowMarkupSerializationManager serializationManager, object value);
    protected internal virtual bool CanSerializeToString(WorkflowMarkupSerializationManager serializationManager, object value);
    protected internal virtual string SerializeToString(WorkflowMarkupSerializationManager serializationManager, object value);
    protected internal virtual object DeserializeFromString(WorkflowMarkupSerializationManager serializationManager, Type propertyType, string value);
    protected internal virtual IList GetChildren(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected internal virtual void ClearChildren(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected internal virtual void AddChild(WorkflowMarkupSerializationManager serializationManager, object obj, object childObj);
}
internal class System.Workflow.ComponentModel.Serialization.QueueSurrogate : object {
    private sealed virtual override void System.Runtime.Serialization.ISerializationSurrogate.GetObjectData(object obj, SerializationInfo info, StreamingContext context);
    private sealed virtual override object System.Runtime.Serialization.ISerializationSurrogate.SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
}
[AttributeUsageAttribute("4")]
public class System.Workflow.ComponentModel.Serialization.RuntimeNamePropertyAttribute : Attribute {
    public string Name { get; }
    public RuntimeNamePropertyAttribute(string name);
    public string get_Name();
}
internal class System.Workflow.ComponentModel.Serialization.SerializableTypeCodeDomSerializer : CodeDomSerializer {
    public SerializableTypeCodeDomSerializer(CodeDomSerializer originalSerializer);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
internal class System.Workflow.ComponentModel.Serialization.SetValueHandler : MulticastDelegate {
    public SetValueHandler(object object, IntPtr method);
    public virtual void Invoke(ExtendedPropertyInfo extendedProperty, object extendee, object value);
    public virtual IAsyncResult BeginInvoke(ExtendedPropertyInfo extendedProperty, object extendee, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Workflow.ComponentModel.Serialization.SimpleTypesSurrogate : object {
    private sealed virtual override void System.Runtime.Serialization.ISerializationSurrogate.GetObjectData(object obj, SerializationInfo info, StreamingContext context);
    private sealed virtual override object System.Runtime.Serialization.ISerializationSurrogate.SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
}
internal static class System.Workflow.ComponentModel.Serialization.StandardXomlKeys : object {
    internal static string WorkflowXmlNs;
    internal static string WorkflowPrefix;
    internal static string CLRNamespaceQualifier;
    internal static string AssemblyNameQualifier;
    internal static string GlobalNamespace;
    internal static string MarkupExtensionSuffix;
    internal static string Definitions_XmlNs;
    internal static string Definitions_XmlNs_Prefix;
    internal static string Definitions_Class_LocalName;
    internal static string Definitions_Code_LocalName;
    internal static string Definitions_ActivityVisible_LocalName;
    internal static string Definitions_ActivityEditable_LocalName;
    internal static string Definitions_Type_LocalName;
}
internal class System.Workflow.ComponentModel.Serialization.StringCollectionMarkupSerializer : WorkflowMarkupSerializer {
    protected internal virtual PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager manager, object obj);
    protected internal virtual bool CanSerializeToString(WorkflowMarkupSerializationManager serializationManager, object value);
    protected internal virtual string SerializeToString(WorkflowMarkupSerializationManager serializationManager, object value);
    protected internal virtual object DeserializeFromString(WorkflowMarkupSerializationManager serializationManager, Type propertyType, string value);
}
internal class System.Workflow.ComponentModel.Serialization.SynchronizationHandlesCodeDomSerializer : CodeDomSerializer {
    public virtual object Serialize(IDesignerSerializationManager manager, object obj);
}
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.TypeExtensionSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
internal class System.Workflow.ComponentModel.Serialization.TypeExtension : MarkupExtension {
    [DefaultValueAttribute("")]
[ConstructorArgumentAttribute("type")]
public string TypeName { get; public set; }
    internal Type Type { get; }
    public TypeExtension(string type);
    public TypeExtension(Type type);
    public virtual object ProvideValue(IServiceProvider provider);
    public string get_TypeName();
    public void set_TypeName(string value);
    internal Type get_Type();
}
internal class System.Workflow.ComponentModel.Serialization.TypeExtensionSerializer : MarkupExtensionSerializer {
    protected virtual InstanceDescriptor GetInstanceDescriptor(WorkflowMarkupSerializationManager serializationManager, object value);
}
internal class System.Workflow.ComponentModel.Serialization.WorkflowMarkupElementEventArgs : EventArgs {
    public XmlReader XmlReader { get; }
    internal WorkflowMarkupElementEventArgs(XmlReader reader);
    public XmlReader get_XmlReader();
}
public class System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException : Exception {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public WorkflowMarkupSerializationException(string message, int lineNumber, int columnNumber);
    public WorkflowMarkupSerializationException(string message, Exception innerException, int lineNumber, int columnNumber);
    public WorkflowMarkupSerializationException(string message, Exception innerException);
    public WorkflowMarkupSerializationException(string message);
    protected WorkflowMarkupSerializationException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public int get_LineNumber();
    public int get_LinePosition();
}
internal static class System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationHelpers : object {
    internal static String[] standardNamespaces;
    internal static ITypeAuthorizer TypeAuthorizer;
    internal static ITypeAuthorizer SerializationTypeAuthorizer;
    private static WorkflowMarkupSerializationHelpers();
    public static Activity LoadXomlDocument(WorkflowMarkupSerializationManager xomlSerializationManager, XmlReader textReader, string fileName);
    internal static Activity LoadXomlDocument(WorkflowMarkupSerializationManager xomlSerializationManager, XmlReader textReader, string fileName, ITypeAuthorizer typeAuthorizer);
    internal static void ProcessDefTag(WorkflowMarkupSerializationManager serializationManager, XmlReader reader, Activity activity, bool newSegment, string fileName);
    internal static CodeNamespaceCollection GenerateCodeFromXomlDocument(Activity rootActivity, string filePath, string rootNamespace, SupportedLanguages language, IServiceProvider serviceProvider);
    internal static void FixStandardNamespacesAndRootNamespace(CodeNamespaceCollection codeNamespaces, string rootNS, SupportedLanguages language);
    internal static void ReapplyRootNamespace(CodeNamespaceCollection codeNamespaces, string rootNS, SupportedLanguages language);
    internal static string GetEventHandlerName(object owner, string eventName);
    internal static void SetEventHandlerName(object owner, string eventName, string value);
}
public class System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager : object {
    public ContextStack Context { get; }
    internal Stack SerializationStack { get; }
    protected internal IDesignerSerializationManager SerializationManager { get; protected internal set; }
    public Assembly LocalAssembly { get; public set; }
    internal int WriterDepth { get; internal set; }
    internal ContextStack WorkflowMarkupStack { get; }
    internal IDictionary`2<int, WorkflowMarkupSerializerMapping> ClrNamespaceBasedMappings { get; }
    internal IDictionary`2<string, List`1<WorkflowMarkupSerializerMapping>> XmlNamespaceBasedMappings { get; }
    internal Dictionary`2<string, List`1<WorkflowMarkupSerializerMapping>> PrefixBasedMappings { get; }
    internal IList`1<WorkflowMarkupSerializer> ExtendedPropertiesProviders { get; }
    private PropertyDescriptorCollection System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties { get; }
    public WorkflowMarkupSerializationManager(IDesignerSerializationManager manager);
    [CompilerGeneratedAttribute]
internal void add_FoundDefTag(EventHandler`1<WorkflowMarkupElementEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_FoundDefTag(EventHandler`1<WorkflowMarkupElementEventArgs> value);
    public sealed virtual ContextStack get_Context();
    internal void ContextPush(object objectToPush);
    internal void ContextPop();
    internal Stack get_SerializationStack();
    public sealed virtual void ReportError(object errorInformation);
    protected internal IDesignerSerializationManager get_SerializationManager();
    protected internal void set_SerializationManager(IDesignerSerializationManager value);
    public sealed virtual void AddSerializationProvider(IDesignerSerializationProvider provider);
    public sealed virtual void RemoveSerializationProvider(IDesignerSerializationProvider provider);
    public Assembly get_LocalAssembly();
    public void set_LocalAssembly(Assembly value);
    public virtual XmlQualifiedName GetXmlQualifiedName(Type type, String& prefix);
    public virtual Type GetType(XmlQualifiedName xmlQualifiedName);
    public sealed virtual object GetSerializer(Type objectType, Type serializerType);
    public virtual Type GetType(string typeName);
    internal int get_WriterDepth();
    internal void set_WriterDepth(int value);
    internal ContextStack get_WorkflowMarkupStack();
    internal void FireFoundDefTag(WorkflowMarkupElementEventArgs args);
    internal IDictionary`2<int, WorkflowMarkupSerializerMapping> get_ClrNamespaceBasedMappings();
    internal IDictionary`2<string, List`1<WorkflowMarkupSerializerMapping>> get_XmlNamespaceBasedMappings();
    internal Dictionary`2<string, List`1<WorkflowMarkupSerializerMapping>> get_PrefixBasedMappings();
    internal void AddMappings(IList`1<WorkflowMarkupSerializerMapping> mappingsToAdd);
    internal IList`1<WorkflowMarkupSerializer> get_ExtendedPropertiesProviders();
    internal ExtendedPropertyInfo[] GetExtendedProperties(object extendee);
    private sealed virtual override object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(Type type, ICollection arguments, string name, bool addToContainer);
    private sealed virtual override object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(string name);
    private sealed virtual override string System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(object value);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.Design.Serialization.IDesignerSerializationManager.get_Properties();
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.add_ResolveName(ResolveNameEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.remove_ResolveName(ResolveNameEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.add_SerializationComplete(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.remove_SerializationComplete(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(object instance, string name);
    public sealed virtual object GetService(Type serviceType);
}
internal class System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationProvider : object {
    public virtual object GetSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType);
}
[DefaultSerializationProviderAttribute("System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationProvider")]
public class System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer : object {
    public static DependencyProperty XClassProperty;
    public static DependencyProperty XCodeProperty;
    public static DependencyProperty EventsProperty;
    public static DependencyProperty ClrNamespacesProperty;
    private static WorkflowMarkupSerializer();
    public object Deserialize(XmlReader reader);
    public object Deserialize(IDesignerSerializationManager serializationManager, XmlReader reader);
    public void Serialize(XmlWriter writer, object obj);
    public void Serialize(IDesignerSerializationManager serializationManager, XmlWriter writer, object obj);
    internal object DeserializeObject(WorkflowMarkupSerializationManager serializationManager, XmlReader reader);
    internal void SerializeObject(WorkflowMarkupSerializationManager serializationManager, object obj, XmlWriter writer);
    internal void SerializeContents(WorkflowMarkupSerializationManager serializationManager, object obj, XmlWriter writer, bool dictionaryKey);
    protected virtual void OnBeforeSerialize(WorkflowMarkupSerializationManager serializationManager, object obj);
    internal virtual void OnBeforeSerializeContents(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected virtual void OnAfterSerialize(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected virtual void OnBeforeDeserialize(WorkflowMarkupSerializationManager serializationManager, object obj);
    internal virtual void OnBeforeDeserializeContents(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected virtual void OnAfterDeserialize(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected internal virtual bool ShouldSerializeValue(WorkflowMarkupSerializationManager serializationManager, object value);
    protected internal virtual bool CanSerializeToString(WorkflowMarkupSerializationManager serializationManager, object value);
    protected internal virtual string SerializeToString(WorkflowMarkupSerializationManager serializationManager, object value);
    protected internal virtual object DeserializeFromString(WorkflowMarkupSerializationManager serializationManager, Type propertyType, string value);
    protected internal virtual IList GetChildren(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected internal virtual void ClearChildren(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected internal virtual void AddChild(WorkflowMarkupSerializationManager serializationManager, object parentObject, object childObj);
    protected virtual object CreateInstance(WorkflowMarkupSerializationManager serializationManager, Type type);
    protected internal virtual PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected internal virtual EventInfo[] GetEvents(WorkflowMarkupSerializationManager serializationManager, object obj);
    internal virtual ExtendedPropertyInfo[] GetExtendedProperties(WorkflowMarkupSerializationManager manager, object extendee);
    internal static WorkflowMarkupSerializationException CreateSerializationError(Exception e, XmlReader reader);
    internal static WorkflowMarkupSerializationException CreateSerializationError(string message, XmlReader reader);
    internal static WorkflowMarkupSerializationException CreateSerializationError(string message, Exception e, XmlReader reader);
    internal bool IsValidCompactAttributeFormat(string attributeValue);
    internal object DeserializeFromCompactFormat(WorkflowMarkupSerializationManager serializationManager, XmlReader reader, string attrValue);
    internal static string EnsureMarkupExtensionTypeName(Type type);
    internal static string EnsureMarkupExtensionTypeName(XmlQualifiedName xmlQualifiedName);
}
internal class System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializerMapping : object {
    public string ClrNamespace { get; }
    public string XmlNamespace { get; }
    public string AssemblyName { get; }
    public string Prefix { get; }
    internal static IList`1<WorkflowMarkupSerializerMapping> WellKnownMappings { get; }
    private static WorkflowMarkupSerializerMapping();
    public WorkflowMarkupSerializerMapping(string prefix, string xmlNamespace, string clrNamespace, string assemblyName);
    public WorkflowMarkupSerializerMapping(string prefix, string xmlNamespace, string clrNamespace, string targetAssemblyName, string unifiedAssemblyName);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public string get_ClrNamespace();
    public string get_XmlNamespace();
    public string get_AssemblyName();
    public string get_Prefix();
    internal static IList`1<WorkflowMarkupSerializerMapping> get_WellKnownMappings();
    internal static Type ResolveWellKnownTypes(WorkflowMarkupSerializationManager manager, string xmlns, string typeName);
    internal static void GetMappingsFromXmlNamespace(WorkflowMarkupSerializationManager serializationManager, string xmlNamespace, IList`1& matchingMappings, IList`1& collectedMappings);
    internal static void GetMappingFromType(WorkflowMarkupSerializationManager manager, Type type, WorkflowMarkupSerializerMapping& matchingMapping, IList`1& collectedMappings);
}
internal class System.Workflow.ComponentModel.Serialization.XmlDocumentSurrogate : object {
    private sealed virtual override void System.Runtime.Serialization.ISerializationSurrogate.GetObjectData(object obj, SerializationInfo info, StreamingContext context);
    private sealed virtual override object System.Runtime.Serialization.ISerializationSurrogate.SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
}
[AttributeUsageAttribute("1")]
public class System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute : Attribute {
    public string XmlNamespace { get; }
    public string ClrNamespace { get; }
    public string AssemblyName { get; public set; }
    public XmlnsDefinitionAttribute(string xmlNamespace, string clrNamespace);
    public string get_XmlNamespace();
    public string get_ClrNamespace();
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
}
[AttributeUsageAttribute("1")]
public class System.Workflow.ComponentModel.Serialization.XmlnsPrefixAttribute : Attribute {
    public string XmlNamespace { get; }
    public string Prefix { get; }
    public XmlnsPrefixAttribute(string xmlNamespace, string prefix);
    public string get_XmlNamespace();
    public string get_Prefix();
}
public class System.Workflow.ComponentModel.SetValueOverride : MulticastDelegate {
    public SetValueOverride(object object, IntPtr method);
    public virtual void Invoke(DependencyObject d, object value);
    public virtual IAsyncResult BeginInvoke(DependencyObject d, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Workflow.ComponentModel.SourceValueInfo : ValueType {
    internal SourceValueType type;
    internal DrillIn drillIn;
    internal string name;
    internal SourceValueInfo(SourceValueType t, DrillIn d, string n);
}
internal enum System.Workflow.ComponentModel.SourceValueType : Enum {
    public int value__;
    public static SourceValueType Property;
    public static SourceValueType Indexer;
}
internal class System.Workflow.ComponentModel.StateRevertedEventArgs : EventArgs {
    public Exception Exception;
    public StateRevertedEventArgs(Exception exception);
}
[AttributeUsageAttribute("4")]
internal class System.Workflow.ComponentModel.SupportsSynchronizationAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
internal class System.Workflow.ComponentModel.SupportsTransactionAttribute : Attribute {
}
[SRDescriptionAttribute("SuspendActivityDescription")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[DesignerAttribute("System.Workflow.ComponentModel.Design.SuspendDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxBitmapAttribute("System.Workflow.ComponentModel.SuspendActivity", "Resources.Suspend.png")]
[ActivityValidatorAttribute("System.Workflow.ComponentModel.SuspendValidator")]
[SRCategoryAttribute("Standard")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.SuspendActivity : Activity {
    public static DependencyProperty ErrorProperty;
    [BrowsableAttribute("True")]
[SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("SuspendErrorMessageDescr")]
[MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
public string Error { get; public set; }
    public SuspendActivity(string name);
    private static SuspendActivity();
    protected internal virtual void Initialize(IServiceProvider provider);
    protected internal sealed virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    public string get_Error();
    public void set_Error(string value);
}
internal class System.Workflow.ComponentModel.SuspendValidator : ActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
internal class System.Workflow.ComponentModel.SynchronizationFilter : ActivityExecutionFilter {
    public virtual ActivityExecutionStatus Execute(Activity activity, ActivityExecutionContext executionContext);
    public sealed virtual void OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e);
    public sealed virtual void OnEvent(object sender, EventArgs e);
}
internal class System.Workflow.ComponentModel.SynchronizationHandlesEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
}
internal class System.Workflow.ComponentModel.SynchronizationHandlesTypeConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    internal static string Stringify(ICollection`1<string> synchronizationHandles);
    internal static ICollection`1<string> UnStringify(string stringifiedValue);
}
[SRDescriptionAttribute("SynchronizationScopeActivityDescription")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[ToolboxBitmapAttribute("System.Workflow.ComponentModel.SynchronizationScopeActivity", "Resources.Sequence.png")]
[SupportsSynchronizationAttribute]
[DesignerAttribute("System.Workflow.ComponentModel.Design.SequenceDesigner", "System.ComponentModel.Design.IDesigner")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.SynchronizationScopeActivity : CompositeActivity {
    [SRDisplayNameAttribute("SynchronizationHandles")]
[SRDescriptionAttribute("SynchronizationHandlesDesc")]
[TypeConverterAttribute("System.Workflow.ComponentModel.SynchronizationHandlesTypeConverter")]
[EditorAttribute("System.Workflow.ComponentModel.SynchronizationHandlesEditor", "System.Drawing.Design.UITypeEditor")]
public ICollection`1<string> SynchronizationHandles { get; public set; }
    public SynchronizationScopeActivity(string name);
    public ICollection`1<string> get_SynchronizationHandles();
    public void set_SynchronizationHandles(ICollection`1<string> value);
    protected internal virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected internal virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e);
    protected internal virtual void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity);
    protected internal virtual void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext);
}
[SRDescriptionAttribute("TerminateActivityDescription")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[DesignerAttribute("System.Workflow.ComponentModel.Design.TerminateDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxBitmapAttribute("System.Workflow.ComponentModel.TerminateActivity", "Resources.Terminate.png")]
[SRCategoryAttribute("Standard")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.TerminateActivity : Activity {
    public static DependencyProperty ErrorProperty;
    [BrowsableAttribute("True")]
[SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("TerminateErrorMessageDescr")]
[MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
public string Error { get; public set; }
    public TerminateActivity(string name);
    private static TerminateActivity();
    protected internal virtual void Initialize(IServiceProvider provider);
    protected internal sealed virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    public string get_Error();
    public void set_Error(string value);
}
[SRDescriptionAttribute("FaultActivityDescription")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[DesignerAttribute("System.Workflow.ComponentModel.Design.ThrowDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxBitmapAttribute("System.Workflow.ComponentModel.ThrowActivity", "Resources.Throw.png")]
[SRCategoryAttribute("Standard")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.ThrowActivity : Activity {
    [BrowsableAttribute("False")]
public static DependencyProperty FaultProperty;
    [BrowsableAttribute("False")]
public static DependencyProperty FaultTypeProperty;
    [TypeConverterAttribute("System.Workflow.ComponentModel.ThrowActivity/FaultConverter")]
[SRCategoryAttribute("Handlers")]
[SRDescriptionAttribute("FaultDescription")]
[MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
public Exception Fault { get; public set; }
    [EditorAttribute("System.Workflow.ComponentModel.Design.TypeBrowserEditor", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("Handlers")]
[SRDescriptionAttribute("FaultTypeDescription")]
[MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.Workflow.ComponentModel.ThrowActivity/FaultTypeConverter")]
public Type FaultType { get; public set; }
    private string System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription { get; }
    public ThrowActivity(string name);
    private static ThrowActivity();
    protected internal virtual void Initialize(IServiceProvider provider);
    protected internal sealed virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    public Exception get_Fault();
    public void set_Fault(Exception value);
    public Type get_FaultType();
    public void set_FaultType(Type value);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(Type type, bool throwOnError);
    private sealed virtual override string System.Workflow.ComponentModel.Design.ITypeFilterProvider.get_FilterDescription();
    private sealed virtual override Type System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider serviceProvider, string propertyName);
    private sealed virtual override AccessTypes System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider serviceProvider, string propertyName);
}
internal class System.Workflow.ComponentModel.TimeoutDurationConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class System.Workflow.ComponentModel.TransactedContextFilter : ActivityExecutionFilter {
    public virtual ActivityExecutionStatus Execute(Activity activity, ActivityExecutionContext executionContext);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.EventArgs>.OnEvent(object sender, EventArgs e);
    internal static WorkflowTransactionOptions GetTransactionOptions(Activity activity);
}
[SRDescriptionAttribute("TransactionalContextActivityDescription")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[ToolboxBitmapAttribute("System.Workflow.ComponentModel.TransactionScopeActivity", "Resources.Sequence.png")]
[DesignerAttribute("System.Workflow.ComponentModel.Design.TransactionScopeActivityDesigner", "System.ComponentModel.Design.IDesigner")]
[PersistOnCloseAttribute]
[SupportsTransactionAttribute]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.TransactionScopeActivity : CompositeActivity {
    internal static DependencyProperty TransactionOptionsProperty;
    internal static string TransactionScopeActivityIsolationHandle;
    [SRDescriptionAttribute("TransactionDesc")]
[MergablePropertyAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
[ReadOnlyAttribute("True")]
public WorkflowTransactionOptions TransactionOptions { get; public set; }
    public TransactionScopeActivity(string name);
    private static TransactionScopeActivity();
    public WorkflowTransactionOptions get_TransactionOptions();
    public void set_TransactionOptions(WorkflowTransactionOptions value);
    protected internal virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected internal virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e);
    protected internal virtual void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity);
    protected internal virtual void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext);
}
internal static class System.Workflow.ComponentModel.UserDataKeys : object {
    internal static Guid LookupPaths;
    internal static Guid BindDataSource;
    internal static Guid BindDataContextActivity;
    internal static Guid CodeSegment_New;
    internal static Guid CodeSegment_ColumnNumber;
    internal static Guid CustomActivityDefaultName;
    internal static Guid NewBaseType;
    internal static Guid DesignTimeTypeNames;
    internal static Guid CustomActivity;
    private static UserDataKeys();
}
internal class System.Workflow.ComponentModel.Walker : object {
    public Walker(bool useEnabledActivities);
    [CompilerGeneratedAttribute]
internal void add_FoundActivity(WalkerEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_FoundActivity(WalkerEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_FoundProperty(WalkerEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_FoundProperty(WalkerEventHandler value);
    public void Walk(Activity seedActivity);
    public void Walk(Activity seedActivity, bool walkChildren);
    public bool WalkProperties(Activity activity, object obj);
}
internal enum System.Workflow.ComponentModel.WalkerAction : Enum {
    public int value__;
    public static WalkerAction Continue;
    public static WalkerAction Skip;
    public static WalkerAction Abort;
}
internal class System.Workflow.ComponentModel.WalkerEventArgs : EventArgs {
    public WalkerAction Action { get; public set; }
    public PropertyInfo CurrentProperty { get; }
    public object CurrentPropertyOwner { get; }
    public object CurrentValue { get; }
    public Activity CurrentActivity { get; }
    internal WalkerEventArgs(Activity currentActivity);
    internal WalkerEventArgs(Activity currentActivity, object currentValue, PropertyInfo currentProperty, object currentPropertyOwner);
    public WalkerAction get_Action();
    public void set_Action(WalkerAction value);
    public PropertyInfo get_CurrentProperty();
    public object get_CurrentPropertyOwner();
    public object get_CurrentValue();
    public Activity get_CurrentActivity();
}
internal class System.Workflow.ComponentModel.WalkerEventHandler : MulticastDelegate {
    public WalkerEventHandler(object object, IntPtr method);
    public virtual void Invoke(Walker walker, WalkerEventArgs eventArgs);
    public virtual IAsyncResult BeginInvoke(Walker walker, WalkerEventArgs eventArgs, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.ComponentModel.WorkflowChangeAction : object {
    protected internal abstract virtual bool ApplyTo(Activity rootActivity);
    protected internal abstract virtual ValidationErrorCollection ValidateChanges(Activity activity);
}
internal class System.Workflow.ComponentModel.WorkflowChangeActionsResolveEventArgs : EventArgs {
    public string WorkflowChangesMarkup { get; }
    public WorkflowChangeActionsResolveEventArgs(string workflowChangesMarkup);
    public string get_WorkflowChangesMarkup();
}
internal class System.Workflow.ComponentModel.WorkflowChangeActionsResolveEventHandler : MulticastDelegate {
    public WorkflowChangeActionsResolveEventHandler(object object, IntPtr method);
    public virtual ArrayList Invoke(object sender, WorkflowChangeActionsResolveEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WorkflowChangeActionsResolveEventArgs e, AsyncCallback callback, object object);
    public virtual ArrayList EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.WorkflowChanges : object {
    public static DependencyProperty ConditionProperty;
    internal static DependencyProperty WorkflowChangeActionsProperty;
    internal static DependencyProperty WorkflowChangeVersionProperty;
    public CompositeActivity TransientWorkflow { get; }
    public WorkflowChanges(Activity rootActivity);
    private static WorkflowChanges();
    public static object GetCondition(object dependencyObject);
    public static void SetCondition(object dependencyObject, object value);
    public CompositeActivity get_TransientWorkflow();
    public ValidationErrorCollection Validate();
    internal void ApplyTo(Activity activity);
    internal static bool IsActivityExecutable(Activity activity);
    internal static TypeProvider CreateTypeProvider(Activity rootActivity);
}
[BrowsableAttribute("True")]
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.DependencyObjectCodeDomSerializer", "System.ComponentModel.Design.Serialization.CodeDomSerializer")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.WorkflowParameterBinding : DependencyObject {
    public static DependencyProperty ParameterNameProperty;
    public static DependencyProperty ValueProperty;
    [DefaultValueAttribute("")]
public object Value { get; public set; }
    public string ParameterName { get; public set; }
    public WorkflowParameterBinding(string parameterName);
    private static WorkflowParameterBinding();
    public object get_Value();
    public void set_Value(object value);
    public string get_ParameterName();
    public void set_ParameterName(string value);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.WorkflowParameterBindingCollection : KeyedCollection`2<string, WorkflowParameterBinding> {
    public WorkflowParameterBindingCollection(Activity ownerActivity);
    public WorkflowParameterBinding GetItem(string key);
    protected virtual string GetKeyForItem(WorkflowParameterBinding item);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, WorkflowParameterBinding item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, WorkflowParameterBinding item);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.WorkflowTerminatedException : Exception {
    private WorkflowTerminatedException(SerializationInfo info, StreamingContext context);
    public WorkflowTerminatedException(string message);
    public WorkflowTerminatedException(string message, Exception exception);
}
[BrowsableAttribute("True")]
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.DependencyObjectCodeDomSerializer", "System.ComponentModel.Design.Serialization.CodeDomSerializer")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.ComponentModel.WorkflowTransactionOptions : DependencyObject {
    public static DependencyProperty TimeoutDurationProperty;
    public static DependencyProperty IsolationLevelProperty;
    [SRDescriptionAttribute("TimeoutDescr")]
[SRCategoryAttribute("Activity")]
[MergablePropertyAttribute("False")]
[DefaultValueAttribute("System.TimeSpan", "0:0:30")]
[TypeConverterAttribute("System.Workflow.ComponentModel.TimeoutDurationConverter")]
public TimeSpan TimeoutDuration { get; public set; }
    [SRDescriptionAttribute("IsolationLevelDescr")]
[SRCategoryAttribute("Activity")]
[MergablePropertyAttribute("False")]
public IsolationLevel IsolationLevel { get; public set; }
    private static WorkflowTransactionOptions();
    public TimeSpan get_TimeoutDuration();
    public void set_TimeoutDuration(TimeSpan value);
    public IsolationLevel get_IsolationLevel();
    public void set_IsolationLevel(IsolationLevel value);
}
internal static class System.Workflow.Interop.NativeMethods : object {
    internal static int HDI_WIDTH;
    internal static int HDI_HEIGHT;
    internal static int HDI_TEXT;
    internal static int HDI_FORMAT;
    internal static int HDI_LPARAM;
    internal static int HDI_BITMAP;
    internal static int HDI_IMAGE;
    internal static int HDI_DI_SETITEM;
    internal static int HDI_ORDER;
    internal static int HDI_FILTER;
    internal static int HDF_LEFT;
    internal static int HDF_RIGHT;
    internal static int HDF_CENTER;
    internal static int HDF_JUSTIFYMASK;
    internal static int HDF_RTLREADING;
    internal static int HDF_OWNERDRAW;
    internal static int HDF_STRING;
    internal static int HDF_BITMAP;
    internal static int HDF_BITMAP_ON_RIGHT;
    internal static int HDF_IMAGE;
    internal static int HDF_SORTUP;
    internal static int HDF_SORTDOWN;
    internal static int LVM_GETHEADER;
    internal static int HDM_GETITEM;
    internal static int HDM_SETITEM;
    internal static int HORZRES;
    internal static int VERTRES;
    internal static int LOGPIXELSX;
    internal static int LOGPIXELSY;
    internal static int PHYSICALWIDTH;
    internal static int PHYSICALHEIGHT;
    internal static int PHYSICALOFFSETX;
    internal static int PHYSICALOFFSETY;
    internal static int WM_SETREDRAW;
    internal static int HOLLOW_BRUSH;
    internal static int OBJ_PEN;
    internal static int OBJ_BRUSH;
    internal static int OBJ_EXTPEN;
    internal static int GM_ADVANCED;
    internal static int PS_COSMETIC;
    internal static int PS_USERSTYLE;
    internal static int BS_SOLID;
    internal static int WS_POPUP;
    internal static int WS_EX_DLGMODALFRAME;
    internal static int WM_SETICON;
    internal static int SMALL_ICON;
    internal static int LARGE_ICON;
    internal static int PS_SOLID;
    internal static int SWP_NOSIZE;
    internal static int SWP_NOZORDER;
    internal static int SWP_NOACTIVATE;
    internal static int WM_NOTIFY;
    internal static int WM_SETFONT;
    internal static int WS_EX_TOPMOST;
    internal static int WM_KEYDOWN;
    internal static int WM_KEYUP;
    internal static int WM_SYSKEYDOWN;
    internal static int WM_SYSKEYUP;
    internal static int TTF_IDISHWND;
    internal static int TTF_CENTERTIP;
    internal static int TTF_RTLREADING;
    internal static int TTF_SUBCLASS;
    internal static int TTF_TRACK;
    internal static int TTF_ABSOLUTE;
    internal static int TTF_TRANSPARENT;
    internal static int TTF_PARSELINKS;
    internal static int TTF_DI_SETITEM;
    internal static int TTS_ALWAYSTIP;
    internal static int TTS_NOPREFIX;
    internal static int TTS_NOANIMATE;
    internal static int TTS_NOFADE;
    internal static int TTS_BALLOON;
    internal static int TTS_CLOSE;
    internal static int TTDT_AUTOMATIC;
    internal static int TTDT_RESHOW;
    internal static int TTDT_AUTOPOP;
    internal static int TTDT_INITIAL;
    internal static int TTI_NONE;
    internal static int TTI_INFO;
    internal static int TTI_WARNING;
    internal static int TTI_ERROR;
    internal static int TTN_GETDISPINFO;
    internal static int TTN_NEEDTEXT;
    internal static int TTN_SHOW;
    internal static int TTN_POP;
    internal static int TTM_POP;
    internal static int TTM_ADDTOOL;
    internal static int TTM_SETTITLE;
    internal static int TTM_DELTOOL;
    internal static int TTM_NEWTOOLRECT;
    internal static int TTM_GETTOOLINFO;
    internal static int TTM_SETTOOLINFO;
    internal static int TTM_HITTEST;
    internal static int TTM_GETTEXT;
    internal static int TTM_UPDATETIPTEXT;
    internal static int TTM_ENUMTOOLS;
    internal static int TTM_GETCURRENTTOOL;
    internal static int TTM_TRACKACTIVATE;
    internal static int TTM_TRACKPOSITION;
    internal static int TTM_ACTIVATE;
    internal static int TTM_ADJUSTRECT;
    internal static int TTM_SETDELAYTIME;
    internal static int TTM_RELAYEVENT;
    internal static int TTM_UPDATE;
    internal static int TTM_WINDOWFROMPOINT;
    internal static int TTM_GETDELAYTIME;
    internal static int TTM_SETMAXTIPWIDTH;
    private static NativeMethods();
    internal static bool Failed(int hr);
    internal static int ThrowOnFailure(int hr);
    internal static int ThrowOnFailure(int hr, Int32[] expectedHRFailure);
    internal static IntPtr ListView_GetHeader(IntPtr hWndLV);
    internal static bool Header_GetItem(IntPtr hWndHeader, int index, HDITEM hdi);
    internal static bool Header_SetItem(IntPtr hWndHeader, int index, HDITEM hdi);
    internal static bool DeleteObject(IntPtr hObject);
    public static int GetDeviceCaps(IntPtr hDC, int nIndex);
    public static IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wParam, HDITEM lParam);
    public static bool IsWindowVisible(IntPtr hWnd);
    public static IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, IntPtr lParam);
    public static bool LineTo(HandleRef hdc, int x, int y);
    public static bool MoveToEx(HandleRef hdc, int x, int y, POINT pt);
    public static IntPtr SelectObject(HandleRef hdc, HandleRef obj);
    public static IntPtr GetCurrentObject(HandleRef hDC, UInt32 uObjectType);
    public static int DeleteObject(HandleRef hObject);
    public static IntPtr ExtCreatePen(int style, int nWidth, LOGBRUSH logbrush, int styleArrayLength, Int32[] styleArray);
    public static int SetWorldTransform(HandleRef hdc, XFORM xform);
    public static int SetGraphicsMode(HandleRef hdc, int iMode);
    internal static IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, TOOLINFO& ti);
    internal static IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, RECT& rc);
    internal static int SetWindowPos(IntPtr hWnd, IntPtr hwndInsertAfter, int x, int y, int width, int height, int flags);
    internal static int WldpIsDynamicCodePolicyEnabled(Int32& enabled);
    public static IntPtr GetModuleHandle(string modName);
    public static IntPtr GetProcAddress(HandleRef hModule, string lpProcName);
    public static bool FreeLibrary(HandleRef hModule);
    internal static bool IsDynamicCodePolicyEnabled();
}
internal static class System.Workflow.Runtime.WorkflowTrace : object {
    internal static TraceSource Runtime { get; }
    internal static TraceSource Tracking { get; }
    internal static TraceSource Host { get; }
    private static WorkflowTrace();
    internal static TraceSource get_Runtime();
    internal static TraceSource get_Tracking();
    internal static TraceSource get_Host();
}
internal static class System.Workflow.Utility : object {
    internal static Guid CreateGuid(string guidString);
    internal static bool TryCreateGuid(string guidString, Guid& result);
}
