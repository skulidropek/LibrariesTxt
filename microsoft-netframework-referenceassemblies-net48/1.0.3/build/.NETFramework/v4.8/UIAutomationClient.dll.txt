public class System.Windows.Automation.AndCondition : Condition {
    public AndCondition(Condition[] conditions);
    public Condition[] GetConditions();
}
public static class System.Windows.Automation.Automation : object {
    public static Condition RawViewCondition;
    public static Condition ControlViewCondition;
    public static Condition ContentViewCondition;
    private static Automation();
    public static bool Compare(AutomationElement el1, AutomationElement el2);
    public static bool Compare(Int32[] runtimeId1, Int32[] runtimeId2);
    public static string PropertyName(AutomationProperty property);
    public static string PatternName(AutomationPattern pattern);
    public static void AddAutomationEventHandler(AutomationEvent eventId, AutomationElement element, TreeScope scope, AutomationEventHandler eventHandler);
    public static void RemoveAutomationEventHandler(AutomationEvent eventId, AutomationElement element, AutomationEventHandler eventHandler);
    public static void AddAutomationPropertyChangedEventHandler(AutomationElement element, TreeScope scope, AutomationPropertyChangedEventHandler eventHandler, AutomationProperty[] properties);
    public static void RemoveAutomationPropertyChangedEventHandler(AutomationElement element, AutomationPropertyChangedEventHandler eventHandler);
    public static void AddStructureChangedEventHandler(AutomationElement element, TreeScope scope, StructureChangedEventHandler eventHandler);
    public static void RemoveStructureChangedEventHandler(AutomationElement element, StructureChangedEventHandler eventHandler);
    public static void AddAutomationFocusChangedEventHandler(AutomationFocusChangedEventHandler eventHandler);
    public static void RemoveAutomationFocusChangedEventHandler(AutomationFocusChangedEventHandler eventHandler);
    public static void RemoveAllEventHandlers();
}
public class System.Windows.Automation.AutomationElement : object {
    public static object NotSupported;
    public static AutomationProperty IsControlElementProperty;
    public static AutomationProperty ControlTypeProperty;
    public static AutomationProperty IsContentElementProperty;
    public static AutomationProperty LabeledByProperty;
    public static AutomationProperty NativeWindowHandleProperty;
    public static AutomationProperty AutomationIdProperty;
    public static AutomationProperty ItemTypeProperty;
    public static AutomationProperty IsPasswordProperty;
    public static AutomationProperty LocalizedControlTypeProperty;
    public static AutomationProperty NameProperty;
    public static AutomationProperty AcceleratorKeyProperty;
    public static AutomationProperty AccessKeyProperty;
    public static AutomationProperty HasKeyboardFocusProperty;
    public static AutomationProperty IsKeyboardFocusableProperty;
    public static AutomationProperty IsEnabledProperty;
    public static AutomationProperty BoundingRectangleProperty;
    public static AutomationProperty ProcessIdProperty;
    public static AutomationProperty RuntimeIdProperty;
    public static AutomationProperty ClassNameProperty;
    public static AutomationProperty HelpTextProperty;
    public static AutomationProperty ClickablePointProperty;
    public static AutomationProperty CultureProperty;
    public static AutomationProperty IsOffscreenProperty;
    public static AutomationProperty OrientationProperty;
    public static AutomationProperty FrameworkIdProperty;
    public static AutomationProperty IsRequiredForFormProperty;
    public static AutomationProperty ItemStatusProperty;
    public static AutomationProperty SizeOfSetProperty;
    public static AutomationProperty PositionInSetProperty;
    public static AutomationProperty IsDockPatternAvailableProperty;
    public static AutomationProperty IsExpandCollapsePatternAvailableProperty;
    public static AutomationProperty IsGridItemPatternAvailableProperty;
    public static AutomationProperty IsGridPatternAvailableProperty;
    public static AutomationProperty IsInvokePatternAvailableProperty;
    public static AutomationProperty IsMultipleViewPatternAvailableProperty;
    public static AutomationProperty IsRangeValuePatternAvailableProperty;
    public static AutomationProperty IsSelectionItemPatternAvailableProperty;
    public static AutomationProperty IsSelectionPatternAvailableProperty;
    public static AutomationProperty IsScrollPatternAvailableProperty;
    public static AutomationProperty IsSynchronizedInputPatternAvailableProperty;
    public static AutomationProperty IsScrollItemPatternAvailableProperty;
    public static AutomationProperty IsVirtualizedItemPatternAvailableProperty;
    public static AutomationProperty IsItemContainerPatternAvailableProperty;
    public static AutomationProperty IsTablePatternAvailableProperty;
    public static AutomationProperty IsTableItemPatternAvailableProperty;
    public static AutomationProperty IsTextPatternAvailableProperty;
    public static AutomationProperty IsTogglePatternAvailableProperty;
    public static AutomationProperty IsTransformPatternAvailableProperty;
    public static AutomationProperty IsValuePatternAvailableProperty;
    public static AutomationProperty IsWindowPatternAvailableProperty;
    public static AutomationEvent ToolTipOpenedEvent;
    public static AutomationEvent ToolTipClosedEvent;
    public static AutomationEvent StructureChangedEvent;
    public static AutomationEvent MenuOpenedEvent;
    public static AutomationEvent AutomationPropertyChangedEvent;
    public static AutomationEvent AutomationFocusChangedEvent;
    public static AutomationEvent AsyncContentLoadedEvent;
    public static AutomationEvent MenuClosedEvent;
    public static AutomationEvent LayoutInvalidatedEvent;
    public static AutomationElement RootElement { get; }
    public static AutomationElement FocusedElement { get; }
    public AutomationElementInformation Cached { get; }
    public AutomationElementInformation Current { get; }
    public AutomationElement CachedParent { get; }
    public AutomationElementCollection CachedChildren { get; }
    private static AutomationElement();
    protected virtual override void Finalize();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(AutomationElement left, AutomationElement right);
    public static bool op_Inequality(AutomationElement left, AutomationElement right);
    public Int32[] GetRuntimeId();
    public static AutomationElement FromPoint(Point pt);
    public static AutomationElement FromHandle(IntPtr hwnd);
    public static AutomationElement FromLocalProvider(IRawElementProviderSimple localImpl);
    public object GetCurrentPropertyValue(AutomationProperty property);
    public object GetCurrentPropertyValue(AutomationProperty property, bool ignoreDefaultValue);
    public object GetCurrentPattern(AutomationPattern pattern);
    public bool TryGetCurrentPattern(AutomationPattern pattern, Object& patternObject);
    public object GetCachedPropertyValue(AutomationProperty property);
    public object GetCachedPropertyValue(AutomationProperty property, bool ignoreDefaultValue);
    public object GetCachedPattern(AutomationPattern pattern);
    public bool TryGetCachedPattern(AutomationPattern pattern, Object& patternObject);
    public AutomationElement GetUpdatedCache(CacheRequest request);
    public AutomationElement FindFirst(TreeScope scope, Condition condition);
    public AutomationElementCollection FindAll(TreeScope scope, Condition condition);
    public AutomationProperty[] GetSupportedProperties();
    public AutomationPattern[] GetSupportedPatterns();
    public void SetFocus();
    public bool TryGetClickablePoint(Point& pt);
    public Point GetClickablePoint();
    public static AutomationElement get_RootElement();
    public static AutomationElement get_FocusedElement();
    public AutomationElementInformation get_Cached();
    public AutomationElementInformation get_Current();
    public AutomationElement get_CachedParent();
    public AutomationElementCollection get_CachedChildren();
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Automation.AutomationElementCollection : object {
    public AutomationElement Item { get; }
    public int Count { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public AutomationElement get_Item(int index);
    public virtual void CopyTo(Array array, int index);
    public void CopyTo(AutomationElement[] array, int index);
    public sealed virtual int get_Count();
    public virtual object get_SyncRoot();
    public virtual bool get_IsSynchronized();
    public sealed virtual IEnumerator GetEnumerator();
}
public enum System.Windows.Automation.AutomationElementMode : Enum {
    public int value__;
    public static AutomationElementMode None;
    public static AutomationElementMode Full;
}
public class System.Windows.Automation.AutomationFocusChangedEventArgs : AutomationEventArgs {
    public int ObjectId { get; }
    public int ChildId { get; }
    public AutomationFocusChangedEventArgs(int idObject, int idChild);
    public int get_ObjectId();
    public int get_ChildId();
}
public class System.Windows.Automation.AutomationFocusChangedEventHandler : MulticastDelegate {
    public AutomationFocusChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AutomationFocusChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AutomationFocusChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Automation.BasePattern : object {
    protected virtual override void Finalize();
}
public class System.Windows.Automation.CacheRequest : object {
    public TreeScope TreeScope { get; public set; }
    public Condition TreeFilter { get; public set; }
    public AutomationElementMode AutomationElementMode { get; public set; }
    public static CacheRequest Current { get; }
    private static CacheRequest();
    public void Push();
    public void Pop();
    public IDisposable Activate();
    public CacheRequest Clone();
    public void Add(AutomationProperty property);
    public void Add(AutomationPattern pattern);
    public TreeScope get_TreeScope();
    public void set_TreeScope(TreeScope value);
    public Condition get_TreeFilter();
    public void set_TreeFilter(Condition value);
    public AutomationElementMode get_AutomationElementMode();
    public void set_AutomationElementMode(AutomationElementMode value);
    public static CacheRequest get_Current();
}
public static class System.Windows.Automation.ClientSettings : object {
    public static void RegisterClientSideProviderAssembly(AssemblyName assemblyName);
    public static void RegisterClientSideProviders(ClientSideProviderDescription[] clientSideProviderDescription);
}
public class System.Windows.Automation.ClientSideProviderDescription : ValueType {
    private string _className;
    private string _imageName;
    private ClientSideProviderMatchIndicator _flags;
    private ClientSideProviderFactoryCallback _proxyFactoryCallback;
    public string ClassName { get; }
    public ClientSideProviderMatchIndicator Flags { get; }
    public string ImageName { get; }
    public ClientSideProviderFactoryCallback ClientSideProviderFactoryCallback { get; }
    public ClientSideProviderDescription(ClientSideProviderFactoryCallback clientSideProviderFactoryCallback, string className);
    public ClientSideProviderDescription(ClientSideProviderFactoryCallback clientSideProviderFactoryCallback, string className, string imageName, ClientSideProviderMatchIndicator flags);
    public string get_ClassName();
    public ClientSideProviderMatchIndicator get_Flags();
    public string get_ImageName();
    public ClientSideProviderFactoryCallback get_ClientSideProviderFactoryCallback();
}
public class System.Windows.Automation.ClientSideProviderFactoryCallback : MulticastDelegate {
    public ClientSideProviderFactoryCallback(object object, IntPtr method);
    public virtual IRawElementProviderSimple Invoke(IntPtr hwnd, int idChild, int idObject);
    public virtual IAsyncResult BeginInvoke(IntPtr hwnd, int idChild, int idObject, AsyncCallback callback, object object);
    public virtual IRawElementProviderSimple EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum System.Windows.Automation.ClientSideProviderMatchIndicator : Enum {
    public int value__;
    public static ClientSideProviderMatchIndicator None;
    public static ClientSideProviderMatchIndicator AllowSubstringMatch;
    public static ClientSideProviderMatchIndicator DisallowBaseClassNameMatch;
}
public abstract class System.Windows.Automation.Condition : object {
    public static Condition TrueCondition;
    public static Condition FalseCondition;
    private static Condition();
}
public class System.Windows.Automation.DockPattern : BasePattern {
    public static AutomationPattern Pattern;
    public static AutomationProperty DockPositionProperty;
    public DockPatternInformation Cached { get; }
    public DockPatternInformation Current { get; }
    private static DockPattern();
    public void SetDockPosition(DockPosition dockPosition);
    public DockPatternInformation get_Cached();
    public DockPatternInformation get_Current();
}
public class System.Windows.Automation.ExpandCollapsePattern : BasePattern {
    public static AutomationPattern Pattern;
    public static AutomationProperty ExpandCollapseStateProperty;
    public ExpandCollapsePatternInformation Cached { get; }
    public ExpandCollapsePatternInformation Current { get; }
    private static ExpandCollapsePattern();
    public void Expand();
    public void Collapse();
    public ExpandCollapsePatternInformation get_Cached();
    public ExpandCollapsePatternInformation get_Current();
}
public class System.Windows.Automation.GridItemPattern : BasePattern {
    public static AutomationPattern Pattern;
    public static AutomationProperty RowProperty;
    public static AutomationProperty ColumnProperty;
    public static AutomationProperty RowSpanProperty;
    public static AutomationProperty ColumnSpanProperty;
    public static AutomationProperty ContainingGridProperty;
    public GridItemPatternInformation Cached { get; }
    public GridItemPatternInformation Current { get; }
    private static GridItemPattern();
    public GridItemPatternInformation get_Cached();
    public GridItemPatternInformation get_Current();
}
public class System.Windows.Automation.GridPattern : BasePattern {
    public static AutomationPattern Pattern;
    public static AutomationProperty RowCountProperty;
    public static AutomationProperty ColumnCountProperty;
    public GridPatternInformation Cached { get; }
    public GridPatternInformation Current { get; }
    private static GridPattern();
    public AutomationElement GetItem(int row, int column);
    public GridPatternInformation get_Cached();
    public GridPatternInformation get_Current();
}
public class System.Windows.Automation.InvokePattern : BasePattern {
    public static AutomationPattern Pattern;
    public static AutomationEvent InvokedEvent;
    private static InvokePattern();
    public void Invoke();
}
public class System.Windows.Automation.ItemContainerPattern : BasePattern {
    public static AutomationPattern Pattern;
    private static ItemContainerPattern();
    public AutomationElement FindItemByProperty(AutomationElement startAfter, AutomationProperty property, object value);
}
public class System.Windows.Automation.MultipleViewPattern : BasePattern {
    public static AutomationPattern Pattern;
    public static AutomationProperty CurrentViewProperty;
    public static AutomationProperty SupportedViewsProperty;
    public MultipleViewPatternInformation Cached { get; }
    public MultipleViewPatternInformation Current { get; }
    private static MultipleViewPattern();
    public string GetViewName(int viewId);
    public void SetCurrentView(int viewId);
    public MultipleViewPatternInformation get_Cached();
    public MultipleViewPatternInformation get_Current();
}
public class System.Windows.Automation.NotCondition : Condition {
    public Condition Condition { get; }
    public NotCondition(Condition condition);
    public Condition get_Condition();
}
public class System.Windows.Automation.OrCondition : Condition {
    public OrCondition(Condition[] conditions);
    public Condition[] GetConditions();
}
public class System.Windows.Automation.PropertyCondition : Condition {
    public AutomationProperty Property { get; }
    public object Value { get; }
    public PropertyConditionFlags Flags { get; }
    public PropertyCondition(AutomationProperty property, object value);
    public PropertyCondition(AutomationProperty property, object value, PropertyConditionFlags flags);
    public AutomationProperty get_Property();
    public object get_Value();
    public PropertyConditionFlags get_Flags();
}
[FlagsAttribute]
public enum System.Windows.Automation.PropertyConditionFlags : Enum {
    public int value__;
    public static PropertyConditionFlags None;
    public static PropertyConditionFlags IgnoreCase;
}
public class System.Windows.Automation.RangeValuePattern : BasePattern {
    public static AutomationPattern Pattern;
    public static AutomationProperty ValueProperty;
    public static AutomationProperty IsReadOnlyProperty;
    public static AutomationProperty MinimumProperty;
    public static AutomationProperty MaximumProperty;
    public static AutomationProperty LargeChangeProperty;
    public static AutomationProperty SmallChangeProperty;
    public RangeValuePatternInformation Cached { get; }
    public RangeValuePatternInformation Current { get; }
    private static RangeValuePattern();
    public void SetValue(double value);
    public RangeValuePatternInformation get_Cached();
    public RangeValuePatternInformation get_Current();
}
public class System.Windows.Automation.ScrollItemPattern : BasePattern {
    public static AutomationPattern Pattern;
    private static ScrollItemPattern();
    public void ScrollIntoView();
}
public class System.Windows.Automation.ScrollPattern : BasePattern {
    public static double NoScroll;
    public static AutomationPattern Pattern;
    public static AutomationProperty HorizontalScrollPercentProperty;
    public static AutomationProperty HorizontalViewSizeProperty;
    public static AutomationProperty VerticalScrollPercentProperty;
    public static AutomationProperty VerticalViewSizeProperty;
    public static AutomationProperty HorizontallyScrollableProperty;
    public static AutomationProperty VerticallyScrollableProperty;
    public ScrollPatternInformation Cached { get; }
    public ScrollPatternInformation Current { get; }
    private static ScrollPattern();
    public void SetScrollPercent(double horizontalPercent, double verticalPercent);
    public void Scroll(ScrollAmount horizontalAmount, ScrollAmount verticalAmount);
    public void ScrollHorizontal(ScrollAmount amount);
    public void ScrollVertical(ScrollAmount amount);
    public ScrollPatternInformation get_Cached();
    public ScrollPatternInformation get_Current();
}
public class System.Windows.Automation.SelectionItemPattern : BasePattern {
    public static AutomationPattern Pattern;
    public static AutomationProperty IsSelectedProperty;
    public static AutomationProperty SelectionContainerProperty;
    public static AutomationEvent ElementAddedToSelectionEvent;
    public static AutomationEvent ElementRemovedFromSelectionEvent;
    public static AutomationEvent ElementSelectedEvent;
    public SelectionItemPatternInformation Cached { get; }
    public SelectionItemPatternInformation Current { get; }
    private static SelectionItemPattern();
    public void Select();
    public void AddToSelection();
    public void RemoveFromSelection();
    public SelectionItemPatternInformation get_Cached();
    public SelectionItemPatternInformation get_Current();
}
public class System.Windows.Automation.SelectionPattern : BasePattern {
    public static AutomationPattern Pattern;
    public static AutomationProperty SelectionProperty;
    public static AutomationProperty CanSelectMultipleProperty;
    public static AutomationProperty IsSelectionRequiredProperty;
    public static AutomationEvent InvalidatedEvent;
    public SelectionPatternInformation Cached { get; }
    public SelectionPatternInformation Current { get; }
    private static SelectionPattern();
    public SelectionPatternInformation get_Cached();
    public SelectionPatternInformation get_Current();
}
public class System.Windows.Automation.SynchronizedInputPattern : BasePattern {
    public static AutomationPattern Pattern;
    public static AutomationEvent InputReachedTargetEvent;
    public static AutomationEvent InputReachedOtherElementEvent;
    public static AutomationEvent InputDiscardedEvent;
    private static SynchronizedInputPattern();
    public void StartListening(SynchronizedInputType inputType);
    public void Cancel();
}
public class System.Windows.Automation.TableItemPattern : GridItemPattern {
    public static AutomationPattern Pattern;
    public static AutomationProperty RowHeaderItemsProperty;
    public static AutomationProperty ColumnHeaderItemsProperty;
    public TableItemPatternInformation Cached { get; }
    public TableItemPatternInformation Current { get; }
    private static TableItemPattern();
    public TableItemPatternInformation get_Cached();
    public TableItemPatternInformation get_Current();
}
public class System.Windows.Automation.TablePattern : GridPattern {
    public static AutomationPattern Pattern;
    public static AutomationProperty RowHeadersProperty;
    public static AutomationProperty ColumnHeadersProperty;
    public static AutomationProperty RowOrColumnMajorProperty;
    public TablePatternInformation Cached { get; }
    public TablePatternInformation Current { get; }
    private static TablePattern();
    public TablePatternInformation get_Cached();
    public TablePatternInformation get_Current();
}
public class System.Windows.Automation.Text.TextPatternRange : object {
    public TextPattern TextPattern { get; }
    public TextPatternRange Clone();
    public bool Compare(TextPatternRange range);
    public int CompareEndpoints(TextPatternRangeEndpoint endpoint, TextPatternRange targetRange, TextPatternRangeEndpoint targetEndpoint);
    public void ExpandToEnclosingUnit(TextUnit unit);
    public TextPatternRange FindAttribute(AutomationTextAttribute attribute, object value, bool backward);
    public TextPatternRange FindText(string text, bool backward, bool ignoreCase);
    public object GetAttributeValue(AutomationTextAttribute attribute);
    public Rect[] GetBoundingRectangles();
    public AutomationElement GetEnclosingElement();
    public string GetText(int maxLength);
    public int Move(TextUnit unit, int count);
    public int MoveEndpointByUnit(TextPatternRangeEndpoint endpoint, TextUnit unit, int count);
    public void MoveEndpointByRange(TextPatternRangeEndpoint endpoint, TextPatternRange targetRange, TextPatternRangeEndpoint targetEndpoint);
    public void Select();
    public void AddToSelection();
    public void RemoveFromSelection();
    public void ScrollIntoView(bool alignToTop);
    public AutomationElement[] GetChildren();
    public TextPattern get_TextPattern();
}
public class System.Windows.Automation.TextPattern : BasePattern {
    public static object MixedAttributeValue;
    public static AutomationTextAttribute AnimationStyleAttribute;
    public static AutomationTextAttribute BackgroundColorAttribute;
    public static AutomationTextAttribute BulletStyleAttribute;
    public static AutomationTextAttribute CapStyleAttribute;
    public static AutomationTextAttribute CultureAttribute;
    public static AutomationTextAttribute FontNameAttribute;
    public static AutomationTextAttribute FontSizeAttribute;
    public static AutomationTextAttribute FontWeightAttribute;
    public static AutomationTextAttribute ForegroundColorAttribute;
    public static AutomationTextAttribute HorizontalTextAlignmentAttribute;
    public static AutomationTextAttribute IndentationFirstLineAttribute;
    public static AutomationTextAttribute IndentationLeadingAttribute;
    public static AutomationTextAttribute IndentationTrailingAttribute;
    public static AutomationTextAttribute IsHiddenAttribute;
    public static AutomationTextAttribute IsItalicAttribute;
    public static AutomationTextAttribute IsReadOnlyAttribute;
    public static AutomationTextAttribute IsSubscriptAttribute;
    public static AutomationTextAttribute IsSuperscriptAttribute;
    public static AutomationTextAttribute MarginBottomAttribute;
    public static AutomationTextAttribute MarginLeadingAttribute;
    public static AutomationTextAttribute MarginTopAttribute;
    public static AutomationTextAttribute MarginTrailingAttribute;
    public static AutomationTextAttribute OutlineStylesAttribute;
    public static AutomationTextAttribute OverlineColorAttribute;
    public static AutomationTextAttribute OverlineStyleAttribute;
    public static AutomationTextAttribute StrikethroughColorAttribute;
    public static AutomationTextAttribute StrikethroughStyleAttribute;
    public static AutomationTextAttribute TabsAttribute;
    public static AutomationTextAttribute TextFlowDirectionsAttribute;
    public static AutomationTextAttribute UnderlineColorAttribute;
    public static AutomationTextAttribute UnderlineStyleAttribute;
    public static AutomationPattern Pattern;
    public static AutomationEvent TextSelectionChangedEvent;
    public static AutomationEvent TextChangedEvent;
    public TextPatternRange DocumentRange { get; }
    public SupportedTextSelection SupportedTextSelection { get; }
    private static TextPattern();
    public TextPatternRange[] GetSelection();
    public TextPatternRange[] GetVisibleRanges();
    public TextPatternRange RangeFromChild(AutomationElement childElement);
    public TextPatternRange RangeFromPoint(Point screenLocation);
    public TextPatternRange get_DocumentRange();
    public SupportedTextSelection get_SupportedTextSelection();
}
public class System.Windows.Automation.TogglePattern : BasePattern {
    public static AutomationPattern Pattern;
    public static AutomationProperty ToggleStateProperty;
    public TogglePatternInformation Cached { get; }
    public TogglePatternInformation Current { get; }
    private static TogglePattern();
    public void Toggle();
    public TogglePatternInformation get_Cached();
    public TogglePatternInformation get_Current();
}
public class System.Windows.Automation.TransformPattern : BasePattern {
    public static AutomationPattern Pattern;
    public static AutomationProperty CanMoveProperty;
    public static AutomationProperty CanResizeProperty;
    public static AutomationProperty CanRotateProperty;
    public TransformPatternInformation Cached { get; }
    public TransformPatternInformation Current { get; }
    private static TransformPattern();
    public void Move(double x, double y);
    public void Resize(double width, double height);
    public void Rotate(double degrees);
    public TransformPatternInformation get_Cached();
    public TransformPatternInformation get_Current();
}
public class System.Windows.Automation.TreeWalker : object {
    public static TreeWalker RawViewWalker;
    public static TreeWalker ControlViewWalker;
    public static TreeWalker ContentViewWalker;
    public Condition Condition { get; }
    public TreeWalker(Condition condition);
    private static TreeWalker();
    public AutomationElement GetParent(AutomationElement element);
    public AutomationElement GetFirstChild(AutomationElement element);
    public AutomationElement GetLastChild(AutomationElement element);
    public AutomationElement GetNextSibling(AutomationElement element);
    public AutomationElement GetPreviousSibling(AutomationElement element);
    public AutomationElement Normalize(AutomationElement element);
    public AutomationElement GetParent(AutomationElement element, CacheRequest request);
    public AutomationElement GetFirstChild(AutomationElement element, CacheRequest request);
    public AutomationElement GetLastChild(AutomationElement element, CacheRequest request);
    public AutomationElement GetNextSibling(AutomationElement element, CacheRequest request);
    public AutomationElement GetPreviousSibling(AutomationElement element, CacheRequest request);
    public AutomationElement Normalize(AutomationElement element, CacheRequest request);
    public Condition get_Condition();
}
public class System.Windows.Automation.ValuePattern : BasePattern {
    public static AutomationPattern Pattern;
    public static AutomationProperty ValueProperty;
    public static AutomationProperty IsReadOnlyProperty;
    public ValuePatternInformation Cached { get; }
    public ValuePatternInformation Current { get; }
    private static ValuePattern();
    public void SetValue(string value);
    public ValuePatternInformation get_Cached();
    public ValuePatternInformation get_Current();
}
public class System.Windows.Automation.VirtualizedItemPattern : BasePattern {
    public static AutomationPattern Pattern;
    private static VirtualizedItemPattern();
    public void Realize();
}
public class System.Windows.Automation.WindowPattern : BasePattern {
    public static AutomationPattern Pattern;
    public static AutomationProperty CanMaximizeProperty;
    public static AutomationProperty CanMinimizeProperty;
    public static AutomationProperty IsModalProperty;
    public static AutomationProperty WindowVisualStateProperty;
    public static AutomationProperty WindowInteractionStateProperty;
    public static AutomationProperty IsTopmostProperty;
    public static AutomationEvent WindowOpenedEvent;
    public static AutomationEvent WindowClosedEvent;
    public WindowPatternInformation Cached { get; }
    public WindowPatternInformation Current { get; }
    private static WindowPattern();
    public void SetWindowVisualState(WindowVisualState state);
    public void Close();
    public bool WaitForInputIdle(int milliseconds);
    public WindowPatternInformation get_Cached();
    public WindowPatternInformation get_Current();
}
