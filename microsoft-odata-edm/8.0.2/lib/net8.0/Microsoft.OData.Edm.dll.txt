internal static class AssemblyRef : object {
    internal static string ProductPublicKey;
    internal static string TestPublicKey;
    internal static string ProductPublicKeyToken;
}
internal class Microsoft.OData.Edm.AmbiguousBinding`1 : BadElement {
    private List`1<TElement> bindings;
    public IEnumerable`1<TElement> Bindings { get; }
    public string Name { get; }
    public AmbiguousBinding`1(TElement first, TElement second);
    public IEnumerable`1<TElement> get_Bindings();
    public sealed virtual string get_Name();
    public void AddBinding(TElement binding);
}
internal class Microsoft.OData.Edm.AmbiguousEntityContainerBinding : AmbiguousBinding`1<IEdmEntityContainer> {
    private string namespaceName;
    private string fullName;
    public EdmSchemaElementKind SchemaElementKind { get; }
    public string Namespace { get; }
    public string FullName { get; }
    public IEnumerable`1<IEdmEntityContainerElement> Elements { get; }
    public AmbiguousEntityContainerBinding(IEdmEntityContainer first, IEdmEntityContainer second);
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_FullName();
    public sealed virtual IEnumerable`1<IEdmEntityContainerElement> get_Elements();
    public sealed virtual IEdmEntitySet FindEntitySet(string name);
    public sealed virtual IEdmSingleton FindSingleton(string name);
    public sealed virtual IEnumerable`1<IEdmOperationImport> FindOperationImports(string operationName);
}
internal class Microsoft.OData.Edm.AmbiguousEntitySetBinding : AmbiguousBinding`1<IEdmEntitySet> {
    private IEdmEntityType entityType;
    public EdmContainerElementKind ContainerElementKind { get; }
    public IEdmEntityContainer Container { get; }
    public IEdmPathExpression Path { get; }
    public IEdmType Type { get; }
    public IEdmEntityType EntityType { get; }
    public bool IncludeInServiceDocument { get; }
    public IEnumerable`1<IEdmNavigationPropertyBinding> NavigationPropertyBindings { get; }
    public AmbiguousEntitySetBinding(IEdmEntitySet first, IEdmEntitySet second);
    public sealed virtual EdmContainerElementKind get_ContainerElementKind();
    public sealed virtual IEdmEntityContainer get_Container();
    public sealed virtual IEdmPathExpression get_Path();
    public sealed virtual IEdmType get_Type();
    public sealed virtual IEdmEntityType get_EntityType();
    public sealed virtual bool get_IncludeInServiceDocument();
    public sealed virtual IEnumerable`1<IEdmNavigationPropertyBinding> get_NavigationPropertyBindings();
    public sealed virtual IEdmNavigationSource FindNavigationTarget(IEdmNavigationProperty property);
    public sealed virtual IEdmNavigationSource FindNavigationTarget(IEdmNavigationProperty navigationProperty, IEdmPathExpression bindingPath);
    public sealed virtual IEnumerable`1<IEdmNavigationPropertyBinding> FindNavigationPropertyBindings(IEdmNavigationProperty navigationProperty);
}
internal class Microsoft.OData.Edm.AmbiguousLabeledExpressionBinding : AmbiguousBinding`1<IEdmLabeledExpression> {
    private Cache`2<AmbiguousLabeledExpressionBinding, IEdmExpression> expressionCache;
    private static Func`2<AmbiguousLabeledExpressionBinding, IEdmExpression> ComputeExpressionFunc;
    public IEdmExpression Expression { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public AmbiguousLabeledExpressionBinding(IEdmLabeledExpression first, IEdmLabeledExpression second);
    private static AmbiguousLabeledExpressionBinding();
    public sealed virtual IEdmExpression get_Expression();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
    private static IEdmExpression ComputeExpression();
}
internal class Microsoft.OData.Edm.AmbiguousOperationBinding : AmbiguousBinding`1<IEdmOperation> {
    private string fullName;
    private IEdmOperation first;
    public IEdmTypeReference ReturnType { get; }
    public string Namespace { get; }
    public string FullName { get; }
    public IEnumerable`1<IEdmOperationParameter> Parameters { get; }
    public bool IsBound { get; }
    public IEdmPathExpression EntitySetPath { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public AmbiguousOperationBinding(IEdmOperation first, IEdmOperation second);
    public sealed virtual IEdmTypeReference get_ReturnType();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_FullName();
    public sealed virtual IEnumerable`1<IEdmOperationParameter> get_Parameters();
    public sealed virtual bool get_IsBound();
    public sealed virtual IEdmPathExpression get_EntitySetPath();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public sealed virtual IEdmOperationParameter FindParameter(string name);
}
internal class Microsoft.OData.Edm.AmbiguousOperationImportBinding : AmbiguousBinding`1<IEdmOperationImport> {
    private IEdmOperationImport first;
    public IEdmOperation Operation { get; }
    public IEdmEntityContainer Container { get; }
    public EdmContainerElementKind ContainerElementKind { get; }
    public IEdmExpression EntitySet { get; }
    public AmbiguousOperationImportBinding(IEdmOperationImport first, IEdmOperationImport second);
    public sealed virtual IEdmOperation get_Operation();
    public sealed virtual IEdmEntityContainer get_Container();
    public sealed virtual EdmContainerElementKind get_ContainerElementKind();
    public sealed virtual IEdmExpression get_EntitySet();
}
internal class Microsoft.OData.Edm.AmbiguousPropertyBinding : AmbiguousBinding`1<IEdmProperty> {
    private IEdmStructuredType declaringType;
    private Cache`2<AmbiguousPropertyBinding, IEdmTypeReference> type;
    private static Func`2<AmbiguousPropertyBinding, IEdmTypeReference> ComputeTypeFunc;
    public EdmPropertyKind PropertyKind { get; }
    public IEdmTypeReference Type { get; }
    public IEdmStructuredType DeclaringType { get; }
    public AmbiguousPropertyBinding(IEdmStructuredType declaringType, IEdmProperty first, IEdmProperty second);
    private static AmbiguousPropertyBinding();
    public sealed virtual EdmPropertyKind get_PropertyKind();
    public sealed virtual IEdmTypeReference get_Type();
    public sealed virtual IEdmStructuredType get_DeclaringType();
    private IEdmTypeReference ComputeType();
}
internal class Microsoft.OData.Edm.AmbiguousSingletonBinding : AmbiguousBinding`1<IEdmSingleton> {
    private IEdmEntityType entityType;
    public IEdmType Type { get; }
    public IEdmEntityType EntityType { get; }
    public EdmContainerElementKind ContainerElementKind { get; }
    public IEdmEntityContainer Container { get; }
    public IEdmPathExpression Path { get; }
    public IEnumerable`1<IEdmNavigationPropertyBinding> NavigationPropertyBindings { get; }
    public AmbiguousSingletonBinding(IEdmSingleton first, IEdmSingleton second);
    public sealed virtual IEdmType get_Type();
    public sealed virtual IEdmEntityType get_EntityType();
    public sealed virtual EdmContainerElementKind get_ContainerElementKind();
    public sealed virtual IEdmEntityContainer get_Container();
    public sealed virtual IEdmPathExpression get_Path();
    public sealed virtual IEnumerable`1<IEdmNavigationPropertyBinding> get_NavigationPropertyBindings();
    public sealed virtual IEdmNavigationSource FindNavigationTarget(IEdmNavigationProperty property);
    public sealed virtual IEdmNavigationSource FindNavigationTarget(IEdmNavigationProperty navigationProperty, IEdmPathExpression bindingPath);
    public sealed virtual IEnumerable`1<IEdmNavigationPropertyBinding> FindNavigationPropertyBindings(IEdmNavigationProperty navigationProperty);
}
internal class Microsoft.OData.Edm.AmbiguousTermBinding : AmbiguousBinding`1<IEdmTerm> {
    private IEdmTerm first;
    private string fullName;
    private Cache`2<AmbiguousTermBinding, IEdmTypeReference> type;
    private static Func`2<AmbiguousTermBinding, IEdmTypeReference> ComputeTypeFunc;
    private string appliesTo;
    private string defaultValue;
    public EdmSchemaElementKind SchemaElementKind { get; }
    public string Namespace { get; }
    public string FullName { get; }
    public IEdmTypeReference Type { get; }
    public string AppliesTo { get; }
    public string DefaultValue { get; }
    public AmbiguousTermBinding(IEdmTerm first, IEdmTerm second);
    private static AmbiguousTermBinding();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_FullName();
    public sealed virtual IEdmTypeReference get_Type();
    public sealed virtual string get_AppliesTo();
    public sealed virtual string get_DefaultValue();
    private IEdmTypeReference ComputeType();
}
internal class Microsoft.OData.Edm.AmbiguousTypeBinding : AmbiguousBinding`1<IEdmSchemaType> {
    private string namespaceName;
    private string fullName;
    public EdmSchemaElementKind SchemaElementKind { get; }
    public string Namespace { get; }
    public string FullName { get; }
    public EdmTypeKind TypeKind { get; }
    public AmbiguousTypeBinding(IEdmSchemaType first, IEdmSchemaType second);
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_FullName();
    public sealed virtual EdmTypeKind get_TypeKind();
}
internal class Microsoft.OData.Edm.BadBinaryTypeReference : EdmBinaryTypeReference {
    private IEnumerable`1<EdmError> errors;
    public IEnumerable`1<EdmError> Errors { get; }
    public BadBinaryTypeReference(string qualifiedName, bool isNullable, IEnumerable`1<EdmError> errors);
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    public virtual string ToString();
}
internal class Microsoft.OData.Edm.BadCollectionType : BadType {
    private IEdmTypeReference elementType;
    public EdmTypeKind TypeKind { get; }
    public IEdmTypeReference ElementType { get; }
    public BadCollectionType(IEnumerable`1<EdmError> errors);
    public virtual EdmTypeKind get_TypeKind();
    public sealed virtual IEdmTypeReference get_ElementType();
}
internal class Microsoft.OData.Edm.BadComplexType : BadNamedStructuredType {
    public EdmTypeKind TypeKind { get; }
    public BadComplexType(string qualifiedName, IEnumerable`1<EdmError> errors);
    public virtual EdmTypeKind get_TypeKind();
}
internal class Microsoft.OData.Edm.BadComplexTypeReference : EdmComplexTypeReference {
    private IEnumerable`1<EdmError> errors;
    public IEnumerable`1<EdmError> Errors { get; }
    public BadComplexTypeReference(string qualifiedName, bool isNullable, IEnumerable`1<EdmError> errors);
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    public virtual string ToString();
}
internal class Microsoft.OData.Edm.BadDecimalTypeReference : EdmDecimalTypeReference {
    private IEnumerable`1<EdmError> errors;
    public IEnumerable`1<EdmError> Errors { get; }
    public BadDecimalTypeReference(string qualifiedName, bool isNullable, IEnumerable`1<EdmError> errors);
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    public virtual string ToString();
}
internal class Microsoft.OData.Edm.BadEdmEnumMemberValue : BadElement {
    public long Value { get; }
    public BadEdmEnumMemberValue(IEnumerable`1<EdmError> errors);
    public sealed virtual long get_Value();
}
internal class Microsoft.OData.Edm.BadElement : object {
    private IEnumerable`1<EdmError> errors;
    public IEnumerable`1<EdmError> Errors { get; }
    public BadElement(IEnumerable`1<EdmError> errors);
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
}
internal class Microsoft.OData.Edm.BadEntityContainer : BadElement {
    private string namespaceName;
    private string name;
    private string fullName;
    public IEnumerable`1<IEdmEntityContainerElement> Elements { get; }
    public string Namespace { get; }
    public string Name { get; }
    public string FullName { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public BadEntityContainer(string qualifiedName, IEnumerable`1<EdmError> errors);
    public sealed virtual IEnumerable`1<IEdmEntityContainerElement> get_Elements();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_Name();
    public sealed virtual string get_FullName();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public sealed virtual IEdmEntitySet FindEntitySet(string setName);
    public sealed virtual IEdmSingleton FindSingleton(string singletonName);
    public sealed virtual IEnumerable`1<IEdmOperationImport> FindOperationImports(string operationName);
}
internal class Microsoft.OData.Edm.BadEntityReferenceType : BadType {
    private IEdmEntityType entityType;
    public EdmTypeKind TypeKind { get; }
    public IEdmEntityType EntityType { get; }
    public BadEntityReferenceType(IEnumerable`1<EdmError> errors);
    public virtual EdmTypeKind get_TypeKind();
    public sealed virtual IEdmEntityType get_EntityType();
}
internal class Microsoft.OData.Edm.BadEntitySet : BadElement {
    private string name;
    private IEdmEntityContainer container;
    private IEdmEntityType entityType;
    public string Name { get; }
    public EdmContainerElementKind ContainerElementKind { get; }
    public IEdmEntityContainer Container { get; }
    public IEnumerable`1<IEdmNavigationPropertyBinding> NavigationPropertyBindings { get; }
    public IEdmPathExpression Path { get; }
    public IEdmType Type { get; }
    public IEdmEntityType EntityType { get; }
    public bool IncludeInServiceDocument { get; }
    public BadEntitySet(string name, IEdmEntityContainer container, IEnumerable`1<EdmError> errors);
    public sealed virtual string get_Name();
    public sealed virtual EdmContainerElementKind get_ContainerElementKind();
    public sealed virtual IEdmEntityContainer get_Container();
    public sealed virtual IEnumerable`1<IEdmNavigationPropertyBinding> get_NavigationPropertyBindings();
    public sealed virtual IEdmPathExpression get_Path();
    public sealed virtual IEdmType get_Type();
    public sealed virtual IEdmEntityType get_EntityType();
    public sealed virtual bool get_IncludeInServiceDocument();
    public sealed virtual IEdmNavigationSource FindNavigationTarget(IEdmNavigationProperty property);
    public sealed virtual IEdmNavigationSource FindNavigationTarget(IEdmNavigationProperty navigationProperty, IEdmPathExpression bindingPath);
    public sealed virtual IEnumerable`1<IEdmNavigationPropertyBinding> FindNavigationPropertyBindings(IEdmNavigationProperty navigationProperty);
}
internal class Microsoft.OData.Edm.BadEntityType : BadNamedStructuredType {
    public IEnumerable`1<IEdmStructuralProperty> DeclaredKey { get; }
    public EdmTypeKind TypeKind { get; }
    public bool HasStream { get; }
    public BadEntityType(string qualifiedName, IEnumerable`1<EdmError> errors);
    public sealed virtual IEnumerable`1<IEdmStructuralProperty> get_DeclaredKey();
    public virtual EdmTypeKind get_TypeKind();
    public sealed virtual bool get_HasStream();
}
internal class Microsoft.OData.Edm.BadEntityTypeReference : EdmEntityTypeReference {
    private IEnumerable`1<EdmError> errors;
    public IEnumerable`1<EdmError> Errors { get; }
    public BadEntityTypeReference(string qualifiedName, bool isNullable, IEnumerable`1<EdmError> errors);
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    public virtual string ToString();
}
internal class Microsoft.OData.Edm.BadEnumType : BadType {
    private string namespaceName;
    private string name;
    private string fullName;
    public IEnumerable`1<IEdmEnumMember> Members { get; }
    public EdmTypeKind TypeKind { get; }
    public IEdmPrimitiveType UnderlyingType { get; }
    public bool IsFlags { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public string Namespace { get; }
    public string Name { get; }
    public string FullName { get; }
    public BadEnumType(string qualifiedName, IEnumerable`1<EdmError> errors);
    public sealed virtual IEnumerable`1<IEdmEnumMember> get_Members();
    public virtual EdmTypeKind get_TypeKind();
    public sealed virtual IEdmPrimitiveType get_UnderlyingType();
    public sealed virtual bool get_IsFlags();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_Name();
    public sealed virtual string get_FullName();
}
internal class Microsoft.OData.Edm.BadLabeledExpression : BadElement {
    private string name;
    private Cache`2<BadLabeledExpression, IEdmExpression> expressionCache;
    private static Func`2<BadLabeledExpression, IEdmExpression> ComputeExpressionFunc;
    public string Name { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public IEdmExpression Expression { get; }
    public BadLabeledExpression(string name, IEnumerable`1<EdmError> errors);
    private static BadLabeledExpression();
    public sealed virtual string get_Name();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual IEdmExpression get_Expression();
    private static IEdmExpression ComputeExpression();
}
internal abstract class Microsoft.OData.Edm.BadNamedStructuredType : BadStructuredType {
    private string namespaceName;
    private string name;
    private string fullName;
    public string Name { get; }
    public string Namespace { get; }
    public string FullName { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    protected BadNamedStructuredType(string qualifiedName, IEnumerable`1<EdmError> errors);
    public sealed virtual string get_Name();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_FullName();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
}
internal class Microsoft.OData.Edm.BadNavigationProperty : BadElement {
    private string name;
    private IEdmStructuredType declaringType;
    private Cache`2<BadNavigationProperty, IEdmTypeReference> type;
    private static Func`2<BadNavigationProperty, IEdmTypeReference> ComputeTypeFunc;
    public string Name { get; }
    public IEdmStructuredType DeclaringType { get; }
    public IEdmTypeReference Type { get; }
    public EdmPropertyKind PropertyKind { get; }
    public IEdmNavigationProperty Partner { get; }
    public EdmOnDeleteAction OnDelete { get; }
    public IEdmReferentialConstraint ReferentialConstraint { get; }
    public bool ContainsTarget { get; }
    public BadNavigationProperty(IEdmStructuredType declaringType, string name, IEnumerable`1<EdmError> errors);
    private static BadNavigationProperty();
    public sealed virtual string get_Name();
    public sealed virtual IEdmStructuredType get_DeclaringType();
    public sealed virtual IEdmTypeReference get_Type();
    public sealed virtual EdmPropertyKind get_PropertyKind();
    public sealed virtual IEdmNavigationProperty get_Partner();
    public sealed virtual EdmOnDeleteAction get_OnDelete();
    public sealed virtual IEdmReferentialConstraint get_ReferentialConstraint();
    public sealed virtual bool get_ContainsTarget();
    public virtual string ToString();
    private IEdmTypeReference ComputeType();
}
internal class Microsoft.OData.Edm.BadPathType : BadType {
    public string Name { get; }
    public string Namespace { get; }
    public string FullName { get; }
    public EdmPathTypeKind PathKind { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public EdmTypeKind TypeKind { get; }
    public BadPathType(string qualifiedName, IEnumerable`1<EdmError> errors);
    public sealed virtual string get_Name();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_FullName();
    public sealed virtual EdmPathTypeKind get_PathKind();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public virtual EdmTypeKind get_TypeKind();
}
internal class Microsoft.OData.Edm.BadPathTypeReference : EdmPathTypeReference {
    private IEnumerable`1<EdmError> errors;
    public IEnumerable`1<EdmError> Errors { get; }
    public BadPathTypeReference(string qualifiedName, bool isNullable, IEnumerable`1<EdmError> errors);
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    public virtual string ToString();
}
internal class Microsoft.OData.Edm.BadPrimitiveType : BadType {
    private EdmPrimitiveTypeKind primitiveKind;
    private string name;
    private string namespaceName;
    private string fullName;
    public EdmPrimitiveTypeKind PrimitiveKind { get; }
    public string Namespace { get; }
    public string Name { get; }
    public string FullName { get; }
    public EdmTypeKind TypeKind { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public BadPrimitiveType(string qualifiedName, EdmPrimitiveTypeKind primitiveKind, IEnumerable`1<EdmError> errors);
    public sealed virtual EdmPrimitiveTypeKind get_PrimitiveKind();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_Name();
    public sealed virtual string get_FullName();
    public virtual EdmTypeKind get_TypeKind();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
}
internal class Microsoft.OData.Edm.BadPrimitiveTypeReference : EdmPrimitiveTypeReference {
    private IEnumerable`1<EdmError> errors;
    public IEnumerable`1<EdmError> Errors { get; }
    public BadPrimitiveTypeReference(string qualifiedName, bool isNullable, IEnumerable`1<EdmError> errors);
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    public virtual string ToString();
}
internal class Microsoft.OData.Edm.BadProperty : BadElement {
    private string name;
    private IEdmStructuredType declaringType;
    private Cache`2<BadProperty, IEdmTypeReference> type;
    private static Func`2<BadProperty, IEdmTypeReference> ComputeTypeFunc;
    public string Name { get; }
    public IEdmStructuredType DeclaringType { get; }
    public IEdmTypeReference Type { get; }
    public string DefaultValueString { get; }
    public EdmPropertyKind PropertyKind { get; }
    public BadProperty(IEdmStructuredType declaringType, string name, IEnumerable`1<EdmError> errors);
    private static BadProperty();
    public sealed virtual string get_Name();
    public sealed virtual IEdmStructuredType get_DeclaringType();
    public sealed virtual IEdmTypeReference get_Type();
    public sealed virtual string get_DefaultValueString();
    public sealed virtual EdmPropertyKind get_PropertyKind();
    public virtual string ToString();
    private IEdmTypeReference ComputeType();
}
internal class Microsoft.OData.Edm.BadSpatialTypeReference : EdmSpatialTypeReference {
    private IEnumerable`1<EdmError> errors;
    public IEnumerable`1<EdmError> Errors { get; }
    public BadSpatialTypeReference(string qualifiedName, bool isNullable, IEnumerable`1<EdmError> errors);
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    public virtual string ToString();
}
internal class Microsoft.OData.Edm.BadStringTypeReference : EdmStringTypeReference {
    private IEnumerable`1<EdmError> errors;
    public IEnumerable`1<EdmError> Errors { get; }
    public BadStringTypeReference(string qualifiedName, bool isNullable, IEnumerable`1<EdmError> errors);
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    public virtual string ToString();
}
internal abstract class Microsoft.OData.Edm.BadStructuredType : BadType {
    public IEdmStructuredType BaseType { get; }
    public IEnumerable`1<IEdmProperty> DeclaredProperties { get; }
    public bool IsAbstract { get; }
    public bool IsOpen { get; }
    protected BadStructuredType(IEnumerable`1<EdmError> errors);
    public sealed virtual IEdmStructuredType get_BaseType();
    public sealed virtual IEnumerable`1<IEdmProperty> get_DeclaredProperties();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsOpen();
    public sealed virtual IEdmProperty FindProperty(string name);
}
internal class Microsoft.OData.Edm.BadTemporalTypeReference : EdmTemporalTypeReference {
    private IEnumerable`1<EdmError> errors;
    public IEnumerable`1<EdmError> Errors { get; }
    public BadTemporalTypeReference(string qualifiedName, bool isNullable, IEnumerable`1<EdmError> errors);
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    public virtual string ToString();
}
internal class Microsoft.OData.Edm.BadType : BadElement {
    public EdmTypeKind TypeKind { get; }
    public BadType(IEnumerable`1<EdmError> errors);
    public virtual EdmTypeKind get_TypeKind();
    public virtual string ToString();
}
internal class Microsoft.OData.Edm.BadTypeDefinition : BadType {
    private string namespaceName;
    private string name;
    private string fullName;
    public EdmTypeKind TypeKind { get; }
    public IEdmPrimitiveType UnderlyingType { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public string Namespace { get; }
    public string Name { get; }
    public string FullName { get; }
    public BadTypeDefinition(string qualifiedName, IEnumerable`1<EdmError> errors);
    public virtual EdmTypeKind get_TypeKind();
    public sealed virtual IEdmPrimitiveType get_UnderlyingType();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_Name();
    public sealed virtual string get_FullName();
}
internal class Microsoft.OData.Edm.BadTypeReference : EdmTypeReference {
    private IEnumerable`1<EdmError> errors;
    public IEnumerable`1<EdmError> Errors { get; }
    public BadTypeReference(BadType definition, bool isNullable);
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    public virtual string ToString();
}
internal class Microsoft.OData.Edm.Cache`2 : object {
    private object value;
    public TProperty GetValue(TContainer container, Func`2<TContainer, TProperty> compute, Func`2<TContainer, TProperty> onCycle);
    public void Clear(Func`2<TContainer, TProperty> onCycle);
}
internal static class Microsoft.OData.Edm.CacheHelper : object {
    internal static object Unknown;
    internal static object CycleSentinel;
    internal static object SecondPassCycleSentinel;
    private static object BoxedTrue;
    private static object BoxedFalse;
    private static CacheHelper();
    internal static object BoxedBool(bool value);
}
public static class Microsoft.OData.Edm.Csdl.CsdlConstants : object {
    public static Version EdmxVersion4;
    public static Version EdmxVersion401;
    public static Version EdmxVersionLatest;
    internal static string CsdlFileExtension;
    internal static string EdmOasisNamespace;
    internal static string SchemaNamespaceAnnotation;
    internal static string AnnotationSerializationLocationAnnotation;
    internal static string NamespacePrefixAnnotation;
    internal static string IsEnumMemberValueExplicitAnnotation;
    internal static string IsSerializedAsElementAnnotation;
    internal static string NamespaceAliasAnnotation;
    internal static string UsedNamespacesAnnotation;
    internal static string ReferencesAnnotation;
    internal static string PrimitiveValueConverterMapAnnotation;
    internal static string IsImmutable;
    internal static string Attribute_Abstract;
    internal static string Attribute_Action;
    internal static string Attribute_Alias;
    internal static string Attribute_AnnotationPath;
    internal static string Attribute_AppliesTo;
    internal static string Attribute_BaseType;
    internal static string Attribute_Binary;
    internal static string Attribute_Bool;
    internal static string Attribute_ContainsTarget;
    internal static string Attribute_Date;
    internal static string Attribute_DateTimeOffset;
    internal static string Attribute_Decimal;
    internal static string Attribute_DefaultValue;
    internal static string Attribute_ElementType;
    internal static string Attribute_Extends;
    internal static string Attribute_EntityType;
    internal static string Attribute_EntitySet;
    internal static string Attribute_EntitySetPath;
    internal static string Attribute_EnumMember;
    internal static string Attribute_Float;
    internal static string Attribute_Function;
    internal static string Attribute_Guid;
    internal static string Attribute_HasStream;
    internal static string Attribute_Int;
    internal static string Attribute_IncludeInServiceDocument;
    internal static string Attribute_IsBound;
    internal static string Attribute_IsComposable;
    internal static string Attribute_IsFlags;
    internal static string Attribute_MaxLength;
    internal static string Attribute_Name;
    internal static string Attribute_Namespace;
    internal static string Attribute_NavigationPropertyPath;
    internal static string Attribute_Nullable;
    internal static string Attribute_OpenType;
    internal static string Attribute_Partner;
    internal static string Attribute_Path;
    internal static string Attribute_Precision;
    internal static string Attribute_Property;
    internal static string Attribute_PropertyPath;
    internal static string Attribute_ReferencedProperty;
    internal static string Attribute_Qualifier;
    internal static string Attribute_Scale;
    internal static string Attribute_Srid;
    internal static string Attribute_String;
    internal static string Attribute_Target;
    internal static string Attribute_Term;
    internal static string Attribute_Duration;
    internal static string Attribute_TimeOfDay;
    internal static string Attribute_Type;
    internal static string Attribute_UnderlyingType;
    internal static string Attribute_Unicode;
    internal static string Attribute_Value;
    internal static string Element_Action;
    internal static string Element_ActionImport;
    internal static string Element_Annotation;
    internal static string Element_Annotations;
    internal static string Element_Apply;
    internal static string Element_Binary;
    internal static string Element_Bool;
    internal static string Element_Cast;
    internal static string Element_Collection;
    internal static string Element_CollectionType;
    internal static string Element_ComplexType;
    internal static string Element_Date;
    internal static string Element_DateTimeOffset;
    internal static string Element_Decimal;
    internal static string Element_EntityContainer;
    internal static string Element_EntitySet;
    internal static string Element_EntitySetReference;
    internal static string Element_EntityType;
    internal static string Element_EnumMember;
    internal static string Element_EnumType;
    internal static string Element_Float;
    internal static string Element_Guid;
    internal static string Element_Function;
    internal static string Element_FunctionImport;
    internal static string Element_FunctionReference;
    internal static string Element_If;
    internal static string Element_IsOf;
    internal static string Element_Int;
    internal static string Element_Key;
    internal static string Element_LabeledElement;
    internal static string Element_LabeledElementReference;
    internal static string Element_LongDescription;
    internal static string Element_Member;
    internal static string Element_NavigationProperty;
    internal static string Element_NavigationPropertyBinding;
    internal static string Element_NavigationPropertyPath;
    internal static string Element_AnnotationPath;
    internal static string Element_Null;
    internal static string Element_OnDelete;
    internal static string Element_Parameter;
    internal static string Element_ParameterReference;
    internal static string Element_Path;
    internal static string Element_Property;
    internal static string Element_PropertyPath;
    internal static string Element_PropertyRef;
    internal static string Element_PropertyReference;
    internal static string Element_PropertyValue;
    internal static string Element_Record;
    internal static string Element_ReferenceType;
    internal static string Element_ReferentialConstraint;
    internal static string Element_ReturnType;
    internal static string Element_Singleton;
    internal static string Element_Schema;
    internal static string Element_String;
    internal static string Element_Summary;
    internal static string Element_Duration;
    internal static string Element_Term;
    internal static string Element_TimeOfDay;
    internal static string Element_TypeDefinition;
    internal static string Element_TypeRef;
    internal static string Value_Cascade;
    internal static string Value_Collection;
    internal static string Value_EndMany;
    internal static string Value_EndOptional;
    internal static string Value_EndRequired;
    internal static string Value_Max;
    internal static string Value_None;
    internal static string Value_Ref;
    internal static string Value_SridVariable;
    internal static string Value_ScaleVariable;
    internal static string Value_SridVariable_Legacy;
    internal static string Value_ScaleVariable_Legacy;
    internal static string TypeName_Untyped;
    internal static string TypeName_Untyped_Short;
    internal static string TypeName_Entity;
    internal static string TypeName_Entity_Short;
    internal static string TypeName_Complex;
    internal static string TypeName_Complex_Short;
    internal static bool Default_Abstract;
    internal static bool Default_ContainsTarget;
    internal static bool Default_HasStream;
    internal static bool Default_IncludeInServiceDocument;
    internal static bool Default_IsAtomic;
    internal static bool Default_IsBound;
    internal static bool Default_IsComposable;
    internal static bool Default_IsFlags;
    internal static bool Default_OpenType;
    internal static bool Default_Nullable;
    internal static bool Default_IsUnicode;
    internal static int Default_TemporalPrecision;
    internal static int Default_SpatialGeographySrid;
    internal static int Default_SpatialGeometrySrid;
    internal static int Default_UnspecifiedSrid;
    internal static Nullable`1<int> Default_Scale;
    internal static int Max_NameLength;
    internal static int Max_NamespaceLength;
    internal static string Prefix_Dollar;
    internal static string Prefix_At;
    internal static char Prefix_Hash;
    internal static string EdmxFileExtension;
    internal static string EdmxOasisNamespace;
    internal static string ODataMetadataNamespace;
    internal static string EdmxVersionAnnotation;
    internal static string Prefix_Edmx;
    internal static string Prefix_ODataMetadata;
    internal static string Attribute_TargetNamespace;
    internal static string Attribute_TermNamespace;
    internal static string Attribute_Version;
    internal static string Attribute_Uri;
    internal static string Element_ConceptualModels;
    internal static string Element_Edmx;
    internal static string Element_Runtime;
    internal static string Element_Reference;
    internal static string Element_Include;
    internal static string Element_IncludeAnnotations;
    internal static string Element_DataServices;
    internal static string OperationReturnExternalTarget;
    internal static Dictionary`2<Version, String[]> SupportedVersions;
    internal static Dictionary`2<Version, string> SupportedEdmxVersions;
    internal static Dictionary`2<string, Version> SupportedEdmxNamespaces;
    internal static Dictionary`2<Version, Version> EdmToEdmxVersions;
    internal static Dictionary`2<Version, Version> EdmxToEdmVersions;
    private static CsdlConstants();
}
public class Microsoft.OData.Edm.Csdl.CsdlJsonReaderFactory : MulticastDelegate {
    public CsdlJsonReaderFactory(object object, IntPtr method);
    public virtual Utf8JsonReader Invoke(Uri uri, Boolean& skip);
    public virtual IAsyncResult BeginInvoke(Uri uri, Boolean& skip, AsyncCallback callback, object object);
    public virtual Utf8JsonReader EndInvoke(Boolean& skip, IAsyncResult result);
}
public class Microsoft.OData.Edm.Csdl.CsdlJsonReaderSettings : CsdlReaderSettingsBase {
    public static CsdlJsonReaderSettings Default;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IEdmModel> <ReferencedModels>k__BackingField;
    [CompilerGeneratedAttribute]
private CsdlJsonReaderFactory <JsonSchemaReaderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDefaultVocabularies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreUnexpectedJsonElements>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBracketNotation>k__BackingField;
    public IEnumerable`1<IEdmModel> ReferencedModels { get; public set; }
    public CsdlJsonReaderFactory JsonSchemaReaderFactory { get; public set; }
    public bool IncludeDefaultVocabularies { get; public set; }
    public bool IgnoreUnexpectedJsonElements { get; public set; }
    public bool IsBracketNotation { get; public set; }
    private static CsdlJsonReaderSettings();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IEdmModel> get_ReferencedModels();
    [CompilerGeneratedAttribute]
public void set_ReferencedModels(IEnumerable`1<IEdmModel> value);
    [CompilerGeneratedAttribute]
public CsdlJsonReaderFactory get_JsonSchemaReaderFactory();
    [CompilerGeneratedAttribute]
public void set_JsonSchemaReaderFactory(CsdlJsonReaderFactory value);
    [CompilerGeneratedAttribute]
public bool get_IncludeDefaultVocabularies();
    [CompilerGeneratedAttribute]
public void set_IncludeDefaultVocabularies(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreUnexpectedJsonElements();
    [CompilerGeneratedAttribute]
public void set_IgnoreUnexpectedJsonElements(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsBracketNotation();
    [CompilerGeneratedAttribute]
public void set_IsBracketNotation(bool value);
    internal CsdlJsonReaderSettings Clone();
}
internal class Microsoft.OData.Edm.Csdl.CsdlJsonWriter : CsdlWriter {
    private Utf8JsonWriter jsonWriter;
    private CsdlJsonWriterSettings settings;
    public CsdlJsonWriter(IEdmModel model, Utf8JsonWriter jsonWriter, CsdlJsonWriterSettings settings, Version edmxVersion);
    protected virtual void WriteCsdl();
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.CsdlJsonWriter/<WriteCsdlAsync>d__4")]
protected virtual Task WriteCsdlAsync();
    private void WriteCsdlStart();
    private Task WriteCsdlStartAsync();
    private void WriteReferenceElements();
    private Task WriteReferenceElementsAsync();
    private void WriteSchemas();
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.CsdlJsonWriter/<WriteSchemasAsync>d__10")]
private Task WriteSchemasAsync();
    private void WriteCsdlEnd();
    private Task WriteCsdlEndAsync();
}
public class Microsoft.OData.Edm.Csdl.CsdlJsonWriterSettings : object {
    internal static CsdlJsonWriterSettings Default;
    [CompilerGeneratedAttribute]
private bool <IsIeee754Compatible>k__BackingField;
    public bool IsIeee754Compatible { get; public set; }
    private static CsdlJsonWriterSettings();
    [CompilerGeneratedAttribute]
public bool get_IsIeee754Compatible();
    [CompilerGeneratedAttribute]
public void set_IsIeee754Compatible(bool value);
}
public class Microsoft.OData.Edm.Csdl.CsdlLocation : EdmLocation {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Source { get; private set; }
    public int LineNumber { get; private set; }
    public int LinePosition { get; private set; }
    public string Path { get; private set; }
    internal CsdlLocation(int number, int position);
    internal CsdlLocation(string source, int number, int position);
    internal CsdlLocation(string jsonPath);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
private void set_Source(string value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
private void set_LinePosition(int value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    public virtual string ToString();
}
public class Microsoft.OData.Edm.Csdl.CsdlReader : object {
    private static Dictionary`2<string, Action> EmptyParserLookup;
    private Dictionary`2<string, Action> edmxParserLookup;
    private Dictionary`2<string, Action> runtimeParserLookup;
    private Dictionary`2<string, Action> conceptualModelsParserLookup;
    private Dictionary`2<string, Action> dataServicesParserLookup;
    private XmlReader reader;
    private List`1<EdmError> errors;
    private List`1<CsdlReference> references;
    private CsdlParser csdlParser;
    private Func`2<Uri, XmlReader> getReferencedModelReaderFunc;
    private bool targetParsed;
    private bool ignoreUnexpectedAttributesAndElements;
    private string source;
    private CsdlReader(XmlReader reader, Func`2<Uri, XmlReader> getReferencedModelReaderFunc);
    private static CsdlReader();
    public static bool TryParse(XmlReader reader, IEdmModel& model, IEnumerable`1& errors);
    public static bool TryParse(XmlReader reader, bool ignoreUnexpectedAttributesAndElements, IEdmModel& model, IEnumerable`1& errors);
    public static IEdmModel Parse(XmlReader reader);
    public static bool TryParse(XmlReader reader, Func`2<Uri, XmlReader> getReferencedModelReaderFunc, IEdmModel& model, IEnumerable`1& errors);
    public static bool TryParse(XmlReader reader, IEnumerable`1<IEdmModel> references, IEdmModel& model, IEnumerable`1& errors);
    public static bool TryParse(XmlReader reader, IEnumerable`1<IEdmModel> references, bool includeDefaultVocabularies, IEdmModel& model, IEnumerable`1& errors);
    public static bool TryParse(XmlReader reader, IEdmModel reference, IEdmModel& model, IEnumerable`1& errors);
    public static IEdmModel Parse(XmlReader reader, IEnumerable`1<IEdmModel> referencedModels);
    public static IEdmModel Parse(XmlReader reader, IEdmModel referencedModel);
    public static IEdmModel Parse(XmlReader reader, Func`2<Uri, XmlReader> getReferencedModelReaderFunc);
    public static bool TryParse(XmlReader reader, IEnumerable`1<IEdmModel> references, CsdlReaderSettings settings, IEdmModel& model, IEnumerable`1& errors);
    private static bool TryParseVersion(string input, Version& version);
    private bool TryParse(IEnumerable`1<IEdmModel> referencedModels, bool includeDefaultVocabularies, IEdmModel& model, IEnumerable`1& parsingErrors);
    private List`1<CsdlModel> LoadAndParseReferencedCsdlFiles(Version mainCsdlVersion);
    private bool TryParseCsdlFileToCsdlModel(Version& csdlVersion, CsdlModel& csdlModel);
    private bool HasIntolerableError();
    private void ParseElement(string elementName, Dictionary`2<string, Action> elementParsers);
    private Version ParseEdmxElement(Version edmxVersion);
    private string GetAttributeValue(string namespaceUri, string localName);
    private void ParseRuntimeElement();
    private void ParseDataServicesElement();
    private void ParseTargetElement(string elementName, Dictionary`2<string, Action> elementParsers);
    private void ParseConceptualModelsElement();
    private void ParseReferenceElement();
    private void ParseSchemaElement();
    private void RaiseEmptyFile();
    private CsdlLocation Location();
    private void RaiseError(EdmErrorCode errorCode, string errorMessage);
    public static bool TryParse(Utf8JsonReader& reader, IEdmModel& model, IEnumerable`1& errors);
    public static bool TryParse(Utf8JsonReader& reader, CsdlJsonReaderSettings settings, IEdmModel& model, IEnumerable`1& errors);
    public static IEdmModel Parse(Utf8JsonReader& reader);
    public static IEdmModel Parse(Utf8JsonReader& reader, CsdlJsonReaderSettings settings);
    private static List`1<CsdlModel> LoadReferencedCsdl(CsdlModel csdlModel, JsonParserContext context);
}
public class Microsoft.OData.Edm.Csdl.CsdlReaderSettings : CsdlReaderSettingsBase {
    [CompilerGeneratedAttribute]
private Func`2<Uri, XmlReader> <GetReferencedModelReaderFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreUnexpectedAttributesAndElements>k__BackingField;
    public Func`2<Uri, XmlReader> GetReferencedModelReaderFunc { get; public set; }
    public bool IgnoreUnexpectedAttributesAndElements { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<Uri, XmlReader> get_GetReferencedModelReaderFunc();
    [CompilerGeneratedAttribute]
public void set_GetReferencedModelReaderFunc(Func`2<Uri, XmlReader> value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreUnexpectedAttributesAndElements();
    [CompilerGeneratedAttribute]
public void set_IgnoreUnexpectedAttributesAndElements(bool value);
}
public abstract class Microsoft.OData.Edm.Csdl.CsdlReaderSettingsBase : object {
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsAction : CsdlSemanticsOperation {
    public EdmSchemaElementKind SchemaElementKind { get; }
    public CsdlSemanticsAction(CsdlSemanticsSchema context, CsdlAction action);
    public virtual EdmSchemaElementKind get_SchemaElementKind();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsActionImport : CsdlSemanticsOperationImport {
    public IEdmAction Action { get; }
    public EdmContainerElementKind ContainerElementKind { get; }
    public CsdlSemanticsActionImport(CsdlSemanticsEntityContainer container, CsdlActionImport actionImport, IEdmAction backingAction);
    public sealed virtual IEdmAction get_Action();
    public virtual EdmContainerElementKind get_ContainerElementKind();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsAnnotationPathExpression : CsdlSemanticsPathExpression {
    public EdmExpressionKind ExpressionKind { get; }
    public CsdlSemanticsAnnotationPathExpression(CsdlPathExpression expression, IEdmEntityType bindingContext, CsdlSemanticsSchema schema);
    public virtual EdmExpressionKind get_ExpressionKind();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsAnnotations : object {
    private CsdlAnnotations annotations;
    private CsdlSemanticsSchema context;
    public CsdlSemanticsSchema Context { get; }
    public CsdlAnnotations Annotations { get; }
    public CsdlSemanticsAnnotations(CsdlSemanticsSchema context, CsdlAnnotations annotations);
    public CsdlSemanticsSchema get_Context();
    public CsdlAnnotations get_Annotations();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsApplyExpression : CsdlSemanticsExpression {
    private CsdlApplyExpression expression;
    private CsdlSemanticsSchema schema;
    private IEdmEntityType bindingContext;
    private Cache`2<CsdlSemanticsApplyExpression, IEdmFunction> appliedFunctionCache;
    private static Func`2<CsdlSemanticsApplyExpression, IEdmFunction> ComputeAppliedFunctionFunc;
    private Cache`2<CsdlSemanticsApplyExpression, IEnumerable`1<IEdmExpression>> argumentsCache;
    private static Func`2<CsdlSemanticsApplyExpression, IEnumerable`1<IEdmExpression>> ComputeArgumentsFunc;
    public CsdlElement Element { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public IEdmFunction AppliedFunction { get; }
    public IEnumerable`1<IEdmExpression> Arguments { get; }
    public IEnumerable`1<EdmError> Errors { get; }
    public CsdlSemanticsApplyExpression(CsdlApplyExpression expression, IEdmEntityType bindingContext, CsdlSemanticsSchema schema);
    private static CsdlSemanticsApplyExpression();
    public virtual CsdlElement get_Element();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual IEdmFunction get_AppliedFunction();
    public sealed virtual IEnumerable`1<IEdmExpression> get_Arguments();
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    private IEdmFunction ComputeAppliedFunction();
    private IEnumerable`1<IEdmExpression> ComputeArguments();
    private bool IsMatchingFunction(IEdmOperation operation);
    private bool IsExactMatch(IEdmOperation operation);
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsBinaryConstantExpression : CsdlSemanticsExpression {
    private CsdlConstantExpression expression;
    private Cache`2<CsdlSemanticsBinaryConstantExpression, Byte[]> valueCache;
    private static Func`2<CsdlSemanticsBinaryConstantExpression, Byte[]> ComputeValueFunc;
    private Cache`2<CsdlSemanticsBinaryConstantExpression, IEnumerable`1<EdmError>> errorsCache;
    private static Func`2<CsdlSemanticsBinaryConstantExpression, IEnumerable`1<EdmError>> ComputeErrorsFunc;
    public CsdlElement Element { get; }
    public Byte[] Value { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public IEdmTypeReference Type { get; }
    public IEnumerable`1<EdmError> Errors { get; }
    public CsdlSemanticsBinaryConstantExpression(CsdlConstantExpression expression, CsdlSemanticsSchema schema);
    private static CsdlSemanticsBinaryConstantExpression();
    public virtual CsdlElement get_Element();
    public sealed virtual Byte[] get_Value();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual EdmValueKind get_ValueKind();
    public sealed virtual IEdmTypeReference get_Type();
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    [SuppressMessageAttribute("Performance", "CA1825:Avoid zero-length array allocations.")]
private Byte[] ComputeValue();
    private IEnumerable`1<EdmError> ComputeErrors();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsBinaryTypeReference : CsdlSemanticsPrimitiveTypeReference {
    public bool IsUnbounded { get; }
    public Nullable`1<int> MaxLength { get; }
    public CsdlSemanticsBinaryTypeReference(CsdlSemanticsSchema schema, CsdlBinaryTypeReference reference);
    public sealed virtual bool get_IsUnbounded();
    public sealed virtual Nullable`1<int> get_MaxLength();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsBooleanConstantExpression : CsdlSemanticsExpression {
    private CsdlConstantExpression expression;
    private Cache`2<CsdlSemanticsBooleanConstantExpression, bool> valueCache;
    private static Func`2<CsdlSemanticsBooleanConstantExpression, bool> ComputeValueFunc;
    private Cache`2<CsdlSemanticsBooleanConstantExpression, IEnumerable`1<EdmError>> errorsCache;
    private static Func`2<CsdlSemanticsBooleanConstantExpression, IEnumerable`1<EdmError>> ComputeErrorsFunc;
    public CsdlElement Element { get; }
    public bool Value { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public IEdmTypeReference Type { get; }
    public IEnumerable`1<EdmError> Errors { get; }
    public CsdlSemanticsBooleanConstantExpression(CsdlConstantExpression expression, CsdlSemanticsSchema schema);
    private static CsdlSemanticsBooleanConstantExpression();
    public virtual CsdlElement get_Element();
    public sealed virtual bool get_Value();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual EdmValueKind get_ValueKind();
    public sealed virtual IEdmTypeReference get_Type();
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    private bool ComputeValue();
    private IEnumerable`1<EdmError> ComputeErrors();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsCastExpression : CsdlSemanticsExpression {
    private CsdlCastExpression expression;
    private IEdmEntityType bindingContext;
    private Cache`2<CsdlSemanticsCastExpression, IEdmExpression> operandCache;
    private static Func`2<CsdlSemanticsCastExpression, IEdmExpression> ComputeOperandFunc;
    private Cache`2<CsdlSemanticsCastExpression, IEdmTypeReference> typeCache;
    private static Func`2<CsdlSemanticsCastExpression, IEdmTypeReference> ComputeTypeFunc;
    public CsdlElement Element { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public IEdmExpression Operand { get; }
    public IEdmTypeReference Type { get; }
    public CsdlSemanticsCastExpression(CsdlCastExpression expression, IEdmEntityType bindingContext, CsdlSemanticsSchema schema);
    private static CsdlSemanticsCastExpression();
    public virtual CsdlElement get_Element();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual IEdmExpression get_Operand();
    public sealed virtual IEdmTypeReference get_Type();
    private IEdmExpression ComputeOperand();
    private IEdmTypeReference ComputeType();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsCollectionExpression : CsdlSemanticsExpression {
    private CsdlCollectionExpression expression;
    private IEdmEntityType bindingContext;
    private Cache`2<CsdlSemanticsCollectionExpression, IEdmTypeReference> declaredTypeCache;
    private static Func`2<CsdlSemanticsCollectionExpression, IEdmTypeReference> ComputeDeclaredTypeFunc;
    private Cache`2<CsdlSemanticsCollectionExpression, IEnumerable`1<IEdmExpression>> elementsCache;
    private static Func`2<CsdlSemanticsCollectionExpression, IEnumerable`1<IEdmExpression>> ComputeElementsFunc;
    public CsdlElement Element { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public IEdmTypeReference DeclaredType { get; }
    public IEnumerable`1<IEdmExpression> Elements { get; }
    public CsdlSemanticsCollectionExpression(CsdlCollectionExpression expression, IEdmEntityType bindingContext, CsdlSemanticsSchema schema);
    private static CsdlSemanticsCollectionExpression();
    public virtual CsdlElement get_Element();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual IEdmTypeReference get_DeclaredType();
    public sealed virtual IEnumerable`1<IEdmExpression> get_Elements();
    private IEnumerable`1<IEdmExpression> ComputeElements();
    private IEdmTypeReference ComputeDeclaredType();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsCollectionTypeDefinition : CsdlSemanticsTypeDefinition {
    private CsdlSemanticsSchema schema;
    private CsdlCollectionType collection;
    private Cache`2<CsdlSemanticsCollectionTypeDefinition, IEdmTypeReference> elementTypeCache;
    private static Func`2<CsdlSemanticsCollectionTypeDefinition, IEdmTypeReference> ComputeElementTypeFunc;
    public EdmTypeKind TypeKind { get; }
    public IEdmTypeReference ElementType { get; }
    public CsdlSemanticsModel Model { get; }
    public CsdlElement Element { get; }
    public CsdlSemanticsCollectionTypeDefinition(CsdlSemanticsSchema schema, CsdlCollectionType collection);
    private static CsdlSemanticsCollectionTypeDefinition();
    public virtual EdmTypeKind get_TypeKind();
    public sealed virtual IEdmTypeReference get_ElementType();
    public virtual CsdlSemanticsModel get_Model();
    public virtual CsdlElement get_Element();
    private IEdmTypeReference ComputeElementType();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsCollectionTypeExpression : CsdlSemanticsTypeExpression {
    public CsdlSemanticsCollectionTypeExpression(CsdlExpressionTypeReference expressionUsage, CsdlSemanticsTypeDefinition type);
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsComplexTypeDefinition : CsdlSemanticsStructuredTypeDefinition {
    private string fullName;
    private CsdlComplexType complex;
    private Cache`2<CsdlSemanticsComplexTypeDefinition, IEdmComplexType> baseTypeCache;
    private static Func`2<CsdlSemanticsComplexTypeDefinition, IEdmComplexType> ComputeBaseTypeFunc;
    private static Func`2<CsdlSemanticsComplexTypeDefinition, IEdmComplexType> OnCycleBaseTypeFunc;
    public IEdmStructuredType BaseType { get; }
    public EdmTypeKind TypeKind { get; }
    public bool IsAbstract { get; }
    public bool IsOpen { get; }
    public string Name { get; }
    public string FullName { get; }
    protected CsdlStructuredType MyStructured { get; }
    public CsdlSemanticsComplexTypeDefinition(CsdlSemanticsSchema context, CsdlComplexType complex);
    private static CsdlSemanticsComplexTypeDefinition();
    public virtual IEdmStructuredType get_BaseType();
    public virtual EdmTypeKind get_TypeKind();
    public virtual bool get_IsAbstract();
    public virtual bool get_IsOpen();
    public sealed virtual string get_Name();
    public sealed virtual string get_FullName();
    protected virtual CsdlStructuredType get_MyStructured();
    [SuppressMessageAttribute("Microsoft.Performance", "CA1804:RemoveUnusedLocals")]
private IEdmComplexType ComputeBaseType();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsDateConstantExpression : CsdlSemanticsExpression {
    private CsdlConstantExpression expression;
    private Cache`2<CsdlSemanticsDateConstantExpression, Date> valueCache;
    private static Func`2<CsdlSemanticsDateConstantExpression, Date> ComputeValueFunc;
    private Cache`2<CsdlSemanticsDateConstantExpression, IEnumerable`1<EdmError>> errorsCache;
    private static Func`2<CsdlSemanticsDateConstantExpression, IEnumerable`1<EdmError>> ComputeErrorsFunc;
    public CsdlElement Element { get; }
    public Date Value { get; }
    public IEdmTypeReference Type { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public IEnumerable`1<EdmError> Errors { get; }
    public CsdlSemanticsDateConstantExpression(CsdlConstantExpression expression, CsdlSemanticsSchema schema);
    private static CsdlSemanticsDateConstantExpression();
    public virtual CsdlElement get_Element();
    public sealed virtual Date get_Value();
    public sealed virtual IEdmTypeReference get_Type();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual EdmValueKind get_ValueKind();
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    private Date ComputeValue();
    private IEnumerable`1<EdmError> ComputeErrors();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsDateTimeOffsetConstantExpression : CsdlSemanticsExpression {
    private CsdlConstantExpression expression;
    private Cache`2<CsdlSemanticsDateTimeOffsetConstantExpression, DateTimeOffset> valueCache;
    private static Func`2<CsdlSemanticsDateTimeOffsetConstantExpression, DateTimeOffset> ComputeValueFunc;
    private Cache`2<CsdlSemanticsDateTimeOffsetConstantExpression, IEnumerable`1<EdmError>> errorsCache;
    private static Func`2<CsdlSemanticsDateTimeOffsetConstantExpression, IEnumerable`1<EdmError>> ComputeErrorsFunc;
    public CsdlElement Element { get; }
    public DateTimeOffset Value { get; }
    public IEdmTypeReference Type { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public IEnumerable`1<EdmError> Errors { get; }
    public CsdlSemanticsDateTimeOffsetConstantExpression(CsdlConstantExpression expression, CsdlSemanticsSchema schema);
    private static CsdlSemanticsDateTimeOffsetConstantExpression();
    public virtual CsdlElement get_Element();
    public sealed virtual DateTimeOffset get_Value();
    public sealed virtual IEdmTypeReference get_Type();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual EdmValueKind get_ValueKind();
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    private DateTimeOffset ComputeValue();
    private IEnumerable`1<EdmError> ComputeErrors();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsDecimalConstantExpression : CsdlSemanticsExpression {
    private CsdlConstantExpression expression;
    private Cache`2<CsdlSemanticsDecimalConstantExpression, decimal> valueCache;
    private static Func`2<CsdlSemanticsDecimalConstantExpression, decimal> ComputeValueFunc;
    private Cache`2<CsdlSemanticsDecimalConstantExpression, IEnumerable`1<EdmError>> errorsCache;
    private static Func`2<CsdlSemanticsDecimalConstantExpression, IEnumerable`1<EdmError>> ComputeErrorsFunc;
    public CsdlElement Element { get; }
    public decimal Value { get; }
    public IEdmTypeReference Type { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public IEnumerable`1<EdmError> Errors { get; }
    public CsdlSemanticsDecimalConstantExpression(CsdlConstantExpression expression, CsdlSemanticsSchema schema);
    private static CsdlSemanticsDecimalConstantExpression();
    public virtual CsdlElement get_Element();
    public sealed virtual decimal get_Value();
    public sealed virtual IEdmTypeReference get_Type();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual EdmValueKind get_ValueKind();
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    private decimal ComputeValue();
    private IEnumerable`1<EdmError> ComputeErrors();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsDecimalTypeReference : CsdlSemanticsPrimitiveTypeReference {
    public Nullable`1<int> Precision { get; }
    public Nullable`1<int> Scale { get; }
    public CsdlSemanticsDecimalTypeReference(CsdlSemanticsSchema schema, CsdlDecimalTypeReference reference);
    public sealed virtual Nullable`1<int> get_Precision();
    public sealed virtual Nullable`1<int> get_Scale();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsDirectValueAnnotation : CsdlSemanticsElement {
    private CsdlDirectValueAnnotation annotation;
    private CsdlSemanticsModel model;
    private Cache`2<CsdlSemanticsDirectValueAnnotation, IEdmValue> valueCache;
    private static Func`2<CsdlSemanticsDirectValueAnnotation, IEdmValue> ComputeValueFunc;
    public CsdlElement Element { get; }
    public CsdlSemanticsModel Model { get; }
    public string NamespaceUri { get; }
    public string Name { get; }
    public object Value { get; }
    public CsdlSemanticsDirectValueAnnotation(CsdlDirectValueAnnotation annotation, CsdlSemanticsModel model);
    private static CsdlSemanticsDirectValueAnnotation();
    public virtual CsdlElement get_Element();
    public virtual CsdlSemanticsModel get_Model();
    public sealed virtual string get_NamespaceUri();
    public sealed virtual string get_Name();
    public sealed virtual object get_Value();
    private IEdmValue ComputeValue();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsDirectValueAnnotationsManager : EdmDirectValueAnnotationsManager {
    protected virtual IEnumerable`1<IEdmDirectValueAnnotation> GetAttachedAnnotations(IEdmElement element);
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsDurationConstantExpression : CsdlSemanticsExpression {
    private CsdlConstantExpression expression;
    private Cache`2<CsdlSemanticsDurationConstantExpression, TimeSpan> valueCache;
    private static Func`2<CsdlSemanticsDurationConstantExpression, TimeSpan> ComputeValueFunc;
    private Cache`2<CsdlSemanticsDurationConstantExpression, IEnumerable`1<EdmError>> errorsCache;
    private static Func`2<CsdlSemanticsDurationConstantExpression, IEnumerable`1<EdmError>> ComputeErrorsFunc;
    public CsdlElement Element { get; }
    public TimeSpan Value { get; }
    public IEdmTypeReference Type { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public IEnumerable`1<EdmError> Errors { get; }
    public CsdlSemanticsDurationConstantExpression(CsdlConstantExpression expression, CsdlSemanticsSchema schema);
    private static CsdlSemanticsDurationConstantExpression();
    public virtual CsdlElement get_Element();
    public sealed virtual TimeSpan get_Value();
    public sealed virtual IEdmTypeReference get_Type();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual EdmValueKind get_ValueKind();
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    private TimeSpan ComputeValue();
    private IEnumerable`1<EdmError> ComputeErrors();
}
internal abstract class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsElement : object {
    private Cache`2<CsdlSemanticsElement, IEnumerable`1<IEdmVocabularyAnnotation>> inlineVocabularyAnnotationsCache;
    private static Func`2<CsdlSemanticsElement, IEnumerable`1<IEdmVocabularyAnnotation>> ComputeInlineVocabularyAnnotationsFunc;
    private Cache`2<CsdlSemanticsElement, IEnumerable`1<IEdmDirectValueAnnotation>> directValueAnnotationsCache;
    private static Func`2<CsdlSemanticsElement, IEnumerable`1<IEdmDirectValueAnnotation>> ComputeDirectValueAnnotationsFunc;
    private static IEnumerable`1<IEdmVocabularyAnnotation> emptyVocabularyAnnotations;
    private string annotationFullName;
    public CsdlSemanticsModel Model { get; }
    public CsdlElement Element { get; }
    public IEnumerable`1<IEdmVocabularyAnnotation> InlineVocabularyAnnotations { get; }
    public EdmLocation Location { get; }
    public IEnumerable`1<IEdmDirectValueAnnotation> DirectValueAnnotations { get; }
    protected CsdlSemanticsElement(CsdlElement element);
    private static CsdlSemanticsElement();
    public abstract virtual CsdlSemanticsModel get_Model();
    public abstract virtual CsdlElement get_Element();
    public IEnumerable`1<IEdmVocabularyAnnotation> get_InlineVocabularyAnnotations();
    public sealed virtual EdmLocation get_Location();
    public IEnumerable`1<IEdmDirectValueAnnotation> get_DirectValueAnnotations();
    public string GetAnnotationFullQualifiedName(IEdmVocabularyAnnotatable element);
    protected static List`1<T> AllocateAndAdd(List`1<T> list, T item);
    protected static List`1<T> AllocateAndAdd(List`1<T> list, IEnumerable`1<T> items);
    protected virtual IEnumerable`1<IEdmVocabularyAnnotation> ComputeInlineVocabularyAnnotations();
    protected IEnumerable`1<IEdmDirectValueAnnotation> ComputeDirectValueAnnotations();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsEntityContainer : CsdlSemanticsElement {
    private string fullName;
    private CsdlEntityContainer entityContainer;
    private CsdlSemanticsSchema context;
    private Cache`2<CsdlSemanticsEntityContainer, IEnumerable`1<IEdmEntityContainerElement>> elementsCache;
    private static Func`2<CsdlSemanticsEntityContainer, IEnumerable`1<IEdmEntityContainerElement>> ComputeElementsFunc;
    private Cache`2<CsdlSemanticsEntityContainer, Dictionary`2<string, IEdmEntitySet>> entitySetDictionaryCache;
    private static Func`2<CsdlSemanticsEntityContainer, Dictionary`2<string, IEdmEntitySet>> ComputeEntitySetDictionaryFunc;
    private Cache`2<CsdlSemanticsEntityContainer, Dictionary`2<string, IEdmSingleton>> singletonDictionaryCache;
    private static Func`2<CsdlSemanticsEntityContainer, Dictionary`2<string, IEdmSingleton>> ComputeSingletonDictionaryFunc;
    private Cache`2<CsdlSemanticsEntityContainer, Dictionary`2<string, object>> operationImportsDictionaryCache;
    private static Func`2<CsdlSemanticsEntityContainer, Dictionary`2<string, object>> ComputeOperationImportsDictionaryFunc;
    private Cache`2<CsdlSemanticsEntityContainer, IEnumerable`1<EdmError>> errorsCache;
    private static Func`2<CsdlSemanticsEntityContainer, IEnumerable`1<EdmError>> ComputeErrorsFunc;
    private Cache`2<CsdlSemanticsEntityContainer, IEdmEntityContainer> extendsCache;
    private static Func`2<CsdlSemanticsEntityContainer, IEdmEntityContainer> ComputeExtendsFunc;
    private static Func`2<CsdlSemanticsEntityContainer, IEdmEntityContainer> OnCycleExtendsFunc;
    public EdmSchemaElementKind SchemaElementKind { get; }
    public CsdlSemanticsModel Model { get; }
    public IEnumerable`1<IEdmEntityContainerElement> Elements { get; }
    public string Namespace { get; }
    public string Name { get; }
    public string FullName { get; }
    public IEnumerable`1<EdmError> Errors { get; }
    public CsdlElement Element { get; }
    internal CsdlSemanticsSchema Context { get; }
    internal IEdmEntityContainer Extends { get; }
    private Dictionary`2<string, IEdmEntitySet> EntitySetDictionary { get; }
    private Dictionary`2<string, IEdmSingleton> SingletonDictionary { get; }
    private Dictionary`2<string, object> OperationImportsDictionary { get; }
    public CsdlSemanticsEntityContainer(CsdlSemanticsSchema context, CsdlEntityContainer entityContainer);
    private static CsdlSemanticsEntityContainer();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public virtual CsdlSemanticsModel get_Model();
    public sealed virtual IEnumerable`1<IEdmEntityContainerElement> get_Elements();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_Name();
    public sealed virtual string get_FullName();
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    public virtual CsdlElement get_Element();
    internal CsdlSemanticsSchema get_Context();
    internal IEdmEntityContainer get_Extends();
    private Dictionary`2<string, IEdmEntitySet> get_EntitySetDictionary();
    private Dictionary`2<string, IEdmSingleton> get_SingletonDictionary();
    private Dictionary`2<string, object> get_OperationImportsDictionary();
    public sealed virtual IEdmEntitySet FindEntitySet(string name);
    public sealed virtual IEdmSingleton FindSingleton(string name);
    public sealed virtual IEnumerable`1<IEdmOperationImport> FindOperationImports(string operationName);
    protected virtual IEnumerable`1<IEdmVocabularyAnnotation> ComputeInlineVocabularyAnnotations();
    private IEnumerable`1<IEdmEntityContainerElement> ComputeElements();
    private void AddOperationImport(CsdlOperationImport operationImport, List`1<IEdmEntityContainerElement> elements);
    private IEnumerable`1<EdmError> ComputeErrors();
    private Dictionary`2<string, IEdmEntitySet> ComputeEntitySetDictionary();
    private Dictionary`2<string, IEdmSingleton> ComputeSingletonDictionary();
    private Dictionary`2<string, object> ComputeOperationImportsDictionary();
    private IEdmEntityContainer ComputeExtends();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsEntityReferenceTypeDefinition : CsdlSemanticsTypeDefinition {
    private CsdlSemanticsSchema schema;
    private Cache`2<CsdlSemanticsEntityReferenceTypeDefinition, IEdmEntityType> entityTypeCache;
    private static Func`2<CsdlSemanticsEntityReferenceTypeDefinition, IEdmEntityType> ComputeEntityTypeFunc;
    private CsdlEntityReferenceType entityTypeReference;
    public EdmTypeKind TypeKind { get; }
    public IEdmEntityType EntityType { get; }
    public CsdlElement Element { get; }
    public CsdlSemanticsModel Model { get; }
    public CsdlSemanticsEntityReferenceTypeDefinition(CsdlSemanticsSchema schema, CsdlEntityReferenceType entityTypeReference);
    private static CsdlSemanticsEntityReferenceTypeDefinition();
    public virtual EdmTypeKind get_TypeKind();
    public sealed virtual IEdmEntityType get_EntityType();
    public virtual CsdlElement get_Element();
    public virtual CsdlSemanticsModel get_Model();
    private IEdmEntityType ComputeEntityType();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsEntityReferenceTypeExpression : CsdlSemanticsTypeExpression {
    public CsdlSemanticsEntityReferenceTypeExpression(CsdlExpressionTypeReference expressionUsage, CsdlSemanticsTypeDefinition type);
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsEntitySet : CsdlSemanticsNavigationSource {
    private IEdmType type;
    public IEdmType Type { get; }
    public EdmContainerElementKind ContainerElementKind { get; }
    public bool IncludeInServiceDocument { get; }
    public CsdlSemanticsEntitySet(CsdlSemanticsEntityContainer container, CsdlEntitySet entitySet);
    public virtual IEdmType get_Type();
    public virtual EdmContainerElementKind get_ContainerElementKind();
    public sealed virtual bool get_IncludeInServiceDocument();
    protected virtual IEdmEntityType ComputeElementType();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsEntityTypeDefinition : CsdlSemanticsStructuredTypeDefinition {
    private CsdlEntityType entity;
    private string fullName;
    private Cache`2<CsdlSemanticsEntityTypeDefinition, IEdmEntityType> baseTypeCache;
    private static Func`2<CsdlSemanticsEntityTypeDefinition, IEdmEntityType> ComputeBaseTypeFunc;
    private static Func`2<CsdlSemanticsEntityTypeDefinition, IEdmEntityType> OnCycleBaseTypeFunc;
    private Cache`2<CsdlSemanticsEntityTypeDefinition, IEnumerable`1<IEdmStructuralProperty>> declaredKeyCache;
    private static Func`2<CsdlSemanticsEntityTypeDefinition, IEnumerable`1<IEdmStructuralProperty>> ComputeDeclaredKeyFunc;
    public IEdmStructuredType BaseType { get; }
    public EdmTypeKind TypeKind { get; }
    public string Name { get; }
    public string FullName { get; }
    public bool IsAbstract { get; }
    public bool IsOpen { get; }
    public bool HasStream { get; }
    public IEnumerable`1<IEdmStructuralProperty> DeclaredKey { get; }
    protected CsdlStructuredType MyStructured { get; }
    public CsdlSemanticsEntityTypeDefinition(CsdlSemanticsSchema context, CsdlEntityType entity);
    private static CsdlSemanticsEntityTypeDefinition();
    public virtual IEdmStructuredType get_BaseType();
    public virtual EdmTypeKind get_TypeKind();
    public sealed virtual string get_Name();
    public sealed virtual string get_FullName();
    public virtual bool get_IsAbstract();
    public virtual bool get_IsOpen();
    public sealed virtual bool get_HasStream();
    public sealed virtual IEnumerable`1<IEdmStructuralProperty> get_DeclaredKey();
    protected virtual CsdlStructuredType get_MyStructured();
    [SuppressMessageAttribute("Microsoft.Performance", "CA1804:RemoveUnusedLocals")]
private IEdmEntityType ComputeBaseType();
    private IEnumerable`1<IEdmStructuralProperty> ComputeDeclaredKey();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsEnumMember : CsdlSemanticsElement {
    private CsdlEnumMember member;
    private CsdlSemanticsEnumTypeDefinition declaringType;
    private Cache`2<CsdlSemanticsEnumMember, IEdmEnumMemberValue> valueCache;
    private static Func`2<CsdlSemanticsEnumMember, IEdmEnumMemberValue> ComputeValueFunc;
    public string Name { get; }
    public IEdmEnumType DeclaringType { get; }
    public IEdmEnumMemberValue Value { get; }
    public CsdlSemanticsModel Model { get; }
    public CsdlElement Element { get; }
    public CsdlSemanticsEnumMember(CsdlSemanticsEnumTypeDefinition declaringType, CsdlEnumMember member);
    private static CsdlSemanticsEnumMember();
    public sealed virtual string get_Name();
    public sealed virtual IEdmEnumType get_DeclaringType();
    public sealed virtual IEdmEnumMemberValue get_Value();
    public virtual CsdlSemanticsModel get_Model();
    public virtual CsdlElement get_Element();
    protected virtual IEnumerable`1<IEdmVocabularyAnnotation> ComputeInlineVocabularyAnnotations();
    private IEdmEnumMemberValue ComputeValue();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsEnumMemberExpression : CsdlSemanticsExpression {
    private CsdlEnumMemberExpression expression;
    private IEdmEntityType bindingContext;
    private Cache`2<CsdlSemanticsEnumMemberExpression, IEnumerable`1<IEdmEnumMember>> referencedCache;
    private static Func`2<CsdlSemanticsEnumMemberExpression, IEnumerable`1<IEdmEnumMember>> ComputeReferencedFunc;
    private Cache`2<CsdlSemanticsEnumMemberExpression, IEnumerable`1<EdmError>> errorsCache;
    private static Func`2<CsdlSemanticsEnumMemberExpression, IEnumerable`1<EdmError>> ComputeErrorsFunc;
    public CsdlElement Element { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public IEnumerable`1<IEdmEnumMember> EnumMembers { get; }
    public IEnumerable`1<EdmError> Errors { get; }
    public CsdlSemanticsEnumMemberExpression(CsdlEnumMemberExpression expression, IEdmEntityType bindingContext, CsdlSemanticsSchema schema);
    private static CsdlSemanticsEnumMemberExpression();
    public virtual CsdlElement get_Element();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual IEnumerable`1<IEdmEnumMember> get_EnumMembers();
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    private IEnumerable`1<IEdmEnumMember> ComputeReferenced();
    private IEnumerable`1<EdmError> ComputeErrors();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsEnumTypeDefinition : CsdlSemanticsTypeDefinition {
    private string fullName;
    private CsdlEnumType enumeration;
    private Cache`2<CsdlSemanticsEnumTypeDefinition, IEdmPrimitiveType> underlyingTypeCache;
    private static Func`2<CsdlSemanticsEnumTypeDefinition, IEdmPrimitiveType> ComputeUnderlyingTypeFunc;
    private Cache`2<CsdlSemanticsEnumTypeDefinition, IEnumerable`1<IEdmEnumMember>> membersCache;
    private static Func`2<CsdlSemanticsEnumTypeDefinition, IEnumerable`1<IEdmEnumMember>> ComputeMembersFunc;
    [CompilerGeneratedAttribute]
private CsdlSemanticsSchema <Context>k__BackingField;
    private IEdmPrimitiveType Microsoft.OData.Edm.IEdmEnumType.UnderlyingType { get; }
    public IEnumerable`1<IEdmEnumMember> Members { get; }
    private bool Microsoft.OData.Edm.IEdmEnumType.IsFlags { get; }
    private EdmSchemaElementKind Microsoft.OData.Edm.IEdmSchemaElement.SchemaElementKind { get; }
    public string Namespace { get; }
    public string FullName { get; }
    private string Microsoft.OData.Edm.IEdmNamedElement.Name { get; }
    public EdmTypeKind TypeKind { get; }
    public CsdlSemanticsModel Model { get; }
    public CsdlElement Element { get; }
    public CsdlSemanticsSchema Context { get; private set; }
    public CsdlSemanticsEnumTypeDefinition(CsdlSemanticsSchema context, CsdlEnumType enumeration);
    private static CsdlSemanticsEnumTypeDefinition();
    private sealed virtual override IEdmPrimitiveType Microsoft.OData.Edm.IEdmEnumType.get_UnderlyingType();
    public sealed virtual IEnumerable`1<IEdmEnumMember> get_Members();
    private sealed virtual override bool Microsoft.OData.Edm.IEdmEnumType.get_IsFlags();
    private sealed virtual override EdmSchemaElementKind Microsoft.OData.Edm.IEdmSchemaElement.get_SchemaElementKind();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_FullName();
    private sealed virtual override string Microsoft.OData.Edm.IEdmNamedElement.get_Name();
    public virtual EdmTypeKind get_TypeKind();
    public virtual CsdlSemanticsModel get_Model();
    public virtual CsdlElement get_Element();
    [CompilerGeneratedAttribute]
public CsdlSemanticsSchema get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(CsdlSemanticsSchema value);
    protected virtual IEnumerable`1<IEdmVocabularyAnnotation> ComputeInlineVocabularyAnnotations();
    private IEdmPrimitiveType ComputeUnderlyingType();
    private IEnumerable`1<IEdmEnumMember> ComputeMembers();
}
internal abstract class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsExpression : CsdlSemanticsElement {
    private CsdlSemanticsSchema schema;
    public EdmExpressionKind ExpressionKind { get; }
    public CsdlSemanticsSchema Schema { get; }
    public CsdlSemanticsModel Model { get; }
    protected CsdlSemanticsExpression(CsdlSemanticsSchema schema, CsdlExpressionBase element);
    public abstract virtual EdmExpressionKind get_ExpressionKind();
    public CsdlSemanticsSchema get_Schema();
    public virtual CsdlSemanticsModel get_Model();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsFloatingConstantExpression : CsdlSemanticsExpression {
    private CsdlConstantExpression expression;
    private Cache`2<CsdlSemanticsFloatingConstantExpression, double> valueCache;
    private static Func`2<CsdlSemanticsFloatingConstantExpression, double> ComputeValueFunc;
    private Cache`2<CsdlSemanticsFloatingConstantExpression, IEnumerable`1<EdmError>> errorsCache;
    private static Func`2<CsdlSemanticsFloatingConstantExpression, IEnumerable`1<EdmError>> ComputeErrorsFunc;
    public CsdlElement Element { get; }
    public double Value { get; }
    public IEdmTypeReference Type { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public IEnumerable`1<EdmError> Errors { get; }
    public CsdlSemanticsFloatingConstantExpression(CsdlConstantExpression expression, CsdlSemanticsSchema schema);
    private static CsdlSemanticsFloatingConstantExpression();
    public virtual CsdlElement get_Element();
    public sealed virtual double get_Value();
    public sealed virtual IEdmTypeReference get_Type();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual EdmValueKind get_ValueKind();
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    private double ComputeValue();
    private IEnumerable`1<EdmError> ComputeErrors();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsFunction : CsdlSemanticsOperation {
    private CsdlFunction function;
    public bool IsComposable { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public CsdlSemanticsFunction(CsdlSemanticsSchema context, CsdlFunction function);
    public sealed virtual bool get_IsComposable();
    public virtual EdmSchemaElementKind get_SchemaElementKind();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsFunctionImport : CsdlSemanticsOperationImport {
    private CsdlFunctionImport functionImport;
    private CsdlSemanticsSchema csdlSchema;
    public IEdmFunction Function { get; }
    public bool IncludeInServiceDocument { get; }
    public EdmContainerElementKind ContainerElementKind { get; }
    public CsdlSemanticsFunctionImport(CsdlSemanticsEntityContainer container, CsdlFunctionImport functionImport, IEdmFunction backingfunction);
    public sealed virtual IEdmFunction get_Function();
    public sealed virtual bool get_IncludeInServiceDocument();
    public virtual EdmContainerElementKind get_ContainerElementKind();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsGuidConstantExpression : CsdlSemanticsExpression {
    private CsdlConstantExpression expression;
    private Cache`2<CsdlSemanticsGuidConstantExpression, Guid> valueCache;
    private static Func`2<CsdlSemanticsGuidConstantExpression, Guid> ComputeValueFunc;
    private Cache`2<CsdlSemanticsGuidConstantExpression, IEnumerable`1<EdmError>> errorsCache;
    private static Func`2<CsdlSemanticsGuidConstantExpression, IEnumerable`1<EdmError>> ComputeErrorsFunc;
    public CsdlElement Element { get; }
    public Guid Value { get; }
    public IEdmTypeReference Type { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public IEnumerable`1<EdmError> Errors { get; }
    public CsdlSemanticsGuidConstantExpression(CsdlConstantExpression expression, CsdlSemanticsSchema schema);
    private static CsdlSemanticsGuidConstantExpression();
    public virtual CsdlElement get_Element();
    public sealed virtual Guid get_Value();
    public sealed virtual IEdmTypeReference get_Type();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual EdmValueKind get_ValueKind();
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    private Guid ComputeValue();
    private IEnumerable`1<EdmError> ComputeErrors();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsIfExpression : CsdlSemanticsExpression {
    private CsdlIfExpression expression;
    private IEdmEntityType bindingContext;
    private Cache`2<CsdlSemanticsIfExpression, IEdmExpression> testCache;
    private static Func`2<CsdlSemanticsIfExpression, IEdmExpression> ComputeTestFunc;
    private Cache`2<CsdlSemanticsIfExpression, IEdmExpression> ifTrueCache;
    private static Func`2<CsdlSemanticsIfExpression, IEdmExpression> ComputeIfTrueFunc;
    private Cache`2<CsdlSemanticsIfExpression, IEdmExpression> ifFalseCache;
    private static Func`2<CsdlSemanticsIfExpression, IEdmExpression> ComputeIfFalseFunc;
    public CsdlElement Element { get; }
    public IEdmEntityType BindingContext { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public IEdmExpression TestExpression { get; }
    public IEdmExpression TrueExpression { get; }
    public IEdmExpression FalseExpression { get; }
    public CsdlSemanticsIfExpression(CsdlIfExpression expression, IEdmEntityType bindingContext, CsdlSemanticsSchema schema);
    private static CsdlSemanticsIfExpression();
    public virtual CsdlElement get_Element();
    public IEdmEntityType get_BindingContext();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual IEdmExpression get_TestExpression();
    public sealed virtual IEdmExpression get_TrueExpression();
    public sealed virtual IEdmExpression get_FalseExpression();
    private IEdmExpression ComputeTest();
    private IEdmExpression ComputeIfTrue();
    private IEdmExpression ComputeIfFalse();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsInclude : CsdlSemanticsElement {
    protected CsdlSemanticsModel model;
    protected CsdlInclude include;
    public string Alias { get; }
    public string Namespace { get; }
    public CsdlSemanticsModel Model { get; }
    public CsdlElement Element { get; }
    public CsdlSemanticsInclude(CsdlSemanticsModel model, CsdlInclude include);
    public sealed virtual string get_Alias();
    public sealed virtual string get_Namespace();
    public virtual CsdlSemanticsModel get_Model();
    public virtual CsdlElement get_Element();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsIncludeAnnotations : CsdlSemanticsElement {
    protected CsdlSemanticsModel model;
    protected CsdlIncludeAnnotations includeAnnotations;
    public string TermNamespace { get; }
    public string Qualifier { get; }
    public string TargetNamespace { get; }
    public CsdlSemanticsModel Model { get; }
    public CsdlElement Element { get; }
    public CsdlSemanticsIncludeAnnotations(CsdlSemanticsModel model, CsdlIncludeAnnotations includeAnnotations);
    public sealed virtual string get_TermNamespace();
    public sealed virtual string get_Qualifier();
    public sealed virtual string get_TargetNamespace();
    public virtual CsdlSemanticsModel get_Model();
    public virtual CsdlElement get_Element();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsIntConstantExpression : CsdlSemanticsExpression {
    private CsdlConstantExpression expression;
    private Cache`2<CsdlSemanticsIntConstantExpression, long> valueCache;
    private static Func`2<CsdlSemanticsIntConstantExpression, long> ComputeValueFunc;
    private Cache`2<CsdlSemanticsIntConstantExpression, IEnumerable`1<EdmError>> errorsCache;
    private static Func`2<CsdlSemanticsIntConstantExpression, IEnumerable`1<EdmError>> ComputeErrorsFunc;
    public CsdlElement Element { get; }
    public long Value { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public IEdmTypeReference Type { get; }
    public IEnumerable`1<EdmError> Errors { get; }
    public CsdlSemanticsIntConstantExpression(CsdlConstantExpression expression, CsdlSemanticsSchema schema);
    private static CsdlSemanticsIntConstantExpression();
    public virtual CsdlElement get_Element();
    public sealed virtual long get_Value();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual EdmValueKind get_ValueKind();
    public sealed virtual IEdmTypeReference get_Type();
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    private long ComputeValue();
    private IEnumerable`1<EdmError> ComputeErrors();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsIsOfExpression : CsdlSemanticsExpression {
    private CsdlIsOfExpression expression;
    private IEdmEntityType bindingContext;
    private Cache`2<CsdlSemanticsIsOfExpression, IEdmExpression> operandCache;
    private static Func`2<CsdlSemanticsIsOfExpression, IEdmExpression> ComputeOperandFunc;
    private Cache`2<CsdlSemanticsIsOfExpression, IEdmTypeReference> typeCache;
    private static Func`2<CsdlSemanticsIsOfExpression, IEdmTypeReference> ComputeTypeFunc;
    public CsdlElement Element { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public IEdmExpression Operand { get; }
    public IEdmTypeReference Type { get; }
    public CsdlSemanticsIsOfExpression(CsdlIsOfExpression expression, IEdmEntityType bindingContext, CsdlSemanticsSchema schema);
    private static CsdlSemanticsIsOfExpression();
    public virtual CsdlElement get_Element();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual IEdmExpression get_Operand();
    public sealed virtual IEdmTypeReference get_Type();
    private IEdmExpression ComputeOperand();
    private IEdmTypeReference ComputeType();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsLabeledExpression : CsdlSemanticsElement {
    private string name;
    private CsdlExpressionBase sourceElement;
    private CsdlSemanticsSchema schema;
    private IEdmEntityType bindingContext;
    private Cache`2<CsdlSemanticsLabeledExpression, IEdmExpression> expressionCache;
    private static Func`2<CsdlSemanticsLabeledExpression, IEdmExpression> ComputeExpressionFunc;
    public CsdlElement Element { get; }
    public CsdlSemanticsModel Model { get; }
    public IEdmEntityType BindingContext { get; }
    public IEdmExpression Expression { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public string Name { get; }
    public CsdlSemanticsLabeledExpression(string name, CsdlExpressionBase element, IEdmEntityType bindingContext, CsdlSemanticsSchema schema);
    private static CsdlSemanticsLabeledExpression();
    public virtual CsdlElement get_Element();
    public virtual CsdlSemanticsModel get_Model();
    public IEdmEntityType get_BindingContext();
    public sealed virtual IEdmExpression get_Expression();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual string get_Name();
    private IEdmExpression ComputeExpression();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsLabeledExpressionReferenceExpression : CsdlSemanticsExpression {
    private CsdlLabeledExpressionReferenceExpression expression;
    private IEdmEntityType bindingContext;
    private Cache`2<CsdlSemanticsLabeledExpressionReferenceExpression, IEdmLabeledExpression> elementCache;
    private static Func`2<CsdlSemanticsLabeledExpressionReferenceExpression, IEdmLabeledExpression> ComputeElementFunc;
    public CsdlElement Element { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public IEdmLabeledExpression ReferencedLabeledExpression { get; }
    public IEnumerable`1<EdmError> Errors { get; }
    public CsdlSemanticsLabeledExpressionReferenceExpression(CsdlLabeledExpressionReferenceExpression expression, IEdmEntityType bindingContext, CsdlSemanticsSchema schema);
    private static CsdlSemanticsLabeledExpressionReferenceExpression();
    public virtual CsdlElement get_Element();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual IEdmLabeledExpression get_ReferencedLabeledExpression();
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    private IEdmLabeledExpression ComputeElement();
}
[DebuggerDisplayAttribute("CsdlSemanticsModel({string.Join(",", DeclaredNamespaces)})")]
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsModel : EdmModelBase {
    private CsdlSemanticsModel mainEdmModel;
    private CsdlModel astModel;
    private List`1<CsdlSemanticsSchema> schemata;
    private List`1<CsdlSemanticsReference> references;
    private Dictionary`2<string, List`1<CsdlSemanticsAnnotations>> outOfLineAnnotations;
    private ConcurrentDictionary`2<CsdlAnnotation, CsdlSemanticsVocabularyAnnotation> wrappedAnnotations;
    private Dictionary`2<string, List`1<IEdmStructuredType>> derivedTypeMappings;
    public IEnumerable`1<IEdmSchemaElement> SchemaElements { get; }
    public IEnumerable`1<string> DeclaredNamespaces { get; }
    public IDictionary`2<string, List`1<CsdlSemanticsAnnotations>> OutOfLineAnnotations { get; }
    public IEnumerable`1<IEdmVocabularyAnnotation> VocabularyAnnotations { get; }
    public IEnumerable`1<EdmError> Errors { get; }
    internal CsdlSemanticsModel MainModel { get; }
    public CsdlSemanticsModel(CsdlModel astModel, IEdmDirectValueAnnotationsManager annotationsManager, IEnumerable`1<IEdmModel> referencedModels, bool includeDefaultVocabularies);
    public CsdlSemanticsModel(CsdlModel mainCsdlModel, IEdmDirectValueAnnotationsManager annotationsManager, IEnumerable`1<CsdlModel> referencedCsdlModels, bool includeDefaultVocabularies);
    private CsdlSemanticsModel(CsdlModel referencedCsdlModel, IEdmDirectValueAnnotationsManager annotationsManager, CsdlSemanticsModel mainCsdlSemanticsModel, bool includeDefaultVocabularies);
    private IEnumerable`1<IEdmReference> BuildEdmReferences(IEnumerable`1<CsdlReference> csdlReference);
    [IteratorStateMachineAttribute("Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsModel/<get_SchemaElements>d__12")]
public virtual IEnumerable`1<IEdmSchemaElement> get_SchemaElements();
    public virtual IEnumerable`1<string> get_DeclaredNamespaces();
    public IDictionary`2<string, List`1<CsdlSemanticsAnnotations>> get_OutOfLineAnnotations();
    public virtual IEnumerable`1<IEdmVocabularyAnnotation> get_VocabularyAnnotations();
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    internal CsdlSemanticsModel get_MainModel();
    public virtual IEnumerable`1<IEdmVocabularyAnnotation> FindDeclaredVocabularyAnnotations(IEdmVocabularyAnnotatable element);
    public virtual IEnumerable`1<IEdmStructuredType> FindDirectlyDerivedTypes(IEdmStructuredType baseType);
    internal void AddToReferencedModels(IEnumerable`1<IEdmModel> models);
    internal static IEdmExpression WrapExpression(CsdlExpressionBase expression, IEdmEntityType bindingContext, CsdlSemanticsSchema schema);
    internal static IEdmTypeReference WrapTypeReference(CsdlSemanticsSchema schema, CsdlTypeReference type);
    internal IEnumerable`1<IEdmVocabularyAnnotation> WrapInlineVocabularyAnnotations(CsdlSemanticsElement element, CsdlSemanticsSchema schema);
    private IEdmVocabularyAnnotation WrapVocabularyAnnotation(CsdlAnnotation annotation, CsdlSemanticsSchema schema, IEdmVocabularyAnnotatable targetContext, CsdlSemanticsAnnotations annotationsContext, string qualifier);
    private void AddSchema(CsdlSchema schema);
    private void AddSchema(CsdlSchema schema, bool addAnnotations);
    private void AddSchemaIfReferenced(CsdlSchema schema, IEnumerable`1<CsdlReference> parentReferences);
    private static void ProcessSchemaParentReferences(CsdlSchema schema, CsdlSemanticsSchema schemaWrapper, IEnumerable`1<CsdlReference> parentReferences, Boolean& shouldAddSchemaElements, Dictionary`2& includeAnnotationsIndex);
    private void AddSchemaElements(CsdlSemanticsSchema schemaWrapper);
    private void AddOutOfLineAnnotationsFromSchema(CsdlSchema schema, CsdlSemanticsSchema schemaWrapper, Dictionary`2<string, List`1<CsdlIncludeAnnotations>> includeAnnotationsIndex);
    private CsdlAnnotations FilterIncludedAnnotations(CsdlAnnotations csdlAnnotations, string target, Dictionary`2<string, List`1<CsdlIncludeAnnotations>> includeAnnotationsIndex);
    private bool ShouldIncludeAnnotation(CsdlAnnotation annotation, string target, Dictionary`2<string, List`1<CsdlIncludeAnnotations>> includeAnnotationsIndex);
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsNamedTypeReference : CsdlSemanticsElement {
    private CsdlSemanticsSchema schema;
    private CsdlNamedTypeReference reference;
    private Cache`2<CsdlSemanticsNamedTypeReference, IEdmType> definitionCache;
    private static Func`2<CsdlSemanticsNamedTypeReference, IEdmType> ComputeDefinitionFunc;
    public IEdmType Definition { get; }
    public bool IsNullable { get; }
    public CsdlSemanticsModel Model { get; }
    public CsdlElement Element { get; }
    public CsdlSemanticsNamedTypeReference(CsdlSemanticsSchema schema, CsdlNamedTypeReference reference);
    private static CsdlSemanticsNamedTypeReference();
    public sealed virtual IEdmType get_Definition();
    public sealed virtual bool get_IsNullable();
    public virtual CsdlSemanticsModel get_Model();
    public virtual CsdlElement get_Element();
    public virtual string ToString();
    private IEdmType ComputeDefinition();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsNavigationProperty : CsdlSemanticsElement {
    private CsdlNavigationProperty navigationProperty;
    private CsdlSemanticsStructuredTypeDefinition declaringType;
    private Cache`2<CsdlSemanticsNavigationProperty, IEdmTypeReference> typeCache;
    private static Func`2<CsdlSemanticsNavigationProperty, IEdmTypeReference> ComputeTypeFunc;
    private Cache`2<CsdlSemanticsNavigationProperty, IEdmNavigationProperty> partnerCache;
    private static Func`2<CsdlSemanticsNavigationProperty, IEdmNavigationProperty> ComputePartnerFunc;
    private Cache`2<CsdlSemanticsNavigationProperty, IEdmReferentialConstraint> referentialConstraintCache;
    private static Func`2<CsdlSemanticsNavigationProperty, IEdmReferentialConstraint> ComputeReferentialConstraintFunc;
    private Cache`2<CsdlSemanticsNavigationProperty, IEdmEntityType> targetEntityTypeCache;
    private static Func`2<CsdlSemanticsNavigationProperty, IEdmEntityType> ComputeTargetEntityTypeFunc;
    private Cache`2<CsdlSemanticsNavigationProperty, IEnumerable`1<EdmError>> errorsCache;
    private static Func`2<CsdlSemanticsNavigationProperty, IEnumerable`1<EdmError>> ComputeErrorsFunc;
    public CsdlSemanticsModel Model { get; }
    public CsdlElement Element { get; }
    public string Name { get; }
    public EdmOnDeleteAction OnDelete { get; }
    public IEdmStructuredType DeclaringType { get; }
    public bool ContainsTarget { get; }
    public IEdmTypeReference Type { get; }
    public EdmPropertyKind PropertyKind { get; }
    public IEdmNavigationProperty Partner { get; }
    public IEnumerable`1<EdmError> Errors { get; }
    public IEdmReferentialConstraint ReferentialConstraint { get; }
    private IEdmEntityType TargetEntityType { get; }
    public CsdlSemanticsNavigationProperty(CsdlSemanticsStructuredTypeDefinition declaringType, CsdlNavigationProperty navigationProperty);
    private static CsdlSemanticsNavigationProperty();
    public virtual CsdlSemanticsModel get_Model();
    public virtual CsdlElement get_Element();
    public sealed virtual string get_Name();
    public sealed virtual EdmOnDeleteAction get_OnDelete();
    public sealed virtual IEdmStructuredType get_DeclaringType();
    public sealed virtual bool get_ContainsTarget();
    public sealed virtual IEdmTypeReference get_Type();
    public sealed virtual EdmPropertyKind get_PropertyKind();
    public sealed virtual IEdmNavigationProperty get_Partner();
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    public sealed virtual IEdmReferentialConstraint get_ReferentialConstraint();
    private IEdmEntityType get_TargetEntityType();
    internal static IEdmNavigationProperty ResolvePartnerPath(IEdmEntityType type, IEdmPathExpression path, IEdmModel model);
    protected virtual IEnumerable`1<IEdmVocabularyAnnotation> ComputeInlineVocabularyAnnotations();
    private IEdmEntityType ComputeTargetEntityType();
    private IEdmNavigationProperty ComputePartner();
    private IEdmTypeReference ComputeType();
    private IEdmReferentialConstraint ComputeReferentialConstraint();
    private EdmReferentialConstraintPropertyPair ComputeReferentialConstraintPropertyPair(CsdlReferentialConstraint csdlConstraint);
    private IEnumerable`1<EdmError> ComputeErrors();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsNavigationPropertyPathExpression : CsdlSemanticsPathExpression {
    public EdmExpressionKind ExpressionKind { get; }
    public CsdlSemanticsNavigationPropertyPathExpression(CsdlPathExpression expression, IEdmEntityType bindingContext, CsdlSemanticsSchema schema);
    public virtual EdmExpressionKind get_ExpressionKind();
}
internal abstract class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsNavigationSource : CsdlSemanticsElement {
    [SuppressMessageAttribute("StyleCop.CSharp.NamingRules", "SA1304:NonPrivateReadonlyFieldsMustBeginWithUpperCaseLetter")]
protected CsdlAbstractNavigationSource navigationSource;
    [SuppressMessageAttribute("StyleCop.CSharp.NamingRules", "SA1304:NonPrivateReadonlyFieldsMustBeginWithUpperCaseLetter")]
protected CsdlSemanticsEntityContainer container;
    [SuppressMessageAttribute("StyleCop.CSharp.NamingRules", "SA1304:NonPrivateReadonlyFieldsMustBeginWithUpperCaseLetter")]
protected IEdmPathExpression path;
    [SuppressMessageAttribute("StyleCop.CSharp.NamingRules", "SA1304:NonPrivateReadonlyFieldsMustBeginWithUpperCaseLetter")]
protected Cache`2<CsdlSemanticsNavigationSource, IEdmEntityType> typeCache;
    protected static Func`2<CsdlSemanticsNavigationSource, IEdmEntityType> ComputeElementTypeFunc;
    private Cache`2<CsdlSemanticsNavigationSource, IEnumerable`1<IEdmNavigationPropertyBinding>> navigationTargetsCache;
    private static Func`2<CsdlSemanticsNavigationSource, IEnumerable`1<IEdmNavigationPropertyBinding>> ComputeNavigationTargetsFunc;
    private ConcurrentDictionary`2<IEdmNavigationProperty, IEdmContainedEntitySet> containedNavigationPropertyCache;
    private ConcurrentDictionary`2<IEdmNavigationProperty, IEdmUnknownEntitySet> unknownNavigationPropertyCache;
    private ConcurrentDictionary`2<IEdmNavigationProperty, IEnumerable`1<IEdmNavigationPropertyBinding>> navigationPropertyBindingCache;
    private IEdmEntityType entityType;
    private bool entityTypeSet;
    public CsdlSemanticsModel Model { get; }
    public IEdmEntityContainer Container { get; }
    public CsdlElement Element { get; }
    public string Name { get; }
    public IEdmPathExpression Path { get; }
    public IEdmType Type { get; }
    public EdmContainerElementKind ContainerElementKind { get; }
    public IEnumerable`1<IEdmNavigationPropertyBinding> NavigationPropertyBindings { get; }
    public IEdmEntityType EntityType { get; }
    public CsdlSemanticsNavigationSource(CsdlSemanticsEntityContainer container, CsdlAbstractNavigationSource navigationSource);
    private static CsdlSemanticsNavigationSource();
    public virtual CsdlSemanticsModel get_Model();
    public sealed virtual IEdmEntityContainer get_Container();
    public virtual CsdlElement get_Element();
    public sealed virtual string get_Name();
    public sealed virtual IEdmPathExpression get_Path();
    public abstract virtual IEdmType get_Type();
    public abstract virtual EdmContainerElementKind get_ContainerElementKind();
    public sealed virtual IEnumerable`1<IEdmNavigationPropertyBinding> get_NavigationPropertyBindings();
    public sealed virtual IEdmEntityType get_EntityType();
    public sealed virtual IEdmNavigationSource FindNavigationTarget(IEdmNavigationProperty property, IEdmPathExpression bindingPath);
    public sealed virtual IEdmNavigationSource FindNavigationTarget(IEdmNavigationProperty navigationProperty);
    public sealed virtual IEnumerable`1<IEdmNavigationPropertyBinding> FindNavigationPropertyBindings(IEdmNavigationProperty navigationProperty);
    protected virtual IEnumerable`1<IEdmVocabularyAnnotation> ComputeInlineVocabularyAnnotations();
    protected abstract virtual IEdmEntityType ComputeElementType();
    private IEnumerable`1<IEdmNavigationPropertyBinding> ComputeNavigationTargets();
    private IEdmNavigationPropertyBinding CreateSemanticMappingForBinding(CsdlNavigationPropertyBinding binding);
    private IEdmNavigationProperty ResolveNavigationPropertyPathForBinding(CsdlNavigationPropertyBinding binding);
    [CompilerGeneratedAttribute]
private IEdmContainedEntitySet <FindNavigationTarget>b__31_0(IEdmNavigationProperty navProperty);
    [CompilerGeneratedAttribute]
private IEdmUnknownEntitySet <FindNavigationTarget>b__31_1(IEdmNavigationProperty navProperty);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IEdmNavigationPropertyBinding> <FindNavigationPropertyBindings>b__33_0(IEdmNavigationProperty property);
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsNullExpression : CsdlSemanticsExpression {
    private CsdlConstantExpression expression;
    public CsdlElement Element { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public IEdmTypeReference Type { get; }
    public CsdlSemanticsNullExpression(CsdlConstantExpression expression, CsdlSemanticsSchema schema);
    public virtual CsdlElement get_Element();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual EdmValueKind get_ValueKind();
    public sealed virtual IEdmTypeReference get_Type();
}
internal abstract class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsOperation : CsdlSemanticsElement {
    private string fullName;
    private CsdlOperation operation;
    private Cache`2<CsdlSemanticsOperation, IEdmPathExpression> entitySetPathCache;
    private static Func`2<CsdlSemanticsOperation, IEdmPathExpression> ComputeEntitySetPathFunc;
    private Cache`2<CsdlSemanticsOperation, IEdmOperationReturn> returnCache;
    private static Func`2<CsdlSemanticsOperation, IEdmOperationReturn> ComputeReturnFunc;
    private Cache`2<CsdlSemanticsOperation, IEnumerable`1<IEdmOperationParameter>> parametersCache;
    private static Func`2<CsdlSemanticsOperation, IEnumerable`1<IEdmOperationParameter>> ComputeParametersFunc;
    [CompilerGeneratedAttribute]
private CsdlSemanticsSchema <Context>k__BackingField;
    public EdmSchemaElementKind SchemaElementKind { get; }
    public CsdlSemanticsModel Model { get; }
    public string Name { get; }
    public string FullName { get; }
    public CsdlElement Element { get; }
    public string Namespace { get; }
    public bool IsBound { get; }
    public IEdmPathExpression EntitySetPath { get; }
    public IEdmTypeReference ReturnType { get; }
    public IEdmOperationReturn Return { get; }
    public IEnumerable`1<IEdmOperationParameter> Parameters { get; }
    public CsdlSemanticsSchema Context { get; private set; }
    public CsdlSemanticsOperation(CsdlSemanticsSchema context, CsdlOperation operation);
    private static CsdlSemanticsOperation();
    public abstract virtual EdmSchemaElementKind get_SchemaElementKind();
    public virtual CsdlSemanticsModel get_Model();
    public sealed virtual string get_Name();
    public sealed virtual string get_FullName();
    public virtual CsdlElement get_Element();
    public sealed virtual string get_Namespace();
    public sealed virtual bool get_IsBound();
    public sealed virtual IEdmPathExpression get_EntitySetPath();
    public sealed virtual IEdmTypeReference get_ReturnType();
    public IEdmOperationReturn get_Return();
    public sealed virtual IEnumerable`1<IEdmOperationParameter> get_Parameters();
    [CompilerGeneratedAttribute]
public CsdlSemanticsSchema get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(CsdlSemanticsSchema value);
    public sealed virtual IEdmOperationParameter FindParameter(string name);
    internal static string ParameterizedTargetName(IList`1<IEdmOperationParameter> parameters);
    protected virtual IEnumerable`1<IEdmVocabularyAnnotation> ComputeInlineVocabularyAnnotations();
    private IEdmPathExpression ComputeEntitySetPath();
    private IEdmOperationReturn ComputeReturn();
    private IEnumerable`1<IEdmOperationParameter> ComputeParameters();
    private bool TryGetOptionalParameterOutOfLineAnnotation(string fullTargetName, string targetName, String& defaultValue);
}
internal abstract class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsOperationImport : CsdlSemanticsElement {
    private CsdlOperationImport operationImport;
    private CsdlSemanticsEntityContainer container;
    private Cache`2<CsdlSemanticsOperationImport, IEdmExpression> entitySetCache;
    private static Func`2<CsdlSemanticsOperationImport, IEdmExpression> ComputeEntitySetFunc;
    [CompilerGeneratedAttribute]
private IEdmOperation <Operation>k__BackingField;
    public IEdmOperation Operation { get; private set; }
    public CsdlSemanticsModel Model { get; }
    public CsdlElement Element { get; }
    public string Name { get; }
    public IEdmEntityContainer Container { get; }
    public IEdmExpression EntitySet { get; }
    public EdmContainerElementKind ContainerElementKind { get; }
    protected CsdlSemanticsOperationImport(CsdlSemanticsEntityContainer container, CsdlOperationImport operationImport, IEdmOperation operation);
    private static CsdlSemanticsOperationImport();
    [CompilerGeneratedAttribute]
public sealed virtual IEdmOperation get_Operation();
    [CompilerGeneratedAttribute]
private void set_Operation(IEdmOperation value);
    public virtual CsdlSemanticsModel get_Model();
    public virtual CsdlElement get_Element();
    public sealed virtual string get_Name();
    public sealed virtual IEdmEntityContainer get_Container();
    public sealed virtual IEdmExpression get_EntitySet();
    public abstract virtual EdmContainerElementKind get_ContainerElementKind();
    protected virtual IEnumerable`1<IEdmVocabularyAnnotation> ComputeInlineVocabularyAnnotations();
    private IEdmExpression ComputeEntitySet();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsOperationParameter : CsdlSemanticsElement {
    private CsdlSemanticsOperation declaringOperation;
    private CsdlOperationParameter parameter;
    private Cache`2<CsdlSemanticsOperationParameter, IEdmTypeReference> typeCache;
    private static Func`2<CsdlSemanticsOperationParameter, IEdmTypeReference> ComputeTypeFunc;
    public CsdlSemanticsModel Model { get; }
    public CsdlElement Element { get; }
    public IEdmTypeReference Type { get; }
    public string Name { get; }
    public IEdmOperation DeclaringOperation { get; }
    public CsdlSemanticsOperationParameter(CsdlSemanticsOperation declaringOperation, CsdlOperationParameter parameter);
    private static CsdlSemanticsOperationParameter();
    public virtual CsdlSemanticsModel get_Model();
    public virtual CsdlElement get_Element();
    public sealed virtual IEdmTypeReference get_Type();
    public sealed virtual string get_Name();
    public sealed virtual IEdmOperation get_DeclaringOperation();
    protected virtual IEnumerable`1<IEdmVocabularyAnnotation> ComputeInlineVocabularyAnnotations();
    private IEdmTypeReference ComputeType();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsOperationReturn : CsdlSemanticsElement {
    private CsdlSemanticsOperation declaringOperation;
    private CsdlOperationReturn operationReturn;
    private Cache`2<CsdlSemanticsOperationReturn, IEdmTypeReference> typeCache;
    private static Func`2<CsdlSemanticsOperationReturn, IEdmTypeReference> ComputeTypeFunc;
    public CsdlSemanticsModel Model { get; }
    public CsdlElement Element { get; }
    public IEdmTypeReference Type { get; }
    public IEdmOperation DeclaringOperation { get; }
    public CsdlSemanticsOperationReturn(CsdlSemanticsOperation declaringOperation, CsdlOperationReturn operationReturn);
    private static CsdlSemanticsOperationReturn();
    public virtual CsdlSemanticsModel get_Model();
    public virtual CsdlElement get_Element();
    public sealed virtual IEdmTypeReference get_Type();
    public sealed virtual IEdmOperation get_DeclaringOperation();
    protected virtual IEnumerable`1<IEdmVocabularyAnnotation> ComputeInlineVocabularyAnnotations();
    private IEdmTypeReference ComputeType();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsOptionalParameter : CsdlSemanticsOperationParameter {
    [CompilerGeneratedAttribute]
private string <DefaultValueString>k__BackingField;
    public string DefaultValueString { get; private set; }
    public CsdlSemanticsOptionalParameter(CsdlSemanticsOperation declaringOperation, CsdlOperationParameter parameter, string defaultValue);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultValueString();
    [CompilerGeneratedAttribute]
private void set_DefaultValueString(string value);
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsPathExpression : CsdlSemanticsExpression {
    protected CsdlPathExpression Expression;
    protected IEdmEntityType BindingContext;
    protected Cache`2<CsdlSemanticsPathExpression, IEnumerable`1<string>> PathCache;
    protected static Func`2<CsdlSemanticsPathExpression, IEnumerable`1<string>> ComputePathFunc;
    public CsdlElement Element { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public IEnumerable`1<string> PathSegments { get; }
    public string Path { get; }
    public CsdlSemanticsPathExpression(CsdlPathExpression expression, IEdmEntityType bindingContext, CsdlSemanticsSchema schema);
    private static CsdlSemanticsPathExpression();
    public virtual CsdlElement get_Element();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual IEnumerable`1<string> get_PathSegments();
    public sealed virtual string get_Path();
    private IEnumerable`1<string> ComputePath();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsPrimitiveTypeReference : CsdlSemanticsElement {
    internal CsdlPrimitiveTypeReference Reference;
    private CsdlSemanticsSchema schema;
    private IEdmPrimitiveType definition;
    public bool IsNullable { get; }
    public IEdmType Definition { get; }
    public CsdlSemanticsModel Model { get; }
    public CsdlElement Element { get; }
    public CsdlSemanticsPrimitiveTypeReference(CsdlSemanticsSchema schema, CsdlPrimitiveTypeReference reference);
    public sealed virtual bool get_IsNullable();
    public sealed virtual IEdmType get_Definition();
    public virtual CsdlSemanticsModel get_Model();
    public virtual CsdlElement get_Element();
    public virtual string ToString();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsProperty : CsdlSemanticsElement {
    protected CsdlProperty property;
    private CsdlSemanticsStructuredTypeDefinition declaringType;
    private Cache`2<CsdlSemanticsProperty, IEdmTypeReference> typeCache;
    private static Func`2<CsdlSemanticsProperty, IEdmTypeReference> ComputeTypeFunc;
    public string Name { get; }
    public IEdmStructuredType DeclaringType { get; }
    public IEdmTypeReference Type { get; }
    public CsdlSemanticsModel Model { get; }
    public string DefaultValueString { get; }
    public EdmPropertyKind PropertyKind { get; }
    public CsdlElement Element { get; }
    public CsdlSemanticsProperty(CsdlSemanticsStructuredTypeDefinition declaringType, CsdlProperty property);
    private static CsdlSemanticsProperty();
    public sealed virtual string get_Name();
    public sealed virtual IEdmStructuredType get_DeclaringType();
    public sealed virtual IEdmTypeReference get_Type();
    public virtual CsdlSemanticsModel get_Model();
    public sealed virtual string get_DefaultValueString();
    public sealed virtual EdmPropertyKind get_PropertyKind();
    public virtual CsdlElement get_Element();
    protected virtual IEnumerable`1<IEdmVocabularyAnnotation> ComputeInlineVocabularyAnnotations();
    private IEdmTypeReference ComputeType();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsPropertyConstructor : CsdlSemanticsElement {
    private CsdlPropertyValue property;
    private CsdlSemanticsRecordExpression context;
    private Cache`2<CsdlSemanticsPropertyConstructor, IEdmExpression> valueCache;
    private static Func`2<CsdlSemanticsPropertyConstructor, IEdmExpression> ComputeValueFunc;
    public string Name { get; }
    public IEdmExpression Value { get; }
    public CsdlElement Element { get; }
    public CsdlSemanticsModel Model { get; }
    public CsdlSemanticsPropertyConstructor(CsdlPropertyValue property, CsdlSemanticsRecordExpression context);
    private static CsdlSemanticsPropertyConstructor();
    public sealed virtual string get_Name();
    public sealed virtual IEdmExpression get_Value();
    public virtual CsdlElement get_Element();
    public virtual CsdlSemanticsModel get_Model();
    private IEdmExpression ComputeValue();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsPropertyPathExpression : CsdlSemanticsPathExpression {
    public EdmExpressionKind ExpressionKind { get; }
    public CsdlSemanticsPropertyPathExpression(CsdlPathExpression expression, IEdmEntityType bindingContext, CsdlSemanticsSchema schema);
    public virtual EdmExpressionKind get_ExpressionKind();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsRecordExpression : CsdlSemanticsExpression {
    private CsdlRecordExpression expression;
    private IEdmEntityType bindingContext;
    private Cache`2<CsdlSemanticsRecordExpression, IEdmStructuredTypeReference> declaredTypeCache;
    private static Func`2<CsdlSemanticsRecordExpression, IEdmStructuredTypeReference> ComputeDeclaredTypeFunc;
    private Cache`2<CsdlSemanticsRecordExpression, IEnumerable`1<IEdmPropertyConstructor>> propertiesCache;
    private static Func`2<CsdlSemanticsRecordExpression, IEnumerable`1<IEdmPropertyConstructor>> ComputePropertiesFunc;
    public CsdlElement Element { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public IEdmStructuredTypeReference DeclaredType { get; }
    public IEnumerable`1<IEdmPropertyConstructor> Properties { get; }
    public IEdmEntityType BindingContext { get; }
    public CsdlSemanticsRecordExpression(CsdlRecordExpression expression, IEdmEntityType bindingContext, CsdlSemanticsSchema schema);
    private static CsdlSemanticsRecordExpression();
    public virtual CsdlElement get_Element();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual IEdmStructuredTypeReference get_DeclaredType();
    public sealed virtual IEnumerable`1<IEdmPropertyConstructor> get_Properties();
    public IEdmEntityType get_BindingContext();
    private IEnumerable`1<IEdmPropertyConstructor> ComputeProperties();
    private IEdmStructuredTypeReference ComputeDeclaredType();
}
[DebuggerDisplayAttribute("CsdlSemanticsReference({Uri})")]
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsReference : CsdlSemanticsElement {
    protected CsdlSemanticsModel model;
    protected CsdlReference reference;
    private Cache`2<CsdlSemanticsReference, List`1<IEdmInclude>> includesCache;
    private static Func`2<CsdlSemanticsReference, List`1<IEdmInclude>> ComputeIncludeFunc;
    private Cache`2<CsdlSemanticsReference, List`1<IEdmIncludeAnnotations>> includeAnnotationsCache;
    private static Func`2<CsdlSemanticsReference, List`1<IEdmIncludeAnnotations>> ComputeIncludeAnnotationsFunc;
    public CsdlSemanticsModel Model { get; }
    public CsdlElement Element { get; }
    public Uri Uri { get; }
    public IEnumerable`1<IEdmInclude> Includes { get; }
    public IEnumerable`1<IEdmIncludeAnnotations> IncludeAnnotations { get; }
    public CsdlSemanticsReference(CsdlSemanticsModel model, CsdlReference reference);
    private static CsdlSemanticsReference();
    public virtual CsdlSemanticsModel get_Model();
    public virtual CsdlElement get_Element();
    public sealed virtual Uri get_Uri();
    public sealed virtual IEnumerable`1<IEdmInclude> get_Includes();
    public sealed virtual IEnumerable`1<IEdmIncludeAnnotations> get_IncludeAnnotations();
    protected List`1<IEdmInclude> ComputeIncludes();
    protected List`1<IEdmIncludeAnnotations> ComputeIncludeAnnotations();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsSchema : CsdlSemanticsElement {
    private CsdlSemanticsModel model;
    private CsdlSchema schema;
    private Cache`2<CsdlSemanticsSchema, IEnumerable`1<IEdmSchemaType>> typesCache;
    private static Func`2<CsdlSemanticsSchema, IEnumerable`1<IEdmSchemaType>> ComputeTypesFunc;
    private Cache`2<CsdlSemanticsSchema, IEnumerable`1<IEdmOperation>> operationsCache;
    private static Func`2<CsdlSemanticsSchema, IEnumerable`1<IEdmOperation>> ComputeFunctionsFunc;
    private Cache`2<CsdlSemanticsSchema, IEnumerable`1<IEdmEntityContainer>> entityContainersCache;
    private static Func`2<CsdlSemanticsSchema, IEnumerable`1<IEdmEntityContainer>> ComputeEntityContainersFunc;
    private Cache`2<CsdlSemanticsSchema, IEnumerable`1<IEdmTerm>> termsCache;
    private static Func`2<CsdlSemanticsSchema, IEnumerable`1<IEdmTerm>> ComputeTermsFunc;
    private Cache`2<CsdlSemanticsSchema, Dictionary`2<string, object>> labeledExpressionsCache;
    private static Func`2<CsdlSemanticsSchema, Dictionary`2<string, object>> ComputeLabeledExpressionsFunc;
    private Dictionary`2<CsdlLabeledExpression, IEdmLabeledExpression> semanticsLabeledElements;
    private Dictionary`2<List`1<CsdlLabeledExpression>, IEdmLabeledExpression> ambiguousLabeledExpressions;
    public CsdlSemanticsModel Model { get; }
    public CsdlElement Element { get; }
    public IEnumerable`1<IEdmSchemaType> Types { get; }
    public IEnumerable`1<IEdmOperation> Operations { get; }
    public IEnumerable`1<IEdmTerm> Terms { get; }
    public IEnumerable`1<IEdmEntityContainer> EntityContainers { get; }
    public string Namespace { get; }
    public IEnumerable`1<EdmError> Errors { get; }
    private Dictionary`2<string, object> LabeledExpressions { get; }
    public CsdlSemanticsSchema(CsdlSemanticsModel model, CsdlSchema schema);
    private static CsdlSemanticsSchema();
    public virtual CsdlSemanticsModel get_Model();
    public virtual CsdlElement get_Element();
    public IEnumerable`1<IEdmSchemaType> get_Types();
    public IEnumerable`1<IEdmOperation> get_Operations();
    public IEnumerable`1<IEdmTerm> get_Terms();
    public IEnumerable`1<IEdmEntityContainer> get_EntityContainers();
    public string get_Namespace();
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    private Dictionary`2<string, object> get_LabeledExpressions();
    public IEnumerable`1<IEdmOperation> FindOperations(string name);
    public IEdmSchemaType FindType(string name);
    public IEdmTerm FindTerm(string name);
    public IEdmEntityContainer FindEntityContainer(string name);
    public T FindSchemaElement(string name, Func`3<CsdlSemanticsModel, string, T> modelFinder);
    public string UnresolvedName(string qualifiedName);
    public IEdmLabeledExpression FindLabeledElement(string label, IEdmEntityType bindingContext);
    public IEdmLabeledExpression WrapLabeledElement(CsdlLabeledExpression labeledElement, IEdmEntityType bindingContext);
    internal string ReplaceAlias(string name);
    private static IEdmTerm FindTerm(IEdmModel model, string name);
    private static IEdmEntityContainer FindEntityContainer(IEdmModel model, string name);
    private static void AddLabeledExpressions(CsdlExpressionBase expression, Dictionary`2<string, object> result);
    private static void AddLabeledExpressions(IEnumerable`1<CsdlAnnotation> annotations, Dictionary`2<string, object> result);
    private IEdmLabeledExpression WrapLabeledElementList(List`1<CsdlLabeledExpression> labeledExpressions, IEdmEntityType bindingContext);
    private IEnumerable`1<IEdmTerm> ComputeTerms();
    private IEnumerable`1<IEdmEntityContainer> ComputeEntityContainers();
    private IEnumerable`1<IEdmOperation> ComputeOperations();
    private IEnumerable`1<IEdmSchemaType> ComputeTypes();
    private void AttachDefaultPrimitiveValueConverter(CsdlTypeDefinition typeDefinition, IEdmTypeDefinition edmTypeDefinition);
    private Dictionary`2<string, object> ComputeLabeledExpressions();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsSingleton : CsdlSemanticsNavigationSource {
    private IEdmType type;
    public IEdmType Type { get; }
    public EdmContainerElementKind ContainerElementKind { get; }
    public CsdlSemanticsSingleton(CsdlSemanticsEntityContainer container, CsdlSingleton singleton);
    public virtual IEdmType get_Type();
    public virtual EdmContainerElementKind get_ContainerElementKind();
    protected virtual IEdmEntityType ComputeElementType();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsSpatialTypeReference : CsdlSemanticsPrimitiveTypeReference {
    public Nullable`1<int> SpatialReferenceIdentifier { get; }
    public CsdlSemanticsSpatialTypeReference(CsdlSemanticsSchema schema, CsdlSpatialTypeReference reference);
    public sealed virtual Nullable`1<int> get_SpatialReferenceIdentifier();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsStringConstantExpression : CsdlSemanticsExpression {
    private CsdlConstantExpression expression;
    private Cache`2<CsdlSemanticsStringConstantExpression, string> valueCache;
    private static Func`2<CsdlSemanticsStringConstantExpression, string> ComputeValueFunc;
    public CsdlElement Element { get; }
    public string Value { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public IEdmTypeReference Type { get; }
    public EdmValueKind ValueKind { get; }
    public CsdlSemanticsStringConstantExpression(CsdlConstantExpression expression, CsdlSemanticsSchema schema);
    private static CsdlSemanticsStringConstantExpression();
    public virtual CsdlElement get_Element();
    public sealed virtual string get_Value();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual IEdmTypeReference get_Type();
    public sealed virtual EdmValueKind get_ValueKind();
    private string ComputeValue();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsStringTypeReference : CsdlSemanticsPrimitiveTypeReference {
    public bool IsUnbounded { get; }
    public Nullable`1<int> MaxLength { get; }
    public Nullable`1<bool> IsUnicode { get; }
    public CsdlSemanticsStringTypeReference(CsdlSemanticsSchema schema, CsdlStringTypeReference reference);
    public sealed virtual bool get_IsUnbounded();
    public sealed virtual Nullable`1<int> get_MaxLength();
    public sealed virtual Nullable`1<bool> get_IsUnicode();
}
internal abstract class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsStructuredTypeDefinition : CsdlSemanticsTypeDefinition {
    private CsdlSemanticsSchema context;
    private Cache`2<CsdlSemanticsStructuredTypeDefinition, List`1<IEdmProperty>> declaredPropertiesCache;
    private static Func`2<CsdlSemanticsStructuredTypeDefinition, List`1<IEdmProperty>> ComputeDeclaredPropertiesFunc;
    private Cache`2<CsdlSemanticsStructuredTypeDefinition, IDictionary`2<string, IEdmProperty>> propertiesDictionaryCache;
    private static Func`2<CsdlSemanticsStructuredTypeDefinition, IDictionary`2<string, IEdmProperty>> ComputePropertiesDictionaryFunc;
    public bool IsAbstract { get; }
    public bool IsOpen { get; }
    public IEdmStructuredType BaseType { get; }
    public CsdlElement Element { get; }
    public CsdlSemanticsModel Model { get; }
    public string Namespace { get; }
    public CsdlSemanticsSchema Context { get; }
    public IEnumerable`1<IEdmProperty> DeclaredProperties { get; }
    protected CsdlStructuredType MyStructured { get; }
    private IDictionary`2<string, IEdmProperty> PropertiesDictionary { get; }
    protected CsdlSemanticsStructuredTypeDefinition(CsdlSemanticsSchema context, CsdlStructuredType type);
    private static CsdlSemanticsStructuredTypeDefinition();
    public virtual bool get_IsAbstract();
    public virtual bool get_IsOpen();
    public abstract virtual IEdmStructuredType get_BaseType();
    public virtual CsdlElement get_Element();
    public virtual CsdlSemanticsModel get_Model();
    public sealed virtual string get_Namespace();
    public CsdlSemanticsSchema get_Context();
    public sealed virtual IEnumerable`1<IEdmProperty> get_DeclaredProperties();
    protected abstract virtual CsdlStructuredType get_MyStructured();
    private IDictionary`2<string, IEdmProperty> get_PropertiesDictionary();
    public sealed virtual IEdmProperty FindProperty(string name);
    protected List`1<IEdmProperty> ComputeDeclaredProperties();
    protected string GetCyclicBaseTypeName(string baseTypeName);
    protected virtual IEnumerable`1<IEdmVocabularyAnnotation> ComputeInlineVocabularyAnnotations();
    private IDictionary`2<string, IEdmProperty> ComputePropertiesDictionary();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsTemporalTypeReference : CsdlSemanticsPrimitiveTypeReference {
    public Nullable`1<int> Precision { get; }
    public CsdlSemanticsTemporalTypeReference(CsdlSemanticsSchema schema, CsdlTemporalTypeReference reference);
    public sealed virtual Nullable`1<int> get_Precision();
}
[DebuggerDisplayAttribute("CsdlSemanticsTerm({Name})")]
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsTerm : CsdlSemanticsElement {
    protected CsdlSemanticsSchema Context;
    protected CsdlTerm term;
    private string fullName;
    private Cache`2<CsdlSemanticsTerm, IEdmTypeReference> typeCache;
    private static Func`2<CsdlSemanticsTerm, IEdmTypeReference> ComputeTypeFunc;
    public string Name { get; }
    public string Namespace { get; }
    public string FullName { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public IEdmTypeReference Type { get; }
    public string AppliesTo { get; }
    public string DefaultValue { get; }
    public CsdlSemanticsModel Model { get; }
    public CsdlElement Element { get; }
    public CsdlSemanticsTerm(CsdlSemanticsSchema context, CsdlTerm valueTerm);
    private static CsdlSemanticsTerm();
    public sealed virtual string get_Name();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_FullName();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public sealed virtual IEdmTypeReference get_Type();
    public sealed virtual string get_AppliesTo();
    public sealed virtual string get_DefaultValue();
    public virtual CsdlSemanticsModel get_Model();
    public virtual CsdlElement get_Element();
    protected virtual IEnumerable`1<IEdmVocabularyAnnotation> ComputeInlineVocabularyAnnotations();
    private IEdmTypeReference ComputeType();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsTimeOfDayConstantExpression : CsdlSemanticsExpression {
    private CsdlConstantExpression expression;
    private Cache`2<CsdlSemanticsTimeOfDayConstantExpression, TimeOfDay> valueCache;
    private static Func`2<CsdlSemanticsTimeOfDayConstantExpression, TimeOfDay> ComputeValueFunc;
    private Cache`2<CsdlSemanticsTimeOfDayConstantExpression, IEnumerable`1<EdmError>> errorsCache;
    private static Func`2<CsdlSemanticsTimeOfDayConstantExpression, IEnumerable`1<EdmError>> ComputeErrorsFunc;
    public CsdlElement Element { get; }
    public TimeOfDay Value { get; }
    public IEdmTypeReference Type { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public IEnumerable`1<EdmError> Errors { get; }
    public CsdlSemanticsTimeOfDayConstantExpression(CsdlConstantExpression expression, CsdlSemanticsSchema schema);
    private static CsdlSemanticsTimeOfDayConstantExpression();
    public virtual CsdlElement get_Element();
    public sealed virtual TimeOfDay get_Value();
    public sealed virtual IEdmTypeReference get_Type();
    public virtual EdmExpressionKind get_ExpressionKind();
    public sealed virtual EdmValueKind get_ValueKind();
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    private TimeOfDay ComputeValue();
    private IEnumerable`1<EdmError> ComputeErrors();
}
internal abstract class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsTypeDefinition : CsdlSemanticsElement {
    public EdmTypeKind TypeKind { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    protected CsdlSemanticsTypeDefinition(CsdlElement element);
    public abstract virtual EdmTypeKind get_TypeKind();
    public virtual EdmSchemaElementKind get_SchemaElementKind();
    public virtual string ToString();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsTypeDefinitionDefinition : CsdlSemanticsTypeDefinition {
    private CsdlSemanticsSchema context;
    private CsdlTypeDefinition typeDefinition;
    private string fullName;
    private Cache`2<CsdlSemanticsTypeDefinitionDefinition, IEdmPrimitiveType> underlyingTypeCache;
    private static Func`2<CsdlSemanticsTypeDefinitionDefinition, IEdmPrimitiveType> ComputeUnderlyingTypeFunc;
    private IEdmPrimitiveType Microsoft.OData.Edm.IEdmTypeDefinition.UnderlyingType { get; }
    private EdmSchemaElementKind Microsoft.OData.Edm.IEdmSchemaElement.SchemaElementKind { get; }
    public string Namespace { get; }
    private string Microsoft.OData.Edm.IEdmNamedElement.Name { get; }
    public string FullName { get; }
    public EdmTypeKind TypeKind { get; }
    public CsdlSemanticsModel Model { get; }
    public CsdlElement Element { get; }
    public CsdlSemanticsTypeDefinitionDefinition(CsdlSemanticsSchema context, CsdlTypeDefinition typeDefinition);
    private static CsdlSemanticsTypeDefinitionDefinition();
    private sealed virtual override IEdmPrimitiveType Microsoft.OData.Edm.IEdmTypeDefinition.get_UnderlyingType();
    private sealed virtual override EdmSchemaElementKind Microsoft.OData.Edm.IEdmSchemaElement.get_SchemaElementKind();
    public sealed virtual string get_Namespace();
    private sealed virtual override string Microsoft.OData.Edm.IEdmNamedElement.get_Name();
    public sealed virtual string get_FullName();
    public virtual EdmTypeKind get_TypeKind();
    public virtual CsdlSemanticsModel get_Model();
    public virtual CsdlElement get_Element();
    protected virtual IEnumerable`1<IEdmVocabularyAnnotation> ComputeInlineVocabularyAnnotations();
    private IEdmPrimitiveType ComputeUnderlyingType();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsTypeDefinitionReference : CsdlSemanticsNamedTypeReference {
    private static Func`2<CsdlSemanticsTypeDefinitionReference, bool> ComputeIsUnboundedFunc;
    private static Func`2<CsdlSemanticsTypeDefinitionReference, Nullable`1<int>> ComputeMaxLengthFunc;
    private static Func`2<CsdlSemanticsTypeDefinitionReference, Nullable`1<bool>> ComputeIsUnicodeFunc;
    private static Func`2<CsdlSemanticsTypeDefinitionReference, Nullable`1<int>> ComputePrecisionFunc;
    private static Func`2<CsdlSemanticsTypeDefinitionReference, Nullable`1<int>> ComputeScaleFunc;
    private static Func`2<CsdlSemanticsTypeDefinitionReference, Nullable`1<int>> ComputeSridFunc;
    private Cache`2<CsdlSemanticsTypeDefinitionReference, bool> isUnboundedCache;
    private Cache`2<CsdlSemanticsTypeDefinitionReference, Nullable`1<int>> maxLengthCache;
    private Cache`2<CsdlSemanticsTypeDefinitionReference, Nullable`1<bool>> isUnicodeCache;
    private Cache`2<CsdlSemanticsTypeDefinitionReference, Nullable`1<int>> precisionCache;
    private Cache`2<CsdlSemanticsTypeDefinitionReference, Nullable`1<int>> scaleCache;
    private Cache`2<CsdlSemanticsTypeDefinitionReference, Nullable`1<int>> sridCache;
    public bool IsUnbounded { get; }
    public Nullable`1<int> MaxLength { get; }
    public Nullable`1<bool> IsUnicode { get; }
    public Nullable`1<int> Precision { get; }
    public Nullable`1<int> Scale { get; }
    public Nullable`1<int> SpatialReferenceIdentifier { get; }
    private CsdlNamedTypeReference Reference { get; }
    public CsdlSemanticsTypeDefinitionReference(CsdlSemanticsSchema schema, CsdlNamedTypeReference reference);
    private static CsdlSemanticsTypeDefinitionReference();
    public sealed virtual bool get_IsUnbounded();
    public sealed virtual Nullable`1<int> get_MaxLength();
    public sealed virtual Nullable`1<bool> get_IsUnicode();
    public sealed virtual Nullable`1<int> get_Precision();
    public sealed virtual Nullable`1<int> get_Scale();
    public sealed virtual Nullable`1<int> get_SpatialReferenceIdentifier();
    private CsdlNamedTypeReference get_Reference();
    private bool ComputeIsUnbounded();
    private Nullable`1<int> ComputeMaxLength();
    private Nullable`1<bool> ComputeIsUnicode();
    private Nullable`1<int> ComputePrecision();
    private Nullable`1<int> ComputeScale();
    private Nullable`1<int> ComputeSrid();
    private Nullable`1<int> DefaultSridIfUnspecified(int defaultSrid);
}
internal abstract class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsTypeExpression : CsdlSemanticsElement {
    private CsdlExpressionTypeReference expressionUsage;
    private CsdlSemanticsTypeDefinition type;
    public IEdmType Definition { get; }
    public bool IsNullable { get; }
    public CsdlSemanticsModel Model { get; }
    public CsdlElement Element { get; }
    protected CsdlSemanticsTypeExpression(CsdlExpressionTypeReference expressionUsage, CsdlSemanticsTypeDefinition type);
    public sealed virtual IEdmType get_Definition();
    public sealed virtual bool get_IsNullable();
    public virtual CsdlSemanticsModel get_Model();
    public virtual CsdlElement get_Element();
    public virtual string ToString();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsUntypedTypeReference : CsdlSemanticsElement {
    internal CsdlUntypedTypeReference Reference;
    private CsdlSemanticsSchema schema;
    private IEdmUntypedType definition;
    public bool IsNullable { get; }
    public IEdmType Definition { get; }
    public CsdlSemanticsModel Model { get; }
    public CsdlElement Element { get; }
    public CsdlSemanticsUntypedTypeReference(CsdlSemanticsSchema schema, CsdlUntypedTypeReference reference);
    public sealed virtual bool get_IsNullable();
    public sealed virtual IEdmType get_Definition();
    public virtual CsdlSemanticsModel get_Model();
    public virtual CsdlElement get_Element();
    public virtual string ToString();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.CsdlSemanticsVocabularyAnnotation : CsdlSemanticsElement {
    protected CsdlAnnotation Annotation;
    private CsdlSemanticsModel model;
    private string qualifier;
    private IEdmVocabularyAnnotatable targetContext;
    private CsdlSemanticsAnnotations annotationsContext;
    private Cache`2<CsdlSemanticsVocabularyAnnotation, IEdmExpression> valueCache;
    private static Func`2<CsdlSemanticsVocabularyAnnotation, IEdmExpression> ComputeValueFunc;
    private Cache`2<CsdlSemanticsVocabularyAnnotation, IEdmTerm> termCache;
    private static Func`2<CsdlSemanticsVocabularyAnnotation, IEdmTerm> ComputeTermFunc;
    private Cache`2<CsdlSemanticsVocabularyAnnotation, IEdmVocabularyAnnotatable> targetCache;
    private static Func`2<CsdlSemanticsVocabularyAnnotation, IEdmVocabularyAnnotatable> ComputeTargetFunc;
    [CompilerGeneratedAttribute]
private CsdlSemanticsSchema <Schema>k__BackingField;
    public CsdlSemanticsSchema Schema { get; }
    public CsdlElement Element { get; }
    public string Qualifier { get; }
    public CsdlSemanticsModel Model { get; }
    public IEdmTerm Term { get; }
    public IEdmVocabularyAnnotatable Target { get; }
    public IEnumerable`1<EdmError> Errors { get; }
    public IEdmEntityType TargetBindingContext { get; }
    public IEdmExpression Value { get; }
    public bool UsesDefault { get; }
    public CsdlSemanticsVocabularyAnnotation(CsdlSemanticsModel model, CsdlSemanticsSchema schema, IEdmVocabularyAnnotatable targetContext, CsdlSemanticsAnnotations annotationsContext, CsdlAnnotation annotation, string qualifier);
    private static CsdlSemanticsVocabularyAnnotation();
    [CompilerGeneratedAttribute]
public CsdlSemanticsSchema get_Schema();
    public virtual CsdlElement get_Element();
    public sealed virtual string get_Qualifier();
    public virtual CsdlSemanticsModel get_Model();
    public sealed virtual IEdmTerm get_Term();
    public sealed virtual IEdmVocabularyAnnotatable get_Target();
    public sealed virtual IEnumerable`1<EdmError> get_Errors();
    public IEdmEntityType get_TargetBindingContext();
    public sealed virtual IEdmExpression get_Value();
    public sealed virtual bool get_UsesDefault();
    protected IEdmTerm ComputeTerm();
    private IEdmExpression ComputeValue();
    private static CsdlExpressionBase AdjustStringConstantUsingTermType(CsdlExpressionBase expression, IEdmTypeReference termType);
    private static CsdlExpressionBase BuildEnumExpression(IEdmEnumType enumType, CsdlConstantExpression expression);
    private static CsdlConstantExpression BuildPrimitiveExpression(IEdmPrimitiveTypeReference primitiveTypeReference, CsdlConstantExpression expression);
    private static CsdlExpressionBase BuildPathExpression(IEdmPathType pathType, CsdlConstantExpression expression);
    private IEdmVocabularyAnnotatable ComputeTarget();
    private static IEdmOperationImport FindParameterizedOperationImport(string parameterizedName, Func`2<string, IEnumerable`1<IEdmOperationImport>> findFunctions, Func`2<IEnumerable`1<IEdmOperationImport>, IEdmOperationImport> ambiguityCreator);
    private IEdmOperation FindParameterizedOperation(string parameterizedName, Func`2<string, IEnumerable`1<IEdmOperation>> findFunctions, Func`2<IEnumerable`1<IEdmOperation>, IEdmOperation> ambiguityCreator);
    private IEdmOperationImport CreateAmbiguousOperationImport(IEnumerable`1<IEdmOperationImport> operations);
    private IEdmOperation CreateAmbiguousOperation(IEnumerable`1<IEdmOperation> operations);
    private IEnumerable`1<IEdmOperation> FindParameterizedOperationFromList(IEnumerable`1<IEdmOperation> operations, String[] parameters);
}
internal interface Microsoft.OData.Edm.Csdl.CsdlSemantics.IUnresolvedElement {
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.UnresolvedAction : UnresolvedOperation {
    public EdmSchemaElementKind SchemaElementKind { get; }
    public UnresolvedAction(string qualifiedName, string errorMessage, EdmLocation location);
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.UnresolvedComplexType : BadComplexType {
    public UnresolvedComplexType(string qualifiedName, EdmLocation location);
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.UnresolvedEntityContainer : BadEntityContainer {
    public UnresolvedEntityContainer(string name, EdmLocation location);
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.UnresolvedEntitySet : BadEntitySet {
    public UnresolvedEntitySet(string name, IEdmEntityContainer container, EdmLocation location);
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.UnresolvedEntityType : BadEntityType {
    public UnresolvedEntityType(string qualifiedName, EdmLocation location);
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.UnresolvedEnumMember : BadElement {
    private string name;
    private IEdmEnumType declaringType;
    private Cache`2<UnresolvedEnumMember, IEdmEnumMemberValue> value;
    private static Func`2<UnresolvedEnumMember, IEdmEnumMemberValue> ComputeValueFunc;
    public string Name { get; }
    public IEdmEnumMemberValue Value { get; }
    public IEdmEnumType DeclaringType { get; }
    public UnresolvedEnumMember(string name, IEdmEnumType declaringType, EdmLocation location);
    private static UnresolvedEnumMember();
    public sealed virtual string get_Name();
    public sealed virtual IEdmEnumMemberValue get_Value();
    public sealed virtual IEdmEnumType get_DeclaringType();
    private static IEdmEnumMemberValue ComputeValue();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.UnresolvedEnumType : BadEnumType {
    public UnresolvedEnumType(string qualifiedName, EdmLocation location);
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.UnresolvedFunction : UnresolvedOperation {
    public bool IsComposable { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public UnresolvedFunction(string qualifiedName, string errorMessage, EdmLocation location);
    public sealed virtual bool get_IsComposable();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.UnresolvedLabeledElement : BadLabeledExpression {
    public UnresolvedLabeledElement(string label, EdmLocation location);
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.UnresolvedNavigationPropertyPath : BadNavigationProperty {
    public UnresolvedNavigationPropertyPath(IEdmStructuredType startingType, string path, EdmLocation location);
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.UnresolvedOperation : BadElement {
    private string namespaceName;
    private string name;
    private string fullName;
    private IEdmTypeReference returnType;
    public string Namespace { get; }
    public string Name { get; }
    public string FullName { get; }
    public IEdmTypeReference ReturnType { get; }
    public IEnumerable`1<IEdmOperationParameter> Parameters { get; }
    public bool IsBound { get; }
    public IEdmPathExpression EntitySetPath { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public UnresolvedOperation(string qualifiedName, string errorMessage, EdmLocation location);
    public sealed virtual string get_Namespace();
    public sealed virtual string get_Name();
    public sealed virtual string get_FullName();
    public sealed virtual IEdmTypeReference get_ReturnType();
    public sealed virtual IEnumerable`1<IEdmOperationParameter> get_Parameters();
    public sealed virtual bool get_IsBound();
    public sealed virtual IEdmPathExpression get_EntitySetPath();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public sealed virtual IEdmOperationParameter FindParameter(string name);
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.UnresolvedParameter : BadElement {
    private Cache`2<UnresolvedParameter, IEdmTypeReference> type;
    private static Func`2<UnresolvedParameter, IEdmTypeReference> ComputeTypeFunc;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmOperation <DeclaringOperation>k__BackingField;
    public string Name { get; private set; }
    public IEdmTypeReference Type { get; }
    public IEdmOperation DeclaringOperation { get; private set; }
    public UnresolvedParameter(IEdmOperation declaringOperation, string name, EdmLocation location);
    private static UnresolvedParameter();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public sealed virtual IEdmTypeReference get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual IEdmOperation get_DeclaringOperation();
    [CompilerGeneratedAttribute]
private void set_DeclaringOperation(IEdmOperation value);
    private IEdmTypeReference ComputeType();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.UnresolvedPrimitiveType : BadPrimitiveType {
    public UnresolvedPrimitiveType(string qualifiedName, EdmLocation location);
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.UnresolvedProperty : BadProperty {
    public UnresolvedProperty(IEdmStructuredType declaringType, string name, EdmLocation location);
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.UnresolvedReturn : BadElement {
    private Cache`2<UnresolvedReturn, IEdmTypeReference> type;
    private static Func`2<UnresolvedReturn, IEdmTypeReference> ComputeTypeFunc;
    [CompilerGeneratedAttribute]
private IEdmOperation <DeclaringOperation>k__BackingField;
    public IEdmTypeReference Type { get; }
    public IEdmOperation DeclaringOperation { get; private set; }
    public UnresolvedReturn(IEdmOperation declaringOperation, EdmLocation location);
    private static UnresolvedReturn();
    public sealed virtual IEdmTypeReference get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual IEdmOperation get_DeclaringOperation();
    [CompilerGeneratedAttribute]
private void set_DeclaringOperation(IEdmOperation value);
    private IEdmTypeReference ComputeType();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.UnresolvedType : BadType {
    private string namespaceName;
    private string name;
    private string fullName;
    public EdmSchemaElementKind SchemaElementKind { get; }
    public string Namespace { get; }
    public string Name { get; }
    public string FullName { get; }
    public UnresolvedType(string qualifiedName, EdmLocation location);
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_Name();
    public sealed virtual string get_FullName();
}
internal class Microsoft.OData.Edm.Csdl.CsdlSemantics.UnresolvedVocabularyTerm : EdmElement {
    private UnresolvedTermTypeReference type;
    private string namespaceName;
    private string name;
    private string fullName;
    private string appliesTo;
    private string defaultValue;
    public string Namespace { get; }
    public string Name { get; }
    public string FullName { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public IEdmTypeReference Type { get; }
    public string AppliesTo { get; }
    public string DefaultValue { get; }
    public UnresolvedVocabularyTerm(string qualifiedName);
    public sealed virtual string get_Namespace();
    public sealed virtual string get_Name();
    public sealed virtual string get_FullName();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public sealed virtual IEdmTypeReference get_Type();
    public sealed virtual string get_AppliesTo();
    public sealed virtual string get_DefaultValue();
}
public enum Microsoft.OData.Edm.Csdl.CsdlTarget : Enum {
    public int value__;
    public static CsdlTarget EntityFramework;
    public static CsdlTarget OData;
}
public class Microsoft.OData.Edm.Csdl.CsdlWriter : object {
    internal IEdmModel model;
    internal IEnumerable`1<EdmSchema> schemas;
    internal Version edmxVersion;
    protected CsdlWriter(IEdmModel model, Version edmxVersion);
    public static bool TryWriteCsdl(IEdmModel model, Utf8JsonWriter writer, IEnumerable`1& errors);
    public static Task`1<ValueTuple`2<bool, IEnumerable`1<EdmError>>> TryWriteCsdlAsync(IEdmModel model, Utf8JsonWriter writer);
    public static bool TryWriteCsdl(IEdmModel model, Utf8JsonWriter writer, CsdlJsonWriterSettings settings, IEnumerable`1& errors);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.CsdlWriter/<TryWriteCsdlAsync>d__7")]
public static Task`1<ValueTuple`2<bool, IEnumerable`1<EdmError>>> TryWriteCsdlAsync(IEdmModel model, Utf8JsonWriter writer, CsdlJsonWriterSettings settings);
    public static bool TryWriteCsdl(IEdmModel model, XmlWriter writer, CsdlTarget target, IEnumerable`1& errors);
    public static Task`1<ValueTuple`2<bool, IEnumerable`1<EdmError>>> TryWriteCsdlAsync(IEdmModel model, XmlWriter writer, CsdlTarget target);
    public static bool TryWriteCsdl(IEdmModel model, XmlWriter writer, CsdlTarget target, CsdlXmlWriterSettings writerSettings, IEnumerable`1& errors);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.CsdlWriter/<TryWriteCsdlAsync>d__11")]
public static Task`1<ValueTuple`2<bool, IEnumerable`1<EdmError>>> TryWriteCsdlAsync(IEdmModel model, XmlWriter writer, CsdlTarget target, CsdlXmlWriterSettings writerSettings);
    protected virtual void WriteCsdl();
    protected virtual Task WriteCsdlAsync();
    protected static string GetVersionString(Version version);
    private static bool VerifyAndGetVersion(IEdmModel model, Version& edmxVersion, IEnumerable`1& errors);
}
internal class Microsoft.OData.Edm.Csdl.CsdlXmlWriter : CsdlWriter {
    private XmlWriter writer;
    private string edmxNamespace;
    private CsdlTarget target;
    private CsdlXmlWriterSettings writerSettings;
    public CsdlXmlWriter(IEdmModel model, XmlWriter writer, Version edmxVersion, CsdlTarget target);
    public CsdlXmlWriter(IEdmModel model, XmlWriter writer, Version edmxVersion, CsdlTarget target, CsdlXmlWriterSettings writerSettings);
    protected virtual void WriteCsdl();
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.CsdlXmlWriter/<WriteCsdlAsync>d__7")]
protected virtual Task WriteCsdlAsync();
    private void WriteODataCsdl();
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.CsdlXmlWriter/<WriteODataCsdlAsync>d__9")]
private Task WriteODataCsdlAsync();
    private void WriteEFCsdl();
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.CsdlXmlWriter/<WriteEFCsdlAsync>d__11")]
private Task WriteEFCsdlAsync();
    private void WriteEdmxElement();
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.CsdlXmlWriter/<WriteEdmxElementAsync>d__13")]
private Task WriteEdmxElementAsync();
    private void WriteRuntimeElement();
    private Task WriteRuntimeElementAsync();
    private void WriteConceptualModelsElement();
    private Task WriteConceptualModelsElementAsync();
    private void WriteReferenceElements();
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.CsdlXmlWriter/<WriteReferenceElementsAsync>d__19")]
private Task WriteReferenceElementsAsync();
    private void WriteDataServicesElement();
    private Task WriteDataServicesElementAsync();
    private void WriteSchemas();
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.CsdlXmlWriter/<WriteSchemasAsync>d__23")]
private Task WriteSchemasAsync();
    private void EndElement();
    private Task EndElementAsync();
}
public class Microsoft.OData.Edm.Csdl.CsdlXmlWriterSettings : object {
    [CompilerGeneratedAttribute]
private EdmLibraryCompatibility <LibraryCompatibility>k__BackingField;
    public EdmLibraryCompatibility LibraryCompatibility { get; public set; }
    [CompilerGeneratedAttribute]
public EdmLibraryCompatibility get_LibraryCompatibility();
    [CompilerGeneratedAttribute]
public void set_LibraryCompatibility(EdmLibraryCompatibility value);
}
internal static class Microsoft.OData.Edm.Csdl.EdmEnumValueParser : object {
    internal static bool TryParseEnumMember(string value, IEdmModel model, EdmLocation location, IEnumerable`1& result);
    internal static bool TryParseJsonEnumMember(string value, IEdmEnumType enumType, EdmLocation location, IEnumerable`1& result);
    internal static bool IsEnumIntegerType(IEdmEnumType enumType);
}
[SuppressMessageAttribute("Microsoft.Design", "CA1032")]
[SuppressMessageAttribute("Microsoft.Usage", "CA2237")]
[DebuggerDisplayAttribute("{Message}")]
public class Microsoft.OData.Edm.Csdl.EdmParseException : Exception {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<EdmError> <Errors>k__BackingField;
    public ReadOnlyCollection`1<EdmError> Errors { get; private set; }
    public EdmParseException(IEnumerable`1<EdmError> parseErrors);
    private EdmParseException(List`1<EdmError> parseErrors);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<EdmError> get_Errors();
    [CompilerGeneratedAttribute]
private void set_Errors(ReadOnlyCollection`1<EdmError> value);
    private static string ConstructMessage(IEnumerable`1<EdmError> parseErrors);
}
internal static class Microsoft.OData.Edm.Csdl.EdmValueParser : object {
    internal static Regex DayTimeDurationValidator;
    private static EdmValueParser();
    internal static TimeSpan ParseDuration(string value);
    internal static bool TryParseBinary(string value, Byte[]& result);
    internal static bool TryParseBool(string value, Nullable`1& result);
    internal static bool TryParseDuration(string value, Nullable`1& result);
    internal static bool TryParseDateTimeOffset(string value, Nullable`1& result);
    internal static bool TryParseInt(string value, Nullable`1& result);
    internal static bool TryParseLong(string value, Nullable`1& result);
    internal static bool TryParseDecimal(string value, Nullable`1& result);
    internal static bool TryParseFloat(string value, Nullable`1& result);
    internal static bool TryParseGuid(string value, Nullable`1& result);
    internal static bool TryParseDate(string value, Nullable`1& result);
    internal static bool TryParseTimeOfDay(string value, Nullable`1& result);
    private static bool TryParseCharAsBinary(char c, Byte& b);
}
internal static class Microsoft.OData.Edm.Csdl.EdmValueWriter : object {
    private static Char[] Hex;
    private static EdmValueWriter();
    internal static string PrimitiveValueAsXml(IEdmPrimitiveValue v);
    internal static string StringAsXml(string s);
    internal static string BinaryAsXml(Byte[] binary);
    internal static string BooleanAsXml(bool b);
    internal static string BooleanAsXml(Nullable`1<bool> b);
    internal static string IntAsXml(int i);
    internal static string IntAsXml(Nullable`1<int> i);
    internal static string LongAsXml(long l);
    internal static string FloatAsXml(double f);
    internal static string DecimalAsXml(decimal d);
    internal static string DurationAsXml(TimeSpan d);
    internal static string DateTimeOffsetAsXml(DateTimeOffset d);
    internal static string DateAsXml(Date d);
    internal static string TimeOfDayAsXml(TimeOfDay time);
    internal static string GuidAsXml(Guid g);
    internal static string UriAsXml(Uri uri);
}
public enum Microsoft.OData.Edm.Csdl.EdmVocabularyAnnotationSerializationLocation : Enum {
    public int value__;
    public static EdmVocabularyAnnotationSerializationLocation Inline;
    public static EdmVocabularyAnnotationSerializationLocation OutOfLine;
}
[ExtensionAttribute]
internal static class Microsoft.OData.Edm.Csdl.JsonElementExtensions : object {
    [ExtensionAttribute]
public static T ProcessRequiredProperty(JsonElement element, string propertyName, JsonParserContext context, Func`3<JsonElement, JsonParserContext, T> propertyParser);
    [ExtensionAttribute]
public static T ProcessItem(JsonElement element, int index, JsonParserContext context, Func`3<JsonElement, JsonParserContext, T> parser);
    [ExtensionAttribute]
public static IList`1<T> ProcessArrayProperty(JsonElement element, string propertyName, JsonParserContext context, Func`3<JsonElement, JsonParserContext, T> itemParser);
    [ExtensionAttribute]
public static T ProcessProperty(JsonElement propertyValue, string propertyName, JsonParserContext context, Func`3<JsonElement, JsonParserContext, T> valueParser);
    [ExtensionAttribute]
public static void ParseAsObject(JsonElement element, JsonParserContext context, Action`2<string, JsonElement> propertyParser);
    [ExtensionAttribute]
public static IList`1<T> ParseAsArray(JsonElement element, JsonParserContext context, Func`3<JsonElement, JsonParserContext, T> itemParser);
    [ExtensionAttribute]
public static string ParseAsString(JsonElement element, JsonParserContext context);
    [ExtensionAttribute]
public static Nullable`1<bool> ParseAsBoolean(JsonElement element, JsonParserContext context);
    [ExtensionAttribute]
public static Nullable`1<int> ParseAsInteger(JsonElement element);
    [ExtensionAttribute]
public static Nullable`1<int> ParseAsInteger(JsonElement element, JsonParserContext context);
    [ExtensionAttribute]
public static string ParseAsJson(JsonElement element);
    [ExtensionAttribute]
public static T ParseOptionalProperty(JsonElement element, string propertyName, JsonParserContext context, Func`3<JsonElement, JsonParserContext, T> parser);
    [ExtensionAttribute]
internal static bool ValidateValueKind(JsonElement element, JsonValueKind expectedKind, JsonParserContext context);
    [ExtensionAttribute]
internal static void ForEach(IEnumerable`1<T> enumerable, Action`1<T> action);
}
internal static class Microsoft.OData.Edm.Csdl.Parsing.AnnotationJsonParser : object {
    public static bool TryParseCsdlAnnotation(string annotionName, JsonElement element, JsonParserContext context, CsdlAnnotation& csdlAnnotation);
    public static CsdlExpressionBase ParseExpression(JsonElement element, JsonParserContext context);
    private static CsdlExpressionBase ParseNumberExpression(JsonElement element, JsonParserContext context);
    private static CsdlExpressionBase ParseObjectExpression(JsonElement element, JsonParserContext context);
    private static bool TryParseValuePathExpression(JsonElement element, JsonParserContext context, CsdlPathExpression& pathExp);
    private static bool TryParseCastExpression(JsonElement element, JsonParserContext context, CsdlCastExpression& castExp);
    private static bool TryParseApplyExpression(JsonElement element, JsonParserContext context, CsdlApplyExpression& applyExp);
    private static bool TryParseIfExpression(JsonElement element, JsonParserContext context, CsdlIfExpression& ifExp);
    private static bool BuildIsOfExpression(JsonElement element, JsonParserContext context, CsdlIsOfExpression& isOfExp);
    private static bool TryParseLabeledElementExpression(JsonElement element, JsonParserContext context, CsdlLabeledExpression& labeledExp);
    private static bool TryParseLabeledElementReferenceExpression(JsonElement element, JsonParserContext context, CsdlLabeledExpressionReferenceExpression& labeledReferenceExp);
    private static CsdlRecordExpression ParseRecordExpression(JsonElement element, JsonParserContext context);
    private static bool ParseAnnotationName(string annotationName, String& term, String& qualifier);
}
internal abstract class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlAbstractNavigationSource : CsdlNamedElement {
    private List`1<CsdlNavigationPropertyBinding> navigationPropertyBindings;
    public IEnumerable`1<CsdlNavigationPropertyBinding> NavigationPropertyBindings { get; }
    public CsdlAbstractNavigationSource(string name, IEnumerable`1<CsdlNavigationPropertyBinding> navigationPropertyBindings, CsdlLocation location);
    public IEnumerable`1<CsdlNavigationPropertyBinding> get_NavigationPropertyBindings();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlAction : CsdlOperation {
    public CsdlAction(string name, IEnumerable`1<CsdlOperationParameter> parameters, CsdlOperationReturn operationReturn, bool isBound, string entitySetPath, CsdlLocation location);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlActionImport : CsdlOperationImport {
    public CsdlActionImport(string name, string schemaOperationQualifiedTypeName, string entitySet, CsdlLocation location);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlAnnotation : CsdlElement {
    private CsdlExpressionBase expression;
    private string qualifier;
    private string term;
    public CsdlExpressionBase Expression { get; }
    public string Qualifier { get; }
    public string Term { get; }
    public CsdlAnnotation(string term, string qualifier, CsdlExpressionBase expression, CsdlLocation location);
    public CsdlExpressionBase get_Expression();
    public string get_Qualifier();
    public string get_Term();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlAnnotationPathExpression : CsdlPathExpression {
    public EdmExpressionKind ExpressionKind { get; }
    public CsdlAnnotationPathExpression(string path, CsdlLocation location);
    public virtual EdmExpressionKind get_ExpressionKind();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlAnnotations : object {
    private List`1<CsdlAnnotation> annotations;
    private string target;
    private string qualifier;
    public IEnumerable`1<CsdlAnnotation> Annotations { get; }
    public string Qualifier { get; }
    public string Target { get; }
    public CsdlAnnotations(IEnumerable`1<CsdlAnnotation> annotations, string target, string qualifier);
    public IEnumerable`1<CsdlAnnotation> get_Annotations();
    public string get_Qualifier();
    public string get_Target();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlApplyExpression : CsdlExpressionBase {
    private string function;
    private List`1<CsdlExpressionBase> arguments;
    public EdmExpressionKind ExpressionKind { get; }
    public string Function { get; }
    public IEnumerable`1<CsdlExpressionBase> Arguments { get; }
    public CsdlApplyExpression(string function, IEnumerable`1<CsdlExpressionBase> arguments, CsdlLocation location);
    public virtual EdmExpressionKind get_ExpressionKind();
    public string get_Function();
    public IEnumerable`1<CsdlExpressionBase> get_Arguments();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlBinaryTypeReference : CsdlPrimitiveTypeReference {
    public CsdlBinaryTypeReference(bool isUnbounded, Nullable`1<int> maxLength, string typeName, bool isNullable, CsdlLocation location);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlCastExpression : CsdlExpressionBase {
    private CsdlTypeReference type;
    private CsdlExpressionBase operand;
    public EdmExpressionKind ExpressionKind { get; }
    public CsdlTypeReference Type { get; }
    public CsdlExpressionBase Operand { get; }
    public CsdlCastExpression(CsdlTypeReference type, CsdlExpressionBase operand, CsdlLocation location);
    public virtual EdmExpressionKind get_ExpressionKind();
    public CsdlTypeReference get_Type();
    public CsdlExpressionBase get_Operand();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlCollectionExpression : CsdlExpressionBase {
    private CsdlTypeReference type;
    private List`1<CsdlExpressionBase> elementValues;
    public EdmExpressionKind ExpressionKind { get; }
    public CsdlTypeReference Type { get; }
    public IEnumerable`1<CsdlExpressionBase> ElementValues { get; }
    public CsdlCollectionExpression(CsdlTypeReference type, IEnumerable`1<CsdlExpressionBase> elementValues, CsdlLocation location);
    public virtual EdmExpressionKind get_ExpressionKind();
    public CsdlTypeReference get_Type();
    public IEnumerable`1<CsdlExpressionBase> get_ElementValues();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlCollectionType : CsdlElement {
    private CsdlTypeReference elementType;
    public CsdlTypeReference ElementType { get; }
    public CsdlCollectionType(CsdlTypeReference elementType, CsdlLocation location);
    public CsdlTypeReference get_ElementType();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlComplexType : CsdlNamedStructuredType {
    public CsdlComplexType(string name, string baseTypeName, bool isAbstract, bool isOpen, IEnumerable`1<CsdlProperty> structuralProperties, IEnumerable`1<CsdlNavigationProperty> navigationProperties, CsdlLocation location);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlConstantExpression : CsdlExpressionBase {
    private EdmValueKind kind;
    private string value;
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public string Value { get; }
    public CsdlConstantExpression(EdmValueKind kind, string value, CsdlLocation location);
    public virtual EdmExpressionKind get_ExpressionKind();
    public EdmValueKind get_ValueKind();
    public string get_Value();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlDecimalTypeReference : CsdlPrimitiveTypeReference {
    public CsdlDecimalTypeReference(Nullable`1<int> precision, Nullable`1<int> scale, string typeName, bool isNullable, CsdlLocation location);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlDirectValueAnnotation : CsdlElement {
    private string namespaceName;
    private string name;
    private string value;
    private bool isAttribute;
    public string NamespaceName { get; }
    public string Name { get; }
    public string Value { get; }
    public bool IsAttribute { get; }
    public CsdlDirectValueAnnotation(string namespaceName, string name, string value, bool isAttribute, CsdlLocation location);
    public string get_NamespaceName();
    public string get_Name();
    public string get_Value();
    public bool get_IsAttribute();
}
internal abstract class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlElement : object {
    protected List`1<object> annotations;
    protected EdmLocation location;
    public bool HasDirectValueAnnotations { get; }
    public bool HasVocabularyAnnotations { get; }
    public IEnumerable`1<CsdlDirectValueAnnotation> ImmediateValueAnnotations { get; }
    public IEnumerable`1<CsdlAnnotation> VocabularyAnnotations { get; }
    public EdmLocation Location { get; }
    public CsdlElement(CsdlLocation location);
    public virtual bool get_HasDirectValueAnnotations();
    public bool get_HasVocabularyAnnotations();
    public IEnumerable`1<CsdlDirectValueAnnotation> get_ImmediateValueAnnotations();
    public IEnumerable`1<CsdlAnnotation> get_VocabularyAnnotations();
    public EdmLocation get_Location();
    public void AddAnnotation(CsdlDirectValueAnnotation annotation);
    public void AddAnnotation(CsdlAnnotation annotation);
    private IEnumerable`1<T> GetAnnotations();
    private void AddUntypedAnnotation(object annotation);
    private bool HasAnnotations();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlEntityContainer : CsdlNamedElement {
    private string extends;
    private List`1<CsdlEntitySet> entitySets;
    private List`1<CsdlSingleton> singletons;
    private List`1<CsdlOperationImport> operationImports;
    public string Extends { get; }
    public IEnumerable`1<CsdlEntitySet> EntitySets { get; }
    public IEnumerable`1<CsdlSingleton> Singletons { get; }
    public IEnumerable`1<CsdlOperationImport> OperationImports { get; }
    public CsdlEntityContainer(string name, string extends, IEnumerable`1<CsdlEntitySet> entitySets, IEnumerable`1<CsdlSingleton> singletons, IEnumerable`1<CsdlOperationImport> operationImports, CsdlLocation location);
    public string get_Extends();
    public IEnumerable`1<CsdlEntitySet> get_EntitySets();
    public IEnumerable`1<CsdlSingleton> get_Singletons();
    public IEnumerable`1<CsdlOperationImport> get_OperationImports();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlEntityReferenceType : CsdlElement {
    private CsdlTypeReference entityType;
    public CsdlTypeReference EntityType { get; }
    public CsdlEntityReferenceType(CsdlTypeReference entityType, CsdlLocation location);
    public CsdlTypeReference get_EntityType();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlEntitySet : CsdlAbstractNavigationSource {
    private string elementType;
    [CompilerGeneratedAttribute]
private bool <IncludeInServiceDocument>k__BackingField;
    public string ElementType { get; }
    public bool IncludeInServiceDocument { get; private set; }
    public CsdlEntitySet(string name, string elementType, IEnumerable`1<CsdlNavigationPropertyBinding> navigationPropertyBindings, CsdlLocation location);
    public CsdlEntitySet(string name, string elementType, IEnumerable`1<CsdlNavigationPropertyBinding> navigationPropertyBindings, CsdlLocation location, bool includeInServiceDocument);
    public string get_ElementType();
    [CompilerGeneratedAttribute]
public bool get_IncludeInServiceDocument();
    [CompilerGeneratedAttribute]
private void set_IncludeInServiceDocument(bool value);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlEntityType : CsdlNamedStructuredType {
    private CsdlKey key;
    private bool hasStream;
    public CsdlKey Key { get; }
    public bool HasStream { get; }
    public CsdlEntityType(string name, string baseTypeName, bool isAbstract, bool isOpen, bool hasStream, CsdlKey key, IEnumerable`1<CsdlProperty> structualProperties, IEnumerable`1<CsdlNavigationProperty> navigationProperties, CsdlLocation location);
    public CsdlKey get_Key();
    public bool get_HasStream();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlEnumMember : CsdlNamedElement {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Value>k__BackingField;
    public Nullable`1<long> Value { get; public set; }
    public CsdlEnumMember(string name, Nullable`1<long> value, CsdlLocation location);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(Nullable`1<long> value);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlEnumMemberExpression : CsdlExpressionBase {
    private string enumMemberPath;
    [CompilerGeneratedAttribute]
private IEdmEnumType <EnumType>k__BackingField;
    public EdmExpressionKind ExpressionKind { get; }
    public string EnumMemberPath { get; }
    public IEdmEnumType EnumType { get; }
    public CsdlEnumMemberExpression(string enumMemberPath, CsdlLocation location);
    public CsdlEnumMemberExpression(string enumMemberPath, IEdmEnumType enumType, CsdlLocation location);
    public virtual EdmExpressionKind get_ExpressionKind();
    public string get_EnumMemberPath();
    [CompilerGeneratedAttribute]
public IEdmEnumType get_EnumType();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlEnumType : CsdlNamedElement {
    private string underlyingTypeName;
    private bool isFlags;
    private List`1<CsdlEnumMember> members;
    public string UnderlyingTypeName { get; }
    public bool IsFlags { get; }
    public IEnumerable`1<CsdlEnumMember> Members { get; }
    public CsdlEnumType(string name, string underlyingTypeName, bool isFlags, IEnumerable`1<CsdlEnumMember> members, CsdlLocation location);
    public string get_UnderlyingTypeName();
    public bool get_IsFlags();
    public IEnumerable`1<CsdlEnumMember> get_Members();
}
internal abstract class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlExpressionBase : CsdlElement {
    public EdmExpressionKind ExpressionKind { get; }
    public CsdlExpressionBase(CsdlLocation location);
    public abstract virtual EdmExpressionKind get_ExpressionKind();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlExpressionTypeReference : CsdlTypeReference {
    private ICsdlTypeExpression typeExpression;
    public ICsdlTypeExpression TypeExpression { get; }
    public CsdlExpressionTypeReference(ICsdlTypeExpression typeExpression, bool isNullable, CsdlLocation location);
    public ICsdlTypeExpression get_TypeExpression();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlFunction : CsdlOperation {
    [CompilerGeneratedAttribute]
private bool <IsComposable>k__BackingField;
    public bool IsComposable { get; private set; }
    public CsdlFunction(string name, IEnumerable`1<CsdlOperationParameter> parameters, CsdlOperationReturn operationReturn, bool isBound, string entitySetPath, bool isComposable, CsdlLocation location);
    [CompilerGeneratedAttribute]
public bool get_IsComposable();
    [CompilerGeneratedAttribute]
private void set_IsComposable(bool value);
}
internal abstract class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlFunctionBase : CsdlNamedElement {
    private List`1<CsdlOperationParameter> parameters;
    private CsdlOperationReturn operationReturn;
    public IEnumerable`1<CsdlOperationParameter> Parameters { get; }
    public CsdlOperationReturn Return { get; }
    protected CsdlFunctionBase(string name, IEnumerable`1<CsdlOperationParameter> parameters, CsdlOperationReturn operationReturn, CsdlLocation location);
    public IEnumerable`1<CsdlOperationParameter> get_Parameters();
    public CsdlOperationReturn get_Return();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlFunctionImport : CsdlOperationImport {
    [CompilerGeneratedAttribute]
private bool <IncludeInServiceDocument>k__BackingField;
    public bool IncludeInServiceDocument { get; private set; }
    public CsdlFunctionImport(string name, string schemaOperationQualifiedTypeName, string entitySet, bool includeInServiceDocument, CsdlLocation location);
    [CompilerGeneratedAttribute]
public bool get_IncludeInServiceDocument();
    [CompilerGeneratedAttribute]
private void set_IncludeInServiceDocument(bool value);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlIfExpression : CsdlExpressionBase {
    private CsdlExpressionBase test;
    private CsdlExpressionBase ifTrue;
    private CsdlExpressionBase ifFalse;
    public EdmExpressionKind ExpressionKind { get; }
    public CsdlExpressionBase Test { get; }
    public CsdlExpressionBase IfTrue { get; }
    public CsdlExpressionBase IfFalse { get; }
    public CsdlIfExpression(CsdlExpressionBase test, CsdlExpressionBase ifTrue, CsdlExpressionBase ifFalse, CsdlLocation location);
    public virtual EdmExpressionKind get_ExpressionKind();
    public CsdlExpressionBase get_Test();
    public CsdlExpressionBase get_IfTrue();
    public CsdlExpressionBase get_IfFalse();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlInclude : CsdlElement {
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    public string Alias { get; }
    public string Namespace { get; }
    public CsdlInclude(string alias, string ns, CsdlLocation location);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public string get_Namespace();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlIncludeAnnotations : CsdlElement {
    [CompilerGeneratedAttribute]
private string <TermNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Qualifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetNamespace>k__BackingField;
    public string TermNamespace { get; }
    public string Qualifier { get; }
    public string TargetNamespace { get; }
    public CsdlIncludeAnnotations(string termNamespace, string qualifier, string targetNamespace, CsdlLocation location);
    [CompilerGeneratedAttribute]
public string get_TermNamespace();
    [CompilerGeneratedAttribute]
public string get_Qualifier();
    [CompilerGeneratedAttribute]
public string get_TargetNamespace();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlIsOfExpression : CsdlExpressionBase {
    private CsdlTypeReference type;
    private CsdlExpressionBase operand;
    public EdmExpressionKind ExpressionKind { get; }
    public CsdlTypeReference Type { get; }
    public CsdlExpressionBase Operand { get; }
    public CsdlIsOfExpression(CsdlTypeReference type, CsdlExpressionBase operand, CsdlLocation location);
    public virtual EdmExpressionKind get_ExpressionKind();
    public CsdlTypeReference get_Type();
    public CsdlExpressionBase get_Operand();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlKey : CsdlElement {
    private List`1<CsdlPropertyReference> properties;
    public IEnumerable`1<CsdlPropertyReference> Properties { get; }
    public CsdlKey(IEnumerable`1<CsdlPropertyReference> properties, CsdlLocation location);
    public IEnumerable`1<CsdlPropertyReference> get_Properties();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlLabeledExpression : CsdlExpressionBase {
    private string label;
    private CsdlExpressionBase element;
    public EdmExpressionKind ExpressionKind { get; }
    public string Label { get; }
    public CsdlExpressionBase Element { get; }
    public CsdlLabeledExpression(string label, CsdlExpressionBase element, CsdlLocation location);
    public virtual EdmExpressionKind get_ExpressionKind();
    public string get_Label();
    public CsdlExpressionBase get_Element();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlLabeledExpressionReferenceExpression : CsdlExpressionBase {
    private string label;
    public EdmExpressionKind ExpressionKind { get; }
    public string Label { get; }
    public CsdlLabeledExpressionReferenceExpression(string label, CsdlLocation location);
    public virtual EdmExpressionKind get_ExpressionKind();
    public string get_Label();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlModel : object {
    private List`1<CsdlSchema> schemata;
    private List`1<CsdlReference> currentModelReferences;
    private List`1<CsdlReference> parentModelReferences;
    [CompilerGeneratedAttribute]
private Version <CsdlVersion>k__BackingField;
    public IEnumerable`1<CsdlReference> CurrentModelReferences { get; }
    public IEnumerable`1<CsdlReference> ParentModelReferences { get; }
    public IEnumerable`1<CsdlSchema> Schemata { get; }
    public Version CsdlVersion { get; public set; }
    public IEnumerable`1<CsdlReference> get_CurrentModelReferences();
    public IEnumerable`1<CsdlReference> get_ParentModelReferences();
    public IEnumerable`1<CsdlSchema> get_Schemata();
    public void AddSchema(CsdlSchema schema);
    [CompilerGeneratedAttribute]
public Version get_CsdlVersion();
    [CompilerGeneratedAttribute]
public void set_CsdlVersion(Version value);
    public void AddCurrentModelReferences(IEnumerable`1<CsdlReference> referencesToAdd);
    public void AddParentModelReferences(CsdlReference referenceToAdd);
}
internal abstract class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlNamedElement : CsdlElement {
    private string name;
    public string Name { get; }
    protected CsdlNamedElement(string name, CsdlLocation location);
    public string get_Name();
}
internal abstract class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlNamedStructuredType : CsdlStructuredType {
    protected string baseTypeName;
    protected bool isAbstract;
    protected bool isOpen;
    protected string name;
    public string BaseTypeName { get; }
    public bool IsAbstract { get; }
    public bool IsOpen { get; }
    public string Name { get; }
    protected CsdlNamedStructuredType(string name, string baseTypeName, bool isAbstract, bool isOpen, IEnumerable`1<CsdlProperty> structuralproperties, IEnumerable`1<CsdlNavigationProperty> navigationProperties, CsdlLocation location);
    public string get_BaseTypeName();
    public bool get_IsAbstract();
    public bool get_IsOpen();
    public string get_Name();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlNamedTypeReference : CsdlTypeReference {
    [CompilerGeneratedAttribute]
private bool <IsUnbounded>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsUnicode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SpatialReferenceIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    public bool IsUnbounded { get; protected set; }
    public Nullable`1<int> MaxLength { get; protected set; }
    public Nullable`1<bool> IsUnicode { get; protected set; }
    public Nullable`1<int> Precision { get; protected set; }
    public Nullable`1<int> Scale { get; protected set; }
    public Nullable`1<int> SpatialReferenceIdentifier { get; protected set; }
    public string FullName { get; protected set; }
    public CsdlNamedTypeReference(string fullName, bool isNullable, CsdlLocation location);
    public CsdlNamedTypeReference(bool isUnbounded, Nullable`1<int> maxLength, Nullable`1<bool> isUnicode, Nullable`1<int> precision, Nullable`1<int> scale, Nullable`1<int> spatialReferenceIdentifier, string fullName, bool isNullable, CsdlLocation location);
    [CompilerGeneratedAttribute]
public bool get_IsUnbounded();
    [CompilerGeneratedAttribute]
protected void set_IsUnbounded(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxLength();
    [CompilerGeneratedAttribute]
protected void set_MaxLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsUnicode();
    [CompilerGeneratedAttribute]
protected void set_IsUnicode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Precision();
    [CompilerGeneratedAttribute]
protected void set_Precision(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Scale();
    [CompilerGeneratedAttribute]
protected void set_Scale(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SpatialReferenceIdentifier();
    [CompilerGeneratedAttribute]
protected void set_SpatialReferenceIdentifier(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
protected void set_FullName(string value);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlNavigationProperty : CsdlNamedElement {
    private string type;
    private Nullable`1<bool> nullable;
    private IEdmPathExpression partnerPath;
    private bool containsTarget;
    private CsdlOnDelete onDelete;
    private IEnumerable`1<CsdlReferentialConstraint> referentialConstraints;
    public string Type { get; }
    public Nullable`1<bool> Nullable { get; }
    public IEdmPathExpression PartnerPath { get; }
    public bool ContainsTarget { get; }
    public CsdlOnDelete OnDelete { get; }
    public IEnumerable`1<CsdlReferentialConstraint> ReferentialConstraints { get; }
    public CsdlNavigationProperty(string name, string type, Nullable`1<bool> nullable, string partner, bool containsTarget, CsdlOnDelete onDelete, IEnumerable`1<CsdlReferentialConstraint> referentialConstraints, CsdlLocation location);
    public string get_Type();
    public Nullable`1<bool> get_Nullable();
    public IEdmPathExpression get_PartnerPath();
    public bool get_ContainsTarget();
    public CsdlOnDelete get_OnDelete();
    public IEnumerable`1<CsdlReferentialConstraint> get_ReferentialConstraints();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlNavigationPropertyBinding : CsdlElement {
    private string path;
    private string target;
    public string Path { get; }
    public string Target { get; }
    public CsdlNavigationPropertyBinding(string path, string target, CsdlLocation location);
    public string get_Path();
    public string get_Target();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlNavigationPropertyPathExpression : CsdlPathExpression {
    public EdmExpressionKind ExpressionKind { get; }
    public CsdlNavigationPropertyPathExpression(string path, CsdlLocation location);
    public virtual EdmExpressionKind get_ExpressionKind();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlOnDelete : CsdlElement {
    private EdmOnDeleteAction action;
    public EdmOnDeleteAction Action { get; }
    public CsdlOnDelete(EdmOnDeleteAction action, CsdlLocation location);
    public EdmOnDeleteAction get_Action();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlOperation : CsdlFunctionBase {
    [CompilerGeneratedAttribute]
private bool <IsBound>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntitySetPath>k__BackingField;
    public bool IsBound { get; private set; }
    public string EntitySetPath { get; private set; }
    public CsdlOperation(string name, IEnumerable`1<CsdlOperationParameter> parameters, CsdlOperationReturn operationReturn, bool isBound, string entitySetPath, CsdlLocation location);
    [CompilerGeneratedAttribute]
public bool get_IsBound();
    [CompilerGeneratedAttribute]
private void set_IsBound(bool value);
    [CompilerGeneratedAttribute]
public string get_EntitySetPath();
    [CompilerGeneratedAttribute]
private void set_EntitySetPath(string value);
}
internal abstract class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlOperationImport : CsdlFunctionBase {
    private string entitySet;
    [CompilerGeneratedAttribute]
private string <SchemaOperationQualifiedTypeName>k__BackingField;
    public string EntitySet { get; }
    public string SchemaOperationQualifiedTypeName { get; private set; }
    protected CsdlOperationImport(string name, string schemaOperationQualifiedTypeName, string entitySet, IEnumerable`1<CsdlOperationParameter> parameters, CsdlOperationReturn returnType, CsdlLocation location);
    public string get_EntitySet();
    [CompilerGeneratedAttribute]
public string get_SchemaOperationQualifiedTypeName();
    [CompilerGeneratedAttribute]
private void set_SchemaOperationQualifiedTypeName(string value);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlOperationParameter : CsdlNamedElement {
    private CsdlTypeReference type;
    private bool isOptional;
    private string defaultValue;
    public CsdlTypeReference Type { get; }
    public bool IsOptional { get; }
    public string DefaultValue { get; }
    public CsdlOperationParameter(string name, CsdlTypeReference type, CsdlLocation location);
    public CsdlOperationParameter(string name, CsdlTypeReference type, CsdlLocation location, bool isOptional, string defaultValue);
    public CsdlTypeReference get_Type();
    public bool get_IsOptional();
    public string get_DefaultValue();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlOperationReturn : CsdlElement {
    private CsdlTypeReference returnType;
    public CsdlTypeReference ReturnType { get; }
    public CsdlOperationReturn(CsdlTypeReference returnType, CsdlLocation location);
    public CsdlTypeReference get_ReturnType();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlPathExpression : CsdlExpressionBase {
    private string path;
    public EdmExpressionKind ExpressionKind { get; }
    public string Path { get; }
    public CsdlPathExpression(string path, CsdlLocation location);
    public virtual EdmExpressionKind get_ExpressionKind();
    public string get_Path();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlPrimitiveTypeReference : CsdlNamedTypeReference {
    private EdmPrimitiveTypeKind kind;
    public EdmPrimitiveTypeKind Kind { get; }
    public CsdlPrimitiveTypeReference(EdmPrimitiveTypeKind kind, string typeName, bool isNullable, CsdlLocation location);
    public EdmPrimitiveTypeKind get_Kind();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlProperty : CsdlNamedElement {
    private CsdlTypeReference type;
    private string defaultValue;
    public CsdlTypeReference Type { get; }
    public string DefaultValue { get; }
    public CsdlProperty(string name, CsdlTypeReference type, string defaultValue, CsdlLocation location);
    public CsdlTypeReference get_Type();
    public string get_DefaultValue();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlPropertyPathExpression : CsdlPathExpression {
    public EdmExpressionKind ExpressionKind { get; }
    public CsdlPropertyPathExpression(string path, CsdlLocation location);
    public virtual EdmExpressionKind get_ExpressionKind();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlPropertyReference : CsdlElement {
    private string propertyName;
    public string PropertyName { get; }
    public CsdlPropertyReference(string propertyName, CsdlLocation location);
    public string get_PropertyName();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlPropertyValue : CsdlElement {
    private CsdlExpressionBase expression;
    private string property;
    public string Property { get; }
    public CsdlExpressionBase Expression { get; }
    public CsdlPropertyValue(string property, CsdlExpressionBase expression, CsdlLocation location);
    public string get_Property();
    public CsdlExpressionBase get_Expression();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlRecordExpression : CsdlExpressionBase {
    private CsdlTypeReference type;
    private List`1<CsdlPropertyValue> propertyValues;
    public EdmExpressionKind ExpressionKind { get; }
    public CsdlTypeReference Type { get; }
    public IEnumerable`1<CsdlPropertyValue> PropertyValues { get; }
    public CsdlRecordExpression(CsdlTypeReference type, IEnumerable`1<CsdlPropertyValue> propertyValues, CsdlLocation location);
    public virtual EdmExpressionKind get_ExpressionKind();
    public CsdlTypeReference get_Type();
    public IEnumerable`1<CsdlPropertyValue> get_PropertyValues();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlReference : CsdlElement {
    private List`1<CsdlInclude> includes;
    private List`1<CsdlIncludeAnnotations> includeAnnotations;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    public string Uri { get; }
    public IEnumerable`1<CsdlInclude> Includes { get; }
    public IEnumerable`1<CsdlIncludeAnnotations> IncludeAnnotations { get; }
    public CsdlReference(string uri, IEnumerable`1<CsdlInclude> includes, IEnumerable`1<CsdlIncludeAnnotations> includeAnnotations, CsdlLocation location);
    [CompilerGeneratedAttribute]
public string get_Uri();
    public IEnumerable`1<CsdlInclude> get_Includes();
    public IEnumerable`1<CsdlIncludeAnnotations> get_IncludeAnnotations();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlReferentialConstraint : CsdlElement {
    private string propertyName;
    private string referencedPropertyName;
    public string PropertyName { get; }
    public string ReferencedPropertyName { get; }
    public CsdlReferentialConstraint(string propertyName, string referencedPropertyName, CsdlLocation location);
    public string get_PropertyName();
    public string get_ReferencedPropertyName();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlReferentialConstraintRole : CsdlElement {
    private string role;
    private List`1<CsdlPropertyReference> properties;
    public string Role { get; }
    public IEnumerable`1<CsdlPropertyReference> Properties { get; }
    public CsdlReferentialConstraintRole(string role, IEnumerable`1<CsdlPropertyReference> properties, CsdlLocation location);
    public string get_Role();
    public IEnumerable`1<CsdlPropertyReference> get_Properties();
    public int IndexOf(CsdlPropertyReference reference);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlSchema : CsdlElement {
    private List`1<CsdlStructuredType> structuredTypes;
    private List`1<CsdlEnumType> enumTypes;
    private List`1<CsdlOperation> operations;
    private List`1<CsdlTerm> terms;
    private List`1<CsdlEntityContainer> entityContainers;
    private List`1<CsdlAnnotations> outOfLineAnnotations;
    private List`1<CsdlTypeDefinition> typeDefinitions;
    private string alias;
    private string namespaceName;
    private Version version;
    public IEnumerable`1<CsdlStructuredType> StructuredTypes { get; }
    public IEnumerable`1<CsdlEnumType> EnumTypes { get; }
    public IEnumerable`1<CsdlOperation> Operations { get; }
    public IEnumerable`1<CsdlTerm> Terms { get; }
    public IEnumerable`1<CsdlEntityContainer> EntityContainers { get; }
    public IEnumerable`1<CsdlAnnotations> OutOfLineAnnotations { get; }
    public IEnumerable`1<CsdlTypeDefinition> TypeDefinitions { get; }
    public string Alias { get; }
    public string Namespace { get; }
    public Version Version { get; }
    public CsdlSchema(string namespaceName, string alias, Version version, IEnumerable`1<CsdlStructuredType> structuredTypes, IEnumerable`1<CsdlEnumType> enumTypes, IEnumerable`1<CsdlOperation> operations, IEnumerable`1<CsdlTerm> terms, IEnumerable`1<CsdlEntityContainer> entityContainers, IEnumerable`1<CsdlAnnotations> outOfLineAnnotations, IEnumerable`1<CsdlTypeDefinition> typeDefinitions, CsdlLocation location);
    public IEnumerable`1<CsdlStructuredType> get_StructuredTypes();
    public IEnumerable`1<CsdlEnumType> get_EnumTypes();
    public IEnumerable`1<CsdlOperation> get_Operations();
    public IEnumerable`1<CsdlTerm> get_Terms();
    public IEnumerable`1<CsdlEntityContainer> get_EntityContainers();
    public IEnumerable`1<CsdlAnnotations> get_OutOfLineAnnotations();
    public IEnumerable`1<CsdlTypeDefinition> get_TypeDefinitions();
    public string get_Alias();
    public string get_Namespace();
    public Version get_Version();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlSingleton : CsdlAbstractNavigationSource {
    private string type;
    public string Type { get; }
    public CsdlSingleton(string name, string type, IEnumerable`1<CsdlNavigationPropertyBinding> navigationPropertyBindings, CsdlLocation location);
    public string get_Type();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlSpatialTypeReference : CsdlPrimitiveTypeReference {
    private Nullable`1<int> srid;
    public Nullable`1<int> Srid { get; }
    public CsdlSpatialTypeReference(EdmPrimitiveTypeKind kind, Nullable`1<int> srid, string typeName, bool isNullable, CsdlLocation location);
    public Nullable`1<int> get_Srid();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlStringTypeReference : CsdlPrimitiveTypeReference {
    public CsdlStringTypeReference(bool isUnbounded, Nullable`1<int> maxLength, Nullable`1<bool> isUnicode, string typeName, bool isNullable, CsdlLocation location);
}
internal abstract class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlStructuredType : CsdlElement {
    protected List`1<CsdlProperty> structuralProperties;
    protected List`1<CsdlNavigationProperty> navigationProperties;
    public IEnumerable`1<CsdlProperty> StructuralProperties { get; }
    public IEnumerable`1<CsdlNavigationProperty> NavigationProperties { get; }
    protected CsdlStructuredType(IEnumerable`1<CsdlProperty> structuralProperties, IEnumerable`1<CsdlNavigationProperty> navigationProperties, CsdlLocation location);
    public IEnumerable`1<CsdlProperty> get_StructuralProperties();
    public IEnumerable`1<CsdlNavigationProperty> get_NavigationProperties();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlTemporalTypeReference : CsdlPrimitiveTypeReference {
    public CsdlTemporalTypeReference(EdmPrimitiveTypeKind kind, Nullable`1<int> precision, string typeName, bool isNullable, CsdlLocation location);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlTerm : CsdlNamedElement {
    private CsdlTypeReference type;
    private string appliesTo;
    private string defaultValue;
    public CsdlTypeReference Type { get; }
    public string AppliesTo { get; }
    public string DefaultValue { get; }
    public CsdlTerm(string name, CsdlTypeReference type, string appliesTo, string defaultValue, CsdlLocation location);
    public CsdlTypeReference get_Type();
    public string get_AppliesTo();
    public string get_DefaultValue();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlTypeDefinition : CsdlNamedElement {
    private string underlyingTypeName;
    public string UnderlyingTypeName { get; }
    public CsdlTypeDefinition(string name, string underlyingTypeName, CsdlLocation location);
    public string get_UnderlyingTypeName();
}
internal abstract class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlTypeReference : CsdlElement {
    private bool isNullable;
    public bool IsNullable { get; }
    protected CsdlTypeReference(bool isNullable, CsdlLocation location);
    public bool get_IsNullable();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Ast.CsdlUntypedTypeReference : CsdlNamedTypeReference {
    public CsdlUntypedTypeReference(string typeName, CsdlLocation location);
}
internal interface Microsoft.OData.Edm.Csdl.Parsing.Ast.ICsdlTypeExpression {
}
internal abstract class Microsoft.OData.Edm.Csdl.Parsing.Common.EdmXmlDocumentParser`1 : XmlDocumentParser`1<TResult> {
    protected XmlElementInfo currentElement;
    private Stack`1<XmlElementInfo> elementStack;
    private HashSetInternal`1<string> edmNamespaces;
    internal IEnumerable`1<KeyValuePair`2<Version, string>> SupportedVersions { get; }
    internal EdmXmlDocumentParser`1(string artifactLocation, XmlReader reader);
    internal abstract virtual IEnumerable`1<KeyValuePair`2<Version, string>> get_SupportedVersions();
    internal static XmlAttributeInfo GetOptionalAttribute(XmlElementInfo element, string attributeName);
    internal XmlAttributeInfo GetRequiredAttribute(XmlElementInfo element, string attributeName);
    protected virtual XmlReader InitializeReader(XmlReader reader);
    protected virtual bool TryGetDocumentVersion(string xmlNamespaceName, Version& version, String[]& expectedNamespaces);
    protected virtual bool IsOwnedNamespace(string namespaceName);
    protected XmlElementParser`1<TItem> CsdlElement(string elementName, Func`3<XmlElementInfo, XmlElementValueCollection, TItem> initializer, XmlElementParser[] childParsers);
    protected void BeginItem(XmlElementInfo element);
    protected abstract virtual void AnnotateItem(object result, XmlElementValueCollection childValues);
    protected void EndItem();
    protected Nullable`1<int> OptionalInteger(string attributeName);
    protected Nullable`1<long> OptionalLong(string attributeName);
    protected Nullable`1<int> OptionalSrid(string attributeName, int defaultSrid);
    protected Nullable`1<int> OptionalScale(string attributeName);
    protected Nullable`1<int> OptionalMaxLength(string attributeName);
    protected EdmMultiplicity RequiredMultiplicity(string attributeName);
    protected EdmOnDeleteAction RequiredOnDeleteAction(string attributeName);
    protected Nullable`1<bool> OptionalBoolean(string attributeName);
    protected string Optional(string attributeName);
    protected string Required(string attributeName);
    protected string OptionalAlias(string attributeName);
    protected string RequiredAlias(string attributeName);
    protected string RequiredEntitySetPath(string attributeName);
    protected string RequiredEnumMemberPath(string attributeName);
    protected string RequiredEnumMemberPath(XmlTextValue text);
    protected string OptionalType(string attributeName);
    protected string RequiredType(string attributeName);
    protected string OptionalQualifiedName(string attributeName);
    protected string RequiredQualifiedName(string attributeName);
    protected string ValidateEnumMembersPath(string path);
    private string ValidateTypeName(string name);
    private string ValidateAlias(string name);
    private string ValidateEntitySetPath(string path);
    private string ValidateEnumMemberPath(string path);
    private string ValidateQualifiedName(string qualifiedName);
    private bool IsEdmNamespace(string xmlNamespaceUri);
}
[DefaultMemberAttribute("Item")]
internal interface Microsoft.OData.Edm.Csdl.Parsing.Common.IXmlElementAttributes {
    public IEnumerable`1<XmlAttributeInfo> Unused { get; }
    public XmlAttributeInfo Item { get; }
    public abstract virtual IEnumerable`1<XmlAttributeInfo> get_Unused();
    public abstract virtual XmlAttributeInfo get_Item(string attributeName);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Common.XmlAnnotationInfo : object {
    [CompilerGeneratedAttribute]
private string <NamespaceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private CsdlLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAttribute>k__BackingField;
    internal string NamespaceName { get; private set; }
    internal string Name { get; private set; }
    internal CsdlLocation Location { get; private set; }
    internal string Value { get; private set; }
    internal bool IsAttribute { get; private set; }
    internal XmlAnnotationInfo(CsdlLocation location, string namespaceName, string name, string value, bool isAttribute);
    [CompilerGeneratedAttribute]
internal string get_NamespaceName();
    [CompilerGeneratedAttribute]
private void set_NamespaceName(string value);
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
internal CsdlLocation get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(CsdlLocation value);
    [CompilerGeneratedAttribute]
internal string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsAttribute();
    [CompilerGeneratedAttribute]
private void set_IsAttribute(bool value);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Common.XmlAttributeInfo : object {
    internal static XmlAttributeInfo Missing;
    private string name;
    private string attributeValue;
    private CsdlLocation location;
    [CompilerGeneratedAttribute]
private bool <IsUsed>k__BackingField;
    internal bool IsMissing { get; }
    internal bool IsUsed { get; internal set; }
    internal CsdlLocation Location { get; }
    internal string Name { get; }
    internal string Value { get; }
    internal XmlAttributeInfo(string attrName, string attrValue, CsdlLocation attrLocation);
    private static XmlAttributeInfo();
    internal bool get_IsMissing();
    [CompilerGeneratedAttribute]
internal bool get_IsUsed();
    [CompilerGeneratedAttribute]
internal void set_IsUsed(bool value);
    internal CsdlLocation get_Location();
    internal string get_Name();
    internal string get_Value();
}
internal abstract class Microsoft.OData.Edm.Csdl.Parsing.Common.XmlDocumentParser : object {
    private string docPath;
    private Stack`1<ElementScope> currentBranch;
    private XmlReader reader;
    private IXmlLineInfo xmlLineInfo;
    private List`1<EdmError> errors;
    private StringBuilder currentText;
    private CsdlLocation currentTextLocation;
    private ElementScope currentScope;
    [CompilerGeneratedAttribute]
private string <DocumentNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <DocumentVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private CsdlLocation <DocumentElementLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlElementValue <Result>k__BackingField;
    internal string DocumentPath { get; }
    internal string DocumentNamespace { get; private set; }
    internal Version DocumentVersion { get; private set; }
    internal CsdlLocation DocumentElementLocation { get; private set; }
    internal bool HasErrors { get; private set; }
    internal XmlElementValue Result { get; private set; }
    internal CsdlLocation Location { get; }
    internal IEnumerable`1<EdmError> Errors { get; }
    protected bool CheckAnnotationNamespace { get; }
    private bool IsTextNode { get; }
    protected XmlDocumentParser(XmlReader underlyingReader, string documentPath);
    internal string get_DocumentPath();
    [CompilerGeneratedAttribute]
internal string get_DocumentNamespace();
    [CompilerGeneratedAttribute]
private void set_DocumentNamespace(string value);
    [CompilerGeneratedAttribute]
internal Version get_DocumentVersion();
    [CompilerGeneratedAttribute]
private void set_DocumentVersion(Version value);
    [CompilerGeneratedAttribute]
internal CsdlLocation get_DocumentElementLocation();
    [CompilerGeneratedAttribute]
private void set_DocumentElementLocation(CsdlLocation value);
    [CompilerGeneratedAttribute]
internal bool get_HasErrors();
    [CompilerGeneratedAttribute]
private void set_HasErrors(bool value);
    [CompilerGeneratedAttribute]
internal XmlElementValue get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(XmlElementValue value);
    internal CsdlLocation get_Location();
    internal IEnumerable`1<EdmError> get_Errors();
    protected abstract virtual bool get_CheckAnnotationNamespace();
    private bool get_IsTextNode();
    internal void ParseDocumentElement();
    protected void ReportError(CsdlLocation errorLocation, EdmErrorCode errorCode, string errorMessage);
    protected abstract virtual XmlReader InitializeReader(XmlReader inputReader);
    protected abstract virtual bool TryGetDocumentVersion(string xmlNamespaceName, Version& version, String[]& expectedNamespaces);
    protected abstract virtual bool TryGetRootElementParser(Version artifactVersion, XmlElementInfo rootElement, XmlElementParser& parser);
    protected virtual bool IsOwnedNamespace(string namespaceName);
    protected virtual XmlElementParser`1<TResult> Element(string elementName, Func`3<XmlElementInfo, XmlElementValueCollection, TResult> parserFunc, XmlElementParser[] childParsers);
    private void Parse();
    private void EndElement();
    private void BeginElement(XmlElementParser elementParser, XmlElementInfo element);
    private void ProcessNode();
    private bool CheckNamespace(string elementName, string elementNamespace);
    private void ProcessElement();
    private XmlElementInfo ReadElement(string elementName, CsdlLocation elementLocation);
    private void ReportEmptyFile();
    private void ReportUnexpectedRootNamespace(string elementName, string namespaceUri, String[] expectedNamespaces);
    private void ReportUnexpectedRootElement(CsdlLocation elementLocation, string elementName, string expectedNamespace);
    private void ReportUnexpectedAttribute(CsdlLocation errorLocation, string attributeName);
    private void ReportUnexpectedNodeType(XmlNodeType nodeType);
    private void ReportUnexpectedElement(CsdlLocation errorLocation, string elementName);
    private void ReportUnusedElement(CsdlLocation errorLocation, string elementName);
    private void ReportTextNotAllowed(CsdlLocation errorLocation, string textValue);
}
internal abstract class Microsoft.OData.Edm.Csdl.Parsing.Common.XmlDocumentParser`1 : XmlDocumentParser {
    internal XmlElementValue`1<TResult> Result { get; }
    internal XmlDocumentParser`1(XmlReader underlyingReader, string documentPath);
    internal XmlElementValue`1<TResult> get_Result();
    protected sealed virtual bool TryGetRootElementParser(Version artifactVersion, XmlElementInfo rootElement, XmlElementParser& parser);
    protected abstract virtual bool TryGetDocumentElementParser(Version artifactVersion, XmlElementInfo rootElement, XmlElementParser`1& parser);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Common.XmlElementInfo : object {
    private Dictionary`2<string, XmlAttributeInfo> attributes;
    private List`1<XmlAnnotationInfo> annotations;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private CsdlLocation <Location>k__BackingField;
    private IEnumerable`1<XmlAttributeInfo> Microsoft.OData.Edm.Csdl.Parsing.Common.IXmlElementAttributes.Unused { get; }
    internal string Name { get; private set; }
    internal CsdlLocation Location { get; private set; }
    internal IXmlElementAttributes Attributes { get; }
    internal IList`1<XmlAnnotationInfo> Annotations { get; }
    private XmlAttributeInfo Microsoft.OData.Edm.Csdl.Parsing.Common.IXmlElementAttributes.Item { get; }
    internal XmlElementInfo(string elementName, CsdlLocation elementLocation, IList`1<XmlAttributeInfo> attributes, List`1<XmlAnnotationInfo> annotations);
    [IteratorStateMachineAttribute("Microsoft.OData.Edm.Csdl.Parsing.Common.XmlElementInfo/<Microsoft-OData-Edm-Csdl-Parsing-Common-IXmlElementAttributes-get_Unused>d__4")]
private sealed virtual override IEnumerable`1<XmlAttributeInfo> Microsoft.OData.Edm.Csdl.Parsing.Common.IXmlElementAttributes.get_Unused();
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
internal CsdlLocation get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(CsdlLocation value);
    internal IXmlElementAttributes get_Attributes();
    internal IList`1<XmlAnnotationInfo> get_Annotations();
    private sealed virtual override XmlAttributeInfo Microsoft.OData.Edm.Csdl.Parsing.Common.IXmlElementAttributes.get_Item(string attributeName);
    internal void AddAnnotation(XmlAnnotationInfo annotation);
}
internal abstract class Microsoft.OData.Edm.Csdl.Parsing.Common.XmlElementParser : object {
    private Dictionary`2<string, XmlElementParser> childParsers;
    [CompilerGeneratedAttribute]
private string <ElementName>k__BackingField;
    internal string ElementName { get; private set; }
    protected XmlElementParser(string elementName, Dictionary`2<string, XmlElementParser> children);
    [CompilerGeneratedAttribute]
internal string get_ElementName();
    [CompilerGeneratedAttribute]
private void set_ElementName(string value);
    public void AddChildParser(XmlElementParser child);
    internal static XmlElementParser`1<TResult> Create(string elementName, Func`3<XmlElementInfo, XmlElementValueCollection, TResult> parserFunc, IEnumerable`1<XmlElementParser> childParsers, IEnumerable`1<XmlElementParser> descendantParsers);
    internal abstract virtual XmlElementValue Parse(XmlElementInfo element, IList`1<XmlElementValue> children);
    internal bool TryGetChildElementParser(string elementName, XmlElementParser& elementParser);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Common.XmlElementParser`1 : XmlElementParser {
    private Func`3<XmlElementInfo, XmlElementValueCollection, TResult> parserFunc;
    internal XmlElementParser`1(string elementName, Dictionary`2<string, XmlElementParser> children, Func`3<XmlElementInfo, XmlElementValueCollection, TResult> parser);
    internal virtual XmlElementValue Parse(XmlElementInfo element, IList`1<XmlElementValue> children);
}
internal abstract class Microsoft.OData.Edm.Csdl.Parsing.Common.XmlElementValue : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private CsdlLocation <Location>k__BackingField;
    internal string Name { get; private set; }
    internal CsdlLocation Location { get; private set; }
    internal object UntypedValue { get; }
    internal bool IsUsed { get; }
    internal bool IsText { get; }
    internal string TextValue { get; }
    internal XmlElementValue(string elementName, CsdlLocation elementLocation);
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
internal CsdlLocation get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(CsdlLocation value);
    internal abstract virtual object get_UntypedValue();
    internal abstract virtual bool get_IsUsed();
    internal virtual bool get_IsText();
    internal virtual string get_TextValue();
    internal virtual TValue ValueAs();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Common.XmlElementValue`1 : XmlElementValue {
    private TValue value;
    private bool isUsed;
    internal bool IsText { get; }
    internal bool IsUsed { get; }
    internal object UntypedValue { get; }
    internal TValue Value { get; }
    internal XmlElementValue`1(string name, CsdlLocation location, TValue newValue);
    internal virtual bool get_IsText();
    internal virtual bool get_IsUsed();
    internal virtual object get_UntypedValue();
    internal TValue get_Value();
    internal virtual T ValueAs();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.OData.Edm.Csdl.Parsing.Common.XmlElementValueCollection : object {
    private static XmlElementValueCollection empty;
    private IList`1<XmlElementValue> values;
    private ILookup`2<string, XmlElementValue> nameLookup;
    internal XmlTextValue FirstText { get; }
    internal XmlElementValue Item { get; }
    private XmlElementValueCollection(IList`1<XmlElementValue> list, ILookup`2<string, XmlElementValue> nameMap);
    private static XmlElementValueCollection();
    internal XmlTextValue get_FirstText();
    internal XmlElementValue get_Item(string elementName);
    public sealed virtual IEnumerator`1<XmlElementValue> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal bool Remove(XmlElementValue value);
    internal static XmlElementValueCollection FromList(IList`1<XmlElementValue> values);
    internal IEnumerable`1<XmlElementValue> FindByName(string elementName);
    internal IEnumerable`1<XmlElementValue`1<TResult>> FindByName(string elementName);
    private ILookup`2<string, XmlElementValue> EnsureLookup();
}
[ExtensionAttribute]
internal static class Microsoft.OData.Edm.Csdl.Parsing.Common.XmlElementValueExtensions : object {
    [IteratorStateMachineAttribute("Microsoft.OData.Edm.Csdl.Parsing.Common.XmlElementValueExtensions/<OfResultType>d__0`1")]
[ExtensionAttribute]
internal static IEnumerable`1<XmlElementValue`1<T>> OfResultType(IEnumerable`1<XmlElementValue> elements);
    [ExtensionAttribute]
internal static IEnumerable`1<T> ValuesOfType(IEnumerable`1<XmlElementValue> elements);
    [IteratorStateMachineAttribute("Microsoft.OData.Edm.Csdl.Parsing.Common.XmlElementValueExtensions/<OfText>d__2")]
[ExtensionAttribute]
internal static IEnumerable`1<XmlTextValue> OfText(IEnumerable`1<XmlElementValue> elements);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.Common.XmlTextValue : XmlElementValue`1<string> {
    internal static XmlTextValue Missing;
    internal static string ElementName;
    internal bool IsText { get; }
    internal string TextValue { get; }
    internal XmlTextValue(CsdlLocation textLocation, string textValue);
    private static XmlTextValue();
    internal virtual bool get_IsText();
    internal virtual string get_TextValue();
}
internal class Microsoft.OData.Edm.Csdl.Parsing.CsdlDocumentParser : CsdlDocumentParserBase`1<CsdlSchema> {
    private Version artifactVersion;
    private int entityContainerCount;
    protected bool CheckAnnotationNamespace { get; }
    internal IEnumerable`1<KeyValuePair`2<Version, string>> SupportedVersions { get; }
    internal CsdlDocumentParser(string documentPath, XmlReader reader);
    protected virtual bool get_CheckAnnotationNamespace();
    internal virtual IEnumerable`1<KeyValuePair`2<Version, string>> get_SupportedVersions();
    protected virtual bool TryGetDocumentElementParser(Version csdlArtifactVersion, XmlElementInfo rootElement, XmlElementParser`1& parser);
    private XmlElementParser`1<CsdlSchema> CreateRootElementParser();
    private CsdlSchema OnSchemaElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlComplexType OnComplexTypeElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlEntityType OnEntityTypeElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlProperty OnPropertyElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlTerm OnTermElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlAnnotations OnAnnotationsElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlTypeDefinition OnTypeDefinitionElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlNamedElement OnNavigationPropertyElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private static CsdlKey OnEntityKeyElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlPropertyReference OnPropertyRefElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlEnumType OnEnumTypeElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlEnumMember OnEnumMemberElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlOnDelete OnDeleteActionElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlReferentialConstraint OnReferentialConstraintElement(XmlElementInfo element, XmlElementValueCollection childValues);
    internal CsdlAction OnActionElement(XmlElementInfo element, XmlElementValueCollection childValues);
    internal CsdlFunction OnFunctionElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private void ReportOperationReadErrorsIfExist(string entitySetPath, bool isBound, string name);
    private CsdlOperationParameter OnParameterElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlActionImport OnActionImportElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlFunctionImport OnFunctionImportElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlOperationParameter OnFunctionImportParameterElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlTypeReference OnEntityReferenceTypeElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlTypeReference OnTypeRefElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlTypeReference OnCollectionTypeElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlOperationReturn OnReturnTypeElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlEntityContainer OnEntityContainerElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlEntitySet OnEntitySetElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlSingleton OnSingletonElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlNavigationPropertyBinding OnNavigationPropertyBindingElement(XmlElementInfo element, XmlElementValueCollection childValues);
}
internal abstract class Microsoft.OData.Edm.Csdl.Parsing.CsdlDocumentParserBase`1 : EdmXmlDocumentParser`1<TResult> {
    internal CsdlDocumentParserBase`1(string documentPath, XmlReader reader);
    protected virtual CsdlNamedTypeReference ParseNamedTypeReference(string typeName, bool isNullable, CsdlLocation parentLocation);
    protected virtual CsdlTypeReference ParseTypeReference(string typeString, XmlElementValueCollection childValues, CsdlLocation parentLocation, Optionality<TResult> typeInfoOptionality);
    protected virtual XmlElementParser`1<CsdlAnnotation> CreateAnnotationParser();
    protected virtual void AnnotateItem(object result, XmlElementValueCollection childValues);
    private CsdlAnnotation OnAnnotationElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlPropertyValue OnPropertyValueElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlRecordExpression OnRecordElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlCollectionExpression OnCollectionElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlLabeledExpression OnLabeledElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlApplyExpression OnApplyElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private static void AddChildParsers(XmlElementParser parent, IEnumerable`1<XmlElementParser> children);
    private static CsdlConstantExpression ConstantExpression(EdmValueKind kind, XmlElementValueCollection childValues, CsdlLocation location);
    private static CsdlConstantExpression OnIntConstantExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private static CsdlConstantExpression OnStringConstantExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private static CsdlConstantExpression OnBinaryConstantExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private static CsdlConstantExpression OnFloatConstantExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private static CsdlConstantExpression OnGuidConstantExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private static CsdlConstantExpression OnDecimalConstantExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private static CsdlConstantExpression OnBoolConstantExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private static CsdlConstantExpression OnDurationConstantExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private static CsdlConstantExpression OnDateConstantExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private static CsdlConstantExpression OnDateTimeOffsetConstantExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private static CsdlConstantExpression OnTimeOfDayConstantExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private static CsdlConstantExpression OnNullConstantExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private static CsdlPathExpression OnPathExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private static CsdlPropertyPathExpression OnPropertyPathExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private static CsdlNavigationPropertyPathExpression OnNavigationPropertyPathExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlLabeledExpressionReferenceExpression OnLabeledElementReferenceExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlEnumMemberExpression OnEnumMemberExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlExpressionBase OnIfExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlExpressionBase OnCastExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlExpressionBase OnIsOfExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlExpressionBase ParseAnnotationExpression(XmlElementInfo element, XmlElementValueCollection childValues);
    private void ParseMaxLength(Boolean& Unbounded, Nullable`1& maxLength);
    private void ParseBinaryFacets(Boolean& Unbounded, Nullable`1& maxLength);
    private void ParseDecimalFacets(Nullable`1& precision, Nullable`1& scale);
    private void ParseStringFacets(Boolean& Unbounded, Nullable`1& maxLength, Nullable`1& unicode);
    private void ParseTemporalFacets(Nullable`1& precision);
    private void ParseSpatialFacets(Nullable`1& srid, int defaultSrid);
    private void ParseTypeDefinitionFacets(Boolean& isUnbounded, Nullable`1& maxLength, Nullable`1& unicode, Nullable`1& precision, Nullable`1& scale, Nullable`1& srid);
}
internal static class Microsoft.OData.Edm.Csdl.Parsing.CsdlJsonParseHelper : object {
    public static CsdlTypeReference ParseCsdlTypeReference(JsonElement element, JsonParserContext context);
    private static CsdlNamedTypeReference ParseNamedTypeReference(string typeName, bool isNullable, bool isUnbounded, Nullable`1<int> maxLength, Nullable`1<bool> unicode, Nullable`1<int> precision, Nullable`1<int> scale, Nullable`1<int> srid, CsdlLocation parentLocation);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.CsdlJsonParser : object {
    internal static CsdlModel ParseCsdlDocument(Utf8JsonReader& jsonReader, JsonParserContext context);
    internal static IList`1<CsdlReference> ParseReferences(JsonElement element, JsonParserContext context);
    internal static CsdlReference ParseReference(string url, JsonElement element, JsonParserContext context);
    internal static CsdlInclude ParseInclude(JsonElement element, JsonParserContext context);
    internal static CsdlIncludeAnnotations ParseIncludeAnnotations(JsonElement element, JsonParserContext context);
    private static JsonDocument GetJsonDocument(Utf8JsonReader& jsonReader, JsonParserContext context);
    private static Version ParseVersion(JsonElement element, JsonParserContext context);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.CsdlParser : object {
    private List`1<EdmError> errorsList;
    private CsdlModel result;
    private bool success;
    public static bool TryParse(IEnumerable`1<XmlReader> csdlReaders, CsdlModel& entityModel, IEnumerable`1& errors);
    public bool AddReader(XmlReader csdlReader, string source);
    public bool GetResult(CsdlModel& model, IEnumerable`1& errors);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.CsdlReferenceParser : CsdlDocumentParserBase`1<CsdlReference> {
    protected bool CheckAnnotationNamespace { get; }
    internal IEnumerable`1<KeyValuePair`2<Version, string>> SupportedVersions { get; }
    internal CsdlReferenceParser(string documentPath, XmlReader reader);
    protected virtual bool get_CheckAnnotationNamespace();
    internal virtual IEnumerable`1<KeyValuePair`2<Version, string>> get_SupportedVersions();
    protected virtual bool TryGetDocumentElementParser(Version csdlArtifactVersion, XmlElementInfo rootElement, XmlElementParser`1& parser);
    private XmlElementParser`1<CsdlReference> CreateRootElementParser();
    private CsdlReference OnReferenceElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlInclude OnIncludeElement(XmlElementInfo element, XmlElementValueCollection childValues);
    private CsdlIncludeAnnotations OnIncludeAnnotationsElement(XmlElementInfo element, XmlElementValueCollection childValues);
}
internal class Microsoft.OData.Edm.Csdl.Parsing.JsonParserContext : object {
    private bool _dirty;
    private string _jsonPath;
    private Stack`1<object> _nodes;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private CsdlJsonReaderSettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<EdmError> <Errors>k__BackingField;
    public string Source { get; }
    public CsdlJsonReaderSettings Settings { get; }
    public string Path { get; }
    public List`1<EdmError> Errors { get; }
    public JsonParserContext(CsdlJsonReaderSettings settings, string source);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public CsdlJsonReaderSettings get_Settings();
    public void EnterScope(string propertyName);
    public void LeaveScope();
    public void LeaveScope(string propertyName);
    public void EnterScope(int index);
    public void LeaveScope(int index);
    public string get_Path();
    public CsdlLocation Location();
    [CompilerGeneratedAttribute]
public List`1<EdmError> get_Errors();
    public void ReportError(EdmErrorCode errorCode, string errorMessage);
    public bool IsSucceeded();
    public bool HasIntolerableError();
    public void AddRange(IList`1<EdmError> errors);
    private string BuildJsonPath();
    private string GetName(object node);
}
internal static class Microsoft.OData.Edm.Csdl.Parsing.SchemaJsonParser : object {
    internal static CsdlSchema ParseCsdlSchema(string schemaNamespace, Version version, JsonElement element, JsonParserContext context);
    internal static IList`1<CsdlAnnotations> ParseCsdlOutOfLineAnnotations(string name, JsonElement element, JsonParserContext context);
    internal static CsdlEntityContainer ParseCsdlEntityContainer(string name, JsonElement containerObject, JsonParserContext context);
    private static CsdlElement ParseEntityContainerMember(string name, JsonElement element, JsonParserContext context);
    internal static CsdlActionImport ParseCsdlActionImport(string name, JsonElement element, JsonParserContext context);
    internal static CsdlFunctionImport ParseCsdlFunctionImport(string name, JsonElement element, JsonParserContext context);
    internal static bool TryParseOperationImport(string name, JsonElement element, JsonParserContext context, CsdlOperationImport& operationImport);
    public static bool TryParseNavigationSource(string name, JsonElement element, JsonParserContext context, CsdlAbstractNavigationSource& navigationSource);
    public static IList`1<CsdlNavigationPropertyBinding> ParseCsdlNavigationPropertyBinding(JsonElement element, JsonParserContext context);
    internal static CsdlEntityType ParseCsdlEntityType(string name, JsonElement entityObject, JsonParserContext context);
    internal static CsdlElement TryParseStructuredTypeElement(string name, JsonElement element, JsonParserContext context);
    internal static CsdlComplexType ParseCsdlComplexType(string name, JsonElement complexObject, JsonParserContext context);
    internal static CsdlKey ParseCsdlKey(string name, JsonElement keyArray, JsonParserContext context);
    internal static CsdlProperty ParseCsdlProperty(string name, JsonElement propertyObject, JsonParserContext context);
    internal static CsdlNavigationProperty ParseCsdlNavigationProperty(string name, JsonElement navObject, JsonParserContext context);
    public static CsdlOnDelete ParseCsdlOnDelete(JsonElement element, JsonParserContext context);
    private static IList`1<CsdlReferentialConstraint> ParseCsdlReferentialConstraint(JsonElement element, JsonParserContext context);
    internal static CsdlEnumType ParseCsdlEnumType(string name, JsonElement enumObject, JsonParserContext context);
    internal static CsdlEnumMember ParseCsdlEnumMember(string name, JsonElement enumMemberObject, JsonParserContext context);
    internal static CsdlTerm ParseCsdlTermType(string name, JsonElement element, JsonParserContext context);
    internal static CsdlTypeDefinition ParseCsdlTypeDefinition(string name, JsonElement element, JsonParserContext context);
    internal static CsdlOperation ParseCsdlOperation(string name, JsonElement element, JsonParserContext context);
    internal static CsdlOperationParameter ParseCsdlParameter(JsonElement element, JsonParserContext context);
    internal static CsdlOperationReturn ParseCsdlOperationReturn(string name, JsonElement element, JsonParserContext context);
    private static CsdlElement TryParseSchemaElement(string name, JsonElement element, JsonParserContext context);
    internal static IList`1<CsdlOperation> TryParseCsdlOperationOverload(string name, JsonElement operationArray, JsonParserContext context);
    internal static void ParseCsdlAnnotation(string name, JsonElement element, JsonParserContext context, IList`1<CsdlAnnotation> annotationContainer);
    private static void ReportUnexpectedElement(JsonElement element, JsonParserContext context);
    private static void ValidateKind(JsonElement element, JsonParserContext context, string expectedKind, bool required);
    private static string GetKind(JsonElement element, JsonParserContext context);
    private static string SeperateAnnotationName(string name, String& termName);
}
public static class Microsoft.OData.Edm.Csdl.SchemaReader : object {
    public static bool TryParse(IEnumerable`1<XmlReader> readers, IEdmModel& model, IEnumerable`1& errors);
    public static bool TryParse(IEnumerable`1<XmlReader> readers, IEdmModel reference, IEdmModel& model, IEnumerable`1& errors);
    public static bool TryParse(IEnumerable`1<XmlReader> readers, IEnumerable`1<IEdmModel> references, IEdmModel& model, IEnumerable`1& errors);
    public static bool TryParse(IEnumerable`1<XmlReader> readers, IEnumerable`1<IEdmModel> references, bool includeDefaultVocabularies, IEdmModel& model, IEnumerable`1& errors);
}
[ExtensionAttribute]
public static class Microsoft.OData.Edm.Csdl.SchemaWriter : object {
    [ExtensionAttribute]
public static bool TryWriteSchema(IEdmModel model, XmlWriter writer, IEnumerable`1& errors);
    [ExtensionAttribute]
public static Task`1<ValueTuple`2<bool, IEnumerable`1<EdmError>>> TryWriteSchemaAsync(IEdmModel model, XmlWriter writer);
    [ExtensionAttribute]
public static bool TryWriteSchema(IEdmModel model, Func`2<string, XmlWriter> writerProvider, IEnumerable`1& errors);
    [ExtensionAttribute]
public static Task`1<ValueTuple`2<bool, IEnumerable`1<EdmError>>> TryWriteSchemaAsync(IEdmModel model, Func`2<string, XmlWriter> writerProvider);
    internal static bool TryWriteSchema(IEdmModel model, Func`2<string, XmlWriter> writerProvider, bool singleFileExpected, IEnumerable`1& errors);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.SchemaWriter/<TryWriteSchemaAsync>d__5")]
internal static Task`1<ValueTuple`2<bool, IEnumerable`1<EdmError>>> TryWriteSchemaAsync(IEdmModel model, Func`2<string, XmlWriter> writerProvider, bool singleFileExpected);
    internal static void WriteSchemas(IEdmModel model, IEnumerable`1<EdmSchema> schemas, Func`2<string, XmlWriter> writerProvider);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.SchemaWriter/<WriteSchemasAsync>d__7")]
internal static Task WriteSchemasAsync(IEdmModel model, IEnumerable`1<EdmSchema> schemas, Func`2<string, XmlWriter> writerProvider);
}
internal class Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaJsonWriter : EdmModelCsdlSchemaWriter {
    private Utf8JsonWriter jsonWriter;
    private CsdlJsonWriterSettings settings;
    private bool isInEnumTypeWriting;
    internal EdmModelCsdlSchemaJsonWriter(IEdmModel model, Utf8JsonWriter writer, Version edmVersion);
    internal EdmModelCsdlSchemaJsonWriter(IEdmModel model, Utf8JsonWriter writer, Version edmVersion, CsdlJsonWriterSettings settings);
    internal virtual void WriteReferenceElementHeader(IEdmReference reference);
    internal virtual Task WriteReferenceElementHeaderAsync(IEdmReference reference);
    internal virtual void WriteReferenceElementEnd(IEdmReference reference);
    internal virtual Task WriteReferenceElementEndAsync(IEdmReference reference);
    internal virtual void WritIncludeElementHeader(IEdmInclude include);
    internal virtual Task WritIncludeElementHeaderAsync(IEdmInclude include);
    internal virtual void WriteIncludeElementEnd(IEdmInclude include);
    internal virtual Task WriteIncludeElementEndAsync(IEdmInclude include);
    internal virtual void WriteTermElementHeader(IEdmTerm term, bool inlineType);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaJsonWriter/<WriteTermElementHeaderAsync>d__14")]
internal virtual Task WriteTermElementHeaderAsync(IEdmTerm term, bool inlineType);
    internal virtual void WriteEntityTypeElementHeader(IEdmEntityType entityType);
    internal virtual Task WriteEntityTypeElementHeaderAsync(IEdmEntityType entityType);
    internal virtual void WriteComplexTypeElementHeader(IEdmComplexType complexType);
    internal virtual Task WriteComplexTypeElementHeaderAsync(IEdmComplexType complexType);
    internal virtual void WriteDeclaredKeyPropertiesElementHeader();
    internal virtual Task WriteDeclaredKeyPropertiesElementHeaderAsync();
    internal virtual void WritePropertyRefElement(IEdmStructuralProperty property);
    internal virtual Task WritePropertyRefElementAsync(IEdmStructuralProperty property);
    internal virtual void WriteNavigationPropertyElementHeader(IEdmNavigationProperty property);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaJsonWriter/<WriteNavigationPropertyElementHeaderAsync>d__24")]
internal virtual Task WriteNavigationPropertyElementHeaderAsync(IEdmNavigationProperty property);
    internal virtual void WriteReferentialConstraintBegin(IEdmReferentialConstraint referentialConstraint);
    internal virtual Task WriteReferentialConstraintBeginAsync(IEdmReferentialConstraint referentialConstraint);
    internal virtual void WriteReferentialConstraintEnd(IEdmReferentialConstraint referentialConstraint);
    internal virtual Task WriteReferentialConstraintEndAsync(IEdmReferentialConstraint referentialConstraint);
    internal virtual void WriteReferentialConstraintPair(EdmReferentialConstraintPropertyPair pair);
    internal virtual Task WriteReferentialConstraintPairAsync(EdmReferentialConstraintPropertyPair pair);
    internal virtual void WriteNavigationOnDeleteActionElement(EdmOnDeleteAction operationAction);
    internal virtual Task WriteNavigationOnDeleteActionElementAsync(EdmOnDeleteAction operationAction);
    internal virtual void WriteSchemaElementHeader(EdmSchema schema, string alias, IEnumerable`1<KeyValuePair`2<string, string>> mappings);
    internal virtual Task WriteSchemaElementHeaderAsync(EdmSchema schema, string alias, IEnumerable`1<KeyValuePair`2<string, string>> mappings);
    internal virtual void WriteOutOfLineAnnotationsBegin(IEnumerable`1<KeyValuePair`2<string, List`1<IEdmVocabularyAnnotation>>> outOfLineAnnotations);
    internal virtual Task WriteOutOfLineAnnotationsBeginAsync(IEnumerable`1<KeyValuePair`2<string, List`1<IEdmVocabularyAnnotation>>> outOfLineAnnotations);
    internal virtual void WriteAnnotationsElementHeader(KeyValuePair`2<string, List`1<IEdmVocabularyAnnotation>> annotationsForTarget);
    internal virtual Task WriteAnnotationsElementHeaderAsync(KeyValuePair`2<string, List`1<IEdmVocabularyAnnotation>> annotationsForTarget);
    internal virtual void WriteOutOfLineAnnotationsEnd(IEnumerable`1<KeyValuePair`2<string, List`1<IEdmVocabularyAnnotation>>> outOfLineAnnotations);
    internal virtual Task WriteOutOfLineAnnotationsEndAsync(IEnumerable`1<KeyValuePair`2<string, List`1<IEdmVocabularyAnnotation>>> outOfLineAnnotations);
    internal virtual void WriteStructuralPropertyElementHeader(IEdmStructuralProperty property, bool inlineType);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaJsonWriter/<WriteStructuralPropertyElementHeaderAsync>d__42")]
internal virtual Task WriteStructuralPropertyElementHeaderAsync(IEdmStructuralProperty property, bool inlineType);
    internal virtual void WriteEnumTypeElementHeader(IEdmEnumType enumType);
    internal virtual Task WriteEnumTypeElementHeaderAsync(IEdmEnumType enumType);
    internal virtual void WriteEnumTypeElementEnd(IEdmEnumType enumType);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaJsonWriter/<WriteEnumTypeElementEndAsync>d__46")]
internal virtual Task WriteEnumTypeElementEndAsync(IEdmEnumType enumType);
    internal virtual void WriteEnumMemberElementHeader(IEdmEnumMember member);
    internal virtual Task WriteEnumMemberElementHeaderAsync(IEdmEnumMember member);
    internal virtual void WriteNullableAttribute(IEdmTypeReference reference);
    internal virtual Task WriteNullableAttributeAsync(IEdmTypeReference reference);
    internal virtual void WriteTypeDefinitionAttributes(IEdmTypeDefinitionReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaJsonWriter/<WriteTypeDefinitionAttributesAsync>d__52")]
internal virtual Task WriteTypeDefinitionAttributesAsync(IEdmTypeDefinitionReference reference);
    internal virtual void WriteBinaryTypeAttributes(IEdmBinaryTypeReference reference);
    internal virtual Task WriteBinaryTypeAttributesAsync(IEdmBinaryTypeReference reference);
    internal virtual void WriteDecimalTypeAttributes(IEdmDecimalTypeReference reference);
    internal virtual Task WriteDecimalTypeAttributesAsync(IEdmDecimalTypeReference reference);
    internal virtual void WriteSpatialTypeAttributes(IEdmSpatialTypeReference reference);
    internal virtual Task WriteSpatialTypeAttributesAsync(IEdmSpatialTypeReference reference);
    internal virtual void WriteStringTypeAttributes(IEdmStringTypeReference reference);
    internal virtual Task WriteStringTypeAttributesAsync(IEdmStringTypeReference reference);
    internal virtual void WriteTemporalTypeAttributes(IEdmTemporalTypeReference reference);
    internal virtual Task WriteTemporalTypeAttributesAsync(IEdmTemporalTypeReference reference);
    internal virtual void WriteAnnotationStringAttribute(IEdmDirectValueAnnotation annotation);
    internal virtual Task WriteAnnotationStringAttributeAsync(IEdmDirectValueAnnotation annotation);
    internal virtual void WriteAnnotationStringElement(IEdmDirectValueAnnotation annotation);
    internal virtual Task WriteAnnotationStringElementAsync(IEdmDirectValueAnnotation annotation);
    internal virtual void WriteSchemaOperationsHeader(KeyValuePair`2<string, IList`1<T>> operation);
    internal virtual Task WriteSchemaOperationsHeaderAsync(KeyValuePair`2<string, IList`1<T>> operation);
    internal virtual void WriteSchemaOperationsEnd(KeyValuePair`2<string, IList`1<T>> operation);
    internal virtual Task WriteSchemaOperationsEndAsync(KeyValuePair`2<string, IList`1<T>> operation);
    internal virtual void WriteActionElementHeader(IEdmAction action);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaJsonWriter/<WriteActionElementHeaderAsync>d__72")]
internal virtual Task WriteActionElementHeaderAsync(IEdmAction action);
    internal virtual void WriteFunctionElementHeader(IEdmFunction function);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaJsonWriter/<WriteFunctionElementHeaderAsync>d__74")]
internal virtual Task WriteFunctionElementHeaderAsync(IEdmFunction function);
    internal virtual void WriteOperationElementAttributes(IEdmOperation operation);
    internal virtual Task WriteOperationElementAttributesAsync(IEdmOperation operation);
    internal virtual void WriteOperationParametersBegin(IEnumerable`1<IEdmOperationParameter> parameters);
    internal virtual Task WriteOperationParametersBeginAsync(IEnumerable`1<IEdmOperationParameter> parameters);
    internal virtual void WriteOperationParametersEnd(IEnumerable`1<IEdmOperationParameter> parameters);
    internal virtual Task WriteOperationParametersEndAsync(IEnumerable`1<IEdmOperationParameter> parameters);
    internal virtual void WriteReturnTypeElementHeader(IEdmOperationReturn operationReturn);
    internal virtual Task WriteReturnTypeElementHeaderAsync(IEdmOperationReturn operationReturn);
    internal virtual void WriteTypeAttribute(IEdmTypeReference typeReference);
    internal virtual Task WriteTypeAttributeAsync(IEdmTypeReference typeReference);
    internal virtual void WriteEntityContainerElementHeader(IEdmEntityContainer container);
    internal virtual Task WriteEntityContainerElementHeaderAsync(IEdmEntityContainer container);
    internal virtual void WriteEntitySetElementHeader(IEdmEntitySet entitySet);
    internal virtual Task WriteEntitySetElementHeaderAsync(IEdmEntitySet entitySet);
    internal virtual void WriteSingletonElementHeader(IEdmSingleton singleton);
    internal virtual Task WriteSingletonElementHeaderAsync(IEdmSingleton singleton);
    internal virtual void WriteActionImportElementHeader(IEdmActionImport actionImport);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaJsonWriter/<WriteActionImportElementHeaderAsync>d__92")]
internal virtual Task WriteActionImportElementHeaderAsync(IEdmActionImport actionImport);
    internal virtual void WriteFunctionImportElementHeader(IEdmFunctionImport functionImport);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaJsonWriter/<WriteFunctionImportElementHeaderAsync>d__94")]
internal virtual Task WriteFunctionImportElementHeaderAsync(IEdmFunctionImport functionImport);
    internal virtual void WriteOperationParameterElementHeader(IEdmOperationParameter parameter, bool inlineType);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaJsonWriter/<WriteOperationParameterElementHeaderAsync>d__96")]
internal virtual Task WriteOperationParameterElementHeaderAsync(IEdmOperationParameter parameter, bool inlineType);
    internal void WriteTypeReference(IEdmTypeReference type, string defaultTypeName);
    internal Task WriteTypeReferenceAsync(IEdmTypeReference type, string defaultTypeName);
    internal virtual void WriteOperationParameterEndElement(IEdmOperationParameter parameter);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaJsonWriter/<WriteOperationParameterEndElementAsync>d__100")]
internal virtual Task WriteOperationParameterEndElementAsync(IEdmOperationParameter parameter);
    internal virtual void WriteCollectionTypeElementHeader(IEdmCollectionType collectionType, bool inlineType);
    internal virtual Task WriteCollectionTypeElementHeaderAsync(IEdmCollectionType collectionType, bool inlineType);
    internal virtual void WriteInlineExpression(IEdmExpression expression);
    internal virtual Task WriteInlineExpressionAsync(IEdmExpression expression);
    internal virtual void WriteVocabularyAnnotationElementHeader(IEdmVocabularyAnnotation annotation, bool isInline);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaJsonWriter/<WriteVocabularyAnnotationElementHeaderAsync>d__106")]
internal virtual Task WriteVocabularyAnnotationElementHeaderAsync(IEdmVocabularyAnnotation annotation, bool isInline);
    internal virtual void WriteVocabularyAnnotationElementEnd(IEdmVocabularyAnnotation annotation, bool isInline);
    internal virtual Task WriteVocabularyAnnotationElementEndAsync(IEdmVocabularyAnnotation annotation, bool isInline);
    internal virtual void WritePropertyValueElementHeader(IEdmPropertyConstructor value, bool isInline);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaJsonWriter/<WritePropertyValueElementHeaderAsync>d__110")]
internal virtual Task WritePropertyValueElementHeaderAsync(IEdmPropertyConstructor value, bool isInline);
    internal virtual void WriteRecordExpressionElementHeader(IEdmRecordExpression expression);
    internal virtual Task WriteRecordExpressionElementHeaderAsync(IEdmRecordExpression expression);
    internal virtual void WritePropertyConstructorElementHeader(IEdmPropertyConstructor constructor, bool isInline);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaJsonWriter/<WritePropertyConstructorElementHeaderAsync>d__114")]
internal virtual Task WritePropertyConstructorElementHeaderAsync(IEdmPropertyConstructor constructor, bool isInline);
    internal virtual void WritePropertyConstructorElementEnd(IEdmPropertyConstructor constructor);
    internal virtual Task WritePropertyConstructorElementEndAsync(IEdmPropertyConstructor constructor);
    internal virtual void WriteStringConstantExpressionElement(IEdmStringConstantExpression expression);
    internal virtual Task WriteStringConstantExpressionElementAsync(IEdmStringConstantExpression expression);
    internal virtual void WriteBinaryConstantExpressionElement(IEdmBinaryConstantExpression expression);
    internal virtual Task WriteBinaryConstantExpressionElementAsync(IEdmBinaryConstantExpression expression);
    internal virtual void WriteBooleanConstantExpressionElement(IEdmBooleanConstantExpression expression);
    internal virtual Task WriteBooleanConstantExpressionElementAsync(IEdmBooleanConstantExpression expression);
    internal virtual void WriteNullConstantExpressionElement(IEdmNullExpression expression);
    internal virtual Task WriteNullConstantExpressionElementAsync(IEdmNullExpression expression);
    internal virtual void WriteDateConstantExpressionElement(IEdmDateConstantExpression expression);
    internal virtual Task WriteDateConstantExpressionElementAsync(IEdmDateConstantExpression expression);
    internal virtual void WriteDateTimeOffsetConstantExpressionElement(IEdmDateTimeOffsetConstantExpression expression);
    internal virtual Task WriteDateTimeOffsetConstantExpressionElementAsync(IEdmDateTimeOffsetConstantExpression expression);
    internal virtual void WriteDurationConstantExpressionElement(IEdmDurationConstantExpression expression);
    internal virtual Task WriteDurationConstantExpressionElementAsync(IEdmDurationConstantExpression expression);
    internal virtual void WriteDecimalConstantExpressionElement(IEdmDecimalConstantExpression expression);
    internal virtual Task WriteDecimalConstantExpressionElementAsync(IEdmDecimalConstantExpression expression);
    internal virtual void WriteFloatingConstantExpressionElement(IEdmFloatingConstantExpression expression);
    internal virtual Task WriteFloatingConstantExpressionElementAsync(IEdmFloatingConstantExpression expression);
    internal virtual void WriteFunctionApplicationElementHeader(IEdmApplyExpression expression);
    internal virtual Task WriteFunctionApplicationElementHeaderAsync(IEdmApplyExpression expression);
    internal virtual void WriteFunctionApplicationElementEnd(IEdmApplyExpression expression);
    internal virtual Task WriteFunctionApplicationElementEndAsync(IEdmApplyExpression expression);
    internal virtual void WriteGuidConstantExpressionElement(IEdmGuidConstantExpression expression);
    internal virtual Task WriteGuidConstantExpressionElementAsync(IEdmGuidConstantExpression expression);
    internal virtual void WriteIntegerConstantExpressionElement(IEdmIntegerConstantExpression expression);
    internal virtual Task WriteIntegerConstantExpressionElementAsync(IEdmIntegerConstantExpression expression);
    internal virtual void WritePathExpressionElement(IEdmPathExpression expression);
    internal virtual Task WritePathExpressionElementAsync(IEdmPathExpression expression);
    internal virtual void WritePropertyPathExpressionElement(IEdmPathExpression expression);
    internal virtual Task WritePropertyPathExpressionElementAsync(IEdmPathExpression expression);
    internal virtual void WriteNavigationPropertyPathExpressionElement(IEdmPathExpression expression);
    internal virtual Task WriteNavigationPropertyPathExpressionElementAsync(IEdmPathExpression expression);
    internal virtual void WriteAnnotationPathExpressionElement(IEdmPathExpression expression);
    internal virtual Task WriteAnnotationPathExpressionElementAsync(IEdmPathExpression expression);
    internal virtual void WriteIfExpressionElementHeader(IEdmIfExpression expression);
    internal virtual Task WriteIfExpressionElementHeaderAsync(IEdmIfExpression expression);
    internal virtual void WriteIfExpressionElementEnd(IEdmIfExpression expression);
    internal virtual Task WriteIfExpressionElementEndAsync(IEdmIfExpression expression);
    internal virtual void WriteCollectionExpressionElementHeader(IEdmCollectionExpression expression);
    internal virtual Task WriteCollectionExpressionElementHeaderAsync(IEdmCollectionExpression expression);
    internal virtual void WriteCollectionExpressionElementEnd(IEdmCollectionExpression expression);
    internal virtual Task WriteCollectionExpressionElementEndAsync(IEdmCollectionExpression expression);
    internal virtual void WriteLabeledElementHeader(IEdmLabeledExpression labeledElement);
    internal virtual Task WriteLabeledElementHeaderAsync(IEdmLabeledExpression labeledElement);
    internal virtual void WriteLabeledExpressionReferenceExpression(IEdmLabeledExpressionReferenceExpression labeledExpressionReference);
    internal virtual Task WriteLabeledExpressionReferenceExpressionAsync(IEdmLabeledExpressionReferenceExpression labeledExpressionReference);
    internal virtual void WriteTimeOfDayConstantExpressionElement(IEdmTimeOfDayConstantExpression expression);
    internal virtual Task WriteTimeOfDayConstantExpressionElementAsync(IEdmTimeOfDayConstantExpression expression);
    internal virtual void WriteIsOfExpressionElementHeader(IEdmIsOfExpression expression, bool inlineType);
    internal virtual Task WriteIsOfExpressionElementHeaderAsync(IEdmIsOfExpression expression, bool inlineType);
    internal virtual void WriteIsOfExpressionType(IEdmIsOfExpression expression, bool inlineType);
    internal virtual Task WriteIsOfExpressionTypeAsync(IEdmIsOfExpression expression, bool inlineType);
    internal virtual void WriteCastExpressionElementHeader(IEdmCastExpression expression, bool inlineType);
    internal virtual Task WriteCastExpressionElementHeaderAsync(IEdmCastExpression expression, bool inlineType);
    internal virtual void WriteCastExpressionElementEnd(IEdmCastExpression expression, bool inlineType);
    internal virtual Task WriteCastExpressionElementEndAsync(IEdmCastExpression expression, bool inlineType);
    internal virtual void WriteCastExpressionType(IEdmCastExpression expression, bool inlineType);
    internal virtual Task WriteCastExpressionTypeAsync(IEdmCastExpression expression, bool inlineType);
    internal virtual void WriteEnumMemberExpressionElement(IEdmEnumMemberExpression expression);
    internal virtual Task WriteEnumMemberExpressionElementAsync(IEdmEnumMemberExpression expression);
    internal virtual void WriteTypeDefinitionElementHeader(IEdmTypeDefinition typeDefinition);
    internal virtual Task WriteTypeDefinitionElementHeaderAsync(IEdmTypeDefinition typeDefinition);
    internal virtual void WriteNavigationPropertyBindingsBegin(IEnumerable`1<IEdmNavigationPropertyBinding> bindings);
    internal virtual Task WriteNavigationPropertyBindingsBeginAsync(IEnumerable`1<IEdmNavigationPropertyBinding> bindings);
    internal virtual void WriteNavigationPropertyBindingsEnd(IEnumerable`1<IEdmNavigationPropertyBinding> bindings);
    internal virtual Task WriteNavigationPropertyBindingsEndAsync(IEnumerable`1<IEdmNavigationPropertyBinding> bindings);
    internal virtual void WriteNavigationPropertyBinding(IEdmNavigationPropertyBinding binding);
    internal virtual Task WriteNavigationPropertyBindingAsync(IEdmNavigationPropertyBinding binding);
    internal virtual void WriteEndElement();
    internal virtual Task WriteEndElementAsync();
    internal virtual void WriteArrayEndElement();
    internal virtual Task WriteArrayEndElementAsync();
    internal virtual void WriteOperationImportAttributes(IEdmOperationImport operationImport, string operationAttributeName);
    internal virtual Task WriteOperationImportAttributesAsync(IEdmOperationImport operationImport, string operationAttributeName);
    private static string BinaryToString(IEdmBinaryConstantExpression binary);
    private string SerializationName(IEdmSchemaElement element);
    private string TypeDefinitionAsJson(IEdmSchemaType type);
    private string AnnotationToString(IEdmVocabularyAnnotation annotation);
    protected static string EnumMemberExpressionAsJson(IEnumerable`1<IEdmEnumMember> members);
}
internal abstract class Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaWriter : object {
    [CompilerGeneratedAttribute]
private IEdmModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <EdmVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private VersioningDictionary`2<string, string> <NamespaceAliasMappings>k__BackingField;
    public IEdmModel Model { get; }
    public Version EdmVersion { get; }
    public VersioningDictionary`2<string, string> NamespaceAliasMappings { get; }
    internal EdmModelCsdlSchemaWriter(IEdmModel model, Version edmVersion);
    [CompilerGeneratedAttribute]
public IEdmModel get_Model();
    [CompilerGeneratedAttribute]
public Version get_EdmVersion();
    [CompilerGeneratedAttribute]
public VersioningDictionary`2<string, string> get_NamespaceAliasMappings();
    internal abstract virtual void WriteReferenceElementHeader(IEdmReference reference);
    internal abstract virtual Task WriteReferenceElementHeaderAsync(IEdmReference reference);
    internal abstract virtual void WriteReferenceElementEnd(IEdmReference reference);
    internal abstract virtual Task WriteReferenceElementEndAsync(IEdmReference reference);
    internal abstract virtual void WritIncludeElementHeader(IEdmInclude include);
    internal abstract virtual Task WritIncludeElementHeaderAsync(IEdmInclude include);
    internal abstract virtual void WriteIncludeElementEnd(IEdmInclude include);
    internal abstract virtual Task WriteIncludeElementEndAsync(IEdmInclude include);
    internal abstract virtual void WriteTermElementHeader(IEdmTerm term, bool inlineType);
    internal abstract virtual Task WriteTermElementHeaderAsync(IEdmTerm term, bool inlineType);
    internal abstract virtual void WriteComplexTypeElementHeader(IEdmComplexType complexType);
    internal abstract virtual Task WriteComplexTypeElementHeaderAsync(IEdmComplexType complexType);
    internal abstract virtual void WriteEntityTypeElementHeader(IEdmEntityType entityType);
    internal abstract virtual Task WriteEntityTypeElementHeaderAsync(IEdmEntityType entityType);
    internal abstract virtual void WriteEnumTypeElementHeader(IEdmEnumType enumType);
    internal abstract virtual Task WriteEnumTypeElementHeaderAsync(IEdmEnumType enumType);
    internal abstract virtual void WriteEnumTypeElementEnd(IEdmEnumType enumType);
    internal abstract virtual Task WriteEnumTypeElementEndAsync(IEdmEnumType enumType);
    internal abstract virtual void WriteEntityContainerElementHeader(IEdmEntityContainer container);
    internal abstract virtual Task WriteEntityContainerElementHeaderAsync(IEdmEntityContainer container);
    internal abstract virtual void WriteEntitySetElementHeader(IEdmEntitySet entitySet);
    internal abstract virtual Task WriteEntitySetElementHeaderAsync(IEdmEntitySet entitySet);
    internal abstract virtual void WriteSingletonElementHeader(IEdmSingleton singleton);
    internal abstract virtual Task WriteSingletonElementHeaderAsync(IEdmSingleton singleton);
    internal abstract virtual void WriteDeclaredKeyPropertiesElementHeader();
    internal abstract virtual Task WriteDeclaredKeyPropertiesElementHeaderAsync();
    internal abstract virtual void WritePropertyRefElement(IEdmStructuralProperty property);
    internal abstract virtual Task WritePropertyRefElementAsync(IEdmStructuralProperty property);
    internal abstract virtual void WriteNavigationPropertyElementHeader(IEdmNavigationProperty property);
    internal abstract virtual Task WriteNavigationPropertyElementHeaderAsync(IEdmNavigationProperty property);
    internal abstract virtual void WriteNavigationOnDeleteActionElement(EdmOnDeleteAction operationAction);
    internal abstract virtual Task WriteNavigationOnDeleteActionElementAsync(EdmOnDeleteAction operationAction);
    internal abstract virtual void WriteSchemaElementHeader(EdmSchema schema, string alias, IEnumerable`1<KeyValuePair`2<string, string>> mappings);
    internal abstract virtual Task WriteSchemaElementHeaderAsync(EdmSchema schema, string alias, IEnumerable`1<KeyValuePair`2<string, string>> mappings);
    internal abstract virtual void WriteAnnotationsElementHeader(KeyValuePair`2<string, List`1<IEdmVocabularyAnnotation>> annotationsForTarget);
    internal abstract virtual Task WriteAnnotationsElementHeaderAsync(KeyValuePair`2<string, List`1<IEdmVocabularyAnnotation>> annotationsForTarget);
    internal virtual void WriteOutOfLineAnnotationsBegin(IEnumerable`1<KeyValuePair`2<string, List`1<IEdmVocabularyAnnotation>>> outOfLineAnnotations);
    internal virtual Task WriteOutOfLineAnnotationsBeginAsync(IEnumerable`1<KeyValuePair`2<string, List`1<IEdmVocabularyAnnotation>>> outOfLineAnnotations);
    internal virtual void WriteOutOfLineAnnotationsEnd(IEnumerable`1<KeyValuePair`2<string, List`1<IEdmVocabularyAnnotation>>> outOfLineAnnotations);
    internal virtual Task WriteOutOfLineAnnotationsEndAsync(IEnumerable`1<KeyValuePair`2<string, List`1<IEdmVocabularyAnnotation>>> outOfLineAnnotations);
    internal abstract virtual void WriteStructuralPropertyElementHeader(IEdmStructuralProperty property, bool inlineType);
    internal abstract virtual Task WriteStructuralPropertyElementHeaderAsync(IEdmStructuralProperty property, bool inlineType);
    internal abstract virtual void WriteEnumMemberElementHeader(IEdmEnumMember member);
    internal abstract virtual Task WriteEnumMemberElementHeaderAsync(IEdmEnumMember member);
    internal virtual void WriteEnumMemberElementEnd(IEdmEnumMember member);
    internal virtual Task WriteEnumMemberElementEndAsync(IEdmEnumMember member);
    internal abstract virtual void WriteNavigationPropertyBinding(IEdmNavigationPropertyBinding binding);
    internal abstract virtual Task WriteNavigationPropertyBindingAsync(IEdmNavigationPropertyBinding binding);
    internal virtual void WriteNavigationPropertyBindingsBegin(IEnumerable`1<IEdmNavigationPropertyBinding> bindings);
    internal virtual Task WriteNavigationPropertyBindingsBeginAsync(IEnumerable`1<IEdmNavigationPropertyBinding> bindings);
    internal virtual void WriteNavigationPropertyBindingsEnd(IEnumerable`1<IEdmNavigationPropertyBinding> bindings);
    internal virtual Task WriteNavigationPropertyBindingsEndAsync(IEnumerable`1<IEdmNavigationPropertyBinding> bindings);
    internal abstract virtual void WriteNullableAttribute(IEdmTypeReference reference);
    internal abstract virtual Task WriteNullableAttributeAsync(IEdmTypeReference reference);
    internal abstract virtual void WriteTypeDefinitionAttributes(IEdmTypeDefinitionReference reference);
    internal abstract virtual Task WriteTypeDefinitionAttributesAsync(IEdmTypeDefinitionReference reference);
    internal abstract virtual void WriteBinaryTypeAttributes(IEdmBinaryTypeReference reference);
    internal abstract virtual Task WriteBinaryTypeAttributesAsync(IEdmBinaryTypeReference reference);
    internal abstract virtual void WriteDecimalTypeAttributes(IEdmDecimalTypeReference reference);
    internal abstract virtual Task WriteDecimalTypeAttributesAsync(IEdmDecimalTypeReference reference);
    internal abstract virtual void WriteSpatialTypeAttributes(IEdmSpatialTypeReference reference);
    internal abstract virtual Task WriteSpatialTypeAttributesAsync(IEdmSpatialTypeReference reference);
    internal abstract virtual void WriteStringTypeAttributes(IEdmStringTypeReference reference);
    internal abstract virtual Task WriteStringTypeAttributesAsync(IEdmStringTypeReference reference);
    internal abstract virtual void WriteTemporalTypeAttributes(IEdmTemporalTypeReference reference);
    internal abstract virtual Task WriteTemporalTypeAttributesAsync(IEdmTemporalTypeReference reference);
    internal virtual void WriteReferentialConstraintBegin(IEdmReferentialConstraint referentialConstraint);
    internal virtual Task WriteReferentialConstraintBeginAsync(IEdmReferentialConstraint referentialConstraint);
    internal virtual void WriteReferentialConstraintEnd(IEdmReferentialConstraint referentialConstraint);
    internal virtual Task WriteReferentialConstraintEndAsync(IEdmReferentialConstraint referentialConstraint);
    internal abstract virtual void WriteReferentialConstraintPair(EdmReferentialConstraintPropertyPair pair);
    internal abstract virtual Task WriteReferentialConstraintPairAsync(EdmReferentialConstraintPropertyPair pair);
    internal abstract virtual void WriteAnnotationStringAttribute(IEdmDirectValueAnnotation annotation);
    internal abstract virtual Task WriteAnnotationStringAttributeAsync(IEdmDirectValueAnnotation annotation);
    internal abstract virtual void WriteAnnotationStringElement(IEdmDirectValueAnnotation annotation);
    internal abstract virtual Task WriteAnnotationStringElementAsync(IEdmDirectValueAnnotation annotation);
    internal abstract virtual void WriteActionElementHeader(IEdmAction action);
    internal abstract virtual Task WriteActionElementHeaderAsync(IEdmAction action);
    internal abstract virtual void WriteFunctionElementHeader(IEdmFunction function);
    internal abstract virtual Task WriteFunctionElementHeaderAsync(IEdmFunction function);
    internal abstract virtual void WriteReturnTypeElementHeader(IEdmOperationReturn operationReturn);
    internal abstract virtual Task WriteReturnTypeElementHeaderAsync(IEdmOperationReturn operationReturn);
    internal abstract virtual void WriteTypeAttribute(IEdmTypeReference typeReference);
    internal abstract virtual Task WriteTypeAttributeAsync(IEdmTypeReference typeReference);
    internal abstract virtual void WriteActionImportElementHeader(IEdmActionImport actionImport);
    internal abstract virtual Task WriteActionImportElementHeaderAsync(IEdmActionImport actionImport);
    internal abstract virtual void WriteFunctionImportElementHeader(IEdmFunctionImport functionImport);
    internal abstract virtual Task WriteFunctionImportElementHeaderAsync(IEdmFunctionImport functionImport);
    internal abstract virtual void WriteOperationParameterElementHeader(IEdmOperationParameter parameter, bool inlineType);
    internal abstract virtual Task WriteOperationParameterElementHeaderAsync(IEdmOperationParameter parameter, bool inlineType);
    internal abstract virtual void WriteOperationParameterEndElement(IEdmOperationParameter parameter);
    internal abstract virtual Task WriteOperationParameterEndElementAsync(IEdmOperationParameter parameter);
    internal abstract virtual void WriteCollectionTypeElementHeader(IEdmCollectionType collectionType, bool inlineType);
    internal abstract virtual Task WriteCollectionTypeElementHeaderAsync(IEdmCollectionType collectionType, bool inlineType);
    internal abstract virtual void WriteInlineExpression(IEdmExpression expression);
    internal abstract virtual Task WriteInlineExpressionAsync(IEdmExpression expression);
    internal abstract virtual void WriteVocabularyAnnotationElementHeader(IEdmVocabularyAnnotation annotation, bool isInline);
    internal abstract virtual Task WriteVocabularyAnnotationElementHeaderAsync(IEdmVocabularyAnnotation annotation, bool isInline);
    internal abstract virtual void WriteVocabularyAnnotationElementEnd(IEdmVocabularyAnnotation annotation, bool isInline);
    internal abstract virtual Task WriteVocabularyAnnotationElementEndAsync(IEdmVocabularyAnnotation annotation, bool isInline);
    internal abstract virtual void WritePropertyValueElementHeader(IEdmPropertyConstructor value, bool isInline);
    internal abstract virtual Task WritePropertyValueElementHeaderAsync(IEdmPropertyConstructor value, bool isInline);
    internal abstract virtual void WriteRecordExpressionElementHeader(IEdmRecordExpression expression);
    internal abstract virtual Task WriteRecordExpressionElementHeaderAsync(IEdmRecordExpression expression);
    internal abstract virtual void WritePropertyConstructorElementHeader(IEdmPropertyConstructor constructor, bool isInline);
    internal abstract virtual Task WritePropertyConstructorElementHeaderAsync(IEdmPropertyConstructor constructor, bool isInline);
    internal abstract virtual void WritePropertyConstructorElementEnd(IEdmPropertyConstructor constructor);
    internal abstract virtual Task WritePropertyConstructorElementEndAsync(IEdmPropertyConstructor constructor);
    internal abstract virtual void WriteStringConstantExpressionElement(IEdmStringConstantExpression expression);
    internal abstract virtual Task WriteStringConstantExpressionElementAsync(IEdmStringConstantExpression expression);
    internal abstract virtual void WriteBinaryConstantExpressionElement(IEdmBinaryConstantExpression expression);
    internal abstract virtual Task WriteBinaryConstantExpressionElementAsync(IEdmBinaryConstantExpression expression);
    internal abstract virtual void WriteBooleanConstantExpressionElement(IEdmBooleanConstantExpression expression);
    internal abstract virtual Task WriteBooleanConstantExpressionElementAsync(IEdmBooleanConstantExpression expression);
    internal abstract virtual void WriteNullConstantExpressionElement(IEdmNullExpression expression);
    internal abstract virtual Task WriteNullConstantExpressionElementAsync(IEdmNullExpression expression);
    internal abstract virtual void WriteDateConstantExpressionElement(IEdmDateConstantExpression expression);
    internal abstract virtual Task WriteDateConstantExpressionElementAsync(IEdmDateConstantExpression expression);
    internal virtual void WriteSchemaOperationsHeader(KeyValuePair`2<string, IList`1<T>> operations);
    internal virtual Task WriteSchemaOperationsHeaderAsync(KeyValuePair`2<string, IList`1<T>> operations);
    internal virtual void WriteSchemaOperationsEnd(KeyValuePair`2<string, IList`1<T>> operation);
    internal virtual Task WriteSchemaOperationsEndAsync(KeyValuePair`2<string, IList`1<T>> operation);
    internal virtual void WriteOperationParametersBegin(IEnumerable`1<IEdmOperationParameter> parameters);
    internal virtual Task WriteOperationParametersBeginAsync(IEnumerable`1<IEdmOperationParameter> parameters);
    internal virtual void WriteOperationParametersEnd(IEnumerable`1<IEdmOperationParameter> parameters);
    internal virtual Task WriteOperationParametersEndAsync(IEnumerable`1<IEdmOperationParameter> parameters);
    internal abstract virtual void WriteDateTimeOffsetConstantExpressionElement(IEdmDateTimeOffsetConstantExpression expression);
    internal abstract virtual Task WriteDateTimeOffsetConstantExpressionElementAsync(IEdmDateTimeOffsetConstantExpression expression);
    internal abstract virtual void WriteDurationConstantExpressionElement(IEdmDurationConstantExpression expression);
    internal abstract virtual Task WriteDurationConstantExpressionElementAsync(IEdmDurationConstantExpression expression);
    internal abstract virtual void WriteDecimalConstantExpressionElement(IEdmDecimalConstantExpression expression);
    internal abstract virtual Task WriteDecimalConstantExpressionElementAsync(IEdmDecimalConstantExpression expression);
    internal abstract virtual void WriteFloatingConstantExpressionElement(IEdmFloatingConstantExpression expression);
    internal abstract virtual Task WriteFloatingConstantExpressionElementAsync(IEdmFloatingConstantExpression expression);
    internal abstract virtual void WriteFunctionApplicationElementHeader(IEdmApplyExpression expression);
    internal abstract virtual Task WriteFunctionApplicationElementHeaderAsync(IEdmApplyExpression expression);
    internal abstract virtual void WriteFunctionApplicationElementEnd(IEdmApplyExpression expression);
    internal abstract virtual Task WriteFunctionApplicationElementEndAsync(IEdmApplyExpression expression);
    internal abstract virtual void WriteGuidConstantExpressionElement(IEdmGuidConstantExpression expression);
    internal abstract virtual Task WriteGuidConstantExpressionElementAsync(IEdmGuidConstantExpression expression);
    internal abstract virtual void WriteIntegerConstantExpressionElement(IEdmIntegerConstantExpression expression);
    internal abstract virtual Task WriteIntegerConstantExpressionElementAsync(IEdmIntegerConstantExpression expression);
    internal abstract virtual void WritePathExpressionElement(IEdmPathExpression expression);
    internal abstract virtual Task WritePathExpressionElementAsync(IEdmPathExpression expression);
    internal abstract virtual void WriteAnnotationPathExpressionElement(IEdmPathExpression expression);
    internal abstract virtual Task WriteAnnotationPathExpressionElementAsync(IEdmPathExpression expression);
    internal abstract virtual void WritePropertyPathExpressionElement(IEdmPathExpression expression);
    internal abstract virtual Task WritePropertyPathExpressionElementAsync(IEdmPathExpression expression);
    internal abstract virtual void WriteNavigationPropertyPathExpressionElement(IEdmPathExpression expression);
    internal abstract virtual Task WriteNavigationPropertyPathExpressionElementAsync(IEdmPathExpression expression);
    internal abstract virtual void WriteIfExpressionElementHeader(IEdmIfExpression expression);
    internal abstract virtual Task WriteIfExpressionElementHeaderAsync(IEdmIfExpression expression);
    internal abstract virtual void WriteIfExpressionElementEnd(IEdmIfExpression expression);
    internal abstract virtual Task WriteIfExpressionElementEndAsync(IEdmIfExpression expression);
    internal abstract virtual void WriteCollectionExpressionElementHeader(IEdmCollectionExpression expression);
    internal abstract virtual Task WriteCollectionExpressionElementHeaderAsync(IEdmCollectionExpression expression);
    internal abstract virtual void WriteCollectionExpressionElementEnd(IEdmCollectionExpression expression);
    internal abstract virtual Task WriteCollectionExpressionElementEndAsync(IEdmCollectionExpression expression);
    internal abstract virtual void WriteLabeledElementHeader(IEdmLabeledExpression labeledElement);
    internal abstract virtual Task WriteLabeledElementHeaderAsync(IEdmLabeledExpression labeledElement);
    internal abstract virtual void WriteLabeledExpressionReferenceExpression(IEdmLabeledExpressionReferenceExpression labeledExpressionReference);
    internal abstract virtual Task WriteLabeledExpressionReferenceExpressionAsync(IEdmLabeledExpressionReferenceExpression labeledExpressionReference);
    internal abstract virtual void WriteTimeOfDayConstantExpressionElement(IEdmTimeOfDayConstantExpression expression);
    internal abstract virtual Task WriteTimeOfDayConstantExpressionElementAsync(IEdmTimeOfDayConstantExpression expression);
    internal abstract virtual void WriteIsOfExpressionElementHeader(IEdmIsOfExpression expression, bool inlineType);
    internal abstract virtual Task WriteIsOfExpressionElementHeaderAsync(IEdmIsOfExpression expression, bool inlineType);
    internal virtual void WriteIsOfExpressionType(IEdmIsOfExpression expression, bool inlineType);
    internal virtual Task WriteIsOfExpressionTypeAsync(IEdmIsOfExpression expression, bool inlineType);
    internal abstract virtual void WriteCastExpressionElementHeader(IEdmCastExpression expression, bool inlineType);
    internal abstract virtual Task WriteCastExpressionElementHeaderAsync(IEdmCastExpression expression, bool inlineType);
    internal abstract virtual void WriteCastExpressionElementEnd(IEdmCastExpression expression, bool inlineType);
    internal abstract virtual Task WriteCastExpressionElementEndAsync(IEdmCastExpression expression, bool inlineType);
    internal virtual void WriteCastExpressionType(IEdmCastExpression expression, bool inlineType);
    internal virtual Task WriteCastExpressionTypeAsync(IEdmCastExpression expression, bool inlineType);
    internal abstract virtual void WriteEnumMemberExpressionElement(IEdmEnumMemberExpression expression);
    internal abstract virtual Task WriteEnumMemberExpressionElementAsync(IEdmEnumMemberExpression expression);
    internal abstract virtual void WriteTypeDefinitionElementHeader(IEdmTypeDefinition typeDefinition);
    internal abstract virtual Task WriteTypeDefinitionElementHeaderAsync(IEdmTypeDefinition typeDefinition);
    internal abstract virtual void WriteEndElement();
    internal abstract virtual Task WriteEndElementAsync();
    internal abstract virtual void WriteArrayEndElement();
    internal abstract virtual Task WriteArrayEndElementAsync();
    internal abstract virtual void WriteOperationElementAttributes(IEdmOperation operation);
    internal abstract virtual Task WriteOperationElementAttributesAsync(IEdmOperation operation);
    internal abstract virtual void WriteOperationImportAttributes(IEdmOperationImport operationImport, string operationAttributeName);
    internal abstract virtual Task WriteOperationImportAttributesAsync(IEdmOperationImport operationImport, string operationAttributeName);
    internal static string PathAsXml(IEnumerable`1<string> path);
    protected static string EnumMemberAsXmlOrJson(IEnumerable`1<IEdmEnumMember> members);
}
internal class Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter : EdmModelCsdlSchemaWriter {
    protected XmlWriter xmlWriter;
    protected string edmxNamespace;
    private CsdlXmlWriterSettings writerSettings;
    internal EdmModelCsdlSchemaXmlWriter(IEdmModel model, XmlWriter xmlWriter, Version edmVersion, CsdlXmlWriterSettings csdlXmlWriterSettings);
    internal virtual void WriteReferenceElementHeader(IEdmReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteReferenceElementHeaderAsync>d__5")]
internal virtual Task WriteReferenceElementHeaderAsync(IEdmReference reference);
    internal virtual void WriteReferenceElementEnd(IEdmReference reference);
    internal virtual Task WriteReferenceElementEndAsync(IEdmReference reference);
    internal virtual void WritIncludeElementHeader(IEdmInclude include);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WritIncludeElementHeaderAsync>d__9")]
internal virtual Task WritIncludeElementHeaderAsync(IEdmInclude include);
    internal virtual void WriteIncludeElementEnd(IEdmInclude include);
    internal virtual Task WriteIncludeElementEndAsync(IEdmInclude include);
    internal void WriteIncludeAnnotationsElement(IEdmIncludeAnnotations includeAnnotations);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteIncludeAnnotationsElementAsync>d__13")]
internal Task WriteIncludeAnnotationsElementAsync(IEdmIncludeAnnotations includeAnnotations);
    internal virtual void WriteTermElementHeader(IEdmTerm term, bool inlineType);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteTermElementHeaderAsync>d__15")]
internal virtual Task WriteTermElementHeaderAsync(IEdmTerm term, bool inlineType);
    internal virtual void WriteComplexTypeElementHeader(IEdmComplexType complexType);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteComplexTypeElementHeaderAsync>d__17")]
internal virtual Task WriteComplexTypeElementHeaderAsync(IEdmComplexType complexType);
    internal virtual void WriteEnumTypeElementHeader(IEdmEnumType enumType);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteEnumTypeElementHeaderAsync>d__19")]
internal virtual Task WriteEnumTypeElementHeaderAsync(IEdmEnumType enumType);
    internal virtual void WriteEnumTypeElementEnd(IEdmEnumType enumType);
    internal virtual Task WriteEnumTypeElementEndAsync(IEdmEnumType enumType);
    internal virtual void WriteEntityContainerElementHeader(IEdmEntityContainer container);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteEntityContainerElementHeaderAsync>d__23")]
internal virtual Task WriteEntityContainerElementHeaderAsync(IEdmEntityContainer container);
    internal virtual void WriteEntitySetElementHeader(IEdmEntitySet entitySet);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteEntitySetElementHeaderAsync>d__25")]
internal virtual Task WriteEntitySetElementHeaderAsync(IEdmEntitySet entitySet);
    internal virtual void WriteSingletonElementHeader(IEdmSingleton singleton);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteSingletonElementHeaderAsync>d__27")]
internal virtual Task WriteSingletonElementHeaderAsync(IEdmSingleton singleton);
    internal virtual void WriteEntityTypeElementHeader(IEdmEntityType entityType);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteEntityTypeElementHeaderAsync>d__29")]
internal virtual Task WriteEntityTypeElementHeaderAsync(IEdmEntityType entityType);
    internal virtual void WriteDeclaredKeyPropertiesElementHeader();
    internal virtual Task WriteDeclaredKeyPropertiesElementHeaderAsync();
    internal virtual void WritePropertyRefElement(IEdmStructuralProperty property);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WritePropertyRefElementAsync>d__33")]
internal virtual Task WritePropertyRefElementAsync(IEdmStructuralProperty property);
    internal virtual void WriteNavigationPropertyElementHeader(IEdmNavigationProperty property);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteNavigationPropertyElementHeaderAsync>d__35")]
internal virtual Task WriteNavigationPropertyElementHeaderAsync(IEdmNavigationProperty property);
    internal virtual void WriteNavigationOnDeleteActionElement(EdmOnDeleteAction operationAction);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteNavigationOnDeleteActionElementAsync>d__37")]
internal virtual Task WriteNavigationOnDeleteActionElementAsync(EdmOnDeleteAction operationAction);
    internal virtual void WriteSchemaElementHeader(EdmSchema schema, string alias, IEnumerable`1<KeyValuePair`2<string, string>> mappings);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteSchemaElementHeaderAsync>d__39")]
internal virtual Task WriteSchemaElementHeaderAsync(EdmSchema schema, string alias, IEnumerable`1<KeyValuePair`2<string, string>> mappings);
    internal virtual void WriteAnnotationsElementHeader(KeyValuePair`2<string, List`1<IEdmVocabularyAnnotation>> annotationsForTarget);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteAnnotationsElementHeaderAsync>d__41")]
internal virtual Task WriteAnnotationsElementHeaderAsync(KeyValuePair`2<string, List`1<IEdmVocabularyAnnotation>> annotationsForTarget);
    internal virtual void WriteStructuralPropertyElementHeader(IEdmStructuralProperty property, bool inlineType);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteStructuralPropertyElementHeaderAsync>d__43")]
internal virtual Task WriteStructuralPropertyElementHeaderAsync(IEdmStructuralProperty property, bool inlineType);
    internal virtual void WriteEnumMemberElementHeader(IEdmEnumMember member);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteEnumMemberElementHeaderAsync>d__45")]
internal virtual Task WriteEnumMemberElementHeaderAsync(IEdmEnumMember member);
    internal virtual void WriteEnumMemberElementEnd(IEdmEnumMember member);
    internal virtual Task WriteEnumMemberElementEndAsync(IEdmEnumMember member);
    internal virtual void WriteNullableAttribute(IEdmTypeReference reference);
    internal virtual Task WriteNullableAttributeAsync(IEdmTypeReference reference);
    internal virtual void WriteTypeDefinitionAttributes(IEdmTypeDefinitionReference reference);
    internal virtual Task WriteTypeDefinitionAttributesAsync(IEdmTypeDefinitionReference reference);
    internal virtual void WriteBinaryTypeAttributes(IEdmBinaryTypeReference reference);
    internal virtual Task WriteBinaryTypeAttributesAsync(IEdmBinaryTypeReference reference);
    internal virtual void WriteDecimalTypeAttributes(IEdmDecimalTypeReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteDecimalTypeAttributesAsync>d__55")]
internal virtual Task WriteDecimalTypeAttributesAsync(IEdmDecimalTypeReference reference);
    internal virtual void WriteSpatialTypeAttributes(IEdmSpatialTypeReference reference);
    internal virtual Task WriteSpatialTypeAttributesAsync(IEdmSpatialTypeReference reference);
    internal virtual void WriteStringTypeAttributes(IEdmStringTypeReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteStringTypeAttributesAsync>d__59")]
internal virtual Task WriteStringTypeAttributesAsync(IEdmStringTypeReference reference);
    internal virtual void WriteTemporalTypeAttributes(IEdmTemporalTypeReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteTemporalTypeAttributesAsync>d__61")]
internal virtual Task WriteTemporalTypeAttributesAsync(IEdmTemporalTypeReference reference);
    internal virtual void WriteReferentialConstraintPair(EdmReferentialConstraintPropertyPair pair);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteReferentialConstraintPairAsync>d__63")]
internal virtual Task WriteReferentialConstraintPairAsync(EdmReferentialConstraintPropertyPair pair);
    internal virtual void WriteAnnotationStringAttribute(IEdmDirectValueAnnotation annotation);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteAnnotationStringAttributeAsync>d__65")]
internal virtual Task WriteAnnotationStringAttributeAsync(IEdmDirectValueAnnotation annotation);
    internal virtual void WriteAnnotationStringElement(IEdmDirectValueAnnotation annotation);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteAnnotationStringElementAsync>d__67")]
internal virtual Task WriteAnnotationStringElementAsync(IEdmDirectValueAnnotation annotation);
    internal virtual void WriteActionElementHeader(IEdmAction action);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteActionElementHeaderAsync>d__69")]
internal virtual Task WriteActionElementHeaderAsync(IEdmAction action);
    internal virtual void WriteFunctionElementHeader(IEdmFunction function);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteFunctionElementHeaderAsync>d__71")]
internal virtual Task WriteFunctionElementHeaderAsync(IEdmFunction function);
    internal virtual void WriteReturnTypeElementHeader(IEdmOperationReturn operationReturn);
    internal virtual Task WriteReturnTypeElementHeaderAsync(IEdmOperationReturn operationReturn);
    internal virtual void WriteTypeAttribute(IEdmTypeReference typeReference);
    internal virtual Task WriteTypeAttributeAsync(IEdmTypeReference typeReference);
    internal virtual void WriteActionImportElementHeader(IEdmActionImport actionImport);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteActionImportElementHeaderAsync>d__77")]
internal virtual Task WriteActionImportElementHeaderAsync(IEdmActionImport actionImport);
    internal virtual void WriteFunctionImportElementHeader(IEdmFunctionImport functionImport);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteFunctionImportElementHeaderAsync>d__79")]
internal virtual Task WriteFunctionImportElementHeaderAsync(IEdmFunctionImport functionImport);
    internal virtual void WriteOperationParameterElementHeader(IEdmOperationParameter parameter, bool inlineType);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteOperationParameterElementHeaderAsync>d__81")]
internal virtual Task WriteOperationParameterElementHeaderAsync(IEdmOperationParameter parameter, bool inlineType);
    internal virtual void WriteOperationParameterEndElement(IEdmOperationParameter parameter);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteOperationParameterEndElementAsync>d__83")]
internal virtual Task WriteOperationParameterEndElementAsync(IEdmOperationParameter parameter);
    internal virtual void WriteCollectionTypeElementHeader(IEdmCollectionType collectionType, bool inlineType);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteCollectionTypeElementHeaderAsync>d__85")]
internal virtual Task WriteCollectionTypeElementHeaderAsync(IEdmCollectionType collectionType, bool inlineType);
    internal virtual void WriteInlineExpression(IEdmExpression expression);
    internal virtual Task WriteInlineExpressionAsync(IEdmExpression expression);
    internal virtual void WritePropertyConstructorElementEnd(IEdmPropertyConstructor constructor);
    internal virtual Task WritePropertyConstructorElementEndAsync(IEdmPropertyConstructor constructor);
    internal virtual void WriteVocabularyAnnotationElementHeader(IEdmVocabularyAnnotation annotation, bool isInline);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteVocabularyAnnotationElementHeaderAsync>d__91")]
internal virtual Task WriteVocabularyAnnotationElementHeaderAsync(IEdmVocabularyAnnotation annotation, bool isInline);
    internal virtual void WriteVocabularyAnnotationElementEnd(IEdmVocabularyAnnotation annotation, bool isInline);
    internal virtual Task WriteVocabularyAnnotationElementEndAsync(IEdmVocabularyAnnotation annotation, bool isInline);
    internal virtual void WritePropertyValueElementHeader(IEdmPropertyConstructor value, bool isInline);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WritePropertyValueElementHeaderAsync>d__95")]
internal virtual Task WritePropertyValueElementHeaderAsync(IEdmPropertyConstructor value, bool isInline);
    internal virtual void WriteRecordExpressionElementHeader(IEdmRecordExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteRecordExpressionElementHeaderAsync>d__97")]
internal virtual Task WriteRecordExpressionElementHeaderAsync(IEdmRecordExpression expression);
    internal virtual void WritePropertyConstructorElementHeader(IEdmPropertyConstructor constructor, bool isInline);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WritePropertyConstructorElementHeaderAsync>d__99")]
internal virtual Task WritePropertyConstructorElementHeaderAsync(IEdmPropertyConstructor constructor, bool isInline);
    internal virtual void WriteStringConstantExpressionElement(IEdmStringConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteStringConstantExpressionElementAsync>d__101")]
internal virtual Task WriteStringConstantExpressionElementAsync(IEdmStringConstantExpression expression);
    internal virtual void WriteBinaryConstantExpressionElement(IEdmBinaryConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteBinaryConstantExpressionElementAsync>d__103")]
internal virtual Task WriteBinaryConstantExpressionElementAsync(IEdmBinaryConstantExpression expression);
    internal virtual void WriteBooleanConstantExpressionElement(IEdmBooleanConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteBooleanConstantExpressionElementAsync>d__105")]
internal virtual Task WriteBooleanConstantExpressionElementAsync(IEdmBooleanConstantExpression expression);
    internal virtual void WriteNullConstantExpressionElement(IEdmNullExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteNullConstantExpressionElementAsync>d__107")]
internal virtual Task WriteNullConstantExpressionElementAsync(IEdmNullExpression expression);
    internal virtual void WriteDateConstantExpressionElement(IEdmDateConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteDateConstantExpressionElementAsync>d__109")]
internal virtual Task WriteDateConstantExpressionElementAsync(IEdmDateConstantExpression expression);
    internal virtual void WriteDateTimeOffsetConstantExpressionElement(IEdmDateTimeOffsetConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteDateTimeOffsetConstantExpressionElementAsync>d__111")]
internal virtual Task WriteDateTimeOffsetConstantExpressionElementAsync(IEdmDateTimeOffsetConstantExpression expression);
    internal virtual void WriteDurationConstantExpressionElement(IEdmDurationConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteDurationConstantExpressionElementAsync>d__113")]
internal virtual Task WriteDurationConstantExpressionElementAsync(IEdmDurationConstantExpression expression);
    internal virtual void WriteDecimalConstantExpressionElement(IEdmDecimalConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteDecimalConstantExpressionElementAsync>d__115")]
internal virtual Task WriteDecimalConstantExpressionElementAsync(IEdmDecimalConstantExpression expression);
    internal virtual void WriteFloatingConstantExpressionElement(IEdmFloatingConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteFloatingConstantExpressionElementAsync>d__117")]
internal virtual Task WriteFloatingConstantExpressionElementAsync(IEdmFloatingConstantExpression expression);
    internal virtual void WriteFunctionApplicationElementHeader(IEdmApplyExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteFunctionApplicationElementHeaderAsync>d__119")]
internal virtual Task WriteFunctionApplicationElementHeaderAsync(IEdmApplyExpression expression);
    internal virtual void WriteFunctionApplicationElementEnd(IEdmApplyExpression expression);
    internal virtual Task WriteFunctionApplicationElementEndAsync(IEdmApplyExpression expression);
    internal virtual void WriteGuidConstantExpressionElement(IEdmGuidConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteGuidConstantExpressionElementAsync>d__123")]
internal virtual Task WriteGuidConstantExpressionElementAsync(IEdmGuidConstantExpression expression);
    internal virtual void WriteIntegerConstantExpressionElement(IEdmIntegerConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteIntegerConstantExpressionElementAsync>d__125")]
internal virtual Task WriteIntegerConstantExpressionElementAsync(IEdmIntegerConstantExpression expression);
    internal virtual void WritePathExpressionElement(IEdmPathExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WritePathExpressionElementAsync>d__127")]
internal virtual Task WritePathExpressionElementAsync(IEdmPathExpression expression);
    internal virtual void WritePropertyPathExpressionElement(IEdmPathExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WritePropertyPathExpressionElementAsync>d__129")]
internal virtual Task WritePropertyPathExpressionElementAsync(IEdmPathExpression expression);
    internal virtual void WriteNavigationPropertyPathExpressionElement(IEdmPathExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteNavigationPropertyPathExpressionElementAsync>d__131")]
internal virtual Task WriteNavigationPropertyPathExpressionElementAsync(IEdmPathExpression expression);
    internal virtual void WriteAnnotationPathExpressionElement(IEdmPathExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteAnnotationPathExpressionElementAsync>d__133")]
internal virtual Task WriteAnnotationPathExpressionElementAsync(IEdmPathExpression expression);
    internal virtual void WriteIfExpressionElementHeader(IEdmIfExpression expression);
    internal virtual Task WriteIfExpressionElementHeaderAsync(IEdmIfExpression expression);
    internal virtual void WriteIfExpressionElementEnd(IEdmIfExpression expression);
    internal virtual Task WriteIfExpressionElementEndAsync(IEdmIfExpression expression);
    internal virtual void WriteCollectionExpressionElementHeader(IEdmCollectionExpression expression);
    internal virtual Task WriteCollectionExpressionElementHeaderAsync(IEdmCollectionExpression expression);
    internal virtual void WriteCollectionExpressionElementEnd(IEdmCollectionExpression expression);
    internal virtual Task WriteCollectionExpressionElementEndAsync(IEdmCollectionExpression expression);
    internal virtual void WriteLabeledElementHeader(IEdmLabeledExpression labeledElement);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteLabeledElementHeaderAsync>d__143")]
internal virtual Task WriteLabeledElementHeaderAsync(IEdmLabeledExpression labeledElement);
    internal virtual void WriteLabeledExpressionReferenceExpression(IEdmLabeledExpressionReferenceExpression labeledExpressionReference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteLabeledExpressionReferenceExpressionAsync>d__145")]
internal virtual Task WriteLabeledExpressionReferenceExpressionAsync(IEdmLabeledExpressionReferenceExpression labeledExpressionReference);
    internal virtual void WriteTimeOfDayConstantExpressionElement(IEdmTimeOfDayConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteTimeOfDayConstantExpressionElementAsync>d__147")]
internal virtual Task WriteTimeOfDayConstantExpressionElementAsync(IEdmTimeOfDayConstantExpression expression);
    internal virtual void WriteIsOfExpressionElementHeader(IEdmIsOfExpression expression, bool inlineType);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteIsOfExpressionElementHeaderAsync>d__149")]
internal virtual Task WriteIsOfExpressionElementHeaderAsync(IEdmIsOfExpression expression, bool inlineType);
    internal virtual void WriteCastExpressionElementHeader(IEdmCastExpression expression, bool inlineType);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteCastExpressionElementHeaderAsync>d__151")]
internal virtual Task WriteCastExpressionElementHeaderAsync(IEdmCastExpression expression, bool inlineType);
    internal virtual void WriteCastExpressionElementEnd(IEdmCastExpression expression, bool inlineType);
    internal virtual Task WriteCastExpressionElementEndAsync(IEdmCastExpression expression, bool inlineType);
    internal virtual void WriteEnumMemberExpressionElement(IEdmEnumMemberExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteEnumMemberExpressionElementAsync>d__155")]
internal virtual Task WriteEnumMemberExpressionElementAsync(IEdmEnumMemberExpression expression);
    internal virtual void WriteTypeDefinitionElementHeader(IEdmTypeDefinition typeDefinition);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteTypeDefinitionElementHeaderAsync>d__157")]
internal virtual Task WriteTypeDefinitionElementHeaderAsync(IEdmTypeDefinition typeDefinition);
    internal virtual void WriteEndElement();
    internal virtual Task WriteEndElementAsync();
    internal virtual void WriteArrayEndElement();
    internal virtual Task WriteArrayEndElementAsync();
    internal void WriteOptionalAttribute(string attribute, T value, T defaultValue, Func`2<T, string> getStringFunc);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteOptionalAttributeAsync>d__163`1")]
internal Task WriteOptionalAttributeAsync(string attribute, T value, T defaultValue, Func`2<T, string> getStringFunc);
    internal void WriteOptionalAttribute(string attribute, T value, Func`2<T, string> getStringFunc);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteOptionalAttributeAsync>d__165`1")]
internal Task WriteOptionalAttributeAsync(string attribute, T value, Func`2<T, string> getStringFunc);
    internal void WriteRequiredAttribute(string attribute, T value, Func`2<T, string> toXml);
    internal Task WriteRequiredAttributeAsync(string attribute, T value, Func`2<T, string> toXml);
    internal virtual void WriteOperationElementAttributes(IEdmOperation operation);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteOperationElementAttributesAsync>d__169")]
internal virtual Task WriteOperationElementAttributesAsync(IEdmOperation operation);
    internal virtual void WriteNavigationPropertyBinding(IEdmNavigationPropertyBinding binding);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteNavigationPropertyBindingAsync>d__171")]
internal virtual Task WriteNavigationPropertyBindingAsync(IEdmNavigationPropertyBinding binding);
    private string SridAsXml(Nullable`1<int> i);
    private string ScaleAsXml(Nullable`1<int> i);
    private static string GetCsdlNamespace(Version edmVersion);
    internal virtual void WriteOperationImportAttributes(IEdmOperationImport operationImport, string operationAttributeName);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSchemaXmlWriter/<WriteOperationImportAttributesAsync>d__176")]
internal virtual Task WriteOperationImportAttributesAsync(IEdmOperationImport operationImport, string operationAttributeName);
    private string SerializationName(IEdmSchemaElement element);
    private string TypeReferenceAsXml(IEdmTypeReference type);
    private string TypeDefinitionAsXml(IEdmSchemaType type);
    private string FunctionAsXml(IEdmOperation operation);
    private string TermAsXml(IEdmTerm term);
}
internal class Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor : EdmModelVisitor {
    private EdmModelCsdlSchemaWriter schemaWriter;
    private List`1<IEdmNavigationProperty> navigationProperties;
    private VersioningDictionary`2<string, string> namespaceAliasMappings;
    private bool isXml;
    internal EdmModelCsdlSerializationVisitor(IEdmModel model, EdmModelCsdlSchemaWriter edmWriter);
    public virtual void VisitEntityContainerElements(IEnumerable`1<IEdmEntityContainerElement> elements);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<VisitEntityContainerElementsAsync>d__6")]
public virtual Task VisitEntityContainerElementsAsync(IEnumerable`1<IEdmEntityContainerElement> elements);
    internal void VisitEdmSchema(EdmSchema element, IEnumerable`1<KeyValuePair`2<string, string>> mappings);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<VisitEdmSchemaAsync>d__8")]
internal Task VisitEdmSchemaAsync(EdmSchema element, IEnumerable`1<KeyValuePair`2<string, string>> mappings);
    protected virtual void ProcessEntityContainer(IEdmEntityContainer element);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessEntityContainerAsync>d__10")]
protected virtual Task ProcessEntityContainerAsync(IEdmEntityContainer element);
    protected virtual void ProcessEntitySet(IEdmEntitySet element);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessEntitySetAsync>d__12")]
protected virtual Task ProcessEntitySetAsync(IEdmEntitySet element);
    protected virtual void ProcessSingleton(IEdmSingleton element);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessSingletonAsync>d__14")]
protected virtual Task ProcessSingletonAsync(IEdmSingleton element);
    protected virtual void ProcessEntityType(IEdmEntityType element);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessEntityTypeAsync>d__16")]
protected virtual Task ProcessEntityTypeAsync(IEdmEntityType element);
    protected virtual void ProcessStructuralProperty(IEdmStructuralProperty element);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessStructuralPropertyAsync>d__18")]
protected virtual Task ProcessStructuralPropertyAsync(IEdmStructuralProperty element);
    protected virtual void ProcessTypeDefinitionReference(IEdmTypeDefinitionReference element);
    protected virtual Task ProcessTypeDefinitionReferenceAsync(IEdmTypeDefinitionReference element);
    protected virtual void ProcessBinaryTypeReference(IEdmBinaryTypeReference element);
    protected virtual Task ProcessBinaryTypeReferenceAsync(IEdmBinaryTypeReference element);
    protected virtual void ProcessDecimalTypeReference(IEdmDecimalTypeReference element);
    protected virtual Task ProcessDecimalTypeReferenceAsync(IEdmDecimalTypeReference element);
    protected virtual void ProcessSpatialTypeReference(IEdmSpatialTypeReference element);
    protected virtual Task ProcessSpatialTypeReferenceAsync(IEdmSpatialTypeReference element);
    protected virtual void ProcessStringTypeReference(IEdmStringTypeReference element);
    protected virtual Task ProcessStringTypeReferenceAsync(IEdmStringTypeReference element);
    protected virtual void ProcessTemporalTypeReference(IEdmTemporalTypeReference element);
    protected virtual Task ProcessTemporalTypeReferenceAsync(IEdmTemporalTypeReference element);
    protected virtual void ProcessNavigationProperty(IEdmNavigationProperty element);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessNavigationPropertyAsync>d__32")]
protected virtual Task ProcessNavigationPropertyAsync(IEdmNavigationProperty element);
    protected virtual void ProcessComplexType(IEdmComplexType element);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessComplexTypeAsync>d__34")]
protected virtual Task ProcessComplexTypeAsync(IEdmComplexType element);
    protected virtual void ProcessEnumType(IEdmEnumType element);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessEnumTypeAsync>d__36")]
protected virtual Task ProcessEnumTypeAsync(IEdmEnumType element);
    protected virtual void ProcessEnumMember(IEdmEnumMember element);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessEnumMemberAsync>d__38")]
protected virtual Task ProcessEnumMemberAsync(IEdmEnumMember element);
    protected virtual void ProcessTypeDefinition(IEdmTypeDefinition element);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessTypeDefinitionAsync>d__40")]
protected virtual Task ProcessTypeDefinitionAsync(IEdmTypeDefinition element);
    protected virtual void ProcessTerm(IEdmTerm term);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessTermAsync>d__42")]
protected virtual Task ProcessTermAsync(IEdmTerm term);
    protected virtual void ProcessAction(IEdmAction action);
    protected virtual Task ProcessActionAsync(IEdmAction action);
    protected virtual void ProcessFunction(IEdmFunction function);
    protected virtual Task ProcessFunctionAsync(IEdmFunction function);
    protected virtual void ProcessOperationParameter(IEdmOperationParameter element);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessOperationParameterAsync>d__48")]
protected virtual Task ProcessOperationParameterAsync(IEdmOperationParameter element);
    protected virtual void ProcessOperationReturn(IEdmOperationReturn operationReturn);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessOperationReturnAsync>d__50")]
protected virtual Task ProcessOperationReturnAsync(IEdmOperationReturn operationReturn);
    protected virtual void ProcessCollectionType(IEdmCollectionType element);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessCollectionTypeAsync>d__52")]
protected virtual Task ProcessCollectionTypeAsync(IEdmCollectionType element);
    protected virtual void ProcessActionImport(IEdmActionImport actionImport);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessActionImportAsync>d__54")]
protected virtual Task ProcessActionImportAsync(IEdmActionImport actionImport);
    protected virtual void ProcessFunctionImport(IEdmFunctionImport functionImport);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessFunctionImportAsync>d__56")]
protected virtual Task ProcessFunctionImportAsync(IEdmFunctionImport functionImport);
    protected virtual void ProcessAnnotation(IEdmVocabularyAnnotation annotation);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessAnnotationAsync>d__58")]
protected virtual Task ProcessAnnotationAsync(IEdmVocabularyAnnotation annotation);
    protected virtual void ProcessStringConstantExpression(IEdmStringConstantExpression expression);
    protected virtual Task ProcessStringConstantExpressionAsync(IEdmStringConstantExpression expression);
    protected virtual void ProcessBinaryConstantExpression(IEdmBinaryConstantExpression expression);
    protected virtual Task ProcessBinaryConstantExpressionAsync(IEdmBinaryConstantExpression expression);
    protected virtual void ProcessRecordExpression(IEdmRecordExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessRecordExpressionAsync>d__64")]
protected virtual Task ProcessRecordExpressionAsync(IEdmRecordExpression expression);
    protected virtual void ProcessLabeledExpression(IEdmLabeledExpression element);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessLabeledExpressionAsync>d__66")]
protected virtual Task ProcessLabeledExpressionAsync(IEdmLabeledExpression element);
    protected virtual void ProcessLabeledExpressionReferenceExpression(IEdmLabeledExpressionReferenceExpression element);
    protected virtual Task ProcessLabeledExpressionReferenceExpressionAsync(IEdmLabeledExpressionReferenceExpression element);
    protected virtual void ProcessPropertyConstructor(IEdmPropertyConstructor constructor);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessPropertyConstructorAsync>d__70")]
protected virtual Task ProcessPropertyConstructorAsync(IEdmPropertyConstructor constructor);
    protected virtual void ProcessPathExpression(IEdmPathExpression expression);
    protected virtual Task ProcessPathExpressionAsync(IEdmPathExpression expression);
    protected virtual void ProcessPropertyPathExpression(IEdmPathExpression expression);
    protected virtual Task ProcessPropertyPathExpressionAsync(IEdmPathExpression expression);
    protected virtual void ProcessNavigationPropertyPathExpression(IEdmPathExpression expression);
    protected virtual Task ProcessNavigationPropertyPathExpressionAsync(IEdmPathExpression expression);
    protected virtual void ProcessAnnotationPathExpression(IEdmPathExpression expression);
    protected virtual Task ProcessAnnotationPathExpressionAsync(IEdmPathExpression expression);
    protected virtual void ProcessCollectionExpression(IEdmCollectionExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessCollectionExpressionAsync>d__80")]
protected virtual Task ProcessCollectionExpressionAsync(IEdmCollectionExpression expression);
    protected virtual void ProcessIsOfExpression(IEdmIsOfExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessIsOfExpressionAsync>d__82")]
protected virtual Task ProcessIsOfExpressionAsync(IEdmIsOfExpression expression);
    protected virtual void ProcessIntegerConstantExpression(IEdmIntegerConstantExpression expression);
    protected virtual Task ProcessIntegerConstantExpressionAsync(IEdmIntegerConstantExpression expression);
    protected virtual void ProcessIfExpression(IEdmIfExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessIfExpressionAsync>d__86")]
protected virtual Task ProcessIfExpressionAsync(IEdmIfExpression expression);
    protected virtual void ProcessFunctionApplicationExpression(IEdmApplyExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessFunctionApplicationExpressionAsync>d__88")]
protected virtual Task ProcessFunctionApplicationExpressionAsync(IEdmApplyExpression expression);
    protected virtual void ProcessFloatingConstantExpression(IEdmFloatingConstantExpression expression);
    protected virtual Task ProcessFloatingConstantExpressionAsync(IEdmFloatingConstantExpression expression);
    protected virtual void ProcessGuidConstantExpression(IEdmGuidConstantExpression expression);
    protected virtual Task ProcessGuidConstantExpressionAsync(IEdmGuidConstantExpression expression);
    protected virtual void ProcessEnumMemberExpression(IEdmEnumMemberExpression expression);
    protected virtual Task ProcessEnumMemberExpressionAsync(IEdmEnumMemberExpression expression);
    protected virtual void ProcessDecimalConstantExpression(IEdmDecimalConstantExpression expression);
    protected virtual Task ProcessDecimalConstantExpressionAsync(IEdmDecimalConstantExpression expression);
    protected virtual void ProcessDateConstantExpression(IEdmDateConstantExpression expression);
    protected virtual Task ProcessDateConstantExpressionAsync(IEdmDateConstantExpression expression);
    protected virtual void ProcessDateTimeOffsetConstantExpression(IEdmDateTimeOffsetConstantExpression expression);
    protected virtual Task ProcessDateTimeOffsetConstantExpressionAsync(IEdmDateTimeOffsetConstantExpression expression);
    protected virtual void ProcessDurationConstantExpression(IEdmDurationConstantExpression expression);
    protected virtual Task ProcessDurationConstantExpressionAsync(IEdmDurationConstantExpression expression);
    protected virtual void ProcessTimeOfDayConstantExpression(IEdmTimeOfDayConstantExpression expression);
    protected virtual Task ProcessTimeOfDayConstantExpressionAsync(IEdmTimeOfDayConstantExpression expression);
    protected virtual void ProcessBooleanConstantExpression(IEdmBooleanConstantExpression expression);
    protected virtual Task ProcessBooleanConstantExpressionAsync(IEdmBooleanConstantExpression expression);
    protected virtual void ProcessNullConstantExpression(IEdmNullExpression expression);
    protected virtual Task ProcessNullConstantExpressionAsync(IEdmNullExpression expression);
    protected virtual void ProcessCastExpression(IEdmCastExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessCastExpressionAsync>d__110")]
protected virtual Task ProcessCastExpressionAsync(IEdmCastExpression expression);
    private void ProcessNavigationPropertyBindings(IEdmNavigationSource navigationSource);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessNavigationPropertyBindingsAsync>d__112")]
private Task ProcessNavigationPropertyBindingsAsync(IEdmNavigationSource navigationSource);
    private static bool IsInlineType(IEdmTypeReference reference);
    private static bool IsInlineExpression(IEdmExpression expression);
    private static string GetEntitySetString(IEdmOperationImport operationImport);
    private void ProcessOperation(TOperation operation, Action`1<TOperation> writeElementAction);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessOperationAsync>d__117`1")]
private Task ProcessOperationAsync(TOperation operation, Func`2<TOperation, Task> writeElementAction);
    private void ProcessReferentialConstraint(IEdmReferentialConstraint element);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessReferentialConstraintAsync>d__119")]
private Task ProcessReferentialConstraintAsync(IEdmReferentialConstraint element);
    private void ProcessFacets(IEdmTypeReference element, bool inlineType);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<ProcessFacetsAsync>d__121")]
private Task ProcessFacetsAsync(IEdmTypeReference element, bool inlineType);
    private void VisitEntityTypeDeclaredKey(IEnumerable`1<IEdmStructuralProperty> keyProperties);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<VisitEntityTypeDeclaredKeyAsync>d__123")]
private Task VisitEntityTypeDeclaredKeyAsync(IEnumerable`1<IEdmStructuralProperty> keyProperties);
    private void VisitPropertyRefs(IEnumerable`1<IEdmStructuralProperty> properties);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<VisitPropertyRefsAsync>d__125")]
private Task VisitPropertyRefsAsync(IEnumerable`1<IEdmStructuralProperty> properties);
    private void VisitAttributeAnnotations(IEnumerable`1<IEdmDirectValueAnnotation> annotations);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<VisitAttributeAnnotationsAsync>d__127")]
private Task VisitAttributeAnnotationsAsync(IEnumerable`1<IEdmDirectValueAnnotation> annotations);
    private void VisitPrimitiveElementAnnotations(IEnumerable`1<IEdmDirectValueAnnotation> annotations);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<VisitPrimitiveElementAnnotationsAsync>d__129")]
private Task VisitPrimitiveElementAnnotationsAsync(IEnumerable`1<IEdmDirectValueAnnotation> annotations);
    private void ProcessAttributeAnnotation(IEdmDirectValueAnnotation annotation);
    private Task ProcessAttributeAnnotationAsync(IEdmDirectValueAnnotation annotation);
    private void ProcessElementAnnotation(IEdmDirectValueAnnotation annotation);
    private Task ProcessElementAnnotationAsync(IEdmDirectValueAnnotation annotation);
    private void VisitElementVocabularyAnnotations(IEnumerable`1<IEdmVocabularyAnnotation> annotations);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<VisitElementVocabularyAnnotationsAsync>d__135")]
private Task VisitElementVocabularyAnnotationsAsync(IEnumerable`1<IEdmVocabularyAnnotation> annotations);
    private void BeginElement(TElement element, Action`1<TElement> elementHeaderWriter, Action`1[] additionalAttributeWriters);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<BeginElementAsync>d__137`1")]
private Task BeginElementAsync(TElement element, Func`2<TElement, Task> elementHeaderWriter, Func`2[] additionalAttributeWriters);
    private void EndElement(TElement element, Action`1<TElement> elementEndWriter);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<EndElementAsync>d__139`1")]
private Task EndElementAsync(TElement element, Func`2<TElement, Task> elementEndWriter);
    private void EndElement(IEdmElement element);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<EndElementAsync>d__141")]
private Task EndElementAsync(IEdmElement element);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelCsdlSerializationVisitor/<<VisitEdmSchemaAsync>b__8_0>d")]
[CompilerGeneratedAttribute]
private void <VisitEdmSchemaAsync>b__8_0(IEdmEntityContainer e);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(IEdmEntityContainer container);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(IEdmEntitySet set);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2(IEdmSingleton singleton);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__3(IEdmComplexType definition);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__4(IEdmEnumType definition);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__5(IEdmTypeDefinition definition);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__6(IEdmVocabularyAnnotation annotation);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__7(IEdmLabeledExpression element);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__8(IEdmPropertyConstructor constructor);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__9(IEdmIfExpression expression);
    [CompilerGeneratedAttribute]
private void <ProcessFunctionApplicationExpression>b__87_0(IEdmApplyExpression e);
    [CompilerGeneratedAttribute]
private void <ProcessFunctionApplicationExpression>b__87_1(IEdmApplyExpression e);
    [CompilerGeneratedAttribute]
private bool <EndElement>b__138_0(IEdmVocabularyAnnotation a);
    [CompilerGeneratedAttribute]
private bool <EndElementAsync>b__139_0(IEdmVocabularyAnnotation a);
    [CompilerGeneratedAttribute]
private bool <EndElement>b__140_0(IEdmVocabularyAnnotation a);
    [CompilerGeneratedAttribute]
private bool <EndElementAsync>b__141_0(IEdmVocabularyAnnotation a);
}
internal class Microsoft.OData.Edm.Csdl.Serialization.EdmModelReferenceElementsJsonVisitor : object {
    private EdmModelCsdlSchemaJsonWriter schemaWriter;
    private Utf8JsonWriter jsonWriter;
    internal EdmModelReferenceElementsJsonVisitor(IEdmModel model, Utf8JsonWriter writer, Version edmVersion);
    internal void VisitEdmReferences(IEdmModel model);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelReferenceElementsJsonVisitor/<VisitEdmReferencesAsync>d__4")]
internal Task VisitEdmReferencesAsync(IEdmModel model);
    private void WriteIncludes(IEdmModel model, IEnumerable`1<IEdmInclude> includes);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelReferenceElementsJsonVisitor/<WriteIncludesAsync>d__6")]
private Task WriteIncludesAsync(IEdmModel model, IEnumerable`1<IEdmInclude> includes);
    private void WriteIncludeAnnotations(IEnumerable`1<IEdmIncludeAnnotations> includeAnnotations);
    private Task WriteIncludeAnnotationsAsync(IEnumerable`1<IEdmIncludeAnnotations> includeAnnotations);
    private void WriteAnnotations(IEdmModel model, IEdmVocabularyAnnotatable target);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelReferenceElementsJsonVisitor/<WriteAnnotationsAsync>d__10")]
private Task WriteAnnotationsAsync(IEdmModel model, IEdmVocabularyAnnotatable target);
}
internal class Microsoft.OData.Edm.Csdl.Serialization.EdmModelReferenceElementsXmlVisitor : object {
    private EdmModelCsdlSchemaXmlWriter schemaWriter;
    internal EdmModelReferenceElementsXmlVisitor(IEdmModel model, XmlWriter xmlWriter, Version edmxVersion, CsdlXmlWriterSettings writerSettings);
    internal void VisitEdmReferences(IEdmModel model, IEdmReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelReferenceElementsXmlVisitor/<VisitEdmReferencesAsync>d__3")]
internal Task VisitEdmReferencesAsync(IEdmModel model, IEdmReference reference);
    private void WriteAnnotations(IEdmModel model, IEdmVocabularyAnnotatable target);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.Csdl.Serialization.EdmModelReferenceElementsXmlVisitor/<WriteAnnotationsAsync>d__5")]
private Task WriteAnnotationsAsync(IEdmModel model, IEdmVocabularyAnnotatable target);
}
internal class Microsoft.OData.Edm.Csdl.Serialization.EdmModelSchemaSeparationSerializationVisitor : EdmModelVisitor {
    private bool visitCompleted;
    private Dictionary`2<string, EdmSchema> modelSchemas;
    private EdmSchema activeSchema;
    public EdmModelSchemaSeparationSerializationVisitor(IEdmModel visitedModel);
    public IEnumerable`1<EdmSchema> GetSchemas();
    protected void Visit();
    protected virtual void ProcessModel(IEdmModel model);
    protected virtual void ProcessVocabularyAnnotatable(IEdmVocabularyAnnotatable element);
    protected virtual void ProcessSchemaElement(IEdmSchemaElement element);
    protected virtual void ProcessVocabularyAnnotation(IEdmVocabularyAnnotation annotation);
    protected virtual void ProcessEntityContainer(IEdmEntityContainer element);
    protected virtual void ProcessComplexTypeReference(IEdmComplexTypeReference element);
    protected virtual void ProcessEntityTypeReference(IEdmEntityTypeReference element);
    protected virtual void ProcessEntityReferenceTypeReference(IEdmEntityReferenceTypeReference element);
    protected virtual void ProcessEnumTypeReference(IEdmEnumTypeReference element);
    protected virtual void ProcessTypeDefinitionReference(IEdmTypeDefinitionReference element);
    protected virtual void ProcessEntityType(IEdmEntityType element);
    protected virtual void ProcessComplexType(IEdmComplexType element);
    protected virtual void ProcessEnumType(IEdmEnumType element);
    protected virtual void ProcessTypeDefinition(IEdmTypeDefinition element);
    private void CheckSchemaElementReference(IEdmSchemaElement element);
    private void CheckSchemaElementReference(string namespaceName);
    [CompilerGeneratedAttribute]
private bool <ProcessModel>b__6_0(IEdmVocabularyAnnotation a);
    [CompilerGeneratedAttribute]
private bool <ProcessVocabularyAnnotatable>b__7_0(IEdmVocabularyAnnotation a);
}
internal class Microsoft.OData.Edm.Csdl.Serialization.EdmSchema : object {
    private string schemaNamespace;
    private List`1<IEdmSchemaElement> schemaElements;
    private List`1<IEdmEntityContainer> entityContainers;
    private IDictionary`2<string, IList`1<IEdmSchemaElement>> operations;
    private Dictionary`2<string, List`1<IEdmVocabularyAnnotation>> annotations;
    private List`1<string> usedNamespaces;
    public string Namespace { get; }
    public List`1<IEdmSchemaElement> SchemaElements { get; }
    public IDictionary`2<string, IList`1<IEdmSchemaElement>> SchemaOperations { get; }
    public List`1<IEdmEntityContainer> EntityContainers { get; }
    public IEnumerable`1<KeyValuePair`2<string, List`1<IEdmVocabularyAnnotation>>> OutOfLineAnnotations { get; }
    public EdmSchema(string namespaceString);
    public string get_Namespace();
    public List`1<IEdmSchemaElement> get_SchemaElements();
    public IDictionary`2<string, IList`1<IEdmSchemaElement>> get_SchemaOperations();
    public List`1<IEdmEntityContainer> get_EntityContainers();
    public IEnumerable`1<KeyValuePair`2<string, List`1<IEdmVocabularyAnnotation>>> get_OutOfLineAnnotations();
    public void AddSchemaElement(IEdmSchemaElement element);
    public void AddEntityContainer(IEdmEntityContainer container);
    public void AddNamespaceUsing(string usedNamespace);
    public void AddVocabularyAnnotation(IEdmVocabularyAnnotation annotation);
}
[ExtensionAttribute]
internal static class Microsoft.OData.Edm.Csdl.Serialization.SerializationValidator : object {
    private static ValidationRule`1<IEdmTypeReference> TypeReferenceTargetMustHaveValidName;
    private static ValidationRule`1<IEdmEntityReferenceType> EntityReferenceTargetMustHaveValidName;
    private static ValidationRule`1<IEdmEntitySet> EntitySetTypeMustHaveValidName;
    private static ValidationRule`1<IEdmStructuredType> StructuredTypeBaseTypeMustHaveValidName;
    private static ValidationRule`1<IEdmVocabularyAnnotation> VocabularyAnnotationOutOfLineMustHaveValidTargetName;
    private static ValidationRule`1<IEdmVocabularyAnnotation> VocabularyAnnotationMustHaveValidTermName;
    private static ValidationRuleSet serializationRuleSet;
    private static SerializationValidator();
    [ExtensionAttribute]
public static IEnumerable`1<EdmError> GetSerializationErrors(IEdmModel root);
    internal static bool SignificantToSerialization(EdmError error);
}
[ExtensionAttribute]
public static class Microsoft.OData.Edm.Csdl.SerializationExtensionMethods : object {
    [ExtensionAttribute]
public static Version GetEdmxVersion(IEdmModel model);
    [ExtensionAttribute]
public static void SetEdmxVersion(IEdmModel model, Version version);
    [ExtensionAttribute]
public static void SetNamespacePrefixMappings(IEdmModel model, IEnumerable`1<KeyValuePair`2<string, string>> mappings);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<string, string>> GetNamespacePrefixMappings(IEdmModel model);
    [ExtensionAttribute]
public static void SetSerializationLocation(IEdmVocabularyAnnotation annotation, IEdmModel model, Nullable`1<EdmVocabularyAnnotationSerializationLocation> location);
    [ExtensionAttribute]
public static Nullable`1<EdmVocabularyAnnotationSerializationLocation> GetSerializationLocation(IEdmVocabularyAnnotation annotation, IEdmModel model);
    [ExtensionAttribute]
public static void SetSchemaNamespace(IEdmVocabularyAnnotation annotation, IEdmModel model, string schemaNamespace);
    [ExtensionAttribute]
public static string GetSchemaNamespace(IEdmVocabularyAnnotation annotation, IEdmModel model);
    [ExtensionAttribute]
public static void SetIsValueExplicit(IEdmEnumMember member, IEdmModel model, Nullable`1<bool> isExplicit);
    [ExtensionAttribute]
public static Nullable`1<bool> IsValueExplicit(IEdmEnumMember member, IEdmModel model);
    [ExtensionAttribute]
public static void SetIsSerializedAsElement(IEdmValue value, IEdmModel model, bool isSerializedAsElement);
    [ExtensionAttribute]
public static bool IsSerializedAsElement(IEdmValue value, IEdmModel model);
    [ExtensionAttribute]
public static void SetNamespaceAlias(IEdmModel model, string namespaceName, string alias);
    [ExtensionAttribute]
public static string GetNamespaceAlias(IEdmModel model, string namespaceName);
    [ExtensionAttribute]
internal static VersioningDictionary`2<string, string> GetNamespaceAliases(IEdmModel model);
    [ExtensionAttribute]
internal static VersioningList`1<string> GetUsedNamespacesHavingAlias(IEdmModel model);
    [ExtensionAttribute]
internal static bool IsInline(IEdmVocabularyAnnotation annotation, IEdmModel model);
    [ExtensionAttribute]
internal static string TargetString(IEdmVocabularyAnnotation annotation);
}
[ExtensionAttribute]
internal static class Microsoft.OData.Edm.Csdl.Utf8JsonWriterExtensions : object {
    [ExtensionAttribute]
public static void WriteRequiredProperty(Utf8JsonWriter writer, string name, string value);
    [ExtensionAttribute]
public static void WriteRequiredProperty(Utf8JsonWriter writer, string name, long value);
    [ExtensionAttribute]
public static void WriteRequiredProperty(Utf8JsonWriter writer, string name, bool value);
    [ExtensionAttribute]
public static void WriteRequiredProperty(Utf8JsonWriter writer, string name, decimal value);
    [ExtensionAttribute]
public static void WriteRequiredProperty(Utf8JsonWriter writer, string name, T value, Func`2<T, string> getStringFunc);
    [ExtensionAttribute]
public static void WriteOptionalProperty(Utf8JsonWriter writer, string name, Nullable`1<int> value);
    [ExtensionAttribute]
public static void WriteOptionalProperty(Utf8JsonWriter writer, string name, Nullable`1<int> value, int defaultValue);
    [ExtensionAttribute]
public static void WriteOptionalProperty(Utf8JsonWriter writer, string name, bool value, bool defaultValue);
    [ExtensionAttribute]
public static void WriteOptionalProperty(Utf8JsonWriter writer, string name, Nullable`1<bool> value, bool defaultValue);
    [ExtensionAttribute]
public static void WriteOptionalProperty(Utf8JsonWriter writer, string name, string value);
    [ExtensionAttribute]
public static void WriteOptionalProperty(Utf8JsonWriter writer, string name, T value, Func`2<T, string> getStringFunc);
}
internal class Microsoft.OData.Edm.CyclicComplexType : BadComplexType {
    public CyclicComplexType(string qualifiedName, EdmLocation location);
}
internal class Microsoft.OData.Edm.CyclicEntityContainer : BadEntityContainer {
    public CyclicEntityContainer(string name, EdmLocation location);
}
internal class Microsoft.OData.Edm.CyclicEntityType : BadEntityType {
    public CyclicEntityType(string qualifiedName, EdmLocation location);
}
public class Microsoft.OData.Edm.Date : ValueType {
    public static Date MinValue;
    public static Date MaxValue;
    private DateTime dateTime;
    public static Date Now { get; }
    public int Year { get; }
    public int Month { get; }
    public int Day { get; }
    public Date(int year, int month, int day);
    private static Date();
    public static Date get_Now();
    public int get_Year();
    public int get_Month();
    public int get_Day();
    public static bool op_Equality(Date firstOperand, Date secondOperand);
    public static bool op_Inequality(Date firstOperand, Date secondOperand);
    public static bool op_LessThan(Date firstOperand, Date secondOperand);
    public static bool op_LessThanOrEqual(Date firstOperand, Date secondOperand);
    public static bool op_GreaterThan(Date firstOperand, Date secondOperand);
    public static bool op_GreaterThanOrEqual(Date firstOperand, Date secondOperand);
    public Date AddYears(int value);
    public Date AddMonths(int value);
    public Date AddDays(int value);
    public static DateTime op_Implicit(Date operand);
    public static Date op_Implicit(DateTime operand);
    public virtual string ToString();
    public sealed virtual int CompareTo(object obj);
    public sealed virtual int CompareTo(Date other);
    public sealed virtual bool Equals(Date other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static Date Parse(string text);
    public static Date Parse(string text, IFormatProvider provider);
    public static bool TryParse(string text, Date& result);
    public static bool TryParse(string text, IFormatProvider provider, Date& result);
}
internal class Microsoft.OData.Edm.DefaultPrimitiveValueConverter : object {
    internal static IPrimitiveValueConverter Instance;
    private static DefaultPrimitiveValueConverter();
    public sealed virtual object ConvertToUnderlyingType(object value);
    public sealed virtual object ConvertFromUnderlyingType(object value);
}
public class Microsoft.OData.Edm.EdmAction : EdmOperation {
    public EdmSchemaElementKind SchemaElementKind { get; }
    public EdmAction(string namespaceName, string name, IEdmTypeReference returnType, bool isBound, IEdmPathExpression entitySetPathExpression);
    public EdmAction(string namespaceName, string name, IEdmTypeReference returnType);
    public virtual EdmSchemaElementKind get_SchemaElementKind();
}
public class Microsoft.OData.Edm.EdmActionImport : EdmOperationImport {
    private static string ActionArgumentNullParameterName;
    [CompilerGeneratedAttribute]
private IEdmAction <Action>k__BackingField;
    public IEdmAction Action { get; private set; }
    public EdmContainerElementKind ContainerElementKind { get; }
    public EdmActionImport(IEdmEntityContainer container, string name, IEdmAction action);
    public EdmActionImport(IEdmEntityContainer container, string name, IEdmAction action, IEdmExpression entitySetExpression);
    [CompilerGeneratedAttribute]
public sealed virtual IEdmAction get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(IEdmAction value);
    public virtual EdmContainerElementKind get_ContainerElementKind();
    protected virtual string OperationArgumentNullParameterName();
}
public class Microsoft.OData.Edm.EdmBinaryTypeReference : EdmPrimitiveTypeReference {
    private bool isUnbounded;
    private Nullable`1<int> maxLength;
    public bool IsUnbounded { get; }
    public Nullable`1<int> MaxLength { get; }
    public EdmBinaryTypeReference(IEdmPrimitiveType definition, bool isNullable);
    public EdmBinaryTypeReference(IEdmPrimitiveType definition, bool isNullable, bool isUnbounded, Nullable`1<int> maxLength);
    public sealed virtual bool get_IsUnbounded();
    public sealed virtual Nullable`1<int> get_MaxLength();
}
public class Microsoft.OData.Edm.EdmCollectionType : EdmType {
    private IEdmTypeReference elementType;
    public EdmTypeKind TypeKind { get; }
    public IEdmTypeReference ElementType { get; }
    public EdmCollectionType(IEdmTypeReference elementType);
    public virtual EdmTypeKind get_TypeKind();
    public sealed virtual IEdmTypeReference get_ElementType();
}
public class Microsoft.OData.Edm.EdmCollectionTypeReference : EdmTypeReference {
    public EdmCollectionTypeReference(IEdmCollectionType collectionType);
    private static bool GetIsNullable(IEdmCollectionType collectionType);
}
public class Microsoft.OData.Edm.EdmComplexType : EdmStructuredType {
    private string namespaceName;
    private string name;
    private string fullName;
    public EdmSchemaElementKind SchemaElementKind { get; }
    public string Namespace { get; }
    public string Name { get; }
    public string FullName { get; }
    public EdmTypeKind TypeKind { get; }
    public EdmComplexType(string namespaceName, string name);
    public EdmComplexType(string namespaceName, string name, IEdmComplexType baseType);
    public EdmComplexType(string namespaceName, string name, IEdmComplexType baseType, bool isAbstract);
    public EdmComplexType(string namespaceName, string name, IEdmComplexType baseType, bool isAbstract, bool isOpen);
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_Name();
    public sealed virtual string get_FullName();
    public virtual EdmTypeKind get_TypeKind();
}
public class Microsoft.OData.Edm.EdmComplexTypeReference : EdmTypeReference {
    public EdmComplexTypeReference(IEdmComplexType complexType, bool isNullable);
}
public static class Microsoft.OData.Edm.EdmConstants : object {
    public static Version EdmVersion4;
    public static Version EdmVersion401;
    public static Version EdmVersionLatest;
    public static Version EdmVersionDefault;
    internal static string EdmVersion401String;
    internal static string EdmNamespace;
    internal static string TransientNamespace;
    internal static string XmlPrefix;
    internal static string XmlNamespacePrefix;
    internal static string InternalUri;
    internal static string EdmVersionAnnotation;
    internal static string FacetName_Nullable;
    internal static string FacetName_Precision;
    internal static string FacetName_Scale;
    internal static string FacetName_MaxLength;
    internal static string FacetName_Unicode;
    internal static string FacetName_Collation;
    internal static string FacetName_Srid;
    internal static string Value_UnknownType;
    internal static string Value_UnnamedType;
    internal static string Value_Max;
    internal static string Value_SridVariable;
    internal static string Value_ScaleVariable;
    internal static string Value_SridVariable_Legacy;
    internal static string Value_ScaleVariable_Legacy;
    internal static string Type_Collection;
    internal static string Type_Complex;
    internal static string Type_Entity;
    internal static string Type_EntityReference;
    internal static string Type_Enum;
    internal static string Type_TypeDefinition;
    internal static string Type_Path;
    internal static string Type_Primitive;
    internal static string Type_Binary;
    internal static string Type_Decimal;
    internal static string Type_String;
    internal static string Type_Stream;
    internal static string Type_Spatial;
    internal static string Type_Temporal;
    internal static string Type_Structured;
    internal static int Max_Precision;
    internal static int Min_Precision;
    internal static string MimeTypeAttributeName;
    private static EdmConstants();
}
internal class Microsoft.OData.Edm.EdmContainedEntitySet : EdmEntitySetBase {
    private IEdmPathExpression navigationPath;
    private IEdmNavigationSource parentNavigationSource;
    private IEdmNavigationProperty navigationProperty;
    private IEdmPathExpression path;
    private string fullPath;
    public IEdmPathExpression Path { get; }
    public IEdmNavigationSource ParentNavigationSource { get; }
    public IEdmNavigationProperty NavigationProperty { get; }
    internal IEdmPathExpression NavigationPath { get; }
    private string FullNavigationPath { get; }
    public EdmContainedEntitySet(IEdmNavigationSource parentNavigationSource, IEdmNavigationProperty navigationProperty);
    public EdmContainedEntitySet(IEdmNavigationSource parentNavigationSource, IEdmNavigationProperty navigationProperty, IEdmPathExpression navigationPath);
    public virtual IEdmPathExpression get_Path();
    public sealed virtual IEdmNavigationSource get_ParentNavigationSource();
    public sealed virtual IEdmNavigationProperty get_NavigationProperty();
    internal IEdmPathExpression get_NavigationPath();
    private string get_FullNavigationPath();
    public virtual IEnumerable`1<IEdmNavigationPropertyBinding> FindNavigationPropertyBindings(IEdmNavigationProperty navigationProperty);
    public virtual IEdmNavigationSource FindNavigationTarget(IEdmNavigationProperty navigationProperty);
    public virtual IEdmNavigationSource FindNavigationTarget(IEdmNavigationProperty navigationProperty, IEdmPathExpression bindingPath);
    private IEdmPathExpression ComputePath();
}
public enum Microsoft.OData.Edm.EdmContainerElementKind : Enum {
    public int value__;
    public static EdmContainerElementKind None;
    public static EdmContainerElementKind EntitySet;
    public static EdmContainerElementKind ActionImport;
    public static EdmContainerElementKind FunctionImport;
    public static EdmContainerElementKind Singleton;
}
public class Microsoft.OData.Edm.EdmCoreModel : EdmElement {
    public static EdmCoreModel Instance;
    private IDictionary`2<string, EdmPrimitiveTypeKind> primitiveTypeKinds;
    private IDictionary`2<EdmPrimitiveTypeKind, EdmCoreModelPrimitiveType> primitiveTypesByKind;
    private IDictionary`2<string, EdmPathTypeKind> pathTypeKinds;
    private IDictionary`2<EdmPathTypeKind, EdmCoreModelPathType> pathTypesByKind;
    private IEdmDirectValueAnnotationsManager annotationsManager;
    private IList`1<IEdmSchemaElement> coreSchemaElements;
    private IDictionary`2<string, IEdmSchemaType> coreSchemaTypes;
    private EdmCoreModelComplexType complexType;
    private EdmCoreModelEntityType entityType;
    private EdmCoreModelUntypedType untypedType;
    private EdmCoreModelPrimitiveType primitiveType;
    public static string Namespace { get; }
    public IEnumerable`1<IEdmSchemaElement> SchemaElements { get; }
    public IEnumerable`1<string> DeclaredNamespaces { get; }
    public IEnumerable`1<IEdmVocabularyAnnotation> VocabularyAnnotations { get; }
    public IEnumerable`1<IEdmModel> ReferencedModels { get; }
    public IEdmDirectValueAnnotationsManager DirectValueAnnotationsManager { get; }
    public IEdmEntityContainer EntityContainer { get; }
    private static EdmCoreModel();
    public static string get_Namespace();
    public sealed virtual IEnumerable`1<IEdmSchemaElement> get_SchemaElements();
    public sealed virtual IEnumerable`1<string> get_DeclaredNamespaces();
    public sealed virtual IEnumerable`1<IEdmVocabularyAnnotation> get_VocabularyAnnotations();
    public sealed virtual IEnumerable`1<IEdmModel> get_ReferencedModels();
    public sealed virtual IEdmDirectValueAnnotationsManager get_DirectValueAnnotationsManager();
    public sealed virtual IEdmEntityContainer get_EntityContainer();
    public static IEdmCollectionTypeReference GetCollection(IEdmTypeReference elementType);
    public sealed virtual IEdmSchemaType FindDeclaredType(string qualifiedName);
    public sealed virtual IEnumerable`1<IEdmOperation> FindDeclaredBoundOperations(IEdmType bindingType);
    public sealed virtual IEnumerable`1<IEdmOperation> FindDeclaredBoundOperations(string qualifiedName, IEdmType bindingType);
    public sealed virtual IEdmTerm FindDeclaredTerm(string qualifiedName);
    public sealed virtual IEnumerable`1<IEdmOperation> FindDeclaredOperations(string qualifiedName);
    public IEnumerable`1<IEdmOperationImport> FindOperationImportsByNameNonBindingParameterType(string operationImportName, IEnumerable`1<string> parameterNames);
    public IEdmPrimitiveType GetPrimitiveType(EdmPrimitiveTypeKind kind);
    public IEdmPrimitiveType GetPrimitiveType();
    public IEdmComplexType GetComplexType();
    public IEdmEntityType GetEntityType();
    public IEdmUntypedType GetUntypedType();
    public IEdmPathType GetPathType(EdmPathTypeKind kind);
    public EdmPrimitiveTypeKind GetPrimitiveTypeKind(string typeName);
    public IEdmPrimitiveTypeReference GetPrimitive(EdmPrimitiveTypeKind kind, bool isNullable);
    public EdmPathTypeKind GetPathTypeKind(string typeName);
    public IEdmPathTypeReference GetPathType(EdmPathTypeKind kind, bool isNullable);
    public IEdmPathTypeReference GetAnnotationPath(bool isNullable);
    public IEdmPathTypeReference GetPropertyPath(bool isNullable);
    public IEdmPathTypeReference GetNavigationPropertyPath(bool isNullable);
    public IEdmEntityTypeReference GetEntityType(bool isNullable);
    public IEdmComplexTypeReference GetComplexType(bool isNullable);
    public IEdmPrimitiveTypeReference GetPrimitiveType(bool isNullable);
    public IEdmPrimitiveTypeReference GetInt16(bool isNullable);
    public IEdmPrimitiveTypeReference GetInt32(bool isNullable);
    public IEdmPrimitiveTypeReference GetInt64(bool isNullable);
    public IEdmPrimitiveTypeReference GetBoolean(bool isNullable);
    public IEdmPrimitiveTypeReference GetByte(bool isNullable);
    public IEdmPrimitiveTypeReference GetSByte(bool isNullable);
    public IEdmPrimitiveTypeReference GetGuid(bool isNullable);
    public IEdmPrimitiveTypeReference GetDate(bool isNullable);
    public IEdmTemporalTypeReference GetDateTimeOffset(bool isNullable);
    public IEdmTemporalTypeReference GetDuration(bool isNullable);
    public IEdmTemporalTypeReference GetTimeOfDay(bool isNullable);
    public IEdmDecimalTypeReference GetDecimal(Nullable`1<int> precision, Nullable`1<int> scale, bool isNullable);
    public IEdmDecimalTypeReference GetDecimal(bool isNullable);
    public IEdmPrimitiveTypeReference GetSingle(bool isNullable);
    public IEdmPrimitiveTypeReference GetDouble(bool isNullable);
    public IEdmPrimitiveTypeReference GetStream(bool isNullable);
    public IEdmTemporalTypeReference GetTemporal(EdmPrimitiveTypeKind kind, Nullable`1<int> precision, bool isNullable);
    public IEdmTemporalTypeReference GetTemporal(EdmPrimitiveTypeKind kind, bool isNullable);
    public IEdmBinaryTypeReference GetBinary(bool isUnbounded, Nullable`1<int> maxLength, bool isNullable);
    public IEdmBinaryTypeReference GetBinary(bool isNullable);
    public IEdmSpatialTypeReference GetSpatial(EdmPrimitiveTypeKind kind, Nullable`1<int> spatialReferenceIdentifier, bool isNullable);
    public IEdmSpatialTypeReference GetSpatial(EdmPrimitiveTypeKind kind, bool isNullable);
    public IEdmStringTypeReference GetString(bool isUnbounded, Nullable`1<int> maxLength, Nullable`1<bool> isUnicode, bool isNullable);
    public IEdmStringTypeReference GetString(bool isNullable);
    public IEdmUntypedTypeReference GetUntyped();
    public IEdmUntypedTypeReference GetUntyped(bool isNullable);
    public sealed virtual IEnumerable`1<IEdmVocabularyAnnotation> FindDeclaredVocabularyAnnotations(IEdmVocabularyAnnotatable element);
    public sealed virtual IEnumerable`1<IEdmStructuredType> FindDirectlyDerivedTypes(IEdmStructuredType baseType);
    private EdmCoreModelPrimitiveType GetCoreModelPrimitiveType(EdmPrimitiveTypeKind kind);
}
internal class Microsoft.OData.Edm.EdmCoreModelComplexType : EdmType {
    public static EdmCoreModelComplexType Instance;
    public IEdmStructuredType BaseType;
    public EdmTypeKind TypeKind { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public string Name { get; }
    public string Namespace { get; }
    public string FullName { get; }
    public bool IsAbstract { get; }
    public bool IsOpen { get; }
    public IEnumerable`1<IEdmProperty> DeclaredProperties { get; }
    private IEdmStructuredType Microsoft.OData.Edm.IEdmStructuredType.BaseType { get; }
    private static EdmCoreModelComplexType();
    public virtual EdmTypeKind get_TypeKind();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public sealed virtual string get_Name();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_FullName();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsOpen();
    public sealed virtual IEnumerable`1<IEdmProperty> get_DeclaredProperties();
    private sealed virtual override IEdmStructuredType Microsoft.OData.Edm.IEdmStructuredType.get_BaseType();
    public sealed virtual IEdmProperty FindProperty(string name);
}
internal class Microsoft.OData.Edm.EdmCoreModelEntityType : EdmType {
    public static EdmCoreModelEntityType Instance;
    public EdmTypeKind TypeKind { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public string Name { get; }
    public string Namespace { get; }
    public string FullName { get; }
    public bool HasStream { get; }
    public bool IsAbstract { get; }
    public bool IsOpen { get; }
    public IEdmStructuredType BaseType { get; }
    public IEnumerable`1<IEdmProperty> DeclaredProperties { get; }
    public IEnumerable`1<IEdmStructuralProperty> DeclaredKey { get; }
    private static EdmCoreModelEntityType();
    public virtual EdmTypeKind get_TypeKind();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public sealed virtual string get_Name();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_FullName();
    public sealed virtual bool get_HasStream();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsOpen();
    public sealed virtual IEdmStructuredType get_BaseType();
    public sealed virtual IEnumerable`1<IEdmProperty> get_DeclaredProperties();
    public sealed virtual IEnumerable`1<IEdmStructuralProperty> get_DeclaredKey();
    public sealed virtual IEdmProperty FindProperty(string name);
}
internal class Microsoft.OData.Edm.EdmCoreModelPathType : EdmType {
    [CompilerGeneratedAttribute]
private EdmPathTypeKind <PathKind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public EdmPathTypeKind PathKind { get; }
    public string FullName { get; }
    public EdmTypeKind TypeKind { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public string Namespace { get; }
    public string Name { get; }
    public EdmCoreModelPathType(EdmPathTypeKind pathKind);
    [CompilerGeneratedAttribute]
public sealed virtual EdmPathTypeKind get_PathKind();
    public sealed virtual string get_FullName();
    public virtual EdmTypeKind get_TypeKind();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public sealed virtual string get_Namespace();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
}
internal class Microsoft.OData.Edm.EdmCoreModelPrimitiveType : EdmType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private EdmPrimitiveTypeKind <PrimitiveKind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    public string Name { get; }
    public string Namespace { get; }
    public EdmTypeKind TypeKind { get; }
    public EdmPrimitiveTypeKind PrimitiveKind { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public string FullName { get; }
    public EdmCoreModelPrimitiveType(EdmPrimitiveTypeKind primitiveKind);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual string get_Namespace();
    public virtual EdmTypeKind get_TypeKind();
    [CompilerGeneratedAttribute]
public sealed virtual EdmPrimitiveTypeKind get_PrimitiveKind();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    [CompilerGeneratedAttribute]
public sealed virtual string get_FullName();
}
internal class Microsoft.OData.Edm.EdmCoreModelUntypedType : EdmType {
    public static EdmCoreModelUntypedType Instance;
    public EdmTypeKind TypeKind { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public string Name { get; }
    public string Namespace { get; }
    public string FullName { get; }
    private static EdmCoreModelUntypedType();
    public virtual EdmTypeKind get_TypeKind();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public sealed virtual string get_Name();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_FullName();
}
public class Microsoft.OData.Edm.EdmDecimalTypeReference : EdmPrimitiveTypeReference {
    private Nullable`1<int> precision;
    private Nullable`1<int> scale;
    public Nullable`1<int> Precision { get; }
    public Nullable`1<int> Scale { get; }
    public EdmDecimalTypeReference(IEdmPrimitiveType definition, bool isNullable);
    public EdmDecimalTypeReference(IEdmPrimitiveType definition, bool isNullable, Nullable`1<int> precision, Nullable`1<int> scale);
    public sealed virtual Nullable`1<int> get_Precision();
    public sealed virtual Nullable`1<int> get_Scale();
}
public abstract class Microsoft.OData.Edm.EdmElement : object {
}
[ExtensionAttribute]
public static class Microsoft.OData.Edm.EdmElementComparer : object {
    [ExtensionAttribute]
public static bool IsEquivalentTo(IEdmType thisType, IEdmType otherType);
    [ExtensionAttribute]
public static bool IsEquivalentTo(IEdmTypeReference thisType, IEdmTypeReference otherType);
    [ExtensionAttribute]
private static bool IsEquivalentTo(IEdmPrimitiveType thisType, IEdmPrimitiveType otherType);
    [ExtensionAttribute]
private static bool IsEquivalentTo(IEdmEnumType thisType, IEdmEnumType otherType);
    [ExtensionAttribute]
private static bool IsEquivalentTo(IEdmSchemaType thisType, IEdmSchemaType otherType);
    [ExtensionAttribute]
private static bool IsEquivalentTo(IEdmCollectionType thisType, IEdmCollectionType otherType);
    [ExtensionAttribute]
private static bool IsEquivalentTo(IEdmEntityReferenceType thisType, IEdmEntityReferenceType otherType);
    [ExtensionAttribute]
private static bool IsEquivalentTo(IEdmPrimitiveTypeReference thisType, IEdmPrimitiveTypeReference otherType);
    [ExtensionAttribute]
private static bool IsEquivalentTo(IEdmBinaryTypeReference thisType, IEdmBinaryTypeReference otherType);
    [ExtensionAttribute]
private static bool IsEquivalentTo(IEdmDecimalTypeReference thisType, IEdmDecimalTypeReference otherType);
    [ExtensionAttribute]
private static bool IsEquivalentTo(IEdmTemporalTypeReference thisType, IEdmTemporalTypeReference otherType);
    [ExtensionAttribute]
private static bool IsEquivalentTo(IEdmStringTypeReference thisType, IEdmStringTypeReference otherType);
    [ExtensionAttribute]
private static bool IsEquivalentTo(IEdmSpatialTypeReference thisType, IEdmSpatialTypeReference otherType);
}
public class Microsoft.OData.Edm.EdmEntityContainer : EdmElement {
    private string namespaceName;
    private string name;
    private string fullName;
    private List`1<IEdmEntityContainerElement> containerElements;
    private Dictionary`2<string, IEdmEntitySet> entitySetDictionary;
    private Dictionary`2<string, IEdmSingleton> singletonDictionary;
    private Dictionary`2<string, object> operationImportDictionary;
    public IEnumerable`1<IEdmEntityContainerElement> Elements { get; }
    public string Namespace { get; }
    public string Name { get; }
    public string FullName { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public EdmEntityContainer(string namespaceName, string name);
    public sealed virtual IEnumerable`1<IEdmEntityContainerElement> get_Elements();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_Name();
    public sealed virtual string get_FullName();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public void AddElement(IEdmEntityContainerElement element);
    public virtual EdmEntitySet AddEntitySet(string name, IEdmEntityType elementType);
    public virtual EdmEntitySet AddEntitySet(string name, IEdmEntityType elementType, bool includeInServiceDocument);
    public virtual EdmSingleton AddSingleton(string name, IEdmEntityType entityType);
    public virtual EdmFunctionImport AddFunctionImport(IEdmFunction function);
    public virtual EdmFunctionImport AddFunctionImport(string name, IEdmFunction function);
    public virtual EdmFunctionImport AddFunctionImport(string name, IEdmFunction function, IEdmExpression entitySet);
    public virtual EdmOperationImport AddFunctionImport(string name, IEdmFunction function, IEdmExpression entitySet, bool includeInServiceDocument);
    public virtual EdmActionImport AddActionImport(string name, IEdmAction action, IEdmExpression entitySet);
    public virtual EdmActionImport AddActionImport(IEdmAction action);
    public virtual EdmActionImport AddActionImport(string name, IEdmAction action);
    public virtual IEdmEntitySet FindEntitySet(string setName);
    public virtual IEdmSingleton FindSingleton(string singletonName);
    public sealed virtual IEnumerable`1<IEdmOperationImport> FindOperationImports(string operationName);
}
public class Microsoft.OData.Edm.EdmEntityReferenceType : EdmType {
    private IEdmEntityType entityType;
    public EdmTypeKind TypeKind { get; }
    public IEdmEntityType EntityType { get; }
    public EdmEntityReferenceType(IEdmEntityType entityType);
    public virtual EdmTypeKind get_TypeKind();
    public sealed virtual IEdmEntityType get_EntityType();
}
public class Microsoft.OData.Edm.EdmEntityReferenceTypeReference : EdmTypeReference {
    public IEdmEntityReferenceType EntityReferenceDefinition { get; }
    public EdmEntityReferenceTypeReference(IEdmEntityReferenceType entityReferenceType, bool isNullable);
    public IEdmEntityReferenceType get_EntityReferenceDefinition();
}
public class Microsoft.OData.Edm.EdmEntitySet : EdmEntitySetBase {
    private IEdmEntityContainer container;
    private IEdmCollectionType type;
    private IEdmPathExpression path;
    private bool includeInServiceDocument;
    public EdmContainerElementKind ContainerElementKind { get; }
    public IEdmEntityContainer Container { get; }
    public IEdmType Type { get; }
    public IEdmPathExpression Path { get; }
    public bool IncludeInServiceDocument { get; }
    public EdmEntitySet(IEdmEntityContainer container, string name, IEdmEntityType elementType);
    public EdmEntitySet(IEdmEntityContainer container, string name, IEdmEntityType elementType, bool includeInServiceDocument);
    public sealed virtual EdmContainerElementKind get_ContainerElementKind();
    public sealed virtual IEdmEntityContainer get_Container();
    public virtual IEdmType get_Type();
    public virtual IEdmPathExpression get_Path();
    public sealed virtual bool get_IncludeInServiceDocument();
}
public abstract class Microsoft.OData.Edm.EdmEntitySetBase : EdmNavigationSource {
    private IEdmCollectionType type;
    public IEdmType Type { get; }
    protected EdmEntitySetBase(string name, IEdmEntityType elementType);
    public virtual IEdmType get_Type();
}
public class Microsoft.OData.Edm.EdmEntityType : EdmStructuredType {
    private string namespaceName;
    private string name;
    private string fullName;
    private bool hasStream;
    private List`1<IEdmStructuralProperty> declaredKey;
    public IEnumerable`1<IEdmStructuralProperty> DeclaredKey { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public string Namespace { get; }
    public string Name { get; }
    public string FullName { get; }
    public EdmTypeKind TypeKind { get; }
    public bool HasStream { get; }
    public EdmEntityType(string namespaceName, string name);
    public EdmEntityType(string namespaceName, string name, IEdmEntityType baseType);
    public EdmEntityType(string namespaceName, string name, IEdmEntityType baseType, bool isAbstract, bool isOpen);
    public EdmEntityType(string namespaceName, string name, IEdmEntityType baseType, bool isAbstract, bool isOpen, bool hasStream);
    public virtual IEnumerable`1<IEdmStructuralProperty> get_DeclaredKey();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_Name();
    public sealed virtual string get_FullName();
    public virtual EdmTypeKind get_TypeKind();
    public sealed virtual bool get_HasStream();
    public void AddKeys(IEdmStructuralProperty[] keyProperties);
    public void AddKeys(IEnumerable`1<IEdmStructuralProperty> keyProperties);
    public EdmNavigationProperty AddBidirectionalNavigation(EdmNavigationPropertyInfo propertyInfo, EdmNavigationPropertyInfo partnerInfo);
    [SuppressMessageAttribute("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
public void SetNavigationPropertyPartner(EdmNavigationProperty navigationProperty, IEdmPathExpression navigationPropertyPath, EdmNavigationProperty partnerNavigationProperty, IEdmPathExpression partnerNavigationPropertyPath);
    private EdmNavigationPropertyInfo FixUpDefaultPartnerInfo(EdmNavigationPropertyInfo propertyInfo, EdmNavigationPropertyInfo partnerInfo);
}
public class Microsoft.OData.Edm.EdmEntityTypeReference : EdmTypeReference {
    public EdmEntityTypeReference(IEdmEntityType entityType, bool isNullable);
}
public class Microsoft.OData.Edm.EdmEnumMember : EdmNamedElement {
    private IEdmEnumType declaringType;
    private IEdmEnumMemberValue value;
    public IEdmEnumType DeclaringType { get; }
    public IEdmEnumMemberValue Value { get; }
    public EdmEnumMember(IEdmEnumType declaringType, string name, IEdmEnumMemberValue value);
    public sealed virtual IEdmEnumType get_DeclaringType();
    public sealed virtual IEdmEnumMemberValue get_Value();
}
public class Microsoft.OData.Edm.EdmEnumMemberValue : object {
    private long value;
    public long Value { get; }
    public EdmEnumMemberValue(long value);
    public sealed virtual long get_Value();
}
public class Microsoft.OData.Edm.EdmEnumType : EdmType {
    private IEdmPrimitiveType underlyingType;
    private string namespaceName;
    private string name;
    private string fullName;
    private bool isFlags;
    private List`1<IEdmEnumMember> members;
    public EdmTypeKind TypeKind { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public string Namespace { get; }
    public string Name { get; }
    public string FullName { get; }
    public IEdmPrimitiveType UnderlyingType { get; }
    public IEnumerable`1<IEdmEnumMember> Members { get; }
    public bool IsFlags { get; }
    public EdmEnumType(string namespaceName, string name);
    public EdmEnumType(string namespaceName, string name, bool isFlags);
    public EdmEnumType(string namespaceName, string name, EdmPrimitiveTypeKind underlyingType, bool isFlags);
    public EdmEnumType(string namespaceName, string name, IEdmPrimitiveType underlyingType, bool isFlags);
    public virtual EdmTypeKind get_TypeKind();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_Name();
    public sealed virtual string get_FullName();
    public sealed virtual IEdmPrimitiveType get_UnderlyingType();
    public virtual IEnumerable`1<IEdmEnumMember> get_Members();
    public sealed virtual bool get_IsFlags();
    public void AddMember(IEdmEnumMember member);
    public EdmEnumMember AddMember(string name, IEdmEnumMemberValue value);
}
public class Microsoft.OData.Edm.EdmEnumTypeReference : EdmTypeReference {
    public EdmEnumTypeReference(IEdmEnumType enumType, bool isNullable);
}
public enum Microsoft.OData.Edm.EdmExpressionKind : Enum {
    public int value__;
    public static EdmExpressionKind None;
    public static EdmExpressionKind BinaryConstant;
    public static EdmExpressionKind BooleanConstant;
    public static EdmExpressionKind DateTimeOffsetConstant;
    public static EdmExpressionKind DecimalConstant;
    public static EdmExpressionKind FloatingConstant;
    public static EdmExpressionKind GuidConstant;
    public static EdmExpressionKind IntegerConstant;
    public static EdmExpressionKind StringConstant;
    public static EdmExpressionKind DurationConstant;
    public static EdmExpressionKind Null;
    public static EdmExpressionKind Record;
    public static EdmExpressionKind Collection;
    public static EdmExpressionKind Path;
    public static EdmExpressionKind If;
    public static EdmExpressionKind Cast;
    public static EdmExpressionKind IsOf;
    public static EdmExpressionKind FunctionApplication;
    public static EdmExpressionKind LabeledExpressionReference;
    public static EdmExpressionKind Labeled;
    public static EdmExpressionKind PropertyPath;
    public static EdmExpressionKind NavigationPropertyPath;
    public static EdmExpressionKind DateConstant;
    public static EdmExpressionKind TimeOfDayConstant;
    public static EdmExpressionKind EnumMember;
    public static EdmExpressionKind AnnotationPath;
}
public class Microsoft.OData.Edm.EdmFunction : EdmOperation {
    [CompilerGeneratedAttribute]
private bool <IsComposable>k__BackingField;
    public EdmSchemaElementKind SchemaElementKind { get; }
    public bool IsComposable { get; private set; }
    public EdmFunction(string namespaceName, string name, IEdmTypeReference returnType, bool isBound, IEdmPathExpression entitySetPathExpression, bool isComposable);
    public EdmFunction(string namespaceName, string name, IEdmTypeReference returnType);
    public virtual EdmSchemaElementKind get_SchemaElementKind();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsComposable();
    [CompilerGeneratedAttribute]
private void set_IsComposable(bool value);
}
public class Microsoft.OData.Edm.EdmFunctionImport : EdmOperationImport {
    private static string FunctionArgumentNullParameterName;
    [CompilerGeneratedAttribute]
private IEdmFunction <Function>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeInServiceDocument>k__BackingField;
    public IEdmFunction Function { get; private set; }
    public EdmContainerElementKind ContainerElementKind { get; }
    public bool IncludeInServiceDocument { get; private set; }
    public EdmFunctionImport(IEdmEntityContainer container, string name, IEdmFunction function);
    public EdmFunctionImport(IEdmEntityContainer container, string name, IEdmFunction function, IEdmExpression entitySetExpression, bool includeInServiceDocument);
    [CompilerGeneratedAttribute]
public sealed virtual IEdmFunction get_Function();
    [CompilerGeneratedAttribute]
private void set_Function(IEdmFunction value);
    public virtual EdmContainerElementKind get_ContainerElementKind();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeInServiceDocument();
    [CompilerGeneratedAttribute]
private void set_IncludeInServiceDocument(bool value);
    protected virtual string OperationArgumentNullParameterName();
}
public class Microsoft.OData.Edm.EdmInclude : object {
    private string alias;
    private string namespaceIncluded;
    public string Alias { get; }
    public string Namespace { get; }
    public EdmInclude(string alias, string namespaceIncluded);
    public sealed virtual string get_Alias();
    public sealed virtual string get_Namespace();
}
public class Microsoft.OData.Edm.EdmIncludeAnnotations : object {
    private string termNamespace;
    private string qualifier;
    private string targetNamespace;
    public string TermNamespace { get; }
    public string Qualifier { get; }
    public string TargetNamespace { get; }
    public EdmIncludeAnnotations(string termNamespace, string qualifier, string targetNamespace);
    public sealed virtual string get_TermNamespace();
    public sealed virtual string get_Qualifier();
    public sealed virtual string get_TargetNamespace();
}
[FlagsAttribute]
public enum Microsoft.OData.Edm.EdmLibraryCompatibility : Enum {
    public int value__;
    public static EdmLibraryCompatibility None;
    public static EdmLibraryCompatibility UseLegacyVariableCasing;
}
public abstract class Microsoft.OData.Edm.EdmLocation : object {
    public abstract virtual string ToString();
}
public class Microsoft.OData.Edm.EdmModel : EdmModelBase {
    private List`1<IEdmSchemaElement> elements;
    private Dictionary`2<IEdmVocabularyAnnotatable, List`1<IEdmVocabularyAnnotation>> vocabularyAnnotationsDictionary;
    private Dictionary`2<IEdmStructuredType, List`1<IEdmStructuredType>> derivedTypeMappings;
    private HashSet`1<string> declaredNamespaces;
    public IEnumerable`1<IEdmSchemaElement> SchemaElements { get; }
    public IEnumerable`1<string> DeclaredNamespaces { get; }
    public IEnumerable`1<IEdmVocabularyAnnotation> VocabularyAnnotations { get; }
    public EdmModel(bool includeDefaultVocabularies);
    public virtual IEnumerable`1<IEdmSchemaElement> get_SchemaElements();
    public virtual IEnumerable`1<string> get_DeclaredNamespaces();
    public virtual IEnumerable`1<IEdmVocabularyAnnotation> get_VocabularyAnnotations();
    public void AddReferencedModel(IEdmModel model);
    public void AddElement(IEdmSchemaElement element);
    public void AddElements(IEnumerable`1<IEdmSchemaElement> newElements);
    public void AddVocabularyAnnotation(IEdmVocabularyAnnotation annotation);
    public virtual IEnumerable`1<IEdmVocabularyAnnotation> FindDeclaredVocabularyAnnotations(IEdmVocabularyAnnotatable element);
    public virtual IEnumerable`1<IEdmStructuredType> FindDirectlyDerivedTypes(IEdmStructuredType baseType);
    public void SetVocabularyAnnotation(IEdmVocabularyAnnotation annotation);
}
public abstract class Microsoft.OData.Edm.EdmModelBase : EdmElement {
    private List`1<IEdmModel> referencedEdmModels;
    private IEdmDirectValueAnnotationsManager annotationsManager;
    private Dictionary`2<string, IEdmEntityContainer> containersDictionary;
    private Dictionary`2<string, IEdmSchemaType> schemaTypeDictionary;
    private Dictionary`2<string, IEdmTerm> termDictionary;
    private Dictionary`2<string, IList`1<IEdmOperation>> functionDictionary;
    private ConcurrentDictionary`2<string, IList`1<IEdmOperation>> bindableOperationsCache;
    public IEnumerable`1<IEdmSchemaElement> SchemaElements { get; }
    public IEnumerable`1<string> DeclaredNamespaces { get; }
    public IEnumerable`1<IEdmVocabularyAnnotation> VocabularyAnnotations { get; }
    public IEnumerable`1<IEdmModel> ReferencedModels { get; }
    public IEdmDirectValueAnnotationsManager DirectValueAnnotationsManager { get; }
    public IEdmEntityContainer EntityContainer { get; }
    protected EdmModelBase(IEnumerable`1<IEdmModel> referencedModels, IEdmDirectValueAnnotationsManager annotationsManager);
    protected EdmModelBase(IEnumerable`1<IEdmModel> referencedModels, IEdmDirectValueAnnotationsManager annotationsManager, bool includeDefaultVocabularies);
    public abstract virtual IEnumerable`1<IEdmSchemaElement> get_SchemaElements();
    public abstract virtual IEnumerable`1<string> get_DeclaredNamespaces();
    public virtual IEnumerable`1<IEdmVocabularyAnnotation> get_VocabularyAnnotations();
    public sealed virtual IEnumerable`1<IEdmModel> get_ReferencedModels();
    public sealed virtual IEdmDirectValueAnnotationsManager get_DirectValueAnnotationsManager();
    public sealed virtual IEdmEntityContainer get_EntityContainer();
    public sealed virtual IEdmSchemaType FindDeclaredType(string qualifiedName);
    public sealed virtual IEdmTerm FindDeclaredTerm(string qualifiedName);
    public sealed virtual IEnumerable`1<IEdmOperation> FindDeclaredOperations(string qualifiedName);
    public virtual IEnumerable`1<IEdmOperation> FindDeclaredBoundOperations(IEdmType bindingType);
    public virtual IEnumerable`1<IEdmOperation> FindDeclaredBoundOperations(string qualifiedName, IEdmType bindingType);
    public virtual IEnumerable`1<IEdmVocabularyAnnotation> FindDeclaredVocabularyAnnotations(IEdmVocabularyAnnotatable element);
    public abstract virtual IEnumerable`1<IEdmStructuredType> FindDirectlyDerivedTypes(IEdmStructuredType baseType);
    protected void RegisterElement(IEdmSchemaElement element);
    protected void AddReferencedModel(IEdmModel model);
}
internal abstract class Microsoft.OData.Edm.EdmModelVisitor : object {
    protected IEdmModel Model;
    protected EdmModelVisitor(IEdmModel model);
    public void VisitEdmModel();
    public void VisitSchemaElements(IEnumerable`1<IEdmSchemaElement> elements);
    public void VisitSchemaElement(IEdmSchemaElement element);
    public void VisitAnnotations(IEnumerable`1<IEdmDirectValueAnnotation> annotations);
    public void VisitVocabularyAnnotations(IEnumerable`1<IEdmVocabularyAnnotation> annotations);
    public void VisitAnnotation(IEdmDirectValueAnnotation annotation);
    public void VisitVocabularyAnnotation(IEdmVocabularyAnnotation annotation);
    public void VisitPropertyValueBindings(IEnumerable`1<IEdmPropertyValueBinding> bindings);
    public void VisitExpressions(IEnumerable`1<IEdmExpression> expressions);
    public void VisitExpression(IEdmExpression expression);
    public void VisitPropertyConstructors(IEnumerable`1<IEdmPropertyConstructor> constructor);
    public virtual void VisitEntityContainerElements(IEnumerable`1<IEdmEntityContainerElement> elements);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<VisitEntityContainerElementsAsync>d__14")]
public virtual Task VisitEntityContainerElementsAsync(IEnumerable`1<IEdmEntityContainerElement> elements);
    public void VisitTypeReference(IEdmTypeReference reference);
    public void VisitPrimitiveTypeReference(IEdmPrimitiveTypeReference reference);
    public void VisitSchemaType(IEdmType definition);
    public void VisitProperties(IEnumerable`1<IEdmProperty> properties);
    public void VisitProperty(IEdmProperty property);
    public void VisitEnumMembers(IEnumerable`1<IEdmEnumMember> enumMembers);
    public void VisitEnumMember(IEdmEnumMember enumMember);
    public void VisitOperationParameters(IEnumerable`1<IEdmOperationParameter> parameters);
    protected static void VisitCollection(IEnumerable`1<T> collection, Action`1<T> visitMethod);
    protected virtual void ProcessModel(IEdmModel model);
    protected virtual void ProcessElement(IEdmElement element);
    protected virtual Task ProcessElementAsync(IEdmElement element);
    protected virtual void ProcessNamedElement(IEdmNamedElement element);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessNamedElementAsync>d__28")]
protected virtual Task ProcessNamedElementAsync(IEdmNamedElement element);
    protected virtual void ProcessSchemaElement(IEdmSchemaElement element);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessSchemaElementAsync>d__30")]
protected virtual Task ProcessSchemaElementAsync(IEdmSchemaElement element);
    protected virtual void ProcessVocabularyAnnotatable(IEdmVocabularyAnnotatable annotatable);
    protected virtual Task ProcessVocabularyAnnotatableAsync(IEdmVocabularyAnnotatable annotatable);
    protected virtual void ProcessComplexTypeReference(IEdmComplexTypeReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessComplexTypeReferenceAsync>d__34")]
protected virtual Task ProcessComplexTypeReferenceAsync(IEdmComplexTypeReference reference);
    protected virtual void ProcessEntityTypeReference(IEdmEntityTypeReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessEntityTypeReferenceAsync>d__36")]
protected virtual Task ProcessEntityTypeReferenceAsync(IEdmEntityTypeReference reference);
    protected virtual void ProcessEntityReferenceTypeReference(IEdmEntityReferenceTypeReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessEntityReferenceTypeReferenceAsync>d__38")]
protected virtual Task ProcessEntityReferenceTypeReferenceAsync(IEdmEntityReferenceTypeReference reference);
    protected virtual void ProcessCollectionTypeReference(IEdmCollectionTypeReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessCollectionTypeReferenceAsync>d__40")]
protected virtual Task ProcessCollectionTypeReferenceAsync(IEdmCollectionTypeReference reference);
    protected virtual void ProcessEnumTypeReference(IEdmEnumTypeReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessEnumTypeReferenceAsync>d__42")]
protected virtual Task ProcessEnumTypeReferenceAsync(IEdmEnumTypeReference reference);
    protected virtual void ProcessTypeDefinitionReference(IEdmTypeDefinitionReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessTypeDefinitionReferenceAsync>d__44")]
protected virtual Task ProcessTypeDefinitionReferenceAsync(IEdmTypeDefinitionReference reference);
    protected virtual void ProcessBinaryTypeReference(IEdmBinaryTypeReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessBinaryTypeReferenceAsync>d__46")]
protected virtual Task ProcessBinaryTypeReferenceAsync(IEdmBinaryTypeReference reference);
    protected virtual void ProcessDecimalTypeReference(IEdmDecimalTypeReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessDecimalTypeReferenceAsync>d__48")]
protected virtual Task ProcessDecimalTypeReferenceAsync(IEdmDecimalTypeReference reference);
    protected virtual void ProcessSpatialTypeReference(IEdmSpatialTypeReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessSpatialTypeReferenceAsync>d__50")]
protected virtual Task ProcessSpatialTypeReferenceAsync(IEdmSpatialTypeReference reference);
    protected virtual void ProcessStringTypeReference(IEdmStringTypeReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessStringTypeReferenceAsync>d__52")]
protected virtual Task ProcessStringTypeReferenceAsync(IEdmStringTypeReference reference);
    protected virtual void ProcessTemporalTypeReference(IEdmTemporalTypeReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessTemporalTypeReferenceAsync>d__54")]
protected virtual Task ProcessTemporalTypeReferenceAsync(IEdmTemporalTypeReference reference);
    protected virtual void ProcessPrimitiveTypeReference(IEdmPrimitiveTypeReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessPrimitiveTypeReferenceAsync>d__56")]
protected virtual Task ProcessPrimitiveTypeReferenceAsync(IEdmPrimitiveTypeReference reference);
    protected virtual void ProcessStructuredTypeReference(IEdmStructuredTypeReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessStructuredTypeReferenceAsync>d__58")]
protected virtual Task ProcessStructuredTypeReferenceAsync(IEdmStructuredTypeReference reference);
    protected virtual void ProcessTypeReference(IEdmTypeReference element);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessTypeReferenceAsync>d__60")]
protected virtual Task ProcessTypeReferenceAsync(IEdmTypeReference element);
    protected virtual void ProcessPathTypeReference(IEdmPathTypeReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessPathTypeReferenceAsync>d__62")]
protected virtual Task ProcessPathTypeReferenceAsync(IEdmPathTypeReference reference);
    protected virtual void ProcessUntypedTypeReference(IEdmUntypedTypeReference reference);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessUntypedTypeReferenceAsync>d__64")]
protected virtual Task ProcessUntypedTypeReferenceAsync(IEdmUntypedTypeReference reference);
    protected virtual void ProcessTerm(IEdmTerm term);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessTermAsync>d__66")]
protected virtual Task ProcessTermAsync(IEdmTerm term);
    protected virtual void ProcessComplexType(IEdmComplexType definition);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessComplexTypeAsync>d__68")]
protected virtual Task ProcessComplexTypeAsync(IEdmComplexType definition);
    protected virtual void ProcessEntityType(IEdmEntityType definition);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessEntityTypeAsync>d__70")]
protected virtual Task ProcessEntityTypeAsync(IEdmEntityType definition);
    protected virtual void ProcessCollectionType(IEdmCollectionType definition);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessCollectionTypeAsync>d__72")]
protected virtual Task ProcessCollectionTypeAsync(IEdmCollectionType definition);
    protected virtual void ProcessEnumType(IEdmEnumType definition);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessEnumTypeAsync>d__74")]
protected virtual Task ProcessEnumTypeAsync(IEdmEnumType definition);
    protected virtual void ProcessTypeDefinition(IEdmTypeDefinition definition);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessTypeDefinitionAsync>d__76")]
protected virtual Task ProcessTypeDefinitionAsync(IEdmTypeDefinition definition);
    protected virtual void ProcessEntityReferenceType(IEdmEntityReferenceType definition);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessEntityReferenceTypeAsync>d__78")]
protected virtual Task ProcessEntityReferenceTypeAsync(IEdmEntityReferenceType definition);
    protected virtual void ProcessStructuredType(IEdmStructuredType definition);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessStructuredTypeAsync>d__80")]
protected virtual Task ProcessStructuredTypeAsync(IEdmStructuredType definition);
    protected virtual void ProcessSchemaType(IEdmSchemaType type);
    protected virtual Task ProcessSchemaTypeAsync(IEdmSchemaType type);
    protected virtual void ProcessType(IEdmType definition);
    protected virtual Task ProcessTypeAsync(IEdmType definition);
    protected virtual void ProcessNavigationProperty(IEdmNavigationProperty property);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessNavigationPropertyAsync>d__86")]
protected virtual Task ProcessNavigationPropertyAsync(IEdmNavigationProperty property);
    protected virtual void ProcessStructuralProperty(IEdmStructuralProperty property);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessStructuralPropertyAsync>d__88")]
protected virtual Task ProcessStructuralPropertyAsync(IEdmStructuralProperty property);
    protected virtual void ProcessProperty(IEdmProperty property);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessPropertyAsync>d__90")]
protected virtual Task ProcessPropertyAsync(IEdmProperty property);
    protected virtual void ProcessEnumMember(IEdmEnumMember enumMember);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessEnumMemberAsync>d__92")]
protected virtual Task ProcessEnumMemberAsync(IEdmEnumMember enumMember);
    protected virtual void ProcessVocabularyAnnotation(IEdmVocabularyAnnotation annotation);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessVocabularyAnnotationAsync>d__94")]
protected virtual Task ProcessVocabularyAnnotationAsync(IEdmVocabularyAnnotation annotation);
    protected virtual void ProcessImmediateValueAnnotation(IEdmDirectValueAnnotation annotation);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessImmediateValueAnnotationAsync>d__96")]
protected virtual Task ProcessImmediateValueAnnotationAsync(IEdmDirectValueAnnotation annotation);
    protected virtual void ProcessAnnotation(IEdmVocabularyAnnotation annotation);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessAnnotationAsync>d__98")]
protected virtual Task ProcessAnnotationAsync(IEdmVocabularyAnnotation annotation);
    protected virtual void ProcessPropertyValueBinding(IEdmPropertyValueBinding binding);
    protected virtual void ProcessExpression(IEdmExpression expression);
    protected virtual Task ProcessExpressionAsync(IEdmExpression expression);
    protected virtual void ProcessStringConstantExpression(IEdmStringConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessStringConstantExpressionAsync>d__103")]
protected virtual Task ProcessStringConstantExpressionAsync(IEdmStringConstantExpression expression);
    protected virtual void ProcessBinaryConstantExpression(IEdmBinaryConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessBinaryConstantExpressionAsync>d__105")]
protected virtual Task ProcessBinaryConstantExpressionAsync(IEdmBinaryConstantExpression expression);
    protected virtual void ProcessRecordExpression(IEdmRecordExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessRecordExpressionAsync>d__107")]
protected virtual Task ProcessRecordExpressionAsync(IEdmRecordExpression expression);
    protected virtual void ProcessPathExpression(IEdmPathExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessPathExpressionAsync>d__109")]
protected virtual Task ProcessPathExpressionAsync(IEdmPathExpression expression);
    protected virtual void ProcessPropertyPathExpression(IEdmPathExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessPropertyPathExpressionAsync>d__111")]
protected virtual Task ProcessPropertyPathExpressionAsync(IEdmPathExpression expression);
    protected virtual void ProcessNavigationPropertyPathExpression(IEdmPathExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessNavigationPropertyPathExpressionAsync>d__113")]
protected virtual Task ProcessNavigationPropertyPathExpressionAsync(IEdmPathExpression expression);
    protected virtual void ProcessAnnotationPathExpression(IEdmPathExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessAnnotationPathExpressionAsync>d__115")]
protected virtual Task ProcessAnnotationPathExpressionAsync(IEdmPathExpression expression);
    protected virtual void ProcessCollectionExpression(IEdmCollectionExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessCollectionExpressionAsync>d__117")]
protected virtual Task ProcessCollectionExpressionAsync(IEdmCollectionExpression expression);
    protected virtual void ProcessLabeledExpressionReferenceExpression(IEdmLabeledExpressionReferenceExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessLabeledExpressionReferenceExpressionAsync>d__119")]
protected virtual Task ProcessLabeledExpressionReferenceExpressionAsync(IEdmLabeledExpressionReferenceExpression expression);
    protected virtual void ProcessIsOfExpression(IEdmIsOfExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessIsOfExpressionAsync>d__121")]
protected virtual Task ProcessIsOfExpressionAsync(IEdmIsOfExpression expression);
    protected virtual void ProcessIntegerConstantExpression(IEdmIntegerConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessIntegerConstantExpressionAsync>d__123")]
protected virtual Task ProcessIntegerConstantExpressionAsync(IEdmIntegerConstantExpression expression);
    protected virtual void ProcessIfExpression(IEdmIfExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessIfExpressionAsync>d__125")]
protected virtual Task ProcessIfExpressionAsync(IEdmIfExpression expression);
    protected virtual void ProcessFunctionApplicationExpression(IEdmApplyExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessFunctionApplicationExpressionAsync>d__127")]
protected virtual Task ProcessFunctionApplicationExpressionAsync(IEdmApplyExpression expression);
    protected virtual void ProcessFloatingConstantExpression(IEdmFloatingConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessFloatingConstantExpressionAsync>d__129")]
protected virtual Task ProcessFloatingConstantExpressionAsync(IEdmFloatingConstantExpression expression);
    protected virtual void ProcessGuidConstantExpression(IEdmGuidConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessGuidConstantExpressionAsync>d__131")]
protected virtual Task ProcessGuidConstantExpressionAsync(IEdmGuidConstantExpression expression);
    protected virtual void ProcessEnumMemberExpression(IEdmEnumMemberExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessEnumMemberExpressionAsync>d__133")]
protected virtual Task ProcessEnumMemberExpressionAsync(IEdmEnumMemberExpression expression);
    protected virtual void ProcessDecimalConstantExpression(IEdmDecimalConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessDecimalConstantExpressionAsync>d__135")]
protected virtual Task ProcessDecimalConstantExpressionAsync(IEdmDecimalConstantExpression expression);
    protected virtual void ProcessDateConstantExpression(IEdmDateConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessDateConstantExpressionAsync>d__137")]
protected virtual Task ProcessDateConstantExpressionAsync(IEdmDateConstantExpression expression);
    protected virtual void ProcessTimeOfDayConstantExpression(IEdmTimeOfDayConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessTimeOfDayConstantExpressionAsync>d__139")]
protected virtual Task ProcessTimeOfDayConstantExpressionAsync(IEdmTimeOfDayConstantExpression expression);
    protected virtual void ProcessDateTimeOffsetConstantExpression(IEdmDateTimeOffsetConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessDateTimeOffsetConstantExpressionAsync>d__141")]
protected virtual Task ProcessDateTimeOffsetConstantExpressionAsync(IEdmDateTimeOffsetConstantExpression expression);
    protected virtual void ProcessDurationConstantExpression(IEdmDurationConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessDurationConstantExpressionAsync>d__143")]
protected virtual Task ProcessDurationConstantExpressionAsync(IEdmDurationConstantExpression expression);
    protected virtual void ProcessBooleanConstantExpression(IEdmBooleanConstantExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessBooleanConstantExpressionAsync>d__145")]
protected virtual Task ProcessBooleanConstantExpressionAsync(IEdmBooleanConstantExpression expression);
    protected virtual void ProcessCastExpression(IEdmCastExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessCastExpressionAsync>d__147")]
protected virtual Task ProcessCastExpressionAsync(IEdmCastExpression expression);
    protected virtual void ProcessLabeledExpression(IEdmLabeledExpression element);
    protected virtual Task ProcessLabeledExpressionAsync(IEdmLabeledExpression element);
    protected virtual void ProcessPropertyConstructor(IEdmPropertyConstructor constructor);
    protected virtual Task ProcessPropertyConstructorAsync(IEdmPropertyConstructor constructor);
    protected virtual void ProcessNullConstantExpression(IEdmNullExpression expression);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessNullConstantExpressionAsync>d__153")]
protected virtual Task ProcessNullConstantExpressionAsync(IEdmNullExpression expression);
    protected virtual void ProcessEntityContainer(IEdmEntityContainer container);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessEntityContainerAsync>d__155")]
protected virtual Task ProcessEntityContainerAsync(IEdmEntityContainer container);
    protected virtual void ProcessEntityContainerElement(IEdmEntityContainerElement element);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessEntityContainerElementAsync>d__157")]
protected virtual Task ProcessEntityContainerElementAsync(IEdmEntityContainerElement element);
    protected virtual void ProcessEntitySet(IEdmEntitySet set);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessEntitySetAsync>d__159")]
protected virtual Task ProcessEntitySetAsync(IEdmEntitySet set);
    protected virtual void ProcessSingleton(IEdmSingleton singleton);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessSingletonAsync>d__161")]
protected virtual Task ProcessSingletonAsync(IEdmSingleton singleton);
    protected virtual void ProcessAction(IEdmAction action);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessActionAsync>d__163")]
protected virtual Task ProcessActionAsync(IEdmAction action);
    protected virtual void ProcessFunction(IEdmFunction function);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessFunctionAsync>d__165")]
protected virtual Task ProcessFunctionAsync(IEdmFunction function);
    protected virtual void ProcessActionImport(IEdmActionImport actionImport);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessActionImportAsync>d__167")]
protected virtual Task ProcessActionImportAsync(IEdmActionImport actionImport);
    protected virtual void ProcessFunctionImport(IEdmFunctionImport functionImport);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessFunctionImportAsync>d__169")]
protected virtual Task ProcessFunctionImportAsync(IEdmFunctionImport functionImport);
    protected virtual void ProcessOperation(IEdmOperation operation);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessOperationAsync>d__171")]
protected virtual Task ProcessOperationAsync(IEdmOperation operation);
    protected virtual void ProcessOperationParameter(IEdmOperationParameter parameter);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessOperationParameterAsync>d__173")]
protected virtual Task ProcessOperationParameterAsync(IEdmOperationParameter parameter);
    protected virtual void ProcessOperationReturn(IEdmOperationReturn operationReturn);
    [AsyncStateMachineAttribute("Microsoft.OData.Edm.EdmModelVisitor/<ProcessOperationReturnAsync>d__175")]
protected virtual Task ProcessOperationReturnAsync(IEdmOperationReturn operationReturn);
}
public enum Microsoft.OData.Edm.EdmMultiplicity : Enum {
    public int value__;
    public static EdmMultiplicity Unknown;
    public static EdmMultiplicity ZeroOrOne;
    public static EdmMultiplicity One;
    public static EdmMultiplicity Many;
}
[DebuggerDisplayAttribute("Name:{Name}")]
public abstract class Microsoft.OData.Edm.EdmNamedElement : EdmElement {
    private string name;
    public string Name { get; }
    protected EdmNamedElement(string name);
    public sealed virtual string get_Name();
}
public class Microsoft.OData.Edm.EdmNavigationProperty : EdmProperty {
    private IEdmReferentialConstraint referentialConstraint;
    private bool containsTarget;
    private EdmOnDeleteAction onDelete;
    private IEdmNavigationProperty partner;
    [CompilerGeneratedAttribute]
private IEdmPathExpression <PartnerPath>k__BackingField;
    public EdmPropertyKind PropertyKind { get; }
    public bool ContainsTarget { get; }
    public IEdmReferentialConstraint ReferentialConstraint { get; }
    public EdmOnDeleteAction OnDelete { get; }
    public IEdmNavigationProperty Partner { get; }
    internal IEdmPathExpression PartnerPath { get; private set; }
    private EdmNavigationProperty(IEdmStructuredType declaringType, string name, IEdmTypeReference type, IEnumerable`1<IEdmStructuralProperty> dependentProperties, IEnumerable`1<IEdmStructuralProperty> principalProperties, bool containsTarget, EdmOnDeleteAction onDelete);
    public virtual EdmPropertyKind get_PropertyKind();
    public sealed virtual bool get_ContainsTarget();
    public sealed virtual IEdmReferentialConstraint get_ReferentialConstraint();
    public sealed virtual EdmOnDeleteAction get_OnDelete();
    public sealed virtual IEdmNavigationProperty get_Partner();
    [CompilerGeneratedAttribute]
internal IEdmPathExpression get_PartnerPath();
    [CompilerGeneratedAttribute]
private void set_PartnerPath(IEdmPathExpression value);
    public static EdmNavigationProperty CreateNavigationProperty(IEdmStructuredType declaringType, EdmNavigationPropertyInfo propertyInfo);
    public static EdmNavigationProperty CreateNavigationPropertyWithPartner(EdmNavigationPropertyInfo propertyInfo, EdmNavigationPropertyInfo partnerInfo);
    public static EdmNavigationProperty CreateNavigationPropertyWithPartner(string propertyName, IEdmTypeReference propertyType, IEnumerable`1<IEdmStructuralProperty> dependentProperties, IEnumerable`1<IEdmStructuralProperty> principalProperties, bool containsTarget, EdmOnDeleteAction onDelete, string partnerPropertyName, IEdmTypeReference partnerPropertyType, IEnumerable`1<IEdmStructuralProperty> partnerDependentProperties, IEnumerable`1<IEdmStructuralProperty> partnerPrincipalProperties, bool partnerContainsTarget, EdmOnDeleteAction partnerOnDelete);
    internal void SetPartner(IEdmNavigationProperty navigationProperty, IEdmPathExpression navigationPropertyPath);
    private static IEdmEntityType GetEntityType(IEdmTypeReference type);
    private static IEdmComplexType GetComplexType(IEdmTypeReference type);
    private static IEdmTypeReference CreateNavigationPropertyType(IEdmEntityType entityType, EdmMultiplicity multiplicity, string multiplicityParameterName);
}
public class Microsoft.OData.Edm.EdmNavigationPropertyBinding : object {
    private IEdmNavigationProperty navigationProperty;
    private IEdmNavigationSource target;
    private IEdmPathExpression path;
    public IEdmNavigationProperty NavigationProperty { get; }
    public IEdmNavigationSource Target { get; }
    public IEdmPathExpression Path { get; }
    public EdmNavigationPropertyBinding(IEdmNavigationProperty navigationProperty, IEdmNavigationSource target);
    public EdmNavigationPropertyBinding(IEdmNavigationProperty navigationProperty, IEdmNavigationSource target, IEdmPathExpression bindingPath);
    public sealed virtual IEdmNavigationProperty get_NavigationProperty();
    public sealed virtual IEdmNavigationSource get_Target();
    public sealed virtual IEdmPathExpression get_Path();
}
public class Microsoft.OData.Edm.EdmNavigationPropertyInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmEntityType <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private EdmMultiplicity <TargetMultiplicity>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IEdmStructuralProperty> <DependentProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IEdmStructuralProperty> <PrincipalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private EdmOnDeleteAction <OnDelete>k__BackingField;
    public string Name { get; public set; }
    public IEdmEntityType Target { get; public set; }
    public EdmMultiplicity TargetMultiplicity { get; public set; }
    public IEnumerable`1<IEdmStructuralProperty> DependentProperties { get; public set; }
    public IEnumerable`1<IEdmStructuralProperty> PrincipalProperties { get; public set; }
    public bool ContainsTarget { get; public set; }
    public EdmOnDeleteAction OnDelete { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IEdmEntityType get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(IEdmEntityType value);
    [CompilerGeneratedAttribute]
public EdmMultiplicity get_TargetMultiplicity();
    [CompilerGeneratedAttribute]
public void set_TargetMultiplicity(EdmMultiplicity value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IEdmStructuralProperty> get_DependentProperties();
    [CompilerGeneratedAttribute]
public void set_DependentProperties(IEnumerable`1<IEdmStructuralProperty> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IEdmStructuralProperty> get_PrincipalProperties();
    [CompilerGeneratedAttribute]
public void set_PrincipalProperties(IEnumerable`1<IEdmStructuralProperty> value);
    [CompilerGeneratedAttribute]
public bool get_ContainsTarget();
    [CompilerGeneratedAttribute]
public void set_ContainsTarget(bool value);
    [CompilerGeneratedAttribute]
public EdmOnDeleteAction get_OnDelete();
    [CompilerGeneratedAttribute]
public void set_OnDelete(EdmOnDeleteAction value);
    public EdmNavigationPropertyInfo Clone();
}
public abstract class Microsoft.OData.Edm.EdmNavigationSource : EdmNamedElement {
    private ConcurrentDictionary`2<IEdmNavigationProperty, ConcurrentDictionary`2<string, IEdmNavigationPropertyBinding>> navigationPropertyMappings;
    private ConcurrentDictionary`2<IEdmNavigationProperty, IEdmUnknownEntitySet> unknownNavigationPropertyCache;
    private Cache`2<EdmNavigationSource, IEnumerable`1<IEdmNavigationPropertyBinding>> navigationTargetsCache;
    private static Func`2<EdmNavigationSource, IEnumerable`1<IEdmNavigationPropertyBinding>> ComputeNavigationTargetsFunc;
    private IEdmEntityType entityType;
    private bool entityTypeSet;
    public IEnumerable`1<IEdmNavigationPropertyBinding> NavigationPropertyBindings { get; }
    public IEdmType Type { get; }
    public IEdmEntityType EntityType { get; }
    public IEdmPathExpression Path { get; }
    protected EdmNavigationSource(string name);
    private static EdmNavigationSource();
    public sealed virtual IEnumerable`1<IEdmNavigationPropertyBinding> get_NavigationPropertyBindings();
    public abstract virtual IEdmType get_Type();
    public sealed virtual IEdmEntityType get_EntityType();
    public abstract virtual IEdmPathExpression get_Path();
    public void AddNavigationTarget(IEdmNavigationProperty navigationProperty, IEdmNavigationSource target);
    public void AddNavigationTarget(IEdmNavigationProperty navigationProperty, IEdmNavigationSource target, IEdmPathExpression bindingPath);
    public virtual IEnumerable`1<IEdmNavigationPropertyBinding> FindNavigationPropertyBindings(IEdmNavigationProperty navigationProperty);
    public virtual IEdmNavigationSource FindNavigationTarget(IEdmNavigationProperty navigationProperty);
    public virtual IEdmNavigationSource FindNavigationTarget(IEdmNavigationProperty navigationProperty, IEdmPathExpression bindingPath);
    private IEdmNavigationPropertyBinding AddNavigationPropertyBinding(IEdmNavigationProperty navigationProperty, IEdmNavigationSource target, IEdmPathExpression bindingPath);
    private IEnumerable`1<IEdmNavigationPropertyBinding> ComputeNavigationTargets();
    [CompilerGeneratedAttribute]
private IEdmUnknownEntitySet <FindNavigationTarget>b__19_0(IEdmNavigationProperty navProperty);
}
public enum Microsoft.OData.Edm.EdmNavigationSourceKind : Enum {
    public int value__;
    public static EdmNavigationSourceKind None;
    public static EdmNavigationSourceKind EntitySet;
    public static EdmNavigationSourceKind Singleton;
    public static EdmNavigationSourceKind ContainedEntitySet;
    public static EdmNavigationSourceKind UnknownEntitySet;
}
public enum Microsoft.OData.Edm.EdmOnDeleteAction : Enum {
    public int value__;
    public static EdmOnDeleteAction None;
    public static EdmOnDeleteAction Cascade;
}
public abstract class Microsoft.OData.Edm.EdmOperation : EdmNamedElement {
    private string fullName;
    private List`1<IEdmOperationParameter> parameters;
    [CompilerGeneratedAttribute]
private bool <IsBound>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmPathExpression <EntitySetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmOperationReturn <Return>k__BackingField;
    public bool IsBound { get; private set; }
    public IEdmPathExpression EntitySetPath { get; private set; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public string Namespace { get; private set; }
    public string FullName { get; }
    public IEdmTypeReference ReturnType { get; }
    public IEnumerable`1<IEdmOperationParameter> Parameters { get; }
    internal IEdmOperationReturn Return { get; private set; }
    protected EdmOperation(string namespaceName, string name, IEdmTypeReference returnType, bool isBound, IEdmPathExpression entitySetPathExpression);
    protected EdmOperation(string namespaceName, string name, IEdmTypeReference returnType);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsBound();
    [CompilerGeneratedAttribute]
private void set_IsBound(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IEdmPathExpression get_EntitySetPath();
    [CompilerGeneratedAttribute]
private void set_EntitySetPath(IEdmPathExpression value);
    public abstract virtual EdmSchemaElementKind get_SchemaElementKind();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Namespace();
    [CompilerGeneratedAttribute]
private void set_Namespace(string value);
    public sealed virtual string get_FullName();
    public sealed virtual IEdmTypeReference get_ReturnType();
    public sealed virtual IEnumerable`1<IEdmOperationParameter> get_Parameters();
    [CompilerGeneratedAttribute]
internal IEdmOperationReturn get_Return();
    [CompilerGeneratedAttribute]
private void set_Return(IEdmOperationReturn value);
    public sealed virtual IEdmOperationParameter FindParameter(string name);
    public EdmOperationParameter AddParameter(string name, IEdmTypeReference type);
    public EdmOptionalParameter AddOptionalParameter(string name, IEdmTypeReference type);
    public EdmOptionalParameter AddOptionalParameter(string name, IEdmTypeReference type, string defaultValue);
    public void AddParameter(IEdmOperationParameter parameter);
}
public abstract class Microsoft.OData.Edm.EdmOperationImport : EdmNamedElement {
    [CompilerGeneratedAttribute]
private IEdmOperation <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmExpression <EntitySet>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmEntityContainer <Container>k__BackingField;
    public IEdmOperation Operation { get; private set; }
    public IEdmExpression EntitySet { get; private set; }
    public EdmContainerElementKind ContainerElementKind { get; }
    public IEdmEntityContainer Container { get; private set; }
    protected EdmOperationImport(IEdmEntityContainer container, IEdmOperation operation, string name, IEdmExpression entitySet);
    [CompilerGeneratedAttribute]
public sealed virtual IEdmOperation get_Operation();
    [CompilerGeneratedAttribute]
private void set_Operation(IEdmOperation value);
    [CompilerGeneratedAttribute]
public sealed virtual IEdmExpression get_EntitySet();
    [CompilerGeneratedAttribute]
private void set_EntitySet(IEdmExpression value);
    public abstract virtual EdmContainerElementKind get_ContainerElementKind();
    [CompilerGeneratedAttribute]
public sealed virtual IEdmEntityContainer get_Container();
    [CompilerGeneratedAttribute]
private void set_Container(IEdmEntityContainer value);
    protected abstract virtual string OperationArgumentNullParameterName();
}
public class Microsoft.OData.Edm.EdmOperationParameter : EdmNamedElement {
    [CompilerGeneratedAttribute]
private IEdmTypeReference <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmOperation <DeclaringOperation>k__BackingField;
    public IEdmTypeReference Type { get; private set; }
    public IEdmOperation DeclaringOperation { get; private set; }
    public EdmOperationParameter(IEdmOperation declaringOperation, string name, IEdmTypeReference type);
    [CompilerGeneratedAttribute]
public sealed virtual IEdmTypeReference get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(IEdmTypeReference value);
    [CompilerGeneratedAttribute]
public sealed virtual IEdmOperation get_DeclaringOperation();
    [CompilerGeneratedAttribute]
private void set_DeclaringOperation(IEdmOperation value);
}
internal class Microsoft.OData.Edm.EdmOperationReturn : EdmElement {
    [CompilerGeneratedAttribute]
private IEdmTypeReference <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmOperation <DeclaringOperation>k__BackingField;
    public IEdmTypeReference Type { get; private set; }
    public IEdmOperation DeclaringOperation { get; private set; }
    public EdmOperationReturn(IEdmOperation declaringOperation, IEdmTypeReference type);
    [CompilerGeneratedAttribute]
public sealed virtual IEdmTypeReference get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(IEdmTypeReference value);
    [CompilerGeneratedAttribute]
public sealed virtual IEdmOperation get_DeclaringOperation();
    [CompilerGeneratedAttribute]
private void set_DeclaringOperation(IEdmOperation value);
}
public class Microsoft.OData.Edm.EdmOptionalParameter : EdmOperationParameter {
    [CompilerGeneratedAttribute]
private string <DefaultValueString>k__BackingField;
    public string DefaultValueString { get; private set; }
    public EdmOptionalParameter(IEdmOperation declaringOperation, string name, IEdmTypeReference type);
    public EdmOptionalParameter(IEdmOperation declaringOperation, string name, IEdmTypeReference type, string defaultValue);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultValueString();
    [CompilerGeneratedAttribute]
private void set_DefaultValueString(string value);
}
public class Microsoft.OData.Edm.EdmPathExpression : EdmElement {
    private IEnumerable`1<string> pathSegments;
    private string path;
    public IEnumerable`1<string> PathSegments { get; }
    public string Path { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmPathExpression(string path);
    public EdmPathExpression(String[] pathSegments);
    public EdmPathExpression(IEnumerable`1<string> pathSegments);
    public sealed virtual IEnumerable`1<string> get_PathSegments();
    public sealed virtual string get_Path();
    public virtual EdmExpressionKind get_ExpressionKind();
}
public enum Microsoft.OData.Edm.EdmPathTypeKind : Enum {
    public int value__;
    public static EdmPathTypeKind None;
    public static EdmPathTypeKind AnnotationPath;
    public static EdmPathTypeKind PropertyPath;
    public static EdmPathTypeKind NavigationPropertyPath;
}
public class Microsoft.OData.Edm.EdmPathTypeReference : EdmTypeReference {
    public EdmPathTypeReference(IEdmPathType definition, bool isNullable);
}
public enum Microsoft.OData.Edm.EdmPrimitiveTypeKind : Enum {
    public int value__;
    public static EdmPrimitiveTypeKind None;
    public static EdmPrimitiveTypeKind Binary;
    public static EdmPrimitiveTypeKind Boolean;
    public static EdmPrimitiveTypeKind Byte;
    public static EdmPrimitiveTypeKind DateTimeOffset;
    public static EdmPrimitiveTypeKind Decimal;
    public static EdmPrimitiveTypeKind Double;
    public static EdmPrimitiveTypeKind Guid;
    public static EdmPrimitiveTypeKind Int16;
    public static EdmPrimitiveTypeKind Int32;
    public static EdmPrimitiveTypeKind Int64;
    public static EdmPrimitiveTypeKind SByte;
    public static EdmPrimitiveTypeKind Single;
    public static EdmPrimitiveTypeKind String;
    public static EdmPrimitiveTypeKind Stream;
    public static EdmPrimitiveTypeKind Duration;
    public static EdmPrimitiveTypeKind Geography;
    public static EdmPrimitiveTypeKind GeographyPoint;
    public static EdmPrimitiveTypeKind GeographyLineString;
    public static EdmPrimitiveTypeKind GeographyPolygon;
    public static EdmPrimitiveTypeKind GeographyCollection;
    public static EdmPrimitiveTypeKind GeographyMultiPolygon;
    public static EdmPrimitiveTypeKind GeographyMultiLineString;
    public static EdmPrimitiveTypeKind GeographyMultiPoint;
    public static EdmPrimitiveTypeKind Geometry;
    public static EdmPrimitiveTypeKind GeometryPoint;
    public static EdmPrimitiveTypeKind GeometryLineString;
    public static EdmPrimitiveTypeKind GeometryPolygon;
    public static EdmPrimitiveTypeKind GeometryCollection;
    public static EdmPrimitiveTypeKind GeometryMultiPolygon;
    public static EdmPrimitiveTypeKind GeometryMultiLineString;
    public static EdmPrimitiveTypeKind GeometryMultiPoint;
    public static EdmPrimitiveTypeKind Date;
    public static EdmPrimitiveTypeKind TimeOfDay;
    public static EdmPrimitiveTypeKind PrimitiveType;
}
public class Microsoft.OData.Edm.EdmPrimitiveTypeReference : EdmTypeReference {
    public EdmPrimitiveTypeReference(IEdmPrimitiveType definition, bool isNullable);
}
public abstract class Microsoft.OData.Edm.EdmProperty : EdmNamedElement {
    private IEdmStructuredType declaringType;
    private IEdmTypeReference type;
    public IEdmTypeReference Type { get; }
    public IEdmStructuredType DeclaringType { get; }
    public EdmPropertyKind PropertyKind { get; }
    protected EdmProperty(IEdmStructuredType declaringType, string name, IEdmTypeReference type);
    public sealed virtual IEdmTypeReference get_Type();
    public sealed virtual IEdmStructuredType get_DeclaringType();
    public abstract virtual EdmPropertyKind get_PropertyKind();
}
public enum Microsoft.OData.Edm.EdmPropertyKind : Enum {
    public int value__;
    public static EdmPropertyKind None;
    public static EdmPropertyKind Structural;
    public static EdmPropertyKind Navigation;
}
public class Microsoft.OData.Edm.EdmReference : object {
    private Uri uri;
    private List`1<IEdmInclude> includes;
    private List`1<IEdmIncludeAnnotations> includeAnnotations;
    public Uri Uri { get; }
    public IEnumerable`1<IEdmInclude> Includes { get; }
    public IEnumerable`1<IEdmIncludeAnnotations> IncludeAnnotations { get; }
    public EdmReference(Uri uri);
    public sealed virtual Uri get_Uri();
    public sealed virtual IEnumerable`1<IEdmInclude> get_Includes();
    public sealed virtual IEnumerable`1<IEdmIncludeAnnotations> get_IncludeAnnotations();
    public void AddInclude(IEdmInclude edmInclude);
    public void AddIncludeAnnotations(IEdmIncludeAnnotations edmIncludeAnnotations);
}
public class Microsoft.OData.Edm.EdmReferentialConstraint : object {
    private IEnumerable`1<EdmReferentialConstraintPropertyPair> propertyPairs;
    public IEnumerable`1<EdmReferentialConstraintPropertyPair> PropertyPairs { get; }
    public EdmReferentialConstraint(IEnumerable`1<EdmReferentialConstraintPropertyPair> propertyPairs);
    public sealed virtual IEnumerable`1<EdmReferentialConstraintPropertyPair> get_PropertyPairs();
    public static EdmReferentialConstraint Create(IEnumerable`1<IEdmStructuralProperty> dependentProperties, IEnumerable`1<IEdmStructuralProperty> principalProperties);
}
public class Microsoft.OData.Edm.EdmReferentialConstraintPropertyPair : object {
    [CompilerGeneratedAttribute]
private IEdmStructuralProperty <DependentProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmStructuralProperty <PrincipalProperty>k__BackingField;
    public IEdmStructuralProperty DependentProperty { get; private set; }
    public IEdmStructuralProperty PrincipalProperty { get; private set; }
    public EdmReferentialConstraintPropertyPair(IEdmStructuralProperty dependentProperty, IEdmStructuralProperty principalProperty);
    [CompilerGeneratedAttribute]
public IEdmStructuralProperty get_DependentProperty();
    [CompilerGeneratedAttribute]
private void set_DependentProperty(IEdmStructuralProperty value);
    [CompilerGeneratedAttribute]
public IEdmStructuralProperty get_PrincipalProperty();
    [CompilerGeneratedAttribute]
private void set_PrincipalProperty(IEdmStructuralProperty value);
}
internal class Microsoft.OData.Edm.EdmRes : object {
    internal static string EdmPrimitive_UnexpectedKind;
    internal static string EdmPath_UnexpectedKind;
    internal static string Annotations_TypeMismatch;
    internal static string Constructable_VocabularyAnnotationMustHaveTarget;
    internal static string Constructable_EntityTypeOrCollectionOfEntityTypeExpected;
    internal static string Constructable_TargetMustBeStock;
    internal static string TypeSemantics_CouldNotConvertTypeReference;
    internal static string EdmModel_CannotUseElementWithTypeNone;
    internal static string EdmModel_CannotAddMoreThanOneEntityContainerToOneEdmModel;
    internal static string EdmEntityContainer_CannotUseElementWithTypeNone;
    internal static string ValueWriter_NonSerializableValue;
    internal static string ValueHasAlreadyBeenSet;
    internal static string PathSegmentMustNotContainSlash;
    internal static string Constructable_DependentPropertyCountMustMatchNumberOfPropertiesOnPrincipalType;
    internal static string EdmType_UnexpectedEdmType;
    internal static string NavigationPropertyBinding_PathIsNotValid;
    internal static string MultipleMatchingPropertiesFound;
    internal static string TargetPath_FirstSegmentMustBeIEdmEntityContainer;
    internal static string TargetPath_SecondSegmentMustBeIEdmEntityContainerElement;
    internal static string TargetPath_SegmentsMustNotContainNullSegment;
    internal static string TypeCast_HierarchyNotFollowed;
    internal static string Edm_Evaluator_NoTermTypeAnnotationOnType;
    internal static string Edm_Evaluator_NoValueAnnotationOnType;
    internal static string Edm_Evaluator_NoValueAnnotationOnElement;
    internal static string Edm_Evaluator_UnrecognizedExpressionKind;
    internal static string Edm_Evaluator_UnboundFunction;
    internal static string Edm_Evaluator_UnboundPath;
    internal static string Edm_Evaluator_NoContextPath;
    internal static string Edm_Evaluator_FailedTypeAssertion;
    internal static string Edm_Evaluator_TypeCastNeedsEdmModel;
    internal static string EdmModel_Validator_Semantic_SystemNamespaceEncountered;
    internal static string EdmModel_Validator_Semantic_NavigationSourceTypeHasNoKeys;
    internal static string EdmModel_Validator_Semantic_DuplicateEndName;
    internal static string EdmModel_Validator_Semantic_DuplicatePropertyNameSpecifiedInEntityKey;
    internal static string EdmModel_Validator_Semantic_InvalidComplexTypeAbstract;
    internal static string EdmModel_Validator_Semantic_InvalidComplexTypePolymorphic;
    internal static string EdmModel_Validator_Semantic_InvalidKeyNullablePart;
    internal static string EdmModel_Validator_Semantic_EntityKeyMustBeScalar;
    internal static string EdmModel_Validator_Semantic_EntityComposableBoundEscapeFunctionMustBeLessOne;
    internal static string EdmModel_Validator_Semantic_EntityNoncomposableBoundEscapeFunctionMustBeLessOne;
    internal static string EdmModel_Validator_Semantic_InvalidKeyKeyDefinedInBaseClass;
    internal static string EdmModel_Validator_Semantic_KeyMissingOnEntityType;
    internal static string EdmModel_Validator_Semantic_BadNavigationPropertyUndefinedRole;
    internal static string EdmModel_Validator_Semantic_BadNavigationPropertyRolesCannotBeTheSame;
    internal static string EdmModel_Validator_Semantic_BadNavigationPropertyCouldNotDetermineType;
    internal static string EdmModel_Validator_Semantic_InvalidOperationMultipleEndsInAssociation;
    internal static string EdmModel_Validator_Semantic_EndWithManyMultiplicityCannotHaveOperationsSpecified;
    internal static string EdmModel_Validator_Semantic_EndNameAlreadyDefinedDuplicate;
    internal static string EdmModel_Validator_Semantic_SameRoleReferredInReferentialConstraint;
    internal static string EdmModel_Validator_Semantic_NavigationPropertyPrincipalEndMultiplicityUpperBoundMustBeOne;
    internal static string EdmModel_Validator_Semantic_InvalidMultiplicityOfPrincipalEndDependentPropertiesAllNonnullable;
    internal static string EdmModel_Validator_Semantic_InvalidMultiplicityOfPrincipalEndDependentPropertiesAllNullable;
    internal static string EdmModel_Validator_Semantic_InvalidMultiplicityOfDependentEndMustBeZeroOneOrOne;
    internal static string EdmModel_Validator_Semantic_InvalidMultiplicityOfDependentEndMustBeMany;
    internal static string EdmModel_Validator_Semantic_MismatchNumberOfPropertiesinRelationshipConstraint;
    internal static string EdmModel_Validator_Semantic_TypeMismatchRelationshipConstraint;
    internal static string EdmModel_Validator_Semantic_InvalidPropertyInRelationshipConstraintDependentEnd;
    internal static string EdmModel_Validator_Semantic_InvalidPropertyInRelationshipConstraintPrimaryEnd;
    internal static string EdmModel_Validator_Semantic_InvalidPropertyType;
    internal static string EdmModel_Validator_Semantic_BoundOperationMustHaveParameters;
    internal static string EdmModel_Validator_Semantic_RequiredParametersMustPrecedeOptional;
    internal static string EdmModel_Validator_Semantic_OperationWithUnsupportedReturnType;
    internal static string EdmModel_Validator_Semantic_OperationImportEntityTypeDoesNotMatchEntitySet;
    internal static string EdmModel_Validator_Semantic_OperationImportEntityTypeDoesNotMatchEntitySet2;
    internal static string EdmModel_Validator_Semantic_OperationImportEntitySetExpressionKindIsInvalid;
    internal static string EdmModel_Validator_Semantic_OperationImportEntitySetExpressionIsInvalid;
    internal static string EdmModel_Validator_Semantic_OperationImportSpecifiesEntitySetButNotEntityType;
    internal static string EdmModel_Validator_Semantic_OperationImportCannotImportBoundOperation;
    internal static string EdmModel_Validator_Semantic_FunctionImportWithParameterShouldNotBeIncludedInServiceDocument;
    internal static string EdmModel_Validator_Semantic_FunctionMustHaveReturnType;
    internal static string EdmModel_Validator_Semantic_UrlEscapeFunctionMustBoundFunction;
    internal static string EdmModel_Validator_Semantic_UrlEscapeFunctionMustHaveOneStringParameter;
    internal static string EdmModel_Validator_Semantic_ParameterNameAlreadyDefinedDuplicate;
    internal static string EdmModel_Validator_Semantic_DuplicateEntityContainerMemberName;
    internal static string EdmModel_Validator_Semantic_UnboundFunctionOverloadHasIncorrectReturnType;
    internal static string EdmModel_Validator_Semantic_OperationCannotHaveEntitySetPathWithUnBoundOperation;
    internal static string EdmModel_Validator_Semantic_InvalidEntitySetPathMissingBindingParameterName;
    internal static string EdmModel_Validator_Semantic_InvalidEntitySetPathWithFirstPathParameterNotMatchingFirstParameterName;
    internal static string EdmModel_Validator_Semantic_InvalidEntitySetPathTypeCastSegmentMustBeEntityType;
    internal static string EdmModel_Validator_Semantic_InvalidEntitySetPathUnknownNavigationProperty;
    internal static string EdmModel_Validator_Semantic_InvalidEntitySetPathInvalidTypeCastSegment;
    internal static string EdmModel_Validator_Semantic_InvalidEntitySetPathWithNonEntityBindingParameter;
    internal static string EdmModel_Validator_Semantic_InvalidEntitySetPathUnknownTypeCastSegment;
    internal static string EdmModel_Validator_Semantic_OperationWithEntitySetPathReturnTypeInvalid;
    internal static string EdmModel_Validator_Semantic_OperationWithEntitySetPathAndReturnTypeTypeNotAssignable;
    internal static string EdmModel_Validator_Semantic_OperationWithEntitySetPathResolvesToCollectionEntityTypeMismatchesEntityTypeReturnType;
    internal static string EdmModel_Validator_Semantic_SchemaElementNameAlreadyDefined;
    internal static string EdmModel_Validator_Semantic_InvalidMemberNameMatchesTypeName;
    internal static string EdmModel_Validator_Semantic_PropertyNameAlreadyDefined;
    internal static string EdmModel_Validator_Semantic_BaseTypeMustHaveSameTypeKind;
    internal static string EdmModel_Validator_Semantic_BaseTypeOfOpenTypeMustBeOpen;
    internal static string EdmModel_Validator_Semantic_KeyPropertyMustBelongToEntity;
    internal static string EdmModel_Validator_Semantic_EdmPrimitiveTypeCannotBeUsedAsTypeOfKey;
    internal static string EdmModel_Validator_Semantic_EdmPrimitiveTypeCannotBeUsedAsUnderlyingType;
    internal static string EdmModel_Validator_Semantic_DependentPropertiesMustBelongToDependentEntity;
    internal static string EdmModel_Validator_Semantic_DeclaringTypeMustBeCorrect;
    internal static string EdmModel_Validator_Semantic_InaccessibleType;
    internal static string EdmModel_Validator_Semantic_AmbiguousType;
    internal static string EdmModel_Validator_Semantic_InvalidNavigationPropertyType;
    internal static string EdmModel_Validator_Semantic_NavigationPropertyWithRecursiveContainmentTargetMustBeOptional;
    internal static string EdmModel_Validator_Semantic_RecursiveComplexTypedPropertyMustBeOptional;
    internal static string EdmModel_Validator_Semantic_NavigationPropertyWithRecursiveContainmentSourceMustBeFromZeroOrOne;
    internal static string EdmModel_Validator_Semantic_NavigationPropertyWithNonRecursiveContainmentSourceMustBeFromOne;
    internal static string EdmModel_Validator_Semantic_ComplexTypeMustHaveProperties;
    internal static string EdmModel_Validator_Semantic_DuplicateDependentProperty;
    internal static string EdmModel_Validator_Semantic_ScaleOutOfRange;
    internal static string EdmModel_Validator_Semantic_PrecisionOutOfRange;
    internal static string EdmModel_Validator_Semantic_StringMaxLengthOutOfRange;
    internal static string EdmModel_Validator_Semantic_MaxLengthOutOfRange;
    internal static string EdmModel_Validator_Semantic_EnumMemberValueOutOfRange;
    internal static string EdmModel_Validator_Semantic_EnumMemberNameAlreadyDefined;
    internal static string EdmModel_Validator_Semantic_OpenTypesSupportedForEntityTypesOnly;
    internal static string EdmModel_Validator_Semantic_IsUnboundedCannotBeTrueWhileMaxLengthIsNotNull;
    internal static string EdmModel_Validator_Semantic_InvalidElementAnnotationMismatchedTerm;
    internal static string EdmModel_Validator_Semantic_InvalidElementAnnotationValueInvalidXml;
    internal static string EdmModel_Validator_Semantic_InvalidElementAnnotationNotIEdmStringValue;
    internal static string EdmModel_Validator_Semantic_InvalidElementAnnotationNullNamespaceOrName;
    internal static string EdmModel_Validator_Semantic_CannotAssertNullableTypeAsNonNullableType;
    internal static string EdmModel_Validator_Semantic_ExpressionPrimitiveKindCannotPromoteToAssertedType;
    internal static string EdmModel_Validator_Semantic_NullCannotBeAssertedToBeANonNullableType;
    internal static string EdmModel_Validator_Semantic_ExpressionNotValidForTheAssertedType;
    internal static string EdmModel_Validator_Semantic_CollectionExpressionNotValidForNonCollectionType;
    internal static string EdmModel_Validator_Semantic_PrimitiveConstantExpressionNotValidForNonPrimitiveType;
    internal static string EdmModel_Validator_Semantic_RecordExpressionNotValidForNonStructuredType;
    internal static string EdmModel_Validator_Semantic_RecordExpressionMissingProperty;
    internal static string EdmModel_Validator_Semantic_RecordExpressionHasExtraProperties;
    internal static string EdmModel_Validator_Semantic_DuplicateAnnotation;
    internal static string EdmModel_Validator_Semantic_IncorrectNumberOfArguments;
    internal static string EdmModel_Validator_Semantic_DuplicateEntityContainerName;
    internal static string EdmModel_Validator_Semantic_ExpressionPrimitiveKindNotValidForAssertedType;
    internal static string EdmModel_Validator_Semantic_ExpressionEnumKindNotValidForAssertedType;
    internal static string EdmModel_Validator_Semantic_IntegerConstantValueOutOfRange;
    internal static string EdmModel_Validator_Semantic_StringConstantLengthOutOfRange;
    internal static string EdmModel_Validator_Semantic_BinaryConstantLengthOutOfRange;
    internal static string EdmModel_Validator_Semantic_TypeMustNotHaveKindOfNone;
    internal static string EdmModel_Validator_Semantic_SchemaElementMustNotHaveKindOfNone;
    internal static string EdmModel_Validator_Semantic_PropertyMustNotHaveKindOfNone;
    internal static string EdmModel_Validator_Semantic_PrimitiveTypeMustNotHaveKindOfNone;
    internal static string EdmModel_Validator_Semantic_EntityContainerElementMustNotHaveKindOfNone;
    internal static string EdmModel_Validator_Semantic_DuplicateNavigationPropertyMapping;
    internal static string EdmModel_Validator_Semantic_NavigationMappingMustBeBidirectional;
    internal static string EdmModel_Validator_Semantic_EntitySetCanOnlyBeContainedByASingleNavigationProperty;
    internal static string EdmModel_Validator_Semantic_TypeAnnotationMissingRequiredProperty;
    internal static string EdmModel_Validator_Semantic_TypeAnnotationHasExtraProperties;
    internal static string EdmModel_Validator_Semantic_EnumMustHaveIntegralUnderlyingType;
    internal static string EdmModel_Validator_Semantic_InaccessibleTerm;
    internal static string EdmModel_Validator_Semantic_InaccessibleTarget;
    internal static string EdmModel_Validator_Semantic_VocabularyAnnotationApplyToNotAllowedAnnotatable;
    internal static string EdmModel_Validator_Semantic_ElementDirectValueAnnotationFullNameMustBeUnique;
    internal static string EdmModel_Validator_Semantic_NoEntitySetsFoundForType;
    internal static string EdmModel_Validator_Semantic_CannotInferEntitySetWithMultipleSetsPerType;
    internal static string EdmModel_Validator_Semantic_EntitySetRecursiveNavigationPropertyMappingsMustPointBackToSourceEntitySet;
    internal static string EdmModel_Validator_Semantic_NavigationPropertyEntityMustNotIndirectlyContainItself;
    internal static string EdmModel_Validator_Semantic_PathIsNotValidForTheGivenContext;
    internal static string EdmModel_Validator_Semantic_NavigationPropertyMappingMustPointToValidTargetForProperty;
    internal static string EdmModel_Validator_Semantic_ModelDuplicateBoundFunctionParameterNames;
    internal static string EdmModel_Validator_Semantic_ModelDuplicateBoundFunctionParameterTypes;
    internal static string EdmModel_Validator_Semantic_ModelDuplicateUnBoundFunctionsParameterNames;
    internal static string EdmModel_Validator_Semantic_ModelDuplicateUnBoundFunctionsParameterTypes;
    internal static string EdmModel_Validator_Semantic_ModelDuplicateBoundActions;
    internal static string EdmModel_Validator_Semantic_ModelDuplicateUnBoundActions;
    internal static string EdmModel_Validator_Semantic_BoundFunctionOverloadsMustHaveSameReturnType;
    internal static string EdmModel_Validator_Semantic_EntitySetTypeMustBeCollectionOfEntityType;
    internal static string EdmModel_Validator_Semantic_SingletonTypeMustBeEntityType;
    internal static string EdmModel_Validator_Semantic_NavigationPropertyOfCollectionTypeMustNotTargetToSingleton;
    internal static string EdmModel_Validator_Semantic_StructuredTypeBaseTypeCannotBeAbstractType;
    internal static string EdmModel_Validator_Semantic_PropertyTypeCannotBeCollectionOfAbstractType;
    internal static string EdmModel_Validator_Semantic_OperationReturnTypeCannotBeCollectionOfAbstractType;
    internal static string EdmModel_Validator_Semantic_EdmEntityTypeCannotBeTypeOfSingleton;
    internal static string EdmModel_Validator_Semantic_EdmEntityTypeCannotBeTypeOfEntitySet;
    internal static string EdmModel_Validator_Semantic_DeclaringTypeOfNavigationSourceCannotHavePathProperty;
    internal static string EdmModel_Validator_Semantic_TypeOfNavigationPropertyCannotHavePathProperty;
    internal static string EdmModel_Validator_Syntactic_MissingName;
    internal static string EdmModel_Validator_Syntactic_EdmModel_NameIsTooLong;
    internal static string EdmModel_Validator_Syntactic_EdmModel_NameIsNotAllowed;
    internal static string EdmModel_Validator_Syntactic_MissingNamespaceName;
    internal static string EdmModel_Validator_Syntactic_EdmModel_NamespaceNameIsTooLong;
    internal static string EdmModel_Validator_Syntactic_EdmModel_NamespaceNameIsNotAllowed;
    internal static string EdmModel_Validator_Syntactic_PropertyMustNotBeNull;
    internal static string EdmModel_Validator_Syntactic_EnumPropertyValueOutOfRange;
    internal static string EdmModel_Validator_Syntactic_InterfaceKindValueMismatch;
    internal static string EdmModel_Validator_Syntactic_TypeRefInterfaceTypeKindValueMismatch;
    internal static string EdmModel_Validator_Syntactic_InterfaceKindValueUnexpected;
    internal static string EdmModel_Validator_Syntactic_EnumerableMustNotHaveNullElements;
    internal static string EdmModel_Validator_Syntactic_NavigationPartnerInvalid;
    internal static string EdmModel_Validator_Syntactic_InterfaceCriticalCycleInTypeHierarchy;
    internal static string Serializer_SingleFileExpected;
    internal static string Serializer_UnknownEdmVersion;
    internal static string Serializer_UnknownEdmxVersion;
    internal static string Serializer_NonInlineOperationImportReturnType;
    internal static string Serializer_ReferencedTypeMustHaveValidName;
    internal static string Serializer_OutOfLineAnnotationTargetMustHaveValidName;
    internal static string Serializer_NoSchemasProduced;
    internal static string XmlParser_EmptyFile;
    internal static string XmlParser_EmptySchemaTextReader;
    internal static string XmlParser_MissingAttribute;
    internal static string XmlParser_TextNotAllowed;
    internal static string XmlParser_UnexpectedAttribute;
    internal static string XmlParser_UnexpectedElement;
    internal static string XmlParser_UnusedElement;
    internal static string XmlParser_UnexpectedNodeType;
    internal static string XmlParser_UnexpectedRootElement;
    internal static string XmlParser_UnexpectedRootElementWrongNamespace;
    internal static string XmlParser_UnexpectedRootElementNoNamespace;
    internal static string CsdlParser_InvalidEntitySetPathWithUnboundAction;
    internal static string CsdlParser_InvalidAlias;
    internal static string CsdlParser_InvalidDeleteAction;
    internal static string CsdlParser_MissingTypeAttributeOrElement;
    internal static string CsdlParser_InvalidEndRoleInRelationshipConstraint;
    internal static string CsdlParser_InvalidMultiplicity;
    internal static string CsdlParser_ReferentialConstraintRequiresOneDependent;
    internal static string CsdlParser_ReferentialConstraintRequiresOnePrincipal;
    internal static string CsdlParser_InvalidIfExpressionIncorrectNumberOfOperands;
    internal static string CsdlParser_InvalidIsOfExpressionIncorrectNumberOfOperands;
    internal static string CsdlParser_InvalidCastExpressionIncorrectNumberOfOperands;
    internal static string CsdlParser_InvalidLabeledElementExpressionIncorrectNumberOfOperands;
    internal static string CsdlParser_InvalidTypeName;
    internal static string CsdlParser_InvalidQualifiedName;
    internal static string CsdlParser_NoReadersProvided;
    internal static string CsdlParser_NullXmlReader;
    internal static string CsdlParser_InvalidEntitySetPath;
    internal static string CsdlParser_InvalidEnumMemberPath;
    internal static string CsdlParser_CannotSpecifyNullableAttributeForNavigationPropertyWithCollectionType;
    internal static string CsdlParser_MetadataDocumentCannotHaveMoreThanOneEntityContainer;
    internal static string CsdlSemantics_ReferentialConstraintMismatch;
    internal static string CsdlSemantics_EnumMemberMustHaveValue;
    internal static string CsdlSemantics_ImpossibleAnnotationsTarget;
    internal static string CsdlSemantics_DuplicateAlias;
    internal static string CsdlJsonParser_UnexpectedJsonValueKind;
    internal static string CsdlJsonParser_MissingMemberInObject;
    internal static string CsdlJsonParser_UnexpectedJsonMember;
    internal static string CsdlJsonParser_CannotReadValueAsType;
    internal static string CsdlJsonParser_MissingKindMember;
    internal static string CsdlJsonParser_MissingRequiredPropertyInObject;
    internal static string CsdlJsonParser_UnknownJsonElementValueKind;
    internal static string CsdlJsonParser_InvalidJsonNumberType;
    internal static string CsdlJsonParser_UnsupportedJsonMember;
    internal static string CsdlJsonParser_InvalidCsdlVersion;
    internal static string CsdlJsonParser_SchemaCannotHaveMoreThanOneEntityContainer;
    internal static string EdmxParser_EdmxVersionMismatch;
    internal static string EdmxParser_BodyElement;
    internal static string EdmxParser_InvalidReferenceIncorrectNumberOfIncludes;
    internal static string EdmxParser_UnresolvedReferenceUriInEdmxReference;
    internal static string EdmParseException_ErrorsEncounteredInEdmx;
    internal static string ValueParser_InvalidBoolean;
    internal static string ValueParser_InvalidInteger;
    internal static string ValueParser_InvalidLong;
    internal static string ValueParser_InvalidFloatingPoint;
    internal static string ValueParser_InvalidMaxLength;
    internal static string ValueParser_InvalidSrid;
    internal static string ValueParser_InvalidScale;
    internal static string ValueParser_InvalidGuid;
    internal static string ValueParser_InvalidDecimal;
    internal static string ValueParser_InvalidDateTimeOffset;
    internal static string ValueParser_InvalidDateTime;
    internal static string ValueParser_InvalidDate;
    internal static string ValueParser_InvalidDuration;
    internal static string ValueParser_InvalidBinary;
    internal static string ValueParser_InvalidTimeOfDay;
    internal static string UnknownEnumVal_Multiplicity;
    internal static string UnknownEnumVal_SchemaElementKind;
    internal static string UnknownEnumVal_TypeKind;
    internal static string UnknownEnumVal_PrimitiveKind;
    internal static string UnknownEnumVal_ContainerElementKind;
    internal static string UnknownEnumVal_CsdlTarget;
    internal static string UnknownEnumVal_PropertyKind;
    internal static string UnknownEnumVal_ExpressionKind;
    internal static string Bad_AmbiguousElementBinding;
    internal static string Bad_UnresolvedType;
    internal static string Bad_UnresolvedComplexType;
    internal static string Bad_UnresolvedEntityType;
    internal static string Bad_UnresolvedPrimitiveType;
    internal static string Bad_UnresolvedOperation;
    internal static string Bad_AmbiguousOperation;
    internal static string Bad_OperationParametersDontMatch;
    internal static string Bad_UnresolvedEntitySet;
    internal static string Bad_UnresolvedEntityContainer;
    internal static string Bad_UnresolvedEnumType;
    internal static string Bad_UnresolvedEnumMember;
    internal static string Bad_UnresolvedProperty;
    internal static string Bad_UnresolvedParameter;
    internal static string Bad_UnresolvedReturn;
    internal static string Bad_UnresolvedLabeledElement;
    internal static string Bad_CyclicEntity;
    internal static string Bad_CyclicComplex;
    internal static string Bad_CyclicEntityContainer;
    internal static string Bad_UnresolvedNavigationPropertyPath;
    internal static string RuleSet_DuplicateRulesExistInRuleSet;
    internal static string EdmToClr_UnsupportedType;
    internal static string EdmToClr_StructuredValueMappedToNonClass;
    internal static string EdmToClr_IEnumerableOfTPropertyAlreadyHasValue;
    internal static string EdmToClr_StructuredPropertyDuplicateValue;
    internal static string EdmToClr_CannotConvertEdmValueToClrType;
    internal static string EdmToClr_CannotConvertEdmCollectionValueToClrType;
    internal static string EdmToClr_TryCreateObjectInstanceReturnedWrongObject;
    internal static string EdmUtil_NullValueForMimeTypeAnnotation;
    internal static string EdmUtil_InvalidAnnotationValue;
    internal static string PlatformHelper_DateTimeOffsetMustContainTimeZone;
    internal static string Date_InvalidAddedOrSubtractedResults;
    internal static string Date_InvalidDateParameters;
    internal static string Date_InvalidParsingString;
    internal static string Date_InvalidCompareToTarget;
    internal static string TimeOfDay_InvalidTimeOfDayParameters;
    internal static string TimeOfDay_TicksOutOfRange;
    internal static string TimeOfDay_ConvertErrorFromTimeSpan;
    internal static string TimeOfDay_InvalidParsingString;
    internal static string TimeOfDay_InvalidCompareToTarget;
    internal static string EdmVocabularyAnnotations_DidNotFindDefaultValue;
    internal static string EdmVocabularyAnnotations_TermTypeNotSupported;
    internal static string EdmVocabularyAnnotations_InvalidLocationForTargetPathAnnotation;
    private static EdmRes loader;
    private ResourceManager resources;
    private static CultureInfo Culture { get; }
    public static ResourceManager Resources { get; }
    private static EdmRes GetLoader();
    private static CultureInfo get_Culture();
    public static ResourceManager get_Resources();
    public static string GetString(string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(string name, Boolean& usedFallback);
}
public enum Microsoft.OData.Edm.EdmSchemaElementKind : Enum {
    public int value__;
    public static EdmSchemaElementKind None;
    public static EdmSchemaElementKind TypeDefinition;
    public static EdmSchemaElementKind Term;
    public static EdmSchemaElementKind Action;
    public static EdmSchemaElementKind EntityContainer;
    public static EdmSchemaElementKind Function;
}
public class Microsoft.OData.Edm.EdmSingleton : EdmNavigationSource {
    private IEdmEntityContainer container;
    private IEdmEntityType entityType;
    private IEdmPathExpression path;
    public EdmContainerElementKind ContainerElementKind { get; }
    public IEdmEntityContainer Container { get; }
    public IEdmType Type { get; }
    public IEdmPathExpression Path { get; }
    public EdmSingleton(IEdmEntityContainer container, string name, IEdmEntityType entityType);
    public sealed virtual EdmContainerElementKind get_ContainerElementKind();
    public sealed virtual IEdmEntityContainer get_Container();
    public virtual IEdmType get_Type();
    public virtual IEdmPathExpression get_Path();
}
public class Microsoft.OData.Edm.EdmSpatialTypeReference : EdmPrimitiveTypeReference {
    private Nullable`1<int> spatialReferenceIdentifier;
    public Nullable`1<int> SpatialReferenceIdentifier { get; }
    public EdmSpatialTypeReference(IEdmPrimitiveType definition, bool isNullable);
    public EdmSpatialTypeReference(IEdmPrimitiveType definition, bool isNullable, Nullable`1<int> spatialReferenceIdentifier);
    public sealed virtual Nullable`1<int> get_SpatialReferenceIdentifier();
}
public class Microsoft.OData.Edm.EdmStringTypeReference : EdmPrimitiveTypeReference {
    private bool isUnbounded;
    private Nullable`1<int> maxLength;
    private Nullable`1<bool> isUnicode;
    public bool IsUnbounded { get; }
    public Nullable`1<int> MaxLength { get; }
    public Nullable`1<bool> IsUnicode { get; }
    public EdmStringTypeReference(IEdmPrimitiveType definition, bool isNullable);
    public EdmStringTypeReference(IEdmPrimitiveType definition, bool isNullable, bool isUnbounded, Nullable`1<int> maxLength, Nullable`1<bool> isUnicode);
    public sealed virtual bool get_IsUnbounded();
    public sealed virtual Nullable`1<int> get_MaxLength();
    public sealed virtual Nullable`1<bool> get_IsUnicode();
}
public class Microsoft.OData.Edm.EdmStructuralProperty : EdmProperty {
    private string defaultValueString;
    [SuppressMessageAttribute("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
public string DefaultValueString { get; }
    public EdmPropertyKind PropertyKind { get; }
    public EdmStructuralProperty(IEdmStructuredType declaringType, string name, IEdmTypeReference type);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
public EdmStructuralProperty(IEdmStructuredType declaringType, string name, IEdmTypeReference type, string defaultValueString);
    public sealed virtual string get_DefaultValueString();
    public virtual EdmPropertyKind get_PropertyKind();
}
public abstract class Microsoft.OData.Edm.EdmStructuredType : EdmType {
    private IEdmStructuredType baseStructuredType;
    private List`1<IEdmProperty> declaredProperties;
    private bool isAbstract;
    private bool isOpen;
    private Cache`2<EdmStructuredType, IDictionary`2<string, IEdmProperty>> propertiesDictionary;
    private static Func`2<EdmStructuredType, IDictionary`2<string, IEdmProperty>> ComputePropertiesDictionaryFunc;
    public bool IsAbstract { get; }
    public bool IsOpen { get; }
    public IEnumerable`1<IEdmProperty> DeclaredProperties { get; }
    public IEdmStructuredType BaseType { get; }
    protected IDictionary`2<string, IEdmProperty> PropertiesDictionary { get; }
    protected EdmStructuredType(bool isAbstract, bool isOpen, IEdmStructuredType baseStructuredType);
    private static EdmStructuredType();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsOpen();
    public virtual IEnumerable`1<IEdmProperty> get_DeclaredProperties();
    public sealed virtual IEdmStructuredType get_BaseType();
    protected IDictionary`2<string, IEdmProperty> get_PropertiesDictionary();
    public void AddProperty(IEdmProperty property);
    public EdmStructuralProperty AddStructuralProperty(string name, EdmPrimitiveTypeKind type);
    public EdmStructuralProperty AddStructuralProperty(string name, EdmPrimitiveTypeKind type, bool isNullable);
    public EdmStructuralProperty AddStructuralProperty(string name, IEdmTypeReference type);
    public EdmStructuralProperty AddStructuralProperty(string name, IEdmTypeReference type, string defaultValue);
    public EdmNavigationProperty AddUnidirectionalNavigation(EdmNavigationPropertyInfo propertyInfo);
    public sealed virtual IEdmProperty FindProperty(string name);
    private IDictionary`2<string, IEdmProperty> ComputePropertiesDictionary();
}
public class Microsoft.OData.Edm.EdmTargetPath : object {
    private List`1<IEdmElement> segments;
    private string path;
    public IReadOnlyList`1<IEdmElement> Segments { get; }
    public string Path { get; }
    public EdmTargetPath(IEnumerable`1<IEdmElement> segments);
    public EdmTargetPath(IEdmElement[] segments);
    internal EdmTargetPath(IEnumerable`1<IEdmElement> segments, string path);
    public sealed virtual IReadOnlyList`1<IEdmElement> get_Segments();
    public sealed virtual string get_Path();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private void ValidateSegments();
}
public class Microsoft.OData.Edm.EdmTemporalTypeReference : EdmPrimitiveTypeReference {
    private Nullable`1<int> precision;
    public Nullable`1<int> Precision { get; }
    public EdmTemporalTypeReference(IEdmPrimitiveType definition, bool isNullable);
    public EdmTemporalTypeReference(IEdmPrimitiveType definition, bool isNullable, Nullable`1<int> precision);
    public sealed virtual Nullable`1<int> get_Precision();
}
public abstract class Microsoft.OData.Edm.EdmType : EdmElement {
    public EdmTypeKind TypeKind { get; }
    public abstract virtual EdmTypeKind get_TypeKind();
    public virtual string ToString();
}
public class Microsoft.OData.Edm.EdmTypeDefinition : EdmType {
    private IEdmPrimitiveType underlyingType;
    private string namespaceName;
    private string name;
    private string fullName;
    public EdmTypeKind TypeKind { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public string Namespace { get; }
    public string FullName { get; }
    public string Name { get; }
    public IEdmPrimitiveType UnderlyingType { get; }
    public EdmTypeDefinition(string namespaceName, string name, EdmPrimitiveTypeKind underlyingType);
    public EdmTypeDefinition(string namespaceName, string name, IEdmPrimitiveType underlyingType);
    public virtual EdmTypeKind get_TypeKind();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_FullName();
    public sealed virtual string get_Name();
    public sealed virtual IEdmPrimitiveType get_UnderlyingType();
}
public class Microsoft.OData.Edm.EdmTypeDefinitionReference : EdmTypeReference {
    [CompilerGeneratedAttribute]
private bool <IsUnbounded>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsUnicode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SpatialReferenceIdentifier>k__BackingField;
    public bool IsUnbounded { get; private set; }
    public Nullable`1<int> MaxLength { get; private set; }
    public Nullable`1<bool> IsUnicode { get; private set; }
    public Nullable`1<int> Precision { get; private set; }
    public Nullable`1<int> Scale { get; private set; }
    public Nullable`1<int> SpatialReferenceIdentifier { get; private set; }
    public EdmTypeDefinitionReference(IEdmTypeDefinition typeDefinition, bool isNullable);
    public EdmTypeDefinitionReference(IEdmTypeDefinition typeDefinition, bool isNullable, bool isUnbounded, Nullable`1<int> maxLength, Nullable`1<bool> isUnicode, Nullable`1<int> precision, Nullable`1<int> scale, Nullable`1<int> spatialReferenceIdentifier);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsUnbounded();
    [CompilerGeneratedAttribute]
private void set_IsUnbounded(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_MaxLength();
    [CompilerGeneratedAttribute]
private void set_MaxLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_IsUnicode();
    [CompilerGeneratedAttribute]
private void set_IsUnicode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_Precision();
    [CompilerGeneratedAttribute]
private void set_Precision(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_Scale();
    [CompilerGeneratedAttribute]
private void set_Scale(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_SpatialReferenceIdentifier();
    [CompilerGeneratedAttribute]
private void set_SpatialReferenceIdentifier(Nullable`1<int> value);
    private static Nullable`1<bool> ComputeDefaultIsUnicode(IEdmTypeDefinition typeDefinition);
    private static Nullable`1<int> ComputeDefaultPrecision(IEdmTypeDefinition typeDefinition);
    private static Nullable`1<int> ComputeDefaultScale(IEdmTypeDefinition typeDefinition);
    private static Nullable`1<int> ComputeSrid(IEdmTypeDefinition typeDefinition);
}
public enum Microsoft.OData.Edm.EdmTypeKind : Enum {
    public int value__;
    public static EdmTypeKind None;
    public static EdmTypeKind Primitive;
    public static EdmTypeKind Entity;
    public static EdmTypeKind Complex;
    public static EdmTypeKind Collection;
    public static EdmTypeKind EntityReference;
    public static EdmTypeKind Enum;
    public static EdmTypeKind TypeDefinition;
    public static EdmTypeKind Untyped;
    public static EdmTypeKind Path;
}
public abstract class Microsoft.OData.Edm.EdmTypeReference : EdmElement {
    private IEdmType definition;
    private bool isNullable;
    public bool IsNullable { get; }
    public IEdmType Definition { get; }
    protected EdmTypeReference(IEdmType definition, bool isNullable);
    public sealed virtual bool get_IsNullable();
    public sealed virtual IEdmType get_Definition();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Microsoft.OData.Edm.EdmTypeSemantics : object {
    private static ConcurrentDictionary`2<IEdmStructuredType, HashSet`1<IEdmStructuredType>> baseTypeCache;
    private static EdmTypeSemantics();
    [ExtensionAttribute]
public static bool IsCollection(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsEntity(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsPath(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsEntityReference(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsComplex(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsUntyped(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsEnum(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsTypeDefinition(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsStructured(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsStructured(EdmTypeKind typeKind);
    [ExtensionAttribute]
public static bool IsPrimitive(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsBinary(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsBoolean(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsTemporal(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsTemporal(IEdmType type);
    [ExtensionAttribute]
public static bool IsTemporal(EdmPrimitiveTypeKind typeKind);
    [ExtensionAttribute]
public static bool IsDuration(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsDate(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsDateTimeOffset(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsDecimal(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsDecimal(IEdmType type);
    [ExtensionAttribute]
public static bool IsFloating(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsSingle(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsTimeOfDay(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsDouble(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsGuid(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsSignedIntegral(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsSByte(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsInt16(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsInt32(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsInt64(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsIntegral(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsIntegral(EdmPrimitiveTypeKind primitiveTypeKind);
    [ExtensionAttribute]
public static bool IsByte(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsString(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsString(IEdmType type);
    [ExtensionAttribute]
public static bool IsUntyped(IEdmType type);
    [ExtensionAttribute]
public static bool IsBinary(IEdmType type);
    [ExtensionAttribute]
public static bool IsStream(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsStream(IEdmType type);
    [ExtensionAttribute]
public static bool IsSpatial(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsSpatial(IEdmType type);
    [ExtensionAttribute]
public static bool IsSpatial(EdmPrimitiveTypeKind typeKind);
    [ExtensionAttribute]
public static bool IsGeography(IEdmType type);
    [ExtensionAttribute]
public static bool IsGeography(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsGeography(EdmPrimitiveTypeKind typeKind);
    [ExtensionAttribute]
public static bool IsGeometry(IEdmType type);
    [ExtensionAttribute]
public static bool IsGeometry(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool IsGeometry(EdmPrimitiveTypeKind typeKind);
    [ExtensionAttribute]
public static IEdmPrimitiveTypeReference AsPrimitive(IEdmTypeReference type);
    [ExtensionAttribute]
public static IEdmCollectionTypeReference AsCollection(IEdmTypeReference type);
    [ExtensionAttribute]
public static IEdmStructuredTypeReference AsStructured(IEdmTypeReference type);
    [ExtensionAttribute]
public static IEdmEnumTypeReference AsEnum(IEdmTypeReference type);
    [ExtensionAttribute]
public static IEdmTypeDefinitionReference AsTypeDefinition(IEdmTypeReference type);
    [ExtensionAttribute]
public static IEdmEntityTypeReference AsEntity(IEdmTypeReference type);
    [ExtensionAttribute]
public static IEdmEntityReferenceTypeReference AsEntityReference(IEdmTypeReference type);
    [ExtensionAttribute]
public static IEdmComplexTypeReference AsComplex(IEdmTypeReference type);
    [ExtensionAttribute]
public static IEdmPathTypeReference AsPath(IEdmTypeReference type);
    [ExtensionAttribute]
public static IEdmSpatialTypeReference AsSpatial(IEdmTypeReference type);
    [ExtensionAttribute]
public static IEdmTemporalTypeReference AsTemporal(IEdmTypeReference type);
    [ExtensionAttribute]
public static IEdmDecimalTypeReference AsDecimal(IEdmTypeReference type);
    [ExtensionAttribute]
public static IEdmStringTypeReference AsString(IEdmTypeReference type);
    [ExtensionAttribute]
public static IEdmBinaryTypeReference AsBinary(IEdmTypeReference type);
    [ExtensionAttribute]
public static EdmPrimitiveTypeKind PrimitiveKind(IEdmTypeReference type);
    [ExtensionAttribute]
public static bool InheritsFrom(IEdmStructuredType type, IEdmStructuredType potentialBaseType);
    private static bool TryGetBaseTypes(IEdmStructuredType type, HashSet`1& baseTypes);
    [ExtensionAttribute]
public static bool IsOrInheritsFrom(IEdmType thisType, IEdmType otherType);
    [ExtensionAttribute]
public static bool IsOnSameTypeHierarchyLineWith(IEdmType thisType, IEdmType otherType);
    [ExtensionAttribute]
public static IEdmType AsActualType(IEdmType type);
    [ExtensionAttribute]
internal static IEdmPrimitiveTypeReference GetPrimitiveTypeReference(IEdmPrimitiveType type, bool isNullable);
    [ExtensionAttribute]
internal static IEdmTypeReference GetTypeReference(IEdmType type, bool isNullable);
    [ExtensionAttribute]
internal static IEdmPrimitiveType UnderlyingType(IEdmType type);
    [ExtensionAttribute]
internal static IEdmPrimitiveType UnderlyingType(IEdmTypeReference type);
    [ExtensionAttribute]
internal static IEdmTypeReference AsActualTypeReference(IEdmTypeReference type);
    [ExtensionAttribute]
internal static bool CanSpecifyMaxLength(IEdmPrimitiveType type);
    private static IEnumerable`1<EdmError> ConversionError(EdmLocation location, string typeName, string typeKindName);
}
internal class Microsoft.OData.Edm.EdmUnknownEntitySet : EdmEntitySetBase {
    private IEdmNavigationProperty navigationProperty;
    private IEdmNavigationSource parentNavigationSource;
    private IEdmPathExpression path;
    public IEdmPathExpression Path { get; }
    public IEdmType Type { get; }
    public EdmUnknownEntitySet(IEdmNavigationSource parentNavigationSource, IEdmNavigationProperty navigationProperty);
    public virtual IEdmPathExpression get_Path();
    public virtual IEdmType get_Type();
    public virtual IEdmNavigationSource FindNavigationTarget(IEdmNavigationProperty property);
    private IEdmPathExpression ComputePath();
}
public class Microsoft.OData.Edm.EdmUntypedStructuredType : EdmStructuredType {
    private string namespaceName;
    private string name;
    private string fullName;
    public static EdmUntypedStructuredType Instance;
    public string Namespace { get; }
    public string FullName { get; }
    public string Name { get; }
    public EdmTypeKind TypeKind { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public EdmUntypedStructuredType(string namespaceName, string name);
    private static EdmUntypedStructuredType();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_FullName();
    public sealed virtual string get_Name();
    public virtual EdmTypeKind get_TypeKind();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
}
public class Microsoft.OData.Edm.EdmUntypedStructuredTypeReference : EdmTypeReference {
    public static IEdmStructuredTypeReference NullableTypeReference;
    public static IEdmStructuredTypeReference NonNullableTypeReference;
    public EdmUntypedStructuredTypeReference(IEdmStructuredType definition);
    public EdmUntypedStructuredTypeReference(IEdmStructuredType definition, bool isNullable);
    private static EdmUntypedStructuredTypeReference();
}
public class Microsoft.OData.Edm.EdmUntypedTypeReference : EdmTypeReference {
    public EdmUntypedTypeReference(IEdmUntypedType definition);
    public EdmUntypedTypeReference(IEdmUntypedType definition, bool isNullable);
}
[ExtensionAttribute]
public static class Microsoft.OData.Edm.EdmUtil : object {
    private static string StartCharacterExp;
    private static string OtherCharacterExp;
    private static string NameExp;
    private static Regex UndottedNameValidator;
    private static EdmUtil();
    [ExtensionAttribute]
public static string GetMimeType(IEdmModel model, IEdmProperty annotatableProperty);
    [ExtensionAttribute]
public static void SetMimeType(IEdmModel model, IEdmProperty annotatableProperty, string mimeType);
    [ExtensionAttribute]
public static string GetMimeType(IEdmModel model, IEdmOperation annotatableOperation);
    [ExtensionAttribute]
public static string GetSymbolicString(IEdmVocabularyAnnotatable annotatedElement);
    [ExtensionAttribute]
public static void SetMimeType(IEdmModel model, IEdmOperation annotatableOperation, string mimeType);
    internal static bool TryParseContainerQualifiedElementName(string containerQualifiedElementName, String& containerName, String& containerElementName);
    internal static bool IsNullOrWhiteSpaceInternal(string value);
    internal static string JoinInternal(string separator, IEnumerable`1<T> values);
    internal static bool IsQualifiedName(string name);
    internal static bool IsValidUndottedName(string name);
    internal static bool IsValidDottedName(string name);
    internal static string ParameterizedName(IEdmOperation operation);
    internal static bool TryGetNamespaceNameFromQualifiedName(string qualifiedName, String& namespaceName, String& name, String& fullName);
    internal static bool TryGetNamespaceNameFromQualifiedName(string qualifiedName, String& namespaceName, String& name);
    internal static string FullyQualifiedName(IEdmVocabularyAnnotatable element);
    [DebuggerStepThroughAttribute]
internal static T CheckArgumentNull(T value, string parameterName);
    [ExtensionAttribute]
internal static bool EqualsOrdinal(string string1, string string2);
    [ExtensionAttribute]
internal static bool EqualsOrdinalIgnoreCase(string string1, string string2);
    [ExtensionAttribute]
internal static void SetAnnotation(IEdmModel model, IEdmElement annotatable, string localName, string value);
    [ExtensionAttribute]
internal static bool TryGetAnnotation(IEdmModel model, IEdmElement annotatable, string localName, String& value);
    internal static TValue DictionaryGetOrUpdate(ConcurrentDictionary`2<TKey, TValue> dictionary, TKey key, Func`2<TKey, TValue> computeValue);
    internal static TValue DictionarySafeGet(ConcurrentDictionary`2<TKey, TValue> dictionary, TKey key);
    internal static string GetFullNameForSchemaElement(string elementNamespace, string elementName);
    [ExtensionAttribute]
private static string GetStringAnnotationValue(IEdmModel model, TEdmElement annotatable, string localName, Func`1<string> getFoundAnnotationValueErrorString);
}
[ExtensionAttribute]
public static class Microsoft.OData.Edm.EnumHelper : object {
    private static int MaxHashElements;
    private static ConcurrentDictionary`2<IEdmEnumType, HashEntry> fieldInfoHash;
    private static EnumHelper();
    [ExtensionAttribute]
public static bool TryParseEnum(IEdmEnumType enumType, string value, bool ignoreCase, Int64& parseResult);
    [ExtensionAttribute]
public static string ToStringLiteral(IEdmEnumTypeReference type, long value);
    [ExtensionAttribute]
private static string ToStringWithFlags(IEdmEnumType enumType, long value);
    [ExtensionAttribute]
private static string ToStringNoFlags(IEdmEnumType enumType, long value);
    [ExtensionAttribute]
private static void GetCachedValuesAndNames(IEdmEnumType enumType, UInt64[]& values, String[]& names, bool getValues, bool getNames);
    private static void GetEnumValuesAndNames(IEdmEnumType enumType, UInt64[]& values, String[]& names, bool getValues, bool getNames);
    private static HashEntry GetHashEntry(IEdmEnumType enumType);
}
internal static class Microsoft.OData.Edm.Error : object {
    internal static Exception ArgumentNull(string paramName);
    internal static Exception ArgumentOutOfRange(string paramName);
    internal static Exception NotImplemented();
    internal static Exception NotSupported();
}
[ExtensionAttribute]
public static class Microsoft.OData.Edm.ExtensionMethods : object {
    private static int ContainerExtendsMaxDepth;
    private static string CollectionTypeFormat;
    private static IEnumerable`1<IEdmStructuralProperty> EmptyStructuralProperties;
    private static IEnumerable`1<IEdmNavigationProperty> EmptyNavigationProperties;
    private static Func`3<IEdmModel, string, IEdmSchemaType> findType;
    private static Func`3<IEdmModel, string, IEdmTerm> findTerm;
    private static Func`3<IEdmModel, string, IEnumerable`1<IEdmOperation>> findOperations;
    private static Func`3<IEdmModel, string, IEdmEntityContainer> findEntityContainer;
    private static Func`3<IEnumerable`1<IEdmOperation>, IEnumerable`1<IEdmOperation>, IEnumerable`1<IEdmOperation>> mergeFunctions;
    private static ExtensionMethods();
    [ExtensionAttribute]
public static Version GetEdmVersion(IEdmModel model);
    [ExtensionAttribute]
public static void SetEdmVersion(IEdmModel model, Version version);
    [ExtensionAttribute]
public static IEdmSchemaType FindType(IEdmModel model, string qualifiedName);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmOperation> FindBoundOperations(IEdmModel model, IEdmType bindingType);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmOperation> FindBoundOperations(IEdmModel model, string qualifiedName, IEdmType bindingType);
    [ExtensionAttribute]
public static IEdmTerm FindTerm(IEdmModel model, string qualifiedName);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmOperation> FindOperations(IEdmModel model, string qualifiedName);
    [ExtensionAttribute]
public static bool ExistsContainer(IEdmModel model, string containerName);
    [ExtensionAttribute]
public static IEdmEntityContainer FindEntityContainer(IEdmModel model, string qualifiedName);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmVocabularyAnnotation> FindVocabularyAnnotationsIncludingInheritedAnnotations(IEdmModel model, IEdmVocabularyAnnotatable element);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmVocabularyAnnotation> GetTargetPathAnnotations(IEdmModel model, string targetPath);
    [ExtensionAttribute]
public static IEnumerable`1<T> FindVocabularyAnnotations(IEdmModel model, string targetPath, IEdmTerm term);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmVocabularyAnnotation> FindVocabularyAnnotations(IEdmModel model, IEdmVocabularyAnnotatable element);
    [ExtensionAttribute]
public static IEnumerable`1<T> FindVocabularyAnnotations(IEdmModel model, IEdmVocabularyAnnotatable element, IEdmTerm term);
    [ExtensionAttribute]
public static IEnumerable`1<T> FindVocabularyAnnotations(IEdmModel model, IEdmVocabularyAnnotatable element, IEdmTerm term, string qualifier);
    [ExtensionAttribute]
public static IEnumerable`1<T> FindVocabularyAnnotations(IEdmModel model, IEdmVocabularyAnnotatable element, string termName);
    [IteratorStateMachineAttribute("Microsoft.OData.Edm.ExtensionMethods/<FindVocabularyAnnotations>d__25`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> FindVocabularyAnnotations(IEdmModel model, IEdmVocabularyAnnotatable element, string termName, string qualifier);
    [ExtensionAttribute]
public static IEdmValue GetTermValue(IEdmModel model, IEdmStructuredValue context, string termName, EdmExpressionEvaluator expressionEvaluator);
    [ExtensionAttribute]
public static IEdmValue GetTermValue(IEdmModel model, IEdmStructuredValue context, string termName, string qualifier, EdmExpressionEvaluator expressionEvaluator);
    [ExtensionAttribute]
public static IEdmValue GetTermValue(IEdmModel model, IEdmStructuredValue context, IEdmTerm term, EdmExpressionEvaluator expressionEvaluator);
    [ExtensionAttribute]
public static IEdmValue GetTermValue(IEdmModel model, IEdmStructuredValue context, IEdmTerm term, string qualifier, EdmExpressionEvaluator expressionEvaluator);
    [ExtensionAttribute]
public static T GetTermValue(IEdmModel model, IEdmStructuredValue context, string termName, EdmToClrEvaluator evaluator);
    [ExtensionAttribute]
public static T GetTermValue(IEdmModel model, IEdmStructuredValue context, string termName, string qualifier, EdmToClrEvaluator evaluator);
    [ExtensionAttribute]
public static T GetTermValue(IEdmModel model, IEdmStructuredValue context, IEdmTerm term, EdmToClrEvaluator evaluator);
    [ExtensionAttribute]
public static T GetTermValue(IEdmModel model, IEdmStructuredValue context, IEdmTerm term, string qualifier, EdmToClrEvaluator evaluator);
    [ExtensionAttribute]
public static IEdmValue GetTermValue(IEdmModel model, IEdmVocabularyAnnotatable element, string termName, EdmExpressionEvaluator expressionEvaluator);
    [ExtensionAttribute]
public static IEdmValue GetTermValue(IEdmModel model, IEdmVocabularyAnnotatable element, string termName, string qualifier, EdmExpressionEvaluator expressionEvaluator);
    [ExtensionAttribute]
public static IEdmValue GetTermValue(IEdmModel model, IEdmVocabularyAnnotatable element, IEdmTerm term, EdmExpressionEvaluator expressionEvaluator);
    [ExtensionAttribute]
public static IEdmValue GetTermValue(IEdmModel model, IEdmVocabularyAnnotatable element, IEdmTerm term, string qualifier, EdmExpressionEvaluator expressionEvaluator);
    [ExtensionAttribute]
public static T GetTermValue(IEdmModel model, IEdmVocabularyAnnotatable element, string termName, EdmToClrEvaluator evaluator);
    [ExtensionAttribute]
public static T GetTermValue(IEdmModel model, IEdmVocabularyAnnotatable element, string termName, string qualifier, EdmToClrEvaluator evaluator);
    [ExtensionAttribute]
public static T GetTermValue(IEdmModel model, IEdmVocabularyAnnotatable element, IEdmTerm term, EdmToClrEvaluator evaluator);
    [ExtensionAttribute]
public static T GetTermValue(IEdmModel model, IEdmVocabularyAnnotatable element, IEdmTerm term, string qualifier, EdmToClrEvaluator evaluator);
    [ExtensionAttribute]
public static object GetAnnotationValue(IEdmModel model, IEdmElement element, string namespaceName, string localName);
    [ExtensionAttribute]
public static T GetAnnotationValue(IEdmModel model, IEdmElement element, string namespaceName, string localName);
    [ExtensionAttribute]
public static T GetAnnotationValue(IEdmModel model, IEdmElement element);
    [ExtensionAttribute]
public static void SetAnnotationValue(IEdmModel model, IEdmElement element, string namespaceName, string localName, object value);
    [ExtensionAttribute]
public static string GetDescriptionAnnotation(IEdmModel model, IEdmVocabularyAnnotatable target);
    [ExtensionAttribute]
public static string GetLongDescriptionAnnotation(IEdmModel model, IEdmVocabularyAnnotatable target);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetDerivedTypeConstraints(IEdmModel model, IEdmNavigationSource navigationSource);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetDerivedTypeConstraints(IEdmModel model, IEdmVocabularyAnnotatable target);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmSchemaElement> SchemaElementsAcrossModels(IEdmModel model);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmStructuredType> FindAllDerivedTypes(IEdmModel model, IEdmStructuredType baseType);
    [ExtensionAttribute]
public static void SetAnnotationValue(IEdmModel model, IEdmElement element, T value);
    [ExtensionAttribute]
public static Object[] GetAnnotationValues(IEdmModel model, IEnumerable`1<IEdmDirectValueAnnotationBinding> annotations);
    [ExtensionAttribute]
public static void SetAnnotationValues(IEdmModel model, IEnumerable`1<IEdmDirectValueAnnotationBinding> annotations);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmDirectValueAnnotation> DirectValueAnnotations(IEdmModel model, IEdmElement element);
    [ExtensionAttribute]
public static bool TryFindContainerQualifiedEntitySet(IEdmModel model, string containerQualifiedEntitySetName, IEdmEntitySet& entitySet);
    [ExtensionAttribute]
public static bool TryFindContainerQualifiedSingleton(IEdmModel model, string containerQualifiedSingletonName, IEdmSingleton& singleton);
    [ExtensionAttribute]
public static bool TryFindContainerQualifiedOperationImports(IEdmModel model, string containerQualifiedOperationImportName, IEnumerable`1& operationImports);
    [ExtensionAttribute]
public static IEdmEntitySet FindDeclaredEntitySet(IEdmModel model, string qualifiedName);
    [ExtensionAttribute]
public static IEdmSingleton FindDeclaredSingleton(IEdmModel model, string qualifiedName);
    [ExtensionAttribute]
public static IEdmNavigationSource FindDeclaredNavigationSource(IEdmModel model, string qualifiedName);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmOperationImport> FindDeclaredOperationImports(IEdmModel model, string qualifiedName);
    [ExtensionAttribute]
public static IPrimitiveValueConverter GetPrimitiveValueConverter(IEdmModel model, IEdmTypeReference type);
    [ExtensionAttribute]
public static void SetPrimitiveValueConverter(IEdmModel model, IEdmTypeDefinitionReference typeDefinition, IPrimitiveValueConverter converter);
    [ExtensionAttribute]
public static void MarkAsImmutable(IEdmModel model);
    [ExtensionAttribute]
public static bool IsImmutable(IEdmModel model);
    [ExtensionAttribute]
internal static VocabularyAnnotationCache GetVocabularyAnnotationCache(IEdmModel model);
    [ExtensionAttribute]
public static EdmComplexType AddComplexType(EdmModel model, string namespaceName, string name);
    [ExtensionAttribute]
public static EdmComplexType AddComplexType(EdmModel model, string namespaceName, string name, IEdmComplexType baseType);
    [ExtensionAttribute]
public static EdmComplexType AddComplexType(EdmModel model, string namespaceName, string name, IEdmComplexType baseType, bool isAbstract);
    [ExtensionAttribute]
public static EdmComplexType AddComplexType(EdmModel model, string namespaceName, string name, IEdmComplexType baseType, bool isAbstract, bool isOpen);
    [ExtensionAttribute]
public static EdmEntityType AddEntityType(EdmModel model, string namespaceName, string name);
    [ExtensionAttribute]
public static EdmEntityType AddEntityType(EdmModel model, string namespaceName, string name, IEdmEntityType baseType);
    [ExtensionAttribute]
public static EdmEntityType AddEntityType(EdmModel model, string namespaceName, string name, IEdmEntityType baseType, bool isAbstract, bool isOpen);
    [ExtensionAttribute]
public static EdmEntityType AddEntityType(EdmModel model, string namespaceName, string name, IEdmEntityType baseType, bool isAbstract, bool isOpen, bool hasStream);
    [ExtensionAttribute]
public static EdmEntityContainer AddEntityContainer(EdmModel model, string namespaceName, string name);
    [ExtensionAttribute]
public static EdmTerm AddTerm(EdmModel model, string namespaceName, string name, EdmPrimitiveTypeKind kind);
    [ExtensionAttribute]
public static EdmTerm AddTerm(EdmModel model, string namespaceName, string name, IEdmTypeReference type);
    [ExtensionAttribute]
public static EdmTerm AddTerm(EdmModel model, string namespaceName, string name, IEdmTypeReference type, string appliesTo, string defaultValue);
    [ExtensionAttribute]
public static void SetOptimisticConcurrencyAnnotation(EdmModel model, IEdmEntitySet target, IEnumerable`1<IEdmStructuralProperty> properties);
    [ExtensionAttribute]
public static void SetDescriptionAnnotation(EdmModel model, IEdmVocabularyAnnotatable target, string description);
    [ExtensionAttribute]
public static void SetLongDescriptionAnnotation(EdmModel model, IEdmVocabularyAnnotatable target, string description);
    [ExtensionAttribute]
public static void SetChangeTrackingAnnotation(EdmModel model, IEdmEntityContainer target, bool isSupported);
    [ExtensionAttribute]
public static void SetChangeTrackingAnnotation(EdmModel model, IEdmEntitySet target, bool isSupported, IEnumerable`1<IEdmStructuralProperty> filterableProperties, IEnumerable`1<IEdmNavigationProperty> expandableProperties);
    [ExtensionAttribute]
public static IEdmTypeDefinitionReference GetUInt16(EdmModel model, string namespaceName, bool isNullable);
    [ExtensionAttribute]
public static IEdmTypeDefinitionReference GetUInt32(EdmModel model, string namespaceName, bool isNullable);
    [ExtensionAttribute]
public static IEdmTypeDefinitionReference GetUInt64(EdmModel model, string namespaceName, bool isNullable);
    [ExtensionAttribute]
public static IEdmTargetPath GetTargetPath(IEdmModel model, string targetPath, bool ignoreCase);
    [ExtensionAttribute]
public static EdmLocation Location(IEdmElement item);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmVocabularyAnnotation> VocabularyAnnotations(IEdmVocabularyAnnotatable element, IEdmModel model);
    [ExtensionAttribute]
public static string FullName(IEdmSchemaElement element);
    [ExtensionAttribute]
public static string ShortQualifiedName(IEdmSchemaElement element);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmEntitySet> EntitySets(IEdmEntityContainer container);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmSingleton> Singletons(IEdmEntityContainer container);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmOperationImport> OperationImports(IEdmEntityContainer container);
    [IteratorStateMachineAttribute("Microsoft.OData.Edm.ExtensionMethods/<GetNavigationPropertyBindings>d__96")]
[ExtensionAttribute]
public static IEnumerable`1<Tuple`2<IEdmEntityContainerElement, IEdmNavigationPropertyBinding>> GetNavigationPropertyBindings(IEdmEntityContainer container);
    [ExtensionAttribute]
public static EdmTypeKind TypeKind(IEdmTypeReference type);
    [ExtensionAttribute]
public static string FullName(IEdmTypeReference type);
    [ExtensionAttribute]
public static string ShortQualifiedName(IEdmTypeReference type);
    [ExtensionAttribute]
public static string FullTypeName(IEdmType type);
    [ExtensionAttribute]
public static IEdmType AsElementType(IEdmType type);
    [ExtensionAttribute]
public static IEdmPrimitiveType PrimitiveDefinition(IEdmPrimitiveTypeReference type);
    [ExtensionAttribute]
public static EdmPrimitiveTypeKind PrimitiveKind(IEdmPrimitiveTypeReference type);
    [IteratorStateMachineAttribute("Microsoft.OData.Edm.ExtensionMethods/<Properties>d__104")]
[ExtensionAttribute]
public static IEnumerable`1<IEdmProperty> Properties(IEdmStructuredType type);
    [IteratorStateMachineAttribute("Microsoft.OData.Edm.ExtensionMethods/<DeclaredStructuralProperties>d__105")]
[ExtensionAttribute]
public static IEnumerable`1<IEdmStructuralProperty> DeclaredStructuralProperties(IEdmStructuredType type);
    [IteratorStateMachineAttribute("Microsoft.OData.Edm.ExtensionMethods/<StructuralProperties>d__106")]
[ExtensionAttribute]
public static IEnumerable`1<IEdmStructuralProperty> StructuralProperties(IEdmStructuredType type);
    [ExtensionAttribute]
public static IEdmStructuredType StructuredDefinition(IEdmStructuredTypeReference type);
    [ExtensionAttribute]
public static bool IsAbstract(IEdmStructuredTypeReference type);
    [ExtensionAttribute]
public static bool IsOpen(IEdmStructuredTypeReference type);
    [ExtensionAttribute]
public static bool IsOpen(IEdmType type);
    [ExtensionAttribute]
public static IEdmStructuredType BaseType(IEdmStructuredTypeReference type);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmStructuralProperty> DeclaredStructuralProperties(IEdmStructuredTypeReference type);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmStructuralProperty> StructuralProperties(IEdmStructuredTypeReference type);
    [ExtensionAttribute]
public static IEdmProperty FindProperty(IEdmStructuredTypeReference structuredType, string propertyName, bool caseInsensitive);
    [ExtensionAttribute]
public static IEdmProperty FindProperty(IEdmStructuredType structuredType, string propertyName, bool caseInsensitive);
    [ExtensionAttribute]
public static IEdmProperty FindProperty(IEdmStructuredTypeReference type, string name);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmNavigationProperty> NavigationProperties(IEdmStructuredTypeReference type);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmNavigationProperty> DeclaredNavigationProperties(IEdmStructuredTypeReference type);
    [ExtensionAttribute]
public static IEdmNavigationProperty FindNavigationProperty(IEdmStructuredTypeReference type, string name);
    [ExtensionAttribute]
public static IEdmEntityType BaseEntityType(IEdmEntityType type);
    [ExtensionAttribute]
public static IEdmStructuredType BaseType(IEdmStructuredType type);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmNavigationProperty> DeclaredNavigationProperties(IEdmStructuredType type);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmNavigationProperty> NavigationProperties(IEdmStructuredType type);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmStructuralProperty> Key(IEdmEntityType type);
    [ExtensionAttribute]
public static bool IsKey(IEdmProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IDictionary`2<string, IEdmProperty>> GetAlternateKeysAnnotation(IEdmModel model, IEdmEntityType type);
    [ExtensionAttribute]
public static void AddAlternateKeyAnnotation(EdmModel model, IEdmEntityType type, IDictionary`2<string, IEdmProperty> alternateKey, bool useCore);
    [ExtensionAttribute]
public static bool HasDeclaredKeyProperty(IEdmEntityType entityType, IEdmProperty property);
    [ExtensionAttribute]
public static IEdmEntityType EntityDefinition(IEdmEntityTypeReference type);
    [ExtensionAttribute]
public static IEdmEntityType BaseEntityType(IEdmEntityTypeReference type);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmStructuralProperty> Key(IEdmEntityTypeReference type);
    [ExtensionAttribute]
public static IEdmComplexType BaseComplexType(IEdmComplexType type);
    [ExtensionAttribute]
public static IEdmComplexType ComplexDefinition(IEdmComplexTypeReference type);
    [ExtensionAttribute]
public static IEdmComplexType BaseComplexType(IEdmComplexTypeReference type);
    [ExtensionAttribute]
public static IEdmEntityReferenceType EntityReferenceDefinition(IEdmEntityReferenceTypeReference type);
    [ExtensionAttribute]
public static IEdmEntityType EntityType(IEdmEntityReferenceTypeReference type);
    [ExtensionAttribute]
public static IEdmCollectionType CollectionDefinition(IEdmCollectionTypeReference type);
    [ExtensionAttribute]
public static IEdmTypeReference ElementType(IEdmCollectionTypeReference type);
    [ExtensionAttribute]
public static IEdmEnumType EnumDefinition(IEdmEnumTypeReference type);
    [ExtensionAttribute]
public static IEdmTypeDefinition TypeDefinition(IEdmTypeDefinitionReference type);
    [ExtensionAttribute]
public static EdmMultiplicity TargetMultiplicity(IEdmNavigationProperty property);
    [ExtensionAttribute]
public static IEdmEntityType ToEntityType(IEdmNavigationProperty property);
    [ExtensionAttribute]
public static IEdmStructuredType ToStructuredType(IEdmTypeReference propertyTypeReference);
    [ExtensionAttribute]
public static IEdmEntityType DeclaringEntityType(IEdmNavigationProperty property);
    [ExtensionAttribute]
public static bool IsPrincipal(IEdmNavigationProperty navigationProperty);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmStructuralProperty> DependentProperties(IEdmNavigationProperty navigationProperty);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmStructuralProperty> PrincipalProperties(IEdmNavigationProperty navigationProperty);
    [ExtensionAttribute]
public static IEdmTerm Term(IEdmVocabularyAnnotation annotation);
    [ExtensionAttribute]
public static bool TryGetRelativeEntitySetPath(IEdmOperation operation, IEdmModel model, IEdmOperationParameter& parameter, Dictionary`2& relativeNavigations, IEdmEntityType& lastEntityType, IEnumerable`1& errors);
    [ExtensionAttribute]
public static bool IsActionImport(IEdmOperationImport operationImport);
    [ExtensionAttribute]
public static bool IsFunctionImport(IEdmOperationImport operationImport);
    [ExtensionAttribute]
public static bool TryGetStaticEntitySet(IEdmOperationImport operationImport, IEdmModel model, IEdmEntitySetBase& entitySet);
    [ExtensionAttribute]
public static bool TryGetRelativeEntitySetPath(IEdmOperationImport operationImport, IEdmModel model, IEdmOperationParameter& parameter, Dictionary`2& relativeNavigations, IEnumerable`1& edmErrors);
    [ExtensionAttribute]
public static bool IsAction(IEdmOperation operation);
    [ExtensionAttribute]
public static bool IsFunction(IEdmOperation operation);
    [ExtensionAttribute]
public static IEdmOperationReturn GetReturn(IEdmOperation operation);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmOperation> FilterByName(IEnumerable`1<IEdmOperation> operations, bool forceFullyQualifiedNameFilter, string operationName);
    [ExtensionAttribute]
public static bool HasEquivalentBindingType(IEdmOperation operation, IEdmType bindingType);
    [ExtensionAttribute]
public static IEdmPropertyConstructor FindProperty(IEdmRecordExpression expression, string name);
    [ExtensionAttribute]
public static EdmNavigationSourceKind NavigationSourceKind(IEdmNavigationSource navigationSource);
    [ExtensionAttribute]
public static string FullNavigationSourceName(IEdmNavigationSource navigationSource);
    [ExtensionAttribute]
[ObsoleteAttribute("This will be dropped in the 9.x release. Use IEdmNavigationSource.EntityType property.")]
public static IEdmEntityType EntityType(IEdmNavigationSource navigationSource);
    [ExtensionAttribute]
public static void SetEdmReferences(IEdmModel model, IEnumerable`1<IEdmReference> edmReferences);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmReference> GetEdmReferences(IEdmModel model);
    [ExtensionAttribute]
public static IEdmPathExpression GetPartnerPath(IEdmNavigationProperty navigationProperty);
    [ExtensionAttribute]
internal static string ReplaceAlias(IEdmModel model, string name);
    [ExtensionAttribute]
internal static string GetPathString(IEdmTargetPath targetPath);
    [ExtensionAttribute]
internal static IEnumerable`1<IEdmOperation> FindOperationsInModelTree(CsdlSemanticsModel model, string name);
    [ExtensionAttribute]
internal static IEdmSchemaType FindTypeInModelTree(CsdlSemanticsModel model, string name);
    [ExtensionAttribute]
internal static T FindInModelTree(CsdlSemanticsModel model, Func`3<IEdmModel, string, T> finderFunc, string qualifiedName, Func`3<T, T, T> ambiguousCreator);
    [ExtensionAttribute]
internal static bool IsUrlEscapeFunction(IEdmModel model, IEdmFunction function);
    [ExtensionAttribute]
internal static void SetUrlEscapeFunction(EdmModel model, IEdmFunction function);
    internal static bool TryGetRelativeEntitySetPath(IEdmElement element, Collection`1<EdmError> foundErrors, IEdmPathExpression pathExpression, IEdmModel model, IEnumerable`1<IEdmOperationParameter> parameters, IEdmOperationParameter& parameter, Dictionary`2& relativeNavigations, IEdmEntityType& lastEntityType);
    internal static IEdmEntityType GetPathSegmentEntityType(IEdmTypeReference segmentType);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmEntityContainerElement> AllElements(IEdmEntityContainer container, int depth);
    [ExtensionAttribute]
internal static IEdmEntitySet FindEntitySetExtended(IEdmEntityContainer container, string qualifiedName);
    [ExtensionAttribute]
internal static IEdmNavigationSource FindNavigationSourceExtended(IEdmEntityContainer container, string path);
    [ExtensionAttribute]
internal static IEdmNavigationSource FindNavigationSource(IEdmEntityContainer container, string path);
    [ExtensionAttribute]
internal static IEdmSingleton FindSingletonExtended(IEdmEntityContainer container, string qualifiedName);
    [ExtensionAttribute]
internal static IEnumerable`1<IEdmOperationImport> FindOperationImportsExtended(IEdmEntityContainer container, string qualifiedName);
    [ExtensionAttribute]
internal static IPrimitiveValueConverter GetPrimitiveValueConverter(IEdmModel model, IEdmType typeDefinition);
    [ExtensionAttribute]
internal static void SetPrimitiveValueConverter(IEdmModel model, IEdmType typeDefinition, IPrimitiveValueConverter converter);
    [ExtensionAttribute]
internal static bool TryGetStaticEntitySet(IEdmPathExpression pathExpression, IEdmModel model, IEdmEntitySetBase& entitySet);
    [ExtensionAttribute]
internal static bool HasAny(IEnumerable`1<T> enumerable);
    private static IEnumerable`1<IDictionary`2<string, IEdmProperty>> GetDeclaredAlternateKeysForType(IEdmEntityType type, IEdmModel model);
    [ExtensionAttribute]
private static T FindAcrossModels(IEdmModel model, TInput qualifiedName, Func`3<IEdmModel, TInput, T> finder, Func`3<T, T, T> ambiguousCreator);
    [ExtensionAttribute]
private static T GetTermValue(IEdmModel model, IEdmStructuredValue context, IEdmEntityType contextType, IEdmTerm term, string qualifier, Func`4<IEdmExpression, IEdmStructuredValue, IEdmTypeReference, T> evaluator);
    [ExtensionAttribute]
private static T GetTermValue(IEdmModel model, IEdmStructuredValue context, IEdmEntityType contextType, string termName, string qualifier, Func`4<IEdmExpression, IEdmStructuredValue, IEdmTypeReference, T> evaluator);
    [ExtensionAttribute]
private static T GetTermValue(IEdmModel model, IEdmVocabularyAnnotatable element, IEdmTerm term, string qualifier, Func`4<IEdmExpression, IEdmStructuredValue, IEdmTypeReference, T> evaluator);
    [ExtensionAttribute]
private static T GetTermValue(IEdmModel model, IEdmVocabularyAnnotatable element, string termName, string qualifier, Func`4<IEdmExpression, IEdmStructuredValue, IEdmTypeReference, T> evaluator);
    private static T FindInContainerAndExtendsRecursively(IEdmEntityContainer container, string simpleName, Func`3<IEdmEntityContainer, string, T> finderFunc, int depth);
    private static T AnnotationValue(object annotation);
    [ExtensionAttribute]
private static void DerivedFrom(IEdmModel model, IEdmStructuredType baseType, HashSetInternal`1<IEdmStructuredType> visited, List`1<IEdmStructuredType> derivedTypes);
    [ExtensionAttribute]
private static void SetChangeTrackingAnnotationImplementation(EdmModel model, IEdmVocabularyAnnotatable target, bool isSupported, IEnumerable`1<IEdmStructuralProperty> filterableProperties, IEnumerable`1<IEdmNavigationProperty> expandableProperties);
    [ExtensionAttribute]
private static IEdmTypeDefinitionReference GetUIntImplementation(EdmModel model, string namespaceName, string name, string underlyingType, bool isNullable);
}
internal class Microsoft.OData.Edm.HashSetInternal`1 : object {
    private Dictionary`2<T, object> wrappedDictionary;
    public bool Add(T thingToAdd);
    public bool Contains(T item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public void Remove(T item);
}
internal interface Microsoft.OData.Edm.IDependencyTrigger {
    public HashSetInternal`1<IDependent> Dependents { get; }
    public abstract virtual HashSetInternal`1<IDependent> get_Dependents();
}
internal interface Microsoft.OData.Edm.IDependent {
    public HashSetInternal`1<IDependencyTrigger> DependsOn { get; }
    public abstract virtual HashSetInternal`1<IDependencyTrigger> get_DependsOn();
}
public interface Microsoft.OData.Edm.IEdmAction {
}
public interface Microsoft.OData.Edm.IEdmActionImport {
    public IEdmAction Action { get; }
    public abstract virtual IEdmAction get_Action();
}
public interface Microsoft.OData.Edm.IEdmBinaryTypeReference {
    public bool IsUnbounded { get; }
    public Nullable`1<int> MaxLength { get; }
    public abstract virtual bool get_IsUnbounded();
    public abstract virtual Nullable`1<int> get_MaxLength();
}
public interface Microsoft.OData.Edm.IEdmCheckable {
    public IEnumerable`1<EdmError> Errors { get; }
    public abstract virtual IEnumerable`1<EdmError> get_Errors();
}
public interface Microsoft.OData.Edm.IEdmCollectionType {
    public IEdmTypeReference ElementType { get; }
    public abstract virtual IEdmTypeReference get_ElementType();
}
public interface Microsoft.OData.Edm.IEdmCollectionTypeReference {
}
public interface Microsoft.OData.Edm.IEdmComplexType {
}
public interface Microsoft.OData.Edm.IEdmComplexTypeReference {
}
public interface Microsoft.OData.Edm.IEdmContainedEntitySet {
    public IEdmNavigationSource ParentNavigationSource { get; }
    public IEdmNavigationProperty NavigationProperty { get; }
    public abstract virtual IEdmNavigationSource get_ParentNavigationSource();
    public abstract virtual IEdmNavigationProperty get_NavigationProperty();
}
internal interface Microsoft.OData.Edm.IEdmCoreModelElement {
}
public interface Microsoft.OData.Edm.IEdmDecimalTypeReference {
    public Nullable`1<int> Precision { get; }
    public Nullable`1<int> Scale { get; }
    public abstract virtual Nullable`1<int> get_Precision();
    public abstract virtual Nullable`1<int> get_Scale();
}
public interface Microsoft.OData.Edm.IEdmElement {
}
public interface Microsoft.OData.Edm.IEdmEntityContainer {
    public IEnumerable`1<IEdmEntityContainerElement> Elements { get; }
    public abstract virtual IEnumerable`1<IEdmEntityContainerElement> get_Elements();
    public abstract virtual IEdmEntitySet FindEntitySet(string setName);
    public abstract virtual IEdmSingleton FindSingleton(string singletonName);
    public abstract virtual IEnumerable`1<IEdmOperationImport> FindOperationImports(string operationName);
}
public interface Microsoft.OData.Edm.IEdmEntityContainerElement {
    public EdmContainerElementKind ContainerElementKind { get; }
    public IEdmEntityContainer Container { get; }
    public abstract virtual EdmContainerElementKind get_ContainerElementKind();
    public abstract virtual IEdmEntityContainer get_Container();
}
public interface Microsoft.OData.Edm.IEdmEntityReferenceType {
    public IEdmEntityType EntityType { get; }
    public abstract virtual IEdmEntityType get_EntityType();
}
public interface Microsoft.OData.Edm.IEdmEntityReferenceTypeReference {
}
public interface Microsoft.OData.Edm.IEdmEntitySet {
    public bool IncludeInServiceDocument { get; }
    public abstract virtual bool get_IncludeInServiceDocument();
}
public interface Microsoft.OData.Edm.IEdmEntitySetBase {
}
public interface Microsoft.OData.Edm.IEdmEntityType {
    public IEnumerable`1<IEdmStructuralProperty> DeclaredKey { get; }
    public bool HasStream { get; }
    public abstract virtual IEnumerable`1<IEdmStructuralProperty> get_DeclaredKey();
    public abstract virtual bool get_HasStream();
}
public interface Microsoft.OData.Edm.IEdmEntityTypeReference {
}
public interface Microsoft.OData.Edm.IEdmEnumMember {
    public IEdmEnumMemberValue Value { get; }
    public IEdmEnumType DeclaringType { get; }
    public abstract virtual IEdmEnumMemberValue get_Value();
    public abstract virtual IEdmEnumType get_DeclaringType();
}
public interface Microsoft.OData.Edm.IEdmEnumMemberValue {
    public long Value { get; }
    public abstract virtual long get_Value();
}
public interface Microsoft.OData.Edm.IEdmEnumType {
    public IEdmPrimitiveType UnderlyingType { get; }
    public IEnumerable`1<IEdmEnumMember> Members { get; }
    public bool IsFlags { get; }
    public abstract virtual IEdmPrimitiveType get_UnderlyingType();
    public abstract virtual IEnumerable`1<IEdmEnumMember> get_Members();
    public abstract virtual bool get_IsFlags();
}
public interface Microsoft.OData.Edm.IEdmEnumTypeReference {
}
public interface Microsoft.OData.Edm.IEdmExpression {
    public EdmExpressionKind ExpressionKind { get; }
    public abstract virtual EdmExpressionKind get_ExpressionKind();
}
public interface Microsoft.OData.Edm.IEdmFullNamedElement {
    public string FullName { get; }
    public abstract virtual string get_FullName();
}
public interface Microsoft.OData.Edm.IEdmFunction {
    public bool IsComposable { get; }
    public abstract virtual bool get_IsComposable();
}
public interface Microsoft.OData.Edm.IEdmFunctionImport {
    public bool IncludeInServiceDocument { get; }
    public IEdmFunction Function { get; }
    public abstract virtual bool get_IncludeInServiceDocument();
    public abstract virtual IEdmFunction get_Function();
}
public interface Microsoft.OData.Edm.IEdmInclude {
    public string Alias { get; }
    public string Namespace { get; }
    public abstract virtual string get_Alias();
    public abstract virtual string get_Namespace();
}
public interface Microsoft.OData.Edm.IEdmIncludeAnnotations {
    public string TermNamespace { get; }
    public string Qualifier { get; }
    public string TargetNamespace { get; }
    public abstract virtual string get_TermNamespace();
    public abstract virtual string get_Qualifier();
    public abstract virtual string get_TargetNamespace();
}
public interface Microsoft.OData.Edm.IEdmLocatable {
    public EdmLocation Location { get; }
    public abstract virtual EdmLocation get_Location();
}
public interface Microsoft.OData.Edm.IEdmModel {
    public IEnumerable`1<IEdmSchemaElement> SchemaElements { get; }
    public IEnumerable`1<IEdmVocabularyAnnotation> VocabularyAnnotations { get; }
    public IEnumerable`1<IEdmModel> ReferencedModels { get; }
    public IEnumerable`1<string> DeclaredNamespaces { get; }
    public IEdmDirectValueAnnotationsManager DirectValueAnnotationsManager { get; }
    public IEdmEntityContainer EntityContainer { get; }
    public abstract virtual IEnumerable`1<IEdmSchemaElement> get_SchemaElements();
    public abstract virtual IEnumerable`1<IEdmVocabularyAnnotation> get_VocabularyAnnotations();
    public abstract virtual IEnumerable`1<IEdmModel> get_ReferencedModels();
    public abstract virtual IEnumerable`1<string> get_DeclaredNamespaces();
    public abstract virtual IEdmDirectValueAnnotationsManager get_DirectValueAnnotationsManager();
    public abstract virtual IEdmEntityContainer get_EntityContainer();
    public abstract virtual IEdmSchemaType FindDeclaredType(string qualifiedName);
    public abstract virtual IEnumerable`1<IEdmOperation> FindDeclaredBoundOperations(IEdmType bindingType);
    public abstract virtual IEnumerable`1<IEdmOperation> FindDeclaredBoundOperations(string qualifiedName, IEdmType bindingType);
    public abstract virtual IEnumerable`1<IEdmOperation> FindDeclaredOperations(string qualifiedName);
    public abstract virtual IEdmTerm FindDeclaredTerm(string qualifiedName);
    public abstract virtual IEnumerable`1<IEdmVocabularyAnnotation> FindDeclaredVocabularyAnnotations(IEdmVocabularyAnnotatable element);
    public abstract virtual IEnumerable`1<IEdmStructuredType> FindDirectlyDerivedTypes(IEdmStructuredType baseType);
}
public interface Microsoft.OData.Edm.IEdmNamedElement {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public interface Microsoft.OData.Edm.IEdmNavigationProperty {
    public IEdmNavigationProperty Partner { get; }
    public EdmOnDeleteAction OnDelete { get; }
    public bool ContainsTarget { get; }
    public IEdmReferentialConstraint ReferentialConstraint { get; }
    public abstract virtual IEdmNavigationProperty get_Partner();
    public abstract virtual EdmOnDeleteAction get_OnDelete();
    public abstract virtual bool get_ContainsTarget();
    public abstract virtual IEdmReferentialConstraint get_ReferentialConstraint();
}
public interface Microsoft.OData.Edm.IEdmNavigationPropertyBinding {
    public IEdmNavigationProperty NavigationProperty { get; }
    public IEdmNavigationSource Target { get; }
    public IEdmPathExpression Path { get; }
    public abstract virtual IEdmNavigationProperty get_NavigationProperty();
    public abstract virtual IEdmNavigationSource get_Target();
    public abstract virtual IEdmPathExpression get_Path();
}
public interface Microsoft.OData.Edm.IEdmNavigationSource {
    public IEnumerable`1<IEdmNavigationPropertyBinding> NavigationPropertyBindings { get; }
    public IEdmPathExpression Path { get; }
    public IEdmType Type { get; }
    public IEdmEntityType EntityType { get; }
    public abstract virtual IEnumerable`1<IEdmNavigationPropertyBinding> get_NavigationPropertyBindings();
    public abstract virtual IEdmPathExpression get_Path();
    public abstract virtual IEdmType get_Type();
    public abstract virtual IEdmEntityType get_EntityType();
    public abstract virtual IEdmNavigationSource FindNavigationTarget(IEdmNavigationProperty navigationProperty);
    public abstract virtual IEdmNavigationSource FindNavigationTarget(IEdmNavigationProperty navigationProperty, IEdmPathExpression bindingPath);
    public abstract virtual IEnumerable`1<IEdmNavigationPropertyBinding> FindNavigationPropertyBindings(IEdmNavigationProperty navigationProperty);
}
public interface Microsoft.OData.Edm.IEdmNavigationTargetMapping {
    public IEdmNavigationProperty NavigationProperty { get; }
    public IEdmEntitySet TargetEntitySet { get; }
    public abstract virtual IEdmNavigationProperty get_NavigationProperty();
    public abstract virtual IEdmEntitySet get_TargetEntitySet();
}
public interface Microsoft.OData.Edm.IEdmOperation {
    public IEdmTypeReference ReturnType { get; }
    public IEnumerable`1<IEdmOperationParameter> Parameters { get; }
    public bool IsBound { get; }
    public IEdmPathExpression EntitySetPath { get; }
    public abstract virtual IEdmTypeReference get_ReturnType();
    public abstract virtual IEnumerable`1<IEdmOperationParameter> get_Parameters();
    public abstract virtual bool get_IsBound();
    public abstract virtual IEdmPathExpression get_EntitySetPath();
    public abstract virtual IEdmOperationParameter FindParameter(string name);
}
public interface Microsoft.OData.Edm.IEdmOperationImport {
    public IEdmOperation Operation { get; }
    public IEdmExpression EntitySet { get; }
    public abstract virtual IEdmOperation get_Operation();
    public abstract virtual IEdmExpression get_EntitySet();
}
public interface Microsoft.OData.Edm.IEdmOperationParameter {
    public IEdmTypeReference Type { get; }
    public IEdmOperation DeclaringOperation { get; }
    public abstract virtual IEdmTypeReference get_Type();
    public abstract virtual IEdmOperation get_DeclaringOperation();
}
public interface Microsoft.OData.Edm.IEdmOperationReturn {
    public IEdmTypeReference Type { get; }
    public IEdmOperation DeclaringOperation { get; }
    public abstract virtual IEdmTypeReference get_Type();
    public abstract virtual IEdmOperation get_DeclaringOperation();
}
public interface Microsoft.OData.Edm.IEdmOptionalParameter {
    public string DefaultValueString { get; }
    public abstract virtual string get_DefaultValueString();
}
public interface Microsoft.OData.Edm.IEdmPathExpression {
    public IEnumerable`1<string> PathSegments { get; }
    public string Path { get; }
    public abstract virtual IEnumerable`1<string> get_PathSegments();
    public abstract virtual string get_Path();
}
public interface Microsoft.OData.Edm.IEdmPathType {
    public EdmPathTypeKind PathKind { get; }
    public abstract virtual EdmPathTypeKind get_PathKind();
}
public interface Microsoft.OData.Edm.IEdmPathTypeReference {
}
public interface Microsoft.OData.Edm.IEdmPrimitiveType {
    public EdmPrimitiveTypeKind PrimitiveKind { get; }
    public abstract virtual EdmPrimitiveTypeKind get_PrimitiveKind();
}
public interface Microsoft.OData.Edm.IEdmPrimitiveTypeReference {
}
public interface Microsoft.OData.Edm.IEdmProperty {
    public EdmPropertyKind PropertyKind { get; }
    public IEdmTypeReference Type { get; }
    public IEdmStructuredType DeclaringType { get; }
    public abstract virtual EdmPropertyKind get_PropertyKind();
    public abstract virtual IEdmTypeReference get_Type();
    public abstract virtual IEdmStructuredType get_DeclaringType();
}
public interface Microsoft.OData.Edm.IEdmReference {
    public Uri Uri { get; }
    public IEnumerable`1<IEdmInclude> Includes { get; }
    public IEnumerable`1<IEdmIncludeAnnotations> IncludeAnnotations { get; }
    public abstract virtual Uri get_Uri();
    public abstract virtual IEnumerable`1<IEdmInclude> get_Includes();
    public abstract virtual IEnumerable`1<IEdmIncludeAnnotations> get_IncludeAnnotations();
}
public interface Microsoft.OData.Edm.IEdmReferentialConstraint {
    public IEnumerable`1<EdmReferentialConstraintPropertyPair> PropertyPairs { get; }
    public abstract virtual IEnumerable`1<EdmReferentialConstraintPropertyPair> get_PropertyPairs();
}
public interface Microsoft.OData.Edm.IEdmRowType {
}
public interface Microsoft.OData.Edm.IEdmSchemaElement {
    public EdmSchemaElementKind SchemaElementKind { get; }
    public string Namespace { get; }
    public abstract virtual EdmSchemaElementKind get_SchemaElementKind();
    public abstract virtual string get_Namespace();
}
public interface Microsoft.OData.Edm.IEdmSchemaType {
}
public interface Microsoft.OData.Edm.IEdmSingleton {
}
public interface Microsoft.OData.Edm.IEdmSpatialTypeReference {
    public Nullable`1<int> SpatialReferenceIdentifier { get; }
    public abstract virtual Nullable`1<int> get_SpatialReferenceIdentifier();
}
public interface Microsoft.OData.Edm.IEdmStringTypeReference {
    public bool IsUnbounded { get; }
    public Nullable`1<int> MaxLength { get; }
    public Nullable`1<bool> IsUnicode { get; }
    public abstract virtual bool get_IsUnbounded();
    public abstract virtual Nullable`1<int> get_MaxLength();
    public abstract virtual Nullable`1<bool> get_IsUnicode();
}
public interface Microsoft.OData.Edm.IEdmStructuralProperty {
    public string DefaultValueString { get; }
    public abstract virtual string get_DefaultValueString();
}
public interface Microsoft.OData.Edm.IEdmStructuredType {
    public bool IsAbstract { get; }
    public bool IsOpen { get; }
    public IEdmStructuredType BaseType { get; }
    public IEnumerable`1<IEdmProperty> DeclaredProperties { get; }
    public abstract virtual bool get_IsAbstract();
    public abstract virtual bool get_IsOpen();
    public abstract virtual IEdmStructuredType get_BaseType();
    public abstract virtual IEnumerable`1<IEdmProperty> get_DeclaredProperties();
    public abstract virtual IEdmProperty FindProperty(string name);
}
public interface Microsoft.OData.Edm.IEdmStructuredTypeReference {
}
public interface Microsoft.OData.Edm.IEdmTargetPath {
    public string Path { get; }
    public IReadOnlyList`1<IEdmElement> Segments { get; }
    public abstract virtual string get_Path();
    public abstract virtual IReadOnlyList`1<IEdmElement> get_Segments();
}
public interface Microsoft.OData.Edm.IEdmTemporalTypeReference {
    public Nullable`1<int> Precision { get; }
    public abstract virtual Nullable`1<int> get_Precision();
}
public interface Microsoft.OData.Edm.IEdmType {
    public EdmTypeKind TypeKind { get; }
    public abstract virtual EdmTypeKind get_TypeKind();
}
public interface Microsoft.OData.Edm.IEdmTypeDefinition {
    public IEdmPrimitiveType UnderlyingType { get; }
    public abstract virtual IEdmPrimitiveType get_UnderlyingType();
}
public interface Microsoft.OData.Edm.IEdmTypeDefinitionReference {
    public bool IsUnbounded { get; }
    public Nullable`1<int> MaxLength { get; }
    public Nullable`1<bool> IsUnicode { get; }
    public Nullable`1<int> Precision { get; }
    public Nullable`1<int> Scale { get; }
    public Nullable`1<int> SpatialReferenceIdentifier { get; }
    public abstract virtual bool get_IsUnbounded();
    public abstract virtual Nullable`1<int> get_MaxLength();
    public abstract virtual Nullable`1<bool> get_IsUnicode();
    public abstract virtual Nullable`1<int> get_Precision();
    public abstract virtual Nullable`1<int> get_Scale();
    public abstract virtual Nullable`1<int> get_SpatialReferenceIdentifier();
}
public interface Microsoft.OData.Edm.IEdmTypeReference {
    public bool IsNullable { get; }
    public IEdmType Definition { get; }
    public abstract virtual bool get_IsNullable();
    public abstract virtual IEdmType get_Definition();
}
public interface Microsoft.OData.Edm.IEdmUnknownEntitySet {
}
public interface Microsoft.OData.Edm.IEdmUntypedType {
}
public interface Microsoft.OData.Edm.IEdmUntypedTypeReference {
}
internal interface Microsoft.OData.Edm.IFlushCaches {
    public abstract virtual void FlushCaches();
}
public interface Microsoft.OData.Edm.IPrimitiveValueConverter {
    public abstract virtual object ConvertToUnderlyingType(object value);
    public abstract virtual object ConvertFromUnderlyingType(object value);
}
internal class Microsoft.OData.Edm.Memoizer`2 : object {
    private Func`2<TArg, TResult> function;
    private Dictionary`2<TArg, Result<TArg, TResult>> resultCache;
    private ReaderWriterLockSlim<TArg, TResult> slimLock;
    internal Memoizer`2(Func`2<TArg, TResult> function, IEqualityComparer`1<TArg> argComparer);
    internal TResult Evaluate(TArg arg);
}
internal class Microsoft.OData.Edm.PassThroughPrimitiveValueConverter : object {
    internal static IPrimitiveValueConverter Instance;
    private static PassThroughPrimitiveValueConverter();
    public sealed virtual object ConvertToUnderlyingType(object value);
    public sealed virtual object ConvertFromUnderlyingType(object value);
}
[ExtensionAttribute]
[SuppressMessageAttribute("Performance", "CA1825:Avoid zero-length array allocations.")]
internal static class Microsoft.OData.Edm.PlatformHelper : object {
    [SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
internal static Type[] EmptyTypes;
    internal static Regex DateValidator;
    internal static Regex TimeOfDayValidator;
    internal static Regex PotentialDateTimeOffsetValidator;
    internal static string UriSchemeHttp;
    internal static string UriSchemeHttps;
    private static PlatformHelper();
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static Assembly GetAssembly(Type type);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static bool IsValueType(Type type);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static bool IsAbstract(Type type);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static bool IsGenericType(Type type);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static bool IsGenericTypeDefinition(Type type);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static bool IsVisible(Type type);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static bool IsInterface(Type type);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static bool IsClass(Type type);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static bool IsEnum(Type type);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static Type GetBaseType(Type type);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static bool ContainsGenericParameters(Type type);
    internal static bool TryConvertStringToDate(string text, Date& date);
    internal static Date ConvertStringToDate(string text);
    internal static bool TryConvertStringToTimeOfDay(string text, TimeOfDay& timeOfDay);
    internal static TimeOfDay ConvertStringToTimeOfDay(string text);
    internal static DateTimeOffset ConvertStringToDateTimeOffset(string text);
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
private static void ValidateTimeZoneInformationInDateTimeOffsetString(string text);
    internal static string AddSecondsPaddingIfMissing(string text);
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static Type GetTypeOrThrow(string typeName);
    internal static UnicodeCategory GetUnicodeCategory(char c);
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static bool IsProperty(MemberInfo member);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static bool IsPrimitive(Type type);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static bool IsSealed(Type type);
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static bool IsMethod(MemberInfo member);
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static bool AreMembersEqual(MemberInfo member1, MemberInfo member2);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static IEnumerable`1<PropertyInfo> GetPublicProperties(Type type, bool instanceOnly);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static IEnumerable`1<PropertyInfo> GetPublicProperties(Type type, bool instanceOnly, bool declaredOnly);
    [ExtensionAttribute]
internal static IEnumerable`1<PropertyInfo> GetNonPublicProperties(Type type, bool instanceOnly, bool declaredOnly);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static IEnumerable`1<ConstructorInfo> GetInstanceConstructors(Type type, bool isPublic);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static ConstructorInfo GetInstanceConstructor(Type type, bool isPublic, Type[] argTypes);
    [ExtensionAttribute]
[SuppressMessageAttribute("Design", "CA1031:Do not catch general exception types")]
internal static bool TryGetMethod(Type type, string name, Type[] parameterTypes, MethodInfo& foundMethod);
    [ExtensionAttribute]
internal static IEnumerable`1<MethodInfo> GetMethods(Type type);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static MethodInfo GetMethod(Type type, string name, bool isPublic, bool isStatic);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static MethodInfo GetMethod(Type type, string name, Type[] types, bool isPublic, bool isStatic);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static IEnumerable`1<MethodInfo> GetPublicStaticMethods(Type type);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static IEnumerable`1<Type> GetNonPublicNestedTypes(Type type);
    private static bool CheckTypeArgs(ConstructorInfo constructorInfo, Type[] types);
    [ExtensionAttribute]
internal static bool IsAssignableFrom(Type thisType, Type otherType);
    [ExtensionAttribute]
internal static bool IsSubclassOf(Type thisType, Type otherType);
    [ExtensionAttribute]
internal static MethodInfo GetMethod(Type type, string name);
    [ExtensionAttribute]
internal static MethodInfo GetMethod(Type type, string name, Type[] types);
    [ExtensionAttribute]
internal static MethodInfo GetMethodWithGenericArgs(Type type, string name, bool isPublic, bool isStatic, int genericArgCount);
    [ExtensionAttribute]
internal static PropertyInfo GetProperty(Type type, string name, Type returnType);
    [ExtensionAttribute]
internal static PropertyInfo GetProperty(Type type, string name);
    [ExtensionAttribute]
internal static MethodInfo GetGetMethod(PropertyInfo propertyInfo);
    [ExtensionAttribute]
internal static MethodInfo GetSetMethod(PropertyInfo propertyInfo);
    [ExtensionAttribute]
internal static MethodInfo GetBaseDefinition(MethodInfo methodInfo);
    [ExtensionAttribute]
internal static IEnumerable`1<PropertyInfo> GetProperties(Type type);
    [ExtensionAttribute]
internal static IEnumerable`1<FieldInfo> GetFields(Type type);
    [ExtensionAttribute]
internal static IEnumerable`1<object> GetCustomAttributes(Type type, Type attributeType, bool inherit);
    [ExtensionAttribute]
internal static IEnumerable`1<object> GetCustomAttributes(Type type, bool inherit);
    [ExtensionAttribute]
internal static Type[] GetGenericArguments(Type type);
    [ExtensionAttribute]
internal static IEnumerable`1<Type> GetInterfaces(Type type);
    [ExtensionAttribute]
internal static bool IsInstanceOfType(Type type, object obj);
    [ExtensionAttribute]
internal static Type GetType(Assembly assembly, string typeName, bool throwOnError);
    [ExtensionAttribute]
internal static IEnumerable`1<Type> GetTypes(Assembly assembly);
    [ExtensionAttribute]
internal static FieldInfo GetField(Type type, string name);
    private static bool IsInstance(PropertyInfo propertyInfo);
    private static bool IsPublic(PropertyInfo propertyInfo);
    public static Regex CreateCompiled(string pattern, RegexOptions options);
}
internal static class Microsoft.OData.Edm.PrimitiveValueConverterConstants : object {
    internal static string UInt16TypeName;
    internal static string UInt32TypeName;
    internal static string UInt64TypeName;
    internal static string DefaultUInt16UnderlyingType;
    internal static string DefaultUInt32UnderlyingType;
    internal static string DefaultUInt64UnderlyingType;
}
internal static class Microsoft.OData.Edm.RegistrationHelper : object {
    internal static void RegisterSchemaElement(IEdmSchemaElement element, Dictionary`2<string, IEdmSchemaType> schemaTypeDictionary, Dictionary`2<string, IEdmTerm> valueTermDictionary, Dictionary`2<string, IList`1<IEdmOperation>> functionGroupDictionary, Dictionary`2<string, IEdmEntityContainer> containerDictionary);
    internal static void RegisterProperty(IEdmProperty element, string name, Dictionary`2<string, IEdmProperty> dictionary);
    internal static void AddElement(T element, string name, Dictionary`2<string, T> elementDictionary, Func`3<T, T, T> ambiguityCreator);
    internal static void AddOperation(IEdmOperation operation, string name, Dictionary`2<string, IList`1<IEdmOperation>> operationListDictionary);
    internal static void AddOperationImport(IEdmOperationImport operationImport, string name, Dictionary`2<string, object> operationListDictionary);
    internal static IEdmSchemaType CreateAmbiguousTypeBinding(IEdmSchemaType first, IEdmSchemaType second);
    internal static IEdmTerm CreateAmbiguousTermBinding(IEdmTerm first, IEdmTerm second);
    internal static IEdmEntitySet CreateAmbiguousEntitySetBinding(IEdmEntitySet first, IEdmEntitySet second);
    internal static IEdmSingleton CreateAmbiguousSingletonBinding(IEdmSingleton first, IEdmSingleton second);
    internal static IEdmEntityContainer CreateAmbiguousEntityContainerBinding(IEdmEntityContainer first, IEdmEntityContainer second);
    private static IEdmProperty CreateAmbiguousPropertyBinding(IEdmProperty first, IEdmProperty second);
}
internal static class Microsoft.OData.Edm.Strings : object {
    internal static string EdmPrimitive_UnexpectedKind { get; }
    internal static string EdmPath_UnexpectedKind { get; }
    internal static string Constructable_VocabularyAnnotationMustHaveTarget { get; }
    internal static string Constructable_EntityTypeOrCollectionOfEntityTypeExpected { get; }
    internal static string EdmModel_CannotUseElementWithTypeNone { get; }
    internal static string EdmModel_CannotAddMoreThanOneEntityContainerToOneEdmModel { get; }
    internal static string EdmEntityContainer_CannotUseElementWithTypeNone { get; }
    internal static string ValueHasAlreadyBeenSet { get; }
    internal static string PathSegmentMustNotContainSlash { get; }
    internal static string EdmType_UnexpectedEdmType { get; }
    internal static string NavigationPropertyBinding_PathIsNotValid { get; }
    internal static string TargetPath_FirstSegmentMustBeIEdmEntityContainer { get; }
    internal static string TargetPath_SecondSegmentMustBeIEdmEntityContainerElement { get; }
    internal static string TargetPath_SegmentsMustNotContainNullSegment { get; }
    internal static string Edm_Evaluator_NoContextPath { get; }
    internal static string Edm_Evaluator_TypeCastNeedsEdmModel { get; }
    internal static string EdmModel_Validator_Semantic_InvalidOperationMultipleEndsInAssociation { get; }
    internal static string EdmModel_Validator_Semantic_MismatchNumberOfPropertiesinRelationshipConstraint { get; }
    internal static string EdmModel_Validator_Semantic_BaseTypeMustHaveSameTypeKind { get; }
    internal static string EdmModel_Validator_Semantic_ScaleOutOfRange { get; }
    internal static string EdmModel_Validator_Semantic_PrecisionOutOfRange { get; }
    internal static string EdmModel_Validator_Semantic_StringMaxLengthOutOfRange { get; }
    internal static string EdmModel_Validator_Semantic_MaxLengthOutOfRange { get; }
    internal static string EdmModel_Validator_Semantic_OpenTypesSupportedForEntityTypesOnly { get; }
    internal static string EdmModel_Validator_Semantic_IsUnboundedCannotBeTrueWhileMaxLengthIsNotNull { get; }
    internal static string EdmModel_Validator_Semantic_InvalidElementAnnotationMismatchedTerm { get; }
    internal static string EdmModel_Validator_Semantic_InvalidElementAnnotationValueInvalidXml { get; }
    internal static string EdmModel_Validator_Semantic_InvalidElementAnnotationNotIEdmStringValue { get; }
    internal static string EdmModel_Validator_Semantic_InvalidElementAnnotationNullNamespaceOrName { get; }
    internal static string EdmModel_Validator_Semantic_NullCannotBeAssertedToBeANonNullableType { get; }
    internal static string EdmModel_Validator_Semantic_ExpressionNotValidForTheAssertedType { get; }
    internal static string EdmModel_Validator_Semantic_CollectionExpressionNotValidForNonCollectionType { get; }
    internal static string EdmModel_Validator_Semantic_PrimitiveConstantExpressionNotValidForNonPrimitiveType { get; }
    internal static string EdmModel_Validator_Semantic_RecordExpressionNotValidForNonStructuredType { get; }
    internal static string EdmModel_Validator_Semantic_ExpressionPrimitiveKindNotValidForAssertedType { get; }
    internal static string EdmModel_Validator_Semantic_ExpressionEnumKindNotValidForAssertedType { get; }
    internal static string EdmModel_Validator_Semantic_IntegerConstantValueOutOfRange { get; }
    internal static string EdmModel_Validator_Semantic_TypeMustNotHaveKindOfNone { get; }
    internal static string EdmModel_Validator_Syntactic_MissingName { get; }
    internal static string EdmModel_Validator_Syntactic_MissingNamespaceName { get; }
    internal static string Serializer_SingleFileExpected { get; }
    internal static string Serializer_NoSchemasProduced { get; }
    internal static string XmlParser_EmptySchemaTextReader { get; }
    internal static string CsdlParser_MissingTypeAttributeOrElement { get; }
    internal static string CsdlParser_ReferentialConstraintRequiresOneDependent { get; }
    internal static string CsdlParser_ReferentialConstraintRequiresOnePrincipal { get; }
    internal static string CsdlParser_InvalidIfExpressionIncorrectNumberOfOperands { get; }
    internal static string CsdlParser_InvalidIsOfExpressionIncorrectNumberOfOperands { get; }
    internal static string CsdlParser_InvalidCastExpressionIncorrectNumberOfOperands { get; }
    internal static string CsdlParser_InvalidLabeledElementExpressionIncorrectNumberOfOperands { get; }
    internal static string CsdlParser_NoReadersProvided { get; }
    internal static string CsdlParser_NullXmlReader { get; }
    internal static string CsdlParser_CannotSpecifyNullableAttributeForNavigationPropertyWithCollectionType { get; }
    internal static string CsdlParser_MetadataDocumentCannotHaveMoreThanOneEntityContainer { get; }
    internal static string CsdlSemantics_ReferentialConstraintMismatch { get; }
    internal static string CsdlSemantics_EnumMemberMustHaveValue { get; }
    internal static string EdmxParser_EdmxVersionMismatch { get; }
    internal static string EdmxParser_InvalidReferenceIncorrectNumberOfIncludes { get; }
    internal static string EdmxParser_UnresolvedReferenceUriInEdmxReference { get; }
    internal static string RuleSet_DuplicateRulesExistInRuleSet { get; }
    internal static string EdmToClr_StructuredValueMappedToNonClass { get; }
    internal static string EdmUtil_NullValueForMimeTypeAnnotation { get; }
    internal static string Date_InvalidAddedOrSubtractedResults { get; }
    internal static string get_EdmPrimitive_UnexpectedKind();
    internal static string get_EdmPath_UnexpectedKind();
    internal static string Annotations_TypeMismatch(object p0, object p1);
    internal static string get_Constructable_VocabularyAnnotationMustHaveTarget();
    internal static string get_Constructable_EntityTypeOrCollectionOfEntityTypeExpected();
    internal static string Constructable_TargetMustBeStock(object p0);
    internal static string TypeSemantics_CouldNotConvertTypeReference(object p0, object p1);
    internal static string get_EdmModel_CannotUseElementWithTypeNone();
    internal static string get_EdmModel_CannotAddMoreThanOneEntityContainerToOneEdmModel();
    internal static string get_EdmEntityContainer_CannotUseElementWithTypeNone();
    internal static string ValueWriter_NonSerializableValue(object p0);
    internal static string get_ValueHasAlreadyBeenSet();
    internal static string get_PathSegmentMustNotContainSlash();
    internal static string Constructable_DependentPropertyCountMustMatchNumberOfPropertiesOnPrincipalType(object p0, object p1);
    internal static string get_EdmType_UnexpectedEdmType();
    internal static string get_NavigationPropertyBinding_PathIsNotValid();
    internal static string MultipleMatchingPropertiesFound(object p0, object p1);
    internal static string get_TargetPath_FirstSegmentMustBeIEdmEntityContainer();
    internal static string get_TargetPath_SecondSegmentMustBeIEdmEntityContainerElement();
    internal static string get_TargetPath_SegmentsMustNotContainNullSegment();
    internal static string TypeCast_HierarchyNotFollowed(object p0, object p1);
    internal static string Edm_Evaluator_NoTermTypeAnnotationOnType(object p0, object p1);
    internal static string Edm_Evaluator_NoValueAnnotationOnType(object p0, object p1);
    internal static string Edm_Evaluator_NoValueAnnotationOnElement(object p0);
    internal static string Edm_Evaluator_UnrecognizedExpressionKind(object p0);
    internal static string Edm_Evaluator_UnboundFunction(object p0);
    internal static string Edm_Evaluator_UnboundPath(object p0);
    internal static string get_Edm_Evaluator_NoContextPath();
    internal static string Edm_Evaluator_FailedTypeAssertion(object p0);
    internal static string get_Edm_Evaluator_TypeCastNeedsEdmModel();
    internal static string EdmModel_Validator_Semantic_SystemNamespaceEncountered(object p0);
    internal static string EdmModel_Validator_Semantic_NavigationSourceTypeHasNoKeys(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_DuplicateEndName(object p0);
    internal static string EdmModel_Validator_Semantic_DuplicatePropertyNameSpecifiedInEntityKey(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_InvalidComplexTypeAbstract(object p0);
    internal static string EdmModel_Validator_Semantic_InvalidComplexTypePolymorphic(object p0);
    internal static string EdmModel_Validator_Semantic_InvalidKeyNullablePart(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_EntityKeyMustBeScalar(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_EntityComposableBoundEscapeFunctionMustBeLessOne(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_EntityNoncomposableBoundEscapeFunctionMustBeLessOne(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_InvalidKeyKeyDefinedInBaseClass(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_KeyMissingOnEntityType(object p0);
    internal static string EdmModel_Validator_Semantic_BadNavigationPropertyUndefinedRole(object p0, object p1, object p2);
    internal static string EdmModel_Validator_Semantic_BadNavigationPropertyRolesCannotBeTheSame(object p0);
    internal static string EdmModel_Validator_Semantic_BadNavigationPropertyCouldNotDetermineType(object p0);
    internal static string get_EdmModel_Validator_Semantic_InvalidOperationMultipleEndsInAssociation();
    internal static string EdmModel_Validator_Semantic_EndWithManyMultiplicityCannotHaveOperationsSpecified(object p0);
    internal static string EdmModel_Validator_Semantic_EndNameAlreadyDefinedDuplicate(object p0);
    internal static string EdmModel_Validator_Semantic_SameRoleReferredInReferentialConstraint(object p0);
    internal static string EdmModel_Validator_Semantic_NavigationPropertyPrincipalEndMultiplicityUpperBoundMustBeOne(object p0);
    internal static string EdmModel_Validator_Semantic_InvalidMultiplicityOfPrincipalEndDependentPropertiesAllNonnullable(object p0);
    internal static string EdmModel_Validator_Semantic_InvalidMultiplicityOfPrincipalEndDependentPropertiesAllNullable(object p0);
    internal static string EdmModel_Validator_Semantic_InvalidMultiplicityOfDependentEndMustBeZeroOneOrOne(object p0);
    internal static string EdmModel_Validator_Semantic_InvalidMultiplicityOfDependentEndMustBeMany(object p0);
    internal static string get_EdmModel_Validator_Semantic_MismatchNumberOfPropertiesinRelationshipConstraint();
    internal static string EdmModel_Validator_Semantic_TypeMismatchRelationshipConstraint(object p0, object p1, object p2, object p3);
    internal static string EdmModel_Validator_Semantic_InvalidPropertyInRelationshipConstraintDependentEnd(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_InvalidPropertyInRelationshipConstraintPrimaryEnd(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_InvalidPropertyType(object p0);
    internal static string EdmModel_Validator_Semantic_BoundOperationMustHaveParameters(object p0);
    internal static string EdmModel_Validator_Semantic_RequiredParametersMustPrecedeOptional(object p0);
    internal static string EdmModel_Validator_Semantic_OperationWithUnsupportedReturnType(object p0);
    internal static string EdmModel_Validator_Semantic_OperationImportEntityTypeDoesNotMatchEntitySet(object p0, object p1, object p2);
    internal static string EdmModel_Validator_Semantic_OperationImportEntityTypeDoesNotMatchEntitySet2(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_OperationImportEntitySetExpressionKindIsInvalid(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_OperationImportEntitySetExpressionIsInvalid(object p0);
    internal static string EdmModel_Validator_Semantic_OperationImportSpecifiesEntitySetButNotEntityType(object p0);
    internal static string EdmModel_Validator_Semantic_OperationImportCannotImportBoundOperation(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_FunctionImportWithParameterShouldNotBeIncludedInServiceDocument(object p0);
    internal static string EdmModel_Validator_Semantic_FunctionMustHaveReturnType(object p0);
    internal static string EdmModel_Validator_Semantic_UrlEscapeFunctionMustBoundFunction(object p0);
    internal static string EdmModel_Validator_Semantic_UrlEscapeFunctionMustHaveOneStringParameter(object p0);
    internal static string EdmModel_Validator_Semantic_ParameterNameAlreadyDefinedDuplicate(object p0);
    internal static string EdmModel_Validator_Semantic_DuplicateEntityContainerMemberName(object p0);
    internal static string EdmModel_Validator_Semantic_UnboundFunctionOverloadHasIncorrectReturnType(object p0);
    internal static string EdmModel_Validator_Semantic_OperationCannotHaveEntitySetPathWithUnBoundOperation(object p0);
    internal static string EdmModel_Validator_Semantic_InvalidEntitySetPathMissingBindingParameterName(object p0);
    internal static string EdmModel_Validator_Semantic_InvalidEntitySetPathWithFirstPathParameterNotMatchingFirstParameterName(object p0, object p1, object p2, object p3);
    internal static string EdmModel_Validator_Semantic_InvalidEntitySetPathTypeCastSegmentMustBeEntityType(object p0, object p1, object p2);
    internal static string EdmModel_Validator_Semantic_InvalidEntitySetPathUnknownNavigationProperty(object p0, object p1, object p2);
    internal static string EdmModel_Validator_Semantic_InvalidEntitySetPathInvalidTypeCastSegment(object p0, object p1, object p2, object p3);
    internal static string EdmModel_Validator_Semantic_InvalidEntitySetPathWithNonEntityBindingParameter(object p0, object p1, object p2);
    internal static string EdmModel_Validator_Semantic_InvalidEntitySetPathUnknownTypeCastSegment(object p0, object p1, object p2);
    internal static string EdmModel_Validator_Semantic_OperationWithEntitySetPathReturnTypeInvalid(object p0);
    internal static string EdmModel_Validator_Semantic_OperationWithEntitySetPathAndReturnTypeTypeNotAssignable(object p0, object p1, object p2);
    internal static string EdmModel_Validator_Semantic_OperationWithEntitySetPathResolvesToCollectionEntityTypeMismatchesEntityTypeReturnType(object p0);
    internal static string EdmModel_Validator_Semantic_SchemaElementNameAlreadyDefined(object p0);
    internal static string EdmModel_Validator_Semantic_InvalidMemberNameMatchesTypeName(object p0);
    internal static string EdmModel_Validator_Semantic_PropertyNameAlreadyDefined(object p0);
    internal static string get_EdmModel_Validator_Semantic_BaseTypeMustHaveSameTypeKind();
    internal static string EdmModel_Validator_Semantic_BaseTypeOfOpenTypeMustBeOpen(object p0);
    internal static string EdmModel_Validator_Semantic_KeyPropertyMustBelongToEntity(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_EdmPrimitiveTypeCannotBeUsedAsTypeOfKey(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_EdmPrimitiveTypeCannotBeUsedAsUnderlyingType(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_DependentPropertiesMustBelongToDependentEntity(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_DeclaringTypeMustBeCorrect(object p0);
    internal static string EdmModel_Validator_Semantic_InaccessibleType(object p0);
    internal static string EdmModel_Validator_Semantic_AmbiguousType(object p0);
    internal static string EdmModel_Validator_Semantic_InvalidNavigationPropertyType(object p0);
    internal static string EdmModel_Validator_Semantic_NavigationPropertyWithRecursiveContainmentTargetMustBeOptional(object p0);
    internal static string EdmModel_Validator_Semantic_RecursiveComplexTypedPropertyMustBeOptional(object p0);
    internal static string EdmModel_Validator_Semantic_NavigationPropertyWithRecursiveContainmentSourceMustBeFromZeroOrOne(object p0);
    internal static string EdmModel_Validator_Semantic_NavigationPropertyWithNonRecursiveContainmentSourceMustBeFromOne(object p0);
    internal static string EdmModel_Validator_Semantic_ComplexTypeMustHaveProperties(object p0);
    internal static string EdmModel_Validator_Semantic_DuplicateDependentProperty(object p0, object p1);
    internal static string get_EdmModel_Validator_Semantic_ScaleOutOfRange();
    internal static string get_EdmModel_Validator_Semantic_PrecisionOutOfRange();
    internal static string get_EdmModel_Validator_Semantic_StringMaxLengthOutOfRange();
    internal static string get_EdmModel_Validator_Semantic_MaxLengthOutOfRange();
    internal static string EdmModel_Validator_Semantic_EnumMemberValueOutOfRange(object p0);
    internal static string EdmModel_Validator_Semantic_EnumMemberNameAlreadyDefined(object p0);
    internal static string get_EdmModel_Validator_Semantic_OpenTypesSupportedForEntityTypesOnly();
    internal static string get_EdmModel_Validator_Semantic_IsUnboundedCannotBeTrueWhileMaxLengthIsNotNull();
    internal static string get_EdmModel_Validator_Semantic_InvalidElementAnnotationMismatchedTerm();
    internal static string get_EdmModel_Validator_Semantic_InvalidElementAnnotationValueInvalidXml();
    internal static string get_EdmModel_Validator_Semantic_InvalidElementAnnotationNotIEdmStringValue();
    internal static string get_EdmModel_Validator_Semantic_InvalidElementAnnotationNullNamespaceOrName();
    internal static string EdmModel_Validator_Semantic_CannotAssertNullableTypeAsNonNullableType(object p0);
    internal static string EdmModel_Validator_Semantic_ExpressionPrimitiveKindCannotPromoteToAssertedType(object p0, object p1);
    internal static string get_EdmModel_Validator_Semantic_NullCannotBeAssertedToBeANonNullableType();
    internal static string get_EdmModel_Validator_Semantic_ExpressionNotValidForTheAssertedType();
    internal static string get_EdmModel_Validator_Semantic_CollectionExpressionNotValidForNonCollectionType();
    internal static string get_EdmModel_Validator_Semantic_PrimitiveConstantExpressionNotValidForNonPrimitiveType();
    internal static string get_EdmModel_Validator_Semantic_RecordExpressionNotValidForNonStructuredType();
    internal static string EdmModel_Validator_Semantic_RecordExpressionMissingProperty(object p0);
    internal static string EdmModel_Validator_Semantic_RecordExpressionHasExtraProperties(object p0);
    internal static string EdmModel_Validator_Semantic_DuplicateAnnotation(object p0, object p1, object p2);
    internal static string EdmModel_Validator_Semantic_IncorrectNumberOfArguments(object p0, object p1, object p2);
    internal static string EdmModel_Validator_Semantic_DuplicateEntityContainerName(object p0);
    internal static string get_EdmModel_Validator_Semantic_ExpressionPrimitiveKindNotValidForAssertedType();
    internal static string get_EdmModel_Validator_Semantic_ExpressionEnumKindNotValidForAssertedType();
    internal static string get_EdmModel_Validator_Semantic_IntegerConstantValueOutOfRange();
    internal static string EdmModel_Validator_Semantic_StringConstantLengthOutOfRange(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_BinaryConstantLengthOutOfRange(object p0, object p1);
    internal static string get_EdmModel_Validator_Semantic_TypeMustNotHaveKindOfNone();
    internal static string EdmModel_Validator_Semantic_SchemaElementMustNotHaveKindOfNone(object p0);
    internal static string EdmModel_Validator_Semantic_PropertyMustNotHaveKindOfNone(object p0);
    internal static string EdmModel_Validator_Semantic_PrimitiveTypeMustNotHaveKindOfNone(object p0);
    internal static string EdmModel_Validator_Semantic_EntityContainerElementMustNotHaveKindOfNone(object p0);
    internal static string EdmModel_Validator_Semantic_DuplicateNavigationPropertyMapping(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_NavigationMappingMustBeBidirectional(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_EntitySetCanOnlyBeContainedByASingleNavigationProperty(object p0);
    internal static string EdmModel_Validator_Semantic_TypeAnnotationMissingRequiredProperty(object p0);
    internal static string EdmModel_Validator_Semantic_TypeAnnotationHasExtraProperties(object p0);
    internal static string EdmModel_Validator_Semantic_EnumMustHaveIntegralUnderlyingType(object p0);
    internal static string EdmModel_Validator_Semantic_InaccessibleTerm(object p0);
    internal static string EdmModel_Validator_Semantic_InaccessibleTarget(object p0);
    internal static string EdmModel_Validator_Semantic_VocabularyAnnotationApplyToNotAllowedAnnotatable(object p0, object p1, object p2);
    internal static string EdmModel_Validator_Semantic_ElementDirectValueAnnotationFullNameMustBeUnique(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_NoEntitySetsFoundForType(object p0, object p1, object p2);
    internal static string EdmModel_Validator_Semantic_CannotInferEntitySetWithMultipleSetsPerType(object p0, object p1, object p2);
    internal static string EdmModel_Validator_Semantic_EntitySetRecursiveNavigationPropertyMappingsMustPointBackToSourceEntitySet(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_NavigationPropertyEntityMustNotIndirectlyContainItself(object p0);
    internal static string EdmModel_Validator_Semantic_PathIsNotValidForTheGivenContext(object p0);
    internal static string EdmModel_Validator_Semantic_NavigationPropertyMappingMustPointToValidTargetForProperty(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_ModelDuplicateBoundFunctionParameterNames(object p0);
    internal static string EdmModel_Validator_Semantic_ModelDuplicateBoundFunctionParameterTypes(object p0);
    internal static string EdmModel_Validator_Semantic_ModelDuplicateUnBoundFunctionsParameterNames(object p0);
    internal static string EdmModel_Validator_Semantic_ModelDuplicateUnBoundFunctionsParameterTypes(object p0);
    internal static string EdmModel_Validator_Semantic_ModelDuplicateBoundActions(object p0);
    internal static string EdmModel_Validator_Semantic_ModelDuplicateUnBoundActions(object p0);
    internal static string EdmModel_Validator_Semantic_BoundFunctionOverloadsMustHaveSameReturnType(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_EntitySetTypeMustBeCollectionOfEntityType(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_SingletonTypeMustBeEntityType(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_NavigationPropertyOfCollectionTypeMustNotTargetToSingleton(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_StructuredTypeBaseTypeCannotBeAbstractType(object p0, object p1, object p2);
    internal static string EdmModel_Validator_Semantic_PropertyTypeCannotBeCollectionOfAbstractType(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_OperationReturnTypeCannotBeCollectionOfAbstractType(object p0, object p1);
    internal static string EdmModel_Validator_Semantic_EdmEntityTypeCannotBeTypeOfSingleton(object p0);
    internal static string EdmModel_Validator_Semantic_EdmEntityTypeCannotBeTypeOfEntitySet(object p0);
    internal static string EdmModel_Validator_Semantic_DeclaringTypeOfNavigationSourceCannotHavePathProperty(object p0, object p1, object p2);
    internal static string EdmModel_Validator_Semantic_TypeOfNavigationPropertyCannotHavePathProperty(object p0, object p1, object p2);
    internal static string get_EdmModel_Validator_Syntactic_MissingName();
    internal static string EdmModel_Validator_Syntactic_EdmModel_NameIsTooLong(object p0);
    internal static string EdmModel_Validator_Syntactic_EdmModel_NameIsNotAllowed(object p0);
    internal static string get_EdmModel_Validator_Syntactic_MissingNamespaceName();
    internal static string EdmModel_Validator_Syntactic_EdmModel_NamespaceNameIsTooLong(object p0);
    internal static string EdmModel_Validator_Syntactic_EdmModel_NamespaceNameIsNotAllowed(object p0);
    internal static string EdmModel_Validator_Syntactic_PropertyMustNotBeNull(object p0, object p1);
    internal static string EdmModel_Validator_Syntactic_EnumPropertyValueOutOfRange(object p0, object p1, object p2, object p3);
    internal static string EdmModel_Validator_Syntactic_InterfaceKindValueMismatch(object p0, object p1, object p2, object p3);
    internal static string EdmModel_Validator_Syntactic_TypeRefInterfaceTypeKindValueMismatch(object p0, object p1);
    internal static string EdmModel_Validator_Syntactic_InterfaceKindValueUnexpected(object p0, object p1, object p2);
    internal static string EdmModel_Validator_Syntactic_EnumerableMustNotHaveNullElements(object p0, object p1);
    internal static string EdmModel_Validator_Syntactic_NavigationPartnerInvalid(object p0);
    internal static string EdmModel_Validator_Syntactic_InterfaceCriticalCycleInTypeHierarchy(object p0);
    internal static string get_Serializer_SingleFileExpected();
    internal static string Serializer_UnknownEdmVersion(object p0);
    internal static string Serializer_UnknownEdmxVersion(object p0);
    internal static string Serializer_NonInlineOperationImportReturnType(object p0);
    internal static string Serializer_ReferencedTypeMustHaveValidName(object p0);
    internal static string Serializer_OutOfLineAnnotationTargetMustHaveValidName(object p0);
    internal static string get_Serializer_NoSchemasProduced();
    internal static string XmlParser_EmptyFile(object p0);
    internal static string get_XmlParser_EmptySchemaTextReader();
    internal static string XmlParser_MissingAttribute(object p0, object p1);
    internal static string XmlParser_TextNotAllowed(object p0);
    internal static string XmlParser_UnexpectedAttribute(object p0);
    internal static string XmlParser_UnexpectedElement(object p0);
    internal static string XmlParser_UnusedElement(object p0);
    internal static string XmlParser_UnexpectedNodeType(object p0);
    internal static string XmlParser_UnexpectedRootElement(object p0, object p1);
    internal static string XmlParser_UnexpectedRootElementWrongNamespace(object p0, object p1);
    internal static string XmlParser_UnexpectedRootElementNoNamespace(object p0);
    internal static string CsdlParser_InvalidEntitySetPathWithUnboundAction(object p0, object p1);
    internal static string CsdlParser_InvalidAlias(object p0);
    internal static string CsdlParser_InvalidDeleteAction(object p0);
    internal static string get_CsdlParser_MissingTypeAttributeOrElement();
    internal static string CsdlParser_InvalidEndRoleInRelationshipConstraint(object p0, object p1);
    internal static string CsdlParser_InvalidMultiplicity(object p0);
    internal static string get_CsdlParser_ReferentialConstraintRequiresOneDependent();
    internal static string get_CsdlParser_ReferentialConstraintRequiresOnePrincipal();
    internal static string get_CsdlParser_InvalidIfExpressionIncorrectNumberOfOperands();
    internal static string get_CsdlParser_InvalidIsOfExpressionIncorrectNumberOfOperands();
    internal static string get_CsdlParser_InvalidCastExpressionIncorrectNumberOfOperands();
    internal static string get_CsdlParser_InvalidLabeledElementExpressionIncorrectNumberOfOperands();
    internal static string CsdlParser_InvalidTypeName(object p0);
    internal static string CsdlParser_InvalidQualifiedName(object p0);
    internal static string get_CsdlParser_NoReadersProvided();
    internal static string get_CsdlParser_NullXmlReader();
    internal static string CsdlParser_InvalidEntitySetPath(object p0);
    internal static string CsdlParser_InvalidEnumMemberPath(object p0);
    internal static string get_CsdlParser_CannotSpecifyNullableAttributeForNavigationPropertyWithCollectionType();
    internal static string get_CsdlParser_MetadataDocumentCannotHaveMoreThanOneEntityContainer();
    internal static string get_CsdlSemantics_ReferentialConstraintMismatch();
    internal static string get_CsdlSemantics_EnumMemberMustHaveValue();
    internal static string CsdlSemantics_ImpossibleAnnotationsTarget(object p0);
    internal static string CsdlSemantics_DuplicateAlias(object p0, object p1);
    internal static string CsdlJsonParser_UnexpectedJsonValueKind(object p0, object p1, object p2);
    internal static string CsdlJsonParser_MissingMemberInObject(object p0, object p1);
    internal static string CsdlJsonParser_UnexpectedJsonMember(object p0, object p1);
    internal static string CsdlJsonParser_CannotReadValueAsType(object p0, object p1, object p2);
    internal static string CsdlJsonParser_MissingKindMember(object p0, object p1);
    internal static string CsdlJsonParser_MissingRequiredPropertyInObject(object p0, object p1);
    internal static string CsdlJsonParser_UnknownJsonElementValueKind(object p0, object p1);
    internal static string CsdlJsonParser_InvalidJsonNumberType(object p0, object p1);
    internal static string CsdlJsonParser_UnsupportedJsonMember(object p0);
    internal static string CsdlJsonParser_InvalidCsdlVersion(object p0);
    internal static string CsdlJsonParser_SchemaCannotHaveMoreThanOneEntityContainer(object p0);
    internal static string get_EdmxParser_EdmxVersionMismatch();
    internal static string EdmxParser_BodyElement(object p0);
    internal static string get_EdmxParser_InvalidReferenceIncorrectNumberOfIncludes();
    internal static string get_EdmxParser_UnresolvedReferenceUriInEdmxReference();
    internal static string EdmParseException_ErrorsEncounteredInEdmx(object p0);
    internal static string ValueParser_InvalidBoolean(object p0);
    internal static string ValueParser_InvalidInteger(object p0);
    internal static string ValueParser_InvalidLong(object p0);
    internal static string ValueParser_InvalidFloatingPoint(object p0);
    internal static string ValueParser_InvalidMaxLength(object p0);
    internal static string ValueParser_InvalidSrid(object p0);
    internal static string ValueParser_InvalidScale(object p0);
    internal static string ValueParser_InvalidGuid(object p0);
    internal static string ValueParser_InvalidDecimal(object p0);
    internal static string ValueParser_InvalidDateTimeOffset(object p0);
    internal static string ValueParser_InvalidDateTime(object p0);
    internal static string ValueParser_InvalidDate(object p0);
    internal static string ValueParser_InvalidDuration(object p0);
    internal static string ValueParser_InvalidBinary(object p0);
    internal static string ValueParser_InvalidTimeOfDay(object p0);
    internal static string UnknownEnumVal_Multiplicity(object p0);
    internal static string UnknownEnumVal_SchemaElementKind(object p0);
    internal static string UnknownEnumVal_TypeKind(object p0);
    internal static string UnknownEnumVal_PrimitiveKind(object p0);
    internal static string UnknownEnumVal_ContainerElementKind(object p0);
    internal static string UnknownEnumVal_CsdlTarget(object p0);
    internal static string UnknownEnumVal_PropertyKind(object p0);
    internal static string UnknownEnumVal_ExpressionKind(object p0);
    internal static string Bad_AmbiguousElementBinding(object p0);
    internal static string Bad_UnresolvedType(object p0);
    internal static string Bad_UnresolvedComplexType(object p0);
    internal static string Bad_UnresolvedEntityType(object p0);
    internal static string Bad_UnresolvedPrimitiveType(object p0);
    internal static string Bad_UnresolvedOperation(object p0);
    internal static string Bad_AmbiguousOperation(object p0);
    internal static string Bad_OperationParametersDontMatch(object p0);
    internal static string Bad_UnresolvedEntitySet(object p0);
    internal static string Bad_UnresolvedEntityContainer(object p0);
    internal static string Bad_UnresolvedEnumType(object p0);
    internal static string Bad_UnresolvedEnumMember(object p0);
    internal static string Bad_UnresolvedProperty(object p0);
    internal static string Bad_UnresolvedParameter(object p0);
    internal static string Bad_UnresolvedReturn(object p0);
    internal static string Bad_UnresolvedLabeledElement(object p0);
    internal static string Bad_CyclicEntity(object p0);
    internal static string Bad_CyclicComplex(object p0);
    internal static string Bad_CyclicEntityContainer(object p0);
    internal static string Bad_UnresolvedNavigationPropertyPath(object p0, object p1);
    internal static string get_RuleSet_DuplicateRulesExistInRuleSet();
    internal static string EdmToClr_UnsupportedType(object p0);
    internal static string get_EdmToClr_StructuredValueMappedToNonClass();
    internal static string EdmToClr_IEnumerableOfTPropertyAlreadyHasValue(object p0, object p1);
    internal static string EdmToClr_StructuredPropertyDuplicateValue(object p0);
    internal static string EdmToClr_CannotConvertEdmValueToClrType(object p0, object p1);
    internal static string EdmToClr_CannotConvertEdmCollectionValueToClrType(object p0);
    internal static string EdmToClr_TryCreateObjectInstanceReturnedWrongObject(object p0, object p1);
    internal static string get_EdmUtil_NullValueForMimeTypeAnnotation();
    internal static string EdmUtil_InvalidAnnotationValue(object p0, object p1);
    internal static string PlatformHelper_DateTimeOffsetMustContainTimeZone(object p0);
    internal static string get_Date_InvalidAddedOrSubtractedResults();
    internal static string Date_InvalidDateParameters(object p0, object p1, object p2);
    internal static string Date_InvalidParsingString(object p0);
    internal static string Date_InvalidCompareToTarget(object p0);
    internal static string TimeOfDay_InvalidTimeOfDayParameters(object p0, object p1, object p2, object p3);
    internal static string TimeOfDay_TicksOutOfRange(object p0);
    internal static string TimeOfDay_ConvertErrorFromTimeSpan(object p0);
    internal static string TimeOfDay_InvalidParsingString(object p0);
    internal static string TimeOfDay_InvalidCompareToTarget(object p0);
    internal static string EdmVocabularyAnnotations_DidNotFindDefaultValue(object p0);
    internal static string EdmVocabularyAnnotations_TermTypeNotSupported(object p0);
    internal static string EdmVocabularyAnnotations_InvalidLocationForTargetPathAnnotation(object p0);
}
[ExtensionAttribute]
internal static class Microsoft.OData.Edm.TargetPathHelper : object {
    [ExtensionAttribute]
public static IEnumerable`1<IEdmElement> GetTargetSegments(IEdmModel model, String[] targetSegments, bool ignoreCase);
    private static IEdmVocabularyAnnotatable HandleEntityContainer(IEdmModel model, List`1<IEdmElement> pathSegments, IEdmEntityContainer entityContainer, String[] targetSegments, int index, bool ignoreCase);
    private static IEdmVocabularyAnnotatable HandleContainerElement(IEdmModel model, List`1<IEdmElement> pathSegments, IEdmEntityContainerElement entityContainerElement, String[] targetSegments, int index, bool ignoreCase);
    private static IEdmVocabularyAnnotatable HandleSchemaType(IEdmModel model, List`1<IEdmElement> pathSegments, IEdmSchemaType schemaType, String[] targetSegments, int index, bool ignoreCase);
    private static void ValidateSchemaType(IEdmSchemaType schemaType, List`1<IEdmElement> pathSegments, int index);
    private static bool IsTypeCastValid(IEdmElement element, IEdmSchemaType schemaType);
    private static IEdmVocabularyAnnotatable HandleProperty(IEdmModel model, List`1<IEdmElement> pathSegments, IEdmProperty edmProperty, String[] targetSegments, int index, bool ignoreCase);
    private static IEdmVocabularyAnnotatable HandleStructuredType(IEdmModel model, List`1<IEdmElement> pathSegments, IEdmStructuredType structuredType, String[] targetSegments, int index, bool ignoreCase);
}
public class Microsoft.OData.Edm.TimeOfDay : ValueType {
    public static long MaxTickValue;
    public static long MinTickValue;
    public static long TicksPerHour;
    public static long TicksPerMinute;
    public static long TicksPerSecond;
    public static TimeOfDay MinValue;
    public static TimeOfDay MaxValue;
    private TimeSpan timeSpan;
    public static TimeOfDay Now { get; }
    public int Hours { get; }
    public int Minutes { get; }
    public int Seconds { get; }
    public long Milliseconds { get; }
    public long Ticks { get; }
    public TimeOfDay(int hour, int minute, int second, int millisecond);
    public TimeOfDay(long ticks);
    private static TimeOfDay();
    public static TimeOfDay get_Now();
    public int get_Hours();
    public int get_Minutes();
    public int get_Seconds();
    public long get_Milliseconds();
    public long get_Ticks();
    public static bool op_Inequality(TimeOfDay firstOperand, TimeOfDay secondOperand);
    public static bool op_Equality(TimeOfDay firstOperand, TimeOfDay secondOperand);
    public static bool op_GreaterThanOrEqual(TimeOfDay firstOperand, TimeOfDay secondOperand);
    public static bool op_GreaterThan(TimeOfDay firstOperand, TimeOfDay secondOperand);
    public static bool op_LessThanOrEqual(TimeOfDay firstOperand, TimeOfDay secondOperand);
    public static bool op_LessThan(TimeOfDay firstOperand, TimeOfDay secondOperand);
    public static TimeSpan op_Implicit(TimeOfDay time);
    public static TimeOfDay op_Implicit(TimeSpan timeSpan);
    public sealed virtual bool Equals(TimeOfDay other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual int CompareTo(object obj);
    public sealed virtual int CompareTo(TimeOfDay other);
    public static TimeOfDay Parse(string text);
    public static TimeOfDay Parse(string text, IFormatProvider provider);
    public static bool TryParse(string text, TimeOfDay& result);
    public static bool TryParse(string text, IFormatProvider provider, TimeOfDay& result);
}
[ExtensionAttribute]
public static class Microsoft.OData.Edm.ToTraceStringExtensionMethods : object {
    [ExtensionAttribute]
public static string ToTraceString(IEdmSchemaType schemaType);
    [ExtensionAttribute]
public static string ToTraceString(IEdmSchemaElement schemaElement);
    [ExtensionAttribute]
public static string ToTraceString(IEdmType type);
    [ExtensionAttribute]
public static string ToTraceString(IEdmTypeReference type);
    [ExtensionAttribute]
public static string ToTraceString(IEdmProperty property);
    [ExtensionAttribute]
private static string ToTraceString(IEdmEntityReferenceType type);
    [ExtensionAttribute]
private static string ToTraceString(IEdmCollectionType type);
    [ExtensionAttribute]
private static void AppendFacets(StringBuilder sb, IEdmPrimitiveTypeReference type);
    [ExtensionAttribute]
private static void AppendBinaryFacets(StringBuilder sb, IEdmBinaryTypeReference type);
    [ExtensionAttribute]
private static void AppendStringFacets(StringBuilder sb, IEdmStringTypeReference type);
    [ExtensionAttribute]
private static void AppendTemporalFacets(StringBuilder sb, IEdmTemporalTypeReference type);
    [ExtensionAttribute]
private static void AppendDecimalFacets(StringBuilder sb, IEdmDecimalTypeReference type);
    [ExtensionAttribute]
private static void AppendSpatialFacets(StringBuilder sb, IEdmSpatialTypeReference type);
    [ExtensionAttribute]
private static void AppendKeyValue(StringBuilder sb, string key, string value);
}
internal static class Microsoft.OData.Edm.TupleInternal : object {
    public static TupleInternal`2<T1, T2> Create(T1 item1, T2 item2);
}
internal class Microsoft.OData.Edm.TupleInternal`2 : object {
    [CompilerGeneratedAttribute]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
private T2 <Item2>k__BackingField;
    public T1 Item1 { get; private set; }
    public T2 Item2 { get; private set; }
    public TupleInternal`2(T1 item1, T2 item2);
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
private void set_Item1(T1 value);
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
private void set_Item2(T2 value);
}
internal class Microsoft.OData.Edm.Validation.DuplicateOperationValidator : object {
    private HashSetInternal`1<string> functionsParameterNameHash;
    private HashSetInternal`1<string> functionsParameterTypeHash;
    private HashSetInternal`1<string> actionsNameHash;
    private ValidationContext context;
    internal DuplicateOperationValidator(ValidationContext context);
    public static bool IsDuplicateOperation(IEdmOperation operation, IEnumerable`1<IEdmOperation> candidateDuplicateOperations);
    public bool ValidateNotDuplicate(IEdmOperation operation, bool skipError);
    private static string BuildInternalUniqueParameterNameFunctionString(IEdmFunction function);
    private static string BuildInternalUniqueParameterTypeFunctionString(IEdmFunction function);
    private static string BuildInternalUniqueActionString(IEdmAction action);
}
public class Microsoft.OData.Edm.Validation.EdmError : object {
    private Dictionary`2<string, object> _additionalInfo;
    [CompilerGeneratedAttribute]
private EdmLocation <ErrorLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Severity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private EdmErrorCode <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public EdmLocation ErrorLocation { get; private set; }
    public Severity Severity { get; private set; }
    public EdmErrorCode ErrorCode { get; private set; }
    public string ErrorMessage { get; private set; }
    public Dictionary`2<string, object> ExtendedProperties { get; }
    public EdmError(EdmLocation errorLocation, EdmErrorCode errorCode, string errorMessage);
    public EdmError(EdmLocation errorLocation, EdmErrorCode errorCode, string errorMessage, Severity severity);
    [CompilerGeneratedAttribute]
public EdmLocation get_ErrorLocation();
    [CompilerGeneratedAttribute]
private void set_ErrorLocation(EdmLocation value);
    [CompilerGeneratedAttribute]
public Severity get_Severity();
    [CompilerGeneratedAttribute]
private void set_Severity(Severity value);
    [CompilerGeneratedAttribute]
public EdmErrorCode get_ErrorCode();
    [CompilerGeneratedAttribute]
private void set_ErrorCode(EdmErrorCode value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
    public Dictionary`2<string, object> get_ExtendedProperties();
    public virtual string ToString();
}
public enum Microsoft.OData.Edm.Validation.EdmErrorCode : Enum {
    public int value__;
    public static EdmErrorCode InvalidErrorCodeValue;
    public static EdmErrorCode XmlError;
    public static EdmErrorCode UnexpectedXmlNodeType;
    public static EdmErrorCode UnexpectedXmlAttribute;
    public static EdmErrorCode UnexpectedXmlElement;
    public static EdmErrorCode TextNotAllowed;
    public static EdmErrorCode EmptyFile;
    public static EdmErrorCode MissingAttribute;
    public static EdmErrorCode InvalidName;
    public static EdmErrorCode MissingType;
    public static EdmErrorCode AlreadyDefined;
    public static EdmErrorCode InvalidVersionNumber;
    public static EdmErrorCode InvalidBoolean;
    public static EdmErrorCode BadProperty;
    public static EdmErrorCode InvalidPropertyType;
    public static EdmErrorCode PrecisionOutOfRange;
    public static EdmErrorCode ScaleOutOfRange;
    public static EdmErrorCode NameTooLong;
    public static EdmErrorCode InvalidAssociation;
    public static EdmErrorCode BadNavigationProperty;
    public static EdmErrorCode InvalidKey;
    public static EdmErrorCode InterfaceCriticalPropertyValueMustNotBeNull;
    public static EdmErrorCode InterfaceCriticalKindValueMismatch;
    public static EdmErrorCode InterfaceCriticalKindValueUnexpected;
    public static EdmErrorCode InterfaceCriticalEnumerableMustNotHaveNullElements;
    public static EdmErrorCode InterfaceCriticalEnumPropertyValueOutOfRange;
    public static EdmErrorCode InterfaceCriticalNavigationPartnerInvalid;
    public static EdmErrorCode InterfaceCriticalCycleInTypeHierarchy;
    public static EdmErrorCode InvalidMultiplicity;
    public static EdmErrorCode InvalidAction;
    public static EdmErrorCode InvalidOnDelete;
    public static EdmErrorCode BadUnresolvedComplexType;
    public static EdmErrorCode InvalidEndEntitySet;
    public static EdmErrorCode OperationImportEntitySetExpressionIsInvalid;
    public static EdmErrorCode NavigationPropertyMappingMustPointToValidTargetForProperty;
    public static EdmErrorCode InvalidRoleInRelationshipConstraint;
    public static EdmErrorCode InvalidPropertyInRelationshipConstraint;
    public static EdmErrorCode TypeMismatchRelationshipConstraint;
    public static EdmErrorCode InvalidMultiplicityOfPrincipalEnd;
    public static EdmErrorCode MismatchNumberOfPropertiesInRelationshipConstraint;
    public static EdmErrorCode InvalidMultiplicityOfDependentEnd;
    public static EdmErrorCode OpenTypeNotSupported;
    public static EdmErrorCode SameRoleReferredInReferentialConstraint;
    public static EdmErrorCode EntityKeyMustBeScalar;
    public static EdmErrorCode EntityKeyMustNotBeBinary;
    public static EdmErrorCode EndWithManyMultiplicityCannotHaveOperationsSpecified;
    public static EdmErrorCode NavigationSourceTypeHasNoKeys;
    public static EdmErrorCode ConcurrencyRedefinedOnSubtypeOfEntitySetType;
    public static EdmErrorCode OperationImportUnsupportedReturnType;
    public static EdmErrorCode OperationImportReturnsEntitiesButDoesNotSpecifyEntitySet;
    public static EdmErrorCode OperationImportEntityTypeDoesNotMatchEntitySet;
    public static EdmErrorCode OperationImportSpecifiesEntitySetButDoesNotReturnEntityType;
    public static EdmErrorCode OperationImportCannotImportBoundOperation;
    public static EdmErrorCode FunctionMustHaveReturnType;
    public static EdmErrorCode SimilarRelationshipEnd;
    public static EdmErrorCode DuplicatePropertySpecifiedInEntityKey;
    public static EdmErrorCode UrlEscapeFunctionMustBeBoundFunction;
    public static EdmErrorCode UrlEscapeFunctionMustHaveOnlyOneEdmStringParameter;
    public static EdmErrorCode NullableComplexTypeProperty;
    public static EdmErrorCode KeyMissingOnEntityType;
    public static EdmErrorCode SystemNamespaceEncountered;
    public static EdmErrorCode InvalidNamespaceName;
    public static EdmErrorCode EnumMemberMustHaveValue;
    public static EdmErrorCode DuplicateEntityContainerMemberName;
    public static EdmErrorCode UnboundFunctionOverloadHasIncorrectReturnType;
    public static EdmErrorCode InvalidAbstractComplexType;
    public static EdmErrorCode InvalidPolymorphicComplexType;
    public static EdmErrorCode NavigationPropertyEntityMustNotIndirectlyContainItself;
    public static EdmErrorCode EntitySetRecursiveNavigationPropertyMappingsMustPointBackToSourceEntitySet;
    public static EdmErrorCode BadAmbiguousElementBinding;
    public static EdmErrorCode BadUnresolvedType;
    public static EdmErrorCode BadUnresolvedPrimitiveType;
    public static EdmErrorCode BadCyclicComplex;
    public static EdmErrorCode BadCyclicEntityContainer;
    public static EdmErrorCode BadCyclicEntity;
    public static EdmErrorCode TypeSemanticsCouldNotConvertTypeReference;
    public static EdmErrorCode ConstructibleEntitySetTypeInvalidFromEntityTypeRemoval;
    public static EdmErrorCode BadUnresolvedEntityContainer;
    public static EdmErrorCode BadUnresolvedEntitySet;
    public static EdmErrorCode BadUnresolvedProperty;
    public static EdmErrorCode BadNonComputableAssociationEnd;
    public static EdmErrorCode NavigationPropertyTypeInvalidBecauseOfBadAssociation;
    public static EdmErrorCode EntityMustHaveEntityBaseType;
    public static EdmErrorCode ComplexTypeMustHaveComplexBaseType;
    public static EdmErrorCode BadUnresolvedOperation;
    public static EdmErrorCode KeyPropertyMustBelongToEntity;
    public static EdmErrorCode ReferentialConstraintPrincipalEndMustBelongToAssociation;
    public static EdmErrorCode DependentPropertiesMustBelongToDependentEntity;
    public static EdmErrorCode DeclaringTypeMustBeCorrect;
    public static EdmErrorCode InvalidNavigationPropertyType;
    public static EdmErrorCode KeyPropertyTypeCannotBeEdmPrimitiveType;
    public static EdmErrorCode UnderlyingTypeIsBadBecauseEnumTypeIsBad;
    public static EdmErrorCode OperationImportParameterIncorrectType;
    public static EdmErrorCode DuplicateDependentProperty;
    public static EdmErrorCode BoundOperationMustHaveParameters;
    public static EdmErrorCode OperationCannotHaveEntitySetPathWithUnBoundOperation;
    public static EdmErrorCode InvalidPathFirstPathParameterNotMatchingFirstParameterName;
    public static EdmErrorCode InvalidPathWithNonEntityBindingParameter;
    public static EdmErrorCode OperationWithInvalidEntitySetPathMissingCompletePath;
    public static EdmErrorCode InvalidPathUnknownTypeCastSegment;
    public static EdmErrorCode InvalidPathInvalidTypeCastSegment;
    public static EdmErrorCode InvalidPathTypeCastSegmentMustBeEntityType;
    public static EdmErrorCode InvalidPathUnknownNavigationProperty;
    public static EdmErrorCode OperationWithEntitySetPathAndReturnTypeTypeNotAssignable;
    public static EdmErrorCode OperationWithEntitySetPathResolvesToCollectionEntityTypeMismatchesEntityTypeReturnType;
    public static EdmErrorCode OperationWithEntitySetPathResolvesToEntityTypeMismatchesCollectionEntityTypeReturnType;
    public static EdmErrorCode OperationWithEntitySetPathReturnTypeInvalid;
    public static EdmErrorCode OperationWithCollectionOfAbstractReturnTypeInvalid;
    public static EdmErrorCode MaxLengthOutOfRange;
    public static EdmErrorCode PathExpressionHasNoEntityContext;
    public static EdmErrorCode InvalidSrid;
    public static EdmErrorCode InvalidMaxLength;
    public static EdmErrorCode InvalidLong;
    public static EdmErrorCode InvalidInteger;
    public static EdmErrorCode InvalidAssociationSet;
    public static EdmErrorCode InvalidParameterMode;
    public static EdmErrorCode BadUnresolvedEntityType;
    public static EdmErrorCode InvalidValue;
    public static EdmErrorCode InvalidBinary;
    public static EdmErrorCode InvalidFloatingPoint;
    public static EdmErrorCode InvalidDateTime;
    public static EdmErrorCode InvalidDateTimeOffset;
    public static EdmErrorCode InvalidDecimal;
    public static EdmErrorCode InvalidGuid;
    public static EdmErrorCode InvalidTypeKindNone;
    public static EdmErrorCode InvalidIfExpressionIncorrectNumberOfOperands;
    public static EdmErrorCode EnumMemberValueOutOfRange;
    public static EdmErrorCode InvalidIsOfExpressionIncorrectNumberOfOperands;
    public static EdmErrorCode InvalidTypeName;
    public static EdmErrorCode InvalidQualifiedName;
    public static EdmErrorCode NoReadersProvided;
    public static EdmErrorCode NullXmlReader;
    public static EdmErrorCode IsUnboundedCannotBeTrueWhileMaxLengthIsNotNull;
    public static EdmErrorCode InvalidElementAnnotation;
    public static EdmErrorCode InvalidLabeledElementExpressionIncorrectNumberOfOperands;
    public static EdmErrorCode BadUnresolvedLabeledElement;
    public static EdmErrorCode BadUnresolvedEnumMember;
    public static EdmErrorCode InvalidCastExpressionIncorrectNumberOfOperands;
    public static EdmErrorCode BadUnresolvedParameter;
    public static EdmErrorCode NavigationPropertyWithRecursiveContainmentTargetMustBeOptional;
    public static EdmErrorCode NavigationPropertyWithRecursiveContainmentSourceMustBeFromZeroOrOne;
    public static EdmErrorCode NavigationPropertyWithNonRecursiveContainmentSourceMustBeFromOne;
    public static EdmErrorCode ImpossibleAnnotationsTarget;
    public static EdmErrorCode CannotAssertNullableTypeAsNonNullableType;
    public static EdmErrorCode CannotAssertPrimitiveExpressionAsNonPrimitiveType;
    public static EdmErrorCode ExpressionPrimitiveKindNotValidForAssertedType;
    public static EdmErrorCode NullCannotBeAssertedToBeANonNullableType;
    public static EdmErrorCode ExpressionNotValidForTheAssertedType;
    public static EdmErrorCode CollectionExpressionNotValidForNonCollectionType;
    public static EdmErrorCode RecordExpressionNotValidForNonStructuredType;
    public static EdmErrorCode RecordExpressionMissingRequiredProperty;
    public static EdmErrorCode RecordExpressionHasExtraProperties;
    public static EdmErrorCode DuplicateAnnotation;
    public static EdmErrorCode IncorrectNumberOfArguments;
    public static EdmErrorCode DuplicateAlias;
    public static EdmErrorCode ReferencedTypeMustHaveValidName;
    public static EdmErrorCode SingleFileExpected;
    public static EdmErrorCode UnknownEdmxVersion;
    public static EdmErrorCode UnknownEdmVersion;
    public static EdmErrorCode NoSchemasProduced;
    public static EdmErrorCode DuplicateEntityContainerName;
    public static EdmErrorCode ContainerElementContainerNameIncorrect;
    public static EdmErrorCode PrimitiveConstantExpressionNotValidForNonPrimitiveType;
    public static EdmErrorCode IntegerConstantValueOutOfRange;
    public static EdmErrorCode StringConstantLengthOutOfRange;
    public static EdmErrorCode BinaryConstantLengthOutOfRange;
    public static EdmErrorCode InvalidOperationImportParameterMode;
    public static EdmErrorCode TypeMustNotHaveKindOfNone;
    public static EdmErrorCode PrimitiveTypeMustNotHaveKindOfNone;
    public static EdmErrorCode PropertyMustNotHaveKindOfNone;
    public static EdmErrorCode PropertyTypeCannotBeCollectionOfAbstractType;
    public static EdmErrorCode SchemaElementMustNotHaveKindOfNone;
    public static EdmErrorCode EntityContainerElementMustNotHaveKindOfNone;
    public static EdmErrorCode BinaryValueCannotHaveEmptyValue;
    public static EdmErrorCode EntitySetCanOnlyBeContainedByASingleNavigationProperty;
    public static EdmErrorCode InconsistentNavigationPropertyPartner;
    public static EdmErrorCode EntitySetCanOnlyHaveSingleNavigationPropertyWithContainment;
    public static EdmErrorCode NavigationMappingMustBeBidirectional;
    public static EdmErrorCode DuplicateNavigationPropertyMapping;
    public static EdmErrorCode AllNavigationPropertiesMustBeMapped;
    public static EdmErrorCode TypeAnnotationMissingRequiredProperty;
    public static EdmErrorCode TypeAnnotationHasExtraProperties;
    public static EdmErrorCode InvalidDuration;
    public static EdmErrorCode InvalidPrimitiveValue;
    public static EdmErrorCode EnumMustHaveIntegerUnderlyingType;
    public static EdmErrorCode BadUnresolvedTerm;
    public static EdmErrorCode BadPrincipalPropertiesInReferentialConstraint;
    public static EdmErrorCode DuplicateDirectValueAnnotationFullName;
    public static EdmErrorCode NoEntitySetsFoundForType;
    public static EdmErrorCode CannotInferEntitySetWithMultipleSetsPerType;
    public static EdmErrorCode InvalidEntitySetPath;
    public static EdmErrorCode InvalidEnumMemberPath;
    public static EdmErrorCode QualifierMustBeSimpleName;
    public static EdmErrorCode BadUnresolvedEnumType;
    public static EdmErrorCode BadUnresolvedTarget;
    public static EdmErrorCode PathIsNotValidForTheGivenContext;
    public static EdmErrorCode BadUnresolvedNavigationPropertyPath;
    public static EdmErrorCode NavigationPropertyWithCollectionTypeCannotHaveNullableAttribute;
    public static EdmErrorCode MetadataDocumentCannotHaveMoreThanOneEntityContainer;
    public static EdmErrorCode DuplicateFunctions;
    public static EdmErrorCode DuplicateActions;
    public static EdmErrorCode BoundFunctionOverloadsMustHaveSameReturnType;
    public static EdmErrorCode SingletonTypeMustBeEntityType;
    public static EdmErrorCode EntitySetTypeMustBeCollectionOfEntityType;
    public static EdmErrorCode NavigationPropertyOfCollectionTypeMustNotTargetToSingleton;
    public static EdmErrorCode ReferenceElementMustContainAtLeastOneIncludeOrIncludeAnnotationsElement;
    public static EdmErrorCode FunctionImportWithParameterShouldNotBeIncludedInServiceDocument;
    public static EdmErrorCode UnresolvedReferenceUriInEdmxReference;
    public static EdmErrorCode InvalidDate;
    public static EdmErrorCode InvalidTimeOfDay;
    public static EdmErrorCode UnresolvedNavigationPropertyPartnerPath;
    public static EdmErrorCode UnresolvedNavigationPropertyBindingPath;
    public static EdmErrorCode RequiredParametersMustPrecedeOptional;
    public static EdmErrorCode ExpressionEnumKindNotValidForAssertedType;
    public static EdmErrorCode TypeDefinitionUnderlyingTypeCannotBeEdmPrimitiveType;
    public static EdmErrorCode EntityTypeBaseTypeCannotBeEdmEntityType;
    public static EdmErrorCode ComplexTypeBaseTypeCannotBeEdmComplexType;
    public static EdmErrorCode EntityTypeOfSingletonCannotBeEdmEntityType;
    public static EdmErrorCode EntityTypeOfEntitySetCannotBeEdmEntityType;
    public static EdmErrorCode DeclaringTypeOfNavigationSourceCannotHavePathProperty;
    public static EdmErrorCode TypeOfNavigationPropertyCannotHavePathProperty;
    public static EdmErrorCode BadUnresolvedReturn;
    public static EdmErrorCode EntityComposableBoundEscapeFunctionMustBeLessOne;
    public static EdmErrorCode EntityNoncomposableBoundEscapeFunctionMustBeLessOne;
    public static EdmErrorCode AnnotationApplyToNotAllowedAnnotatable;
    public static EdmErrorCode InvalidKeyValue;
    public static EdmErrorCode SchemaCannotHaveMoreThanOneEntityContainer;
    public static EdmErrorCode InvalidCollectionValue;
    public static EdmErrorCode InvalidJson;
    public static EdmErrorCode UnknownElementValueKind;
    public static EdmErrorCode InvalidNumberType;
    public static EdmErrorCode UnsupportedElement;
    public static EdmErrorCode UnexpectedElement;
    public static EdmErrorCode UnexpectedValueKind;
    public static EdmErrorCode MissingRequiredProperty;
    public static EdmErrorCode RecursiveComplexTypedPropertyMustBeOptional;
}
[ExtensionAttribute]
public static class Microsoft.OData.Edm.Validation.EdmValidator : object {
    [ExtensionAttribute]
public static bool Validate(IEdmModel root, IEnumerable`1& errors);
    [ExtensionAttribute]
public static bool Validate(IEdmModel root, Version version, IEnumerable`1& errors);
    [ExtensionAttribute]
public static bool Validate(IEdmModel root, ValidationRuleSet ruleSet, IEnumerable`1& errors);
}
[ExtensionAttribute]
public static class Microsoft.OData.Edm.Validation.ExpressionTypeChecker : object {
    private static Boolean[0...,0...] promotionMap;
    private static ExpressionTypeChecker();
    [ExtensionAttribute]
public static bool TryCast(IEdmExpression expression, IEdmTypeReference type, IEnumerable`1& discoveredErrors);
    [ExtensionAttribute]
public static bool TryCast(IEdmExpression expression, IEdmTypeReference type, IEdmType context, bool matchExactly, IEnumerable`1& discoveredErrors);
    [ExtensionAttribute]
internal static bool TryCastPrimitiveAsType(IEdmPrimitiveValue expression, IEdmTypeReference type, IEnumerable`1& discoveredErrors);
    [ExtensionAttribute]
internal static bool TryCastNullAsType(IEdmNullExpression expression, IEdmTypeReference type, IEnumerable`1& discoveredErrors);
    [ExtensionAttribute]
internal static bool TryCastPathAsType(IEdmPathExpression expression, IEdmTypeReference type, IEdmType context, bool matchExactly, IEnumerable`1& discoveredErrors);
    [ExtensionAttribute]
internal static bool TryCastIfAsType(IEdmIfExpression expression, IEdmTypeReference type, IEdmType context, bool matchExactly, IEnumerable`1& discoveredErrors);
    [ExtensionAttribute]
internal static bool TryCastRecordAsType(IEdmRecordExpression expression, IEdmTypeReference type, IEdmType context, bool matchExactly, IEnumerable`1& discoveredErrors);
    [ExtensionAttribute]
internal static bool TryCastCollectionAsType(IEdmCollectionExpression expression, IEdmTypeReference type, IEdmType context, bool matchExactly, IEnumerable`1& discoveredErrors);
    private static bool TryCastGuidConstantAsType(IEdmGuidConstantExpression expression, IEdmTypeReference type, IEnumerable`1& discoveredErrors);
    private static bool TryCastFloatingConstantAsType(IEdmFloatingConstantExpression expression, IEdmTypeReference type, IEnumerable`1& discoveredErrors);
    private static bool TryCastDecimalConstantAsType(IEdmDecimalConstantExpression expression, IEdmTypeReference type, IEnumerable`1& discoveredErrors);
    private static bool TryCastDateTimeOffsetConstantAsType(IEdmDateTimeOffsetConstantExpression expression, IEdmTypeReference type, IEnumerable`1& discoveredErrors);
    private static bool TryCastDurationConstantAsType(IEdmDurationConstantExpression expression, IEdmTypeReference type, IEnumerable`1& discoveredErrors);
    private static bool TryCastDateConstantAsType(IEdmDateConstantExpression expression, IEdmTypeReference type, IEnumerable`1& discoveredErrors);
    private static bool TryCastTimeOfDayConstantAsType(IEdmTimeOfDayConstantExpression expression, IEdmTypeReference type, IEnumerable`1& discoveredErrors);
    private static bool TryCastBooleanConstantAsType(IEdmBooleanConstantExpression expression, IEdmTypeReference type, IEnumerable`1& discoveredErrors);
    private static bool TryCastStringConstantAsType(IEdmStringConstantExpression expression, IEdmTypeReference type, IEnumerable`1& discoveredErrors);
    private static bool TryCastIntegerConstantAsType(IEdmIntegerConstantExpression expression, IEdmTypeReference type, IEnumerable`1& discoveredErrors);
    private static bool TryCastIntegerConstantInRange(IEdmIntegerConstantExpression expression, long min, long max, IEnumerable`1& discoveredErrors);
    private static bool TryCastBinaryConstantAsType(IEdmBinaryConstantExpression expression, IEdmTypeReference type, IEnumerable`1& discoveredErrors);
    private static bool TryCastEnumConstantAsType(IEdmEnumMemberExpression expression, IEdmTypeReference type, bool matchExactly, IEnumerable`1& discoveredErrors);
    [ExtensionAttribute]
private static bool TestTypeReferenceMatch(IEdmTypeReference expressionType, IEdmTypeReference assertedType, EdmLocation location, bool matchExactly, IEnumerable`1& discoveredErrors);
    [ExtensionAttribute]
private static bool TestTypeMatch(IEdmType expressionType, IEdmType assertedType, EdmLocation location, bool matchExactly, IEnumerable`1& discoveredErrors);
    [ExtensionAttribute]
private static bool TestNullabilityMatch(IEdmTypeReference expressionType, IEdmTypeReference assertedType, EdmLocation location, IEnumerable`1& discoveredErrors);
    [ExtensionAttribute]
private static bool PromotesTo(EdmPrimitiveTypeKind startingKind, EdmPrimitiveTypeKind target);
    private static Boolean[0...,0...] InitializePromotionMap();
}
internal class Microsoft.OData.Edm.Validation.InterfaceValidator : object {
    private static Dictionary`2<Type, VisitorBase> InterfaceVisitors;
    private static Memoizer`2<Type, IEnumerable`1<VisitorBase>> ConcreteTypeInterfaceVisitors;
    private HashSetInternal`1<object> visited;
    private HashSetInternal`1<object> visitedBad;
    private HashSetInternal`1<object> danglingReferences;
    private HashSetInternal`1<object> skipVisitation;
    private bool validateDirectValueAnnotations;
    private IEdmModel model;
    private InterfaceValidator(HashSetInternal`1<object> skipVisitation, IEdmModel model, bool validateDirectValueAnnotations);
    private static InterfaceValidator();
    public static IEnumerable`1<EdmError> ValidateModelStructureAndSemantics(IEdmModel model, ValidationRuleSet semanticRuleSet);
    public static IEnumerable`1<EdmError> GetStructuralErrors(IEdmElement item);
    private static Dictionary`2<Type, VisitorBase> CreateInterfaceVisitorsMap();
    private static IEnumerable`1<VisitorBase> ComputeInterfaceVisitorsForObject(Type objectType);
    private static EdmError CreatePropertyMustNotBeNullError(T item, string propertyName);
    private static EdmError CreateEnumPropertyOutOfRangeError(T item, E enumValue, string propertyName);
    private static EdmError CheckForInterfaceKindValueMismatchError(T item, K kind, string propertyName);
    private static EdmError CreateInterfaceKindValueUnexpectedError(T item, K kind, string propertyName);
    private static EdmError CreateTypeRefInterfaceTypeKindValueMismatchError(T item);
    private static EdmError CreatePrimitiveTypeRefInterfaceTypeKindValueMismatchError(T item);
    private static void ProcessEnumerable(T item, IEnumerable`1<E> enumerable, string propertyName, IList targetList, List`1& errors);
    private static void CollectErrors(EdmError newError, List`1& errors);
    private static bool IsCheckableBad(object element);
    private static EdmLocation GetLocation(object item);
    private static IEnumerable`1<ValidationRule> GetSemanticInterfaceVisitorsForObject(Type objectType, ValidationRuleSet ruleSet, Dictionary`2<Type, List`1<ValidationRule>> concreteTypeSemanticInterfaceVisitors);
    private IEnumerable`1<EdmError> ValidateStructure(object item);
    private void CollectReference(object reference);
}
public class Microsoft.OData.Edm.Validation.ObjectLocation : EdmLocation {
    [CompilerGeneratedAttribute]
private object <Object>k__BackingField;
    public object Object { get; private set; }
    internal ObjectLocation(object obj);
    [CompilerGeneratedAttribute]
public object get_Object();
    [CompilerGeneratedAttribute]
private void set_Object(object value);
    public virtual string ToString();
}
public enum Microsoft.OData.Edm.Validation.Severity : Enum {
    public int value__;
    public static Severity Undefined;
    public static Severity Info;
    public static Severity Warning;
    public static Severity Error;
}
public class Microsoft.OData.Edm.Validation.ValidationContext : object {
    private List`1<EdmError> errors;
    private IEdmModel model;
    private Func`2<object, bool> isBad;
    public IEdmModel Model { get; }
    internal IEnumerable`1<EdmError> Errors { get; }
    internal ValidationContext(IEdmModel model, Func`2<object, bool> isBad);
    public IEdmModel get_Model();
    internal IEnumerable`1<EdmError> get_Errors();
    public bool IsBad(IEdmElement element);
    public void AddError(EdmLocation location, EdmErrorCode errorCode, string errorMessage);
    public void AddError(EdmError error);
}
[ExtensionAttribute]
public static class Microsoft.OData.Edm.Validation.ValidationExtensionMethods : object {
    [ExtensionAttribute]
public static bool IsBad(IEdmElement element);
    [ExtensionAttribute]
public static IEnumerable`1<EdmError> Errors(IEdmElement element);
    [ExtensionAttribute]
public static IEnumerable`1<EdmError> TypeErrors(IEdmTypeReference type);
}
[ExtensionAttribute]
internal static class Microsoft.OData.Edm.Validation.ValidationHelper : object {
    internal static bool IsEdmSystemNamespace(string namespaceName);
    internal static bool AddMemberNameToHashSet(IEdmNamedElement item, HashSetInternal`1<string> memberNameList, ValidationContext context, EdmErrorCode errorCode, string errorString, bool suppressError);
    internal static bool AllPropertiesAreNullable(IEnumerable`1<IEdmStructuralProperty> properties);
    internal static bool HasNullableProperty(IEnumerable`1<IEdmStructuralProperty> properties);
    internal static bool PropertySetIsSubset(IEnumerable`1<IEdmStructuralProperty> set, IEnumerable`1<IEdmStructuralProperty> subset);
    internal static bool PropertySetsAreEquivalent(IEnumerable`1<IEdmStructuralProperty> set1, IEnumerable`1<IEdmStructuralProperty> set2);
    internal static bool ValidateValueCanBeWrittenAsXmlElementAnnotation(IEdmValue value, string annotationNamespace, string annotationName, EdmError& error);
    internal static bool IsInterfaceCritical(EdmError error);
    [ExtensionAttribute]
internal static bool ItemExistsInReferencedModel(IEdmModel model, string fullName, bool checkEntityContainer);
    [ExtensionAttribute]
internal static bool OperationOrNameExistsInReferencedModel(IEdmModel model, IEdmOperation operation, string operationFullName);
    internal static bool TypeIndirectlyContainsTarget(IEdmEntityType source, IEdmEntityType target, HashSetInternal`1<IEdmEntityType> visited, IEdmModel context);
    internal static IEdmEntityType ComputeNavigationPropertyTarget(IEdmNavigationProperty property);
}
public abstract class Microsoft.OData.Edm.Validation.ValidationRule : object {
    internal Type ValidatedType { get; }
    internal abstract virtual Type get_ValidatedType();
    internal abstract virtual void Evaluate(ValidationContext context, object item);
}
public class Microsoft.OData.Edm.Validation.ValidationRule`1 : ValidationRule {
    private Action`2<ValidationContext, TItem> validate;
    internal Type ValidatedType { get; }
    public ValidationRule`1(Action`2<ValidationContext, TItem> validate);
    internal virtual Type get_ValidatedType();
    internal virtual void Evaluate(ValidationContext context, object item);
}
public static class Microsoft.OData.Edm.Validation.ValidationRules : object {
    public static ValidationRule`1<IEdmElement> ElementDirectValueAnnotationFullNameMustBeUnique;
    public static ValidationRule`1<IEdmNamedElement> NamedElementNameMustNotBeEmptyOrWhiteSpace;
    public static ValidationRule`1<IEdmNamedElement> NamedElementNameIsTooLong;
    public static ValidationRule`1<IEdmNamedElement> NamedElementNameIsNotAllowed;
    public static ValidationRule`1<IEdmSchemaElement> SchemaElementNamespaceMustNotBeEmptyOrWhiteSpace;
    public static ValidationRule`1<IEdmSchemaElement> SchemaElementNamespaceIsTooLong;
    public static ValidationRule`1<IEdmSchemaElement> SchemaElementNamespaceIsNotAllowed;
    public static ValidationRule`1<IEdmSchemaElement> SchemaElementSystemNamespaceEncountered;
    public static ValidationRule`1<IEdmSchemaElement> SchemaElementMustNotHaveKindOfNone;
    public static ValidationRule`1<IEdmEntityContainerElement> EntityContainerElementMustNotHaveKindOfNone;
    public static ValidationRule`1<IEdmEntityContainer> EntityContainerDuplicateEntityContainerMemberName;
    public static ValidationRule`1<IEdmNavigationSource> NavigationSourceTypeHasNoKeys;
    public static ValidationRule`1<IEdmNavigationSource> NavigationSourceDeclaringTypeCannotHavePathTypeProperty;
    public static ValidationRule`1<IEdmNavigationSource> NavigationSourceInaccessibleEntityType;
    public static ValidationRule`1<IEdmNavigationSource> NavigationPropertyMappingsMustBeUnique;
    public static ValidationRule`1<IEdmNavigationSource> NavigationPropertyMappingMustPointToValidTargetForProperty;
    public static ValidationRule`1<IEdmNavigationSource> NavigationPropertyBindingPathMustBeResolvable;
    public static ValidationRule`1<IEdmEntitySet> EntitySetCanOnlyBeContainedByASingleNavigationProperty;
    public static ValidationRule`1<IEdmNavigationSource> NavigationMappingMustBeBidirectional;
    public static ValidationRule`1<IEdmEntitySet> EntitySetRecursiveNavigationPropertyMappingsMustPointBackToSourceEntitySet;
    public static ValidationRule`1<IEdmEntitySet> EntitySetTypeMustBeCollectionOfEntityType;
    public static ValidationRule`1<IEdmEntitySet> EntitySetTypeCannotBeEdmEntityType;
    public static ValidationRule`1<IEdmSingleton> SingletonTypeMustBeEntityType;
    public static ValidationRule`1<IEdmSingleton> SingletonTypeCannotBeEdmEntityType;
    public static ValidationRule`1<IEdmStructuredType> StructuredTypeInvalidMemberNameMatchesTypeName;
    public static ValidationRule`1<IEdmStructuredType> StructuredTypePropertyNameAlreadyDefined;
    public static ValidationRule`1<IEdmStructuredType> StructuredTypeBaseTypeMustBeSameKindAsDerivedKind;
    public static ValidationRule`1<IEdmStructuredType> StructuredTypeBaseTypeCannotBeAbstractType;
    public static ValidationRule`1<IEdmStructuredType> StructuredTypeInaccessibleBaseType;
    public static ValidationRule`1<IEdmStructuredType> StructuredTypePropertiesDeclaringTypeMustBeCorrect;
    public static ValidationRule`1<IEdmEnumType> EnumTypeEnumMemberNameAlreadyDefined;
    public static ValidationRule`1<IEdmEnumType> EnumMustHaveIntegerUnderlyingType;
    public static ValidationRule`1<IEdmEnumType> EnumUnderlyingTypeCannotBeEdmPrimitiveType;
    public static ValidationRule`1<IEdmEnumMember> EnumMemberValueMustHaveSameTypeAsUnderlyingType;
    public static ValidationRule`1<IEdmTypeDefinition> TypeDefinitionUnderlyingTypeCannotBeEdmPrimitiveType;
    public static ValidationRule`1<IEdmEntityType> EntityTypeDuplicatePropertyNameSpecifiedInEntityKey;
    public static ValidationRule`1<IEdmEntityType> EntityTypeInvalidKeyNullablePart;
    public static ValidationRule`1<IEdmEntityType> EntityTypeEntityKeyMustBeScalar;
    public static ValidationRule`1<IEdmEntityType> EntityTypeInvalidKeyKeyDefinedInAncestor;
    public static ValidationRule`1<IEdmEntityType> EntityTypeKeyPropertyMustBelongToEntity;
    public static ValidationRule`1<IEdmEntityType> EntityTypeKeyTypeCannotBeEdmPrimitiveType;
    public static ValidationRule`1<IEdmEntityType> EntityTypeBoundEscapeFunctionMustBeUnique;
    public static ValidationRule`1<IEdmEntityReferenceType> EntityReferenceTypeInaccessibleEntityType;
    public static ValidationRule`1<IEdmType> TypeMustNotHaveKindOfNone;
    public static ValidationRule`1<IEdmPrimitiveType> PrimitiveTypeMustNotHaveKindOfNone;
    public static ValidationRule`1<IEdmComplexType> OpenComplexTypeCannotHaveClosedDerivedComplexType;
    public static ValidationRule`1<IEdmStructuralProperty> StructuralPropertyInvalidPropertyType;
    public static ValidationRule`1<IEdmStructuralProperty> RecursiveComplexTypedPropertyMustBeOptional;
    public static ValidationRule`1<IEdmNavigationProperty> NavigationPropertyInvalidOperationMultipleEndsInAssociatedNavigationProperties;
    public static ValidationRule`1<IEdmNavigationProperty> NavigationPropertyCorrectType;
    public static ValidationRule`1<IEdmNavigationProperty> NavigationPropertyDuplicateDependentProperty;
    public static ValidationRule`1<IEdmNavigationProperty> NavigationPropertyPrincipalEndMultiplicity;
    public static ValidationRule`1<IEdmNavigationProperty> NavigationPropertyDependentEndMultiplicity;
    public static ValidationRule`1<IEdmNavigationProperty> NavigationPropertyDependentPropertiesMustBelongToDependentEntity;
    public static ValidationRule`1<IEdmNavigationProperty> NavigationPropertyEndWithManyMultiplicityCannotHaveOperationsSpecified;
    public static ValidationRule`1<IEdmNavigationProperty> NavigationPropertyPartnerPathShouldBeResolvable;
    public static ValidationRule`1<IEdmNavigationProperty> NavigationPropertyWithRecursiveContainmentTargetMustBeOptional;
    public static ValidationRule`1<IEdmNavigationProperty> NavigationPropertyWithRecursiveContainmentSourceMustBeFromZeroOrOne;
    public static ValidationRule`1<IEdmNavigationProperty> NavigationPropertyWithNonRecursiveContainmentSourceMustBeFromOne;
    public static ValidationRule`1<IEdmNavigationProperty> NavigationPropertyEntityMustNotIndirectlyContainItself;
    public static ValidationRule`1<IEdmNavigationProperty> NavigationPropertyTypeCannotHavePathTypeProperty;
    public static ValidationRule`1<IEdmNavigationProperty> NavigationPropertyTypeMismatchRelationshipConstraint;
    public static ValidationRule`1<IEdmProperty> PropertyMustNotHaveKindOfNone;
    public static ValidationRule`1<IEdmProperty> PropertyTypeCannotBeCollectionOfAbstractType;
    public static ValidationRule`1<IEdmOperationImport> OperationImportCannotImportBoundOperation;
    public static ValidationRule`1<IEdmOperationImport> OperationImportEntitySetExpressionIsInvalid;
    public static ValidationRule`1<IEdmOperationImport> OperationImportEntityTypeDoesNotMatchEntitySet;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ValidationRule`1<IEdmFunctionImport> FunctionImportWithParameterShouldNotBeIncludedInServiceDocument;
    public static ValidationRule`1<IEdmFunction> FunctionMustHaveReturnType;
    public static ValidationRule`1<IEdmFunction> FunctionWithUrlEscapeFunctionMustBeBound;
    public static ValidationRule`1<IEdmFunction> FunctionWithUrlEscapeFunctionMustHaveOneStringParameter;
    public static ValidationRule`1<IEdmOperation> OperationUnsupportedReturnType;
    public static ValidationRule`1<IEdmOperation> OperationParameterNameAlreadyDefinedDuplicate;
    public static ValidationRule`1<IEdmOperation> BoundOperationMustHaveParameters;
    public static ValidationRule`1<IEdmOperation> OptionalParametersMustComeAfterRequiredParameters;
    public static ValidationRule`1<IEdmOperation> OperationEntitySetPathMustBeValid;
    public static ValidationRule`1<IEdmOperation> OperationReturnTypeEntityTypeMustBeValid;
    public static ValidationRule`1<IEdmOperation> OperationReturnTypeCannotBeCollectionOfAbstractType;
    public static ValidationRule`1<IEdmTypeReference> TypeReferenceInaccessibleSchemaType;
    public static ValidationRule`1<IEdmDecimalTypeReference> DecimalTypeReferenceScaleOutOfRange;
    public static ValidationRule`1<IEdmDecimalTypeReference> DecimalTypeReferencePrecisionOutOfRange;
    public static ValidationRule`1<IEdmStringTypeReference> StringTypeReferenceStringMaxLengthNegative;
    public static ValidationRule`1<IEdmStringTypeReference> StringTypeReferenceStringUnboundedNotValidForMaxLength;
    public static ValidationRule`1<IEdmBinaryTypeReference> BinaryTypeReferenceBinaryMaxLengthNegative;
    public static ValidationRule`1<IEdmBinaryTypeReference> BinaryTypeReferenceBinaryUnboundedNotValidForMaxLength;
    public static ValidationRule`1<IEdmTemporalTypeReference> TemporalTypeReferencePrecisionOutOfRange;
    public static ValidationRule`1<IEdmModel> ModelDuplicateSchemaElementName;
    public static ValidationRule`1<IEdmModel> ModelDuplicateEntityContainerName;
    public static ValidationRule`1<IEdmModel> ModelBoundFunctionOverloadsMustHaveSameReturnType;
    public static ValidationRule`1<IEdmModel> UnBoundFunctionOverloadsMustHaveIdenticalReturnTypes;
    public static ValidationRule`1<IEdmDirectValueAnnotation> ImmediateValueAnnotationElementAnnotationIsValid;
    public static ValidationRule`1<IEdmDirectValueAnnotation> ImmediateValueAnnotationElementAnnotationHasNameAndNamespace;
    public static ValidationRule`1<IEdmDirectValueAnnotation> DirectValueAnnotationHasXmlSerializableName;
    public static ValidationRule`1<IEdmVocabularyAnnotation> VocabularyAnnotationInaccessibleTarget;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ValidationRule`1<IEdmVocabularyAnnotation> VocabularyAnnotationAssertCorrectExpressionType;
    public static ValidationRule`1<IEdmVocabularyAnnotation> AnnotationInaccessibleTerm;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ValidationRule`1<IEdmVocabularyAnnotation> VocabularyAnnotationTargetAllowedApplyToElement;
    public static ValidationRule`1<IEdmPropertyValueBinding> PropertyValueBindingValueIsCorrectType;
    public static ValidationRule`1<IEdmIfExpression> IfExpressionAssertCorrectTestType;
    public static ValidationRule`1<IEdmCollectionExpression> CollectionExpressionAllElementsCorrectType;
    public static ValidationRule`1<IEdmRecordExpression> RecordExpressionPropertiesMatchType;
    public static ValidationRule`1<IEdmApplyExpression> FunctionApplicationExpressionParametersMatchAppliedFunction;
    public static ValidationRule`1<IEdmVocabularyAnnotatable> VocabularyAnnotatableNoDuplicateAnnotations;
    public static ValidationRule`1<IEdmPrimitiveValue> PrimitiveValueValidForType;
    private static ValidationRules();
    private static void CheckForUnreacheableTypeError(ValidationContext context, IEdmSchemaType type, EdmLocation location);
    private static bool TryResolveNavigationPropertyBindingPath(IEdmModel model, IEdmNavigationSource navigationSource, IEdmNavigationPropertyBinding binding);
    private static bool HasPathTypeProperty(IEdmStructuredType structuredType, IList`1<IEdmStructuredType> visited);
}
public class Microsoft.OData.Edm.Validation.ValidationRuleSet : object {
    private Dictionary`2<Type, List`1<ValidationRule>> rules;
    private static ValidationRuleSet BaseRuleSet;
    private static ValidationRuleSet V4RuleSet;
    public ValidationRuleSet(IEnumerable`1<ValidationRule> baseSet, IEnumerable`1<ValidationRule> newRules);
    public ValidationRuleSet(IEnumerable`1<ValidationRule> rules);
    private static ValidationRuleSet();
    public static ValidationRuleSet GetEdmModelRuleSet(Version version);
    [IteratorStateMachineAttribute("Microsoft.OData.Edm.Validation.ValidationRuleSet/<GetEnumerator>d__6")]
public sealed virtual IEnumerator`1<ValidationRule> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal IEnumerable`1<ValidationRule> GetRules(Type t);
    private void AddRule(ValidationRule rule);
}
internal abstract class Microsoft.OData.Edm.VersioningDictionary`2 : object {
    protected Func`3<TKey, TKey, int> CompareFunction;
    protected VersioningDictionary`2(Func`3<TKey, TKey, int> compareFunction);
    public static VersioningDictionary`2<TKey, TValue> Create(Func`3<TKey, TKey, int> compareFunction);
    public abstract virtual VersioningDictionary`2<TKey, TValue> Set(TKey keyToSet, TValue newValue);
    public abstract virtual VersioningDictionary`2<TKey, TValue> Remove(TKey keyToRemove);
    public TValue Get(TKey key);
    public abstract virtual bool TryGetValue(TKey key, TValue& value);
}
[DefaultMemberAttribute("Item")]
internal abstract class Microsoft.OData.Edm.VersioningList`1 : object {
    public int Count { get; }
    public TElement Item { get; }
    public abstract virtual int get_Count();
    public sealed virtual TElement get_Item(int index);
    public static VersioningList`1<TElement> Create();
    public abstract virtual VersioningList`1<TElement> Add(TElement value);
    public VersioningList`1<TElement> RemoveAt(int index);
    public abstract virtual IEnumerator`1<TElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected abstract virtual TElement IndexedElement(int index);
    protected abstract virtual VersioningList`1<TElement> RemoveIndexedElement(int index);
}
internal class Microsoft.OData.Edm.VersioningTree`2 : object {
    public TKey Key;
    public TValue Value;
    public int Height;
    public VersioningTree`2<TKey, TValue> LeftChild;
    public VersioningTree`2<TKey, TValue> RightChild;
    public VersioningTree`2(TKey key, TValue value, VersioningTree`2<TKey, TValue> leftChild, VersioningTree`2<TKey, TValue> rightChild);
    public TValue GetValue(TKey key, Func`3<TKey, TKey, int> compareFunction);
    public bool TryGetValue(TKey key, Func`3<TKey, TKey, int> compareFunction, TValue& value);
    public VersioningTree`2<TKey, TValue> SetKeyValue(TKey key, TValue value, Func`3<TKey, TKey, int> compareFunction);
    public VersioningTree`2<TKey, TValue> Remove(TKey key, Func`3<TKey, TKey, int> compareFunction);
    private static VersioningTree`2<TKey, TValue> SetKeyValue(VersioningTree`2<TKey, TValue> me, TKey key, TValue value, Func`3<TKey, TKey, int> compareFunction);
    private static int GetHeight(VersioningTree`2<TKey, TValue> tree);
    private static int Max(int x, int y);
    private VersioningTree`2<TKey, TValue> MakeLeftmost(VersioningTree`2<TKey, TValue> leftmost);
    private VersioningTree`2<TKey, TValue> MakeRightmost(VersioningTree`2<TKey, TValue> rightmost);
}
public static class Microsoft.OData.Edm.Vocabularies.Community.V1.AlternateKeysVocabularyConstants : object {
    public static string AlternateKeys;
    internal static string AlternateKeyTypeKeyPropertyName;
    internal static string PropertyRefTypeNamePropertyName;
    internal static string PropertyRefTypeAliasPropertyName;
    internal static string AlternateKeyType;
    internal static string PropertyRefType;
    internal static string VocabularyUrlSuffix;
}
public static class Microsoft.OData.Edm.Vocabularies.Community.V1.AlternateKeysVocabularyModel : object {
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmModel Instance;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm AlternateKeysTerm;
    internal static IEdmComplexType AlternateKeyType;
    internal static IEdmComplexType PropertyRefType;
    private static AlternateKeysVocabularyModel();
}
internal static class Microsoft.OData.Edm.Vocabularies.Community.V1.CommunityVocabularyConstants : object {
    internal static string UrlEscapeFunction;
}
public static class Microsoft.OData.Edm.Vocabularies.Community.V1.CommunityVocabularyModel : object {
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmModel Instance;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm UrlEscapeFunctionTerm;
    private static CommunityVocabularyModel();
}
public class Microsoft.OData.Edm.Vocabularies.EdmAnnotationPathExpression : EdmPathExpression {
    public EdmExpressionKind ExpressionKind { get; }
    public EdmAnnotationPathExpression(string path);
    public EdmAnnotationPathExpression(String[] pathSegments);
    public EdmAnnotationPathExpression(IEnumerable`1<string> pathSegments);
    public virtual EdmExpressionKind get_ExpressionKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmApplyExpression : EdmElement {
    private IEdmFunction appliedFunction;
    private IEnumerable`1<IEdmExpression> arguments;
    public IEdmFunction AppliedFunction { get; }
    public IEnumerable`1<IEdmExpression> Arguments { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmApplyExpression(IEdmFunction appliedFunction, IEdmExpression[] arguments);
    public EdmApplyExpression(IEdmFunction appliedFunction, IEnumerable`1<IEdmExpression> arguments);
    public sealed virtual IEdmFunction get_AppliedFunction();
    public sealed virtual IEnumerable`1<IEdmExpression> get_Arguments();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmBinaryConstant : EdmValue {
    private Byte[] value;
    [SuppressMessageAttribute("Performance", "CA1819:Properties should not return arrays")]
public Byte[] Value { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public EdmBinaryConstant(Byte[] value);
    public EdmBinaryConstant(IEdmBinaryTypeReference type, Byte[] value);
    public sealed virtual Byte[] get_Value();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
    public virtual EdmValueKind get_ValueKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmBooleanConstant : EdmValue {
    private bool value;
    public bool Value { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public EdmBooleanConstant(bool value);
    public EdmBooleanConstant(IEdmPrimitiveTypeReference type, bool value);
    public sealed virtual bool get_Value();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
    public virtual EdmValueKind get_ValueKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmCastExpression : EdmElement {
    private IEdmExpression operand;
    private IEdmTypeReference type;
    public IEdmExpression Operand { get; }
    public IEdmTypeReference Type { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmCastExpression(IEdmExpression operand, IEdmTypeReference type);
    public sealed virtual IEdmExpression get_Operand();
    public sealed virtual IEdmTypeReference get_Type();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmCollectionExpression : EdmElement {
    private IEdmTypeReference declaredType;
    private IEnumerable`1<IEdmExpression> elements;
    public IEdmTypeReference DeclaredType { get; }
    public IEnumerable`1<IEdmExpression> Elements { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmCollectionExpression(IEdmExpression[] elements);
    public EdmCollectionExpression(IEdmTypeReference declaredType, IEdmExpression[] elements);
    public EdmCollectionExpression(IEnumerable`1<IEdmExpression> elements);
    public EdmCollectionExpression(IEdmTypeReference declaredType, IEnumerable`1<IEdmExpression> elements);
    public sealed virtual IEdmTypeReference get_DeclaredType();
    public sealed virtual IEnumerable`1<IEdmExpression> get_Elements();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmCollectionValue : EdmValue {
    private IEnumerable`1<IEdmDelayedValue> elements;
    public IEnumerable`1<IEdmDelayedValue> Elements { get; }
    public EdmValueKind ValueKind { get; }
    public EdmCollectionValue(IEdmCollectionTypeReference type, IEnumerable`1<IEdmDelayedValue> elements);
    public sealed virtual IEnumerable`1<IEdmDelayedValue> get_Elements();
    public virtual EdmValueKind get_ValueKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmDateConstant : EdmValue {
    private Date value;
    public Date Value { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public EdmDateConstant(Date value);
    public EdmDateConstant(IEdmPrimitiveTypeReference type, Date value);
    public sealed virtual Date get_Value();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
    public virtual EdmValueKind get_ValueKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmDateTimeOffsetConstant : EdmValue {
    private DateTimeOffset value;
    public DateTimeOffset Value { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public EdmDateTimeOffsetConstant(DateTimeOffset value);
    public EdmDateTimeOffsetConstant(IEdmTemporalTypeReference type, DateTimeOffset value);
    public sealed virtual DateTimeOffset get_Value();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
    public virtual EdmValueKind get_ValueKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmDecimalConstant : EdmValue {
    private decimal value;
    public decimal Value { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public EdmDecimalConstant(decimal value);
    public EdmDecimalConstant(IEdmDecimalTypeReference type, decimal value);
    public sealed virtual decimal get_Value();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
    public virtual EdmValueKind get_ValueKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmDirectValueAnnotation : EdmNamedElement {
    private object value;
    private string namespaceUri;
    public string NamespaceUri { get; }
    public object Value { get; }
    public EdmDirectValueAnnotation(string namespaceUri, string name, object value);
    internal EdmDirectValueAnnotation(string namespaceUri, string name);
    public sealed virtual string get_NamespaceUri();
    public sealed virtual object get_Value();
}
public class Microsoft.OData.Edm.Vocabularies.EdmDirectValueAnnotationBinding : object {
    private IEdmElement element;
    private string namespaceUri;
    private string name;
    private object value;
    public IEdmElement Element { get; }
    public string NamespaceUri { get; }
    public string Name { get; }
    public object Value { get; }
    public EdmDirectValueAnnotationBinding(IEdmElement element, string namespaceUri, string name, object value);
    public EdmDirectValueAnnotationBinding(IEdmElement element, string namespaceUri, string name);
    public sealed virtual IEdmElement get_Element();
    public sealed virtual string get_NamespaceUri();
    public sealed virtual string get_Name();
    public sealed virtual object get_Value();
}
public class Microsoft.OData.Edm.Vocabularies.EdmDirectValueAnnotationsManager : object {
    private VersioningDictionary`2<IEdmElement, VersioningList`1<IEdmDirectValueAnnotation>> annotationsDictionary;
    private object annotationsDictionaryLock;
    private VersioningList`1<IEdmElement> unsortedElements;
    private object unsortedElementsLock;
    [IteratorStateMachineAttribute("Microsoft.OData.Edm.Vocabularies.EdmDirectValueAnnotationsManager/<GetDirectValueAnnotations>d__5")]
public sealed virtual IEnumerable`1<IEdmDirectValueAnnotation> GetDirectValueAnnotations(IEdmElement element);
    public sealed virtual void SetAnnotationValue(IEdmElement element, string namespaceName, string localName, object value);
    public sealed virtual void SetAnnotationValues(IEnumerable`1<IEdmDirectValueAnnotationBinding> annotations);
    public sealed virtual object GetAnnotationValue(IEdmElement element, string namespaceName, string localName);
    public sealed virtual Object[] GetAnnotationValues(IEnumerable`1<IEdmDirectValueAnnotationBinding> annotations);
    protected virtual IEnumerable`1<IEdmDirectValueAnnotation> GetAttachedAnnotations(IEdmElement element);
    private static void SetAnnotation(IEnumerable`1<IEdmDirectValueAnnotation> immutableAnnotations, VersioningList`1& transientAnnotations, string namespaceName, string localName, object value);
    private static IEdmDirectValueAnnotation FindTransientAnnotation(VersioningList`1<IEdmDirectValueAnnotation> transientAnnotations, string namespaceName, string localName);
    private static void RemoveTransientAnnotation(VersioningList`1& transientAnnotations, string namespaceName, string localName);
    [IteratorStateMachineAttribute("Microsoft.OData.Edm.Vocabularies.EdmDirectValueAnnotationsManager/<TransientAnnotations>d__14")]
private static IEnumerable`1<IEdmDirectValueAnnotation> TransientAnnotations(VersioningList`1<IEdmDirectValueAnnotation> transientAnnotations);
    private static bool IsDead(string namespaceName, string localName, VersioningList`1<IEdmDirectValueAnnotation> transientAnnotations);
    private static VersioningList`1<IEdmDirectValueAnnotation> GetTransientAnnotations(IEdmElement element, VersioningDictionary`2<IEdmElement, VersioningList`1<IEdmDirectValueAnnotation>> annotationsDictionary);
    private void SetAnnotationValue(IEdmElement element, string namespaceName, string localName, object value, VersioningDictionary`2& annotationsDictionary);
    private object GetAnnotationValue(IEdmElement element, string namespaceName, string localName, VersioningDictionary`2<IEdmElement, VersioningList`1<IEdmDirectValueAnnotation>> annotationsDictionary);
    private int CompareElements(IEdmElement left, IEdmElement right);
}
public class Microsoft.OData.Edm.Vocabularies.EdmDurationConstant : EdmValue {
    private TimeSpan value;
    public TimeSpan Value { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public EdmDurationConstant(TimeSpan value);
    public EdmDurationConstant(IEdmTemporalTypeReference type, TimeSpan value);
    public sealed virtual TimeSpan get_Value();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
    public virtual EdmValueKind get_ValueKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmEnumMemberExpression : EdmElement {
    private List`1<IEdmEnumMember> enumMembers;
    public IEnumerable`1<IEdmEnumMember> EnumMembers { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmEnumMemberExpression(IEdmEnumMember[] enumMembers);
    public sealed virtual IEnumerable`1<IEdmEnumMember> get_EnumMembers();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmEnumValue : EdmValue {
    private IEdmEnumMemberValue value;
    public IEdmEnumMemberValue Value { get; }
    public EdmValueKind ValueKind { get; }
    public EdmEnumValue(IEdmEnumTypeReference type, IEdmEnumMember member);
    public EdmEnumValue(IEdmEnumTypeReference type, IEdmEnumMemberValue value);
    public sealed virtual IEdmEnumMemberValue get_Value();
    public virtual EdmValueKind get_ValueKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmExpressionEvaluator : object {
    private IDictionary`2<IEdmOperation, Func`2<IEdmValue[], IEdmValue>> builtInFunctions;
    private Dictionary`2<IEdmLabeledExpression, DelayedValue> labeledValues;
    private Func`3<string, IEdmValue[], IEdmValue> lastChanceOperationApplier;
    private Func`5<IEdmModel, IEdmType, string, string, IEdmExpression> getAnnotationExpressionForType;
    private Func`6<IEdmModel, IEdmType, string, string, string, IEdmExpression> getAnnotationExpressionForProperty;
    private IEdmModel edmModel;
    private Func`3<string, IEdmModel, IEdmType> resolveTypeFromName;
    protected Func`3<string, IEdmModel, IEdmType> ResolveTypeFromName { get; protected set; }
    public EdmExpressionEvaluator(IDictionary`2<IEdmOperation, Func`2<IEdmValue[], IEdmValue>> builtInFunctions);
    public EdmExpressionEvaluator(IDictionary`2<IEdmOperation, Func`2<IEdmValue[], IEdmValue>> builtInFunctions, Func`3<string, IEdmValue[], IEdmValue> lastChanceOperationApplier);
    public EdmExpressionEvaluator(IDictionary`2<IEdmOperation, Func`2<IEdmValue[], IEdmValue>> builtInFunctions, Func`3<string, IEdmValue[], IEdmValue> lastChanceOperationApplier, Func`5<IEdmModel, IEdmType, string, string, IEdmExpression> getAnnotationExpressionForType, Func`6<IEdmModel, IEdmType, string, string, string, IEdmExpression> getAnnotationExpressionForProperty, IEdmModel edmModel);
    protected Func`3<string, IEdmModel, IEdmType> get_ResolveTypeFromName();
    protected void set_ResolveTypeFromName(Func`3<string, IEdmModel, IEdmType> value);
    public IEdmValue Evaluate(IEdmExpression expression);
    public IEdmValue Evaluate(IEdmExpression expression, IEdmStructuredValue context);
    public IEdmValue Evaluate(IEdmExpression expression, IEdmStructuredValue context, IEdmTypeReference targetType);
    protected static IEdmType FindEdmType(string edmTypeName, IEdmModel edmModel);
    private static bool InRange(long value, long min, long max);
    private static bool FitsInSingle(double value);
    private static bool MatchesType(IEdmTypeReference targetType, IEdmValue operand);
    private static bool MatchesType(IEdmTypeReference targetType, IEdmValue operand, bool testPropertyTypes);
    private static IEdmValue Cast(IEdmTypeReference targetType, IEdmValue operand);
    private static bool AssertOrMatchStructuredType(IEdmStructuredTypeReference structuredTargetType, IEdmStructuredValue structuredValue, bool testPropertyTypes, List`1<IEdmPropertyValue> newProperties);
    private IEdmValue Eval(IEdmExpression expression, IEdmStructuredValue context);
    private IEdmDelayedValue MapLabeledExpressionToDelayedValue(IEdmExpression expression, DelayedExpressionContext delayedContext, IEdmStructuredValue context);
    private static IEdmValue FindProperty(string name, IEdmValue context);
}
public class Microsoft.OData.Edm.Vocabularies.EdmFloatingConstant : EdmValue {
    private double value;
    public double Value { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public EdmFloatingConstant(double value);
    public EdmFloatingConstant(IEdmPrimitiveTypeReference type, double value);
    public sealed virtual double get_Value();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
    public virtual EdmValueKind get_ValueKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmGuidConstant : EdmValue {
    private Guid value;
    public Guid Value { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public EdmGuidConstant(Guid value);
    public EdmGuidConstant(IEdmPrimitiveTypeReference type, Guid value);
    public sealed virtual Guid get_Value();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
    public virtual EdmValueKind get_ValueKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmIfExpression : EdmElement {
    private IEdmExpression testExpression;
    private IEdmExpression trueExpression;
    private IEdmExpression falseExpression;
    public IEdmExpression TestExpression { get; }
    public IEdmExpression TrueExpression { get; }
    public IEdmExpression FalseExpression { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmIfExpression(IEdmExpression testExpression, IEdmExpression trueExpression, IEdmExpression falseExpression);
    public sealed virtual IEdmExpression get_TestExpression();
    public sealed virtual IEdmExpression get_TrueExpression();
    public sealed virtual IEdmExpression get_FalseExpression();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmIntegerConstant : EdmValue {
    private long value;
    public long Value { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public EdmIntegerConstant(long value);
    public EdmIntegerConstant(IEdmPrimitiveTypeReference type, long value);
    public sealed virtual long get_Value();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
    public virtual EdmValueKind get_ValueKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmIsOfExpression : EdmElement {
    private IEdmExpression operand;
    private IEdmTypeReference type;
    public IEdmExpression Operand { get; }
    public IEdmTypeReference Type { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmIsOfExpression(IEdmExpression operand, IEdmTypeReference type);
    public sealed virtual IEdmExpression get_Operand();
    public sealed virtual IEdmTypeReference get_Type();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmLabeledExpression : EdmElement {
    private string name;
    private IEdmExpression expression;
    public string Name { get; }
    public IEdmExpression Expression { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmLabeledExpression(string name, IEdmExpression expression);
    public sealed virtual string get_Name();
    public sealed virtual IEdmExpression get_Expression();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmLabeledExpressionReferenceExpression : EdmElement {
    private IEdmLabeledExpression referencedLabeledExpression;
    public IEdmLabeledExpression ReferencedLabeledExpression { get; public set; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmLabeledExpressionReferenceExpression(IEdmLabeledExpression referencedLabeledExpression);
    public sealed virtual IEdmLabeledExpression get_ReferencedLabeledExpression();
    public void set_ReferencedLabeledExpression(IEdmLabeledExpression value);
    public sealed virtual EdmExpressionKind get_ExpressionKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmNavigationPropertyPathExpression : EdmPathExpression {
    public EdmExpressionKind ExpressionKind { get; }
    public EdmNavigationPropertyPathExpression(string path);
    public EdmNavigationPropertyPathExpression(String[] pathSegments);
    public EdmNavigationPropertyPathExpression(IEnumerable`1<string> pathSegments);
    public virtual EdmExpressionKind get_ExpressionKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmNullExpression : EdmValue {
    public static EdmNullExpression Instance;
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    private static EdmNullExpression();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
    public virtual EdmValueKind get_ValueKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmPropertyConstructor : EdmElement {
    private string name;
    private IEdmExpression value;
    public string Name { get; }
    public IEdmExpression Value { get; }
    public EdmPropertyConstructor(string name, IEdmExpression value);
    public sealed virtual string get_Name();
    public sealed virtual IEdmExpression get_Value();
}
public class Microsoft.OData.Edm.Vocabularies.EdmPropertyPathExpression : EdmPathExpression {
    public EdmExpressionKind ExpressionKind { get; }
    public EdmPropertyPathExpression(string path);
    public EdmPropertyPathExpression(String[] pathSegments);
    public EdmPropertyPathExpression(IEnumerable`1<string> pathSegments);
    public virtual EdmExpressionKind get_ExpressionKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmPropertyValue : object {
    private string name;
    private IEdmValue value;
    public string Name { get; }
    public IEdmValue Value { get; public set; }
    public EdmPropertyValue(string name);
    public EdmPropertyValue(string name, IEdmValue value);
    public sealed virtual string get_Name();
    public sealed virtual IEdmValue get_Value();
    public void set_Value(IEdmValue value);
}
public class Microsoft.OData.Edm.Vocabularies.EdmPropertyValueBinding : EdmElement {
    private IEdmProperty boundProperty;
    private IEdmExpression value;
    public IEdmProperty BoundProperty { get; }
    public IEdmExpression Value { get; }
    public EdmPropertyValueBinding(IEdmProperty boundProperty, IEdmExpression value);
    public sealed virtual IEdmProperty get_BoundProperty();
    public sealed virtual IEdmExpression get_Value();
}
public class Microsoft.OData.Edm.Vocabularies.EdmRecordExpression : EdmElement {
    private IEdmStructuredTypeReference declaredType;
    private IEnumerable`1<IEdmPropertyConstructor> properties;
    public IEdmStructuredTypeReference DeclaredType { get; }
    public IEnumerable`1<IEdmPropertyConstructor> Properties { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmRecordExpression(IEdmPropertyConstructor[] properties);
    public EdmRecordExpression(IEdmStructuredTypeReference declaredType, IEdmPropertyConstructor[] properties);
    public EdmRecordExpression(IEnumerable`1<IEdmPropertyConstructor> properties);
    public EdmRecordExpression(IEdmStructuredTypeReference declaredType, IEnumerable`1<IEdmPropertyConstructor> properties);
    public sealed virtual IEdmStructuredTypeReference get_DeclaredType();
    public sealed virtual IEnumerable`1<IEdmPropertyConstructor> get_Properties();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmStringConstant : EdmValue {
    private string value;
    public string Value { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public EdmStringConstant(string value);
    public EdmStringConstant(IEdmStringTypeReference type, string value);
    public sealed virtual string get_Value();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
    public virtual EdmValueKind get_ValueKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmStructuredValue : EdmValue {
    private IEnumerable`1<IEdmPropertyValue> propertyValues;
    private Cache`2<EdmStructuredValue, Dictionary`2<string, IEdmPropertyValue>> propertiesDictionaryCache;
    private static Func`2<EdmStructuredValue, Dictionary`2<string, IEdmPropertyValue>> ComputePropertiesDictionaryFunc;
    public IEnumerable`1<IEdmPropertyValue> PropertyValues { get; }
    public EdmValueKind ValueKind { get; }
    private Dictionary`2<string, IEdmPropertyValue> PropertiesDictionary { get; }
    public EdmStructuredValue(IEdmStructuredTypeReference type, IEnumerable`1<IEdmPropertyValue> propertyValues);
    private static EdmStructuredValue();
    public sealed virtual IEnumerable`1<IEdmPropertyValue> get_PropertyValues();
    public virtual EdmValueKind get_ValueKind();
    private Dictionary`2<string, IEdmPropertyValue> get_PropertiesDictionary();
    public sealed virtual IEdmPropertyValue FindPropertyValue(string propertyName);
    private Dictionary`2<string, IEdmPropertyValue> ComputePropertiesDictionary();
}
public class Microsoft.OData.Edm.Vocabularies.EdmTerm : EdmNamedElement {
    private string namespaceName;
    private string fullName;
    private IEdmTypeReference type;
    private string appliesTo;
    private string defaultValue;
    public string Namespace { get; }
    public string FullName { get; }
    public IEdmTypeReference Type { get; }
    public string AppliesTo { get; }
    public string DefaultValue { get; }
    public EdmSchemaElementKind SchemaElementKind { get; }
    public EdmTerm(string namespaceName, string name, EdmPrimitiveTypeKind type);
    public EdmTerm(string namespaceName, string name, EdmPrimitiveTypeKind type, string appliesTo);
    public EdmTerm(string namespaceName, string name, IEdmTypeReference type);
    public EdmTerm(string namespaceName, string name, IEdmTypeReference type, string appliesTo);
    public EdmTerm(string namespaceName, string name, IEdmTypeReference type, string appliesTo, string defaultValue);
    public sealed virtual string get_Namespace();
    public sealed virtual string get_FullName();
    public sealed virtual IEdmTypeReference get_Type();
    public sealed virtual string get_AppliesTo();
    public sealed virtual string get_DefaultValue();
    public sealed virtual EdmSchemaElementKind get_SchemaElementKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmTimeOfDayConstant : EdmValue {
    private TimeOfDay value;
    public TimeOfDay Value { get; }
    public EdmExpressionKind ExpressionKind { get; }
    public EdmValueKind ValueKind { get; }
    public EdmTimeOfDayConstant(TimeOfDay value);
    public EdmTimeOfDayConstant(IEdmTemporalTypeReference type, TimeOfDay value);
    public sealed virtual TimeOfDay get_Value();
    public sealed virtual EdmExpressionKind get_ExpressionKind();
    public virtual EdmValueKind get_ValueKind();
}
public class Microsoft.OData.Edm.Vocabularies.EdmToClrConverter : object {
    private static Type TypeICollectionOfT;
    private static Type TypeIListOfT;
    private static Type TypeListOfT;
    private static Type TypeIEnumerableOfT;
    private static Type TypeNullableOfT;
    private static MethodInfo CastToClrTypeMethodInfo;
    private static MethodInfo EnumerableToListOfTMethodInfo;
    private Dictionary`2<IEdmStructuredValue, object> convertedObjects;
    private Dictionary`2<Type, MethodInfo> enumerableConverters;
    private Dictionary`2<Type, MethodInfo> enumTypeConverters;
    private TryCreateObjectInstance tryCreateObjectInstanceDelegate;
    private TryGetClrPropertyInfo tryGetClrPropertyInfoDelegate;
    [CompilerGeneratedAttribute]
private TryGetClrTypeName <TryGetClrTypeNameDelegate>k__BackingField;
    internal TryGetClrTypeName TryGetClrTypeNameDelegate { get; private set; }
    public EdmToClrConverter(TryCreateObjectInstance tryCreateObjectInstanceDelegate);
    public EdmToClrConverter(TryCreateObjectInstance tryCreateObjectInstanceDelegate, TryGetClrPropertyInfo tryGetClrPropertyInfoDelegate, TryGetClrTypeName tryGetClrTypeNameDelegate);
    private static EdmToClrConverter();
    [CompilerGeneratedAttribute]
internal TryGetClrTypeName get_TryGetClrTypeNameDelegate();
    [CompilerGeneratedAttribute]
private void set_TryGetClrTypeNameDelegate(TryGetClrTypeName value);
    public T AsClrValue(IEdmValue edmValue);
    public object AsClrValue(IEdmValue edmValue, Type clrType);
    public void RegisterConvertedObject(IEdmStructuredValue edmValue, object clrObject);
    internal static Byte[] AsClrByteArray(IEdmValue edmValue);
    internal static string AsClrString(IEdmValue edmValue);
    internal static bool AsClrBoolean(IEdmValue edmValue);
    internal static long AsClrInt64(IEdmValue edmValue);
    internal static char AsClrChar(IEdmValue edmValue);
    internal static byte AsClrByte(IEdmValue edmValue);
    internal static short AsClrInt16(IEdmValue edmValue);
    internal static int AsClrInt32(IEdmValue edmValue);
    internal static double AsClrDouble(IEdmValue edmValue);
    internal static float AsClrSingle(IEdmValue edmValue);
    internal static TimeOfDay AsClrTimeOfDay(IEdmValue edmValue);
    internal static Date AsClrDate(IEdmValue edmValue);
    internal static decimal AsClrDecimal(IEdmValue edmValue);
    internal static TimeSpan AsClrDuration(IEdmValue edmValue);
    internal static Guid AsClrGuid(IEdmValue edmValue);
    internal static DateTimeOffset AsClrDateTimeOffset(IEdmValue edmValue);
    private static bool TryConvertAsNonGuidPrimitiveType(Type clrType, IEdmValue edmValue, Object& clrValue);
    private static MethodInfo FindICollectionOfElementTypeAddMethod(Type collectionType, Type elementType);
    private PropertyInfo FindProperty(Type clrObjectType, string propertyName);
    private static string GetEdmValueInterfaceName(IEdmValue edmValue);
    private static bool IsBuiltInOrEnumType(Type type);
    private object AsClrValue(IEdmValue edmValue, Type clrType, bool convertEnumValues);
    private static bool TryConvertEnumType(Type type, long enumValue, Object& clrValue);
    private object AsListOfT(IEdmValue edmValue, Type clrType);
    private object GetEnumValue(object clrValue, Type clrType);
    private object AsClrObject(IEdmValue edmValue, Type clrObjectType);
    private void PopulateObjectProperties(IEdmStructuredValue edmValue, object clrObject, Type clrObjectType);
    private bool TrySetCollectionProperty(PropertyInfo clrProperty, object clrObject, IEdmPropertyValue propertyValue);
    [IteratorStateMachineAttribute("Microsoft.OData.Edm.Vocabularies.EdmToClrConverter/<AsIEnumerable>d__50")]
private IEnumerable AsIEnumerable(IEdmValue edmValue, Type elementType);
}
public class Microsoft.OData.Edm.Vocabularies.EdmToClrEvaluator : EdmExpressionEvaluator {
    private EdmToClrConverter edmToClrConverter;
    public EdmToClrConverter EdmToClrConverter { get; public set; }
    public EdmToClrEvaluator(IDictionary`2<IEdmOperation, Func`2<IEdmValue[], IEdmValue>> builtInFunctions);
    public EdmToClrEvaluator(IDictionary`2<IEdmOperation, Func`2<IEdmValue[], IEdmValue>> builtInFunctions, Func`3<string, IEdmValue[], IEdmValue> lastChanceOperationApplier);
    public EdmToClrEvaluator(IDictionary`2<IEdmOperation, Func`2<IEdmValue[], IEdmValue>> builtInFunctions, Func`3<string, IEdmValue[], IEdmValue> lastChanceOperationApplier, Func`5<IEdmModel, IEdmType, string, string, IEdmExpression> getAnnotationExpressionForType, Func`6<IEdmModel, IEdmType, string, string, string, IEdmExpression> getAnnotationExpressionForProperty, IEdmModel edmModel);
    public EdmToClrConverter get_EdmToClrConverter();
    public void set_EdmToClrConverter(EdmToClrConverter value);
    public T EvaluateToClrValue(IEdmExpression expression);
    public T EvaluateToClrValue(IEdmExpression expression, IEdmStructuredValue context);
    public T EvaluateToClrValue(IEdmExpression expression, IEdmStructuredValue context, IEdmTypeReference targetType);
    internal IEdmType ResolveEdmTypeFromName(string edmTypeName, IEdmModel edmModel);
}
public class Microsoft.OData.Edm.Vocabularies.EdmTypedDirectValueAnnotationBinding`1 : EdmNamedElement {
    private IEdmElement element;
    private T value;
    public IEdmElement Element { get; }
    public string NamespaceUri { get; }
    public object Value { get; }
    public EdmTypedDirectValueAnnotationBinding`1(IEdmElement element, T value);
    public sealed virtual IEdmElement get_Element();
    public sealed virtual string get_NamespaceUri();
    public sealed virtual object get_Value();
}
public abstract class Microsoft.OData.Edm.Vocabularies.EdmValue : object {
    private IEdmTypeReference type;
    public IEdmTypeReference Type { get; }
    public EdmValueKind ValueKind { get; }
    [SuppressMessageAttribute("Design", "CA1033:Interface methods should be callable by child types")]
private IEdmValue Microsoft.OData.Edm.Vocabularies.IEdmDelayedValue.Value { get; }
    protected EdmValue(IEdmTypeReference type);
    public sealed virtual IEdmTypeReference get_Type();
    public abstract virtual EdmValueKind get_ValueKind();
    private sealed virtual override IEdmValue Microsoft.OData.Edm.Vocabularies.IEdmDelayedValue.get_Value();
}
public enum Microsoft.OData.Edm.Vocabularies.EdmValueKind : Enum {
    public int value__;
    public static EdmValueKind None;
    public static EdmValueKind Binary;
    public static EdmValueKind Boolean;
    public static EdmValueKind Collection;
    public static EdmValueKind DateTimeOffset;
    public static EdmValueKind Decimal;
    public static EdmValueKind Enum;
    public static EdmValueKind Floating;
    public static EdmValueKind Guid;
    public static EdmValueKind Integer;
    public static EdmValueKind Null;
    public static EdmValueKind String;
    public static EdmValueKind Structured;
    public static EdmValueKind Duration;
    public static EdmValueKind Date;
    public static EdmValueKind TimeOfDay;
}
public class Microsoft.OData.Edm.Vocabularies.EdmVocabularyAnnotation : EdmElement {
    private IEdmVocabularyAnnotatable target;
    private IEdmTerm term;
    private string qualifier;
    private IEdmExpression value;
    [CompilerGeneratedAttribute]
private bool <UsesDefault>k__BackingField;
    public IEdmVocabularyAnnotatable Target { get; }
    public IEdmTerm Term { get; }
    public string Qualifier { get; }
    public IEdmExpression Value { get; }
    public bool UsesDefault { get; public set; }
    public EdmVocabularyAnnotation(IEdmVocabularyAnnotatable target, IEdmTerm term, IEdmExpression value);
    public EdmVocabularyAnnotation(IEdmVocabularyAnnotatable target, IEdmTerm term, string qualifier, IEdmExpression value);
    public sealed virtual IEdmVocabularyAnnotatable get_Target();
    public sealed virtual IEdmTerm get_Term();
    public sealed virtual string get_Qualifier();
    public sealed virtual IEdmExpression get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UsesDefault();
    [CompilerGeneratedAttribute]
public void set_UsesDefault(bool value);
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmApplyExpression {
    public IEdmFunction AppliedFunction { get; }
    public IEnumerable`1<IEdmExpression> Arguments { get; }
    public abstract virtual IEdmFunction get_AppliedFunction();
    public abstract virtual IEnumerable`1<IEdmExpression> get_Arguments();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmBinaryConstantExpression {
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmBinaryValue {
    public Byte[] Value { get; }
    public abstract virtual Byte[] get_Value();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmBooleanConstantExpression {
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmBooleanValue {
    public bool Value { get; }
    public abstract virtual bool get_Value();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmCastExpression {
    public IEdmExpression Operand { get; }
    public IEdmTypeReference Type { get; }
    public abstract virtual IEdmExpression get_Operand();
    public abstract virtual IEdmTypeReference get_Type();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmCollectionExpression {
    public IEdmTypeReference DeclaredType { get; }
    public IEnumerable`1<IEdmExpression> Elements { get; }
    public abstract virtual IEdmTypeReference get_DeclaredType();
    public abstract virtual IEnumerable`1<IEdmExpression> get_Elements();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmCollectionValue {
    public IEnumerable`1<IEdmDelayedValue> Elements { get; }
    public abstract virtual IEnumerable`1<IEdmDelayedValue> get_Elements();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmDateConstantExpression {
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmDateTimeOffsetConstantExpression {
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmDateTimeOffsetValue {
    public DateTimeOffset Value { get; }
    public abstract virtual DateTimeOffset get_Value();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmDateValue {
    public Date Value { get; }
    public abstract virtual Date get_Value();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmDecimalConstantExpression {
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmDecimalValue {
    public decimal Value { get; }
    public abstract virtual decimal get_Value();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmDelayedValue {
    public IEdmValue Value { get; }
    public abstract virtual IEdmValue get_Value();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmDirectValueAnnotation {
    public string NamespaceUri { get; }
    public object Value { get; }
    public abstract virtual string get_NamespaceUri();
    public abstract virtual object get_Value();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmDirectValueAnnotationBinding {
    public IEdmElement Element { get; }
    public string NamespaceUri { get; }
    public string Name { get; }
    public object Value { get; }
    public abstract virtual IEdmElement get_Element();
    public abstract virtual string get_NamespaceUri();
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmDirectValueAnnotationsManager {
    public abstract virtual IEnumerable`1<IEdmDirectValueAnnotation> GetDirectValueAnnotations(IEdmElement element);
    public abstract virtual void SetAnnotationValue(IEdmElement element, string namespaceName, string localName, object value);
    public abstract virtual void SetAnnotationValues(IEnumerable`1<IEdmDirectValueAnnotationBinding> annotations);
    public abstract virtual object GetAnnotationValue(IEdmElement element, string namespaceName, string localName);
    public abstract virtual Object[] GetAnnotationValues(IEnumerable`1<IEdmDirectValueAnnotationBinding> annotations);
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmDurationConstantExpression {
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmDurationValue {
    public TimeSpan Value { get; }
    public abstract virtual TimeSpan get_Value();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmEnumMemberExpression {
    public IEnumerable`1<IEdmEnumMember> EnumMembers { get; }
    public abstract virtual IEnumerable`1<IEdmEnumMember> get_EnumMembers();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmEnumValue {
    public IEdmEnumMemberValue Value { get; }
    public abstract virtual IEdmEnumMemberValue get_Value();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmFloatingConstantExpression {
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmFloatingValue {
    public double Value { get; }
    public abstract virtual double get_Value();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmGuidConstantExpression {
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmGuidValue {
    public Guid Value { get; }
    public abstract virtual Guid get_Value();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmIfExpression {
    public IEdmExpression TestExpression { get; }
    public IEdmExpression TrueExpression { get; }
    public IEdmExpression FalseExpression { get; }
    public abstract virtual IEdmExpression get_TestExpression();
    public abstract virtual IEdmExpression get_TrueExpression();
    public abstract virtual IEdmExpression get_FalseExpression();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmIntegerConstantExpression {
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmIntegerValue {
    public long Value { get; }
    public abstract virtual long get_Value();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmIsOfExpression {
    public IEdmExpression Operand { get; }
    public IEdmTypeReference Type { get; }
    public abstract virtual IEdmExpression get_Operand();
    public abstract virtual IEdmTypeReference get_Type();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmLabeledExpression {
    public IEdmExpression Expression { get; }
    public abstract virtual IEdmExpression get_Expression();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmLabeledExpressionReferenceExpression {
    public IEdmLabeledExpression ReferencedLabeledExpression { get; }
    public abstract virtual IEdmLabeledExpression get_ReferencedLabeledExpression();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmNullExpression {
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmNullValue {
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmPrimitiveValue {
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmPropertyConstructor {
    public string Name { get; }
    public IEdmExpression Value { get; }
    public abstract virtual string get_Name();
    public abstract virtual IEdmExpression get_Value();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmPropertyValue {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmPropertyValueBinding {
    public IEdmProperty BoundProperty { get; }
    public IEdmExpression Value { get; }
    public abstract virtual IEdmProperty get_BoundProperty();
    public abstract virtual IEdmExpression get_Value();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmRecordExpression {
    public IEdmStructuredTypeReference DeclaredType { get; }
    public IEnumerable`1<IEdmPropertyConstructor> Properties { get; }
    public abstract virtual IEdmStructuredTypeReference get_DeclaredType();
    public abstract virtual IEnumerable`1<IEdmPropertyConstructor> get_Properties();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmStringConstantExpression {
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmStringValue {
    public string Value { get; }
    public abstract virtual string get_Value();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmStructuredValue {
    public IEnumerable`1<IEdmPropertyValue> PropertyValues { get; }
    public abstract virtual IEnumerable`1<IEdmPropertyValue> get_PropertyValues();
    public abstract virtual IEdmPropertyValue FindPropertyValue(string propertyName);
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmTerm {
    public IEdmTypeReference Type { get; }
    public string AppliesTo { get; }
    public string DefaultValue { get; }
    public abstract virtual IEdmTypeReference get_Type();
    public abstract virtual string get_AppliesTo();
    public abstract virtual string get_DefaultValue();
}
[ExtensionAttribute]
public static class Microsoft.OData.Edm.Vocabularies.IEdmTermExtensions : object {
    [ExtensionAttribute]
public static IEdmVocabularyAnnotation CreateVocabularyAnnotation(IEdmTerm term, IEdmVocabularyAnnotatable target);
    [ExtensionAttribute]
public static IEdmVocabularyAnnotation CreateVocabularyAnnotation(IEdmTerm term, IEdmVocabularyAnnotatable target, string qualifier);
    [ExtensionAttribute]
public static IEdmVocabularyAnnotation CreateVocabularyAnnotation(IEdmTerm term, IEdmVocabularyAnnotatable target, IEdmExpression value, string qualifier);
    [ExtensionAttribute]
internal static IEdmExpression GetDefaultValueExpression(IEdmTerm term);
    internal static IEdmExpression BuildEdmExpression(IEdmType edmType, string value);
    private static IEdmExpression BuildEdmPrimitiveValueExp(IEdmPrimitiveType typeReference, string value);
    private static IEdmExpression BuildEdmPathExp(IEdmPathType pathType, string value);
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmTimeOfDayConstantExpression {
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmTimeOfDayValue {
    public TimeOfDay Value { get; }
    public abstract virtual TimeOfDay get_Value();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmValue {
    public IEdmTypeReference Type { get; }
    public EdmValueKind ValueKind { get; }
    public abstract virtual IEdmTypeReference get_Type();
    public abstract virtual EdmValueKind get_ValueKind();
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmVocabularyAnnotatable {
}
public interface Microsoft.OData.Edm.Vocabularies.IEdmVocabularyAnnotation {
    public string Qualifier { get; }
    public IEdmTerm Term { get; }
    public IEdmVocabularyAnnotatable Target { get; }
    public IEdmExpression Value { get; }
    public bool UsesDefault { get; }
    public abstract virtual string get_Qualifier();
    public abstract virtual IEdmTerm get_Term();
    public abstract virtual IEdmVocabularyAnnotatable get_Target();
    public abstract virtual IEdmExpression get_Value();
    public abstract virtual bool get_UsesDefault();
}
public static class Microsoft.OData.Edm.Vocabularies.Measures.V1.MeasuresVocabularyModel : object {
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmModel Instance;
    private static MeasuresVocabularyModel();
}
public class Microsoft.OData.Edm.Vocabularies.TryCreateObjectInstance : MulticastDelegate {
    public TryCreateObjectInstance(object object, IntPtr method);
    public virtual bool Invoke(IEdmStructuredValue edmValue, Type clrType, EdmToClrConverter converter, Object& objectInstance, Boolean& objectInstanceInitialized);
    public virtual IAsyncResult BeginInvoke(IEdmStructuredValue edmValue, Type clrType, EdmToClrConverter converter, Object& objectInstance, Boolean& objectInstanceInitialized, AsyncCallback callback, object object);
    public virtual bool EndInvoke(Object& objectInstance, Boolean& objectInstanceInitialized, IAsyncResult result);
}
public class Microsoft.OData.Edm.Vocabularies.TryGetClrPropertyInfo : MulticastDelegate {
    public TryGetClrPropertyInfo(object object, IntPtr method);
    public virtual bool Invoke(Type clrType, string edmName, PropertyInfo& propertyInfo);
    public virtual IAsyncResult BeginInvoke(Type clrType, string edmName, PropertyInfo& propertyInfo, AsyncCallback callback, object object);
    public virtual bool EndInvoke(PropertyInfo& propertyInfo, IAsyncResult result);
}
public class Microsoft.OData.Edm.Vocabularies.TryGetClrTypeName : MulticastDelegate {
    public TryGetClrTypeName(object object, IntPtr method);
    public virtual bool Invoke(IEdmModel edmModel, string edmTypeName, String& clrTypeName);
    public virtual IAsyncResult BeginInvoke(IEdmModel edmModel, string edmTypeName, String& clrTypeName, AsyncCallback callback, object object);
    public virtual bool EndInvoke(String& clrTypeName, IAsyncResult result);
}
public static class Microsoft.OData.Edm.Vocabularies.V1.AuthorizationVocabularyModel : object {
    public static IEdmModel Instance;
    private static AuthorizationVocabularyModel();
}
public static class Microsoft.OData.Edm.Vocabularies.V1.CapabilitiesVocabularyConstants : object {
    public static string ChangeTracking;
    public static string ChangeTrackingSupported;
    public static string ChangeTrackingFilterableProperties;
    public static string ChangeTrackingExpandableProperties;
    internal static string VocabularyUrlSuffix;
}
public static class Microsoft.OData.Edm.Vocabularies.V1.CapabilitiesVocabularyModel : object {
    public static IEdmModel Instance;
    internal static IEdmTerm ChangeTrackingTerm;
    private static CapabilitiesVocabularyModel();
}
public static class Microsoft.OData.Edm.Vocabularies.V1.CoreVocabularyConstants : object {
    public static string CoreNamespace;
    public static string Description;
    public static string LongDescription;
    public static string IsLanguageDependent;
    public static string RequiresType;
    public static string ResourcePath;
    public static string DereferenceableIDs;
    public static string ConventionalIDs;
    public static string Permissions;
    public static string Immutable;
    public static string Computed;
    public static string IsURL;
    public static string AcceptableMediaTypes;
    public static string MediaType;
    public static string IsMediaType;
    public static string OptimisticConcurrency;
    public static string OptionalParameter;
    public static string Revisions;
    public static string AlternateKeys;
    public static string AlternateKey;
    public static string PropertyRef;
    internal static string VocabularyUrlSuffix;
}
public static class Microsoft.OData.Edm.Vocabularies.V1.CoreVocabularyModel : object {
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmModel Instance;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm ConcurrencyTerm;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm DescriptionTerm;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm LongDescriptionTerm;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm IsLanguageDependentTerm;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm RequiresTypeTerm;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm ResourcePathTerm;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm RevisionsTerm;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm DereferenceableIDsTerm;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm ConventionalIDsTerm;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm ImmutableTerm;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm ComputedTerm;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm OptionalParameterTerm;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm IsURLTerm;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm AcceptableMediaTypesTerm;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm MediaTypeTerm;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm IsMediaTypeTerm;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm PermissionsTerm;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm AlternateKeysTerm;
    internal static IEdmComplexType AlternateKeyType;
    internal static IEdmComplexType PropertyRefType;
    private static CoreVocabularyModel();
}
public static class Microsoft.OData.Edm.Vocabularies.V1.ValidationVocabularyModel : object {
    public static string Namespace;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmModel Instance;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static IEdmTerm DerivedTypeConstraintTerm;
    private static ValidationVocabularyModel();
}
[ExtensionAttribute]
public static class Microsoft.OData.Edm.Vocabularies.V1.VocabularyAnnotationExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<string> GetVocabularyStringCollection(IEdmModel model, IEdmVocabularyAnnotatable target, IEdmTerm term);
}
internal static class Microsoft.OData.Edm.Vocabularies.V1.VocabularyModelProvider : object {
    public static IEdmModel CoreModel;
    public static IEdmModel CapabilitiesModel;
    public static IEdmModel AlternateKeyModel;
    public static IEdmModel CommunityModel;
    public static IEdmModel ValidationModel;
    public static IEdmModel AuthorizationModel;
    public static IEdmModel MeasuresModel;
    public static IEnumerable`1<IEdmModel> VocabularyModels;
    [SuppressMessageAttribute("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
private static VocabularyModelProvider();
    private static IEdmModel LoadCsdlEdmModel(Assembly assembly, string vocabularyName, IEnumerable`1<IEdmModel> referenceModels);
    private static IEdmModel LoadSchemaEdmModel(Assembly assembly, string vocabularyName, IEnumerable`1<IEdmModel> referenceModels);
}
internal class Microsoft.OData.Edm.VocabularyAnnotationCache : object {
    private ConcurrentDictionary`2<IEdmVocabularyAnnotatable, IEnumerable`1<IEdmVocabularyAnnotation>> annotationsCache;
    public void AddVocabularyAnnotations(IEdmVocabularyAnnotatable element, IEnumerable`1<IEdmVocabularyAnnotation> annotations);
    public bool TryGetVocabularyAnnotations(IEdmVocabularyAnnotatable element, IEnumerable`1& annotations);
}
[ExtensionAttribute]
public static class System.Collections.Generic.ReadOnlyListExtensions : object {
    [ExtensionAttribute]
public static int FindLastIndex(IReadOnlyList`1<T> list, Func`2<T, bool> predicate);
}
