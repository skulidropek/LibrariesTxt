internal class Microsoft.OData.ModelBuilder.AbstractTypeDiscoveryConvention : object {
    public sealed virtual void Apply(IEdmTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model);
}
public class Microsoft.OData.ModelBuilder.ActionConfiguration : OperationConfiguration {
    public OperationKind Kind { get; }
    public bool IsSideEffecting { get; }
    internal ActionConfiguration(ODataModelBuilder builder, string name);
    public virtual OperationKind get_Kind();
    public virtual bool get_IsSideEffecting();
    public ActionConfiguration ReturnsFromEntitySet(string entitySetName);
    public ActionConfiguration ReturnsFromEntitySet(Type entityType, string entitySetName);
    public ActionConfiguration ReturnsFromEntitySet(EntitySetConfiguration`1<TEntityType> entitySetConfiguration);
    public ActionConfiguration ReturnsCollectionFromEntitySet(string entitySetName);
    public ActionConfiguration ReturnsCollectionFromEntitySet(Type elementEntityType, string entitySetName);
    public ActionConfiguration ReturnsCollectionFromEntitySet(EntitySetConfiguration`1<TElementEntityType> entitySetConfiguration);
    public ActionConfiguration Returns();
    public ActionConfiguration Returns(Type clrReturnType);
    public ActionConfiguration ReturnsCollection();
    public ActionConfiguration ReturnsCollection(Type clrElementType);
    public ActionConfiguration SetBindingParameter(string name, IEdmTypeConfiguration bindingParameterType);
    public ActionConfiguration ReturnsEntityViaEntitySetPath(string entitySetPath);
    public ActionConfiguration ReturnsEntityViaEntitySetPath(Type entityType, string entitySetPath);
    public ActionConfiguration ReturnsEntityViaEntitySetPath(String[] entitySetPath);
    public ActionConfiguration ReturnsCollectionViaEntitySetPath(string entitySetPath);
    public ActionConfiguration ReturnsCollectionViaEntitySetPath(Type clrElementEntityType, string entitySetPath);
    public ActionConfiguration ReturnsCollectionViaEntitySetPath(String[] entitySetPath);
}
internal class Microsoft.OData.ModelBuilder.ActionLinkGenerationConvention : object {
    public sealed virtual void Apply(OperationConfiguration configuration, ODataModelBuilder model);
}
[AttributeUsageAttribute("128")]
public class Microsoft.OData.ModelBuilder.ActionOnDeleteAttribute : Attribute {
    [CompilerGeneratedAttribute]
private EdmOnDeleteAction <OnDeleteAction>k__BackingField;
    public EdmOnDeleteAction OnDeleteAction { get; }
    public ActionOnDeleteAttribute(EdmOnDeleteAction onDeleteAction);
    [CompilerGeneratedAttribute]
public EdmOnDeleteAction get_OnDeleteAction();
}
[ExtensionAttribute]
public static class Microsoft.OData.ModelBuilder.Annotations.EdmAnnotationExtensions : object {
    [ExtensionAttribute]
public static void SetClrType(IEdmModel edmModel, IEdmStructuredType structuredType);
    [ExtensionAttribute]
public static void SetClrType(IEdmModel edmModel, IEdmStructuredType structuredType, Type clrType);
    [ExtensionAttribute]
public static string GetClrPropertyName(IEdmModel edmModel, IEdmProperty edmProperty);
    [ExtensionAttribute]
public static PropertyInfo GetDynamicPropertyDictionary(IEdmModel edmModel, IEdmStructuredType edmType);
    [ExtensionAttribute]
public static ClrEnumMemberAnnotation GetClrEnumMemberAnnotation(IEdmModel edmModel, IEdmEnumType enumType);
}
public class Microsoft.OData.ModelBuilder.Annotations.QueryableRestrictionsAnnotation : object {
    [CompilerGeneratedAttribute]
private QueryableRestrictions <Restrictions>k__BackingField;
    public QueryableRestrictions Restrictions { get; }
    public QueryableRestrictionsAnnotation(QueryableRestrictions restrictions);
    [CompilerGeneratedAttribute]
public QueryableRestrictions get_Restrictions();
}
[AttributeUsageAttribute("132")]
public class Microsoft.OData.ModelBuilder.AutoExpandAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <DisableWhenSelectPresent>k__BackingField;
    public bool DisableWhenSelectPresent { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DisableWhenSelectPresent();
    [CompilerGeneratedAttribute]
public void set_DisableWhenSelectPresent(bool value);
}
internal class Microsoft.OData.ModelBuilder.BindableOperationFinder : object {
    private Dictionary`2<IEdmEntityType, List`1<IEdmOperation>> _map;
    private Dictionary`2<IEdmEntityType, List`1<IEdmOperation>> _collectionMap;
    public BindableOperationFinder(IEdmModel model);
    public virtual IEnumerable`1<IEdmOperation> FindOperations(IEdmEntityType entityType);
    public virtual IEnumerable`1<IEdmOperation> FindOperationsBoundToCollection(IEdmEntityType entityType);
    [IteratorStateMachineAttribute("Microsoft.OData.ModelBuilder.BindableOperationFinder/<GetTypeHierarchy>d__5")]
private static IEnumerable`1<IEdmEntityType> GetTypeHierarchy(IEdmEntityType entityType);
    private IEnumerable`1<IEdmOperation> FindDeclaredOperations(IEdmEntityType entityType);
    private IEnumerable`1<IEdmOperation> FindDeclaredOperationsBoundToCollection(IEdmEntityType entityType);
}
public class Microsoft.OData.ModelBuilder.BindingParameterConfiguration : ParameterConfiguration {
    public static string DefaultBindingParameterName;
    public BindingParameterConfiguration(string name, IEdmTypeConfiguration parameterType);
}
public class Microsoft.OData.ModelBuilder.BindingPathConfiguration`1 : object {
    private NavigationSourceConfiguration _navigationSource;
    private StructuralTypeConfiguration`1<TStructuralType> _structuralType;
    private ODataModelBuilder _modelBuilder;
    private IList`1<MemberInfo> _bindingPath;
    public IList`1<MemberInfo> Path { get; }
    public string BindingPath { get; }
    public BindingPathConfiguration`1(ODataModelBuilder modelBuilder, StructuralTypeConfiguration`1<TStructuralType> structuralType, NavigationSourceConfiguration navigationSource);
    public BindingPathConfiguration`1(ODataModelBuilder modelBuilder, StructuralTypeConfiguration`1<TStructuralType> structuralType, NavigationSourceConfiguration navigationSource, IList`1<MemberInfo> bindingPath);
    public IList`1<MemberInfo> get_Path();
    public string get_BindingPath();
    public BindingPathConfiguration`1<TTargetType> HasManyPath(Expression`1<Func`2<TStructuralType, IEnumerable`1<TTargetType>>> pathExpression);
    public BindingPathConfiguration`1<TTargetType> HasManyPath(Expression`1<Func`2<TStructuralType, IEnumerable`1<TTargetType>>> pathExpression, bool contained);
    public BindingPathConfiguration`1<TTargetType> HasManyPath(Expression`1<Func`2<TDerivedType, IEnumerable`1<TTargetType>>> pathExpression);
    public BindingPathConfiguration`1<TTargetType> HasManyPath(Expression`1<Func`2<TDerivedType, IEnumerable`1<TTargetType>>> pathExpression, bool contained);
    public BindingPathConfiguration`1<TTargetType> HasSinglePath(Expression`1<Func`2<TStructuralType, TTargetType>> pathExpression);
    public BindingPathConfiguration`1<TTargetType> HasSinglePath(Expression`1<Func`2<TStructuralType, TTargetType>> pathExpression, bool required, bool contained);
    public BindingPathConfiguration`1<TTargetType> HasSinglePath(Expression`1<Func`2<TDerivedType, TTargetType>> pathExpression);
    public BindingPathConfiguration`1<TTargetType> HasSinglePath(Expression`1<Func`2<TDerivedType, TTargetType>> pathExpression, bool required, bool contained);
    public NavigationPropertyBindingConfiguration HasManyBinding(Expression`1<Func`2<TStructuralType, IEnumerable`1<TTargetType>>> navigationExpression, string targetEntitySet);
    public NavigationPropertyBindingConfiguration HasManyBinding(Expression`1<Func`2<TDerivedType, IEnumerable`1<TTargetType>>> navigationExpression, string targetEntitySet);
    public NavigationPropertyBindingConfiguration HasRequiredBinding(Expression`1<Func`2<TStructuralType, TTargetType>> navigationExpression, string targetEntitySet);
    public NavigationPropertyBindingConfiguration HasRequiredBinding(Expression`1<Func`2<TDerivedType, TTargetType>> navigationExpression, string targetEntitySet);
    public NavigationPropertyBindingConfiguration HasOptionalBinding(Expression`1<Func`2<TStructuralType, TTargetType>> navigationExpression, string targetEntitySet);
    public NavigationPropertyBindingConfiguration HasOptionalBinding(Expression`1<Func`2<TDerivedType, TTargetType>> navigationExpression, string targetEntitySet);
}
[ExtensionAttribute]
internal static class Microsoft.OData.ModelBuilder.BindingPathHelper : object {
    [ExtensionAttribute]
public static string ConvertBindingPath(IEnumerable`1<MemberInfo> bindingPath);
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.AcceptableEncodingsConfiguration : VocabularyTermConfiguration {
    private HashSet`1<string> _acceptableEncodings;
    public string TermName { get; }
    public virtual string get_TermName();
    public AcceptableEncodingsConfiguration HasAcceptableEncodings(String[] acceptableEncodings);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.AnnotationValuesInQuerySupportedConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _annotationValuesInQuerySupported;
    public string TermName { get; }
    public virtual string get_TermName();
    public AnnotationValuesInQuerySupportedConfiguration IsAnnotationValuesInQuerySupported(bool annotationValuesInQuerySupported);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.AsynchronousRequestsSupportedConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _asynchronousRequestsSupported;
    public string TermName { get; }
    public virtual string get_TermName();
    public AsynchronousRequestsSupportedConfiguration IsAsynchronousRequestsSupported(bool asynchronousRequestsSupported);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.BatchContinueOnErrorSupportedConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _batchContinueOnErrorSupported;
    public string TermName { get; }
    public virtual string get_TermName();
    public BatchContinueOnErrorSupportedConfiguration IsBatchContinueOnErrorSupported(bool batchContinueOnErrorSupported);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.BatchSupportConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<bool> _supported;
    private Nullable`1<bool> _continueOnErrorSupported;
    private Nullable`1<bool> _referencesInRequestBodiesSupported;
    private Nullable`1<bool> _referencesAcrossChangeSetsSupported;
    private Nullable`1<bool> _etagReferencesSupported;
    private Nullable`1<bool> _requestDependencyConditionsSupported;
    private HashSet`1<string> _supportedFormats;
    public string TermName { get; }
    public virtual string get_TermName();
    public BatchSupportConfiguration HasDynamicProperty(string name, object value);
    public BatchSupportConfiguration IsSupported(bool supported);
    public BatchSupportConfiguration IsContinueOnErrorSupported(bool continueOnErrorSupported);
    public BatchSupportConfiguration IsReferencesInRequestBodiesSupported(bool referencesInRequestBodiesSupported);
    public BatchSupportConfiguration IsReferencesAcrossChangeSetsSupported(bool referencesAcrossChangeSetsSupported);
    public BatchSupportConfiguration IsEtagReferencesSupported(bool etagReferencesSupported);
    public BatchSupportConfiguration IsRequestDependencyConditionsSupported(bool requestDependencyConditionsSupported);
    public BatchSupportConfiguration HasSupportedFormats(String[] supportedFormats);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.BatchSupportedConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _batchSupported;
    public string TermName { get; }
    public virtual string get_TermName();
    public BatchSupportedConfiguration IsBatchSupported(bool batchSupported);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.CallbackProtocolConfiguration : object {
    private Dictionary`2<string, object> _dynamicProperties;
    private string _id;
    private string _urlTemplate;
    private string _documentationUrl;
    public CallbackProtocolConfiguration HasDynamicProperty(string name, object value);
    public CallbackProtocolConfiguration HasId(string id);
    public CallbackProtocolConfiguration HasUrlTemplate(string urlTemplate);
    public CallbackProtocolConfiguration HasDocumentationUrl(string documentationUrl);
    public sealed virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.CallbackSupportedConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private HashSet`1<CallbackProtocolConfiguration> _callbackProtocols;
    public string TermName { get; }
    public virtual string get_TermName();
    public CallbackSupportedConfiguration HasDynamicProperty(string name, object value);
    public CallbackSupportedConfiguration HasCallbackProtocols(Func`2<CallbackProtocolConfiguration, CallbackProtocolConfiguration> callbackProtocolsConfiguration);
    public CallbackSupportedConfiguration HasCallbackProtocols(CallbackProtocolConfiguration[] callbackProtocols);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.ChangeTrackingConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<bool> _supported;
    private HashSet`1<EdmPropertyPathExpression> _filterableProperties;
    private HashSet`1<EdmNavigationPropertyPathExpression> _expandableProperties;
    public string TermName { get; }
    public virtual string get_TermName();
    public ChangeTrackingConfiguration HasDynamicProperty(string name, object value);
    public ChangeTrackingConfiguration IsSupported(bool supported);
    public ChangeTrackingConfiguration HasFilterableProperties(EdmPropertyPathExpression[] filterableProperties);
    public ChangeTrackingConfiguration HasExpandableProperties(EdmNavigationPropertyPathExpression[] expandableProperties);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.CollectionPropertyRestrictionsConfiguration : VocabularyTermConfiguration {
    private HashSet`1<CollectionPropertyRestrictionsTypeConfiguration> _collectionPropertyRestrictions;
    public string TermName { get; }
    public virtual string get_TermName();
    public CollectionPropertyRestrictionsConfiguration HasCollectionPropertyRestrictions(Func`2<CollectionPropertyRestrictionsTypeConfiguration, CollectionPropertyRestrictionsTypeConfiguration> collectionPropertyRestrictionsConfiguration);
    public CollectionPropertyRestrictionsConfiguration HasCollectionPropertyRestrictions(CollectionPropertyRestrictionsTypeConfiguration[] collectionPropertyRestrictions);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.CollectionPropertyRestrictionsTypeConfiguration : object {
    private Dictionary`2<string, object> _dynamicProperties;
    private EdmPropertyPathExpression _collectionProperty;
    private HashSet`1<string> _filterFunctions;
    private FilterRestrictionsConfiguration _filterRestrictions;
    private SearchRestrictionsConfiguration _searchRestrictions;
    private SortRestrictionsConfiguration _sortRestrictions;
    private Nullable`1<bool> _topSupported;
    private Nullable`1<bool> _skipSupported;
    private SelectSupportConfiguration _selectSupport;
    private Nullable`1<bool> _insertable;
    private Nullable`1<bool> _updatable;
    private Nullable`1<bool> _deletable;
    public CollectionPropertyRestrictionsTypeConfiguration HasDynamicProperty(string name, object value);
    public CollectionPropertyRestrictionsTypeConfiguration HasCollectionProperty(EdmPropertyPathExpression collectionProperty);
    public CollectionPropertyRestrictionsTypeConfiguration HasFilterFunctions(String[] filterFunctions);
    public CollectionPropertyRestrictionsTypeConfiguration HasFilterRestrictions(Func`2<FilterRestrictionsConfiguration, FilterRestrictionsConfiguration> filterRestrictionsConfiguration);
    public CollectionPropertyRestrictionsTypeConfiguration HasFilterRestrictions(FilterRestrictionsConfiguration filterRestrictions);
    public CollectionPropertyRestrictionsTypeConfiguration HasSearchRestrictions(Func`2<SearchRestrictionsConfiguration, SearchRestrictionsConfiguration> searchRestrictionsConfiguration);
    public CollectionPropertyRestrictionsTypeConfiguration HasSearchRestrictions(SearchRestrictionsConfiguration searchRestrictions);
    public CollectionPropertyRestrictionsTypeConfiguration HasSortRestrictions(Func`2<SortRestrictionsConfiguration, SortRestrictionsConfiguration> sortRestrictionsConfiguration);
    public CollectionPropertyRestrictionsTypeConfiguration HasSortRestrictions(SortRestrictionsConfiguration sortRestrictions);
    public CollectionPropertyRestrictionsTypeConfiguration IsTopSupported(bool topSupported);
    public CollectionPropertyRestrictionsTypeConfiguration IsSkipSupported(bool skipSupported);
    public CollectionPropertyRestrictionsTypeConfiguration HasSelectSupport(Func`2<SelectSupportConfiguration, SelectSupportConfiguration> selectSupportConfiguration);
    public CollectionPropertyRestrictionsTypeConfiguration HasSelectSupport(SelectSupportConfiguration selectSupport);
    public CollectionPropertyRestrictionsTypeConfiguration IsInsertable(bool insertable);
    public CollectionPropertyRestrictionsTypeConfiguration IsUpdatable(bool updatable);
    public CollectionPropertyRestrictionsTypeConfiguration IsDeletable(bool deletable);
    public sealed virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.ComputeSupportedConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _computeSupported;
    public string TermName { get; }
    public virtual string get_TermName();
    public ComputeSupportedConfiguration IsComputeSupported(bool computeSupported);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.ConformanceLevelConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<ConformanceLevelType> _conformanceLevel;
    public string TermName { get; }
    public virtual string get_TermName();
    public ConformanceLevelConfiguration HasConformanceLevel(ConformanceLevelType conformanceLevel);
    public virtual IEdmExpression ToEdmExpression();
}
public enum Microsoft.OData.ModelBuilder.Capabilities.V1.ConformanceLevelType : Enum {
    public int value__;
    public static ConformanceLevelType Minimal;
    public static ConformanceLevelType Intermediate;
    public static ConformanceLevelType Advanced;
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.CountRestrictionsConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<bool> _countable;
    private HashSet`1<EdmPropertyPathExpression> _nonCountableProperties;
    private HashSet`1<EdmNavigationPropertyPathExpression> _nonCountableNavigationProperties;
    public string TermName { get; }
    public virtual string get_TermName();
    public CountRestrictionsConfiguration HasDynamicProperty(string name, object value);
    public CountRestrictionsConfiguration IsCountable(bool countable);
    public CountRestrictionsConfiguration HasNonCountableProperties(EdmPropertyPathExpression[] nonCountableProperties);
    public CountRestrictionsConfiguration HasNonCountableNavigationProperties(EdmNavigationPropertyPathExpression[] nonCountableNavigationProperties);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.CrossJoinSupportedConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _crossJoinSupported;
    public string TermName { get; }
    public virtual string get_TermName();
    public CrossJoinSupportedConfiguration IsCrossJoinSupported(bool crossJoinSupported);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.CustomHeadersConfiguration : VocabularyTermConfiguration {
    private HashSet`1<CustomParameterConfiguration> _customHeaders;
    public string TermName { get; }
    public virtual string get_TermName();
    public CustomHeadersConfiguration HasCustomHeaders(Func`2<CustomParameterConfiguration, CustomParameterConfiguration> customHeadersConfiguration);
    public CustomHeadersConfiguration HasCustomHeaders(CustomParameterConfiguration[] customHeaders);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.CustomParameterConfiguration : object {
    private Dictionary`2<string, object> _dynamicProperties;
    private string _name;
    private string _description;
    private string _documentationURL;
    private Nullable`1<bool> _required;
    private HashSet`1<PrimitiveExampleValueConfiguration> _exampleValues;
    public CustomParameterConfiguration HasDynamicProperty(string name, object value);
    public CustomParameterConfiguration HasName(string name);
    public CustomParameterConfiguration HasDescription(string description);
    public CustomParameterConfiguration HasDocumentationURL(string documentationURL);
    public CustomParameterConfiguration IsRequired(bool required);
    public CustomParameterConfiguration HasExampleValues(Func`2<PrimitiveExampleValueConfiguration, PrimitiveExampleValueConfiguration> exampleValuesConfiguration);
    public CustomParameterConfiguration HasExampleValues(PrimitiveExampleValueConfiguration[] exampleValues);
    public sealed virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.CustomQueryOptionsConfiguration : VocabularyTermConfiguration {
    private HashSet`1<CustomParameterConfiguration> _customQueryOptions;
    public string TermName { get; }
    public virtual string get_TermName();
    public CustomQueryOptionsConfiguration HasCustomQueryOptions(Func`2<CustomParameterConfiguration, CustomParameterConfiguration> customQueryOptionsConfiguration);
    public CustomQueryOptionsConfiguration HasCustomQueryOptions(CustomParameterConfiguration[] customQueryOptions);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.DeepInsertSupportConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<bool> _supported;
    private Nullable`1<bool> _contentIDSupported;
    public string TermName { get; }
    public virtual string get_TermName();
    public DeepInsertSupportConfiguration HasDynamicProperty(string name, object value);
    public DeepInsertSupportConfiguration IsSupported(bool supported);
    public DeepInsertSupportConfiguration IsContentIDSupported(bool contentIDSupported);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.DeepUpdateSupportConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<bool> _supported;
    private Nullable`1<bool> _contentIDSupported;
    public string TermName { get; }
    public virtual string get_TermName();
    public DeepUpdateSupportConfiguration HasDynamicProperty(string name, object value);
    public DeepUpdateSupportConfiguration IsSupported(bool supported);
    public DeepUpdateSupportConfiguration IsContentIDSupported(bool contentIDSupported);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.DeleteRestrictionsConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<bool> _deletable;
    private HashSet`1<EdmNavigationPropertyPathExpression> _nonDeletableNavigationProperties;
    private Nullable`1<int> _maxLevels;
    private Nullable`1<bool> _filterSegmentSupported;
    private Nullable`1<bool> _typecastSegmentSupported;
    private HashSet`1<PermissionTypeConfiguration> _permissions;
    private HashSet`1<CustomParameterConfiguration> _customHeaders;
    private HashSet`1<CustomParameterConfiguration> _customQueryOptions;
    private string _description;
    private string _longDescription;
    public string TermName { get; }
    public virtual string get_TermName();
    public DeleteRestrictionsConfiguration HasDynamicProperty(string name, object value);
    public DeleteRestrictionsConfiguration IsDeletable(bool deletable);
    public DeleteRestrictionsConfiguration HasNonDeletableNavigationProperties(EdmNavigationPropertyPathExpression[] nonDeletableNavigationProperties);
    public DeleteRestrictionsConfiguration HasMaxLevels(int maxLevels);
    public DeleteRestrictionsConfiguration IsFilterSegmentSupported(bool filterSegmentSupported);
    public DeleteRestrictionsConfiguration IsTypecastSegmentSupported(bool typecastSegmentSupported);
    public DeleteRestrictionsConfiguration HasPermissions(Func`2<PermissionTypeConfiguration, PermissionTypeConfiguration> permissionsConfiguration);
    public DeleteRestrictionsConfiguration HasPermissions(PermissionTypeConfiguration[] permissions);
    public DeleteRestrictionsConfiguration HasCustomHeaders(Func`2<CustomParameterConfiguration, CustomParameterConfiguration> customHeadersConfiguration);
    public DeleteRestrictionsConfiguration HasCustomHeaders(CustomParameterConfiguration[] customHeaders);
    public DeleteRestrictionsConfiguration HasCustomQueryOptions(Func`2<CustomParameterConfiguration, CustomParameterConfiguration> customQueryOptionsConfiguration);
    public DeleteRestrictionsConfiguration HasCustomQueryOptions(CustomParameterConfiguration[] customQueryOptions);
    public DeleteRestrictionsConfiguration HasDescription(string description);
    public DeleteRestrictionsConfiguration HasLongDescription(string longDescription);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.ExpandRestrictionsConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<bool> _expandable;
    private Nullable`1<bool> _streamsExpandable;
    private HashSet`1<EdmNavigationPropertyPathExpression> _nonExpandableProperties;
    private HashSet`1<EdmPropertyPathExpression> _nonExpandableStreamProperties;
    private Nullable`1<int> _maxLevels;
    public string TermName { get; }
    public virtual string get_TermName();
    public ExpandRestrictionsConfiguration HasDynamicProperty(string name, object value);
    public ExpandRestrictionsConfiguration IsExpandable(bool expandable);
    public ExpandRestrictionsConfiguration IsStreamsExpandable(bool streamsExpandable);
    public ExpandRestrictionsConfiguration HasNonExpandableProperties(EdmNavigationPropertyPathExpression[] nonExpandableProperties);
    public ExpandRestrictionsConfiguration HasNonExpandableStreamProperties(EdmPropertyPathExpression[] nonExpandableStreamProperties);
    public ExpandRestrictionsConfiguration HasMaxLevels(int maxLevels);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.FilterExpressionRestrictionTypeConfiguration : object {
    private Dictionary`2<string, object> _dynamicProperties;
    private EdmPropertyPathExpression _property;
    private string _allowedExpressions;
    public FilterExpressionRestrictionTypeConfiguration HasDynamicProperty(string name, object value);
    public FilterExpressionRestrictionTypeConfiguration HasProperty(EdmPropertyPathExpression property);
    public FilterExpressionRestrictionTypeConfiguration HasAllowedExpressions(string allowedExpressions);
    public sealed virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.FilterFunctionsConfiguration : VocabularyTermConfiguration {
    private HashSet`1<string> _filterFunctions;
    public string TermName { get; }
    public virtual string get_TermName();
    public FilterFunctionsConfiguration HasFilterFunctions(String[] filterFunctions);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.FilterRestrictionsConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<bool> _filterable;
    private Nullable`1<bool> _requiresFilter;
    private HashSet`1<EdmPropertyPathExpression> _requiredProperties;
    private HashSet`1<EdmPropertyPathExpression> _nonFilterableProperties;
    private HashSet`1<FilterExpressionRestrictionTypeConfiguration> _filterExpressionRestrictions;
    private Nullable`1<int> _maxLevels;
    public string TermName { get; }
    public virtual string get_TermName();
    public FilterRestrictionsConfiguration HasDynamicProperty(string name, object value);
    public FilterRestrictionsConfiguration IsFilterable(bool filterable);
    public FilterRestrictionsConfiguration IsRequiresFilter(bool requiresFilter);
    public FilterRestrictionsConfiguration HasRequiredProperties(EdmPropertyPathExpression[] requiredProperties);
    public FilterRestrictionsConfiguration HasNonFilterableProperties(EdmPropertyPathExpression[] nonFilterableProperties);
    public FilterRestrictionsConfiguration HasFilterExpressionRestrictions(Func`2<FilterExpressionRestrictionTypeConfiguration, FilterExpressionRestrictionTypeConfiguration> filterExpressionRestrictionsConfiguration);
    public FilterRestrictionsConfiguration HasFilterExpressionRestrictions(FilterExpressionRestrictionTypeConfiguration[] filterExpressionRestrictions);
    public FilterRestrictionsConfiguration HasMaxLevels(int maxLevels);
    public virtual IEdmExpression ToEdmExpression();
}
[FlagsAttribute]
public enum Microsoft.OData.ModelBuilder.Capabilities.V1.HttpMethod : Enum {
    public int value__;
    public static HttpMethod GET;
    public static HttpMethod PATCH;
    public static HttpMethod PUT;
    public static HttpMethod POST;
    public static HttpMethod DELETE;
    public static HttpMethod OPTIONS;
    public static HttpMethod HEAD;
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.IndexableByKeyConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _indexableByKey;
    public string TermName { get; }
    public virtual string get_TermName();
    public IndexableByKeyConfiguration IsIndexableByKey(bool indexableByKey);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.InsertRestrictionsConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<bool> _insertable;
    private HashSet`1<EdmPropertyPathExpression> _nonInsertableProperties;
    private HashSet`1<EdmNavigationPropertyPathExpression> _nonInsertableNavigationProperties;
    private HashSet`1<EdmPropertyPathExpression> _requiredProperties;
    private Nullable`1<int> _maxLevels;
    private Nullable`1<bool> _typecastSegmentSupported;
    private HashSet`1<PermissionTypeConfiguration> _permissions;
    private ModificationQueryOptionsConfiguration _queryOptions;
    private HashSet`1<CustomParameterConfiguration> _customHeaders;
    private HashSet`1<CustomParameterConfiguration> _customQueryOptions;
    private string _description;
    private string _longDescription;
    public string TermName { get; }
    public virtual string get_TermName();
    public InsertRestrictionsConfiguration HasDynamicProperty(string name, object value);
    public InsertRestrictionsConfiguration IsInsertable(bool insertable);
    public InsertRestrictionsConfiguration HasNonInsertableProperties(EdmPropertyPathExpression[] nonInsertableProperties);
    public InsertRestrictionsConfiguration HasNonInsertableNavigationProperties(EdmNavigationPropertyPathExpression[] nonInsertableNavigationProperties);
    public InsertRestrictionsConfiguration HasRequiredProperties(EdmPropertyPathExpression[] requiredProperties);
    public InsertRestrictionsConfiguration HasMaxLevels(int maxLevels);
    public InsertRestrictionsConfiguration IsTypecastSegmentSupported(bool typecastSegmentSupported);
    public InsertRestrictionsConfiguration HasPermissions(Func`2<PermissionTypeConfiguration, PermissionTypeConfiguration> permissionsConfiguration);
    public InsertRestrictionsConfiguration HasPermissions(PermissionTypeConfiguration[] permissions);
    public InsertRestrictionsConfiguration HasQueryOptions(Func`2<ModificationQueryOptionsConfiguration, ModificationQueryOptionsConfiguration> queryOptionsConfiguration);
    public InsertRestrictionsConfiguration HasQueryOptions(ModificationQueryOptionsConfiguration queryOptions);
    public InsertRestrictionsConfiguration HasCustomHeaders(Func`2<CustomParameterConfiguration, CustomParameterConfiguration> customHeadersConfiguration);
    public InsertRestrictionsConfiguration HasCustomHeaders(CustomParameterConfiguration[] customHeaders);
    public InsertRestrictionsConfiguration HasCustomQueryOptions(Func`2<CustomParameterConfiguration, CustomParameterConfiguration> customQueryOptionsConfiguration);
    public InsertRestrictionsConfiguration HasCustomQueryOptions(CustomParameterConfiguration[] customQueryOptions);
    public InsertRestrictionsConfiguration HasDescription(string description);
    public InsertRestrictionsConfiguration HasLongDescription(string longDescription);
    public virtual IEdmExpression ToEdmExpression();
}
[FlagsAttribute]
public enum Microsoft.OData.ModelBuilder.Capabilities.V1.IsolationLevel : Enum {
    public int value__;
    public static IsolationLevel Snapshot;
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.IsolationSupportedConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<IsolationLevel> _isolationSupported;
    public string TermName { get; }
    public virtual string get_TermName();
    public IsolationSupportedConfiguration HasIsolationSupported(IsolationLevel isolationSupported);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.KeyAsSegmentSupportedConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _keyAsSegmentSupported;
    public string TermName { get; }
    public virtual string get_TermName();
    public KeyAsSegmentSupportedConfiguration IsKeyAsSegmentSupported(bool keyAsSegmentSupported);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.MediaLocationUpdateSupportedConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _mediaLocationUpdateSupported;
    public string TermName { get; }
    public virtual string get_TermName();
    public MediaLocationUpdateSupportedConfiguration IsMediaLocationUpdateSupported(bool mediaLocationUpdateSupported);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.ModificationQueryOptionsConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<bool> _expandSupported;
    private Nullable`1<bool> _selectSupported;
    private Nullable`1<bool> _computeSupported;
    private Nullable`1<bool> _filterSupported;
    private Nullable`1<bool> _searchSupported;
    private Nullable`1<bool> _sortSupported;
    public string TermName { get; }
    public virtual string get_TermName();
    public ModificationQueryOptionsConfiguration HasDynamicProperty(string name, object value);
    public ModificationQueryOptionsConfiguration IsExpandSupported(bool expandSupported);
    public ModificationQueryOptionsConfiguration IsSelectSupported(bool selectSupported);
    public ModificationQueryOptionsConfiguration IsComputeSupported(bool computeSupported);
    public ModificationQueryOptionsConfiguration IsFilterSupported(bool filterSupported);
    public ModificationQueryOptionsConfiguration IsSearchSupported(bool searchSupported);
    public ModificationQueryOptionsConfiguration IsSortSupported(bool sortSupported);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.NavigationPropertyRestrictionConfiguration : object {
    private Dictionary`2<string, object> _dynamicProperties;
    private EdmNavigationPropertyPathExpression _navigationProperty;
    private Nullable`1<NavigationType> _navigability;
    private HashSet`1<string> _filterFunctions;
    private FilterRestrictionsConfiguration _filterRestrictions;
    private SearchRestrictionsConfiguration _searchRestrictions;
    private SortRestrictionsConfiguration _sortRestrictions;
    private Nullable`1<bool> _topSupported;
    private Nullable`1<bool> _skipSupported;
    private SelectSupportConfiguration _selectSupport;
    private Nullable`1<bool> _indexableByKey;
    private InsertRestrictionsConfiguration _insertRestrictions;
    private DeepInsertSupportConfiguration _deepInsertSupport;
    private UpdateRestrictionsConfiguration _updateRestrictions;
    private DeepUpdateSupportConfiguration _deepUpdateSupport;
    private DeleteRestrictionsConfiguration _deleteRestrictions;
    private Nullable`1<bool> _optimisticConcurrencyControl;
    private ReadRestrictionsConfiguration _readRestrictions;
    public NavigationPropertyRestrictionConfiguration HasDynamicProperty(string name, object value);
    public NavigationPropertyRestrictionConfiguration HasNavigationProperty(EdmNavigationPropertyPathExpression navigationProperty);
    public NavigationPropertyRestrictionConfiguration HasNavigability(NavigationType navigability);
    public NavigationPropertyRestrictionConfiguration HasFilterFunctions(String[] filterFunctions);
    public NavigationPropertyRestrictionConfiguration HasFilterRestrictions(Func`2<FilterRestrictionsConfiguration, FilterRestrictionsConfiguration> filterRestrictionsConfiguration);
    public NavigationPropertyRestrictionConfiguration HasFilterRestrictions(FilterRestrictionsConfiguration filterRestrictions);
    public NavigationPropertyRestrictionConfiguration HasSearchRestrictions(Func`2<SearchRestrictionsConfiguration, SearchRestrictionsConfiguration> searchRestrictionsConfiguration);
    public NavigationPropertyRestrictionConfiguration HasSearchRestrictions(SearchRestrictionsConfiguration searchRestrictions);
    public NavigationPropertyRestrictionConfiguration HasSortRestrictions(Func`2<SortRestrictionsConfiguration, SortRestrictionsConfiguration> sortRestrictionsConfiguration);
    public NavigationPropertyRestrictionConfiguration HasSortRestrictions(SortRestrictionsConfiguration sortRestrictions);
    public NavigationPropertyRestrictionConfiguration IsTopSupported(bool topSupported);
    public NavigationPropertyRestrictionConfiguration IsSkipSupported(bool skipSupported);
    public NavigationPropertyRestrictionConfiguration HasSelectSupport(Func`2<SelectSupportConfiguration, SelectSupportConfiguration> selectSupportConfiguration);
    public NavigationPropertyRestrictionConfiguration HasSelectSupport(SelectSupportConfiguration selectSupport);
    public NavigationPropertyRestrictionConfiguration IsIndexableByKey(bool indexableByKey);
    public NavigationPropertyRestrictionConfiguration HasInsertRestrictions(Func`2<InsertRestrictionsConfiguration, InsertRestrictionsConfiguration> insertRestrictionsConfiguration);
    public NavigationPropertyRestrictionConfiguration HasInsertRestrictions(InsertRestrictionsConfiguration insertRestrictions);
    public NavigationPropertyRestrictionConfiguration HasDeepInsertSupport(Func`2<DeepInsertSupportConfiguration, DeepInsertSupportConfiguration> deepInsertSupportConfiguration);
    public NavigationPropertyRestrictionConfiguration HasDeepInsertSupport(DeepInsertSupportConfiguration deepInsertSupport);
    public NavigationPropertyRestrictionConfiguration HasUpdateRestrictions(Func`2<UpdateRestrictionsConfiguration, UpdateRestrictionsConfiguration> updateRestrictionsConfiguration);
    public NavigationPropertyRestrictionConfiguration HasUpdateRestrictions(UpdateRestrictionsConfiguration updateRestrictions);
    public NavigationPropertyRestrictionConfiguration HasDeepUpdateSupport(Func`2<DeepUpdateSupportConfiguration, DeepUpdateSupportConfiguration> deepUpdateSupportConfiguration);
    public NavigationPropertyRestrictionConfiguration HasDeepUpdateSupport(DeepUpdateSupportConfiguration deepUpdateSupport);
    public NavigationPropertyRestrictionConfiguration HasDeleteRestrictions(Func`2<DeleteRestrictionsConfiguration, DeleteRestrictionsConfiguration> deleteRestrictionsConfiguration);
    public NavigationPropertyRestrictionConfiguration HasDeleteRestrictions(DeleteRestrictionsConfiguration deleteRestrictions);
    public NavigationPropertyRestrictionConfiguration IsOptimisticConcurrencyControl(bool optimisticConcurrencyControl);
    public NavigationPropertyRestrictionConfiguration HasReadRestrictions(Func`2<ReadRestrictionsConfiguration, ReadRestrictionsConfiguration> readRestrictionsConfiguration);
    public NavigationPropertyRestrictionConfiguration HasReadRestrictions(ReadRestrictionsConfiguration readRestrictions);
    public sealed virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.NavigationRestrictionsConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<NavigationType> _navigability;
    private HashSet`1<NavigationPropertyRestrictionConfiguration> _restrictedProperties;
    public string TermName { get; }
    public virtual string get_TermName();
    public NavigationRestrictionsConfiguration HasDynamicProperty(string name, object value);
    public NavigationRestrictionsConfiguration HasNavigability(NavigationType navigability);
    public NavigationRestrictionsConfiguration HasRestrictedProperties(Func`2<NavigationPropertyRestrictionConfiguration, NavigationPropertyRestrictionConfiguration> restrictedPropertiesConfiguration);
    public NavigationRestrictionsConfiguration HasRestrictedProperties(NavigationPropertyRestrictionConfiguration[] restrictedProperties);
    public virtual IEdmExpression ToEdmExpression();
}
public enum Microsoft.OData.ModelBuilder.Capabilities.V1.NavigationType : Enum {
    public int value__;
    public static NavigationType Recursive;
    public static NavigationType Single;
    public static NavigationType None;
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.OperationRestrictionsConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<bool> _filterSegmentSupported;
    private HashSet`1<PermissionTypeConfiguration> _permissions;
    private HashSet`1<CustomParameterConfiguration> _customHeaders;
    private HashSet`1<CustomParameterConfiguration> _customQueryOptions;
    public string TermName { get; }
    public virtual string get_TermName();
    public OperationRestrictionsConfiguration HasDynamicProperty(string name, object value);
    public OperationRestrictionsConfiguration IsFilterSegmentSupported(bool filterSegmentSupported);
    public OperationRestrictionsConfiguration HasPermissions(Func`2<PermissionTypeConfiguration, PermissionTypeConfiguration> permissionsConfiguration);
    public OperationRestrictionsConfiguration HasPermissions(PermissionTypeConfiguration[] permissions);
    public OperationRestrictionsConfiguration HasCustomHeaders(Func`2<CustomParameterConfiguration, CustomParameterConfiguration> customHeadersConfiguration);
    public OperationRestrictionsConfiguration HasCustomHeaders(CustomParameterConfiguration[] customHeaders);
    public OperationRestrictionsConfiguration HasCustomQueryOptions(Func`2<CustomParameterConfiguration, CustomParameterConfiguration> customQueryOptionsConfiguration);
    public OperationRestrictionsConfiguration HasCustomQueryOptions(CustomParameterConfiguration[] customQueryOptions);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.PermissionTypeConfiguration : object {
    private Dictionary`2<string, object> _dynamicProperties;
    private string _schemeName;
    private HashSet`1<ScopeTypeConfiguration> _scopes;
    public PermissionTypeConfiguration HasDynamicProperty(string name, object value);
    public PermissionTypeConfiguration HasSchemeName(string schemeName);
    public PermissionTypeConfiguration HasScopes(Func`2<ScopeTypeConfiguration, ScopeTypeConfiguration> scopesConfiguration);
    public PermissionTypeConfiguration HasScopes(ScopeTypeConfiguration[] scopes);
    public sealed virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.QuerySegmentSupportedConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _querySegmentSupported;
    public string TermName { get; }
    public virtual string get_TermName();
    public QuerySegmentSupportedConfiguration IsQuerySegmentSupported(bool querySegmentSupported);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.ReadByKeyRestrictionsTypeConfiguration : object {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<bool> _readable;
    private HashSet`1<PermissionTypeConfiguration> _permissions;
    private HashSet`1<CustomParameterConfiguration> _customHeaders;
    private HashSet`1<CustomParameterConfiguration> _customQueryOptions;
    private string _description;
    private string _longDescription;
    public ReadByKeyRestrictionsTypeConfiguration HasDynamicProperty(string name, object value);
    public ReadByKeyRestrictionsTypeConfiguration IsReadable(bool readable);
    public ReadByKeyRestrictionsTypeConfiguration HasPermissions(Func`2<PermissionTypeConfiguration, PermissionTypeConfiguration> permissionsConfiguration);
    public ReadByKeyRestrictionsTypeConfiguration HasPermissions(PermissionTypeConfiguration[] permissions);
    public ReadByKeyRestrictionsTypeConfiguration HasCustomHeaders(Func`2<CustomParameterConfiguration, CustomParameterConfiguration> customHeadersConfiguration);
    public ReadByKeyRestrictionsTypeConfiguration HasCustomHeaders(CustomParameterConfiguration[] customHeaders);
    public ReadByKeyRestrictionsTypeConfiguration HasCustomQueryOptions(Func`2<CustomParameterConfiguration, CustomParameterConfiguration> customQueryOptionsConfiguration);
    public ReadByKeyRestrictionsTypeConfiguration HasCustomQueryOptions(CustomParameterConfiguration[] customQueryOptions);
    public ReadByKeyRestrictionsTypeConfiguration HasDescription(string description);
    public ReadByKeyRestrictionsTypeConfiguration HasLongDescription(string longDescription);
    public sealed virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.ReadRestrictionsConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<bool> _readable;
    private HashSet`1<PermissionTypeConfiguration> _permissions;
    private HashSet`1<CustomParameterConfiguration> _customHeaders;
    private HashSet`1<CustomParameterConfiguration> _customQueryOptions;
    private string _description;
    private string _longDescription;
    private ReadByKeyRestrictionsTypeConfiguration _readByKeyRestrictions;
    public string TermName { get; }
    public virtual string get_TermName();
    public ReadRestrictionsConfiguration HasDynamicProperty(string name, object value);
    public ReadRestrictionsConfiguration IsReadable(bool readable);
    public ReadRestrictionsConfiguration HasPermissions(Func`2<PermissionTypeConfiguration, PermissionTypeConfiguration> permissionsConfiguration);
    public ReadRestrictionsConfiguration HasPermissions(PermissionTypeConfiguration[] permissions);
    public ReadRestrictionsConfiguration HasCustomHeaders(Func`2<CustomParameterConfiguration, CustomParameterConfiguration> customHeadersConfiguration);
    public ReadRestrictionsConfiguration HasCustomHeaders(CustomParameterConfiguration[] customHeaders);
    public ReadRestrictionsConfiguration HasCustomQueryOptions(Func`2<CustomParameterConfiguration, CustomParameterConfiguration> customQueryOptionsConfiguration);
    public ReadRestrictionsConfiguration HasCustomQueryOptions(CustomParameterConfiguration[] customQueryOptions);
    public ReadRestrictionsConfiguration HasDescription(string description);
    public ReadRestrictionsConfiguration HasLongDescription(string longDescription);
    public ReadRestrictionsConfiguration HasReadByKeyRestrictions(Func`2<ReadByKeyRestrictionsTypeConfiguration, ReadByKeyRestrictionsTypeConfiguration> readByKeyRestrictionsConfiguration);
    public ReadRestrictionsConfiguration HasReadByKeyRestrictions(ReadByKeyRestrictionsTypeConfiguration readByKeyRestrictions);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.ScopeTypeConfiguration : object {
    private Dictionary`2<string, object> _dynamicProperties;
    private string _scope;
    private string _restrictedProperties;
    public ScopeTypeConfiguration HasDynamicProperty(string name, object value);
    public ScopeTypeConfiguration HasScope(string scope);
    public ScopeTypeConfiguration HasRestrictedProperties(string restrictedProperties);
    public sealed virtual IEdmExpression ToEdmExpression();
}
[FlagsAttribute]
public enum Microsoft.OData.ModelBuilder.Capabilities.V1.SearchExpressions : Enum {
    public int value__;
    public static SearchExpressions none;
    public static SearchExpressions AND;
    public static SearchExpressions OR;
    public static SearchExpressions NOT;
    public static SearchExpressions phrase;
    public static SearchExpressions group;
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.SearchRestrictionsConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<bool> _searchable;
    private Nullable`1<SearchExpressions> _unsupportedExpressions;
    public string TermName { get; }
    public virtual string get_TermName();
    public SearchRestrictionsConfiguration HasDynamicProperty(string name, object value);
    public SearchRestrictionsConfiguration IsSearchable(bool searchable);
    public SearchRestrictionsConfiguration HasUnsupportedExpressions(SearchExpressions unsupportedExpressions);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.SelectSupportConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<bool> _supported;
    private Nullable`1<bool> _instanceAnnotationsSupported;
    private Nullable`1<bool> _expandable;
    private Nullable`1<bool> _filterable;
    private Nullable`1<bool> _searchable;
    private Nullable`1<bool> _topSupported;
    private Nullable`1<bool> _skipSupported;
    private Nullable`1<bool> _computeSupported;
    private Nullable`1<bool> _countable;
    private Nullable`1<bool> _sortable;
    public string TermName { get; }
    public virtual string get_TermName();
    public SelectSupportConfiguration HasDynamicProperty(string name, object value);
    public SelectSupportConfiguration IsSupported(bool supported);
    public SelectSupportConfiguration IsInstanceAnnotationsSupported(bool instanceAnnotationsSupported);
    public SelectSupportConfiguration IsExpandable(bool expandable);
    public SelectSupportConfiguration IsFilterable(bool filterable);
    public SelectSupportConfiguration IsSearchable(bool searchable);
    public SelectSupportConfiguration IsTopSupported(bool topSupported);
    public SelectSupportConfiguration IsSkipSupported(bool skipSupported);
    public SelectSupportConfiguration IsComputeSupported(bool computeSupported);
    public SelectSupportConfiguration IsCountable(bool countable);
    public SelectSupportConfiguration IsSortable(bool sortable);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.SkipSupportedConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _skipSupported;
    public string TermName { get; }
    public virtual string get_TermName();
    public SkipSupportedConfiguration IsSkipSupported(bool skipSupported);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.SortRestrictionsConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<bool> _sortable;
    private HashSet`1<EdmPropertyPathExpression> _ascendingOnlyProperties;
    private HashSet`1<EdmPropertyPathExpression> _descendingOnlyProperties;
    private HashSet`1<EdmPropertyPathExpression> _nonSortableProperties;
    public string TermName { get; }
    public virtual string get_TermName();
    public SortRestrictionsConfiguration HasDynamicProperty(string name, object value);
    public SortRestrictionsConfiguration IsSortable(bool sortable);
    public SortRestrictionsConfiguration HasAscendingOnlyProperties(EdmPropertyPathExpression[] ascendingOnlyProperties);
    public SortRestrictionsConfiguration HasDescendingOnlyProperties(EdmPropertyPathExpression[] descendingOnlyProperties);
    public SortRestrictionsConfiguration HasNonSortableProperties(EdmPropertyPathExpression[] nonSortableProperties);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.SupportedFormatsConfiguration : VocabularyTermConfiguration {
    private HashSet`1<string> _supportedFormats;
    public string TermName { get; }
    public virtual string get_TermName();
    public SupportedFormatsConfiguration HasSupportedFormats(String[] supportedFormats);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.SupportedMetadataFormatsConfiguration : VocabularyTermConfiguration {
    private HashSet`1<string> _supportedMetadataFormats;
    public string TermName { get; }
    public virtual string get_TermName();
    public SupportedMetadataFormatsConfiguration HasSupportedMetadataFormats(String[] supportedMetadataFormats);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.TopSupportedConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _topSupported;
    public string TermName { get; }
    public virtual string get_TermName();
    public TopSupportedConfiguration IsTopSupported(bool topSupported);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Capabilities.V1.UpdateRestrictionsConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<bool> _updatable;
    private Nullable`1<bool> _upsertable;
    private Nullable`1<bool> _deltaUpdateSupported;
    private Nullable`1<HttpMethod> _updateMethod;
    private Nullable`1<bool> _filterSegmentSupported;
    private Nullable`1<bool> _typecastSegmentSupported;
    private HashSet`1<EdmPropertyPathExpression> _nonUpdatableProperties;
    private HashSet`1<EdmNavigationPropertyPathExpression> _nonUpdatableNavigationProperties;
    private HashSet`1<EdmPropertyPathExpression> _requiredProperties;
    private Nullable`1<int> _maxLevels;
    private HashSet`1<PermissionTypeConfiguration> _permissions;
    private ModificationQueryOptionsConfiguration _queryOptions;
    private HashSet`1<CustomParameterConfiguration> _customHeaders;
    private HashSet`1<CustomParameterConfiguration> _customQueryOptions;
    private string _description;
    private string _longDescription;
    public string TermName { get; }
    public virtual string get_TermName();
    public UpdateRestrictionsConfiguration HasDynamicProperty(string name, object value);
    public UpdateRestrictionsConfiguration IsUpdatable(bool updatable);
    public UpdateRestrictionsConfiguration IsUpsertable(bool upsertable);
    public UpdateRestrictionsConfiguration IsDeltaUpdateSupported(bool deltaUpdateSupported);
    public UpdateRestrictionsConfiguration HasUpdateMethod(HttpMethod updateMethod);
    public UpdateRestrictionsConfiguration IsFilterSegmentSupported(bool filterSegmentSupported);
    public UpdateRestrictionsConfiguration IsTypecastSegmentSupported(bool typecastSegmentSupported);
    public UpdateRestrictionsConfiguration HasNonUpdatableProperties(EdmPropertyPathExpression[] nonUpdatableProperties);
    public UpdateRestrictionsConfiguration HasNonUpdatableNavigationProperties(EdmNavigationPropertyPathExpression[] nonUpdatableNavigationProperties);
    public UpdateRestrictionsConfiguration HasRequiredProperties(EdmPropertyPathExpression[] requiredProperties);
    public UpdateRestrictionsConfiguration HasMaxLevels(int maxLevels);
    public UpdateRestrictionsConfiguration HasPermissions(Func`2<PermissionTypeConfiguration, PermissionTypeConfiguration> permissionsConfiguration);
    public UpdateRestrictionsConfiguration HasPermissions(PermissionTypeConfiguration[] permissions);
    public UpdateRestrictionsConfiguration HasQueryOptions(Func`2<ModificationQueryOptionsConfiguration, ModificationQueryOptionsConfiguration> queryOptionsConfiguration);
    public UpdateRestrictionsConfiguration HasQueryOptions(ModificationQueryOptionsConfiguration queryOptions);
    public UpdateRestrictionsConfiguration HasCustomHeaders(Func`2<CustomParameterConfiguration, CustomParameterConfiguration> customHeadersConfiguration);
    public UpdateRestrictionsConfiguration HasCustomHeaders(CustomParameterConfiguration[] customHeaders);
    public UpdateRestrictionsConfiguration HasCustomQueryOptions(Func`2<CustomParameterConfiguration, CustomParameterConfiguration> customQueryOptionsConfiguration);
    public UpdateRestrictionsConfiguration HasCustomQueryOptions(CustomParameterConfiguration[] customQueryOptions);
    public UpdateRestrictionsConfiguration HasDescription(string description);
    public UpdateRestrictionsConfiguration HasLongDescription(string longDescription);
    public virtual IEdmExpression ToEdmExpression();
}
internal enum Microsoft.OData.ModelBuilder.CapabilitiesNavigationType : Enum {
    public int value__;
    public static CapabilitiesNavigationType Recursive;
    public static CapabilitiesNavigationType Single;
    public static CapabilitiesNavigationType None;
}
internal static class Microsoft.OData.ModelBuilder.CapabilitiesVocabularyConstants : object {
    public static string CountRestrictions;
    public static string CountRestrictionsCountable;
    public static string CountRestrictionsNonCountableProperties;
    public static string CountRestrictionsNonCountableNavigationProperties;
    public static string NavigationRestrictions;
    public static string NavigationRestrictionsNavigability;
    public static string NavigationRestrictionsRestrictedProperties;
    public static string NavigationPropertyRestrictionNavigationProperty;
    public static string NavigationType;
    public static string FilterRestrictions;
    public static string FilterRestrictionsFilterable;
    public static string FilterRestrictionsRequiresFilter;
    public static string FilterRestrictionsRequiredProperties;
    public static string FilterRestrictionsNonFilterableProperties;
    public static string SortRestrictions;
    public static string SortRestrictionsSortable;
    public static string SortRestrictionsAscendingOnlyProperties;
    public static string SortRestrictionsDescendingOnlyProperties;
    public static string SortRestrictionsNonSortableProperties;
    public static string ExpandRestrictions;
    public static string ExpandRestrictionsExpandable;
    public static string ExpandRestrictionsNonExpandableProperties;
}
[ExtensionAttribute]
internal static class Microsoft.OData.ModelBuilder.CapabilitiesVocabularyExtensionMethods : object {
    private static IEnumerable`1<IEdmStructuralProperty> EmptyStructuralProperties;
    private static IEnumerable`1<IEdmNavigationProperty> EmptyNavigationProperties;
    private static IEdmEnumType _navigationType;
    private static CapabilitiesVocabularyExtensionMethods();
    [ExtensionAttribute]
public static void SetCountRestrictionsAnnotation(EdmModel model, IEdmEntitySet target, bool isCountable, IEnumerable`1<IEdmProperty> nonCountableProperties, IEnumerable`1<IEdmNavigationProperty> nonCountableNavigationProperties);
    [ExtensionAttribute]
public static void SetNavigationRestrictionsAnnotation(EdmModel model, IEdmEntitySet target, CapabilitiesNavigationType navigability, IEnumerable`1<Tuple`2<IEdmNavigationProperty, CapabilitiesNavigationType>> restrictedProperties);
    [ExtensionAttribute]
public static void SetFilterRestrictionsAnnotation(EdmModel model, IEdmEntitySet target, bool isFilterable, bool isRequiresFilter, IEnumerable`1<IEdmProperty> requiredProperties, IEnumerable`1<IEdmProperty> nonFilterableProperties);
    [ExtensionAttribute]
public static void SetSortRestrictionsAnnotation(EdmModel model, IEdmEntitySet target, bool isSortable, IEnumerable`1<IEdmProperty> ascendingOnlyProperties, IEnumerable`1<IEdmProperty> descendingOnlyProperties, IEnumerable`1<IEdmProperty> nonSortableProperties);
    [ExtensionAttribute]
public static void SetExpandRestrictionsAnnotation(EdmModel model, IEdmEntitySet target, bool isExpandable, IEnumerable`1<IEdmNavigationProperty> nonExpandableProperties);
    [ExtensionAttribute]
public static List`1<IEdmPropertyConstructor> ToEdmProperties(Dictionary`2<string, object> dynamicProperties);
    [ExtensionAttribute]
private static void Deconstruct(KeyValuePair`2<T1, T2> tuple, T1& key, T2& value);
    [ExtensionAttribute]
private static void SetVocabularyAnnotation(EdmModel model, IEdmVocabularyAnnotatable target, IList`1<IEdmPropertyConstructor> properties, string qualifiedName);
    [ExtensionAttribute]
private static IEdmEnumType GetCapabilitiesNavigationType(EdmModel model);
}
public class Microsoft.OData.ModelBuilder.ClrEnumMemberAnnotation : object {
    private IDictionary`2<Enum, IEdmEnumMember> _map;
    private IDictionary`2<IEdmEnumMember, Enum> _reverseMap;
    public ClrEnumMemberAnnotation(IDictionary`2<Enum, IEdmEnumMember> map);
    public IEdmEnumMember GetEdmEnumMember(Enum clrEnumMemberInfo);
    public Enum GetClrEnumMember(IEdmEnumMember edmEnumMember);
}
public class Microsoft.OData.ModelBuilder.ClrPropertyInfoAnnotation : object {
    [CompilerGeneratedAttribute]
private PropertyInfo <ClrPropertyInfo>k__BackingField;
    public PropertyInfo ClrPropertyInfo { get; }
    public ClrPropertyInfoAnnotation(PropertyInfo clrPropertyInfo);
    [CompilerGeneratedAttribute]
public PropertyInfo get_ClrPropertyInfo();
}
public class Microsoft.OData.ModelBuilder.ClrTypeAnnotation : object {
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    public Type ClrType { get; }
    public ClrTypeAnnotation(Type clrType);
    [CompilerGeneratedAttribute]
public Type get_ClrType();
}
public class Microsoft.OData.ModelBuilder.CollectionPropertyConfiguration : StructuralPropertyConfiguration {
    private Type _elementType;
    public PropertyKind Kind { get; }
    public Type RelatedClrType { get; }
    public Type ElementType { get; }
    public CollectionPropertyConfiguration(PropertyInfo property, StructuralTypeConfiguration declaringType);
    public virtual PropertyKind get_Kind();
    public virtual Type get_RelatedClrType();
    public Type get_ElementType();
    public CollectionPropertyConfiguration IsNullable();
    public CollectionPropertyConfiguration IsRequired();
}
public class Microsoft.OData.ModelBuilder.CollectionTypeConfiguration : object {
    [CompilerGeneratedAttribute]
private IEdmTypeConfiguration <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    public IEdmTypeConfiguration ElementType { get; }
    public Type ClrType { get; }
    public string FullName { get; }
    public string Namespace { get; }
    public string Name { get; }
    public EdmTypeKind Kind { get; }
    public ODataModelBuilder ModelBuilder { get; }
    public CollectionTypeConfiguration(IEdmTypeConfiguration elementType, Type clrType);
    [CompilerGeneratedAttribute]
public IEdmTypeConfiguration get_ElementType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ClrType();
    public sealed virtual string get_FullName();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_Name();
    public sealed virtual EdmTypeKind get_Kind();
    public sealed virtual ODataModelBuilder get_ModelBuilder();
}
public class Microsoft.OData.ModelBuilder.ComplexPropertyConfiguration : StructuralPropertyConfiguration {
    public PropertyKind Kind { get; }
    public Type RelatedClrType { get; }
    public ComplexPropertyConfiguration(PropertyInfo property, StructuralTypeConfiguration declaringType);
    public virtual PropertyKind get_Kind();
    public virtual Type get_RelatedClrType();
    public ComplexPropertyConfiguration IsNullable();
    public ComplexPropertyConfiguration IsRequired();
}
public class Microsoft.OData.ModelBuilder.ComplexTypeConfiguration : StructuralTypeConfiguration {
    public EdmTypeKind Kind { get; }
    public ComplexTypeConfiguration BaseType { get; public set; }
    public ComplexTypeConfiguration(ODataModelBuilder modelBuilder, Type clrType);
    public virtual EdmTypeKind get_Kind();
    public virtual ComplexTypeConfiguration get_BaseType();
    public virtual void set_BaseType(ComplexTypeConfiguration value);
    public virtual ComplexTypeConfiguration Abstract();
    public virtual ComplexTypeConfiguration DerivesFromNothing();
    public virtual ComplexTypeConfiguration DerivesFrom(ComplexTypeConfiguration baseType);
}
public class Microsoft.OData.ModelBuilder.ComplexTypeConfiguration`1 : StructuralTypeConfiguration`1<TComplexType> {
    private ComplexTypeConfiguration _configuration;
    private ODataModelBuilder _modelBuilder;
    public ComplexTypeConfiguration BaseType { get; }
    internal ComplexTypeConfiguration`1(ComplexTypeConfiguration configuration);
    internal ComplexTypeConfiguration`1(ODataModelBuilder modelBuilder);
    internal ComplexTypeConfiguration`1(ODataModelBuilder modelBuilder, ComplexTypeConfiguration configuration);
    public ComplexTypeConfiguration`1<TComplexType> Abstract();
    public ComplexTypeConfiguration get_BaseType();
    public ComplexTypeConfiguration`1<TComplexType> DerivesFromNothing();
    public ComplexTypeConfiguration`1<TComplexType> DerivesFrom();
}
public class Microsoft.OData.ModelBuilder.ConcurrencyPropertiesAnnotation : ConcurrentDictionary`2<IEdmNavigationSource, IEnumerable`1<IEdmStructuralProperty>> {
}
public class Microsoft.OData.ModelBuilder.Config.DefaultQuerySettings : object {
    private Nullable`1<int> _maxTop;
    [CompilerGeneratedAttribute]
private bool <EnableExpand>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSelect>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableOrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSkipToken>k__BackingField;
    public bool EnableExpand { get; public set; }
    public bool EnableSelect { get; public set; }
    public bool EnableCount { get; public set; }
    public bool EnableOrderBy { get; public set; }
    public bool EnableFilter { get; public set; }
    public Nullable`1<int> MaxTop { get; public set; }
    public bool EnableSkipToken { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableExpand();
    [CompilerGeneratedAttribute]
public void set_EnableExpand(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableSelect();
    [CompilerGeneratedAttribute]
public void set_EnableSelect(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableCount();
    [CompilerGeneratedAttribute]
public void set_EnableCount(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableOrderBy();
    [CompilerGeneratedAttribute]
public void set_EnableOrderBy(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableFilter();
    [CompilerGeneratedAttribute]
public void set_EnableFilter(bool value);
    public Nullable`1<int> get_MaxTop();
    public void set_MaxTop(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_EnableSkipToken();
    [CompilerGeneratedAttribute]
public void set_EnableSkipToken(bool value);
}
public class Microsoft.OData.ModelBuilder.Config.ExpandConfiguration : object {
    [CompilerGeneratedAttribute]
private SelectExpandType <ExpandType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxDepth>k__BackingField;
    public SelectExpandType ExpandType { get; public set; }
    public int MaxDepth { get; public set; }
    [CompilerGeneratedAttribute]
public SelectExpandType get_ExpandType();
    [CompilerGeneratedAttribute]
public void set_ExpandType(SelectExpandType value);
    [CompilerGeneratedAttribute]
public int get_MaxDepth();
    [CompilerGeneratedAttribute]
public void set_MaxDepth(int value);
}
public class Microsoft.OData.ModelBuilder.Config.ModelBoundQuerySettings : object {
    private Nullable`1<int> _pageSize;
    private Nullable`1<int> _maxTop;
    private Dictionary`2<string, ExpandConfiguration> _expandConfigurations;
    private Dictionary`2<string, SelectExpandType> _selectConfigurations;
    private Dictionary`2<string, bool> _orderByConfigurations;
    private Dictionary`2<string, bool> _filterConfigurations;
    internal static ModelBoundQuerySettings DefaultModelBoundQuerySettings;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Countable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SelectExpandType> <DefaultExpandType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefaultMaxDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DefaultEnableOrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DefaultEnableFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SelectExpandType> <DefaultSelectType>k__BackingField;
    public Nullable`1<int> MaxTop { get; public set; }
    public Nullable`1<int> PageSize { get; public set; }
    public Nullable`1<bool> Countable { get; public set; }
    public Dictionary`2<string, ExpandConfiguration> ExpandConfigurations { get; }
    public Nullable`1<SelectExpandType> DefaultExpandType { get; public set; }
    public int DefaultMaxDepth { get; public set; }
    public Nullable`1<bool> DefaultEnableOrderBy { get; public set; }
    public Nullable`1<bool> DefaultEnableFilter { get; public set; }
    public Nullable`1<SelectExpandType> DefaultSelectType { get; public set; }
    public Dictionary`2<string, bool> OrderByConfigurations { get; }
    public Dictionary`2<string, bool> FilterConfigurations { get; }
    public Dictionary`2<string, SelectExpandType> SelectConfigurations { get; }
    public ModelBoundQuerySettings(ModelBoundQuerySettings querySettings);
    private static ModelBoundQuerySettings();
    public Nullable`1<int> get_MaxTop();
    public void set_MaxTop(Nullable`1<int> value);
    public Nullable`1<int> get_PageSize();
    public void set_PageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Countable();
    [CompilerGeneratedAttribute]
public void set_Countable(Nullable`1<bool> value);
    public Dictionary`2<string, ExpandConfiguration> get_ExpandConfigurations();
    [CompilerGeneratedAttribute]
public Nullable`1<SelectExpandType> get_DefaultExpandType();
    [CompilerGeneratedAttribute]
public void set_DefaultExpandType(Nullable`1<SelectExpandType> value);
    [CompilerGeneratedAttribute]
public int get_DefaultMaxDepth();
    [CompilerGeneratedAttribute]
public void set_DefaultMaxDepth(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DefaultEnableOrderBy();
    [CompilerGeneratedAttribute]
public void set_DefaultEnableOrderBy(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DefaultEnableFilter();
    [CompilerGeneratedAttribute]
public void set_DefaultEnableFilter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<SelectExpandType> get_DefaultSelectType();
    [CompilerGeneratedAttribute]
public void set_DefaultSelectType(Nullable`1<SelectExpandType> value);
    public Dictionary`2<string, bool> get_OrderByConfigurations();
    public Dictionary`2<string, bool> get_FilterConfigurations();
    public Dictionary`2<string, SelectExpandType> get_SelectConfigurations();
    internal void CopyExpandConfigurations(Dictionary`2<string, ExpandConfiguration> expandConfigurations);
    internal void CopyOrderByConfigurations(Dictionary`2<string, bool> orderByConfigurations);
    internal void CopySelectConfigurations(Dictionary`2<string, SelectExpandType> selectConfigurations);
    internal void CopyFilterConfigurations(Dictionary`2<string, bool> filterConfigurations);
    internal bool Expandable(string propertyName);
    internal bool Selectable(string propertyName);
    internal bool Sortable(string propertyName);
    internal bool Filterable(string propertyName);
    internal bool IsAutomaticExpand(string propertyName);
    internal bool IsAutomaticSelect(string propertyName);
}
public class Microsoft.OData.ModelBuilder.Config.QueryableRestrictions : object {
    private bool _autoExpand;
    [CompilerGeneratedAttribute]
private bool <NotFilterable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotSortable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotNavigable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotExpandable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotCountable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableAutoExpandWhenSelectIsPresent>k__BackingField;
    public bool NotFilterable { get; public set; }
    public bool NonFilterable { get; public set; }
    public bool NotSortable { get; public set; }
    public bool Unsortable { get; public set; }
    public bool NotNavigable { get; public set; }
    public bool NotExpandable { get; public set; }
    public bool NotCountable { get; public set; }
    public bool AutoExpand { get; public set; }
    public bool DisableAutoExpandWhenSelectIsPresent { get; public set; }
    public QueryableRestrictions(PropertyConfiguration propertyConfiguration);
    [CompilerGeneratedAttribute]
public bool get_NotFilterable();
    [CompilerGeneratedAttribute]
public void set_NotFilterable(bool value);
    public bool get_NonFilterable();
    public void set_NonFilterable(bool value);
    [CompilerGeneratedAttribute]
public bool get_NotSortable();
    [CompilerGeneratedAttribute]
public void set_NotSortable(bool value);
    public bool get_Unsortable();
    public void set_Unsortable(bool value);
    [CompilerGeneratedAttribute]
public bool get_NotNavigable();
    [CompilerGeneratedAttribute]
public void set_NotNavigable(bool value);
    [CompilerGeneratedAttribute]
public bool get_NotExpandable();
    [CompilerGeneratedAttribute]
public void set_NotExpandable(bool value);
    [CompilerGeneratedAttribute]
public bool get_NotCountable();
    [CompilerGeneratedAttribute]
public void set_NotCountable(bool value);
    public bool get_AutoExpand();
    public void set_AutoExpand(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableAutoExpandWhenSelectIsPresent();
    [CompilerGeneratedAttribute]
public void set_DisableAutoExpandWhenSelectIsPresent(bool value);
}
public class Microsoft.OData.ModelBuilder.Config.QueryConfiguration : object {
    internal static int DefaultMaxExpansionDepth;
    private ModelBoundQuerySettings _querySettings;
    public ModelBoundQuerySettings ModelBoundQuerySettings { get; public set; }
    public ModelBoundQuerySettings get_ModelBoundQuerySettings();
    public void set_ModelBoundQuerySettings(ModelBoundQuerySettings value);
    public virtual void SetCount(bool enableCount);
    public virtual void SetMaxTop(Nullable`1<int> maxTop);
    public virtual void SetPageSize(Nullable`1<int> pageSize);
    public virtual void SetExpand(IEnumerable`1<string> properties, Nullable`1<int> maxDepth, SelectExpandType expandType);
    public virtual void SetSelect(IEnumerable`1<string> properties, SelectExpandType selectType);
    public virtual void SetOrderBy(IEnumerable`1<string> properties, bool enableOrderBy);
    public virtual void SetFilter(IEnumerable`1<string> properties, bool enableFilter);
    internal ModelBoundQuerySettings GetModelBoundQuerySettingsOrDefault();
}
[AttributeUsageAttribute("128")]
public class Microsoft.OData.ModelBuilder.ContainedAttribute : Attribute {
}
internal class Microsoft.OData.ModelBuilder.Conventions.AssociationSetDiscoveryConvention : object {
    public sealed virtual void Apply(NavigationSourceConfiguration configuration, ODataModelBuilder model);
    internal static NavigationSourceConfiguration GetTargetNavigationSource(NavigationPropertyConfiguration navigationProperty, ODataModelBuilder model);
    private static NavigationSourceConfiguration GetDefaultNavigationSource(EntityTypeConfiguration targetEntityType, ODataModelBuilder model, bool isSingleton);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.ActionOnDeleteAttributeConvention : AttributeEdmPropertyConvention`1<NavigationPropertyConfiguration> {
    public virtual void Apply(NavigationPropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
public abstract class Microsoft.OData.ModelBuilder.Conventions.Attributes.AttributeConvention : object {
    [CompilerGeneratedAttribute]
private Func`2<Attribute, bool> <AttributeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowMultiple>k__BackingField;
    public Func`2<Attribute, bool> AttributeFilter { get; private set; }
    public bool AllowMultiple { get; private set; }
    protected AttributeConvention(Func`2<Attribute, bool> attributeFilter, bool allowMultiple);
    [CompilerGeneratedAttribute]
public Func`2<Attribute, bool> get_AttributeFilter();
    [CompilerGeneratedAttribute]
private void set_AttributeFilter(Func`2<Attribute, bool> value);
    [CompilerGeneratedAttribute]
public bool get_AllowMultiple();
    [CompilerGeneratedAttribute]
private void set_AllowMultiple(bool value);
    public Attribute[] GetAttributes(MemberInfo member);
}
internal abstract class Microsoft.OData.ModelBuilder.Conventions.Attributes.AttributeEdmPropertyConvention`1 : AttributeConvention {
    protected AttributeEdmPropertyConvention`1(Func`2<Attribute, bool> attributeFilter, bool allowMultiple);
    public sealed virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, ODataConventionModelBuilder model);
    public sealed virtual void Apply(TPropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, ODataConventionModelBuilder model);
    public abstract virtual void Apply(TPropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal abstract class Microsoft.OData.ModelBuilder.Conventions.Attributes.AttributeEdmTypeConvention`1 : AttributeConvention {
    protected AttributeEdmTypeConvention`1(Func`2<Attribute, bool> attributeFilter, bool allowMultiple);
    public sealed virtual void Apply(IEdmTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model);
    public void Apply(TEdmTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model);
    public abstract virtual void Apply(TEdmTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.AutoExpandAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<NavigationPropertyConfiguration> {
    public virtual void Apply(NavigationPropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.AutoExpandAttributeEdmTypeConvention : AttributeEdmTypeConvention`1<StructuralTypeConfiguration> {
    public virtual void Apply(StructuralTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.ColumnAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.ComplexTypeAttributeConvention : AttributeEdmTypeConvention`1<EntityTypeConfiguration> {
    public virtual void Apply(EntityTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.ConcurrencyCheckAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.CountAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.CountAttributeEdmTypeConvention : AttributeEdmTypeConvention`1<StructuralTypeConfiguration> {
    public virtual void Apply(StructuralTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.DataContractAttributeEdmTypeConvention : AttributeEdmTypeConvention`1<StructuralTypeConfiguration> {
    public virtual void Apply(StructuralTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.DataContractAttributeEnumTypeConvention : AttributeEdmTypeConvention`1<EnumTypeConfiguration> {
    public virtual void Apply(EnumTypeConfiguration enumTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.DataMemberAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.DefaultValueAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.ExpandAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.ExpandAttributeEdmTypeConvention : AttributeEdmTypeConvention`1<StructuralTypeConfiguration> {
    public virtual void Apply(StructuralTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.FilterAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.FilterAttributeEdmTypeConvention : AttributeEdmTypeConvention`1<StructuralTypeConfiguration> {
    public virtual void Apply(StructuralTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.ForeignKeyAttributeConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
    private static void ApplyNavigation(NavigationPropertyConfiguration navProperty, EntityTypeConfiguration entityType, ForeignKeyAttribute foreignKeyAttribute);
    private static void ApplyPrimitive(PrimitivePropertyConfiguration dependent, EntityTypeConfiguration entityType, ForeignKeyAttribute foreignKeyAttribute);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.IgnoreDataMemberAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.KeyAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<StructuralPropertyConfiguration> {
    public virtual void Apply(StructuralPropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.MaxLengthAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<StructuralPropertyConfiguration> {
    public virtual void Apply(StructuralPropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.MediaTypeAttributeConvention : AttributeEdmTypeConvention`1<EntityTypeConfiguration> {
    public virtual void Apply(EntityTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.NonFilterableAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.NotCountableAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.NotExpandableAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<NavigationPropertyConfiguration> {
    public virtual void Apply(NavigationPropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.NotFilterableAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.NotMappedAttributeConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    private static string EntityFrameworkNotMappedAttributeTypeName;
    private static Func`2<Attribute, bool> _filter;
    private static NotMappedAttributeConvention();
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.NotNavigableAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<NavigationPropertyConfiguration> {
    public virtual void Apply(NavigationPropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.NotSortableAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.NullableAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    private static string NullableAttributeFullName;
    internal static Func`2<Attribute, bool> NullableAttributeFilter;
    private static NullableAttributeEdmPropertyConvention();
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.NullableContextAttributeEdmTypeConvention : AttributeEdmTypeConvention`1<StructuralTypeConfiguration> {
    private static string NullableContextAttributeFullName;
    public virtual void Apply(StructuralTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
    private Attribute GetNullableAttribute(MemberInfo member);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.OrderByAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.OrderByAttributeEdmTypeConvention : AttributeEdmTypeConvention`1<StructuralTypeConfiguration> {
    public virtual void Apply(StructuralTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.PageAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.PageAttributeEdmTypeConvention : AttributeEdmTypeConvention`1<StructuralTypeConfiguration> {
    public virtual void Apply(StructuralTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
public abstract class Microsoft.OData.ModelBuilder.Conventions.Attributes.PropertyAttributeConvention`1 : AttributeConvention {
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.RequiredAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.SelectAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.SelectAttributeEdmTypeConvention : AttributeEdmTypeConvention`1<StructuralTypeConfiguration> {
    public virtual void Apply(StructuralTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model, Attribute attribute);
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.TimestampAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
    private static PrimitivePropertyConfiguration[] GetPropertiesWithTimestamp(EntityTypeConfiguration config);
}
public abstract class Microsoft.OData.ModelBuilder.Conventions.Attributes.TypeAttributeConvention`1 : AttributeConvention {
}
internal class Microsoft.OData.ModelBuilder.Conventions.Attributes.UnsortableAttributeEdmPropertyConvention : AttributeEdmPropertyConvention`1<PropertyConfiguration> {
    public virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, Attribute attribute, ODataConventionModelBuilder model);
}
internal interface Microsoft.OData.ModelBuilder.Conventions.INavigationSourceConvention {
    public abstract virtual void Apply(NavigationSourceConfiguration configuration, ODataModelBuilder model);
}
public interface Microsoft.OData.ModelBuilder.Conventions.IODataModelConventionSetBuilder {
    public abstract virtual ODataModelConventionSet Build();
}
internal class Microsoft.OData.ModelBuilder.Conventions.NavigationLinksGenerationConvention : object {
    public sealed virtual void Apply(NavigationSourceConfiguration configuration, ODataModelBuilder model);
}
public class Microsoft.OData.ModelBuilder.Conventions.ODataModelConventionSet : object {
}
internal class Microsoft.OData.ModelBuilder.Conventions.SelfLinksGenerationConvention : object {
    public sealed virtual void Apply(NavigationSourceConfiguration configuration, ODataModelBuilder model);
}
[ExtensionAttribute]
internal static class Microsoft.OData.ModelBuilder.ConventionsHelpers : object {
    public static IEnumerable`1<PropertyInfo> GetProperties(StructuralTypeConfiguration structural, bool includeReadOnly);
    public static IEnumerable`1<PropertyInfo> GetAllProperties(StructuralTypeConfiguration type, bool includeReadOnly);
    [ExtensionAttribute]
public static bool IsValidStructuralProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> IgnoredProperties(StructuralTypeConfiguration structuralType);
    [ExtensionAttribute]
public static bool IsValidStructuralPropertyType(Type type);
}
public class Microsoft.OData.ModelBuilder.Core.V1.AcceptableMediaTypesConfiguration : VocabularyTermConfiguration {
    private HashSet`1<string> _acceptableMediaTypes;
    public string TermName { get; }
    public virtual string get_TermName();
    public AcceptableMediaTypesConfiguration HasAcceptableMediaTypes(String[] acceptableMediaTypes);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.AdditionalPropertiesConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _additionalProperties;
    public string TermName { get; }
    public virtual string get_TermName();
    public AdditionalPropertiesConfiguration IsAdditionalProperties(bool additionalProperties);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.AlternateKeyConfiguration : object {
    private Dictionary`2<string, object> _dynamicProperties;
    private HashSet`1<PropertyRefConfiguration> _key;
    public AlternateKeyConfiguration HasDynamicProperty(string name, object value);
    public AlternateKeyConfiguration HasKey(Func`2<PropertyRefConfiguration, PropertyRefConfiguration> keyConfiguration);
    public AlternateKeyConfiguration HasKey(PropertyRefConfiguration[] key);
    public sealed virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.AlternateKeysConfiguration : VocabularyTermConfiguration {
    private HashSet`1<AlternateKeyConfiguration> _alternateKeys;
    public string TermName { get; }
    public virtual string get_TermName();
    public AlternateKeysConfiguration HasAlternateKeys(Func`2<AlternateKeyConfiguration, AlternateKeyConfiguration> alternateKeysConfiguration);
    public AlternateKeysConfiguration HasAlternateKeys(AlternateKeyConfiguration[] alternateKeys);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.AutoExpandConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _autoExpand;
    public string TermName { get; }
    public virtual string get_TermName();
    public AutoExpandConfiguration IsAutoExpand(bool autoExpand);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.AutoExpandReferencesConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _autoExpandReferences;
    public string TermName { get; }
    public virtual string get_TermName();
    public AutoExpandReferencesConfiguration IsAutoExpandReferences(bool autoExpandReferences);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.ComputedConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _computed;
    public string TermName { get; }
    public virtual string get_TermName();
    public ComputedConfiguration IsComputed(bool computed);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.ComputedDefaultValueConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _computedDefaultValue;
    public string TermName { get; }
    public virtual string get_TermName();
    public ComputedDefaultValueConfiguration IsComputedDefaultValue(bool computedDefaultValue);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.ContentIDConfiguration : VocabularyTermConfiguration {
    private string _contentID;
    public string TermName { get; }
    public virtual string get_TermName();
    public ContentIDConfiguration HasContentID(string contentID);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.ConventionalIDsConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _conventionalIDs;
    public string TermName { get; }
    public virtual string get_TermName();
    public ConventionalIDsConfiguration IsConventionalIDs(bool conventionalIDs);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.DataModificationExceptionConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private MessageTypeConfiguration _info;
    private Nullable`1<DataModificationOperationKind> _failedOperation;
    private Nullable`1<int> _responseCode;
    public string TermName { get; }
    public virtual string get_TermName();
    public DataModificationExceptionConfiguration HasDynamicProperty(string name, object value);
    public DataModificationExceptionConfiguration Hasinfo(Func`2<MessageTypeConfiguration, MessageTypeConfiguration> infoConfiguration);
    public DataModificationExceptionConfiguration Hasinfo(MessageTypeConfiguration info);
    public DataModificationExceptionConfiguration HasfailedOperation(DataModificationOperationKind failedOperation);
    public DataModificationExceptionConfiguration HasresponseCode(int responseCode);
    public virtual IEdmExpression ToEdmExpression();
}
public enum Microsoft.OData.ModelBuilder.Core.V1.DataModificationOperationKind : Enum {
    public int value__;
    public static DataModificationOperationKind insert;
    public static DataModificationOperationKind update;
    public static DataModificationOperationKind upsert;
    public static DataModificationOperationKind delete;
    public static DataModificationOperationKind invoke;
    public static DataModificationOperationKind link;
    public static DataModificationOperationKind unlink;
}
public class Microsoft.OData.ModelBuilder.Core.V1.DefaultNamespaceConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _defaultNamespace;
    public string TermName { get; }
    public virtual string get_TermName();
    public DefaultNamespaceConfiguration IsDefaultNamespace(bool defaultNamespace);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.DereferenceableIDsConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _dereferenceableIDs;
    public string TermName { get; }
    public virtual string get_TermName();
    public DereferenceableIDsConfiguration IsDereferenceableIDs(bool dereferenceableIDs);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.DescriptionConfiguration : VocabularyTermConfiguration {
    private string _description;
    public string TermName { get; }
    public virtual string get_TermName();
    public DescriptionConfiguration HasDescription(string description);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.ExampleConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private string _description;
    public string TermName { get; }
    public virtual string get_TermName();
    public ExampleConfiguration HasDynamicProperty(string name, object value);
    public ExampleConfiguration HasDescription(string description);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.ImmutableConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _immutable;
    public string TermName { get; }
    public virtual string get_TermName();
    public ImmutableConfiguration IsImmutable(bool immutable);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.IsLanguageDependentConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _isLanguageDependent;
    public string TermName { get; }
    public virtual string get_TermName();
    public IsLanguageDependentConfiguration IsIsLanguageDependent(bool isLanguageDependent);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.IsMediaTypeConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _isMediaType;
    public string TermName { get; }
    public virtual string get_TermName();
    public IsMediaTypeConfiguration IsIsMediaType(bool isMediaType);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.IsURLConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _isURL;
    public string TermName { get; }
    public virtual string get_TermName();
    public IsURLConfiguration IsIsURL(bool isURL);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.LinkConfiguration : object {
    private Dictionary`2<string, object> _dynamicProperties;
    private string _rel;
    private string _href;
    public LinkConfiguration HasDynamicProperty(string name, object value);
    public LinkConfiguration Hasrel(string rel);
    public LinkConfiguration Hashref(string href);
    public sealed virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.LinksConfiguration : VocabularyTermConfiguration {
    private HashSet`1<LinkConfiguration> _links;
    public string TermName { get; }
    public virtual string get_TermName();
    public LinksConfiguration HasLinks(Func`2<LinkConfiguration, LinkConfiguration> linksConfiguration);
    public LinksConfiguration HasLinks(LinkConfiguration[] links);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.LongDescriptionConfiguration : VocabularyTermConfiguration {
    private string _longDescription;
    public string TermName { get; }
    public virtual string get_TermName();
    public LongDescriptionConfiguration HasLongDescription(string longDescription);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.MayImplementConfiguration : VocabularyTermConfiguration {
    private HashSet`1<string> _mayImplement;
    public string TermName { get; }
    public virtual string get_TermName();
    public MayImplementConfiguration HasMayImplement(String[] mayImplement);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.MediaTypeConfiguration : VocabularyTermConfiguration {
    private string _mediaType;
    public string TermName { get; }
    public virtual string get_TermName();
    public MediaTypeConfiguration HasMediaType(string mediaType);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.MessagesConfiguration : VocabularyTermConfiguration {
    private HashSet`1<MessageTypeConfiguration> _messages;
    public string TermName { get; }
    public virtual string get_TermName();
    public MessagesConfiguration HasMessages(Func`2<MessageTypeConfiguration, MessageTypeConfiguration> messagesConfiguration);
    public MessagesConfiguration HasMessages(MessageTypeConfiguration[] messages);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.MessageTypeConfiguration : object {
    private Dictionary`2<string, object> _dynamicProperties;
    private string _code;
    private string _message;
    private string _severity;
    private string _target;
    private HashSet`1<MessageTypeConfiguration> _details;
    public MessageTypeConfiguration HasDynamicProperty(string name, object value);
    public MessageTypeConfiguration Hascode(string code);
    public MessageTypeConfiguration Hasmessage(string message);
    public MessageTypeConfiguration Hasseverity(string severity);
    public MessageTypeConfiguration Hastarget(string target);
    public MessageTypeConfiguration Hasdetails(Func`2<MessageTypeConfiguration, MessageTypeConfiguration> detailsConfiguration);
    public MessageTypeConfiguration Hasdetails(MessageTypeConfiguration[] details);
    public sealed virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.ODataVersionsConfiguration : VocabularyTermConfiguration {
    private string _oDataVersions;
    public string TermName { get; }
    public virtual string get_TermName();
    public ODataVersionsConfiguration HasODataVersions(string oDataVersions);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.OperationAvailableConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _operationAvailable;
    public string TermName { get; }
    public virtual string get_TermName();
    public OperationAvailableConfiguration IsOperationAvailable(bool operationAvailable);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.OptimisticConcurrencyConfiguration : VocabularyTermConfiguration {
    private HashSet`1<EdmPropertyPathExpression> _optimisticConcurrency;
    public string TermName { get; }
    public virtual string get_TermName();
    public OptimisticConcurrencyConfiguration HasOptimisticConcurrency(EdmPropertyPathExpression[] optimisticConcurrency);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.OptionalParameterConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private string _defaultValue;
    public string TermName { get; }
    public virtual string get_TermName();
    public OptionalParameterConfiguration HasDynamicProperty(string name, object value);
    public OptionalParameterConfiguration HasDefaultValue(string defaultValue);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.OrderedConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _ordered;
    public string TermName { get; }
    public virtual string get_TermName();
    public OrderedConfiguration IsOrdered(bool ordered);
    public virtual IEdmExpression ToEdmExpression();
}
[FlagsAttribute]
public enum Microsoft.OData.ModelBuilder.Core.V1.Permission : Enum {
    public int value__;
    public static Permission None;
    public static Permission Read;
    public static Permission Write;
    public static Permission ReadWrite;
    public static Permission Invoke;
}
public class Microsoft.OData.ModelBuilder.Core.V1.PermissionsConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private Nullable`1<Permission> _permissions;
    public string TermName { get; }
    public virtual string get_TermName();
    public PermissionsConfiguration HasPermissions(Permission permissions);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.PositionalInsertConfiguration : VocabularyTermConfiguration {
    private Nullable`1<bool> _positionalInsert;
    public string TermName { get; }
    public virtual string get_TermName();
    public PositionalInsertConfiguration IsPositionalInsert(bool positionalInsert);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.PrimitiveExampleValueConfiguration : object {
    private Dictionary`2<string, object> _dynamicProperties;
    private string _description;
    private object _value;
    public PrimitiveExampleValueConfiguration HasDynamicProperty(string name, object value);
    public PrimitiveExampleValueConfiguration HasDescription(string description);
    public PrimitiveExampleValueConfiguration HasValue(object value);
    public sealed virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.PropertyRefConfiguration : object {
    private Dictionary`2<string, object> _dynamicProperties;
    private EdmPropertyPathExpression _name;
    private string _alias;
    public PropertyRefConfiguration HasDynamicProperty(string name, object value);
    public PropertyRefConfiguration HasName(EdmPropertyPathExpression name);
    public PropertyRefConfiguration HasAlias(string alias);
    public sealed virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.RequiresTypeConfiguration : VocabularyTermConfiguration {
    private string _requiresType;
    public string TermName { get; }
    public virtual string get_TermName();
    public RequiresTypeConfiguration HasRequiresType(string requiresType);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.ResourceExceptionConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private MessageTypeConfiguration _info;
    private string _retryLink;
    public string TermName { get; }
    public virtual string get_TermName();
    public ResourceExceptionConfiguration HasDynamicProperty(string name, object value);
    public ResourceExceptionConfiguration Hasinfo(Func`2<MessageTypeConfiguration, MessageTypeConfiguration> infoConfiguration);
    public ResourceExceptionConfiguration Hasinfo(MessageTypeConfiguration info);
    public ResourceExceptionConfiguration HasretryLink(string retryLink);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.ResourcePathConfiguration : VocabularyTermConfiguration {
    private string _resourcePath;
    public string TermName { get; }
    public virtual string get_TermName();
    public ResourcePathConfiguration HasResourcePath(string resourcePath);
    public virtual IEdmExpression ToEdmExpression();
}
public enum Microsoft.OData.ModelBuilder.Core.V1.RevisionKind : Enum {
    public int value__;
    public static RevisionKind Added;
    public static RevisionKind Modified;
    public static RevisionKind Deprecated;
}
public class Microsoft.OData.ModelBuilder.Core.V1.RevisionsConfiguration : VocabularyTermConfiguration {
    private HashSet`1<RevisionTypeConfiguration> _revisions;
    public string TermName { get; }
    public virtual string get_TermName();
    public RevisionsConfiguration HasRevisions(Func`2<RevisionTypeConfiguration, RevisionTypeConfiguration> revisionsConfiguration);
    public RevisionsConfiguration HasRevisions(RevisionTypeConfiguration[] revisions);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.RevisionTypeConfiguration : object {
    private Dictionary`2<string, object> _dynamicProperties;
    private string _version;
    private Nullable`1<RevisionKind> _kind;
    private string _description;
    public RevisionTypeConfiguration HasDynamicProperty(string name, object value);
    public RevisionTypeConfiguration HasVersion(string version);
    public RevisionTypeConfiguration HasKind(RevisionKind kind);
    public RevisionTypeConfiguration HasDescription(string description);
    public sealed virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.SchemaVersionConfiguration : VocabularyTermConfiguration {
    private string _schemaVersion;
    public string TermName { get; }
    public virtual string get_TermName();
    public SchemaVersionConfiguration HasSchemaVersion(string schemaVersion);
    public virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.Core.V1.ValueExceptionConfiguration : VocabularyTermConfiguration {
    private Dictionary`2<string, object> _dynamicProperties;
    private MessageTypeConfiguration _info;
    private string _value;
    public string TermName { get; }
    public virtual string get_TermName();
    public ValueExceptionConfiguration HasDynamicProperty(string name, object value);
    public ValueExceptionConfiguration Hasinfo(Func`2<MessageTypeConfiguration, MessageTypeConfiguration> infoConfiguration);
    public ValueExceptionConfiguration Hasinfo(MessageTypeConfiguration info);
    public ValueExceptionConfiguration Hasvalue(string value);
    public virtual IEdmExpression ToEdmExpression();
}
[AttributeUsageAttribute("132")]
public class Microsoft.OData.ModelBuilder.CountAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    public bool Disabled { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
}
public class Microsoft.OData.ModelBuilder.DecimalPropertyConfiguration : PrecisionPropertyConfiguration {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Scale>k__BackingField;
    public Nullable`1<int> Scale { get; public set; }
    public DecimalPropertyConfiguration(PropertyInfo property, StructuralTypeConfiguration declaringType);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(Nullable`1<int> value);
}
public class Microsoft.OData.ModelBuilder.DefaultAssemblyResolver : object {
    private Assembly[] _assemblies;
    internal static IAssemblyResolver Default;
    public IEnumerable`1<Assembly> Assemblies { get; }
    private static DefaultAssemblyResolver();
    public sealed virtual IEnumerable`1<Assembly> get_Assemblies();
    private static Assembly[] GetAssembliesInteral();
}
public class Microsoft.OData.ModelBuilder.DynamicPropertyDictionaryAnnotation : object {
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    public PropertyInfo PropertyInfo { get; }
    public DynamicPropertyDictionaryAnnotation(PropertyInfo propertyInfo);
    [CompilerGeneratedAttribute]
public PropertyInfo get_PropertyInfo();
}
[ExtensionAttribute]
internal static class Microsoft.OData.ModelBuilder.EdmLibHelpers : object {
    private static EdmCoreModel _coreModel;
    private static Dictionary`2<Type, IEdmPrimitiveType> _builtInTypesMapping;
    private static EdmLibHelpers();
    public static bool HasLength(EdmPrimitiveTypeKind primitiveTypeKind);
    public static bool HasPrecision(EdmPrimitiveTypeKind primitiveTypeKind);
    [ExtensionAttribute]
public static IEdmType GetEdmType(IEdmModel edmModel, Type clrType);
    [ExtensionAttribute]
public static Type GetClrType(IEdmModel edmModel, IEdmTypeReference edmTypeReference);
    [ExtensionAttribute]
public static Type GetClrType(IEdmModel edmModel, IEdmTypeReference edmTypeReference, IAssemblyResolver assembliesResolver);
    [ExtensionAttribute]
public static Type GetClrType(IEdmModel edmModel, IEdmType edmType);
    [ExtensionAttribute]
public static Type GetClrType(IEdmModel edmModel, IEdmType edmType, IAssemblyResolver assembliesResolver);
    public static IEdmPrimitiveType GetEdmPrimitiveTypeOrNull(Type clrType);
    public static IEdmPrimitiveTypeReference GetEdmPrimitiveTypeReferenceOrNull(Type clrType);
    private static IEnumerable`1<Type> GetMatchingTypes(string edmFullName, IAssemblyResolver assembliesResolver);
    private static IEdmPrimitiveType GetPrimitiveType(EdmPrimitiveTypeKind primitiveKind);
    private static IEdmType GetEdmType(IEdmModel edmModel, Type clrType, bool testCollections);
    [ExtensionAttribute]
public static IEdmTypeReference ToEdmTypeReference(IEdmType edmType, bool isNullable);
    [ExtensionAttribute]
public static IEnumerable`1<IEdmStructuralProperty> GetConcurrencyProperties(IEdmModel model, IEdmNavigationSource navigationSource);
    [ExtensionAttribute]
public static ClrEnumMemberAnnotation GetClrEnumMemberAnnotation(IEdmModel edmModel, IEdmEnumType enumType);
    private static QueryableRestrictionsAnnotation GetPropertyRestrictions(IEdmProperty edmProperty, IEdmModel edmModel);
    private static ModelBoundQuerySettings GetModelBoundQuerySettings(T key, IEdmModel edmModel, DefaultQuerySettings defaultQuerySettings);
    private static ModelBoundQuerySettings GetMergedPropertyQuerySettings(ModelBoundQuerySettings propertyQuerySettings, ModelBoundQuerySettings propertyTypeQuerySettings);
    public static ModelBoundQuerySettings GetModelBoundQuerySettings(IEdmProperty property, IEdmStructuredType structuredType, IEdmModel edmModel, DefaultQuerySettings defaultQuerySettings);
    public static bool IsNotFilterable(IEdmProperty edmProperty, IEdmProperty pathEdmProperty, IEdmStructuredType pathEdmStructuredType, IEdmModel edmModel, bool enableFilter);
    public static bool IsNotSortable(IEdmProperty edmProperty, IEdmProperty pathEdmProperty, IEdmStructuredType pathEdmStructuredType, IEdmModel edmModel, bool enableOrderBy);
    public static bool IsNotSelectable(IEdmProperty edmProperty, IEdmProperty pathEdmProperty, IEdmStructuredType pathEdmStructuredType, IEdmModel edmModel, bool enableSelect);
    public static bool IsNotNavigable(IEdmProperty edmProperty, IEdmModel edmModel);
    public static bool IsNotExpandable(IEdmProperty edmProperty, IEdmModel edmModel);
    public static bool IsNullable(Type type);
    [ExtensionAttribute]
public static string EdmName(Type clrType);
    [ExtensionAttribute]
public static string EdmFullName(Type clrType);
    private static Type ExtractGenericInterface(Type queryType, Type interfaceType);
    private static string MangleClrTypeName(Type type);
}
[ExtensionAttribute]
public static class Microsoft.OData.ModelBuilder.EdmModelExtensions : object {
    [ExtensionAttribute]
public static NavigationSourceLinkBuilderAnnotation GetNavigationSourceLinkBuilder(IEdmModel model, IEdmNavigationSource navigationSource);
    [ExtensionAttribute]
public static void SetNavigationSourceLinkBuilder(IEdmModel model, IEdmNavigationSource navigationSource, NavigationSourceLinkBuilderAnnotation navigationSourceLinkBuilder);
    [ExtensionAttribute]
internal static void SetOperationTitleAnnotation(IEdmModel model, IEdmOperation action, OperationTitleAnnotation title);
    [ExtensionAttribute]
internal static OperationTitleAnnotation GetOperationTitleAnnotation(IEdmModel model, IEdmOperation operation);
}
[ExtensionAttribute]
internal static class Microsoft.OData.ModelBuilder.EdmTypeConfigurationExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<PropertyConfiguration> DerivedProperties(StructuralTypeConfiguration structuralType);
    [IteratorStateMachineAttribute("Microsoft.OData.ModelBuilder.EdmTypeConfigurationExtensions/<DerivedProperties>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyConfiguration> DerivedProperties(EntityTypeConfiguration entity);
    [IteratorStateMachineAttribute("Microsoft.OData.ModelBuilder.EdmTypeConfigurationExtensions/<DerivedProperties>d__2")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyConfiguration> DerivedProperties(ComplexTypeConfiguration complex);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyConfiguration> Keys(EntityTypeConfiguration entity);
    [ExtensionAttribute]
public static IEnumerable`1<StructuralTypeConfiguration> ThisAndBaseTypes(StructuralTypeConfiguration structuralType);
    [ExtensionAttribute]
public static IEnumerable`1<StructuralTypeConfiguration> ThisAndBaseAndDerivedTypes(ODataModelBuilder modelBuilder, StructuralTypeConfiguration structuralType);
    [IteratorStateMachineAttribute("Microsoft.OData.ModelBuilder.EdmTypeConfigurationExtensions/<BaseTypes>d__6")]
[ExtensionAttribute]
public static IEnumerable`1<StructuralTypeConfiguration> BaseTypes(StructuralTypeConfiguration structuralType);
    [ExtensionAttribute]
public static IEnumerable`1<StructuralTypeConfiguration> DerivedTypes(ODataModelBuilder modelBuilder, StructuralTypeConfiguration structuralType);
    [IteratorStateMachineAttribute("Microsoft.OData.ModelBuilder.EdmTypeConfigurationExtensions/<DerivedTypes>d__8")]
[ExtensionAttribute]
public static IEnumerable`1<EntityTypeConfiguration> DerivedTypes(ODataModelBuilder modelBuilder, EntityTypeConfiguration entity);
    [IteratorStateMachineAttribute("Microsoft.OData.ModelBuilder.EdmTypeConfigurationExtensions/<DerivedTypes>d__9")]
[ExtensionAttribute]
public static IEnumerable`1<ComplexTypeConfiguration> DerivedTypes(ODataModelBuilder modelBuilder, ComplexTypeConfiguration complex);
    [ExtensionAttribute]
public static bool IsAssignableFrom(StructuralTypeConfiguration baseStructuralType, StructuralTypeConfiguration structuralType);
}
public class Microsoft.OData.ModelBuilder.EntityCollectionConfiguration`1 : CollectionTypeConfiguration {
    internal EntityCollectionConfiguration`1(EntityTypeConfiguration elementType);
    public ActionConfiguration Action(string name);
    public FunctionConfiguration Function(string name);
}
internal class Microsoft.OData.ModelBuilder.EntityKeyConvention : EntityTypeConvention {
    public virtual void Apply(EntityTypeConfiguration entity, ODataConventionModelBuilder model);
    private static PropertyConfiguration GetKeyProperty(EntityTypeConfiguration entityType);
}
public class Microsoft.OData.ModelBuilder.EntitySetConfiguration : NavigationSourceConfiguration {
    public EntitySetConfiguration(ODataModelBuilder modelBuilder, Type entityClrType, string name);
    public EntitySetConfiguration(ODataModelBuilder modelBuilder, EntityTypeConfiguration entityType, string name);
}
public class Microsoft.OData.ModelBuilder.EntitySetConfiguration`1 : NavigationSourceConfiguration`1<TEntityType> {
    internal EntitySetConfiguration EntitySet { get; }
    internal EntitySetConfiguration`1(ODataModelBuilder modelBuilder, string name);
    internal EntitySetConfiguration`1(ODataModelBuilder modelBuilder, EntitySetConfiguration configuration);
    internal EntitySetConfiguration get_EntitySet();
}
public class Microsoft.OData.ModelBuilder.EntityTypeConfiguration : StructuralTypeConfiguration {
    private List`1<PrimitivePropertyConfiguration> _keys;
    private List`1<EnumPropertyConfiguration> _enumKeys;
    [CompilerGeneratedAttribute]
private bool <HasStream>k__BackingField;
    public EdmTypeKind Kind { get; }
    public bool HasStream { get; public set; }
    public IEnumerable`1<PrimitivePropertyConfiguration> Keys { get; }
    public IEnumerable`1<EnumPropertyConfiguration> EnumKeys { get; }
    public EntityTypeConfiguration BaseType { get; public set; }
    public EntityTypeConfiguration(ODataModelBuilder modelBuilder, Type clrType);
    public virtual EdmTypeKind get_Kind();
    [CompilerGeneratedAttribute]
public virtual bool get_HasStream();
    [CompilerGeneratedAttribute]
public virtual void set_HasStream(bool value);
    public virtual IEnumerable`1<PrimitivePropertyConfiguration> get_Keys();
    public virtual IEnumerable`1<EnumPropertyConfiguration> get_EnumKeys();
    public virtual EntityTypeConfiguration get_BaseType();
    public virtual void set_BaseType(EntityTypeConfiguration value);
    public virtual EntityTypeConfiguration Abstract();
    public virtual EntityTypeConfiguration MediaType();
    public virtual EntityTypeConfiguration HasKey(PropertyInfo keyProperty);
    public virtual void RemoveKey(PrimitivePropertyConfiguration keyProperty);
    public virtual void RemoveKey(EnumPropertyConfiguration enumKeyProperty);
    public virtual EntityTypeConfiguration DerivesFromNothing();
    public virtual EntityTypeConfiguration DerivesFrom(EntityTypeConfiguration baseType);
    public virtual void RemoveProperty(PropertyInfo propertyInfo);
}
public class Microsoft.OData.ModelBuilder.EntityTypeConfiguration`1 : StructuralTypeConfiguration`1<TEntityType> {
    private EntityTypeConfiguration _configuration;
    private EntityCollectionConfiguration`1<TEntityType> _collection;
    private ODataModelBuilder _modelBuilder;
    public EntityTypeConfiguration BaseType { get; }
    public IEnumerable`1<NavigationPropertyConfiguration> NavigationProperties { get; }
    public EntityCollectionConfiguration`1<TEntityType> Collection { get; }
    internal EntityTypeConfiguration`1(ODataModelBuilder modelBuilder);
    internal EntityTypeConfiguration`1(ODataModelBuilder modelBuilder, EntityTypeConfiguration configuration);
    public EntityTypeConfiguration get_BaseType();
    public IEnumerable`1<NavigationPropertyConfiguration> get_NavigationProperties();
    public EntityCollectionConfiguration`1<TEntityType> get_Collection();
    public EntityTypeConfiguration`1<TEntityType> Abstract();
    public EntityTypeConfiguration`1<TEntityType> MediaType();
    public EntityTypeConfiguration`1<TEntityType> DerivesFromNothing();
    public EntityTypeConfiguration`1<TEntityType> DerivesFrom();
    public EntityTypeConfiguration`1<TEntityType> HasKey(Expression`1<Func`2<TEntityType, TKey>> keyDefinitionExpression);
    public ActionConfiguration Action(string name);
    public FunctionConfiguration Function(string name);
}
internal abstract class Microsoft.OData.ModelBuilder.EntityTypeConvention : object {
    public sealed virtual void Apply(IEdmTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model);
    public abstract virtual void Apply(EntityTypeConfiguration entity, ODataConventionModelBuilder model);
}
public class Microsoft.OData.ModelBuilder.EnumMemberConfiguration : VocabularyConfigurationsBase {
    private string _name;
    [CompilerGeneratedAttribute]
private EnumTypeConfiguration <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private Enum <MemberInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddedExplicitly>k__BackingField;
    public string Name { get; public set; }
    public EnumTypeConfiguration DeclaringType { get; }
    public Enum MemberInfo { get; }
    public bool AddedExplicitly { get; public set; }
    public EnumMemberConfiguration(Enum member, EnumTypeConfiguration declaringType);
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public EnumTypeConfiguration get_DeclaringType();
    [CompilerGeneratedAttribute]
public Enum get_MemberInfo();
    [CompilerGeneratedAttribute]
public bool get_AddedExplicitly();
    [CompilerGeneratedAttribute]
public void set_AddedExplicitly(bool value);
}
public class Microsoft.OData.ModelBuilder.EnumPropertyConfiguration : StructuralPropertyConfiguration {
    [CompilerGeneratedAttribute]
private string <DefaultValueString>k__BackingField;
    public string DefaultValueString { get; public set; }
    public PropertyKind Kind { get; }
    public Type RelatedClrType { get; }
    public EnumPropertyConfiguration(PropertyInfo property, StructuralTypeConfiguration declaringType);
    [CompilerGeneratedAttribute]
public string get_DefaultValueString();
    [CompilerGeneratedAttribute]
public void set_DefaultValueString(string value);
    public virtual PropertyKind get_Kind();
    public virtual Type get_RelatedClrType();
    public EnumPropertyConfiguration IsNullable();
    public EnumPropertyConfiguration IsRequired();
    public EnumPropertyConfiguration IsConcurrencyToken();
}
public class Microsoft.OData.ModelBuilder.EnumTypeConfiguration : VocabularyConfigurationsBase {
    private string _namespace;
    private string _name;
    private NullableEnumTypeConfiguration nullableEnumTypeConfiguration;
    [CompilerGeneratedAttribute]
private bool <IsFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <UnderlyingType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddedExplicitly>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataModelBuilder <ModelBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Enum> <RemovedMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<Enum, EnumMemberConfiguration> <ExplicitMembers>k__BackingField;
    public EdmTypeKind Kind { get; }
    public bool IsFlags { get; private set; }
    public Type ClrType { get; private set; }
    public Type UnderlyingType { get; private set; }
    public string FullName { get; }
    public string Namespace { get; public set; }
    public string Name { get; public set; }
    public IEnumerable`1<EnumMemberConfiguration> Members { get; }
    public ReadOnlyCollection`1<Enum> IgnoredMembers { get; }
    public bool AddedExplicitly { get; public set; }
    public ODataModelBuilder ModelBuilder { get; private set; }
    protected internal IList`1<Enum> RemovedMembers { get; private set; }
    protected internal IDictionary`2<Enum, EnumMemberConfiguration> ExplicitMembers { get; private set; }
    public EnumTypeConfiguration(ODataModelBuilder builder, Type clrType);
    public sealed virtual EdmTypeKind get_Kind();
    [CompilerGeneratedAttribute]
public bool get_IsFlags();
    [CompilerGeneratedAttribute]
private void set_IsFlags(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
private void set_ClrType(Type value);
    [CompilerGeneratedAttribute]
public Type get_UnderlyingType();
    [CompilerGeneratedAttribute]
private void set_UnderlyingType(Type value);
    public sealed virtual string get_FullName();
    public sealed virtual string get_Namespace();
    public void set_Namespace(string value);
    public sealed virtual string get_Name();
    public void set_Name(string value);
    public IEnumerable`1<EnumMemberConfiguration> get_Members();
    public ReadOnlyCollection`1<Enum> get_IgnoredMembers();
    [CompilerGeneratedAttribute]
public bool get_AddedExplicitly();
    [CompilerGeneratedAttribute]
public void set_AddedExplicitly(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ODataModelBuilder get_ModelBuilder();
    [CompilerGeneratedAttribute]
private void set_ModelBuilder(ODataModelBuilder value);
    [CompilerGeneratedAttribute]
protected internal IList`1<Enum> get_RemovedMembers();
    [CompilerGeneratedAttribute]
private void set_RemovedMembers(IList`1<Enum> value);
    [CompilerGeneratedAttribute]
protected internal IDictionary`2<Enum, EnumMemberConfiguration> get_ExplicitMembers();
    [CompilerGeneratedAttribute]
private void set_ExplicitMembers(IDictionary`2<Enum, EnumMemberConfiguration> value);
    public EnumMemberConfiguration AddMember(Enum member);
    public void RemoveMember(Enum member);
    internal NullableEnumTypeConfiguration GetNullableEnumTypeConfiguration();
}
public class Microsoft.OData.ModelBuilder.EnumTypeConfiguration`1 : object {
    private EnumTypeConfiguration _configuration;
    public IEnumerable`1<EnumMemberConfiguration> Members { get; }
    public string FullName { get; }
    public string Namespace { get; public set; }
    public string Name { get; public set; }
    internal EnumTypeConfiguration`1(EnumTypeConfiguration configuration);
    public IEnumerable`1<EnumMemberConfiguration> get_Members();
    public string get_FullName();
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_Name();
    public void set_Name(string value);
    public virtual void RemoveMember(TEnumType member);
    public EnumMemberConfiguration Member(TEnumType enumMember);
}
internal static class Microsoft.OData.ModelBuilder.Error : object {
    internal static string Format(string format, Object[] args);
    internal static ArgumentException Argument(string messageFormat, Object[] messageArgs);
    internal static ArgumentException Argument(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentNullException ArgumentNull(string parameterName);
    internal static ArgumentNullException ArgumentNull(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentException ArgumentNullOrEmpty(string parameterName);
    internal static ArgumentException ArgumentNullOrWhitespace(string parameterName);
    internal static ArgumentNullException PropertyNull();
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string parameterName, object actualValue, string messageFormat, Object[] messageArgs);
    internal static ArgumentOutOfRangeException ArgumentMustBeGreaterThanOrEqualTo(string parameterName, object actualValue, object minValue);
    internal static ArgumentOutOfRangeException ArgumentMustBeLessThanOrEqualTo(string parameterName, object actualValue, object maxValue);
    internal static InvalidOperationException InvalidOperation(string messageFormat, Object[] messageArgs);
    internal static InvalidOperationException InvalidOperation(Exception innerException, string messageFormat, Object[] messageArgs);
    internal static NotSupportedException NotSupported(string messageFormat, Object[] messageArgs);
}
[AttributeUsageAttribute("132")]
public class Microsoft.OData.ModelBuilder.ExpandAttribute : Attribute {
    private Dictionary`2<string, ExpandConfiguration> _expandConfigurations;
    private SelectExpandType _expandType;
    private Nullable`1<SelectExpandType> _defaultExpandType;
    private Nullable`1<int> _defaultMaxDepth;
    private int _maxDepth;
    public Dictionary`2<string, ExpandConfiguration> ExpandConfigurations { get; }
    public SelectExpandType ExpandType { get; public set; }
    public int MaxDepth { get; public set; }
    internal Nullable`1<SelectExpandType> DefaultExpandType { get; internal set; }
    internal Nullable`1<int> DefaultMaxDepth { get; internal set; }
    public ExpandAttribute(String[] properties);
    public Dictionary`2<string, ExpandConfiguration> get_ExpandConfigurations();
    public SelectExpandType get_ExpandType();
    public void set_ExpandType(SelectExpandType value);
    public int get_MaxDepth();
    public void set_MaxDepth(int value);
    internal Nullable`1<SelectExpandType> get_DefaultExpandType();
    internal void set_DefaultExpandType(Nullable`1<SelectExpandType> value);
    internal Nullable`1<int> get_DefaultMaxDepth();
    internal void set_DefaultMaxDepth(Nullable`1<int> value);
}
[AttributeUsageAttribute("132")]
public class Microsoft.OData.ModelBuilder.FilterAttribute : Attribute {
    private Nullable`1<bool> _defaultEnableFilter;
    private bool _disable;
    private Dictionary`2<string, bool> _filterConfigurations;
    public Dictionary`2<string, bool> FilterConfigurations { get; }
    public bool Disabled { get; public set; }
    internal Nullable`1<bool> DefaultEnableFilter { get; internal set; }
    public FilterAttribute(String[] properties);
    public Dictionary`2<string, bool> get_FilterConfigurations();
    public bool get_Disabled();
    public void set_Disabled(bool value);
    internal Nullable`1<bool> get_DefaultEnableFilter();
    internal void set_DefaultEnableFilter(Nullable`1<bool> value);
}
internal class Microsoft.OData.ModelBuilder.ForeignKeyDiscoveryConvention : object {
    public sealed virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, ODataConventionModelBuilder model);
    public sealed virtual void Apply(NavigationPropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, ODataConventionModelBuilder model);
    private static IDictionary`2<PrimitivePropertyConfiguration, PrimitivePropertyConfiguration> GetForeignKeys(EntityTypeConfiguration principalEntityType, EntityTypeConfiguration dependentEntityType);
}
public class Microsoft.OData.ModelBuilder.FunctionConfiguration : OperationConfiguration {
    [CompilerGeneratedAttribute]
private bool <IsComposable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportedInFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportedInOrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeInServiceDocument>k__BackingField;
    public OperationKind Kind { get; }
    public bool IsSideEffecting { get; }
    public bool IsComposable { get; public set; }
    public bool SupportedInFilter { get; public set; }
    public bool SupportedInOrderBy { get; public set; }
    public bool IncludeInServiceDocument { get; public set; }
    internal FunctionConfiguration(ODataModelBuilder builder, string name);
    public virtual OperationKind get_Kind();
    public virtual bool get_IsSideEffecting();
    [CompilerGeneratedAttribute]
public bool get_IsComposable();
    [CompilerGeneratedAttribute]
public void set_IsComposable(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportedInFilter();
    [CompilerGeneratedAttribute]
public void set_SupportedInFilter(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportedInOrderBy();
    [CompilerGeneratedAttribute]
public void set_SupportedInOrderBy(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeInServiceDocument();
    [CompilerGeneratedAttribute]
public void set_IncludeInServiceDocument(bool value);
    public FunctionConfiguration ReturnsFromEntitySet(string entitySetName);
    public FunctionConfiguration ReturnsFromEntitySet(Type entityType, string entitySetName);
    public FunctionConfiguration ReturnsCollectionFromEntitySet(string entitySetName);
    public FunctionConfiguration ReturnsCollectionFromEntitySet(Type elementEntityType, string entitySetName);
    public FunctionConfiguration Returns();
    public FunctionConfiguration Returns(Type clrReturnType);
    public FunctionConfiguration ReturnsCollection();
    public FunctionConfiguration ReturnsCollection(Type clrElementType);
    public FunctionConfiguration SetBindingParameter(string name, IEdmTypeConfiguration bindingParameterType);
    public FunctionConfiguration ReturnsEntityViaEntitySetPath(string entitySetPath);
    public FunctionConfiguration ReturnsEntityViaEntitySetPath(Type entityType, string entitySetPath);
    public FunctionConfiguration ReturnsEntityViaEntitySetPath(String[] entitySetPath);
    public FunctionConfiguration ReturnsCollectionViaEntitySetPath(string entitySetPath);
    public FunctionConfiguration ReturnsCollectionViaEntitySetPath(Type clrElementEntityType, string entitySetPath);
    public FunctionConfiguration ReturnsCollectionViaEntitySetPath(String[] entitySetPath);
}
internal class Microsoft.OData.ModelBuilder.FunctionLinkGenerationConvention : object {
    public sealed virtual void Apply(OperationConfiguration configuration, ODataModelBuilder model);
}
[ExtensionAttribute]
internal static class Microsoft.OData.ModelBuilder.Helpers.EdmModelHelperMethods : object {
    public static IEdmModel BuildEdmModel(ODataModelBuilder builder);
    [ExtensionAttribute]
private static void AddTypes(EdmModel model, Dictionary`2<Type, ValueTuple`2<IEdmType, IEdmTypeConfiguration>> types);
    [ExtensionAttribute]
private static NavigationSourceAndAnnotations[] AddEntitySetAndAnnotations(EdmEntityContainer container, ODataModelBuilder builder, Dictionary`2<Type, IEdmType> edmTypeMap);
    [ExtensionAttribute]
private static NavigationSourceAndAnnotations[] AddSingletonAndAnnotations(EdmEntityContainer container, ODataModelBuilder builder, Dictionary`2<Type, IEdmType> edmTypeMap);
    [ExtensionAttribute]
private static IDictionary`2<string, EdmNavigationSource> GetNavigationSourceMap(EdmModel model, EdmTypeMap edmMap, IEnumerable`1<NavigationSourceAndAnnotations> navigationSourceAndAnnotations);
    private static void AddNavigationBindings(EdmTypeMap edmMap, NavigationSourceConfiguration navigationSourceConfiguration, EdmNavigationSource navigationSource, Dictionary`2<string, EdmNavigationSource> edmNavigationSourceMap);
    private static string ConvertBindingPath(EdmTypeMap edmMap, NavigationPropertyBindingConfiguration binding);
    private static void AddOperationParameters(EdmOperation operation, OperationConfiguration operationConfiguration, Dictionary`2<Type, IEdmType> edmTypeMap);
    private static void AddOperationLinkBuilder(IEdmModel model, IEdmOperation operation, OperationConfiguration operationConfiguration);
    private static void ValidateOperationEntitySetPath(IEdmModel model, IEdmOperationImport operationImport, OperationConfiguration operationConfiguration);
    [ExtensionAttribute]
private static void AddOperations(EdmModel model, IEnumerable`1<OperationConfiguration> configurations, EdmEntityContainer container, Dictionary`2<Type, IEdmType> edmTypeMap, IDictionary`2<string, EdmNavigationSource> edmNavigationSourceMap);
    private static EdmOperationImport CreateActionImport(OperationConfiguration operationConfiguration, EdmEntityContainer container, IEdmTypeReference returnReference, IEdmExpression expression, IEdmPathExpression pathExpression);
    private static EdmOperationImport CreateFunctionImport(FunctionConfiguration function, EdmEntityContainer container, IEdmTypeReference returnReference, IEdmExpression expression, IEdmPathExpression pathExpression);
    private static void ValidateActionOverload(IEnumerable`1<ActionConfiguration> configurations);
    [ExtensionAttribute]
private static Dictionary`2<Type, IEdmType> AddTypes(EdmModel model, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
private static void AddType(EdmModel model, IEdmType type);
    [ExtensionAttribute]
private static EdmEntitySet AddEntitySet(EdmEntityContainer container, EntitySetConfiguration entitySet, IDictionary`2<Type, IEdmType> edmTypeMap);
    private static IEnumerable`1<Tuple`2<EdmEntitySet, EntitySetConfiguration>> AddEntitySets(IEnumerable`1<EntitySetConfiguration> entitySets, EdmEntityContainer container, Dictionary`2<Type, IEdmType> edmTypeMap);
    [ExtensionAttribute]
private static EdmSingleton AddSingleton(EdmEntityContainer container, SingletonConfiguration singletonType, IDictionary`2<Type, IEdmType> edmTypeMap);
    private static IEnumerable`1<Tuple`2<EdmSingleton, SingletonConfiguration>> AddSingletons(IEnumerable`1<SingletonConfiguration> singletons, EdmEntityContainer container, Dictionary`2<Type, IEdmType> edmTypeMap);
    [ExtensionAttribute]
private static void AddClrTypeAnnotations(EdmModel model, Dictionary`2<Type, ValueTuple`2<IEdmType, IEdmTypeConfiguration>> edmTypes);
    [ExtensionAttribute]
private static void AddTypesVocabularyTermAnnotations(EdmModel model, Dictionary`2<Type, ValueTuple`2<IEdmType, IEdmTypeConfiguration>> edmTypes);
    [ExtensionAttribute]
private static void AddClrPropertyInfoAnnotations(EdmModel model, Dictionary`2<PropertyInfo, ValueTuple`2<IEdmProperty, PropertyConfiguration>> edmProperties);
    [ExtensionAttribute]
private static void AddClrEnumMemberInfoAnnotations(EdmModel model, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
private static void AddEnumMembersVocabularyAnnotations(EdmModel model, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
private static void AddDynamicPropertyDictionaryAnnotations(EdmModel model, Dictionary`2<IEdmStructuredType, PropertyInfo> openTypes);
    [ExtensionAttribute]
private static void AddInstanceAnnotationsContainer(EdmModel model, Dictionary`2<IEdmStructuredType, PropertyInfo> instanceAnnotations);
    [ExtensionAttribute]
private static void AddPropertiesQuerySettings(EdmModel model, Dictionary`2<IEdmProperty, ModelBoundQuerySettings> edmPropertiesQuerySettings);
    [ExtensionAttribute]
private static void AddStructuredTypeQuerySettings(EdmModel model, Dictionary`2<IEdmStructuredType, ModelBoundQuerySettings> edmStructuredTypeQuerySettings);
    [ExtensionAttribute]
private static void AddPropertyRestrictionsAnnotations(EdmModel model, Dictionary`2<IEdmProperty, QueryableRestrictions> edmPropertiesRestrictions);
    [ExtensionAttribute]
private static void AddCoreVocabularyAnnotations(EdmModel model, IEnumerable`1<NavigationSourceAndAnnotations> navigationSources, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
private static void AddOptimisticConcurrencyAnnotation(EdmModel model, IEdmVocabularyAnnotatable target, NavigationSourceConfiguration navigationSourceConfiguration, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
private static void AddCapabilitiesVocabularyAnnotations(EdmModel model, IEnumerable`1<NavigationSourceAndAnnotations> navigationSources, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
private static void AddCountRestrictionsAnnotation(EdmModel model, IEdmEntitySet target, EntitySetConfiguration entitySetConfiguration, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
private static void AddNavigationRestrictionsAnnotation(EdmModel model, IEdmEntitySet target, EntitySetConfiguration entitySetConfiguration, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
private static void AddFilterRestrictionsAnnotation(EdmModel model, IEdmEntitySet target, EntitySetConfiguration entitySetConfiguration, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
private static void AddSortRestrictionsAnnotation(EdmModel model, IEdmEntitySet target, EntitySetConfiguration entitySetConfiguration, EdmTypeMap edmTypeMap);
    [ExtensionAttribute]
private static void AddExpandRestrictionsAnnotation(EdmModel model, IEdmEntitySet target, EntitySetConfiguration entitySetConfiguration, EdmTypeMap edmTypeMap);
    private static IEdmExpression GetEdmEntitySetExpression(IDictionary`2<string, EdmNavigationSource> navigationSources, OperationConfiguration operationConfiguration);
    private static IEdmTypeReference GetEdmTypeReference(Dictionary`2<Type, IEdmType> availableTypes, IEdmTypeConfiguration configuration, bool nullable);
    [ExtensionAttribute]
internal static string GetNavigationSourceUrl(IEdmModel model, IEdmNavigationSource navigationSource);
    [ExtensionAttribute]
internal static IEnumerable`1<IEdmAction> GetAvailableActions(IEdmModel model, IEdmEntityType entityType);
    [ExtensionAttribute]
internal static IEnumerable`1<IEdmFunction> GetAvailableFunctions(IEdmModel model, IEdmEntityType entityType);
    [ExtensionAttribute]
internal static IEnumerable`1<IEdmOperation> GetAvailableOperationsBoundToCollection(IEdmModel model, IEdmEntityType entityType);
    [ExtensionAttribute]
internal static IEnumerable`1<IEdmOperation> GetAvailableOperations(IEdmModel model, IEdmEntityType entityType, bool boundToCollection);
}
internal class Microsoft.OData.ModelBuilder.Helpers.EdmTypeBuilder : object {
    private List`1<IEdmTypeConfiguration> _configurations;
    private Dictionary`2<Type, ValueTuple`2<IEdmType, IEdmTypeConfiguration>> _types;
    private Dictionary`2<PropertyInfo, ValueTuple`2<IEdmProperty, PropertyConfiguration>> _properties;
    private Dictionary`2<IEdmProperty, QueryableRestrictions> _propertiesRestrictions;
    private Dictionary`2<IEdmProperty, ModelBoundQuerySettings> _propertiesQuerySettings;
    private Dictionary`2<IEdmStructuredType, ModelBoundQuerySettings> _structuredTypeQuerySettings;
    private Dictionary`2<Enum, ValueTuple`2<IEdmEnumMember, EnumMemberConfiguration>> _members;
    private Dictionary`2<IEdmStructuredType, PropertyInfo> _openTypes;
    private Dictionary`2<IEdmStructuredType, PropertyInfo> _instanceAnnotableTypes;
    internal EdmTypeBuilder(IEnumerable`1<IEdmTypeConfiguration> configurations);
    public static EdmPrimitiveTypeKind GetTypeKind(Type clrType);
    private Dictionary`2<Type, ValueTuple`2<IEdmType, IEdmTypeConfiguration>> GetEdmTypes();
    private void CreateEdmTypeHeader(IEdmTypeConfiguration config);
    private IList`1<IEdmStructuralProperty> GetDeclaringPropertyInfo(IEnumerable`1<PropertyInfo> propertyInfos);
    private void CreateNavigationProperty(StructuralTypeConfiguration config);
    private void CreateEdmTypeBody(IEdmTypeConfiguration config);
    private static IEdmTypeReference AddPrecisionConfigInPrimitiveTypeReference(PrecisionPropertyConfiguration precisionProperty, IEdmTypeReference primitiveTypeReference);
    private static IEdmTypeReference AddLengthConfigInPrimitiveTypeReference(LengthPropertyConfiguration lengthProperty, IEdmTypeReference primitiveTypeReference);
    private void CreateStructuralTypeBody(EdmStructuredType type, StructuralTypeConfiguration config);
    private IEdmProperty CreateStructuralTypeCollectionPropertyBody(EdmStructuredType type, CollectionPropertyConfiguration collectionProperty);
    private IEdmProperty CreateStructuralTypeEnumPropertyBody(EdmStructuredType type, EnumPropertyConfiguration enumProperty);
    private void CreateComplexTypeBody(EdmComplexType type, ComplexTypeConfiguration config);
    private void CreateEntityTypeBody(EdmEntityType type, EntityTypeConfiguration config);
    private void CreateEnumTypeBody(EdmEnumType type, EnumTypeConfiguration config);
    public static EdmTypeMap GetTypesAndProperties(IEnumerable`1<IEdmTypeConfiguration> configurations);
    private IEdmType GetEdmType(Type clrType);
    [CompilerGeneratedAttribute]
private EdmNavigationPropertyInfo <CreateNavigationProperty>b__14_0(NavigationPropertyConfiguration nav);
}
internal class Microsoft.OData.ModelBuilder.Helpers.EdmTypeMap : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, ValueTuple`2<IEdmType, IEdmTypeConfiguration>> <EdmTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<PropertyInfo, ValueTuple`2<IEdmProperty, PropertyConfiguration>> <EdmProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IEdmProperty, QueryableRestrictions> <EdmPropertiesRestrictions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IEdmProperty, ModelBoundQuerySettings> <EdmPropertiesQuerySettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IEdmStructuredType, ModelBoundQuerySettings> <EdmStructuredTypeQuerySettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Enum, ValueTuple`2<IEdmEnumMember, EnumMemberConfiguration>> <EnumMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IEdmStructuredType, PropertyInfo> <OpenTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IEdmStructuredType, PropertyInfo> <InstanceAnnotatableTypes>k__BackingField;
    public Dictionary`2<Type, ValueTuple`2<IEdmType, IEdmTypeConfiguration>> EdmTypes { get; }
    public Dictionary`2<PropertyInfo, ValueTuple`2<IEdmProperty, PropertyConfiguration>> EdmProperties { get; }
    public Dictionary`2<IEdmProperty, QueryableRestrictions> EdmPropertiesRestrictions { get; }
    public Dictionary`2<IEdmProperty, ModelBoundQuerySettings> EdmPropertiesQuerySettings { get; }
    public Dictionary`2<IEdmStructuredType, ModelBoundQuerySettings> EdmStructuredTypeQuerySettings { get; }
    public Dictionary`2<Enum, ValueTuple`2<IEdmEnumMember, EnumMemberConfiguration>> EnumMembers { get; }
    public Dictionary`2<IEdmStructuredType, PropertyInfo> OpenTypes { get; }
    public Dictionary`2<IEdmStructuredType, PropertyInfo> InstanceAnnotatableTypes { get; }
    public EdmTypeMap(Dictionary`2<Type, ValueTuple`2<IEdmType, IEdmTypeConfiguration>> edmTypes, Dictionary`2<PropertyInfo, ValueTuple`2<IEdmProperty, PropertyConfiguration>> edmProperties, Dictionary`2<IEdmProperty, QueryableRestrictions> edmPropertiesRestrictions, Dictionary`2<IEdmProperty, ModelBoundQuerySettings> edmPropertiesQuerySettings, Dictionary`2<IEdmStructuredType, ModelBoundQuerySettings> edmStructuredTypeQuerySettings, Dictionary`2<Enum, ValueTuple`2<IEdmEnumMember, EnumMemberConfiguration>> enumMembers, Dictionary`2<IEdmStructuredType, PropertyInfo> openTypes, Dictionary`2<IEdmStructuredType, PropertyInfo> instanceAnnotatableTypes);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, ValueTuple`2<IEdmType, IEdmTypeConfiguration>> get_EdmTypes();
    [CompilerGeneratedAttribute]
public Dictionary`2<PropertyInfo, ValueTuple`2<IEdmProperty, PropertyConfiguration>> get_EdmProperties();
    [CompilerGeneratedAttribute]
public Dictionary`2<IEdmProperty, QueryableRestrictions> get_EdmPropertiesRestrictions();
    [CompilerGeneratedAttribute]
public Dictionary`2<IEdmProperty, ModelBoundQuerySettings> get_EdmPropertiesQuerySettings();
    [CompilerGeneratedAttribute]
public Dictionary`2<IEdmStructuredType, ModelBoundQuerySettings> get_EdmStructuredTypeQuerySettings();
    [CompilerGeneratedAttribute]
public Dictionary`2<Enum, ValueTuple`2<IEdmEnumMember, EnumMemberConfiguration>> get_EnumMembers();
    [CompilerGeneratedAttribute]
public Dictionary`2<IEdmStructuredType, PropertyInfo> get_OpenTypes();
    [CompilerGeneratedAttribute]
public Dictionary`2<IEdmStructuredType, PropertyInfo> get_InstanceAnnotatableTypes();
}
public interface Microsoft.OData.ModelBuilder.IAssemblyResolver {
    public IEnumerable`1<Assembly> Assemblies { get; }
    public abstract virtual IEnumerable`1<Assembly> get_Assemblies();
}
internal interface Microsoft.OData.ModelBuilder.IEdmPropertyConvention {
    public abstract virtual void Apply(PropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, ODataConventionModelBuilder model);
}
internal interface Microsoft.OData.ModelBuilder.IEdmPropertyConvention`1 {
    public abstract virtual void Apply(TPropertyConfiguration edmProperty, StructuralTypeConfiguration structuralTypeConfiguration, ODataConventionModelBuilder model);
}
public interface Microsoft.OData.ModelBuilder.IEdmTypeConfiguration {
    public Type ClrType { get; }
    public string FullName { get; }
    public string Namespace { get; }
    public string Name { get; }
    public EdmTypeKind Kind { get; }
    public ODataModelBuilder ModelBuilder { get; }
    public abstract virtual Type get_ClrType();
    public abstract virtual string get_FullName();
    public abstract virtual string get_Namespace();
    public abstract virtual string get_Name();
    public abstract virtual EdmTypeKind get_Kind();
    public abstract virtual ODataModelBuilder get_ModelBuilder();
}
internal interface Microsoft.OData.ModelBuilder.IEdmTypeConvention {
    public abstract virtual void Apply(IEdmTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model);
}
public class Microsoft.OData.ModelBuilder.InstanceAnnotationContainerAnnotation : object {
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    public PropertyInfo PropertyInfo { get; }
    public InstanceAnnotationContainerAnnotation(PropertyInfo propertyInfo);
    [CompilerGeneratedAttribute]
public PropertyInfo get_PropertyInfo();
}
public interface Microsoft.OData.ModelBuilder.IODataInstanceAnnotationContainer {
    public IDictionary`2<string, IDictionary`2<string, object>> InstanceAnnotations { get; }
    public abstract virtual IDictionary`2<string, IDictionary`2<string, object>> get_InstanceAnnotations();
}
[ExtensionAttribute]
public static class Microsoft.OData.ModelBuilder.IODataInstanceAnnotationContainerExtensions : object {
    [ExtensionAttribute]
public static void AddResourceAnnotation(IODataInstanceAnnotationContainer container, string annotationName, object value);
    [ExtensionAttribute]
public static void AddPropertyAnnotation(IODataInstanceAnnotationContainer container, string propertyName, string annotationName, object value);
    [ExtensionAttribute]
public static IDictionary`2<string, object> GetResourceAnnotations(IODataInstanceAnnotationContainer container);
    [ExtensionAttribute]
public static IDictionary`2<string, object> GetPropertyAnnotations(IODataInstanceAnnotationContainer container, string propertyName);
    private static void VerifyInstanceAnnotationName(string annotationName);
}
public interface Microsoft.OData.ModelBuilder.IODataModelConvention {
}
internal interface Microsoft.OData.ModelBuilder.IOperationConvention {
    public abstract virtual void Apply(OperationConfiguration configuration, ODataModelBuilder model);
}
public interface Microsoft.OData.ModelBuilder.IRecord {
    public abstract virtual IEdmExpression ToEdmExpression();
}
public class Microsoft.OData.ModelBuilder.LengthPropertyConfiguration : PrimitivePropertyConfiguration {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxLength>k__BackingField;
    public Nullable`1<int> MaxLength { get; public set; }
    public LengthPropertyConfiguration(PropertyInfo property, StructuralTypeConfiguration declaringType);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxLength();
    [CompilerGeneratedAttribute]
public void set_MaxLength(Nullable`1<int> value);
}
public class Microsoft.OData.ModelBuilder.LowerCamelCaser : object {
    private NameResolverOptions _options;
    public LowerCamelCaser(NameResolverOptions options);
    public void ApplyLowerCamelCase(ODataConventionModelBuilder builder);
    public virtual string ToLowerCamelCase(string name);
    private bool ShouldApplyLowerCamelCase(PropertyConfiguration property);
}
[AttributeUsageAttribute("4")]
public class Microsoft.OData.ModelBuilder.MediaTypeAttribute : Attribute {
}
[FlagsAttribute]
public enum Microsoft.OData.ModelBuilder.NameResolverOptions : Enum {
    public int value__;
    public static NameResolverOptions ProcessReflectedPropertyNames;
    public static NameResolverOptions ProcessDataMemberAttributePropertyNames;
    public static NameResolverOptions ProcessExplicitPropertyNames;
    public static NameResolverOptions ProcessEnumMemberNames;
}
public class Microsoft.OData.ModelBuilder.NavigationPropertyBindingConfiguration : object {
    [CompilerGeneratedAttribute]
private NavigationPropertyConfiguration <NavigationProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationSourceConfiguration <TargetNavigationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<MemberInfo> <Path>k__BackingField;
    public NavigationPropertyConfiguration NavigationProperty { get; private set; }
    public NavigationSourceConfiguration TargetNavigationSource { get; private set; }
    public IList`1<MemberInfo> Path { get; private set; }
    public string BindingPath { get; }
    public NavigationPropertyBindingConfiguration(NavigationPropertyConfiguration navigationProperty, NavigationSourceConfiguration navigationSource);
    public NavigationPropertyBindingConfiguration(NavigationPropertyConfiguration navigationProperty, NavigationSourceConfiguration navigationSource, IList`1<MemberInfo> path);
    [CompilerGeneratedAttribute]
public NavigationPropertyConfiguration get_NavigationProperty();
    [CompilerGeneratedAttribute]
private void set_NavigationProperty(NavigationPropertyConfiguration value);
    [CompilerGeneratedAttribute]
public NavigationSourceConfiguration get_TargetNavigationSource();
    [CompilerGeneratedAttribute]
private void set_TargetNavigationSource(NavigationSourceConfiguration value);
    [CompilerGeneratedAttribute]
public IList`1<MemberInfo> get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(IList`1<MemberInfo> value);
    public string get_BindingPath();
}
public enum Microsoft.OData.ModelBuilder.NavigationPropertyBindingOption : Enum {
    public int value__;
    public static NavigationPropertyBindingOption None;
    public static NavigationPropertyBindingOption Auto;
}
public class Microsoft.OData.ModelBuilder.NavigationPropertyConfiguration : PropertyConfiguration {
    private Type _relatedType;
    private IDictionary`2<PropertyInfo, PropertyInfo> _referentialConstraint;
    [CompilerGeneratedAttribute]
private NavigationPropertyConfiguration <Partner>k__BackingField;
    [CompilerGeneratedAttribute]
private EdmMultiplicity <Multiplicity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private EdmOnDeleteAction <OnDeleteAction>k__BackingField;
    public NavigationPropertyConfiguration Partner { get; internal set; }
    public EdmMultiplicity Multiplicity { get; private set; }
    public bool ContainsTarget { get; private set; }
    public Type RelatedClrType { get; }
    public PropertyKind Kind { get; }
    public EdmOnDeleteAction OnDeleteAction { get; public set; }
    public IEnumerable`1<PropertyInfo> DependentProperties { get; }
    public IEnumerable`1<PropertyInfo> PrincipalProperties { get; }
    public NavigationPropertyConfiguration(PropertyInfo property, EdmMultiplicity multiplicity, StructuralTypeConfiguration declaringType);
    [CompilerGeneratedAttribute]
public NavigationPropertyConfiguration get_Partner();
    [CompilerGeneratedAttribute]
internal void set_Partner(NavigationPropertyConfiguration value);
    [CompilerGeneratedAttribute]
public EdmMultiplicity get_Multiplicity();
    [CompilerGeneratedAttribute]
private void set_Multiplicity(EdmMultiplicity value);
    [CompilerGeneratedAttribute]
public bool get_ContainsTarget();
    [CompilerGeneratedAttribute]
private void set_ContainsTarget(bool value);
    public virtual Type get_RelatedClrType();
    public virtual PropertyKind get_Kind();
    [CompilerGeneratedAttribute]
public EdmOnDeleteAction get_OnDeleteAction();
    [CompilerGeneratedAttribute]
public void set_OnDeleteAction(EdmOnDeleteAction value);
    public IEnumerable`1<PropertyInfo> get_DependentProperties();
    public IEnumerable`1<PropertyInfo> get_PrincipalProperties();
    public NavigationPropertyConfiguration Nullable();
    public NavigationPropertyConfiguration Required();
    public NavigationPropertyConfiguration Contained();
    public NavigationPropertyConfiguration NonContained();
    public NavigationPropertyConfiguration AutomaticallyExpand(bool disableWhenSelectIsPresent);
    public NavigationPropertyConfiguration CascadeOnDelete();
    public NavigationPropertyConfiguration CascadeOnDelete(bool cascade);
    public NavigationPropertyConfiguration HasConstraint(PropertyInfo dependentPropertyInfo, PropertyInfo principalPropertyInfo);
    public NavigationPropertyConfiguration HasConstraint(KeyValuePair`2<PropertyInfo, PropertyInfo> constraint);
    private bool ValidateConstraint(KeyValuePair`2<PropertyInfo, PropertyInfo> constraint);
    [CompilerGeneratedAttribute]
private bool <HasConstraint>b__35_0(EntityTypeConfiguration e);
}
[ExtensionAttribute]
internal static class Microsoft.OData.ModelBuilder.NavigationPropertyExtensions : object {
    [ExtensionAttribute]
public static void FindAllNavigationProperties(ODataModelBuilder builder, StructuralTypeConfiguration configuration, IList`1<Tuple`3<StructuralTypeConfiguration, IList`1<MemberInfo>, NavigationPropertyConfiguration>> navigations, Stack`1<MemberInfo> path);
    [ExtensionAttribute]
private static void FindAllNavigationPropertiesRecursive(ODataModelBuilder builder, StructuralTypeConfiguration configuration, IList`1<Tuple`3<StructuralTypeConfiguration, IList`1<MemberInfo>, NavigationPropertyConfiguration>> navigations, Stack`1<MemberInfo> path, HashSet`1<Type> typesAlreadyProcessed);
    [ExtensionAttribute]
private static void FindNavigationProperties(ODataModelBuilder builder, StructuralTypeConfiguration configuration, IList`1<Tuple`3<StructuralTypeConfiguration, IList`1<MemberInfo>, NavigationPropertyConfiguration>> navs, Stack`1<MemberInfo> path, HashSet`1<Type> typesAlreadyProcessed);
}
internal class Microsoft.OData.ModelBuilder.NavigationSourceAndAnnotations : object {
    [CompilerGeneratedAttribute]
private EdmNavigationSource <NavigationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationSourceConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationSourceLinkBuilderAnnotation <LinkBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationSourceUrlAnnotation <Url>k__BackingField;
    public EdmNavigationSource NavigationSource { get; public set; }
    public NavigationSourceConfiguration Configuration { get; public set; }
    public NavigationSourceLinkBuilderAnnotation LinkBuilder { get; public set; }
    public NavigationSourceUrlAnnotation Url { get; public set; }
    [CompilerGeneratedAttribute]
public EdmNavigationSource get_NavigationSource();
    [CompilerGeneratedAttribute]
public void set_NavigationSource(EdmNavigationSource value);
    [CompilerGeneratedAttribute]
public NavigationSourceConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(NavigationSourceConfiguration value);
    [CompilerGeneratedAttribute]
public NavigationSourceLinkBuilderAnnotation get_LinkBuilder();
    [CompilerGeneratedAttribute]
public void set_LinkBuilder(NavigationSourceLinkBuilderAnnotation value);
    [CompilerGeneratedAttribute]
public NavigationSourceUrlAnnotation get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(NavigationSourceUrlAnnotation value);
}
public abstract class Microsoft.OData.ModelBuilder.NavigationSourceConfiguration : object {
    private string _url;
    private ODataModelBuilder _modelBuilder;
    private Dictionary`2<NavigationPropertyConfiguration, Dictionary`2<string, NavigationPropertyBindingConfiguration>> _navigationPropertyBindings;
    [CompilerGeneratedAttribute]
private EntityTypeConfiguration <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, VocabularyTermConfiguration> <VocabularyTermConfigurations>k__BackingField;
    public IEnumerable`1<NavigationPropertyBindingConfiguration> Bindings { get; }
    public EntityTypeConfiguration EntityType { get; private set; }
    public Type ClrType { get; private set; }
    public string Name { get; private set; }
    public Dictionary`2<Type, VocabularyTermConfiguration> VocabularyTermConfigurations { get; }
    protected NavigationSourceConfiguration(ODataModelBuilder modelBuilder, Type entityClrType, string name);
    protected NavigationSourceConfiguration(ODataModelBuilder modelBuilder, EntityTypeConfiguration entityType, string name);
    public IEnumerable`1<NavigationPropertyBindingConfiguration> get_Bindings();
    [CompilerGeneratedAttribute]
public virtual EntityTypeConfiguration get_EntityType();
    [CompilerGeneratedAttribute]
private void set_EntityType(EntityTypeConfiguration value);
    [CompilerGeneratedAttribute]
public Type get_ClrType();
    [CompilerGeneratedAttribute]
private void set_ClrType(Type value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, VocabularyTermConfiguration> get_VocabularyTermConfigurations();
    public virtual string GetUrl();
    public virtual NavigationPropertyBindingConfiguration AddBinding(NavigationPropertyConfiguration navigationConfiguration, NavigationSourceConfiguration targetNavigationSource);
    public virtual NavigationPropertyBindingConfiguration AddBinding(NavigationPropertyConfiguration navigationConfiguration, NavigationSourceConfiguration targetNavigationSource, IList`1<MemberInfo> bindingPath);
    public virtual void RemoveBinding(NavigationPropertyConfiguration navigationConfiguration);
    public virtual void RemoveBinding(NavigationPropertyConfiguration navigationConfiguration, string bindingPath);
    public virtual IEnumerable`1<NavigationPropertyBindingConfiguration> FindBinding(NavigationPropertyConfiguration navigationConfiguration);
    public virtual NavigationPropertyBindingConfiguration FindBinding(NavigationPropertyConfiguration navigationConfiguration, IList`1<MemberInfo> bindingPath);
    public virtual IEnumerable`1<NavigationPropertyBindingConfiguration> FindBindings(string propertyName);
    private void VerifyBindingPath(NavigationPropertyConfiguration navigationConfiguration, IList`1<MemberInfo> bindingPath);
    private static Type VerifyBindingSegment(Type current, MemberInfo info);
}
public abstract class Microsoft.OData.ModelBuilder.NavigationSourceConfiguration`1 : object {
    private NavigationSourceConfiguration _configuration;
    private EntityTypeConfiguration`1<TEntityType> _entityType;
    private ODataModelBuilder _modelBuilder;
    private BindingPathConfiguration`1<TEntityType> _binding;
    public EntityTypeConfiguration`1<TEntityType> EntityType { get; }
    internal NavigationSourceConfiguration Configuration { get; }
    public BindingPathConfiguration`1<TEntityType> Binding { get; }
    internal NavigationSourceConfiguration`1(ODataModelBuilder modelBuilder, NavigationSourceConfiguration configuration);
    public EntityTypeConfiguration`1<TEntityType> get_EntityType();
    internal NavigationSourceConfiguration get_Configuration();
    public BindingPathConfiguration`1<TEntityType> get_Binding();
    public NavigationPropertyBindingConfiguration HasManyBinding(Expression`1<Func`2<TDerivedEntityType, IEnumerable`1<TTargetType>>> navigationExpression, string entitySetName);
    public NavigationPropertyBindingConfiguration HasManyBinding(Expression`1<Func`2<TEntityType, IEnumerable`1<TTargetType>>> navigationExpression, string entitySetName);
    public NavigationPropertyBindingConfiguration HasManyBinding(Expression`1<Func`2<TEntityType, IEnumerable`1<TTargetType>>> navigationExpression, NavigationSourceConfiguration`1<TTargetType> targetEntitySet);
    public NavigationPropertyBindingConfiguration HasManyBinding(Expression`1<Func`2<TDerivedEntityType, IEnumerable`1<TTargetType>>> navigationExpression, NavigationSourceConfiguration`1<TTargetType> targetEntitySet);
    public NavigationPropertyBindingConfiguration HasRequiredBinding(Expression`1<Func`2<TEntityType, TTargetType>> navigationExpression, string entitySetName);
    public NavigationPropertyBindingConfiguration HasRequiredBinding(Expression`1<Func`2<TDerivedEntityType, TTargetType>> navigationExpression, string entitySetName);
    public NavigationPropertyBindingConfiguration HasRequiredBinding(Expression`1<Func`2<TEntityType, TTargetType>> navigationExpression, NavigationSourceConfiguration`1<TTargetType> targetEntitySet);
    public NavigationPropertyBindingConfiguration HasRequiredBinding(Expression`1<Func`2<TDerivedEntityType, TTargetType>> navigationExpression, NavigationSourceConfiguration`1<TTargetType> targetEntitySet);
    public NavigationPropertyBindingConfiguration HasOptionalBinding(Expression`1<Func`2<TEntityType, TTargetType>> navigationExpression, string entitySetName);
    public NavigationPropertyBindingConfiguration HasOptionalBinding(Expression`1<Func`2<TDerivedEntityType, TTargetType>> navigationExpression, string entitySetName);
    public NavigationPropertyBindingConfiguration HasOptionalBinding(Expression`1<Func`2<TEntityType, TTargetType>> navigationExpression, NavigationSourceConfiguration`1<TTargetType> targetEntitySet);
    public NavigationPropertyBindingConfiguration HasOptionalBinding(Expression`1<Func`2<TDerivedEntityType, TTargetType>> navigationExpression, NavigationSourceConfiguration`1<TTargetType> targetEntitySet);
    public NavigationPropertyBindingConfiguration HasSingletonBinding(Expression`1<Func`2<TEntityType, TTargetType>> navigationExpression, string singletonName);
    public NavigationPropertyBindingConfiguration HasSingletonBinding(Expression`1<Func`2<TDerivedEntityType, TTargetType>> navigationExpression, string singletonName);
    public NavigationPropertyBindingConfiguration HasSingletonBinding(Expression`1<Func`2<TEntityType, TTargetType>> navigationExpression, NavigationSourceConfiguration`1<TTargetType> targetSingleton);
    public NavigationPropertyBindingConfiguration HasSingletonBinding(Expression`1<Func`2<TDerivedEntityType, TTargetType>> navigationExpression, NavigationSourceConfiguration`1<TTargetType> targetSingleton);
    public IEnumerable`1<NavigationPropertyBindingConfiguration> FindBindings(string propertyName);
    public IEnumerable`1<NavigationPropertyBindingConfiguration> FindBinding(NavigationPropertyConfiguration navigationConfiguration);
    public NavigationPropertyBindingConfiguration FindBinding(NavigationPropertyConfiguration navigationConfiguration, IList`1<MemberInfo> bindingPath);
}
public class Microsoft.OData.ModelBuilder.NavigationSourceLinkBuilderAnnotation : object {
    public NavigationSourceLinkBuilderAnnotation(IEdmNavigationSource navigationSource, IEdmModel model);
}
internal class Microsoft.OData.ModelBuilder.NavigationSourceUrlAnnotation : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
public class Microsoft.OData.ModelBuilder.NonbindingParameterConfiguration : ParameterConfiguration {
    public NonbindingParameterConfiguration(string name, IEdmTypeConfiguration parameterType);
}
[AttributeUsageAttribute("128")]
public class Microsoft.OData.ModelBuilder.NonFilterableAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Microsoft.OData.ModelBuilder.NotCountableAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Microsoft.OData.ModelBuilder.NotExpandableAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Microsoft.OData.ModelBuilder.NotFilterableAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Microsoft.OData.ModelBuilder.NotNavigableAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Microsoft.OData.ModelBuilder.NotSortableAttribute : Attribute {
}
internal class Microsoft.OData.ModelBuilder.NullableEnumTypeConfiguration : object {
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private EdmTypeKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataModelBuilder <ModelBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private EnumTypeConfiguration <EnumTypeConfiguration>k__BackingField;
    public Type ClrType { get; private set; }
    public string FullName { get; private set; }
    public string Namespace { get; private set; }
    public string Name { get; private set; }
    public EdmTypeKind Kind { get; private set; }
    public ODataModelBuilder ModelBuilder { get; private set; }
    internal EnumTypeConfiguration EnumTypeConfiguration { get; private set; }
    internal NullableEnumTypeConfiguration(EnumTypeConfiguration enumTypeConfiguration);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
private void set_ClrType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FullName();
    [CompilerGeneratedAttribute]
private void set_FullName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Namespace();
    [CompilerGeneratedAttribute]
private void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual EdmTypeKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(EdmTypeKind value);
    [CompilerGeneratedAttribute]
public sealed virtual ODataModelBuilder get_ModelBuilder();
    [CompilerGeneratedAttribute]
private void set_ModelBuilder(ODataModelBuilder value);
    [CompilerGeneratedAttribute]
internal EnumTypeConfiguration get_EnumTypeConfiguration();
    [CompilerGeneratedAttribute]
private void set_EnumTypeConfiguration(EnumTypeConfiguration value);
}
internal class Microsoft.OData.ModelBuilder.ODataContext : object {
}
public class Microsoft.OData.ModelBuilder.ODataConventionModelBuilder : ODataModelBuilder {
    private static List`1<IODataModelConvention> _conventions;
    private HashSet`1<StructuralTypeConfiguration> _mappedTypes;
    private HashSet`1<NavigationSourceConfiguration> _configuredNavigationSources;
    private HashSet`1<Type> _ignoredTypes;
    private IEnumerable`1<StructuralTypeConfiguration> _explicitlyAddedTypes;
    private bool _isModelBeingBuilt;
    private bool _isQueryCompositionMode;
    private Lazy`1<IDictionary`2<Type, Type[]>> _allTypesWithDerivedTypeMapping;
    [CompilerGeneratedAttribute]
private bool <ModelAliasingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<ODataConventionModelBuilder> <OnModelCreating>k__BackingField;
    public bool ModelAliasingEnabled { get; public set; }
    public Action`1<ODataConventionModelBuilder> OnModelCreating { get; public set; }
    public ODataConventionModelBuilder(IAssemblyResolver resolver);
    public ODataConventionModelBuilder(IAssemblyResolver resolver, bool isQueryCompositionMode);
    private static ODataConventionModelBuilder();
    [CompilerGeneratedAttribute]
public bool get_ModelAliasingEnabled();
    [CompilerGeneratedAttribute]
public void set_ModelAliasingEnabled(bool value);
    [CompilerGeneratedAttribute]
public Action`1<ODataConventionModelBuilder> get_OnModelCreating();
    [CompilerGeneratedAttribute]
public void set_OnModelCreating(Action`1<ODataConventionModelBuilder> value);
    internal void Initialize(IAssemblyResolver assembliesResolver, bool isQueryCompositionMode);
    public ODataConventionModelBuilder Ignore();
    public ODataConventionModelBuilder Ignore(Type[] types);
    public virtual EntityTypeConfiguration AddEntityType(Type type);
    public virtual ComplexTypeConfiguration AddComplexType(Type type);
    public virtual EntitySetConfiguration AddEntitySet(string name, EntityTypeConfiguration entityType);
    public virtual SingletonConfiguration AddSingleton(string name, EntityTypeConfiguration entityType);
    public virtual EnumTypeConfiguration AddEnumType(Type type);
    public virtual IEdmModel GetEdmModel();
    internal bool IsIgnoredType(Type type);
    internal void DiscoverInheritanceRelationships();
    internal void RemoveBaseTypeProperties(StructuralTypeConfiguration derivedStructrualType, StructuralTypeConfiguration baseStructuralType);
    private void RediscoverComplexTypes();
    private void ReconfigureEntityTypesAsComplexType(EntityTypeConfiguration[] misconfiguredEntityTypes);
    private void MapTypes();
    private void ApplyForeignKeyConventions();
    private void MapType(StructuralTypeConfiguration edmType);
    private void MapStructuralType(StructuralTypeConfiguration structuralType);
    internal void MapDerivedTypes(StructuralTypeConfiguration structuralType);
    private void MapStructuralProperty(StructuralTypeConfiguration type, PropertyInfo property, PropertyKind propertyKind, bool isCollection);
    private PropertyKind GetPropertyType(PropertyInfo property, Boolean& isCollection, IEdmTypeConfiguration& mappedType);
    private bool TryGetPropertyTypeKind(Type propertyType, IEdmTypeConfiguration& mappedType, PropertyKind& propertyKind);
    internal void ReconfigInferedEntityTypeAsComplexType(Type propertyType);
    internal bool InferEdmTypeFromDerivedTypes(Type propertyType, PropertyKind& propertyKind);
    private void PruneUnreachableTypes();
    private void ApplyTypeAndPropertyConventions(StructuralTypeConfiguration edmTypeConfiguration);
    private void ApplyEnumTypeConventions(EnumTypeConfiguration enumTypeConfiguration);
    private void ApplyNavigationSourceConventions(NavigationSourceConfiguration navigationSourceConfiguration);
    private void ApplyOperationConventions(OperationConfiguration operation);
    private IEdmTypeConfiguration GetStructuralTypeOrNull(Type clrType);
    private void ApplyPropertyConvention(IEdmPropertyConvention propertyConvention, StructuralTypeConfiguration edmTypeConfiguration);
    private void ReapplyPropertyConvention(PropertyConfiguration property, StructuralTypeConfiguration edmTypeConfiguration);
    private static Dictionary`2<Type, Type[]> BuildDerivedTypesMapping(IAssemblyResolver assemblyResolver);
    public virtual void ValidateModel(IEdmModel model);
}
[ExtensionAttribute]
public static class Microsoft.OData.ModelBuilder.ODataConventionModelBuilderExtensions : object {
    [ExtensionAttribute]
public static ODataConventionModelBuilder EnableLowerCamelCase(ODataConventionModelBuilder builder);
    [ExtensionAttribute]
public static ODataConventionModelBuilder EnableLowerCamelCaseForPropertiesAndEnums(ODataConventionModelBuilder builder);
    [ExtensionAttribute]
public static ODataConventionModelBuilder EnableLowerCamelCase(ODataConventionModelBuilder builder, NameResolverOptions options);
}
public class Microsoft.OData.ModelBuilder.ODataInstanceAnnotationContainer : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, IDictionary`2<string, object>> <InstanceAnnotations>k__BackingField;
    public IDictionary`2<string, IDictionary`2<string, object>> InstanceAnnotations { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, IDictionary`2<string, object>> get_InstanceAnnotations();
}
public class Microsoft.OData.ModelBuilder.ODataModelBuilder : object {
    private static string DefaultNamespace;
    private static Version _defaultDataServiceVersion;
    private static Version _defaultMaxDataServiceVersion;
    private Dictionary`2<Type, EnumTypeConfiguration> _enumTypes;
    private Dictionary`2<Type, StructuralTypeConfiguration> _structuralTypes;
    private Dictionary`2<string, NavigationSourceConfiguration> _navigationSources;
    private Dictionary`2<Type, PrimitiveTypeConfiguration> _primitiveTypes;
    private List`1<OperationConfiguration> _operations;
    private Version _dataServiceVersion;
    private Version _maxDataServiceVersion;
    private string _namespace;
    [CompilerGeneratedAttribute]
private NavigationPropertyBindingOption <BindingOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasAssignedNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerName>k__BackingField;
    public string Namespace { get; public set; }
    public NavigationPropertyBindingOption BindingOptions { get; public set; }
    internal bool HasAssignedNamespace { get; private set; }
    public string ContainerName { get; public set; }
    public Version DataServiceVersion { get; public set; }
    public Version MaxDataServiceVersion { get; public set; }
    public IEnumerable`1<EntitySetConfiguration> EntitySets { get; }
    public IEnumerable`1<SingletonConfiguration> Singletons { get; }
    public IEnumerable`1<NavigationSourceConfiguration> NavigationSources { get; }
    public IEnumerable`1<StructuralTypeConfiguration> StructuralTypes { get; }
    public IEnumerable`1<EnumTypeConfiguration> EnumTypes { get; }
    public IEnumerable`1<OperationConfiguration> Operations { get; }
    private static ODataModelBuilder();
    public string get_Namespace();
    public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public NavigationPropertyBindingOption get_BindingOptions();
    [CompilerGeneratedAttribute]
public void set_BindingOptions(NavigationPropertyBindingOption value);
    [CompilerGeneratedAttribute]
internal bool get_HasAssignedNamespace();
    [CompilerGeneratedAttribute]
private void set_HasAssignedNamespace(bool value);
    [CompilerGeneratedAttribute]
public string get_ContainerName();
    [CompilerGeneratedAttribute]
public void set_ContainerName(string value);
    public Version get_DataServiceVersion();
    public void set_DataServiceVersion(Version value);
    public Version get_MaxDataServiceVersion();
    public void set_MaxDataServiceVersion(Version value);
    public virtual IEnumerable`1<EntitySetConfiguration> get_EntitySets();
    public virtual IEnumerable`1<SingletonConfiguration> get_Singletons();
    public virtual IEnumerable`1<NavigationSourceConfiguration> get_NavigationSources();
    public virtual IEnumerable`1<StructuralTypeConfiguration> get_StructuralTypes();
    public virtual IEnumerable`1<EnumTypeConfiguration> get_EnumTypes();
    public virtual IEnumerable`1<OperationConfiguration> get_Operations();
    public EntityTypeConfiguration`1<TEntityType> EntityType();
    public ComplexTypeConfiguration`1<TComplexType> ComplexType();
    public EnumTypeConfiguration`1<TEnumType> EnumType();
    public EntitySetConfiguration`1<TEntityType> EntitySet(string name);
    public SingletonConfiguration`1<TEntityType> Singleton(string name);
    public virtual ActionConfiguration Action(string name);
    public virtual FunctionConfiguration Function(string name);
    public virtual EntityTypeConfiguration AddEntityType(Type clrType);
    public virtual ComplexTypeConfiguration AddComplexType(Type clrType);
    public virtual EnumTypeConfiguration AddEnumType(Type clrType);
    public virtual void AddOperation(OperationConfiguration operation);
    public virtual EntitySetConfiguration AddEntitySet(string name, EntityTypeConfiguration entityType);
    public virtual SingletonConfiguration AddSingleton(string name, EntityTypeConfiguration entityType);
    public virtual bool RemoveStructuralType(Type clrType);
    public virtual bool RemoveEnumType(Type clrType);
    public virtual bool RemoveEntitySet(string name);
    public virtual bool RemoveSingleton(string name);
    public virtual bool RemoveOperation(string name);
    public virtual bool RemoveOperation(OperationConfiguration operation);
    public IEdmTypeConfiguration GetTypeConfigurationOrNull(Type type);
    public virtual IEdmModel GetEdmModel();
    public virtual void ValidateModel(IEdmModel model);
}
public abstract class Microsoft.OData.ModelBuilder.OperationConfiguration : VocabularyConfigurationsBase {
    private List`1<ParameterConfiguration> _parameters;
    private BindingParameterConfiguration _bindingParameter;
    private string _namespace;
    [CompilerGeneratedAttribute]
private bool <FollowsConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmTypeConfiguration <ReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationSourceConfiguration <NavigationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <EntitySetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataModelBuilder <ModelBuilder>k__BackingField;
    public bool FollowsConventions { get; protected set; }
    public string Name { get; protected set; }
    public string Title { get; public set; }
    public OperationKind Kind { get; }
    public bool IsSideEffecting { get; }
    public string FullyQualifiedName { get; }
    public string Namespace { get; public set; }
    public IEdmTypeConfiguration ReturnType { get; public set; }
    public bool ReturnNullable { get; public set; }
    public NavigationSourceConfiguration NavigationSource { get; public set; }
    public IEnumerable`1<string> EntitySetPath { get; internal set; }
    public BindingParameterConfiguration BindingParameter { get; }
    public IEnumerable`1<ParameterConfiguration> Parameters { get; }
    public bool IsBindable { get; }
    protected ODataModelBuilder ModelBuilder { get; protected set; }
    internal OperationConfiguration(ODataModelBuilder builder, string name);
    [CompilerGeneratedAttribute]
public bool get_FollowsConventions();
    [CompilerGeneratedAttribute]
protected void set_FollowsConventions(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    public abstract virtual OperationKind get_Kind();
    public abstract virtual bool get_IsSideEffecting();
    public string get_FullyQualifiedName();
    public string get_Namespace();
    public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public IEdmTypeConfiguration get_ReturnType();
    [CompilerGeneratedAttribute]
public void set_ReturnType(IEdmTypeConfiguration value);
    [CompilerGeneratedAttribute]
public bool get_ReturnNullable();
    [CompilerGeneratedAttribute]
public void set_ReturnNullable(bool value);
    [CompilerGeneratedAttribute]
public NavigationSourceConfiguration get_NavigationSource();
    [CompilerGeneratedAttribute]
public void set_NavigationSource(NavigationSourceConfiguration value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_EntitySetPath();
    [CompilerGeneratedAttribute]
internal void set_EntitySetPath(IEnumerable`1<string> value);
    public virtual BindingParameterConfiguration get_BindingParameter();
    [IteratorStateMachineAttribute("Microsoft.OData.ModelBuilder.OperationConfiguration/<get_Parameters>d__44")]
public virtual IEnumerable`1<ParameterConfiguration> get_Parameters();
    public virtual bool get_IsBindable();
    internal void ReturnsFromEntitySetImplementation(Type entityType, string entitySetName);
    internal void ReturnsCollectionFromEntitySetImplementation(Type elementEntityType, string entitySetName);
    internal void ReturnsEntityViaEntitySetPathImplementation(Type entityType, IEnumerable`1<string> entitySetPath);
    internal void ReturnsCollectionViaEntitySetPathImplementation(Type clrElementEntityType, IEnumerable`1<string> entitySetPath);
    internal void ReturnsImplementation(Type clrReturnType);
    internal void ReturnsCollectionImplementation(Type clrElementType);
    internal void SetBindingParameterImplementation(string name, IEdmTypeConfiguration bindingParameterType);
    public ParameterConfiguration AddParameter(string name, IEdmTypeConfiguration parameterType);
    public ParameterConfiguration Parameter(Type clrParameterType, string name);
    public ParameterConfiguration Parameter(string name);
    public ParameterConfiguration CollectionParameter(string name);
    public ParameterConfiguration EntityParameter(string name);
    public ParameterConfiguration CollectionEntityParameter(string name);
    [CompilerGeneratedAttribute]
protected ODataModelBuilder get_ModelBuilder();
    [CompilerGeneratedAttribute]
protected void set_ModelBuilder(ODataModelBuilder value);
    private IEdmTypeConfiguration GetOperationTypeConfiguration(Type clrType);
}
public enum Microsoft.OData.ModelBuilder.OperationKind : Enum {
    public int value__;
    public static OperationKind Action;
    public static OperationKind Function;
}
public class Microsoft.OData.ModelBuilder.OperationTitleAnnotation : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public string Title { get; }
    public OperationTitleAnnotation(string title);
    [CompilerGeneratedAttribute]
public string get_Title();
}
[AttributeUsageAttribute("132")]
public class Microsoft.OData.ModelBuilder.OrderByAttribute : Attribute {
    private Nullable`1<bool> _defaultEnableOrderBy;
    private bool _disable;
    private Dictionary`2<string, bool> _orderByConfigurations;
    public Dictionary`2<string, bool> OrderByConfigurations { get; }
    public bool Disabled { get; public set; }
    internal Nullable`1<bool> DefaultEnableOrderBy { get; internal set; }
    public OrderByAttribute(String[] properties);
    public Dictionary`2<string, bool> get_OrderByConfigurations();
    public bool get_Disabled();
    public void set_Disabled(bool value);
    internal Nullable`1<bool> get_DefaultEnableOrderBy();
    internal void set_DefaultEnableOrderBy(Nullable`1<bool> value);
}
[AttributeUsageAttribute("132")]
public class Microsoft.OData.ModelBuilder.PageAttribute : Attribute {
    private int _maxTop;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    public int MaxTop { get; public set; }
    public int PageSize { get; public set; }
    public int get_MaxTop();
    public void set_MaxTop(int value);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
}
public abstract class Microsoft.OData.ModelBuilder.ParameterConfiguration : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmTypeConfiguration <TypeConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Nullable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    public string Name { get; protected set; }
    public IEdmTypeConfiguration TypeConfiguration { get; protected set; }
    public bool Nullable { get; public set; }
    public bool IsOptional { get; protected set; }
    public string DefaultValue { get; protected set; }
    protected ParameterConfiguration(string name, IEdmTypeConfiguration parameterType);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public IEdmTypeConfiguration get_TypeConfiguration();
    [CompilerGeneratedAttribute]
protected void set_TypeConfiguration(IEdmTypeConfiguration value);
    [CompilerGeneratedAttribute]
public bool get_Nullable();
    [CompilerGeneratedAttribute]
public void set_Nullable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
protected void set_IsOptional(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
protected void set_DefaultValue(string value);
    public ParameterConfiguration Optional();
    public ParameterConfiguration Required();
    public ParameterConfiguration HasDefaultValue(string defaultValue);
}
public class Microsoft.OData.ModelBuilder.PrecisionPropertyConfiguration : PrimitivePropertyConfiguration {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Precision>k__BackingField;
    public Nullable`1<int> Precision { get; public set; }
    public PrecisionPropertyConfiguration(PropertyInfo property, StructuralTypeConfiguration declaringType);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(Nullable`1<int> value);
}
public class Microsoft.OData.ModelBuilder.PrimitivePropertyConfiguration : StructuralPropertyConfiguration {
    [CompilerGeneratedAttribute]
private string <DefaultValueString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<EdmPrimitiveTypeKind> <TargetEdmTypeKind>k__BackingField;
    public string DefaultValueString { get; public set; }
    public PropertyKind Kind { get; }
    public Type RelatedClrType { get; }
    public Nullable`1<EdmPrimitiveTypeKind> TargetEdmTypeKind { get; internal set; }
    public PrimitivePropertyConfiguration(PropertyInfo property, StructuralTypeConfiguration declaringType);
    [CompilerGeneratedAttribute]
public string get_DefaultValueString();
    [CompilerGeneratedAttribute]
public void set_DefaultValueString(string value);
    public virtual PropertyKind get_Kind();
    public virtual Type get_RelatedClrType();
    [CompilerGeneratedAttribute]
public Nullable`1<EdmPrimitiveTypeKind> get_TargetEdmTypeKind();
    [CompilerGeneratedAttribute]
internal void set_TargetEdmTypeKind(Nullable`1<EdmPrimitiveTypeKind> value);
    public PrimitivePropertyConfiguration IsNullable();
    public PrimitivePropertyConfiguration IsRequired();
    public PrimitivePropertyConfiguration IsConcurrencyToken();
}
[ExtensionAttribute]
public static class Microsoft.OData.ModelBuilder.PrimitivePropertyConfigurationExtensions : object {
    [ExtensionAttribute]
public static PrimitivePropertyConfiguration AsDate(PrimitivePropertyConfiguration property);
    [ExtensionAttribute]
public static PrimitivePropertyConfiguration AsTimeOfDay(PrimitivePropertyConfiguration property);
}
public class Microsoft.OData.ModelBuilder.PrimitiveTypeConfiguration : object {
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataModelBuilder <ModelBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdmPrimitiveType <EdmPrimitiveType>k__BackingField;
    public Type ClrType { get; }
    public string FullName { get; }
    public string Namespace { get; }
    public string Name { get; }
    public EdmTypeKind Kind { get; }
    public ODataModelBuilder ModelBuilder { get; }
    public IEdmPrimitiveType EdmPrimitiveType { get; }
    internal PrimitiveTypeConfiguration(ODataModelBuilder builder, IEdmPrimitiveType edmType, Type clrType);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ClrType();
    public sealed virtual string get_FullName();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_Name();
    public sealed virtual EdmTypeKind get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual ODataModelBuilder get_ModelBuilder();
    [CompilerGeneratedAttribute]
public IEdmPrimitiveType get_EdmPrimitiveType();
}
public abstract class Microsoft.OData.ModelBuilder.PropertyConfiguration : VocabularyConfigurationsBase {
    private string _name;
    [CompilerGeneratedAttribute]
private StructuralTypeConfiguration <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddedExplicitly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotFilterable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoExpand>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableAutoExpandWhenSelectIsPresent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotSortable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotNavigable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotExpandable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotCountable>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryConfiguration <QueryConfiguration>k__BackingField;
    public string Name { get; public set; }
    public StructuralTypeConfiguration DeclaringType { get; }
    public PropertyInfo PropertyInfo { get; }
    public Type RelatedClrType { get; }
    public PropertyKind Kind { get; }
    public bool AddedExplicitly { get; public set; }
    public bool IsRestricted { get; }
    public bool NotFilterable { get; public set; }
    public bool AutoExpand { get; public set; }
    public bool DisableAutoExpandWhenSelectIsPresent { get; public set; }
    public bool NonFilterable { get; public set; }
    public bool NotSortable { get; public set; }
    public bool Unsortable { get; public set; }
    public bool NotNavigable { get; public set; }
    public bool NotExpandable { get; public set; }
    public bool NotCountable { get; public set; }
    public int Order { get; public set; }
    public QueryConfiguration QueryConfiguration { get; public set; }
    protected PropertyConfiguration(PropertyInfo property, StructuralTypeConfiguration declaringType);
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public StructuralTypeConfiguration get_DeclaringType();
    [CompilerGeneratedAttribute]
public PropertyInfo get_PropertyInfo();
    public abstract virtual Type get_RelatedClrType();
    public abstract virtual PropertyKind get_Kind();
    [CompilerGeneratedAttribute]
public bool get_AddedExplicitly();
    [CompilerGeneratedAttribute]
public void set_AddedExplicitly(bool value);
    public bool get_IsRestricted();
    [CompilerGeneratedAttribute]
public bool get_NotFilterable();
    [CompilerGeneratedAttribute]
public void set_NotFilterable(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoExpand();
    [CompilerGeneratedAttribute]
public void set_AutoExpand(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableAutoExpandWhenSelectIsPresent();
    [CompilerGeneratedAttribute]
public void set_DisableAutoExpandWhenSelectIsPresent(bool value);
    public bool get_NonFilterable();
    public void set_NonFilterable(bool value);
    [CompilerGeneratedAttribute]
public bool get_NotSortable();
    [CompilerGeneratedAttribute]
public void set_NotSortable(bool value);
    public bool get_Unsortable();
    public void set_Unsortable(bool value);
    [CompilerGeneratedAttribute]
public bool get_NotNavigable();
    [CompilerGeneratedAttribute]
public void set_NotNavigable(bool value);
    [CompilerGeneratedAttribute]
public bool get_NotExpandable();
    [CompilerGeneratedAttribute]
public void set_NotExpandable(bool value);
    [CompilerGeneratedAttribute]
public bool get_NotCountable();
    [CompilerGeneratedAttribute]
public void set_NotCountable(bool value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public QueryConfiguration get_QueryConfiguration();
    [CompilerGeneratedAttribute]
public void set_QueryConfiguration(QueryConfiguration value);
    public PropertyConfiguration IsNotFilterable();
    public PropertyConfiguration IsNonFilterable();
    public PropertyConfiguration IsFilterable();
    public PropertyConfiguration IsNotSortable();
    public PropertyConfiguration IsUnsortable();
    public PropertyConfiguration IsSortable();
    public PropertyConfiguration IsNotNavigable();
    public PropertyConfiguration IsNavigable();
    public PropertyConfiguration IsNotExpandable();
    public PropertyConfiguration IsExpandable();
    public PropertyConfiguration IsNotCountable();
    public PropertyConfiguration IsCountable();
    public PropertyConfiguration Count();
    public PropertyConfiguration Count(bool enabled);
    public PropertyConfiguration OrderBy();
    public PropertyConfiguration OrderBy(String[] properties);
    public PropertyConfiguration OrderBy(bool enabled);
    public PropertyConfiguration OrderBy(bool enabled, String[] properties);
    public PropertyConfiguration Filter();
    public PropertyConfiguration Filter(String[] properties);
    public PropertyConfiguration Filter(bool enabled);
    public PropertyConfiguration Filter(bool enabled, String[] properties);
    public PropertyConfiguration Select(SelectExpandType selectType, String[] properties);
    public PropertyConfiguration Select(String[] properties);
    public PropertyConfiguration Select(SelectExpandType selectType);
    public PropertyConfiguration Select();
    public PropertyConfiguration Page(Nullable`1<int> maxTopValue, Nullable`1<int> pageSizeValue);
    public PropertyConfiguration Page();
    public PropertyConfiguration Expand(int maxDepth, SelectExpandType expandType, String[] properties);
    public PropertyConfiguration Expand(String[] properties);
    public PropertyConfiguration Expand(int maxDepth, String[] properties);
    public PropertyConfiguration Expand(SelectExpandType expandType, String[] properties);
    public PropertyConfiguration Expand(SelectExpandType expandType, int maxDepth);
    public PropertyConfiguration Expand(int maxDepth);
    public PropertyConfiguration Expand(SelectExpandType expandType);
    public PropertyConfiguration Expand();
}
[ExtensionAttribute]
internal static class Microsoft.OData.ModelBuilder.PropertyConfigurationExtensions : object {
    [ExtensionAttribute]
internal static bool NonNullable(PropertyConfiguration edmProperty);
    [ExtensionAttribute]
internal static bool ReturnMaybeNull(PropertyConfiguration edmProperty);
    [ExtensionAttribute]
internal static void SetNonNullable(PropertyConfiguration edmProperty);
}
public enum Microsoft.OData.ModelBuilder.PropertyKind : Enum {
    public int value__;
    public static PropertyKind Primitive;
    public static PropertyKind Complex;
    public static PropertyKind Collection;
    public static PropertyKind Navigation;
    public static PropertyKind Enum;
    public static PropertyKind Dynamic;
    public static PropertyKind InstanceAnnotations;
    public static PropertyKind Untyped;
}
internal class Microsoft.OData.ModelBuilder.PropertyPairSelectorVisitor : ExpressionVisitor {
    [CompilerGeneratedAttribute]
private IDictionary`2<PropertyInfo, PropertyInfo> <Properties>k__BackingField;
    public IDictionary`2<PropertyInfo, PropertyInfo> Properties { get; }
    [CompilerGeneratedAttribute]
public IDictionary`2<PropertyInfo, PropertyInfo> get_Properties();
    public static IDictionary`2<PropertyInfo, PropertyInfo> GetSelectedProperty(Expression exp);
    public virtual Expression Visit(Expression exp);
    protected virtual Expression VisitLambda(Expression`1<T> lambda);
    private Expression VisitEqual(Expression exp);
    private PropertyInfo VisitMemberProperty(Expression node);
    private static PropertyInfo GetPropertyInfo(MemberExpression memberNode);
}
internal class Microsoft.OData.ModelBuilder.PropertySelectorVisitor : ExpressionVisitor {
    private List`1<PropertyInfo> _properties;
    public PropertyInfo Property { get; }
    public ICollection`1<PropertyInfo> Properties { get; }
    internal PropertySelectorVisitor(Expression exp);
    public PropertyInfo get_Property();
    public ICollection`1<PropertyInfo> get_Properties();
    protected virtual Expression VisitMember(MemberExpression node);
    public static PropertyInfo GetSelectedProperty(Expression exp);
    public static ICollection`1<PropertyInfo> GetSelectedProperties(Expression exp);
    public virtual Expression Visit(Expression exp);
    protected virtual Expression VisitLambda(Expression`1<T> lambda);
}
public class Microsoft.OData.ModelBuilder.ReturnedEntitySetAnnotation : object {
    [CompilerGeneratedAttribute]
private string <EntitySetName>k__BackingField;
    public string EntitySetName { get; }
    public ReturnedEntitySetAnnotation(string entitySetName);
    [CompilerGeneratedAttribute]
public string get_EntitySetName();
}
[AttributeUsageAttribute("132")]
public class Microsoft.OData.ModelBuilder.SelectAttribute : Attribute {
    private Dictionary`2<string, SelectExpandType> _selectConfigurations;
    private SelectExpandType _selectType;
    private Nullable`1<SelectExpandType> _defaultSelectType;
    public Dictionary`2<string, SelectExpandType> SelectConfigurations { get; }
    public SelectExpandType SelectType { get; public set; }
    internal Nullable`1<SelectExpandType> DefaultSelectType { get; internal set; }
    public SelectAttribute(String[] properties);
    public Dictionary`2<string, SelectExpandType> get_SelectConfigurations();
    public SelectExpandType get_SelectType();
    public void set_SelectType(SelectExpandType value);
    internal Nullable`1<SelectExpandType> get_DefaultSelectType();
    internal void set_DefaultSelectType(Nullable`1<SelectExpandType> value);
}
public enum Microsoft.OData.ModelBuilder.SelectExpandType : Enum {
    public int value__;
    public static SelectExpandType Allowed;
    public static SelectExpandType Automatic;
    public static SelectExpandType Disabled;
}
[AttributeUsageAttribute("128")]
public class Microsoft.OData.ModelBuilder.SingletonAttribute : Attribute {
}
public class Microsoft.OData.ModelBuilder.SingletonConfiguration : NavigationSourceConfiguration {
    public SingletonConfiguration(ODataModelBuilder modelBuilder, Type entityClrType, string name);
    public SingletonConfiguration(ODataModelBuilder modelBuilder, EntityTypeConfiguration entityType, string name);
}
public class Microsoft.OData.ModelBuilder.SingletonConfiguration`1 : NavigationSourceConfiguration`1<TEntityType> {
    internal SingletonConfiguration`1(ODataModelBuilder modelBuilder, string name);
    internal SingletonConfiguration`1(ODataModelBuilder modelBuilder, SingletonConfiguration configuration);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.OData.ModelBuilder.SRResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentMustBeGreaterThanOrEqualTo { get; }
    internal static string ArgumentMustBeLessThanOrEqualTo { get; }
    internal static string ArgumentMustBeOfType { get; }
    internal static string ArgumentNullOrEmpty { get; }
    internal static string ArgumentNullOrWhitespace { get; }
    internal static string CannotAutoCreateMultipleCandidates { get; }
    internal static string CannotDefineKeysOnDerivedTypes { get; }
    internal static string CannotInferEdmType { get; }
    internal static string CannotReconfigEntityTypeAsComplexType { get; }
    internal static string CannotRedefineBaseTypeProperty { get; }
    internal static string CollectionNavigationPropertyEntityTypeDoesntHaveKeyDefined { get; }
    internal static string CollectionPropertiesMustReturnIEnumerable { get; }
    internal static string DependentAndPrincipalTypeNotMatch { get; }
    internal static string EdmTypeNotSupported { get; }
    internal static string EntitySetAlreadyConfiguredDifferentEntityType { get; }
    internal static string EntitySetNameAlreadyConfiguredAsSingleton { get; }
    internal static string EntitySetNotFoundForName { get; }
    internal static string EntitySetTypeHasNoKeys { get; }
    internal static string EnumTypeDoesNotExist { get; }
    internal static string EnumValueCannotBeLong { get; }
    internal static string EqualExpressionsMustHaveSameTypes { get; }
    internal static string GetEdmModelCalledMoreThanOnce { get; }
    internal static string InvalidBindingParameterType { get; }
    internal static string InvalidEntitySetName { get; }
    internal static string InvalidInstanceAnnotationName { get; }
    internal static string InvalidPropertyInfoForDynamicPropertyAnnotation { get; }
    internal static string InvalidPropertyMapping { get; }
    internal static string InvalidSingletonName { get; }
    internal static string LambdaExpressionMustHaveExactlyOneParameter { get; }
    internal static string LambdaExpressionMustHaveExactlyTwoParameters { get; }
    internal static string ManyNavigationPropertiesCannotBeChanged { get; }
    internal static string ManyToManyNavigationPropertyMustReturnCollection { get; }
    internal static string MemberExpressionsMustBeBoundToLambdaParameter { get; }
    internal static string MemberExpressionsMustBeProperties { get; }
    internal static string MoreThanOneAnnotationPropertyContainerFound { get; }
    internal static string MoreThanOneDynamicPropertyContainerFound { get; }
    internal static string MoreThanOneOperationFound { get; }
    internal static string MoreThanOneOverloadActionBoundToSameTypeFound { get; }
    internal static string MoreThanOneUnboundActionFound { get; }
    internal static string MultipleAttributesFound { get; }
    internal static string MultipleMatchingClrTypesForEdmType { get; }
    internal static string MustBeCollectionProperty { get; }
    internal static string MustBeComplexProperty { get; }
    internal static string MustBeDateTimeProperty { get; }
    internal static string MustBeEnumProperty { get; }
    internal static string MustBeNavigationProperty { get; }
    internal static string MustBePrimitiveProperty { get; }
    internal static string MustBePrimitiveType { get; }
    internal static string MustBeTimeSpanProperty { get; }
    internal static string MustBeUntypedProperty { get; }
    internal static string MustHaveMatchingMultiplicity { get; }
    internal static string NavigationPropertyBindingPathIsNotValid { get; }
    internal static string NavigationPropertyBindingPathNotInHierarchy { get; }
    internal static string NavigationPropertyBindingPathNotSupported { get; }
    internal static string NavigationPropertyNotInHierarchy { get; }
    internal static string NoMatchingIEdmTypeFound { get; }
    internal static string OperationHasInvalidEntitySetPath { get; }
    internal static string PropertyAlreadyDefinedInDerivedType { get; }
    internal static string PropertyDoesNotBelongToType { get; }
    internal static string RebindingNotSupported { get; }
    internal static string ReferentialConstraintAlreadyConfigured { get; }
    internal static string ReferentialConstraintOnManyNavigationPropertyNotSupported { get; }
    internal static string ReferentialConstraintPropertyTypeNotValid { get; }
    internal static string ReturnEntityCollectionWithoutEntitySet { get; }
    internal static string ReturnEntityWithoutEntitySet { get; }
    internal static string SingletonAlreadyConfiguredDifferentEntityType { get; }
    internal static string SingletonNameAlreadyConfiguredAsEntitySet { get; }
    internal static string TargetEntityTypeMissing { get; }
    internal static string TypeCannotBeComplexWasEntity { get; }
    internal static string TypeCannotBeEntityWasComplex { get; }
    internal static string TypeCannotBeEnum { get; }
    internal static string TypeDoesNotInheritFromBaseType { get; }
    internal static string UnsupportedEdmTypeKind { get; }
    internal static string UnsupportedExpressionNodeType { get; }
    internal static string UnsupportedExpressionNodeTypeWithName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentMustBeGreaterThanOrEqualTo();
    internal static string get_ArgumentMustBeLessThanOrEqualTo();
    internal static string get_ArgumentMustBeOfType();
    internal static string get_ArgumentNullOrEmpty();
    internal static string get_ArgumentNullOrWhitespace();
    internal static string get_CannotAutoCreateMultipleCandidates();
    internal static string get_CannotDefineKeysOnDerivedTypes();
    internal static string get_CannotInferEdmType();
    internal static string get_CannotReconfigEntityTypeAsComplexType();
    internal static string get_CannotRedefineBaseTypeProperty();
    internal static string get_CollectionNavigationPropertyEntityTypeDoesntHaveKeyDefined();
    internal static string get_CollectionPropertiesMustReturnIEnumerable();
    internal static string get_DependentAndPrincipalTypeNotMatch();
    internal static string get_EdmTypeNotSupported();
    internal static string get_EntitySetAlreadyConfiguredDifferentEntityType();
    internal static string get_EntitySetNameAlreadyConfiguredAsSingleton();
    internal static string get_EntitySetNotFoundForName();
    internal static string get_EntitySetTypeHasNoKeys();
    internal static string get_EnumTypeDoesNotExist();
    internal static string get_EnumValueCannotBeLong();
    internal static string get_EqualExpressionsMustHaveSameTypes();
    internal static string get_GetEdmModelCalledMoreThanOnce();
    internal static string get_InvalidBindingParameterType();
    internal static string get_InvalidEntitySetName();
    internal static string get_InvalidInstanceAnnotationName();
    internal static string get_InvalidPropertyInfoForDynamicPropertyAnnotation();
    internal static string get_InvalidPropertyMapping();
    internal static string get_InvalidSingletonName();
    internal static string get_LambdaExpressionMustHaveExactlyOneParameter();
    internal static string get_LambdaExpressionMustHaveExactlyTwoParameters();
    internal static string get_ManyNavigationPropertiesCannotBeChanged();
    internal static string get_ManyToManyNavigationPropertyMustReturnCollection();
    internal static string get_MemberExpressionsMustBeBoundToLambdaParameter();
    internal static string get_MemberExpressionsMustBeProperties();
    internal static string get_MoreThanOneAnnotationPropertyContainerFound();
    internal static string get_MoreThanOneDynamicPropertyContainerFound();
    internal static string get_MoreThanOneOperationFound();
    internal static string get_MoreThanOneOverloadActionBoundToSameTypeFound();
    internal static string get_MoreThanOneUnboundActionFound();
    internal static string get_MultipleAttributesFound();
    internal static string get_MultipleMatchingClrTypesForEdmType();
    internal static string get_MustBeCollectionProperty();
    internal static string get_MustBeComplexProperty();
    internal static string get_MustBeDateTimeProperty();
    internal static string get_MustBeEnumProperty();
    internal static string get_MustBeNavigationProperty();
    internal static string get_MustBePrimitiveProperty();
    internal static string get_MustBePrimitiveType();
    internal static string get_MustBeTimeSpanProperty();
    internal static string get_MustBeUntypedProperty();
    internal static string get_MustHaveMatchingMultiplicity();
    internal static string get_NavigationPropertyBindingPathIsNotValid();
    internal static string get_NavigationPropertyBindingPathNotInHierarchy();
    internal static string get_NavigationPropertyBindingPathNotSupported();
    internal static string get_NavigationPropertyNotInHierarchy();
    internal static string get_NoMatchingIEdmTypeFound();
    internal static string get_OperationHasInvalidEntitySetPath();
    internal static string get_PropertyAlreadyDefinedInDerivedType();
    internal static string get_PropertyDoesNotBelongToType();
    internal static string get_RebindingNotSupported();
    internal static string get_ReferentialConstraintAlreadyConfigured();
    internal static string get_ReferentialConstraintOnManyNavigationPropertyNotSupported();
    internal static string get_ReferentialConstraintPropertyTypeNotValid();
    internal static string get_ReturnEntityCollectionWithoutEntitySet();
    internal static string get_ReturnEntityWithoutEntitySet();
    internal static string get_SingletonAlreadyConfiguredDifferentEntityType();
    internal static string get_SingletonNameAlreadyConfiguredAsEntitySet();
    internal static string get_TargetEntityTypeMissing();
    internal static string get_TypeCannotBeComplexWasEntity();
    internal static string get_TypeCannotBeEntityWasComplex();
    internal static string get_TypeCannotBeEnum();
    internal static string get_TypeDoesNotInheritFromBaseType();
    internal static string get_UnsupportedEdmTypeKind();
    internal static string get_UnsupportedExpressionNodeType();
    internal static string get_UnsupportedExpressionNodeTypeWithName();
}
public abstract class Microsoft.OData.ModelBuilder.StructuralPropertyConfiguration : PropertyConfiguration {
    [CompilerGeneratedAttribute]
private bool <NullableProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConcurrencyToken>k__BackingField;
    public bool NullableProperty { get; public set; }
    public bool ConcurrencyToken { get; public set; }
    protected StructuralPropertyConfiguration(PropertyInfo property, StructuralTypeConfiguration declaringType);
    [CompilerGeneratedAttribute]
public bool get_NullableProperty();
    [CompilerGeneratedAttribute]
public void set_NullableProperty(bool value);
    [CompilerGeneratedAttribute]
public bool get_ConcurrencyToken();
    [CompilerGeneratedAttribute]
public void set_ConcurrencyToken(bool value);
}
public abstract class Microsoft.OData.ModelBuilder.StructuralTypeConfiguration : VocabularyConfigurationsBase {
    private string _namespace;
    private string _name;
    private StructuralTypeConfiguration _baseType;
    private bool _baseTypeConfigured;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <DynamicPropertyDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <InstanceAnnotationsContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsAbstract>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryConfiguration <QueryConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddedExplicitly>k__BackingField;
    [CompilerGeneratedAttribute]
private ODataModelBuilder <ModelBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PropertyInfo> <RemovedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<PropertyInfo, PropertyConfiguration> <ExplicitProperties>k__BackingField;
    public EdmTypeKind Kind { get; }
    public Type ClrType { get; private set; }
    public string FullName { get; }
    public string Namespace { get; public set; }
    public string Name { get; public set; }
    public bool IsOpen { get; }
    public PropertyInfo DynamicPropertyDictionary { get; private set; }
    public bool HasInstanceAnnotations { get; }
    public PropertyInfo InstanceAnnotationsContainer { get; private set; }
    public Nullable`1<bool> IsAbstract { get; public set; }
    public bool BaseTypeConfigured { get; }
    public IEnumerable`1<PropertyConfiguration> Properties { get; }
    public ReadOnlyCollection`1<PropertyInfo> IgnoredProperties { get; }
    public IEnumerable`1<NavigationPropertyConfiguration> NavigationProperties { get; }
    public QueryConfiguration QueryConfiguration { get; public set; }
    public bool AddedExplicitly { get; public set; }
    public ODataModelBuilder ModelBuilder { get; private set; }
    protected internal IList`1<PropertyInfo> RemovedProperties { get; private set; }
    protected internal IDictionary`2<PropertyInfo, PropertyConfiguration> ExplicitProperties { get; private set; }
    protected internal StructuralTypeConfiguration BaseTypeInternal { get; }
    protected StructuralTypeConfiguration(ODataModelBuilder modelBuilder, Type clrType);
    public abstract virtual EdmTypeKind get_Kind();
    [CompilerGeneratedAttribute]
public virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
private void set_ClrType(Type value);
    public virtual string get_FullName();
    public virtual string get_Namespace();
    public virtual void set_Namespace(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public bool get_IsOpen();
    [CompilerGeneratedAttribute]
public PropertyInfo get_DynamicPropertyDictionary();
    [CompilerGeneratedAttribute]
private void set_DynamicPropertyDictionary(PropertyInfo value);
    public bool get_HasInstanceAnnotations();
    [CompilerGeneratedAttribute]
public PropertyInfo get_InstanceAnnotationsContainer();
    [CompilerGeneratedAttribute]
private void set_InstanceAnnotationsContainer(PropertyInfo value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsAbstract();
    [CompilerGeneratedAttribute]
public virtual void set_IsAbstract(Nullable`1<bool> value);
    public virtual bool get_BaseTypeConfigured();
    public IEnumerable`1<PropertyConfiguration> get_Properties();
    public ReadOnlyCollection`1<PropertyInfo> get_IgnoredProperties();
    public virtual IEnumerable`1<NavigationPropertyConfiguration> get_NavigationProperties();
    [CompilerGeneratedAttribute]
public QueryConfiguration get_QueryConfiguration();
    [CompilerGeneratedAttribute]
public void set_QueryConfiguration(QueryConfiguration value);
    [CompilerGeneratedAttribute]
public bool get_AddedExplicitly();
    [CompilerGeneratedAttribute]
public void set_AddedExplicitly(bool value);
    [CompilerGeneratedAttribute]
public virtual ODataModelBuilder get_ModelBuilder();
    [CompilerGeneratedAttribute]
private void set_ModelBuilder(ODataModelBuilder value);
    [CompilerGeneratedAttribute]
protected internal IList`1<PropertyInfo> get_RemovedProperties();
    [CompilerGeneratedAttribute]
private void set_RemovedProperties(IList`1<PropertyInfo> value);
    [CompilerGeneratedAttribute]
protected internal IDictionary`2<PropertyInfo, PropertyConfiguration> get_ExplicitProperties();
    [CompilerGeneratedAttribute]
private void set_ExplicitProperties(IDictionary`2<PropertyInfo, PropertyConfiguration> value);
    protected internal virtual StructuralTypeConfiguration get_BaseTypeInternal();
    internal virtual void AbstractImpl();
    internal virtual void DerivesFromNothingImpl();
    internal virtual void DerivesFromImpl(StructuralTypeConfiguration baseType);
    public virtual PrimitivePropertyConfiguration AddProperty(PropertyInfo propertyInfo);
    public virtual EnumPropertyConfiguration AddEnumProperty(PropertyInfo propertyInfo);
    public virtual ComplexPropertyConfiguration AddComplexProperty(PropertyInfo propertyInfo);
    public virtual UntypedPropertyConfiguration AddUntypedProperty(PropertyInfo propertyInfo);
    public virtual CollectionPropertyConfiguration AddCollectionProperty(PropertyInfo propertyInfo);
    public virtual void AddDynamicPropertyDictionary(PropertyInfo propertyInfo);
    public virtual void AddInstanceAnnotationContainer(PropertyInfo propertyInfo);
    public virtual void RemoveProperty(PropertyInfo propertyInfo);
    public virtual NavigationPropertyConfiguration AddNavigationProperty(PropertyInfo navigationProperty, EdmMultiplicity multiplicity);
    public virtual NavigationPropertyConfiguration AddContainedNavigationProperty(PropertyInfo navigationProperty, EdmMultiplicity multiplicity);
    private NavigationPropertyConfiguration AddNavigationProperty(PropertyInfo navigationProperty, EdmMultiplicity multiplicity, bool containsTarget);
    internal T ValidatePropertyNotAlreadyDefinedOtherTypes(PropertyInfo propertyInfo, string typeErrorMessage);
    internal void ValidatePropertyNotAlreadyDefinedInBaseTypes(PropertyInfo propertyInfo);
    internal void ValidatePropertyNotAlreadyDefinedInDerivedTypes(PropertyInfo propertyInfo);
}
public abstract class Microsoft.OData.ModelBuilder.StructuralTypeConfiguration`1 : object {
    [CompilerGeneratedAttribute]
private StructuralTypeConfiguration <Configuration>k__BackingField;
    public IEnumerable`1<PropertyConfiguration> Properties { get; }
    public string FullName { get; }
    public string Namespace { get; public set; }
    public string Name { get; public set; }
    public bool IsOpen { get; }
    internal StructuralTypeConfiguration Configuration { get; }
    protected StructuralTypeConfiguration`1(StructuralTypeConfiguration configuration);
    public IEnumerable`1<PropertyConfiguration> get_Properties();
    public string get_FullName();
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_Name();
    public void set_Name(string value);
    public bool get_IsOpen();
    [CompilerGeneratedAttribute]
internal StructuralTypeConfiguration get_Configuration();
    public virtual void Ignore(Expression`1<Func`2<TStructuralType, TProperty>> propertyExpression);
    public LengthPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, string>> propertyExpression);
    public LengthPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Byte[]>> propertyExpression);
    public PrimitivePropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Stream>> propertyExpression);
    public DecimalPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Nullable`1<decimal>>> propertyExpression);
    public DecimalPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, decimal>> propertyExpression);
    public PrecisionPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Nullable`1<TimeOfDay>>> propertyExpression);
    public PrecisionPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, TimeOfDay>> propertyExpression);
    public PrecisionPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Nullable`1<TimeOnly>>> propertyExpression);
    public PrecisionPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, TimeOnly>> propertyExpression);
    public PrecisionPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Nullable`1<TimeSpan>>> propertyExpression);
    public PrecisionPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, TimeSpan>> propertyExpression);
    public PrecisionPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Nullable`1<DateTimeOffset>>> propertyExpression);
    public PrecisionPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, DateTimeOffset>> propertyExpression);
    public UntypedPropertyConfiguration Property(Expression`1<Func`2<TStructuralType, object>> propertyExpression);
    public PrimitivePropertyConfiguration Property(Expression`1<Func`2<TStructuralType, Nullable`1<T>>> propertyExpression);
    public PrimitivePropertyConfiguration Property(Expression`1<Func`2<TStructuralType, T>> propertyExpression);
    public EnumPropertyConfiguration EnumProperty(Expression`1<Func`2<TStructuralType, Nullable`1<T>>> propertyExpression);
    public EnumPropertyConfiguration EnumProperty(Expression`1<Func`2<TStructuralType, T>> propertyExpression);
    public ComplexPropertyConfiguration ComplexProperty(Expression`1<Func`2<TStructuralType, TComplexType>> propertyExpression);
    public CollectionPropertyConfiguration CollectionProperty(Expression`1<Func`2<TStructuralType, IEnumerable`1<TElementType>>> propertyExpression);
    public void HasDynamicProperties(Expression`1<Func`2<TStructuralType, IDictionary`2<string, object>>> propertyExpression);
    public void HasInstanceAnnotations(Expression`1<Func`2<TStructuralType, T>> propertyExpression);
    public NavigationPropertyConfiguration HasMany(Expression`1<Func`2<TStructuralType, IEnumerable`1<TTargetEntity>>> navigationPropertyExpression);
    public NavigationPropertyConfiguration HasOptional(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression);
    public NavigationPropertyConfiguration HasOptional(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression, Expression`1<Func`3<TStructuralType, TTargetEntity, bool>> referentialConstraintExpression);
    public NavigationPropertyConfiguration HasOptional(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression, Expression`1<Func`3<TStructuralType, TTargetEntity, bool>> referentialConstraintExpression, Expression`1<Func`2<TTargetEntity, IEnumerable`1<TStructuralType>>> partnerExpression);
    public NavigationPropertyConfiguration HasOptional(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression, Expression`1<Func`3<TStructuralType, TTargetEntity, bool>> referentialConstraintExpression, Expression`1<Func`2<TTargetEntity, TStructuralType>> partnerExpression);
    public NavigationPropertyConfiguration HasRequired(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression);
    public NavigationPropertyConfiguration HasRequired(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression, Expression`1<Func`3<TStructuralType, TTargetEntity, bool>> referentialConstraintExpression, Expression`1<Func`2<TTargetEntity, IEnumerable`1<TStructuralType>>> partnerExpression);
    public NavigationPropertyConfiguration HasRequired(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression, Expression`1<Func`3<TStructuralType, TTargetEntity, bool>> referentialConstraintExpression);
    public NavigationPropertyConfiguration HasRequired(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression, Expression`1<Func`3<TStructuralType, TTargetEntity, bool>> referentialConstraintExpression, Expression`1<Func`2<TTargetEntity, TStructuralType>> partnerExpression);
    private NavigationPropertyConfiguration HasNavigationProperty(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression, Expression`1<Func`3<TStructuralType, TTargetEntity, bool>> referentialConstraintExpression, EdmMultiplicity multiplicity, Expression partnerProperty);
    public NavigationPropertyConfiguration ContainsMany(Expression`1<Func`2<TStructuralType, IEnumerable`1<TTargetEntity>>> navigationPropertyExpression);
    public NavigationPropertyConfiguration ContainsOptional(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression);
    public NavigationPropertyConfiguration ContainsRequired(Expression`1<Func`2<TStructuralType, TTargetEntity>> navigationPropertyExpression);
    public StructuralTypeConfiguration`1<TStructuralType> Count();
    public StructuralTypeConfiguration`1<TStructuralType> Count(bool enabled);
    public StructuralTypeConfiguration`1<TStructuralType> OrderBy(bool enabled, String[] properties);
    public StructuralTypeConfiguration`1<TStructuralType> OrderBy(String[] properties);
    public StructuralTypeConfiguration`1<TStructuralType> OrderBy(bool enabled);
    public StructuralTypeConfiguration`1<TStructuralType> OrderBy();
    public StructuralTypeConfiguration`1<TStructuralType> Filter(bool enabled, String[] properties);
    public StructuralTypeConfiguration`1<TStructuralType> Filter(String[] properties);
    public StructuralTypeConfiguration`1<TStructuralType> Filter(bool enabled);
    public StructuralTypeConfiguration`1<TStructuralType> Filter();
    public StructuralTypeConfiguration`1<TStructuralType> Select(SelectExpandType selectType, String[] properties);
    public StructuralTypeConfiguration`1<TStructuralType> Select(String[] properties);
    public StructuralTypeConfiguration`1<TStructuralType> Select(SelectExpandType selectType);
    public StructuralTypeConfiguration`1<TStructuralType> Select();
    public StructuralTypeConfiguration`1<TStructuralType> Page(Nullable`1<int> maxTopValue, Nullable`1<int> pageSizeValue);
    public StructuralTypeConfiguration`1<TStructuralType> Page();
    public StructuralTypeConfiguration`1<TStructuralType> Expand(int maxDepth, SelectExpandType expandType, String[] properties);
    public StructuralTypeConfiguration`1<TStructuralType> Expand(String[] properties);
    public StructuralTypeConfiguration`1<TStructuralType> Expand(int maxDepth, String[] properties);
    public StructuralTypeConfiguration`1<TStructuralType> Expand(SelectExpandType expandType, String[] properties);
    public StructuralTypeConfiguration`1<TStructuralType> Expand(SelectExpandType expandType, int maxDepth);
    public StructuralTypeConfiguration`1<TStructuralType> Expand(int maxDepth);
    public StructuralTypeConfiguration`1<TStructuralType> Expand(SelectExpandType expandType);
    public StructuralTypeConfiguration`1<TStructuralType> Expand();
    internal NavigationPropertyConfiguration GetOrCreateNavigationProperty(Expression navigationPropertyExpression, EdmMultiplicity multiplicity);
    internal NavigationPropertyConfiguration GetOrCreateContainedNavigationProperty(Expression navigationPropertyExpression, EdmMultiplicity multiplicity);
    private PrimitivePropertyConfiguration GetPrimitivePropertyConfiguration(Expression propertyExpression, bool nullable);
    private EnumPropertyConfiguration GetEnumPropertyConfiguration(Expression propertyExpression, bool nullable);
    private ComplexPropertyConfiguration GetComplexPropertyConfiguration(Expression propertyExpression, bool nullable);
    private CollectionPropertyConfiguration GetCollectionPropertyConfiguration(Expression propertyExpression, bool nullable);
}
[ExtensionAttribute]
internal static class Microsoft.OData.ModelBuilder.TypeHelper : object {
    [ExtensionAttribute]
public static bool IsGenericTypeDefinition(Type clrType);
    public static bool IsInterface(Type clrType);
    public static bool IsPrimitive(Type clrType);
    public static bool IsTypeAssignableFrom(Type clrType, Type fromType);
    internal static bool IsIQueryable(Type type);
    internal static bool IsQueryPrimitiveType(Type type);
    internal static Type GetInnerMostElementType(Type type);
    internal static Type GetImplementedIEnumerableType(Type type);
    public static Type GetInnerElementType(Type clrType);
    public static Type AsType(MemberInfo memberInfo);
    public static MemberInfo AsMemberInfo(Type clrType);
    public static bool IsClass(Type clrType);
    public static bool IsDateTime(Type clrType);
    public static bool IsDateOnly(Type clrType);
    public static bool IsTimeSpan(Type clrType);
    public static bool IsEnum(Type clrType);
    public static Type GetUnderlyingTypeOrSelf(Type type);
    public static bool IsCollection(Type clrType);
    public static bool IsCollection(Type clrType, Type& elementType);
    public static bool IsVisible(Type clrType);
    public static Type GetBaseType(Type clrType);
    public static bool IsValueType(Type clrType);
    [ExtensionAttribute]
public static bool IsGenericType(Type clrType);
    public static Type ToNullable(Type clrType);
    public static string GetQualifiedName(MemberInfo memberInfo);
    public static bool IsAbstract(Type clrType);
    public static bool IsNullable(Type clrType);
    public static bool IsPublic(Type clrType);
    public static Type GetReflectedType(MemberInfo memberInfo);
    [IteratorStateMachineAttribute("Microsoft.OData.ModelBuilder.TypeHelper/<GetLoadedTypes>d__29")]
internal static IEnumerable`1<Type> GetLoadedTypes(IAssemblyResolver assembliesResolver);
    private static Type GetInnerGenericType(Type interfaceType);
}
[AttributeUsageAttribute("128")]
public class Microsoft.OData.ModelBuilder.UnsortableAttribute : Attribute {
}
public class Microsoft.OData.ModelBuilder.UntypedPropertyConfiguration : StructuralPropertyConfiguration {
    [CompilerGeneratedAttribute]
private string <DefaultValueString>k__BackingField;
    public string DefaultValueString { get; public set; }
    public PropertyKind Kind { get; }
    public Type RelatedClrType { get; }
    public UntypedPropertyConfiguration(PropertyInfo property, StructuralTypeConfiguration declaringType);
    [CompilerGeneratedAttribute]
public string get_DefaultValueString();
    [CompilerGeneratedAttribute]
public void set_DefaultValueString(string value);
    public virtual PropertyKind get_Kind();
    public virtual Type get_RelatedClrType();
    public UntypedPropertyConfiguration IsNullable();
    public UntypedPropertyConfiguration IsRequired();
}
public interface Microsoft.OData.ModelBuilder.Vocabularies.IVocabularyTermConfiguration {
    public Dictionary`2<Type, VocabularyTermConfiguration> VocabularyTermConfigurations { get; }
    public abstract virtual Dictionary`2<Type, VocabularyTermConfiguration> get_VocabularyTermConfigurations();
}
public class Microsoft.OData.ModelBuilder.Vocabularies.VocabularyConfigurationsBase : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, VocabularyTermConfiguration> <VocabularyTermConfigurations>k__BackingField;
    public Dictionary`2<Type, VocabularyTermConfiguration> VocabularyTermConfigurations { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<Type, VocabularyTermConfiguration> get_VocabularyTermConfigurations();
}
[ExtensionAttribute]
public static class Microsoft.OData.ModelBuilder.Vocabularies.VocabularyTermConfigurationShortcutsExtensions : object {
    [ExtensionAttribute]
public static PermissionTypeConfiguration HasScopes(PermissionTypeConfiguration permissionTypeConfiguration, String[] scopeNames);
}
public abstract class Microsoft.OData.ModelBuilder.VocabularyTermConfiguration : object {
    [CompilerGeneratedAttribute]
private EdmVocabularyAnnotationSerializationLocation <Location>k__BackingField;
    public EdmVocabularyAnnotationSerializationLocation Location { get; public set; }
    public string TermName { get; }
    [CompilerGeneratedAttribute]
public EdmVocabularyAnnotationSerializationLocation get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(EdmVocabularyAnnotationSerializationLocation value);
    public abstract virtual string get_TermName();
    public abstract virtual IEdmExpression ToEdmExpression();
    public virtual void SetVocabularyAnnotations(EdmModel model, IEdmVocabularyAnnotatable target);
}
[ExtensionAttribute]
public static class Microsoft.OData.ModelBuilder.VocabularyTermConfigurationExtensions : object {
    [ExtensionAttribute]
internal static IEdmExpression ToEdmExpression(string text);
    [ExtensionAttribute]
public static CallbackSupportedConfiguration HasCallbackSupported(EntitySetConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static ChangeTrackingConfiguration HasChangeTracking(NavigationSourceConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static ChangeTrackingConfiguration HasChangeTracking(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static CountRestrictionsConfiguration HasCountRestrictions(NavigationSourceConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static NavigationRestrictionsConfiguration HasNavigationRestrictions(NavigationSourceConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static IndexableByKeyConfiguration HasIndexableByKey(EntitySetConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static TopSupportedConfiguration HasTopSupported(EntitySetConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static SkipSupportedConfiguration HasSkipSupported(EntitySetConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static ComputeSupportedConfiguration HasComputeSupported(EntitySetConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static SelectSupportConfiguration HasSelectSupport(NavigationSourceConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static FilterFunctionsConfiguration HasFilterFunctions(EntitySetConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static FilterRestrictionsConfiguration HasFilterRestrictions(EntitySetConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static SortRestrictionsConfiguration HasSortRestrictions(EntitySetConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static ExpandRestrictionsConfiguration HasExpandRestrictions(NavigationSourceConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static SearchRestrictionsConfiguration HasSearchRestrictions(EntitySetConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static InsertRestrictionsConfiguration HasInsertRestrictions(EntitySetConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static InsertRestrictionsConfiguration HasInsertRestrictions(EntityTypeConfiguration`1<T> structuredType);
    [ExtensionAttribute]
public static DeepInsertSupportConfiguration HasDeepInsertSupport(EntitySetConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static UpdateRestrictionsConfiguration HasUpdateRestrictions(NavigationSourceConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static UpdateRestrictionsConfiguration HasUpdateRestrictions(EntityTypeConfiguration`1<T> structuredType);
    [ExtensionAttribute]
public static DeepUpdateSupportConfiguration HasDeepUpdateSupport(EntitySetConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static DeleteRestrictionsConfiguration HasDeleteRestrictions(NavigationSourceConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static DeleteRestrictionsConfiguration HasDeleteRestrictions(EntityTypeConfiguration`1<T> structuredType);
    [ExtensionAttribute]
public static CollectionPropertyRestrictionsConfiguration HasCollectionPropertyRestrictions(NavigationSourceConfiguration`1<TEntity> navigationSource, Func`2<CollectionPropertyRestrictionsTypeConfiguration, CollectionPropertyRestrictionsTypeConfiguration> sourceConfigurations);
    [ExtensionAttribute]
public static OperationRestrictionsConfiguration HasOperationRestrictions(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static ModificationQueryOptionsConfiguration HasModificationQueryOptions(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static ReadRestrictionsConfiguration HasReadRestrictions(NavigationSourceConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static MediaLocationUpdateSupportedConfiguration HasMediaLocationUpdateSupported(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static RevisionsConfiguration HasRevisions(NavigationSourceConfiguration`1<TEntity> navigationSource, Func`2<RevisionTypeConfiguration, RevisionTypeConfiguration> sourceConfigurations);
    [ExtensionAttribute]
public static RevisionsConfiguration HasRevisions(VocabularyConfigurationsBase vocabularyConfigurationsBase, Func`2<RevisionTypeConfiguration, RevisionTypeConfiguration> sourceConfigurations);
    [ExtensionAttribute]
public static RevisionsConfiguration HasRevisions(StructuralTypeConfiguration`1<T> structuredType, Func`2<RevisionTypeConfiguration, RevisionTypeConfiguration> sourceConfigurations);
    [ExtensionAttribute]
public static DescriptionConfiguration HasDescription(NavigationSourceConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static DescriptionConfiguration HasDescription(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static DescriptionConfiguration HasDescription(StructuralTypeConfiguration`1<T> structuredType);
    [ExtensionAttribute]
public static LongDescriptionConfiguration HasLongDescription(NavigationSourceConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static LongDescriptionConfiguration HasLongDescription(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static LongDescriptionConfiguration HasLongDescription(StructuralTypeConfiguration`1<T> structuredType);
    [ExtensionAttribute]
public static LinksConfiguration HasLinks(NavigationSourceConfiguration`1<TEntity> navigationSource, Func`2<LinkConfiguration, LinkConfiguration> sourceConfigurations);
    [ExtensionAttribute]
public static LinksConfiguration HasLinks(VocabularyConfigurationsBase vocabularyConfigurationsBase, Func`2<LinkConfiguration, LinkConfiguration> sourceConfigurations);
    [ExtensionAttribute]
public static LinksConfiguration HasLinks(StructuralTypeConfiguration`1<T> structuredType, Func`2<LinkConfiguration, LinkConfiguration> sourceConfigurations);
    [ExtensionAttribute]
public static ExampleConfiguration HasExample(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static ExampleConfiguration HasExample(StructuralTypeConfiguration`1<T> structuredType);
    [ExtensionAttribute]
public static MessagesConfiguration HasMessages(NavigationSourceConfiguration`1<TEntity> navigationSource, Func`2<MessageTypeConfiguration, MessageTypeConfiguration> sourceConfigurations);
    [ExtensionAttribute]
public static MessagesConfiguration HasMessages(VocabularyConfigurationsBase vocabularyConfigurationsBase, Func`2<MessageTypeConfiguration, MessageTypeConfiguration> sourceConfigurations);
    [ExtensionAttribute]
public static MessagesConfiguration HasMessages(StructuralTypeConfiguration`1<T> structuredType, Func`2<MessageTypeConfiguration, MessageTypeConfiguration> sourceConfigurations);
    [ExtensionAttribute]
public static ValueExceptionConfiguration HasValueException(NavigationSourceConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static ValueExceptionConfiguration HasValueException(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static ValueExceptionConfiguration HasValueException(StructuralTypeConfiguration`1<T> structuredType);
    [ExtensionAttribute]
public static ResourceExceptionConfiguration HasResourceException(NavigationSourceConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static ResourceExceptionConfiguration HasResourceException(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static ResourceExceptionConfiguration HasResourceException(StructuralTypeConfiguration`1<T> structuredType);
    [ExtensionAttribute]
public static DataModificationExceptionConfiguration HasDataModificationException(NavigationSourceConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static DataModificationExceptionConfiguration HasDataModificationException(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static DataModificationExceptionConfiguration HasDataModificationException(StructuralTypeConfiguration`1<T> structuredType);
    [ExtensionAttribute]
public static IsLanguageDependentConfiguration HasIsLanguageDependent(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static ResourcePathConfiguration HasResourcePath(NavigationSourceConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static ResourcePathConfiguration HasResourcePath(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static PermissionsConfiguration HasPermissions(EntitySetConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static PermissionsConfiguration HasPermissions(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static PermissionsConfiguration HasPermissions(StructuralTypeConfiguration`1<T> structuredType);
    [ExtensionAttribute]
public static ContentIDConfiguration HasContentID(NavigationSourceConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static ContentIDConfiguration HasContentID(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static ContentIDConfiguration HasContentID(StructuralTypeConfiguration`1<T> structuredType);
    [ExtensionAttribute]
public static ImmutableConfiguration HasImmutable(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static ComputedConfiguration HasComputed(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static ComputedDefaultValueConfiguration HasComputedDefaultValue(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static IsURLConfiguration HasIsURL(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static AcceptableMediaTypesConfiguration HasAcceptableMediaTypes(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static AcceptableMediaTypesConfiguration HasAcceptableMediaTypes(EntityTypeConfiguration`1<T> structuredType);
    [ExtensionAttribute]
public static MediaTypeConfiguration HasMediaType(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static IsMediaTypeConfiguration HasIsMediaType(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static OptimisticConcurrencyConfiguration HasOptimisticConcurrency(EntitySetConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static AdditionalPropertiesConfiguration HasAdditionalProperties(StructuralTypeConfiguration`1<T> structuredType);
    [ExtensionAttribute]
public static AutoExpandConfiguration HasAutoExpand(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static AutoExpandReferencesConfiguration HasAutoExpandReferences(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static MayImplementConfiguration HasMayImplement(NavigationSourceConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static MayImplementConfiguration HasMayImplement(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static MayImplementConfiguration HasMayImplement(StructuralTypeConfiguration`1<T> structuredType);
    [ExtensionAttribute]
public static OrderedConfiguration HasOrdered(EntitySetConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static OrderedConfiguration HasOrdered(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static PositionalInsertConfiguration HasPositionalInsert(EntitySetConfiguration`1<TEntity> navigationSource);
    [ExtensionAttribute]
public static PositionalInsertConfiguration HasPositionalInsert(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static AlternateKeysConfiguration HasAlternateKeys(EntitySetConfiguration`1<TEntity> navigationSource, Func`2<AlternateKeyConfiguration, AlternateKeyConfiguration> sourceConfigurations);
    [ExtensionAttribute]
public static AlternateKeysConfiguration HasAlternateKeys(VocabularyConfigurationsBase vocabularyConfigurationsBase, Func`2<AlternateKeyConfiguration, AlternateKeyConfiguration> sourceConfigurations);
    [ExtensionAttribute]
public static AlternateKeysConfiguration HasAlternateKeys(EntityTypeConfiguration`1<T> structuredType, Func`2<AlternateKeyConfiguration, AlternateKeyConfiguration> sourceConfigurations);
    [ExtensionAttribute]
public static OperationAvailableConfiguration HasOperationAvailable(VocabularyConfigurationsBase vocabularyConfigurationsBase);
    [ExtensionAttribute]
public static void SetVocabularyConfigurationAnnotations(EdmModel model, EdmNavigationSource target, NavigationSourceConfiguration navigationSourceConfiguration);
    [ExtensionAttribute]
public static void SetVocabularyConfigurationAnnotations(EdmModel model, EdmOperation target, OperationConfiguration operationConfiguration);
    [ExtensionAttribute]
public static void SetVocabularyConfigurationAnnotations(EdmModel model, IEdmVocabularyAnnotatable target, IEnumerable`1<VocabularyTermConfiguration> configurations);
    [ExtensionAttribute]
private static TConfiguration GetOrCreateConfiguration(Dictionary`2<Type, VocabularyTermConfiguration> vocabularyConfigurations);
}
