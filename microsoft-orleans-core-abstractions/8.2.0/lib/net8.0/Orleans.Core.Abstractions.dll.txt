[FlagsAttribute]
[GenerateSerializerAttribute]
public enum Orleans.CodeGeneration.InvokeMethodOptions : Enum {
    public int value__;
    public static InvokeMethodOptions None;
    public static InvokeMethodOptions OneWay;
    public static InvokeMethodOptions ReadOnly;
    public static InvokeMethodOptions AlwaysInterleave;
    public static InvokeMethodOptions Unordered;
}
[AttributeUsageAttribute("1024")]
public class Orleans.CodeGeneration.VersionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ushort <Version>k__BackingField;
    public ushort Version { get; private set; }
    public VersionAttribute(ushort version);
    [CompilerGeneratedAttribute]
public ushort get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(ushort value);
    private sealed virtual override void Orleans.Metadata.IGrainInterfacePropertiesProviderAttribute.Populate(IServiceProvider services, Type type, Dictionary`2<string, string> properties);
}
[InvokableCustomInitializerAttribute("AddInvokeMethodOptions", "Mono.Cecil.CustomAttributeArgument")]
[AttributeUsageAttribute("64")]
public class Orleans.Concurrency.AlwaysInterleaveAttribute : Attribute {
}
[IsReadOnlyAttribute]
[GenerateSerializerAttribute]
[ImmutableAttribute]
public class Orleans.Concurrency.Immutable`1 : ValueType {
    [IdAttribute("0")]
public T Value;
    public Immutable`1(T value);
}
[ExtensionAttribute]
public static class Orleans.Concurrency.ImmutableExtensions : object {
    [ExtensionAttribute]
public static Immutable`1<T> AsImmutable(T value);
}
[AttributeUsageAttribute("4")]
public class Orleans.Concurrency.MayInterleaveAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <CallbackMethodName>k__BackingField;
    internal string CallbackMethodName { get; private set; }
    public MayInterleaveAttribute(string callbackMethodName);
    [CompilerGeneratedAttribute]
internal string get_CallbackMethodName();
    [CompilerGeneratedAttribute]
private void set_CallbackMethodName(string value);
    public sealed virtual void Populate(IServiceProvider services, Type grainClass, GrainType grainType, Dictionary`2<string, string> properties);
}
[InvokableCustomInitializerAttribute("AddInvokeMethodOptions", "Mono.Cecil.CustomAttributeArgument")]
[AttributeUsageAttribute("64")]
public class Orleans.Concurrency.OneWayAttribute : Attribute {
}
[InvokableCustomInitializerAttribute("AddInvokeMethodOptions", "Mono.Cecil.CustomAttributeArgument")]
[AttributeUsageAttribute("64")]
public class Orleans.Concurrency.ReadOnlyAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class Orleans.Concurrency.ReentrantAttribute : Attribute {
    public sealed virtual void Populate(IServiceProvider services, Type grainClass, GrainType grainType, Dictionary`2<string, string> properties);
}
[AttributeUsageAttribute("4")]
public class Orleans.Concurrency.StatelessWorkerAttribute : PlacementAttribute {
    public StatelessWorkerAttribute(int maxLocalWorkers);
    public virtual void Populate(IServiceProvider services, Type grainClass, GrainType grainType, Dictionary`2<string, string> properties);
}
[AttributeUsageAttribute("1024")]
public class Orleans.Concurrency.UnorderedAttribute : Attribute {
}
public interface Orleans.Core.Internal.ICallChainReentrantGrainContext {
    public abstract virtual void OnEnterReentrantSection(Guid reentrancyId);
    public abstract virtual void OnExitReentrantSection(Guid reentrancyId);
}
public interface Orleans.Core.Internal.IGrainManagementExtension {
    public abstract virtual ValueTask DeactivateOnIdle();
    public abstract virtual ValueTask MigrateOnIdle();
}
public interface Orleans.Core.IStorage {
    public string Etag { get; }
    public bool RecordExists { get; }
    public abstract virtual string get_Etag();
    public abstract virtual bool get_RecordExists();
    public abstract virtual Task ClearStateAsync();
    public abstract virtual Task WriteStateAsync();
    public abstract virtual Task ReadStateAsync();
}
public interface Orleans.Core.IStorage`1 {
    public TState State { get; public set; }
    public abstract virtual TState get_State();
    public abstract virtual void set_State(TState value);
}
[IsReadOnlyAttribute]
public class Orleans.DeactivationReason : ValueType {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private DeactivationReasonCode <ReasonCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public string Description { get; }
    public DeactivationReasonCode ReasonCode { get; }
    public Exception Exception { get; }
    public DeactivationReason(DeactivationReasonCode code, string text);
    public DeactivationReason(DeactivationReasonCode code, Exception exception, string text);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public DeactivationReasonCode get_ReasonCode();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    public virtual string ToString();
}
[GenerateSerializerAttribute]
public enum Orleans.DeactivationReasonCode : Enum {
    public byte value__;
    public static DeactivationReasonCode None;
    public static DeactivationReasonCode ShuttingDown;
    public static DeactivationReasonCode ActivationFailed;
    public static DeactivationReasonCode InternalFailure;
    public static DeactivationReasonCode ActivationIdle;
    public static DeactivationReasonCode ActivationUnresponsive;
    public static DeactivationReasonCode DuplicateActivation;
    public static DeactivationReasonCode IncompatibleRequest;
    public static DeactivationReasonCode ApplicationError;
    public static DeactivationReasonCode ApplicationRequested;
    public static DeactivationReasonCode Migrating;
}
public enum Orleans.ErrorCode : Enum {
    public int value__;
    public static ErrorCode Runtime;
    public static ErrorCode Runtime_Error_100001;
    public static ErrorCode Runtime_Error_100002;
    public static ErrorCode Runtime_Error_100003;
    public static ErrorCode Runtime_Error_100004;
    public static ErrorCode Runtime_Error_100005;
    public static ErrorCode Runtime_Error_100006;
    public static ErrorCode Runtime_Error_100007;
    public static ErrorCode Runtime_Error_100008;
    public static ErrorCode Runtime_Error_100009;
    public static ErrorCode Runtime_Error_100010;
    public static ErrorCode Runtime_Error_100011;
    public static ErrorCode Runtime_Error_100012;
    public static ErrorCode Runtime_Error_100013;
    public static ErrorCode Runtime_Error_100014;
    public static ErrorCode Runtime_Error_100015;
    public static ErrorCode Runtime_Error_100016;
    public static ErrorCode Runtime_Error_100017;
    public static ErrorCode Runtime_Error_100018;
    public static ErrorCode Runtime_Error_100019;
    public static ErrorCode Runtime_Error_100020;
    public static ErrorCode Runtime_Error_100021;
    public static ErrorCode Runtime_Error_100022;
    public static ErrorCode Runtime_Error_100023;
    public static ErrorCode Runtime_Error_100024;
    public static ErrorCode Runtime_Error_100025;
    public static ErrorCode Runtime_Error_100026;
    public static ErrorCode Runtime_Error_100027;
    public static ErrorCode Runtime_Error_100028;
    public static ErrorCode Runtime_Error_100029;
    public static ErrorCode Runtime_Error_100030;
    public static ErrorCode Runtime_Error_100031;
    public static ErrorCode Runtime_Error_100032;
    public static ErrorCode Runtime_Error_100033;
    public static ErrorCode Runtime_Error_100034;
    public static ErrorCode Runtime_Error_100035;
    public static ErrorCode Runtime_Error_100036;
    public static ErrorCode Runtime_Error_100037;
    public static ErrorCode Runtime_Error_100039;
    public static ErrorCode Runtime_Error_100040;
    public static ErrorCode Runtime_Error_100041;
    public static ErrorCode Runtime_Error_100042;
    public static ErrorCode Runtime_Error_100043;
    public static ErrorCode Runtime_Error_100044;
    public static ErrorCode Runtime_Error_100045;
    public static ErrorCode Runtime_Error_100046;
    public static ErrorCode Runtime_Error_100047;
    public static ErrorCode Runtime_Error_100048;
    public static ErrorCode Runtime_Error_100049;
    public static ErrorCode Runtime_Error_100050;
    public static ErrorCode Runtime_Error_100051;
    public static ErrorCode Runtime_Error_100052;
    public static ErrorCode Runtime_Error_100053;
    public static ErrorCode Runtime_Error_100054;
    public static ErrorCode Runtime_Error_100055;
    public static ErrorCode Runtime_Error_100056;
    public static ErrorCode Runtime_Error_100057;
    public static ErrorCode Runtime_Error_100058;
    public static ErrorCode Runtime_Error_100059;
    public static ErrorCode Runtime_Error_100060;
    public static ErrorCode Runtime_Error_100061;
    public static ErrorCode Runtime_Error_100062;
    public static ErrorCode Runtime_Error_100063;
    public static ErrorCode Runtime_Error_100064;
    public static ErrorCode Runtime_Error_100065;
    public static ErrorCode Runtime_Error_100066;
    public static ErrorCode Runtime_Error_100067;
    public static ErrorCode Runtime_Error_100068;
    public static ErrorCode Runtime_Error_100069;
    public static ErrorCode Runtime_Error_100070;
    public static ErrorCode Runtime_Error_100071;
    public static ErrorCode Runtime_Error_100072;
    public static ErrorCode Runtime_Error_100073;
    public static ErrorCode Runtime_Error_100074;
    public static ErrorCode Runtime_Error_100075;
    public static ErrorCode Runtime_Error_100076;
    public static ErrorCode Runtime_Error_100077;
    public static ErrorCode Runtime_Error_100078;
    public static ErrorCode Runtime_Error_100079;
    public static ErrorCode Runtime_Error_100080;
    public static ErrorCode Runtime_Error_100081;
    public static ErrorCode Runtime_Error_100082;
    public static ErrorCode Runtime_Error_100083;
    public static ErrorCode Runtime_Error_100084;
    public static ErrorCode Runtime_Error_100085;
    public static ErrorCode Runtime_Error_100086;
    public static ErrorCode Runtime_Error_100087;
    public static ErrorCode Runtime_Error_100088;
    public static ErrorCode Runtime_Error_100089;
    public static ErrorCode Runtime_Error_100090;
    public static ErrorCode Runtime_Error_100091;
    public static ErrorCode Runtime_Error_100092;
    public static ErrorCode Runtime_Error_100093;
    public static ErrorCode Runtime_Error_100094;
    public static ErrorCode Runtime_Error_100095;
    public static ErrorCode Runtime_Error_100096;
    public static ErrorCode Runtime_Error_100097;
    public static ErrorCode Runtime_Error_100098;
    public static ErrorCode Runtime_Error_100099;
    public static ErrorCode Runtime_Error_100100;
    public static ErrorCode Runtime_Error_100101;
    public static ErrorCode Runtime_Error_100102;
    public static ErrorCode Runtime_Error_100103;
    public static ErrorCode Runtime_Error_100104;
    public static ErrorCode Runtime_Error_100105;
    public static ErrorCode Runtime_Error_100106;
    public static ErrorCode Runtime_Error_100107;
    public static ErrorCode Runtime_Error_100108;
    public static ErrorCode Runtime_Error_100109;
    public static ErrorCode Runtime_Error_100110;
    public static ErrorCode Runtime_Error_100111;
    public static ErrorCode Runtime_Error_100112;
    public static ErrorCode Runtime_Error_100113;
    public static ErrorCode Runtime_Error_100114;
    public static ErrorCode Runtime_Error_100115;
    public static ErrorCode Runtime_Error_100116;
    public static ErrorCode Runtime_Error_100117;
    public static ErrorCode Runtime_Error_100118;
    public static ErrorCode Runtime_Error_100119;
    public static ErrorCode Runtime_Error_100120;
    public static ErrorCode Runtime_Error_100121;
    public static ErrorCode Runtime_Error_100122;
    public static ErrorCode Runtime_Error_100123;
    public static ErrorCode Runtime_Error_100124;
    public static ErrorCode Runtime_Error_100125;
    public static ErrorCode Runtime_Error_100126;
    public static ErrorCode Runtime_Error_100127;
    public static ErrorCode Runtime_Error_100128;
    public static ErrorCode Runtime_Error_100129;
    public static ErrorCode Runtime_Error_100130;
    public static ErrorCode Runtime_Error_100131;
    public static ErrorCode Runtime_Error_100132;
    public static ErrorCode Runtime_Error_100133;
    public static ErrorCode Runtime_Error_100134;
    public static ErrorCode Runtime_Error_100135;
    public static ErrorCode Runtime_Error_100136;
    public static ErrorCode Runtime_Error_100137;
    public static ErrorCode Runtime_Error_100138;
    public static ErrorCode Runtime_Error_100139;
    public static ErrorCode Runtime_Error_100140;
    public static ErrorCode Runtime_Error_100141;
    public static ErrorCode Runtime_Error_100142;
    public static ErrorCode Runtime_Error_100143;
    public static ErrorCode Runtime_Error_100144;
    public static ErrorCode Runtime_Error_100145;
    public static ErrorCode Runtime_Error_100146;
    public static ErrorCode Runtime_Error_100147;
    public static ErrorCode Runtime_Error_100148;
    public static ErrorCode Runtime_Error_100149;
    public static ErrorCode Runtime_Error_100150;
    public static ErrorCode Runtime_Error_100151;
    public static ErrorCode Runtime_Error_100152;
    public static ErrorCode Runtime_Error_100153;
    public static ErrorCode Runtime_Error_100154;
    public static ErrorCode Runtime_Error_100155;
    public static ErrorCode Runtime_Error_100156;
    public static ErrorCode Runtime_Error_100157;
    public static ErrorCode Runtime_Error_100158;
    public static ErrorCode Runtime_Error_100159;
    public static ErrorCode Runtime_Error_100160;
    public static ErrorCode Runtime_Error_100161;
    public static ErrorCode Runtime_Error_100162;
    public static ErrorCode Runtime_Error_100163;
    public static ErrorCode Runtime_Error_100164;
    public static ErrorCode Runtime_Error_100165;
    public static ErrorCode Runtime_Error_100166;
    public static ErrorCode Runtime_Error_100167;
    public static ErrorCode Runtime_Error_100168;
    public static ErrorCode Runtime_Error_100169;
    public static ErrorCode Runtime_Error_100170;
    public static ErrorCode Runtime_Error_100171;
    public static ErrorCode Runtime_Error_100172;
    public static ErrorCode Runtime_Error_100173;
    public static ErrorCode Runtime_Error_100174;
    public static ErrorCode Runtime_Error_100175;
    public static ErrorCode Runtime_Error_100176;
    public static ErrorCode Runtime_Error_100177;
    public static ErrorCode Runtime_Error_100178;
    public static ErrorCode Runtime_Error_100179;
    public static ErrorCode Runtime_Error_100180;
    public static ErrorCode Runtime_Error_100181;
    public static ErrorCode Runtime_Error_100182;
    public static ErrorCode Runtime_Error_100183;
    public static ErrorCode Runtime_Error_100184;
    public static ErrorCode Runtime_Error_100185;
    public static ErrorCode Runtime_Error_100186;
    public static ErrorCode Runtime_Error_100187;
    public static ErrorCode Runtime_Error_100188;
    public static ErrorCode Runtime_Error_100189;
    public static ErrorCode Runtime_Error_100190;
    public static ErrorCode Runtime_Error_100191;
    public static ErrorCode Runtime_Error_100192;
    public static ErrorCode Runtime_Error_100193;
    public static ErrorCode Runtime_Error_100194;
    public static ErrorCode Runtime_Error_100195;
    public static ErrorCode Runtime_Error_100196;
    public static ErrorCode Runtime_Error_100197;
    public static ErrorCode Runtime_Error_100198;
    public static ErrorCode Runtime_Error_100199;
    public static ErrorCode Runtime_Error_100200;
    public static ErrorCode Runtime_Error_100201;
    public static ErrorCode Runtime_Error_100202;
    public static ErrorCode Runtime_Error_100203;
    public static ErrorCode Runtime_Error_100204;
    public static ErrorCode Runtime_Error_100205;
    public static ErrorCode Runtime_Error_100206;
    public static ErrorCode Runtime_Error_100207;
    public static ErrorCode Runtime_Error_100208;
    public static ErrorCode Runtime_Error_100209;
    public static ErrorCode Runtime_Error_100210;
    public static ErrorCode Runtime_Error_100211;
    public static ErrorCode Runtime_Error_100212;
    public static ErrorCode Runtime_Error_100213;
    public static ErrorCode Runtime_Error_100214;
    public static ErrorCode Runtime_Error_100215;
    public static ErrorCode Runtime_Error_100216;
    public static ErrorCode Runtime_Error_100217;
    public static ErrorCode Runtime_Error_100218;
    public static ErrorCode Runtime_Error_100219;
    public static ErrorCode Runtime_Error_100220;
    public static ErrorCode Runtime_Error_100221;
    public static ErrorCode Runtime_Error_100222;
    public static ErrorCode Runtime_Error_100223;
    public static ErrorCode Runtime_Error_100224;
    public static ErrorCode Runtime_Error_100225;
    public static ErrorCode Runtime_Error_100226;
    public static ErrorCode Runtime_Error_100227;
    public static ErrorCode Runtime_Error_100228;
    public static ErrorCode Runtime_Error_100229;
    public static ErrorCode Runtime_Error_100230;
    public static ErrorCode Runtime_Error_100231;
    public static ErrorCode Runtime_Error_100232;
    public static ErrorCode Runtime_Error_100233;
    public static ErrorCode Runtime_Error_100234;
    public static ErrorCode Runtime_Error_100235;
    public static ErrorCode Runtime_Error_100236;
    public static ErrorCode Runtime_Error_100237;
    public static ErrorCode Runtime_Error_100238;
    public static ErrorCode Runtime_Error_100239;
    public static ErrorCode Runtime_Error_100240;
    public static ErrorCode Runtime_Error_100241;
    public static ErrorCode Runtime_Error_100242;
    public static ErrorCode Runtime_Error_100243;
    public static ErrorCode Runtime_Error_100244;
    public static ErrorCode Runtime_Error_100245;
    public static ErrorCode Runtime_Error_100246;
    public static ErrorCode Runtime_Error_100247;
    public static ErrorCode Runtime_Error_100248;
    public static ErrorCode Runtime_Error_100249;
    public static ErrorCode Runtime_Error_100250;
    public static ErrorCode Runtime_Error_100251;
    public static ErrorCode Runtime_Error_100252;
    public static ErrorCode Runtime_Error_100253;
    public static ErrorCode Runtime_Error_100254;
    public static ErrorCode Runtime_Error_100255;
    public static ErrorCode Runtime_Error_100256;
    public static ErrorCode Runtime_Error_100257;
    public static ErrorCode Runtime_Error_100258;
    public static ErrorCode Runtime_Error_100259;
    public static ErrorCode Runtime_Error_100260;
    public static ErrorCode Runtime_Error_100261;
    public static ErrorCode Runtime_Error_100262;
    public static ErrorCode Runtime_Error_100263;
    public static ErrorCode Runtime_Error_100264;
    public static ErrorCode Runtime_Error_100265;
    public static ErrorCode Runtime_Error_100266;
    public static ErrorCode Runtime_Error_100267;
    public static ErrorCode Runtime_Error_100268;
    public static ErrorCode Runtime_Error_100269;
    public static ErrorCode Runtime_Error_100270;
    public static ErrorCode Runtime_Error_100271;
    public static ErrorCode Runtime_Error_100272;
    public static ErrorCode Runtime_Error_100273;
    public static ErrorCode Runtime_Error_100274;
    public static ErrorCode Runtime_Error_100275;
    public static ErrorCode Runtime_Error_100276;
    public static ErrorCode Runtime_Error_100277;
    public static ErrorCode Runtime_Error_100278;
    public static ErrorCode Runtime_Error_100279;
    public static ErrorCode Runtime_Error_100280;
    public static ErrorCode Runtime_Error_100281;
    public static ErrorCode Runtime_Error_100282;
    public static ErrorCode Runtime_Error_100283;
    public static ErrorCode Runtime_Error_100284;
    public static ErrorCode Runtime_Error_100285;
    public static ErrorCode Runtime_Error_100286;
    public static ErrorCode Runtime_Error_100287;
    public static ErrorCode Runtime_Error_100288;
    public static ErrorCode Runtime_Error_100289;
    public static ErrorCode Runtime_Error_100290;
    public static ErrorCode Runtime_Error_100291;
    public static ErrorCode Runtime_Error_100292;
    public static ErrorCode Runtime_Error_100293;
    public static ErrorCode Runtime_Error_100294;
    public static ErrorCode Runtime_Error_100295;
    public static ErrorCode Runtime_Error_100296;
    public static ErrorCode Runtime_Error_100297;
    public static ErrorCode Runtime_Error_100298;
    public static ErrorCode Runtime_Error_100299;
    public static ErrorCode Runtime_Error_100300;
    public static ErrorCode Runtime_Error_100301;
    public static ErrorCode Runtime_Error_100302;
    public static ErrorCode Runtime_Error_100303;
    public static ErrorCode Runtime_Error_100304;
    public static ErrorCode Runtime_Error_100305;
    public static ErrorCode Runtime_Error_100306;
    public static ErrorCode Runtime_Error_100307;
    public static ErrorCode Runtime_Error_100308;
    public static ErrorCode Runtime_Error_100309;
    public static ErrorCode Runtime_Error_100310;
    public static ErrorCode Runtime_Error_100311;
    public static ErrorCode Runtime_Error_100312;
    public static ErrorCode ClientInitializing;
    public static ErrorCode ClientStarting;
    public static ErrorCode ClientError;
    public static ErrorCode Runtime_Error_100316;
    public static ErrorCode Runtime_Error_100317;
    public static ErrorCode Runtime_Error_100318;
    public static ErrorCode Runtime_Error_100319;
    public static ErrorCode Runtime_Error_100320;
    public static ErrorCode Runtime_Error_100321;
    public static ErrorCode GrainInvokeException;
    public static ErrorCode Runtime_Error_100323;
    public static ErrorCode Runtime_Error_100324;
    public static ErrorCode Runtime_Error_100325;
    public static ErrorCode Runtime_Error_100326;
    public static ErrorCode Runtime_Error_100327;
    public static ErrorCode Runtime_Error_100328;
    public static ErrorCode Runtime_Error_100329;
    public static ErrorCode Runtime_Error_100330;
    public static ErrorCode Runtime_Error_100331;
    public static ErrorCode SiloBase;
    public static ErrorCode SiloStarting;
    public static ErrorCode SiloStarted;
    public static ErrorCode SiloInitializing;
    public static ErrorCode SiloGcSetting;
    public static ErrorCode SiloGcWarning;
    public static ErrorCode SiloSetDeploymentId;
    public static ErrorCode SiloSetSiloEndpoint;
    public static ErrorCode SiloSetProxyEndpoint;
    public static ErrorCode SiloSetSeedNode;
    public static ErrorCode SiloAddSeedNode;
    public static ErrorCode SiloSetPrimaryNode;
    public static ErrorCode SiloSetWorkingDir;
    public static ErrorCode SiloStopped;
    public static ErrorCode SiloStopping;
    public static ErrorCode SiloInitConfig;
    public static ErrorCode SiloDebugDump;
    public static ErrorCode SiloShuttingDown;
    public static ErrorCode SiloShutDown;
    public static ErrorCode SiloFailedToStopMembership;
    public static ErrorCode SiloIgnoreErrorDuringStop;
    public static ErrorCode SiloHeartbeatTimerStalled;
    public static ErrorCode SiloCannotResetHeartbeatTimer;
    public static ErrorCode SiloInitializingFinished;
    public static ErrorCode SiloSetSiloType;
    public static ErrorCode SiloStartupEventName;
    public static ErrorCode SiloStartupEventCreated;
    public static ErrorCode SiloStartupEventOpened;
    public static ErrorCode SiloStopInProgress;
    public static ErrorCode WaitingForSiloStop;
    public static ErrorCode CannotCheckRoleEnvironment;
    public static ErrorCode SiloConfiguredThreadPool;
    public static ErrorCode SiloFailedToConfigureThreadPool;
    public static ErrorCode SetSiloLivenessType;
    public static ErrorCode SiloEndpointConfigError;
    public static ErrorCode SiloConfiguredServicePointManager;
    public static ErrorCode SiloCallingProviderInit;
    public static ErrorCode SetReminderServiceType;
    public static ErrorCode SiloStartError;
    public static ErrorCode SiloConfigDeprecated;
    public static ErrorCode SiloShutdownEventName;
    public static ErrorCode SiloShutdownEventCreated;
    public static ErrorCode SiloShutdownEventOpened;
    public static ErrorCode SiloShutdownEventReceived;
    public static ErrorCode SiloLoadedDI;
    public static ErrorCode SiloFailedToLoadDI;
    public static ErrorCode SiloFileNotFoundLoadingDI;
    public static ErrorCode SiloStartupEventFailure;
    public static ErrorCode SiloShutdownEventFailure;
    public static ErrorCode LifecycleStartFailure;
    public static ErrorCode LifecycleStopFailure;
    public static ErrorCode SiloStartPerfMeasure;
    public static ErrorCode LifecycleStagesReport;
    public static ErrorCode CatalogBase;
    public static ErrorCode CatalogNonExistingActivation1;
    public static ErrorCode Catalog_UnregisterManyAsync;
    public static ErrorCode Catalog_DestroyActivations;
    public static ErrorCode Catalog_UnknownActivation;
    public static ErrorCode Catalog_ActivationException;
    public static ErrorCode Catalog_GetApproximateSiloStatuses;
    public static ErrorCode Catalog_BeforeCollection;
    public static ErrorCode Catalog_AfterCollection;
    public static ErrorCode Catalog_ShutdownActivations_1;
    public static ErrorCode CatalogNonExistingActivation2;
    public static ErrorCode Catalog_BeforeCallingActivate;
    public static ErrorCode Catalog_AfterCallingActivate;
    public static ErrorCode Catalog_ErrorCallingActivate;
    public static ErrorCode Catalog_BeforeCallingDeactivate;
    public static ErrorCode Catalog_AfterCallingDeactivate;
    public static ErrorCode Catalog_ErrorCallingDeactivate;
    public static ErrorCode Catalog_MissingTypeOnCreate;
    public static ErrorCode Catalog_ResendDuplicateFailed;
    public static ErrorCode Catalog_NullGetTypeAndStrategies;
    public static ErrorCode Catalog_DuplicateActivation;
    public static ErrorCode Catalog_RegistrationFailure;
    public static ErrorCode Catalog_Warn_ActivationTooManyRequests;
    public static ErrorCode Catalog_Reject_ActivationTooManyRequests;
    public static ErrorCode Catalog_SiloStatusChangeNotification;
    public static ErrorCode Catalog_SiloStatusChangeNotification_Exception;
    public static ErrorCode Catalog_AttemptToCollectActivationEarly;
    public static ErrorCode Catalog_DeactivateActivation_Exception;
    public static ErrorCode Catalog_ActivationDirectory_Statistics;
    public static ErrorCode Catalog_UnregisterMessageTarget1;
    public static ErrorCode Catalog_UnregisterMessageTarget2;
    public static ErrorCode Catalog_UnregisterMessageTarget3;
    public static ErrorCode Catalog_UnregisterMessageTarget4;
    public static ErrorCode Catalog_Failed_SetupActivationState;
    public static ErrorCode Catalog_Failed_InvokeActivate;
    public static ErrorCode Catalog_RerouteAllQueuedMessages;
    public static ErrorCode Catalog_WaitForAllTimersToFinish_Exception;
    public static ErrorCode Catalog_ActivationCollector_BadState_1;
    public static ErrorCode Catalog_ActivationCollector_BadState_2;
    public static ErrorCode Catalog_DestroyActivations_Done;
    public static ErrorCode Catalog_ShutdownActivations_2;
    public static ErrorCode Catalog_ShutdownActivations_3;
    public static ErrorCode Catalog_DeactivateStreamResources_Exception;
    public static ErrorCode Catalog_FinishDeactivateActivation_Exception;
    public static ErrorCode Catalog_FinishGrainDeactivateAndCleanupStreams_Exception;
    public static ErrorCode Catalog_DeactivateAllActivations;
    public static ErrorCode Catalog_ActivationCollector_BadState_3;
    public static ErrorCode Catalog_UnregisterAsync;
    public static ErrorCode MembershipBase;
    public static ErrorCode MembershipCantWriteLivenessDisabled;
    public static ErrorCode MembershipNodeMigrated;
    public static ErrorCode MembershipNodeRestarted;
    public static ErrorCode MembershipStarting;
    public static ErrorCode MembershipBecomeActive;
    public static ErrorCode MembershipFinishBecomeActive;
    public static ErrorCode MembershipShutDown;
    public static ErrorCode MembershipStop;
    public static ErrorCode MembershipReadTable;
    public static ErrorCode MembershipKillMyself;
    public static ErrorCode MembershipVotingForKill;
    public static ErrorCode MembershipMarkingAsDead;
    public static ErrorCode MembershipWatchList;
    public static ErrorCode MembershipMissedPing;
    public static ErrorCode MembershipSendingPreJoinPing;
    public static ErrorCode MembershipFailedToWrite;
    public static ErrorCode MembershipFailedToWriteConditional;
    public static ErrorCode MembershipFoundMyselfDead1;
    public static ErrorCode MembershipFoundMyselfDead2;
    public static ErrorCode MembershipDetectedOlder;
    public static ErrorCode MembershipDetectedNewer;
    public static ErrorCode MembershipDelayedTableUpdateTimer;
    public static ErrorCode MembershipDelayedProbeOtherSilosTimer;
    public static ErrorCode MembershipFailedToReadSilo;
    public static ErrorCode MembershipDelayedIAmAliveUpdateTimer;
    public static ErrorCode MembershipMissedIAmAliveTableUpdate;
    public static ErrorCode MembershipLocalSubscriberException;
    public static ErrorCode MembershipKillMyselfLocally;
    public static ErrorCode MembershipFoundMyselfDead3;
    public static ErrorCode MembershipMarkDeadWriteFailed;
    public static ErrorCode MembershipTableGrainInit1;
    public static ErrorCode MembershipTableGrainInit2;
    public static ErrorCode MembershipTableGrainInit3;
    public static ErrorCode MembershipTableGrainInit4;
    public static ErrorCode MembershipReadAll_1;
    public static ErrorCode MembershipFactory1;
    public static ErrorCode MembershipFactory2;
    public static ErrorCode MembershipGrainBasedTable1;
    public static ErrorCode MembershipGrainBasedTable2;
    public static ErrorCode MembershipGrainBasedTable3;
    public static ErrorCode MembershipFileBasedTable1;
    public static ErrorCode MembershipFileBasedTable2;
    public static ErrorCode MembershipFileBasedTable3;
    public static ErrorCode MembershipFileBasedTable4;
    public static ErrorCode MembershipPingedSiloNotInWatchList;
    public static ErrorCode MembershipReadAll_2;
    public static ErrorCode MembershipFailedToStart;
    public static ErrorCode MembershipFailedToBecomeActive;
    public static ErrorCode MembershipFailedToStop;
    public static ErrorCode MembershipFailedToShutdown;
    public static ErrorCode MembershipFailedToKillMyself;
    public static ErrorCode MembershipFailedToSuspect;
    public static ErrorCode MembershipReadAll_Cleanup;
    public static ErrorCode MembershipShutDownFailure;
    public static ErrorCode MembershipKillMyselfFailure;
    public static ErrorCode MembershipGossipProcessingFailure;
    public static ErrorCode MembershipGossipSendFailure;
    public static ErrorCode MembershipTimerProcessingFailure;
    public static ErrorCode MembershipSendPingFailure;
    public static ErrorCode MembershipUpdateIAmAliveFailure;
    public static ErrorCode MembershipStartingIAmAliveTimer;
    public static ErrorCode MembershipJoiningPreconditionFailure;
    public static ErrorCode MembershipCleanDeadEntriesFailure;
    public static ErrorCode MembershipJoining;
    public static ErrorCode MembershipFailedToJoin;
    public static ErrorCode NSMembershipStarting;
    public static ErrorCode NSMembershipBecomeActive;
    public static ErrorCode NSMembershipFailedToBecomeActive;
    public static ErrorCode NSMembershipShutDown;
    public static ErrorCode NSMembershipStop;
    public static ErrorCode NSMembershipKillMyself;
    public static ErrorCode NSMembershipKillMyselfLocally;
    public static ErrorCode NSMembershipNotificationProcessingFailure;
    public static ErrorCode NSMembershipReadAll_1;
    public static ErrorCode NSMembershipReadAll_2;
    public static ErrorCode NSMembershipFoundMyselfDead2;
    public static ErrorCode NSMembershipDetectedOlder;
    public static ErrorCode NSMembershipDetectedNewer;
    public static ErrorCode NSMembershipTimerProcessingFailure;
    public static ErrorCode NSMembershipShutDownFailure;
    public static ErrorCode NSMembershipKillMyselfFailure;
    public static ErrorCode NSMembershipNSDetails;
    public static ErrorCode SSMT_ReadRowError;
    public static ErrorCode SSMT_ReadAllError;
    public static ErrorCode SSMT_InsertRowError;
    public static ErrorCode SSMT_UpdateRowError;
    public static ErrorCode SSMT_MergeRowError;
    public static ErrorCode SSMT_EtagMismatch_Insert;
    public static ErrorCode SSMT_EtagMismatch_Update;
    public static ErrorCode PerfCounterBase;
    public static ErrorCode PerfCounterNotFound;
    public static ErrorCode PerfCounterStarting;
    public static ErrorCode PerfCounterStopping;
    public static ErrorCode PerfCounterDumpAll;
    public static ErrorCode PerfCounterWriteErrors;
    public static ErrorCode PerfCounterWriteSuccess;
    public static ErrorCode PerfCounterWriteTooManyErrors;
    public static ErrorCode PerfCounterNotRegistered;
    public static ErrorCode PerfCounterUnableToConnect;
    public static ErrorCode PerfCounterUnableToWrite;
    public static ErrorCode PerfCounterWriting;
    public static ErrorCode PerfCounterSkipping;
    public static ErrorCode PerfMetricsStoppingTimer;
    public static ErrorCode PerfMetricsStartingTimer;
    public static ErrorCode PerfStatistics;
    public static ErrorCode PerfCounterRegistering;
    public static ErrorCode PerfCounterTimerError;
    public static ErrorCode PerfCounterCategoryCheckError;
    public static ErrorCode PerfCounterConnectError;
    public static ErrorCode PerfCounterFailedToInitialize;
    public static ErrorCode ProxyClientBase;
    public static ErrorCode ProxyClient_ReceiveError;
    public static ErrorCode ProxyClient_SerializationError;
    public static ErrorCode ProxyClient_SocketSendError;
    public static ErrorCode ProxyClient_ByteCountMismatch;
    public static ErrorCode ProxyClient_CannotConnect;
    public static ErrorCode ProxyClientUnhandledExceptionWhileSending;
    public static ErrorCode ProxyClientUnhandledExceptionWhileReceiving;
    public static ErrorCode ProxyClient_CannotSend;
    public static ErrorCode ProxyClient_CannotSend_NoGateway;
    public static ErrorCode ProxyClient_DroppingMsg;
    public static ErrorCode ProxyClient_RejectingMsg;
    public static ErrorCode ProxyClient_MsgSent;
    public static ErrorCode ProxyClient_Connected;
    public static ErrorCode ProxyClient_PauseBeforeRetry;
    public static ErrorCode ProxyClient_MsgCtrNotRunning;
    public static ErrorCode ProxyClient_DeadGateway;
    public static ErrorCode ProxyClient_MarkGatewayDead;
    public static ErrorCode ProxyClient_MarkGatewayDisconnected;
    public static ErrorCode ProxyClient_GatewayConnStarted;
    public static ErrorCode ProxyClient_CreatedGatewayUnordered;
    public static ErrorCode ProxyClient_CreatedGatewayToGrain;
    public static ErrorCode ProxyClient_NewBucketIndex;
    public static ErrorCode ProxyClient_QueueRequest;
    public static ErrorCode ProxyClient_ThreadAbort;
    public static ErrorCode ProxyClient_OperationCancelled;
    public static ErrorCode ProxyClient_GetGateways;
    public static ErrorCode ProxyClient_NetworkError;
    public static ErrorCode ProxyClient_SendException;
    public static ErrorCode ProxyClient_OGC_TargetNotFound;
    public static ErrorCode ProxyClient_OGC_SendResponseFailed;
    public static ErrorCode ProxyClient_OGC_SendExceptionResponseFailed;
    public static ErrorCode ProxyClient_OGC_UnhandledExceptionInOneWayInvoke;
    public static ErrorCode ProxyClient_ClientInvokeCallback_Error;
    public static ErrorCode ProxyClient_StartDone;
    public static ErrorCode ProxyClient_OGC_TargetNotFound_2;
    public static ErrorCode ProxyClient_AppDomain_Unload;
    public static ErrorCode ProxyClient_GatewayUnknownStatus;
    public static ErrorCode ProxyClient_FailedToUnregisterCallback;
    public static ErrorCode MessagingBase;
    public static ErrorCode Messaging_IMA_DroppingConnection;
    public static ErrorCode Messaging_Dispatcher_DiscardRejection;
    public static ErrorCode MessagingBeginReceiveException;
    public static ErrorCode MessagingBeginAcceptSocketException;
    public static ErrorCode MessagingAcceptingSocketClosed;
    public static ErrorCode MessagingEndAcceptSocketException;
    public static ErrorCode MessagingUnexpectedSendError;
    public static ErrorCode MessagingSendingRejection;
    public static ErrorCode MessagingMessageFromUnknownActivation;
    public static ErrorCode Messaging_IMA_OpenedListeningSocket;
    public static ErrorCode Messaging_IMA_AcceptCallbackNullState;
    public static ErrorCode Messaging_IMA_AcceptCallbackUnexpectedState;
    public static ErrorCode Messaging_IMA_NewBeginReceiveException;
    public static ErrorCode Messaging_Socket_ReceiveError;
    public static ErrorCode Messaging_IMA_ClosingSocket;
    public static ErrorCode Messaging_OutgoingMS_DroppingMessage;
    public static ErrorCode MessagingProcessReceiveBufferException;
    public static ErrorCode Messaging_LargeMsg_Outgoing;
    public static ErrorCode Messaging_LargeMsg_Incoming;
    public static ErrorCode Messaging_SiloNetworkError;
    public static ErrorCode Messaging_UnableToGetSendingSocket;
    public static ErrorCode Messaging_ExceptionSending;
    public static ErrorCode Messaging_CountMismatchSending;
    public static ErrorCode Messaging_ExceptionReceiving;
    public static ErrorCode Messaging_ExceptionBeginReceiving;
    public static ErrorCode Messaging_IMA_ExceptionAccepting;
    public static ErrorCode Messaging_IMA_BadBufferReceived;
    public static ErrorCode Messaging_IMA_ActivationOverloaded;
    public static ErrorCode Messaging_SerializationError;
    public static ErrorCode Messaging_UnableToDeserializeBody;
    public static ErrorCode Messaging_Dispatcher_TryForward;
    public static ErrorCode Messaging_Dispatcher_TryForwardFailed;
    public static ErrorCode Messaging_Dispatcher_ForwardingRequests;
    public static ErrorCode Messaging_SimulatedMessageLoss;
    public static ErrorCode Messaging_Dispatcher_ReturnToOriginCluster;
    public static ErrorCode MessagingAcceptAsyncSocketException;
    public static ErrorCode Messaging_ExceptionReceiveAsync;
    public static ErrorCode Messaging_DroppingExpiredMessage;
    public static ErrorCode Messaging_DroppingBlockedMessage;
    public static ErrorCode Messaging_Inbound_Enqueue;
    public static ErrorCode Messaging_Inbound_Dequeue;
    public static ErrorCode Messaging_Dispatcher_Rejected;
    public static ErrorCode DirectoryBase;
    public static ErrorCode DirectoryBothPrimaryAndBackupForGrain;
    public static ErrorCode DirectoryPartitionPredecessorExpected;
    public static ErrorCode DirectoryUnexpectedDelta;
    public static ErrorCode Directory_SiloStatusChangeNotification_Exception;
    public static ErrorCode SchedulerBase;
    public static ErrorCode SchedulerWorkerPoolThreadQueueWaitTime;
    public static ErrorCode SchedulerWorkItemGroupQueueWaitTime;
    public static ErrorCode SchedulerStatistics;
    public static ErrorCode SchedulerFinishShutdown;
    public static ErrorCode SchedulerNullActivation;
    public static ErrorCode SchedulerExceptionFromExecute;
    public static ErrorCode SchedulerNullContext;
    public static ErrorCode SchedulerTaskExecuteIncomplete1;
    public static ErrorCode WaitCalledInsideGrain;
    public static ErrorCode SchedulerStatus;
    public static ErrorCode WaitCalledInServerCode;
    public static ErrorCode ExecutorTurnTooLong;
    public static ErrorCode SchedulerTooManyPendingItems;
    public static ErrorCode SchedulerTurnTooLong2;
    public static ErrorCode SchedulerTurnTooLong3;
    public static ErrorCode SchedulerWorkGroupShuttingDown;
    public static ErrorCode SchedulerEnqueueWorkWhenShutdown;
    public static ErrorCode SchedulerNotExecuteWhenShutdown;
    public static ErrorCode SchedulerAppTurnsStopped_1;
    public static ErrorCode SchedulerWorkGroupStopping;
    public static ErrorCode SchedulerSkipWorkStopping;
    public static ErrorCode SchedulerSkipWorkCancelled;
    public static ErrorCode SchedulerTaskRunningOnWrongScheduler1;
    public static ErrorCode SchedulerQueueWorkItemWrongCall;
    public static ErrorCode SchedulerQueueTaskWrongCall;
    public static ErrorCode SchedulerTaskExecuteIncomplete2;
    public static ErrorCode SchedulerTaskExecuteIncomplete3;
    public static ErrorCode SchedulerTaskExecuteIncomplete4;
    public static ErrorCode SchedulerTaskWaitIncomplete;
    public static ErrorCode ExecutorWorkerThreadExc;
    public static ErrorCode SchedulerQueueWorkItemWrongContext;
    public static ErrorCode SchedulerAppTurnsStopped_2;
    public static ErrorCode ExecutorProcessingError;
    public static ErrorCode GatewayBase;
    public static ErrorCode GatewayClientOpenedSocket;
    public static ErrorCode GatewayClientClosedSocket;
    public static ErrorCode GatewayDroppingClient;
    public static ErrorCode GatewayTryingToSendToUnrecognizedClient;
    public static ErrorCode GatewayByteCountMismatch;
    public static ErrorCode GatewayExceptionSendingToClient;
    public static ErrorCode GatewayAcceptor_SocketClosed;
    public static ErrorCode GatewayAcceptor_ExceptionReceiving;
    public static ErrorCode GatewayManager_FoundKnownGateways;
    public static ErrorCode MessageAcceptor_Connection;
    public static ErrorCode MessageAcceptor_NotAProxiedConnection;
    public static ErrorCode MessageAcceptor_UnexpectedProxiedConnection;
    public static ErrorCode GatewayManager_NoGateways;
    public static ErrorCode GatewayNetworkError;
    public static ErrorCode GatewayFailedToParse;
    public static ErrorCode ClientRegistrarFailedToRegister;
    public static ErrorCode ClientRegistrarFailedToRegister_2;
    public static ErrorCode ClientRegistrarFailedToUnregister;
    public static ErrorCode ClientRegistrarTimerFailed;
    public static ErrorCode GatewayAcceptor_WrongClusterId;
    public static ErrorCode GatewayManager_AllGatewaysDead;
    public static ErrorCode GatewayAcceptor_InvalidSize;
    public static ErrorCode TimerBase;
    public static ErrorCode TimerChangeError;
    public static ErrorCode TimerCallbackError;
    public static ErrorCode TimerDisposeError;
    public static ErrorCode TimerStopError;
    public static ErrorCode TimerQueueTickError;
    public static ErrorCode TimerChanging;
    public static ErrorCode TimerBeforeCallback;
    public static ErrorCode TimerAfterCallback;
    public static ErrorCode TimerNextTick;
    public static ErrorCode TimerDisposing;
    public static ErrorCode TimerStopped;
    public static ErrorCode Timer_TimerInsideGrainIsNotTicking;
    public static ErrorCode Timer_TimerInsideGrainIsDelayed;
    public static ErrorCode Timer_SafeTimerIsNotTicking;
    public static ErrorCode Timer_GrainTimerCallbackError;
    public static ErrorCode Timer_InvalidContext;
    public static ErrorCode DispatcherBase;
    public static ErrorCode Dispatcher_SelectTarget_Failed;
    public static ErrorCode Dispatcher_InvalidEnum_Direction;
    public static ErrorCode Dispatcher_NoCallbackForRejectionResp;
    public static ErrorCode Dispatcher_InvalidEnum_RejectionType;
    public static ErrorCode Dispatcher_NoCallbackForResp;
    public static ErrorCode Dispatcher_InvalidMsg_Direction;
    public static ErrorCode Dispatcher_Intermediate_GetOrCreateActivation;
    public static ErrorCode Dispatcher_NoTargetActivation;
    public static ErrorCode Dispatcher_QueueingRequestBadTargetState;
    public static ErrorCode Dispatcher_InjectingRejection;
    public static ErrorCode Dispatcher_InjectingMessageLoss;
    public static ErrorCode Dispatcher_UnknownTypeCode;
    public static ErrorCode Dispatcher_SelectTarget_FailPending;
    public static ErrorCode Dispatcher_RegisterCallback_Replaced;
    public static ErrorCode Dispatcher_Send_BufferResponse;
    public static ErrorCode Dispatcher_Send_AddressedMessage;
    public static ErrorCode Dispatcher_Receive_InvalidActivation;
    public static ErrorCode Dispatcher_WriteGrainFailed;
    public static ErrorCode Dispatcher_ActivationEndedTurn_Waiting;
    public static ErrorCode Dispatcher_Retarget;
    public static ErrorCode Dispatcher_TryAcceptMessage;
    public static ErrorCode Dispatcher_UpdateReceiveOrder;
    public static ErrorCode Dispatcher_ReceiveOrderCorrelation;
    public static ErrorCode Dispatcher_AddSendOrder;
    public static ErrorCode Dispatcher_AddSendOrderNoPrior;
    public static ErrorCode Dispatcher_AddSendOrder_PriorIds;
    public static ErrorCode Dispatcher_AddSendOrder_First;
    public static ErrorCode Dispatcher_EnqueueMessage;
    public static ErrorCode Dispatcher_AddressMsg;
    public static ErrorCode Dispatcher_AddressMsg_GrainOrder;
    public static ErrorCode Dispatcher_AddressMsg_NullingLastSentTo;
    public static ErrorCode Dispatcher_AddressMsg_SMPlacement;
    public static ErrorCode Dispatcher_AddressMsg_UnregisteredClient;
    public static ErrorCode Dispatcher_AddressMsg_SelectTarget;
    public static ErrorCode Dispatcher_HandleMsg;
    public static ErrorCode Dispatcher_OnActivationCompletedRequest_Waiting;
    public static ErrorCode IGC_DisposeError;
    public static ErrorCode IGC_SendRequest_NullContext;
    public static ErrorCode IGC_SniffIncomingMessage_Exc;
    public static ErrorCode Dispatcher_DetectedDeadlock;
    public static ErrorCode Dispatcher_ActivationOverloaded;
    public static ErrorCode IGC_SendResponseFailed;
    public static ErrorCode IGC_SendExceptionResponseFailed;
    public static ErrorCode IGC_UnhandledExceptionInInvoke;
    public static ErrorCode Dispatcher_ExtendedMessageProcessing;
    public static ErrorCode Dispatcher_FailedToUnregisterNonExistingAct;
    public static ErrorCode Dispatcher_NoGrainInstance;
    public static ErrorCode Dispatcher_RuntimeStatisticsUnavailable;
    public static ErrorCode Dispatcher_InvalidActivation;
    public static ErrorCode InvokeWorkItem_UnhandledExceptionInInvoke;
    public static ErrorCode Dispatcher_ErrorCreatingActivation;
    public static ErrorCode Dispatcher_StuckActivation;
    public static ErrorCode Dispatcher_FailedToUnregisterCallback;
    public static ErrorCode SerializationBase;
    public static ErrorCode Ser_IncompatibleIntermediateType;
    public static ErrorCode Ser_CannotConstructBaseObj;
    public static ErrorCode Ser_IncompatibleType;
    public static ErrorCode Ser_AssemblyLoadError;
    public static ErrorCode Ser_BadRegisterSerializer;
    public static ErrorCode Ser_AssemblyLoadErrorDetails;
    public static ErrorCode Ser_AssemblyLoadSuccess;
    public static ErrorCode Ser_LargeObjectAllocated;
    public static ErrorCode LoaderBase;
    public static ErrorCode Loader_NotGrainAssembly;
    public static ErrorCode Loader_TypeLoadError;
    public static ErrorCode Loader_ProxyLoadError;
    public static ErrorCode Loader_AssemblyLookupFailed;
    public static ErrorCode Loader_AssemblyLookupResolved;
    public static ErrorCode Loader_LoadingFromDir;
    public static ErrorCode Loader_LoadingFromFile;
    public static ErrorCode Loader_DirNotFound;
    public static ErrorCode Loader_LoadingSerInfo;
    public static ErrorCode Loader_LoadingGrainType;
    public static ErrorCode Loader_SkippingFile;
    public static ErrorCode Loader_SkippingDynamicAssembly;
    public static ErrorCode Loader_AssemblyInspectError;
    public static ErrorCode Loader_GrainTypeFullList;
    public static ErrorCode Loader_IgnoreAbstractGrainClass;
    public static ErrorCode Loader_AssemblyInspectionError;
    public static ErrorCode Loader_FoundBinary;
    public static ErrorCode Loader_IgnoreNonPublicGrainClass;
    public static ErrorCode Loader_UnexpectedException;
    public static ErrorCode Loader_SkippingBadAssembly;
    public static ErrorCode Loader_TypeLoadError_2;
    public static ErrorCode Loader_TypeLoadError_3;
    public static ErrorCode Loader_TypeLoadError_4;
    public static ErrorCode Loader_LoadAndCreateInstance_Failure;
    public static ErrorCode Loader_TryLoadAndCreateInstance_Failure;
    public static ErrorCode Loader_TypeLoadError_5;
    public static ErrorCode Loader_AssemblyLoadError;
    public static ErrorCode PlacementBase;
    public static ErrorCode Placement_RuntimeStatisticsUpdateFailure_1;
    public static ErrorCode Placement_RuntimeStatisticsUpdateFailure_2;
    public static ErrorCode Placement_RuntimeStatisticsUpdateFailure_3;
    public static ErrorCode Placement_ActivationCountBasedDirector_NoSilos;
    public static ErrorCode StorageProviderBase;
    public static ErrorCode StorageProvider_ReadFailed;
    public static ErrorCode StorageProvider_WriteFailed;
    public static ErrorCode StorageProvider_DeleteFailed;
    public static ErrorCode StorageProvider_ForceReRead;
    public static ErrorCode SerializationManagerBase;
    public static ErrorCode SerMgr_TypeRegistrationFailure;
    public static ErrorCode SerMgr_MissingRegisterMethod;
    public static ErrorCode SerMgr_ErrorBindingMethods;
    public static ErrorCode SerMgr_ErrorLoadingAssemblyTypes;
    public static ErrorCode SerMgr_TooLongSerialize;
    public static ErrorCode SerMgr_TooLongDeserialize;
    public static ErrorCode SerMgr_TooLongDeepCopy;
    public static ErrorCode SerMgr_IgnoreAssembly;
    public static ErrorCode SerMgr_TypeRegistrationFailureIgnore;
    public static ErrorCode SerMgr_ArtifactReport;
    public static ErrorCode SerMgr_UnavailableSerializer;
    public static ErrorCode SerMgr_SerializationMethodsMissing;
    public static ErrorCode WatchdogBase;
    public static ErrorCode Watchdog_ParticipantThrownException;
    public static ErrorCode Watchdog_InternalError;
    public static ErrorCode Watchdog_HealthCheckFailure;
    public static ErrorCode LoggerBase;
    public static ErrorCode Logger_ProcessCrashing;
    public static ErrorCode Logger_LogMessageTruncated;
    public static ErrorCode WFServiceBase;
    public static ErrorCode WFService_Error_1;
    public static ErrorCode WFService_Error_2;
    public static ErrorCode WFService_Error_3;
    public static ErrorCode WFService_Error_4;
    public static ErrorCode WFService_Error_5;
    public static ErrorCode WFService_Error_6;
    public static ErrorCode WFService_Error_7;
    public static ErrorCode WFService_Error_8;
    public static ErrorCode WFService_Error_9;
    public static ErrorCode ReminderServiceBase;
    public static ErrorCode RS_Register_TableError;
    public static ErrorCode RS_Register_AlreadyRegistered;
    public static ErrorCode RS_Register_InvalidPeriod;
    public static ErrorCode RS_Register_NotRemindable;
    public static ErrorCode RS_NotResponsible;
    public static ErrorCode RS_Unregister_NotFoundLocally;
    public static ErrorCode RS_Unregister_TableError;
    public static ErrorCode RS_Table_Insert;
    public static ErrorCode RS_Table_Remove;
    public static ErrorCode RS_Tick_Delivery_Error;
    public static ErrorCode RS_Not_Started;
    public static ErrorCode RS_UnregisterGrain_TableError;
    public static ErrorCode RS_GrainBasedTable1;
    public static ErrorCode RS_Factory1;
    public static ErrorCode RS_FailedToReadTableAndStartTimer;
    public static ErrorCode RS_TableGrainInit1;
    public static ErrorCode RS_TableGrainInit2;
    public static ErrorCode RS_TableGrainInit3;
    public static ErrorCode RS_GrainBasedTable2;
    public static ErrorCode RS_ServiceStarting;
    public static ErrorCode RS_ServiceStarted;
    public static ErrorCode RS_ServiceStopping;
    public static ErrorCode RS_RegisterOrUpdate;
    public static ErrorCode RS_Unregister;
    public static ErrorCode RS_Stop;
    public static ErrorCode RS_RemoveFromTable;
    public static ErrorCode RS_GetReminder;
    public static ErrorCode RS_GetReminders;
    public static ErrorCode RS_RangeChanged;
    public static ErrorCode RS_LocalStop;
    public static ErrorCode RS_Started;
    public static ErrorCode RS_ServiceInitialLoadFailing;
    public static ErrorCode RS_ServiceInitialLoadFailed;
    public static ErrorCode RS_FastReminderInterval;
    public static ErrorCode ConsistentRingProviderBase;
    public static ErrorCode CRP_Local_Subscriber_Exception;
    public static ErrorCode CRP_ForGrains_Local_Subscriber_Exception_1;
    public static ErrorCode CRP_Added_Silo;
    public static ErrorCode CRP_Removed_Silo;
    public static ErrorCode CRP_Notify;
    public static ErrorCode CRP_ForGrains_Local_Subscriber_Exception_2;
    public static ErrorCode ProviderManagerBase;
    public static ErrorCode Provider_InstanceConstructionError1;
    public static ErrorCode Provider_Loaded;
    public static ErrorCode Provider_AssemblyLoadError;
    public static ErrorCode Provider_CatalogNoStorageProvider_1;
    public static ErrorCode Provider_CatalogNoStorageProvider_2;
    public static ErrorCode Provider_CatalogStorageProviderAllocated;
    public static ErrorCode Provider_NoDefaultProvider;
    public static ErrorCode Provider_ConfiguredProviderNotLoaded;
    public static ErrorCode Provider_ErrorFromInit;
    public static ErrorCode Provider_IgnoringExplicitSet;
    public static ErrorCode Provider_NotLoaded;
    public static ErrorCode Provider_Manager_Already_Loaded;
    public static ErrorCode Provider_CatalogNoStorageProvider_3;
    public static ErrorCode Provider_ProviderLoadedOk;
    public static ErrorCode Provider_ProviderNotFound;
    public static ErrorCode Provider_ProviderNotControllable;
    public static ErrorCode Provider_CatalogNoLogConsistencyProvider;
    public static ErrorCode Provider_CatalogLogConsistencyProviderAllocated;
    public static ErrorCode Provider_ErrorFromClose;
    public static ErrorCode PersistentStreamPullingAgentBase;
    public static ErrorCode PersistentStreamPullingAgent_01;
    public static ErrorCode PersistentStreamPullingAgent_02;
    public static ErrorCode PersistentStreamPullingAgent_03;
    public static ErrorCode PersistentStreamPullingAgent_04;
    public static ErrorCode PersistentStreamPullingAgent_05;
    public static ErrorCode PersistentStreamPullingAgent_06;
    public static ErrorCode PersistentStreamPullingAgent_07;
    public static ErrorCode PersistentStreamPullingAgent_08;
    public static ErrorCode PersistentStreamPullingAgent_09;
    public static ErrorCode PersistentStreamPullingAgent_10;
    public static ErrorCode PersistentStreamPullingAgent_11;
    public static ErrorCode PersistentStreamPullingAgent_12;
    public static ErrorCode PersistentStreamPullingAgent_13;
    public static ErrorCode PersistentStreamPullingAgent_14;
    public static ErrorCode PersistentStreamPullingAgent_15;
    public static ErrorCode PersistentStreamPullingAgent_16;
    public static ErrorCode PersistentStreamPullingAgent_17;
    public static ErrorCode PersistentStreamPullingAgent_18;
    public static ErrorCode PersistentStreamPullingAgent_19;
    public static ErrorCode PersistentStreamPullingAgent_20;
    public static ErrorCode PersistentStreamPullingAgent_21;
    public static ErrorCode PersistentStreamPullingAgent_22;
    public static ErrorCode PersistentStreamPullingAgent_23;
    public static ErrorCode PersistentStreamPullingAgent_24;
    public static ErrorCode PersistentStreamPullingAgent_25;
    public static ErrorCode PersistentStreamPullingAgent_26;
    public static ErrorCode PersistentStreamPullingAgent_27;
    public static ErrorCode PersistentStreamPullingAgent_28;
    public static ErrorCode StreamProviderManagerBase;
    public static ErrorCode StreamProvider_FailedToDispose;
    public static ErrorCode StreamProvider_ProducerFailedToUnregister;
    public static ErrorCode StreamProvider_NoStreamForItem;
    public static ErrorCode StreamProvider_AddObserverException;
    public static ErrorCode Stream_ExtensionNotInstalled;
    public static ErrorCode Stream_ProducerIsDead;
    public static ErrorCode StreamProvider_NoStreamForBatch;
    public static ErrorCode StreamProvider_ConsumerFailedToUnregister;
    public static ErrorCode Stream_ConsumerIsDead;
    public static ErrorCode Stream_RegisterProducerFailed;
    public static ErrorCode Stream_UnegisterProducerFailed;
    public static ErrorCode Stream_RegisterConsumerFailed;
    public static ErrorCode Stream_UnregisterConsumerFailed;
    public static ErrorCode Stream_SetSubscriptionToFaultedFailed;
    public static ErrorCode PersistentStreamPullingManagerBase;
    public static ErrorCode PersistentStreamPullingManager_01;
    public static ErrorCode PersistentStreamPullingManager_02;
    public static ErrorCode PersistentStreamPullingManager_03;
    public static ErrorCode PersistentStreamPullingManager_04;
    public static ErrorCode PersistentStreamPullingManager_05;
    public static ErrorCode PersistentStreamPullingManager_06;
    public static ErrorCode PersistentStreamPullingManager_07;
    public static ErrorCode PersistentStreamPullingManager_08;
    public static ErrorCode PersistentStreamPullingManager_09;
    public static ErrorCode PersistentStreamPullingManager_10;
    public static ErrorCode PersistentStreamPullingManager_11;
    public static ErrorCode PersistentStreamPullingManager_12;
    public static ErrorCode PersistentStreamPullingManager_13;
    public static ErrorCode PersistentStreamPullingManager_14;
    public static ErrorCode PersistentStreamPullingManager_15;
    public static ErrorCode PersistentStreamPullingManager_16;
    public static ErrorCode PersistentStreamPullingManager_Starting;
    public static ErrorCode PersistentStreamPullingManager_Stopping;
    public static ErrorCode PersistentStreamPullingManager_Started;
    public static ErrorCode PersistentStreamPullingManager_Stopped;
    public static ErrorCode PersistentStreamPullingManager_AlreadyStarted;
    public static ErrorCode PersistentStreamPullingManager_AlreadyStopped;
    public static ErrorCode PersistentStreamPullingManager_PeriodicPrint;
    public static ErrorCode AzureServiceRuntimeWrapper;
    public static ErrorCode AzureServiceRuntime_NotLoaded;
    public static ErrorCode AzureServiceRuntime_FailedToLoad;
    public static ErrorCode CodeGenBase;
    public static ErrorCode CodeGenCompilationFailed;
    public static ErrorCode CodeGenCompilationSucceeded;
    public static ErrorCode CodeGenSourceGenerated;
    public static ErrorCode CodeGenSerializerGenerator;
    public static ErrorCode CodeGenIgnoringTypes;
    public static ErrorCode CodeGenDllMissing;
    public static ErrorCode CodeGenSystemTypeRequiresSerializer;
    public static ErrorCode MultiClusterNetworkBase;
    public static ErrorCode MultiClusterNetwork_Starting;
    public static ErrorCode MultiClusterNetwork_Started;
    public static ErrorCode MultiClusterNetwork_FailedToStart;
    public static ErrorCode MultiClusterNetwork_LocalSubscriberException;
    public static ErrorCode MultiClusterNetwork_GossipCommunicationFailure;
    public static ErrorCode MultiClusterNetwork_NoChannelsConfigured;
    public static ErrorCode CancellationTokenManagerBase;
    public static ErrorCode CancellationTokenCancelFailed;
    public static ErrorCode CancellationExtensionCreationFailed;
    public static ErrorCode GlobalSingleInstanceBase;
    public static ErrorCode GlobalSingleInstance_ProtocolError;
    public static ErrorCode GlobalSingleInstance_WarningInvalidOrigin;
    public static ErrorCode GlobalSingleInstance_MaintainerException;
    public static ErrorCode GlobalSingleInstance_MultipleOwners;
    public static ErrorCode TypeManagerBase;
    public static ErrorCode TypeManager_GetSiloGrainInterfaceMapError;
    public static ErrorCode TypeManager_GetClusterGrainTypeResolverError;
    public static ErrorCode LogConsistencyBase;
    public static ErrorCode LogConsistency_UserCodeException;
    public static ErrorCode LogConsistency_CaughtException;
    public static ErrorCode LogConsistency_ProtocolError;
    public static ErrorCode LogConsistency_ProtocolFatalError;
    public static ErrorCode ServiceFabricBase;
    public static ErrorCode TransactionsBase;
    public static ErrorCode Transactions_SendingTMRequest;
    public static ErrorCode Transactions_ReceivedTMResponse;
    public static ErrorCode Transactions_TMError;
    public static ErrorCode OSBase;
    public static ErrorCode OS_InvalidOS;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Orleans.Grain : object {
    [CompilerGeneratedAttribute]
private IGrainContext <GrainContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IGrainRuntime <Runtime>k__BackingField;
    public IGrainContext GrainContext { get; private set; }
    public GrainReference GrainReference { get; }
    internal IGrainRuntime Runtime { get; }
    protected IGrainFactory GrainFactory { get; }
    protected internal IServiceProvider ServiceProvider { get; }
    internal GrainId GrainId { get; }
    public string IdentityString { get; }
    public string RuntimeIdentity { get; }
    protected Grain(IGrainContext grainContext, IGrainRuntime grainRuntime);
    [CompilerGeneratedAttribute]
public sealed virtual IGrainContext get_GrainContext();
    [CompilerGeneratedAttribute]
private void set_GrainContext(IGrainContext value);
    public GrainReference get_GrainReference();
    [CompilerGeneratedAttribute]
internal IGrainRuntime get_Runtime();
    protected IGrainFactory get_GrainFactory();
    protected internal IServiceProvider get_ServiceProvider();
    internal GrainId get_GrainId();
    public string get_IdentityString();
    public string get_RuntimeIdentity();
    [ObsoleteAttribute("Use 'this.RegisterGrainTimer(callback, state, new() { DueTime = dueTime, Period = period, Interleave = true })' instead.")]
protected IDisposable RegisterTimer(Func`2<object, Task> callback, object state, TimeSpan dueTime, TimeSpan period);
    protected void DeactivateOnIdle();
    protected void MigrateOnIdle();
    protected void DelayDeactivation(TimeSpan timeSpan);
    public virtual Task OnActivateAsync(CancellationToken cancellationToken);
    public virtual Task OnDeactivateAsync(DeactivationReason reason, CancellationToken cancellationToken);
    internal void EnsureRuntime();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Orleans.Grain`1 : Grain {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IStorage`1<TGrainState> _storage;
    protected TGrainState State { get; protected set; }
    protected Grain`1(IStorage`1<TGrainState> storage);
    protected TGrainState get_State();
    protected void set_State(TGrainState value);
    protected virtual Task ClearStateAsync();
    protected virtual Task WriteStateAsync();
    protected virtual Task ReadStateAsync();
}
[ExtensionAttribute]
public static class Orleans.GrainBaseExtensions : object {
    [ExtensionAttribute]
public static void DeactivateOnIdle(IGrainBase grain);
    [ExtensionAttribute]
public static void MigrateOnIdle(IGrainBase grain);
    [ExtensionAttribute]
public static IGrainTimer RegisterGrainTimer(IGrainBase grain, Func`3<TState, CancellationToken, Task> callback, TState state, GrainTimerCreationOptions options);
    [ExtensionAttribute]
public static IGrainTimer RegisterGrainTimer(IGrainBase grain, Func`2<CancellationToken, Task> callback, GrainTimerCreationOptions options);
    [ExtensionAttribute]
public static IGrainTimer RegisterGrainTimer(IGrainBase grain, Func`1<Task> callback, GrainTimerCreationOptions options);
    [ExtensionAttribute]
public static IGrainTimer RegisterGrainTimer(IGrainBase grain, Func`2<TState, Task> callback, TState state, GrainTimerCreationOptions options);
    [ExtensionAttribute]
public static IGrainTimer RegisterGrainTimer(IGrainBase grain, Func`1<Task> callback, TimeSpan dueTime, TimeSpan period);
    [ExtensionAttribute]
public static IGrainTimer RegisterGrainTimer(IGrainBase grain, Func`2<CancellationToken, Task> callback, TimeSpan dueTime, TimeSpan period);
    [ExtensionAttribute]
public static IGrainTimer RegisterGrainTimer(IGrainBase grain, Func`2<TState, Task> callback, TState state, TimeSpan dueTime, TimeSpan period);
    [ExtensionAttribute]
public static IGrainTimer RegisterGrainTimer(IGrainBase grain, Func`3<TState, CancellationToken, Task> callback, TState state, TimeSpan dueTime, TimeSpan period);
}
public class Orleans.GrainCallFilterDelegate : MulticastDelegate {
    public GrainCallFilterDelegate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task Invoke(IGrainCallContext context);
    public virtual IAsyncResult BeginInvoke(IGrainCallContext context, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
[ImmutableAttribute]
public class Orleans.GrainCancellationToken : object {
    private CancellationTokenSource _cancellationTokenSource;
    private ConcurrentDictionary`2<GrainId, GrainReference> _targetGrainReferences;
    private IGrainCancellationTokenRuntime _cancellationTokenRuntime;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    internal Guid Id { get; private set; }
    public CancellationToken CancellationToken { get; }
    internal bool IsCancellationRequested { get; }
    internal GrainCancellationToken(Guid id);
    internal GrainCancellationToken(Guid id, bool canceled, IGrainCancellationTokenRuntime runtime);
    [CompilerGeneratedAttribute]
internal Guid get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(Guid value);
    public CancellationToken get_CancellationToken();
    internal bool get_IsCancellationRequested();
    internal Task Cancel();
    internal void AddGrainReference(IGrainCancellationTokenRuntime runtime, GrainReference grainReference);
    public sealed virtual void Dispose();
}
public class Orleans.GrainCancellationTokenSource : object {
    private GrainCancellationToken _grainCancellationToken;
    public GrainCancellationToken Token { get; }
    public bool IsCancellationRequested { get; }
    public GrainCancellationToken get_Token();
    public bool get_IsCancellationRequested();
    public Task Cancel();
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Orleans.GrainContextComponentExtensions : object {
    [ExtensionAttribute]
public static TComponent GetGrainExtension(IGrainContext context);
}
[AttributeUsageAttribute("4")]
public class Orleans.GrainDirectory.GrainDirectoryAttribute : Attribute {
    public static string DEFAULT_GRAIN_DIRECTORY;
    [CompilerGeneratedAttribute]
private string <GrainDirectoryName>k__BackingField;
    public string GrainDirectoryName { get; public set; }
    public GrainDirectoryAttribute(string grainDirectoryName);
    [CompilerGeneratedAttribute]
public string get_GrainDirectoryName();
    [CompilerGeneratedAttribute]
public void set_GrainDirectoryName(string value);
    public sealed virtual void Populate(IServiceProvider services, Type grainClass, GrainType grainType, Dictionary`2<string, string> properties);
}
internal static class Orleans.GrainDirectory.GrainDirectoryExtension : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Orleans.GrainDirectory.GrainDirectoryExtension/<Register>d__0")]
internal static Task`1<GrainAddress> Register(IGrainDirectory directory, GrainAddress address, GrainAddress previousAddress);
}
[NullableContextAttribute("1")]
public interface Orleans.GrainDirectory.IGrainDirectory {
    public abstract virtual Task`1<GrainAddress> Register(GrainAddress address);
    public virtual Task`1<GrainAddress> Register(GrainAddress address, GrainAddress previousAddress);
    public abstract virtual Task Unregister(GrainAddress address);
    public abstract virtual Task`1<GrainAddress> Lookup(GrainId grainId);
    public abstract virtual Task UnregisterSilos(List`1<SiloAddress> siloAddresses);
}
[ExtensionAttribute]
public static class Orleans.GrainExtensions : object {
    private static string WRONG_GRAIN_ERROR_MSG;
    [ExtensionAttribute]
internal static GrainReference AsReference(IAddressable grain);
    [ExtensionAttribute]
public static TGrainInterface AsReference(IAddressable grain);
    [ExtensionAttribute]
public static TGrainInterface Cast(IAddressable grain);
    [ExtensionAttribute]
public static object AsReference(IAddressable grain, Type interfaceType);
    [ExtensionAttribute]
public static object Cast(IAddressable grain, Type interfaceType);
    [ExtensionAttribute]
public static GrainId GetGrainId(IAddressable grain);
    private static string GetWrongGrainTypeErrorMessage(IAddressable grain);
    [ExtensionAttribute]
public static bool IsPrimaryKeyBasedOnLong(IAddressable grain);
    [ExtensionAttribute]
public static long GetPrimaryKeyLong(IAddressable grain, String& keyExt);
    [ExtensionAttribute]
public static long GetPrimaryKeyLong(IAddressable grain);
    [ExtensionAttribute]
public static Guid GetPrimaryKey(IAddressable grain, String& keyExt);
    [ExtensionAttribute]
public static Guid GetPrimaryKey(IAddressable grain);
    [ExtensionAttribute]
public static string GetPrimaryKeyString(IAddressable grain);
    [DoesNotReturnAttribute]
private static void ThrowGrainNull();
}
[AttributeUsageAttribute("4")]
public class Orleans.GrainTypeAttribute : Attribute {
    private GrainType _grainType;
    public GrainTypeAttribute(string grainType);
    public sealed virtual GrainType GetGrainType(IServiceProvider services, Type type);
}
public interface Orleans.IConfigurationValidator {
    public abstract virtual void ValidateConfiguration();
}
public interface Orleans.IGrain {
}
public interface Orleans.IGrainBase {
    public IGrainContext GrainContext { get; }
    public abstract virtual IGrainContext get_GrainContext();
    public virtual Task OnActivateAsync(CancellationToken token);
    public virtual Task OnDeactivateAsync(DeactivationReason reason, CancellationToken token);
}
[NullableContextAttribute("1")]
public interface Orleans.IGrainCallContext {
    public IInvokable Request { get; }
    public object Grain { get; }
    public Nullable`1<GrainId> SourceId { get; }
    public GrainId TargetId { get; }
    public GrainInterfaceType InterfaceType { get; }
    public string InterfaceName { get; }
    public string MethodName { get; }
    public MethodInfo InterfaceMethod { get; }
    [NullableAttribute("2")]
public object Result { get; public set; }
    [NullableAttribute("2")]
public Response Response { get; public set; }
    public abstract virtual IInvokable get_Request();
    public abstract virtual object get_Grain();
    public abstract virtual Nullable`1<GrainId> get_SourceId();
    public abstract virtual GrainId get_TargetId();
    public abstract virtual GrainInterfaceType get_InterfaceType();
    public abstract virtual string get_InterfaceName();
    public abstract virtual string get_MethodName();
    public abstract virtual MethodInfo get_InterfaceMethod();
    [NullableContextAttribute("2")]
public abstract virtual object get_Result();
    [NullableContextAttribute("2")]
public abstract virtual void set_Result(object value);
    [NullableContextAttribute("2")]
public abstract virtual Response get_Response();
    [NullableContextAttribute("2")]
public abstract virtual void set_Response(Response value);
    public abstract virtual Task Invoke();
}
public interface Orleans.IGrainFactory {
    public abstract virtual TGrainInterface GetGrain(Guid primaryKey, string grainClassNamePrefix);
    public abstract virtual TGrainInterface GetGrain(long primaryKey, string grainClassNamePrefix);
    public abstract virtual TGrainInterface GetGrain(string primaryKey, string grainClassNamePrefix);
    public abstract virtual TGrainInterface GetGrain(Guid primaryKey, string keyExtension, string grainClassNamePrefix);
    public abstract virtual TGrainInterface GetGrain(long primaryKey, string keyExtension, string grainClassNamePrefix);
    public abstract virtual TGrainObserverInterface CreateObjectReference(IGrainObserver obj);
    public abstract virtual void DeleteObjectReference(IGrainObserver obj);
    public abstract virtual IGrain GetGrain(Type grainInterfaceType, Guid grainPrimaryKey);
    public abstract virtual IGrain GetGrain(Type grainInterfaceType, long grainPrimaryKey);
    public abstract virtual IGrain GetGrain(Type grainInterfaceType, string grainPrimaryKey);
    public abstract virtual IGrain GetGrain(Type grainInterfaceType, Guid grainPrimaryKey, string keyExtension);
    public abstract virtual IGrain GetGrain(Type grainInterfaceType, long grainPrimaryKey, string keyExtension);
    public abstract virtual TGrainInterface GetGrain(GrainId grainId);
    public abstract virtual IAddressable GetGrain(GrainId grainId);
    public abstract virtual IAddressable GetGrain(GrainId grainId, GrainInterfaceType interfaceType);
}
public interface Orleans.IGrainObserver {
}
public interface Orleans.IGrainWithGuidCompoundKey {
}
public interface Orleans.IGrainWithGuidKey {
}
public interface Orleans.IGrainWithIntegerCompoundKey {
}
public interface Orleans.IGrainWithIntegerKey {
}
public interface Orleans.IGrainWithStringKey {
}
[NullableContextAttribute("1")]
public interface Orleans.IIncomingGrainCallContext {
    public IGrainContext TargetContext { get; }
    public MethodInfo ImplementationMethod { get; }
    public abstract virtual IGrainContext get_TargetContext();
    public abstract virtual MethodInfo get_ImplementationMethod();
}
public interface Orleans.IIncomingGrainCallFilter {
    public abstract virtual Task Invoke(IIncomingGrainCallContext context);
}
public interface Orleans.ILifecycleObservable {
    public abstract virtual IDisposable Subscribe(string observerName, int stage, ILifecycleObserver observer);
}
public interface Orleans.ILifecycleObserver {
    public abstract virtual Task OnStart(CancellationToken cancellationToken);
    public abstract virtual Task OnStop(CancellationToken cancellationToken);
}
public interface Orleans.ILifecycleParticipant`1 {
    public abstract virtual void Participate(TLifecycleObservable observer);
}
public interface Orleans.ILifecycleSubject {
}
public class Orleans.IncomingGrainCallFilterDelegate : MulticastDelegate {
    public IncomingGrainCallFilterDelegate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task Invoke(IIncomingGrainCallContext context);
    public virtual IAsyncResult BeginInvoke(IIncomingGrainCallContext context, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
internal class Orleans.Interner`2 : object {
    private Timer cacheCleanupTimer;
    private ConcurrentDictionary`2<TKey, WeakReference`1<TValue>> internCache;
    public Interner`2(int initialSize);
    public TValue FindOrCreate(TKey key, Func`2<TKey, TValue> creatorFunc);
    public TValue FindOrCreate(TKey key, Func`3<TKey, TState, TValue> creatorFunc, TState state);
    private void InternCacheCleanupTimerCallback(object state);
    public sealed virtual void Dispose();
}
internal static class Orleans.InternerConstants : object {
    public static int SIZE_SMALL;
    public static int SIZE_MEDIUM;
    public static int SIZE_LARGE;
    public static int SIZE_X_LARGE;
}
[NullableContextAttribute("2")]
public interface Orleans.IOutgoingGrainCallContext {
    public IGrainContext SourceContext { get; }
    public abstract virtual IGrainContext get_SourceContext();
}
public interface Orleans.IOutgoingGrainCallFilter {
    public abstract virtual Task Invoke(IOutgoingGrainCallContext context);
}
public interface Orleans.ISystemTarget {
}
internal interface Orleans.ISystemTargetBase {
    public SiloAddress Silo { get; }
    public abstract virtual SiloAddress get_Silo();
}
public interface Orleans.IVersionManager {
    public abstract virtual Task SetCompatibilityStrategy(CompatibilityStrategy strategy);
    public abstract virtual Task SetSelectorStrategy(VersionSelectorStrategy strategy);
    public abstract virtual Task SetCompatibilityStrategy(GrainInterfaceType interfaceType, CompatibilityStrategy strategy);
    public abstract virtual Task SetSelectorStrategy(GrainInterfaceType interfaceType, VersionSelectorStrategy strategy);
}
[ExtensionAttribute]
public static class Orleans.LifecycleExtensions : object {
    [ExtensionAttribute]
public static IDisposable Subscribe(ILifecycleObservable observable, string observerName, int stage, Func`2<CancellationToken, Task> onStart, Func`2<CancellationToken, Task> onStop);
    [ExtensionAttribute]
public static IDisposable Subscribe(ILifecycleObservable observable, string observerName, int stage, Func`2<CancellationToken, Task> onStart);
    [ExtensionAttribute]
public static IDisposable Subscribe(ILifecycleObservable observable, int stage, ILifecycleObserver observer);
    [ExtensionAttribute]
public static IDisposable Subscribe(ILifecycleObservable observable, int stage, Func`2<CancellationToken, Task> onStart, Func`2<CancellationToken, Task> onStop);
    [ExtensionAttribute]
public static IDisposable Subscribe(ILifecycleObservable observable, int stage, Func`2<CancellationToken, Task> onStart);
    [ExtensionAttribute]
public static IDisposable Subscribe(ILifecycleObservable observable, int stage, ILifecycleObserver observer);
}
public class Orleans.Metadata.AttributeGrainBindingsProvider : object {
    private static string BindingPrefix;
    private IServiceProvider serviceProvider;
    public AttributeGrainBindingsProvider(IServiceProvider serviceProvider);
    public sealed virtual void Populate(Type grainClass, GrainType grainType, Dictionary`2<string, string> properties);
}
internal class Orleans.Metadata.AttributeGrainInterfacePropertiesProvider : object {
    private IServiceProvider serviceProvider;
    public AttributeGrainInterfacePropertiesProvider(IServiceProvider serviceProvider);
    public sealed virtual void Populate(Type interfaceType, GrainInterfaceType grainInterfaceType, Dictionary`2<string, string> properties);
}
public class Orleans.Metadata.AttributeGrainPropertiesProvider : object {
    private IServiceProvider serviceProvider;
    public AttributeGrainPropertiesProvider(IServiceProvider serviceProvider);
    public sealed virtual void Populate(Type grainClass, GrainType grainType, Dictionary`2<string, string> properties);
}
public class Orleans.Metadata.AttributeGrainTypeProvider : object {
    private IServiceProvider _serviceProvider;
    public AttributeGrainTypeProvider(IServiceProvider serviceProvider);
    public sealed virtual bool TryGetGrainType(Type grainClass, GrainType& grainType);
}
[GenerateSerializerAttribute]
[ImmutableAttribute]
public class Orleans.Metadata.ClusterManifest : object {
    [CompilerGeneratedAttribute]
private MajorMinorVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<SiloAddress, GrainManifest> <Silos>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<GrainManifest> <AllGrainManifests>k__BackingField;
    [IdAttribute("0")]
public MajorMinorVersion Version { get; }
    [IdAttribute("1")]
public ImmutableDictionary`2<SiloAddress, GrainManifest> Silos { get; }
    [IdAttribute("2")]
public ImmutableArray`1<GrainManifest> AllGrainManifests { get; }
    public ClusterManifest(MajorMinorVersion version, ImmutableDictionary`2<SiloAddress, GrainManifest> silos);
    [CompilerGeneratedAttribute]
public MajorMinorVersion get_Version();
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<SiloAddress, GrainManifest> get_Silos();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<GrainManifest> get_AllGrainManifests();
}
[AttributeUsageAttribute("1024")]
public class Orleans.Metadata.DefaultGrainTypeAttribute : Attribute {
    private string grainType;
    public DefaultGrainTypeAttribute(string grainType);
    private sealed virtual override void Orleans.Metadata.IGrainInterfacePropertiesProviderAttribute.Populate(IServiceProvider services, Type type, Dictionary`2<string, string> properties);
}
[GenerateSerializerAttribute]
[ImmutableAttribute]
public class Orleans.Metadata.GrainInterfaceProperties : object {
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, string> <Properties>k__BackingField;
    [IdAttribute("0")]
public ImmutableDictionary`2<string, string> Properties { get; }
    public GrainInterfaceProperties(ImmutableDictionary`2<string, string> values);
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, string> get_Properties();
    public string ToDetailedString();
}
[GenerateSerializerAttribute]
[ImmutableAttribute]
public class Orleans.Metadata.GrainManifest : object {
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<GrainInterfaceType, GrainInterfaceProperties> <Interfaces>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<GrainType, GrainProperties> <Grains>k__BackingField;
    [IdAttribute("0")]
public ImmutableDictionary`2<GrainInterfaceType, GrainInterfaceProperties> Interfaces { get; }
    [IdAttribute("1")]
public ImmutableDictionary`2<GrainType, GrainProperties> Grains { get; }
    public GrainManifest(ImmutableDictionary`2<GrainType, GrainProperties> grains, ImmutableDictionary`2<GrainInterfaceType, GrainInterfaceProperties> interfaces);
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<GrainInterfaceType, GrainInterfaceProperties> get_Interfaces();
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<GrainType, GrainProperties> get_Grains();
}
[GenerateSerializerAttribute]
[ImmutableAttribute]
public class Orleans.Metadata.GrainProperties : object {
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, string> <Properties>k__BackingField;
    [IdAttribute("0")]
public ImmutableDictionary`2<string, string> Properties { get; }
    public GrainProperties(ImmutableDictionary`2<string, string> values);
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, string> get_Properties();
    public string ToDetailedString();
}
public interface Orleans.Metadata.IGrainBindingsProviderAttribute {
    public abstract virtual IEnumerable`1<Dictionary`2<string, string>> GetBindings(IServiceProvider services, Type grainClass, GrainType grainType);
}
public interface Orleans.Metadata.IGrainInterfacePropertiesProvider {
    public abstract virtual void Populate(Type interfaceType, GrainInterfaceType grainInterfaceType, Dictionary`2<string, string> properties);
}
public interface Orleans.Metadata.IGrainInterfacePropertiesProviderAttribute {
    public abstract virtual void Populate(IServiceProvider services, Type interfaceType, Dictionary`2<string, string> properties);
}
public interface Orleans.Metadata.IGrainPropertiesProvider {
    public abstract virtual void Populate(Type grainClass, GrainType grainType, Dictionary`2<string, string> properties);
}
public interface Orleans.Metadata.IGrainPropertiesProviderAttribute {
    public abstract virtual void Populate(IServiceProvider services, Type grainClass, GrainType grainType, Dictionary`2<string, string> properties);
}
public interface Orleans.Metadata.IGrainTypeProvider {
    public abstract virtual bool TryGetGrainType(Type type, GrainType& grainType);
}
public interface Orleans.Metadata.IGrainTypeProviderAttribute {
    public abstract virtual GrainType GetGrainType(IServiceProvider services, Type type);
}
[IsReadOnlyAttribute]
[GenerateSerializerAttribute]
[ImmutableAttribute]
public class Orleans.Metadata.MajorMinorVersion : ValueType {
    [CompilerGeneratedAttribute]
private long <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Minor>k__BackingField;
    public static MajorMinorVersion Zero { get; }
    public static MajorMinorVersion MinValue { get; }
    [IdAttribute("0")]
public long Major { get; }
    [IdAttribute("1")]
public long Minor { get; }
    public MajorMinorVersion(long majorVersion, long minorVersion);
    public static MajorMinorVersion get_Zero();
    public static MajorMinorVersion get_MinValue();
    [CompilerGeneratedAttribute]
public long get_Major();
    [CompilerGeneratedAttribute]
public long get_Minor();
    public sealed virtual int CompareTo(MajorMinorVersion other);
    public sealed virtual bool Equals(MajorMinorVersion other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static MajorMinorVersion Parse(string value);
    public virtual string ToString();
    public static bool op_Equality(MajorMinorVersion left, MajorMinorVersion right);
    public static bool op_Inequality(MajorMinorVersion left, MajorMinorVersion right);
    public static bool op_GreaterThanOrEqual(MajorMinorVersion left, MajorMinorVersion right);
    public static bool op_LessThanOrEqual(MajorMinorVersion left, MajorMinorVersion right);
    public static bool op_GreaterThan(MajorMinorVersion left, MajorMinorVersion right);
    public static bool op_LessThan(MajorMinorVersion left, MajorMinorVersion right);
}
public static class Orleans.Metadata.WellKnownGrainInterfaceProperties : object {
    public static string Version;
    public static string DefaultGrainType;
    public static string TypeName;
}
public static class Orleans.Metadata.WellKnownGrainTypeProperties : object {
    public static string PlacementStrategy;
    public static string GrainDirectory;
    public static string Unordered;
    public static string ImplementedInterfacePrefix;
    public static string IdleDeactivationPeriod;
    public static string IndefiniteIdleDeactivationPeriodValue;
    public static string TypeName;
    public static string FullTypeName;
    public static string BindingPrefix;
    public static string BindingTypeKey;
    public static string StreamBindingTypeValue;
    public static string BroadcastChannelBindingTypeValue;
    public static string StreamBindingPatternKey;
    public static string BroadcastChannelBindingPatternKey;
    public static string StreamIdMapperKey;
    public static string ChannelIdMapperKey;
    public static string StreamBindingIncludeNamespaceKey;
    public static string LegacyGrainKeyType;
    public static string Reentrant;
    public static string MayInterleavePredicate;
    public static string Immovable;
}
public class Orleans.OutgoingGrainCallFilterDelegate : MulticastDelegate {
    public OutgoingGrainCallFilterDelegate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task Invoke(IOutgoingGrainCallContext context);
    public virtual IAsyncResult BeginInvoke(IOutgoingGrainCallContext context, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("4")]
public class Orleans.Placement.ActivationCountBasedPlacementAttribute : PlacementAttribute {
}
[AttributeUsageAttribute("4")]
public class Orleans.Placement.HashBasedPlacementAttribute : PlacementAttribute {
}
[AttributeUsageAttribute("4")]
public class Orleans.Placement.ImmovableAttribute : Attribute {
    public sealed virtual void Populate(IServiceProvider services, Type grainClass, GrainType grainType, Dictionary`2<string, string> properties);
}
[AttributeUsageAttribute("4")]
public abstract class Orleans.Placement.PlacementAttribute : Attribute {
    [CompilerGeneratedAttribute]
private PlacementStrategy <PlacementStrategy>k__BackingField;
    public PlacementStrategy PlacementStrategy { get; private set; }
    protected PlacementAttribute(PlacementStrategy placement);
    [CompilerGeneratedAttribute]
public PlacementStrategy get_PlacementStrategy();
    [CompilerGeneratedAttribute]
private void set_PlacementStrategy(PlacementStrategy value);
    public virtual void Populate(IServiceProvider services, Type grainClass, GrainType grainType, Dictionary`2<string, string> properties);
}
[AttributeUsageAttribute("4")]
public class Orleans.Placement.PreferLocalPlacementAttribute : PlacementAttribute {
}
[AttributeUsageAttribute("4")]
public class Orleans.Placement.RandomPlacementAttribute : PlacementAttribute {
}
[AttributeUsageAttribute("4")]
public class Orleans.Placement.ResourceOptimizedPlacementAttribute : PlacementAttribute {
}
[AttributeUsageAttribute("4")]
public class Orleans.Placement.SiloRoleBasedPlacementAttribute : PlacementAttribute {
}
public interface Orleans.Providers.IProviderBuilder`1 {
    public abstract virtual void Configure(TBuilder builder, string name, IConfigurationSection configurationSection);
}
[AttributeUsageAttribute("4")]
public class Orleans.Providers.LogConsistencyProviderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    public string ProviderName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProviderName();
    [CompilerGeneratedAttribute]
public void set_ProviderName(string value);
}
public static class Orleans.Providers.ProviderConstants : object {
    public static string DEFAULT_STORAGE_PROVIDER_NAME;
    public static string DEFAULT_LOG_CONSISTENCY_PROVIDER_NAME;
    public static string DEFAULT_PUBSUB_PROVIDER_NAME;
}
[AttributeUsageAttribute("4")]
public class Orleans.Providers.StorageProviderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    public string ProviderName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProviderName();
    [CompilerGeneratedAttribute]
public void set_ProviderName(string value);
}
[ExtensionAttribute]
public static class Orleans.PublicOrleansTaskExtensions : object {
    private static Action`1<Task> IgnoreTaskContinuation;
    private static PublicOrleansTaskExtensions();
    [ExtensionAttribute]
public static void Ignore(Task task);
}
[GenerateSerializerAttribute]
[ImmutableAttribute]
[SuppressReferenceTrackingAttribute]
public class Orleans.Runtime.ActivationCountBasedPlacement : PlacementStrategy {
    [CompilerGeneratedAttribute]
private static ActivationCountBasedPlacement <Singleton>k__BackingField;
    internal static ActivationCountBasedPlacement Singleton { get; }
    private static ActivationCountBasedPlacement();
    [CompilerGeneratedAttribute]
internal static ActivationCountBasedPlacement get_Singleton();
}
[IsReadOnlyAttribute]
[GenerateSerializerAttribute]
[ImmutableAttribute]
[JsonConverterAttribute("Orleans.Runtime.ActivationIdConverter")]
public class Orleans.Runtime.ActivationId : ValueType {
    [DataMemberAttribute]
[IdAttribute("0")]
internal Guid Key;
    public bool IsDefault { get; }
    public ActivationId(Guid key);
    public bool get_IsDefault();
    public static ActivationId NewId();
    public static ActivationId GetDeterministic(GrainId grain);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ActivationId other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider formatProvider);
    private sealed virtual override bool System.ISpanFormattable.TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [NullableContextAttribute("1")]
public string ToParsableString();
    [NullableContextAttribute("1")]
public static ActivationId FromParsableString(string activationId);
    public static bool op_Equality(ActivationId left, ActivationId right);
    public static bool op_Inequality(ActivationId left, ActivationId right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Orleans.Runtime.ActivationIdConverter : JsonConverter`1<ActivationId> {
    public virtual ActivationId Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, ActivationId value, JsonSerializerOptions options);
}
[ExtensionAttribute]
public static class Orleans.Runtime.AsyncEnumerableExtensions : object {
    [ExtensionAttribute]
public static IAsyncEnumerable`1<T> WithBatchSize(IAsyncEnumerable`1<T> self, int maxBatchSize);
}
[GenerateSerializerAttribute]
[SuppressReferenceTrackingAttribute]
[ReturnValueProxyAttribute("InitializeRequest")]
public abstract class Orleans.Runtime.AsyncEnumerableRequest`1 : RequestBase {
    [CompilerGeneratedAttribute]
private GrainReference <TargetGrain>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxBatchSize>k__BackingField;
    internal GrainReference TargetGrain { get; private set; }
    [IdAttribute("0")]
public int MaxBatchSize { get; public set; }
    [CompilerGeneratedAttribute]
internal GrainReference get_TargetGrain();
    [CompilerGeneratedAttribute]
private void set_TargetGrain(GrainReference value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaxBatchSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxBatchSize(int value);
    public sealed virtual IAsyncEnumerator`1<T> GetAsyncEnumerator(CancellationToken cancellationToken);
    public IAsyncEnumerable`1<T> InitializeRequest(GrainReference targetGrainReference);
    public virtual ValueTask`1<Response> Invoke();
    public sealed virtual IAsyncEnumerable`1<T> InvokeImplementation();
    protected abstract virtual IAsyncEnumerable`1<T> InvokeInner();
}
internal class Orleans.Runtime.AsyncEnumeratorProxy`1 : object {
    private AsyncEnumerableRequest`1<T> _request;
    private CancellationToken _cancellationToken;
    private IAsyncEnumerableGrainExtension _target;
    private Guid _requestId;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2<EnumerationResult, object> _current;
    private int _batchIndex;
    private bool _disposed;
    private bool _initialized;
    [CompilerGeneratedAttribute]
private int <MaxBatchSize>k__BackingField;
    private bool IsBatch { get; }
    private bool IsElement { get; }
    private bool IsCompleted { get; }
    public int MaxBatchSize { get; public set; }
    public T Current { get; }
    public AsyncEnumeratorProxy`1(AsyncEnumerableRequest`1<T> request, CancellationToken cancellationToken);
    private bool get_IsBatch();
    private bool get_IsElement();
    private bool get_IsCompleted();
    [CompilerGeneratedAttribute]
public int get_MaxBatchSize();
    [CompilerGeneratedAttribute]
public void set_MaxBatchSize(int value);
    public sealed virtual T get_Current();
    [AsyncStateMachineAttribute("Orleans.Runtime.AsyncEnumeratorProxy`1/<DisposeAsync>d__21")]
public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Orleans.Runtime.AsyncEnumeratorProxy`1/<MoveNextAsync>d__22")]
public sealed virtual ValueTask`1<bool> MoveNextAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Orleans.Runtime.AttributeGrainInterfaceTypeProvider : object {
    private IServiceProvider _serviceProvider;
    public AttributeGrainInterfaceTypeProvider(IServiceProvider serviceProvider);
    public sealed virtual bool TryGetGrainInterfaceType(Type type, GrainInterfaceType& grainInterfaceType);
}
[IsReadOnlyAttribute]
internal class Orleans.Runtime.ClientGrainId : ValueType {
    public GrainId GrainId;
    private ClientGrainId(GrainId grainId);
    public static ClientGrainId Create();
    [NullableContextAttribute("1")]
public static ClientGrainId Create(string id);
    public static ClientGrainId Create(IdSpan id);
    public static bool TryParse(GrainId grainId, ClientGrainId& clientId);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider formatProvider);
    private sealed virtual override bool System.ISpanFormattable.TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    public sealed virtual bool Equals(ClientGrainId other);
    public sealed virtual int CompareTo(ClientGrainId other);
    public static bool op_Equality(ClientGrainId left, ClientGrainId right);
    public static bool op_Inequality(ClientGrainId left, ClientGrainId right);
}
[GenerateSerializerAttribute]
public class Orleans.Runtime.ClientNotAvailableException : OrleansException {
    internal ClientNotAvailableException(GrainId clientId);
    internal ClientNotAvailableException(string message);
    internal ClientNotAvailableException(string message, Exception innerException);
    [ObsoleteAttribute]
private ClientNotAvailableException(SerializationInfo info, StreamingContext context);
}
internal class Orleans.Runtime.ClientObserversPlacement : PlacementStrategy {
    [CompilerGeneratedAttribute]
private static ClientObserversPlacement <Instance>k__BackingField;
    public static ClientObserversPlacement Instance { get; }
    private static ClientObserversPlacement();
    [CompilerGeneratedAttribute]
public static ClientObserversPlacement get_Instance();
}
[GenerateSerializerAttribute]
public class Orleans.Runtime.EnumerationAbortedException : Exception {
    public EnumerationAbortedException(string message);
    public EnumerationAbortedException(string message, Exception innerException);
    [ObsoleteAttribute]
protected EnumerationAbortedException(SerializationInfo info, StreamingContext context);
}
[GenerateSerializerAttribute]
public enum Orleans.Runtime.EnumerationResult : Enum {
    public int value__;
    public static EnumerationResult Heartbeat;
    public static EnumerationResult Element;
    public static EnumerationResult Batch;
    public static EnumerationResult Completed;
    public static EnumerationResult MissingEnumeratorError;
    public static EnumerationResult CompletedWithElement;
    public static EnumerationResult CompletedWithBatch;
}
[GenerateSerializerAttribute]
public class Orleans.Runtime.GatewayTooBusyException : OrleansException {
    public GatewayTooBusyException(string message);
    public GatewayTooBusyException(string message, Exception innerException);
    [ObsoleteAttribute]
private GatewayTooBusyException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[GenerateSerializerAttribute]
[ImmutableAttribute]
public class Orleans.Runtime.GrainAddress : object {
    [IdAttribute("0")]
private GrainId _grainId;
    [IdAttribute("1")]
private ActivationId _activationId;
    [CompilerGeneratedAttribute]
private SiloAddress <SiloAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private MembershipVersion <MembershipVersion>k__BackingField;
    public GrainId GrainId { get; public set; }
    public ActivationId ActivationId { get; public set; }
    [IdAttribute("2")]
public SiloAddress SiloAddress { get; public set; }
    [IdAttribute("3")]
public MembershipVersion MembershipVersion { get; public set; }
    [JsonIgnoreAttribute]
public bool IsComplete { get; }
    public GrainId get_GrainId();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_GrainId(GrainId value);
    public ActivationId get_ActivationId();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ActivationId(ActivationId value);
    [CompilerGeneratedAttribute]
public SiloAddress get_SiloAddress();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SiloAddress(SiloAddress value);
    [CompilerGeneratedAttribute]
public MembershipVersion get_MembershipVersion();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MembershipVersion(MembershipVersion value);
    public bool get_IsComplete();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GrainAddress other);
    [NullableContextAttribute("1")]
public bool Matches(GrainAddress other);
    [NullableContextAttribute("1")]
internal static bool MatchesGrainIdAndSilo(GrainAddress address, GrainAddress other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider formatProvider);
    [NullableContextAttribute("0")]
private sealed virtual override bool System.ISpanFormattable.TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [NullableContextAttribute("1")]
public string ToFullString();
    [NullableContextAttribute("1")]
internal static GrainAddress NewActivationAddress(SiloAddress silo, GrainId grain);
    [NullableContextAttribute("1")]
internal static GrainAddress GetAddress(SiloAddress silo, GrainId grain, ActivationId activation);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[GenerateSerializerAttribute]
[ImmutableAttribute]
public class Orleans.Runtime.GrainAddressCacheUpdate : object {
    [IdAttribute("0")]
private GrainId _grainId;
    [IdAttribute("1")]
private ActivationId _invalidActivationId;
    [IdAttribute("2")]
private SiloAddress _invalidSiloAddress;
    [IdAttribute("3")]
private MembershipVersion _invalidMembershipVersion;
    [IdAttribute("4")]
private ActivationId _validActivationId;
    [IdAttribute("5")]
private SiloAddress _validSiloAddress;
    [IdAttribute("6")]
private MembershipVersion _validMembershipVersion;
    public GrainId GrainId { get; }
    public ActivationId InvalidActivationId { get; }
    public SiloAddress InvalidSiloAddress { get; }
    public GrainAddress ValidGrainAddress { get; }
    [NullableAttribute("1")]
public GrainAddress InvalidGrainAddress { get; }
    [NullableContextAttribute("1")]
public GrainAddressCacheUpdate(GrainAddress invalidAddress, GrainAddress validAddress);
    public GrainId get_GrainId();
    public ActivationId get_InvalidActivationId();
    public SiloAddress get_InvalidSiloAddress();
    public GrainAddress get_ValidGrainAddress();
    [NullableContextAttribute("1")]
public GrainAddress get_InvalidGrainAddress();
    [NullableContextAttribute("1")]
public virtual string ToString();
    private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider formatProvider);
    [NullableContextAttribute("0")]
private sealed virtual override bool System.ISpanFormattable.TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [NullableContextAttribute("1")]
public string ToFullString();
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
private static void ThrowGrainIdDoesNotMatch(GrainAddress invalidAddress, GrainAddress validAddress);
}
[ExtensionAttribute]
public static class Orleans.Runtime.GrainContextExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task DeactivateAsync(IGrainContext grainContext, DeactivationReason deactivationReason, CancellationToken cancellationToken);
}
[GenerateSerializerAttribute]
public class Orleans.Runtime.GrainExtensionNotInstalledException : OrleansException {
    public GrainExtensionNotInstalledException(string message);
    public GrainExtensionNotInstalledException(string message, Exception innerException);
    [ObsoleteAttribute]
private GrainExtensionNotInstalledException(SerializationInfo info, StreamingContext context);
}
[IsReadOnlyAttribute]
[GenerateSerializerAttribute]
[ImmutableAttribute]
[JsonConverterAttribute("Orleans.Runtime.GrainIdJsonConverter")]
public class Orleans.Runtime.GrainId : ValueType {
    [IdAttribute("0")]
private GrainType _type;
    [IdAttribute("1")]
private IdSpan _key;
    public GrainType Type { get; }
    public IdSpan Key { get; }
    public bool IsDefault { get; }
    public GrainId(GrainType type, IdSpan key);
    [NullableContextAttribute("1")]
private GrainId(SerializationInfo info, StreamingContext context);
    public GrainType get_Type();
    public IdSpan get_Key();
    [NullableContextAttribute("1")]
public static GrainId Create(string type, string key);
    [NullableContextAttribute("1")]
public static GrainId Create(GrainType type, string key);
    public static GrainId Create(GrainType type, IdSpan key);
    public static override GrainId Parse(ReadOnlySpan`1<char> value, IFormatProvider provider);
    public static override bool TryParse(ReadOnlySpan`1<char> value, IFormatProvider provider, GrainId& result);
    [NullableContextAttribute("1")]
public static GrainId Parse(string value);
    [NullableContextAttribute("1")]
public static override GrainId Parse(string value, IFormatProvider provider);
    [NullableContextAttribute("2")]
public static bool TryParse(string value, GrainId& result);
    [NullableContextAttribute("2")]
public static override bool TryParse(string value, IFormatProvider provider, GrainId& result);
    public bool get_IsDefault();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GrainId other);
    public virtual int GetHashCode();
    public UInt32 GetUniformHashCode();
    [NullableContextAttribute("1")]
public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual int CompareTo(GrainId other);
    public static bool op_Equality(GrainId left, GrainId right);
    public static bool op_Inequality(GrainId left, GrainId right);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider formatProvider);
    private sealed virtual override bool System.ISpanFormattable.TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [CompilerGeneratedAttribute]
internal static void <Parse>g__ThrowInvalidGrainId|11_0(ReadOnlySpan`1<char> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Orleans.Runtime.GrainIdJsonConverter : JsonConverter`1<GrainId> {
    public virtual GrainId Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, GrainId value, JsonSerializerOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Orleans.Runtime.GrainIdKeyExtensions : object {
    public static IdSpan CreateIntegerKey(long key);
    [NullableContextAttribute("0")]
public static IdSpan CreateIntegerKey(long key, ReadOnlySpan`1<byte> keyExtension);
    public static IdSpan CreateIntegerKey(long key, string keyExtension);
    public static IdSpan CreateGuidKey(Guid key);
    [NullableContextAttribute("0")]
public static IdSpan CreateGuidKey(Guid key, ReadOnlySpan`1<byte> keyExtension);
    public static IdSpan CreateGuidKey(Guid key, string keyExtension);
    [ExtensionAttribute]
public static bool TryGetIntegerKey(GrainId grainId, Int64& key, String& keyExt);
    [ExtensionAttribute]
internal static bool TryGetIntegerKey(GrainId grainId, Int64& key);
    [ExtensionAttribute]
public static long GetIntegerKey(GrainId grainId, String& keyExt);
    [ExtensionAttribute]
public static long GetIntegerKey(GrainId grainId);
    [ExtensionAttribute]
public static bool TryGetGuidKey(GrainId grainId, Guid& key, String& keyExt);
    [ExtensionAttribute]
internal static bool TryGetGuidKey(GrainId grainId, Guid& key);
    [ExtensionAttribute]
public static Guid GetGuidKey(GrainId grainId, String& keyExt);
    [ExtensionAttribute]
public static Guid GetGuidKey(GrainId grainId);
    private static void ThrowInvalidGuidKeyFormat(GrainId grainId);
    private static void ThrowInvalidIntegerKeyFormat(GrainId grainId);
}
[IsReadOnlyAttribute]
[GenerateSerializerAttribute]
[ImmutableAttribute]
public class Orleans.Runtime.GrainInterfaceType : ValueType {
    [IdAttribute("0")]
private IdSpan _value;
    public IdSpan Value { get; }
    public bool IsDefault { get; }
    [NullableContextAttribute("1")]
public GrainInterfaceType(string value);
    public GrainInterfaceType(IdSpan value);
    public IdSpan get_Value();
    public bool get_IsDefault();
    [NullableContextAttribute("1")]
public static GrainInterfaceType Create(string value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GrainInterfaceType other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual string ToString();
    [NullableContextAttribute("2")]
private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider formatProvider);
    private sealed virtual override bool System.ISpanFormattable.TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    public static bool op_Equality(GrainInterfaceType left, GrainInterfaceType right);
    public static bool op_Inequality(GrainInterfaceType left, GrainInterfaceType right);
}
[AttributeUsageAttribute("1024")]
public class Orleans.Runtime.GrainInterfaceTypeAttribute : Attribute {
    private GrainInterfaceType _value;
    [NullableContextAttribute("1")]
public GrainInterfaceTypeAttribute(string value);
    [NullableContextAttribute("1")]
public sealed virtual GrainInterfaceType GetGrainInterfaceType(IServiceProvider services, Type type);
}
public static class Orleans.Runtime.GrainLifecycleStage : object {
    public static int First;
    public static int SetupState;
    public static int Activate;
    public static int Last;
}
[AliasAttribute("GrainRef")]
[DefaultInvokableBaseTypeAttribute("System.Threading.Tasks.ValueTask`1", "Orleans.Runtime.Request`1")]
[DefaultInvokableBaseTypeAttribute("System.Threading.Tasks.ValueTask", "Orleans.Runtime.Request")]
[DefaultInvokableBaseTypeAttribute("System.Threading.Tasks.Task`1", "Orleans.Runtime.TaskRequest`1")]
[DefaultInvokableBaseTypeAttribute("System.Threading.Tasks.Task", "Orleans.Runtime.TaskRequest")]
[DefaultInvokableBaseTypeAttribute("System.Void", "Orleans.Runtime.VoidRequest")]
[DefaultInvokableBaseTypeAttribute("System.Collections.Generic.IAsyncEnumerable`1", "Orleans.Runtime.AsyncEnumerableRequest`1")]
public class Orleans.Runtime.GrainReference : object {
    private GrainReferenceShared _shared;
    private IdSpan _key;
    internal GrainReferenceShared Shared { get; }
    internal IGrainReferenceRuntime Runtime { get; }
    public GrainId GrainId { get; }
    public GrainInterfaceType InterfaceType { get; }
    protected CopyContextPool CopyContextPool { get; }
    protected CodecProvider CodecProvider { get; }
    public ushort InterfaceVersion { get; }
    public string InterfaceName { get; }
    protected GrainReference(GrainReferenceShared shared, IdSpan key);
    internal GrainReferenceShared get_Shared();
    internal IGrainReferenceRuntime get_Runtime();
    public GrainId get_GrainId();
    public GrainInterfaceType get_InterfaceType();
    protected CopyContextPool get_CopyContextPool();
    protected CodecProvider get_CodecProvider();
    internal static GrainReference FromGrainId(GrainReferenceShared shared, GrainId grainId);
    public virtual TGrainInterface Cast();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GrainReference other);
    public virtual int GetHashCode();
    public UInt32 GetUniformHashCode();
    public static bool op_Equality(GrainReference reference1, GrainReference reference2);
    public static bool op_Inequality(GrainReference reference1, GrainReference reference2);
    public ushort get_InterfaceVersion();
    public virtual string get_InterfaceName();
    public sealed virtual string ToString();
    private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider formatProvider);
    private sealed virtual override bool System.ISpanFormattable.TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    protected TInvokable GetInvokable();
    protected ValueTask`1<T> InvokeAsync(IRequest methodDescription);
    protected ValueTask InvokeAsync(IRequest methodDescription);
    protected void Invoke(IRequest methodDescription);
}
[RegisterSerializerAttribute]
internal class Orleans.Runtime.GrainReferenceCodec : GeneralizedReferenceTypeSurrogateCodec`2<IAddressable, GrainReferenceSurrogate> {
    private IGrainFactory _grainFactory;
    public GrainReferenceCodec(IGrainFactory grainFactory, IValueSerializer`1<GrainReferenceSurrogate> surrogateSerializer);
    public virtual IAddressable ConvertFromSurrogate(GrainReferenceSurrogate& surrogate);
    public virtual void ConvertToSurrogate(IAddressable value, GrainReferenceSurrogate& surrogate);
}
internal class Orleans.Runtime.GrainReferenceCodecProvider : object {
    private IServiceProvider _serviceProvider;
    public GrainReferenceCodecProvider(IServiceProvider serviceProvider);
    public sealed virtual IFieldCodec GetSpecializedCodec(Type type);
    public sealed virtual bool IsSupportedType(Type type);
    internal static void ThrowGrainObserverInvalidException(IGrainObserver observer);
}
[RegisterCopierAttribute]
internal class Orleans.Runtime.GrainReferenceCopier : ShallowCopier`1<GrainReference> {
}
internal class Orleans.Runtime.GrainReferenceCopierProvider : object {
    public sealed virtual IDeepCopier GetSpecializedCopier(Type type);
    public sealed virtual bool IsSupportedType(Type type);
}
[GenerateSerializerAttribute]
public class Orleans.Runtime.GrainReferenceNotBoundException : OrleansException {
    internal GrainReferenceNotBoundException(GrainReference grainReference);
    internal GrainReferenceNotBoundException(string message);
    internal GrainReferenceNotBoundException(string message, Exception innerException);
    [ObsoleteAttribute]
private GrainReferenceNotBoundException(SerializationInfo info, StreamingContext context);
    private static string CreateMessage(GrainReference grainReference);
}
public class Orleans.Runtime.GrainReferenceShared : object {
    [CompilerGeneratedAttribute]
private IGrainReferenceRuntime <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private GrainType <GrainType>k__BackingField;
    [CompilerGeneratedAttribute]
private GrainInterfaceType <InterfaceType>k__BackingField;
    [CompilerGeneratedAttribute]
private InvokeMethodOptions <InvokeMethodOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private CodecProvider <CodecProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private CopyContextPool <CopyContextPool>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <InterfaceVersion>k__BackingField;
    public IGrainReferenceRuntime Runtime { get; }
    public GrainType GrainType { get; }
    public GrainInterfaceType InterfaceType { get; }
    public InvokeMethodOptions InvokeMethodOptions { get; }
    public CodecProvider CodecProvider { get; }
    public CopyContextPool CopyContextPool { get; }
    public IServiceProvider ServiceProvider { get; }
    public ushort InterfaceVersion { get; }
    public GrainReferenceShared(GrainType grainType, GrainInterfaceType grainInterfaceType, ushort interfaceVersion, IGrainReferenceRuntime runtime, InvokeMethodOptions invokeMethodOptions, CodecProvider codecProvider, CopyContextPool copyContextPool, IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public IGrainReferenceRuntime get_Runtime();
    [CompilerGeneratedAttribute]
public GrainType get_GrainType();
    [CompilerGeneratedAttribute]
public GrainInterfaceType get_InterfaceType();
    [CompilerGeneratedAttribute]
public InvokeMethodOptions get_InvokeMethodOptions();
    [CompilerGeneratedAttribute]
public CodecProvider get_CodecProvider();
    [CompilerGeneratedAttribute]
public CopyContextPool get_CopyContextPool();
    [CompilerGeneratedAttribute]
public IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public ushort get_InterfaceVersion();
}
[GenerateSerializerAttribute]
internal class Orleans.Runtime.GrainReferenceSurrogate : ValueType {
    [IdAttribute("0")]
public GrainId GrainId;
    [IdAttribute("1")]
public GrainInterfaceType GrainInterfaceType;
}
[IsReadOnlyAttribute]
[RequiredMemberAttribute]
public class Orleans.Runtime.GrainTimerCreationOptions : ValueType {
    [CompilerGeneratedAttribute]
private TimeSpan <DueTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Period>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Interleave>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepAlive>k__BackingField;
    [RequiredMemberAttribute]
public TimeSpan DueTime { get; public set; }
    [RequiredMemberAttribute]
public TimeSpan Period { get; public set; }
    public bool Interleave { get; public set; }
    public bool KeepAlive { get; public set; }
    [SetsRequiredMembersAttribute]
public GrainTimerCreationOptions(TimeSpan dueTime, TimeSpan period);
    [CompilerGeneratedAttribute]
public TimeSpan get_DueTime();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DueTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Period();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Period(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_Interleave();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Interleave(bool value);
    [CompilerGeneratedAttribute]
public bool get_KeepAlive();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_KeepAlive(bool value);
}
[IsReadOnlyAttribute]
[GenerateSerializerAttribute]
[ImmutableAttribute]
public class Orleans.Runtime.GrainType : ValueType {
    [IdAttribute("0")]
private IdSpan _value;
    public IdSpan Value { get; }
    public bool IsDefault { get; }
    public GrainType(IdSpan id);
    [NullableContextAttribute("1")]
public GrainType(Byte[] value);
    [NullableContextAttribute("1")]
private GrainType(SerializationInfo info, StreamingContext context);
    public IdSpan get_Value();
    public ReadOnlySpan`1<byte> AsSpan();
    [NullableContextAttribute("1")]
public static GrainType Create(string value);
    public static IdSpan op_Explicit(GrainType kind);
    public static GrainType op_Explicit(IdSpan id);
    public bool get_IsDefault();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GrainType obj);
    public virtual int GetHashCode();
    public UInt32 GetUniformHashCode();
    [NullableContextAttribute("2")]
public static Byte[] UnsafeGetArray(GrainType id);
    public sealed virtual int CompareTo(GrainType other);
    [NullableContextAttribute("1")]
public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("2")]
public virtual string ToString();
    [NullableContextAttribute("2")]
private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider formatProvider);
    private sealed virtual override bool System.ISpanFormattable.TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    public static bool op_Equality(GrainType left, GrainType right);
    public static bool op_Inequality(GrainType left, GrainType right);
}
[ExtensionAttribute]
public static class Orleans.Runtime.GrainTypePrefix : object {
    public static string SystemPrefix;
    public static string SystemTargetPrefix;
    public static ReadOnlyMemory`1<byte> SystemTargetPrefixBytes;
    public static string GrainServicePrefix;
    public static ReadOnlyMemory`1<byte> GrainServicePrefixBytes;
    public static string ClientPrefix;
    public static ReadOnlyMemory`1<byte> ClientPrefixBytes;
    public static GrainType ClientGrainType;
    public static string LegacyGrainPrefix;
    public static ReadOnlyMemory`1<byte> LegacyGrainPrefixBytes;
    private static GrainTypePrefix();
    [ExtensionAttribute]
public static bool IsClient(GrainType& type);
    [ExtensionAttribute]
public static bool IsSystemTarget(GrainType& type);
    [ExtensionAttribute]
public static bool IsLegacyGrain(GrainType& type);
    [ExtensionAttribute]
public static bool IsGrainService(GrainType& type);
    [ExtensionAttribute]
public static bool IsClient(GrainId& id);
    [ExtensionAttribute]
public static bool IsSystemTarget(GrainId& id);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ImmutableAttribute]
[GenerateSerializerAttribute]
public class Orleans.Runtime.GuidId : object {
    private static Interner`2<Guid, GuidId> guidIdInternCache;
    [IdAttribute("0")]
public Guid Guid;
    private GuidId(Guid guid);
    private GuidId(SerializationInfo info, StreamingContext context);
    private static GuidId();
    public static GuidId GetNewGuidId();
    public static GuidId GetGuidId(Guid guid);
    private static GuidId FindOrCreateGuidId(Guid guid);
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(GuidId other);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(GuidId other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool op_Equality(GuidId left, GuidId right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(GuidId left, GuidId right);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GenerateSerializerAttribute]
[ImmutableAttribute]
[SuppressReferenceTrackingAttribute]
public class Orleans.Runtime.HashBasedPlacement : PlacementStrategy {
    [CompilerGeneratedAttribute]
private static HashBasedPlacement <Singleton>k__BackingField;
    internal static HashBasedPlacement Singleton { get; }
    private static HashBasedPlacement();
    [CompilerGeneratedAttribute]
internal static HashBasedPlacement get_Singleton();
}
[GenerateMethodSerializersAttribute("Orleans.Runtime.GrainReference", "False")]
public interface Orleans.Runtime.IAddressable {
}
public interface Orleans.Runtime.IAsyncEnumerableGrainExtension {
    [AlwaysInterleaveAttribute]
public abstract virtual ValueTask`1<ValueTuple`2<EnumerationResult, object>> StartEnumeration(Guid requestId, IAsyncEnumerableRequest`1<T> request);
    [AlwaysInterleaveAttribute]
public abstract virtual ValueTask`1<ValueTuple`2<EnumerationResult, object>> MoveNext(Guid requestId);
    [AlwaysInterleaveAttribute]
public abstract virtual ValueTask DisposeAsync(Guid requestId);
}
public interface Orleans.Runtime.IAsyncEnumerableRequest`1 {
    public int MaxBatchSize { get; public set; }
    public abstract virtual int get_MaxBatchSize();
    public abstract virtual void set_MaxBatchSize(int value);
    public abstract virtual IAsyncEnumerable`1<T> InvokeImplementation();
}
internal interface Orleans.Runtime.ICancellationSourcesExtension {
    [AlwaysInterleaveAttribute]
public abstract virtual Task CancelRemoteToken(Guid tokenId);
}
internal interface Orleans.Runtime.ICollectibleGrainContext {
    public bool IsValid { get; }
    public bool IsExemptFromCollection { get; }
    public bool IsInactive { get; }
    public TimeSpan CollectionAgeLimit { get; }
    public DateTime KeepAliveUntil { get; }
    public DateTime CollectionTicket { get; public set; }
    public abstract virtual bool get_IsValid();
    public abstract virtual bool get_IsExemptFromCollection();
    public abstract virtual bool get_IsInactive();
    public abstract virtual TimeSpan get_CollectionAgeLimit();
    public abstract virtual DateTime get_KeepAliveUntil();
    public abstract virtual DateTime get_CollectionTicket();
    public abstract virtual void set_CollectionTicket(DateTime value);
    public abstract virtual bool IsStale();
    public abstract virtual TimeSpan GetIdleness();
    public abstract virtual void DelayDeactivation(TimeSpan timeSpan);
}
[NullableContextAttribute("1")]
public interface Orleans.Runtime.IDehydrationContext {
    public IEnumerable`1<string> Keys { get; }
    public abstract virtual IEnumerable`1<string> get_Keys();
    [NullableContextAttribute("0")]
public abstract virtual void AddBytes(string key, ReadOnlySpan`1<byte> value);
    public abstract virtual void AddBytes(string key, Action`2<T, IBufferWriter`1<byte>> valueWriter, T value);
    [NullableContextAttribute("2")]
public abstract virtual bool TryAddValue(string key, T value);
}
[IsReadOnlyAttribute]
[GenerateSerializerAttribute]
[ImmutableAttribute]
public class Orleans.Runtime.IdSpan : ValueType {
    [IdAttribute("0")]
private int _hashCode;
    [NullableAttribute("2")]
[IdAttribute("1")]
private Byte[] _value;
    public ReadOnlyMemory`1<byte> Value { get; }
    public bool IsDefault { get; }
    [NullableContextAttribute("1")]
public IdSpan(Byte[] value);
    [NullableContextAttribute("2")]
private IdSpan(Byte[] value, int hashCode);
    [NullableContextAttribute("1")]
private IdSpan(SerializationInfo info, StreamingContext context);
    public ReadOnlyMemory`1<byte> get_Value();
    public bool get_IsDefault();
    [NullableContextAttribute("2")]
public static IdSpan Create(string id);
    public ReadOnlySpan`1<byte> AsSpan();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(IdSpan obj);
    public virtual int GetHashCode();
    public UInt32 GetUniformHashCode();
    [NullableContextAttribute("1")]
public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("2")]
public static IdSpan UnsafeCreate(Byte[] value, int hashCode);
    [NullableContextAttribute("2")]
public static Byte[] UnsafeGetArray(IdSpan id);
    public sealed virtual int CompareTo(IdSpan other);
    [NullableContextAttribute("2")]
public virtual string ToString();
    public bool TryFormat(Span`1<char> destination, Int32& charsWritten);
    [NullableContextAttribute("2")]
private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider formatProvider);
    private sealed virtual override bool System.ISpanFormattable.TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    public static bool op_Equality(IdSpan left, IdSpan right);
    public static bool op_Inequality(IdSpan left, IdSpan right);
}
[RegisterSerializerAttribute]
public class Orleans.Runtime.IdSpanCodec : object {
    [NullableAttribute("1")]
private Type _codecType;
    [NullableContextAttribute("1")]
public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, IdSpan value);
    public static void WriteRaw(Writer`1& writer, IdSpan value);
    [NullableContextAttribute("2")]
public static IdSpan ReadRaw(Reader`1& reader);
    [NullableContextAttribute("2")]
public sealed virtual IdSpan ReadValue(Reader`1& reader, Field field);
}
internal interface Orleans.Runtime.IGrainCancellationTokenRuntime {
    public abstract virtual Task Cancel(Guid id, CancellationTokenSource tokenSource, ConcurrentDictionary`2<GrainId, GrainReference> grainReferences);
}
[NullableContextAttribute("1")]
public interface Orleans.Runtime.IGrainContext {
    public GrainReference GrainReference { get; }
    public GrainId GrainId { get; }
    [NullableAttribute("2")]
public object GrainInstance { get; }
    public ActivationId ActivationId { get; }
    public GrainAddress Address { get; }
    public IServiceProvider ActivationServices { get; }
    public IGrainLifecycle ObservableLifecycle { get; }
    public IWorkItemScheduler Scheduler { get; }
    public Task Deactivated { get; }
    public abstract virtual GrainReference get_GrainReference();
    public abstract virtual GrainId get_GrainId();
    [NullableContextAttribute("2")]
public abstract virtual object get_GrainInstance();
    public abstract virtual ActivationId get_ActivationId();
    public abstract virtual GrainAddress get_Address();
    public abstract virtual IServiceProvider get_ActivationServices();
    public abstract virtual IGrainLifecycle get_ObservableLifecycle();
    public abstract virtual IWorkItemScheduler get_Scheduler();
    public abstract virtual Task get_Deactivated();
    public abstract virtual void SetComponent(TComponent value);
    public abstract virtual void ReceiveMessage(object message);
    public abstract virtual void Activate(Dictionary`2<string, object> requestContext, CancellationToken cancellationToken);
    public abstract virtual void Deactivate(DeactivationReason deactivationReason, CancellationToken cancellationToken);
    public abstract virtual void Rehydrate(IRehydrationContext context);
    public abstract virtual void Migrate(Dictionary`2<string, object> requestContext, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Orleans.Runtime.IGrainContextAccessor {
    public IGrainContext GrainContext { get; }
    public abstract virtual IGrainContext get_GrainContext();
}
[GenerateMethodSerializersAttribute("Orleans.Runtime.GrainReference", "True")]
public interface Orleans.Runtime.IGrainExtension {
}
[NullableContextAttribute("1")]
public interface Orleans.Runtime.IGrainExtensionBinder {
    public abstract virtual TExtensionInterface GetExtension();
    public abstract virtual ValueTuple`2<TExtension, TExtensionInterface> GetOrSetExtension(Func`1<TExtension> newExtensionFunc);
}
[NullableContextAttribute("1")]
public interface Orleans.Runtime.IGrainInterfaceTypeProvider {
    public abstract virtual bool TryGetGrainInterfaceType(Type type, GrainInterfaceType& grainInterfaceType);
}
[NullableContextAttribute("1")]
public interface Orleans.Runtime.IGrainInterfaceTypeProviderAttribute {
    public abstract virtual GrainInterfaceType GetGrainInterfaceType(IServiceProvider services, Type type);
}
[NullableContextAttribute("1")]
public interface Orleans.Runtime.IGrainLifecycle {
    public abstract virtual void AddMigrationParticipant(IGrainMigrationParticipant participant);
    public abstract virtual void RemoveMigrationParticipant(IGrainMigrationParticipant participant);
}
[NullableContextAttribute("1")]
public interface Orleans.Runtime.IGrainMigrationParticipant {
    public abstract virtual void OnDehydrate(IDehydrationContext dehydrationContext);
    public abstract virtual void OnRehydrate(IRehydrationContext rehydrationContext);
}
public interface Orleans.Runtime.IGrainReferenceRuntime {
    public abstract virtual ValueTask`1<T> InvokeMethodAsync(GrainReference reference, IInvokable request, InvokeMethodOptions options);
    public abstract virtual ValueTask InvokeMethodAsync(GrainReference reference, IInvokable request, InvokeMethodOptions options);
    public abstract virtual void InvokeMethod(GrainReference reference, IInvokable request, InvokeMethodOptions options);
    public abstract virtual object Cast(IAddressable grain, Type interfaceType);
}
[NullableContextAttribute("1")]
public interface Orleans.Runtime.IGrainRuntime {
    public string SiloIdentity { get; }
    public SiloAddress SiloAddress { get; }
    public IGrainFactory GrainFactory { get; }
    public ITimerRegistry TimerRegistry { get; }
    public IServiceProvider ServiceProvider { get; }
    public TimeProvider TimeProvider { get; }
    public abstract virtual string get_SiloIdentity();
    public abstract virtual SiloAddress get_SiloAddress();
    public abstract virtual IGrainFactory get_GrainFactory();
    public abstract virtual ITimerRegistry get_TimerRegistry();
    public abstract virtual IServiceProvider get_ServiceProvider();
    public virtual TimeProvider get_TimeProvider();
    public abstract virtual void DeactivateOnIdle(IGrainContext grainContext);
    public abstract virtual void DelayDeactivation(IGrainContext grainContext, TimeSpan timeSpan);
    public abstract virtual IStorage`1<TGrainState> GetStorage(IGrainContext grainContext);
}
public interface Orleans.Runtime.IGrainTimer {
    public abstract virtual void Change(TimeSpan dueTime, TimeSpan period);
}
[NullableContextAttribute("1")]
public interface Orleans.Runtime.IRehydrationContext {
    public IEnumerable`1<string> Keys { get; }
    public abstract virtual IEnumerable`1<string> get_Keys();
    [NullableContextAttribute("0")]
public abstract virtual bool TryGetBytes(string key, ReadOnlySequence`1& value);
    [NullableContextAttribute("2")]
public abstract virtual bool TryGetValue(string key, T& value);
}
public interface Orleans.Runtime.IRequest {
    public InvokeMethodOptions Options { get; }
    public abstract virtual InvokeMethodOptions get_Options();
    public abstract virtual void AddInvokeMethodOptions(InvokeMethodOptions options);
    public static string ToString(IRequest request);
    public static string ToMethodCallString(IRequest request);
}
[NullableContextAttribute("1")]
public interface Orleans.Runtime.IWorkItemScheduler {
    public abstract virtual void QueueAction(Action action);
    public abstract virtual void QueueTask(Task task);
    public abstract virtual void QueueAction(Action`1<object> action, object state);
}
[GenerateSerializerAttribute]
[ImmutableAttribute]
public class Orleans.Runtime.LegacyGrainId : object {
    private static Interner`2<UniqueKey, LegacyGrainId> grainIdInternCache;
    private static Interner`2<UniqueKey, Byte[]> grainTypeInternCache;
    private static Interner`2<UniqueKey, Byte[]> grainKeyInternCache;
    private static ReadOnlyMemory`1<byte> ClientPrefixBytes;
    [DataMemberAttribute]
[IdAttribute("0")]
internal UniqueKey Key;
    public Category Category { get; }
    public bool IsSystemTarget { get; }
    public bool IsGrain { get; }
    public bool IsClient { get; }
    public Guid PrimaryKey { get; }
    public long PrimaryKeyLong { get; }
    public string PrimaryKeyString { get; }
    public string IdentityString { get; }
    public bool IsLongKey { get; }
    public int TypeCode { get; }
    internal LegacyGrainId(UniqueKey key);
    private static LegacyGrainId();
    public Category get_Category();
    public bool get_IsSystemTarget();
    public bool get_IsGrain();
    public bool get_IsClient();
    public static GrainId op_Implicit(LegacyGrainId legacy);
    public static LegacyGrainId NewId();
    public static LegacyGrainId NewClientId();
    internal static LegacyGrainId NewClientId(Guid id);
    internal static LegacyGrainId GetGrainId(UniqueKey key);
    internal static LegacyGrainId GetGrainIdForTesting(Guid guid);
    internal static LegacyGrainId GetSystemTargetGrainId(long typeData);
    internal static GrainType GetGrainType(long typeCode, bool isKeyExt);
    internal static LegacyGrainId GetGrainId(long typeCode, long primaryKey, string keyExt);
    internal static LegacyGrainId GetGrainId(long typeCode, Guid primaryKey, string keyExt);
    internal static LegacyGrainId GetGrainId(long typeCode, string primaryKey);
    internal static LegacyGrainId GetGrainServiceGrainId(short id, int typeData);
    internal static LegacyGrainId GetGrainServiceGrainId(int typeData, string systemGrainId);
    public Guid get_PrimaryKey();
    public long get_PrimaryKeyLong();
    public string get_PrimaryKeyString();
    public string get_IdentityString();
    public bool get_IsLongKey();
    public long GetPrimaryKeyLong(String& keyExt);
    internal long GetPrimaryKeyLong();
    public Guid GetPrimaryKey(String& keyExt);
    internal Guid GetPrimaryKey();
    internal string GetPrimaryKeyString();
    public int get_TypeCode();
    private static GrainType GetGrainType(UniqueKey key);
    private static Byte[] CreateGrainType(ReadOnlyMemory`1<byte> prefixBytes, ulong typeCode);
    public static GrainType CreateGrainTypeForGrain(int typeCode);
    public static GrainType CreateGrainTypeForSystemTarget(int typeCode);
    private IdSpan GetGrainKey();
    public GrainId ToGrainId();
    public static bool TryConvertFromGrainId(GrainId id, LegacyGrainId& legacyId);
    public static LegacyGrainId FromGrainId(GrainId id);
    private static LegacyGrainId FromGrainIdInternal(GrainId id);
    private static LegacyGrainId ThrowNotLegacyGrainId(GrainId id);
    private static LegacyGrainId FindOrCreateGrainId(UniqueKey key);
    public sealed virtual bool Equals(LegacyGrainId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public UInt32 GetUniformHashCode();
    public virtual string ToString();
    internal string ToDetailedString();
    private string ToStringImpl(bool detailed);
    public static bool IsLegacyGrainType(Type type);
    public static bool IsLegacyKeyExtGrainType(Type type);
    internal string ToParsableString();
    internal static LegacyGrainId FromParsableString(string grainId);
    internal static LegacyGrainId FromParsableString(ReadOnlySpan`1<char> grainId);
    public UInt32 GetHashCode_Modulo(UInt32 umod);
    public sealed virtual int CompareTo(LegacyGrainId other);
}
[GenerateSerializerAttribute]
public class Orleans.Runtime.LimitExceededException : OrleansException {
    public LimitExceededException(string message);
    public LimitExceededException(string message, Exception innerException);
    public LimitExceededException(string limitName, int current, int threshold, object extraInfo);
    [ObsoleteAttribute]
private LimitExceededException(SerializationInfo info, StreamingContext context);
}
public static class Orleans.Runtime.LogFormatter : object {
    public static int MAX_LOG_MESSAGE_SIZE;
    private static string TIME_FORMAT;
    private static string DATE_FORMAT;
    private static ConcurrentDictionary`2<Type, Func`2<Exception, string>> exceptionDecoders;
    private static LogFormatter();
    public static string PrintDate(DateTime date);
    public static DateTime ParseDate(string dateStr);
    public static string PrintTime(DateTime date);
    public static string PrintException(Exception exception);
    public static void SetExceptionDecoder(Type exceptionType, Func`2<Exception, string> decoder);
    private static void PrintException_Helper(StringBuilder sb, Exception exception, int level);
}
[IsReadOnlyAttribute]
[GenerateSerializerAttribute]
[ImmutableAttribute]
[JsonConverterAttribute("Orleans.Runtime.MembershipVersionConverter")]
public class Orleans.Runtime.MembershipVersion : ValueType {
    [CompilerGeneratedAttribute]
private long <Value>k__BackingField;
    [IdAttribute("0")]
public long Value { get; public set; }
    public static MembershipVersion MinValue { get; }
    public MembershipVersion(long version);
    [CompilerGeneratedAttribute]
public long get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(long value);
    public static MembershipVersion get_MinValue();
    public sealed virtual int CompareTo(MembershipVersion other);
    public sealed virtual bool Equals(MembershipVersion other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(MembershipVersion left, MembershipVersion right);
    public static bool op_Inequality(MembershipVersion left, MembershipVersion right);
    public static bool op_GreaterThanOrEqual(MembershipVersion left, MembershipVersion right);
    public static bool op_LessThanOrEqual(MembershipVersion left, MembershipVersion right);
    public static bool op_GreaterThan(MembershipVersion left, MembershipVersion right);
    public static bool op_LessThan(MembershipVersion left, MembershipVersion right);
}
public class Orleans.Runtime.MembershipVersionConverter : JsonConverter`1<MembershipVersion> {
    public virtual MembershipVersion Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, MembershipVersion value, JsonSerializerOptions options);
}
[IsReadOnlyAttribute]
internal class Orleans.Runtime.ObserverGrainId : ValueType {
    internal static char SegmentSeparator;
    public GrainId GrainId;
    private ObserverGrainId(GrainId grainId);
    public static ObserverGrainId Create(ClientGrainId clientId);
    public static ObserverGrainId Create(ClientGrainId clientId, IdSpan scopedId);
    public static bool IsObserverGrainId(GrainId grainId);
    public static bool TryParse(GrainId grainId, ObserverGrainId& observerId);
    private static GrainId ConstructGrainId(ClientGrainId clientId, IdSpan scopedId);
    public sealed virtual bool Equals(ObserverGrainId other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider formatProvider);
    private sealed virtual override bool System.ISpanFormattable.TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    public sealed virtual int CompareTo(ObserverGrainId other);
}
[GenerateSerializerAttribute]
public class Orleans.Runtime.OrleansConfigurationException : Exception {
    public OrleansConfigurationException(string message);
    public OrleansConfigurationException(string message, Exception innerException);
    [ObsoleteAttribute]
private OrleansConfigurationException(SerializationInfo info, StreamingContext context);
}
[GenerateSerializerAttribute]
public class Orleans.Runtime.OrleansException : Exception {
    public OrleansException(string message);
    public OrleansException(string message, Exception innerException);
    [ObsoleteAttribute]
protected OrleansException(SerializationInfo info, StreamingContext context);
}
[GenerateSerializerAttribute]
public class Orleans.Runtime.OrleansLifecycleCanceledException : OrleansException {
    internal OrleansLifecycleCanceledException(string message);
    internal OrleansLifecycleCanceledException(string message, Exception innerException);
    [ObsoleteAttribute]
private OrleansLifecycleCanceledException(SerializationInfo info, StreamingContext context);
}
[GenerateSerializerAttribute]
public class Orleans.Runtime.OrleansMessageRejectionException : OrleansException {
    internal OrleansMessageRejectionException(string message);
    internal OrleansMessageRejectionException(string message, Exception innerException);
    [ObsoleteAttribute]
protected OrleansMessageRejectionException(SerializationInfo info, StreamingContext context);
}
[SerializerTransparentAttribute]
public abstract class Orleans.Runtime.PlacementStrategy : object {
    public bool IsUsingGrainDirectory { get; }
    public virtual bool get_IsUsingGrainDirectory();
    public virtual void Initialize(GrainProperties properties);
    public virtual void PopulateGrainProperties(IServiceProvider services, Type grainClass, GrainType grainType, Dictionary`2<string, string> properties);
}
[GenerateSerializerAttribute]
[ImmutableAttribute]
[SuppressReferenceTrackingAttribute]
public class Orleans.Runtime.PreferLocalPlacement : PlacementStrategy {
    [CompilerGeneratedAttribute]
private static PreferLocalPlacement <Singleton>k__BackingField;
    internal static PreferLocalPlacement Singleton { get; }
    private static PreferLocalPlacement();
    [CompilerGeneratedAttribute]
internal static PreferLocalPlacement get_Singleton();
}
[GenerateSerializerAttribute]
[ImmutableAttribute]
[SuppressReferenceTrackingAttribute]
public class Orleans.Runtime.RandomPlacement : PlacementStrategy {
    [CompilerGeneratedAttribute]
private static RandomPlacement <Singleton>k__BackingField;
    internal static RandomPlacement Singleton { get; }
    private static RandomPlacement();
    [CompilerGeneratedAttribute]
internal static RandomPlacement get_Singleton();
}
[SerializerTransparentAttribute]
public abstract class Orleans.Runtime.Request : RequestBase {
    public sealed virtual ValueTask`1<Response> Invoke();
    [AsyncStateMachineAttribute("Orleans.Runtime.Request/<CompleteInvokeAsync>d__1")]
private static ValueTask`1<Response> CompleteInvokeAsync(ValueTask resultTask);
    protected abstract virtual ValueTask InvokeInner();
}
[SerializerTransparentAttribute]
public abstract class Orleans.Runtime.Request`1 : RequestBase {
    public sealed virtual ValueTask`1<Response> Invoke();
    [AsyncStateMachineAttribute("Orleans.Runtime.Request`1/<CompleteInvokeAsync>d__1")]
private static ValueTask`1<Response> CompleteInvokeAsync(ValueTask`1<TResult> resultTask);
    protected abstract virtual ValueTask`1<TResult> InvokeInner();
}
[SuppressReferenceTrackingAttribute]
[SerializerTransparentAttribute]
public abstract class Orleans.Runtime.RequestBase : object {
    [CompilerGeneratedAttribute]
private InvokeMethodOptions <Options>k__BackingField;
    public InvokeMethodOptions Options { get; protected set; }
    [CompilerGeneratedAttribute]
public sealed virtual InvokeMethodOptions get_Options();
    [CompilerGeneratedAttribute]
protected void set_Options(InvokeMethodOptions value);
    public virtual int GetArgumentCount();
    public sealed virtual void AddInvokeMethodOptions(InvokeMethodOptions options);
    public abstract virtual ValueTask`1<Response> Invoke();
    public abstract virtual object GetTarget();
    public abstract virtual void SetTarget(ITargetHolder holder);
    public virtual object GetArgument(int index);
    public virtual void SetArgument(int index, object value);
    public abstract virtual void Dispose();
    public abstract virtual string GetMethodName();
    public abstract virtual string GetInterfaceName();
    public abstract virtual string GetActivityName();
    public abstract virtual Type GetInterfaceType();
    public abstract virtual MethodInfo GetMethod();
    public virtual string ToString();
    public virtual Nullable`1<TimeSpan> GetDefaultResponseTimeout();
}
public static class Orleans.Runtime.RequestContext : object {
    internal static string CALL_CHAIN_REENTRANCY_HEADER;
    internal static string PING_APPLICATION_HEADER;
    internal static AsyncLocal`1<ContextProperties> CallContextData;
    public static Guid ReentrancyId { get; public set; }
    public static IEnumerable`1<string> Keys { get; }
    public static IEnumerable`1<KeyValuePair`2<string, object>> Entries { get; }
    private static RequestContext();
    public static Guid get_ReentrancyId();
    public static void set_ReentrancyId(Guid value);
    public static ReentrancySection AllowCallChainReentrancy();
    public static ReentrancySection SuppressCallChainReentrancy();
    public static object Get(string key);
    public static void Set(string key, object value);
    public static bool Remove(string key);
    public static void Clear();
    public static IEnumerable`1<string> get_Keys();
    public static IEnumerable`1<KeyValuePair`2<string, object>> get_Entries();
}
public class Orleans.Runtime.ResourceOptimizedPlacement : PlacementStrategy {
    internal static ResourceOptimizedPlacement Singleton;
    private static ResourceOptimizedPlacement();
}
internal static class Orleans.Runtime.RuntimeContext : object {
    [ThreadStaticAttribute]
private static IGrainContext _threadLocalContext;
    public static IGrainContext Current { get; }
    public static IGrainContext get_Current();
    internal static void SetExecutionContext(IGrainContext newContext, IGrainContext& currentContext);
    internal static void ResetExecutionContext(IGrainContext originalContext);
}
[RegisterSerializerAttribute]
public class Orleans.Runtime.Serialization.SiloAddressCodec : object {
    [NullableContextAttribute("1")]
public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, SiloAddress value);
    [NullableContextAttribute("1")]
public sealed virtual SiloAddress ReadValue(Reader`1& reader, Field field);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ImmutableAttribute]
[JsonConverterAttribute("Orleans.Runtime.SiloAddressConverter")]
[DebuggerDisplayAttribute("SiloAddress {ToString()}")]
[SuppressReferenceTrackingAttribute]
public class Orleans.Runtime.SiloAddress : object {
    private int hashCode;
    private bool hashCodeSet;
    [NullableAttribute("2")]
private UInt32[] uniformHashCache;
    [CompilerGeneratedAttribute]
private IPEndPoint <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Generation>k__BackingField;
    [NullableAttribute("2")]
private Byte[] utf8;
    private static char SEPARATOR;
    private static long epoch;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Interner`2<ValueTuple`3<IPAddress, int, int>, SiloAddress> siloAddressInterningCache;
    [CompilerGeneratedAttribute]
private static SiloAddress <Zero>k__BackingField;
    [IdAttribute("0")]
public IPEndPoint Endpoint { get; }
    [IdAttribute("1")]
public int Generation { get; }
    public static SiloAddress Zero { get; }
    public bool IsClient { get; }
    private SiloAddress(IPEndPoint endpoint, int generation);
    private static SiloAddress();
    [CompilerGeneratedAttribute]
public IPEndPoint get_Endpoint();
    [CompilerGeneratedAttribute]
public int get_Generation();
    [CompilerGeneratedAttribute]
public static SiloAddress get_Zero();
    public static SiloAddress New(IPEndPoint ep, int gen);
    public static SiloAddress New(IPAddress address, int port, int generation);
    public bool get_IsClient();
    public static int AllocateNewGeneration();
    public string ToParsableString();
    internal Byte[] ToUtf8String();
    public static SiloAddress FromParsableString(string addr);
    [NullableContextAttribute("0")]
public static SiloAddress FromUtf8String(ReadOnlySpan`1<byte> addr);
    [NullableContextAttribute("0")]
[DoesNotReturnAttribute]
private static void ThrowInvalidUtf8SiloAddress(ReadOnlySpan`1<byte> addr);
    public virtual string ToString();
    [NullableContextAttribute("2")]
private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider formatProvider);
    [NullableContextAttribute("0")]
private sealed virtual override bool System.ISpanFormattable.TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    public string ToStringWithHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public int GetConsistentHashCode();
    private int CalculateConsistentHashCode();
    internal void InternalSetConsistentHashCode(int hashCode);
    public UInt32[] GetUniformHashCodes(int numHashes);
    private UInt32[] GetUniformHashCodesImpl(int numHashes);
    [NullableContextAttribute("2")]
internal bool Matches(SiloAddress other);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(SiloAddress other);
    [NullableContextAttribute("2")]
internal bool IsSameLogicalSilo(SiloAddress other);
    public bool IsSuccessorOf(SiloAddress other);
    public bool IsPredecessorOf(SiloAddress other);
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(SiloAddress other);
    private static int CompareIpAddresses(IPAddress one, IPAddress two);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Orleans.Runtime.SiloAddressConverter : JsonConverter`1<SiloAddress> {
    public virtual SiloAddress Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, SiloAddress value, JsonSerializerOptions options);
}
public class Orleans.Runtime.SiloRoleBasedPlacement : PlacementStrategy {
    [CompilerGeneratedAttribute]
private static SiloRoleBasedPlacement <Singleton>k__BackingField;
    internal static SiloRoleBasedPlacement Singleton { get; }
    private static SiloRoleBasedPlacement();
    [CompilerGeneratedAttribute]
internal static SiloRoleBasedPlacement get_Singleton();
}
[GenerateSerializerAttribute]
public class Orleans.Runtime.SiloUnavailableException : OrleansMessageRejectionException {
    public SiloUnavailableException(string msg);
    public SiloUnavailableException(string message, Exception innerException);
    [ObsoleteAttribute]
private SiloUnavailableException(SerializationInfo info, StreamingContext context);
}
[GenerateSerializerAttribute]
internal class Orleans.Runtime.StatelessWorkerPlacement : PlacementStrategy {
    private static string MaxLocalPropertyKey;
    private static int DefaultMaxStatelessWorkers;
    [CompilerGeneratedAttribute]
private int <MaxLocal>k__BackingField;
    public bool IsUsingGrainDirectory { get; }
    [IdAttribute("0")]
public int MaxLocal { get; private set; }
    internal StatelessWorkerPlacement(int maxLocal);
    private static StatelessWorkerPlacement();
    public virtual bool get_IsUsingGrainDirectory();
    [CompilerGeneratedAttribute]
public int get_MaxLocal();
    [CompilerGeneratedAttribute]
private void set_MaxLocal(int value);
    public virtual string ToString();
    public virtual void Initialize(GrainProperties properties);
    public virtual void PopulateGrainProperties(IServiceProvider services, Type grainClass, GrainType grainType, Dictionary`2<string, string> properties);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[ImmutableAttribute]
public class Orleans.Runtime.SystemTargetGrainId : ValueType {
    private static char SegmentSeparator;
    private GrainId _grainId;
    public GrainId GrainId { get; }
    private SystemTargetGrainId(GrainId grainId);
    public GrainId get_GrainId();
    public static SystemTargetGrainId Create(GrainType kind, SiloAddress address);
    public static SystemTargetGrainId Create(GrainType kind, SiloAddress address, string extraIdentifier);
    public static bool IsSystemTargetGrainId(GrainId& id);
    public static bool TryParse(GrainId grainId, SystemTargetGrainId& systemTargetId);
    public SystemTargetGrainId WithSiloAddress(SiloAddress siloAddress);
    public SiloAddress GetSiloAddress();
    public static GrainId CreateGrainServiceGrainId(int typeCode, string grainSystemId, SiloAddress address);
    [NullableContextAttribute("2")]
internal static GrainType CreateGrainServiceGrainType(int typeCode, string grainSystemId);
    internal static GrainId CreateGrainServiceGrainId(GrainType grainType, SiloAddress address);
    public static GrainType CreateGrainType(string name);
    public sealed virtual bool Equals(SystemTargetGrainId other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [NullableContextAttribute("2")]
private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider formatProvider);
    [NullableContextAttribute("0")]
private sealed virtual override bool System.ISpanFormattable.TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    public sealed virtual int CompareTo(SystemTargetGrainId other);
    public static bool op_Equality(SystemTargetGrainId left, SystemTargetGrainId right);
    public static bool op_Inequality(SystemTargetGrainId left, SystemTargetGrainId right);
    public static bool op_LessThan(SystemTargetGrainId left, SystemTargetGrainId right);
    public static bool op_LessThanOrEqual(SystemTargetGrainId left, SystemTargetGrainId right);
    public static bool op_GreaterThan(SystemTargetGrainId left, SystemTargetGrainId right);
    public static bool op_GreaterThanOrEqual(SystemTargetGrainId left, SystemTargetGrainId right);
}
[GenerateSerializerAttribute]
[ImmutableAttribute]
[SuppressReferenceTrackingAttribute]
public class Orleans.Runtime.SystemTargetPlacementStrategy : PlacementStrategy {
    [CompilerGeneratedAttribute]
private static SystemTargetPlacementStrategy <Instance>k__BackingField;
    public static SystemTargetPlacementStrategy Instance { get; }
    public bool IsUsingGrainDirectory { get; }
    private static SystemTargetPlacementStrategy();
    [CompilerGeneratedAttribute]
public static SystemTargetPlacementStrategy get_Instance();
    public virtual bool get_IsUsingGrainDirectory();
}
[SerializerTransparentAttribute]
public abstract class Orleans.Runtime.TaskRequest : RequestBase {
    public sealed virtual ValueTask`1<Response> Invoke();
    [AsyncStateMachineAttribute("Orleans.Runtime.TaskRequest/<CompleteInvokeAsync>d__1")]
private static ValueTask`1<Response> CompleteInvokeAsync(Task resultTask);
    protected abstract virtual Task InvokeInner();
}
[SerializerTransparentAttribute]
public abstract class Orleans.Runtime.TaskRequest`1 : RequestBase {
    public sealed virtual ValueTask`1<Response> Invoke();
    [AsyncStateMachineAttribute("Orleans.Runtime.TaskRequest`1/<CompleteInvokeAsync>d__1")]
private static ValueTask`1<Response> CompleteInvokeAsync(Task`1<TResult> resultTask);
    protected abstract virtual Task`1<TResult> InvokeInner();
}
internal class Orleans.Runtime.TypedGrainReferenceCodec`1 : GeneralizedReferenceTypeSurrogateCodec`2<T, GrainReferenceSurrogate> {
    private IGrainFactory _grainFactory;
    public TypedGrainReferenceCodec`1(IGrainFactory grainFactory, IValueSerializer`1<GrainReferenceSurrogate> surrogateSerializer);
    public virtual T ConvertFromSurrogate(GrainReferenceSurrogate& surrogate);
    public virtual void ConvertToSurrogate(T value, GrainReferenceSurrogate& surrogate);
}
internal class Orleans.Runtime.TypedGrainReferenceCopier`1 : object {
    public sealed virtual TInterface DeepCopy(TInterface input, CopyContext context);
}
[GenerateSerializerAttribute]
[ImmutableAttribute]
[SuppressReferenceTrackingAttribute]
public class Orleans.Runtime.UniqueKey : object {
    [CompilerGeneratedAttribute]
private ulong <N0>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <N1>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <TypeCodeData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyExt>k__BackingField;
    private UInt32 uniformHashCache;
    internal static UniqueKey Empty;
    [IdAttribute("0")]
public ulong N0 { get; private set; }
    [IdAttribute("1")]
public ulong N1 { get; private set; }
    [IdAttribute("2")]
public ulong TypeCodeData { get; private set; }
    [IdAttribute("3")]
public string KeyExt { get; private set; }
    public int BaseTypeCode { get; }
    public Category IdCategory { get; }
    public bool IsLongKey { get; }
    public bool IsSystemTargetKey { get; }
    public bool HasKeyExt { get; }
    private Guid Guid { get; private set; }
    private static UniqueKey();
    [CompilerGeneratedAttribute]
public ulong get_N0();
    [CompilerGeneratedAttribute]
private void set_N0(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_N1();
    [CompilerGeneratedAttribute]
private void set_N1(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_TypeCodeData();
    [CompilerGeneratedAttribute]
private void set_TypeCodeData(ulong value);
    [CompilerGeneratedAttribute]
public string get_KeyExt();
    [CompilerGeneratedAttribute]
private void set_KeyExt(string value);
    public int get_BaseTypeCode();
    public Category get_IdCategory();
    public bool get_IsLongKey();
    public bool get_IsSystemTargetKey();
    private static bool IsSystemTarget(Category category);
    public bool get_HasKeyExt();
    private static bool IsKeyExt(Category category);
    internal static UniqueKey Parse(ReadOnlySpan`1<char> input);
    internal static UniqueKey NewKey(ulong n0, ulong n1, Category category, long typeData, string keyExt);
    internal static UniqueKey NewKey(long longKey, Category category, long typeData, string keyExt);
    public static UniqueKey NewKey();
    internal static UniqueKey NewKey(Guid guid);
    internal static UniqueKey NewKey(Guid guid, Category category, long typeData, string keyExt);
    internal static UniqueKey NewEmptySystemTargetKey(long typeData);
    public static UniqueKey NewSystemTargetKey(Guid guid, long typeData);
    public static UniqueKey NewSystemTargetKey(short systemId);
    public static UniqueKey NewGrainServiceKey(short key, long typeData);
    public static UniqueKey NewGrainServiceKey(string key, long typeData);
    internal static UniqueKey NewKey(ulong n0, ulong n1, ulong typeCodeData, string keyExt);
    private static UniqueKey NewKey(ulong typeCodeData, string keyExt);
    private void ThrowIfIsNotLong();
    private static void ThrowIfIsSystemTargetKey(Category category);
    private void ThrowIfHasKeyExt(string methodName);
    public long PrimaryKeyToLong(String& extendedKey);
    public long PrimaryKeyToLong();
    public Guid PrimaryKeyToGuid(String& extendedKey);
    public Guid PrimaryKeyToGuid();
    public virtual bool Equals(object o);
    public sealed virtual bool Equals(UniqueKey other);
    public sealed virtual int CompareTo(UniqueKey other);
    public virtual int GetHashCode();
    internal UInt32 GetUniformHashCode();
    internal ReadOnlySpan`1<byte> ToByteArray();
    private Guid get_Guid();
    private void set_Guid(Guid value);
    public virtual string ToString();
    internal string ToHexString();
    internal string ToGrainKeyString();
    internal static Category GetCategory(ulong typeCodeData);
    private static ulong GetTypeCodeData(Category category, long typeData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Orleans.Runtime.Utils : object {
    public static string EnumerableToString(IEnumerable`1<T> collection, Func`2<T, string> toString, string separator, bool putInBrackets);
    [NullableContextAttribute("2")]
public static string DictionaryToString(ICollection`1<KeyValuePair`2<T1, T2>> dict, Func`2<T2, string> toString, string separator);
    public static string TimeSpanToString(TimeSpan timeSpan);
    public static long TicksToMilliSeconds(long ticks);
    public static float AverageTicksToMilliSeconds(float ticks);
    [ExtensionAttribute]
public static IPEndPoint ToIPEndPoint(Uri uri);
    [ExtensionAttribute]
public static SiloAddress ToGatewayAddress(Uri uri);
    [ExtensionAttribute]
public static Uri ToGatewayUri(IPEndPoint ep);
    [ExtensionAttribute]
public static Uri ToGatewayUri(SiloAddress address);
    public static void SafeExecute(Action action);
    [NullableContextAttribute("2")]
public static void SafeExecute(Action action, ILogger logger, string caller);
    internal static void LogIgnoredException(ILogger logger, Exception exc, string caller);
    [IteratorStateMachineAttribute("Orleans.Runtime.Utils/<BatchIEnumerable>d__12`1")]
[ExtensionAttribute]
public static IEnumerable`1<List`1<T>> BatchIEnumerable(IEnumerable`1<T> sequence, int batchSize);
    public static string GetStackTrace(int skipFrames);
}
[SerializerTransparentAttribute]
public abstract class Orleans.Runtime.VoidRequest : RequestBase {
    public sealed virtual ValueTask`1<Response> Invoke();
    protected abstract virtual void InvokeInner();
}
[GenerateSerializerAttribute]
public class Orleans.Runtime.WrappedException : OrleansException {
    [CompilerGeneratedAttribute]
private string <OriginalExceptionType>k__BackingField;
    [IdAttribute("0")]
public string OriginalExceptionType { get; public set; }
    public WrappedException(string message);
    [ObsoleteAttribute]
protected WrappedException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_OriginalExceptionType();
    [CompilerGeneratedAttribute]
public void set_OriginalExceptionType(string value);
    [ObsoleteAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [DoesNotReturnAttribute]
public static void CreateAndRethrow(Exception exception);
    private static WrappedException CreateFromException(Exception exception);
    public virtual string ToString();
}
public abstract class Orleans.Serialization.DeserializationContext : object {
    public IServiceProvider ServiceProvider { get; }
    public object RuntimeClient { get; }
    public abstract virtual IServiceProvider get_ServiceProvider();
    public abstract virtual object get_RuntimeClient();
}
public interface Orleans.Serialization.IOnDeserialized {
    public abstract virtual void OnDeserialized(DeserializationContext context);
}
public interface Orleans.Services.IGrainService {
}
public interface Orleans.Services.IGrainServiceClient`1 {
}
[IsReadOnlyAttribute]
internal class Orleans.SpanFormattableIPAddress : ValueType {
    [NullableAttribute("1")]
private IPAddress _value;
    [NullableContextAttribute("1")]
public SpanFormattableIPAddress(IPAddress value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public sealed virtual bool TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
}
[IsReadOnlyAttribute]
internal class Orleans.SpanFormattableIPEndPoint : ValueType {
    [NullableAttribute("2")]
private IPEndPoint _value;
    [NullableContextAttribute("2")]
public SpanFormattableIPEndPoint(IPEndPoint value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public sealed virtual bool TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
}
public static class Orleans.StableHash : object {
    public static UInt32 ComputeHash(ReadOnlySpan`1<byte> data);
    [NullableContextAttribute("1")]
public static UInt32 ComputeHash(string data);
}
[IsReadOnlyAttribute]
[ImmutableAttribute]
[GenerateSerializerAttribute]
[AliasAttribute("Orleans.Statistics.EnvironmentStatistics")]
public class Orleans.Statistics.EnvironmentStatistics : ValueType {
    [IdAttribute("0")]
public float CpuUsagePercentage;
    [IdAttribute("1")]
public long MemoryUsageBytes;
    [IdAttribute("2")]
public long AvailableMemoryBytes;
    [IdAttribute("3")]
public long MaximumAvailableMemoryBytes;
    internal EnvironmentStatistics(float cpuUsagePercentage, long memoryUsageBytes, long availableMemoryBytes, long maximumAvailableMemoryBytes);
}
[ObsoleteAttribute("This functionality will be removed, use IEnvironmentStatisticsProvider.GetEnvironmentStatistics instead.")]
public interface Orleans.Statistics.IAppEnvironmentStatistics {
    public Nullable`1<long> MemoryUsage { get; }
    public abstract virtual Nullable`1<long> get_MemoryUsage();
}
public interface Orleans.Statistics.IEnvironmentStatisticsProvider {
    public abstract virtual EnvironmentStatistics GetEnvironmentStatistics();
}
[ObsoleteAttribute("This functionality will be removed, use IEnvironmentStatisticsProvider.GetEnvironmentStatistics instead.")]
public interface Orleans.Statistics.IHostEnvironmentStatistics {
    public Nullable`1<long> TotalPhysicalMemory { get; }
    public Nullable`1<float> CpuUsage { get; }
    public Nullable`1<long> AvailableMemory { get; }
    public abstract virtual Nullable`1<long> get_TotalPhysicalMemory();
    public abstract virtual Nullable`1<float> get_CpuUsage();
    public abstract virtual Nullable`1<long> get_AvailableMemory();
}
[NullableContextAttribute("1")]
public interface Orleans.Timers.ITimerRegistry {
    [ObsoleteAttribute("Use 'RegisterGrainTimer(grainContext, callback, state, new() { DueTime = dueTime, Period = period, Interleave = true })' instead.")]
public abstract virtual IDisposable RegisterTimer(IGrainContext grainContext, Func`2<object, Task> callback, object state, TimeSpan dueTime, TimeSpan period);
    public abstract virtual IGrainTimer RegisterGrainTimer(IGrainContext grainContext, Func`3<TState, CancellationToken, Task> callback, TState state, GrainTimerCreationOptions options);
}
[GenerateSerializerAttribute]
[ImmutableAttribute]
[SuppressReferenceTrackingAttribute]
public class Orleans.Versions.Compatibility.AllVersionsCompatible : CompatibilityStrategy {
    [CompilerGeneratedAttribute]
private static AllVersionsCompatible <Singleton>k__BackingField;
    public static AllVersionsCompatible Singleton { get; }
    private static AllVersionsCompatible();
    [CompilerGeneratedAttribute]
public static AllVersionsCompatible get_Singleton();
}
[GenerateSerializerAttribute]
[ImmutableAttribute]
[SuppressReferenceTrackingAttribute]
public class Orleans.Versions.Compatibility.BackwardCompatible : CompatibilityStrategy {
    [CompilerGeneratedAttribute]
private static BackwardCompatible <Singleton>k__BackingField;
    public static BackwardCompatible Singleton { get; }
    private static BackwardCompatible();
    [CompilerGeneratedAttribute]
public static BackwardCompatible get_Singleton();
}
[SerializerTransparentAttribute]
public abstract class Orleans.Versions.Compatibility.CompatibilityStrategy : object {
}
public interface Orleans.Versions.Compatibility.ICompatibilityDirector {
    public abstract virtual bool IsCompatible(ushort requestedVersion, ushort currentVersion);
}
[GenerateSerializerAttribute]
[ImmutableAttribute]
[SuppressReferenceTrackingAttribute]
public class Orleans.Versions.Compatibility.StrictVersionCompatible : CompatibilityStrategy {
    [CompilerGeneratedAttribute]
private static StrictVersionCompatible <Singleton>k__BackingField;
    public static StrictVersionCompatible Singleton { get; }
    private static StrictVersionCompatible();
    [CompilerGeneratedAttribute]
public static StrictVersionCompatible get_Singleton();
}
public interface Orleans.Versions.IVersionStore {
    public bool IsEnabled { get; }
    public abstract virtual bool get_IsEnabled();
    public abstract virtual Task`1<Dictionary`2<GrainInterfaceType, CompatibilityStrategy>> GetCompatibilityStrategies();
    public abstract virtual Task`1<Dictionary`2<GrainInterfaceType, VersionSelectorStrategy>> GetSelectorStrategies();
    public abstract virtual Task`1<CompatibilityStrategy> GetCompatibilityStrategy();
    public abstract virtual Task`1<VersionSelectorStrategy> GetSelectorStrategy();
}
[GenerateSerializerAttribute]
[ImmutableAttribute]
[SuppressReferenceTrackingAttribute]
public class Orleans.Versions.Selector.AllCompatibleVersions : VersionSelectorStrategy {
    [CompilerGeneratedAttribute]
private static AllCompatibleVersions <Singleton>k__BackingField;
    public static AllCompatibleVersions Singleton { get; }
    private static AllCompatibleVersions();
    [CompilerGeneratedAttribute]
public static AllCompatibleVersions get_Singleton();
}
public interface Orleans.Versions.Selector.IVersionSelector {
    public abstract virtual UInt16[] GetSuitableVersion(ushort requestedVersion, UInt16[] availableVersions, ICompatibilityDirector compatibilityDirector);
}
[GenerateSerializerAttribute]
[ImmutableAttribute]
[SuppressReferenceTrackingAttribute]
public class Orleans.Versions.Selector.LatestVersion : VersionSelectorStrategy {
    [CompilerGeneratedAttribute]
private static LatestVersion <Singleton>k__BackingField;
    public static LatestVersion Singleton { get; }
    private static LatestVersion();
    [CompilerGeneratedAttribute]
public static LatestVersion get_Singleton();
}
[GenerateSerializerAttribute]
[ImmutableAttribute]
[SuppressReferenceTrackingAttribute]
public class Orleans.Versions.Selector.MinimumVersion : VersionSelectorStrategy {
    [CompilerGeneratedAttribute]
private static MinimumVersion <Singleton>k__BackingField;
    public static MinimumVersion Singleton { get; }
    private static MinimumVersion();
    [CompilerGeneratedAttribute]
public static MinimumVersion get_Singleton();
}
[SerializerTransparentAttribute]
public abstract class Orleans.Versions.Selector.VersionSelectorStrategy : object {
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Codec_DeactivationReasonCode : object {
    private Type _codecFieldType;
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, DeactivationReasonCode value);
    public sealed virtual DeactivationReasonCode ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.CodeGeneration.Codec_InvokeMethodOptions : object {
    private Type _codecFieldType;
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, InvokeMethodOptions value);
    public sealed virtual InvokeMethodOptions ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Concurrency.Codec_Immutable`1 : object {
    private Type _codecFieldType;
    private Type _type0;
    private IFieldCodec`1<T> _codec0;
    private static ValueTypeSetter`2<Immutable`1<T>, T> setField0;
    public Codec_Immutable`1(ICodecProvider codecProvider);
    private static Codec_Immutable`1();
    public sealed virtual void Serialize(Writer`1& writer, Immutable`1& instance);
    public sealed virtual void Deserialize(Reader`1& reader, Immutable`1& instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Immutable`1<T> value);
    public sealed virtual Immutable`1<T> ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Concurrency.Copier_Immutable`1 : ShallowCopier`1<Immutable`1<T>> {
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Core.Internal.Codec_Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1 : object {
    private Type _codecFieldType;
    public void Serialize(Writer`1& writer, Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1 instance);
    public void Deserialize(Reader`1& reader, Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1 value);
    public sealed virtual Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Core.Internal.Codec_Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45 : object {
    private Type _codecFieldType;
    public void Serialize(Writer`1& writer, Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45 instance);
    public void Deserialize(Reader`1& reader, Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45 value);
    public sealed virtual Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Core.Internal.Copier_Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1 : object {
    public sealed virtual Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1 DeepCopy(Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Core.Internal.Copier_Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45 : object {
    public sealed virtual Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45 DeepCopy(Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
[CompoundTypeAliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class OrleansCodeGen.Orleans.Core.Internal.Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1 : Request {
    private IGrainManagementExtension target;
    private static MethodInfo MethodBackingField;
    private static Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1();
    public virtual string GetMethodName();
    public virtual string GetInterfaceName();
    public virtual string GetActivityName();
    public virtual Type GetInterfaceType();
    public virtual MethodInfo GetMethod();
    public virtual void SetTarget(ITargetHolder holder);
    public virtual object GetTarget();
    public virtual void Dispose();
    protected virtual ValueTask InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
[CompoundTypeAliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class OrleansCodeGen.Orleans.Core.Internal.Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45 : Request {
    private IGrainManagementExtension target;
    private static MethodInfo MethodBackingField;
    private static Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45();
    public virtual string GetMethodName();
    public virtual string GetInterfaceName();
    public virtual string GetActivityName();
    public virtual Type GetInterfaceType();
    public virtual MethodInfo GetMethod();
    public virtual void SetTarget(ITargetHolder holder);
    public virtual object GetTarget();
    public virtual void Dispose();
    protected virtual ValueTask InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Core.Internal.Proxy_IGrainManagementExtension : GrainReference {
    public Proxy_IGrainManagementExtension(GrainReferenceShared arg0, IdSpan arg1);
    private sealed virtual override ValueTask global::Orleans.Core.Internal.IGrainManagementExtension.DeactivateOnIdle();
    private sealed virtual override ValueTask global::Orleans.Core.Internal.IGrainManagementExtension.MigrateOnIdle();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Metadata.Codec_ClusterManifest : object {
    private Type _codecFieldType;
    private IActivator`1<ClusterManifest> _activator;
    private Type _type0;
    private IFieldCodec`1<ImmutableArray`1<GrainManifest>> _codec0;
    private Type _type1;
    private IFieldCodec`1<ImmutableDictionary`2<SiloAddress, GrainManifest>> _codec1;
    private Type _type2;
    private Codec_MajorMinorVersion _codec2;
    private static Action`2<ClusterManifest, ImmutableArray`1<GrainManifest>> setField0;
    private static Action`2<ClusterManifest, ImmutableDictionary`2<SiloAddress, GrainManifest>> setField1;
    private static Action`2<ClusterManifest, MajorMinorVersion> setField2;
    public Codec_ClusterManifest(IActivator`1<ClusterManifest> _activator, ICodecProvider codecProvider);
    private static Codec_ClusterManifest();
    public void Serialize(Writer`1& writer, ClusterManifest instance);
    public void Deserialize(Reader`1& reader, ClusterManifest instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, ClusterManifest value);
    public sealed virtual ClusterManifest ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Metadata.Codec_GrainInterfaceProperties : object {
    private Type _codecFieldType;
    private IActivator`1<GrainInterfaceProperties> _activator;
    private Type _type0;
    private IFieldCodec`1<ImmutableDictionary`2<string, string>> _codec0;
    private static Action`2<GrainInterfaceProperties, ImmutableDictionary`2<string, string>> setField0;
    public Codec_GrainInterfaceProperties(IActivator`1<GrainInterfaceProperties> _activator, ICodecProvider codecProvider);
    private static Codec_GrainInterfaceProperties();
    public void Serialize(Writer`1& writer, GrainInterfaceProperties instance);
    public void Deserialize(Reader`1& reader, GrainInterfaceProperties instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, GrainInterfaceProperties value);
    public sealed virtual GrainInterfaceProperties ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Metadata.Codec_GrainManifest : object {
    private Type _codecFieldType;
    private IActivator`1<GrainManifest> _activator;
    private Type _type0;
    private IFieldCodec`1<ImmutableDictionary`2<GrainType, GrainProperties>> _codec0;
    private Type _type1;
    private IFieldCodec`1<ImmutableDictionary`2<GrainInterfaceType, GrainInterfaceProperties>> _codec1;
    private static Action`2<GrainManifest, ImmutableDictionary`2<GrainType, GrainProperties>> setField0;
    private static Action`2<GrainManifest, ImmutableDictionary`2<GrainInterfaceType, GrainInterfaceProperties>> setField1;
    public Codec_GrainManifest(IActivator`1<GrainManifest> _activator, ICodecProvider codecProvider);
    private static Codec_GrainManifest();
    public void Serialize(Writer`1& writer, GrainManifest instance);
    public void Deserialize(Reader`1& reader, GrainManifest instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, GrainManifest value);
    public sealed virtual GrainManifest ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Metadata.Codec_GrainProperties : object {
    private Type _codecFieldType;
    private IActivator`1<GrainProperties> _activator;
    private Type _type0;
    private IFieldCodec`1<ImmutableDictionary`2<string, string>> _codec0;
    private static Action`2<GrainProperties, ImmutableDictionary`2<string, string>> setField0;
    public Codec_GrainProperties(IActivator`1<GrainProperties> _activator, ICodecProvider codecProvider);
    private static Codec_GrainProperties();
    public void Serialize(Writer`1& writer, GrainProperties instance);
    public void Deserialize(Reader`1& reader, GrainProperties instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, GrainProperties value);
    public sealed virtual GrainProperties ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Metadata.Codec_MajorMinorVersion : object {
    private Type _codecFieldType;
    private static ValueTypeSetter`2<MajorMinorVersion, long> setField0;
    private static ValueTypeSetter`2<MajorMinorVersion, long> setField1;
    private static Codec_MajorMinorVersion();
    public sealed virtual void Serialize(Writer`1& writer, MajorMinorVersion& instance);
    public sealed virtual void Deserialize(Reader`1& reader, MajorMinorVersion& instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, MajorMinorVersion value);
    public sealed virtual MajorMinorVersion ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Proxy_IGrain : GrainReference {
    public Proxy_IGrain(GrainReferenceShared arg0, IdSpan arg1);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Proxy_IGrainObserver : GrainReference {
    public Proxy_IGrainObserver(GrainReferenceShared arg0, IdSpan arg1);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Proxy_IGrainWithGuidCompoundKey : GrainReference {
    public Proxy_IGrainWithGuidCompoundKey(GrainReferenceShared arg0, IdSpan arg1);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Proxy_IGrainWithGuidKey : GrainReference {
    public Proxy_IGrainWithGuidKey(GrainReferenceShared arg0, IdSpan arg1);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Proxy_IGrainWithIntegerCompoundKey : GrainReference {
    public Proxy_IGrainWithIntegerCompoundKey(GrainReferenceShared arg0, IdSpan arg1);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Proxy_IGrainWithIntegerKey : GrainReference {
    public Proxy_IGrainWithIntegerKey(GrainReferenceShared arg0, IdSpan arg1);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Proxy_IGrainWithStringKey : GrainReference {
    public Proxy_IGrainWithStringKey(GrainReferenceShared arg0, IdSpan arg1);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Proxy_ISystemTarget : GrainReference {
    public Proxy_ISystemTarget(GrainReferenceShared arg0, IdSpan arg1);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_ActivationCountBasedPlacement : object {
    public sealed virtual ActivationCountBasedPlacement Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_EnumerationAbortedException : object {
    public sealed virtual EnumerationAbortedException Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_GatewayTooBusyException : object {
    public sealed virtual GatewayTooBusyException Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_GrainAddress : object {
    public sealed virtual GrainAddress Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_GrainExtensionNotInstalledException : object {
    public sealed virtual GrainExtensionNotInstalledException Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_HashBasedPlacement : object {
    public sealed virtual HashBasedPlacement Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_LimitExceededException : object {
    public sealed virtual LimitExceededException Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_OrleansException : object {
    public sealed virtual OrleansException Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_PreferLocalPlacement : object {
    public sealed virtual PreferLocalPlacement Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_RandomPlacement : object {
    public sealed virtual RandomPlacement Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_SiloUnavailableException : object {
    public sealed virtual SiloUnavailableException Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_StatelessWorkerPlacement : object {
    public sealed virtual StatelessWorkerPlacement Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_SystemTargetPlacementStrategy : object {
    public sealed virtual SystemTargetPlacementStrategy Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_UniqueKey : object {
    public sealed virtual UniqueKey Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_ActivationCountBasedPlacement : object {
    private Type _codecFieldType;
    public void Serialize(Writer`1& writer, ActivationCountBasedPlacement instance);
    public void Deserialize(Reader`1& reader, ActivationCountBasedPlacement instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, ActivationCountBasedPlacement value);
    public sealed virtual ActivationCountBasedPlacement ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_ActivationId : object {
    private Type _codecFieldType;
    private static ValueTypeSetter`2<ActivationId, Guid> setField0;
    private static Codec_ActivationId();
    public sealed virtual void Serialize(Writer`1& writer, ActivationId& instance);
    public sealed virtual void Deserialize(Reader`1& reader, ActivationId& instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, ActivationId value);
    public sealed virtual ActivationId ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_AsyncEnumerableRequest`1 : AbstractTypeSerializer`1<AsyncEnumerableRequest`1<T>> {
    public virtual void Serialize(Writer`1& writer, AsyncEnumerableRequest`1<T> instance);
    public virtual void Deserialize(Reader`1& reader, AsyncEnumerableRequest`1<T> instance);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_ClientNotAvailableException : object {
    private Type _codecFieldType;
    private Codec_OrleansException _baseTypeSerializer;
    private IActivator`1<ClientNotAvailableException> _activator;
    public Codec_ClientNotAvailableException(ICodecProvider codecProvider, IActivator`1<ClientNotAvailableException> _activator);
    public void Serialize(Writer`1& writer, ClientNotAvailableException instance);
    public void Deserialize(Reader`1& reader, ClientNotAvailableException instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, ClientNotAvailableException value);
    public sealed virtual ClientNotAvailableException ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_EnumerationAbortedException : object {
    private Type _codecFieldType;
    private IBaseCodec`1<Exception> _baseTypeSerializer;
    public Codec_EnumerationAbortedException(IBaseCodec`1<Exception> _baseTypeSerializer);
    public void Serialize(Writer`1& writer, EnumerationAbortedException instance);
    public void Deserialize(Reader`1& reader, EnumerationAbortedException instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, EnumerationAbortedException value);
    public sealed virtual EnumerationAbortedException ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_EnumerationResult : object {
    private Type _codecFieldType;
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, EnumerationResult value);
    public sealed virtual EnumerationResult ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_GatewayTooBusyException : object {
    private Type _codecFieldType;
    private Codec_OrleansException _baseTypeSerializer;
    public Codec_GatewayTooBusyException(ICodecProvider codecProvider);
    public void Serialize(Writer`1& writer, GatewayTooBusyException instance);
    public void Deserialize(Reader`1& reader, GatewayTooBusyException instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, GatewayTooBusyException value);
    public sealed virtual GatewayTooBusyException ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_GrainAddress : object {
    private Type _codecFieldType;
    private Type _type0;
    private Codec_ActivationId _codec0;
    private Type _type1;
    private Codec_GrainId _codec1;
    private Type _type2;
    private Codec_MembershipVersion _codec2;
    private Type _type3;
    private IFieldCodec`1<SiloAddress> _codec3;
    private static Func`2<GrainAddress, ActivationId> getField0;
    private static Action`2<GrainAddress, ActivationId> setField0;
    private static Func`2<GrainAddress, GrainId> getField1;
    private static Action`2<GrainAddress, GrainId> setField1;
    private static Action`2<GrainAddress, MembershipVersion> setField2;
    private static Action`2<GrainAddress, SiloAddress> setField3;
    public Codec_GrainAddress(ICodecProvider codecProvider);
    private static Codec_GrainAddress();
    public void Serialize(Writer`1& writer, GrainAddress instance);
    public void Deserialize(Reader`1& reader, GrainAddress instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, GrainAddress value);
    public sealed virtual GrainAddress ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_GrainAddressCacheUpdate : object {
    private Type _codecFieldType;
    private IActivator`1<GrainAddressCacheUpdate> _activator;
    private Type _type0;
    private Codec_GrainId _codec0;
    private Type _type1;
    private Codec_ActivationId _codec1;
    private Type _type2;
    private Codec_MembershipVersion _codec2;
    private Type _type3;
    private IFieldCodec`1<SiloAddress> _codec3;
    private static Func`2<GrainAddressCacheUpdate, GrainId> getField0;
    private static Action`2<GrainAddressCacheUpdate, GrainId> setField0;
    private static Func`2<GrainAddressCacheUpdate, ActivationId> getField1;
    private static Action`2<GrainAddressCacheUpdate, ActivationId> setField1;
    private static Func`2<GrainAddressCacheUpdate, MembershipVersion> getField2;
    private static Action`2<GrainAddressCacheUpdate, MembershipVersion> setField2;
    private static Func`2<GrainAddressCacheUpdate, SiloAddress> getField3;
    private static Action`2<GrainAddressCacheUpdate, SiloAddress> setField3;
    private static Func`2<GrainAddressCacheUpdate, ActivationId> getField4;
    private static Action`2<GrainAddressCacheUpdate, ActivationId> setField4;
    private static Func`2<GrainAddressCacheUpdate, MembershipVersion> getField5;
    private static Action`2<GrainAddressCacheUpdate, MembershipVersion> setField5;
    private static Func`2<GrainAddressCacheUpdate, SiloAddress> getField6;
    private static Action`2<GrainAddressCacheUpdate, SiloAddress> setField6;
    public Codec_GrainAddressCacheUpdate(IActivator`1<GrainAddressCacheUpdate> _activator, ICodecProvider codecProvider);
    private static Codec_GrainAddressCacheUpdate();
    public void Serialize(Writer`1& writer, GrainAddressCacheUpdate instance);
    public void Deserialize(Reader`1& reader, GrainAddressCacheUpdate instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, GrainAddressCacheUpdate value);
    public sealed virtual GrainAddressCacheUpdate ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_GrainExtensionNotInstalledException : object {
    private Type _codecFieldType;
    private Codec_OrleansException _baseTypeSerializer;
    public Codec_GrainExtensionNotInstalledException(ICodecProvider codecProvider);
    public void Serialize(Writer`1& writer, GrainExtensionNotInstalledException instance);
    public void Deserialize(Reader`1& reader, GrainExtensionNotInstalledException instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, GrainExtensionNotInstalledException value);
    public sealed virtual GrainExtensionNotInstalledException ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_GrainId : object {
    private Type _codecFieldType;
    private Type _type0;
    private Codec_IdSpan _codec0;
    private Type _type1;
    private Codec_GrainType _codec1;
    private static ValueTypeGetter`2<GrainId, IdSpan> getField0;
    private static ValueTypeSetter`2<GrainId, IdSpan> setField0;
    private static ValueTypeGetter`2<GrainId, GrainType> getField1;
    private static ValueTypeSetter`2<GrainId, GrainType> setField1;
    public Codec_GrainId(ICodecProvider codecProvider);
    private static Codec_GrainId();
    public sealed virtual void Serialize(Writer`1& writer, GrainId& instance);
    public sealed virtual void Deserialize(Reader`1& reader, GrainId& instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, GrainId value);
    public sealed virtual GrainId ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_GrainInterfaceType : object {
    private Type _codecFieldType;
    private Type _type0;
    private Codec_IdSpan _codec0;
    private static ValueTypeGetter`2<GrainInterfaceType, IdSpan> getField0;
    private static ValueTypeSetter`2<GrainInterfaceType, IdSpan> setField0;
    public Codec_GrainInterfaceType(ICodecProvider codecProvider);
    private static Codec_GrainInterfaceType();
    public sealed virtual void Serialize(Writer`1& writer, GrainInterfaceType& instance);
    public sealed virtual void Deserialize(Reader`1& reader, GrainInterfaceType& instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, GrainInterfaceType value);
    public sealed virtual GrainInterfaceType ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_GrainReferenceNotBoundException : object {
    private Type _codecFieldType;
    private Codec_OrleansException _baseTypeSerializer;
    private IActivator`1<GrainReferenceNotBoundException> _activator;
    public Codec_GrainReferenceNotBoundException(ICodecProvider codecProvider, IActivator`1<GrainReferenceNotBoundException> _activator);
    public void Serialize(Writer`1& writer, GrainReferenceNotBoundException instance);
    public void Deserialize(Reader`1& reader, GrainReferenceNotBoundException instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, GrainReferenceNotBoundException value);
    public sealed virtual GrainReferenceNotBoundException ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Codec_GrainReferenceSurrogate : object {
    private Type _codecFieldType;
    private Type _type0;
    private Codec_GrainId _codec0;
    private Type _type1;
    private Codec_GrainInterfaceType _codec1;
    public Codec_GrainReferenceSurrogate(ICodecProvider codecProvider);
    public sealed virtual void Serialize(Writer`1& writer, GrainReferenceSurrogate& instance);
    public sealed virtual void Deserialize(Reader`1& reader, GrainReferenceSurrogate& instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, GrainReferenceSurrogate value);
    public sealed virtual GrainReferenceSurrogate ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_GrainType : object {
    private Type _codecFieldType;
    private Type _type0;
    private Codec_IdSpan _codec0;
    private static ValueTypeGetter`2<GrainType, IdSpan> getField0;
    private static ValueTypeSetter`2<GrainType, IdSpan> setField0;
    public Codec_GrainType(ICodecProvider codecProvider);
    private static Codec_GrainType();
    public sealed virtual void Serialize(Writer`1& writer, GrainType& instance);
    public sealed virtual void Deserialize(Reader`1& reader, GrainType& instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, GrainType value);
    public sealed virtual GrainType ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_GuidId : object {
    private Type _codecFieldType;
    private IActivator`1<GuidId> _activator;
    private static Action`2<GuidId, Guid> setField0;
    public Codec_GuidId(IActivator`1<GuidId> _activator);
    private static Codec_GuidId();
    public void Serialize(Writer`1& writer, GuidId instance);
    public void Deserialize(Reader`1& reader, GuidId instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, GuidId value);
    public sealed virtual GuidId ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_HashBasedPlacement : object {
    private Type _codecFieldType;
    public void Serialize(Writer`1& writer, HashBasedPlacement instance);
    public void Deserialize(Reader`1& reader, HashBasedPlacement instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, HashBasedPlacement value);
    public sealed virtual HashBasedPlacement ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_IdSpan : object {
    private Type _codecFieldType;
    private static ValueTypeGetter`2<IdSpan, int> getField0;
    private static ValueTypeSetter`2<IdSpan, int> setField0;
    private static ValueTypeGetter`2<IdSpan, Byte[]> getField1;
    private static ValueTypeSetter`2<IdSpan, Byte[]> setField1;
    private static Codec_IdSpan();
    public sealed virtual void Serialize(Writer`1& writer, IdSpan& instance);
    public sealed virtual void Deserialize(Reader`1& reader, IdSpan& instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, IdSpan value);
    public sealed virtual IdSpan ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1`1 : object {
    private Type _codecFieldType;
    private Type _type0;
    private IFieldCodec`1<IAsyncEnumerableRequest`1<T>> _codec0;
    public Codec_Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1`1(ICodecProvider codecProvider);
    public void Serialize(Writer`1& writer, Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1`1<T> instance);
    public void Deserialize(Reader`1& reader, Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1`1<T> instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1`1<T> value);
    public sealed virtual Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1`1<T> ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209 : object {
    private Type _codecFieldType;
    public void Serialize(Writer`1& writer, Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209 instance);
    public void Deserialize(Reader`1& reader, Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209 value);
    public sealed virtual Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1`1 : object {
    private Type _codecFieldType;
    public void Serialize(Writer`1& writer, Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1`1<T> instance);
    public void Deserialize(Reader`1& reader, Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1`1<T> instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1`1<T> value);
    public sealed virtual Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1`1<T> ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Codec_Invokable_ICancellationSourcesExtension_GrainReference_Ext_50F75C16 : object {
    private Type _codecFieldType;
    public void Serialize(Writer`1& writer, Invokable_ICancellationSourcesExtension_GrainReference_Ext_50F75C16 instance);
    public void Deserialize(Reader`1& reader, Invokable_ICancellationSourcesExtension_GrainReference_Ext_50F75C16 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_ICancellationSourcesExtension_GrainReference_Ext_50F75C16 value);
    public sealed virtual Invokable_ICancellationSourcesExtension_GrainReference_Ext_50F75C16 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_LegacyGrainId : object {
    private Type _codecFieldType;
    private IActivator`1<LegacyGrainId> _activator;
    private Type _type0;
    private Codec_UniqueKey _codec0;
    private static Action`2<LegacyGrainId, UniqueKey> setField0;
    public Codec_LegacyGrainId(IActivator`1<LegacyGrainId> _activator, ICodecProvider codecProvider);
    private static Codec_LegacyGrainId();
    public void Serialize(Writer`1& writer, LegacyGrainId instance);
    public void Deserialize(Reader`1& reader, LegacyGrainId instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, LegacyGrainId value);
    public sealed virtual LegacyGrainId ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_LimitExceededException : object {
    private Type _codecFieldType;
    private Codec_OrleansException _baseTypeSerializer;
    public Codec_LimitExceededException(ICodecProvider codecProvider);
    public void Serialize(Writer`1& writer, LimitExceededException instance);
    public void Deserialize(Reader`1& reader, LimitExceededException instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, LimitExceededException value);
    public sealed virtual LimitExceededException ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_MembershipVersion : object {
    private Type _codecFieldType;
    private static ValueTypeSetter`2<MembershipVersion, long> setField0;
    private static Codec_MembershipVersion();
    public sealed virtual void Serialize(Writer`1& writer, MembershipVersion& instance);
    public sealed virtual void Deserialize(Reader`1& reader, MembershipVersion& instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, MembershipVersion value);
    public sealed virtual MembershipVersion ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_OrleansConfigurationException : object {
    private Type _codecFieldType;
    private IBaseCodec`1<Exception> _baseTypeSerializer;
    private IActivator`1<OrleansConfigurationException> _activator;
    public Codec_OrleansConfigurationException(IBaseCodec`1<Exception> _baseTypeSerializer, IActivator`1<OrleansConfigurationException> _activator);
    public void Serialize(Writer`1& writer, OrleansConfigurationException instance);
    public void Deserialize(Reader`1& reader, OrleansConfigurationException instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, OrleansConfigurationException value);
    public sealed virtual OrleansConfigurationException ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_OrleansException : object {
    private Type _codecFieldType;
    private IBaseCodec`1<Exception> _baseTypeSerializer;
    public Codec_OrleansException(IBaseCodec`1<Exception> _baseTypeSerializer);
    public sealed virtual void Serialize(Writer`1& writer, OrleansException instance);
    public sealed virtual void Deserialize(Reader`1& reader, OrleansException instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, OrleansException value);
    public sealed virtual OrleansException ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_OrleansLifecycleCanceledException : object {
    private Type _codecFieldType;
    private Codec_OrleansException _baseTypeSerializer;
    private IActivator`1<OrleansLifecycleCanceledException> _activator;
    public Codec_OrleansLifecycleCanceledException(ICodecProvider codecProvider, IActivator`1<OrleansLifecycleCanceledException> _activator);
    public void Serialize(Writer`1& writer, OrleansLifecycleCanceledException instance);
    public void Deserialize(Reader`1& reader, OrleansLifecycleCanceledException instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, OrleansLifecycleCanceledException value);
    public sealed virtual OrleansLifecycleCanceledException ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_OrleansMessageRejectionException : object {
    private Type _codecFieldType;
    private Codec_OrleansException _baseTypeSerializer;
    private IActivator`1<OrleansMessageRejectionException> _activator;
    public Codec_OrleansMessageRejectionException(ICodecProvider codecProvider, IActivator`1<OrleansMessageRejectionException> _activator);
    public sealed virtual void Serialize(Writer`1& writer, OrleansMessageRejectionException instance);
    public sealed virtual void Deserialize(Reader`1& reader, OrleansMessageRejectionException instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, OrleansMessageRejectionException value);
    public sealed virtual OrleansMessageRejectionException ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_PreferLocalPlacement : object {
    private Type _codecFieldType;
    public void Serialize(Writer`1& writer, PreferLocalPlacement instance);
    public void Deserialize(Reader`1& reader, PreferLocalPlacement instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, PreferLocalPlacement value);
    public sealed virtual PreferLocalPlacement ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_RandomPlacement : object {
    private Type _codecFieldType;
    public void Serialize(Writer`1& writer, RandomPlacement instance);
    public void Deserialize(Reader`1& reader, RandomPlacement instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, RandomPlacement value);
    public sealed virtual RandomPlacement ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_SiloUnavailableException : object {
    private Type _codecFieldType;
    private Codec_OrleansMessageRejectionException _baseTypeSerializer;
    public Codec_SiloUnavailableException(ICodecProvider codecProvider);
    public void Serialize(Writer`1& writer, SiloUnavailableException instance);
    public void Deserialize(Reader`1& reader, SiloUnavailableException instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, SiloUnavailableException value);
    public sealed virtual SiloUnavailableException ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Codec_StatelessWorkerPlacement : object {
    private Type _codecFieldType;
    private static Action`2<StatelessWorkerPlacement, int> setField0;
    private static Codec_StatelessWorkerPlacement();
    public void Serialize(Writer`1& writer, StatelessWorkerPlacement instance);
    public void Deserialize(Reader`1& reader, StatelessWorkerPlacement instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, StatelessWorkerPlacement value);
    public sealed virtual StatelessWorkerPlacement ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_SystemTargetPlacementStrategy : object {
    private Type _codecFieldType;
    public void Serialize(Writer`1& writer, SystemTargetPlacementStrategy instance);
    public void Deserialize(Reader`1& reader, SystemTargetPlacementStrategy instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, SystemTargetPlacementStrategy value);
    public sealed virtual SystemTargetPlacementStrategy ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_UniqueKey : object {
    private Type _codecFieldType;
    private static Action`2<UniqueKey, string> setField0;
    private static Action`2<UniqueKey, ulong> setField1;
    private static Action`2<UniqueKey, ulong> setField2;
    private static Action`2<UniqueKey, ulong> setField3;
    private static Codec_UniqueKey();
    public void Serialize(Writer`1& writer, UniqueKey instance);
    public void Deserialize(Reader`1& reader, UniqueKey instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, UniqueKey value);
    public sealed virtual UniqueKey ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Codec_WrappedException : object {
    private Type _codecFieldType;
    private Codec_OrleansException _baseTypeSerializer;
    private IActivator`1<WrappedException> _activator;
    public Codec_WrappedException(ICodecProvider codecProvider, IActivator`1<WrappedException> _activator);
    public sealed virtual void Serialize(Writer`1& writer, WrappedException instance);
    public sealed virtual void Deserialize(Reader`1& reader, WrappedException instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, WrappedException value);
    public sealed virtual WrappedException ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Copier_AsyncEnumerableRequest`1 : object {
    public sealed virtual AsyncEnumerableRequest`1<T> DeepCopy(AsyncEnumerableRequest`1<T> original, CopyContext context);
    public sealed virtual void DeepCopy(AsyncEnumerableRequest`1<T> input, AsyncEnumerableRequest`1<T> output, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Copier_ClientNotAvailableException : ExceptionCopier`2<ClientNotAvailableException, OrleansException> {
    public Copier_ClientNotAvailableException(ICodecProvider codecProvider);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Copier_EnumerationAbortedException : ExceptionCopier`2<EnumerationAbortedException, Exception> {
    public Copier_EnumerationAbortedException(ICodecProvider codecProvider);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Copier_GatewayTooBusyException : ExceptionCopier`2<GatewayTooBusyException, OrleansException> {
    public Copier_GatewayTooBusyException(ICodecProvider codecProvider);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Copier_GrainExtensionNotInstalledException : ExceptionCopier`2<GrainExtensionNotInstalledException, OrleansException> {
    public Copier_GrainExtensionNotInstalledException(ICodecProvider codecProvider);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Copier_GrainReferenceNotBoundException : ExceptionCopier`2<GrainReferenceNotBoundException, OrleansException> {
    public Copier_GrainReferenceNotBoundException(ICodecProvider codecProvider);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Copier_Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1`1 : object {
    public sealed virtual Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1`1<T> DeepCopy(Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1`1<T> original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Copier_Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209 : object {
    public sealed virtual Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209 DeepCopy(Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Copier_Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1`1 : object {
    public sealed virtual Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1`1<T> DeepCopy(Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1`1<T> original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Copier_Invokable_ICancellationSourcesExtension_GrainReference_Ext_50F75C16 : object {
    public sealed virtual Invokable_ICancellationSourcesExtension_GrainReference_Ext_50F75C16 DeepCopy(Invokable_ICancellationSourcesExtension_GrainReference_Ext_50F75C16 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Copier_LimitExceededException : ExceptionCopier`2<LimitExceededException, OrleansException> {
    public Copier_LimitExceededException(ICodecProvider codecProvider);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Copier_OrleansConfigurationException : ExceptionCopier`2<OrleansConfigurationException, Exception> {
    public Copier_OrleansConfigurationException(ICodecProvider codecProvider);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Copier_OrleansException : ExceptionCopier`2<OrleansException, Exception> {
    public Copier_OrleansException(ICodecProvider codecProvider);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Copier_OrleansLifecycleCanceledException : ExceptionCopier`2<OrleansLifecycleCanceledException, OrleansException> {
    public Copier_OrleansLifecycleCanceledException(ICodecProvider codecProvider);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Copier_OrleansMessageRejectionException : ExceptionCopier`2<OrleansMessageRejectionException, OrleansException> {
    public Copier_OrleansMessageRejectionException(ICodecProvider codecProvider);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Copier_SiloUnavailableException : ExceptionCopier`2<SiloUnavailableException, OrleansMessageRejectionException> {
    public Copier_SiloUnavailableException(ICodecProvider codecProvider);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Copier_StatelessWorkerPlacement : object {
    private static Action`2<StatelessWorkerPlacement, int> setField0;
    private static Copier_StatelessWorkerPlacement();
    public sealed virtual StatelessWorkerPlacement DeepCopy(StatelessWorkerPlacement original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Runtime.Copier_WrappedException : ExceptionCopier`2<WrappedException, OrleansException> {
    public Copier_WrappedException(ICodecProvider codecProvider);
    public virtual void DeepCopy(WrappedException input, WrappedException output, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
[CompoundTypeAliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class OrleansCodeGen.Orleans.Runtime.Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1`1 : Request`1<ValueTuple`2<EnumerationResult, object>> {
    public Guid arg0;
    public IAsyncEnumerableRequest`1<T> arg1;
    private IAsyncEnumerableGrainExtension target;
    private static MethodInfo MethodBackingField;
    private static Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1`1();
    public virtual int GetArgumentCount();
    public virtual string GetMethodName();
    public virtual string GetInterfaceName();
    public virtual string GetActivityName();
    public virtual Type GetInterfaceType();
    public virtual MethodInfo GetMethod();
    public virtual void SetTarget(ITargetHolder holder);
    public virtual object GetTarget();
    public virtual void Dispose();
    public virtual object GetArgument(int index);
    public virtual void SetArgument(int index, object value);
    protected virtual ValueTask`1<ValueTuple`2<EnumerationResult, object>> InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
[CompoundTypeAliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class OrleansCodeGen.Orleans.Runtime.Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209 : Request {
    public Guid arg0;
    private IAsyncEnumerableGrainExtension target;
    private static MethodInfo MethodBackingField;
    private static Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209();
    public virtual int GetArgumentCount();
    public virtual string GetMethodName();
    public virtual string GetInterfaceName();
    public virtual string GetActivityName();
    public virtual Type GetInterfaceType();
    public virtual MethodInfo GetMethod();
    public virtual void SetTarget(ITargetHolder holder);
    public virtual object GetTarget();
    public virtual void Dispose();
    public virtual object GetArgument(int index);
    public virtual void SetArgument(int index, object value);
    protected virtual ValueTask InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
[CompoundTypeAliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class OrleansCodeGen.Orleans.Runtime.Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1`1 : Request`1<ValueTuple`2<EnumerationResult, object>> {
    public Guid arg0;
    private IAsyncEnumerableGrainExtension target;
    private static MethodInfo MethodBackingField;
    private static Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1`1();
    public virtual int GetArgumentCount();
    public virtual string GetMethodName();
    public virtual string GetInterfaceName();
    public virtual string GetActivityName();
    public virtual Type GetInterfaceType();
    public virtual MethodInfo GetMethod();
    public virtual void SetTarget(ITargetHolder holder);
    public virtual object GetTarget();
    public virtual void Dispose();
    public virtual object GetArgument(int index);
    public virtual void SetArgument(int index, object value);
    protected virtual ValueTask`1<ValueTuple`2<EnumerationResult, object>> InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
[CompoundTypeAliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class OrleansCodeGen.Orleans.Runtime.Invokable_ICancellationSourcesExtension_GrainReference_Ext_50F75C16 : TaskRequest {
    public Guid arg0;
    private ICancellationSourcesExtension target;
    private static MethodInfo MethodBackingField;
    private static Invokable_ICancellationSourcesExtension_GrainReference_Ext_50F75C16();
    public virtual int GetArgumentCount();
    public virtual string GetMethodName();
    public virtual string GetInterfaceName();
    public virtual string GetActivityName();
    public virtual Type GetInterfaceType();
    public virtual MethodInfo GetMethod();
    public virtual void SetTarget(ITargetHolder holder);
    public virtual object GetTarget();
    public virtual void Dispose();
    public virtual object GetArgument(int index);
    public virtual void SetArgument(int index, object value);
    protected virtual Task InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Proxy_IAddressable : GrainReference {
    public Proxy_IAddressable(GrainReferenceShared arg0, IdSpan arg1);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Proxy_IAsyncEnumerableGrainExtension : GrainReference {
    public Proxy_IAsyncEnumerableGrainExtension(GrainReferenceShared arg0, IdSpan arg1);
    private sealed virtual override ValueTask`1<ValueTuple`2<EnumerationResult, object>> global::Orleans.Runtime.IAsyncEnumerableGrainExtension.StartEnumeration(Guid arg0, IAsyncEnumerableRequest`1<T> arg1);
    private sealed virtual override ValueTask`1<ValueTuple`2<EnumerationResult, object>> global::Orleans.Runtime.IAsyncEnumerableGrainExtension.MoveNext(Guid arg0);
    private sealed virtual override ValueTask global::Orleans.Runtime.IAsyncEnumerableGrainExtension.DisposeAsync(Guid arg0);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Proxy_ICancellationSourcesExtension : GrainReference {
    public Proxy_ICancellationSourcesExtension(GrainReferenceShared arg0, IdSpan arg1);
    private sealed virtual override Task global::Orleans.Runtime.ICancellationSourcesExtension.CancelRemoteToken(Guid arg0);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Runtime.Proxy_IGrainExtension : GrainReference {
    public Proxy_IGrainExtension(GrainReferenceShared arg0, IdSpan arg1);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Services.Proxy_IGrainService : GrainReference {
    public Proxy_IGrainService(GrainReferenceShared arg0, IdSpan arg1);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Statistics.Codec_EnvironmentStatistics : object {
    private Type _codecFieldType;
    private static ValueTypeSetter`2<EnvironmentStatistics, long> setField0;
    private static ValueTypeSetter`2<EnvironmentStatistics, float> setField1;
    private static ValueTypeSetter`2<EnvironmentStatistics, long> setField2;
    private static ValueTypeSetter`2<EnvironmentStatistics, long> setField3;
    private static Codec_EnvironmentStatistics();
    public sealed virtual void Serialize(Writer`1& writer, EnvironmentStatistics& instance);
    public sealed virtual void Deserialize(Reader`1& reader, EnvironmentStatistics& instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, EnvironmentStatistics value);
    public sealed virtual EnvironmentStatistics ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Versions.Compatibility.Activator_AllVersionsCompatible : object {
    public sealed virtual AllVersionsCompatible Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Versions.Compatibility.Activator_BackwardCompatible : object {
    public sealed virtual BackwardCompatible Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Versions.Compatibility.Activator_StrictVersionCompatible : object {
    public sealed virtual StrictVersionCompatible Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Versions.Compatibility.Codec_AllVersionsCompatible : object {
    private Type _codecFieldType;
    public void Serialize(Writer`1& writer, AllVersionsCompatible instance);
    public void Deserialize(Reader`1& reader, AllVersionsCompatible instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, AllVersionsCompatible value);
    public sealed virtual AllVersionsCompatible ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Versions.Compatibility.Codec_BackwardCompatible : object {
    private Type _codecFieldType;
    public void Serialize(Writer`1& writer, BackwardCompatible instance);
    public void Deserialize(Reader`1& reader, BackwardCompatible instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, BackwardCompatible value);
    public sealed virtual BackwardCompatible ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Versions.Compatibility.Codec_StrictVersionCompatible : object {
    private Type _codecFieldType;
    public void Serialize(Writer`1& writer, StrictVersionCompatible instance);
    public void Deserialize(Reader`1& reader, StrictVersionCompatible instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, StrictVersionCompatible value);
    public sealed virtual StrictVersionCompatible ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Versions.Selector.Activator_AllCompatibleVersions : object {
    public sealed virtual AllCompatibleVersions Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Versions.Selector.Activator_LatestVersion : object {
    public sealed virtual LatestVersion Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.Orleans.Versions.Selector.Activator_MinimumVersion : object {
    public sealed virtual MinimumVersion Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Versions.Selector.Codec_AllCompatibleVersions : object {
    private Type _codecFieldType;
    public void Serialize(Writer`1& writer, AllCompatibleVersions instance);
    public void Deserialize(Reader`1& reader, AllCompatibleVersions instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, AllCompatibleVersions value);
    public sealed virtual AllCompatibleVersions ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Versions.Selector.Codec_LatestVersion : object {
    private Type _codecFieldType;
    public void Serialize(Writer`1& writer, LatestVersion instance);
    public void Deserialize(Reader`1& reader, LatestVersion instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, LatestVersion value);
    public sealed virtual LatestVersion ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
public class OrleansCodeGen.Orleans.Versions.Selector.Codec_MinimumVersion : object {
    private Type _codecFieldType;
    public void Serialize(Writer`1& writer, MinimumVersion instance);
    public void Deserialize(Reader`1& reader, MinimumVersion instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, MinimumVersion value);
    public sealed virtual MinimumVersion ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "8.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class OrleansCodeGen.OrleansCoreAbstractions.Metadata_OrleansCoreAbstractions : TypeManifestProviderBase {
    protected virtual void ConfigureInner(TypeManifestOptions config);
}
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
