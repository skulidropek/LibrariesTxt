[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Orleans.Configuration.MemoryGrainStorageOptions : object {
    public static int NumStorageGrainsDefaultValue;
    [CompilerGeneratedAttribute]
private int <NumStorageGrains>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InitStage>k__BackingField;
    public static int DEFAULT_INIT_STAGE;
    public int NumStorageGrains { get; public set; }
    public int InitStage { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NumStorageGrains();
    [CompilerGeneratedAttribute]
public void set_NumStorageGrains(int value);
    [CompilerGeneratedAttribute]
public int get_InitStage();
    [CompilerGeneratedAttribute]
public void set_InitStage(int value);
}
public class Orleans.Configuration.MemoryGrainStorageOptionsValidator : object {
    private MemoryGrainStorageOptions options;
    private string name;
    public MemoryGrainStorageOptionsValidator(MemoryGrainStorageOptions options, string name);
    public sealed virtual void ValidateConfiguration();
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Configuration.MemoryGrainStorageOptions")]
internal class Orleans.Configuration.OrleansCodeGenOrleans_Configuration_MemoryGrainStorageOptionsSerializer : object {
    public OrleansCodeGenOrleans_Configuration_MemoryGrainStorageOptionsSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Configuration.MemoryGrainStorageOptionsValidator")]
internal class Orleans.Configuration.OrleansCodeGenOrleans_Configuration_MemoryGrainStorageOptionsValidatorSerializer : object {
    private Func`2<MemoryGrainStorageOptionsValidator, string> getField1;
    private Action`2<MemoryGrainStorageOptionsValidator, string> setField1;
    private Func`2<MemoryGrainStorageOptionsValidator, MemoryGrainStorageOptions> getField0;
    private Action`2<MemoryGrainStorageOptionsValidator, MemoryGrainStorageOptions> setField0;
    public OrleansCodeGenOrleans_Configuration_MemoryGrainStorageOptionsValidatorSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Configuration.SimpleQueueCacheOptions")]
internal class Orleans.Configuration.OrleansCodeGenOrleans_Configuration_SimpleQueueCacheOptionsSerializer : object {
    public OrleansCodeGenOrleans_Configuration_SimpleQueueCacheOptionsSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Configuration.SimpleQueueCacheOptionsValidator")]
internal class Orleans.Configuration.OrleansCodeGenOrleans_Configuration_SimpleQueueCacheOptionsValidatorSerializer : object {
    private Func`2<SimpleQueueCacheOptionsValidator, string> getField1;
    private Action`2<SimpleQueueCacheOptionsValidator, string> setField1;
    private Func`2<SimpleQueueCacheOptionsValidator, SimpleQueueCacheOptions> getField0;
    private Action`2<SimpleQueueCacheOptionsValidator, SimpleQueueCacheOptions> setField0;
    public OrleansCodeGenOrleans_Configuration_SimpleQueueCacheOptionsValidatorSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Configuration.StreamCacheEvictionOptions")]
internal class Orleans.Configuration.OrleansCodeGenOrleans_Configuration_StreamCacheEvictionOptionsSerializer : object {
    public OrleansCodeGenOrleans_Configuration_StreamCacheEvictionOptionsSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Configuration.StreamStatisticOptions")]
internal class Orleans.Configuration.OrleansCodeGenOrleans_Configuration_StreamStatisticOptionsSerializer : object {
    public OrleansCodeGenOrleans_Configuration_StreamStatisticOptionsSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
public class Orleans.Configuration.SimpleQueueCacheOptions : object {
    [CompilerGeneratedAttribute]
private int <CacheSize>k__BackingField;
    public static int DEFAULT_CACHE_SIZE;
    public int CacheSize { get; public set; }
    [CompilerGeneratedAttribute]
public int get_CacheSize();
    [CompilerGeneratedAttribute]
public void set_CacheSize(int value);
}
public class Orleans.Configuration.SimpleQueueCacheOptionsValidator : object {
    private SimpleQueueCacheOptions options;
    private string name;
    private SimpleQueueCacheOptionsValidator(SimpleQueueCacheOptions options, string name);
    public sealed virtual void ValidateConfiguration();
    public static IConfigurationValidator Create(IServiceProvider services, string name);
}
public class Orleans.Configuration.StreamCacheEvictionOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <DataMinTimeInCache>k__BackingField;
    public static TimeSpan DefaultDataMinTimeInCache;
    [CompilerGeneratedAttribute]
private TimeSpan <DataMaxAgeInCache>k__BackingField;
    public static TimeSpan DefaultDataMaxAgeInCache;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <MetadataMinTimeInCache>k__BackingField;
    public static TimeSpan DefaultMetadataMinTimeInCache;
    public TimeSpan DataMinTimeInCache { get; public set; }
    public TimeSpan DataMaxAgeInCache { get; public set; }
    public Nullable`1<TimeSpan> MetadataMinTimeInCache { get; public set; }
    private static StreamCacheEvictionOptions();
    [CompilerGeneratedAttribute]
public TimeSpan get_DataMinTimeInCache();
    [CompilerGeneratedAttribute]
public void set_DataMinTimeInCache(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DataMaxAgeInCache();
    [CompilerGeneratedAttribute]
public void set_DataMaxAgeInCache(TimeSpan value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_MetadataMinTimeInCache();
    [CompilerGeneratedAttribute]
public void set_MetadataMinTimeInCache(Nullable`1<TimeSpan> value);
}
public class Orleans.Configuration.StreamStatisticOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <StatisticMonitorWriteInterval>k__BackingField;
    public static TimeSpan DefaultStatisticMonitorWriteInterval;
    public TimeSpan StatisticMonitorWriteInterval { get; public set; }
    private static StreamStatisticOptions();
    [CompilerGeneratedAttribute]
public TimeSpan get_StatisticMonitorWriteInterval();
    [CompilerGeneratedAttribute]
public void set_StatisticMonitorWriteInterval(TimeSpan value);
}
[ExtensionAttribute]
public static class Orleans.Hosting.ClientBuilderExtensions : object {
    [ExtensionAttribute]
public static IClientBuilder AddMemoryStreams(IClientBuilder builder, string name, Action`1<IClusterClientMemoryStreamConfigurator> configure);
}
public class Orleans.Hosting.ClusterClientMemoryStreamConfigurator`1 : ClusterClientPersistentStreamConfigurator {
    public ClusterClientMemoryStreamConfigurator`1(string name, IClientBuilder builder);
}
public interface Orleans.Hosting.IClusterClientMemoryStreamConfigurator {
}
public interface Orleans.Hosting.IMemoryStreamConfigurator {
}
public interface Orleans.Hosting.ISiloMemoryStreamConfigurator {
}
public interface Orleans.Hosting.ISiloRecoverableStreamConfigurator {
}
[ExtensionAttribute]
public static class Orleans.Hosting.MemoryGrainStorageSiloBuilderExtensions : object {
    [ExtensionAttribute]
public static ISiloHostBuilder AddMemoryGrainStorageAsDefault(ISiloHostBuilder builder, Action`1<MemoryGrainStorageOptions> configureOptions);
    [ExtensionAttribute]
public static ISiloHostBuilder AddMemoryGrainStorage(ISiloHostBuilder builder, string name, Action`1<MemoryGrainStorageOptions> configureOptions);
    [ExtensionAttribute]
public static ISiloHostBuilder AddMemoryGrainStorageAsDefault(ISiloHostBuilder builder, Action`1<OptionsBuilder`1<MemoryGrainStorageOptions>> configureOptions);
    [ExtensionAttribute]
public static ISiloHostBuilder AddMemoryGrainStorage(ISiloHostBuilder builder, string name, Action`1<OptionsBuilder`1<MemoryGrainStorageOptions>> configureOptions);
    [ExtensionAttribute]
public static ISiloBuilder AddMemoryGrainStorageAsDefault(ISiloBuilder builder, Action`1<MemoryGrainStorageOptions> configureOptions);
    [ExtensionAttribute]
public static ISiloBuilder AddMemoryGrainStorage(ISiloBuilder builder, string name, Action`1<MemoryGrainStorageOptions> configureOptions);
    [ExtensionAttribute]
public static ISiloBuilder AddMemoryGrainStorageAsDefault(ISiloBuilder builder, Action`1<OptionsBuilder`1<MemoryGrainStorageOptions>> configureOptions);
    [ExtensionAttribute]
public static ISiloBuilder AddMemoryGrainStorage(ISiloBuilder builder, string name, Action`1<OptionsBuilder`1<MemoryGrainStorageOptions>> configureOptions);
}
[ExtensionAttribute]
public static class Orleans.Hosting.MemoryStreamConfiguratorExtensions : object {
    [ExtensionAttribute]
public static void ConfigurePartitioning(IMemoryStreamConfigurator configurator, int numOfQueues);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Hosting.ClusterClientMemoryStreamConfigurator`1")]
internal class Orleans.Hosting.OrleansCodeGenOrleans_Hosting_ClusterClientMemoryStreamConfiguratorSerializer`1 : object {
    private Action`2<NamedServiceConfigurator, string> setField0;
    public OrleansCodeGenOrleans_Hosting_ClusterClientMemoryStreamConfiguratorSerializer`1(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Hosting.SiloMemoryStreamConfigurator`1")]
internal class Orleans.Hosting.OrleansCodeGenOrleans_Hosting_SiloMemoryStreamConfiguratorSerializer`1 : object {
    private Action`2<NamedServiceConfigurator, string> setField0;
    public OrleansCodeGenOrleans_Hosting_SiloMemoryStreamConfiguratorSerializer`1(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Hosting.SiloRecoverableStreamConfigurator")]
internal class Orleans.Hosting.OrleansCodeGenOrleans_Hosting_SiloRecoverableStreamConfiguratorSerializer : object {
    private Action`2<NamedServiceConfigurator, string> setField0;
    public OrleansCodeGenOrleans_Hosting_SiloRecoverableStreamConfiguratorSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Hosting.SimpleGeneratorOptionsFormatterResolver")]
internal class Orleans.Hosting.OrleansCodeGenOrleans_Hosting_SimpleGeneratorOptionsFormatterResolverSerializer : object {
    private Func`2<SimpleGeneratorOptionsFormatterResolver, IOptionsMonitor`1<SimpleGeneratorOptions>> getField0;
    private Action`2<SimpleGeneratorOptionsFormatterResolver, IOptionsMonitor`1<SimpleGeneratorOptions>> setField0;
    public OrleansCodeGenOrleans_Hosting_SimpleGeneratorOptionsFormatterResolverSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Hosting.SimpleGeneratorOptions")]
internal class Orleans.Hosting.OrleansCodeGenOrleans_Hosting_SimpleGeneratorOptionsSerializer : object {
    public OrleansCodeGenOrleans_Hosting_SimpleGeneratorOptionsSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[ExtensionAttribute]
public static class Orleans.Hosting.SiloBuilderMemoryStreamExtensions : object {
    [ExtensionAttribute]
public static ISiloHostBuilder AddMemoryStreams(ISiloHostBuilder builder, string name, Action`1<ISiloMemoryStreamConfigurator> configure);
    [ExtensionAttribute]
public static ISiloBuilder AddMemoryStreams(ISiloBuilder builder, string name, Action`1<ISiloMemoryStreamConfigurator> configure);
}
public class Orleans.Hosting.SiloMemoryStreamConfigurator`1 : SiloRecoverableStreamConfigurator {
    public SiloMemoryStreamConfigurator`1(string name, Action`1<Action`1<IServiceCollection>> configureServicesDelegate, Action`1<Action`1<IApplicationPartManager>> configureAppPartsDelegate);
}
public class Orleans.Hosting.SiloRecoverableStreamConfigurator : SiloPersistentStreamConfigurator {
    public SiloRecoverableStreamConfigurator(string name, Action`1<Action`1<IServiceCollection>> configureDelegate, Func`3<IServiceProvider, string, IQueueAdapterFactory> adapterFactory);
}
[ExtensionAttribute]
public static class Orleans.Hosting.SiloRecoverableStreamConfiguratorExtensions : object {
    [ExtensionAttribute]
public static void ConfigureStatistics(ISiloRecoverableStreamConfigurator configurator, Action`1<OptionsBuilder`1<StreamStatisticOptions>> configureOptions);
    [ExtensionAttribute]
public static void ConfigureCacheEviction(ISiloRecoverableStreamConfigurator configurator, Action`1<OptionsBuilder`1<StreamCacheEvictionOptions>> configureOptions);
}
public class Orleans.Hosting.SimpleGeneratorOptions : object {
    [CompilerGeneratedAttribute]
private string <StreamNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EventsInStream>k__BackingField;
    public static int DEFAULT_EVENTS_IN_STREAM;
    public string StreamNamespace { get; public set; }
    public Type StreamGeneratorType { get; }
    public int EventsInStream { get; public set; }
    [CompilerGeneratedAttribute]
public string get_StreamNamespace();
    [CompilerGeneratedAttribute]
public void set_StreamNamespace(string value);
    public sealed virtual Type get_StreamGeneratorType();
    [CompilerGeneratedAttribute]
public int get_EventsInStream();
    [CompilerGeneratedAttribute]
public void set_EventsInStream(int value);
}
public class Orleans.Hosting.SimpleGeneratorOptionsFormatterResolver : object {
    private IOptionsMonitor`1<SimpleGeneratorOptions> optionsMonitor;
    public SimpleGeneratorOptionsFormatterResolver(IOptionsMonitor`1<SimpleGeneratorOptions> optionsMonitor);
    public sealed virtual IOptionFormatter`1<SimpleGeneratorOptions> Resolve(string name);
}
public class Orleans.Providers.DefaultMemoryMessageBodySerializer : object {
    private SerializationManager serializationManager;
    public DefaultMemoryMessageBodySerializer(SerializationManager serializationManager);
    public sealed virtual ArraySegment`1<byte> Serialize(MemoryMessageBody body);
    public sealed virtual MemoryMessageBody Deserialize(ArraySegment`1<byte> bodyBytes);
    private sealed virtual override void Orleans.Serialization.IOnDeserialized.OnDeserialized(ISerializerContext context);
}
public interface Orleans.Providers.IMemoryMessageBodySerializer {
    public abstract virtual ArraySegment`1<byte> Serialize(MemoryMessageBody body);
    public abstract virtual MemoryMessageBody Deserialize(ArraySegment`1<byte> bodyBytes);
}
public interface Orleans.Providers.IMemoryStreamQueueGrain {
    public abstract virtual Task Enqueue(MemoryMessageData data);
    public abstract virtual Task`1<List`1<MemoryMessageData>> Dequeue(int maxCount);
}
public class Orleans.Providers.MemoryAdapterFactory`1 : object {
    private StreamCacheEvictionOptions cacheOptions;
    private StreamStatisticOptions statisticOptions;
    private HashRingStreamQueueMapperOptions queueMapperOptions;
    private IGrainFactory grainFactory;
    private ITelemetryProducer telemetryProducer;
    private ILoggerFactory loggerFactory;
    private ILogger logger;
    private TSerializer serializer;
    private IStreamQueueMapper streamQueueMapper;
    private ConcurrentDictionary`2<QueueId, IMemoryStreamQueueGrain> queueGrains;
    private IObjectPool`1<FixedSizeBuffer> bufferPool;
    private BlockPoolMonitorDimensions blockPoolMonitorDimensions;
    private IStreamFailureHandler streamFailureHandler;
    private TimePurgePredicate purgePredicate;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, Task`1<IStreamFailureHandler>> <StreamFailureHandlerFactory>k__BackingField;
    protected Func`3<CacheMonitorDimensions, ITelemetryProducer, ICacheMonitor> CacheMonitorFactory;
    protected Func`3<BlockPoolMonitorDimensions, ITelemetryProducer, IBlockPoolMonitor> BlockPoolMonitorFactory;
    protected Func`3<ReceiverMonitorDimensions, ITelemetryProducer, IQueueAdapterReceiverMonitor> ReceiverMonitorFactory;
    public string Name { get; }
    public bool IsRewindable { get; }
    public StreamProviderDirection Direction { get; }
    protected Func`2<string, Task`1<IStreamFailureHandler>> StreamFailureHandlerFactory { get; protected set; }
    public MemoryAdapterFactory`1(string providerName, StreamCacheEvictionOptions cacheOptions, StreamStatisticOptions statisticOptions, HashRingStreamQueueMapperOptions queueMapperOptions, IServiceProvider serviceProvider, IGrainFactory grainFactory, ITelemetryProducer telemetryProducer, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual bool get_IsRewindable();
    public sealed virtual StreamProviderDirection get_Direction();
    [CompilerGeneratedAttribute]
protected Func`2<string, Task`1<IStreamFailureHandler>> get_StreamFailureHandlerFactory();
    [CompilerGeneratedAttribute]
protected void set_StreamFailureHandlerFactory(Func`2<string, Task`1<IStreamFailureHandler>> value);
    public void Init();
    private void CreateBufferPoolIfNotCreatedYet();
    public sealed virtual Task`1<IQueueAdapter> CreateAdapter();
    public sealed virtual IQueueAdapterCache GetQueueAdapterCache();
    public sealed virtual IStreamQueueMapper GetStreamQueueMapper();
    public sealed virtual IQueueAdapterReceiver CreateReceiver(QueueId queueId);
    [AsyncStateMachineAttribute("Orleans.Providers.MemoryAdapterFactory`1/<QueueMessageBatchAsync>d__35`1")]
public sealed virtual Task QueueMessageBatchAsync(Guid streamGuid, string streamNamespace, IEnumerable`1<T> events, StreamSequenceToken token, Dictionary`2<string, object> requestContext);
    public sealed virtual IQueueCache CreateQueueCache(QueueId queueId);
    public sealed virtual Task`1<IStreamFailureHandler> GetDeliveryFailureHandler(QueueId queueId);
    private Guid GenerateDeterministicGuid(QueueId queueId);
    private IMemoryStreamQueueGrain GetQueueGrain(QueueId queueId);
    public static MemoryAdapterFactory`1<TSerializer> Create(IServiceProvider services, string name);
    [CompilerGeneratedAttribute]
private IMemoryStreamQueueGrain <GetQueueGrain>b__39_0(QueueId id);
}
internal class Orleans.Providers.MemoryAdapterReceiver`1 : object {
    private IMemoryStreamQueueGrain queueGrain;
    private List`1<Task> awaitingTasks;
    private ILogger logger;
    private TSerializer serializer;
    private IQueueAdapterReceiverMonitor receiverMonitor;
    public MemoryAdapterReceiver`1(IMemoryStreamQueueGrain queueGrain, ILogger logger, TSerializer serializer, IQueueAdapterReceiverMonitor receiverMonitor);
    public sealed virtual Task Initialize(TimeSpan timeout);
    [AsyncStateMachineAttribute("Orleans.Providers.MemoryAdapterReceiver`1/<GetQueueMessagesAsync>d__7")]
public sealed virtual Task`1<IList`1<IBatchContainer>> GetQueueMessagesAsync(int maxCount);
    public sealed virtual Task MessagesDeliveredAsync(IList`1<IBatchContainer> messages);
    [AsyncStateMachineAttribute("Orleans.Providers.MemoryAdapterReceiver`1/<Shutdown>d__9")]
public sealed virtual Task Shutdown(TimeSpan timeout);
    [CompilerGeneratedAttribute]
private MemoryBatchContainer`1<TSerializer> <GetQueueMessagesAsync>b__7_0(MemoryMessageData data);
}
internal class Orleans.Providers.MemoryBatchContainer`1 : object {
    private TSerializer serializer;
    private EventSequenceToken realToken;
    [CompilerGeneratedAttribute]
private MemoryMessageData <MessageData>k__BackingField;
    private MemoryMessageBody payload;
    public Guid StreamGuid { get; }
    public string StreamNamespace { get; }
    public StreamSequenceToken SequenceToken { get; }
    public MemoryMessageData MessageData { get; public set; }
    public long SequenceNumber { get; }
    public MemoryBatchContainer`1(MemoryMessageData messageData, TSerializer serializer);
    public sealed virtual Guid get_StreamGuid();
    public sealed virtual string get_StreamNamespace();
    public sealed virtual StreamSequenceToken get_SequenceToken();
    [CompilerGeneratedAttribute]
public MemoryMessageData get_MessageData();
    [CompilerGeneratedAttribute]
public void set_MessageData(MemoryMessageData value);
    public long get_SequenceNumber();
    private MemoryMessageBody Payload();
    public sealed virtual IEnumerable`1<Tuple`2<T, StreamSequenceToken>> GetEvents();
    public sealed virtual bool ImportRequestContext();
    public sealed virtual bool ShouldDeliver(IStreamIdentity stream, object filterData, StreamFilterPredicate shouldReceiveFunc);
    private sealed virtual override void Orleans.Serialization.IOnDeserialized.OnDeserialized(ISerializerContext context);
    [CompilerGeneratedAttribute]
private Tuple`2<T, StreamSequenceToken> <GetEvents>b__17_0(T e, int i);
}
public class Orleans.Providers.MemoryMessageBody : object {
    [CompilerGeneratedAttribute]
private List`1<object> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <RequestContext>k__BackingField;
    public List`1<object> Events { get; }
    public Dictionary`2<string, object> RequestContext { get; }
    public MemoryMessageBody(IEnumerable`1<object> events, Dictionary`2<string, object> contex);
    [CompilerGeneratedAttribute]
public List`1<object> get_Events();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_RequestContext();
}
internal static class Orleans.Providers.MemoryMessageBodySerializerFactory`1 : object {
    private static Lazy`1<ObjectFactory> ObjectFactory;
    private static MemoryMessageBodySerializerFactory`1();
    public static TSerializer GetOrCreateSerializer(IServiceProvider serviceProvider);
}
public class Orleans.Providers.MemoryMessageData : ValueType {
    public Guid StreamGuid;
    public string StreamNamespace;
    public long SequenceNumber;
    public DateTime DequeueTimeUtc;
    public DateTime EnqueueTimeUtc;
    public ArraySegment`1<byte> Payload;
    internal static MemoryMessageData Create(Guid streamGuid, string streamNamespace, ArraySegment`1<byte> arraySegment);
}
public class Orleans.Providers.MemoryPooledCache`1 : object {
    private IObjectPool`1<FixedSizeBuffer> bufferPool;
    private TSerializer serializer;
    private IEvictionStrategy evictionStrategy;
    private PooledQueueCache cache;
    private FixedSizeBuffer currentBuffer;
    public MemoryPooledCache`1(IObjectPool`1<FixedSizeBuffer> bufferPool, TimePurgePredicate purgePredicate, ILogger logger, TSerializer serializer, ICacheMonitor cacheMonitor, Nullable`1<TimeSpan> monitorWriteInterval);
    private CachedMessage QueueMessageToCachedMessage(MemoryMessageData queueMessage, DateTime dequeueTimeUtc);
    private ArraySegment`1<byte> SerializeMessageIntoPooledSegment(MemoryMessageData queueMessage);
    private StreamPosition GetStreamPosition(MemoryMessageData queueMessage);
    public sealed virtual int GetMaxAddCount();
    public sealed virtual void AddToCache(IList`1<IBatchContainer> messages);
    public sealed virtual bool TryPurgeFromCache(IList`1& purgedItems);
    public sealed virtual IQueueCacheCursor GetCacheCursor(IStreamIdentity streamIdentity, StreamSequenceToken token);
    public sealed virtual bool IsUnderPressure();
    public sealed virtual IBatchContainer GetBatchContainer(CachedMessage& cachedMessage);
    public sealed virtual StreamSequenceToken GetSequenceToken(CachedMessage& cachedMessage);
}
public class Orleans.Providers.MemoryStreamQueueGrain : Grain {
    private Queue`1<MemoryMessageData> eventQueue;
    private long sequenceNumber;
    private int maxEventCount;
    public sealed virtual Task Enqueue(MemoryMessageData data);
    public sealed virtual Task`1<List`1<MemoryMessageData>> Dequeue(int maxCount);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[MethodInvokerAttribute("Orleans.Providers.IMemoryStreamQueueGrain", "1158152105")]
[ExcludeFromCodeCoverageAttribute]
internal class Orleans.Providers.OrleansCodeGenMemoryStreamQueueGrainMethodInvoker : object {
    public int InterfaceId { get; }
    public ushort InterfaceVersion { get; }
    [AsyncStateMachineAttribute("Orleans.Providers.OrleansCodeGenMemoryStreamQueueGrainMethodInvoker/<Invoke>d__0")]
public sealed virtual Task`1<object> Invoke(IAddressable grain, InvokeMethodRequest request);
    public sealed virtual int get_InterfaceId();
    public sealed virtual ushort get_InterfaceVersion();
    [CompilerGeneratedAttribute]
internal static void <Invoke>g__ThrowInterfaceNotImplemented|0_0(int i);
    [CompilerGeneratedAttribute]
internal static void <Invoke>g__ThrowMethodNotImplemented|0_1(int i, int m);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[GrainReferenceAttribute("Orleans.Providers.IMemoryStreamQueueGrain")]
internal class Orleans.Providers.OrleansCodeGenMemoryStreamQueueGrainReference : GrainReference {
    public int InterfaceId { get; }
    public ushort InterfaceVersion { get; }
    public string InterfaceName { get; }
    private OrleansCodeGenMemoryStreamQueueGrainReference(GrainReference other);
    private OrleansCodeGenMemoryStreamQueueGrainReference(GrainReference other, InvokeMethodOptions invokeMethodOptions);
    private OrleansCodeGenMemoryStreamQueueGrainReference(SerializationInfo info, StreamingContext context);
    public virtual int get_InterfaceId();
    public virtual ushort get_InterfaceVersion();
    public virtual string get_InterfaceName();
    public virtual bool IsCompatible(int interfaceId);
    public virtual string GetMethodName(int interfaceId, int methodId);
    private sealed virtual override Task global::Orleans.Providers.IMemoryStreamQueueGrain.Enqueue(MemoryMessageData data0);
    private sealed virtual override Task`1<List`1<MemoryMessageData>> global::Orleans.Providers.IMemoryStreamQueueGrain.Dequeue(int maxCount0);
    [CompilerGeneratedAttribute]
internal static void <GetMethodName>g__ThrowInterfaceNotImplemented|10_0(int i);
    [CompilerGeneratedAttribute]
internal static void <GetMethodName>g__ThrowMethodNotImplemented|10_1(int i, int m);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.DefaultMemoryMessageBodySerializer")]
internal class Orleans.Providers.OrleansCodeGenOrleans_Providers_DefaultMemoryMessageBodySerializerSerializer : object {
    public OrleansCodeGenOrleans_Providers_DefaultMemoryMessageBodySerializerSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.MemoryAdapterFactory`1")]
internal class Orleans.Providers.OrleansCodeGenOrleans_Providers_MemoryAdapterFactorySerializer`1 : object {
    private Action`2<MemoryAdapterFactory`1<TSerializer>, string> setField14;
    private Func`2<MemoryAdapterFactory`1<TSerializer>, BlockPoolMonitorDimensions> getField11;
    private Action`2<MemoryAdapterFactory`1<TSerializer>, BlockPoolMonitorDimensions> setField11;
    private Func`2<MemoryAdapterFactory`1<TSerializer>, IObjectPool`1<FixedSizeBuffer>> getField10;
    private Action`2<MemoryAdapterFactory`1<TSerializer>, IObjectPool`1<FixedSizeBuffer>> setField10;
    private Func`2<MemoryAdapterFactory`1<TSerializer>, StreamCacheEvictionOptions> getField0;
    private Action`2<MemoryAdapterFactory`1<TSerializer>, StreamCacheEvictionOptions> setField0;
    private Func`2<MemoryAdapterFactory`1<TSerializer>, IGrainFactory> getField3;
    private Action`2<MemoryAdapterFactory`1<TSerializer>, IGrainFactory> setField3;
    private Func`2<MemoryAdapterFactory`1<TSerializer>, ILogger> getField6;
    private Action`2<MemoryAdapterFactory`1<TSerializer>, ILogger> setField6;
    private Func`2<MemoryAdapterFactory`1<TSerializer>, ILoggerFactory> getField5;
    private Action`2<MemoryAdapterFactory`1<TSerializer>, ILoggerFactory> setField5;
    private Func`2<MemoryAdapterFactory`1<TSerializer>, TimePurgePredicate> getField13;
    private Action`2<MemoryAdapterFactory`1<TSerializer>, TimePurgePredicate> setField13;
    private Func`2<MemoryAdapterFactory`1<TSerializer>, ConcurrentDictionary`2<QueueId, IMemoryStreamQueueGrain>> getField9;
    private Action`2<MemoryAdapterFactory`1<TSerializer>, ConcurrentDictionary`2<QueueId, IMemoryStreamQueueGrain>> setField9;
    private Func`2<MemoryAdapterFactory`1<TSerializer>, HashRingStreamQueueMapperOptions> getField2;
    private Action`2<MemoryAdapterFactory`1<TSerializer>, HashRingStreamQueueMapperOptions> setField2;
    private Func`2<MemoryAdapterFactory`1<TSerializer>, TSerializer> getField7;
    private Action`2<MemoryAdapterFactory`1<TSerializer>, TSerializer> setField7;
    private Func`2<MemoryAdapterFactory`1<TSerializer>, StreamStatisticOptions> getField1;
    private Action`2<MemoryAdapterFactory`1<TSerializer>, StreamStatisticOptions> setField1;
    private Func`2<MemoryAdapterFactory`1<TSerializer>, IStreamFailureHandler> getField12;
    private Action`2<MemoryAdapterFactory`1<TSerializer>, IStreamFailureHandler> setField12;
    private Func`2<MemoryAdapterFactory`1<TSerializer>, IStreamQueueMapper> getField8;
    private Action`2<MemoryAdapterFactory`1<TSerializer>, IStreamQueueMapper> setField8;
    private Func`2<MemoryAdapterFactory`1<TSerializer>, ITelemetryProducer> getField4;
    private Action`2<MemoryAdapterFactory`1<TSerializer>, ITelemetryProducer> setField4;
    public OrleansCodeGenOrleans_Providers_MemoryAdapterFactorySerializer`1(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.MemoryAdapterReceiver`1")]
internal class Orleans.Providers.OrleansCodeGenOrleans_Providers_MemoryAdapterReceiverSerializer`1 : object {
    private Func`2<MemoryAdapterReceiver`1<TSerializer>, List`1<Task>> getField1;
    private Action`2<MemoryAdapterReceiver`1<TSerializer>, List`1<Task>> setField1;
    private Func`2<MemoryAdapterReceiver`1<TSerializer>, ILogger> getField2;
    private Action`2<MemoryAdapterReceiver`1<TSerializer>, ILogger> setField2;
    private Func`2<MemoryAdapterReceiver`1<TSerializer>, IMemoryStreamQueueGrain> getField0;
    private Action`2<MemoryAdapterReceiver`1<TSerializer>, IMemoryStreamQueueGrain> setField0;
    private Func`2<MemoryAdapterReceiver`1<TSerializer>, IQueueAdapterReceiverMonitor> getField4;
    private Action`2<MemoryAdapterReceiver`1<TSerializer>, IQueueAdapterReceiverMonitor> setField4;
    private Func`2<MemoryAdapterReceiver`1<TSerializer>, TSerializer> getField3;
    private Action`2<MemoryAdapterReceiver`1<TSerializer>, TSerializer> setField3;
    public OrleansCodeGenOrleans_Providers_MemoryAdapterReceiverSerializer`1(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.MemoryBatchContainer`1")]
internal class Orleans.Providers.OrleansCodeGenOrleans_Providers_MemoryBatchContainerSerializer`1 : object {
    private Func`2<MemoryBatchContainer`1<TSerializer>, EventSequenceToken> getField0;
    private Action`2<MemoryBatchContainer`1<TSerializer>, EventSequenceToken> setField0;
    public OrleansCodeGenOrleans_Providers_MemoryBatchContainerSerializer`1(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.MemoryMessageBody")]
internal class Orleans.Providers.OrleansCodeGenOrleans_Providers_MemoryMessageBodySerializer : object {
    private Action`2<MemoryMessageBody, List`1<object>> setField0;
    private Action`2<MemoryMessageBody, Dictionary`2<string, object>> setField1;
    public OrleansCodeGenOrleans_Providers_MemoryMessageBodySerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.MemoryMessageData")]
internal class Orleans.Providers.OrleansCodeGenOrleans_Providers_MemoryMessageDataSerializer : object {
    private Func`2<MemoryMessageData, DateTime> getField3;
    private ValueTypeSetter`2<MemoryMessageData, DateTime> setField3;
    private Func`2<MemoryMessageData, DateTime> getField4;
    private ValueTypeSetter`2<MemoryMessageData, DateTime> setField4;
    private Func`2<MemoryMessageData, ArraySegment`1<byte>> getField5;
    private ValueTypeSetter`2<MemoryMessageData, ArraySegment`1<byte>> setField5;
    private Func`2<MemoryMessageData, long> getField2;
    private ValueTypeSetter`2<MemoryMessageData, long> setField2;
    private Func`2<MemoryMessageData, Guid> getField0;
    private ValueTypeSetter`2<MemoryMessageData, Guid> setField0;
    private Func`2<MemoryMessageData, string> getField1;
    private ValueTypeSetter`2<MemoryMessageData, string> setField1;
    public OrleansCodeGenOrleans_Providers_MemoryMessageDataSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.MemoryPooledCache`1")]
internal class Orleans.Providers.OrleansCodeGenOrleans_Providers_MemoryPooledCacheSerializer`1 : object {
    private Func`2<MemoryPooledCache`1<TSerializer>, IObjectPool`1<FixedSizeBuffer>> getField0;
    private Action`2<MemoryPooledCache`1<TSerializer>, IObjectPool`1<FixedSizeBuffer>> setField0;
    private Func`2<MemoryPooledCache`1<TSerializer>, PooledQueueCache> getField3;
    private Action`2<MemoryPooledCache`1<TSerializer>, PooledQueueCache> setField3;
    private Func`2<MemoryPooledCache`1<TSerializer>, FixedSizeBuffer> getField4;
    private Action`2<MemoryPooledCache`1<TSerializer>, FixedSizeBuffer> setField4;
    private Func`2<MemoryPooledCache`1<TSerializer>, IEvictionStrategy> getField2;
    private Action`2<MemoryPooledCache`1<TSerializer>, IEvictionStrategy> setField2;
    private Func`2<MemoryPooledCache`1<TSerializer>, TSerializer> getField1;
    private Action`2<MemoryPooledCache`1<TSerializer>, TSerializer> setField1;
    public OrleansCodeGenOrleans_Providers_MemoryPooledCacheSerializer`1(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
internal enum Orleans.Providers.ProviderErrorCode : Enum {
    public int value__;
    public static ProviderErrorCode ProvidersBase;
    public static ProviderErrorCode ShardedStorageProviderBase;
    public static ProviderErrorCode ShardedStorageProvider_ProviderName;
    public static ProviderErrorCode ShardedStorageProvider_HashValueOutOfBounds;
    public static ProviderErrorCode MemoryStreamProviderBase;
    public static ProviderErrorCode MemoryStreamProviderBase_QueueMessageBatchAsync;
    public static ProviderErrorCode MemoryStreamProviderBase_GetQueueMessagesAsync;
}
public class Orleans.Providers.Streams.Common.BlockPoolMonitorDimensions : object {
    [CompilerGeneratedAttribute]
private string <BlockPoolId>k__BackingField;
    public string BlockPoolId { get; public set; }
    public BlockPoolMonitorDimensions(string blockPoolId);
    [CompilerGeneratedAttribute]
public string get_BlockPoolId();
    [CompilerGeneratedAttribute]
public void set_BlockPoolId(string value);
}
internal class Orleans.Providers.Streams.Common.CacheBucket : object {
    [CompilerGeneratedAttribute]
private int <NumCurrentItems>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumCurrentCursors>k__BackingField;
    internal int NumCurrentItems { get; private set; }
    internal int NumCurrentCursors { get; private set; }
    [CompilerGeneratedAttribute]
internal int get_NumCurrentItems();
    [CompilerGeneratedAttribute]
private void set_NumCurrentItems(int value);
    [CompilerGeneratedAttribute]
internal int get_NumCurrentCursors();
    [CompilerGeneratedAttribute]
private void set_NumCurrentCursors(int value);
    internal void UpdateNumItems(int val);
    internal void UpdateNumCursors(int val);
}
public class Orleans.Providers.Streams.Common.CachedMessage : ValueType {
    public Guid StreamGuid;
    public string StreamNamespace;
    public long SequenceNumber;
    public int EventIndex;
    public DateTime EnqueueTimeUtc;
    public DateTime DequeueTimeUtc;
    public ArraySegment`1<byte> Segment;
}
[DefaultMemberAttribute("Item")]
public class Orleans.Providers.Streams.Common.CachedMessageBlock : PooledResource`1<CachedMessageBlock> {
    private static int OneKb;
    private static int DefaultCachedMessagesPerBlock;
    private CachedMessage[] cachedMessages;
    private int blockSize;
    private int writeIndex;
    private int readIndex;
    [CompilerGeneratedAttribute]
private LinkedListNode`1<CachedMessageBlock> <Node>k__BackingField;
    public LinkedListNode`1<CachedMessageBlock> Node { get; private set; }
    public bool HasCapacity { get; }
    public bool IsEmpty { get; }
    public int NewestMessageIndex { get; }
    public int OldestMessageIndex { get; }
    public CachedMessage OldestMessage { get; }
    public CachedMessage NewestMessage { get; }
    public int ItemCount { get; }
    public CachedMessage Item { get; }
    public CachedMessageBlock(int blockSize);
    [CompilerGeneratedAttribute]
public LinkedListNode`1<CachedMessageBlock> get_Node();
    [CompilerGeneratedAttribute]
private void set_Node(LinkedListNode`1<CachedMessageBlock> value);
    public bool get_HasCapacity();
    public bool get_IsEmpty();
    public int get_NewestMessageIndex();
    public int get_OldestMessageIndex();
    public CachedMessage get_OldestMessage();
    public CachedMessage get_NewestMessage();
    public int get_ItemCount();
    public bool Remove();
    public void Add(CachedMessage message);
    public CachedMessage get_Item(int index);
    public StreamSequenceToken GetSequenceToken(int index, ICacheDataAdapter dataAdapter);
    public StreamSequenceToken GetNewestSequenceToken(ICacheDataAdapter dataAdapter);
    public StreamSequenceToken GetOldestSequenceToken(ICacheDataAdapter dataAdapter);
    public int GetIndexOfFirstMessageLessThanOrEqualTo(StreamSequenceToken token);
    public bool TryFindFirstMessage(IStreamIdentity streamIdentity, ICacheDataAdapter dataAdapter, Int32& index);
    public bool TryFindNextMessage(int start, IStreamIdentity streamIdentity, ICacheDataAdapter dataAdapter, Int32& index);
    public virtual void OnResetState();
}
[ExtensionAttribute]
public static class Orleans.Providers.Streams.Common.CachedMessageExtensions : object {
    [ExtensionAttribute]
public static int Compare(CachedMessage& cachedMessage, StreamSequenceToken token);
    [ExtensionAttribute]
public static bool CompareStreamId(CachedMessage& cachedMessage, IStreamIdentity streamIdentity);
}
internal class Orleans.Providers.Streams.Common.CachedMessagePool : object {
    private IObjectPool`1<CachedMessageBlock> messagePool;
    private CachedMessageBlock currentMessageBlock;
    public CachedMessagePool(ICacheDataAdapter cacheDataAdapter);
    public CachedMessageBlock AllocateMessage(CachedMessage message);
}
public class Orleans.Providers.Streams.Common.CacheMonitorDimensions : ReceiverMonitorDimensions {
    [CompilerGeneratedAttribute]
private string <BlockPoolId>k__BackingField;
    public string BlockPoolId { get; public set; }
    public CacheMonitorDimensions(string queueId, string blockPoolId);
    [CompilerGeneratedAttribute]
public string get_BlockPoolId();
    [CompilerGeneratedAttribute]
public void set_BlockPoolId(string value);
}
public class Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy : object {
    private ILogger logger;
    private TimePurgePredicate timePurge;
    protected Queue`1<FixedSizeBuffer> inUseBuffers;
    private FixedSizeBuffer currentBuffer;
    private ICacheMonitor cacheMonitor;
    private PeriodicAction periodicMonitoring;
    private long cacheSizeInByte;
    [CompilerGeneratedAttribute]
private IPurgeObservable <PurgeObservable>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<Nullable`1<CachedMessage>, Nullable`1<CachedMessage>> <OnPurged>k__BackingField;
    private IPurgeObservable PurgeObservable { get; public set; }
    public Action`2<Nullable`1<CachedMessage>, Nullable`1<CachedMessage>> OnPurged { get; public set; }
    public ChronologicalEvictionStrategy(ILogger logger, TimePurgePredicate timePurage, ICacheMonitor cacheMonitor, Nullable`1<TimeSpan> monitorWriteInterval);
    private void ReportCacheSize();
    [CompilerGeneratedAttribute]
private IPurgeObservable get_PurgeObservable();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PurgeObservable(IPurgeObservable value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`2<Nullable`1<CachedMessage>, Nullable`1<CachedMessage>> get_OnPurged();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnPurged(Action`2<Nullable`1<CachedMessage>, Nullable`1<CachedMessage>> value);
    public sealed virtual void OnBlockAllocated(FixedSizeBuffer newBlock);
    public sealed virtual void PerformPurge(DateTime nowUtc);
    private void PerformPurgeInternal(DateTime nowUtc);
    private void FreePurgedBuffers(Nullable`1<CachedMessage> lastMessagePurged, Nullable`1<CachedMessage> oldestMessageInCache);
    private bool ShouldPurge(CachedMessage& cachedMessage, CachedMessage& newestCachedMessage, DateTime nowUtc);
    private static void ReportPurge(ILogger logger, IPurgeObservable purgeObservable, int itemsPurged);
}
public class Orleans.Providers.Streams.Common.DefaultBlockPoolMonitor : object {
    protected ITelemetryProducer TelemetryProducer;
    protected Dictionary`2<string, string> LogProperties;
    public DefaultBlockPoolMonitor(ITelemetryProducer telemetryProducer);
    public DefaultBlockPoolMonitor(BlockPoolMonitorDimensions dimensions, ITelemetryProducer telemetryProducer);
    public sealed virtual void Report(long totalMemoryInByte, long availableMemoryInByte, long claimedMemoryInByte);
    public sealed virtual void TrackMemoryReleased(long releasedMemoryInByte);
    public sealed virtual void TrackMemoryAllocated(long allocatedMemoryInByte);
}
public class Orleans.Providers.Streams.Common.DefaultCacheMonitor : object {
    protected ITelemetryProducer TelemetryProducer;
    protected Dictionary`2<string, string> LogProperties;
    public DefaultCacheMonitor(ITelemetryProducer telemetryProducer);
    public DefaultCacheMonitor(CacheMonitorDimensions dimensions, ITelemetryProducer telemetryProducer);
    public sealed virtual void TrackCachePressureMonitorStatusChange(string pressureMonitorType, bool underPressure, Nullable`1<double> cachePressureContributionCount, Nullable`1<double> currentPressure, Nullable`1<double> flowControlThreshold);
    public sealed virtual void ReportCacheSize(long totalCacheSizeInByte);
    public sealed virtual void ReportMessageStatistics(Nullable`1<DateTime> oldestMessageEnqueueTimeUtc, Nullable`1<DateTime> oldestMessageDequeueTimeUtc, Nullable`1<DateTime> newestMessageEnqueueTimeUtc, long totalMessageCount);
    public sealed virtual void TrackMemoryAllocated(int memoryInByte);
    public sealed virtual void TrackMemoryReleased(int memoryInByte);
    public sealed virtual void TrackMessagesAdded(long mesageAdded);
    public sealed virtual void TrackMessagesPurged(long messagePurged);
}
public class Orleans.Providers.Streams.Common.DefaultQueueAdapterReceiverMonitor : object {
    protected ITelemetryProducer TelemetryProducer;
    protected Dictionary`2<string, string> LogProperties;
    public DefaultQueueAdapterReceiverMonitor(ITelemetryProducer telemetryProducer);
    public DefaultQueueAdapterReceiverMonitor(ReceiverMonitorDimensions dimensions, ITelemetryProducer telemetryProducer);
    public sealed virtual void TrackInitialization(bool success, TimeSpan callTime, Exception exception);
    public sealed virtual void TrackRead(bool success, TimeSpan callTime, Exception exception);
    public sealed virtual void TrackMessagesReceived(long count, Nullable`1<DateTime> oldestMessageEnqueueTimeUtc, Nullable`1<DateTime> newestMessageEnqueueTimeUtc);
    public sealed virtual void TrackShutdown(bool success, TimeSpan callTime, Exception exception);
}
public class Orleans.Providers.Streams.Common.EventSequenceToken : StreamSequenceToken {
    [CompilerGeneratedAttribute]
private long <SequenceNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EventIndex>k__BackingField;
    public long SequenceNumber { get; protected set; }
    public int EventIndex { get; protected set; }
    public EventSequenceToken(long seqNumber);
    public EventSequenceToken(long seqNumber, int eventInd);
    [CompilerGeneratedAttribute]
public virtual long get_SequenceNumber();
    [CompilerGeneratedAttribute]
protected virtual void set_SequenceNumber(long value);
    [CompilerGeneratedAttribute]
public virtual int get_EventIndex();
    [CompilerGeneratedAttribute]
protected virtual void set_EventIndex(int value);
    public EventSequenceToken CreateSequenceTokenForEvent(int eventInd);
    public virtual bool Equals(object obj);
    public virtual bool Equals(StreamSequenceToken other);
    public virtual int CompareTo(StreamSequenceToken other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Orleans.Providers.Streams.Common.EventSequenceTokenV2 : StreamSequenceToken {
    [CompilerGeneratedAttribute]
private long <SequenceNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EventIndex>k__BackingField;
    public long SequenceNumber { get; protected set; }
    public int EventIndex { get; protected set; }
    public EventSequenceTokenV2(long seqNumber);
    public EventSequenceTokenV2(long seqNumber, int eventInd);
    [CompilerGeneratedAttribute]
public virtual long get_SequenceNumber();
    [CompilerGeneratedAttribute]
protected virtual void set_SequenceNumber(long value);
    [CompilerGeneratedAttribute]
public virtual int get_EventIndex();
    [CompilerGeneratedAttribute]
protected virtual void set_EventIndex(int value);
    public EventSequenceTokenV2 CreateSequenceTokenForEvent(int eventInd);
    public virtual bool Equals(object obj);
    public virtual bool Equals(StreamSequenceToken other);
    public virtual int CompareTo(StreamSequenceToken other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Orleans.Providers.Streams.Common.FixedSizeBuffer : PooledResource`1<FixedSizeBuffer> {
    private Byte[] buffer;
    private int count;
    public int SizeInByte;
    public object Id { get; }
    public FixedSizeBuffer(int blockSizeInByte);
    public object get_Id();
    public bool TryGetSegment(int size, ArraySegment`1& value);
    public virtual void OnResetState();
}
public interface Orleans.Providers.Streams.Common.IBlockPoolMonitor {
    public abstract virtual void TrackMemoryAllocated(long allocatedMemoryInByte);
    public abstract virtual void TrackMemoryReleased(long releasedMemoryInByte);
    public abstract virtual void Report(long totalSizeInByte, long availableMemoryInByte, long claimedMemoryInByte);
}
public interface Orleans.Providers.Streams.Common.ICacheDataAdapter {
    public abstract virtual IBatchContainer GetBatchContainer(CachedMessage& cachedMessage);
    public abstract virtual StreamSequenceToken GetSequenceToken(CachedMessage& cachedMessage);
}
public interface Orleans.Providers.Streams.Common.ICacheMonitor {
    public abstract virtual void TrackCachePressureMonitorStatusChange(string pressureMonitorType, bool underPressure, Nullable`1<double> cachePressureContributionCount, Nullable`1<double> currentPressure, Nullable`1<double> flowControlThreshold);
    public abstract virtual void TrackMessagesAdded(long messageAdded);
    public abstract virtual void TrackMessagesPurged(long messagePurged);
    public abstract virtual void TrackMemoryAllocated(int memoryInByte);
    public abstract virtual void TrackMemoryReleased(int memoryInByte);
    public abstract virtual void ReportMessageStatistics(Nullable`1<DateTime> oldestMessageEnqueueTimeUtc, Nullable`1<DateTime> oldestMessageDequeueTimeUtc, Nullable`1<DateTime> newestMessageEnqueueTimeUtc, long totalMessageCount);
    public abstract virtual void ReportCacheSize(long totalCacheSizeInByte);
}
public interface Orleans.Providers.Streams.Common.IEvictionStrategy {
    unknown IPurgeObservable PurgeObservable {public set; }
    public Action`2<Nullable`1<CachedMessage>, Nullable`1<CachedMessage>> OnPurged { get; public set; }
    public abstract virtual void set_PurgeObservable(IPurgeObservable value);
    public abstract virtual Action`2<Nullable`1<CachedMessage>, Nullable`1<CachedMessage>> get_OnPurged();
    public abstract virtual void set_OnPurged(Action`2<Nullable`1<CachedMessage>, Nullable`1<CachedMessage>> value);
    public abstract virtual void PerformPurge(DateTime utcNow);
    public abstract virtual void OnBlockAllocated(FixedSizeBuffer newBlock);
}
public interface Orleans.Providers.Streams.Common.IObjectPool`1 {
    public abstract virtual T Allocate();
    public abstract virtual void Free(T resource);
}
public interface Orleans.Providers.Streams.Common.IObjectPoolMonitor {
    public abstract virtual void TrackObjectAllocated();
    public abstract virtual void TrackObjectReleased();
    public abstract virtual void Report(long totalObjects, long availableObjects, long claimedObjects);
}
public interface Orleans.Providers.Streams.Common.IPurgeObservable {
    public Nullable`1<CachedMessage> Newest { get; }
    public Nullable`1<CachedMessage> Oldest { get; }
    public int ItemCount { get; }
    public bool IsEmpty { get; }
    public abstract virtual void RemoveOldestMessage();
    public abstract virtual Nullable`1<CachedMessage> get_Newest();
    public abstract virtual Nullable`1<CachedMessage> get_Oldest();
    public abstract virtual int get_ItemCount();
    public abstract virtual bool get_IsEmpty();
}
public interface Orleans.Providers.Streams.Common.IQueueAdapterReceiverMonitor {
    public abstract virtual void TrackInitialization(bool success, TimeSpan callTime, Exception exception);
    public abstract virtual void TrackRead(bool success, TimeSpan callTime, Exception exception);
    public abstract virtual void TrackMessagesReceived(long count, Nullable`1<DateTime> oldestMessageEnqueueTimeUtc, Nullable`1<DateTime> newestMessageEnqueueTimeUtc);
    public abstract virtual void TrackShutdown(bool success, TimeSpan callTime, Exception exception);
}
public class Orleans.Providers.Streams.Common.ObjectPool`1 : object {
    private static int DefaultPoolCapacity;
    private ConcurrentStack`1<T> pool;
    private Func`1<T> factoryFunc;
    private long totalObjects;
    private IObjectPoolMonitor monitor;
    private PeriodicAction periodicMonitoring;
    public ObjectPool`1(Func`1<T> factoryFunc, IObjectPoolMonitor monitor, Nullable`1<TimeSpan> monitorWriteInterval);
    public virtual T Allocate();
    public virtual void Free(T resource);
    private void ReportObjectPoolStatistics();
}
public class Orleans.Providers.Streams.Common.ObjectPoolMonitorBridge : object {
    private IBlockPoolMonitor blockPoolMonitor;
    private int blockSizeInByte;
    public ObjectPoolMonitorBridge(IBlockPoolMonitor blockPoolMonitor, int blockSizeInByte);
    public sealed virtual void TrackObjectAllocated();
    public sealed virtual void TrackObjectReleased();
    public sealed virtual void Report(long totalObjects, long availableObjects, long claimedObjects);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.BlockPoolMonitorDimensions")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_BlockPoolMonitorDimensionsSerializer : object {
    public OrleansCodeGenOrleans_Providers_Streams_Common_BlockPoolMonitorDimensionsSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.CacheBucket")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_CacheBucketSerializer : object {
    private Action`2<CacheBucket, int> setField1;
    private Action`2<CacheBucket, int> setField0;
    public OrleansCodeGenOrleans_Providers_Streams_Common_CacheBucketSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.CachedMessageBlock")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_CachedMessageBlockSerializer : object {
    private Action`2<CachedMessageBlock, LinkedListNode`1<CachedMessageBlock>> setField4;
    private Func`2<CachedMessageBlock, int> getField1;
    private Action`2<CachedMessageBlock, int> setField1;
    private Func`2<CachedMessageBlock, CachedMessage[]> getField0;
    private Action`2<CachedMessageBlock, CachedMessage[]> setField0;
    private Func`2<PooledResource`1<CachedMessageBlock>, IObjectPool`1<CachedMessageBlock>> getField5;
    private Action`2<PooledResource`1<CachedMessageBlock>, IObjectPool`1<CachedMessageBlock>> setField5;
    private Func`2<CachedMessageBlock, int> getField3;
    private Action`2<CachedMessageBlock, int> setField3;
    private Func`2<CachedMessageBlock, int> getField2;
    private Action`2<CachedMessageBlock, int> setField2;
    public OrleansCodeGenOrleans_Providers_Streams_Common_CachedMessageBlockSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.CachedMessagePool")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_CachedMessagePoolSerializer : object {
    private Func`2<CachedMessagePool, CachedMessageBlock> getField1;
    private Action`2<CachedMessagePool, CachedMessageBlock> setField1;
    private Func`2<CachedMessagePool, IObjectPool`1<CachedMessageBlock>> getField0;
    private Action`2<CachedMessagePool, IObjectPool`1<CachedMessageBlock>> setField0;
    public OrleansCodeGenOrleans_Providers_Streams_Common_CachedMessagePoolSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.CachedMessage")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_CachedMessageSerializer : object {
    private Func`2<CachedMessage, DateTime> getField5;
    private ValueTypeSetter`2<CachedMessage, DateTime> setField5;
    private Func`2<CachedMessage, DateTime> getField4;
    private ValueTypeSetter`2<CachedMessage, DateTime> setField4;
    private Func`2<CachedMessage, int> getField3;
    private ValueTypeSetter`2<CachedMessage, int> setField3;
    private Func`2<CachedMessage, ArraySegment`1<byte>> getField6;
    private ValueTypeSetter`2<CachedMessage, ArraySegment`1<byte>> setField6;
    private Func`2<CachedMessage, long> getField2;
    private ValueTypeSetter`2<CachedMessage, long> setField2;
    private Func`2<CachedMessage, Guid> getField0;
    private ValueTypeSetter`2<CachedMessage, Guid> setField0;
    private Func`2<CachedMessage, string> getField1;
    private ValueTypeSetter`2<CachedMessage, string> setField1;
    public OrleansCodeGenOrleans_Providers_Streams_Common_CachedMessageSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.CacheMonitorDimensions")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_CacheMonitorDimensionsSerializer : object {
    public OrleansCodeGenOrleans_Providers_Streams_Common_CacheMonitorDimensionsSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.ChronologicalEvictionStrategy")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_ChronologicalEvictionStrategySerializer : object {
    private Func`2<ChronologicalEvictionStrategy, IPurgeObservable> getField7;
    private Func`2<ChronologicalEvictionStrategy, ICacheMonitor> getField4;
    private Action`2<ChronologicalEvictionStrategy, ICacheMonitor> setField4;
    private Func`2<ChronologicalEvictionStrategy, long> getField6;
    private Action`2<ChronologicalEvictionStrategy, long> setField6;
    private Func`2<ChronologicalEvictionStrategy, FixedSizeBuffer> getField3;
    private Action`2<ChronologicalEvictionStrategy, FixedSizeBuffer> setField3;
    private Func`2<ChronologicalEvictionStrategy, Queue`1<FixedSizeBuffer>> getField2;
    private Action`2<ChronologicalEvictionStrategy, Queue`1<FixedSizeBuffer>> setField2;
    private Func`2<ChronologicalEvictionStrategy, ILogger> getField0;
    private Action`2<ChronologicalEvictionStrategy, ILogger> setField0;
    private Func`2<ChronologicalEvictionStrategy, PeriodicAction> getField5;
    private Action`2<ChronologicalEvictionStrategy, PeriodicAction> setField5;
    private Func`2<ChronologicalEvictionStrategy, TimePurgePredicate> getField1;
    private Action`2<ChronologicalEvictionStrategy, TimePurgePredicate> setField1;
    public OrleansCodeGenOrleans_Providers_Streams_Common_ChronologicalEvictionStrategySerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.DefaultBlockPoolMonitor")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_DefaultBlockPoolMonitorSerializer : object {
    private Func`2<DefaultBlockPoolMonitor, Dictionary`2<string, string>> getField1;
    private Action`2<DefaultBlockPoolMonitor, Dictionary`2<string, string>> setField1;
    private Func`2<DefaultBlockPoolMonitor, ITelemetryProducer> getField0;
    private Action`2<DefaultBlockPoolMonitor, ITelemetryProducer> setField0;
    public OrleansCodeGenOrleans_Providers_Streams_Common_DefaultBlockPoolMonitorSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.DefaultCacheMonitor")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_DefaultCacheMonitorSerializer : object {
    private Func`2<DefaultCacheMonitor, Dictionary`2<string, string>> getField1;
    private Action`2<DefaultCacheMonitor, Dictionary`2<string, string>> setField1;
    private Func`2<DefaultCacheMonitor, ITelemetryProducer> getField0;
    private Action`2<DefaultCacheMonitor, ITelemetryProducer> setField0;
    public OrleansCodeGenOrleans_Providers_Streams_Common_DefaultCacheMonitorSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.DefaultQueueAdapterReceiverMonitor")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_DefaultQueueAdapterReceiverMonitorSerializer : object {
    private Func`2<DefaultQueueAdapterReceiverMonitor, Dictionary`2<string, string>> getField1;
    private Action`2<DefaultQueueAdapterReceiverMonitor, Dictionary`2<string, string>> setField1;
    private Func`2<DefaultQueueAdapterReceiverMonitor, ITelemetryProducer> getField0;
    private Action`2<DefaultQueueAdapterReceiverMonitor, ITelemetryProducer> setField0;
    public OrleansCodeGenOrleans_Providers_Streams_Common_DefaultQueueAdapterReceiverMonitorSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.EventSequenceToken")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_EventSequenceTokenSerializer : object {
    private Action`2<EventSequenceToken, int> setField1;
    private Action`2<EventSequenceToken, long> setField0;
    public OrleansCodeGenOrleans_Providers_Streams_Common_EventSequenceTokenSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.EventSequenceTokenV2")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_EventSequenceTokenV2Serializer : object {
    private Action`2<EventSequenceTokenV2, int> setField1;
    private Action`2<EventSequenceTokenV2, long> setField0;
    public OrleansCodeGenOrleans_Providers_Streams_Common_EventSequenceTokenV2Serializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.FixedSizeBuffer")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_FixedSizeBufferSerializer : object {
    private Func`2<FixedSizeBuffer, int> getField2;
    private Action`2<FixedSizeBuffer, int> setField2;
    private Func`2<FixedSizeBuffer, Byte[]> getField0;
    private Action`2<FixedSizeBuffer, Byte[]> setField0;
    private Func`2<FixedSizeBuffer, int> getField1;
    private Action`2<FixedSizeBuffer, int> setField1;
    private Func`2<PooledResource`1<FixedSizeBuffer>, IObjectPool`1<FixedSizeBuffer>> getField3;
    private Action`2<PooledResource`1<FixedSizeBuffer>, IObjectPool`1<FixedSizeBuffer>> setField3;
    public OrleansCodeGenOrleans_Providers_Streams_Common_FixedSizeBufferSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.ObjectPoolMonitorBridge")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_ObjectPoolMonitorBridgeSerializer : object {
    private Func`2<ObjectPoolMonitorBridge, IBlockPoolMonitor> getField0;
    private Action`2<ObjectPoolMonitorBridge, IBlockPoolMonitor> setField0;
    private Func`2<ObjectPoolMonitorBridge, int> getField1;
    private Action`2<ObjectPoolMonitorBridge, int> setField1;
    public OrleansCodeGenOrleans_Providers_Streams_Common_ObjectPoolMonitorBridgeSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.ObjectPool`1")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_ObjectPoolSerializer`1 : object {
    private Func`2<ObjectPool`1<T>, IObjectPoolMonitor> getField2;
    private Action`2<ObjectPool`1<T>, IObjectPoolMonitor> setField2;
    private Func`2<ObjectPool`1<T>, PeriodicAction> getField3;
    private Action`2<ObjectPool`1<T>, PeriodicAction> setField3;
    private Func`2<ObjectPool`1<T>, ConcurrentStack`1<T>> getField0;
    private Action`2<ObjectPool`1<T>, ConcurrentStack`1<T>> setField0;
    private Func`2<ObjectPool`1<T>, long> getField1;
    private Action`2<ObjectPool`1<T>, long> setField1;
    public OrleansCodeGenOrleans_Providers_Streams_Common_ObjectPoolSerializer`1(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.PooledQueueCache")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_PooledQueueCacheSerializer : object {
    private Action`2<PooledQueueCache, int> setField9;
    private Func`2<PooledQueueCache, ICacheDataAdapter> getField2;
    private Action`2<PooledQueueCache, ICacheDataAdapter> setField2;
    private Func`2<PooledQueueCache, ICacheMonitor> getField4;
    private Action`2<PooledQueueCache, ICacheMonitor> setField4;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<PooledQueueCache, Dictionary`2<IStreamIdentity, ValueTuple`2<DateTime, StreamSequenceToken>>> getField8;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<PooledQueueCache, Dictionary`2<IStreamIdentity, ValueTuple`2<DateTime, StreamSequenceToken>>> setField8;
    private Func`2<PooledQueueCache, ILogger> getField3;
    private Action`2<PooledQueueCache, ILogger> setField3;
    private Func`2<PooledQueueCache, LinkedList`1<CachedMessageBlock>> getField0;
    private Action`2<PooledQueueCache, LinkedList`1<CachedMessageBlock>> setField0;
    private Func`2<PooledQueueCache, PeriodicAction> getField7;
    private Action`2<PooledQueueCache, PeriodicAction> setField7;
    private Func`2<PooledQueueCache, PeriodicAction> getField6;
    private Action`2<PooledQueueCache, PeriodicAction> setField6;
    private Func`2<PooledQueueCache, CachedMessagePool> getField1;
    private Action`2<PooledQueueCache, CachedMessagePool> setField1;
    private Func`2<PooledQueueCache, TimeSpan> getField5;
    private Action`2<PooledQueueCache, TimeSpan> setField5;
    public OrleansCodeGenOrleans_Providers_Streams_Common_PooledQueueCacheSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.ReceiverMonitorDimensions")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_ReceiverMonitorDimensionsSerializer : object {
    public OrleansCodeGenOrleans_Providers_Streams_Common_ReceiverMonitorDimensionsSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.SimpleQueueAdapterCache")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_SimpleQueueAdapterCacheSerializer : object {
    private Func`2<SimpleQueueAdapterCache, int> getField0;
    private Action`2<SimpleQueueAdapterCache, int> setField0;
    private Func`2<SimpleQueueAdapterCache, ILoggerFactory> getField2;
    private Action`2<SimpleQueueAdapterCache, ILoggerFactory> setField2;
    private Func`2<SimpleQueueAdapterCache, string> getField1;
    private Action`2<SimpleQueueAdapterCache, string> setField1;
    public OrleansCodeGenOrleans_Providers_Streams_Common_SimpleQueueAdapterCacheSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.SimpleQueueCacheCursor")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_SimpleQueueCacheCursorSerializer : object {
    private Action`2<SimpleQueueCacheCursor, LinkedListNode`1<SimpleQueueCacheItem>> setField4;
    private Action`2<SimpleQueueCacheCursor, StreamSequenceToken> setField5;
    private Func`2<SimpleQueueCacheCursor, SimpleQueueCache> getField1;
    private Action`2<SimpleQueueCacheCursor, SimpleQueueCache> setField1;
    private Func`2<SimpleQueueCacheCursor, IBatchContainer> getField3;
    private Action`2<SimpleQueueCacheCursor, IBatchContainer> setField3;
    private Func`2<SimpleQueueCacheCursor, ILogger> getField2;
    private Action`2<SimpleQueueCacheCursor, ILogger> setField2;
    private Func`2<SimpleQueueCacheCursor, IStreamIdentity> getField0;
    private Action`2<SimpleQueueCacheCursor, IStreamIdentity> setField0;
    public OrleansCodeGenOrleans_Providers_Streams_Common_SimpleQueueCacheCursorSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.SimpleQueueCacheItem")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_SimpleQueueCacheItemSerializer : object {
    private Func`2<SimpleQueueCacheItem, IBatchContainer> getField0;
    private Action`2<SimpleQueueCacheItem, IBatchContainer> setField0;
    private Func`2<SimpleQueueCacheItem, CacheBucket> getField3;
    private Action`2<SimpleQueueCacheItem, CacheBucket> setField3;
    private Func`2<SimpleQueueCacheItem, bool> getField1;
    private Action`2<SimpleQueueCacheItem, bool> setField1;
    private Func`2<SimpleQueueCacheItem, StreamSequenceToken> getField2;
    private Action`2<SimpleQueueCacheItem, StreamSequenceToken> setField2;
    public OrleansCodeGenOrleans_Providers_Streams_Common_SimpleQueueCacheItemSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.SimpleQueueCache")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_SimpleQueueCacheSerializer : object {
    private Func`2<SimpleQueueCache, int> getField4;
    private Action`2<SimpleQueueCache, int> setField4;
    private Func`2<SimpleQueueCache, List`1<CacheBucket>> getField3;
    private Action`2<SimpleQueueCache, List`1<CacheBucket>> setField3;
    private Func`2<SimpleQueueCache, LinkedList`1<SimpleQueueCacheItem>> getField0;
    private Action`2<SimpleQueueCache, LinkedList`1<SimpleQueueCacheItem>> setField0;
    private Func`2<SimpleQueueCache, ILogger> getField2;
    private Action`2<SimpleQueueCache, ILogger> setField2;
    private Func`2<SimpleQueueCache, int> getField1;
    private Action`2<SimpleQueueCache, int> setField1;
    public OrleansCodeGenOrleans_Providers_Streams_Common_SimpleQueueCacheSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Common.TimePurgePredicate")]
internal class Orleans.Providers.Streams.Common.OrleansCodeGenOrleans_Providers_Streams_Common_TimePurgePredicateSerializer : object {
    private Func`2<TimePurgePredicate, TimeSpan> getField1;
    private Action`2<TimePurgePredicate, TimeSpan> setField1;
    private Func`2<TimePurgePredicate, TimeSpan> getField0;
    private Action`2<TimePurgePredicate, TimeSpan> setField0;
    public OrleansCodeGenOrleans_Providers_Streams_Common_TimePurgePredicateSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
public class Orleans.Providers.Streams.Common.PooledQueueCache : object {
    private LinkedList`1<CachedMessageBlock> messageBlocks;
    private CachedMessagePool pool;
    private ICacheDataAdapter cacheDataAdapter;
    private ILogger logger;
    private ICacheMonitor cacheMonitor;
    private TimeSpan purgeMetadataInterval;
    private PeriodicAction periodicMonitoring;
    private PeriodicAction periodicMetadaPurging;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<IStreamIdentity, ValueTuple`2<DateTime, StreamSequenceToken>> lastPurgedToken;
    [CompilerGeneratedAttribute]
private int <ItemCount>k__BackingField;
    public Nullable`1<CachedMessage> Newest { get; }
    public Nullable`1<CachedMessage> Oldest { get; }
    public int ItemCount { get; private set; }
    public bool IsEmpty { get; }
    public PooledQueueCache(ICacheDataAdapter cacheDataAdapter, ILogger logger, ICacheMonitor cacheMonitor, Nullable`1<TimeSpan> cacheMonitorWriteInterval, Nullable`1<TimeSpan> purgeMetadataInterval);
    public sealed virtual Nullable`1<CachedMessage> get_Newest();
    public sealed virtual Nullable`1<CachedMessage> get_Oldest();
    [CompilerGeneratedAttribute]
public sealed virtual int get_ItemCount();
    [CompilerGeneratedAttribute]
private void set_ItemCount(int value);
    public sealed virtual bool get_IsEmpty();
    public object GetCursor(IStreamIdentity streamIdentity, StreamSequenceToken sequenceToken);
    private void ReportCacheMessageStatistics();
    private void PurgeMetadata();
    private void TrackAndPurgeMetadata(CachedMessage messageToRemove);
    private void SetCursor(Cursor cursor, StreamSequenceToken sequenceToken);
    public bool TryGetNextMessage(object cursorObj, IBatchContainer& message);
    public void Add(List`1<CachedMessage> messages, DateTime dequeueTime);
    private void Add(CachedMessage message);
    public sealed virtual void RemoveOldestMessage();
}
public abstract class Orleans.Providers.Streams.Common.PooledResource`1 : object {
    private IObjectPool`1<T> pool;
    unknown IObjectPool`1<T> Pool {public set; }
    public void set_Pool(IObjectPool`1<T> value);
    public virtual void SignalPurge();
    public sealed virtual void Dispose();
    public virtual void OnResetState();
}
public class Orleans.Providers.Streams.Common.ReceiverMonitorDimensions : object {
    [CompilerGeneratedAttribute]
private string <QueueId>k__BackingField;
    public string QueueId { get; public set; }
    public ReceiverMonitorDimensions(string queueId);
    [CompilerGeneratedAttribute]
public string get_QueueId();
    [CompilerGeneratedAttribute]
public void set_QueueId(string value);
}
public static class Orleans.Providers.Streams.Common.SegmentBuilder : object {
    public static int CalculateAppendSize(Byte[] bytes);
    public static int CalculateAppendSize(ReadOnlyMemory`1<byte> memory);
    public static int CalculateAppendSize(ArraySegment`1<byte> segment);
    public static int CalculateAppendSize(string str);
    public static void Append(ArraySegment`1<byte> segment, Int32& writerOffset, ReadOnlyMemory`1<byte> bytes);
    public static void Append(ArraySegment`1<byte> segment, Int32& writerOffset, Byte[] bytes);
    public static void Append(ArraySegment`1<byte> segment, Int32& writerOffset, ArraySegment`1<byte> append);
    public static void Append(ArraySegment`1<byte> segment, Int32& writerOffset, string str);
    public static ArraySegment`1<byte> ReadNextBytes(ArraySegment`1<byte> segment, Int32& readerOffset);
    public static string ReadNextString(ArraySegment`1<byte> segment, Int32& readerOffset);
}
public class Orleans.Providers.Streams.Common.SimpleQueueAdapterCache : object {
    public static string CacheSizePropertyName;
    private int cacheSize;
    private string providerName;
    private ILoggerFactory loggerFactory;
    public SimpleQueueAdapterCache(SimpleQueueCacheOptions options, string providerName, ILoggerFactory loggerFactory);
    public sealed virtual IQueueCache CreateQueueCache(QueueId queueId);
    public static int ParseSize(IProviderConfiguration config, int defaultSize);
}
public class Orleans.Providers.Streams.Common.SimpleQueueCache : object {
    private LinkedList`1<SimpleQueueCacheItem> cachedMessages;
    private int maxCacheSize;
    private ILogger logger;
    private List`1<CacheBucket> cacheCursorHistogram;
    private static int NUM_CACHE_HISTOGRAM_BUCKETS;
    private int CACHE_HISTOGRAM_MAX_BUCKET_SIZE;
    public int Size { get; }
    public SimpleQueueCache(int cacheSize, ILogger logger);
    public int get_Size();
    public sealed virtual int GetMaxAddCount();
    public virtual bool IsUnderPressure();
    public virtual bool TryPurgeFromCache(IList`1& purgedItems);
    private List`1<IBatchContainer> DrainBucket(CacheBucket bucket);
    public virtual void AddToCache(IList`1<IBatchContainer> msgs);
    public virtual IQueueCacheCursor GetCacheCursor(IStreamIdentity streamIdentity, StreamSequenceToken token);
    internal void InitializeCursor(SimpleQueueCacheCursor cursor, StreamSequenceToken sequenceToken);
    internal void RefreshCursor(SimpleQueueCacheCursor cursor, StreamSequenceToken sequenceToken);
    internal bool TryGetNextMessage(SimpleQueueCacheCursor cursor, IBatchContainer& batch);
    private void AdvanceCursor(SimpleQueueCacheCursor cursor, LinkedListNode`1<SimpleQueueCacheItem> item);
    internal void SetCursor(SimpleQueueCacheCursor cursor, LinkedListNode`1<SimpleQueueCacheItem> item);
    internal void UnsetCursor(SimpleQueueCacheCursor cursor, StreamSequenceToken token);
    private void Add(IBatchContainer batch, StreamSequenceToken sequenceToken);
    internal static void Log(ILogger logger, string format, Object[] args);
}
public class Orleans.Providers.Streams.Common.SimpleQueueCacheCursor : object {
    private IStreamIdentity streamIdentity;
    private SimpleQueueCache cache;
    private ILogger logger;
    private IBatchContainer current;
    [CompilerGeneratedAttribute]
private LinkedListNode`1<SimpleQueueCacheItem> <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private StreamSequenceToken <SequenceToken>k__BackingField;
    internal LinkedListNode`1<SimpleQueueCacheItem> Element { get; private set; }
    internal StreamSequenceToken SequenceToken { get; private set; }
    internal bool IsSet { get; }
    public SimpleQueueCacheCursor(SimpleQueueCache cache, IStreamIdentity streamIdentity, ILogger logger);
    [CompilerGeneratedAttribute]
internal LinkedListNode`1<SimpleQueueCacheItem> get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(LinkedListNode`1<SimpleQueueCacheItem> value);
    [CompilerGeneratedAttribute]
internal StreamSequenceToken get_SequenceToken();
    [CompilerGeneratedAttribute]
private void set_SequenceToken(StreamSequenceToken value);
    internal bool get_IsSet();
    internal void Set(LinkedListNode`1<SimpleQueueCacheItem> item);
    internal void UnSet(StreamSequenceToken token);
    public virtual IBatchContainer GetCurrent(Exception& exception);
    public virtual bool MoveNext();
    public virtual void Refresh(StreamSequenceToken sequenceToken);
    public sealed virtual void RecordDeliveryFailure();
    private bool IsInStream(IBatchContainer batchContainer);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual string ToString();
}
internal class Orleans.Providers.Streams.Common.SimpleQueueCacheItem : object {
    internal IBatchContainer Batch;
    internal bool DeliveryFailure;
    internal StreamSequenceToken SequenceToken;
    internal CacheBucket CacheBucket;
}
public class Orleans.Providers.Streams.Common.TimePurgePredicate : object {
    private TimeSpan minTimeInCache;
    private TimeSpan maxRelativeMessageAge;
    public TimePurgePredicate(TimeSpan minTimeInCache, TimeSpan maxRelativeMessageAge);
    public virtual bool ShouldPurgFromTime(TimeSpan timeInCache, TimeSpan relativeAge);
}
public class Orleans.Providers.Streams.Generator.GeneratedBatchContainer : object {
    [CompilerGeneratedAttribute]
private Guid <StreamGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StreamNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private EventSequenceTokenV2 <RealToken>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EnqueueTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Payload>k__BackingField;
    public Guid StreamGuid { get; }
    public string StreamNamespace { get; }
    public StreamSequenceToken SequenceToken { get; }
    public EventSequenceTokenV2 RealToken { get; }
    public DateTime EnqueueTimeUtc { get; }
    public object Payload { get; }
    public GeneratedBatchContainer(Guid streamGuid, string streamNamespace, object payload, EventSequenceTokenV2 token);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_StreamGuid();
    [CompilerGeneratedAttribute]
public sealed virtual string get_StreamNamespace();
    public sealed virtual StreamSequenceToken get_SequenceToken();
    [CompilerGeneratedAttribute]
public EventSequenceTokenV2 get_RealToken();
    [CompilerGeneratedAttribute]
public DateTime get_EnqueueTimeUtc();
    [CompilerGeneratedAttribute]
public object get_Payload();
    public sealed virtual IEnumerable`1<Tuple`2<T, StreamSequenceToken>> GetEvents();
    public sealed virtual bool ImportRequestContext();
    public sealed virtual bool ShouldDeliver(IStreamIdentity stream, object filterData, StreamFilterPredicate shouldReceiveFunc);
}
public class Orleans.Providers.Streams.Generator.GeneratedEvent : object {
    [CompilerGeneratedAttribute]
private GeneratedEventType <EventType>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <Payload>k__BackingField;
    public GeneratedEventType EventType { get; public set; }
    public Int32[] Payload { get; public set; }
    [CompilerGeneratedAttribute]
public GeneratedEventType get_EventType();
    [CompilerGeneratedAttribute]
public void set_EventType(GeneratedEventType value);
    [CompilerGeneratedAttribute]
public Int32[] get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(Int32[] value);
}
public class Orleans.Providers.Streams.Generator.GeneratorAdapterFactory : object {
    private HashRingStreamQueueMapperOptions queueMapperOptions;
    private StreamStatisticOptions statisticOptions;
    private IServiceProvider serviceProvider;
    private SerializationManager serializationManager;
    private ITelemetryProducer telemetryProducer;
    private ILoggerFactory loggerFactory;
    private ILogger`1<GeneratorAdapterFactory> logger;
    private IStreamGeneratorConfig generatorConfig;
    private IStreamQueueMapper streamQueueMapper;
    private IStreamFailureHandler streamFailureHandler;
    private ConcurrentDictionary`2<QueueId, Receiver> receivers;
    private IObjectPool`1<FixedSizeBuffer> bufferPool;
    private BlockPoolMonitorDimensions blockPoolMonitorDimensions;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    protected Func`3<CacheMonitorDimensions, ITelemetryProducer, ICacheMonitor> CacheMonitorFactory;
    protected Func`3<BlockPoolMonitorDimensions, ITelemetryProducer, IBlockPoolMonitor> BlockPoolMonitorFactory;
    protected Func`3<ReceiverMonitorDimensions, ITelemetryProducer, IQueueAdapterReceiverMonitor> ReceiverMonitorFactory;
    public bool IsRewindable { get; }
    public StreamProviderDirection Direction { get; }
    public string Name { get; }
    public GeneratorAdapterFactory(string providerName, HashRingStreamQueueMapperOptions queueMapperOptions, StreamStatisticOptions statisticOptions, IServiceProvider serviceProvider, SerializationManager serializationManager, ITelemetryProducer telemetryProducer, ILoggerFactory loggerFactory);
    public sealed virtual bool get_IsRewindable();
    public sealed virtual StreamProviderDirection get_Direction();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public void Init();
    private void CreateBufferPoolIfNotCreatedYet();
    public sealed virtual Task`1<IQueueAdapter> CreateAdapter();
    public sealed virtual IQueueAdapterCache GetQueueAdapterCache();
    public sealed virtual IStreamQueueMapper GetStreamQueueMapper();
    public sealed virtual Task`1<IStreamFailureHandler> GetDeliveryFailureHandler(QueueId queueId);
    public sealed virtual Task QueueMessageBatchAsync(Guid streamGuid, string streamNamespace, IEnumerable`1<T> events, StreamSequenceToken token, Dictionary`2<string, object> requestContext);
    public sealed virtual IQueueAdapterReceiver CreateReceiver(QueueId queueId);
    public sealed virtual Task`1<object> ExecuteCommand(int command, object arg);
    private void SetGeneratorOnReceiver(Receiver receiver);
    public sealed virtual IQueueCache CreateQueueCache(QueueId queueId);
    public static GeneratorAdapterFactory Create(IServiceProvider services, string name);
}
public class Orleans.Providers.Streams.Generator.GeneratorPooledCache : object {
    private IObjectPool`1<FixedSizeBuffer> bufferPool;
    private SerializationManager serializationManager;
    private IEvictionStrategy evictionStrategy;
    private PooledQueueCache cache;
    private FixedSizeBuffer currentBuffer;
    public GeneratorPooledCache(IObjectPool`1<FixedSizeBuffer> bufferPool, ILogger logger, SerializationManager serializationManager, ICacheMonitor cacheMonitor, Nullable`1<TimeSpan> monitorWriteInterval);
    public sealed virtual IBatchContainer GetBatchContainer(CachedMessage& cachedMessage);
    public sealed virtual StreamSequenceToken GetSequenceToken(CachedMessage& cachedMessage);
    private CachedMessage QueueMessageToCachedMessage(GeneratedBatchContainer queueMessage, DateTime dequeueTimeUtc);
    private ArraySegment`1<byte> SerializeMessageIntoPooledSegment(GeneratedBatchContainer queueMessage);
    private StreamPosition GetStreamPosition(GeneratedBatchContainer queueMessage);
    public sealed virtual int GetMaxAddCount();
    public sealed virtual void AddToCache(IList`1<IBatchContainer> messages);
    public sealed virtual bool TryPurgeFromCache(IList`1& purgedItems);
    public sealed virtual IQueueCacheCursor GetCacheCursor(IStreamIdentity streamIdentity, StreamSequenceToken token);
    public sealed virtual bool IsUnderPressure();
}
public interface Orleans.Providers.Streams.Generator.IStreamGenerator {
    public abstract virtual bool TryReadEvents(DateTime utcNow, int maxCount, List`1& events);
    public abstract virtual void Configure(IServiceProvider serviceProvider, IStreamGeneratorConfig generatorConfig);
}
public interface Orleans.Providers.Streams.Generator.IStreamGeneratorConfig {
    public Type StreamGeneratorType { get; }
    public abstract virtual Type get_StreamGeneratorType();
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Generator.GeneratedBatchContainer")]
internal class Orleans.Providers.Streams.Generator.OrleansCodeGenOrleans_Providers_Streams_Generator_GeneratedBatchContainerSerializer : object {
    private Action`2<GeneratedBatchContainer, DateTime> setField3;
    private Action`2<GeneratedBatchContainer, object> setField4;
    private Action`2<GeneratedBatchContainer, EventSequenceTokenV2> setField2;
    private Action`2<GeneratedBatchContainer, Guid> setField0;
    private Action`2<GeneratedBatchContainer, string> setField1;
    public OrleansCodeGenOrleans_Providers_Streams_Generator_GeneratedBatchContainerSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Generator.GeneratedEvent")]
internal class Orleans.Providers.Streams.Generator.OrleansCodeGenOrleans_Providers_Streams_Generator_GeneratedEventSerializer : object {
    public OrleansCodeGenOrleans_Providers_Streams_Generator_GeneratedEventSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Generator.GeneratorPooledCache")]
internal class Orleans.Providers.Streams.Generator.OrleansCodeGenOrleans_Providers_Streams_Generator_GeneratorPooledCacheSerializer : object {
    private Func`2<GeneratorPooledCache, IObjectPool`1<FixedSizeBuffer>> getField0;
    private Action`2<GeneratorPooledCache, IObjectPool`1<FixedSizeBuffer>> setField0;
    private Func`2<GeneratorPooledCache, PooledQueueCache> getField3;
    private Action`2<GeneratorPooledCache, PooledQueueCache> setField3;
    private Func`2<GeneratorPooledCache, FixedSizeBuffer> getField4;
    private Action`2<GeneratorPooledCache, FixedSizeBuffer> setField4;
    private Func`2<GeneratorPooledCache, IEvictionStrategy> getField2;
    private Action`2<GeneratorPooledCache, IEvictionStrategy> setField2;
    private Func`2<GeneratorPooledCache, SerializationManager> getField1;
    private Action`2<GeneratorPooledCache, SerializationManager> setField1;
    public OrleansCodeGenOrleans_Providers_Streams_Generator_GeneratorPooledCacheSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Providers.Streams.Generator.SimpleGenerator")]
internal class Orleans.Providers.Streams.Generator.OrleansCodeGenOrleans_Providers_Streams_Generator_SimpleGeneratorSerializer : object {
    private Func`2<SimpleGenerator, SimpleGeneratorOptions> getField0;
    private Action`2<SimpleGenerator, SimpleGeneratorOptions> setField0;
    private Func`2<SimpleGenerator, int> getField2;
    private Action`2<SimpleGenerator, int> setField2;
    private Func`2<SimpleGenerator, Guid> getField1;
    private Action`2<SimpleGenerator, Guid> setField1;
    public OrleansCodeGenOrleans_Providers_Streams_Generator_SimpleGeneratorSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
internal class Orleans.Providers.Streams.Generator.SimpleGenerator : object {
    private SimpleGeneratorOptions options;
    private Guid streamGuid;
    private int sequenceId;
    public sealed virtual void Configure(IServiceProvider serviceProvider, IStreamGeneratorConfig generatorConfig);
    public sealed virtual bool TryReadEvents(DateTime utcNow, int maxCount, List`1& events);
    private bool TryGenerateBatch(GeneratedBatchContainer& batch);
}
public enum Orleans.Providers.Streams.Generator.StreamGeneratorCommand : Enum {
    public int value__;
    public static StreamGeneratorCommand Configure;
}
internal class Orleans.Storage.HierarchicalKeyStore : object {
    [CompilerGeneratedAttribute]
private string <Etag>k__BackingField;
    private static char KEY_VALUE_PAIR_SEPERATOR;
    private static char KEY_VALUE_SEPERATOR;
    private long lastETagCounter;
    private Dictionary`2<string, IDictionary`2<string, object>> dataTable;
    private int numKeyLayers;
    private object lockable;
    public string Etag { get; private set; }
    public HierarchicalKeyStore(int keyLayers);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Etag();
    [CompilerGeneratedAttribute]
private void set_Etag(string value);
    public sealed virtual string WriteRow(IList`1<Tuple`2<string, string>> keys, IDictionary`2<string, object> data, string eTag);
    public sealed virtual IDictionary`2<string, object> ReadRow(IList`1<Tuple`2<string, string>> keys);
    public sealed virtual IList`1<IDictionary`2<string, object>> ReadMultiRow(IList`1<Tuple`2<string, string>> keys);
    public sealed virtual bool DeleteRow(IList`1<Tuple`2<string, string>> keys, string eTag);
    public sealed virtual void Clear();
    public string DumpData(bool printDump);
    private IDictionary`2<string, object> GetDataStore(IList`1<Tuple`2<string, string>> keys);
    private IList`1<IDictionary`2<string, object>> FindDataStores(IList`1<Tuple`2<string, string>> keys);
    internal static string MakeStoreKey(IEnumerable`1<Tuple`2<string, string>> keys);
    private string NewEtag();
}
internal class Orleans.Storage.Internal.MemoryStorageEtagMismatchException : Exception {
    [CompilerGeneratedAttribute]
private string <StoredEtag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReceivedEtag>k__BackingField;
    public string StoredEtag { get; private set; }
    public string ReceivedEtag { get; private set; }
    public MemoryStorageEtagMismatchException(string storedEtag, string receivedEtag);
    protected MemoryStorageEtagMismatchException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_StoredEtag();
    [CompilerGeneratedAttribute]
private void set_StoredEtag(string value);
    [CompilerGeneratedAttribute]
public string get_ReceivedEtag();
    [CompilerGeneratedAttribute]
private void set_ReceivedEtag(string value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public InconsistentStateException AsInconsistentStateException();
}
[DebuggerDisplayAttribute("MemoryStore:{name}")]
public class Orleans.Storage.MemoryGrainStorage : object {
    private static string STATE_STORE_NAME;
    private Lazy`1[] storageGrains;
    private ILogger logger;
    private string name;
    public MemoryGrainStorage(string name, MemoryGrainStorageOptions options, ILogger`1<MemoryGrainStorage> logger, IGrainFactory grainFactory);
    [AsyncStateMachineAttribute("Orleans.Storage.MemoryGrainStorage/<ReadStateAsync>d__5")]
public virtual Task ReadStateAsync(string grainType, GrainReference grainReference, IGrainState grainState);
    [AsyncStateMachineAttribute("Orleans.Storage.MemoryGrainStorage/<WriteStateAsync>d__6")]
public virtual Task WriteStateAsync(string grainType, GrainReference grainReference, IGrainState grainState);
    [AsyncStateMachineAttribute("Orleans.Storage.MemoryGrainStorage/<ClearStateAsync>d__7")]
public virtual Task ClearStateAsync(string grainType, GrainReference grainReference, IGrainState grainState);
    private static Tuple`2[] MakeKeys(string grainType, GrainReference grain);
    private IMemoryStorageGrain GetStorageGrain(string id);
    public sealed virtual void Dispose();
}
public static class Orleans.Storage.MemoryGrainStorageFactory : object {
    public static IGrainStorage Create(IServiceProvider services, string name);
}
[DebuggerDisplayAttribute("MemoryStore:{Name},WithLatency:{latency}")]
public class Orleans.Storage.MemoryGrainStorageWithLatency : object {
    private static int NUM_STORE_GRAINS;
    private MemoryGrainStorage baseGranStorage;
    private MemoryStorageWithLatencyOptions options;
    public MemoryGrainStorageWithLatency(string name, MemoryStorageWithLatencyOptions options, ILoggerFactory loggerFactory, IGrainFactory grainFactory);
    [AsyncStateMachineAttribute("Orleans.Storage.MemoryGrainStorageWithLatency/<ReadStateAsync>d__4")]
public sealed virtual Task ReadStateAsync(string grainType, GrainReference grainReference, IGrainState grainState);
    [AsyncStateMachineAttribute("Orleans.Storage.MemoryGrainStorageWithLatency/<WriteStateAsync>d__5")]
public sealed virtual Task WriteStateAsync(string grainType, GrainReference grainReference, IGrainState grainState);
    [AsyncStateMachineAttribute("Orleans.Storage.MemoryGrainStorageWithLatency/<ClearStateAsync>d__6")]
public sealed virtual Task ClearStateAsync(string grainType, GrainReference grainReference, IGrainState grainState);
    [AsyncStateMachineAttribute("Orleans.Storage.MemoryGrainStorageWithLatency/<MakeFixedLatencyCall>d__7")]
private Task MakeFixedLatencyCall(Func`1<Task> action);
}
internal class Orleans.Storage.MemoryStorageGrain : Grain {
    private Dictionary`2<ValueTuple`2<string, string>, IGrainState> grainStore;
    private ILogger logger;
    private IGrainState deleted;
    public virtual Task OnActivateAsync();
    public virtual Task OnDeactivateAsync();
    public sealed virtual Task`1<IGrainState> ReadStateAsync(string stateStore, string grainStoreKey);
    public sealed virtual Task`1<string> WriteStateAsync(string stateStore, string grainStoreKey, IGrainState grainState);
    public sealed virtual Task DeleteStateAsync(string grainType, string grainId, string etag);
    private static string NewEtag();
    private void ValidateEtag(string currentETag, string receivedEtag, string grainStoreKey, string operation);
}
public class Orleans.Storage.MemoryStorageWithLatencyOptions : MemoryGrainStorageOptions {
    public static TimeSpan DefaultLatency;
    [CompilerGeneratedAttribute]
private TimeSpan <Latency>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MockCallsOnly>k__BackingField;
    public TimeSpan Latency { get; public set; }
    public bool MockCallsOnly { get; public set; }
    private static MemoryStorageWithLatencyOptions();
    [CompilerGeneratedAttribute]
public TimeSpan get_Latency();
    [CompilerGeneratedAttribute]
public void set_Latency(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_MockCallsOnly();
    [CompilerGeneratedAttribute]
public void set_MockCallsOnly(bool value);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Storage.HierarchicalKeyStore")]
internal class Orleans.Storage.OrleansCodeGenOrleans_Storage_HierarchicalKeyStoreSerializer : object {
    private Action`2<HierarchicalKeyStore, string> setField0;
    private Func`2<HierarchicalKeyStore, long> getField1;
    private Action`2<HierarchicalKeyStore, long> setField1;
    private Func`2<HierarchicalKeyStore, object> getField3;
    private Action`2<HierarchicalKeyStore, object> setField3;
    private Func`2<HierarchicalKeyStore, int> getField2;
    private Action`2<HierarchicalKeyStore, int> setField2;
    public OrleansCodeGenOrleans_Storage_HierarchicalKeyStoreSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Storage.MemoryGrainStorage")]
internal class Orleans.Storage.OrleansCodeGenOrleans_Storage_MemoryGrainStorageSerializer : object {
    private Func`2<MemoryGrainStorage, ILogger> getField1;
    private Action`2<MemoryGrainStorage, ILogger> setField1;
    private Func`2<MemoryGrainStorage, string> getField2;
    private Action`2<MemoryGrainStorage, string> setField2;
    private Func`2<MemoryGrainStorage, Lazy`1[]> getField0;
    private Action`2<MemoryGrainStorage, Lazy`1[]> setField0;
    public OrleansCodeGenOrleans_Storage_MemoryGrainStorageSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Storage.MemoryGrainStorageWithLatency")]
internal class Orleans.Storage.OrleansCodeGenOrleans_Storage_MemoryGrainStorageWithLatencySerializer : object {
    private Func`2<MemoryGrainStorageWithLatency, MemoryGrainStorage> getField0;
    private Action`2<MemoryGrainStorageWithLatency, MemoryGrainStorage> setField0;
    private Func`2<MemoryGrainStorageWithLatency, MemoryStorageWithLatencyOptions> getField1;
    private Action`2<MemoryGrainStorageWithLatency, MemoryStorageWithLatencyOptions> setField1;
    public OrleansCodeGenOrleans_Storage_MemoryGrainStorageWithLatencySerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Storage.MemoryStorageWithLatencyOptions")]
internal class Orleans.Storage.OrleansCodeGenOrleans_Storage_MemoryStorageWithLatencyOptionsSerializer : object {
    public OrleansCodeGenOrleans_Storage_MemoryStorageWithLatencyOptionsSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Storage.StorageProviderUtils")]
internal class Orleans.Storage.OrleansCodeGenOrleans_Storage_StorageProviderUtilsSerializer : object {
    public OrleansCodeGenOrleans_Storage_StorageProviderUtilsSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
public class Orleans.Storage.StorageProviderUtils : object {
    public static string ANY_ETAG;
    public static int PositiveHash(GrainReference grainReference, int hashRange);
    public static int PositiveHash(int hash, int hashRange);
    public static string PrintKeys(IEnumerable`1<Tuple`2<string, string>> keys);
    public static string PrintData(object data);
    public static string PrintResults(IList`1<IDictionary`2<string, object>> results);
    public static string PrintOneWrite(IEnumerable`1<Tuple`2<string, string>> keys, object data, string eTag);
}
public class Orleans.Streams.LoadShedQueueFlowController : object {
    private LoadSheddingOptions options;
    private double loadSheddingLimit;
    private FloatValueStatistic cpuStatistic;
    private LoadShedQueueFlowController(int loadSheddingLimit, LoadSheddingOptions options);
    public static IQueueFlowController CreateAsPercentOfLoadSheddingLimit(LoadSheddingOptions options, int percentOfSiloSheddingLimit);
    public static IQueueFlowController CreateAsPercentageOfCPU(int loadSheddingLimit, LoadSheddingOptions options);
    public sealed virtual int GetMaxAddCount();
    private float GetCpuUsage();
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
[ExcludeFromCodeCoverageAttribute]
[SerializerAttribute("Orleans.Streams.LoadShedQueueFlowController")]
internal class Orleans.Streams.OrleansCodeGenOrleans_Streams_LoadShedQueueFlowControllerSerializer : object {
    private Func`2<LoadShedQueueFlowController, FloatValueStatistic> getField2;
    private Action`2<LoadShedQueueFlowController, FloatValueStatistic> setField2;
    private Func`2<LoadShedQueueFlowController, double> getField1;
    private Action`2<LoadShedQueueFlowController, double> setField1;
    private Func`2<LoadShedQueueFlowController, LoadSheddingOptions> getField0;
    private Action`2<LoadShedQueueFlowController, LoadSheddingOptions> setField0;
    public OrleansCodeGenOrleans_Streams_LoadShedQueueFlowControllerSerializer(IFieldUtils fieldUtils);
    [CopierMethodAttribute]
public object DeepCopier(object original, ICopyContext context);
    [SerializerMethodAttribute]
public void Serializer(object untypedInput, ISerializationContext context, Type expected);
    [DeserializerMethodAttribute]
public object Deserializer(Type expected, IDeserializationContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
internal class OrleansGeneratedCode.OrleansCodeGenOrleansProvidersFeaturePopulator : object {
    public sealed virtual void Populate(GrainInterfaceFeature feature);
    public sealed virtual void Populate(GrainClassFeature feature);
    public sealed virtual void Populate(SerializerFeature feature);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
