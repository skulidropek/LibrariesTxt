public class Microsoft.Owin.Security.ActiveDirectory.ActiveDirectoryFederationServicesBearerAuthenticationOptions : AuthenticationOptions {
    [CompilerGeneratedAttribute]
private string <MetadataEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Audience>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Realm>k__BackingField;
    [CompilerGeneratedAttribute]
private IOAuthBearerAuthenticationProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private ICertificateValidator <BackchannelCertificateValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <BackchannelTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <BackchannelHttpHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenValidationParameters <TokenValidationParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private JwtSecurityTokenHandler <TokenHandler>k__BackingField;
    public string MetadataEndpoint { get; public set; }
    [ObsoleteAttribute("Use TokenValidationParameters.ValidAudience", "False")]
public string Audience { get; public set; }
    public string Realm { get; public set; }
    public IOAuthBearerAuthenticationProvider Provider { get; public set; }
    public ICertificateValidator BackchannelCertificateValidator { get; public set; }
    public TimeSpan BackchannelTimeout { get; public set; }
    public HttpMessageHandler BackchannelHttpHandler { get; public set; }
    public TokenValidationParameters TokenValidationParameters { get; public set; }
    public JwtSecurityTokenHandler TokenHandler { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MetadataEndpoint();
    [CompilerGeneratedAttribute]
public void set_MetadataEndpoint(string value);
    [CompilerGeneratedAttribute]
public string get_Audience();
    [CompilerGeneratedAttribute]
public void set_Audience(string value);
    [CompilerGeneratedAttribute]
public string get_Realm();
    [CompilerGeneratedAttribute]
public void set_Realm(string value);
    [CompilerGeneratedAttribute]
public IOAuthBearerAuthenticationProvider get_Provider();
    [CompilerGeneratedAttribute]
public void set_Provider(IOAuthBearerAuthenticationProvider value);
    [CompilerGeneratedAttribute]
public ICertificateValidator get_BackchannelCertificateValidator();
    [CompilerGeneratedAttribute]
public void set_BackchannelCertificateValidator(ICertificateValidator value);
    [CompilerGeneratedAttribute]
public TimeSpan get_BackchannelTimeout();
    [CompilerGeneratedAttribute]
public void set_BackchannelTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public HttpMessageHandler get_BackchannelHttpHandler();
    [CompilerGeneratedAttribute]
public void set_BackchannelHttpHandler(HttpMessageHandler value);
    [CompilerGeneratedAttribute]
public TokenValidationParameters get_TokenValidationParameters();
    [CompilerGeneratedAttribute]
public void set_TokenValidationParameters(TokenValidationParameters value);
    [CompilerGeneratedAttribute]
public JwtSecurityTokenHandler get_TokenHandler();
    [CompilerGeneratedAttribute]
public void set_TokenHandler(JwtSecurityTokenHandler value);
}
internal class Microsoft.Owin.Security.ActiveDirectory.IssuerSigningKeys : object {
    [CompilerGeneratedAttribute]
private string <Issuer>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SecurityKey> <Keys>k__BackingField;
    public string Issuer { get; public set; }
    public IEnumerable`1<SecurityKey> Keys { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Issuer();
    [CompilerGeneratedAttribute]
public void set_Issuer(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SecurityKey> get_Keys();
    [CompilerGeneratedAttribute]
public void set_Keys(IEnumerable`1<SecurityKey> value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Owin.Security.ActiveDirectory.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Exception_MissingDescriptor { get; }
    internal static string Exception_OptionMustBeProvided { get; }
    internal static string Exception_ValidatorHandlerMismatch { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Exception_MissingDescriptor();
    internal static string get_Exception_OptionMustBeProvided();
    internal static string get_Exception_ValidatorHandlerMismatch();
}
public class Microsoft.Owin.Security.ActiveDirectory.WindowsAzureActiveDirectoryBearerAuthenticationOptions : AuthenticationOptions {
    [CompilerGeneratedAttribute]
private string <Audience>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Realm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tenant>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetadataAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private IOAuthBearerAuthenticationProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private ICertificateValidator <BackchannelCertificateValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <BackchannelTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <BackchannelHttpHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenValidationParameters <TokenValidationParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private JwtSecurityTokenHandler <TokenHandler>k__BackingField;
    [ObsoleteAttribute("Use TokenValidationParameters.ValidAudience", "False")]
public string Audience { get; public set; }
    public string Realm { get; public set; }
    public string Tenant { get; public set; }
    public string MetadataAddress { get; public set; }
    public IOAuthBearerAuthenticationProvider Provider { get; public set; }
    public ICertificateValidator BackchannelCertificateValidator { get; public set; }
    public TimeSpan BackchannelTimeout { get; public set; }
    public HttpMessageHandler BackchannelHttpHandler { get; public set; }
    public TokenValidationParameters TokenValidationParameters { get; public set; }
    public JwtSecurityTokenHandler TokenHandler { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Audience();
    [CompilerGeneratedAttribute]
public void set_Audience(string value);
    [CompilerGeneratedAttribute]
public string get_Realm();
    [CompilerGeneratedAttribute]
public void set_Realm(string value);
    [CompilerGeneratedAttribute]
public string get_Tenant();
    [CompilerGeneratedAttribute]
public void set_Tenant(string value);
    [CompilerGeneratedAttribute]
public string get_MetadataAddress();
    [CompilerGeneratedAttribute]
public void set_MetadataAddress(string value);
    [CompilerGeneratedAttribute]
public IOAuthBearerAuthenticationProvider get_Provider();
    [CompilerGeneratedAttribute]
public void set_Provider(IOAuthBearerAuthenticationProvider value);
    [CompilerGeneratedAttribute]
public ICertificateValidator get_BackchannelCertificateValidator();
    [CompilerGeneratedAttribute]
public void set_BackchannelCertificateValidator(ICertificateValidator value);
    [CompilerGeneratedAttribute]
public TimeSpan get_BackchannelTimeout();
    [CompilerGeneratedAttribute]
public void set_BackchannelTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public HttpMessageHandler get_BackchannelHttpHandler();
    [CompilerGeneratedAttribute]
public void set_BackchannelHttpHandler(HttpMessageHandler value);
    [CompilerGeneratedAttribute]
public TokenValidationParameters get_TokenValidationParameters();
    [CompilerGeneratedAttribute]
public void set_TokenValidationParameters(TokenValidationParameters value);
    [CompilerGeneratedAttribute]
public JwtSecurityTokenHandler get_TokenHandler();
    [CompilerGeneratedAttribute]
public void set_TokenHandler(JwtSecurityTokenHandler value);
}
internal class Microsoft.Owin.Security.ActiveDirectory.WsFedCachingSecurityKeyProvider : object {
    private TimeSpan _refreshInterval;
    private string _metadataEndpoint;
    private TimeSpan _backchannelTimeout;
    private HttpMessageHandler _backchannelHttpHandler;
    private DateTimeOffset _syncAfter;
    private string _issuer;
    private IEnumerable`1<SecurityKey> _keys;
    public string Issuer { get; }
    public IEnumerable`1<SecurityKey> SecurityKeys { get; }
    public WsFedCachingSecurityKeyProvider(string metadataEndpoint, ICertificateValidator backchannelCertificateValidator, TimeSpan backchannelTimeout, HttpMessageHandler backchannelHttpHandler);
    public sealed virtual string get_Issuer();
    public sealed virtual IEnumerable`1<SecurityKey> get_SecurityKeys();
    private void RefreshMetadata();
    private void RetrieveMetadata();
    [CompilerGeneratedAttribute]
private void <RefreshMetadata>b__12_0(object state);
}
internal static class Microsoft.Owin.Security.ActiveDirectory.WsFedMetadataRetriever : object {
    private static XmlReaderSettings SafeSettings;
    private static WsFedMetadataRetriever();
    public static IssuerSigningKeys GetSigningKeys(string metadataEndpoint, TimeSpan backchannelTimeout, HttpMessageHandler backchannelHttpHandler);
}
[ExtensionAttribute]
public static class Owin.ActiveDirectoryFederationServicesBearerAuthenticationExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseActiveDirectoryFederationServicesBearerAuthentication(IAppBuilder app, ActiveDirectoryFederationServicesBearerAuthenticationOptions options);
}
[ExtensionAttribute]
public static class Owin.WindowsAzureActiveDirectoryBearerAuthenticationExtensions : object {
    private static string SecurityTokenServiceAddressFormat;
    [ExtensionAttribute]
public static IAppBuilder UseWindowsAzureActiveDirectoryBearerAuthentication(IAppBuilder app, WindowsAzureActiveDirectoryBearerAuthenticationOptions options);
}
