public class Microsoft.Owin.Security.Notifications.AuthorizationCodeReceivedNotification : BaseNotification`1<OpenIdConnectAuthenticationOptions> {
    [CompilerGeneratedAttribute]
private AuthenticationTicket <AuthenticationTicket>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private JwtSecurityToken <JwtSecurityToken>k__BackingField;
    [CompilerGeneratedAttribute]
private OpenIdConnectMessage <TokenEndpointRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private OpenIdConnectMessage <ProtocolMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private OpenIdConnectMessage <TokenEndpointResponse>k__BackingField;
    public AuthenticationTicket AuthenticationTicket { get; public set; }
    public string Code { get; public set; }
    public JwtSecurityToken JwtSecurityToken { get; public set; }
    public OpenIdConnectMessage TokenEndpointRequest { get; public set; }
    public OpenIdConnectMessage ProtocolMessage { get; public set; }
    public string RedirectUri { get; public set; }
    public OpenIdConnectMessage TokenEndpointResponse { get; public set; }
    public bool HandledCodeRedemption { get; }
    public AuthorizationCodeReceivedNotification(IOwinContext context, OpenIdConnectAuthenticationOptions options);
    [CompilerGeneratedAttribute]
public AuthenticationTicket get_AuthenticationTicket();
    [CompilerGeneratedAttribute]
public void set_AuthenticationTicket(AuthenticationTicket value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public JwtSecurityToken get_JwtSecurityToken();
    [CompilerGeneratedAttribute]
public void set_JwtSecurityToken(JwtSecurityToken value);
    [CompilerGeneratedAttribute]
public OpenIdConnectMessage get_TokenEndpointRequest();
    [CompilerGeneratedAttribute]
public void set_TokenEndpointRequest(OpenIdConnectMessage value);
    [CompilerGeneratedAttribute]
public OpenIdConnectMessage get_ProtocolMessage();
    [CompilerGeneratedAttribute]
public void set_ProtocolMessage(OpenIdConnectMessage value);
    [CompilerGeneratedAttribute]
public string get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(string value);
    [CompilerGeneratedAttribute]
public OpenIdConnectMessage get_TokenEndpointResponse();
    [CompilerGeneratedAttribute]
public void set_TokenEndpointResponse(OpenIdConnectMessage value);
    public bool get_HandledCodeRedemption();
    public void HandleCodeRedemption();
    public void HandleCodeRedemption(string accessToken, string idToken);
    public void HandleCodeRedemption(OpenIdConnectMessage tokenEndpointResponse);
}
public class Microsoft.Owin.Security.Notifications.TokenResponseReceivedNotification : BaseNotification`1<OpenIdConnectAuthenticationOptions> {
    [CompilerGeneratedAttribute]
private OpenIdConnectMessage <ProtocolMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private OpenIdConnectMessage <TokenEndpointResponse>k__BackingField;
    public OpenIdConnectMessage ProtocolMessage { get; public set; }
    public OpenIdConnectMessage TokenEndpointResponse { get; public set; }
    public TokenResponseReceivedNotification(IOwinContext context, OpenIdConnectAuthenticationOptions options);
    [CompilerGeneratedAttribute]
public OpenIdConnectMessage get_ProtocolMessage();
    [CompilerGeneratedAttribute]
public void set_ProtocolMessage(OpenIdConnectMessage value);
    [CompilerGeneratedAttribute]
public OpenIdConnectMessage get_TokenEndpointResponse();
    [CompilerGeneratedAttribute]
public void set_TokenEndpointResponse(OpenIdConnectMessage value);
}
internal static class Microsoft.Owin.Security.OpenIdConnect.OAuthConstants : object {
    public static string CodeVerifierKey;
    public static string CodeChallengeKey;
    public static string CodeChallengeMethodKey;
    public static string CodeChallengeMethodS256;
}
public static class Microsoft.Owin.Security.OpenIdConnect.OpenIdConnectAuthenticationDefaults : object {
    public static string AuthenticationType;
    public static string CookiePrefix;
    public static string Caption;
    internal static string Nonce;
    public static string RedirectUriUsedForCodeKey;
    internal static string AuthenticationPropertiesKey;
}
public class Microsoft.Owin.Security.OpenIdConnect.OpenIdConnectAuthenticationHandler : AuthenticationHandler`1<OpenIdConnectAuthenticationOptions> {
    private static string HandledResponse;
    private static string NonceProperty;
    private ILogger _logger;
    private OpenIdConnectConfiguration _configuration;
    protected HttpClient Backchannel { get; }
    private string CurrentUri { get; }
    public OpenIdConnectAuthenticationHandler(ILogger logger);
    protected HttpClient get_Backchannel();
    private string get_CurrentUri();
    [AsyncStateMachineAttribute("Microsoft.Owin.Security.OpenIdConnect.OpenIdConnectAuthenticationHandler/<ApplyResponseGrantAsync>d__9")]
protected virtual Task ApplyResponseGrantAsync();
    [AsyncStateMachineAttribute("Microsoft.Owin.Security.OpenIdConnect.OpenIdConnectAuthenticationHandler/<ApplyResponseChallengeAsync>d__10")]
protected virtual Task ApplyResponseChallengeAsync();
    [AsyncStateMachineAttribute("Microsoft.Owin.Security.OpenIdConnect.OpenIdConnectAuthenticationHandler/<AuthenticateCoreAsync>d__11")]
protected virtual Task`1<AuthenticationTicket> AuthenticateCoreAsync();
    [AsyncStateMachineAttribute("Microsoft.Owin.Security.OpenIdConnect.OpenIdConnectAuthenticationHandler/<RedeemAuthorizationCodeAsync>d__12")]
protected virtual Task`1<OpenIdConnectMessage> RedeemAuthorizationCodeAsync(OpenIdConnectMessage tokenEndpointRequest);
    protected virtual void AddNonceToMessage(OpenIdConnectMessage message);
    protected virtual void RememberNonce(OpenIdConnectMessage message, string nonce);
    protected virtual string RetrieveNonce(OpenIdConnectMessage message);
    protected virtual string GetNonceKey(string nonce);
    private static void SaveTokens(AuthenticationProperties properties, OpenIdConnectMessage message);
    private ClaimsPrincipal ValidateToken(string idToken, AuthenticationProperties properties, TokenValidationParameters validationParameters, JwtSecurityToken& jwt);
    private AuthenticationProperties GetPropertiesFromState(string state);
    private void PopulateSessionProperties(OpenIdConnectMessage message, AuthenticationProperties properties);
    private OpenIdConnectProtocolException CreateOpenIdConnectProtocolException(OpenIdConnectMessage message);
    public virtual Task`1<bool> InvokeAsync();
    [AsyncStateMachineAttribute("Microsoft.Owin.Security.OpenIdConnect.OpenIdConnectAuthenticationHandler/<InvokeReplyPathAsync>d__23")]
private Task`1<bool> InvokeReplyPathAsync();
    private static AuthenticationTicket GetHandledResponseTicket();
}
public class Microsoft.Owin.Security.OpenIdConnect.OpenIdConnectAuthenticationMiddleware : AuthenticationMiddleware`1<OpenIdConnectAuthenticationOptions> {
    private ILogger _logger;
    public OpenIdConnectAuthenticationMiddleware(OwinMiddleware next, IAppBuilder app, OpenIdConnectAuthenticationOptions options);
    protected virtual AuthenticationHandler`1<OpenIdConnectAuthenticationOptions> CreateHandler();
    private static HttpMessageHandler ResolveHttpMessageHandler(OpenIdConnectAuthenticationOptions options);
}
public class Microsoft.Owin.Security.OpenIdConnect.OpenIdConnectAuthenticationNotifications : object {
    [CompilerGeneratedAttribute]
private Func`2<AuthenticationFailedNotification`2<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> <AuthenticationFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<AuthorizationCodeReceivedNotification, Task> <AuthorizationCodeReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MessageReceivedNotification`2<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> <MessageReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<RedirectToIdentityProviderNotification`2<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> <RedirectToIdentityProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<SecurityTokenReceivedNotification`2<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> <SecurityTokenReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<SecurityTokenValidatedNotification`2<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> <SecurityTokenValidated>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<TokenResponseReceivedNotification, Task> <TokenResponseReceived>k__BackingField;
    public Func`2<AuthenticationFailedNotification`2<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> AuthenticationFailed { get; public set; }
    public Func`2<AuthorizationCodeReceivedNotification, Task> AuthorizationCodeReceived { get; public set; }
    public Func`2<MessageReceivedNotification`2<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> MessageReceived { get; public set; }
    public Func`2<RedirectToIdentityProviderNotification`2<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> RedirectToIdentityProvider { get; public set; }
    public Func`2<SecurityTokenReceivedNotification`2<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> SecurityTokenReceived { get; public set; }
    public Func`2<SecurityTokenValidatedNotification`2<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> SecurityTokenValidated { get; public set; }
    public Func`2<TokenResponseReceivedNotification, Task> TokenResponseReceived { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<AuthenticationFailedNotification`2<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> get_AuthenticationFailed();
    [CompilerGeneratedAttribute]
public void set_AuthenticationFailed(Func`2<AuthenticationFailedNotification`2<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<AuthorizationCodeReceivedNotification, Task> get_AuthorizationCodeReceived();
    [CompilerGeneratedAttribute]
public void set_AuthorizationCodeReceived(Func`2<AuthorizationCodeReceivedNotification, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<MessageReceivedNotification`2<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> get_MessageReceived();
    [CompilerGeneratedAttribute]
public void set_MessageReceived(Func`2<MessageReceivedNotification`2<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<RedirectToIdentityProviderNotification`2<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> get_RedirectToIdentityProvider();
    [CompilerGeneratedAttribute]
public void set_RedirectToIdentityProvider(Func`2<RedirectToIdentityProviderNotification`2<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<SecurityTokenReceivedNotification`2<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> get_SecurityTokenReceived();
    [CompilerGeneratedAttribute]
public void set_SecurityTokenReceived(Func`2<SecurityTokenReceivedNotification`2<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<SecurityTokenValidatedNotification`2<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> get_SecurityTokenValidated();
    [CompilerGeneratedAttribute]
public void set_SecurityTokenValidated(Func`2<SecurityTokenValidatedNotification`2<OpenIdConnectMessage, OpenIdConnectAuthenticationOptions>, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<TokenResponseReceivedNotification, Task> get_TokenResponseReceived();
    [CompilerGeneratedAttribute]
public void set_TokenResponseReceived(Func`2<TokenResponseReceivedNotification, Task> value);
}
public class Microsoft.Owin.Security.OpenIdConnect.OpenIdConnectAuthenticationOptions : AuthenticationOptions {
    private OpenIdConnectProtocolValidator _protocolValidator;
    private TokenValidationParameters _tokenValidationParameters;
    private TimeSpan _backchannelTimeout;
    private ISecurityTokenValidator _securityTokenValidator;
    [CompilerGeneratedAttribute]
private string <Authority>k__BackingField;
    [CompilerGeneratedAttribute]
private PathString <CallbackPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ICertificateValidator <BackchannelCertificateValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <BackchannelHttpHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClient <Backchannel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private OpenIdConnectConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireHttpsMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetadataAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationManager`1<OpenIdConnectConfiguration> <ConfigurationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RefreshOnIssuerKeyNotFound>k__BackingField;
    [CompilerGeneratedAttribute]
private OpenIdConnectAuthenticationNotifications <Notifications>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostLogoutRedirectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private ISecureDataFormat`1<AuthenticationProperties> <StateDataFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTokenLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private ICookieManager <CookieManager>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RedeemCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsePkce>k__BackingField;
    public string Authority { get; public set; }
    public PathString CallbackPath { get; public set; }
    public ICertificateValidator BackchannelCertificateValidator { get; public set; }
    public HttpMessageHandler BackchannelHttpHandler { get; public set; }
    public TimeSpan BackchannelTimeout { get; public set; }
    public HttpClient Backchannel { get; public set; }
    public string Caption { get; public set; }
    public string ClientId { get; public set; }
    public string ClientSecret { get; public set; }
    public OpenIdConnectConfiguration Configuration { get; public set; }
    public bool RequireHttpsMetadata { get; public set; }
    public string MetadataAddress { get; public set; }
    public IConfigurationManager`1<OpenIdConnectConfiguration> ConfigurationManager { get; public set; }
    public bool RefreshOnIssuerKeyNotFound { get; public set; }
    public OpenIdConnectAuthenticationNotifications Notifications { get; public set; }
    public OpenIdConnectProtocolValidator ProtocolValidator { get; public set; }
    public string PostLogoutRedirectUri { get; public set; }
    public string RedirectUri { get; public set; }
    public string Resource { get; public set; }
    public string ResponseMode { get; public set; }
    public string ResponseType { get; public set; }
    public string Scope { get; public set; }
    public string SignInAsAuthenticationType { get; public set; }
    public ISecureDataFormat`1<AuthenticationProperties> StateDataFormat { get; public set; }
    public ISecurityTokenValidator SecurityTokenValidator { get; public set; }
    public TokenValidationParameters TokenValidationParameters { get; public set; }
    public bool UseTokenLifetime { get; public set; }
    public bool SaveTokens { get; public set; }
    public ICookieManager CookieManager { get; public set; }
    public bool RedeemCode { get; public set; }
    public bool UsePkce { get; public set; }
    public OpenIdConnectAuthenticationOptions(string authenticationType);
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
public void set_Authority(string value);
    [CompilerGeneratedAttribute]
public PathString get_CallbackPath();
    [CompilerGeneratedAttribute]
public void set_CallbackPath(PathString value);
    [CompilerGeneratedAttribute]
public ICertificateValidator get_BackchannelCertificateValidator();
    [CompilerGeneratedAttribute]
public void set_BackchannelCertificateValidator(ICertificateValidator value);
    [CompilerGeneratedAttribute]
public HttpMessageHandler get_BackchannelHttpHandler();
    [CompilerGeneratedAttribute]
public void set_BackchannelHttpHandler(HttpMessageHandler value);
    public TimeSpan get_BackchannelTimeout();
    public void set_BackchannelTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public HttpClient get_Backchannel();
    [CompilerGeneratedAttribute]
public void set_Backchannel(HttpClient value);
    public string get_Caption();
    public void set_Caption(string value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientSecret();
    [CompilerGeneratedAttribute]
public void set_ClientSecret(string value);
    [CompilerGeneratedAttribute]
public OpenIdConnectConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(OpenIdConnectConfiguration value);
    [CompilerGeneratedAttribute]
public bool get_RequireHttpsMetadata();
    [CompilerGeneratedAttribute]
public void set_RequireHttpsMetadata(bool value);
    [CompilerGeneratedAttribute]
public string get_MetadataAddress();
    [CompilerGeneratedAttribute]
public void set_MetadataAddress(string value);
    [CompilerGeneratedAttribute]
public IConfigurationManager`1<OpenIdConnectConfiguration> get_ConfigurationManager();
    [CompilerGeneratedAttribute]
public void set_ConfigurationManager(IConfigurationManager`1<OpenIdConnectConfiguration> value);
    [CompilerGeneratedAttribute]
public bool get_RefreshOnIssuerKeyNotFound();
    [CompilerGeneratedAttribute]
public void set_RefreshOnIssuerKeyNotFound(bool value);
    [CompilerGeneratedAttribute]
public OpenIdConnectAuthenticationNotifications get_Notifications();
    [CompilerGeneratedAttribute]
public void set_Notifications(OpenIdConnectAuthenticationNotifications value);
    public OpenIdConnectProtocolValidator get_ProtocolValidator();
    public void set_ProtocolValidator(OpenIdConnectProtocolValidator value);
    [CompilerGeneratedAttribute]
public string get_PostLogoutRedirectUri();
    [CompilerGeneratedAttribute]
public void set_PostLogoutRedirectUri(string value);
    [CompilerGeneratedAttribute]
public string get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(string value);
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
public void set_Resource(string value);
    [CompilerGeneratedAttribute]
public string get_ResponseMode();
    [CompilerGeneratedAttribute]
public void set_ResponseMode(string value);
    [CompilerGeneratedAttribute]
public string get_ResponseType();
    [CompilerGeneratedAttribute]
public void set_ResponseType(string value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    public string get_SignInAsAuthenticationType();
    public void set_SignInAsAuthenticationType(string value);
    [CompilerGeneratedAttribute]
public ISecureDataFormat`1<AuthenticationProperties> get_StateDataFormat();
    [CompilerGeneratedAttribute]
public void set_StateDataFormat(ISecureDataFormat`1<AuthenticationProperties> value);
    public ISecurityTokenValidator get_SecurityTokenValidator();
    public void set_SecurityTokenValidator(ISecurityTokenValidator value);
    public TokenValidationParameters get_TokenValidationParameters();
    public void set_TokenValidationParameters(TokenValidationParameters value);
    [CompilerGeneratedAttribute]
public bool get_UseTokenLifetime();
    [CompilerGeneratedAttribute]
public void set_UseTokenLifetime(bool value);
    [CompilerGeneratedAttribute]
public bool get_SaveTokens();
    [CompilerGeneratedAttribute]
public void set_SaveTokens(bool value);
    [CompilerGeneratedAttribute]
public ICookieManager get_CookieManager();
    [CompilerGeneratedAttribute]
public void set_CookieManager(ICookieManager value);
    [CompilerGeneratedAttribute]
public bool get_RedeemCode();
    [CompilerGeneratedAttribute]
public void set_RedeemCode(bool value);
    [CompilerGeneratedAttribute]
public bool get_UsePkce();
    [CompilerGeneratedAttribute]
public void set_UsePkce(bool value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Owin.Security.OpenIdConnect.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgsException_BackchallelLessThanZero { get; }
    internal static string Exception_OpenIdConnectMessageError { get; }
    internal static string Exception_RedirectUri_LogoutQueryString_IsNotWellFormed { get; }
    internal static string Exception_ValidatorHandlerMismatch { get; }
    internal static string UnableToValidateToken { get; }
    internal static string ValidatedSecurityTokenNotJwt { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgsException_BackchallelLessThanZero();
    internal static string get_Exception_OpenIdConnectMessageError();
    internal static string get_Exception_RedirectUri_LogoutQueryString_IsNotWellFormed();
    internal static string get_Exception_ValidatorHandlerMismatch();
    internal static string get_UnableToValidateToken();
    internal static string get_ValidatedSecurityTokenNotJwt();
}
[ExtensionAttribute]
public static class Owin.OpenIdConnectAuthenticationExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseOpenIdConnectAuthentication(IAppBuilder app, string clientId, string metadataAddress);
    [ExtensionAttribute]
public static IAppBuilder UseOpenIdConnectAuthentication(IAppBuilder app, OpenIdConnectAuthenticationOptions openIdConnectOptions);
}
