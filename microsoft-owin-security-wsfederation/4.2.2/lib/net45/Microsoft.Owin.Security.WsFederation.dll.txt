[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Owin.Security.WsFederation.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Exception_MissingDescriptor { get; }
    internal static string Exception_OptionMustBeProvided { get; }
    internal static string Exception_ValidatorHandlerMismatch { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Exception_MissingDescriptor();
    internal static string get_Exception_OptionMustBeProvided();
    internal static string get_Exception_ValidatorHandlerMismatch();
}
public static class Microsoft.Owin.Security.WsFederation.WsFederationAuthenticationDefaults : object {
    public static string AuthenticationType;
    public static string CookiePrefix;
    public static string CookieName;
    public static string Caption;
    internal static string WctxKey;
}
public class Microsoft.Owin.Security.WsFederation.WsFederationAuthenticationHandler : AuthenticationHandler`1<WsFederationAuthenticationOptions> {
    private static string HandledResponse;
    private ILogger _logger;
    private WsFederationConfiguration _configuration;
    public WsFederationAuthenticationHandler(ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.Owin.Security.WsFederation.WsFederationAuthenticationHandler/<ApplyResponseGrantAsync>d__4")]
protected virtual Task ApplyResponseGrantAsync();
    [AsyncStateMachineAttribute("Microsoft.Owin.Security.WsFederation.WsFederationAuthenticationHandler/<ApplyResponseChallengeAsync>d__5")]
protected virtual Task ApplyResponseChallengeAsync();
    public virtual Task`1<bool> InvokeAsync();
    [AsyncStateMachineAttribute("Microsoft.Owin.Security.WsFederation.WsFederationAuthenticationHandler/<InvokeReplyPathAsync>d__7")]
private Task`1<bool> InvokeReplyPathAsync();
    [AsyncStateMachineAttribute("Microsoft.Owin.Security.WsFederation.WsFederationAuthenticationHandler/<AuthenticateCoreAsync>d__8")]
protected virtual Task`1<AuthenticationTicket> AuthenticateCoreAsync();
    private static AuthenticationTicket GetHandledResponseTicket();
    private AuthenticationProperties GetPropertiesFromWctx(string state);
    private static IDictionary`2<string, List`1<string>> ParseDelimited(string text);
}
public class Microsoft.Owin.Security.WsFederation.WsFederationAuthenticationMiddleware : AuthenticationMiddleware`1<WsFederationAuthenticationOptions> {
    private ILogger _logger;
    public WsFederationAuthenticationMiddleware(OwinMiddleware next, IAppBuilder app, WsFederationAuthenticationOptions options);
    protected virtual AuthenticationHandler`1<WsFederationAuthenticationOptions> CreateHandler();
    private static HttpMessageHandler ResolveHttpMessageHandler(WsFederationAuthenticationOptions options);
}
public class Microsoft.Owin.Security.WsFederation.WsFederationAuthenticationNotifications : object {
    [CompilerGeneratedAttribute]
private Func`2<AuthenticationFailedNotification`2<WsFederationMessage, WsFederationAuthenticationOptions>, Task> <AuthenticationFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MessageReceivedNotification`2<WsFederationMessage, WsFederationAuthenticationOptions>, Task> <MessageReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<RedirectToIdentityProviderNotification`2<WsFederationMessage, WsFederationAuthenticationOptions>, Task> <RedirectToIdentityProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<SecurityTokenReceivedNotification`2<WsFederationMessage, WsFederationAuthenticationOptions>, Task> <SecurityTokenReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<SecurityTokenValidatedNotification`2<WsFederationMessage, WsFederationAuthenticationOptions>, Task> <SecurityTokenValidated>k__BackingField;
    public Func`2<AuthenticationFailedNotification`2<WsFederationMessage, WsFederationAuthenticationOptions>, Task> AuthenticationFailed { get; public set; }
    public Func`2<MessageReceivedNotification`2<WsFederationMessage, WsFederationAuthenticationOptions>, Task> MessageReceived { get; public set; }
    public Func`2<RedirectToIdentityProviderNotification`2<WsFederationMessage, WsFederationAuthenticationOptions>, Task> RedirectToIdentityProvider { get; public set; }
    public Func`2<SecurityTokenReceivedNotification`2<WsFederationMessage, WsFederationAuthenticationOptions>, Task> SecurityTokenReceived { get; public set; }
    public Func`2<SecurityTokenValidatedNotification`2<WsFederationMessage, WsFederationAuthenticationOptions>, Task> SecurityTokenValidated { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<AuthenticationFailedNotification`2<WsFederationMessage, WsFederationAuthenticationOptions>, Task> get_AuthenticationFailed();
    [CompilerGeneratedAttribute]
public void set_AuthenticationFailed(Func`2<AuthenticationFailedNotification`2<WsFederationMessage, WsFederationAuthenticationOptions>, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<MessageReceivedNotification`2<WsFederationMessage, WsFederationAuthenticationOptions>, Task> get_MessageReceived();
    [CompilerGeneratedAttribute]
public void set_MessageReceived(Func`2<MessageReceivedNotification`2<WsFederationMessage, WsFederationAuthenticationOptions>, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<RedirectToIdentityProviderNotification`2<WsFederationMessage, WsFederationAuthenticationOptions>, Task> get_RedirectToIdentityProvider();
    [CompilerGeneratedAttribute]
public void set_RedirectToIdentityProvider(Func`2<RedirectToIdentityProviderNotification`2<WsFederationMessage, WsFederationAuthenticationOptions>, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<SecurityTokenReceivedNotification`2<WsFederationMessage, WsFederationAuthenticationOptions>, Task> get_SecurityTokenReceived();
    [CompilerGeneratedAttribute]
public void set_SecurityTokenReceived(Func`2<SecurityTokenReceivedNotification`2<WsFederationMessage, WsFederationAuthenticationOptions>, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<SecurityTokenValidatedNotification`2<WsFederationMessage, WsFederationAuthenticationOptions>, Task> get_SecurityTokenValidated();
    [CompilerGeneratedAttribute]
public void set_SecurityTokenValidated(Func`2<SecurityTokenValidatedNotification`2<WsFederationMessage, WsFederationAuthenticationOptions>, Task> value);
}
public class Microsoft.Owin.Security.WsFederation.WsFederationAuthenticationOptions : AuthenticationOptions {
    private ICollection`1<ISecurityTokenValidator> _securityTokenHandlers;
    private TokenValidationParameters _tokenValidationParameters;
    [CompilerGeneratedAttribute]
private ICertificateValidator <BackchannelCertificateValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <BackchannelHttpHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <BackchannelTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private WsFederationConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetadataAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationManager`1<WsFederationConfiguration> <ConfigurationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RefreshOnIssuerKeyNotFound>k__BackingField;
    [CompilerGeneratedAttribute]
private WsFederationAuthenticationNotifications <Notifications>k__BackingField;
    [CompilerGeneratedAttribute]
private ISecureDataFormat`1<AuthenticationProperties> <StateDataFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Wreply>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SignOutWreply>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Wtrealm>k__BackingField;
    [CompilerGeneratedAttribute]
private PathString <CallbackPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTokenLifetime>k__BackingField;
    public ICertificateValidator BackchannelCertificateValidator { get; public set; }
    public HttpMessageHandler BackchannelHttpHandler { get; public set; }
    public TimeSpan BackchannelTimeout { get; public set; }
    public string Caption { get; public set; }
    public WsFederationConfiguration Configuration { get; public set; }
    public string MetadataAddress { get; public set; }
    public IConfigurationManager`1<WsFederationConfiguration> ConfigurationManager { get; public set; }
    public bool RefreshOnIssuerKeyNotFound { get; public set; }
    public WsFederationAuthenticationNotifications Notifications { get; public set; }
    public ICollection`1<ISecurityTokenValidator> SecurityTokenHandlers { get; public set; }
    public string SignInAsAuthenticationType { get; public set; }
    public ISecureDataFormat`1<AuthenticationProperties> StateDataFormat { get; public set; }
    public TokenValidationParameters TokenValidationParameters { get; public set; }
    public string Wreply { get; public set; }
    public string SignOutWreply { get; public set; }
    public string Wtrealm { get; public set; }
    public PathString CallbackPath { get; public set; }
    public bool UseTokenLifetime { get; public set; }
    public WsFederationAuthenticationOptions(string authenticationType);
    [CompilerGeneratedAttribute]
public ICertificateValidator get_BackchannelCertificateValidator();
    [CompilerGeneratedAttribute]
public void set_BackchannelCertificateValidator(ICertificateValidator value);
    [CompilerGeneratedAttribute]
public HttpMessageHandler get_BackchannelHttpHandler();
    [CompilerGeneratedAttribute]
public void set_BackchannelHttpHandler(HttpMessageHandler value);
    [CompilerGeneratedAttribute]
public TimeSpan get_BackchannelTimeout();
    [CompilerGeneratedAttribute]
public void set_BackchannelTimeout(TimeSpan value);
    public string get_Caption();
    public void set_Caption(string value);
    [CompilerGeneratedAttribute]
public WsFederationConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(WsFederationConfiguration value);
    [CompilerGeneratedAttribute]
public string get_MetadataAddress();
    [CompilerGeneratedAttribute]
public void set_MetadataAddress(string value);
    [CompilerGeneratedAttribute]
public IConfigurationManager`1<WsFederationConfiguration> get_ConfigurationManager();
    [CompilerGeneratedAttribute]
public void set_ConfigurationManager(IConfigurationManager`1<WsFederationConfiguration> value);
    [CompilerGeneratedAttribute]
public bool get_RefreshOnIssuerKeyNotFound();
    [CompilerGeneratedAttribute]
public void set_RefreshOnIssuerKeyNotFound(bool value);
    [CompilerGeneratedAttribute]
public WsFederationAuthenticationNotifications get_Notifications();
    [CompilerGeneratedAttribute]
public void set_Notifications(WsFederationAuthenticationNotifications value);
    public ICollection`1<ISecurityTokenValidator> get_SecurityTokenHandlers();
    public void set_SecurityTokenHandlers(ICollection`1<ISecurityTokenValidator> value);
    public string get_SignInAsAuthenticationType();
    public void set_SignInAsAuthenticationType(string value);
    [CompilerGeneratedAttribute]
public ISecureDataFormat`1<AuthenticationProperties> get_StateDataFormat();
    [CompilerGeneratedAttribute]
public void set_StateDataFormat(ISecureDataFormat`1<AuthenticationProperties> value);
    public TokenValidationParameters get_TokenValidationParameters();
    public void set_TokenValidationParameters(TokenValidationParameters value);
    [CompilerGeneratedAttribute]
public string get_Wreply();
    [CompilerGeneratedAttribute]
public void set_Wreply(string value);
    [CompilerGeneratedAttribute]
public string get_SignOutWreply();
    [CompilerGeneratedAttribute]
public void set_SignOutWreply(string value);
    [CompilerGeneratedAttribute]
public string get_Wtrealm();
    [CompilerGeneratedAttribute]
public void set_Wtrealm(string value);
    [CompilerGeneratedAttribute]
public PathString get_CallbackPath();
    [CompilerGeneratedAttribute]
public void set_CallbackPath(PathString value);
    [CompilerGeneratedAttribute]
public bool get_UseTokenLifetime();
    [CompilerGeneratedAttribute]
public void set_UseTokenLifetime(bool value);
}
[ExtensionAttribute]
public static class Owin.WsFederationAuthenticationExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseWsFederationAuthentication(IAppBuilder app, string wtrealm, string metadataAddress);
    [ExtensionAttribute]
public static IAppBuilder UseWsFederationAuthentication(IAppBuilder app, WsFederationAuthenticationOptions wsFederationOptions);
}
