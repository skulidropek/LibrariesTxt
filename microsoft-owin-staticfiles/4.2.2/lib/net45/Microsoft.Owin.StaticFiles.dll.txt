[ExtensionAttribute]
public static class Microsoft.Owin.SendFileResponseExtensions : object {
    [ExtensionAttribute]
public static bool SupportsSendFile(IOwinResponse response);
    [ExtensionAttribute]
public static Task SendFileAsync(IOwinResponse response, string fileName);
    [ExtensionAttribute]
public static Task SendFileAsync(IOwinResponse response, string fileName, long offset, Nullable`1<long> count, CancellationToken cancellationToken);
}
internal static class Microsoft.Owin.StaticFiles.Constants : object {
    internal static string ServerCapabilitiesKey;
    internal static string SendFileVersionKey;
    internal static string SendFileVersion;
    internal static string SendFileAsyncKey;
    internal static string Location;
    internal static string IfMatch;
    internal static string IfNoneMatch;
    internal static string IfModifiedSince;
    internal static string IfUnmodifiedSince;
    internal static string IfRange;
    internal static string Range;
    internal static string ContentRange;
    internal static string LastModified;
    internal static string HttpDateFormat;
    internal static string TextHtmlUtf8;
    internal static int Status200Ok;
    internal static int Status206PartialContent;
    internal static int Status304NotModified;
    internal static int Status412PreconditionFailed;
    internal static int Status416RangeNotSatisfiable;
    internal static Task CompletedTask;
    private static Constants();
    private static Task CreateCompletedTask();
}
public class Microsoft.Owin.StaticFiles.ContentTypes.FileExtensionContentTypeProvider : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Mappings>k__BackingField;
    public IDictionary`2<string, string> Mappings { get; private set; }
    public FileExtensionContentTypeProvider(IDictionary`2<string, string> mapping);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Mappings();
    [CompilerGeneratedAttribute]
private void set_Mappings(IDictionary`2<string, string> value);
    public sealed virtual bool TryGetContentType(string subpath, String& contentType);
}
public interface Microsoft.Owin.StaticFiles.ContentTypes.IContentTypeProvider {
    public abstract virtual bool TryGetContentType(string subpath, String& contentType);
}
public class Microsoft.Owin.StaticFiles.DefaultFilesMiddleware : object {
    private DefaultFilesOptions _options;
    private PathString _matchUrl;
    private Func`2<IDictionary`2<string, object>, Task> _next;
    public DefaultFilesMiddleware(Func`2<IDictionary`2<string, object>, Task> next, DefaultFilesOptions options);
    public Task Invoke(IDictionary`2<string, object> environment);
}
public class Microsoft.Owin.StaticFiles.DefaultFilesOptions : SharedOptionsBase`1<DefaultFilesOptions> {
    [CompilerGeneratedAttribute]
private IList`1<string> <DefaultFileNames>k__BackingField;
    public IList`1<string> DefaultFileNames { get; public set; }
    public DefaultFilesOptions(SharedOptions sharedOptions);
    [CompilerGeneratedAttribute]
public IList`1<string> get_DefaultFileNames();
    [CompilerGeneratedAttribute]
public void set_DefaultFileNames(IList`1<string> value);
}
public class Microsoft.Owin.StaticFiles.DirectoryBrowserMiddleware : object {
    private DirectoryBrowserOptions _options;
    private PathString _matchUrl;
    private Func`2<IDictionary`2<string, object>, Task> _next;
    public DirectoryBrowserMiddleware(Func`2<IDictionary`2<string, object>, Task> next, DirectoryBrowserOptions options);
    public Task Invoke(IDictionary`2<string, object> environment);
    private bool TryGetDirectoryInfo(PathString subpath, IEnumerable`1& contents);
}
public class Microsoft.Owin.StaticFiles.DirectoryBrowserOptions : SharedOptionsBase`1<DirectoryBrowserOptions> {
    [CompilerGeneratedAttribute]
private IDirectoryFormatter <Formatter>k__BackingField;
    public IDirectoryFormatter Formatter { get; public set; }
    public DirectoryBrowserOptions(SharedOptions sharedOptions);
    [CompilerGeneratedAttribute]
public IDirectoryFormatter get_Formatter();
    [CompilerGeneratedAttribute]
public void set_Formatter(IDirectoryFormatter value);
}
public class Microsoft.Owin.StaticFiles.DirectoryFormatters.HtmlDirectoryFormatter : object {
    public virtual Task GenerateContentAsync(IOwinContext context, IEnumerable`1<IFileInfo> contents);
    private static string HtmlEncode(string body);
}
public interface Microsoft.Owin.StaticFiles.DirectoryFormatters.IDirectoryFormatter {
    public abstract virtual Task GenerateContentAsync(IOwinContext context, IEnumerable`1<IFileInfo> contents);
}
public class Microsoft.Owin.StaticFiles.FileServerOptions : SharedOptionsBase`1<FileServerOptions> {
    [CompilerGeneratedAttribute]
private StaticFileOptions <StaticFileOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryBrowserOptions <DirectoryBrowserOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultFilesOptions <DefaultFilesOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDirectoryBrowsing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDefaultFiles>k__BackingField;
    public StaticFileOptions StaticFileOptions { get; private set; }
    public DirectoryBrowserOptions DirectoryBrowserOptions { get; private set; }
    public DefaultFilesOptions DefaultFilesOptions { get; private set; }
    public bool EnableDirectoryBrowsing { get; public set; }
    public bool EnableDefaultFiles { get; public set; }
    [CompilerGeneratedAttribute]
public StaticFileOptions get_StaticFileOptions();
    [CompilerGeneratedAttribute]
private void set_StaticFileOptions(StaticFileOptions value);
    [CompilerGeneratedAttribute]
public DirectoryBrowserOptions get_DirectoryBrowserOptions();
    [CompilerGeneratedAttribute]
private void set_DirectoryBrowserOptions(DirectoryBrowserOptions value);
    [CompilerGeneratedAttribute]
public DefaultFilesOptions get_DefaultFilesOptions();
    [CompilerGeneratedAttribute]
private void set_DefaultFilesOptions(DefaultFilesOptions value);
    [CompilerGeneratedAttribute]
public bool get_EnableDirectoryBrowsing();
    [CompilerGeneratedAttribute]
public void set_EnableDirectoryBrowsing(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDefaultFiles();
    [CompilerGeneratedAttribute]
public void set_EnableDefaultFiles(bool value);
}
internal static class Microsoft.Owin.StaticFiles.Helpers : object {
    internal static bool IsGetOrHeadMethod(string method);
    internal static bool IsGetMethod(string method);
    internal static bool IsHeadMethod(string method);
    internal static bool PathEndsInSlash(PathString path);
    internal static bool TryMatchPath(IOwinContext context, PathString matchUrl, bool forDirectory, PathString& subpath);
    internal static bool TryParseHttpDate(string dateString, DateTime& parsedDate);
}
internal static class Microsoft.Owin.StaticFiles.Infrastructure.RangeHelpers : object {
    internal static bool TryParseRanges(string rangeHeader, IList`1& parsedRanges);
    private static bool TryParseLong(string input, Nullable`1& result);
    internal static IList`1<Tuple`2<long, long>> NormalizeRanges(IList`1<Tuple`2<Nullable`1<long>, Nullable`1<long>>> ranges, long length);
}
public class Microsoft.Owin.StaticFiles.Infrastructure.SharedOptions : object {
    private PathString _requestPath;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    public PathString RequestPath { get; public set; }
    public IFileSystem FileSystem { get; public set; }
    public PathString get_RequestPath();
    public void set_RequestPath(PathString value);
    [CompilerGeneratedAttribute]
public IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
public void set_FileSystem(IFileSystem value);
}
public abstract class Microsoft.Owin.StaticFiles.Infrastructure.SharedOptionsBase`1 : object {
    [CompilerGeneratedAttribute]
private SharedOptions <SharedOptions>k__BackingField;
    protected SharedOptions SharedOptions { get; private set; }
    public PathString RequestPath { get; public set; }
    public IFileSystem FileSystem { get; public set; }
    protected SharedOptionsBase`1(SharedOptions sharedOptions);
    [CompilerGeneratedAttribute]
protected SharedOptions get_SharedOptions();
    [CompilerGeneratedAttribute]
private void set_SharedOptions(SharedOptions value);
    public PathString get_RequestPath();
    public void set_RequestPath(PathString value);
    public IFileSystem get_FileSystem();
    public void set_FileSystem(IFileSystem value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Owin.StaticFiles.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Args_NoContentTypeProvider { get; }
    internal static string Args_NoFormatter { get; }
    internal static string Exception_SendFileNotSupported { get; }
    internal static string HtmlDir_IndexOf { get; }
    internal static string HtmlDir_LastModified { get; }
    internal static string HtmlDir_Modified { get; }
    internal static string HtmlDir_Name { get; }
    internal static string HtmlDir_Size { get; }
    internal static string HtmlDir_TableSummary { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Args_NoContentTypeProvider();
    internal static string get_Args_NoFormatter();
    internal static string get_Exception_SendFileNotSupported();
    internal static string get_HtmlDir_IndexOf();
    internal static string get_HtmlDir_LastModified();
    internal static string get_HtmlDir_Modified();
    internal static string get_HtmlDir_Name();
    internal static string get_HtmlDir_Size();
    internal static string get_HtmlDir_TableSummary();
}
[ExtensionAttribute]
public static class Microsoft.Owin.StaticFiles.SendFileExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseSendFileFallback(IAppBuilder builder);
    private static bool IsSendFileSupported(IDictionary`2<string, object> properties);
    private static void SetSendFileCapability(IDictionary`2<string, object> properties);
}
public class Microsoft.Owin.StaticFiles.SendFileMiddleware : object {
    private Func`2<IDictionary`2<string, object>, Task> _next;
    public SendFileMiddleware(Func`2<IDictionary`2<string, object>, Task> next);
    public Task Invoke(IDictionary`2<string, object> environment);
}
internal class Microsoft.Owin.StaticFiles.StaticFileContext : ValueType {
    private IOwinContext _context;
    private StaticFileOptions _options;
    private PathString _matchUrl;
    private IOwinRequest _request;
    private IOwinResponse _response;
    private string _method;
    private bool _isGet;
    private bool _isHead;
    private PathString _subPath;
    private string _contentType;
    private IFileInfo _fileInfo;
    private long _length;
    private DateTime _lastModified;
    private string _lastModifiedString;
    private string _etag;
    private string _etagQuoted;
    private PreconditionState _ifMatchState;
    private PreconditionState _ifNoneMatchState;
    private PreconditionState _ifModifiedSinceState;
    private PreconditionState _ifUnmodifiedSinceState;
    private IList`1<Tuple`2<long, long>> _ranges;
    public bool IsHeadMethod { get; }
    public bool IsRangeRequest { get; }
    public StaticFileContext(IOwinContext context, StaticFileOptions options, PathString matchUrl);
    public bool get_IsHeadMethod();
    public bool get_IsRangeRequest();
    public bool ValidateMethod();
    public bool ValidatePath();
    public bool LookupContentType();
    public bool LookupFileInfo();
    public void ComprehendRequestHeaders();
    private void ComputeIfMatch();
    private void ComputeIfModifiedSince();
    private void ComputeRange();
    public void ApplyResponseHeaders(int statusCode);
    public PreconditionState GetPreconditionState();
    private static PreconditionState GetMaxPreconditionState(PreconditionState[] states);
    public Task SendStatusAsync(int statusCode);
    public Task SendAsync();
    internal Task SendRangeAsync();
    private string ComputeContentRange(Tuple`2<long, long> range, Int64& start, Int64& length);
}
public class Microsoft.Owin.StaticFiles.StaticFileMiddleware : object {
    private StaticFileOptions _options;
    private PathString _matchUrl;
    private Func`2<IDictionary`2<string, object>, Task> _next;
    public StaticFileMiddleware(Func`2<IDictionary`2<string, object>, Task> next, StaticFileOptions options);
    public Task Invoke(IDictionary`2<string, object> environment);
}
public class Microsoft.Owin.StaticFiles.StaticFileOptions : SharedOptionsBase`1<StaticFileOptions> {
    [CompilerGeneratedAttribute]
private IContentTypeProvider <ContentTypeProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ServeUnknownFileTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<StaticFileResponseContext> <OnPrepareResponse>k__BackingField;
    public IContentTypeProvider ContentTypeProvider { get; public set; }
    public string DefaultContentType { get; public set; }
    public bool ServeUnknownFileTypes { get; public set; }
    public Action`1<StaticFileResponseContext> OnPrepareResponse { get; public set; }
    public StaticFileOptions(SharedOptions sharedOptions);
    [CompilerGeneratedAttribute]
public IContentTypeProvider get_ContentTypeProvider();
    [CompilerGeneratedAttribute]
public void set_ContentTypeProvider(IContentTypeProvider value);
    [CompilerGeneratedAttribute]
public string get_DefaultContentType();
    [CompilerGeneratedAttribute]
public void set_DefaultContentType(string value);
    [CompilerGeneratedAttribute]
public bool get_ServeUnknownFileTypes();
    [CompilerGeneratedAttribute]
public void set_ServeUnknownFileTypes(bool value);
    [CompilerGeneratedAttribute]
public Action`1<StaticFileResponseContext> get_OnPrepareResponse();
    [CompilerGeneratedAttribute]
public void set_OnPrepareResponse(Action`1<StaticFileResponseContext> value);
}
public class Microsoft.Owin.StaticFiles.StaticFileResponseContext : object {
    [CompilerGeneratedAttribute]
private IOwinContext <OwinContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileInfo <File>k__BackingField;
    public IOwinContext OwinContext { get; internal set; }
    public IFileInfo File { get; internal set; }
    [CompilerGeneratedAttribute]
public IOwinContext get_OwinContext();
    [CompilerGeneratedAttribute]
internal void set_OwinContext(IOwinContext value);
    [CompilerGeneratedAttribute]
public IFileInfo get_File();
    [CompilerGeneratedAttribute]
internal void set_File(IFileInfo value);
}
internal class Microsoft.Owin.StaticFiles.StreamCopyOperation : object {
    private static int DefaultBufferSize;
    private TaskCompletionSource`1<object> _tcs;
    private Stream _source;
    private Stream _destination;
    private Byte[] _buffer;
    private AsyncCallback _readCallback;
    private AsyncCallback _writeCallback;
    private Nullable`1<long> _bytesRemaining;
    private CancellationToken _cancel;
    internal StreamCopyOperation(Stream source, Stream destination, Nullable`1<long> bytesRemaining, CancellationToken cancel);
    internal StreamCopyOperation(Stream source, Stream destination, Nullable`1<long> bytesRemaining, int bufferSize, CancellationToken cancel);
    internal StreamCopyOperation(Stream source, Stream destination, Nullable`1<long> bytesRemaining, Byte[] buffer, CancellationToken cancel);
    internal Task Start();
    private void Complete();
    private bool CheckCancelled();
    private void Fail(Exception ex);
    private void ReadNextSegment();
    private void ReadCallback(IAsyncResult async);
    private void WriteToOutputStream(int count);
    private void WriteCallback(IAsyncResult async);
}
[ExtensionAttribute]
public static class Owin.DefaultFilesExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseDefaultFiles(IAppBuilder builder);
    [ExtensionAttribute]
public static IAppBuilder UseDefaultFiles(IAppBuilder builder, string requestPath);
    [ExtensionAttribute]
public static IAppBuilder UseDefaultFiles(IAppBuilder builder, DefaultFilesOptions options);
}
[ExtensionAttribute]
public static class Owin.DirectoryBrowserExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseDirectoryBrowser(IAppBuilder builder);
    [ExtensionAttribute]
public static IAppBuilder UseDirectoryBrowser(IAppBuilder builder, string requestPath);
    [ExtensionAttribute]
public static IAppBuilder UseDirectoryBrowser(IAppBuilder builder, DirectoryBrowserOptions options);
}
[ExtensionAttribute]
public static class Owin.FileServerExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseFileServer(IAppBuilder builder);
    [ExtensionAttribute]
public static IAppBuilder UseFileServer(IAppBuilder builder, bool enableDirectoryBrowsing);
    [ExtensionAttribute]
public static IAppBuilder UseFileServer(IAppBuilder builder, string requestPath);
    [ExtensionAttribute]
public static IAppBuilder UseFileServer(IAppBuilder builder, FileServerOptions options);
}
[ExtensionAttribute]
public static class Owin.StaticFileExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseStaticFiles(IAppBuilder builder);
    [ExtensionAttribute]
public static IAppBuilder UseStaticFiles(IAppBuilder builder, string requestPath);
    [ExtensionAttribute]
public static IAppBuilder UseStaticFiles(IAppBuilder builder, StaticFileOptions options);
}
