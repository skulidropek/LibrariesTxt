public class Microsoft.Owin.Testing.OwinClientHandler : HttpMessageHandler {
    private Func`2<IDictionary`2<string, object>, Task> _next;
    public OwinClientHandler(Func`2<IDictionary`2<string, object>, Task> next);
    [AsyncStateMachineAttribute("Microsoft.Owin.Testing.OwinClientHandler/<SendAsync>d__2")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class Microsoft.Owin.Testing.RequestBuilder : object {
    private TestServer _server;
    private HttpRequestMessage _req;
    public RequestBuilder(TestServer server, string path);
    public RequestBuilder And(Action`1<HttpRequestMessage> configure);
    public RequestBuilder AddHeader(string name, string value);
    public Task`1<HttpResponseMessage> SendAsync(string method);
    public Task`1<HttpResponseMessage> GetAsync();
    public Task`1<HttpResponseMessage> PostAsync();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Owin.Testing.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InvalidHeaderName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InvalidHeaderName();
}
internal class Microsoft.Owin.Testing.ResponseStream : Stream {
    private bool _disposed;
    private bool _aborted;
    private Exception _abortException;
    private ConcurrentQueue`1<Byte[]> _bufferedData;
    private ArraySegment`1<byte> _topBuffer;
    private SemaphoreSlim _readLock;
    private SemaphoreSlim _writeLock;
    private TaskCompletionSource`1<object> _readWaitingForData;
    private object _signalReadLock;
    private Action _onFirstWrite;
    private bool _firstWrite;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal ResponseStream(Action onFirstWrite);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    [AsyncStateMachineAttribute("Microsoft.Owin.Testing.ResponseStream/<ReadAsync>d__30")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    private void FirstWrite();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    private static void VerifyBuffer(Byte[] buffer, int offset, int count, bool allowEmpty);
    private void SignalDataAvailable();
    private Task WaitForDataAsync();
    internal void Abort();
    internal void Abort(Exception innerException);
    private void CheckAborted();
    protected virtual void Dispose(bool disposing);
    private void CheckDisposed();
    [CompilerGeneratedAttribute]
private bool <SignalDataAvailable>b__37_0();
}
public class Microsoft.Owin.Testing.TestServer : object {
    private IDisposable _started;
    private Func`2<IDictionary`2<string, object>, Task> _next;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private Uri <BaseAddress>k__BackingField;
    public HttpMessageHandler Handler { get; }
    public HttpClient HttpClient { get; }
    public Uri BaseAddress { get; public set; }
    public HttpMessageHandler get_Handler();
    public HttpClient get_HttpClient();
    [CompilerGeneratedAttribute]
public Uri get_BaseAddress();
    [CompilerGeneratedAttribute]
public void set_BaseAddress(Uri value);
    public static TestServer Create(Action`1<IAppBuilder> startup);
    public static TestServer Create();
    protected void Configure(Action`1<IAppBuilder> startup);
    protected void Configure();
    protected void Configure(Action`1<IAppBuilder> startup, StartOptions options);
    protected void Configure(StartOptions options);
    public Task Invoke(IDictionary`2<string, object> environment);
    public RequestBuilder CreateRequest(string path);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
