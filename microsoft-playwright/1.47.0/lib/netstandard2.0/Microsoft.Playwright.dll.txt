[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.AccessibilitySnapshotOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <InterestingOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private IElementHandle <Root>k__BackingField;
    [JsonPropertyNameAttribute("interestingOnly")]
public Nullable`1<bool> InterestingOnly { get; public set; }
    [JsonPropertyNameAttribute("root")]
public IElementHandle Root { get; public set; }
    [NullableContextAttribute("1")]
public AccessibilitySnapshotOptions(AccessibilitySnapshotOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_InterestingOnly();
    [CompilerGeneratedAttribute]
public void set_InterestingOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IElementHandle get_Root();
    [CompilerGeneratedAttribute]
public void set_Root(IElementHandle value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.APIRequestContextOptions : object {
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <DataByte>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DataObject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FailOnStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private IFormData <Form>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, string>> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreHTTPSErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxRedirects>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private IFormData <Multipart>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, object>> <Params>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParamsString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("data")]
public string Data { get; public set; }
    [JsonPropertyNameAttribute("dataByte")]
public Byte[] DataByte { get; public set; }
    [JsonPropertyNameAttribute("dataObject")]
public object DataObject { get; public set; }
    [JsonPropertyNameAttribute("dataString")]
public string DataString { get; public set; }
    [JsonPropertyNameAttribute("failOnStatusCode")]
public Nullable`1<bool> FailOnStatusCode { get; public set; }
    [JsonPropertyNameAttribute("form")]
public IFormData Form { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("headers")]
public IEnumerable`1<KeyValuePair`2<string, string>> Headers { get; public set; }
    [JsonPropertyNameAttribute("ignoreHTTPSErrors")]
public Nullable`1<bool> IgnoreHTTPSErrors { get; public set; }
    [JsonPropertyNameAttribute("maxRedirects")]
public Nullable`1<int> MaxRedirects { get; public set; }
    [JsonPropertyNameAttribute("maxRetries")]
public Nullable`1<int> MaxRetries { get; public set; }
    [JsonPropertyNameAttribute("method")]
public string Method { get; public set; }
    [JsonPropertyNameAttribute("multipart")]
public IFormData Multipart { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("params")]
public IEnumerable`1<KeyValuePair`2<string, object>> Params { get; public set; }
    [JsonPropertyNameAttribute("paramsString")]
public string ParamsString { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public APIRequestContextOptions(APIRequestContextOptions clone);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_DataByte();
    [CompilerGeneratedAttribute]
public void set_DataByte(Byte[] value);
    [CompilerGeneratedAttribute]
public object get_DataObject();
    [CompilerGeneratedAttribute]
public void set_DataObject(object value);
    [CompilerGeneratedAttribute]
public string get_DataString();
    [CompilerGeneratedAttribute]
public void set_DataString(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FailOnStatusCode();
    [CompilerGeneratedAttribute]
public void set_FailOnStatusCode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IFormData get_Form();
    [CompilerGeneratedAttribute]
public void set_Form(IFormData value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, string>> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IEnumerable`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreHTTPSErrors();
    [CompilerGeneratedAttribute]
public void set_IgnoreHTTPSErrors(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxRedirects();
    [CompilerGeneratedAttribute]
public void set_MaxRedirects(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxRetries();
    [CompilerGeneratedAttribute]
public void set_MaxRetries(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public IFormData get_Multipart();
    [CompilerGeneratedAttribute]
public void set_Multipart(IFormData value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, object>> get_Params();
    [CompilerGeneratedAttribute]
public void set_Params(IEnumerable`1<KeyValuePair`2<string, object>> value);
    [CompilerGeneratedAttribute]
public string get_ParamsString();
    [CompilerGeneratedAttribute]
public void set_ParamsString(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.APIRequestContextStorageStateOptions : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [NullableContextAttribute("1")]
public APIRequestContextStorageStateOptions(APIRequestContextStorageStateOptions clone);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.APIRequestNewContextOptions : object {
    [CompilerGeneratedAttribute]
private string <BaseURL>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<ClientCertificate> <ClientCertificates>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, string>> <ExtraHTTPHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpCredentials <HttpCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreHTTPSErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private Proxy <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorageState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorageStatePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [JsonPropertyNameAttribute("baseURL")]
public string BaseURL { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("clientCertificates")]
public IEnumerable`1<ClientCertificate> ClientCertificates { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("extraHTTPHeaders")]
public IEnumerable`1<KeyValuePair`2<string, string>> ExtraHTTPHeaders { get; public set; }
    [JsonPropertyNameAttribute("httpCredentials")]
public HttpCredentials HttpCredentials { get; public set; }
    [JsonPropertyNameAttribute("ignoreHTTPSErrors")]
public Nullable`1<bool> IgnoreHTTPSErrors { get; public set; }
    [JsonPropertyNameAttribute("proxy")]
public Proxy Proxy { get; public set; }
    [JsonPropertyNameAttribute("storageState")]
public string StorageState { get; public set; }
    [JsonPropertyNameAttribute("storageStatePath")]
public string StorageStatePath { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("userAgent")]
public string UserAgent { get; public set; }
    [NullableContextAttribute("1")]
public APIRequestNewContextOptions(APIRequestNewContextOptions clone);
    [CompilerGeneratedAttribute]
public string get_BaseURL();
    [CompilerGeneratedAttribute]
public void set_BaseURL(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ClientCertificate> get_ClientCertificates();
    [CompilerGeneratedAttribute]
public void set_ClientCertificates(IEnumerable`1<ClientCertificate> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, string>> get_ExtraHTTPHeaders();
    [CompilerGeneratedAttribute]
public void set_ExtraHTTPHeaders(IEnumerable`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public HttpCredentials get_HttpCredentials();
    [CompilerGeneratedAttribute]
public void set_HttpCredentials(HttpCredentials value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreHTTPSErrors();
    [CompilerGeneratedAttribute]
public void set_IgnoreHTTPSErrors(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Proxy get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(Proxy value);
    [CompilerGeneratedAttribute]
public string get_StorageState();
    [CompilerGeneratedAttribute]
public void set_StorageState(string value);
    [CompilerGeneratedAttribute]
public string get_StorageStatePath();
    [CompilerGeneratedAttribute]
public void set_StorageStatePath(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public string get_UserAgent();
    [CompilerGeneratedAttribute]
public void set_UserAgent(string value);
}
public enum Microsoft.Playwright.AriaRole : Enum {
    public int value__;
    [EnumMemberAttribute]
public static AriaRole Alert;
    [EnumMemberAttribute]
public static AriaRole Alertdialog;
    [EnumMemberAttribute]
public static AriaRole Application;
    [EnumMemberAttribute]
public static AriaRole Article;
    [EnumMemberAttribute]
public static AriaRole Banner;
    [EnumMemberAttribute]
public static AriaRole Blockquote;
    [EnumMemberAttribute]
public static AriaRole Button;
    [EnumMemberAttribute]
public static AriaRole Caption;
    [EnumMemberAttribute]
public static AriaRole Cell;
    [EnumMemberAttribute]
public static AriaRole Checkbox;
    [EnumMemberAttribute]
public static AriaRole Code;
    [EnumMemberAttribute]
public static AriaRole Columnheader;
    [EnumMemberAttribute]
public static AriaRole Combobox;
    [EnumMemberAttribute]
public static AriaRole Complementary;
    [EnumMemberAttribute]
public static AriaRole Contentinfo;
    [EnumMemberAttribute]
public static AriaRole Definition;
    [EnumMemberAttribute]
public static AriaRole Deletion;
    [EnumMemberAttribute]
public static AriaRole Dialog;
    [EnumMemberAttribute]
public static AriaRole Directory;
    [EnumMemberAttribute]
public static AriaRole Document;
    [EnumMemberAttribute]
public static AriaRole Emphasis;
    [EnumMemberAttribute]
public static AriaRole Feed;
    [EnumMemberAttribute]
public static AriaRole Figure;
    [EnumMemberAttribute]
public static AriaRole Form;
    [EnumMemberAttribute]
public static AriaRole Generic;
    [EnumMemberAttribute]
public static AriaRole Grid;
    [EnumMemberAttribute]
public static AriaRole Gridcell;
    [EnumMemberAttribute]
public static AriaRole Group;
    [EnumMemberAttribute]
public static AriaRole Heading;
    [EnumMemberAttribute]
public static AriaRole Img;
    [EnumMemberAttribute]
public static AriaRole Insertion;
    [EnumMemberAttribute]
public static AriaRole Link;
    [EnumMemberAttribute]
public static AriaRole List;
    [EnumMemberAttribute]
public static AriaRole Listbox;
    [EnumMemberAttribute]
public static AriaRole Listitem;
    [EnumMemberAttribute]
public static AriaRole Log;
    [EnumMemberAttribute]
public static AriaRole Main;
    [EnumMemberAttribute]
public static AriaRole Marquee;
    [EnumMemberAttribute]
public static AriaRole Math;
    [EnumMemberAttribute]
public static AriaRole Meter;
    [EnumMemberAttribute]
public static AriaRole Menu;
    [EnumMemberAttribute]
public static AriaRole Menubar;
    [EnumMemberAttribute]
public static AriaRole Menuitem;
    [EnumMemberAttribute]
public static AriaRole Menuitemcheckbox;
    [EnumMemberAttribute]
public static AriaRole Menuitemradio;
    [EnumMemberAttribute]
public static AriaRole Navigation;
    [EnumMemberAttribute]
public static AriaRole None;
    [EnumMemberAttribute]
public static AriaRole Note;
    [EnumMemberAttribute]
public static AriaRole Option;
    [EnumMemberAttribute]
public static AriaRole Paragraph;
    [EnumMemberAttribute]
public static AriaRole Presentation;
    [EnumMemberAttribute]
public static AriaRole Progressbar;
    [EnumMemberAttribute]
public static AriaRole Radio;
    [EnumMemberAttribute]
public static AriaRole Radiogroup;
    [EnumMemberAttribute]
public static AriaRole Region;
    [EnumMemberAttribute]
public static AriaRole Row;
    [EnumMemberAttribute]
public static AriaRole Rowgroup;
    [EnumMemberAttribute]
public static AriaRole Rowheader;
    [EnumMemberAttribute]
public static AriaRole Scrollbar;
    [EnumMemberAttribute]
public static AriaRole Search;
    [EnumMemberAttribute]
public static AriaRole Searchbox;
    [EnumMemberAttribute]
public static AriaRole Separator;
    [EnumMemberAttribute]
public static AriaRole Slider;
    [EnumMemberAttribute]
public static AriaRole Spinbutton;
    [EnumMemberAttribute]
public static AriaRole Status;
    [EnumMemberAttribute]
public static AriaRole Strong;
    [EnumMemberAttribute]
public static AriaRole Subscript;
    [EnumMemberAttribute]
public static AriaRole Superscript;
    [EnumMemberAttribute]
public static AriaRole Switch;
    [EnumMemberAttribute]
public static AriaRole Tab;
    [EnumMemberAttribute]
public static AriaRole Table;
    [EnumMemberAttribute]
public static AriaRole Tablist;
    [EnumMemberAttribute]
public static AriaRole Tabpanel;
    [EnumMemberAttribute]
public static AriaRole Term;
    [EnumMemberAttribute]
public static AriaRole Textbox;
    [EnumMemberAttribute]
public static AriaRole Time;
    [EnumMemberAttribute]
public static AriaRole Timer;
    [EnumMemberAttribute]
public static AriaRole Toolbar;
    [EnumMemberAttribute]
public static AriaRole Tooltip;
    [EnumMemberAttribute]
public static AriaRole Tree;
    [EnumMemberAttribute]
public static AriaRole Treegrid;
    [EnumMemberAttribute]
public static AriaRole Treeitem;
}
public static class Microsoft.Playwright.Assertions : object {
    public static void SetDefaultExpectTimeout(float timeout);
    public static ILocatorAssertions Expect(ILocator locator);
    public static IPageAssertions Expect(IPage page);
    public static IAPIResponseAssertions Expect(IAPIResponse response);
}
public class Microsoft.Playwright.BindingSource : object {
    [CompilerGeneratedAttribute]
private IBrowserContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IPage <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private IFrame <Frame>k__BackingField;
    public IBrowserContext Context { get; public set; }
    public IPage Page { get; public set; }
    public IFrame Frame { get; public set; }
    [CompilerGeneratedAttribute]
public IBrowserContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(IBrowserContext value);
    [CompilerGeneratedAttribute]
public IPage get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(IPage value);
    [CompilerGeneratedAttribute]
public IFrame get_Frame();
    [CompilerGeneratedAttribute]
public void set_Frame(IFrame value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.BrowserCloseOptions : object {
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [JsonPropertyNameAttribute("reason")]
public string Reason { get; public set; }
    [NullableContextAttribute("1")]
public BrowserCloseOptions(BrowserCloseOptions clone);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.BrowserContextClearCookiesOptions : object {
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DomainRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DomainString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NameRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PathRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathString>k__BackingField;
    [JsonPropertyNameAttribute("domain")]
public string Domain { get; public set; }
    [JsonPropertyNameAttribute("domainRegex")]
public Regex DomainRegex { get; public set; }
    [JsonPropertyNameAttribute("domainString")]
public string DomainString { get; public set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("nameRegex")]
public Regex NameRegex { get; public set; }
    [JsonPropertyNameAttribute("nameString")]
public string NameString { get; public set; }
    [JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [JsonPropertyNameAttribute("pathRegex")]
public Regex PathRegex { get; public set; }
    [JsonPropertyNameAttribute("pathString")]
public string PathString { get; public set; }
    [NullableContextAttribute("1")]
public BrowserContextClearCookiesOptions(BrowserContextClearCookiesOptions clone);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
public void set_Domain(string value);
    [CompilerGeneratedAttribute]
public Regex get_DomainRegex();
    [CompilerGeneratedAttribute]
public void set_DomainRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_DomainString();
    [CompilerGeneratedAttribute]
public void set_DomainString(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Regex get_NameRegex();
    [CompilerGeneratedAttribute]
public void set_NameRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_NameString();
    [CompilerGeneratedAttribute]
public void set_NameString(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public Regex get_PathRegex();
    [CompilerGeneratedAttribute]
public void set_PathRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_PathString();
    [CompilerGeneratedAttribute]
public void set_PathString(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.BrowserContextCloseOptions : object {
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [JsonPropertyNameAttribute("reason")]
public string Reason { get; public set; }
    [NullableContextAttribute("1")]
public BrowserContextCloseOptions(BrowserContextCloseOptions clone);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Playwright.BrowserContextCookiesResult : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Expires>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Secure>k__BackingField;
    [CompilerGeneratedAttribute]
private SameSiteAttribute <SameSite>k__BackingField;
    [RequiredAttribute]
[JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("value")]
public string Value { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("domain")]
public string Domain { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("expires")]
public float Expires { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("httpOnly")]
public bool HttpOnly { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("secure")]
public bool Secure { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("sameSite")]
public SameSiteAttribute SameSite { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
public void set_Domain(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public float get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(float value);
    [CompilerGeneratedAttribute]
public bool get_HttpOnly();
    [CompilerGeneratedAttribute]
public void set_HttpOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_Secure();
    [CompilerGeneratedAttribute]
public void set_Secure(bool value);
    [CompilerGeneratedAttribute]
public SameSiteAttribute get_SameSite();
    [CompilerGeneratedAttribute]
public void set_SameSite(SameSiteAttribute value);
}
public class Microsoft.Playwright.BrowserContextExposeBindingOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Handle>k__BackingField;
    [JsonPropertyNameAttribute("handle")]
[ObsoleteAttribute]
public Nullable`1<bool> Handle { get; public set; }
    [NullableContextAttribute("1")]
public BrowserContextExposeBindingOptions(BrowserContextExposeBindingOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Handle();
    [CompilerGeneratedAttribute]
public void set_Handle(Nullable`1<bool> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.BrowserContextGrantPermissionsOptions : object {
    [CompilerGeneratedAttribute]
private string <Origin>k__BackingField;
    [JsonPropertyNameAttribute("origin")]
public string Origin { get; public set; }
    [NullableContextAttribute("1")]
public BrowserContextGrantPermissionsOptions(BrowserContextGrantPermissionsOptions clone);
    [CompilerGeneratedAttribute]
public string get_Origin();
    [CompilerGeneratedAttribute]
public void set_Origin(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.BrowserContextRouteFromHAROptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<HarNotFound> <NotFound>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Update>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RouteFromHarUpdateContentPolicy> <UpdateContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<HarMode> <UpdateMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UrlRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlString>k__BackingField;
    [JsonPropertyNameAttribute("notFound")]
public Nullable`1<HarNotFound> NotFound { get; public set; }
    [JsonPropertyNameAttribute("update")]
public Nullable`1<bool> Update { get; public set; }
    [JsonPropertyNameAttribute("updateContent")]
public Nullable`1<RouteFromHarUpdateContentPolicy> UpdateContent { get; public set; }
    [JsonPropertyNameAttribute("updateMode")]
public Nullable`1<HarMode> UpdateMode { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [JsonPropertyNameAttribute("urlRegex")]
public Regex UrlRegex { get; public set; }
    [JsonPropertyNameAttribute("urlString")]
public string UrlString { get; public set; }
    [NullableContextAttribute("1")]
public BrowserContextRouteFromHAROptions(BrowserContextRouteFromHAROptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<HarNotFound> get_NotFound();
    [CompilerGeneratedAttribute]
public void set_NotFound(Nullable`1<HarNotFound> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Update();
    [CompilerGeneratedAttribute]
public void set_Update(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<RouteFromHarUpdateContentPolicy> get_UpdateContent();
    [CompilerGeneratedAttribute]
public void set_UpdateContent(Nullable`1<RouteFromHarUpdateContentPolicy> value);
    [CompilerGeneratedAttribute]
public Nullable`1<HarMode> get_UpdateMode();
    [CompilerGeneratedAttribute]
public void set_UpdateMode(Nullable`1<HarMode> value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public Regex get_UrlRegex();
    [CompilerGeneratedAttribute]
public void set_UrlRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_UrlString();
    [CompilerGeneratedAttribute]
public void set_UrlString(string value);
}
public class Microsoft.Playwright.BrowserContextRouteOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Times>k__BackingField;
    [JsonPropertyNameAttribute("times")]
public Nullable`1<int> Times { get; public set; }
    [NullableContextAttribute("1")]
public BrowserContextRouteOptions(BrowserContextRouteOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Times();
    [CompilerGeneratedAttribute]
public void set_Times(Nullable`1<int> value);
}
public class Microsoft.Playwright.BrowserContextRunAndWaitForConsoleMessageOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IConsoleMessage, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("predicate")]
public Func`2<IConsoleMessage, bool> Predicate { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public BrowserContextRunAndWaitForConsoleMessageOptions(BrowserContextRunAndWaitForConsoleMessageOptions clone);
    [CompilerGeneratedAttribute]
public Func`2<IConsoleMessage, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<IConsoleMessage, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.BrowserContextRunAndWaitForPageOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IPage, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("predicate")]
public Func`2<IPage, bool> Predicate { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public BrowserContextRunAndWaitForPageOptions(BrowserContextRunAndWaitForPageOptions clone);
    [CompilerGeneratedAttribute]
public Func`2<IPage, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<IPage, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.BrowserContextStorageStateOptions : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [NullableContextAttribute("1")]
public BrowserContextStorageStateOptions(BrowserContextStorageStateOptions clone);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
public class Microsoft.Playwright.BrowserContextUnrouteAllOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<UnrouteBehavior> <Behavior>k__BackingField;
    [JsonPropertyNameAttribute("behavior")]
public Nullable`1<UnrouteBehavior> Behavior { get; public set; }
    [NullableContextAttribute("1")]
public BrowserContextUnrouteAllOptions(BrowserContextUnrouteAllOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<UnrouteBehavior> get_Behavior();
    [CompilerGeneratedAttribute]
public void set_Behavior(Nullable`1<UnrouteBehavior> value);
}
public class Microsoft.Playwright.BrowserContextWaitForConsoleMessageOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IConsoleMessage, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("predicate")]
public Func`2<IConsoleMessage, bool> Predicate { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public BrowserContextWaitForConsoleMessageOptions(BrowserContextWaitForConsoleMessageOptions clone);
    [CompilerGeneratedAttribute]
public Func`2<IConsoleMessage, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<IConsoleMessage, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.BrowserContextWaitForPageOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IPage, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("predicate")]
public Func`2<IPage, bool> Predicate { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public BrowserContextWaitForPageOptions(BrowserContextWaitForPageOptions clone);
    [CompilerGeneratedAttribute]
public Func`2<IPage, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<IPage, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.BrowserNewContextOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AcceptDownloads>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseURL>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <BypassCSP>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<ClientCertificate> <ClientCertificates>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ColorScheme> <ColorScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <DeviceScaleFactor>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, string>> <ExtraHTTPHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ForcedColors> <ForcedColors>k__BackingField;
    [CompilerGeneratedAttribute]
private Geolocation <Geolocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasTouch>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpCredentials <HttpCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreHTTPSErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsMobile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <JavaScriptEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Locale>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Offline>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<string> <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private Proxy <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<HarContentPolicy> <RecordHarContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<HarMode> <RecordHarMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RecordHarOmitContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecordHarPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecordHarUrlFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RecordHarUrlFilterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecordHarUrlFilterString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecordVideoDir>k__BackingField;
    [CompilerGeneratedAttribute]
private RecordVideoSize <RecordVideoSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReducedMotion> <ReducedMotion>k__BackingField;
    [CompilerGeneratedAttribute]
private ScreenSize <ScreenSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ServiceWorkerPolicy> <ServiceWorkers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorageState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorageStatePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <StrictSelectors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimezoneId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewportSize <ViewportSize>k__BackingField;
    [JsonPropertyNameAttribute("acceptDownloads")]
public Nullable`1<bool> AcceptDownloads { get; public set; }
    [JsonPropertyNameAttribute("baseURL")]
public string BaseURL { get; public set; }
    [JsonPropertyNameAttribute("bypassCSP")]
public Nullable`1<bool> BypassCSP { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("clientCertificates")]
public IEnumerable`1<ClientCertificate> ClientCertificates { get; public set; }
    [JsonPropertyNameAttribute("colorScheme")]
public Nullable`1<ColorScheme> ColorScheme { get; public set; }
    [JsonPropertyNameAttribute("deviceScaleFactor")]
public Nullable`1<float> DeviceScaleFactor { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("extraHTTPHeaders")]
public IEnumerable`1<KeyValuePair`2<string, string>> ExtraHTTPHeaders { get; public set; }
    [JsonPropertyNameAttribute("forcedColors")]
public Nullable`1<ForcedColors> ForcedColors { get; public set; }
    [JsonPropertyNameAttribute("geolocation")]
public Geolocation Geolocation { get; public set; }
    [JsonPropertyNameAttribute("hasTouch")]
public Nullable`1<bool> HasTouch { get; public set; }
    [JsonPropertyNameAttribute("httpCredentials")]
public HttpCredentials HttpCredentials { get; public set; }
    [JsonPropertyNameAttribute("ignoreHTTPSErrors")]
public Nullable`1<bool> IgnoreHTTPSErrors { get; public set; }
    [JsonPropertyNameAttribute("isMobile")]
public Nullable`1<bool> IsMobile { get; public set; }
    [JsonPropertyNameAttribute("javaScriptEnabled")]
public Nullable`1<bool> JavaScriptEnabled { get; public set; }
    [JsonPropertyNameAttribute("locale")]
public string Locale { get; public set; }
    [JsonPropertyNameAttribute("offline")]
public Nullable`1<bool> Offline { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("permissions")]
public IEnumerable`1<string> Permissions { get; public set; }
    [JsonPropertyNameAttribute("proxy")]
public Proxy Proxy { get; public set; }
    [JsonPropertyNameAttribute("recordHarContent")]
public Nullable`1<HarContentPolicy> RecordHarContent { get; public set; }
    [JsonPropertyNameAttribute("recordHarMode")]
public Nullable`1<HarMode> RecordHarMode { get; public set; }
    [JsonPropertyNameAttribute("recordHarOmitContent")]
public Nullable`1<bool> RecordHarOmitContent { get; public set; }
    [JsonPropertyNameAttribute("recordHarPath")]
public string RecordHarPath { get; public set; }
    [JsonPropertyNameAttribute("recordHarUrlFilter")]
public string RecordHarUrlFilter { get; public set; }
    [JsonPropertyNameAttribute("recordHarUrlFilterRegex")]
public Regex RecordHarUrlFilterRegex { get; public set; }
    [JsonPropertyNameAttribute("recordHarUrlFilterString")]
public string RecordHarUrlFilterString { get; public set; }
    [JsonPropertyNameAttribute("recordVideoDir")]
public string RecordVideoDir { get; public set; }
    [JsonPropertyNameAttribute("recordVideoSize")]
public RecordVideoSize RecordVideoSize { get; public set; }
    [JsonPropertyNameAttribute("reducedMotion")]
public Nullable`1<ReducedMotion> ReducedMotion { get; public set; }
    [JsonPropertyNameAttribute("screen")]
public ScreenSize ScreenSize { get; public set; }
    [JsonPropertyNameAttribute("serviceWorkers")]
public Nullable`1<ServiceWorkerPolicy> ServiceWorkers { get; public set; }
    [JsonPropertyNameAttribute("storageState")]
public string StorageState { get; public set; }
    [JsonPropertyNameAttribute("storageStatePath")]
public string StorageStatePath { get; public set; }
    [JsonPropertyNameAttribute("strictSelectors")]
public Nullable`1<bool> StrictSelectors { get; public set; }
    [JsonPropertyNameAttribute("timezoneId")]
public string TimezoneId { get; public set; }
    [JsonPropertyNameAttribute("userAgent")]
public string UserAgent { get; public set; }
    [JsonPropertyNameAttribute("viewport")]
public ViewportSize ViewportSize { get; public set; }
    [NullableContextAttribute("1")]
public BrowserNewContextOptions(BrowserNewContextOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AcceptDownloads();
    [CompilerGeneratedAttribute]
public void set_AcceptDownloads(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_BaseURL();
    [CompilerGeneratedAttribute]
public void set_BaseURL(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_BypassCSP();
    [CompilerGeneratedAttribute]
public void set_BypassCSP(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ClientCertificate> get_ClientCertificates();
    [CompilerGeneratedAttribute]
public void set_ClientCertificates(IEnumerable`1<ClientCertificate> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ColorScheme> get_ColorScheme();
    [CompilerGeneratedAttribute]
public void set_ColorScheme(Nullable`1<ColorScheme> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_DeviceScaleFactor();
    [CompilerGeneratedAttribute]
public void set_DeviceScaleFactor(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, string>> get_ExtraHTTPHeaders();
    [CompilerGeneratedAttribute]
public void set_ExtraHTTPHeaders(IEnumerable`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ForcedColors> get_ForcedColors();
    [CompilerGeneratedAttribute]
public void set_ForcedColors(Nullable`1<ForcedColors> value);
    [CompilerGeneratedAttribute]
public Geolocation get_Geolocation();
    [CompilerGeneratedAttribute]
public void set_Geolocation(Geolocation value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasTouch();
    [CompilerGeneratedAttribute]
public void set_HasTouch(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public HttpCredentials get_HttpCredentials();
    [CompilerGeneratedAttribute]
public void set_HttpCredentials(HttpCredentials value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreHTTPSErrors();
    [CompilerGeneratedAttribute]
public void set_IgnoreHTTPSErrors(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsMobile();
    [CompilerGeneratedAttribute]
public void set_IsMobile(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_JavaScriptEnabled();
    [CompilerGeneratedAttribute]
public void set_JavaScriptEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Locale();
    [CompilerGeneratedAttribute]
public void set_Locale(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Offline();
    [CompilerGeneratedAttribute]
public void set_Offline(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Permissions();
    [CompilerGeneratedAttribute]
public void set_Permissions(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Proxy get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(Proxy value);
    [CompilerGeneratedAttribute]
public Nullable`1<HarContentPolicy> get_RecordHarContent();
    [CompilerGeneratedAttribute]
public void set_RecordHarContent(Nullable`1<HarContentPolicy> value);
    [CompilerGeneratedAttribute]
public Nullable`1<HarMode> get_RecordHarMode();
    [CompilerGeneratedAttribute]
public void set_RecordHarMode(Nullable`1<HarMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RecordHarOmitContent();
    [CompilerGeneratedAttribute]
public void set_RecordHarOmitContent(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_RecordHarPath();
    [CompilerGeneratedAttribute]
public void set_RecordHarPath(string value);
    [CompilerGeneratedAttribute]
public string get_RecordHarUrlFilter();
    [CompilerGeneratedAttribute]
public void set_RecordHarUrlFilter(string value);
    [CompilerGeneratedAttribute]
public Regex get_RecordHarUrlFilterRegex();
    [CompilerGeneratedAttribute]
public void set_RecordHarUrlFilterRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_RecordHarUrlFilterString();
    [CompilerGeneratedAttribute]
public void set_RecordHarUrlFilterString(string value);
    [CompilerGeneratedAttribute]
public string get_RecordVideoDir();
    [CompilerGeneratedAttribute]
public void set_RecordVideoDir(string value);
    [CompilerGeneratedAttribute]
public RecordVideoSize get_RecordVideoSize();
    [CompilerGeneratedAttribute]
public void set_RecordVideoSize(RecordVideoSize value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReducedMotion> get_ReducedMotion();
    [CompilerGeneratedAttribute]
public void set_ReducedMotion(Nullable`1<ReducedMotion> value);
    [CompilerGeneratedAttribute]
public ScreenSize get_ScreenSize();
    [CompilerGeneratedAttribute]
public void set_ScreenSize(ScreenSize value);
    [CompilerGeneratedAttribute]
public Nullable`1<ServiceWorkerPolicy> get_ServiceWorkers();
    [CompilerGeneratedAttribute]
public void set_ServiceWorkers(Nullable`1<ServiceWorkerPolicy> value);
    [CompilerGeneratedAttribute]
public string get_StorageState();
    [CompilerGeneratedAttribute]
public void set_StorageState(string value);
    [CompilerGeneratedAttribute]
public string get_StorageStatePath();
    [CompilerGeneratedAttribute]
public void set_StorageStatePath(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_StrictSelectors();
    [CompilerGeneratedAttribute]
public void set_StrictSelectors(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_TimezoneId();
    [CompilerGeneratedAttribute]
public void set_TimezoneId(string value);
    [CompilerGeneratedAttribute]
public string get_UserAgent();
    [CompilerGeneratedAttribute]
public void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
public ViewportSize get_ViewportSize();
    [CompilerGeneratedAttribute]
public void set_ViewportSize(ViewportSize value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.BrowserNewPageOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AcceptDownloads>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseURL>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <BypassCSP>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<ClientCertificate> <ClientCertificates>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ColorScheme> <ColorScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <DeviceScaleFactor>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, string>> <ExtraHTTPHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ForcedColors> <ForcedColors>k__BackingField;
    [CompilerGeneratedAttribute]
private Geolocation <Geolocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasTouch>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpCredentials <HttpCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreHTTPSErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsMobile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <JavaScriptEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Locale>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Offline>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<string> <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private Proxy <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<HarContentPolicy> <RecordHarContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<HarMode> <RecordHarMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RecordHarOmitContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecordHarPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecordHarUrlFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RecordHarUrlFilterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecordHarUrlFilterString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecordVideoDir>k__BackingField;
    [CompilerGeneratedAttribute]
private RecordVideoSize <RecordVideoSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReducedMotion> <ReducedMotion>k__BackingField;
    [CompilerGeneratedAttribute]
private ScreenSize <ScreenSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ServiceWorkerPolicy> <ServiceWorkers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorageState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorageStatePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <StrictSelectors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimezoneId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewportSize <ViewportSize>k__BackingField;
    [JsonPropertyNameAttribute("acceptDownloads")]
public Nullable`1<bool> AcceptDownloads { get; public set; }
    [JsonPropertyNameAttribute("baseURL")]
public string BaseURL { get; public set; }
    [JsonPropertyNameAttribute("bypassCSP")]
public Nullable`1<bool> BypassCSP { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("clientCertificates")]
public IEnumerable`1<ClientCertificate> ClientCertificates { get; public set; }
    [JsonPropertyNameAttribute("colorScheme")]
public Nullable`1<ColorScheme> ColorScheme { get; public set; }
    [JsonPropertyNameAttribute("deviceScaleFactor")]
public Nullable`1<float> DeviceScaleFactor { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("extraHTTPHeaders")]
public IEnumerable`1<KeyValuePair`2<string, string>> ExtraHTTPHeaders { get; public set; }
    [JsonPropertyNameAttribute("forcedColors")]
public Nullable`1<ForcedColors> ForcedColors { get; public set; }
    [JsonPropertyNameAttribute("geolocation")]
public Geolocation Geolocation { get; public set; }
    [JsonPropertyNameAttribute("hasTouch")]
public Nullable`1<bool> HasTouch { get; public set; }
    [JsonPropertyNameAttribute("httpCredentials")]
public HttpCredentials HttpCredentials { get; public set; }
    [JsonPropertyNameAttribute("ignoreHTTPSErrors")]
public Nullable`1<bool> IgnoreHTTPSErrors { get; public set; }
    [JsonPropertyNameAttribute("isMobile")]
public Nullable`1<bool> IsMobile { get; public set; }
    [JsonPropertyNameAttribute("javaScriptEnabled")]
public Nullable`1<bool> JavaScriptEnabled { get; public set; }
    [JsonPropertyNameAttribute("locale")]
public string Locale { get; public set; }
    [JsonPropertyNameAttribute("offline")]
public Nullable`1<bool> Offline { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("permissions")]
public IEnumerable`1<string> Permissions { get; public set; }
    [JsonPropertyNameAttribute("proxy")]
public Proxy Proxy { get; public set; }
    [JsonPropertyNameAttribute("recordHarContent")]
public Nullable`1<HarContentPolicy> RecordHarContent { get; public set; }
    [JsonPropertyNameAttribute("recordHarMode")]
public Nullable`1<HarMode> RecordHarMode { get; public set; }
    [JsonPropertyNameAttribute("recordHarOmitContent")]
public Nullable`1<bool> RecordHarOmitContent { get; public set; }
    [JsonPropertyNameAttribute("recordHarPath")]
public string RecordHarPath { get; public set; }
    [JsonPropertyNameAttribute("recordHarUrlFilter")]
public string RecordHarUrlFilter { get; public set; }
    [JsonPropertyNameAttribute("recordHarUrlFilterRegex")]
public Regex RecordHarUrlFilterRegex { get; public set; }
    [JsonPropertyNameAttribute("recordHarUrlFilterString")]
public string RecordHarUrlFilterString { get; public set; }
    [JsonPropertyNameAttribute("recordVideoDir")]
public string RecordVideoDir { get; public set; }
    [JsonPropertyNameAttribute("recordVideoSize")]
public RecordVideoSize RecordVideoSize { get; public set; }
    [JsonPropertyNameAttribute("reducedMotion")]
public Nullable`1<ReducedMotion> ReducedMotion { get; public set; }
    [JsonPropertyNameAttribute("screen")]
public ScreenSize ScreenSize { get; public set; }
    [JsonPropertyNameAttribute("serviceWorkers")]
public Nullable`1<ServiceWorkerPolicy> ServiceWorkers { get; public set; }
    [JsonPropertyNameAttribute("storageState")]
public string StorageState { get; public set; }
    [JsonPropertyNameAttribute("storageStatePath")]
public string StorageStatePath { get; public set; }
    [JsonPropertyNameAttribute("strictSelectors")]
public Nullable`1<bool> StrictSelectors { get; public set; }
    [JsonPropertyNameAttribute("timezoneId")]
public string TimezoneId { get; public set; }
    [JsonPropertyNameAttribute("userAgent")]
public string UserAgent { get; public set; }
    [JsonPropertyNameAttribute("viewport")]
public ViewportSize ViewportSize { get; public set; }
    [NullableContextAttribute("1")]
public BrowserNewPageOptions(BrowserNewPageOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AcceptDownloads();
    [CompilerGeneratedAttribute]
public void set_AcceptDownloads(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_BaseURL();
    [CompilerGeneratedAttribute]
public void set_BaseURL(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_BypassCSP();
    [CompilerGeneratedAttribute]
public void set_BypassCSP(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ClientCertificate> get_ClientCertificates();
    [CompilerGeneratedAttribute]
public void set_ClientCertificates(IEnumerable`1<ClientCertificate> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ColorScheme> get_ColorScheme();
    [CompilerGeneratedAttribute]
public void set_ColorScheme(Nullable`1<ColorScheme> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_DeviceScaleFactor();
    [CompilerGeneratedAttribute]
public void set_DeviceScaleFactor(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, string>> get_ExtraHTTPHeaders();
    [CompilerGeneratedAttribute]
public void set_ExtraHTTPHeaders(IEnumerable`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ForcedColors> get_ForcedColors();
    [CompilerGeneratedAttribute]
public void set_ForcedColors(Nullable`1<ForcedColors> value);
    [CompilerGeneratedAttribute]
public Geolocation get_Geolocation();
    [CompilerGeneratedAttribute]
public void set_Geolocation(Geolocation value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasTouch();
    [CompilerGeneratedAttribute]
public void set_HasTouch(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public HttpCredentials get_HttpCredentials();
    [CompilerGeneratedAttribute]
public void set_HttpCredentials(HttpCredentials value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreHTTPSErrors();
    [CompilerGeneratedAttribute]
public void set_IgnoreHTTPSErrors(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsMobile();
    [CompilerGeneratedAttribute]
public void set_IsMobile(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_JavaScriptEnabled();
    [CompilerGeneratedAttribute]
public void set_JavaScriptEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Locale();
    [CompilerGeneratedAttribute]
public void set_Locale(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Offline();
    [CompilerGeneratedAttribute]
public void set_Offline(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Permissions();
    [CompilerGeneratedAttribute]
public void set_Permissions(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Proxy get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(Proxy value);
    [CompilerGeneratedAttribute]
public Nullable`1<HarContentPolicy> get_RecordHarContent();
    [CompilerGeneratedAttribute]
public void set_RecordHarContent(Nullable`1<HarContentPolicy> value);
    [CompilerGeneratedAttribute]
public Nullable`1<HarMode> get_RecordHarMode();
    [CompilerGeneratedAttribute]
public void set_RecordHarMode(Nullable`1<HarMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RecordHarOmitContent();
    [CompilerGeneratedAttribute]
public void set_RecordHarOmitContent(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_RecordHarPath();
    [CompilerGeneratedAttribute]
public void set_RecordHarPath(string value);
    [CompilerGeneratedAttribute]
public string get_RecordHarUrlFilter();
    [CompilerGeneratedAttribute]
public void set_RecordHarUrlFilter(string value);
    [CompilerGeneratedAttribute]
public Regex get_RecordHarUrlFilterRegex();
    [CompilerGeneratedAttribute]
public void set_RecordHarUrlFilterRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_RecordHarUrlFilterString();
    [CompilerGeneratedAttribute]
public void set_RecordHarUrlFilterString(string value);
    [CompilerGeneratedAttribute]
public string get_RecordVideoDir();
    [CompilerGeneratedAttribute]
public void set_RecordVideoDir(string value);
    [CompilerGeneratedAttribute]
public RecordVideoSize get_RecordVideoSize();
    [CompilerGeneratedAttribute]
public void set_RecordVideoSize(RecordVideoSize value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReducedMotion> get_ReducedMotion();
    [CompilerGeneratedAttribute]
public void set_ReducedMotion(Nullable`1<ReducedMotion> value);
    [CompilerGeneratedAttribute]
public ScreenSize get_ScreenSize();
    [CompilerGeneratedAttribute]
public void set_ScreenSize(ScreenSize value);
    [CompilerGeneratedAttribute]
public Nullable`1<ServiceWorkerPolicy> get_ServiceWorkers();
    [CompilerGeneratedAttribute]
public void set_ServiceWorkers(Nullable`1<ServiceWorkerPolicy> value);
    [CompilerGeneratedAttribute]
public string get_StorageState();
    [CompilerGeneratedAttribute]
public void set_StorageState(string value);
    [CompilerGeneratedAttribute]
public string get_StorageStatePath();
    [CompilerGeneratedAttribute]
public void set_StorageStatePath(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_StrictSelectors();
    [CompilerGeneratedAttribute]
public void set_StrictSelectors(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_TimezoneId();
    [CompilerGeneratedAttribute]
public void set_TimezoneId(string value);
    [CompilerGeneratedAttribute]
public string get_UserAgent();
    [CompilerGeneratedAttribute]
public void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
public ViewportSize get_ViewportSize();
    [CompilerGeneratedAttribute]
public void set_ViewportSize(ViewportSize value);
}
public static class Microsoft.Playwright.BrowserType : object {
    public static string Chromium;
    public static string Firefox;
    public static string Webkit;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.BrowserTypeConnectOptions : object {
    [CompilerGeneratedAttribute]
private string <ExposeNetwork>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, string>> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <SlowMo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("exposeNetwork")]
public string ExposeNetwork { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("headers")]
public IEnumerable`1<KeyValuePair`2<string, string>> Headers { get; public set; }
    [JsonPropertyNameAttribute("slowMo")]
public Nullable`1<float> SlowMo { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public BrowserTypeConnectOptions(BrowserTypeConnectOptions clone);
    [CompilerGeneratedAttribute]
public string get_ExposeNetwork();
    [CompilerGeneratedAttribute]
public void set_ExposeNetwork(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, string>> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IEnumerable`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_SlowMo();
    [CompilerGeneratedAttribute]
public void set_SlowMo(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.BrowserTypeConnectOverCDPOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, string>> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <SlowMo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("headers")]
public IEnumerable`1<KeyValuePair`2<string, string>> Headers { get; public set; }
    [JsonPropertyNameAttribute("slowMo")]
public Nullable`1<float> SlowMo { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public BrowserTypeConnectOverCDPOptions(BrowserTypeConnectOverCDPOptions clone);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, string>> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IEnumerable`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_SlowMo();
    [CompilerGeneratedAttribute]
public void set_SlowMo(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.BrowserTypeLaunchOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<string> <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Channel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ChromiumSandbox>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Devtools>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownloadsPath>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, string>> <Env>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutablePath>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, object>> <FirefoxUserPrefs>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HandleSIGHUP>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HandleSIGINT>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HandleSIGTERM>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Headless>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreAllDefaultArgs>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<string> <IgnoreDefaultArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private Proxy <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <SlowMo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TracesDir>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("args")]
public IEnumerable`1<string> Args { get; public set; }
    [JsonPropertyNameAttribute("channel")]
public string Channel { get; public set; }
    [JsonPropertyNameAttribute("chromiumSandbox")]
public Nullable`1<bool> ChromiumSandbox { get; public set; }
    [JsonPropertyNameAttribute("devtools")]
[ObsoleteAttribute]
public Nullable`1<bool> Devtools { get; public set; }
    [JsonPropertyNameAttribute("downloadsPath")]
public string DownloadsPath { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("env")]
public IEnumerable`1<KeyValuePair`2<string, string>> Env { get; public set; }
    [JsonPropertyNameAttribute("executablePath")]
public string ExecutablePath { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("firefoxUserPrefs")]
public IEnumerable`1<KeyValuePair`2<string, object>> FirefoxUserPrefs { get; public set; }
    [JsonPropertyNameAttribute("handleSIGHUP")]
public Nullable`1<bool> HandleSIGHUP { get; public set; }
    [JsonPropertyNameAttribute("handleSIGINT")]
public Nullable`1<bool> HandleSIGINT { get; public set; }
    [JsonPropertyNameAttribute("handleSIGTERM")]
public Nullable`1<bool> HandleSIGTERM { get; public set; }
    [JsonPropertyNameAttribute("headless")]
public Nullable`1<bool> Headless { get; public set; }
    [JsonPropertyNameAttribute("ignoreAllDefaultArgs")]
public Nullable`1<bool> IgnoreAllDefaultArgs { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("ignoreDefaultArgs")]
public IEnumerable`1<string> IgnoreDefaultArgs { get; public set; }
    [JsonPropertyNameAttribute("proxy")]
public Proxy Proxy { get; public set; }
    [JsonPropertyNameAttribute("slowMo")]
public Nullable`1<float> SlowMo { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("tracesDir")]
public string TracesDir { get; public set; }
    [NullableContextAttribute("1")]
public BrowserTypeLaunchOptions(BrowserTypeLaunchOptions clone);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Channel();
    [CompilerGeneratedAttribute]
public void set_Channel(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ChromiumSandbox();
    [CompilerGeneratedAttribute]
public void set_ChromiumSandbox(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Devtools();
    [CompilerGeneratedAttribute]
public void set_Devtools(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_DownloadsPath();
    [CompilerGeneratedAttribute]
public void set_DownloadsPath(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, string>> get_Env();
    [CompilerGeneratedAttribute]
public void set_Env(IEnumerable`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public string get_ExecutablePath();
    [CompilerGeneratedAttribute]
public void set_ExecutablePath(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, object>> get_FirefoxUserPrefs();
    [CompilerGeneratedAttribute]
public void set_FirefoxUserPrefs(IEnumerable`1<KeyValuePair`2<string, object>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HandleSIGHUP();
    [CompilerGeneratedAttribute]
public void set_HandleSIGHUP(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HandleSIGINT();
    [CompilerGeneratedAttribute]
public void set_HandleSIGINT(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HandleSIGTERM();
    [CompilerGeneratedAttribute]
public void set_HandleSIGTERM(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Headless();
    [CompilerGeneratedAttribute]
public void set_Headless(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreAllDefaultArgs();
    [CompilerGeneratedAttribute]
public void set_IgnoreAllDefaultArgs(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_IgnoreDefaultArgs();
    [CompilerGeneratedAttribute]
public void set_IgnoreDefaultArgs(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Proxy get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(Proxy value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_SlowMo();
    [CompilerGeneratedAttribute]
public void set_SlowMo(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public string get_TracesDir();
    [CompilerGeneratedAttribute]
public void set_TracesDir(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.BrowserTypeLaunchPersistentContextOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AcceptDownloads>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<string> <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseURL>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <BypassCSP>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Channel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ChromiumSandbox>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<ClientCertificate> <ClientCertificates>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ColorScheme> <ColorScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <DeviceScaleFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Devtools>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownloadsPath>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, string>> <Env>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutablePath>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, string>> <ExtraHTTPHeaders>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, object>> <FirefoxUserPrefs>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ForcedColors> <ForcedColors>k__BackingField;
    [CompilerGeneratedAttribute]
private Geolocation <Geolocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HandleSIGHUP>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HandleSIGINT>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HandleSIGTERM>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasTouch>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Headless>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpCredentials <HttpCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreAllDefaultArgs>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<string> <IgnoreDefaultArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreHTTPSErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsMobile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <JavaScriptEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Locale>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Offline>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<string> <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private Proxy <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<HarContentPolicy> <RecordHarContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<HarMode> <RecordHarMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RecordHarOmitContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecordHarPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecordHarUrlFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RecordHarUrlFilterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecordHarUrlFilterString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecordVideoDir>k__BackingField;
    [CompilerGeneratedAttribute]
private RecordVideoSize <RecordVideoSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReducedMotion> <ReducedMotion>k__BackingField;
    [CompilerGeneratedAttribute]
private ScreenSize <ScreenSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ServiceWorkerPolicy> <ServiceWorkers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <SlowMo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <StrictSelectors>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimezoneId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TracesDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewportSize <ViewportSize>k__BackingField;
    [JsonPropertyNameAttribute("acceptDownloads")]
public Nullable`1<bool> AcceptDownloads { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("args")]
public IEnumerable`1<string> Args { get; public set; }
    [JsonPropertyNameAttribute("baseURL")]
public string BaseURL { get; public set; }
    [JsonPropertyNameAttribute("bypassCSP")]
public Nullable`1<bool> BypassCSP { get; public set; }
    [JsonPropertyNameAttribute("channel")]
public string Channel { get; public set; }
    [JsonPropertyNameAttribute("chromiumSandbox")]
public Nullable`1<bool> ChromiumSandbox { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("clientCertificates")]
public IEnumerable`1<ClientCertificate> ClientCertificates { get; public set; }
    [JsonPropertyNameAttribute("colorScheme")]
public Nullable`1<ColorScheme> ColorScheme { get; public set; }
    [JsonPropertyNameAttribute("deviceScaleFactor")]
public Nullable`1<float> DeviceScaleFactor { get; public set; }
    [JsonPropertyNameAttribute("devtools")]
[ObsoleteAttribute]
public Nullable`1<bool> Devtools { get; public set; }
    [JsonPropertyNameAttribute("downloadsPath")]
public string DownloadsPath { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("env")]
public IEnumerable`1<KeyValuePair`2<string, string>> Env { get; public set; }
    [JsonPropertyNameAttribute("executablePath")]
public string ExecutablePath { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("extraHTTPHeaders")]
public IEnumerable`1<KeyValuePair`2<string, string>> ExtraHTTPHeaders { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("firefoxUserPrefs")]
public IEnumerable`1<KeyValuePair`2<string, object>> FirefoxUserPrefs { get; public set; }
    [JsonPropertyNameAttribute("forcedColors")]
public Nullable`1<ForcedColors> ForcedColors { get; public set; }
    [JsonPropertyNameAttribute("geolocation")]
public Geolocation Geolocation { get; public set; }
    [JsonPropertyNameAttribute("handleSIGHUP")]
public Nullable`1<bool> HandleSIGHUP { get; public set; }
    [JsonPropertyNameAttribute("handleSIGINT")]
public Nullable`1<bool> HandleSIGINT { get; public set; }
    [JsonPropertyNameAttribute("handleSIGTERM")]
public Nullable`1<bool> HandleSIGTERM { get; public set; }
    [JsonPropertyNameAttribute("hasTouch")]
public Nullable`1<bool> HasTouch { get; public set; }
    [JsonPropertyNameAttribute("headless")]
public Nullable`1<bool> Headless { get; public set; }
    [JsonPropertyNameAttribute("httpCredentials")]
public HttpCredentials HttpCredentials { get; public set; }
    [JsonPropertyNameAttribute("ignoreAllDefaultArgs")]
public Nullable`1<bool> IgnoreAllDefaultArgs { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("ignoreDefaultArgs")]
public IEnumerable`1<string> IgnoreDefaultArgs { get; public set; }
    [JsonPropertyNameAttribute("ignoreHTTPSErrors")]
public Nullable`1<bool> IgnoreHTTPSErrors { get; public set; }
    [JsonPropertyNameAttribute("isMobile")]
public Nullable`1<bool> IsMobile { get; public set; }
    [JsonPropertyNameAttribute("javaScriptEnabled")]
public Nullable`1<bool> JavaScriptEnabled { get; public set; }
    [JsonPropertyNameAttribute("locale")]
public string Locale { get; public set; }
    [JsonPropertyNameAttribute("offline")]
public Nullable`1<bool> Offline { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("permissions")]
public IEnumerable`1<string> Permissions { get; public set; }
    [JsonPropertyNameAttribute("proxy")]
public Proxy Proxy { get; public set; }
    [JsonPropertyNameAttribute("recordHarContent")]
public Nullable`1<HarContentPolicy> RecordHarContent { get; public set; }
    [JsonPropertyNameAttribute("recordHarMode")]
public Nullable`1<HarMode> RecordHarMode { get; public set; }
    [JsonPropertyNameAttribute("recordHarOmitContent")]
public Nullable`1<bool> RecordHarOmitContent { get; public set; }
    [JsonPropertyNameAttribute("recordHarPath")]
public string RecordHarPath { get; public set; }
    [JsonPropertyNameAttribute("recordHarUrlFilter")]
public string RecordHarUrlFilter { get; public set; }
    [JsonPropertyNameAttribute("recordHarUrlFilterRegex")]
public Regex RecordHarUrlFilterRegex { get; public set; }
    [JsonPropertyNameAttribute("recordHarUrlFilterString")]
public string RecordHarUrlFilterString { get; public set; }
    [JsonPropertyNameAttribute("recordVideoDir")]
public string RecordVideoDir { get; public set; }
    [JsonPropertyNameAttribute("recordVideoSize")]
public RecordVideoSize RecordVideoSize { get; public set; }
    [JsonPropertyNameAttribute("reducedMotion")]
public Nullable`1<ReducedMotion> ReducedMotion { get; public set; }
    [JsonPropertyNameAttribute("screen")]
public ScreenSize ScreenSize { get; public set; }
    [JsonPropertyNameAttribute("serviceWorkers")]
public Nullable`1<ServiceWorkerPolicy> ServiceWorkers { get; public set; }
    [JsonPropertyNameAttribute("slowMo")]
public Nullable`1<float> SlowMo { get; public set; }
    [JsonPropertyNameAttribute("strictSelectors")]
public Nullable`1<bool> StrictSelectors { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("timezoneId")]
public string TimezoneId { get; public set; }
    [JsonPropertyNameAttribute("tracesDir")]
public string TracesDir { get; public set; }
    [JsonPropertyNameAttribute("userAgent")]
public string UserAgent { get; public set; }
    [JsonPropertyNameAttribute("viewport")]
public ViewportSize ViewportSize { get; public set; }
    [NullableContextAttribute("1")]
public BrowserTypeLaunchPersistentContextOptions(BrowserTypeLaunchPersistentContextOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AcceptDownloads();
    [CompilerGeneratedAttribute]
public void set_AcceptDownloads(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_BaseURL();
    [CompilerGeneratedAttribute]
public void set_BaseURL(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_BypassCSP();
    [CompilerGeneratedAttribute]
public void set_BypassCSP(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Channel();
    [CompilerGeneratedAttribute]
public void set_Channel(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ChromiumSandbox();
    [CompilerGeneratedAttribute]
public void set_ChromiumSandbox(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ClientCertificate> get_ClientCertificates();
    [CompilerGeneratedAttribute]
public void set_ClientCertificates(IEnumerable`1<ClientCertificate> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ColorScheme> get_ColorScheme();
    [CompilerGeneratedAttribute]
public void set_ColorScheme(Nullable`1<ColorScheme> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_DeviceScaleFactor();
    [CompilerGeneratedAttribute]
public void set_DeviceScaleFactor(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Devtools();
    [CompilerGeneratedAttribute]
public void set_Devtools(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_DownloadsPath();
    [CompilerGeneratedAttribute]
public void set_DownloadsPath(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, string>> get_Env();
    [CompilerGeneratedAttribute]
public void set_Env(IEnumerable`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public string get_ExecutablePath();
    [CompilerGeneratedAttribute]
public void set_ExecutablePath(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, string>> get_ExtraHTTPHeaders();
    [CompilerGeneratedAttribute]
public void set_ExtraHTTPHeaders(IEnumerable`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, object>> get_FirefoxUserPrefs();
    [CompilerGeneratedAttribute]
public void set_FirefoxUserPrefs(IEnumerable`1<KeyValuePair`2<string, object>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ForcedColors> get_ForcedColors();
    [CompilerGeneratedAttribute]
public void set_ForcedColors(Nullable`1<ForcedColors> value);
    [CompilerGeneratedAttribute]
public Geolocation get_Geolocation();
    [CompilerGeneratedAttribute]
public void set_Geolocation(Geolocation value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HandleSIGHUP();
    [CompilerGeneratedAttribute]
public void set_HandleSIGHUP(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HandleSIGINT();
    [CompilerGeneratedAttribute]
public void set_HandleSIGINT(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HandleSIGTERM();
    [CompilerGeneratedAttribute]
public void set_HandleSIGTERM(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasTouch();
    [CompilerGeneratedAttribute]
public void set_HasTouch(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Headless();
    [CompilerGeneratedAttribute]
public void set_Headless(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public HttpCredentials get_HttpCredentials();
    [CompilerGeneratedAttribute]
public void set_HttpCredentials(HttpCredentials value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreAllDefaultArgs();
    [CompilerGeneratedAttribute]
public void set_IgnoreAllDefaultArgs(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_IgnoreDefaultArgs();
    [CompilerGeneratedAttribute]
public void set_IgnoreDefaultArgs(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreHTTPSErrors();
    [CompilerGeneratedAttribute]
public void set_IgnoreHTTPSErrors(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsMobile();
    [CompilerGeneratedAttribute]
public void set_IsMobile(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_JavaScriptEnabled();
    [CompilerGeneratedAttribute]
public void set_JavaScriptEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Locale();
    [CompilerGeneratedAttribute]
public void set_Locale(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Offline();
    [CompilerGeneratedAttribute]
public void set_Offline(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Permissions();
    [CompilerGeneratedAttribute]
public void set_Permissions(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Proxy get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(Proxy value);
    [CompilerGeneratedAttribute]
public Nullable`1<HarContentPolicy> get_RecordHarContent();
    [CompilerGeneratedAttribute]
public void set_RecordHarContent(Nullable`1<HarContentPolicy> value);
    [CompilerGeneratedAttribute]
public Nullable`1<HarMode> get_RecordHarMode();
    [CompilerGeneratedAttribute]
public void set_RecordHarMode(Nullable`1<HarMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RecordHarOmitContent();
    [CompilerGeneratedAttribute]
public void set_RecordHarOmitContent(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_RecordHarPath();
    [CompilerGeneratedAttribute]
public void set_RecordHarPath(string value);
    [CompilerGeneratedAttribute]
public string get_RecordHarUrlFilter();
    [CompilerGeneratedAttribute]
public void set_RecordHarUrlFilter(string value);
    [CompilerGeneratedAttribute]
public Regex get_RecordHarUrlFilterRegex();
    [CompilerGeneratedAttribute]
public void set_RecordHarUrlFilterRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_RecordHarUrlFilterString();
    [CompilerGeneratedAttribute]
public void set_RecordHarUrlFilterString(string value);
    [CompilerGeneratedAttribute]
public string get_RecordVideoDir();
    [CompilerGeneratedAttribute]
public void set_RecordVideoDir(string value);
    [CompilerGeneratedAttribute]
public RecordVideoSize get_RecordVideoSize();
    [CompilerGeneratedAttribute]
public void set_RecordVideoSize(RecordVideoSize value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReducedMotion> get_ReducedMotion();
    [CompilerGeneratedAttribute]
public void set_ReducedMotion(Nullable`1<ReducedMotion> value);
    [CompilerGeneratedAttribute]
public ScreenSize get_ScreenSize();
    [CompilerGeneratedAttribute]
public void set_ScreenSize(ScreenSize value);
    [CompilerGeneratedAttribute]
public Nullable`1<ServiceWorkerPolicy> get_ServiceWorkers();
    [CompilerGeneratedAttribute]
public void set_ServiceWorkers(Nullable`1<ServiceWorkerPolicy> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_SlowMo();
    [CompilerGeneratedAttribute]
public void set_SlowMo(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_StrictSelectors();
    [CompilerGeneratedAttribute]
public void set_StrictSelectors(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public string get_TimezoneId();
    [CompilerGeneratedAttribute]
public void set_TimezoneId(string value);
    [CompilerGeneratedAttribute]
public string get_TracesDir();
    [CompilerGeneratedAttribute]
public void set_TracesDir(string value);
    [CompilerGeneratedAttribute]
public string get_UserAgent();
    [CompilerGeneratedAttribute]
public void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
public ViewportSize get_ViewportSize();
    [CompilerGeneratedAttribute]
public void set_ViewportSize(ViewportSize value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.ClientCertificate : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Cert>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PfxPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Pfx>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Passphrase>k__BackingField;
    [NullableAttribute("1")]
[RequiredAttribute]
[JsonPropertyNameAttribute("origin")]
public string Origin { get; public set; }
    [JsonPropertyNameAttribute("certPath")]
public string CertPath { get; public set; }
    [JsonPropertyNameAttribute("cert")]
public Byte[] Cert { get; public set; }
    [JsonPropertyNameAttribute("keyPath")]
public string KeyPath { get; public set; }
    [JsonPropertyNameAttribute("key")]
public Byte[] Key { get; public set; }
    [JsonPropertyNameAttribute("pfxPath")]
public string PfxPath { get; public set; }
    [JsonPropertyNameAttribute("pfx")]
public Byte[] Pfx { get; public set; }
    [JsonPropertyNameAttribute("passphrase")]
public string Passphrase { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Origin();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Origin(string value);
    [CompilerGeneratedAttribute]
public string get_CertPath();
    [CompilerGeneratedAttribute]
public void set_CertPath(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Cert();
    [CompilerGeneratedAttribute]
public void set_Cert(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_KeyPath();
    [CompilerGeneratedAttribute]
public void set_KeyPath(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_PfxPath();
    [CompilerGeneratedAttribute]
public void set_PfxPath(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Pfx();
    [CompilerGeneratedAttribute]
public void set_Pfx(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_Passphrase();
    [CompilerGeneratedAttribute]
public void set_Passphrase(string value);
}
public class Microsoft.Playwright.Clip : object {
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Height>k__BackingField;
    [RequiredAttribute]
[JsonPropertyNameAttribute("x")]
public float X { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("y")]
public float Y { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("width")]
public float Width { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("height")]
public float Height { get; public set; }
    [CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public void set_X(float value);
    [CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(float value);
    [CompilerGeneratedAttribute]
public float get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(float value);
    [CompilerGeneratedAttribute]
public float get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(float value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.ClockInstallOptions : object {
    [CompilerGeneratedAttribute]
private string <Time>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <TimeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeString>k__BackingField;
    [JsonPropertyNameAttribute("time")]
public string Time { get; public set; }
    [JsonPropertyNameAttribute("timeDate")]
public Nullable`1<DateTime> TimeDate { get; public set; }
    [JsonPropertyNameAttribute("timeString")]
public string TimeString { get; public set; }
    [NullableContextAttribute("1")]
public ClockInstallOptions(ClockInstallOptions clone);
    [CompilerGeneratedAttribute]
public string get_Time();
    [CompilerGeneratedAttribute]
public void set_Time(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_TimeDate();
    [CompilerGeneratedAttribute]
public void set_TimeDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_TimeString();
    [CompilerGeneratedAttribute]
public void set_TimeString(string value);
}
public enum Microsoft.Playwright.ColorScheme : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ColorScheme Light;
    [EnumMemberAttribute]
public static ColorScheme Dark;
    [EnumMemberAttribute]
public static ColorScheme NoPreference;
    [EnumMemberAttribute]
public static ColorScheme Null;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.Cookie : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Expires>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HttpOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Secure>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SameSiteAttribute> <SameSite>k__BackingField;
    [NullableAttribute("1")]
[RequiredAttribute]
[JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [NullableAttribute("1")]
[RequiredAttribute]
[JsonPropertyNameAttribute("value")]
public string Value { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [JsonPropertyNameAttribute("domain")]
public string Domain { get; public set; }
    [JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [JsonPropertyNameAttribute("expires")]
public Nullable`1<float> Expires { get; public set; }
    [JsonPropertyNameAttribute("httpOnly")]
public Nullable`1<bool> HttpOnly { get; public set; }
    [JsonPropertyNameAttribute("secure")]
public Nullable`1<bool> Secure { get; public set; }
    [JsonPropertyNameAttribute("sameSite")]
public Nullable`1<SameSiteAttribute> SameSite { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Value();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
public void set_Domain(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HttpOnly();
    [CompilerGeneratedAttribute]
public void set_HttpOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Secure();
    [CompilerGeneratedAttribute]
public void set_Secure(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<SameSiteAttribute> get_SameSite();
    [CompilerGeneratedAttribute]
public void set_SameSite(Nullable`1<SameSiteAttribute> value);
}
internal class Microsoft.Playwright.Core.Accessibility : object {
    private Page _page;
    public Accessibility(Page page);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Accessibility/<SnapshotAsync>d__2")]
public sealed virtual Task`1<Nullable`1<JsonElement>> SnapshotAsync(AccessibilitySnapshotOptions options);
}
internal class Microsoft.Playwright.Core.AndroidDevice : ChannelOwner {
    internal AndroidDevice(ChannelOwner parent, string guid, BrowserInitializer initializer);
}
internal class Microsoft.Playwright.Core.APIRequest : object {
    private PlaywrightImpl _playwright;
    public APIRequest(PlaywrightImpl playwright);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.APIRequest/<Microsoft-Playwright-IAPIRequest-NewContextAsync>d__2")]
private sealed virtual override Task`1<IAPIRequestContext> Microsoft.Playwright.IAPIRequest.NewContextAsync(APIRequestNewContextOptions options);
}
internal class Microsoft.Playwright.Core.APIRequestContext : ChannelOwner {
    internal Tracing _tracing;
    private string _closeReason;
    internal APIRequest _request;
    public APIRequestContext(ChannelOwner parent, string guid, APIRequestContextInitializer initializer);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.APIRequestContext/<DisposeAsync>d__4")]
public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.APIRequestContext/<DisposeAsync>d__5")]
internal ValueTask DisposeAsync(string reason);
    public sealed virtual Task`1<IAPIResponse> FetchAsync(IRequest request, APIRequestContextOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.APIRequestContext/<InnerFetchAsync>d__7")]
internal Task`1<IAPIResponse> InnerFetchAsync(IRequest request, string urlOverride, APIRequestContextOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.APIRequestContext/<FetchAsync>d__8")]
public sealed virtual Task`1<IAPIResponse> FetchAsync(string url, APIRequestContextOptions options);
    private static IEnumerable`1<NameValue> QueryParamsToProtocol(IEnumerable`1<KeyValuePair`2<string, object>> params, string paramsString);
    private bool IsJsonContentType(IDictionary`2<string, string> headers);
    private bool IsJsonParsable(string dataString);
    public sealed virtual Task`1<IAPIResponse> DeleteAsync(string url, APIRequestContextOptions options);
    public sealed virtual Task`1<IAPIResponse> GetAsync(string url, APIRequestContextOptions options);
    public sealed virtual Task`1<IAPIResponse> HeadAsync(string url, APIRequestContextOptions options);
    public sealed virtual Task`1<IAPIResponse> PatchAsync(string url, APIRequestContextOptions options);
    public sealed virtual Task`1<IAPIResponse> PostAsync(string url, APIRequestContextOptions options);
    public sealed virtual Task`1<IAPIResponse> PutAsync(string url, APIRequestContextOptions options);
    private APIRequestContextOptions WithMethod(APIRequestContextOptions options, string method);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.APIRequestContext/<StorageStateAsync>d__19")]
public sealed virtual Task`1<string> StorageStateAsync(APIRequestContextStorageStateOptions options);
    private sealed virtual override IFormData Microsoft.Playwright.IAPIRequestContext.CreateFormData();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Playwright.Core.APIResponse : object {
    internal APIRequestContext _context;
    private APIResponse _initializer;
    private RawHeaders _headers;
    public Dictionary`2<string, string> Headers { get; }
    public IReadOnlyList`1<Header> HeadersArray { get; }
    public bool Ok { get; }
    public int Status { get; }
    public string StatusText { get; }
    public string Url { get; }
    public APIResponse(APIRequestContext context, APIResponse initializer);
    public sealed virtual Dictionary`2<string, string> get_Headers();
    public sealed virtual IReadOnlyList`1<Header> get_HeadersArray();
    public sealed virtual bool get_Ok();
    public sealed virtual int get_Status();
    public sealed virtual string get_StatusText();
    public sealed virtual string get_Url();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.APIResponse/<BodyAsync>d__16")]
public sealed virtual Task`1<Byte[]> BodyAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.APIResponse/<JsonAsync>d__17")]
public sealed virtual Task`1<Nullable`1<JsonElement>> JsonAsync();
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.Playwright.Core.APIResponse/<JsonAsync>d__18`1")]
public sealed virtual Task`1<T> JsonAsync(JsonSerializerOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.APIResponse/<TextAsync>d__19")]
public sealed virtual Task`1<string> TextAsync();
    internal string FetchUid();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.APIResponse/<FetchLogAsync>d__21")]
internal Task`1<String[]> FetchLogAsync();
    public sealed virtual ValueTask DisposeAsync();
    public virtual string ToString();
}
internal class Microsoft.Playwright.Core.APIResponseAssertions : object {
    private APIResponse _actual;
    private bool _isNot;
    public IAPIResponseAssertions Not { get; }
    public APIResponseAssertions(IAPIResponse response, bool isNot);
    public sealed virtual IAPIResponseAssertions get_Not();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.APIResponseAssertions/<ToBeOKAsync>d__5")]
public sealed virtual Task ToBeOKAsync();
    private static bool IsTextualMimeType(string contentType);
}
internal class Microsoft.Playwright.Core.Artifact : ChannelOwner {
    [CompilerGeneratedAttribute]
private string <AbsolutePath>k__BackingField;
    internal string AbsolutePath { get; }
    internal Artifact(ChannelOwner parent, string guid, ArtifactInitializer initializer);
    [CompilerGeneratedAttribute]
internal string get_AbsolutePath();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Artifact/<PathAfterFinishedAsync>d__4")]
public Task`1<string> PathAfterFinishedAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Artifact/<SaveAsAsync>d__5")]
public Task SaveAsAsync(string path);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Artifact/<CreateReadStreamAsync>d__6")]
public Task`1<Stream> CreateReadStreamAsync();
    internal Task CancelAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Artifact/<FailureAsync>d__8")]
internal Task`1<string> FailureAsync();
    internal Task DeleteAsync();
}
internal class Microsoft.Playwright.Core.AssertionsBase : object {
    private static float _defaultTimeout;
    [CompilerGeneratedAttribute]
private bool <IsNot>k__BackingField;
    [CompilerGeneratedAttribute]
private Locator <ActualLocator>k__BackingField;
    protected bool IsNot { get; }
    protected Locator ActualLocator { get; }
    public AssertionsBase(ILocator actual, bool isNot);
    private static AssertionsBase();
    [CompilerGeneratedAttribute]
protected bool get_IsNot();
    [CompilerGeneratedAttribute]
protected Locator get_ActualLocator();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.AssertionsBase/<ExpectImplAsync>d__8")]
protected Task ExpectImplAsync(string expression, ExpectedTextValue textValue, object expected, string message, FrameExpectOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.AssertionsBase/<ExpectImplAsync>d__9")]
protected Task ExpectImplAsync(string expression, ExpectedTextValue[] expectedText, object expected, string message, FrameExpectOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.AssertionsBase/<ExpectImplAsync>d__10")]
protected Task ExpectImplAsync(string expression, FrameExpectOptions expectOptions, object expected, string message);
    protected ExpectedTextValue ExpectedRegex(Regex pattern, ExpectedTextValue options);
    protected FrameExpectOptions ConvertToFrameExpectOptions(object source);
    private string FormatValue(object value);
    public static void SetDefaultTimeout(float timeout);
}
internal class Microsoft.Playwright.Core.BindingCall : ChannelOwner {
    private static Type VoidTaskResultType;
    private BindingCallInitializer _initializer;
    public string Name { get; }
    public BindingCall(ChannelOwner parent, string guid, BindingCallInitializer initializer);
    private static BindingCall();
    public string get_Name();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.BindingCall/<CallAsync>d__5")]
internal Task CallAsync(Delegate binding);
}
internal class Microsoft.Playwright.Core.Browser : ChannelOwner {
    private BrowserInitializer _initializer;
    private TaskCompletionSource`1<bool> _closedTcs;
    internal List`1<BrowserContext> _contexts;
    internal BrowserType _browserType;
    internal string _closeReason;
    [CompilerGeneratedAttribute]
private EventHandler`1<IBrowser> Disconnected;
    [CompilerGeneratedAttribute]
private bool <IsConnected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldCloseConnectionOnClose>k__BackingField;
    public IReadOnlyList`1<IBrowserContext> Contexts { get; }
    public bool IsConnected { get; private set; }
    internal bool ShouldCloseConnectionOnClose { get; internal set; }
    public string Version { get; }
    public IBrowserType BrowserType { get; }
    internal Browser(ChannelOwner parent, string guid, BrowserInitializer initializer);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Disconnected(EventHandler`1<IBrowser> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Disconnected(EventHandler`1<IBrowser> value);
    public sealed virtual IReadOnlyList`1<IBrowserContext> get_Contexts();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsConnected();
    [CompilerGeneratedAttribute]
private void set_IsConnected(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldCloseConnectionOnClose();
    [CompilerGeneratedAttribute]
internal void set_ShouldCloseConnectionOnClose(bool value);
    public sealed virtual string get_Version();
    public sealed virtual IBrowserType get_BrowserType();
    internal virtual void OnMessage(string method, Nullable`1<JsonElement> serverParams);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Browser/<CloseAsync>d__24")]
public sealed virtual Task CloseAsync(BrowserCloseOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Browser/<NewContextAsync>d__25")]
public sealed virtual Task`1<IBrowserContext> NewContextAsync(BrowserNewContextOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Browser/<NewPageAsync>d__26")]
public sealed virtual Task`1<IPage> NewPageAsync(BrowserNewPageOptions options);
    public sealed virtual ValueTask DisposeAsync();
    internal static Dictionary`2<string, object> GetVideoArgs(string recordVideoDir, RecordVideoSize recordVideoSize);
    internal void DidClose();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Browser/<NewBrowserCDPSessionAsync>d__30")]
public sealed virtual Task`1<ICDPSession> NewBrowserCDPSessionAsync();
    internal static Dictionary`2<string, object> PrepareHarOptions(Nullable`1<HarContentPolicy> recordHarContent, Nullable`1<HarMode> recordHarMode, string recordHarPath, Nullable`1<bool> recordHarOmitContent, string recordHarUrlFilter, string recordHarUrlFilterString, Regex recordHarUrlFilterRegex);
    internal static Dictionary`2[] ToClientCertificatesProtocol(IEnumerable`1<ClientCertificate> clientCertificates);
    private static string ReadClientCertificateFile(string path, Byte[] value);
}
internal class Microsoft.Playwright.Core.BrowserContext : ChannelOwner {
    private TaskCompletionSource`1<bool> _closeTcs;
    private Dictionary`2<string, Delegate> _bindings;
    private BrowserContextInitializer _initializer;
    private Tracing _tracing;
    private Clock _clock;
    internal HashSet`1<IPage> _backgroundPages;
    internal APIRequestContext _request;
    private Dictionary`2<string, HarRecorder> _harRecorders;
    internal List`1<IWorker> _serviceWorkers;
    private List`1<RouteHandler> _routes;
    internal List`1<Page> _pages;
    private Browser _browser;
    private List`1<HarRouter> _harRouters;
    private string _closeReason;
    internal TimeoutSettings _timeoutSettings;
    [CompilerGeneratedAttribute]
private EventHandler`1<IRequest> _requestImpl;
    [CompilerGeneratedAttribute]
private EventHandler`1<IResponse> _responseImpl;
    [CompilerGeneratedAttribute]
private EventHandler`1<IRequest> _requestFinishedImpl;
    [CompilerGeneratedAttribute]
private EventHandler`1<IRequest> _requestFailedImpl;
    [CompilerGeneratedAttribute]
private EventHandler`1<IConsoleMessage> _consoleImpl;
    [CompilerGeneratedAttribute]
private EventHandler`1<IDialog> _dialogImpl;
    [CompilerGeneratedAttribute]
private EventHandler`1<IBrowserContext> Close;
    [CompilerGeneratedAttribute]
private EventHandler`1<IPage> Page;
    [CompilerGeneratedAttribute]
private EventHandler`1<IPage> BackgroundPage;
    [CompilerGeneratedAttribute]
private EventHandler`1<IWebError> WebError;
    [CompilerGeneratedAttribute]
private EventHandler`1<IWorker> ServiceWorker;
    [CompilerGeneratedAttribute]
private Page <OwnerPage>k__BackingField;
    [CompilerGeneratedAttribute]
private BrowserNewContextOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CloseWasCalled>k__BackingField;
    public ITracing Tracing { get; }
    public IClock Clock { get; }
    public IBrowser Browser { get; }
    public IReadOnlyList`1<IPage> Pages { get; }
    internal Page OwnerPage { get; internal set; }
    internal bool IsChromium { get; }
    internal BrowserNewContextOptions Options { get; internal set; }
    internal bool CloseWasCalled { get; private set; }
    public IAPIRequestContext APIRequest { get; }
    public IReadOnlyList`1<IWorker> ServiceWorkers { get; }
    public IReadOnlyList`1<IPage> BackgroundPages { get; }
    internal BrowserContext(ChannelOwner parent, string guid, BrowserContextInitializer initializer);
    [CompilerGeneratedAttribute]
private void add__requestImpl(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
private void remove__requestImpl(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
private void add__responseImpl(EventHandler`1<IResponse> value);
    [CompilerGeneratedAttribute]
private void remove__responseImpl(EventHandler`1<IResponse> value);
    [CompilerGeneratedAttribute]
private void add__requestFinishedImpl(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
private void remove__requestFinishedImpl(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
private void add__requestFailedImpl(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
private void remove__requestFailedImpl(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
private void add__consoleImpl(EventHandler`1<IConsoleMessage> value);
    [CompilerGeneratedAttribute]
private void remove__consoleImpl(EventHandler`1<IConsoleMessage> value);
    [CompilerGeneratedAttribute]
private void add__dialogImpl(EventHandler`1<IDialog> value);
    [CompilerGeneratedAttribute]
private void remove__dialogImpl(EventHandler`1<IDialog> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Close(EventHandler`1<IBrowserContext> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Close(EventHandler`1<IBrowserContext> value);
    public sealed virtual void add_Console(EventHandler`1<IConsoleMessage> value);
    public sealed virtual void remove_Console(EventHandler`1<IConsoleMessage> value);
    public sealed virtual void add_Dialog(EventHandler`1<IDialog> value);
    public sealed virtual void remove_Dialog(EventHandler`1<IDialog> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Page(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Page(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_BackgroundPage(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_BackgroundPage(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_WebError(EventHandler`1<IWebError> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_WebError(EventHandler`1<IWebError> value);
    public sealed virtual void add_Request(EventHandler`1<IRequest> value);
    public sealed virtual void remove_Request(EventHandler`1<IRequest> value);
    public sealed virtual void add_Response(EventHandler`1<IResponse> value);
    public sealed virtual void remove_Response(EventHandler`1<IResponse> value);
    public sealed virtual void add_RequestFinished(EventHandler`1<IRequest> value);
    public sealed virtual void remove_RequestFinished(EventHandler`1<IRequest> value);
    public sealed virtual void add_RequestFailed(EventHandler`1<IRequest> value);
    public sealed virtual void remove_RequestFailed(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
public void add_ServiceWorker(EventHandler`1<IWorker> value);
    [CompilerGeneratedAttribute]
public void remove_ServiceWorker(EventHandler`1<IWorker> value);
    public sealed virtual ITracing get_Tracing();
    public sealed virtual IClock get_Clock();
    public sealed virtual IBrowser get_Browser();
    public sealed virtual IReadOnlyList`1<IPage> get_Pages();
    [CompilerGeneratedAttribute]
internal Page get_OwnerPage();
    [CompilerGeneratedAttribute]
internal void set_OwnerPage(Page value);
    internal bool get_IsChromium();
    [CompilerGeneratedAttribute]
internal BrowserNewContextOptions get_Options();
    [CompilerGeneratedAttribute]
internal void set_Options(BrowserNewContextOptions value);
    [CompilerGeneratedAttribute]
internal bool get_CloseWasCalled();
    [CompilerGeneratedAttribute]
private void set_CloseWasCalled(bool value);
    public sealed virtual IAPIRequestContext get_APIRequest();
    public IReadOnlyList`1<IWorker> get_ServiceWorkers();
    public sealed virtual IReadOnlyList`1<IPage> get_BackgroundPages();
    internal virtual void OnMessage(string method, Nullable`1<JsonElement> serverParams);
    internal void OnDialog(IDialog dialog);
    public sealed virtual Task AddCookiesAsync(IEnumerable`1<Cookie> cookies);
    public sealed virtual Task AddInitScriptAsync(string script, string scriptPath);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.BrowserContext/<ClearCookiesAsync>d__99")]
public sealed virtual Task ClearCookiesAsync(BrowserContextClearCookiesOptions options);
    public sealed virtual Task ClearPermissionsAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.BrowserContext/<CloseAsync>d__101")]
public sealed virtual Task CloseAsync(BrowserContextCloseOptions options);
    internal void SetOptions(BrowserNewContextOptions contextOptions, string tracesDir);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.BrowserContext/<CookiesAsync>d__103")]
public sealed virtual Task`1<IReadOnlyList`1<BrowserContextCookiesResult>> CookiesAsync(IEnumerable`1<string> urls);
    public sealed virtual Task ExposeBindingAsync(string name, Action callback, BrowserContextExposeBindingOptions options);
    public sealed virtual Task ExposeBindingAsync(string name, Action`1<BindingSource> callback);
    public sealed virtual Task ExposeBindingAsync(string name, Action`2<BindingSource, T> callback);
    public sealed virtual Task ExposeBindingAsync(string name, Func`2<BindingSource, TResult> callback);
    public sealed virtual Task ExposeBindingAsync(string name, Func`3<BindingSource, IJSHandle, TResult> callback);
    public sealed virtual Task ExposeBindingAsync(string name, Func`3<BindingSource, T, TResult> callback);
    public sealed virtual Task ExposeBindingAsync(string name, Func`4<BindingSource, T1, T2, TResult> callback);
    public sealed virtual Task ExposeBindingAsync(string name, Func`5<BindingSource, T1, T2, T3, TResult> callback);
    public sealed virtual Task ExposeBindingAsync(string name, Func`6<BindingSource, T1, T2, T3, T4, TResult> callback);
    public sealed virtual Task ExposeFunctionAsync(string name, Action callback);
    public sealed virtual Task ExposeFunctionAsync(string name, Action`1<T> callback);
    public sealed virtual Task ExposeFunctionAsync(string name, Func`1<TResult> callback);
    public sealed virtual Task ExposeFunctionAsync(string name, Func`2<T, TResult> callback);
    public sealed virtual Task ExposeFunctionAsync(string name, Func`3<T1, T2, TResult> callback);
    public sealed virtual Task ExposeFunctionAsync(string name, Func`4<T1, T2, T3, TResult> callback);
    public sealed virtual Task ExposeFunctionAsync(string name, Func`5<T1, T2, T3, T4, TResult> callback);
    public sealed virtual Task GrantPermissionsAsync(IEnumerable`1<string> permissions, BrowserContextGrantPermissionsOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.BrowserContext/<NewCDPSessionAsync>d__121")]
public sealed virtual Task`1<ICDPSession> NewCDPSessionAsync(IPage page);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.BrowserContext/<NewCDPSessionAsync>d__122")]
public sealed virtual Task`1<ICDPSession> NewCDPSessionAsync(IFrame frame);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.BrowserContext/<NewPageAsync>d__123")]
public sealed virtual Task`1<IPage> NewPageAsync();
    public sealed virtual Task RouteAsync(string url, Action`1<IRoute> handler, BrowserContextRouteOptions options);
    public sealed virtual Task RouteAsync(string url, Func`2<IRoute, Task> handler, BrowserContextRouteOptions options);
    public sealed virtual Task RouteAsync(Regex url, Action`1<IRoute> handler, BrowserContextRouteOptions options);
    public sealed virtual Task RouteAsync(Regex url, Func`2<IRoute, Task> handler, BrowserContextRouteOptions options);
    public sealed virtual Task RouteAsync(Func`2<string, bool> url, Action`1<IRoute> handler, BrowserContextRouteOptions options);
    public sealed virtual Task RouteAsync(Func`2<string, bool> url, Func`2<IRoute, Task> handler, BrowserContextRouteOptions options);
    public sealed virtual Task SetExtraHTTPHeadersAsync(IEnumerable`1<KeyValuePair`2<string, string>> headers);
    public sealed virtual Task SetGeolocationAsync(Geolocation geolocation);
    public sealed virtual Task SetOfflineAsync(bool offline);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.BrowserContext/<StorageStateAsync>d__133")]
public sealed virtual Task`1<string> StorageStateAsync(BrowserContextStorageStateOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.BrowserContext/<UnrouteAllAsync>d__134")]
public sealed virtual Task UnrouteAllAsync(BrowserContextUnrouteAllOptions options);
    public sealed virtual Task UnrouteAsync(string urlString, Action`1<IRoute> handler);
    public sealed virtual Task UnrouteAsync(string urlString, Func`2<IRoute, Task> handler);
    public sealed virtual Task UnrouteAsync(Regex urlRegex, Action`1<IRoute> handler);
    public sealed virtual Task UnrouteAsync(Regex urlRegex, Func`2<IRoute, Task> handler);
    public sealed virtual Task UnrouteAsync(Func`2<string, bool> urlFunc, Action`1<IRoute> handler);
    public sealed virtual Task UnrouteAsync(Func`2<string, bool> urlFunc, Func`2<IRoute, Task> handler);
    internal string _effectiveCloseReason();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.BrowserContext/<InnerWaitForEventAsync>d__142`1")]
internal Task`1<T> InnerWaitForEventAsync(PlaywrightEvent`1<T> playwrightEvent, Func`1<Task> action, Func`2<T, bool> predicate, Nullable`1<float> timeout);
    public sealed virtual Task`1<IPage> WaitForPageAsync(BrowserContextWaitForPageOptions options);
    public sealed virtual Task`1<IPage> RunAndWaitForPageAsync(Func`1<Task> action, BrowserContextRunAndWaitForPageOptions options);
    public sealed virtual Task`1<IConsoleMessage> WaitForConsoleMessageAsync(BrowserContextWaitForConsoleMessageOptions options);
    public sealed virtual Task`1<IConsoleMessage> RunAndWaitForConsoleMessageAsync(Func`1<Task> action, BrowserContextRunAndWaitForConsoleMessageOptions options);
    public sealed virtual ValueTask DisposeAsync();
    public sealed virtual void SetDefaultNavigationTimeout(float timeout);
    internal void SetDefaultNavigationTimeoutImpl(Nullable`1<float> timeout);
    public sealed virtual void SetDefaultTimeout(float timeout);
    internal void SetDefaultTimeoutImpl(Nullable`1<float> timeout);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.BrowserContext/<OnRouteAsync>d__152")]
internal Task OnRouteAsync(Route route);
    internal bool UrlMatches(string url, string glob);
    internal string CombineUrlWithBase(string url);
    private Task RouteAsync(Regex urlRegex, Func`2<string, bool> urlFunc, Delegate handler, BrowserContextRouteOptions options);
    private Task RouteAsync(RouteHandler setting);
    private Task UnrouteAsync(Regex urlRegex, Func`2<string, bool> urlFunc, Delegate handler);
    private Task UnrouteAsync(RouteHandler setting);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.BrowserContext/<UnrouteInternalAsync>d__159")]
private Task UnrouteInternalAsync(List`1<RouteHandler> removed, List`1<RouteHandler> remaining, Nullable`1<UnrouteBehavior> behavior);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.BrowserContext/<UpdateInterceptionAsync>d__160")]
private Task UpdateInterceptionAsync();
    internal void OnClose();
    private void Channel_OnPage(object sender, Page page);
    private void Channel_BindingCall(BindingCall bindingCall);
    private void Channel_Route(object sender, Route route);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.BrowserContext/<ExposeBindingAsync>d__165")]
private Task ExposeBindingAsync(string name, Delegate callback, bool handle);
    private Nullable`1<HarContentPolicy> RouteFromHarUpdateContentPolicyToHarContentPolicy(Nullable`1<RouteFromHarUpdateContentPolicy> policy);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.BrowserContext/<RecordIntoHarAsync>d__167")]
internal Task RecordIntoHarAsync(string har, Page page, BrowserContextRouteFromHAROptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.BrowserContext/<RouteFromHARAsync>d__168")]
public sealed virtual Task RouteFromHARAsync(string har, BrowserContextRouteFromHAROptions options);
    private void DisposeHarRouters();
}
internal class Microsoft.Playwright.Core.BrowserContextConsoleEvent : object {
    [CompilerGeneratedAttribute]
private Page <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<JSHandle> <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleMessageLocation <Location>k__BackingField;
    [JsonPropertyNameAttribute("page")]
public Page Page { get; public set; }
    [JsonPropertyNameAttribute("type")]
public string Type { get; public set; }
    [JsonPropertyNameAttribute("text")]
public string Text { get; public set; }
    [JsonPropertyNameAttribute("args")]
public List`1<JSHandle> Args { get; public set; }
    [JsonPropertyNameAttribute("location")]
public ConsoleMessageLocation Location { get; public set; }
    [CompilerGeneratedAttribute]
public Page get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(Page value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public List`1<JSHandle> get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(List`1<JSHandle> value);
    [CompilerGeneratedAttribute]
public ConsoleMessageLocation get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(ConsoleMessageLocation value);
}
internal static class Microsoft.Playwright.Core.BrowserContextEvent : object {
    [CompilerGeneratedAttribute]
private static PlaywrightEvent`1<IPage> <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private static PlaywrightEvent`1<IBrowserContext> <Close>k__BackingField;
    public static PlaywrightEvent`1<IPage> Page { get; }
    public static PlaywrightEvent`1<IBrowserContext> Close { get; }
    private static BrowserContextEvent();
    [CompilerGeneratedAttribute]
public static PlaywrightEvent`1<IPage> get_Page();
    [CompilerGeneratedAttribute]
public static PlaywrightEvent`1<IBrowserContext> get_Close();
}
internal class Microsoft.Playwright.Core.BrowserType : ChannelOwner {
    private BrowserTypeInitializer _initializer;
    [CompilerGeneratedAttribute]
private PlaywrightImpl <Playwright>k__BackingField;
    internal PlaywrightImpl Playwright { get; internal set; }
    public string ExecutablePath { get; }
    public string Name { get; }
    internal BrowserType(ChannelOwner parent, string guid, BrowserTypeInitializer initializer);
    [CompilerGeneratedAttribute]
internal PlaywrightImpl get_Playwright();
    [CompilerGeneratedAttribute]
internal void set_Playwright(PlaywrightImpl value);
    public sealed virtual string get_ExecutablePath();
    public sealed virtual string get_Name();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.BrowserType/<LaunchAsync>d__10")]
public sealed virtual Task`1<IBrowser> LaunchAsync(BrowserTypeLaunchOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.BrowserType/<LaunchPersistentContextAsync>d__11")]
public sealed virtual Task`1<IBrowserContext> LaunchPersistentContextAsync(string userDataDir, BrowserTypeLaunchPersistentContextOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.BrowserType/<ConnectAsync>d__12")]
public sealed virtual Task`1<IBrowser> ConnectAsync(string wsEndpoint, BrowserTypeConnectOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.BrowserType/<ConnectOverCDPAsync>d__13")]
public sealed virtual Task`1<IBrowser> ConnectOverCDPAsync(string endpointURL, BrowserTypeConnectOverCDPOptions options);
    internal void DidLaunchBrowser(Browser browser);
    internal void DidCreateContext(BrowserContext context, BrowserNewContextOptions contextOptions, string tracesDir);
}
internal class Microsoft.Playwright.Core.ByRoleOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Checked>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameString>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NameRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Pressed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Selected>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    public Nullable`1<bool> Checked { get; public set; }
    public Nullable`1<bool> Disabled { get; public set; }
    public Nullable`1<bool> Expanded { get; public set; }
    public Nullable`1<bool> IncludeHidden { get; public set; }
    public Nullable`1<int> Level { get; public set; }
    public string Name { get; public set; }
    public string NameString { get; public set; }
    public Regex NameRegex { get; public set; }
    public Nullable`1<bool> Pressed { get; public set; }
    public Nullable`1<bool> Selected { get; public set; }
    public Nullable`1<bool> Exact { get; public set; }
    public ByRoleOptions(FrameGetByRoleOptions clone);
    public ByRoleOptions(FrameLocatorGetByRoleOptions clone);
    public ByRoleOptions(PageGetByRoleOptions clone);
    public ByRoleOptions(LocatorGetByRoleOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Checked();
    [CompilerGeneratedAttribute]
public void set_Checked(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeHidden();
    [CompilerGeneratedAttribute]
public void set_IncludeHidden(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_NameString();
    [CompilerGeneratedAttribute]
public void set_NameString(string value);
    [CompilerGeneratedAttribute]
public Regex get_NameRegex();
    [CompilerGeneratedAttribute]
public void set_NameRegex(Regex value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Pressed();
    [CompilerGeneratedAttribute]
public void set_Pressed(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Playwright.Core.CDPSession : ChannelOwner {
    private Dictionary`2<string, CDPSessionEvent> _cdpSessionEvents;
    public CDPSession(ChannelOwner parent, string guid);
    internal virtual void OnMessage(string method, Nullable`1<JsonElement> serverParams);
    public sealed virtual Task DetachAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.CDPSession/<SendAsync>d__4")]
public sealed virtual Task`1<Nullable`1<JsonElement>> SendAsync(string method, Dictionary`2<string, object> args);
    private void OnCDPEvent(string name, Nullable`1<JsonElement> params);
    public sealed virtual ICDPSessionEvent Event(string eventName);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.CDPSession/<DisposeAsync>d__7")]
public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Playwright.Core.CDPSessionEvent : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler`1<Nullable`1<JsonElement>> OnEvent;
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    public string EventName { get; }
    public CDPSessionEvent(string eventName);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_OnEvent(EventHandler`1<Nullable`1<JsonElement>> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_OnEvent(EventHandler`1<Nullable`1<JsonElement>> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_EventName();
    internal void RaiseEvent(Nullable`1<JsonElement> eventParams);
}
internal class Microsoft.Playwright.Core.Clock : object {
    [CompilerGeneratedAttribute]
private BrowserContext <browserContext>P;
    public Clock(BrowserContext browserContext);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Clock/<InstallAsync>d__2")]
public sealed virtual Task InstallAsync(ClockInstallOptions options);
    private static Dictionary`2<string, object> ParseTime(string timeString);
    private static Dictionary`2<string, object> ParseTime(Nullable`1<DateTime> timeDate);
    private Dictionary`2<string, object> ParseTicks(long ticks);
    private Dictionary`2<string, object> ParseTicks(string ticks);
    public sealed virtual Task FastForwardAsync(long ticks);
    public sealed virtual Task FastForwardAsync(string ticks);
    public sealed virtual Task PauseAtAsync(string time);
    public sealed virtual Task PauseAtAsync(DateTime time);
    public sealed virtual Task ResumeAsync();
    public sealed virtual Task RunForAsync(long ticks);
    public sealed virtual Task RunForAsync(string ticks);
    public sealed virtual Task SetFixedTimeAsync(string time);
    public sealed virtual Task SetFixedTimeAsync(DateTime time);
    public sealed virtual Task SetSystemTimeAsync(string time);
    public sealed virtual Task SetSystemTimeAsync(DateTime time);
}
internal class Microsoft.Playwright.Core.ConsoleMessage : object {
    private BrowserContextConsoleEvent _event;
    public string Type { get; }
    public IReadOnlyList`1<IJSHandle> Args { get; }
    public string Location { get; }
    public string Text { get; }
    public IPage Page { get; }
    internal ConsoleMessage(BrowserContextConsoleEvent event);
    public sealed virtual string get_Type();
    public sealed virtual IReadOnlyList`1<IJSHandle> get_Args();
    public sealed virtual string get_Location();
    public sealed virtual string get_Text();
    public sealed virtual IPage get_Page();
}
internal class Microsoft.Playwright.Core.Dialog : ChannelOwner {
    private DialogInitializer _initializer;
    public string Type { get; }
    public string DefaultValue { get; }
    public string Message { get; }
    public IPage Page { get; }
    public Dialog(ChannelOwner parent, string guid, DialogInitializer initializer);
    public sealed virtual string get_Type();
    public sealed virtual string get_DefaultValue();
    public sealed virtual string get_Message();
    public sealed virtual IPage get_Page();
    public sealed virtual Task AcceptAsync(string promptText);
    public sealed virtual Task DismissAsync();
}
internal class Microsoft.Playwright.Core.Download : object {
    private Artifact _artifact;
    [CompilerGeneratedAttribute]
private IPage <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SuggestedFilename>k__BackingField;
    public IPage Page { get; }
    public string Url { get; }
    public string SuggestedFilename { get; }
    internal Download(IPage page, string url, string suggestedFilename, Artifact artifact);
    [CompilerGeneratedAttribute]
public sealed virtual IPage get_Page();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Url();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SuggestedFilename();
    public sealed virtual Task`1<string> PathAsync();
    public sealed virtual Task`1<string> FailureAsync();
    public sealed virtual Task DeleteAsync();
    public sealed virtual Task SaveAsAsync(string path);
    public sealed virtual Task`1<Stream> CreateReadStreamAsync();
    public sealed virtual Task CancelAsync();
}
internal static class Microsoft.Playwright.Core.DriverMessages : object {
    public static string TargetClosedExceptionMessage;
    public static bool IsTargetClosedError(Exception e);
}
internal class Microsoft.Playwright.Core.ElementHandle : JSHandle {
    internal ElementHandle(ChannelOwner parent, string guid, ElementHandleInitializer initializer);
    internal virtual void OnMessage(string method, Nullable`1<JsonElement> serverParams);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<WaitForSelectorAsync>d__2")]
public sealed virtual Task`1<IElementHandle> WaitForSelectorAsync(string selector, ElementHandleWaitForSelectorOptions options);
    public sealed virtual Task WaitForElementStateAsync(ElementState state, ElementHandleWaitForElementStateOptions options);
    public sealed virtual Task PressAsync(string key, ElementHandlePressOptions options);
    public sealed virtual Task TypeAsync(string text, ElementHandleTypeOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<ScreenshotAsync>d__6")]
public sealed virtual Task`1<Byte[]> ScreenshotAsync(ElementHandleScreenshotOptions options);
    public sealed virtual Task FillAsync(string value, ElementHandleFillOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<ContentFrameAsync>d__8")]
public sealed virtual Task`1<IFrame> ContentFrameAsync();
    public sealed virtual Task HoverAsync(ElementHandleHoverOptions options);
    public sealed virtual Task ScrollIntoViewIfNeededAsync(ElementHandleScrollIntoViewIfNeededOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<OwnerFrameAsync>d__11")]
public sealed virtual Task`1<IFrame> OwnerFrameAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<BoundingBoxAsync>d__12")]
public sealed virtual Task`1<ElementHandleBoundingBoxResult> BoundingBoxAsync();
    public sealed virtual Task ClickAsync(ElementHandleClickOptions options);
    public sealed virtual Task DblClickAsync(ElementHandleDblClickOptions options);
    public sealed virtual Task SetInputFilesAsync(string files, ElementHandleSetInputFilesOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<SetInputFilesAsync>d__16")]
public sealed virtual Task SetInputFilesAsync(IEnumerable`1<string> files, ElementHandleSetInputFilesOptions options);
    public sealed virtual Task SetInputFilesAsync(FilePayload files, ElementHandleSetInputFilesOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<SetInputFilesAsync>d__18")]
public sealed virtual Task SetInputFilesAsync(IEnumerable`1<FilePayload> files, ElementHandleSetInputFilesOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<QuerySelectorAsync>d__19")]
public sealed virtual Task`1<IElementHandle> QuerySelectorAsync(string selector);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<QuerySelectorAllAsync>d__20")]
public sealed virtual Task`1<IReadOnlyList`1<IElementHandle>> QuerySelectorAllAsync(string selector);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<EvalOnSelectorAsync>d__21")]
public sealed virtual Task`1<Nullable`1<JsonElement>> EvalOnSelectorAsync(string selector, string expression, object arg);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<EvalOnSelectorAsync>d__22`1")]
public sealed virtual Task`1<T> EvalOnSelectorAsync(string selector, string expression, object arg);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<EvalOnSelectorAllAsync>d__23`1")]
public sealed virtual Task`1<T> EvalOnSelectorAllAsync(string selector, string expression, object arg);
    public sealed virtual Task FocusAsync();
    public sealed virtual Task DispatchEventAsync(string type, object eventInit);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<GetAttributeAsync>d__26")]
public sealed virtual Task`1<string> GetAttributeAsync(string name);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<InnerHTMLAsync>d__27")]
public sealed virtual Task`1<string> InnerHTMLAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<InnerTextAsync>d__28")]
public sealed virtual Task`1<string> InnerTextAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<TextContentAsync>d__29")]
public sealed virtual Task`1<string> TextContentAsync();
    public sealed virtual Task SelectTextAsync(ElementHandleSelectTextOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string value, ElementHandleSelectOptionOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(IElementHandle values, ElementHandleSelectOptionOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(IEnumerable`1<string> values, ElementHandleSelectOptionOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(SelectOptionValue values, ElementHandleSelectOptionOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(IEnumerable`1<IElementHandle> values, ElementHandleSelectOptionOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(IEnumerable`1<SelectOptionValue> values, ElementHandleSelectOptionOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<_selectOptionAsync>d__37")]
private Task`1<IReadOnlyList`1<string>> _selectOptionAsync(IEnumerable`1<SelectOptionValueProtocol> values, Nullable`1<bool> noWaitAfter, Nullable`1<bool> force, Nullable`1<float> timeout);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<_selectOptionAsync>d__38")]
private Task`1<IReadOnlyList`1<string>> _selectOptionAsync(IEnumerable`1<IElementHandle> values, Nullable`1<bool> noWaitAfter, Nullable`1<bool> force, Nullable`1<float> timeout);
    public sealed virtual Task CheckAsync(ElementHandleCheckOptions options);
    public sealed virtual Task UncheckAsync(ElementHandleUncheckOptions options);
    public sealed virtual Task TapAsync(ElementHandleTapOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<IsCheckedAsync>d__42")]
public sealed virtual Task`1<bool> IsCheckedAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<IsDisabledAsync>d__43")]
public sealed virtual Task`1<bool> IsDisabledAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<IsEditableAsync>d__44")]
public sealed virtual Task`1<bool> IsEditableAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<IsEnabledAsync>d__45")]
public sealed virtual Task`1<bool> IsEnabledAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<IsHiddenAsync>d__46")]
public sealed virtual Task`1<bool> IsHiddenAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<IsVisibleAsync>d__47")]
public sealed virtual Task`1<bool> IsVisibleAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.ElementHandle/<InputValueAsync>d__48")]
public sealed virtual Task`1<string> InputValueAsync(ElementHandleInputValueOptions options);
    public sealed virtual Task SetCheckedAsync(bool checkedState, ElementHandleSetCheckedOptions options);
    internal static ScreenshotType DetermineScreenshotType(string path);
}
internal class Microsoft.Playwright.Core.EvaluateArgumentGuidElement : object {
    [CompilerGeneratedAttribute]
private string <Guid>k__BackingField;
    public string Guid { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(string value);
}
internal class Microsoft.Playwright.Core.FileChooser : object {
    [CompilerGeneratedAttribute]
private IPage <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private IElementHandle <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private ElementHandle <ElementImpl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMultiple>k__BackingField;
    public IPage Page { get; public set; }
    public IElementHandle Element { get; public set; }
    public ElementHandle ElementImpl { get; public set; }
    public bool IsMultiple { get; public set; }
    public FileChooser(IPage page, ElementHandle element, bool multiple);
    [CompilerGeneratedAttribute]
public sealed virtual IPage get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(IPage value);
    [CompilerGeneratedAttribute]
public sealed virtual IElementHandle get_Element();
    [CompilerGeneratedAttribute]
public void set_Element(IElementHandle value);
    [CompilerGeneratedAttribute]
public ElementHandle get_ElementImpl();
    [CompilerGeneratedAttribute]
public void set_ElementImpl(ElementHandle value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsMultiple();
    [CompilerGeneratedAttribute]
public void set_IsMultiple(bool value);
    public sealed virtual Task SetFilesAsync(string files, FileChooserSetFilesOptions options);
    public sealed virtual Task SetFilesAsync(IEnumerable`1<string> files, FileChooserSetFilesOptions options);
    public sealed virtual Task SetFilesAsync(FilePayload files, FileChooserSetFilesOptions options);
    public sealed virtual Task SetFilesAsync(IEnumerable`1<FilePayload> files, FileChooserSetFilesOptions options);
    private ElementHandleSetInputFilesOptions Map(FileChooserSetFilesOptions options);
}
internal class Microsoft.Playwright.Core.FormData : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<string, object>> <Fields>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<ValueTuple`2<string, object>> Fields { get; }
    [CompilerGeneratedAttribute]
internal List`1<ValueTuple`2<string, object>> get_Fields();
    private FormData SetImpl(string name, object value);
    public sealed virtual IFormData Set(string name, string value);
    public sealed virtual IFormData Set(string name, bool value);
    public sealed virtual IFormData Set(string name, int value);
    public sealed virtual IFormData Set(string name, FilePayload value);
    internal IList`1<object> ToProtocol(bool throwWhenSerializingFilePayloads);
    public sealed virtual IFormData Append(string name, string value);
    public sealed virtual IFormData Append(string name, bool value);
    public sealed virtual IFormData Append(string name, int value);
    public sealed virtual IFormData Append(string name, FilePayload value);
    private FormData AppendImpl(string name, object value);
}
internal class Microsoft.Playwright.Core.Frame : ChannelOwner {
    private List`1<WaitUntilState> _loadStates;
    internal List`1<Frame> _childFrames;
    [CompilerGeneratedAttribute]
private EventHandler`1<FrameNavigatedEventArgs> Navigated;
    [CompilerGeneratedAttribute]
private EventHandler`1<WaitUntilState> LoadState;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private Frame <ParentFrame>k__BackingField;
    [CompilerGeneratedAttribute]
private IPage <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDetached>k__BackingField;
    public IReadOnlyList`1<IFrame> ChildFrames { get; }
    public string Name { get; internal set; }
    public string Url { get; internal set; }
    private IFrame Microsoft.Playwright.IFrame.ParentFrame { get; }
    public Frame ParentFrame { get; }
    public IPage Page { get; internal set; }
    public bool IsDetached { get; internal set; }
    internal Frame(ChannelOwner parent, string guid, FrameInitializer initializer);
    [CompilerGeneratedAttribute]
public void add_Navigated(EventHandler`1<FrameNavigatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Navigated(EventHandler`1<FrameNavigatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_LoadState(EventHandler`1<WaitUntilState> value);
    [CompilerGeneratedAttribute]
public void remove_LoadState(EventHandler`1<WaitUntilState> value);
    public sealed virtual IReadOnlyList`1<IFrame> get_ChildFrames();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Url();
    [CompilerGeneratedAttribute]
internal void set_Url(string value);
    private sealed virtual override IFrame Microsoft.Playwright.IFrame.get_ParentFrame();
    [CompilerGeneratedAttribute]
public Frame get_ParentFrame();
    [CompilerGeneratedAttribute]
public sealed virtual IPage get_Page();
    [CompilerGeneratedAttribute]
internal void set_Page(IPage value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDetached();
    [CompilerGeneratedAttribute]
internal void set_IsDetached(bool value);
    internal virtual void OnMessage(string method, Nullable`1<JsonElement> serverParams);
    internal void OnLoadState(Nullable`1<WaitUntilState> add, Nullable`1<WaitUntilState> remove);
    internal void OnNavigated(FrameNavigatedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<FrameElementAsync>d__35")]
public sealed virtual Task`1<IElementHandle> FrameElementAsync();
    public sealed virtual IFrameLocator FrameLocator(string selector);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<TitleAsync>d__37")]
public sealed virtual Task`1<string> TitleAsync();
    public sealed virtual Task WaitForTimeoutAsync(float timeout);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, string values, FrameSelectOptionOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, IEnumerable`1<string> values, FrameSelectOptionOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, IElementHandle values, FrameSelectOptionOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<SelectOptionAsync>d__42")]
public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, IEnumerable`1<IElementHandle> values, FrameSelectOptionOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, SelectOptionValue values, FrameSelectOptionOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, IEnumerable`1<SelectOptionValue> values, FrameSelectOptionOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<SelectOptionAsync>d__45")]
internal Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, IEnumerable`1<SelectOptionValueProtocol> values, FrameSelectOptionOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<WaitForLoadStateAsync>d__46")]
public sealed virtual Task WaitForLoadStateAsync(Nullable`1<LoadState> state, FrameWaitForLoadStateOptions options);
    public sealed virtual Task`1<IResponse> WaitForNavigationAsync(FrameWaitForNavigationOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<RunAndWaitForNavigationAsync>d__48")]
public sealed virtual Task`1<IResponse> RunAndWaitForNavigationAsync(Func`1<Task> action, FrameRunAndWaitForNavigationOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<WaitForNavigationInternalAsync>d__49")]
private Task`1<IResponse> WaitForNavigationInternalAsync(Waiter waiter, string url, Func`2<string, bool> urlFunc, Regex urlRegex, string urlString, Nullable`1<WaitUntilState> waitUntil);
    public sealed virtual Task TapAsync(string selector, FrameTapOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<QueryCountAsync>d__51")]
internal Task`1<int> QueryCountAsync(string selector);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<ContentAsync>d__52")]
public sealed virtual Task`1<string> ContentAsync();
    public sealed virtual Task FocusAsync(string selector, FrameFocusOptions options);
    public sealed virtual Task TypeAsync(string selector, string text, FrameTypeOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<GetAttributeAsync>d__55")]
public sealed virtual Task`1<string> GetAttributeAsync(string selector, string name, FrameGetAttributeOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<InnerHTMLAsync>d__56")]
public sealed virtual Task`1<string> InnerHTMLAsync(string selector, FrameInnerHTMLOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<InnerTextAsync>d__57")]
public sealed virtual Task`1<string> InnerTextAsync(string selector, FrameInnerTextOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<TextContentAsync>d__58")]
public sealed virtual Task`1<string> TextContentAsync(string selector, FrameTextContentOptions options);
    public sealed virtual Task HoverAsync(string selector, FrameHoverOptions options);
    public sealed virtual Task PressAsync(string selector, string key, FramePressOptions options);
    public sealed virtual Task DispatchEventAsync(string selector, string type, object eventInit, FrameDispatchEventOptions options);
    public sealed virtual Task FillAsync(string selector, string value, FrameFillOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<AddScriptTagAsync>d__63")]
public sealed virtual Task`1<IElementHandle> AddScriptTagAsync(FrameAddScriptTagOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<AddStyleTagAsync>d__64")]
public sealed virtual Task`1<IElementHandle> AddStyleTagAsync(FrameAddStyleTagOptions options);
    public sealed virtual Task SetInputFilesAsync(string selector, string files, FrameSetInputFilesOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<SetInputFilesAsync>d__66")]
public sealed virtual Task SetInputFilesAsync(string selector, IEnumerable`1<string> files, FrameSetInputFilesOptions options);
    public sealed virtual Task SetInputFilesAsync(string selector, FilePayload files, FrameSetInputFilesOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<SetInputFilesAsync>d__68")]
public sealed virtual Task SetInputFilesAsync(string selector, IEnumerable`1<FilePayload> files, FrameSetInputFilesOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<_setInputFilesAsync>d__69")]
private Task _setInputFilesAsync(string selector, SetInputFilesFiles files, Nullable`1<bool> noWaitAfter, Nullable`1<float> timeout, Nullable`1<bool> strict);
    public sealed virtual Task ClickAsync(string selector, FrameClickOptions options);
    public sealed virtual Task DblClickAsync(string selector, FrameDblClickOptions options);
    public sealed virtual Task CheckAsync(string selector, FrameCheckOptions options);
    public sealed virtual Task UncheckAsync(string selector, FrameUncheckOptions options);
    public sealed virtual Task SetCheckedAsync(string selector, bool checkedState, FrameSetCheckedOptions options);
    public sealed virtual Task SetContentAsync(string html, FrameSetContentOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<InputValueAsync>d__76")]
public sealed virtual Task`1<string> InputValueAsync(string selector, FrameInputValueOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<QuerySelectorAsync>d__77")]
public Task`1<IElementHandle> QuerySelectorAsync(string selector);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<QuerySelectorAllAsync>d__78")]
public sealed virtual Task`1<IReadOnlyList`1<IElementHandle>> QuerySelectorAllAsync(string selector);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<WaitForFunctionAsync>d__79")]
public sealed virtual Task`1<IJSHandle> WaitForFunctionAsync(string expression, object arg, FrameWaitForFunctionOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<WaitForSelectorAsync>d__80")]
public sealed virtual Task`1<IElementHandle> WaitForSelectorAsync(string selector, FrameWaitForSelectorOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<EvaluateHandleAsync>d__81")]
public sealed virtual Task`1<IJSHandle> EvaluateHandleAsync(string script, object args);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<EvaluateAsync>d__82")]
public sealed virtual Task`1<Nullable`1<JsonElement>> EvaluateAsync(string script, object arg);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<EvaluateAsync>d__83`1")]
public sealed virtual Task`1<T> EvaluateAsync(string script, object arg);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<EvalOnSelectorAsync>d__84")]
public sealed virtual Task`1<Nullable`1<JsonElement>> EvalOnSelectorAsync(string selector, string script, object arg);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<EvalOnSelectorAsync>d__85`1")]
public Task`1<T> EvalOnSelectorAsync(string selector, string script, object arg);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<EvalOnSelectorAsync>d__86`1")]
public sealed virtual Task`1<T> EvalOnSelectorAsync(string selector, string expression, object arg, FrameEvalOnSelectorOptions options);
    private Task`1<Nullable`1<JsonElement>> _evalOnSelectorAsync(string selector, string script, object arg, Nullable`1<bool> strict);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<EvalOnSelectorAllAsync>d__88")]
public sealed virtual Task`1<Nullable`1<JsonElement>> EvalOnSelectorAllAsync(string selector, string script, object arg);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<EvalOnSelectorAllAsync>d__89`1")]
public sealed virtual Task`1<T> EvalOnSelectorAllAsync(string selector, string script, object arg);
    private Task`1<Nullable`1<JsonElement>> _evalOnSelectorAllAsync(string selector, string script, object arg);
    public sealed virtual ILocator Locator(string selector, FrameLocatorOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<QuerySelectorAsync>d__92")]
public sealed virtual Task`1<IElementHandle> QuerySelectorAsync(string selector, FrameQuerySelectorOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<GotoAsync>d__93")]
public sealed virtual Task`1<IResponse> GotoAsync(string url, FrameGotoOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<IsCheckedAsync>d__94")]
public sealed virtual Task`1<bool> IsCheckedAsync(string selector, FrameIsCheckedOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<IsDisabledAsync>d__95")]
public sealed virtual Task`1<bool> IsDisabledAsync(string selector, FrameIsDisabledOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<IsEditableAsync>d__96")]
public sealed virtual Task`1<bool> IsEditableAsync(string selector, FrameIsEditableOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<IsEnabledAsync>d__97")]
public sealed virtual Task`1<bool> IsEnabledAsync(string selector, FrameIsEnabledOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<IsHiddenAsync>d__98")]
public sealed virtual Task`1<bool> IsHiddenAsync(string selector, FrameIsHiddenOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<IsVisibleAsync>d__99")]
public sealed virtual Task`1<bool> IsVisibleAsync(string selector, FrameIsVisibleOptions options);
    public sealed virtual Task WaitForURLAsync(string url, FrameWaitForURLOptions options);
    public sealed virtual Task WaitForURLAsync(Regex url, FrameWaitForURLOptions options);
    public sealed virtual Task WaitForURLAsync(Func`2<string, bool> url, FrameWaitForURLOptions options);
    public sealed virtual Task DragAndDropAsync(string source, string target, FrameDragAndDropOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Frame/<ExpectAsync>d__104")]
internal Task`1<FrameExpectResult> ExpectAsync(string selector, string expression, FrameExpectOptions options);
    private Task WaitForURLAsync(string urlString, Regex urlRegex, Func`2<string, bool> urlFunc, FrameWaitForURLOptions options);
    private Nullable`1<LoadState> ToLoadState(Nullable`1<WaitUntilState> waitUntilState);
    private Waiter SetupNavigationWaiter(string event, Nullable`1<float> timeout);
    private bool UrlMatches(string url, string matchUrl, Regex regex, Func`2<string, bool> match);
    internal Task HighlightAsync(string selector);
    public sealed virtual ILocator GetByAltText(string text, FrameGetByAltTextOptions options);
    public sealed virtual ILocator GetByAltText(Regex text, FrameGetByAltTextOptions options);
    public sealed virtual ILocator GetByLabel(string text, FrameGetByLabelOptions options);
    public sealed virtual ILocator GetByLabel(Regex text, FrameGetByLabelOptions options);
    public sealed virtual ILocator GetByPlaceholder(string text, FrameGetByPlaceholderOptions options);
    public sealed virtual ILocator GetByPlaceholder(Regex text, FrameGetByPlaceholderOptions options);
    public sealed virtual ILocator GetByRole(AriaRole role, FrameGetByRoleOptions options);
    public sealed virtual ILocator GetByTestId(string testId);
    public sealed virtual ILocator GetByTestId(Regex testId);
    public sealed virtual ILocator GetByText(string text, FrameGetByTextOptions options);
    public sealed virtual ILocator GetByText(Regex text, FrameGetByTextOptions options);
    public sealed virtual ILocator GetByTitle(string text, FrameGetByTitleOptions options);
    public sealed virtual ILocator GetByTitle(Regex text, FrameGetByTitleOptions options);
    [CompilerGeneratedAttribute]
private PlaywrightException <SetupNavigationWaiter>b__107_0();
    [CompilerGeneratedAttribute]
private bool <SetupNavigationWaiter>b__107_1(IFrame e);
}
internal class Microsoft.Playwright.Core.FrameLocator : object {
    private Frame _frame;
    private string _frameSelector;
    public IFrameLocator First { get; }
    public IFrameLocator Last { get; }
    public ILocator Owner { get; }
    public FrameLocator(Frame parent, string selector);
    public sealed virtual IFrameLocator get_First();
    public sealed virtual IFrameLocator get_Last();
    public sealed virtual ILocator get_Owner();
    private sealed virtual override ILocator Microsoft.Playwright.IFrameLocator.GetByAltText(string text, FrameLocatorGetByAltTextOptions options);
    public sealed virtual ILocator GetByAltText(Regex text, FrameLocatorGetByAltTextOptions options);
    public sealed virtual ILocator GetByLabel(string text, FrameLocatorGetByLabelOptions options);
    public sealed virtual ILocator GetByLabel(Regex text, FrameLocatorGetByLabelOptions options);
    public sealed virtual ILocator GetByPlaceholder(string text, FrameLocatorGetByPlaceholderOptions options);
    public sealed virtual ILocator GetByPlaceholder(Regex text, FrameLocatorGetByPlaceholderOptions options);
    public sealed virtual ILocator GetByRole(AriaRole role, FrameLocatorGetByRoleOptions options);
    public sealed virtual ILocator GetByTestId(string testId);
    public sealed virtual ILocator GetByTestId(Regex testId);
    public sealed virtual ILocator GetByText(string text, FrameLocatorGetByTextOptions options);
    public sealed virtual ILocator GetByText(Regex text, FrameLocatorGetByTextOptions options);
    public sealed virtual ILocator GetByTitle(string text, FrameLocatorGetByTitleOptions options);
    public sealed virtual ILocator GetByTitle(Regex text, FrameLocatorGetByTitleOptions options);
    private sealed virtual override IFrameLocator Microsoft.Playwright.IFrameLocator.FrameLocator(string selector);
    public sealed virtual ILocator Locator(string selector, FrameLocatorLocatorOptions options);
    public sealed virtual ILocator Locator(ILocator locator, FrameLocatorLocatorOptions options);
    public sealed virtual IFrameLocator Nth(int index);
}
internal class Microsoft.Playwright.Core.FrameNavigatedEventArgs : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigateDocument <NewDocument>k__BackingField;
    public string Name { get; public set; }
    public string Url { get; public set; }
    public string Error { get; public set; }
    internal NavigateDocument NewDocument { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
internal NavigateDocument get_NewDocument();
    [CompilerGeneratedAttribute]
internal void set_NewDocument(NavigateDocument value);
}
internal class Microsoft.Playwright.Core.HarRecorder : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<HarContentPolicy> <Content>k__BackingField;
    internal string Path { get; internal set; }
    internal Nullable`1<HarContentPolicy> Content { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_Path();
    [CompilerGeneratedAttribute]
internal void set_Path(string value);
    [CompilerGeneratedAttribute]
internal Nullable`1<HarContentPolicy> get_Content();
    [CompilerGeneratedAttribute]
internal void set_Content(Nullable`1<HarContentPolicy> value);
}
internal class Microsoft.Playwright.Core.HarRouter : object {
    private LocalUtils _localUtils;
    private string _harId;
    private HarRouterOptions _options;
    private HarNotFound _notFoundAction;
    private HarRouter(LocalUtils localUtils, string harId, HarNotFound notFoundAction, HarRouterOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.HarRouter/<CreateAsync>d__5")]
internal static Task`1<HarRouter> CreateAsync(LocalUtils localUtils, string file, HarNotFound notFoundAction, HarRouterOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.HarRouter/<HandleAsync>d__6")]
private Task HandleAsync(Route route);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.HarRouter/<AddContextRouteAsync>d__7")]
internal Task AddContextRouteAsync(BrowserContext context);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.HarRouter/<AddPageRouteAsync>d__8")]
internal Task AddPageRouteAsync(Page page);
    internal void Dispose();
    [CompilerGeneratedAttribute]
private Task <AddContextRouteAsync>b__7_0(IRoute route);
    [CompilerGeneratedAttribute]
private Task <AddContextRouteAsync>b__7_1(IRoute route);
    [CompilerGeneratedAttribute]
private Task <AddContextRouteAsync>b__7_2(IRoute route);
    [CompilerGeneratedAttribute]
private Task <AddContextRouteAsync>b__7_3(IRoute route);
    [CompilerGeneratedAttribute]
private Task <AddPageRouteAsync>b__8_0(IRoute route);
    [CompilerGeneratedAttribute]
private Task <AddPageRouteAsync>b__8_1(IRoute route);
    [CompilerGeneratedAttribute]
private Task <AddPageRouteAsync>b__8_2(IRoute route);
    [CompilerGeneratedAttribute]
private Task <AddPageRouteAsync>b__8_3(IRoute route);
}
internal class Microsoft.Playwright.Core.HarRouterOptions : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlString>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UrlRegex>k__BackingField;
    internal string Url { get; internal set; }
    internal string UrlString { get; internal set; }
    internal Regex UrlRegex { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_Url();
    [CompilerGeneratedAttribute]
internal void set_Url(string value);
    [CompilerGeneratedAttribute]
internal string get_UrlString();
    [CompilerGeneratedAttribute]
internal void set_UrlString(string value);
    [CompilerGeneratedAttribute]
internal Regex get_UrlRegex();
    [CompilerGeneratedAttribute]
internal void set_UrlRegex(Regex value);
}
internal class Microsoft.Playwright.Core.JSElementProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private JSHandle <Value>k__BackingField;
    public string Name { get; public set; }
    public JSHandle Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public JSHandle get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(JSHandle value);
}
internal class Microsoft.Playwright.Core.JSHandle : ChannelOwner {
    [CompilerGeneratedAttribute]
private string <Preview>k__BackingField;
    protected string Preview { get; protected set; }
    internal JSHandle(ChannelOwner parent, string guid, JSHandleInitializer initializer);
    [CompilerGeneratedAttribute]
protected string get_Preview();
    [CompilerGeneratedAttribute]
protected void set_Preview(string value);
    public sealed virtual IElementHandle AsElement();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.JSHandle/<EvaluateAsync>d__6")]
public sealed virtual Task`1<Nullable`1<JsonElement>> EvaluateAsync(string expression, object arg);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.JSHandle/<EvaluateHandleAsync>d__7")]
public sealed virtual Task`1<IJSHandle> EvaluateHandleAsync(string expression, object arg);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.JSHandle/<EvaluateAsync>d__8`1")]
public sealed virtual Task`1<T> EvaluateAsync(string expression, object arg);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.JSHandle/<JsonValueAsync>d__9`1")]
public sealed virtual Task`1<T> JsonValueAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.JSHandle/<GetPropertyAsync>d__10")]
public sealed virtual Task`1<IJSHandle> GetPropertyAsync(string propertyName);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.JSHandle/<GetPropertiesAsync>d__11")]
public sealed virtual Task`1<Dictionary`2<string, IJSHandle>> GetPropertiesAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.JSHandle/<DisposeAsync>d__12")]
public sealed virtual ValueTask DisposeAsync();
    public virtual string ToString();
}
internal class Microsoft.Playwright.Core.JsonPipe : ChannelOwner {
    private JsonPipeInitializer _initializer;
    [CompilerGeneratedAttribute]
private EventHandler`1<PlaywrightServerMessage> Message;
    [CompilerGeneratedAttribute]
private EventHandler`1<string> Closed;
    public JsonPipe(ChannelOwner parent, string guid, JsonPipeInitializer initializer);
    [CompilerGeneratedAttribute]
public void add_Message(EventHandler`1<PlaywrightServerMessage> value);
    [CompilerGeneratedAttribute]
public void remove_Message(EventHandler`1<PlaywrightServerMessage> value);
    [CompilerGeneratedAttribute]
public void add_Closed(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public void remove_Closed(EventHandler`1<string> value);
    internal virtual void OnMessage(string method, Nullable`1<JsonElement> serverParams);
    public Task CloseAsync();
    public Task SendAsync(object message);
}
internal class Microsoft.Playwright.Core.Keyboard : object {
    private Page _page;
    public Keyboard(Page page);
    public sealed virtual Task DownAsync(string key);
    public sealed virtual Task UpAsync(string key);
    public sealed virtual Task PressAsync(string key, KeyboardPressOptions options);
    public sealed virtual Task TypeAsync(string text, KeyboardTypeOptions options);
    public sealed virtual Task InsertTextAsync(string text);
}
internal class Microsoft.Playwright.Core.LocalUtils : ChannelOwner {
    internal Dictionary`2<string, BrowserNewContextOptions> _devices;
    public LocalUtils(ChannelOwner parent, string guid, LocalUtilsInitializer initializer);
    internal Task ZipAsync(string zipFile, List`1<NameValue> entries, string mode, string stacksId, bool includeSources);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.LocalUtils/<HarOpenAsync>d__3")]
internal Task`1<ValueTuple`2<string, string>> HarOpenAsync(string file);
    internal Task`1<LocalUtilsHarLookupResult> HarLookupAsync(string harId, string url, string method, List`1<Header> headers, Byte[] postData, bool isNavigationRequest);
    internal Task HarCloseAsync(string harId);
    internal Task HarUnzipAsync(string zipFile, string harFile);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.LocalUtils/<ConnectAsync>d__7")]
internal Task`1<JsonPipe> ConnectAsync(string wsEndpoint, IEnumerable`1<KeyValuePair`2<string, string>> headers, Nullable`1<float> slowMo, Nullable`1<float> timeout, string exposeNetwork);
    internal void AddStackToTracingNoReply(List`1<StackFrame> stack, int id);
    internal Task TraceDiscardedAsync(string stacksId);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.LocalUtils/<TracingStartedAsync>d__10")]
internal Task`1<string> TracingStartedAsync(string tracesDir, string traceName);
}
internal class Microsoft.Playwright.Core.LocalUtilsHarLookupResult : object {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectURL>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NameValue> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Body>k__BackingField;
    public string Action { get; public set; }
    public string Message { get; public set; }
    public string RedirectURL { get; public set; }
    public int Status { get; public set; }
    public List`1<NameValue> Headers { get; public set; }
    public Byte[] Body { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_RedirectURL();
    [CompilerGeneratedAttribute]
public void set_RedirectURL(string value);
    [CompilerGeneratedAttribute]
public int get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(int value);
    [CompilerGeneratedAttribute]
public List`1<NameValue> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(List`1<NameValue> value);
    [CompilerGeneratedAttribute]
public Byte[] get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Byte[] value);
}
internal class Microsoft.Playwright.Core.Locator : object {
    internal Frame _frame;
    internal string _selector;
    private static JsonSerializerOptions _locatorSerializerOptions;
    private static string _testIdAttributeName;
    public ILocator First { get; }
    public ILocator Last { get; }
    public IPage Page { get; }
    public IFrameLocator ContentFrame { get; }
    public Locator(Frame parent, string selector, LocatorLocatorOptions options);
    private static Locator();
    public sealed virtual ILocator get_First();
    public sealed virtual ILocator get_Last();
    public sealed virtual IPage get_Page();
    public sealed virtual IFrameLocator get_ContentFrame();
    internal bool EqualLocator(Locator locator);
    public sealed virtual Task`1<LocatorBoundingBoxResult> BoundingBoxAsync(LocatorBoundingBoxOptions options);
    public sealed virtual Task CheckAsync(LocatorCheckOptions options);
    public sealed virtual Task ClickAsync(LocatorClickOptions options);
    public sealed virtual Task DblClickAsync(LocatorDblClickOptions options);
    public sealed virtual Task DispatchEventAsync(string type, object eventInit, LocatorDispatchEventOptions options);
    public sealed virtual Task DragToAsync(ILocator target, LocatorDragToOptions options);
    public sealed virtual Task`1<Nullable`1<JsonElement>> EvaluateAsync(string expression, object arg, LocatorEvaluateOptions options);
    public sealed virtual Task`1<T> EvaluateAsync(string expression, object arg, LocatorEvaluateOptions options);
    public sealed virtual Task`1<T> EvaluateAllAsync(string expression, object arg);
    public sealed virtual Task`1<IJSHandle> EvaluateHandleAsync(string expression, object arg, LocatorEvaluateHandleOptions options);
    public sealed virtual Task FillAsync(string value, LocatorFillOptions options);
    public sealed virtual Task ClearAsync(LocatorClearOptions options);
    public sealed virtual Task HighlightAsync();
    private sealed virtual override ILocator Microsoft.Playwright.ILocator.Locator(string selector, LocatorLocatorOptions options);
    private sealed virtual override ILocator Microsoft.Playwright.ILocator.Locator(ILocator locator, LocatorLocatorOptions options);
    private sealed virtual override IFrameLocator Microsoft.Playwright.ILocator.FrameLocator(string selector);
    public sealed virtual ILocator Filter(LocatorFilterOptions options);
    public sealed virtual Task`1<IElementHandle> ElementHandleAsync(LocatorElementHandleOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<IElementHandle>> ElementHandlesAsync();
    public sealed virtual ILocator Nth(int index);
    public sealed virtual ILocator Or(ILocator locator);
    public sealed virtual ILocator And(ILocator locator);
    public sealed virtual Task FocusAsync(LocatorFocusOptions options);
    public sealed virtual Task BlurAsync(LocatorBlurOptions options);
    public sealed virtual Task`1<int> CountAsync();
    public sealed virtual Task`1<string> GetAttributeAsync(string name, LocatorGetAttributeOptions options);
    public sealed virtual Task HoverAsync(LocatorHoverOptions options);
    public sealed virtual Task`1<string> InnerHTMLAsync(LocatorInnerHTMLOptions options);
    public sealed virtual Task`1<string> InnerTextAsync(LocatorInnerTextOptions options);
    public sealed virtual Task`1<string> InputValueAsync(LocatorInputValueOptions options);
    public sealed virtual Task`1<bool> IsCheckedAsync(LocatorIsCheckedOptions options);
    public sealed virtual Task`1<bool> IsDisabledAsync(LocatorIsDisabledOptions options);
    public sealed virtual Task`1<bool> IsEditableAsync(LocatorIsEditableOptions options);
    public sealed virtual Task`1<bool> IsEnabledAsync(LocatorIsEnabledOptions options);
    public sealed virtual Task`1<bool> IsHiddenAsync(LocatorIsHiddenOptions options);
    public sealed virtual Task`1<bool> IsVisibleAsync(LocatorIsVisibleOptions options);
    public sealed virtual Task PressAsync(string key, LocatorPressOptions options);
    public sealed virtual Task`1<Byte[]> ScreenshotAsync(LocatorScreenshotOptions options);
    public sealed virtual Task ScrollIntoViewIfNeededAsync(LocatorScrollIntoViewIfNeededOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string values, LocatorSelectOptionOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(IElementHandle values, LocatorSelectOptionOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(IEnumerable`1<string> values, LocatorSelectOptionOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(SelectOptionValue values, LocatorSelectOptionOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(IEnumerable`1<IElementHandle> values, LocatorSelectOptionOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(IEnumerable`1<SelectOptionValue> values, LocatorSelectOptionOptions options);
    public sealed virtual Task SelectTextAsync(LocatorSelectTextOptions options);
    public sealed virtual Task SetCheckedAsync(bool checked, LocatorSetCheckedOptions options);
    public sealed virtual Task SetInputFilesAsync(string files, LocatorSetInputFilesOptions options);
    public sealed virtual Task SetInputFilesAsync(IEnumerable`1<string> files, LocatorSetInputFilesOptions options);
    public sealed virtual Task SetInputFilesAsync(FilePayload files, LocatorSetInputFilesOptions options);
    public sealed virtual Task SetInputFilesAsync(IEnumerable`1<FilePayload> files, LocatorSetInputFilesOptions options);
    public sealed virtual Task TapAsync(LocatorTapOptions options);
    public sealed virtual Task`1<string> TextContentAsync(LocatorTextContentOptions options);
    public sealed virtual Task TypeAsync(string text, LocatorTypeOptions options);
    public sealed virtual Task PressSequentiallyAsync(string text, LocatorPressSequentiallyOptions options);
    public sealed virtual Task UncheckAsync(LocatorUncheckOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Locator/<AllInnerTextsAsync>d__70")]
public sealed virtual Task`1<IReadOnlyList`1<string>> AllInnerTextsAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Locator/<AllTextContentsAsync>d__71")]
public sealed virtual Task`1<IReadOnlyList`1<string>> AllTextContentsAsync();
    public sealed virtual Task WaitForAsync(LocatorWaitForOptions options);
    internal Task`1<FrameExpectResult> ExpectAsync(string expression, FrameExpectOptions options);
    public virtual string ToString();
    private T ConvertOptions(object source, T inheritFrom);
    private Task`1<TResult> WithElementAsync(Func`3<IElementHandle, Nullable`1<float>, Task`1<TResult>> task, Nullable`1<float> timeout);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Locator/<WithElementAsync>d__77")]
private Task WithElementAsync(Func`3<IElementHandle, Nullable`1<float>, Task> callback, Nullable`1<float> timeout);
    public sealed virtual ILocator GetByAltText(string text, LocatorGetByAltTextOptions options);
    public sealed virtual ILocator GetByAltText(Regex text, LocatorGetByAltTextOptions options);
    public sealed virtual ILocator GetByLabel(string text, LocatorGetByLabelOptions options);
    public sealed virtual ILocator GetByLabel(Regex text, LocatorGetByLabelOptions options);
    public sealed virtual ILocator GetByPlaceholder(string text, LocatorGetByPlaceholderOptions options);
    public sealed virtual ILocator GetByPlaceholder(Regex text, LocatorGetByPlaceholderOptions options);
    public sealed virtual ILocator GetByRole(AriaRole role, LocatorGetByRoleOptions options);
    public sealed virtual ILocator GetByTestId(string testId);
    public sealed virtual ILocator GetByTestId(Regex testId);
    public sealed virtual ILocator GetByText(string text, LocatorGetByTextOptions options);
    public sealed virtual ILocator GetByText(Regex text, LocatorGetByTextOptions options);
    public sealed virtual ILocator GetByTitle(string text, LocatorGetByTitleOptions options);
    public sealed virtual ILocator GetByTitle(Regex text, LocatorGetByTitleOptions options);
    internal static string TestIdAttributeName();
    internal static void SetTestIdAttribute(string attributeName);
    internal static string GetByTestIdSelector(string testIdAttributeName, string testId);
    internal static string GetByTestIdSelector(string testIdAttributeName, Regex testId);
    internal static string GetByAttributeTextSelector(string attrName, string text, Nullable`1<bool> exact);
    internal static string GetByAttributeTextSelector(string attrName, Regex text, Nullable`1<bool> exact);
    internal static string GetByLabelSelector(string text, Nullable`1<bool> exact);
    internal static string GetByLabelSelector(Regex text, Nullable`1<bool> exact);
    internal static string GetByAltTextSelector(string text, Nullable`1<bool> exact);
    internal static string GetByAltTextSelector(Regex text, Nullable`1<bool> exact);
    internal static string GetByTitleSelector(string text, Nullable`1<bool> exact);
    internal static string GetByTitleSelector(Regex text, Nullable`1<bool> exact);
    internal static string GetByPlaceholderSelector(string text, Nullable`1<bool> exact);
    internal static string GetByPlaceholderSelector(Regex text, Nullable`1<bool> exact);
    internal static string GetByTextSelector(string text, Nullable`1<bool> exact);
    internal static string GetByTextSelector(Regex text, Nullable`1<bool> exact);
    internal static string GetByRoleSelector(AriaRole role, ByRoleOptions options);
    private static string EscapeForAttributeSelector(string value, bool exact);
    private static string EscapeForAttributeSelector(Regex value, bool exact);
    private static string EscapeRegexForSelector(Regex text);
    private static string EscapeForTextSelector(Regex text, Nullable`1<bool> exact);
    private static string EscapeForTextSelector(string text, Nullable`1<bool> exact);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Locator/<Microsoft-Playwright-ILocator-AllAsync>d__113")]
private sealed virtual override Task`1<IReadOnlyList`1<ILocator>> Microsoft.Playwright.ILocator.AllAsync();
}
internal class Microsoft.Playwright.Core.LocatorAssertions : AssertionsBase {
    public ILocatorAssertions Not { get; }
    public LocatorAssertions(ILocator locator, bool isNot);
    public sealed virtual ILocatorAssertions get_Not();
    public sealed virtual Task ToBeAttachedAsync(LocatorAssertionsToBeAttachedOptions options);
    public sealed virtual Task ToBeCheckedAsync(LocatorAssertionsToBeCheckedOptions options);
    public sealed virtual Task ToBeDisabledAsync(LocatorAssertionsToBeDisabledOptions options);
    public sealed virtual Task ToBeEditableAsync(LocatorAssertionsToBeEditableOptions options);
    public sealed virtual Task ToBeEmptyAsync(LocatorAssertionsToBeEmptyOptions options);
    public sealed virtual Task ToBeEnabledAsync(LocatorAssertionsToBeEnabledOptions options);
    public sealed virtual Task ToBeFocusedAsync(LocatorAssertionsToBeFocusedOptions options);
    public sealed virtual Task ToBeHiddenAsync(LocatorAssertionsToBeHiddenOptions options);
    public sealed virtual Task ToBeInViewportAsync(LocatorAssertionsToBeInViewportOptions options);
    public sealed virtual Task ToBeVisibleAsync(LocatorAssertionsToBeVisibleOptions options);
    private Task ExpectTrueAsync(string expression, string message, FrameExpectOptions options);
    public sealed virtual Task ToContainTextAsync(string expected, LocatorAssertionsToContainTextOptions options);
    public sealed virtual Task ToContainTextAsync(Regex expected, LocatorAssertionsToContainTextOptions options);
    public sealed virtual Task ToContainTextAsync(IEnumerable`1<string> expected, LocatorAssertionsToContainTextOptions options);
    public sealed virtual Task ToContainTextAsync(IEnumerable`1<Regex> expected, LocatorAssertionsToContainTextOptions options);
    public sealed virtual Task ToHaveAttributeAsync(string name, string value, LocatorAssertionsToHaveAttributeOptions options);
    public sealed virtual Task ToHaveAttributeAsync(string name, Regex value, LocatorAssertionsToHaveAttributeOptions options);
    private Task ToHaveAttributeAsync(string name, ExpectedTextValue expectedText, object expectedValue, LocatorAssertionsToHaveAttributeOptions options);
    public sealed virtual Task ToHaveClassAsync(string expected, LocatorAssertionsToHaveClassOptions options);
    public sealed virtual Task ToHaveClassAsync(Regex expected, LocatorAssertionsToHaveClassOptions options);
    public sealed virtual Task ToHaveClassAsync(IEnumerable`1<string> expected, LocatorAssertionsToHaveClassOptions options);
    public sealed virtual Task ToHaveClassAsync(IEnumerable`1<Regex> expected, LocatorAssertionsToHaveClassOptions options);
    public sealed virtual Task ToHaveCountAsync(int count, LocatorAssertionsToHaveCountOptions options);
    public sealed virtual Task ToHaveCSSAsync(string name, string value, LocatorAssertionsToHaveCSSOptions options);
    public sealed virtual Task ToHaveCSSAsync(string name, Regex value, LocatorAssertionsToHaveCSSOptions options);
    internal Task ToHaveCSSAsync(string name, ExpectedTextValue expectedText, object expectedValue, LocatorAssertionsToHaveCSSOptions options);
    public sealed virtual Task ToHaveIdAsync(string id, LocatorAssertionsToHaveIdOptions options);
    public sealed virtual Task ToHaveIdAsync(Regex id, LocatorAssertionsToHaveIdOptions options);
    public sealed virtual Task ToHaveJSPropertyAsync(string name, object value, LocatorAssertionsToHaveJSPropertyOptions options);
    public sealed virtual Task ToHaveTextAsync(string expected, LocatorAssertionsToHaveTextOptions options);
    public sealed virtual Task ToHaveTextAsync(Regex expected, LocatorAssertionsToHaveTextOptions options);
    public sealed virtual Task ToHaveTextAsync(IEnumerable`1<string> expected, LocatorAssertionsToHaveTextOptions options);
    public sealed virtual Task ToHaveTextAsync(IEnumerable`1<Regex> expected, LocatorAssertionsToHaveTextOptions options);
    public sealed virtual Task ToHaveValueAsync(string value, LocatorAssertionsToHaveValueOptions options);
    public sealed virtual Task ToHaveValueAsync(Regex value, LocatorAssertionsToHaveValueOptions options);
    public sealed virtual Task ToHaveValuesAsync(IEnumerable`1<string> values, LocatorAssertionsToHaveValuesOptions options);
    public sealed virtual Task ToHaveValuesAsync(IEnumerable`1<Regex> values, LocatorAssertionsToHaveValuesOptions options);
    public sealed virtual Task ToHaveAccessibleDescriptionAsync(string expected, LocatorAssertionsToHaveAccessibleDescriptionOptions options);
    public sealed virtual Task ToHaveAccessibleDescriptionAsync(Regex expected, LocatorAssertionsToHaveAccessibleDescriptionOptions options);
    public sealed virtual Task ToHaveAccessibleNameAsync(string expected, LocatorAssertionsToHaveAccessibleNameOptions options);
    public sealed virtual Task ToHaveAccessibleNameAsync(Regex expected, LocatorAssertionsToHaveAccessibleNameOptions options);
    public sealed virtual Task ToHaveRoleAsync(AriaRole role, LocatorAssertionsToHaveRoleOptions options);
    [CompilerGeneratedAttribute]
private ExpectedTextValue <ToHaveClassAsync>b__24_0(Regex regex);
    [CompilerGeneratedAttribute]
private ExpectedTextValue <ToHaveValuesAsync>b__39_0(Regex regex);
}
internal class Microsoft.Playwright.Core.LocatorHandler : object {
    [CompilerGeneratedAttribute]
private Locator <Locator>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Times>k__BackingField;
    internal Locator Locator { get; }
    private object Handler { get; }
    internal Nullable`1<int> Times { get; internal set; }
    internal LocatorHandler(Locator locator, object handler, Nullable`1<int> times);
    [CompilerGeneratedAttribute]
internal Locator get_Locator();
    [CompilerGeneratedAttribute]
private object get_Handler();
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_Times();
    [CompilerGeneratedAttribute]
internal void set_Times(Nullable`1<int> value);
    internal Task HandleAsync();
}
internal class Microsoft.Playwright.Core.Mouse : object {
    private Page _page;
    public Mouse(Page page);
    public sealed virtual Task ClickAsync(float x, float y, MouseClickOptions options);
    public sealed virtual Task DblClickAsync(float x, float y, MouseDblClickOptions options);
    public sealed virtual Task DownAsync(MouseDownOptions options);
    public sealed virtual Task MoveAsync(float x, float y, MouseMoveOptions options);
    public sealed virtual Task UpAsync(MouseUpOptions options);
    public sealed virtual Task WheelAsync(float deltaX, float deltaY);
}
internal class Microsoft.Playwright.Core.NavigateDocument : object {
    [CompilerGeneratedAttribute]
private Request <Request>k__BackingField;
    public Request Request { get; public set; }
    [CompilerGeneratedAttribute]
public Request get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(Request value);
}
internal class Microsoft.Playwright.Core.Page : ChannelOwner {
    private List`1<Frame> _frames;
    private PageInitializer _initializer;
    internal List`1<Worker> _workers;
    internal TimeoutSettings _timeoutSettings;
    private List`1<HarRouter> _harRouters;
    private Dictionary`2<int, LocatorHandler> _locatorHandlers;
    private List`1<RouteHandler> _routes;
    private Video _video;
    private string _closeReason;
    [CompilerGeneratedAttribute]
private EventHandler`1<IRequest> _requestImpl;
    [CompilerGeneratedAttribute]
private EventHandler`1<IResponse> _responseImpl;
    [CompilerGeneratedAttribute]
private EventHandler`1<IRequest> _requestFinishedImpl;
    [CompilerGeneratedAttribute]
private EventHandler`1<IRequest> _requestFailedImpl;
    [CompilerGeneratedAttribute]
private EventHandler`1<IFileChooser> _fileChooserImpl;
    [CompilerGeneratedAttribute]
private EventHandler`1<IConsoleMessage> _consoleImpl;
    [CompilerGeneratedAttribute]
private EventHandler`1<IDialog> _dialogImpl;
    [CompilerGeneratedAttribute]
private EventHandler`1<IPage> Popup;
    [CompilerGeneratedAttribute]
private EventHandler`1<IWebSocket> WebSocket;
    [CompilerGeneratedAttribute]
private EventHandler`1<IFrame> FrameAttached;
    [CompilerGeneratedAttribute]
private EventHandler`1<IFrame> FrameDetached;
    [CompilerGeneratedAttribute]
private EventHandler`1<IFrame> FrameNavigated;
    [CompilerGeneratedAttribute]
private EventHandler`1<IPage> Load;
    [CompilerGeneratedAttribute]
private EventHandler`1<IPage> DOMContentLoaded;
    [CompilerGeneratedAttribute]
private EventHandler`1<IPage> Close;
    [CompilerGeneratedAttribute]
private EventHandler`1<IPage> Crash;
    [CompilerGeneratedAttribute]
private EventHandler`1<string> PageError;
    [CompilerGeneratedAttribute]
private EventHandler`1<IWorker> Worker;
    [CompilerGeneratedAttribute]
private EventHandler`1<IDownload> Download;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CloseWasCalled>k__BackingField;
    [CompilerGeneratedAttribute]
private Frame <MainFrame>k__BackingField;
    [CompilerGeneratedAttribute]
private BrowserContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private PageViewportSizeResult <ViewportSize>k__BackingField;
    [CompilerGeneratedAttribute]
private IAccessibility <Accessibility>k__BackingField;
    [CompilerGeneratedAttribute]
private IMouse <Mouse>k__BackingField;
    [CompilerGeneratedAttribute]
private IKeyboard <Keyboard>k__BackingField;
    [CompilerGeneratedAttribute]
private ITouchscreen <Touchscreen>k__BackingField;
    [CompilerGeneratedAttribute]
private BrowserContext <OwnedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Delegate> <Bindings>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<bool> <ClosedOrCrashedTcs>k__BackingField;
    [CompilerGeneratedAttribute]
private IAPIRequestContext <APIRequest>k__BackingField;
    public bool IsClosed { get; private set; }
    internal bool CloseWasCalled { get; private set; }
    private IFrame Microsoft.Playwright.IPage.MainFrame { get; }
    public Frame MainFrame { get; }
    private IBrowserContext Microsoft.Playwright.IPage.Context { get; }
    public BrowserContext Context { get; public set; }
    public PageViewportSizeResult ViewportSize { get; private set; }
    public IAccessibility Accessibility { get; }
    public IMouse Mouse { get; }
    public IClock Clock { get; }
    public string Url { get; }
    public IReadOnlyList`1<IFrame> Frames { get; }
    public IKeyboard Keyboard { get; }
    public ITouchscreen Touchscreen { get; }
    public IReadOnlyList`1<IWorker> Workers { get; }
    public IVideo Video { get; public set; }
    internal BrowserContext OwnedContext { get; internal set; }
    internal Dictionary`2<string, Delegate> Bindings { get; }
    internal Page Opener { get; }
    internal TaskCompletionSource`1<bool> ClosedOrCrashedTcs { get; }
    public IAPIRequestContext APIRequest { get; }
    internal Page(ChannelOwner parent, string guid, PageInitializer initializer);
    [CompilerGeneratedAttribute]
private void add__requestImpl(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
private void remove__requestImpl(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
private void add__responseImpl(EventHandler`1<IResponse> value);
    [CompilerGeneratedAttribute]
private void remove__responseImpl(EventHandler`1<IResponse> value);
    [CompilerGeneratedAttribute]
private void add__requestFinishedImpl(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
private void remove__requestFinishedImpl(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
private void add__requestFailedImpl(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
private void remove__requestFailedImpl(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
private void add__fileChooserImpl(EventHandler`1<IFileChooser> value);
    [CompilerGeneratedAttribute]
private void remove__fileChooserImpl(EventHandler`1<IFileChooser> value);
    [CompilerGeneratedAttribute]
private void add__consoleImpl(EventHandler`1<IConsoleMessage> value);
    [CompilerGeneratedAttribute]
private void remove__consoleImpl(EventHandler`1<IConsoleMessage> value);
    [CompilerGeneratedAttribute]
private void add__dialogImpl(EventHandler`1<IDialog> value);
    [CompilerGeneratedAttribute]
private void remove__dialogImpl(EventHandler`1<IDialog> value);
    public sealed virtual void add_Console(EventHandler`1<IConsoleMessage> value);
    public sealed virtual void remove_Console(EventHandler`1<IConsoleMessage> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Popup(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Popup(EventHandler`1<IPage> value);
    public sealed virtual void add_Request(EventHandler`1<IRequest> value);
    public sealed virtual void remove_Request(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_WebSocket(EventHandler`1<IWebSocket> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_WebSocket(EventHandler`1<IWebSocket> value);
    public sealed virtual void add_Response(EventHandler`1<IResponse> value);
    public sealed virtual void remove_Response(EventHandler`1<IResponse> value);
    public sealed virtual void add_RequestFinished(EventHandler`1<IRequest> value);
    public sealed virtual void remove_RequestFinished(EventHandler`1<IRequest> value);
    public sealed virtual void add_RequestFailed(EventHandler`1<IRequest> value);
    public sealed virtual void remove_RequestFailed(EventHandler`1<IRequest> value);
    public sealed virtual void add_Dialog(EventHandler`1<IDialog> value);
    public sealed virtual void remove_Dialog(EventHandler`1<IDialog> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_FrameAttached(EventHandler`1<IFrame> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FrameAttached(EventHandler`1<IFrame> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_FrameDetached(EventHandler`1<IFrame> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FrameDetached(EventHandler`1<IFrame> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_FrameNavigated(EventHandler`1<IFrame> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FrameNavigated(EventHandler`1<IFrame> value);
    public sealed virtual void add_FileChooser(EventHandler`1<IFileChooser> value);
    public sealed virtual void remove_FileChooser(EventHandler`1<IFileChooser> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Load(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Load(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DOMContentLoaded(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DOMContentLoaded(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Close(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Close(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Crash(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Crash(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PageError(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PageError(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Worker(EventHandler`1<IWorker> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Worker(EventHandler`1<IWorker> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Download(EventHandler`1<IDownload> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Download(EventHandler`1<IDownload> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
private void set_IsClosed(bool value);
    [CompilerGeneratedAttribute]
internal bool get_CloseWasCalled();
    [CompilerGeneratedAttribute]
private void set_CloseWasCalled(bool value);
    private sealed virtual override IFrame Microsoft.Playwright.IPage.get_MainFrame();
    [CompilerGeneratedAttribute]
public Frame get_MainFrame();
    private sealed virtual override IBrowserContext Microsoft.Playwright.IPage.get_Context();
    [CompilerGeneratedAttribute]
public BrowserContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(BrowserContext value);
    [CompilerGeneratedAttribute]
public sealed virtual PageViewportSizeResult get_ViewportSize();
    [CompilerGeneratedAttribute]
private void set_ViewportSize(PageViewportSizeResult value);
    [CompilerGeneratedAttribute]
public sealed virtual IAccessibility get_Accessibility();
    [CompilerGeneratedAttribute]
public sealed virtual IMouse get_Mouse();
    public sealed virtual IClock get_Clock();
    public sealed virtual string get_Url();
    public sealed virtual IReadOnlyList`1<IFrame> get_Frames();
    [CompilerGeneratedAttribute]
public sealed virtual IKeyboard get_Keyboard();
    [CompilerGeneratedAttribute]
public sealed virtual ITouchscreen get_Touchscreen();
    public sealed virtual IReadOnlyList`1<IWorker> get_Workers();
    public sealed virtual IVideo get_Video();
    public void set_Video(IVideo value);
    [CompilerGeneratedAttribute]
internal BrowserContext get_OwnedContext();
    [CompilerGeneratedAttribute]
internal void set_OwnedContext(BrowserContext value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, Delegate> get_Bindings();
    internal Page get_Opener();
    [CompilerGeneratedAttribute]
internal TaskCompletionSource`1<bool> get_ClosedOrCrashedTcs();
    [CompilerGeneratedAttribute]
public sealed virtual IAPIRequestContext get_APIRequest();
    internal virtual void OnMessage(string method, Nullable`1<JsonElement> serverParams);
    public sealed virtual IFrame Frame(string name);
    public sealed virtual IFrame FrameByUrl(string urlString);
    public sealed virtual IFrame FrameByUrl(Regex urlRegex);
    public sealed virtual IFrame FrameByUrl(Func`2<string, bool> urlFunc);
    private sealed virtual override IFrameLocator Microsoft.Playwright.IPage.FrameLocator(string selector);
    public sealed virtual Task`1<string> TitleAsync();
    public sealed virtual Task BringToFrontAsync();
    public sealed virtual Task`1<IPage> OpenerAsync();
    public sealed virtual Task EmulateMediaAsync(PageEmulateMediaOptions options);
    public sealed virtual Task`1<IResponse> GotoAsync(string url, PageGotoOptions options);
    public sealed virtual Task WaitForURLAsync(string url, PageWaitForURLOptions options);
    public sealed virtual Task WaitForURLAsync(Regex url, PageWaitForURLOptions options);
    public sealed virtual Task WaitForURLAsync(Func`2<string, bool> url, PageWaitForURLOptions options);
    public sealed virtual Task`1<IConsoleMessage> WaitForConsoleMessageAsync(PageWaitForConsoleMessageOptions options);
    public sealed virtual Task`1<IFileChooser> WaitForFileChooserAsync(PageWaitForFileChooserOptions options);
    public sealed virtual Task`1<IPage> WaitForPopupAsync(PageWaitForPopupOptions options);
    public sealed virtual Task`1<IWebSocket> WaitForWebSocketAsync(PageWaitForWebSocketOptions options);
    public sealed virtual Task`1<IWorker> WaitForWorkerAsync(PageWaitForWorkerOptions options);
    public sealed virtual Task`1<IResponse> WaitForNavigationAsync(PageWaitForNavigationOptions options);
    public sealed virtual Task`1<IResponse> RunAndWaitForNavigationAsync(Func`1<Task> action, PageRunAndWaitForNavigationOptions options);
    public sealed virtual Task`1<IRequest> WaitForRequestAsync(string urlOrPredicate, PageWaitForRequestOptions options);
    public sealed virtual Task`1<IRequest> WaitForRequestAsync(Regex urlOrPredicate, PageWaitForRequestOptions options);
    public sealed virtual Task`1<IRequest> WaitForRequestAsync(Func`2<IRequest, bool> urlOrPredicate, PageWaitForRequestOptions options);
    public sealed virtual Task`1<IRequest> WaitForRequestFinishedAsync(PageWaitForRequestFinishedOptions options);
    public sealed virtual Task`1<IResponse> WaitForResponseAsync(string urlOrPredicate, PageWaitForResponseOptions options);
    public sealed virtual Task`1<IResponse> WaitForResponseAsync(Regex urlOrPredicate, PageWaitForResponseOptions options);
    public sealed virtual Task`1<IResponse> WaitForResponseAsync(Func`2<IResponse, bool> urlOrPredicate, PageWaitForResponseOptions options);
    public sealed virtual Task`1<IConsoleMessage> RunAndWaitForConsoleMessageAsync(Func`1<Task> action, PageRunAndWaitForConsoleMessageOptions options);
    public sealed virtual Task`1<IDownload> WaitForDownloadAsync(PageWaitForDownloadOptions options);
    public sealed virtual Task`1<IDownload> RunAndWaitForDownloadAsync(Func`1<Task> action, PageRunAndWaitForDownloadOptions options);
    public sealed virtual Task`1<IFileChooser> RunAndWaitForFileChooserAsync(Func`1<Task> action, PageRunAndWaitForFileChooserOptions options);
    public sealed virtual Task`1<IPage> RunAndWaitForPopupAsync(Func`1<Task> action, PageRunAndWaitForPopupOptions options);
    public sealed virtual Task`1<IRequest> RunAndWaitForRequestFinishedAsync(Func`1<Task> action, PageRunAndWaitForRequestFinishedOptions options);
    public sealed virtual Task`1<IWebSocket> RunAndWaitForWebSocketAsync(Func`1<Task> action, PageRunAndWaitForWebSocketOptions options);
    public sealed virtual Task`1<IWorker> RunAndWaitForWorkerAsync(Func`1<Task> action, PageRunAndWaitForWorkerOptions options);
    public sealed virtual Task`1<IRequest> RunAndWaitForRequestAsync(Func`1<Task> action, string urlOrPredicate, PageRunAndWaitForRequestOptions options);
    public sealed virtual Task`1<IRequest> RunAndWaitForRequestAsync(Func`1<Task> action, Regex urlOrPredicate, PageRunAndWaitForRequestOptions options);
    public sealed virtual Task`1<IRequest> RunAndWaitForRequestAsync(Func`1<Task> action, Func`2<IRequest, bool> urlOrPredicate, PageRunAndWaitForRequestOptions options);
    public sealed virtual Task`1<IResponse> RunAndWaitForResponseAsync(Func`1<Task> action, string urlOrPredicate, PageRunAndWaitForResponseOptions options);
    public sealed virtual Task`1<IResponse> RunAndWaitForResponseAsync(Func`1<Task> action, Regex urlOrPredicate, PageRunAndWaitForResponseOptions options);
    public sealed virtual Task`1<IResponse> RunAndWaitForResponseAsync(Func`1<Task> action, Func`2<IResponse, bool> urlOrPredicate, PageRunAndWaitForResponseOptions options);
    public sealed virtual Task`1<IJSHandle> WaitForFunctionAsync(string expression, object arg, PageWaitForFunctionOptions options);
    internal TargetClosedException _closeErrorWithReason();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Page/<InnerWaitForEventAsync>d__193`1")]
internal Task`1<T> InnerWaitForEventAsync(PlaywrightEvent`1<T> pageEvent, Func`1<Task> action, Func`2<T, bool> predicate, Nullable`1<float> timeout);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Page/<CloseAsync>d__194")]
public sealed virtual Task CloseAsync(PageCloseOptions options);
    public sealed virtual Task`1<T> EvaluateAsync(string expression, object arg);
    public sealed virtual Task`1<Nullable`1<JsonElement>> EvalOnSelectorAsync(string selector, string expression, object arg);
    public sealed virtual Task`1<T> EvalOnSelectorAsync(string selector, string expression, object arg, PageEvalOnSelectorOptions options);
    public sealed virtual ILocator Locator(string selector, PageLocatorOptions options);
    public sealed virtual Task`1<IElementHandle> QuerySelectorAsync(string selector, PageQuerySelectorOptions options);
    public Task`1<T> EvalOnSelectorAsync(string selector, string expression, object arg);
    public sealed virtual Task`1<Nullable`1<JsonElement>> EvalOnSelectorAllAsync(string selector, string expression, object arg);
    public sealed virtual Task`1<T> EvalOnSelectorAllAsync(string selector, string expression, object arg);
    public sealed virtual Task FillAsync(string selector, string value, PageFillOptions options);
    public sealed virtual Task SetInputFilesAsync(string selector, string files, PageSetInputFilesOptions options);
    public sealed virtual Task SetInputFilesAsync(string selector, IEnumerable`1<string> files, PageSetInputFilesOptions options);
    public sealed virtual Task SetInputFilesAsync(string selector, FilePayload files, PageSetInputFilesOptions options);
    public sealed virtual Task SetInputFilesAsync(string selector, IEnumerable`1<FilePayload> files, PageSetInputFilesOptions options);
    public sealed virtual Task TypeAsync(string selector, string text, PageTypeOptions options);
    public sealed virtual Task FocusAsync(string selector, PageFocusOptions options);
    public sealed virtual Task HoverAsync(string selector, PageHoverOptions options);
    public sealed virtual Task PressAsync(string selector, string key, PagePressOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, string values, PageSelectOptionOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, IEnumerable`1<string> values, PageSelectOptionOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, IElementHandle values, PageSelectOptionOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, IEnumerable`1<IElementHandle> values, PageSelectOptionOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, SelectOptionValue values, PageSelectOptionOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, IEnumerable`1<SelectOptionValue> values, PageSelectOptionOptions options);
    internal Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, IEnumerable`1<SelectOptionValueProtocol> values, PageSelectOptionOptions options);
    public sealed virtual Task WaitForTimeoutAsync(float timeout);
    public sealed virtual Task`1<IElementHandle> WaitForSelectorAsync(string selector, PageWaitForSelectorOptions options);
    public sealed virtual Task`1<Nullable`1<JsonElement>> EvaluateAsync(string expression, object arg);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Page/<ScreenshotAsync>d__222")]
public sealed virtual Task`1<Byte[]> ScreenshotAsync(PageScreenshotOptions options);
    public sealed virtual Task SetContentAsync(string html, PageSetContentOptions options);
    public sealed virtual Task`1<string> ContentAsync();
    public sealed virtual Task SetExtraHTTPHeadersAsync(IEnumerable`1<KeyValuePair`2<string, string>> headers);
    public Task`1<IElementHandle> QuerySelectorAsync(string selector);
    public sealed virtual Task`1<IReadOnlyList`1<IElementHandle>> QuerySelectorAllAsync(string selector);
    public sealed virtual Task`1<IJSHandle> EvaluateHandleAsync(string expression, object arg);
    public sealed virtual Task`1<IElementHandle> AddScriptTagAsync(PageAddScriptTagOptions options);
    public sealed virtual Task`1<IElementHandle> AddStyleTagAsync(PageAddStyleTagOptions options);
    public sealed virtual Task ClickAsync(string selector, PageClickOptions options);
    public sealed virtual Task DblClickAsync(string selector, PageDblClickOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Page/<GoBackAsync>d__233")]
public sealed virtual Task`1<IResponse> GoBackAsync(PageGoBackOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Page/<GoForwardAsync>d__234")]
public sealed virtual Task`1<IResponse> GoForwardAsync(PageGoForwardOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Page/<ReloadAsync>d__235")]
public sealed virtual Task`1<IResponse> ReloadAsync(PageReloadOptions options);
    public sealed virtual Task ExposeBindingAsync(string name, Action callback, PageExposeBindingOptions options);
    public sealed virtual Task ExposeBindingAsync(string name, Action`1<BindingSource> callback);
    public sealed virtual Task ExposeBindingAsync(string name, Action`2<BindingSource, T> callback);
    public sealed virtual Task ExposeBindingAsync(string name, Func`2<BindingSource, TResult> callback);
    public sealed virtual Task ExposeBindingAsync(string name, Func`3<BindingSource, IJSHandle, TResult> callback);
    public sealed virtual Task ExposeBindingAsync(string name, Func`3<BindingSource, T, TResult> callback);
    public sealed virtual Task ExposeBindingAsync(string name, Func`4<BindingSource, T1, T2, TResult> callback);
    public sealed virtual Task ExposeBindingAsync(string name, Func`5<BindingSource, T1, T2, T3, TResult> callback);
    public sealed virtual Task ExposeBindingAsync(string name, Func`6<BindingSource, T1, T2, T3, T4, TResult> callback);
    public sealed virtual Task ExposeFunctionAsync(string name, Action callback);
    public sealed virtual Task ExposeFunctionAsync(string name, Action`1<T> callback);
    public sealed virtual Task ExposeFunctionAsync(string name, Func`1<TResult> callback);
    public sealed virtual Task ExposeFunctionAsync(string name, Func`2<T, TResult> callback);
    public sealed virtual Task ExposeFunctionAsync(string name, Func`3<T1, T2, TResult> callback);
    public sealed virtual Task ExposeFunctionAsync(string name, Func`4<T1, T2, T3, TResult> callback);
    public sealed virtual Task ExposeFunctionAsync(string name, Func`5<T1, T2, T3, T4, TResult> callback);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Page/<PdfAsync>d__252")]
public sealed virtual Task`1<Byte[]> PdfAsync(PagePdfOptions options);
    public sealed virtual Task AddInitScriptAsync(string script, string scriptPath);
    public sealed virtual Task RouteAsync(string url, Func`2<IRoute, Task> handler, PageRouteOptions options);
    public sealed virtual Task RouteAsync(string url, Action`1<IRoute> handler, PageRouteOptions options);
    public sealed virtual Task RouteAsync(Regex url, Action`1<IRoute> handler, PageRouteOptions options);
    public sealed virtual Task RouteAsync(Regex url, Func`2<IRoute, Task> handler, PageRouteOptions options);
    public sealed virtual Task RouteAsync(Func`2<string, bool> url, Action`1<IRoute> handler, PageRouteOptions options);
    public sealed virtual Task RouteAsync(Func`2<string, bool> url, Func`2<IRoute, Task> handler, PageRouteOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Page/<UnrouteAllAsync>d__260")]
public sealed virtual Task UnrouteAllAsync(PageUnrouteAllOptions options);
    public sealed virtual Task UnrouteAsync(string urlString, Action`1<IRoute> handler);
    public sealed virtual Task UnrouteAsync(string urlString, Func`2<IRoute, Task> handler);
    public sealed virtual Task UnrouteAsync(Regex urlString, Action`1<IRoute> handler);
    public sealed virtual Task UnrouteAsync(Regex urlString, Func`2<IRoute, Task> handler);
    public sealed virtual Task UnrouteAsync(Func`2<string, bool> urlFunc, Action`1<IRoute> handler);
    public sealed virtual Task UnrouteAsync(Func`2<string, bool> urlFunc, Func`2<IRoute, Task> handler);
    public sealed virtual Task WaitForLoadStateAsync(Nullable`1<LoadState> state, PageWaitForLoadStateOptions options);
    public sealed virtual Task SetViewportSizeAsync(int width, int height);
    public sealed virtual Task SetCheckedAsync(string selector, bool checkedState, PageSetCheckedOptions options);
    public sealed virtual Task CheckAsync(string selector, PageCheckOptions options);
    public sealed virtual Task UncheckAsync(string selector, PageUncheckOptions options);
    public sealed virtual Task DispatchEventAsync(string selector, string type, object eventInit, PageDispatchEventOptions options);
    public sealed virtual Task`1<string> GetAttributeAsync(string selector, string name, PageGetAttributeOptions options);
    public sealed virtual Task`1<string> InnerHTMLAsync(string selector, PageInnerHTMLOptions options);
    public sealed virtual Task`1<string> InnerTextAsync(string selector, PageInnerTextOptions options);
    public sealed virtual Task`1<string> TextContentAsync(string selector, PageTextContentOptions options);
    public sealed virtual Task TapAsync(string selector, PageTapOptions options);
    public sealed virtual Task`1<bool> IsCheckedAsync(string selector, PageIsCheckedOptions options);
    public sealed virtual Task`1<bool> IsDisabledAsync(string selector, PageIsDisabledOptions options);
    public sealed virtual Task`1<bool> IsEditableAsync(string selector, PageIsEditableOptions options);
    public sealed virtual Task`1<bool> IsEnabledAsync(string selector, PageIsEnabledOptions options);
    public sealed virtual Task`1<bool> IsHiddenAsync(string selector, PageIsHiddenOptions options);
    public sealed virtual Task`1<bool> IsVisibleAsync(string selector, PageIsVisibleOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Page/<PauseAsync>d__284")]
public sealed virtual Task PauseAsync();
    public sealed virtual void SetDefaultNavigationTimeout(float timeout);
    public sealed virtual void SetDefaultTimeout(float timeout);
    public sealed virtual Task`1<string> InputValueAsync(string selector, PageInputValueOptions options);
    public sealed virtual Task DragAndDropAsync(string source, string target, PageDragAndDropOptions options);
    internal void NotifyPopup(Page page);
    internal void OnFrameNavigated(Frame frame);
    internal void FireConsole(IConsoleMessage message);
    internal void FireDialog(IDialog dialog);
    internal bool HasDialogListenersAttached();
    internal void FireRequest(IRequest request);
    internal void FireRequestFailed(IRequest request);
    internal void FireRequestFinished(IRequest request);
    internal void FireResponse(IResponse response);
    internal void FireLoad();
    internal void FireDOMContentLoaded();
    internal void FirePageError(string error);
    private Task RouteAsync(Regex urlRegex, Func`2<string, bool> urlFunc, Delegate handler, PageRouteOptions options);
    private Task RouteAsync(RouteHandler setting);
    private Task UnrouteAsync(Regex urlRegex, Func`2<string, bool> urlFunc, Delegate handler);
    private Task UnrouteAsync(RouteHandler setting);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Page/<UnrouteInternalAsync>d__305")]
private Task UnrouteInternalAsync(List`1<RouteHandler> removed, List`1<RouteHandler> remaining, Nullable`1<UnrouteBehavior> behavior);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Page/<UpdateInterceptionAsync>d__306")]
private Task UpdateInterceptionAsync();
    internal void OnClose();
    private void Channel_Crashed();
    private void Channel_BindingCall(object sender, BindingCall bindingCall);
    private void Channel_Route(object sender, Route route);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Page/<OnRouteAsync>d__311")]
private Task OnRouteAsync(Route route);
    private void Channel_FrameDetached(object sender, IFrame args);
    private void Channel_FrameAttached(object sender, IFrame args);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Page/<InnerExposeBindingAsync>d__314")]
private Task InnerExposeBindingAsync(string name, Delegate callback, bool handle);
    private Video ForceVideo();
    private FrameSetInputFilesOptions Map(PageSetInputFilesOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Page/<RouteFromHARAsync>d__317")]
public sealed virtual Task RouteFromHARAsync(string har, PageRouteFromHAROptions options);
    private void DisposeHarRouters();
    public sealed virtual ILocator GetByAltText(string text, PageGetByAltTextOptions options);
    public sealed virtual ILocator GetByAltText(Regex text, PageGetByAltTextOptions options);
    public sealed virtual ILocator GetByLabel(string text, PageGetByLabelOptions options);
    public sealed virtual ILocator GetByLabel(Regex text, PageGetByLabelOptions options);
    public sealed virtual ILocator GetByPlaceholder(string text, PageGetByPlaceholderOptions options);
    public sealed virtual ILocator GetByPlaceholder(Regex text, PageGetByPlaceholderOptions options);
    public sealed virtual ILocator GetByRole(AriaRole role, PageGetByRoleOptions options);
    public sealed virtual ILocator GetByTestId(string testId);
    public sealed virtual ILocator GetByTestId(Regex testId);
    public sealed virtual ILocator GetByText(string text, PageGetByTextOptions options);
    public sealed virtual ILocator GetByText(Regex text, PageGetByTextOptions options);
    public sealed virtual ILocator GetByTitle(string text, PageGetByTitleOptions options);
    public sealed virtual ILocator GetByTitle(Regex text, PageGetByTitleOptions options);
    public sealed virtual Task AddLocatorHandlerAsync(ILocator locator, Func`1<Task> handler, PageAddLocatorHandlerOptions options);
    public sealed virtual Task AddLocatorHandlerAsync(ILocator locator, Func`2<ILocator, Task> handler, PageAddLocatorHandlerOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Page/<AddLocatorHandlerImplAsync>d__334")]
private Task AddLocatorHandlerImplAsync(ILocator locator, object handler, PageAddLocatorHandlerOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Page/<Channel_LocatorHandlerTriggeredAsync>d__335")]
private Task Channel_LocatorHandlerTriggeredAsync(int uid);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Page/<RemoveLocatorHandlerAsync>d__336")]
public sealed virtual Task RemoveLocatorHandlerAsync(ILocator locator);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0(object _, IPage _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_1(object _, IPage _);
}
internal class Microsoft.Playwright.Core.PageAssertions : AssertionsBase {
    private Page _page;
    public IPageAssertions Not { get; }
    public PageAssertions(IPage page, bool isNot);
    public sealed virtual IPageAssertions get_Not();
    private static T PassThroughNonNull(T value);
    public sealed virtual Task ToHaveTitleAsync(string titleOrRegExp, PageAssertionsToHaveTitleOptions options);
    public sealed virtual Task ToHaveTitleAsync(Regex titleOrRegExp, PageAssertionsToHaveTitleOptions options);
    public sealed virtual Task ToHaveURLAsync(string urlOrRegExp, PageAssertionsToHaveURLOptions options);
    public sealed virtual Task ToHaveURLAsync(Regex urlOrRegExp, PageAssertionsToHaveURLOptions options);
}
internal static class Microsoft.Playwright.Core.PageEvent : object {
    [CompilerGeneratedAttribute]
private static PlaywrightEvent`1<IRequest> <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private static PlaywrightEvent`1<IRequest> <RequestFinished>k__BackingField;
    [CompilerGeneratedAttribute]
private static PlaywrightEvent`1<IPage> <Crash>k__BackingField;
    [CompilerGeneratedAttribute]
private static PlaywrightEvent`1<IPage> <Close>k__BackingField;
    [CompilerGeneratedAttribute]
private static PlaywrightEvent`1<IResponse> <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private static PlaywrightEvent`1<IDownload> <Download>k__BackingField;
    [CompilerGeneratedAttribute]
private static PlaywrightEvent`1<IConsoleMessage> <Console>k__BackingField;
    [CompilerGeneratedAttribute]
private static PlaywrightEvent`1<IPage> <Popup>k__BackingField;
    [CompilerGeneratedAttribute]
private static PlaywrightEvent`1<IFrame> <FrameNavigated>k__BackingField;
    [CompilerGeneratedAttribute]
private static PlaywrightEvent`1<IFrame> <FrameDetached>k__BackingField;
    [CompilerGeneratedAttribute]
private static PlaywrightEvent`1<IWorker> <Worker>k__BackingField;
    [CompilerGeneratedAttribute]
private static PlaywrightEvent`1<IDialog> <Dialog>k__BackingField;
    [CompilerGeneratedAttribute]
private static PlaywrightEvent`1<IFileChooser> <FileChooser>k__BackingField;
    [CompilerGeneratedAttribute]
private static PlaywrightEvent`1<string> <PageError>k__BackingField;
    [CompilerGeneratedAttribute]
private static PlaywrightEvent`1<IPage> <Load>k__BackingField;
    [CompilerGeneratedAttribute]
private static PlaywrightEvent`1<IPage> <DOMContentLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private static PlaywrightEvent`1<IWebSocket> <WebSocket>k__BackingField;
    public static PlaywrightEvent`1<IRequest> Request { get; }
    public static PlaywrightEvent`1<IRequest> RequestFinished { get; }
    public static PlaywrightEvent`1<IPage> Crash { get; }
    public static PlaywrightEvent`1<IPage> Close { get; }
    public static PlaywrightEvent`1<IResponse> Response { get; }
    public static PlaywrightEvent`1<IDownload> Download { get; }
    public static PlaywrightEvent`1<IConsoleMessage> Console { get; }
    public static PlaywrightEvent`1<IPage> Popup { get; }
    public static PlaywrightEvent`1<IFrame> FrameNavigated { get; }
    public static PlaywrightEvent`1<IFrame> FrameDetached { get; }
    public static PlaywrightEvent`1<IWorker> Worker { get; }
    public static PlaywrightEvent`1<IDialog> Dialog { get; }
    public static PlaywrightEvent`1<IFileChooser> FileChooser { get; }
    public static PlaywrightEvent`1<string> PageError { get; }
    public static PlaywrightEvent`1<IPage> Load { get; }
    public static PlaywrightEvent`1<IPage> DOMContentLoaded { get; }
    public static PlaywrightEvent`1<IWebSocket> WebSocket { get; }
    private static PageEvent();
    [CompilerGeneratedAttribute]
public static PlaywrightEvent`1<IRequest> get_Request();
    [CompilerGeneratedAttribute]
public static PlaywrightEvent`1<IRequest> get_RequestFinished();
    [CompilerGeneratedAttribute]
public static PlaywrightEvent`1<IPage> get_Crash();
    [CompilerGeneratedAttribute]
public static PlaywrightEvent`1<IPage> get_Close();
    [CompilerGeneratedAttribute]
public static PlaywrightEvent`1<IResponse> get_Response();
    [CompilerGeneratedAttribute]
public static PlaywrightEvent`1<IDownload> get_Download();
    [CompilerGeneratedAttribute]
public static PlaywrightEvent`1<IConsoleMessage> get_Console();
    [CompilerGeneratedAttribute]
public static PlaywrightEvent`1<IPage> get_Popup();
    [CompilerGeneratedAttribute]
public static PlaywrightEvent`1<IFrame> get_FrameNavigated();
    [CompilerGeneratedAttribute]
public static PlaywrightEvent`1<IFrame> get_FrameDetached();
    [CompilerGeneratedAttribute]
public static PlaywrightEvent`1<IWorker> get_Worker();
    [CompilerGeneratedAttribute]
public static PlaywrightEvent`1<IDialog> get_Dialog();
    [CompilerGeneratedAttribute]
public static PlaywrightEvent`1<IFileChooser> get_FileChooser();
    [CompilerGeneratedAttribute]
public static PlaywrightEvent`1<string> get_PageError();
    [CompilerGeneratedAttribute]
public static PlaywrightEvent`1<IPage> get_Load();
    [CompilerGeneratedAttribute]
public static PlaywrightEvent`1<IPage> get_DOMContentLoaded();
    [CompilerGeneratedAttribute]
public static PlaywrightEvent`1<IWebSocket> get_WebSocket();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Playwright.Core.PlaywrightImpl : ChannelOwner {
    private PlaywrightInitializer _initializer;
    internal SelectorsAPI _selectors;
    private Dictionary`2<string, BrowserNewContextOptions> _devices;
    [CompilerGeneratedAttribute]
private IAPIRequest <APIRequest>k__BackingField;
    public IBrowserType Chromium { get; }
    public IBrowserType Firefox { get; }
    public IBrowserType Webkit { get; }
    public ISelectors Selectors { get; }
    public IReadOnlyDictionary`2<string, BrowserNewContextOptions> Devices { get; }
    internal Browser PreLaunchedBrowser { get; }
    public IAPIRequest APIRequest { get; }
    public IBrowserType Item { get; }
    internal PlaywrightImpl(ChannelOwner parent, string guid, PlaywrightInitializer initializer);
    protected virtual override void Finalize();
    public sealed virtual IBrowserType get_Chromium();
    public sealed virtual IBrowserType get_Firefox();
    public sealed virtual IBrowserType get_Webkit();
    public sealed virtual ISelectors get_Selectors();
    public sealed virtual IReadOnlyDictionary`2<string, BrowserNewContextOptions> get_Devices();
    internal Browser get_PreLaunchedBrowser();
    [CompilerGeneratedAttribute]
public sealed virtual IAPIRequest get_APIRequest();
    public sealed virtual IBrowserType get_Item(string browserType);
    internal void SetSelectors(SelectorsAPI selectors);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
internal class Microsoft.Playwright.Core.RawHeaders : object {
    private Dictionary`2<string, List`1<string>> _headersMap;
    [CompilerGeneratedAttribute]
private List`1<Header> <HeadersArray>k__BackingField;
    public List`1<Header> HeadersArray { get; }
    public Dictionary`2<string, string> Headers { get; }
    public RawHeaders(List`1<NameValue> headers);
    [CompilerGeneratedAttribute]
public List`1<Header> get_HeadersArray();
    public Dictionary`2<string, string> get_Headers();
    public string Get(string name);
    public String[] GetAll(string name);
    internal static RawHeaders FromHeadersObjectLossy(IEnumerable`1<KeyValuePair`2<string, string>> headers);
    [CompilerGeneratedAttribute]
private string <get_Headers>b__6_1(string y);
}
internal class Microsoft.Playwright.Core.Request : ChannelOwner {
    internal RequestInitializer _initializer;
    private RawHeaders _provisionalHeaders;
    private RouteFallbackOptions _fallbackOverrides;
    private Task`1<RawHeaders> _rawHeadersTask;
    [CompilerGeneratedAttribute]
private string <Failure>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequest <RedirectedFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequest <RedirectedTo>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestTimingResult <Timing>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestSizesResult <Sizes>k__BackingField;
    public string Failure { get; internal set; }
    public IFrame Frame { get; }
    public Dictionary`2<string, string> Headers { get; }
    internal Page SafePage { get; }
    public bool IsNavigationRequest { get; }
    public string Method { get; }
    public string PostData { get; }
    public Byte[] PostDataBuffer { get; }
    public IRequest RedirectedFrom { get; }
    public IRequest RedirectedTo { get; internal set; }
    public string ResourceType { get; }
    public RequestTimingResult Timing { get; internal set; }
    public string Url { get; }
    internal Request FinalRequest { get; }
    public RequestSizesResult Sizes { get; internal set; }
    public IWorker ServiceWorker { get; }
    internal BrowserContext _context { get; }
    internal Request(ChannelOwner parent, string guid, RequestInitializer initializer);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Failure();
    [CompilerGeneratedAttribute]
internal void set_Failure(string value);
    public sealed virtual IFrame get_Frame();
    public sealed virtual Dictionary`2<string, string> get_Headers();
    internal Page get_SafePage();
    public sealed virtual bool get_IsNavigationRequest();
    public sealed virtual string get_Method();
    public sealed virtual string get_PostData();
    public sealed virtual Byte[] get_PostDataBuffer();
    [CompilerGeneratedAttribute]
public sealed virtual IRequest get_RedirectedFrom();
    [CompilerGeneratedAttribute]
public sealed virtual IRequest get_RedirectedTo();
    [CompilerGeneratedAttribute]
internal void set_RedirectedTo(IRequest value);
    public sealed virtual string get_ResourceType();
    [CompilerGeneratedAttribute]
public sealed virtual RequestTimingResult get_Timing();
    [CompilerGeneratedAttribute]
internal void set_Timing(RequestTimingResult value);
    public sealed virtual string get_Url();
    internal Request get_FinalRequest();
    [CompilerGeneratedAttribute]
public RequestSizesResult get_Sizes();
    [CompilerGeneratedAttribute]
internal void set_Sizes(RequestSizesResult value);
    public IWorker get_ServiceWorker();
    internal BrowserContext get__context();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Request/<ResponseAsync>d__48")]
public sealed virtual Task`1<IResponse> ResponseAsync();
    public sealed virtual Nullable`1<JsonElement> PostDataJSON();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Request/<SizesAsync>d__50")]
public sealed virtual Task`1<RequestSizesResult> SizesAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Request/<AllHeadersAsync>d__51")]
public sealed virtual Task`1<Dictionary`2<string, string>> AllHeadersAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Request/<HeadersArrayAsync>d__52")]
public sealed virtual Task`1<IReadOnlyList`1<Header>> HeadersArrayAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Request/<HeaderValueAsync>d__53")]
public sealed virtual Task`1<string> HeaderValueAsync(string name);
    private Task`1<RawHeaders> ActualHeadersAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Request/<GetRawHeadersTaskAsync>d__55")]
private Task`1<RawHeaders> GetRawHeadersTaskAsync();
    internal void ApplyFallbackOverrides(RouteFallbackOptions overrides);
    internal RouteFallbackOptions FallbackOverridesForContinue();
    internal Task`1<bool> TargetClosedAsync();
    internal void SetResponseEndTiming(float responseEndTiming);
}
internal class Microsoft.Playwright.Core.Response : ChannelOwner {
    private ResponseInitializer _initializer;
    private TaskCompletionSource`1<string> _finishedTask;
    private RawHeaders _headers;
    private Task`1<RawHeaders> _rawHeadersTask;
    public IFrame Frame { get; }
    public Dictionary`2<string, string> Headers { get; }
    public bool Ok { get; }
    public IRequest Request { get; }
    public int Status { get; }
    public string StatusText { get; }
    public string Url { get; }
    public bool FromServiceWorker { get; }
    internal Response(ChannelOwner parent, string guid, ResponseInitializer initializer);
    public sealed virtual IFrame get_Frame();
    public sealed virtual Dictionary`2<string, string> get_Headers();
    public sealed virtual bool get_Ok();
    public sealed virtual IRequest get_Request();
    public sealed virtual int get_Status();
    public sealed virtual string get_StatusText();
    public sealed virtual string get_Url();
    public sealed virtual bool get_FromServiceWorker();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Response/<AllHeadersAsync>d__21")]
public sealed virtual Task`1<Dictionary`2<string, string>> AllHeadersAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Response/<BodyAsync>d__22")]
public sealed virtual Task`1<Byte[]> BodyAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Response/<FinishedAsync>d__23")]
public sealed virtual Task`1<string> FinishedAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Response/<HeadersArrayAsync>d__24")]
public sealed virtual Task`1<IReadOnlyList`1<Header>> HeadersArrayAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Response/<HeaderValueAsync>d__25")]
public sealed virtual Task`1<string> HeaderValueAsync(string name);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Response/<HeaderValuesAsync>d__26")]
public sealed virtual Task`1<IReadOnlyList`1<string>> HeaderValuesAsync(string name);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Response/<JsonAsync>d__27")]
public sealed virtual Task`1<Nullable`1<JsonElement>> JsonAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Response/<JsonAsync>d__28`1")]
public sealed virtual Task`1<T> JsonAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Response/<SecurityDetailsAsync>d__29")]
public sealed virtual Task`1<ResponseSecurityDetailsResult> SecurityDetailsAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Response/<ServerAddrAsync>d__30")]
public sealed virtual Task`1<ResponseServerAddrResult> ServerAddrAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Response/<TextAsync>d__31")]
public sealed virtual Task`1<string> TextAsync();
    internal void ReportFinished(string erroMessage);
    private Task`1<RawHeaders> GetRawHeadersAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Response/<GetRawHeadersTaskAsync>d__34")]
private Task`1<RawHeaders> GetRawHeadersTaskAsync();
}
public class Microsoft.Playwright.Core.ResponseData : ValueType {
    [CompilerGeneratedAttribute]
private Byte[] <BodyData>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<HttpStatusCode> <Status>k__BackingField;
    public string Body { get; public set; }
    public Byte[] BodyData { get; public set; }
    public IDictionary`2<string, string> Headers { get; public set; }
    public string ContentType { get; public set; }
    public Nullable`1<HttpStatusCode> Status { get; public set; }
    public string get_Body();
    public void set_Body(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Byte[] get_BodyData();
    [CompilerGeneratedAttribute]
public void set_BodyData(Byte[] value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IDictionary`2<string, string> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<HttpStatusCode> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<HttpStatusCode> value);
}
internal class Microsoft.Playwright.Core.Route : ChannelOwner {
    private RouteInitializer _initializer;
    private TaskCompletionSource`1<bool> _handlingTask;
    internal bool DidThrow;
    [CompilerGeneratedAttribute]
private BrowserContext <_context>k__BackingField;
    [CompilerGeneratedAttribute]
private Request <_request>k__BackingField;
    public IRequest Request { get; }
    internal BrowserContext _context { get; internal set; }
    internal Request _request { get; }
    internal Route(ChannelOwner parent, string guid, RouteInitializer initializer);
    public sealed virtual IRequest get_Request();
    [CompilerGeneratedAttribute]
internal BrowserContext get__context();
    [CompilerGeneratedAttribute]
internal void set__context(BrowserContext value);
    [CompilerGeneratedAttribute]
internal Request get__request();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Route/<FulfillAsync>d__13")]
public sealed virtual Task FulfillAsync(RouteFulfillOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Route/<AbortAsync>d__14")]
public sealed virtual Task AbortAsync(string errorCode);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Route/<ContinueAsync>d__15")]
public sealed virtual Task ContinueAsync(RouteContinueOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Route/<InnerContinueAsync>d__16")]
internal Task InnerContinueAsync(bool internal);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Route/<HandleRouteAsync>d__17")]
private Task HandleRouteAsync(Func`1<Task> callback);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Route/<RaceWithTargetCloseAsync>d__18")]
private Task RaceWithTargetCloseAsync(Task task);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Route/<NormalizeFulfillParametersAsync>d__19")]
private Task`1<Dictionary`2<string, object>> NormalizeFulfillParametersAsync(Nullable`1<int> status, IEnumerable`1<KeyValuePair`2<string, string>> headers, string contentType, string body, Byte[] bodyContent, object json, string path, IAPIResponse response);
    public sealed virtual Task FallbackAsync(RouteFallbackOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Route/<RedirectNavigationRequestAsync>d__21")]
internal Task RedirectNavigationRequestAsync(string url);
    internal Task`1<bool> StartHandlingAsync();
    private void CheckNotHandled();
    private void ReportHandled(bool handled);
    public sealed virtual Task`1<IAPIResponse> FetchAsync(RouteFetchOptions options);
}
internal class Microsoft.Playwright.Core.RouteHandler : object {
    private IDictionary`2<HandlerInvocation, bool> _activeInvocations;
    private bool _ignoreException;
    [CompilerGeneratedAttribute]
private Regex <Regex>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, bool> <Function>k__BackingField;
    [CompilerGeneratedAttribute]
private Delegate <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Times>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HandledCount>k__BackingField;
    public Regex Regex { get; public set; }
    public Func`2<string, bool> Function { get; public set; }
    public Delegate Handler { get; public set; }
    public Nullable`1<int> Times { get; internal set; }
    public int HandledCount { get; public set; }
    [CompilerGeneratedAttribute]
public Regex get_Regex();
    [CompilerGeneratedAttribute]
public void set_Regex(Regex value);
    [CompilerGeneratedAttribute]
public Func`2<string, bool> get_Function();
    [CompilerGeneratedAttribute]
public void set_Function(Func`2<string, bool> value);
    [CompilerGeneratedAttribute]
public Delegate get_Handler();
    [CompilerGeneratedAttribute]
public void set_Handler(Delegate value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Times();
    [CompilerGeneratedAttribute]
internal void set_Times(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_HandledCount();
    [CompilerGeneratedAttribute]
public void set_HandledCount(int value);
    public static Dictionary`2<string, object> PrepareInterceptionPatterns(List`1<RouteHandler> handlers);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.RouteHandler/<HandleAsync>d__23")]
public Task`1<bool> HandleAsync(Route route);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.RouteHandler/<StopAsync>d__24")]
public Task StopAsync(UnrouteBehavior behavior);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.RouteHandler/<HandleInternalAsync>d__25")]
private Task`1<bool> HandleInternalAsync(Route route);
    public bool WillExpire();
}
internal static class Microsoft.Playwright.Core.ScriptsHelper : object {
    private static MethodInfo _parseEvaluateResult;
    private static ScriptsHelper();
    internal static object ParseEvaluateResult(Nullable`1<JsonElement> element, Type t);
    internal static T ParseEvaluateResult(Nullable`1<JsonElement> resultOrNull);
    internal static object SerializedArgument(object arg);
    internal static string EvaluationScript(string content, string path, bool addSourceUrl);
    internal static string AddSourceUrlToScript(string source, string path);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Playwright.Core.SelectOptionValueProtocol : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueOrLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Index>k__BackingField;
    [JsonPropertyNameAttribute("value")]
public string Value { get; public set; }
    [JsonPropertyNameAttribute("valueOrLabel")]
public string ValueOrLabel { get; public set; }
    [JsonPropertyNameAttribute("label")]
public string Label { get; public set; }
    [JsonPropertyNameAttribute("index")]
public Nullable`1<int> Index { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_ValueOrLabel();
    [CompilerGeneratedAttribute]
public void set_ValueOrLabel(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(Nullable`1<int> value);
    [NullableContextAttribute("0")]
internal static SelectOptionValueProtocol From(SelectOptionValue value);
}
internal class Microsoft.Playwright.Core.Selectors : ChannelOwner {
    internal Selectors(ChannelOwner parent, string guid);
}
internal class Microsoft.Playwright.Core.SelectorsAPI : object {
    private HashSet`1<Selectors> _channels;
    private List`1<Dictionary`2<string, object>> _registrations;
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.SelectorsAPI/<RegisterAsync>d__2")]
public sealed virtual Task RegisterAsync(string name, SelectorsRegisterOptions options);
    public sealed virtual void SetTestIdAttribute(string attributeName);
    internal void AddChannel(Selectors channel);
    internal void RemoveChannel(Selectors channel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Playwright.Core.SelectorsRegisterParams : object {
    [NullableAttribute("0")]
internal string Name;
    [NullableAttribute("0")]
internal string Source;
    internal Nullable`1<bool> ContentScript;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
protected SelectorsRegisterParams(SelectorsRegisterParams original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SelectorsRegisterParams left, SelectorsRegisterParams right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SelectorsRegisterParams left, SelectorsRegisterParams right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(SelectorsRegisterParams other);
    [CompilerGeneratedAttribute]
public virtual SelectorsRegisterParams <Clone>$();
}
internal class Microsoft.Playwright.Core.SocksSupport : ChannelOwner {
    internal SocksSupport(ChannelOwner parent, string guid);
}
internal class Microsoft.Playwright.Core.StorageState : object {
    [CompilerGeneratedAttribute]
private ICollection`1<Cookie> <Cookies>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<OriginStorage> <Origins>k__BackingField;
    public ICollection`1<Cookie> Cookies { get; public set; }
    public ICollection`1<OriginStorage> Origins { get; public set; }
    [CompilerGeneratedAttribute]
public ICollection`1<Cookie> get_Cookies();
    [CompilerGeneratedAttribute]
public void set_Cookies(ICollection`1<Cookie> value);
    [CompilerGeneratedAttribute]
public ICollection`1<OriginStorage> get_Origins();
    [CompilerGeneratedAttribute]
public void set_Origins(ICollection`1<OriginStorage> value);
    public sealed virtual bool Equals(StorageState other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class Microsoft.Playwright.Core.Stream : ChannelOwner {
    public StreamImpl StreamImpl { get; }
    internal Stream(ChannelOwner parent, string guid);
    public StreamImpl get_StreamImpl();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Stream/<ReadAsync>d__3")]
public Task`1<Byte[]> ReadAsync(int size);
    public sealed virtual ValueTask DisposeAsync();
    public Task CloseAsync();
}
internal class Microsoft.Playwright.Core.StreamImpl : Stream {
    private Stream _stream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal StreamImpl(Stream stream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.StreamImpl/<ReadAsync>d__15")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Close();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class Microsoft.Playwright.Core.TimeoutSettings : object {
    private static int DefaultTimeoutInMilliseconds;
    private TimeoutSettings _parent;
    private Nullable`1<float> _defaultTimeout;
    private Nullable`1<float> _defaultNavigationTimeout;
    internal Nullable`1<float> DefaultNavigationTimeout { get; }
    internal Nullable`1<float> DefaultTimeout { get; }
    public TimeoutSettings(TimeoutSettings parent);
    internal Nullable`1<float> get_DefaultNavigationTimeout();
    internal Nullable`1<float> get_DefaultTimeout();
    public void SetDefaultTimeout(Nullable`1<float> timeout);
    public void SetDefaultNavigationTimeout(Nullable`1<float> timeout);
    public float NavigationTimeout(Nullable`1<float> timeout);
    public float Timeout(Nullable`1<float> timeout);
}
internal class Microsoft.Playwright.Core.Touchscreen : object {
    private Page _page;
    public Touchscreen(Page page);
    public sealed virtual Task TapAsync(float x, float y);
}
internal class Microsoft.Playwright.Core.Tracing : ChannelOwner {
    internal string _tracesDir;
    private bool _includeSources;
    private string _stacksId;
    private bool _isTracing;
    public Tracing(ChannelOwner parent, string guid);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Tracing/<StartAsync>d__5")]
public sealed virtual Task StartAsync(TracingStartOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Tracing/<StartChunkAsync>d__6")]
public sealed virtual Task StartChunkAsync(TracingStartChunkOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Tracing/<StartCollectingStacksAsync>d__7")]
private Task StartCollectingStacksAsync(string traceName);
    public sealed virtual Task StopChunkAsync(TracingStopChunkOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Tracing/<StopAsync>d__9")]
public sealed virtual Task StopAsync(TracingStopOptions options);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Tracing/<DoStopChunkAsync>d__10")]
private Task DoStopChunkAsync(string filePath);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Tracing/<_TracingStopChunkAsync>d__11")]
internal Task`1<ValueTuple`2<Artifact, List`1<NameValue>>> _TracingStopChunkAsync(string mode);
    internal void ResetStackCounter();
}
internal class Microsoft.Playwright.Core.Video : object {
    private TaskCompletionSource`1<Artifact> _artifactTcs;
    private bool _isRemote;
    public Video(Page page, Connection connection);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Video/<DeleteAsync>d__3")]
public sealed virtual Task DeleteAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Video/<PathAsync>d__4")]
public sealed virtual Task`1<string> PathAsync();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Video/<SaveAsAsync>d__5")]
public sealed virtual Task SaveAsAsync(string path);
    internal void ArtifactReady(Artifact artifact);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(object _, IPage _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_1(object _, IPage _);
}
internal class Microsoft.Playwright.Core.Waiter : object {
    private List`1<string> _logs;
    private List`1<Task> _failures;
    private List`1<Action> _dispose;
    private CancellationTokenSource _onDisposeCts;
    private CancellationTokenSource _manualCts;
    private string _waitId;
    private ChannelOwner _channelOwner;
    private Exception _immediateError;
    private bool _disposed;
    private string _error;
    internal Waiter(ChannelOwner channelOwner, string event);
    public sealed virtual void Dispose();
    internal void Log(string log);
    internal void RejectImmediately(Exception exception);
    internal void RejectOnEvent(object eventSource, string e, PlaywrightException navigationException, Func`2<T, bool> predicate);
    internal void RejectOnEvent(object eventSource, string e, Func`1<PlaywrightException> navigationException, Func`2<T, bool> predicate);
    internal void RejectOnTimeout(Nullable`1<int> timeout, string message);
    internal Task`1<T> WaitForEventAsync(object eventSource, string e, Func`2<T, bool> predicate);
    internal Task`1<object> WaitForEventAsync(object eventSource, string e);
    internal ValueTuple`2<Task`1<T>, Action> GetWaitForEventTask(object eventSource, string e, Func`2<T, bool> predicate);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Waiter/<WaitForPromiseAsync>d__20`1")]
internal Task`1<T> WaitForPromiseAsync(Task`1<T> task, Action dispose);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Waiter/<CancelWaitOnExceptionAsync>d__21")]
internal Task CancelWaitOnExceptionAsync(Task waitForEventTask, Func`1<Task> action);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Waiter/<WrapActionAsync>d__22")]
private static Task WrapActionAsync(Func`1<Task> action, CancellationTokenSource cts);
    private static string FormatLogRecording(List`1<string> logs);
    private void RejectOn(Task task, Action dispose);
}
internal class Microsoft.Playwright.Core.WebError : object {
    [CompilerGeneratedAttribute]
private IPage <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    public IPage Page { get; }
    public string Error { get; }
    public WebError(Page page, string error);
    [CompilerGeneratedAttribute]
public sealed virtual IPage get_Page();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Error();
}
internal class Microsoft.Playwright.Core.WebSocket : ChannelOwner {
    private static int OpcodeBase64;
    private WebSocketInitializer _initializer;
    [CompilerGeneratedAttribute]
private EventHandler`1<IWebSocket> Close;
    [CompilerGeneratedAttribute]
private EventHandler`1<IWebSocketFrame> FrameSent;
    [CompilerGeneratedAttribute]
private EventHandler`1<IWebSocketFrame> FrameReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<string> SocketError;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    public string Url { get; }
    public bool IsClosed { get; internal set; }
    internal WebSocket(ChannelOwner parent, string guid, WebSocketInitializer initializer);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Close(EventHandler`1<IWebSocket> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Close(EventHandler`1<IWebSocket> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_FrameSent(EventHandler`1<IWebSocketFrame> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FrameSent(EventHandler`1<IWebSocketFrame> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_FrameReceived(EventHandler`1<IWebSocketFrame> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FrameReceived(EventHandler`1<IWebSocketFrame> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SocketError(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SocketError(EventHandler`1<string> value);
    public sealed virtual string get_Url();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
internal void set_IsClosed(bool value);
    internal virtual void OnMessage(string method, Nullable`1<JsonElement> serverParams);
    [CompilerGeneratedAttribute]
internal static bool <OnMessage>g__IsTextOrBinaryFrame|21_0(Int32& opcode, <>c__DisplayClass21_0& );
}
internal class Microsoft.Playwright.Core.WebSocketFrame : object {
    [CompilerGeneratedAttribute]
private Byte[] <Binary>k__BackingField;
    public Byte[] Binary { get; public set; }
    public string Text { get; }
    internal WebSocketFrame(string payload, bool isBase64);
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_Binary();
    [CompilerGeneratedAttribute]
public void set_Binary(Byte[] value);
    public sealed virtual string get_Text();
}
internal class Microsoft.Playwright.Core.Worker : ChannelOwner {
    private WorkerInitializer _initializer;
    [CompilerGeneratedAttribute]
private EventHandler`1<IWorker> Close;
    [CompilerGeneratedAttribute]
private Page <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private BrowserContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<bool> <ClosedTcs>k__BackingField;
    public string Url { get; }
    internal Page Page { get; internal set; }
    internal BrowserContext Context { get; internal set; }
    internal TaskCompletionSource`1<bool> ClosedTcs { get; }
    public Worker(ChannelOwner parent, string guid, WorkerInitializer initializer);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Close(EventHandler`1<IWorker> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Close(EventHandler`1<IWorker> value);
    public sealed virtual string get_Url();
    [CompilerGeneratedAttribute]
internal Page get_Page();
    [CompilerGeneratedAttribute]
internal void set_Page(Page value);
    [CompilerGeneratedAttribute]
internal BrowserContext get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(BrowserContext value);
    [CompilerGeneratedAttribute]
internal TaskCompletionSource`1<bool> get_ClosedTcs();
    internal virtual void OnMessage(string method, Nullable`1<JsonElement> serverParams);
    internal void OnClose();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Worker/<EvaluateAsync>d__20`1")]
public sealed virtual Task`1<T> EvaluateAsync(string expression, object arg);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Worker/<EvaluateHandleAsync>d__21")]
public sealed virtual Task`1<IJSHandle> EvaluateHandleAsync(string expression, object arg);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.Worker/<WaitForCloseAsync>d__22")]
public Task`1<IWorker> WaitForCloseAsync(Func`1<Task> action, Nullable`1<float> timeout);
}
internal class Microsoft.Playwright.Core.WritableStream : ChannelOwner {
    public WritableStreamImpl WritableStreamImpl { get; }
    internal WritableStream(ChannelOwner parent, string guid);
    public WritableStreamImpl get_WritableStreamImpl();
    public Task WriteAsync(string binary);
    public sealed virtual ValueTask DisposeAsync();
    public Task CloseAsync();
}
internal class Microsoft.Playwright.Core.WritableStreamImpl : Stream {
    private WritableStream _stream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal WritableStreamImpl(WritableStream stream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Close();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Core.WritableStreamImpl/<WriteAsync>d__20")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
}
public static class Microsoft.Playwright.DialogType : object {
    public static string Alert;
    public static string Prompt;
    public static string Confirm;
    public static string BeforeUnload;
}
public class Microsoft.Playwright.ElementHandleBoundingBoxResult : object {
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Height>k__BackingField;
    [RequiredAttribute]
[JsonPropertyNameAttribute("x")]
public float X { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("y")]
public float Y { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("width")]
public float Width { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("height")]
public float Height { get; public set; }
    [CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public void set_X(float value);
    [CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(float value);
    [CompilerGeneratedAttribute]
public float get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(float value);
    [CompilerGeneratedAttribute]
public float get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(float value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.ElementHandleCheckOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public ElementHandleCheckOptions(ElementHandleCheckOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.ElementHandleClickOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<MouseButton> <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ClickCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyboardModifier> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("button")]
public Nullable`1<MouseButton> Button { get; public set; }
    [JsonPropertyNameAttribute("clickCount")]
public Nullable`1<int> ClickCount { get; public set; }
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("modifiers")]
public IEnumerable`1<KeyboardModifier> Modifiers { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public ElementHandleClickOptions(ElementHandleClickOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<MouseButton> get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(Nullable`1<MouseButton> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ClickCount();
    [CompilerGeneratedAttribute]
public void set_ClickCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyboardModifier> get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(IEnumerable`1<KeyboardModifier> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.ElementHandleDblClickOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<MouseButton> <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyboardModifier> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("button")]
public Nullable`1<MouseButton> Button { get; public set; }
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("modifiers")]
public IEnumerable`1<KeyboardModifier> Modifiers { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public ElementHandleDblClickOptions(ElementHandleDblClickOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<MouseButton> get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(Nullable`1<MouseButton> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyboardModifier> get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(IEnumerable`1<KeyboardModifier> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.ElementHandleFillOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public ElementHandleFillOptions(ElementHandleFillOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.ElementHandleHoverOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyboardModifier> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("modifiers")]
public IEnumerable`1<KeyboardModifier> Modifiers { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public ElementHandleHoverOptions(ElementHandleHoverOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyboardModifier> get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(IEnumerable`1<KeyboardModifier> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.ElementHandleInputValueOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public ElementHandleInputValueOptions(ElementHandleInputValueOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.ElementHandlePressOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public ElementHandlePressOptions(ElementHandlePressOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.ElementHandleScreenshotOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<ScreenshotAnimations> <Animations>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ScreenshotCaret> <Caret>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<ILocator> <Mask>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaskColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OmitBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Quality>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ScreenshotScale> <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ScreenshotType> <Type>k__BackingField;
    [JsonPropertyNameAttribute("animations")]
public Nullable`1<ScreenshotAnimations> Animations { get; public set; }
    [JsonPropertyNameAttribute("caret")]
public Nullable`1<ScreenshotCaret> Caret { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("mask")]
public IEnumerable`1<ILocator> Mask { get; public set; }
    [JsonPropertyNameAttribute("maskColor")]
public string MaskColor { get; public set; }
    [JsonPropertyNameAttribute("omitBackground")]
public Nullable`1<bool> OmitBackground { get; public set; }
    [JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [JsonPropertyNameAttribute("quality")]
public Nullable`1<int> Quality { get; public set; }
    [JsonPropertyNameAttribute("scale")]
public Nullable`1<ScreenshotScale> Scale { get; public set; }
    [JsonPropertyNameAttribute("style")]
public string Style { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("type")]
public Nullable`1<ScreenshotType> Type { get; public set; }
    [NullableContextAttribute("1")]
public ElementHandleScreenshotOptions(ElementHandleScreenshotOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<ScreenshotAnimations> get_Animations();
    [CompilerGeneratedAttribute]
public void set_Animations(Nullable`1<ScreenshotAnimations> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ScreenshotCaret> get_Caret();
    [CompilerGeneratedAttribute]
public void set_Caret(Nullable`1<ScreenshotCaret> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ILocator> get_Mask();
    [CompilerGeneratedAttribute]
public void set_Mask(IEnumerable`1<ILocator> value);
    [CompilerGeneratedAttribute]
public string get_MaskColor();
    [CompilerGeneratedAttribute]
public void set_MaskColor(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OmitBackground();
    [CompilerGeneratedAttribute]
public void set_OmitBackground(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Quality();
    [CompilerGeneratedAttribute]
public void set_Quality(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ScreenshotScale> get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(Nullable`1<ScreenshotScale> value);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ScreenshotType> get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Nullable`1<ScreenshotType> value);
}
public class Microsoft.Playwright.ElementHandleScrollIntoViewIfNeededOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public ElementHandleScrollIntoViewIfNeededOptions(ElementHandleScrollIntoViewIfNeededOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.ElementHandleSelectOptionOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public ElementHandleSelectOptionOptions(ElementHandleSelectOptionOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.ElementHandleSelectTextOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public ElementHandleSelectTextOptions(ElementHandleSelectTextOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.ElementHandleSetCheckedOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public ElementHandleSetCheckedOptions(ElementHandleSetCheckedOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.ElementHandleSetInputFilesOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public ElementHandleSetInputFilesOptions(ElementHandleSetInputFilesOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.ElementHandleTapOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyboardModifier> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("modifiers")]
public IEnumerable`1<KeyboardModifier> Modifiers { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public ElementHandleTapOptions(ElementHandleTapOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyboardModifier> get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(IEnumerable`1<KeyboardModifier> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.ElementHandleTypeOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public ElementHandleTypeOptions(ElementHandleTypeOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.ElementHandleUncheckOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public ElementHandleUncheckOptions(ElementHandleUncheckOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.ElementHandleWaitForElementStateOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public ElementHandleWaitForElementStateOptions(ElementHandleWaitForElementStateOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.ElementHandleWaitForSelectorOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<WaitForSelectorState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("state")]
public Nullable`1<WaitForSelectorState> State { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public ElementHandleWaitForSelectorOptions(ElementHandleWaitForSelectorOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<WaitForSelectorState> get_State();
    [CompilerGeneratedAttribute]
public void set_State(Nullable`1<WaitForSelectorState> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public enum Microsoft.Playwright.ElementState : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ElementState Visible;
    [EnumMemberAttribute]
public static ElementState Hidden;
    [EnumMemberAttribute]
public static ElementState Stable;
    [EnumMemberAttribute]
public static ElementState Enabled;
    [EnumMemberAttribute]
public static ElementState Disabled;
    [EnumMemberAttribute]
public static ElementState Editable;
}
public class Microsoft.Playwright.FileChooserSetFilesOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FileChooserSetFilesOptions(FileChooserSetFilesOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Playwright.FilePayload : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Buffer>k__BackingField;
    [RequiredAttribute]
[JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("mimeType")]
public string MimeType { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("buffer")]
public Byte[] Buffer { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_MimeType();
    [CompilerGeneratedAttribute]
public void set_MimeType(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Buffer();
    [CompilerGeneratedAttribute]
public void set_Buffer(Byte[] value);
}
public enum Microsoft.Playwright.ForcedColors : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ForcedColors Active;
    [EnumMemberAttribute]
public static ForcedColors None;
    [EnumMemberAttribute]
public static ForcedColors Null;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.FrameAddScriptTagOptions : object {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [JsonPropertyNameAttribute("content")]
public string Content { get; public set; }
    [JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [JsonPropertyNameAttribute("type")]
public string Type { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [NullableContextAttribute("1")]
public FrameAddScriptTagOptions(FrameAddScriptTagOptions clone);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.FrameAddStyleTagOptions : object {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [JsonPropertyNameAttribute("content")]
public string Content { get; public set; }
    [JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [NullableContextAttribute("1")]
public FrameAddStyleTagOptions(FrameAddStyleTagOptions clone);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.FrameCheckOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public FrameCheckOptions(FrameCheckOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.FrameClickOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<MouseButton> <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ClickCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyboardModifier> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("button")]
public Nullable`1<MouseButton> Button { get; public set; }
    [JsonPropertyNameAttribute("clickCount")]
public Nullable`1<int> ClickCount { get; public set; }
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("modifiers")]
public IEnumerable`1<KeyboardModifier> Modifiers { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public FrameClickOptions(FrameClickOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<MouseButton> get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(Nullable`1<MouseButton> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ClickCount();
    [CompilerGeneratedAttribute]
public void set_ClickCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyboardModifier> get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(IEnumerable`1<KeyboardModifier> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.FrameDblClickOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<MouseButton> <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyboardModifier> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("button")]
public Nullable`1<MouseButton> Button { get; public set; }
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("modifiers")]
public IEnumerable`1<KeyboardModifier> Modifiers { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public FrameDblClickOptions(FrameDblClickOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<MouseButton> get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(Nullable`1<MouseButton> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyboardModifier> get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(IEnumerable`1<KeyboardModifier> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.FrameDispatchEventOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FrameDispatchEventOptions(FrameDispatchEventOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.FrameDragAndDropOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private SourcePosition <SourcePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetPosition <TargetPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("sourcePosition")]
public SourcePosition SourcePosition { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("targetPosition")]
public TargetPosition TargetPosition { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public FrameDragAndDropOptions(FrameDragAndDropOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public SourcePosition get_SourcePosition();
    [CompilerGeneratedAttribute]
public void set_SourcePosition(SourcePosition value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public TargetPosition get_TargetPosition();
    [CompilerGeneratedAttribute]
public void set_TargetPosition(TargetPosition value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.FrameEvalOnSelectorOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [NullableContextAttribute("1")]
public FrameEvalOnSelectorOptions(FrameEvalOnSelectorOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
}
public class Microsoft.Playwright.FrameFillOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FrameFillOptions(FrameFillOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.FrameFocusOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FrameFocusOptions(FrameFocusOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.FrameGetAttributeOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FrameGetAttributeOptions(FrameGetAttributeOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.FrameGetByAltTextOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [NullableContextAttribute("1")]
public FrameGetByAltTextOptions(FrameGetByAltTextOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
public class Microsoft.Playwright.FrameGetByLabelOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [NullableContextAttribute("1")]
public FrameGetByLabelOptions(FrameGetByLabelOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
public class Microsoft.Playwright.FrameGetByPlaceholderOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [NullableContextAttribute("1")]
public FrameGetByPlaceholderOptions(FrameGetByPlaceholderOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.FrameGetByRoleOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Checked>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NameRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Pressed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Selected>k__BackingField;
    [JsonPropertyNameAttribute("checked")]
public Nullable`1<bool> Checked { get; public set; }
    [JsonPropertyNameAttribute("disabled")]
public Nullable`1<bool> Disabled { get; public set; }
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [JsonPropertyNameAttribute("expanded")]
public Nullable`1<bool> Expanded { get; public set; }
    [JsonPropertyNameAttribute("includeHidden")]
public Nullable`1<bool> IncludeHidden { get; public set; }
    [JsonPropertyNameAttribute("level")]
public Nullable`1<int> Level { get; public set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("nameRegex")]
public Regex NameRegex { get; public set; }
    [JsonPropertyNameAttribute("nameString")]
public string NameString { get; public set; }
    [JsonPropertyNameAttribute("pressed")]
public Nullable`1<bool> Pressed { get; public set; }
    [JsonPropertyNameAttribute("selected")]
public Nullable`1<bool> Selected { get; public set; }
    [NullableContextAttribute("1")]
public FrameGetByRoleOptions(FrameGetByRoleOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Checked();
    [CompilerGeneratedAttribute]
public void set_Checked(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeHidden();
    [CompilerGeneratedAttribute]
public void set_IncludeHidden(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Regex get_NameRegex();
    [CompilerGeneratedAttribute]
public void set_NameRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_NameString();
    [CompilerGeneratedAttribute]
public void set_NameString(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Pressed();
    [CompilerGeneratedAttribute]
public void set_Pressed(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(Nullable`1<bool> value);
}
public class Microsoft.Playwright.FrameGetByTextOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [NullableContextAttribute("1")]
public FrameGetByTextOptions(FrameGetByTextOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
public class Microsoft.Playwright.FrameGetByTitleOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [NullableContextAttribute("1")]
public FrameGetByTitleOptions(FrameGetByTitleOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.FrameGotoOptions : object {
    [CompilerGeneratedAttribute]
private string <Referer>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WaitUntilState> <WaitUntil>k__BackingField;
    [JsonPropertyNameAttribute("referer")]
public string Referer { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("waitUntil")]
public Nullable`1<WaitUntilState> WaitUntil { get; public set; }
    [NullableContextAttribute("1")]
public FrameGotoOptions(FrameGotoOptions clone);
    [CompilerGeneratedAttribute]
public string get_Referer();
    [CompilerGeneratedAttribute]
public void set_Referer(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<WaitUntilState> get_WaitUntil();
    [CompilerGeneratedAttribute]
public void set_WaitUntil(Nullable`1<WaitUntilState> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.FrameHoverOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyboardModifier> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("modifiers")]
public IEnumerable`1<KeyboardModifier> Modifiers { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public FrameHoverOptions(FrameHoverOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyboardModifier> get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(IEnumerable`1<KeyboardModifier> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.FrameInnerHTMLOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FrameInnerHTMLOptions(FrameInnerHTMLOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.FrameInnerTextOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FrameInnerTextOptions(FrameInnerTextOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.FrameInputValueOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FrameInputValueOptions(FrameInputValueOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.FrameIsCheckedOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FrameIsCheckedOptions(FrameIsCheckedOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.FrameIsDisabledOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FrameIsDisabledOptions(FrameIsDisabledOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.FrameIsEditableOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FrameIsEditableOptions(FrameIsEditableOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.FrameIsEnabledOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FrameIsEnabledOptions(FrameIsEnabledOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.FrameIsHiddenOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
[ObsoleteAttribute]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FrameIsHiddenOptions(FrameIsHiddenOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.FrameIsVisibleOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
[ObsoleteAttribute]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FrameIsVisibleOptions(FrameIsVisibleOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.FrameLocatorGetByAltTextOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [NullableContextAttribute("1")]
public FrameLocatorGetByAltTextOptions(FrameLocatorGetByAltTextOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
public class Microsoft.Playwright.FrameLocatorGetByLabelOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [NullableContextAttribute("1")]
public FrameLocatorGetByLabelOptions(FrameLocatorGetByLabelOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
public class Microsoft.Playwright.FrameLocatorGetByPlaceholderOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [NullableContextAttribute("1")]
public FrameLocatorGetByPlaceholderOptions(FrameLocatorGetByPlaceholderOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.FrameLocatorGetByRoleOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Checked>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NameRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Pressed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Selected>k__BackingField;
    [JsonPropertyNameAttribute("checked")]
public Nullable`1<bool> Checked { get; public set; }
    [JsonPropertyNameAttribute("disabled")]
public Nullable`1<bool> Disabled { get; public set; }
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [JsonPropertyNameAttribute("expanded")]
public Nullable`1<bool> Expanded { get; public set; }
    [JsonPropertyNameAttribute("includeHidden")]
public Nullable`1<bool> IncludeHidden { get; public set; }
    [JsonPropertyNameAttribute("level")]
public Nullable`1<int> Level { get; public set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("nameRegex")]
public Regex NameRegex { get; public set; }
    [JsonPropertyNameAttribute("nameString")]
public string NameString { get; public set; }
    [JsonPropertyNameAttribute("pressed")]
public Nullable`1<bool> Pressed { get; public set; }
    [JsonPropertyNameAttribute("selected")]
public Nullable`1<bool> Selected { get; public set; }
    [NullableContextAttribute("1")]
public FrameLocatorGetByRoleOptions(FrameLocatorGetByRoleOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Checked();
    [CompilerGeneratedAttribute]
public void set_Checked(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeHidden();
    [CompilerGeneratedAttribute]
public void set_IncludeHidden(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Regex get_NameRegex();
    [CompilerGeneratedAttribute]
public void set_NameRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_NameString();
    [CompilerGeneratedAttribute]
public void set_NameString(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Pressed();
    [CompilerGeneratedAttribute]
public void set_Pressed(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(Nullable`1<bool> value);
}
public class Microsoft.Playwright.FrameLocatorGetByTextOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [NullableContextAttribute("1")]
public FrameLocatorGetByTextOptions(FrameLocatorGetByTextOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
public class Microsoft.Playwright.FrameLocatorGetByTitleOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [NullableContextAttribute("1")]
public FrameLocatorGetByTitleOptions(FrameLocatorGetByTitleOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.FrameLocatorLocatorOptions : object {
    [CompilerGeneratedAttribute]
private ILocator <Has>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocator <HasNot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasNotText>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HasNotTextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasNotTextString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasText>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HasTextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasTextString>k__BackingField;
    [JsonPropertyNameAttribute("has")]
public ILocator Has { get; public set; }
    [JsonPropertyNameAttribute("hasNot")]
public ILocator HasNot { get; public set; }
    [JsonPropertyNameAttribute("hasNotText")]
public string HasNotText { get; public set; }
    [JsonPropertyNameAttribute("hasNotTextRegex")]
public Regex HasNotTextRegex { get; public set; }
    [JsonPropertyNameAttribute("hasNotTextString")]
public string HasNotTextString { get; public set; }
    [JsonPropertyNameAttribute("hasText")]
public string HasText { get; public set; }
    [JsonPropertyNameAttribute("hasTextRegex")]
public Regex HasTextRegex { get; public set; }
    [JsonPropertyNameAttribute("hasTextString")]
public string HasTextString { get; public set; }
    [NullableContextAttribute("1")]
public FrameLocatorLocatorOptions(FrameLocatorLocatorOptions clone);
    [CompilerGeneratedAttribute]
public ILocator get_Has();
    [CompilerGeneratedAttribute]
public void set_Has(ILocator value);
    [CompilerGeneratedAttribute]
public ILocator get_HasNot();
    [CompilerGeneratedAttribute]
public void set_HasNot(ILocator value);
    [CompilerGeneratedAttribute]
public string get_HasNotText();
    [CompilerGeneratedAttribute]
public void set_HasNotText(string value);
    [CompilerGeneratedAttribute]
public Regex get_HasNotTextRegex();
    [CompilerGeneratedAttribute]
public void set_HasNotTextRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_HasNotTextString();
    [CompilerGeneratedAttribute]
public void set_HasNotTextString(string value);
    [CompilerGeneratedAttribute]
public string get_HasText();
    [CompilerGeneratedAttribute]
public void set_HasText(string value);
    [CompilerGeneratedAttribute]
public Regex get_HasTextRegex();
    [CompilerGeneratedAttribute]
public void set_HasTextRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_HasTextString();
    [CompilerGeneratedAttribute]
public void set_HasTextString(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.FrameLocatorOptions : object {
    [CompilerGeneratedAttribute]
private ILocator <Has>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocator <HasNot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasNotText>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HasNotTextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasNotTextString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasText>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HasTextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasTextString>k__BackingField;
    [JsonPropertyNameAttribute("has")]
public ILocator Has { get; public set; }
    [JsonPropertyNameAttribute("hasNot")]
public ILocator HasNot { get; public set; }
    [JsonPropertyNameAttribute("hasNotText")]
public string HasNotText { get; public set; }
    [JsonPropertyNameAttribute("hasNotTextRegex")]
public Regex HasNotTextRegex { get; public set; }
    [JsonPropertyNameAttribute("hasNotTextString")]
public string HasNotTextString { get; public set; }
    [JsonPropertyNameAttribute("hasText")]
public string HasText { get; public set; }
    [JsonPropertyNameAttribute("hasTextRegex")]
public Regex HasTextRegex { get; public set; }
    [JsonPropertyNameAttribute("hasTextString")]
public string HasTextString { get; public set; }
    [NullableContextAttribute("1")]
public FrameLocatorOptions(FrameLocatorOptions clone);
    [CompilerGeneratedAttribute]
public ILocator get_Has();
    [CompilerGeneratedAttribute]
public void set_Has(ILocator value);
    [CompilerGeneratedAttribute]
public ILocator get_HasNot();
    [CompilerGeneratedAttribute]
public void set_HasNot(ILocator value);
    [CompilerGeneratedAttribute]
public string get_HasNotText();
    [CompilerGeneratedAttribute]
public void set_HasNotText(string value);
    [CompilerGeneratedAttribute]
public Regex get_HasNotTextRegex();
    [CompilerGeneratedAttribute]
public void set_HasNotTextRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_HasNotTextString();
    [CompilerGeneratedAttribute]
public void set_HasNotTextString(string value);
    [CompilerGeneratedAttribute]
public string get_HasText();
    [CompilerGeneratedAttribute]
public void set_HasText(string value);
    [CompilerGeneratedAttribute]
public Regex get_HasTextRegex();
    [CompilerGeneratedAttribute]
public void set_HasTextRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_HasTextString();
    [CompilerGeneratedAttribute]
public void set_HasTextString(string value);
}
public class Microsoft.Playwright.FramePressOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FramePressOptions(FramePressOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.FrameQuerySelectorOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [NullableContextAttribute("1")]
public FrameQuerySelectorOptions(FrameQuerySelectorOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.FrameRunAndWaitForNavigationOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, bool> <UrlFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UrlRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WaitUntilState> <WaitUntil>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("urlFunc")]
public Func`2<string, bool> UrlFunc { get; public set; }
    [JsonPropertyNameAttribute("urlRegex")]
public Regex UrlRegex { get; public set; }
    [JsonPropertyNameAttribute("urlString")]
public string UrlString { get; public set; }
    [JsonPropertyNameAttribute("waitUntil")]
public Nullable`1<WaitUntilState> WaitUntil { get; public set; }
    [NullableContextAttribute("1")]
public FrameRunAndWaitForNavigationOptions(FrameRunAndWaitForNavigationOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public Func`2<string, bool> get_UrlFunc();
    [CompilerGeneratedAttribute]
public void set_UrlFunc(Func`2<string, bool> value);
    [CompilerGeneratedAttribute]
public Regex get_UrlRegex();
    [CompilerGeneratedAttribute]
public void set_UrlRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_UrlString();
    [CompilerGeneratedAttribute]
public void set_UrlString(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<WaitUntilState> get_WaitUntil();
    [CompilerGeneratedAttribute]
public void set_WaitUntil(Nullable`1<WaitUntilState> value);
}
public class Microsoft.Playwright.FrameSelectOptionOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FrameSelectOptionOptions(FrameSelectOptionOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.FrameSetCheckedOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public FrameSetCheckedOptions(FrameSetCheckedOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.FrameSetContentOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WaitUntilState> <WaitUntil>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("waitUntil")]
public Nullable`1<WaitUntilState> WaitUntil { get; public set; }
    [NullableContextAttribute("1")]
public FrameSetContentOptions(FrameSetContentOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<WaitUntilState> get_WaitUntil();
    [CompilerGeneratedAttribute]
public void set_WaitUntil(Nullable`1<WaitUntilState> value);
}
public class Microsoft.Playwright.FrameSetInputFilesOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FrameSetInputFilesOptions(FrameSetInputFilesOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.FrameTapOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyboardModifier> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("modifiers")]
public IEnumerable`1<KeyboardModifier> Modifiers { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public FrameTapOptions(FrameTapOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyboardModifier> get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(IEnumerable`1<KeyboardModifier> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.FrameTextContentOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FrameTextContentOptions(FrameTextContentOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.FrameTypeOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FrameTypeOptions(FrameTypeOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.FrameUncheckOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public FrameUncheckOptions(FrameUncheckOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.FrameWaitForFunctionOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <PollingInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("pollingInterval")]
public Nullable`1<float> PollingInterval { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FrameWaitForFunctionOptions(FrameWaitForFunctionOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_PollingInterval();
    [CompilerGeneratedAttribute]
public void set_PollingInterval(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.FrameWaitForLoadStateOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FrameWaitForLoadStateOptions(FrameWaitForLoadStateOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.FrameWaitForNavigationOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, bool> <UrlFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UrlRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WaitUntilState> <WaitUntil>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("urlFunc")]
public Func`2<string, bool> UrlFunc { get; public set; }
    [JsonPropertyNameAttribute("urlRegex")]
public Regex UrlRegex { get; public set; }
    [JsonPropertyNameAttribute("urlString")]
public string UrlString { get; public set; }
    [JsonPropertyNameAttribute("waitUntil")]
public Nullable`1<WaitUntilState> WaitUntil { get; public set; }
    [NullableContextAttribute("1")]
public FrameWaitForNavigationOptions(FrameWaitForNavigationOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public Func`2<string, bool> get_UrlFunc();
    [CompilerGeneratedAttribute]
public void set_UrlFunc(Func`2<string, bool> value);
    [CompilerGeneratedAttribute]
public Regex get_UrlRegex();
    [CompilerGeneratedAttribute]
public void set_UrlRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_UrlString();
    [CompilerGeneratedAttribute]
public void set_UrlString(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<WaitUntilState> get_WaitUntil();
    [CompilerGeneratedAttribute]
public void set_WaitUntil(Nullable`1<WaitUntilState> value);
}
public class Microsoft.Playwright.FrameWaitForSelectorOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<WaitForSelectorState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("state")]
public Nullable`1<WaitForSelectorState> State { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public FrameWaitForSelectorOptions(FrameWaitForSelectorOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<WaitForSelectorState> get_State();
    [CompilerGeneratedAttribute]
public void set_State(Nullable`1<WaitForSelectorState> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.FrameWaitForURLOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WaitUntilState> <WaitUntil>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("waitUntil")]
public Nullable`1<WaitUntilState> WaitUntil { get; public set; }
    [NullableContextAttribute("1")]
public FrameWaitForURLOptions(FrameWaitForURLOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<WaitUntilState> get_WaitUntil();
    [CompilerGeneratedAttribute]
public void set_WaitUntil(Nullable`1<WaitUntilState> value);
}
public class Microsoft.Playwright.Geolocation : object {
    [CompilerGeneratedAttribute]
private float <Latitude>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Longitude>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Accuracy>k__BackingField;
    [RequiredAttribute]
[JsonPropertyNameAttribute("latitude")]
public float Latitude { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("longitude")]
public float Longitude { get; public set; }
    [JsonPropertyNameAttribute("accuracy")]
public Nullable`1<float> Accuracy { get; public set; }
    [CompilerGeneratedAttribute]
public float get_Latitude();
    [CompilerGeneratedAttribute]
public void set_Latitude(float value);
    [CompilerGeneratedAttribute]
public float get_Longitude();
    [CompilerGeneratedAttribute]
public void set_Longitude(float value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Accuracy();
    [CompilerGeneratedAttribute]
public void set_Accuracy(Nullable`1<float> value);
}
public enum Microsoft.Playwright.HarContentPolicy : Enum {
    public int value__;
    [EnumMemberAttribute]
public static HarContentPolicy Omit;
    [EnumMemberAttribute]
public static HarContentPolicy Embed;
    [EnumMemberAttribute]
public static HarContentPolicy Attach;
}
public enum Microsoft.Playwright.HarMode : Enum {
    public int value__;
    [EnumMemberAttribute]
public static HarMode Full;
    [EnumMemberAttribute]
public static HarMode Minimal;
}
public enum Microsoft.Playwright.HarNotFound : Enum {
    public int value__;
    [EnumMemberAttribute]
public static HarNotFound Abort;
    [EnumMemberAttribute]
public static HarNotFound Fallback;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Playwright.Header : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [RequiredAttribute]
[JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("value")]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Playwright.Helpers.ChannelHelpers : object {
    [ExtensionAttribute]
internal static string GetString(Nullable`1<JsonElement> element, string name, bool optional);
    [ExtensionAttribute]
internal static T GetObject(Nullable`1<JsonElement> element, string name, Connection connection);
    [ExtensionAttribute]
internal static T GetObject(JsonElement element, string name, Connection connection);
    [ExtensionAttribute]
internal static object ToObject(Exception exception);
}
internal static class Microsoft.Playwright.Helpers.ClassUtils : object {
    internal static T Clone(object source);
}
[ExtensionAttribute]
internal static class Microsoft.Playwright.Helpers.DoubleExtensions : object {
    [ExtensionAttribute]
public static bool IsNegativeZero(double d);
}
internal static class Microsoft.Playwright.Helpers.Driver : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, string> <EnvironmentVariables>k__BackingField;
    internal static Dictionary`2<string, string> EnvironmentVariables { get; }
    private static Driver();
    [CompilerGeneratedAttribute]
internal static Dictionary`2<string, string> get_EnvironmentVariables();
    internal static ValueTuple`2<string, Func`2<string, string>> GetExecutablePath();
    private static bool TryGetCodeBase(Assembly assembly, Uri& codeBase);
    private static ValueTuple`2<string, Func`2<string, string>> GetPath(string driversPath);
}
[ExtensionAttribute]
internal static class Microsoft.Playwright.Helpers.EnumerableExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<NameValue> ToProtocol(IEnumerable`1<KeyValuePair`2<string, string>> input);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Helpers.EnumerableExtensions/<SelectAsync>d__1`2")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<TResult>> SelectAsync(IEnumerable`1<TSource> source, Func`2<TSource, Task`1<TResult>> method);
}
[ExtensionAttribute]
internal static class Microsoft.Playwright.Helpers.EnumHelper : object {
    private static ConcurrentDictionary`2<Type, IReadOnlyDictionary`2<Enum, string>> EnumToStringCache;
    private static ConcurrentDictionary`2<Type, IReadOnlyDictionary`2<string, Enum>> StringToEnumCache;
    private static EnumHelper();
    [ExtensionAttribute]
public static string ToValueString(TEnum value);
    public static TEnum FromValueString(string value);
}
[ExtensionAttribute]
internal static class Microsoft.Playwright.Helpers.JsonExtensions : object {
    [CompilerGeneratedAttribute]
private static JsonSerializerOptions <DefaultJsonSerializerOptions>k__BackingField;
    public static JsonSerializerOptions DefaultJsonSerializerOptions { get; }
    private static JsonExtensions();
    [CompilerGeneratedAttribute]
public static JsonSerializerOptions get_DefaultJsonSerializerOptions();
    [ExtensionAttribute]
public static T ToObject(JsonElement element, JsonSerializerOptions options);
    [ExtensionAttribute]
public static object ToObject(JsonElement element, Type type, JsonSerializerOptions options);
    [ExtensionAttribute]
public static string ToJson(T value, JsonSerializerOptions options);
    [ExtensionAttribute]
public static T ToObject(JsonDocument document, JsonSerializerOptions options);
    internal static JsonSerializerOptions GetNewDefaultSerializerOptions(bool keepNulls);
}
[ExtensionAttribute]
internal static class Microsoft.Playwright.Helpers.RegexOptionsExtensions : object {
    [ExtensionAttribute]
public static string GetInlineFlags(RegexOptions options);
    public static RegexOptions FromInlineFlags(string flags);
}
[ExtensionAttribute]
internal static class Microsoft.Playwright.Helpers.RouteFallbackOptionsExtensions : object {
    [ExtensionAttribute]
public static RouteFallbackOptions FromRouteContinueOptions(RouteFallbackOptions options, RouteContinueOptions overrides);
}
internal static class Microsoft.Playwright.Helpers.SetInputFilesHelpers : object {
    private static int SizeLimitInBytes;
    private static ValueTuple`2<String[], string> ResolvePathsAndDirectoryForInputFiles(List`1<string> items);
    private static IEnumerable`1<string> GetFilesRecursive(string directory);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Helpers.SetInputFilesHelpers/<ConvertInputFilesAsync>d__3")]
public static Task`1<SetInputFilesFiles> ConvertInputFilesAsync(IEnumerable`1<string> files, BrowserContext context);
    public static SetInputFilesFiles ConvertInputFiles(IEnumerable`1<FilePayload> files);
}
[ExtensionAttribute]
internal static class Microsoft.Playwright.Helpers.StringExtensions : object {
    private static Char[] _escapeGlobChars;
    private static Dictionary`2<string, string> _mappings;
    private static StringExtensions();
    [ExtensionAttribute]
public static Dictionary`2<string, string> ParseQueryString(string query);
    [ExtensionAttribute]
public static string GlobToRegex(string glob);
    [ExtensionAttribute]
internal static string GetContentType(string path);
    [ExtensionAttribute]
internal static string MimeType(string file);
    private static string GetExtension(string path);
}
[ExtensionAttribute]
internal static class Microsoft.Playwright.Helpers.TaskHelper : object {
    private static Func`2<TimeSpan, Exception> _defaultExceptionFactory;
    private static TaskHelper();
    [ExtensionAttribute]
public static Task WithTimeout(Task task, int milliseconds, Func`2<TimeSpan, Exception> exceptionFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WithTimeout(Task task, TimeSpan timeout, Func`2<TimeSpan, Exception> exceptionFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WithTimeout(Task task, Func`1<Task> timeoutAction, int timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Helpers.TaskHelper/<WithTimeout>d__4")]
[ExtensionAttribute]
public static Task WithTimeout(Task task, Func`1<Task> timeoutAction, TimeSpan timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> WithTimeout(Task`1<T> task, Action timeoutAction, int timeout);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Helpers.TaskHelper/<WithTimeout>d__6`1")]
[ExtensionAttribute]
public static Task`1<T> WithTimeout(Task`1<T> task, Action timeoutAction, TimeSpan timeout);
    [ExtensionAttribute]
public static Task`1<T> WithTimeout(Task`1<T> task, int milliseconds, Func`2<TimeSpan, Exception> exceptionFactory);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Helpers.TaskHelper/<WithTimeout>d__8`1")]
[ExtensionAttribute]
public static Task`1<T> WithTimeout(Task`1<T> task, TimeSpan timeout, Func`2<TimeSpan, Exception> exceptionFactory);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Helpers.TaskHelper/<TimeoutTask>d__9")]
private static Task`1<bool> TimeoutTask(Task task, TimeSpan timeout);
    [ExtensionAttribute]
public static void IgnoreException(Task task);
}
internal class Microsoft.Playwright.Helpers.TaskQueue : object {
    private SemaphoreSlim _semaphore;
    private bool _disposed;
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Helpers.TaskQueue/<EnqueueAsync>d__4")]
internal Task EnqueueAsync(Func`1<Task> taskGenerator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Playwright.HttpCredentials : object {
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<HttpCredentialsSend> <Send>k__BackingField;
    [RequiredAttribute]
[JsonPropertyNameAttribute("username")]
public string Username { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("password")]
public string Password { get; public set; }
    [NullableAttribute("2")]
[JsonPropertyNameAttribute("origin")]
public string Origin { get; public set; }
    [JsonPropertyNameAttribute("send")]
public Nullable`1<HttpCredentialsSend> Send { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Origin();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Origin(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<HttpCredentialsSend> get_Send();
    [CompilerGeneratedAttribute]
public void set_Send(Nullable`1<HttpCredentialsSend> value);
}
public enum Microsoft.Playwright.HttpCredentialsSend : Enum {
    public int value__;
    [EnumMemberAttribute]
public static HttpCredentialsSend Unauthorized;
    [EnumMemberAttribute]
public static HttpCredentialsSend Always;
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IAccessibility {
    [ObsoleteAttribute]
public abstract virtual Task`1<Nullable`1<JsonElement>> SnapshotAsync(AccessibilitySnapshotOptions options);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IAPIRequest {
    public abstract virtual Task`1<IAPIRequestContext> NewContextAsync(APIRequestNewContextOptions options);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IAPIRequestContext {
    public abstract virtual IFormData CreateFormData();
    public abstract virtual Task`1<IAPIResponse> DeleteAsync(string url, APIRequestContextOptions options);
    public abstract virtual Task`1<IAPIResponse> FetchAsync(string urlOrRequest, APIRequestContextOptions options);
    public abstract virtual Task`1<IAPIResponse> FetchAsync(IRequest urlOrRequest, APIRequestContextOptions options);
    public abstract virtual Task`1<IAPIResponse> GetAsync(string url, APIRequestContextOptions options);
    public abstract virtual Task`1<IAPIResponse> HeadAsync(string url, APIRequestContextOptions options);
    public abstract virtual Task`1<IAPIResponse> PatchAsync(string url, APIRequestContextOptions options);
    public abstract virtual Task`1<IAPIResponse> PostAsync(string url, APIRequestContextOptions options);
    public abstract virtual Task`1<IAPIResponse> PutAsync(string url, APIRequestContextOptions options);
    public abstract virtual Task`1<string> StorageStateAsync(APIRequestContextStorageStateOptions options);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IAPIResponse {
    public Dictionary`2<string, string> Headers { get; }
    public IReadOnlyList`1<Header> HeadersArray { get; }
    public bool Ok { get; }
    public int Status { get; }
    public string StatusText { get; }
    public string Url { get; }
    public abstract virtual Task`1<Byte[]> BodyAsync();
    public abstract virtual Dictionary`2<string, string> get_Headers();
    public abstract virtual IReadOnlyList`1<Header> get_HeadersArray();
    public abstract virtual Task`1<Nullable`1<JsonElement>> JsonAsync();
    public abstract virtual bool get_Ok();
    public abstract virtual int get_Status();
    public abstract virtual string get_StatusText();
    public abstract virtual Task`1<string> TextAsync();
    public abstract virtual string get_Url();
    [NullableContextAttribute("2")]
public abstract virtual Task`1<T> JsonAsync(JsonSerializerOptions options);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IAPIResponseAssertions {
    public IAPIResponseAssertions Not { get; }
    public abstract virtual IAPIResponseAssertions get_Not();
    public abstract virtual Task ToBeOKAsync();
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IBrowser {
    public IBrowserType BrowserType { get; }
    public IReadOnlyList`1<IBrowserContext> Contexts { get; }
    public bool IsConnected { get; }
    public string Version { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Disconnected(EventHandler`1<IBrowser> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Disconnected(EventHandler`1<IBrowser> value);
    public abstract virtual IBrowserType get_BrowserType();
    public abstract virtual Task CloseAsync(BrowserCloseOptions options);
    public abstract virtual IReadOnlyList`1<IBrowserContext> get_Contexts();
    public abstract virtual bool get_IsConnected();
    public abstract virtual Task`1<ICDPSession> NewBrowserCDPSessionAsync();
    public abstract virtual Task`1<IBrowserContext> NewContextAsync(BrowserNewContextOptions options);
    public abstract virtual Task`1<IPage> NewPageAsync(BrowserNewPageOptions options);
    public abstract virtual string get_Version();
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IBrowserContext {
    public IClock Clock { get; }
    public IReadOnlyList`1<IPage> BackgroundPages { get; }
    [NullableAttribute("2")]
public IBrowser Browser { get; }
    public IReadOnlyList`1<IPage> Pages { get; }
    public IAPIRequestContext APIRequest { get; }
    public ITracing Tracing { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_BackgroundPage(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BackgroundPage(EventHandler`1<IPage> value);
    public abstract virtual IClock get_Clock();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Close(EventHandler`1<IBrowserContext> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Close(EventHandler`1<IBrowserContext> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Console(EventHandler`1<IConsoleMessage> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Console(EventHandler`1<IConsoleMessage> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Dialog(EventHandler`1<IDialog> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Dialog(EventHandler`1<IDialog> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Page(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Page(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WebError(EventHandler`1<IWebError> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WebError(EventHandler`1<IWebError> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Request(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Request(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RequestFailed(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RequestFailed(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RequestFinished(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RequestFinished(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Response(EventHandler`1<IResponse> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Response(EventHandler`1<IResponse> value);
    public abstract virtual Task AddCookiesAsync(IEnumerable`1<Cookie> cookies);
    [NullableContextAttribute("2")]
public abstract virtual Task AddInitScriptAsync(string script, string scriptPath);
    public abstract virtual IReadOnlyList`1<IPage> get_BackgroundPages();
    [NullableContextAttribute("2")]
public abstract virtual IBrowser get_Browser();
    public abstract virtual Task ClearCookiesAsync(BrowserContextClearCookiesOptions options);
    public abstract virtual Task ClearPermissionsAsync();
    public abstract virtual Task CloseAsync(BrowserContextCloseOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<BrowserContextCookiesResult>> CookiesAsync(IEnumerable`1<string> urls);
    public abstract virtual Task ExposeBindingAsync(string name, Action callback, BrowserContextExposeBindingOptions options);
    public abstract virtual Task ExposeFunctionAsync(string name, Action callback);
    public abstract virtual Task GrantPermissionsAsync(IEnumerable`1<string> permissions, BrowserContextGrantPermissionsOptions options);
    public abstract virtual Task`1<ICDPSession> NewCDPSessionAsync(IPage page);
    public abstract virtual Task`1<ICDPSession> NewCDPSessionAsync(IFrame page);
    public abstract virtual Task`1<IPage> NewPageAsync();
    public abstract virtual IReadOnlyList`1<IPage> get_Pages();
    public abstract virtual IAPIRequestContext get_APIRequest();
    public abstract virtual Task RouteAsync(string url, Action`1<IRoute> handler, BrowserContextRouteOptions options);
    public abstract virtual Task RouteAsync(Regex url, Action`1<IRoute> handler, BrowserContextRouteOptions options);
    public abstract virtual Task RouteAsync(Func`2<string, bool> url, Action`1<IRoute> handler, BrowserContextRouteOptions options);
    public abstract virtual Task RouteFromHARAsync(string har, BrowserContextRouteFromHAROptions options);
    public abstract virtual void SetDefaultNavigationTimeout(float timeout);
    public abstract virtual void SetDefaultTimeout(float timeout);
    public abstract virtual Task SetExtraHTTPHeadersAsync(IEnumerable`1<KeyValuePair`2<string, string>> headers);
    public abstract virtual Task SetGeolocationAsync(Geolocation geolocation);
    public abstract virtual Task SetOfflineAsync(bool offline);
    public abstract virtual Task`1<string> StorageStateAsync(BrowserContextStorageStateOptions options);
    public abstract virtual ITracing get_Tracing();
    public abstract virtual Task UnrouteAllAsync(BrowserContextUnrouteAllOptions options);
    public abstract virtual Task UnrouteAsync(string url, Action`1<IRoute> handler);
    public abstract virtual Task UnrouteAsync(Regex url, Action`1<IRoute> handler);
    public abstract virtual Task UnrouteAsync(Func`2<string, bool> url, Action`1<IRoute> handler);
    public abstract virtual Task`1<IConsoleMessage> WaitForConsoleMessageAsync(BrowserContextWaitForConsoleMessageOptions options);
    public abstract virtual Task`1<IConsoleMessage> RunAndWaitForConsoleMessageAsync(Func`1<Task> action, BrowserContextRunAndWaitForConsoleMessageOptions options);
    public abstract virtual Task`1<IPage> WaitForPageAsync(BrowserContextWaitForPageOptions options);
    public abstract virtual Task`1<IPage> RunAndWaitForPageAsync(Func`1<Task> action, BrowserContextRunAndWaitForPageOptions options);
    public abstract virtual Task ExposeBindingAsync(string name, Action`1<BindingSource> callback);
    public abstract virtual Task ExposeBindingAsync(string name, Action`2<BindingSource, T> callback);
    public abstract virtual Task ExposeBindingAsync(string name, Func`2<BindingSource, TResult> callback);
    public abstract virtual Task ExposeBindingAsync(string name, Func`3<BindingSource, IJSHandle, TResult> callback);
    public abstract virtual Task ExposeBindingAsync(string name, Func`3<BindingSource, T, TResult> callback);
    public abstract virtual Task ExposeBindingAsync(string name, Func`4<BindingSource, T1, T2, TResult> callback);
    [NullableContextAttribute("2")]
public abstract virtual Task ExposeBindingAsync(string name, Func`5<BindingSource, T1, T2, T3, TResult> callback);
    [NullableContextAttribute("2")]
public abstract virtual Task ExposeBindingAsync(string name, Func`6<BindingSource, T1, T2, T3, T4, TResult> callback);
    public abstract virtual Task ExposeFunctionAsync(string name, Action`1<T> callback);
    public abstract virtual Task ExposeFunctionAsync(string name, Func`1<TResult> callback);
    public abstract virtual Task ExposeFunctionAsync(string name, Func`2<T, TResult> callback);
    public abstract virtual Task ExposeFunctionAsync(string name, Func`3<T1, T2, TResult> callback);
    [NullableContextAttribute("2")]
public abstract virtual Task ExposeFunctionAsync(string name, Func`4<T1, T2, T3, TResult> callback);
    [NullableContextAttribute("2")]
public abstract virtual Task ExposeFunctionAsync(string name, Func`5<T1, T2, T3, T4, TResult> callback);
    public abstract virtual Task RouteAsync(string url, Func`2<IRoute, Task> handler, BrowserContextRouteOptions options);
    public abstract virtual Task RouteAsync(Regex url, Func`2<IRoute, Task> handler, BrowserContextRouteOptions options);
    public abstract virtual Task RouteAsync(Func`2<string, bool> url, Func`2<IRoute, Task> handler, BrowserContextRouteOptions options);
    public abstract virtual Task UnrouteAsync(string url, Func`2<IRoute, Task> handler);
    public abstract virtual Task UnrouteAsync(Regex url, Func`2<IRoute, Task> handler);
    public abstract virtual Task UnrouteAsync(Func`2<string, bool> url, Func`2<IRoute, Task> handler);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IBrowserType {
    public string ExecutablePath { get; }
    public string Name { get; }
    public abstract virtual Task`1<IBrowser> ConnectAsync(string wsEndpoint, BrowserTypeConnectOptions options);
    public abstract virtual Task`1<IBrowser> ConnectOverCDPAsync(string endpointURL, BrowserTypeConnectOverCDPOptions options);
    public abstract virtual string get_ExecutablePath();
    public abstract virtual Task`1<IBrowser> LaunchAsync(BrowserTypeLaunchOptions options);
    public abstract virtual Task`1<IBrowserContext> LaunchPersistentContextAsync(string userDataDir, BrowserTypeLaunchPersistentContextOptions options);
    public abstract virtual string get_Name();
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.ICDPSession {
    public abstract virtual Task DetachAsync();
    public abstract virtual Task`1<Nullable`1<JsonElement>> SendAsync(string method, Dictionary`2<string, object> args);
    public abstract virtual ICDPSessionEvent Event(string eventName);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.ICDPSessionEvent {
    public string EventName { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnEvent(EventHandler`1<Nullable`1<JsonElement>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnEvent(EventHandler`1<Nullable`1<JsonElement>> value);
    public abstract virtual string get_EventName();
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IClock {
    public abstract virtual Task FastForwardAsync(long ticks);
    public abstract virtual Task FastForwardAsync(string ticks);
    public abstract virtual Task InstallAsync(ClockInstallOptions options);
    public abstract virtual Task RunForAsync(long ticks);
    public abstract virtual Task RunForAsync(string ticks);
    public abstract virtual Task PauseAtAsync(DateTime time);
    public abstract virtual Task PauseAtAsync(string time);
    public abstract virtual Task ResumeAsync();
    public abstract virtual Task SetFixedTimeAsync(string time);
    public abstract virtual Task SetFixedTimeAsync(DateTime time);
    public abstract virtual Task SetSystemTimeAsync(string time);
    public abstract virtual Task SetSystemTimeAsync(DateTime time);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IConsoleMessage {
    public IReadOnlyList`1<IJSHandle> Args { get; }
    public string Location { get; }
    [NullableAttribute("2")]
public IPage Page { get; }
    public string Text { get; }
    public string Type { get; }
    public abstract virtual IReadOnlyList`1<IJSHandle> get_Args();
    public abstract virtual string get_Location();
    [NullableContextAttribute("2")]
public abstract virtual IPage get_Page();
    public abstract virtual string get_Text();
    public abstract virtual string get_Type();
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IDialog {
    public string DefaultValue { get; }
    public string Message { get; }
    [NullableAttribute("2")]
public IPage Page { get; }
    public string Type { get; }
    public abstract virtual Task AcceptAsync(string promptText);
    public abstract virtual string get_DefaultValue();
    public abstract virtual Task DismissAsync();
    public abstract virtual string get_Message();
    [NullableContextAttribute("2")]
public abstract virtual IPage get_Page();
    public abstract virtual string get_Type();
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IDownload {
    public IPage Page { get; }
    public string SuggestedFilename { get; }
    public string Url { get; }
    public abstract virtual Task CancelAsync();
    public abstract virtual Task`1<Stream> CreateReadStreamAsync();
    public abstract virtual Task DeleteAsync();
    public abstract virtual Task`1<string> FailureAsync();
    public abstract virtual IPage get_Page();
    public abstract virtual Task`1<string> PathAsync();
    public abstract virtual Task SaveAsAsync(string path);
    public abstract virtual string get_SuggestedFilename();
    public abstract virtual string get_Url();
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IElementHandle {
    public abstract virtual Task`1<ElementHandleBoundingBoxResult> BoundingBoxAsync();
    public abstract virtual Task CheckAsync(ElementHandleCheckOptions options);
    public abstract virtual Task ClickAsync(ElementHandleClickOptions options);
    public abstract virtual Task`1<IFrame> ContentFrameAsync();
    public abstract virtual Task DblClickAsync(ElementHandleDblClickOptions options);
    public abstract virtual Task DispatchEventAsync(string type, object eventInit);
    public abstract virtual Task`1<T> EvalOnSelectorAsync(string selector, string expression, object arg);
    public abstract virtual Task`1<T> EvalOnSelectorAllAsync(string selector, string expression, object arg);
    public abstract virtual Task FillAsync(string value, ElementHandleFillOptions options);
    public abstract virtual Task FocusAsync();
    public abstract virtual Task`1<string> GetAttributeAsync(string name);
    public abstract virtual Task HoverAsync(ElementHandleHoverOptions options);
    public abstract virtual Task`1<string> InnerHTMLAsync();
    public abstract virtual Task`1<string> InnerTextAsync();
    public abstract virtual Task`1<string> InputValueAsync(ElementHandleInputValueOptions options);
    public abstract virtual Task`1<bool> IsCheckedAsync();
    public abstract virtual Task`1<bool> IsDisabledAsync();
    public abstract virtual Task`1<bool> IsEditableAsync();
    public abstract virtual Task`1<bool> IsEnabledAsync();
    public abstract virtual Task`1<bool> IsHiddenAsync();
    public abstract virtual Task`1<bool> IsVisibleAsync();
    public abstract virtual Task`1<IFrame> OwnerFrameAsync();
    public abstract virtual Task PressAsync(string key, ElementHandlePressOptions options);
    public abstract virtual Task`1<IElementHandle> QuerySelectorAsync(string selector);
    public abstract virtual Task`1<IReadOnlyList`1<IElementHandle>> QuerySelectorAllAsync(string selector);
    public abstract virtual Task`1<Byte[]> ScreenshotAsync(ElementHandleScreenshotOptions options);
    public abstract virtual Task ScrollIntoViewIfNeededAsync(ElementHandleScrollIntoViewIfNeededOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string values, ElementHandleSelectOptionOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(IElementHandle values, ElementHandleSelectOptionOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(IEnumerable`1<string> values, ElementHandleSelectOptionOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(SelectOptionValue values, ElementHandleSelectOptionOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(IEnumerable`1<IElementHandle> values, ElementHandleSelectOptionOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(IEnumerable`1<SelectOptionValue> values, ElementHandleSelectOptionOptions options);
    public abstract virtual Task SelectTextAsync(ElementHandleSelectTextOptions options);
    public abstract virtual Task SetCheckedAsync(bool checkedState, ElementHandleSetCheckedOptions options);
    public abstract virtual Task SetInputFilesAsync(string files, ElementHandleSetInputFilesOptions options);
    public abstract virtual Task SetInputFilesAsync(IEnumerable`1<string> files, ElementHandleSetInputFilesOptions options);
    public abstract virtual Task SetInputFilesAsync(FilePayload files, ElementHandleSetInputFilesOptions options);
    public abstract virtual Task SetInputFilesAsync(IEnumerable`1<FilePayload> files, ElementHandleSetInputFilesOptions options);
    public abstract virtual Task TapAsync(ElementHandleTapOptions options);
    public abstract virtual Task`1<string> TextContentAsync();
    [ObsoleteAttribute]
public abstract virtual Task TypeAsync(string text, ElementHandleTypeOptions options);
    public abstract virtual Task UncheckAsync(ElementHandleUncheckOptions options);
    public abstract virtual Task WaitForElementStateAsync(ElementState state, ElementHandleWaitForElementStateOptions options);
    public abstract virtual Task`1<IElementHandle> WaitForSelectorAsync(string selector, ElementHandleWaitForSelectorOptions options);
    [NullableContextAttribute("0")]
public abstract virtual Task`1<Nullable`1<JsonElement>> EvalOnSelectorAsync(string selector, string expression, object arg);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IFileChooser {
    public IElementHandle Element { get; }
    public bool IsMultiple { get; }
    public IPage Page { get; }
    public abstract virtual IElementHandle get_Element();
    public abstract virtual bool get_IsMultiple();
    public abstract virtual IPage get_Page();
    public abstract virtual Task SetFilesAsync(string files, FileChooserSetFilesOptions options);
    public abstract virtual Task SetFilesAsync(IEnumerable`1<string> files, FileChooserSetFilesOptions options);
    public abstract virtual Task SetFilesAsync(FilePayload files, FileChooserSetFilesOptions options);
    public abstract virtual Task SetFilesAsync(IEnumerable`1<FilePayload> files, FileChooserSetFilesOptions options);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IFormData {
    public abstract virtual IFormData Append(string name, string value);
    public abstract virtual IFormData Append(string name, bool value);
    public abstract virtual IFormData Append(string name, int value);
    public abstract virtual IFormData Append(string name, FilePayload value);
    public abstract virtual IFormData Set(string name, string value);
    public abstract virtual IFormData Set(string name, bool value);
    public abstract virtual IFormData Set(string name, int value);
    public abstract virtual IFormData Set(string name, FilePayload value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IFrame {
    public IReadOnlyList`1<IFrame> ChildFrames { get; }
    public bool IsDetached { get; }
    public string Name { get; }
    public IPage Page { get; }
    [NullableAttribute("2")]
public IFrame ParentFrame { get; }
    public string Url { get; }
    public abstract virtual Task`1<IElementHandle> AddScriptTagAsync(FrameAddScriptTagOptions options);
    public abstract virtual Task`1<IElementHandle> AddStyleTagAsync(FrameAddStyleTagOptions options);
    public abstract virtual Task CheckAsync(string selector, FrameCheckOptions options);
    public abstract virtual IReadOnlyList`1<IFrame> get_ChildFrames();
    public abstract virtual Task ClickAsync(string selector, FrameClickOptions options);
    public abstract virtual Task`1<string> ContentAsync();
    public abstract virtual Task DblClickAsync(string selector, FrameDblClickOptions options);
    public abstract virtual Task DispatchEventAsync(string selector, string type, object eventInit, FrameDispatchEventOptions options);
    public abstract virtual Task DragAndDropAsync(string source, string target, FrameDragAndDropOptions options);
    public abstract virtual Task`1<T> EvalOnSelectorAsync(string selector, string expression, object arg, FrameEvalOnSelectorOptions options);
    public abstract virtual Task`1<T> EvalOnSelectorAllAsync(string selector, string expression, object arg);
    public abstract virtual Task`1<T> EvaluateAsync(string expression, object arg);
    public abstract virtual Task`1<IJSHandle> EvaluateHandleAsync(string expression, object arg);
    public abstract virtual Task FillAsync(string selector, string value, FrameFillOptions options);
    public abstract virtual Task FocusAsync(string selector, FrameFocusOptions options);
    public abstract virtual Task`1<IElementHandle> FrameElementAsync();
    public abstract virtual IFrameLocator FrameLocator(string selector);
    public abstract virtual Task`1<string> GetAttributeAsync(string selector, string name, FrameGetAttributeOptions options);
    public abstract virtual ILocator GetByAltText(string text, FrameGetByAltTextOptions options);
    public abstract virtual ILocator GetByAltText(Regex text, FrameGetByAltTextOptions options);
    public abstract virtual ILocator GetByLabel(string text, FrameGetByLabelOptions options);
    public abstract virtual ILocator GetByLabel(Regex text, FrameGetByLabelOptions options);
    public abstract virtual ILocator GetByPlaceholder(string text, FrameGetByPlaceholderOptions options);
    public abstract virtual ILocator GetByPlaceholder(Regex text, FrameGetByPlaceholderOptions options);
    public abstract virtual ILocator GetByRole(AriaRole role, FrameGetByRoleOptions options);
    public abstract virtual ILocator GetByTestId(string testId);
    public abstract virtual ILocator GetByTestId(Regex testId);
    public abstract virtual ILocator GetByText(string text, FrameGetByTextOptions options);
    public abstract virtual ILocator GetByText(Regex text, FrameGetByTextOptions options);
    public abstract virtual ILocator GetByTitle(string text, FrameGetByTitleOptions options);
    public abstract virtual ILocator GetByTitle(Regex text, FrameGetByTitleOptions options);
    public abstract virtual Task`1<IResponse> GotoAsync(string url, FrameGotoOptions options);
    public abstract virtual Task HoverAsync(string selector, FrameHoverOptions options);
    public abstract virtual Task`1<string> InnerHTMLAsync(string selector, FrameInnerHTMLOptions options);
    public abstract virtual Task`1<string> InnerTextAsync(string selector, FrameInnerTextOptions options);
    public abstract virtual Task`1<string> InputValueAsync(string selector, FrameInputValueOptions options);
    public abstract virtual Task`1<bool> IsCheckedAsync(string selector, FrameIsCheckedOptions options);
    public abstract virtual bool get_IsDetached();
    public abstract virtual Task`1<bool> IsDisabledAsync(string selector, FrameIsDisabledOptions options);
    public abstract virtual Task`1<bool> IsEditableAsync(string selector, FrameIsEditableOptions options);
    public abstract virtual Task`1<bool> IsEnabledAsync(string selector, FrameIsEnabledOptions options);
    public abstract virtual Task`1<bool> IsHiddenAsync(string selector, FrameIsHiddenOptions options);
    public abstract virtual Task`1<bool> IsVisibleAsync(string selector, FrameIsVisibleOptions options);
    public abstract virtual ILocator Locator(string selector, FrameLocatorOptions options);
    public abstract virtual string get_Name();
    public abstract virtual IPage get_Page();
    [NullableContextAttribute("2")]
public abstract virtual IFrame get_ParentFrame();
    public abstract virtual Task PressAsync(string selector, string key, FramePressOptions options);
    public abstract virtual Task`1<IElementHandle> QuerySelectorAsync(string selector, FrameQuerySelectorOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IElementHandle>> QuerySelectorAllAsync(string selector);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, string values, FrameSelectOptionOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, IElementHandle values, FrameSelectOptionOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, IEnumerable`1<string> values, FrameSelectOptionOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, SelectOptionValue values, FrameSelectOptionOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, IEnumerable`1<IElementHandle> values, FrameSelectOptionOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, IEnumerable`1<SelectOptionValue> values, FrameSelectOptionOptions options);
    public abstract virtual Task SetCheckedAsync(string selector, bool checkedState, FrameSetCheckedOptions options);
    public abstract virtual Task SetContentAsync(string html, FrameSetContentOptions options);
    public abstract virtual Task SetInputFilesAsync(string selector, string files, FrameSetInputFilesOptions options);
    public abstract virtual Task SetInputFilesAsync(string selector, IEnumerable`1<string> files, FrameSetInputFilesOptions options);
    public abstract virtual Task SetInputFilesAsync(string selector, FilePayload files, FrameSetInputFilesOptions options);
    public abstract virtual Task SetInputFilesAsync(string selector, IEnumerable`1<FilePayload> files, FrameSetInputFilesOptions options);
    public abstract virtual Task TapAsync(string selector, FrameTapOptions options);
    public abstract virtual Task`1<string> TextContentAsync(string selector, FrameTextContentOptions options);
    public abstract virtual Task`1<string> TitleAsync();
    [ObsoleteAttribute]
public abstract virtual Task TypeAsync(string selector, string text, FrameTypeOptions options);
    public abstract virtual Task UncheckAsync(string selector, FrameUncheckOptions options);
    public abstract virtual string get_Url();
    public abstract virtual Task`1<IJSHandle> WaitForFunctionAsync(string expression, object arg, FrameWaitForFunctionOptions options);
    public abstract virtual Task WaitForLoadStateAsync(Nullable`1<LoadState> state, FrameWaitForLoadStateOptions options);
    [NullableContextAttribute("2")]
[ObsoleteAttribute]
public abstract virtual Task`1<IResponse> WaitForNavigationAsync(FrameWaitForNavigationOptions options);
    [ObsoleteAttribute]
public abstract virtual Task`1<IResponse> RunAndWaitForNavigationAsync(Func`1<Task> action, FrameRunAndWaitForNavigationOptions options);
    public abstract virtual Task`1<IElementHandle> WaitForSelectorAsync(string selector, FrameWaitForSelectorOptions options);
    public abstract virtual Task WaitForTimeoutAsync(float timeout);
    public abstract virtual Task WaitForURLAsync(string url, FrameWaitForURLOptions options);
    public abstract virtual Task WaitForURLAsync(Regex url, FrameWaitForURLOptions options);
    public abstract virtual Task WaitForURLAsync(Func`2<string, bool> url, FrameWaitForURLOptions options);
    [NullableContextAttribute("0")]
public abstract virtual Task`1<Nullable`1<JsonElement>> EvaluateAsync(string expression, object arg);
    [NullableContextAttribute("0")]
public abstract virtual Task`1<Nullable`1<JsonElement>> EvalOnSelectorAsync(string selector, string expression, object arg);
    [NullableContextAttribute("0")]
public abstract virtual Task`1<Nullable`1<JsonElement>> EvalOnSelectorAllAsync(string selector, string expression, object arg);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IFrameLocator {
    public IFrameLocator First { get; }
    public IFrameLocator Last { get; }
    public ILocator Owner { get; }
    public abstract virtual IFrameLocator get_First();
    public abstract virtual IFrameLocator FrameLocator(string selector);
    public abstract virtual ILocator GetByAltText(string text, FrameLocatorGetByAltTextOptions options);
    public abstract virtual ILocator GetByAltText(Regex text, FrameLocatorGetByAltTextOptions options);
    public abstract virtual ILocator GetByLabel(string text, FrameLocatorGetByLabelOptions options);
    public abstract virtual ILocator GetByLabel(Regex text, FrameLocatorGetByLabelOptions options);
    public abstract virtual ILocator GetByPlaceholder(string text, FrameLocatorGetByPlaceholderOptions options);
    public abstract virtual ILocator GetByPlaceholder(Regex text, FrameLocatorGetByPlaceholderOptions options);
    public abstract virtual ILocator GetByRole(AriaRole role, FrameLocatorGetByRoleOptions options);
    public abstract virtual ILocator GetByTestId(string testId);
    public abstract virtual ILocator GetByTestId(Regex testId);
    public abstract virtual ILocator GetByText(string text, FrameLocatorGetByTextOptions options);
    public abstract virtual ILocator GetByText(Regex text, FrameLocatorGetByTextOptions options);
    public abstract virtual ILocator GetByTitle(string text, FrameLocatorGetByTitleOptions options);
    public abstract virtual ILocator GetByTitle(Regex text, FrameLocatorGetByTitleOptions options);
    public abstract virtual IFrameLocator get_Last();
    public abstract virtual ILocator Locator(string selectorOrLocator, FrameLocatorLocatorOptions options);
    public abstract virtual ILocator Locator(ILocator selectorOrLocator, FrameLocatorLocatorOptions options);
    public abstract virtual IFrameLocator Nth(int index);
    public abstract virtual ILocator get_Owner();
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IJSHandle {
    [NullableContextAttribute("2")]
public abstract virtual IElementHandle AsElement();
    public abstract virtual Task`1<T> EvaluateAsync(string expression, object arg);
    public abstract virtual Task`1<IJSHandle> EvaluateHandleAsync(string expression, object arg);
    public abstract virtual Task`1<Dictionary`2<string, IJSHandle>> GetPropertiesAsync();
    public abstract virtual Task`1<IJSHandle> GetPropertyAsync(string propertyName);
    public abstract virtual Task`1<T> JsonValueAsync();
    [NullableContextAttribute("0")]
public abstract virtual Task`1<Nullable`1<JsonElement>> EvaluateAsync(string expression, object arg);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IKeyboard {
    public abstract virtual Task DownAsync(string key);
    public abstract virtual Task InsertTextAsync(string text);
    public abstract virtual Task PressAsync(string key, KeyboardPressOptions options);
    public abstract virtual Task TypeAsync(string text, KeyboardTypeOptions options);
    public abstract virtual Task UpAsync(string key);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.ILocator {
    public IFrameLocator ContentFrame { get; }
    public ILocator First { get; }
    public ILocator Last { get; }
    public IPage Page { get; }
    public abstract virtual Task`1<IReadOnlyList`1<ILocator>> AllAsync();
    public abstract virtual Task`1<IReadOnlyList`1<string>> AllInnerTextsAsync();
    public abstract virtual Task`1<IReadOnlyList`1<string>> AllTextContentsAsync();
    public abstract virtual ILocator And(ILocator locator);
    public abstract virtual Task BlurAsync(LocatorBlurOptions options);
    [NullableContextAttribute("2")]
public abstract virtual Task`1<LocatorBoundingBoxResult> BoundingBoxAsync(LocatorBoundingBoxOptions options);
    public abstract virtual Task CheckAsync(LocatorCheckOptions options);
    public abstract virtual Task ClearAsync(LocatorClearOptions options);
    public abstract virtual Task ClickAsync(LocatorClickOptions options);
    public abstract virtual Task`1<int> CountAsync();
    public abstract virtual Task DblClickAsync(LocatorDblClickOptions options);
    public abstract virtual Task DispatchEventAsync(string type, object eventInit, LocatorDispatchEventOptions options);
    public abstract virtual Task DragToAsync(ILocator target, LocatorDragToOptions options);
    public abstract virtual Task`1<IElementHandle> ElementHandleAsync(LocatorElementHandleOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IElementHandle>> ElementHandlesAsync();
    public abstract virtual IFrameLocator get_ContentFrame();
    [NullableContextAttribute("2")]
public abstract virtual Task`1<T> EvaluateAsync(string expression, object arg, LocatorEvaluateOptions options);
    public abstract virtual Task`1<T> EvaluateAllAsync(string expression, object arg);
    public abstract virtual Task`1<IJSHandle> EvaluateHandleAsync(string expression, object arg, LocatorEvaluateHandleOptions options);
    public abstract virtual Task FillAsync(string value, LocatorFillOptions options);
    public abstract virtual ILocator Filter(LocatorFilterOptions options);
    public abstract virtual ILocator get_First();
    public abstract virtual Task FocusAsync(LocatorFocusOptions options);
    public abstract virtual IFrameLocator FrameLocator(string selector);
    public abstract virtual Task`1<string> GetAttributeAsync(string name, LocatorGetAttributeOptions options);
    public abstract virtual ILocator GetByAltText(string text, LocatorGetByAltTextOptions options);
    public abstract virtual ILocator GetByAltText(Regex text, LocatorGetByAltTextOptions options);
    public abstract virtual ILocator GetByLabel(string text, LocatorGetByLabelOptions options);
    public abstract virtual ILocator GetByLabel(Regex text, LocatorGetByLabelOptions options);
    public abstract virtual ILocator GetByPlaceholder(string text, LocatorGetByPlaceholderOptions options);
    public abstract virtual ILocator GetByPlaceholder(Regex text, LocatorGetByPlaceholderOptions options);
    public abstract virtual ILocator GetByRole(AriaRole role, LocatorGetByRoleOptions options);
    public abstract virtual ILocator GetByTestId(string testId);
    public abstract virtual ILocator GetByTestId(Regex testId);
    public abstract virtual ILocator GetByText(string text, LocatorGetByTextOptions options);
    public abstract virtual ILocator GetByText(Regex text, LocatorGetByTextOptions options);
    public abstract virtual ILocator GetByTitle(string text, LocatorGetByTitleOptions options);
    public abstract virtual ILocator GetByTitle(Regex text, LocatorGetByTitleOptions options);
    public abstract virtual Task HighlightAsync();
    public abstract virtual Task HoverAsync(LocatorHoverOptions options);
    public abstract virtual Task`1<string> InnerHTMLAsync(LocatorInnerHTMLOptions options);
    public abstract virtual Task`1<string> InnerTextAsync(LocatorInnerTextOptions options);
    public abstract virtual Task`1<string> InputValueAsync(LocatorInputValueOptions options);
    public abstract virtual Task`1<bool> IsCheckedAsync(LocatorIsCheckedOptions options);
    public abstract virtual Task`1<bool> IsDisabledAsync(LocatorIsDisabledOptions options);
    public abstract virtual Task`1<bool> IsEditableAsync(LocatorIsEditableOptions options);
    public abstract virtual Task`1<bool> IsEnabledAsync(LocatorIsEnabledOptions options);
    public abstract virtual Task`1<bool> IsHiddenAsync(LocatorIsHiddenOptions options);
    public abstract virtual Task`1<bool> IsVisibleAsync(LocatorIsVisibleOptions options);
    public abstract virtual ILocator get_Last();
    public abstract virtual ILocator Locator(string selectorOrLocator, LocatorLocatorOptions options);
    public abstract virtual ILocator Locator(ILocator selectorOrLocator, LocatorLocatorOptions options);
    public abstract virtual ILocator Nth(int index);
    public abstract virtual ILocator Or(ILocator locator);
    public abstract virtual IPage get_Page();
    public abstract virtual Task PressAsync(string key, LocatorPressOptions options);
    public abstract virtual Task PressSequentiallyAsync(string text, LocatorPressSequentiallyOptions options);
    public abstract virtual Task`1<Byte[]> ScreenshotAsync(LocatorScreenshotOptions options);
    public abstract virtual Task ScrollIntoViewIfNeededAsync(LocatorScrollIntoViewIfNeededOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string values, LocatorSelectOptionOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(IElementHandle values, LocatorSelectOptionOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(IEnumerable`1<string> values, LocatorSelectOptionOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(SelectOptionValue values, LocatorSelectOptionOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(IEnumerable`1<IElementHandle> values, LocatorSelectOptionOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(IEnumerable`1<SelectOptionValue> values, LocatorSelectOptionOptions options);
    public abstract virtual Task SelectTextAsync(LocatorSelectTextOptions options);
    public abstract virtual Task SetCheckedAsync(bool checkedState, LocatorSetCheckedOptions options);
    public abstract virtual Task SetInputFilesAsync(string files, LocatorSetInputFilesOptions options);
    public abstract virtual Task SetInputFilesAsync(IEnumerable`1<string> files, LocatorSetInputFilesOptions options);
    public abstract virtual Task SetInputFilesAsync(FilePayload files, LocatorSetInputFilesOptions options);
    public abstract virtual Task SetInputFilesAsync(IEnumerable`1<FilePayload> files, LocatorSetInputFilesOptions options);
    public abstract virtual Task TapAsync(LocatorTapOptions options);
    [NullableContextAttribute("2")]
public abstract virtual Task`1<string> TextContentAsync(LocatorTextContentOptions options);
    [ObsoleteAttribute]
public abstract virtual Task TypeAsync(string text, LocatorTypeOptions options);
    public abstract virtual Task UncheckAsync(LocatorUncheckOptions options);
    public abstract virtual Task WaitForAsync(LocatorWaitForOptions options);
    [NullableContextAttribute("0")]
public abstract virtual Task`1<Nullable`1<JsonElement>> EvaluateAsync(string expression, object arg, LocatorEvaluateOptions options);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.ILocatorAssertions {
    public ILocatorAssertions Not { get; }
    public abstract virtual ILocatorAssertions get_Not();
    public abstract virtual Task ToBeAttachedAsync(LocatorAssertionsToBeAttachedOptions options);
    public abstract virtual Task ToBeCheckedAsync(LocatorAssertionsToBeCheckedOptions options);
    public abstract virtual Task ToBeDisabledAsync(LocatorAssertionsToBeDisabledOptions options);
    public abstract virtual Task ToBeEditableAsync(LocatorAssertionsToBeEditableOptions options);
    public abstract virtual Task ToBeEmptyAsync(LocatorAssertionsToBeEmptyOptions options);
    public abstract virtual Task ToBeEnabledAsync(LocatorAssertionsToBeEnabledOptions options);
    public abstract virtual Task ToBeFocusedAsync(LocatorAssertionsToBeFocusedOptions options);
    public abstract virtual Task ToBeHiddenAsync(LocatorAssertionsToBeHiddenOptions options);
    public abstract virtual Task ToBeInViewportAsync(LocatorAssertionsToBeInViewportOptions options);
    public abstract virtual Task ToBeVisibleAsync(LocatorAssertionsToBeVisibleOptions options);
    public abstract virtual Task ToContainTextAsync(string expected, LocatorAssertionsToContainTextOptions options);
    public abstract virtual Task ToContainTextAsync(Regex expected, LocatorAssertionsToContainTextOptions options);
    public abstract virtual Task ToContainTextAsync(IEnumerable`1<string> expected, LocatorAssertionsToContainTextOptions options);
    public abstract virtual Task ToContainTextAsync(IEnumerable`1<Regex> expected, LocatorAssertionsToContainTextOptions options);
    public abstract virtual Task ToHaveAccessibleDescriptionAsync(string description, LocatorAssertionsToHaveAccessibleDescriptionOptions options);
    public abstract virtual Task ToHaveAccessibleDescriptionAsync(Regex description, LocatorAssertionsToHaveAccessibleDescriptionOptions options);
    public abstract virtual Task ToHaveAccessibleNameAsync(string name, LocatorAssertionsToHaveAccessibleNameOptions options);
    public abstract virtual Task ToHaveAccessibleNameAsync(Regex name, LocatorAssertionsToHaveAccessibleNameOptions options);
    public abstract virtual Task ToHaveAttributeAsync(string name, string value, LocatorAssertionsToHaveAttributeOptions options);
    public abstract virtual Task ToHaveAttributeAsync(string name, Regex value, LocatorAssertionsToHaveAttributeOptions options);
    public abstract virtual Task ToHaveClassAsync(string expected, LocatorAssertionsToHaveClassOptions options);
    public abstract virtual Task ToHaveClassAsync(Regex expected, LocatorAssertionsToHaveClassOptions options);
    public abstract virtual Task ToHaveClassAsync(IEnumerable`1<string> expected, LocatorAssertionsToHaveClassOptions options);
    public abstract virtual Task ToHaveClassAsync(IEnumerable`1<Regex> expected, LocatorAssertionsToHaveClassOptions options);
    public abstract virtual Task ToHaveCountAsync(int count, LocatorAssertionsToHaveCountOptions options);
    public abstract virtual Task ToHaveCSSAsync(string name, string value, LocatorAssertionsToHaveCSSOptions options);
    public abstract virtual Task ToHaveCSSAsync(string name, Regex value, LocatorAssertionsToHaveCSSOptions options);
    public abstract virtual Task ToHaveIdAsync(string id, LocatorAssertionsToHaveIdOptions options);
    public abstract virtual Task ToHaveIdAsync(Regex id, LocatorAssertionsToHaveIdOptions options);
    public abstract virtual Task ToHaveJSPropertyAsync(string name, object value, LocatorAssertionsToHaveJSPropertyOptions options);
    public abstract virtual Task ToHaveRoleAsync(AriaRole role, LocatorAssertionsToHaveRoleOptions options);
    public abstract virtual Task ToHaveTextAsync(string expected, LocatorAssertionsToHaveTextOptions options);
    public abstract virtual Task ToHaveTextAsync(Regex expected, LocatorAssertionsToHaveTextOptions options);
    public abstract virtual Task ToHaveTextAsync(IEnumerable`1<string> expected, LocatorAssertionsToHaveTextOptions options);
    public abstract virtual Task ToHaveTextAsync(IEnumerable`1<Regex> expected, LocatorAssertionsToHaveTextOptions options);
    public abstract virtual Task ToHaveValueAsync(string value, LocatorAssertionsToHaveValueOptions options);
    public abstract virtual Task ToHaveValueAsync(Regex value, LocatorAssertionsToHaveValueOptions options);
    public abstract virtual Task ToHaveValuesAsync(IEnumerable`1<string> values, LocatorAssertionsToHaveValuesOptions options);
    public abstract virtual Task ToHaveValuesAsync(IEnumerable`1<Regex> values, LocatorAssertionsToHaveValuesOptions options);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IMouse {
    public abstract virtual Task ClickAsync(float x, float y, MouseClickOptions options);
    public abstract virtual Task DblClickAsync(float x, float y, MouseDblClickOptions options);
    public abstract virtual Task DownAsync(MouseDownOptions options);
    public abstract virtual Task MoveAsync(float x, float y, MouseMoveOptions options);
    public abstract virtual Task UpAsync(MouseUpOptions options);
    public abstract virtual Task WheelAsync(float deltaX, float deltaY);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IPage {
    public IClock Clock { get; }
    [ObsoleteAttribute]
public IAccessibility Accessibility { get; }
    public IBrowserContext Context { get; }
    public IReadOnlyList`1<IFrame> Frames { get; }
    public bool IsClosed { get; }
    public IKeyboard Keyboard { get; }
    public IFrame MainFrame { get; }
    public IMouse Mouse { get; }
    public IAPIRequestContext APIRequest { get; }
    public ITouchscreen Touchscreen { get; }
    public string Url { get; }
    [NullableAttribute("2")]
public IVideo Video { get; }
    [NullableAttribute("2")]
public PageViewportSizeResult ViewportSize { get; }
    public IReadOnlyList`1<IWorker> Workers { get; }
    public abstract virtual IClock get_Clock();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Close(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Close(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Console(EventHandler`1<IConsoleMessage> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Console(EventHandler`1<IConsoleMessage> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Crash(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Crash(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Dialog(EventHandler`1<IDialog> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Dialog(EventHandler`1<IDialog> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DOMContentLoaded(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DOMContentLoaded(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Download(EventHandler`1<IDownload> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Download(EventHandler`1<IDownload> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FileChooser(EventHandler`1<IFileChooser> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FileChooser(EventHandler`1<IFileChooser> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FrameAttached(EventHandler`1<IFrame> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FrameAttached(EventHandler`1<IFrame> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FrameDetached(EventHandler`1<IFrame> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FrameDetached(EventHandler`1<IFrame> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FrameNavigated(EventHandler`1<IFrame> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FrameNavigated(EventHandler`1<IFrame> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Load(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Load(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PageError(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PageError(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Popup(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Popup(EventHandler`1<IPage> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Request(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Request(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RequestFailed(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RequestFailed(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RequestFinished(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RequestFinished(EventHandler`1<IRequest> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Response(EventHandler`1<IResponse> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Response(EventHandler`1<IResponse> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WebSocket(EventHandler`1<IWebSocket> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WebSocket(EventHandler`1<IWebSocket> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Worker(EventHandler`1<IWorker> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Worker(EventHandler`1<IWorker> value);
    public abstract virtual IAccessibility get_Accessibility();
    [NullableContextAttribute("2")]
public abstract virtual Task AddInitScriptAsync(string script, string scriptPath);
    public abstract virtual Task`1<IElementHandle> AddScriptTagAsync(PageAddScriptTagOptions options);
    public abstract virtual Task`1<IElementHandle> AddStyleTagAsync(PageAddStyleTagOptions options);
    public abstract virtual Task BringToFrontAsync();
    public abstract virtual Task CheckAsync(string selector, PageCheckOptions options);
    public abstract virtual Task ClickAsync(string selector, PageClickOptions options);
    public abstract virtual Task CloseAsync(PageCloseOptions options);
    public abstract virtual Task`1<string> ContentAsync();
    public abstract virtual IBrowserContext get_Context();
    public abstract virtual Task DblClickAsync(string selector, PageDblClickOptions options);
    public abstract virtual Task DispatchEventAsync(string selector, string type, object eventInit, PageDispatchEventOptions options);
    public abstract virtual Task DragAndDropAsync(string source, string target, PageDragAndDropOptions options);
    public abstract virtual Task EmulateMediaAsync(PageEmulateMediaOptions options);
    public abstract virtual Task`1<T> EvalOnSelectorAsync(string selector, string expression, object arg, PageEvalOnSelectorOptions options);
    public abstract virtual Task`1<T> EvalOnSelectorAllAsync(string selector, string expression, object arg);
    public abstract virtual Task`1<T> EvaluateAsync(string expression, object arg);
    public abstract virtual Task`1<IJSHandle> EvaluateHandleAsync(string expression, object arg);
    public abstract virtual Task ExposeBindingAsync(string name, Action callback, PageExposeBindingOptions options);
    public abstract virtual Task ExposeFunctionAsync(string name, Action callback);
    public abstract virtual Task FillAsync(string selector, string value, PageFillOptions options);
    public abstract virtual Task FocusAsync(string selector, PageFocusOptions options);
    public abstract virtual IFrame Frame(string name);
    public abstract virtual IFrame FrameByUrl(string url);
    public abstract virtual IFrame FrameByUrl(Regex url);
    public abstract virtual IFrame FrameByUrl(Func`2<string, bool> url);
    public abstract virtual IFrameLocator FrameLocator(string selector);
    public abstract virtual IReadOnlyList`1<IFrame> get_Frames();
    public abstract virtual Task`1<string> GetAttributeAsync(string selector, string name, PageGetAttributeOptions options);
    public abstract virtual ILocator GetByAltText(string text, PageGetByAltTextOptions options);
    public abstract virtual ILocator GetByAltText(Regex text, PageGetByAltTextOptions options);
    public abstract virtual ILocator GetByLabel(string text, PageGetByLabelOptions options);
    public abstract virtual ILocator GetByLabel(Regex text, PageGetByLabelOptions options);
    public abstract virtual ILocator GetByPlaceholder(string text, PageGetByPlaceholderOptions options);
    public abstract virtual ILocator GetByPlaceholder(Regex text, PageGetByPlaceholderOptions options);
    public abstract virtual ILocator GetByRole(AriaRole role, PageGetByRoleOptions options);
    public abstract virtual ILocator GetByTestId(string testId);
    public abstract virtual ILocator GetByTestId(Regex testId);
    public abstract virtual ILocator GetByText(string text, PageGetByTextOptions options);
    public abstract virtual ILocator GetByText(Regex text, PageGetByTextOptions options);
    public abstract virtual ILocator GetByTitle(string text, PageGetByTitleOptions options);
    public abstract virtual ILocator GetByTitle(Regex text, PageGetByTitleOptions options);
    [NullableContextAttribute("2")]
public abstract virtual Task`1<IResponse> GoBackAsync(PageGoBackOptions options);
    [NullableContextAttribute("2")]
public abstract virtual Task`1<IResponse> GoForwardAsync(PageGoForwardOptions options);
    public abstract virtual Task`1<IResponse> GotoAsync(string url, PageGotoOptions options);
    public abstract virtual Task HoverAsync(string selector, PageHoverOptions options);
    public abstract virtual Task`1<string> InnerHTMLAsync(string selector, PageInnerHTMLOptions options);
    public abstract virtual Task`1<string> InnerTextAsync(string selector, PageInnerTextOptions options);
    public abstract virtual Task`1<string> InputValueAsync(string selector, PageInputValueOptions options);
    public abstract virtual Task`1<bool> IsCheckedAsync(string selector, PageIsCheckedOptions options);
    public abstract virtual bool get_IsClosed();
    public abstract virtual Task`1<bool> IsDisabledAsync(string selector, PageIsDisabledOptions options);
    public abstract virtual Task`1<bool> IsEditableAsync(string selector, PageIsEditableOptions options);
    public abstract virtual Task`1<bool> IsEnabledAsync(string selector, PageIsEnabledOptions options);
    public abstract virtual Task`1<bool> IsHiddenAsync(string selector, PageIsHiddenOptions options);
    public abstract virtual Task`1<bool> IsVisibleAsync(string selector, PageIsVisibleOptions options);
    public abstract virtual IKeyboard get_Keyboard();
    public abstract virtual ILocator Locator(string selector, PageLocatorOptions options);
    public abstract virtual IFrame get_MainFrame();
    public abstract virtual IMouse get_Mouse();
    public abstract virtual Task`1<IPage> OpenerAsync();
    public abstract virtual Task PauseAsync();
    public abstract virtual Task`1<Byte[]> PdfAsync(PagePdfOptions options);
    public abstract virtual Task PressAsync(string selector, string key, PagePressOptions options);
    public abstract virtual Task`1<IElementHandle> QuerySelectorAsync(string selector, PageQuerySelectorOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IElementHandle>> QuerySelectorAllAsync(string selector);
    public abstract virtual Task AddLocatorHandlerAsync(ILocator locator, Func`2<ILocator, Task> handler, PageAddLocatorHandlerOptions options);
    public abstract virtual Task RemoveLocatorHandlerAsync(ILocator locator);
    [NullableContextAttribute("2")]
public abstract virtual Task`1<IResponse> ReloadAsync(PageReloadOptions options);
    public abstract virtual IAPIRequestContext get_APIRequest();
    public abstract virtual Task RouteAsync(string url, Action`1<IRoute> handler, PageRouteOptions options);
    public abstract virtual Task RouteAsync(Regex url, Action`1<IRoute> handler, PageRouteOptions options);
    public abstract virtual Task RouteAsync(Func`2<string, bool> url, Action`1<IRoute> handler, PageRouteOptions options);
    public abstract virtual Task RouteFromHARAsync(string har, PageRouteFromHAROptions options);
    public abstract virtual Task`1<Byte[]> ScreenshotAsync(PageScreenshotOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, string values, PageSelectOptionOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, IElementHandle values, PageSelectOptionOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, IEnumerable`1<string> values, PageSelectOptionOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, SelectOptionValue values, PageSelectOptionOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, IEnumerable`1<IElementHandle> values, PageSelectOptionOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<string>> SelectOptionAsync(string selector, IEnumerable`1<SelectOptionValue> values, PageSelectOptionOptions options);
    public abstract virtual Task SetCheckedAsync(string selector, bool checkedState, PageSetCheckedOptions options);
    public abstract virtual Task SetContentAsync(string html, PageSetContentOptions options);
    public abstract virtual void SetDefaultNavigationTimeout(float timeout);
    public abstract virtual void SetDefaultTimeout(float timeout);
    public abstract virtual Task SetExtraHTTPHeadersAsync(IEnumerable`1<KeyValuePair`2<string, string>> headers);
    public abstract virtual Task SetInputFilesAsync(string selector, string files, PageSetInputFilesOptions options);
    public abstract virtual Task SetInputFilesAsync(string selector, IEnumerable`1<string> files, PageSetInputFilesOptions options);
    public abstract virtual Task SetInputFilesAsync(string selector, FilePayload files, PageSetInputFilesOptions options);
    public abstract virtual Task SetInputFilesAsync(string selector, IEnumerable`1<FilePayload> files, PageSetInputFilesOptions options);
    public abstract virtual Task SetViewportSizeAsync(int width, int height);
    public abstract virtual Task TapAsync(string selector, PageTapOptions options);
    public abstract virtual Task`1<string> TextContentAsync(string selector, PageTextContentOptions options);
    public abstract virtual Task`1<string> TitleAsync();
    public abstract virtual ITouchscreen get_Touchscreen();
    [ObsoleteAttribute]
public abstract virtual Task TypeAsync(string selector, string text, PageTypeOptions options);
    public abstract virtual Task UncheckAsync(string selector, PageUncheckOptions options);
    public abstract virtual Task UnrouteAllAsync(PageUnrouteAllOptions options);
    public abstract virtual Task UnrouteAsync(string url, Action`1<IRoute> handler);
    public abstract virtual Task UnrouteAsync(Regex url, Action`1<IRoute> handler);
    public abstract virtual Task UnrouteAsync(Func`2<string, bool> url, Action`1<IRoute> handler);
    public abstract virtual string get_Url();
    [NullableContextAttribute("2")]
public abstract virtual IVideo get_Video();
    [NullableContextAttribute("2")]
public abstract virtual PageViewportSizeResult get_ViewportSize();
    public abstract virtual Task`1<IConsoleMessage> WaitForConsoleMessageAsync(PageWaitForConsoleMessageOptions options);
    public abstract virtual Task`1<IConsoleMessage> RunAndWaitForConsoleMessageAsync(Func`1<Task> action, PageRunAndWaitForConsoleMessageOptions options);
    public abstract virtual Task`1<IDownload> WaitForDownloadAsync(PageWaitForDownloadOptions options);
    public abstract virtual Task`1<IDownload> RunAndWaitForDownloadAsync(Func`1<Task> action, PageRunAndWaitForDownloadOptions options);
    public abstract virtual Task`1<IFileChooser> WaitForFileChooserAsync(PageWaitForFileChooserOptions options);
    public abstract virtual Task`1<IFileChooser> RunAndWaitForFileChooserAsync(Func`1<Task> action, PageRunAndWaitForFileChooserOptions options);
    public abstract virtual Task`1<IJSHandle> WaitForFunctionAsync(string expression, object arg, PageWaitForFunctionOptions options);
    public abstract virtual Task WaitForLoadStateAsync(Nullable`1<LoadState> state, PageWaitForLoadStateOptions options);
    [NullableContextAttribute("2")]
[ObsoleteAttribute]
public abstract virtual Task`1<IResponse> WaitForNavigationAsync(PageWaitForNavigationOptions options);
    [ObsoleteAttribute]
public abstract virtual Task`1<IResponse> RunAndWaitForNavigationAsync(Func`1<Task> action, PageRunAndWaitForNavigationOptions options);
    public abstract virtual Task`1<IPage> WaitForPopupAsync(PageWaitForPopupOptions options);
    public abstract virtual Task`1<IPage> RunAndWaitForPopupAsync(Func`1<Task> action, PageRunAndWaitForPopupOptions options);
    public abstract virtual Task`1<IRequest> WaitForRequestAsync(string urlOrPredicate, PageWaitForRequestOptions options);
    public abstract virtual Task`1<IRequest> WaitForRequestAsync(Regex urlOrPredicate, PageWaitForRequestOptions options);
    public abstract virtual Task`1<IRequest> WaitForRequestAsync(Func`2<IRequest, bool> urlOrPredicate, PageWaitForRequestOptions options);
    public abstract virtual Task`1<IRequest> RunAndWaitForRequestAsync(Func`1<Task> action, string urlOrPredicate, PageRunAndWaitForRequestOptions options);
    public abstract virtual Task`1<IRequest> RunAndWaitForRequestAsync(Func`1<Task> action, Regex urlOrPredicate, PageRunAndWaitForRequestOptions options);
    public abstract virtual Task`1<IRequest> RunAndWaitForRequestAsync(Func`1<Task> action, Func`2<IRequest, bool> urlOrPredicate, PageRunAndWaitForRequestOptions options);
    public abstract virtual Task`1<IRequest> WaitForRequestFinishedAsync(PageWaitForRequestFinishedOptions options);
    public abstract virtual Task`1<IRequest> RunAndWaitForRequestFinishedAsync(Func`1<Task> action, PageRunAndWaitForRequestFinishedOptions options);
    public abstract virtual Task`1<IResponse> WaitForResponseAsync(string urlOrPredicate, PageWaitForResponseOptions options);
    public abstract virtual Task`1<IResponse> WaitForResponseAsync(Regex urlOrPredicate, PageWaitForResponseOptions options);
    public abstract virtual Task`1<IResponse> WaitForResponseAsync(Func`2<IResponse, bool> urlOrPredicate, PageWaitForResponseOptions options);
    public abstract virtual Task`1<IResponse> RunAndWaitForResponseAsync(Func`1<Task> action, string urlOrPredicate, PageRunAndWaitForResponseOptions options);
    public abstract virtual Task`1<IResponse> RunAndWaitForResponseAsync(Func`1<Task> action, Regex urlOrPredicate, PageRunAndWaitForResponseOptions options);
    public abstract virtual Task`1<IResponse> RunAndWaitForResponseAsync(Func`1<Task> action, Func`2<IResponse, bool> urlOrPredicate, PageRunAndWaitForResponseOptions options);
    public abstract virtual Task`1<IElementHandle> WaitForSelectorAsync(string selector, PageWaitForSelectorOptions options);
    public abstract virtual Task WaitForTimeoutAsync(float timeout);
    public abstract virtual Task WaitForURLAsync(string url, PageWaitForURLOptions options);
    public abstract virtual Task WaitForURLAsync(Regex url, PageWaitForURLOptions options);
    public abstract virtual Task WaitForURLAsync(Func`2<string, bool> url, PageWaitForURLOptions options);
    public abstract virtual Task`1<IWebSocket> WaitForWebSocketAsync(PageWaitForWebSocketOptions options);
    public abstract virtual Task`1<IWebSocket> RunAndWaitForWebSocketAsync(Func`1<Task> action, PageRunAndWaitForWebSocketOptions options);
    public abstract virtual Task`1<IWorker> WaitForWorkerAsync(PageWaitForWorkerOptions options);
    public abstract virtual Task`1<IWorker> RunAndWaitForWorkerAsync(Func`1<Task> action, PageRunAndWaitForWorkerOptions options);
    public abstract virtual IReadOnlyList`1<IWorker> get_Workers();
    public abstract virtual Task`1<Nullable`1<JsonElement>> EvaluateAsync(string expression, object arg);
    public abstract virtual Task`1<Nullable`1<JsonElement>> EvalOnSelectorAsync(string selector, string expression, object arg);
    public abstract virtual Task`1<Nullable`1<JsonElement>> EvalOnSelectorAllAsync(string selector, string expression, object arg);
    public abstract virtual Task ExposeBindingAsync(string name, Action`1<BindingSource> callback);
    public abstract virtual Task ExposeBindingAsync(string name, Action`2<BindingSource, T> callback);
    public abstract virtual Task ExposeBindingAsync(string name, Func`2<BindingSource, TResult> callback);
    public abstract virtual Task ExposeBindingAsync(string name, Func`3<BindingSource, IJSHandle, TResult> callback);
    public abstract virtual Task ExposeBindingAsync(string name, Func`3<BindingSource, T, TResult> callback);
    public abstract virtual Task ExposeBindingAsync(string name, Func`4<BindingSource, T1, T2, TResult> callback);
    [NullableContextAttribute("2")]
public abstract virtual Task ExposeBindingAsync(string name, Func`5<BindingSource, T1, T2, T3, TResult> callback);
    [NullableContextAttribute("2")]
public abstract virtual Task ExposeBindingAsync(string name, Func`6<BindingSource, T1, T2, T3, T4, TResult> callback);
    public abstract virtual Task ExposeFunctionAsync(string name, Action`1<T> callback);
    public abstract virtual Task ExposeFunctionAsync(string name, Func`1<TResult> callback);
    public abstract virtual Task ExposeFunctionAsync(string name, Func`2<T, TResult> callback);
    public abstract virtual Task ExposeFunctionAsync(string name, Func`3<T1, T2, TResult> callback);
    [NullableContextAttribute("2")]
public abstract virtual Task ExposeFunctionAsync(string name, Func`4<T1, T2, T3, TResult> callback);
    [NullableContextAttribute("2")]
public abstract virtual Task ExposeFunctionAsync(string name, Func`5<T1, T2, T3, T4, TResult> callback);
    public abstract virtual Task RouteAsync(string url, Func`2<IRoute, Task> handler, PageRouteOptions options);
    public abstract virtual Task RouteAsync(Regex url, Func`2<IRoute, Task> handler, PageRouteOptions options);
    public abstract virtual Task RouteAsync(Func`2<string, bool> url, Func`2<IRoute, Task> handler, PageRouteOptions options);
    public abstract virtual Task UnrouteAsync(string url, Func`2<IRoute, Task> handler);
    public abstract virtual Task UnrouteAsync(Regex url, Func`2<IRoute, Task> handler);
    public abstract virtual Task UnrouteAsync(Func`2<string, bool> url, Func`2<IRoute, Task> handler);
    public abstract virtual Task AddLocatorHandlerAsync(ILocator locator, Func`1<Task> handler, PageAddLocatorHandlerOptions options);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IPageAssertions {
    public IPageAssertions Not { get; }
    public abstract virtual IPageAssertions get_Not();
    public abstract virtual Task ToHaveTitleAsync(string titleOrRegExp, PageAssertionsToHaveTitleOptions options);
    public abstract virtual Task ToHaveTitleAsync(Regex titleOrRegExp, PageAssertionsToHaveTitleOptions options);
    public abstract virtual Task ToHaveURLAsync(string urlOrRegExp, PageAssertionsToHaveURLOptions options);
    public abstract virtual Task ToHaveURLAsync(Regex urlOrRegExp, PageAssertionsToHaveURLOptions options);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface Microsoft.Playwright.IPlaywright {
    public IBrowserType Chromium { get; }
    public IReadOnlyDictionary`2<string, BrowserNewContextOptions> Devices { get; }
    public IBrowserType Firefox { get; }
    public IAPIRequest APIRequest { get; }
    public ISelectors Selectors { get; }
    public IBrowserType Webkit { get; }
    [NullableAttribute("0")]
public IBrowserType Item { get; }
    public abstract virtual IBrowserType get_Chromium();
    public abstract virtual IReadOnlyDictionary`2<string, BrowserNewContextOptions> get_Devices();
    public abstract virtual IBrowserType get_Firefox();
    public abstract virtual IAPIRequest get_APIRequest();
    public abstract virtual ISelectors get_Selectors();
    public abstract virtual IBrowserType get_Webkit();
    [NullableContextAttribute("0")]
public abstract virtual IBrowserType get_Item(string browserType);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IPlaywrightAssertions {
    public abstract virtual IAPIResponseAssertions Expect(IAPIResponse response);
    public abstract virtual ILocatorAssertions Expect(ILocator locator);
    public abstract virtual IPageAssertions Expect(IPage page);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IRequest {
    [NullableAttribute("2")]
public string Failure { get; }
    public IFrame Frame { get; }
    public Dictionary`2<string, string> Headers { get; }
    public bool IsNavigationRequest { get; }
    public string Method { get; }
    [NullableAttribute("2")]
public string PostData { get; }
    [NullableAttribute("2")]
public Byte[] PostDataBuffer { get; }
    [NullableAttribute("2")]
public IRequest RedirectedFrom { get; }
    [NullableAttribute("2")]
public IRequest RedirectedTo { get; }
    public string ResourceType { get; }
    public RequestTimingResult Timing { get; }
    public string Url { get; }
    public abstract virtual Task`1<Dictionary`2<string, string>> AllHeadersAsync();
    [NullableContextAttribute("2")]
public abstract virtual string get_Failure();
    public abstract virtual IFrame get_Frame();
    public abstract virtual Dictionary`2<string, string> get_Headers();
    public abstract virtual Task`1<IReadOnlyList`1<Header>> HeadersArrayAsync();
    public abstract virtual Task`1<string> HeaderValueAsync(string name);
    public abstract virtual bool get_IsNavigationRequest();
    public abstract virtual string get_Method();
    [NullableContextAttribute("2")]
public abstract virtual string get_PostData();
    [NullableContextAttribute("2")]
public abstract virtual Byte[] get_PostDataBuffer();
    public abstract virtual Nullable`1<JsonElement> PostDataJSON();
    [NullableContextAttribute("2")]
public abstract virtual IRequest get_RedirectedFrom();
    [NullableContextAttribute("2")]
public abstract virtual IRequest get_RedirectedTo();
    public abstract virtual string get_ResourceType();
    public abstract virtual Task`1<IResponse> ResponseAsync();
    public abstract virtual Task`1<RequestSizesResult> SizesAsync();
    public abstract virtual RequestTimingResult get_Timing();
    public abstract virtual string get_Url();
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IResponse {
    public IFrame Frame { get; }
    public bool FromServiceWorker { get; }
    public Dictionary`2<string, string> Headers { get; }
    public bool Ok { get; }
    public IRequest Request { get; }
    public int Status { get; }
    public string StatusText { get; }
    public string Url { get; }
    public abstract virtual Task`1<Dictionary`2<string, string>> AllHeadersAsync();
    public abstract virtual Task`1<Byte[]> BodyAsync();
    public abstract virtual Task`1<string> FinishedAsync();
    public abstract virtual IFrame get_Frame();
    public abstract virtual bool get_FromServiceWorker();
    public abstract virtual Dictionary`2<string, string> get_Headers();
    public abstract virtual Task`1<IReadOnlyList`1<Header>> HeadersArrayAsync();
    public abstract virtual Task`1<string> HeaderValueAsync(string name);
    public abstract virtual Task`1<IReadOnlyList`1<string>> HeaderValuesAsync(string name);
    public abstract virtual Task`1<Nullable`1<JsonElement>> JsonAsync();
    public abstract virtual bool get_Ok();
    public abstract virtual IRequest get_Request();
    public abstract virtual Task`1<ResponseSecurityDetailsResult> SecurityDetailsAsync();
    public abstract virtual Task`1<ResponseServerAddrResult> ServerAddrAsync();
    public abstract virtual int get_Status();
    public abstract virtual string get_StatusText();
    public abstract virtual Task`1<string> TextAsync();
    public abstract virtual string get_Url();
    [NullableContextAttribute("0")]
public abstract virtual Task`1<T> JsonAsync();
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IRoute {
    public IRequest Request { get; }
    public abstract virtual Task AbortAsync(string errorCode);
    public abstract virtual Task ContinueAsync(RouteContinueOptions options);
    public abstract virtual Task FallbackAsync(RouteFallbackOptions options);
    public abstract virtual Task`1<IAPIResponse> FetchAsync(RouteFetchOptions options);
    public abstract virtual Task FulfillAsync(RouteFulfillOptions options);
    public abstract virtual IRequest get_Request();
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.ISelectors {
    public abstract virtual Task RegisterAsync(string name, SelectorsRegisterOptions options);
    public abstract virtual void SetTestIdAttribute(string attributeName);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.ITouchscreen {
    public abstract virtual Task TapAsync(float x, float y);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.ITracing {
    public abstract virtual Task StartAsync(TracingStartOptions options);
    public abstract virtual Task StartChunkAsync(TracingStartChunkOptions options);
    public abstract virtual Task StopAsync(TracingStopOptions options);
    public abstract virtual Task StopChunkAsync(TracingStopChunkOptions options);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IVideo {
    public abstract virtual Task DeleteAsync();
    public abstract virtual Task`1<string> PathAsync();
    public abstract virtual Task SaveAsAsync(string path);
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IWebError {
    [NullableAttribute("2")]
public IPage Page { get; }
    public string Error { get; }
    [NullableContextAttribute("2")]
public abstract virtual IPage get_Page();
    public abstract virtual string get_Error();
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IWebSocket {
    public bool IsClosed { get; }
    public string Url { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Close(EventHandler`1<IWebSocket> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Close(EventHandler`1<IWebSocket> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FrameReceived(EventHandler`1<IWebSocketFrame> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FrameReceived(EventHandler`1<IWebSocketFrame> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FrameSent(EventHandler`1<IWebSocketFrame> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FrameSent(EventHandler`1<IWebSocketFrame> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SocketError(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SocketError(EventHandler`1<string> value);
    public abstract virtual bool get_IsClosed();
    public abstract virtual string get_Url();
}
[NullableContextAttribute("2")]
public interface Microsoft.Playwright.IWebSocketFrame {
    public Byte[] Binary { get; }
    public string Text { get; }
    public abstract virtual Byte[] get_Binary();
    public abstract virtual string get_Text();
}
[NullableContextAttribute("1")]
public interface Microsoft.Playwright.IWorker {
    public string Url { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Close(EventHandler`1<IWorker> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Close(EventHandler`1<IWorker> value);
    public abstract virtual Task`1<T> EvaluateAsync(string expression, object arg);
    public abstract virtual Task`1<IJSHandle> EvaluateHandleAsync(string expression, object arg);
    public abstract virtual string get_Url();
}
public enum Microsoft.Playwright.KeyboardModifier : Enum {
    public int value__;
    [EnumMemberAttribute]
public static KeyboardModifier Alt;
    [EnumMemberAttribute]
public static KeyboardModifier Control;
    [EnumMemberAttribute]
public static KeyboardModifier ControlOrMeta;
    [EnumMemberAttribute]
public static KeyboardModifier Meta;
    [EnumMemberAttribute]
public static KeyboardModifier Shift;
}
public class Microsoft.Playwright.KeyboardPressOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [NullableContextAttribute("1")]
public KeyboardPressOptions(KeyboardPressOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
}
public class Microsoft.Playwright.KeyboardTypeOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [NullableContextAttribute("1")]
public KeyboardTypeOptions(KeyboardTypeOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
}
public enum Microsoft.Playwright.LoadState : Enum {
    public int value__;
    [EnumMemberAttribute]
public static LoadState Load;
    [EnumMemberAttribute]
public static LoadState DOMContentLoaded;
    [EnumMemberAttribute]
public static LoadState NetworkIdle;
}
public class Microsoft.Playwright.LocatorAssertionsToBeAttachedOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Attached>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("attached")]
public Nullable`1<bool> Attached { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToBeAttachedOptions(LocatorAssertionsToBeAttachedOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Attached();
    [CompilerGeneratedAttribute]
public void set_Attached(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorAssertionsToBeCheckedOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Checked>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("checked")]
public Nullable`1<bool> Checked { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToBeCheckedOptions(LocatorAssertionsToBeCheckedOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Checked();
    [CompilerGeneratedAttribute]
public void set_Checked(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorAssertionsToBeDisabledOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToBeDisabledOptions(LocatorAssertionsToBeDisabledOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorAssertionsToBeEditableOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Editable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("editable")]
public Nullable`1<bool> Editable { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToBeEditableOptions(LocatorAssertionsToBeEditableOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Editable();
    [CompilerGeneratedAttribute]
public void set_Editable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorAssertionsToBeEmptyOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToBeEmptyOptions(LocatorAssertionsToBeEmptyOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorAssertionsToBeEnabledOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("enabled")]
public Nullable`1<bool> Enabled { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToBeEnabledOptions(LocatorAssertionsToBeEnabledOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorAssertionsToBeFocusedOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToBeFocusedOptions(LocatorAssertionsToBeFocusedOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorAssertionsToBeHiddenOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToBeHiddenOptions(LocatorAssertionsToBeHiddenOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorAssertionsToBeInViewportOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Ratio>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("ratio")]
public Nullable`1<float> Ratio { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToBeInViewportOptions(LocatorAssertionsToBeInViewportOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Ratio();
    [CompilerGeneratedAttribute]
public void set_Ratio(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorAssertionsToBeVisibleOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Visible>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("visible")]
public Nullable`1<bool> Visible { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToBeVisibleOptions(LocatorAssertionsToBeVisibleOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(Nullable`1<bool> value);
}
public class Microsoft.Playwright.LocatorAssertionsToContainTextOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreCase>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseInnerText>k__BackingField;
    [JsonPropertyNameAttribute("ignoreCase")]
public Nullable`1<bool> IgnoreCase { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("useInnerText")]
public Nullable`1<bool> UseInnerText { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToContainTextOptions(LocatorAssertionsToContainTextOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreCase();
    [CompilerGeneratedAttribute]
public void set_IgnoreCase(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseInnerText();
    [CompilerGeneratedAttribute]
public void set_UseInnerText(Nullable`1<bool> value);
}
public class Microsoft.Playwright.LocatorAssertionsToHaveAccessibleDescriptionOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreCase>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("ignoreCase")]
public Nullable`1<bool> IgnoreCase { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToHaveAccessibleDescriptionOptions(LocatorAssertionsToHaveAccessibleDescriptionOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreCase();
    [CompilerGeneratedAttribute]
public void set_IgnoreCase(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorAssertionsToHaveAccessibleNameOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreCase>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("ignoreCase")]
public Nullable`1<bool> IgnoreCase { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToHaveAccessibleNameOptions(LocatorAssertionsToHaveAccessibleNameOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreCase();
    [CompilerGeneratedAttribute]
public void set_IgnoreCase(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorAssertionsToHaveAttributeOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreCase>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("ignoreCase")]
public Nullable`1<bool> IgnoreCase { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToHaveAttributeOptions(LocatorAssertionsToHaveAttributeOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreCase();
    [CompilerGeneratedAttribute]
public void set_IgnoreCase(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorAssertionsToHaveClassOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToHaveClassOptions(LocatorAssertionsToHaveClassOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorAssertionsToHaveCountOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToHaveCountOptions(LocatorAssertionsToHaveCountOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorAssertionsToHaveCSSOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToHaveCSSOptions(LocatorAssertionsToHaveCSSOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorAssertionsToHaveIdOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToHaveIdOptions(LocatorAssertionsToHaveIdOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorAssertionsToHaveJSPropertyOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToHaveJSPropertyOptions(LocatorAssertionsToHaveJSPropertyOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorAssertionsToHaveRoleOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToHaveRoleOptions(LocatorAssertionsToHaveRoleOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorAssertionsToHaveTextOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreCase>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseInnerText>k__BackingField;
    [JsonPropertyNameAttribute("ignoreCase")]
public Nullable`1<bool> IgnoreCase { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("useInnerText")]
public Nullable`1<bool> UseInnerText { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToHaveTextOptions(LocatorAssertionsToHaveTextOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreCase();
    [CompilerGeneratedAttribute]
public void set_IgnoreCase(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseInnerText();
    [CompilerGeneratedAttribute]
public void set_UseInnerText(Nullable`1<bool> value);
}
public class Microsoft.Playwright.LocatorAssertionsToHaveValueOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToHaveValueOptions(LocatorAssertionsToHaveValueOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorAssertionsToHaveValuesOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorAssertionsToHaveValuesOptions(LocatorAssertionsToHaveValuesOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorBlurOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorBlurOptions(LocatorBlurOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorBoundingBoxOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorBoundingBoxOptions(LocatorBoundingBoxOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorBoundingBoxResult : object {
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Height>k__BackingField;
    [RequiredAttribute]
[JsonPropertyNameAttribute("x")]
public float X { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("y")]
public float Y { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("width")]
public float Width { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("height")]
public float Height { get; public set; }
    [CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public void set_X(float value);
    [CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(float value);
    [CompilerGeneratedAttribute]
public float get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(float value);
    [CompilerGeneratedAttribute]
public float get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(float value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.LocatorCheckOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public LocatorCheckOptions(LocatorCheckOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.LocatorClearOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorClearOptions(LocatorClearOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.LocatorClickOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<MouseButton> <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ClickCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyboardModifier> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("button")]
public Nullable`1<MouseButton> Button { get; public set; }
    [JsonPropertyNameAttribute("clickCount")]
public Nullable`1<int> ClickCount { get; public set; }
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("modifiers")]
public IEnumerable`1<KeyboardModifier> Modifiers { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public LocatorClickOptions(LocatorClickOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<MouseButton> get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(Nullable`1<MouseButton> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ClickCount();
    [CompilerGeneratedAttribute]
public void set_ClickCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyboardModifier> get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(IEnumerable`1<KeyboardModifier> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.LocatorDblClickOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<MouseButton> <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyboardModifier> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("button")]
public Nullable`1<MouseButton> Button { get; public set; }
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("modifiers")]
public IEnumerable`1<KeyboardModifier> Modifiers { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public LocatorDblClickOptions(LocatorDblClickOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<MouseButton> get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(Nullable`1<MouseButton> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyboardModifier> get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(IEnumerable`1<KeyboardModifier> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.LocatorDispatchEventOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorDispatchEventOptions(LocatorDispatchEventOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.LocatorDragToOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private SourcePosition <SourcePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetPosition <TargetPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("sourcePosition")]
public SourcePosition SourcePosition { get; public set; }
    [JsonPropertyNameAttribute("targetPosition")]
public TargetPosition TargetPosition { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public LocatorDragToOptions(LocatorDragToOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public SourcePosition get_SourcePosition();
    [CompilerGeneratedAttribute]
public void set_SourcePosition(SourcePosition value);
    [CompilerGeneratedAttribute]
public TargetPosition get_TargetPosition();
    [CompilerGeneratedAttribute]
public void set_TargetPosition(TargetPosition value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.LocatorElementHandleOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorElementHandleOptions(LocatorElementHandleOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorEvaluateHandleOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorEvaluateHandleOptions(LocatorEvaluateHandleOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorEvaluateOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorEvaluateOptions(LocatorEvaluateOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorFillOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorFillOptions(LocatorFillOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.LocatorFilterOptions : object {
    [CompilerGeneratedAttribute]
private ILocator <Has>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocator <HasNot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasNotText>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HasNotTextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasNotTextString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasText>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HasTextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasTextString>k__BackingField;
    [JsonPropertyNameAttribute("has")]
public ILocator Has { get; public set; }
    [JsonPropertyNameAttribute("hasNot")]
public ILocator HasNot { get; public set; }
    [JsonPropertyNameAttribute("hasNotText")]
public string HasNotText { get; public set; }
    [JsonPropertyNameAttribute("hasNotTextRegex")]
public Regex HasNotTextRegex { get; public set; }
    [JsonPropertyNameAttribute("hasNotTextString")]
public string HasNotTextString { get; public set; }
    [JsonPropertyNameAttribute("hasText")]
public string HasText { get; public set; }
    [JsonPropertyNameAttribute("hasTextRegex")]
public Regex HasTextRegex { get; public set; }
    [JsonPropertyNameAttribute("hasTextString")]
public string HasTextString { get; public set; }
    [NullableContextAttribute("1")]
public LocatorFilterOptions(LocatorFilterOptions clone);
    [CompilerGeneratedAttribute]
public ILocator get_Has();
    [CompilerGeneratedAttribute]
public void set_Has(ILocator value);
    [CompilerGeneratedAttribute]
public ILocator get_HasNot();
    [CompilerGeneratedAttribute]
public void set_HasNot(ILocator value);
    [CompilerGeneratedAttribute]
public string get_HasNotText();
    [CompilerGeneratedAttribute]
public void set_HasNotText(string value);
    [CompilerGeneratedAttribute]
public Regex get_HasNotTextRegex();
    [CompilerGeneratedAttribute]
public void set_HasNotTextRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_HasNotTextString();
    [CompilerGeneratedAttribute]
public void set_HasNotTextString(string value);
    [CompilerGeneratedAttribute]
public string get_HasText();
    [CompilerGeneratedAttribute]
public void set_HasText(string value);
    [CompilerGeneratedAttribute]
public Regex get_HasTextRegex();
    [CompilerGeneratedAttribute]
public void set_HasTextRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_HasTextString();
    [CompilerGeneratedAttribute]
public void set_HasTextString(string value);
}
public class Microsoft.Playwright.LocatorFocusOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorFocusOptions(LocatorFocusOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorGetAttributeOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorGetAttributeOptions(LocatorGetAttributeOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorGetByAltTextOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [NullableContextAttribute("1")]
public LocatorGetByAltTextOptions(LocatorGetByAltTextOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
public class Microsoft.Playwright.LocatorGetByLabelOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [NullableContextAttribute("1")]
public LocatorGetByLabelOptions(LocatorGetByLabelOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
public class Microsoft.Playwright.LocatorGetByPlaceholderOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [NullableContextAttribute("1")]
public LocatorGetByPlaceholderOptions(LocatorGetByPlaceholderOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.LocatorGetByRoleOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Checked>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NameRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Pressed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Selected>k__BackingField;
    [JsonPropertyNameAttribute("checked")]
public Nullable`1<bool> Checked { get; public set; }
    [JsonPropertyNameAttribute("disabled")]
public Nullable`1<bool> Disabled { get; public set; }
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [JsonPropertyNameAttribute("expanded")]
public Nullable`1<bool> Expanded { get; public set; }
    [JsonPropertyNameAttribute("includeHidden")]
public Nullable`1<bool> IncludeHidden { get; public set; }
    [JsonPropertyNameAttribute("level")]
public Nullable`1<int> Level { get; public set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("nameRegex")]
public Regex NameRegex { get; public set; }
    [JsonPropertyNameAttribute("nameString")]
public string NameString { get; public set; }
    [JsonPropertyNameAttribute("pressed")]
public Nullable`1<bool> Pressed { get; public set; }
    [JsonPropertyNameAttribute("selected")]
public Nullable`1<bool> Selected { get; public set; }
    [NullableContextAttribute("1")]
public LocatorGetByRoleOptions(LocatorGetByRoleOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Checked();
    [CompilerGeneratedAttribute]
public void set_Checked(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeHidden();
    [CompilerGeneratedAttribute]
public void set_IncludeHidden(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Regex get_NameRegex();
    [CompilerGeneratedAttribute]
public void set_NameRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_NameString();
    [CompilerGeneratedAttribute]
public void set_NameString(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Pressed();
    [CompilerGeneratedAttribute]
public void set_Pressed(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(Nullable`1<bool> value);
}
public class Microsoft.Playwright.LocatorGetByTextOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [NullableContextAttribute("1")]
public LocatorGetByTextOptions(LocatorGetByTextOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
public class Microsoft.Playwright.LocatorGetByTitleOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [NullableContextAttribute("1")]
public LocatorGetByTitleOptions(LocatorGetByTitleOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.LocatorHoverOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyboardModifier> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("modifiers")]
public IEnumerable`1<KeyboardModifier> Modifiers { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public LocatorHoverOptions(LocatorHoverOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyboardModifier> get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(IEnumerable`1<KeyboardModifier> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.LocatorInnerHTMLOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorInnerHTMLOptions(LocatorInnerHTMLOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorInnerTextOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorInnerTextOptions(LocatorInnerTextOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorInputValueOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorInputValueOptions(LocatorInputValueOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorIsCheckedOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorIsCheckedOptions(LocatorIsCheckedOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorIsDisabledOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorIsDisabledOptions(LocatorIsDisabledOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorIsEditableOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorIsEditableOptions(LocatorIsEditableOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorIsEnabledOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorIsEnabledOptions(LocatorIsEnabledOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorIsHiddenOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
[ObsoleteAttribute]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorIsHiddenOptions(LocatorIsHiddenOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorIsVisibleOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
[ObsoleteAttribute]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorIsVisibleOptions(LocatorIsVisibleOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.LocatorLocatorOptions : object {
    [CompilerGeneratedAttribute]
private ILocator <Has>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocator <HasNot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasNotText>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HasNotTextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasNotTextString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasText>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HasTextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasTextString>k__BackingField;
    [JsonPropertyNameAttribute("has")]
public ILocator Has { get; public set; }
    [JsonPropertyNameAttribute("hasNot")]
public ILocator HasNot { get; public set; }
    [JsonPropertyNameAttribute("hasNotText")]
public string HasNotText { get; public set; }
    [JsonPropertyNameAttribute("hasNotTextRegex")]
public Regex HasNotTextRegex { get; public set; }
    [JsonPropertyNameAttribute("hasNotTextString")]
public string HasNotTextString { get; public set; }
    [JsonPropertyNameAttribute("hasText")]
public string HasText { get; public set; }
    [JsonPropertyNameAttribute("hasTextRegex")]
public Regex HasTextRegex { get; public set; }
    [JsonPropertyNameAttribute("hasTextString")]
public string HasTextString { get; public set; }
    [NullableContextAttribute("1")]
public LocatorLocatorOptions(LocatorLocatorOptions clone);
    [CompilerGeneratedAttribute]
public ILocator get_Has();
    [CompilerGeneratedAttribute]
public void set_Has(ILocator value);
    [CompilerGeneratedAttribute]
public ILocator get_HasNot();
    [CompilerGeneratedAttribute]
public void set_HasNot(ILocator value);
    [CompilerGeneratedAttribute]
public string get_HasNotText();
    [CompilerGeneratedAttribute]
public void set_HasNotText(string value);
    [CompilerGeneratedAttribute]
public Regex get_HasNotTextRegex();
    [CompilerGeneratedAttribute]
public void set_HasNotTextRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_HasNotTextString();
    [CompilerGeneratedAttribute]
public void set_HasNotTextString(string value);
    [CompilerGeneratedAttribute]
public string get_HasText();
    [CompilerGeneratedAttribute]
public void set_HasText(string value);
    [CompilerGeneratedAttribute]
public Regex get_HasTextRegex();
    [CompilerGeneratedAttribute]
public void set_HasTextRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_HasTextString();
    [CompilerGeneratedAttribute]
public void set_HasTextString(string value);
}
public class Microsoft.Playwright.LocatorPressOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorPressOptions(LocatorPressOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorPressSequentiallyOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorPressSequentiallyOptions(LocatorPressSequentiallyOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.LocatorScreenshotOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<ScreenshotAnimations> <Animations>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ScreenshotCaret> <Caret>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<ILocator> <Mask>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaskColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OmitBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Quality>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ScreenshotScale> <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ScreenshotType> <Type>k__BackingField;
    [JsonPropertyNameAttribute("animations")]
public Nullable`1<ScreenshotAnimations> Animations { get; public set; }
    [JsonPropertyNameAttribute("caret")]
public Nullable`1<ScreenshotCaret> Caret { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("mask")]
public IEnumerable`1<ILocator> Mask { get; public set; }
    [JsonPropertyNameAttribute("maskColor")]
public string MaskColor { get; public set; }
    [JsonPropertyNameAttribute("omitBackground")]
public Nullable`1<bool> OmitBackground { get; public set; }
    [JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [JsonPropertyNameAttribute("quality")]
public Nullable`1<int> Quality { get; public set; }
    [JsonPropertyNameAttribute("scale")]
public Nullable`1<ScreenshotScale> Scale { get; public set; }
    [JsonPropertyNameAttribute("style")]
public string Style { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("type")]
public Nullable`1<ScreenshotType> Type { get; public set; }
    [NullableContextAttribute("1")]
public LocatorScreenshotOptions(LocatorScreenshotOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<ScreenshotAnimations> get_Animations();
    [CompilerGeneratedAttribute]
public void set_Animations(Nullable`1<ScreenshotAnimations> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ScreenshotCaret> get_Caret();
    [CompilerGeneratedAttribute]
public void set_Caret(Nullable`1<ScreenshotCaret> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ILocator> get_Mask();
    [CompilerGeneratedAttribute]
public void set_Mask(IEnumerable`1<ILocator> value);
    [CompilerGeneratedAttribute]
public string get_MaskColor();
    [CompilerGeneratedAttribute]
public void set_MaskColor(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OmitBackground();
    [CompilerGeneratedAttribute]
public void set_OmitBackground(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Quality();
    [CompilerGeneratedAttribute]
public void set_Quality(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ScreenshotScale> get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(Nullable`1<ScreenshotScale> value);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ScreenshotType> get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Nullable`1<ScreenshotType> value);
}
public class Microsoft.Playwright.LocatorScrollIntoViewIfNeededOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorScrollIntoViewIfNeededOptions(LocatorScrollIntoViewIfNeededOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorSelectOptionOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorSelectOptionOptions(LocatorSelectOptionOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorSelectTextOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorSelectTextOptions(LocatorSelectTextOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.LocatorSetCheckedOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public LocatorSetCheckedOptions(LocatorSetCheckedOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.LocatorSetInputFilesOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorSetInputFilesOptions(LocatorSetInputFilesOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.LocatorTapOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyboardModifier> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("modifiers")]
public IEnumerable`1<KeyboardModifier> Modifiers { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public LocatorTapOptions(LocatorTapOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyboardModifier> get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(IEnumerable`1<KeyboardModifier> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.LocatorTextContentOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorTextContentOptions(LocatorTextContentOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.LocatorTypeOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorTypeOptions(LocatorTypeOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.LocatorUncheckOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public LocatorUncheckOptions(LocatorUncheckOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.LocatorWaitForOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<WaitForSelectorState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("state")]
public Nullable`1<WaitForSelectorState> State { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public LocatorWaitForOptions(LocatorWaitForOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<WaitForSelectorState> get_State();
    [CompilerGeneratedAttribute]
public void set_State(Nullable`1<WaitForSelectorState> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.Margin : object {
    [CompilerGeneratedAttribute]
private string <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Bottom>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Left>k__BackingField;
    [JsonPropertyNameAttribute("top")]
public string Top { get; public set; }
    [JsonPropertyNameAttribute("right")]
public string Right { get; public set; }
    [JsonPropertyNameAttribute("bottom")]
public string Bottom { get; public set; }
    [JsonPropertyNameAttribute("left")]
public string Left { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(string value);
    [CompilerGeneratedAttribute]
public string get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(string value);
    [CompilerGeneratedAttribute]
public string get_Bottom();
    [CompilerGeneratedAttribute]
public void set_Bottom(string value);
    [CompilerGeneratedAttribute]
public string get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(string value);
}
public enum Microsoft.Playwright.Media : Enum {
    public int value__;
    [EnumMemberAttribute]
public static Media Screen;
    [EnumMemberAttribute]
public static Media Print;
    [EnumMemberAttribute]
public static Media Null;
}
public enum Microsoft.Playwright.MouseButton : Enum {
    public int value__;
    [EnumMemberAttribute]
public static MouseButton Left;
    [EnumMemberAttribute]
public static MouseButton Right;
    [EnumMemberAttribute]
public static MouseButton Middle;
}
public class Microsoft.Playwright.MouseClickOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<MouseButton> <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ClickCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [JsonPropertyNameAttribute("button")]
public Nullable`1<MouseButton> Button { get; public set; }
    [JsonPropertyNameAttribute("clickCount")]
public Nullable`1<int> ClickCount { get; public set; }
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [NullableContextAttribute("1")]
public MouseClickOptions(MouseClickOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<MouseButton> get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(Nullable`1<MouseButton> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ClickCount();
    [CompilerGeneratedAttribute]
public void set_ClickCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
}
public class Microsoft.Playwright.MouseDblClickOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<MouseButton> <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [JsonPropertyNameAttribute("button")]
public Nullable`1<MouseButton> Button { get; public set; }
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [NullableContextAttribute("1")]
public MouseDblClickOptions(MouseDblClickOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<MouseButton> get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(Nullable`1<MouseButton> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
}
public class Microsoft.Playwright.MouseDownOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<MouseButton> <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ClickCount>k__BackingField;
    [JsonPropertyNameAttribute("button")]
public Nullable`1<MouseButton> Button { get; public set; }
    [JsonPropertyNameAttribute("clickCount")]
public Nullable`1<int> ClickCount { get; public set; }
    [NullableContextAttribute("1")]
public MouseDownOptions(MouseDownOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<MouseButton> get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(Nullable`1<MouseButton> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ClickCount();
    [CompilerGeneratedAttribute]
public void set_ClickCount(Nullable`1<int> value);
}
public class Microsoft.Playwright.MouseMoveOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Steps>k__BackingField;
    [JsonPropertyNameAttribute("steps")]
public Nullable`1<int> Steps { get; public set; }
    [NullableContextAttribute("1")]
public MouseMoveOptions(MouseMoveOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Steps();
    [CompilerGeneratedAttribute]
public void set_Steps(Nullable`1<int> value);
}
public class Microsoft.Playwright.MouseUpOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<MouseButton> <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ClickCount>k__BackingField;
    [JsonPropertyNameAttribute("button")]
public Nullable`1<MouseButton> Button { get; public set; }
    [JsonPropertyNameAttribute("clickCount")]
public Nullable`1<int> ClickCount { get; public set; }
    [NullableContextAttribute("1")]
public MouseUpOptions(MouseUpOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<MouseButton> get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(Nullable`1<MouseButton> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ClickCount();
    [CompilerGeneratedAttribute]
public void set_ClickCount(Nullable`1<int> value);
}
public class Microsoft.Playwright.PageAddLocatorHandlerOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Times>k__BackingField;
    [JsonPropertyNameAttribute("noWaitAfter")]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("times")]
public Nullable`1<int> Times { get; public set; }
    [NullableContextAttribute("1")]
public PageAddLocatorHandlerOptions(PageAddLocatorHandlerOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Times();
    [CompilerGeneratedAttribute]
public void set_Times(Nullable`1<int> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.PageAddScriptTagOptions : object {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [JsonPropertyNameAttribute("content")]
public string Content { get; public set; }
    [JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [JsonPropertyNameAttribute("type")]
public string Type { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [NullableContextAttribute("1")]
public PageAddScriptTagOptions(PageAddScriptTagOptions clone);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.PageAddStyleTagOptions : object {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [JsonPropertyNameAttribute("content")]
public string Content { get; public set; }
    [JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [NullableContextAttribute("1")]
public PageAddStyleTagOptions(PageAddStyleTagOptions clone);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
public class Microsoft.Playwright.PageAssertionsToHaveTitleOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageAssertionsToHaveTitleOptions(PageAssertionsToHaveTitleOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageAssertionsToHaveURLOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreCase>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("ignoreCase")]
public Nullable`1<bool> IgnoreCase { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageAssertionsToHaveURLOptions(PageAssertionsToHaveURLOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreCase();
    [CompilerGeneratedAttribute]
public void set_IgnoreCase(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.PageCheckOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public PageCheckOptions(PageCheckOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.PageClickOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<MouseButton> <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ClickCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyboardModifier> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("button")]
public Nullable`1<MouseButton> Button { get; public set; }
    [JsonPropertyNameAttribute("clickCount")]
public Nullable`1<int> ClickCount { get; public set; }
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("modifiers")]
public IEnumerable`1<KeyboardModifier> Modifiers { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public PageClickOptions(PageClickOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<MouseButton> get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(Nullable`1<MouseButton> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ClickCount();
    [CompilerGeneratedAttribute]
public void set_ClickCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyboardModifier> get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(IEnumerable`1<KeyboardModifier> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.PageCloseOptions : object {
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RunBeforeUnload>k__BackingField;
    [JsonPropertyNameAttribute("reason")]
public string Reason { get; public set; }
    [JsonPropertyNameAttribute("runBeforeUnload")]
public Nullable`1<bool> RunBeforeUnload { get; public set; }
    [NullableContextAttribute("1")]
public PageCloseOptions(PageCloseOptions clone);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RunBeforeUnload();
    [CompilerGeneratedAttribute]
public void set_RunBeforeUnload(Nullable`1<bool> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.PageDblClickOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<MouseButton> <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyboardModifier> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("button")]
public Nullable`1<MouseButton> Button { get; public set; }
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("modifiers")]
public IEnumerable`1<KeyboardModifier> Modifiers { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public PageDblClickOptions(PageDblClickOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<MouseButton> get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(Nullable`1<MouseButton> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyboardModifier> get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(IEnumerable`1<KeyboardModifier> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.PageDispatchEventOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageDispatchEventOptions(PageDispatchEventOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.PageDragAndDropOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private SourcePosition <SourcePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetPosition <TargetPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("sourcePosition")]
public SourcePosition SourcePosition { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("targetPosition")]
public TargetPosition TargetPosition { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public PageDragAndDropOptions(PageDragAndDropOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public SourcePosition get_SourcePosition();
    [CompilerGeneratedAttribute]
public void set_SourcePosition(SourcePosition value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public TargetPosition get_TargetPosition();
    [CompilerGeneratedAttribute]
public void set_TargetPosition(TargetPosition value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.PageEmulateMediaOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<ColorScheme> <ColorScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ForcedColors> <ForcedColors>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Media> <Media>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReducedMotion> <ReducedMotion>k__BackingField;
    [JsonPropertyNameAttribute("colorScheme")]
public Nullable`1<ColorScheme> ColorScheme { get; public set; }
    [JsonPropertyNameAttribute("forcedColors")]
public Nullable`1<ForcedColors> ForcedColors { get; public set; }
    [JsonPropertyNameAttribute("media")]
public Nullable`1<Media> Media { get; public set; }
    [JsonPropertyNameAttribute("reducedMotion")]
public Nullable`1<ReducedMotion> ReducedMotion { get; public set; }
    [NullableContextAttribute("1")]
public PageEmulateMediaOptions(PageEmulateMediaOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<ColorScheme> get_ColorScheme();
    [CompilerGeneratedAttribute]
public void set_ColorScheme(Nullable`1<ColorScheme> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ForcedColors> get_ForcedColors();
    [CompilerGeneratedAttribute]
public void set_ForcedColors(Nullable`1<ForcedColors> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Media> get_Media();
    [CompilerGeneratedAttribute]
public void set_Media(Nullable`1<Media> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReducedMotion> get_ReducedMotion();
    [CompilerGeneratedAttribute]
public void set_ReducedMotion(Nullable`1<ReducedMotion> value);
}
public class Microsoft.Playwright.PageEvalOnSelectorOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [NullableContextAttribute("1")]
public PageEvalOnSelectorOptions(PageEvalOnSelectorOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
}
public class Microsoft.Playwright.PageExposeBindingOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Handle>k__BackingField;
    [JsonPropertyNameAttribute("handle")]
[ObsoleteAttribute]
public Nullable`1<bool> Handle { get; public set; }
    [NullableContextAttribute("1")]
public PageExposeBindingOptions(PageExposeBindingOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Handle();
    [CompilerGeneratedAttribute]
public void set_Handle(Nullable`1<bool> value);
}
public class Microsoft.Playwright.PageFillOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageFillOptions(PageFillOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageFocusOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageFocusOptions(PageFocusOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageGetAttributeOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageGetAttributeOptions(PageGetAttributeOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageGetByAltTextOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [NullableContextAttribute("1")]
public PageGetByAltTextOptions(PageGetByAltTextOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
public class Microsoft.Playwright.PageGetByLabelOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [NullableContextAttribute("1")]
public PageGetByLabelOptions(PageGetByLabelOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
public class Microsoft.Playwright.PageGetByPlaceholderOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [NullableContextAttribute("1")]
public PageGetByPlaceholderOptions(PageGetByPlaceholderOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.PageGetByRoleOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Checked>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NameRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Pressed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Selected>k__BackingField;
    [JsonPropertyNameAttribute("checked")]
public Nullable`1<bool> Checked { get; public set; }
    [JsonPropertyNameAttribute("disabled")]
public Nullable`1<bool> Disabled { get; public set; }
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [JsonPropertyNameAttribute("expanded")]
public Nullable`1<bool> Expanded { get; public set; }
    [JsonPropertyNameAttribute("includeHidden")]
public Nullable`1<bool> IncludeHidden { get; public set; }
    [JsonPropertyNameAttribute("level")]
public Nullable`1<int> Level { get; public set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("nameRegex")]
public Regex NameRegex { get; public set; }
    [JsonPropertyNameAttribute("nameString")]
public string NameString { get; public set; }
    [JsonPropertyNameAttribute("pressed")]
public Nullable`1<bool> Pressed { get; public set; }
    [JsonPropertyNameAttribute("selected")]
public Nullable`1<bool> Selected { get; public set; }
    [NullableContextAttribute("1")]
public PageGetByRoleOptions(PageGetByRoleOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Checked();
    [CompilerGeneratedAttribute]
public void set_Checked(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeHidden();
    [CompilerGeneratedAttribute]
public void set_IncludeHidden(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Regex get_NameRegex();
    [CompilerGeneratedAttribute]
public void set_NameRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_NameString();
    [CompilerGeneratedAttribute]
public void set_NameString(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Pressed();
    [CompilerGeneratedAttribute]
public void set_Pressed(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(Nullable`1<bool> value);
}
public class Microsoft.Playwright.PageGetByTextOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [NullableContextAttribute("1")]
public PageGetByTextOptions(PageGetByTextOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
public class Microsoft.Playwright.PageGetByTitleOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Exact>k__BackingField;
    [JsonPropertyNameAttribute("exact")]
public Nullable`1<bool> Exact { get; public set; }
    [NullableContextAttribute("1")]
public PageGetByTitleOptions(PageGetByTitleOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(Nullable`1<bool> value);
}
public class Microsoft.Playwright.PageGoBackOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WaitUntilState> <WaitUntil>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("waitUntil")]
public Nullable`1<WaitUntilState> WaitUntil { get; public set; }
    [NullableContextAttribute("1")]
public PageGoBackOptions(PageGoBackOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<WaitUntilState> get_WaitUntil();
    [CompilerGeneratedAttribute]
public void set_WaitUntil(Nullable`1<WaitUntilState> value);
}
public class Microsoft.Playwright.PageGoForwardOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WaitUntilState> <WaitUntil>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("waitUntil")]
public Nullable`1<WaitUntilState> WaitUntil { get; public set; }
    [NullableContextAttribute("1")]
public PageGoForwardOptions(PageGoForwardOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<WaitUntilState> get_WaitUntil();
    [CompilerGeneratedAttribute]
public void set_WaitUntil(Nullable`1<WaitUntilState> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.PageGotoOptions : object {
    [CompilerGeneratedAttribute]
private string <Referer>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WaitUntilState> <WaitUntil>k__BackingField;
    [JsonPropertyNameAttribute("referer")]
public string Referer { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("waitUntil")]
public Nullable`1<WaitUntilState> WaitUntil { get; public set; }
    [NullableContextAttribute("1")]
public PageGotoOptions(PageGotoOptions clone);
    [CompilerGeneratedAttribute]
public string get_Referer();
    [CompilerGeneratedAttribute]
public void set_Referer(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<WaitUntilState> get_WaitUntil();
    [CompilerGeneratedAttribute]
public void set_WaitUntil(Nullable`1<WaitUntilState> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.PageHoverOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyboardModifier> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("modifiers")]
public IEnumerable`1<KeyboardModifier> Modifiers { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public PageHoverOptions(PageHoverOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyboardModifier> get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(IEnumerable`1<KeyboardModifier> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.PageInnerHTMLOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageInnerHTMLOptions(PageInnerHTMLOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageInnerTextOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageInnerTextOptions(PageInnerTextOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageInputValueOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageInputValueOptions(PageInputValueOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageIsCheckedOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageIsCheckedOptions(PageIsCheckedOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageIsDisabledOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageIsDisabledOptions(PageIsDisabledOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageIsEditableOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageIsEditableOptions(PageIsEditableOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageIsEnabledOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageIsEnabledOptions(PageIsEnabledOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageIsHiddenOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
[ObsoleteAttribute]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageIsHiddenOptions(PageIsHiddenOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageIsVisibleOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
[ObsoleteAttribute]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageIsVisibleOptions(PageIsVisibleOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.PageLocatorOptions : object {
    [CompilerGeneratedAttribute]
private ILocator <Has>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocator <HasNot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasNotText>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HasNotTextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasNotTextString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasText>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HasTextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasTextString>k__BackingField;
    [JsonPropertyNameAttribute("has")]
public ILocator Has { get; public set; }
    [JsonPropertyNameAttribute("hasNot")]
public ILocator HasNot { get; public set; }
    [JsonPropertyNameAttribute("hasNotText")]
public string HasNotText { get; public set; }
    [JsonPropertyNameAttribute("hasNotTextRegex")]
public Regex HasNotTextRegex { get; public set; }
    [JsonPropertyNameAttribute("hasNotTextString")]
public string HasNotTextString { get; public set; }
    [JsonPropertyNameAttribute("hasText")]
public string HasText { get; public set; }
    [JsonPropertyNameAttribute("hasTextRegex")]
public Regex HasTextRegex { get; public set; }
    [JsonPropertyNameAttribute("hasTextString")]
public string HasTextString { get; public set; }
    [NullableContextAttribute("1")]
public PageLocatorOptions(PageLocatorOptions clone);
    [CompilerGeneratedAttribute]
public ILocator get_Has();
    [CompilerGeneratedAttribute]
public void set_Has(ILocator value);
    [CompilerGeneratedAttribute]
public ILocator get_HasNot();
    [CompilerGeneratedAttribute]
public void set_HasNot(ILocator value);
    [CompilerGeneratedAttribute]
public string get_HasNotText();
    [CompilerGeneratedAttribute]
public void set_HasNotText(string value);
    [CompilerGeneratedAttribute]
public Regex get_HasNotTextRegex();
    [CompilerGeneratedAttribute]
public void set_HasNotTextRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_HasNotTextString();
    [CompilerGeneratedAttribute]
public void set_HasNotTextString(string value);
    [CompilerGeneratedAttribute]
public string get_HasText();
    [CompilerGeneratedAttribute]
public void set_HasText(string value);
    [CompilerGeneratedAttribute]
public Regex get_HasTextRegex();
    [CompilerGeneratedAttribute]
public void set_HasTextRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_HasTextString();
    [CompilerGeneratedAttribute]
public void set_HasTextString(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.PagePdfOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisplayHeaderFooter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FooterTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Landscape>k__BackingField;
    [CompilerGeneratedAttribute]
private Margin <Margin>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Outline>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PreferCSSPageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PrintBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Tagged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Width>k__BackingField;
    [JsonPropertyNameAttribute("displayHeaderFooter")]
public Nullable`1<bool> DisplayHeaderFooter { get; public set; }
    [JsonPropertyNameAttribute("footerTemplate")]
public string FooterTemplate { get; public set; }
    [JsonPropertyNameAttribute("format")]
public string Format { get; public set; }
    [JsonPropertyNameAttribute("headerTemplate")]
public string HeaderTemplate { get; public set; }
    [JsonPropertyNameAttribute("height")]
public string Height { get; public set; }
    [JsonPropertyNameAttribute("landscape")]
public Nullable`1<bool> Landscape { get; public set; }
    [JsonPropertyNameAttribute("margin")]
public Margin Margin { get; public set; }
    [JsonPropertyNameAttribute("outline")]
public Nullable`1<bool> Outline { get; public set; }
    [JsonPropertyNameAttribute("pageRanges")]
public string PageRanges { get; public set; }
    [JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [JsonPropertyNameAttribute("preferCSSPageSize")]
public Nullable`1<bool> PreferCSSPageSize { get; public set; }
    [JsonPropertyNameAttribute("printBackground")]
public Nullable`1<bool> PrintBackground { get; public set; }
    [JsonPropertyNameAttribute("scale")]
public Nullable`1<float> Scale { get; public set; }
    [JsonPropertyNameAttribute("tagged")]
public Nullable`1<bool> Tagged { get; public set; }
    [JsonPropertyNameAttribute("width")]
public string Width { get; public set; }
    [NullableContextAttribute("1")]
public PagePdfOptions(PagePdfOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisplayHeaderFooter();
    [CompilerGeneratedAttribute]
public void set_DisplayHeaderFooter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_FooterTemplate();
    [CompilerGeneratedAttribute]
public void set_FooterTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public string get_HeaderTemplate();
    [CompilerGeneratedAttribute]
public void set_HeaderTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Landscape();
    [CompilerGeneratedAttribute]
public void set_Landscape(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Margin get_Margin();
    [CompilerGeneratedAttribute]
public void set_Margin(Margin value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Outline();
    [CompilerGeneratedAttribute]
public void set_Outline(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_PageRanges();
    [CompilerGeneratedAttribute]
public void set_PageRanges(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PreferCSSPageSize();
    [CompilerGeneratedAttribute]
public void set_PreferCSSPageSize(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PrintBackground();
    [CompilerGeneratedAttribute]
public void set_PrintBackground(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Tagged();
    [CompilerGeneratedAttribute]
public void set_Tagged(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(string value);
}
public class Microsoft.Playwright.PagePressOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PagePressOptions(PagePressOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageQuerySelectorOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [NullableContextAttribute("1")]
public PageQuerySelectorOptions(PageQuerySelectorOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
}
public class Microsoft.Playwright.PageReloadOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WaitUntilState> <WaitUntil>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("waitUntil")]
public Nullable`1<WaitUntilState> WaitUntil { get; public set; }
    [NullableContextAttribute("1")]
public PageReloadOptions(PageReloadOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<WaitUntilState> get_WaitUntil();
    [CompilerGeneratedAttribute]
public void set_WaitUntil(Nullable`1<WaitUntilState> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.PageRouteFromHAROptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<HarNotFound> <NotFound>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Update>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RouteFromHarUpdateContentPolicy> <UpdateContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<HarMode> <UpdateMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UrlRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlString>k__BackingField;
    [JsonPropertyNameAttribute("notFound")]
public Nullable`1<HarNotFound> NotFound { get; public set; }
    [JsonPropertyNameAttribute("update")]
public Nullable`1<bool> Update { get; public set; }
    [JsonPropertyNameAttribute("updateContent")]
public Nullable`1<RouteFromHarUpdateContentPolicy> UpdateContent { get; public set; }
    [JsonPropertyNameAttribute("updateMode")]
public Nullable`1<HarMode> UpdateMode { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [JsonPropertyNameAttribute("urlRegex")]
public Regex UrlRegex { get; public set; }
    [JsonPropertyNameAttribute("urlString")]
public string UrlString { get; public set; }
    [NullableContextAttribute("1")]
public PageRouteFromHAROptions(PageRouteFromHAROptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<HarNotFound> get_NotFound();
    [CompilerGeneratedAttribute]
public void set_NotFound(Nullable`1<HarNotFound> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Update();
    [CompilerGeneratedAttribute]
public void set_Update(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<RouteFromHarUpdateContentPolicy> get_UpdateContent();
    [CompilerGeneratedAttribute]
public void set_UpdateContent(Nullable`1<RouteFromHarUpdateContentPolicy> value);
    [CompilerGeneratedAttribute]
public Nullable`1<HarMode> get_UpdateMode();
    [CompilerGeneratedAttribute]
public void set_UpdateMode(Nullable`1<HarMode> value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public Regex get_UrlRegex();
    [CompilerGeneratedAttribute]
public void set_UrlRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_UrlString();
    [CompilerGeneratedAttribute]
public void set_UrlString(string value);
}
public class Microsoft.Playwright.PageRouteOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Times>k__BackingField;
    [JsonPropertyNameAttribute("times")]
public Nullable`1<int> Times { get; public set; }
    [NullableContextAttribute("1")]
public PageRouteOptions(PageRouteOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Times();
    [CompilerGeneratedAttribute]
public void set_Times(Nullable`1<int> value);
}
public class Microsoft.Playwright.PageRunAndWaitForConsoleMessageOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IConsoleMessage, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("predicate")]
public Func`2<IConsoleMessage, bool> Predicate { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageRunAndWaitForConsoleMessageOptions(PageRunAndWaitForConsoleMessageOptions clone);
    [CompilerGeneratedAttribute]
public Func`2<IConsoleMessage, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<IConsoleMessage, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageRunAndWaitForDownloadOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IDownload, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("predicate")]
public Func`2<IDownload, bool> Predicate { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageRunAndWaitForDownloadOptions(PageRunAndWaitForDownloadOptions clone);
    [CompilerGeneratedAttribute]
public Func`2<IDownload, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<IDownload, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageRunAndWaitForFileChooserOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IFileChooser, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("predicate")]
public Func`2<IFileChooser, bool> Predicate { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageRunAndWaitForFileChooserOptions(PageRunAndWaitForFileChooserOptions clone);
    [CompilerGeneratedAttribute]
public Func`2<IFileChooser, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<IFileChooser, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.PageRunAndWaitForNavigationOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, bool> <UrlFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UrlRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WaitUntilState> <WaitUntil>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("urlFunc")]
public Func`2<string, bool> UrlFunc { get; public set; }
    [JsonPropertyNameAttribute("urlRegex")]
public Regex UrlRegex { get; public set; }
    [JsonPropertyNameAttribute("urlString")]
public string UrlString { get; public set; }
    [JsonPropertyNameAttribute("waitUntil")]
public Nullable`1<WaitUntilState> WaitUntil { get; public set; }
    [NullableContextAttribute("1")]
public PageRunAndWaitForNavigationOptions(PageRunAndWaitForNavigationOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public Func`2<string, bool> get_UrlFunc();
    [CompilerGeneratedAttribute]
public void set_UrlFunc(Func`2<string, bool> value);
    [CompilerGeneratedAttribute]
public Regex get_UrlRegex();
    [CompilerGeneratedAttribute]
public void set_UrlRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_UrlString();
    [CompilerGeneratedAttribute]
public void set_UrlString(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<WaitUntilState> get_WaitUntil();
    [CompilerGeneratedAttribute]
public void set_WaitUntil(Nullable`1<WaitUntilState> value);
}
public class Microsoft.Playwright.PageRunAndWaitForPopupOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IPage, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("predicate")]
public Func`2<IPage, bool> Predicate { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageRunAndWaitForPopupOptions(PageRunAndWaitForPopupOptions clone);
    [CompilerGeneratedAttribute]
public Func`2<IPage, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<IPage, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageRunAndWaitForRequestFinishedOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IRequest, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("predicate")]
public Func`2<IRequest, bool> Predicate { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageRunAndWaitForRequestFinishedOptions(PageRunAndWaitForRequestFinishedOptions clone);
    [CompilerGeneratedAttribute]
public Func`2<IRequest, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<IRequest, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageRunAndWaitForRequestOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageRunAndWaitForRequestOptions(PageRunAndWaitForRequestOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageRunAndWaitForResponseOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageRunAndWaitForResponseOptions(PageRunAndWaitForResponseOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageRunAndWaitForWebSocketOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IWebSocket, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("predicate")]
public Func`2<IWebSocket, bool> Predicate { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageRunAndWaitForWebSocketOptions(PageRunAndWaitForWebSocketOptions clone);
    [CompilerGeneratedAttribute]
public Func`2<IWebSocket, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<IWebSocket, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageRunAndWaitForWorkerOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IWorker, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("predicate")]
public Func`2<IWorker, bool> Predicate { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageRunAndWaitForWorkerOptions(PageRunAndWaitForWorkerOptions clone);
    [CompilerGeneratedAttribute]
public Func`2<IWorker, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<IWorker, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.PageScreenshotOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<ScreenshotAnimations> <Animations>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ScreenshotCaret> <Caret>k__BackingField;
    [CompilerGeneratedAttribute]
private Clip <Clip>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FullPage>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<ILocator> <Mask>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaskColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OmitBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Quality>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ScreenshotScale> <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ScreenshotType> <Type>k__BackingField;
    [JsonPropertyNameAttribute("animations")]
public Nullable`1<ScreenshotAnimations> Animations { get; public set; }
    [JsonPropertyNameAttribute("caret")]
public Nullable`1<ScreenshotCaret> Caret { get; public set; }
    [JsonPropertyNameAttribute("clip")]
public Clip Clip { get; public set; }
    [JsonPropertyNameAttribute("fullPage")]
public Nullable`1<bool> FullPage { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("mask")]
public IEnumerable`1<ILocator> Mask { get; public set; }
    [JsonPropertyNameAttribute("maskColor")]
public string MaskColor { get; public set; }
    [JsonPropertyNameAttribute("omitBackground")]
public Nullable`1<bool> OmitBackground { get; public set; }
    [JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [JsonPropertyNameAttribute("quality")]
public Nullable`1<int> Quality { get; public set; }
    [JsonPropertyNameAttribute("scale")]
public Nullable`1<ScreenshotScale> Scale { get; public set; }
    [JsonPropertyNameAttribute("style")]
public string Style { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("type")]
public Nullable`1<ScreenshotType> Type { get; public set; }
    [NullableContextAttribute("1")]
public PageScreenshotOptions(PageScreenshotOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<ScreenshotAnimations> get_Animations();
    [CompilerGeneratedAttribute]
public void set_Animations(Nullable`1<ScreenshotAnimations> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ScreenshotCaret> get_Caret();
    [CompilerGeneratedAttribute]
public void set_Caret(Nullable`1<ScreenshotCaret> value);
    [CompilerGeneratedAttribute]
public Clip get_Clip();
    [CompilerGeneratedAttribute]
public void set_Clip(Clip value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FullPage();
    [CompilerGeneratedAttribute]
public void set_FullPage(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ILocator> get_Mask();
    [CompilerGeneratedAttribute]
public void set_Mask(IEnumerable`1<ILocator> value);
    [CompilerGeneratedAttribute]
public string get_MaskColor();
    [CompilerGeneratedAttribute]
public void set_MaskColor(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OmitBackground();
    [CompilerGeneratedAttribute]
public void set_OmitBackground(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Quality();
    [CompilerGeneratedAttribute]
public void set_Quality(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ScreenshotScale> get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(Nullable`1<ScreenshotScale> value);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ScreenshotType> get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Nullable`1<ScreenshotType> value);
}
public class Microsoft.Playwright.PageSelectOptionOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageSelectOptionOptions(PageSelectOptionOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.PageSetCheckedOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public PageSetCheckedOptions(PageSetCheckedOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.PageSetContentOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WaitUntilState> <WaitUntil>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("waitUntil")]
public Nullable`1<WaitUntilState> WaitUntil { get; public set; }
    [NullableContextAttribute("1")]
public PageSetContentOptions(PageSetContentOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<WaitUntilState> get_WaitUntil();
    [CompilerGeneratedAttribute]
public void set_WaitUntil(Nullable`1<WaitUntilState> value);
}
public class Microsoft.Playwright.PageSetInputFilesOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageSetInputFilesOptions(PageSetInputFilesOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.PageTapOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyboardModifier> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("modifiers")]
public IEnumerable`1<KeyboardModifier> Modifiers { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public PageTapOptions(PageTapOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyboardModifier> get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(IEnumerable`1<KeyboardModifier> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.PageTextContentOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageTextContentOptions(PageTextContentOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageTypeOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("delay")]
public Nullable`1<float> Delay { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageTypeOptions(PageTypeOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.PageUncheckOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoWaitAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Trial>k__BackingField;
    [JsonPropertyNameAttribute("force")]
public Nullable`1<bool> Force { get; public set; }
    [JsonPropertyNameAttribute("noWaitAfter")]
[ObsoleteAttribute]
public Nullable`1<bool> NoWaitAfter { get; public set; }
    [JsonPropertyNameAttribute("position")]
public Position Position { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("trial")]
public Nullable`1<bool> Trial { get; public set; }
    [NullableContextAttribute("1")]
public PageUncheckOptions(PageUncheckOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoWaitAfter();
    [CompilerGeneratedAttribute]
public void set_NoWaitAfter(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(Nullable`1<bool> value);
}
public class Microsoft.Playwright.PageUnrouteAllOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<UnrouteBehavior> <Behavior>k__BackingField;
    [JsonPropertyNameAttribute("behavior")]
public Nullable`1<UnrouteBehavior> Behavior { get; public set; }
    [NullableContextAttribute("1")]
public PageUnrouteAllOptions(PageUnrouteAllOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<UnrouteBehavior> get_Behavior();
    [CompilerGeneratedAttribute]
public void set_Behavior(Nullable`1<UnrouteBehavior> value);
}
public class Microsoft.Playwright.PageViewportSizeResult : object {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [RequiredAttribute]
[JsonPropertyNameAttribute("width")]
public int Width { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("height")]
public int Height { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
}
public class Microsoft.Playwright.PageWaitForConsoleMessageOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IConsoleMessage, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("predicate")]
public Func`2<IConsoleMessage, bool> Predicate { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageWaitForConsoleMessageOptions(PageWaitForConsoleMessageOptions clone);
    [CompilerGeneratedAttribute]
public Func`2<IConsoleMessage, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<IConsoleMessage, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageWaitForDownloadOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IDownload, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("predicate")]
public Func`2<IDownload, bool> Predicate { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageWaitForDownloadOptions(PageWaitForDownloadOptions clone);
    [CompilerGeneratedAttribute]
public Func`2<IDownload, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<IDownload, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageWaitForFileChooserOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IFileChooser, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("predicate")]
public Func`2<IFileChooser, bool> Predicate { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageWaitForFileChooserOptions(PageWaitForFileChooserOptions clone);
    [CompilerGeneratedAttribute]
public Func`2<IFileChooser, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<IFileChooser, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageWaitForFunctionOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <PollingInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("pollingInterval")]
public Nullable`1<float> PollingInterval { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageWaitForFunctionOptions(PageWaitForFunctionOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_PollingInterval();
    [CompilerGeneratedAttribute]
public void set_PollingInterval(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageWaitForLoadStateOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageWaitForLoadStateOptions(PageWaitForLoadStateOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.PageWaitForNavigationOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, bool> <UrlFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UrlRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WaitUntilState> <WaitUntil>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("urlFunc")]
public Func`2<string, bool> UrlFunc { get; public set; }
    [JsonPropertyNameAttribute("urlRegex")]
public Regex UrlRegex { get; public set; }
    [JsonPropertyNameAttribute("urlString")]
public string UrlString { get; public set; }
    [JsonPropertyNameAttribute("waitUntil")]
public Nullable`1<WaitUntilState> WaitUntil { get; public set; }
    [NullableContextAttribute("1")]
public PageWaitForNavigationOptions(PageWaitForNavigationOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public Func`2<string, bool> get_UrlFunc();
    [CompilerGeneratedAttribute]
public void set_UrlFunc(Func`2<string, bool> value);
    [CompilerGeneratedAttribute]
public Regex get_UrlRegex();
    [CompilerGeneratedAttribute]
public void set_UrlRegex(Regex value);
    [CompilerGeneratedAttribute]
public string get_UrlString();
    [CompilerGeneratedAttribute]
public void set_UrlString(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<WaitUntilState> get_WaitUntil();
    [CompilerGeneratedAttribute]
public void set_WaitUntil(Nullable`1<WaitUntilState> value);
}
public class Microsoft.Playwright.PageWaitForPopupOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IPage, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("predicate")]
public Func`2<IPage, bool> Predicate { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageWaitForPopupOptions(PageWaitForPopupOptions clone);
    [CompilerGeneratedAttribute]
public Func`2<IPage, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<IPage, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageWaitForRequestFinishedOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IRequest, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("predicate")]
public Func`2<IRequest, bool> Predicate { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageWaitForRequestFinishedOptions(PageWaitForRequestFinishedOptions clone);
    [CompilerGeneratedAttribute]
public Func`2<IRequest, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<IRequest, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageWaitForRequestOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageWaitForRequestOptions(PageWaitForRequestOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageWaitForResponseOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageWaitForResponseOptions(PageWaitForResponseOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageWaitForSelectorOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<WaitForSelectorState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [JsonPropertyNameAttribute("state")]
public Nullable`1<WaitForSelectorState> State { get; public set; }
    [JsonPropertyNameAttribute("strict")]
public Nullable`1<bool> Strict { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageWaitForSelectorOptions(PageWaitForSelectorOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<WaitForSelectorState> get_State();
    [CompilerGeneratedAttribute]
public void set_State(Nullable`1<WaitForSelectorState> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageWaitForURLOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WaitUntilState> <WaitUntil>k__BackingField;
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("waitUntil")]
public Nullable`1<WaitUntilState> WaitUntil { get; public set; }
    [NullableContextAttribute("1")]
public PageWaitForURLOptions(PageWaitForURLOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<WaitUntilState> get_WaitUntil();
    [CompilerGeneratedAttribute]
public void set_WaitUntil(Nullable`1<WaitUntilState> value);
}
public class Microsoft.Playwright.PageWaitForWebSocketOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IWebSocket, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("predicate")]
public Func`2<IWebSocket, bool> Predicate { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageWaitForWebSocketOptions(PageWaitForWebSocketOptions clone);
    [CompilerGeneratedAttribute]
public Func`2<IWebSocket, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<IWebSocket, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public class Microsoft.Playwright.PageWaitForWorkerOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IWorker, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("predicate")]
public Func`2<IWorker, bool> Predicate { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public PageWaitForWorkerOptions(PageWaitForWorkerOptions clone);
    [CompilerGeneratedAttribute]
public Func`2<IWorker, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<IWorker, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
public static class Microsoft.Playwright.PaperFormat : object {
    public static string Letter;
    public static string Legal;
    public static string Tabloid;
    public static string Ledger;
    public static string A0;
    public static string A1;
    public static string A2;
    public static string A3;
    public static string A4;
    public static string A5;
    public static string A6;
}
public static class Microsoft.Playwright.Playwright : object {
    [AsyncStateMachineAttribute("Microsoft.Playwright.Playwright/<CreateAsync>d__0")]
public static Task`1<IPlaywright> CreateAsync();
}
internal class Microsoft.Playwright.PlaywrightEvent`1 : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class Microsoft.Playwright.PlaywrightException : Exception {
    public PlaywrightException(string message);
    public PlaywrightException(string message, Exception innerException);
}
public class Microsoft.Playwright.Position : object {
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    [RequiredAttribute]
[JsonPropertyNameAttribute("x")]
public float X { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("y")]
public float Y { get; public set; }
    [CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public void set_X(float value);
    [CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(float value);
}
public class Microsoft.Playwright.Program : object {
    public static int Main(String[] args);
    public int Run(String[] args);
    private static int PrintError(string error);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.Proxy : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Server>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Bypass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [NullableAttribute("1")]
[RequiredAttribute]
[JsonPropertyNameAttribute("server")]
public string Server { get; public set; }
    [JsonPropertyNameAttribute("bypass")]
public string Bypass { get; public set; }
    [JsonPropertyNameAttribute("username")]
public string Username { get; public set; }
    [JsonPropertyNameAttribute("password")]
public string Password { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Server();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Server(string value);
    [CompilerGeneratedAttribute]
public string get_Bypass();
    [CompilerGeneratedAttribute]
public void set_Bypass(string value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
}
public class Microsoft.Playwright.RecordVideoSize : object {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [RequiredAttribute]
[JsonPropertyNameAttribute("width")]
public int Width { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("height")]
public int Height { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
}
public enum Microsoft.Playwright.ReducedMotion : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ReducedMotion Reduce;
    [EnumMemberAttribute]
public static ReducedMotion NoPreference;
    [EnumMemberAttribute]
public static ReducedMotion Null;
}
public static class Microsoft.Playwright.RequestAbortErrorCode : object {
    public static string Aborted;
    public static string AccessDenied;
    public static string AddressUnreachable;
    public static string BlockedByClient;
    public static string BlockedByResponse;
    public static string ConnectionAborted;
    public static string ConnectionClosed;
    public static string ConnectionFailed;
    public static string ConnectionRefused;
    public static string ConnectionReset;
    public static string InternetDisconnected;
    public static string NameNotResolved;
    public static string TimedOut;
    public static string Failed;
}
public class Microsoft.Playwright.RequestSizesResult : object {
    [CompilerGeneratedAttribute]
private int <RequestBodySize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequestHeadersSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResponseBodySize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResponseHeadersSize>k__BackingField;
    [RequiredAttribute]
[JsonPropertyNameAttribute("requestBodySize")]
public int RequestBodySize { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("requestHeadersSize")]
public int RequestHeadersSize { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("responseBodySize")]
public int ResponseBodySize { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("responseHeadersSize")]
public int ResponseHeadersSize { get; public set; }
    [CompilerGeneratedAttribute]
public int get_RequestBodySize();
    [CompilerGeneratedAttribute]
public void set_RequestBodySize(int value);
    [CompilerGeneratedAttribute]
public int get_RequestHeadersSize();
    [CompilerGeneratedAttribute]
public void set_RequestHeadersSize(int value);
    [CompilerGeneratedAttribute]
public int get_ResponseBodySize();
    [CompilerGeneratedAttribute]
public void set_ResponseBodySize(int value);
    [CompilerGeneratedAttribute]
public int get_ResponseHeadersSize();
    [CompilerGeneratedAttribute]
public void set_ResponseHeadersSize(int value);
}
public class Microsoft.Playwright.RequestTimingResult : object {
    [CompilerGeneratedAttribute]
private float <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private float <DomainLookupStart>k__BackingField;
    [CompilerGeneratedAttribute]
private float <DomainLookupEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private float <ConnectStart>k__BackingField;
    [CompilerGeneratedAttribute]
private float <SecureConnectionStart>k__BackingField;
    [CompilerGeneratedAttribute]
private float <ConnectEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RequestStart>k__BackingField;
    [CompilerGeneratedAttribute]
private float <ResponseStart>k__BackingField;
    [CompilerGeneratedAttribute]
private float <ResponseEnd>k__BackingField;
    [RequiredAttribute]
[JsonPropertyNameAttribute("startTime")]
public float StartTime { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("domainLookupStart")]
public float DomainLookupStart { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("domainLookupEnd")]
public float DomainLookupEnd { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("connectStart")]
public float ConnectStart { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("secureConnectionStart")]
public float SecureConnectionStart { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("connectEnd")]
public float ConnectEnd { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("requestStart")]
public float RequestStart { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("responseStart")]
public float ResponseStart { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("responseEnd")]
public float ResponseEnd { get; public set; }
    [CompilerGeneratedAttribute]
public float get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(float value);
    [CompilerGeneratedAttribute]
public float get_DomainLookupStart();
    [CompilerGeneratedAttribute]
public void set_DomainLookupStart(float value);
    [CompilerGeneratedAttribute]
public float get_DomainLookupEnd();
    [CompilerGeneratedAttribute]
public void set_DomainLookupEnd(float value);
    [CompilerGeneratedAttribute]
public float get_ConnectStart();
    [CompilerGeneratedAttribute]
public void set_ConnectStart(float value);
    [CompilerGeneratedAttribute]
public float get_SecureConnectionStart();
    [CompilerGeneratedAttribute]
public void set_SecureConnectionStart(float value);
    [CompilerGeneratedAttribute]
public float get_ConnectEnd();
    [CompilerGeneratedAttribute]
public void set_ConnectEnd(float value);
    [CompilerGeneratedAttribute]
public float get_RequestStart();
    [CompilerGeneratedAttribute]
public void set_RequestStart(float value);
    [CompilerGeneratedAttribute]
public float get_ResponseStart();
    [CompilerGeneratedAttribute]
public void set_ResponseStart(float value);
    [CompilerGeneratedAttribute]
public float get_ResponseEnd();
    [CompilerGeneratedAttribute]
public void set_ResponseEnd(float value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.ResponseSecurityDetailsResult : object {
    [CompilerGeneratedAttribute]
private string <Issuer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <ValidFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <ValidTo>k__BackingField;
    [JsonPropertyNameAttribute("issuer")]
public string Issuer { get; public set; }
    [JsonPropertyNameAttribute("protocol")]
public string Protocol { get; public set; }
    [JsonPropertyNameAttribute("subjectName")]
public string SubjectName { get; public set; }
    [JsonPropertyNameAttribute("validFrom")]
public Nullable`1<float> ValidFrom { get; public set; }
    [JsonPropertyNameAttribute("validTo")]
public Nullable`1<float> ValidTo { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Issuer();
    [CompilerGeneratedAttribute]
public void set_Issuer(string value);
    [CompilerGeneratedAttribute]
public string get_Protocol();
    [CompilerGeneratedAttribute]
public void set_Protocol(string value);
    [CompilerGeneratedAttribute]
public string get_SubjectName();
    [CompilerGeneratedAttribute]
public void set_SubjectName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_ValidFrom();
    [CompilerGeneratedAttribute]
public void set_ValidFrom(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_ValidTo();
    [CompilerGeneratedAttribute]
public void set_ValidTo(Nullable`1<float> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Playwright.ResponseServerAddrResult : object {
    [CompilerGeneratedAttribute]
private string <IpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [RequiredAttribute]
[JsonPropertyNameAttribute("ipAddress")]
public string IpAddress { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("port")]
public int Port { get; public set; }
    [CompilerGeneratedAttribute]
public string get_IpAddress();
    [CompilerGeneratedAttribute]
public void set_IpAddress(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.RouteContinueOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, string>> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <PostData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("headers")]
public IEnumerable`1<KeyValuePair`2<string, string>> Headers { get; public set; }
    [JsonPropertyNameAttribute("method")]
public string Method { get; public set; }
    [JsonPropertyNameAttribute("postData")]
public Byte[] PostData { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [NullableContextAttribute("1")]
public RouteContinueOptions(RouteContinueOptions clone);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, string>> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IEnumerable`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_PostData();
    [CompilerGeneratedAttribute]
public void set_PostData(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.RouteFallbackOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, string>> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <PostData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("headers")]
public IEnumerable`1<KeyValuePair`2<string, string>> Headers { get; public set; }
    [JsonPropertyNameAttribute("method")]
public string Method { get; public set; }
    [JsonPropertyNameAttribute("postData")]
public Byte[] PostData { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [NullableContextAttribute("1")]
public RouteFallbackOptions(RouteFallbackOptions clone);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, string>> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IEnumerable`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_PostData();
    [CompilerGeneratedAttribute]
public void set_PostData(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.RouteFetchOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, string>> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxRedirects>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <PostData>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("headers")]
public IEnumerable`1<KeyValuePair`2<string, string>> Headers { get; public set; }
    [JsonPropertyNameAttribute("maxRedirects")]
public Nullable`1<int> MaxRedirects { get; public set; }
    [JsonPropertyNameAttribute("maxRetries")]
public Nullable`1<int> MaxRetries { get; public set; }
    [JsonPropertyNameAttribute("method")]
public string Method { get; public set; }
    [JsonPropertyNameAttribute("postData")]
public Byte[] PostData { get; public set; }
    [JsonPropertyNameAttribute("timeout")]
public Nullable`1<float> Timeout { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [NullableContextAttribute("1")]
public RouteFetchOptions(RouteFetchOptions clone);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, string>> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IEnumerable`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxRedirects();
    [CompilerGeneratedAttribute]
public void set_MaxRedirects(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxRetries();
    [CompilerGeneratedAttribute]
public void set_MaxRetries(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_PostData();
    [CompilerGeneratedAttribute]
public void set_PostData(Byte[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
public enum Microsoft.Playwright.RouteFromHarUpdateContentPolicy : Enum {
    public int value__;
    [EnumMemberAttribute]
public static RouteFromHarUpdateContentPolicy Embed;
    [EnumMemberAttribute]
public static RouteFromHarUpdateContentPolicy Attach;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.RouteFulfillOptions : object {
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <BodyBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, string>> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Json>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IAPIResponse <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Status>k__BackingField;
    [JsonPropertyNameAttribute("body")]
public string Body { get; public set; }
    [JsonPropertyNameAttribute("bodyBytes")]
public Byte[] BodyBytes { get; public set; }
    [JsonPropertyNameAttribute("contentType")]
public string ContentType { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyNameAttribute("headers")]
public IEnumerable`1<KeyValuePair`2<string, string>> Headers { get; public set; }
    [JsonPropertyNameAttribute("json")]
public object Json { get; public set; }
    [JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [JsonPropertyNameAttribute("response")]
public IAPIResponse Response { get; public set; }
    [JsonPropertyNameAttribute("status")]
public Nullable`1<int> Status { get; public set; }
    [NullableContextAttribute("1")]
public RouteFulfillOptions(RouteFulfillOptions clone);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_BodyBytes();
    [CompilerGeneratedAttribute]
public void set_BodyBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, string>> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IEnumerable`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public object get_Json();
    [CompilerGeneratedAttribute]
public void set_Json(object value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public IAPIResponse get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(IAPIResponse value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<int> value);
}
public enum Microsoft.Playwright.SameSiteAttribute : Enum {
    public int value__;
    [EnumMemberAttribute]
public static SameSiteAttribute Strict;
    [EnumMemberAttribute]
public static SameSiteAttribute Lax;
    [EnumMemberAttribute]
public static SameSiteAttribute None;
}
public enum Microsoft.Playwright.ScreenshotAnimations : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ScreenshotAnimations Disabled;
    [EnumMemberAttribute]
public static ScreenshotAnimations Allow;
}
public enum Microsoft.Playwright.ScreenshotCaret : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ScreenshotCaret Hide;
    [EnumMemberAttribute]
public static ScreenshotCaret Initial;
}
public enum Microsoft.Playwright.ScreenshotScale : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ScreenshotScale Css;
    [EnumMemberAttribute]
public static ScreenshotScale Device;
}
public enum Microsoft.Playwright.ScreenshotType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ScreenshotType Png;
    [EnumMemberAttribute]
public static ScreenshotType Jpeg;
}
public class Microsoft.Playwright.ScreenSize : object {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [RequiredAttribute]
[JsonPropertyNameAttribute("width")]
public int Width { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("height")]
public int Height { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.SelectOptionValue : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Index>k__BackingField;
    [JsonPropertyNameAttribute("value")]
public string Value { get; public set; }
    [JsonPropertyNameAttribute("label")]
public string Label { get; public set; }
    [JsonPropertyNameAttribute("index")]
public Nullable`1<int> Index { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(Nullable`1<int> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.SelectorsRegisterOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ContentScript>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Script>k__BackingField;
    [JsonPropertyNameAttribute("contentScript")]
public Nullable`1<bool> ContentScript { get; public set; }
    [JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [JsonPropertyNameAttribute("script")]
public string Script { get; public set; }
    [NullableContextAttribute("1")]
public SelectorsRegisterOptions(SelectorsRegisterOptions clone);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ContentScript();
    [CompilerGeneratedAttribute]
public void set_ContentScript(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Script();
    [CompilerGeneratedAttribute]
public void set_Script(string value);
}
public enum Microsoft.Playwright.ServiceWorkerPolicy : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ServiceWorkerPolicy Allow;
    [EnumMemberAttribute]
public static ServiceWorkerPolicy Block;
}
public class Microsoft.Playwright.SourcePosition : object {
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    [RequiredAttribute]
[JsonPropertyNameAttribute("x")]
public float X { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("y")]
public float Y { get; public set; }
    [CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public void set_X(float value);
    [CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(float value);
}
internal class Microsoft.Playwright.TargetClosedException : PlaywrightException {
    internal TargetClosedException(string message);
    internal TargetClosedException(string message, Exception innerException);
}
public class Microsoft.Playwright.TargetPosition : object {
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    [RequiredAttribute]
[JsonPropertyNameAttribute("x")]
public float X { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("y")]
public float Y { get; public set; }
    [CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public void set_X(float value);
    [CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(float value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.TracingStartChunkOptions : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("title")]
public string Title { get; public set; }
    [NullableContextAttribute("1")]
public TracingStartChunkOptions(TracingStartChunkOptions clone);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.TracingStartOptions : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Screenshots>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Snapshots>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("screenshots")]
public Nullable`1<bool> Screenshots { get; public set; }
    [JsonPropertyNameAttribute("snapshots")]
public Nullable`1<bool> Snapshots { get; public set; }
    [JsonPropertyNameAttribute("sources")]
public Nullable`1<bool> Sources { get; public set; }
    [JsonPropertyNameAttribute("title")]
public string Title { get; public set; }
    [NullableContextAttribute("1")]
public TracingStartOptions(TracingStartOptions clone);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Screenshots();
    [CompilerGeneratedAttribute]
public void set_Screenshots(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Snapshots();
    [CompilerGeneratedAttribute]
public void set_Snapshots(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.TracingStopChunkOptions : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [NullableContextAttribute("1")]
public TracingStopChunkOptions(TracingStopChunkOptions clone);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Playwright.TracingStopOptions : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [NullableContextAttribute("1")]
public TracingStopOptions(TracingStopOptions clone);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
internal class Microsoft.Playwright.Transport.ApiZone : object {
    [CompilerGeneratedAttribute]
private string <ApiName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<StackFrame> <Frames>k__BackingField;
    [JsonIgnoreAttribute]
public string ApiName { get; public set; }
    public List`1<StackFrame> Frames { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ApiName();
    [CompilerGeneratedAttribute]
public void set_ApiName(string value);
    [CompilerGeneratedAttribute]
public List`1<StackFrame> get_Frames();
    [CompilerGeneratedAttribute]
public void set_Frames(List`1<StackFrame> value);
}
internal class Microsoft.Playwright.Transport.ChannelOwner : object {
    internal Connection _connection;
    internal bool _wasCollected;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ChannelOwner> <Objects>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private ChannelOwner <Parent>k__BackingField;
    internal ConcurrentDictionary`2<string, ChannelOwner> Objects { get; }
    internal string Guid { get; internal set; }
    internal ChannelOwner Parent { get; internal set; }
    internal ChannelOwner(ChannelOwner parent, string guid);
    internal ChannelOwner(ChannelOwner parent, Connection connection, string guid);
    [CompilerGeneratedAttribute]
internal ConcurrentDictionary`2<string, ChannelOwner> get_Objects();
    [CompilerGeneratedAttribute]
internal string get_Guid();
    [CompilerGeneratedAttribute]
internal void set_Guid(string value);
    [CompilerGeneratedAttribute]
internal ChannelOwner get_Parent();
    [CompilerGeneratedAttribute]
internal void set_Parent(ChannelOwner value);
    internal virtual void OnMessage(string method, Nullable`1<JsonElement> serverParams);
    internal void Adopt(ChannelOwner child);
    internal void DisposeOwner(string reason);
    public Task`1<T> WrapApiCallAsync(Func`1<Task`1<T>> action, bool isInternal);
    public Task WrapApiCallAsync(Func`1<Task> action, bool isInternal);
    public Task WrapApiBoundaryAsync(Func`1<Task> action);
    internal EventHandler`1<T> UpdateEventHandler(string eventName, EventHandler`1<T> handlers, EventHandler`1<T> handler, bool add);
    private void UpdateEventSubscription(string eventName, bool enabled);
    internal Task`1<Nullable`1<JsonElement>> SendMessageToServerAsync(string method, Dictionary`2<string, object> args, bool keepNulls);
    internal Task`1<T> SendMessageToServerAsync(string method, Dictionary`2<string, object> args, bool keepNulls);
}
internal class Microsoft.Playwright.Transport.Channels.BrowserContextChannelRequestEventArgs : object {
    [CompilerGeneratedAttribute]
private Page <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private Request <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private Response <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestSizesResult <RequestSizes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FailureText>k__BackingField;
    [CompilerGeneratedAttribute]
private float <ResponseEndTiming>k__BackingField;
    public Page Page { get; public set; }
    public Request Request { get; public set; }
    public Response Response { get; public set; }
    public RequestSizesResult RequestSizes { get; public set; }
    public string FailureText { get; public set; }
    public float ResponseEndTiming { get; public set; }
    [CompilerGeneratedAttribute]
public Page get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(Page value);
    [CompilerGeneratedAttribute]
public Request get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(Request value);
    [CompilerGeneratedAttribute]
public Response get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(Response value);
    [CompilerGeneratedAttribute]
public RequestSizesResult get_RequestSizes();
    [CompilerGeneratedAttribute]
public void set_RequestSizes(RequestSizesResult value);
    [CompilerGeneratedAttribute]
public string get_FailureText();
    [CompilerGeneratedAttribute]
public void set_FailureText(string value);
    [CompilerGeneratedAttribute]
public float get_ResponseEndTiming();
    [CompilerGeneratedAttribute]
public void set_ResponseEndTiming(float value);
}
internal class Microsoft.Playwright.Transport.Channels.BrowserContextChannelResponseEventArgs : object {
    [CompilerGeneratedAttribute]
private Page <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private Response <Response>k__BackingField;
    public Page Page { get; public set; }
    public Response Response { get; public set; }
    [CompilerGeneratedAttribute]
public Page get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(Page value);
    [CompilerGeneratedAttribute]
public Response get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(Response value);
}
internal enum Microsoft.Playwright.Transport.Channels.ChannelOwnerType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ChannelOwnerType Artifact;
    [EnumMemberAttribute]
public static ChannelOwnerType BindingCall;
    [EnumMemberAttribute]
public static ChannelOwnerType Browser;
    [EnumMemberAttribute]
public static ChannelOwnerType BrowserType;
    [EnumMemberAttribute]
public static ChannelOwnerType BrowserContext;
    [EnumMemberAttribute]
public static ChannelOwnerType CDPSession;
    [EnumMemberAttribute]
public static ChannelOwnerType Dialog;
    [EnumMemberAttribute]
public static ChannelOwnerType Download;
    [EnumMemberAttribute]
public static ChannelOwnerType ElementHandle;
    [EnumMemberAttribute]
public static ChannelOwnerType Frame;
    [EnumMemberAttribute]
public static ChannelOwnerType JSHandle;
    [EnumMemberAttribute]
public static ChannelOwnerType JsonPipe;
    [EnumMemberAttribute]
public static ChannelOwnerType LocalUtils;
    [EnumMemberAttribute]
public static ChannelOwnerType Page;
    [EnumMemberAttribute]
public static ChannelOwnerType Request;
    [EnumMemberAttribute]
public static ChannelOwnerType Response;
    [EnumMemberAttribute]
public static ChannelOwnerType Route;
    [EnumMemberAttribute]
public static ChannelOwnerType Playwright;
    [EnumMemberAttribute]
public static ChannelOwnerType BrowserServer;
    [EnumMemberAttribute]
public static ChannelOwnerType Worker;
    [EnumMemberAttribute]
public static ChannelOwnerType Electron;
    [EnumMemberAttribute]
public static ChannelOwnerType Selectors;
    [EnumMemberAttribute]
public static ChannelOwnerType SocksSupport;
    [EnumMemberAttribute]
public static ChannelOwnerType WebSocket;
    [EnumMemberAttribute]
public static ChannelOwnerType Android;
    [EnumMemberAttribute]
public static ChannelOwnerType Stream;
    [EnumMemberAttribute]
public static ChannelOwnerType WritableStream;
    [EnumMemberAttribute]
public static ChannelOwnerType Tracing;
    [EnumMemberAttribute]
public static ChannelOwnerType FetchRequest;
    [EnumMemberAttribute]
public static ChannelOwnerType APIRequestContext;
}
internal class Microsoft.Playwright.Transport.Channels.Root : ChannelOwner {
    internal Root(ChannelOwner parent, Connection connection, string guid);
}
internal class Microsoft.Playwright.Transport.Connection : object {
    private ConcurrentDictionary`2<int, ConnectionCallback> _callbacks;
    private Root _rootObject;
    private TaskQueue _queue;
    private int _tracingCount;
    private int _lastId;
    private Exception _closedError;
    [CompilerGeneratedAttribute]
private EventHandler`1<Exception> Close;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ChannelOwner> <Objects>k__BackingField;
    [CompilerGeneratedAttribute]
private AsyncLocal`1<List`1<ApiZone>> <ApiZone>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRemote>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalUtils <LocalUtils>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<object, bool, Task> <OnMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSerializerOptions <DefaultJsonSerializerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSerializerOptions <DefaultJsonSerializerOptionsKeepNulls>k__BackingField;
    public ConcurrentDictionary`2<string, ChannelOwner> Objects { get; }
    internal AsyncLocal`1<List`1<ApiZone>> ApiZone { get; }
    internal bool IsRemote { get; internal set; }
    internal LocalUtils LocalUtils { get; private set; }
    internal Func`3<object, bool, Task> OnMessage { get; internal set; }
    internal JsonSerializerOptions DefaultJsonSerializerOptions { get; }
    internal JsonSerializerOptions DefaultJsonSerializerOptionsKeepNulls { get; }
    public Connection(LocalUtils localUtils);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
internal void add_Close(EventHandler`1<Exception> value);
    [CompilerGeneratedAttribute]
internal void remove_Close(EventHandler`1<Exception> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, ChannelOwner> get_Objects();
    [CompilerGeneratedAttribute]
internal AsyncLocal`1<List`1<ApiZone>> get_ApiZone();
    [CompilerGeneratedAttribute]
internal bool get_IsRemote();
    [CompilerGeneratedAttribute]
internal void set_IsRemote(bool value);
    [CompilerGeneratedAttribute]
internal LocalUtils get_LocalUtils();
    [CompilerGeneratedAttribute]
private void set_LocalUtils(LocalUtils value);
    [CompilerGeneratedAttribute]
internal Func`3<object, bool, Task> get_OnMessage();
    [CompilerGeneratedAttribute]
internal void set_OnMessage(Func`3<object, bool, Task> value);
    [CompilerGeneratedAttribute]
internal JsonSerializerOptions get_DefaultJsonSerializerOptions();
    [CompilerGeneratedAttribute]
internal JsonSerializerOptions get_DefaultJsonSerializerOptionsKeepNulls();
    internal static string FormatCallLog(String[] log);
    public sealed virtual void Dispose();
    internal void SetIsTracing(bool isTracing);
    internal Task`1<Nullable`1<JsonElement>> SendMessageToServerAsync(ChannelOwner object, string method, Dictionary`2<string, object> args, bool keepNulls);
    internal Task`1<T> SendMessageToServerAsync(ChannelOwner object, string method, Dictionary`2<string, object> args, bool keepNulls);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Transport.Connection/<InnerSendMessageToServerAsync>d__40`1")]
private Task`1<T> InnerSendMessageToServerAsync(ChannelOwner object, string method, Dictionary`2<string, object> dictionary, bool keepNulls);
    internal ChannelOwner GetObject(string guid);
    internal void MarkAsRemote();
    [AsyncStateMachineAttribute("Microsoft.Playwright.Transport.Connection/<InitializePlaywrightAsync>d__43")]
internal Task`1<PlaywrightImpl> InitializePlaywrightAsync();
    internal void Dispatch(PlaywrightServerMessage message);
    private ChannelOwner CreateRemoteObject(string parentGuid, ChannelOwnerType type, string guid, Nullable`1<JsonElement> initializer);
    internal void DoClose(Exception cause);
    internal void DoClose(string cause);
    internal void DoCloseImpl(Exception closeError);
    private Exception ParseException(PlaywrightServerError error, string messageSuffix);
    private void Dispose(bool disposing);
    internal static void TraceMessage(string logLevel, Byte[] rawMessage);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Transport.Connection/<WrapApiCallAsync>d__52`1")]
internal Task`1<T> WrapApiCallAsync(Func`1<Task`1<T>> action, bool isInternal);
    internal Task WrapApiCallAsync(Func`1<Task> action, bool isInternal);
    private static bool IsPlaywrightInternalNamespace(string namespaceName);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Transport.Connection/<WrapApiBoundaryAsync>d__55")]
internal Task WrapApiBoundaryAsync(Func`1<Task> action);
    private void EnsureApiZoneExists();
    [CompilerGeneratedAttribute]
private JsonSerializerOptions <.ctor>g__NewJsonSerializerOptions|6_0(bool keepNulls);
}
internal class Microsoft.Playwright.Transport.ConnectionCallback : object {
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<Nullable`1<JsonElement>> <TaskCompletionSource>k__BackingField;
    public TaskCompletionSource`1<Nullable`1<JsonElement>> TaskCompletionSource { get; public set; }
    [CompilerGeneratedAttribute]
public TaskCompletionSource`1<Nullable`1<JsonElement>> get_TaskCompletionSource();
    [CompilerGeneratedAttribute]
public void set_TaskCompletionSource(TaskCompletionSource`1<Nullable`1<JsonElement>> value);
}
internal class Microsoft.Playwright.Transport.Converters.ChannelOwnerConverterFactory : JsonConverterFactory {
    private Connection _connection;
    public ChannelOwnerConverterFactory(Connection connection);
    public virtual bool CanConvert(Type typeToConvert);
    public virtual JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options);
}
internal class Microsoft.Playwright.Transport.Converters.ChannelOwnerListToGuidListConverter`1 : JsonConverter`1<IEnumerable`1<T>> {
    private Connection _connection;
    public ChannelOwnerListToGuidListConverter`1(Connection connection);
    public virtual bool CanConvert(Type type);
    public virtual IEnumerable`1<T> Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, IEnumerable`1<T> value, JsonSerializerOptions options);
}
internal class Microsoft.Playwright.Transport.Converters.ChannelOwnerToGuidConverter`1 : JsonConverter`1<T> {
    private Connection _connection;
    public ChannelOwnerToGuidConverter`1(Connection connection);
    public virtual T Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options);
}
internal static class Microsoft.Playwright.Transport.Converters.EvaluateArgumentValueConverter : object {
    private static JsonSerializerOptions _evaluateArgumentValueConverterSerializerOptions;
    private static EvaluateArgumentValueConverter();
    internal static object Serialize(object value, List`1<EvaluateArgumentGuidElement> handles, VisitorInfo visitorInfo);
    internal static object Deserialize(JsonElement result, Type t);
    private static object ToExpectedType(object parsed, Type t, IDictionary`2<object, object> visited);
    private static object ChangeType(object value, Type conversion);
    private static object ParseEvaluateResultToExpando(JsonElement result, IDictionary`2<int, object> refs);
}
internal class Microsoft.Playwright.Transport.Converters.JsonStringEnumMemberConverter : JsonConverterFactory {
    public virtual bool CanConvert(Type typeToConvert);
    public virtual JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options);
    private static Nullable`1<TEnum> Read(Utf8JsonReader& reader);
    private static void Write(Utf8JsonWriter writer, Nullable`1<TEnum> value);
}
internal class Microsoft.Playwright.Transport.Converters.KeyJsonElementValueObject : object {
    [CompilerGeneratedAttribute]
private string <K>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonElement <V>k__BackingField;
    public string K { get; public set; }
    public JsonElement V { get; public set; }
    [CompilerGeneratedAttribute]
public string get_K();
    [CompilerGeneratedAttribute]
public void set_K(string value);
    [CompilerGeneratedAttribute]
public JsonElement get_V();
    [CompilerGeneratedAttribute]
public void set_V(JsonElement value);
}
internal class Microsoft.Playwright.Transport.CreateObjectInfo : object {
    [CompilerGeneratedAttribute]
private string <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private ChannelOwnerType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<JsonElement> <Initializer>k__BackingField;
    public string Guid { get; public set; }
    public ChannelOwnerType Type { get; public set; }
    public Nullable`1<JsonElement> Initializer { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(string value);
    [CompilerGeneratedAttribute]
public ChannelOwnerType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ChannelOwnerType value);
    [CompilerGeneratedAttribute]
public Nullable`1<JsonElement> get_Initializer();
    [CompilerGeneratedAttribute]
public void set_Initializer(Nullable`1<JsonElement> value);
}
internal class Microsoft.Playwright.Transport.ErrorEntry : object {
    [CompilerGeneratedAttribute]
private PlaywrightServerError <Error>k__BackingField;
    public PlaywrightServerError Error { get; public set; }
    [CompilerGeneratedAttribute]
public PlaywrightServerError get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(PlaywrightServerError value);
}
internal class Microsoft.Playwright.Transport.MessageRequest : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Params>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Metadata>k__BackingField;
    public int Id { get; public set; }
    public string Guid { get; public set; }
    public string Method { get; public set; }
    public object Params { get; public set; }
    public object Metadata { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(string value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public object get_Params();
    [CompilerGeneratedAttribute]
public void set_Params(object value);
    [CompilerGeneratedAttribute]
public object get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(object value);
}
internal class Microsoft.Playwright.Transport.PlaywrightServerError : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Message { get; public set; }
    public string Value { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
internal class Microsoft.Playwright.Transport.PlaywrightServerMessage : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<JsonElement> <Params>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<JsonElement> <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorEntry <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Log>k__BackingField;
    public Nullable`1<int> Id { get; public set; }
    public string Guid { get; public set; }
    public string Method { get; public set; }
    public Nullable`1<JsonElement> Params { get; public set; }
    public Nullable`1<JsonElement> Result { get; public set; }
    public ErrorEntry Error { get; public set; }
    public String[] Log { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(string value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<JsonElement> get_Params();
    [CompilerGeneratedAttribute]
public void set_Params(Nullable`1<JsonElement> value);
    [CompilerGeneratedAttribute]
public Nullable`1<JsonElement> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(Nullable`1<JsonElement> value);
    [CompilerGeneratedAttribute]
public ErrorEntry get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(ErrorEntry value);
    [CompilerGeneratedAttribute]
public String[] get_Log();
    [CompilerGeneratedAttribute]
public void set_Log(String[] value);
}
internal class Microsoft.Playwright.Transport.Protocol.AndroidDeviceInitializer : EventTargetInitializer {
    [CompilerGeneratedAttribute]
private string <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Serial>k__BackingField;
    [JsonPropertyNameAttribute("model")]
public string Model { get; public set; }
    [JsonPropertyNameAttribute("serial")]
public string Serial { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(string value);
    [CompilerGeneratedAttribute]
public string get_Serial();
    [CompilerGeneratedAttribute]
public void set_Serial(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.AndroidElementInfo : object {
    [CompilerGeneratedAttribute]
private List`1<AndroidElementInfo> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Clazz>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Desc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Res>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pkg>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Rect <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Checkable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Checked>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Clickable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Focusable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Focused>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LongClickable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Scrollable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    [JsonPropertyNameAttribute("children")]
public List`1<AndroidElementInfo> Children { get; public set; }
    [JsonPropertyNameAttribute("clazz")]
public string Clazz { get; public set; }
    [JsonPropertyNameAttribute("desc")]
public string Desc { get; public set; }
    [JsonPropertyNameAttribute("res")]
public string Res { get; public set; }
    [JsonPropertyNameAttribute("pkg")]
public string Pkg { get; public set; }
    [JsonPropertyNameAttribute("text")]
public string Text { get; public set; }
    [JsonPropertyNameAttribute("bounds")]
public Rect Bounds { get; public set; }
    [JsonPropertyNameAttribute("checkable")]
public bool Checkable { get; public set; }
    [JsonPropertyNameAttribute("checked")]
public bool Checked { get; public set; }
    [JsonPropertyNameAttribute("clickable")]
public bool Clickable { get; public set; }
    [JsonPropertyNameAttribute("enabled")]
public bool Enabled { get; public set; }
    [JsonPropertyNameAttribute("focusable")]
public bool Focusable { get; public set; }
    [JsonPropertyNameAttribute("focused")]
public bool Focused { get; public set; }
    [JsonPropertyNameAttribute("longClickable")]
public bool LongClickable { get; public set; }
    [JsonPropertyNameAttribute("scrollable")]
public bool Scrollable { get; public set; }
    [JsonPropertyNameAttribute("selected")]
public bool Selected { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<AndroidElementInfo> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(List`1<AndroidElementInfo> value);
    [CompilerGeneratedAttribute]
public string get_Clazz();
    [CompilerGeneratedAttribute]
public void set_Clazz(string value);
    [CompilerGeneratedAttribute]
public string get_Desc();
    [CompilerGeneratedAttribute]
public void set_Desc(string value);
    [CompilerGeneratedAttribute]
public string get_Res();
    [CompilerGeneratedAttribute]
public void set_Res(string value);
    [CompilerGeneratedAttribute]
public string get_Pkg();
    [CompilerGeneratedAttribute]
public void set_Pkg(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public Rect get_Bounds();
    [CompilerGeneratedAttribute]
public void set_Bounds(Rect value);
    [CompilerGeneratedAttribute]
public bool get_Checkable();
    [CompilerGeneratedAttribute]
public void set_Checkable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Checked();
    [CompilerGeneratedAttribute]
public void set_Checked(bool value);
    [CompilerGeneratedAttribute]
public bool get_Clickable();
    [CompilerGeneratedAttribute]
public void set_Clickable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Focusable();
    [CompilerGeneratedAttribute]
public void set_Focusable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Focused();
    [CompilerGeneratedAttribute]
public void set_Focused(bool value);
    [CompilerGeneratedAttribute]
public bool get_LongClickable();
    [CompilerGeneratedAttribute]
public void set_LongClickable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Scrollable();
    [CompilerGeneratedAttribute]
public void set_Scrollable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(bool value);
}
internal class Microsoft.Playwright.Transport.Protocol.AndroidInitializer : object {
}
internal class Microsoft.Playwright.Transport.Protocol.AndroidSelector : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Checkable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Checked>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Clazz>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Clickable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Depth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Desc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Focusable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Focused>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidSelectorHasChild <HasChild>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidSelectorHasDescendant <HasDescendant>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <LongClickable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pkg>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Res>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Scrollable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Selected>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [JsonPropertyNameAttribute("checkable")]
public Nullable`1<bool> Checkable { get; public set; }
    [JsonPropertyNameAttribute("checked")]
public Nullable`1<bool> Checked { get; public set; }
    [JsonPropertyNameAttribute("clazz")]
public string Clazz { get; public set; }
    [JsonPropertyNameAttribute("clickable")]
public Nullable`1<bool> Clickable { get; public set; }
    [JsonPropertyNameAttribute("depth")]
public Nullable`1<int> Depth { get; public set; }
    [JsonPropertyNameAttribute("desc")]
public string Desc { get; public set; }
    [JsonPropertyNameAttribute("enabled")]
public Nullable`1<bool> Enabled { get; public set; }
    [JsonPropertyNameAttribute("focusable")]
public Nullable`1<bool> Focusable { get; public set; }
    [JsonPropertyNameAttribute("focused")]
public Nullable`1<bool> Focused { get; public set; }
    [JsonPropertyNameAttribute("hasChild")]
public AndroidSelectorHasChild HasChild { get; public set; }
    [JsonPropertyNameAttribute("hasDescendant")]
public AndroidSelectorHasDescendant HasDescendant { get; public set; }
    [JsonPropertyNameAttribute("longClickable")]
public Nullable`1<bool> LongClickable { get; public set; }
    [JsonPropertyNameAttribute("pkg")]
public string Pkg { get; public set; }
    [JsonPropertyNameAttribute("res")]
public string Res { get; public set; }
    [JsonPropertyNameAttribute("scrollable")]
public Nullable`1<bool> Scrollable { get; public set; }
    [JsonPropertyNameAttribute("selected")]
public Nullable`1<bool> Selected { get; public set; }
    [JsonPropertyNameAttribute("text")]
public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Checkable();
    [CompilerGeneratedAttribute]
public void set_Checkable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Checked();
    [CompilerGeneratedAttribute]
public void set_Checked(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Clazz();
    [CompilerGeneratedAttribute]
public void set_Clazz(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Clickable();
    [CompilerGeneratedAttribute]
public void set_Clickable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Depth();
    [CompilerGeneratedAttribute]
public void set_Depth(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Desc();
    [CompilerGeneratedAttribute]
public void set_Desc(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Focusable();
    [CompilerGeneratedAttribute]
public void set_Focusable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Focused();
    [CompilerGeneratedAttribute]
public void set_Focused(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public AndroidSelectorHasChild get_HasChild();
    [CompilerGeneratedAttribute]
public void set_HasChild(AndroidSelectorHasChild value);
    [CompilerGeneratedAttribute]
public AndroidSelectorHasDescendant get_HasDescendant();
    [CompilerGeneratedAttribute]
public void set_HasDescendant(AndroidSelectorHasDescendant value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_LongClickable();
    [CompilerGeneratedAttribute]
public void set_LongClickable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Pkg();
    [CompilerGeneratedAttribute]
public void set_Pkg(string value);
    [CompilerGeneratedAttribute]
public string get_Res();
    [CompilerGeneratedAttribute]
public void set_Res(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Scrollable();
    [CompilerGeneratedAttribute]
public void set_Scrollable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.AndroidSelectorHasChild : object {
    [CompilerGeneratedAttribute]
private AndroidSelector <Selector>k__BackingField;
    [JsonPropertyNameAttribute("selector")]
public AndroidSelector Selector { get; public set; }
    [CompilerGeneratedAttribute]
public AndroidSelector get_Selector();
    [CompilerGeneratedAttribute]
public void set_Selector(AndroidSelector value);
}
internal class Microsoft.Playwright.Transport.Protocol.AndroidSelectorHasDescendant : object {
    [CompilerGeneratedAttribute]
private AndroidSelector <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxDepth>k__BackingField;
    [JsonPropertyNameAttribute("selector")]
public AndroidSelector Selector { get; public set; }
    [JsonPropertyNameAttribute("maxDepth")]
public Nullable`1<int> MaxDepth { get; public set; }
    [CompilerGeneratedAttribute]
public AndroidSelector get_Selector();
    [CompilerGeneratedAttribute]
public void set_Selector(AndroidSelector value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxDepth();
    [CompilerGeneratedAttribute]
public void set_MaxDepth(Nullable`1<int> value);
}
internal class Microsoft.Playwright.Transport.Protocol.AndroidSocketInitializer : object {
}
internal class Microsoft.Playwright.Transport.Protocol.AndroidWebView : object {
    [CompilerGeneratedAttribute]
private int <Pid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pkg>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SocketName>k__BackingField;
    [JsonPropertyNameAttribute("pid")]
public int Pid { get; public set; }
    [JsonPropertyNameAttribute("pkg")]
public string Pkg { get; public set; }
    [JsonPropertyNameAttribute("socketName")]
public string SocketName { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Pid();
    [CompilerGeneratedAttribute]
public void set_Pid(int value);
    [CompilerGeneratedAttribute]
public string get_Pkg();
    [CompilerGeneratedAttribute]
public void set_Pkg(string value);
    [CompilerGeneratedAttribute]
public string get_SocketName();
    [CompilerGeneratedAttribute]
public void set_SocketName(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.APIRequestContextInitializer : object {
    [CompilerGeneratedAttribute]
private Tracing <Tracing>k__BackingField;
    [JsonPropertyNameAttribute("tracing")]
public Tracing Tracing { get; public set; }
    [CompilerGeneratedAttribute]
public Tracing get_Tracing();
    [CompilerGeneratedAttribute]
public void set_Tracing(Tracing value);
}
internal class Microsoft.Playwright.Transport.Protocol.APIResponse : object {
    [CompilerGeneratedAttribute]
private string <FetchUid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusText>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NameValue> <Headers>k__BackingField;
    [JsonPropertyNameAttribute("fetchUid")]
public string FetchUid { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [JsonPropertyNameAttribute("status")]
public int Status { get; public set; }
    [JsonPropertyNameAttribute("statusText")]
public string StatusText { get; public set; }
    [JsonPropertyNameAttribute("headers")]
public List`1<NameValue> Headers { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FetchUid();
    [CompilerGeneratedAttribute]
public void set_FetchUid(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public int get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(int value);
    [CompilerGeneratedAttribute]
public string get_StatusText();
    [CompilerGeneratedAttribute]
public void set_StatusText(string value);
    [CompilerGeneratedAttribute]
public List`1<NameValue> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(List`1<NameValue> value);
}
internal class Microsoft.Playwright.Transport.Protocol.ArtifactInitializer : object {
    [CompilerGeneratedAttribute]
private string <AbsolutePath>k__BackingField;
    [JsonPropertyNameAttribute("absolutePath")]
public string AbsolutePath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AbsolutePath();
    [CompilerGeneratedAttribute]
public void set_AbsolutePath(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.AXNode : object {
    [CompilerGeneratedAttribute]
private string <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ValueNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Keyshortcuts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Roledescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Valuetext>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Focused>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Modal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Multiline>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Multiselectable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Readonly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Selected>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Checked>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pressed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Valuemin>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Valuemax>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Autocomplete>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Haspopup>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Invalid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AXNode> <Children>k__BackingField;
    [JsonPropertyNameAttribute("role")]
public string Role { get; public set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("valueString")]
public string ValueString { get; public set; }
    [JsonPropertyNameAttribute("valueNumber")]
public Nullable`1<int> ValueNumber { get; public set; }
    [JsonPropertyNameAttribute("description")]
public string Description { get; public set; }
    [JsonPropertyNameAttribute("keyshortcuts")]
public string Keyshortcuts { get; public set; }
    [JsonPropertyNameAttribute("roledescription")]
public string Roledescription { get; public set; }
    [JsonPropertyNameAttribute("valuetext")]
public string Valuetext { get; public set; }
    [JsonPropertyNameAttribute("disabled")]
public Nullable`1<bool> Disabled { get; public set; }
    [JsonPropertyNameAttribute("expanded")]
public Nullable`1<bool> Expanded { get; public set; }
    [JsonPropertyNameAttribute("focused")]
public Nullable`1<bool> Focused { get; public set; }
    [JsonPropertyNameAttribute("modal")]
public Nullable`1<bool> Modal { get; public set; }
    [JsonPropertyNameAttribute("multiline")]
public Nullable`1<bool> Multiline { get; public set; }
    [JsonPropertyNameAttribute("multiselectable")]
public Nullable`1<bool> Multiselectable { get; public set; }
    [JsonPropertyNameAttribute("readonly")]
public Nullable`1<bool> Readonly { get; public set; }
    [JsonPropertyNameAttribute("required")]
public Nullable`1<bool> Required { get; public set; }
    [JsonPropertyNameAttribute("selected")]
public Nullable`1<bool> Selected { get; public set; }
    [JsonPropertyNameAttribute("checked")]
public string Checked { get; public set; }
    [JsonPropertyNameAttribute("pressed")]
public string Pressed { get; public set; }
    [JsonPropertyNameAttribute("level")]
public Nullable`1<int> Level { get; public set; }
    [JsonPropertyNameAttribute("valuemin")]
public Nullable`1<int> Valuemin { get; public set; }
    [JsonPropertyNameAttribute("valuemax")]
public Nullable`1<int> Valuemax { get; public set; }
    [JsonPropertyNameAttribute("autocomplete")]
public string Autocomplete { get; public set; }
    [JsonPropertyNameAttribute("haspopup")]
public string Haspopup { get; public set; }
    [JsonPropertyNameAttribute("invalid")]
public string Invalid { get; public set; }
    [JsonPropertyNameAttribute("orientation")]
public string Orientation { get; public set; }
    [JsonPropertyNameAttribute("children")]
public List`1<AXNode> Children { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Role();
    [CompilerGeneratedAttribute]
public void set_Role(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ValueString();
    [CompilerGeneratedAttribute]
public void set_ValueString(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ValueNumber();
    [CompilerGeneratedAttribute]
public void set_ValueNumber(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Keyshortcuts();
    [CompilerGeneratedAttribute]
public void set_Keyshortcuts(string value);
    [CompilerGeneratedAttribute]
public string get_Roledescription();
    [CompilerGeneratedAttribute]
public void set_Roledescription(string value);
    [CompilerGeneratedAttribute]
public string get_Valuetext();
    [CompilerGeneratedAttribute]
public void set_Valuetext(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Focused();
    [CompilerGeneratedAttribute]
public void set_Focused(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Modal();
    [CompilerGeneratedAttribute]
public void set_Modal(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Multiline();
    [CompilerGeneratedAttribute]
public void set_Multiline(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Multiselectable();
    [CompilerGeneratedAttribute]
public void set_Multiselectable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Readonly();
    [CompilerGeneratedAttribute]
public void set_Readonly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Checked();
    [CompilerGeneratedAttribute]
public void set_Checked(string value);
    [CompilerGeneratedAttribute]
public string get_Pressed();
    [CompilerGeneratedAttribute]
public void set_Pressed(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Valuemin();
    [CompilerGeneratedAttribute]
public void set_Valuemin(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Valuemax();
    [CompilerGeneratedAttribute]
public void set_Valuemax(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Autocomplete();
    [CompilerGeneratedAttribute]
public void set_Autocomplete(string value);
    [CompilerGeneratedAttribute]
public string get_Haspopup();
    [CompilerGeneratedAttribute]
public void set_Haspopup(string value);
    [CompilerGeneratedAttribute]
public string get_Invalid();
    [CompilerGeneratedAttribute]
public void set_Invalid(string value);
    [CompilerGeneratedAttribute]
public string get_Orientation();
    [CompilerGeneratedAttribute]
public void set_Orientation(string value);
    [CompilerGeneratedAttribute]
public List`1<AXNode> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(List`1<AXNode> value);
}
internal class Microsoft.Playwright.Transport.Protocol.BindingCallInitializer : object {
    [CompilerGeneratedAttribute]
private Frame <Frame>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<JsonElement> <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private JSHandle <Handle>k__BackingField;
    [JsonPropertyNameAttribute("frame")]
public Frame Frame { get; public set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("args")]
public List`1<JsonElement> Args { get; public set; }
    [JsonPropertyNameAttribute("handle")]
public JSHandle Handle { get; public set; }
    [CompilerGeneratedAttribute]
public Frame get_Frame();
    [CompilerGeneratedAttribute]
public void set_Frame(Frame value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<JsonElement> get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(List`1<JsonElement> value);
    [CompilerGeneratedAttribute]
public JSHandle get_Handle();
    [CompilerGeneratedAttribute]
public void set_Handle(JSHandle value);
}
internal class Microsoft.Playwright.Transport.Protocol.BrowserContextInitializer : EventTargetInitializer {
    [CompilerGeneratedAttribute]
private bool <IsChromium>k__BackingField;
    [CompilerGeneratedAttribute]
private APIRequestContext <RequestContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Tracing <Tracing>k__BackingField;
    [JsonPropertyNameAttribute("isChromium")]
public bool IsChromium { get; public set; }
    [JsonPropertyNameAttribute("requestContext")]
public APIRequestContext RequestContext { get; public set; }
    [JsonPropertyNameAttribute("tracing")]
public Tracing Tracing { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsChromium();
    [CompilerGeneratedAttribute]
public void set_IsChromium(bool value);
    [CompilerGeneratedAttribute]
public APIRequestContext get_RequestContext();
    [CompilerGeneratedAttribute]
public void set_RequestContext(APIRequestContext value);
    [CompilerGeneratedAttribute]
public Tracing get_Tracing();
    [CompilerGeneratedAttribute]
public void set_Tracing(Tracing value);
}
internal class Microsoft.Playwright.Transport.Protocol.BrowserInitializer : object {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [JsonPropertyNameAttribute("version")]
public string Version { get; public set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.BrowserTypeInitializer : object {
    [CompilerGeneratedAttribute]
private string <ExecutablePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [JsonPropertyNameAttribute("executablePath")]
public string ExecutablePath { get; public set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ExecutablePath();
    [CompilerGeneratedAttribute]
public void set_ExecutablePath(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.CDPSessionInitializer : object {
}
internal class Microsoft.Playwright.Transport.Protocol.ClientSideCallMetadata : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<StackFrame> <Stack>k__BackingField;
    [JsonPropertyNameAttribute("id")]
public int Id { get; public set; }
    [JsonPropertyNameAttribute("stack")]
public List`1<StackFrame> Stack { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public List`1<StackFrame> get_Stack();
    [CompilerGeneratedAttribute]
public void set_Stack(List`1<StackFrame> value);
}
internal class Microsoft.Playwright.Transport.Protocol.ConsoleMessageLocation : object {
    [CompilerGeneratedAttribute]
private string <URL>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnNumber>k__BackingField;
    public string URL { get; public set; }
    public int LineNumber { get; public set; }
    public int ColumnNumber { get; public set; }
    [CompilerGeneratedAttribute]
public string get_URL();
    [CompilerGeneratedAttribute]
public void set_URL(string value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_ColumnNumber();
    [CompilerGeneratedAttribute]
public void set_ColumnNumber(int value);
    public virtual string ToString();
}
internal class Microsoft.Playwright.Transport.Protocol.DebugControllerInitializer : object {
}
internal class Microsoft.Playwright.Transport.Protocol.DeviceDescriptorEntry : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private BrowserNewContextOptions <Descriptor>k__BackingField;
    public string Name { get; public set; }
    public BrowserNewContextOptions Descriptor { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public BrowserNewContextOptions get_Descriptor();
    [CompilerGeneratedAttribute]
public void set_Descriptor(BrowserNewContextOptions value);
}
internal class Microsoft.Playwright.Transport.Protocol.DialogInitializer : object {
    [CompilerGeneratedAttribute]
private Page <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [JsonPropertyNameAttribute("page")]
public Page Page { get; public set; }
    [JsonPropertyNameAttribute("type")]
public string Type { get; public set; }
    [JsonPropertyNameAttribute("message")]
public string Message { get; public set; }
    [JsonPropertyNameAttribute("defaultValue")]
public string DefaultValue { get; public set; }
    [CompilerGeneratedAttribute]
public Page get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(Page value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.ElectronApplicationInitializer : EventTargetInitializer {
    [CompilerGeneratedAttribute]
private BrowserContext <Context>k__BackingField;
    [JsonPropertyNameAttribute("context")]
public BrowserContext Context { get; public set; }
    [CompilerGeneratedAttribute]
public BrowserContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(BrowserContext value);
}
internal class Microsoft.Playwright.Transport.Protocol.ElectronInitializer : object {
}
internal class Microsoft.Playwright.Transport.Protocol.ElementHandleInitializer : JSHandleInitializer {
}
internal class Microsoft.Playwright.Transport.Protocol.EventTargetInitializer : object {
}
internal class Microsoft.Playwright.Transport.Protocol.ExpectedTextValue : object {
    [CompilerGeneratedAttribute]
private string <String>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RegexSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RegexFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <MatchSubstring>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreCase>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NormalizeWhiteSpace>k__BackingField;
    [JsonPropertyNameAttribute("string")]
public string String { get; public set; }
    [JsonPropertyNameAttribute("regexSource")]
public string RegexSource { get; public set; }
    [JsonPropertyNameAttribute("regexFlags")]
public string RegexFlags { get; public set; }
    [JsonPropertyNameAttribute("matchSubstring")]
public Nullable`1<bool> MatchSubstring { get; public set; }
    [JsonPropertyNameAttribute("ignoreCase")]
public Nullable`1<bool> IgnoreCase { get; public set; }
    [JsonPropertyNameAttribute("normalizeWhiteSpace")]
public Nullable`1<bool> NormalizeWhiteSpace { get; public set; }
    [CompilerGeneratedAttribute]
public string get_String();
    [CompilerGeneratedAttribute]
public void set_String(string value);
    [CompilerGeneratedAttribute]
public string get_RegexSource();
    [CompilerGeneratedAttribute]
public void set_RegexSource(string value);
    [CompilerGeneratedAttribute]
public string get_RegexFlags();
    [CompilerGeneratedAttribute]
public void set_RegexFlags(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_MatchSubstring();
    [CompilerGeneratedAttribute]
public void set_MatchSubstring(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreCase();
    [CompilerGeneratedAttribute]
public void set_IgnoreCase(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NormalizeWhiteSpace();
    [CompilerGeneratedAttribute]
public void set_NormalizeWhiteSpace(Nullable`1<bool> value);
}
internal class Microsoft.Playwright.Transport.Protocol.FormField : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private FormFieldFile <File>k__BackingField;
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("value")]
public string Value { get; public set; }
    [JsonPropertyNameAttribute("file")]
public FormFieldFile File { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public FormFieldFile get_File();
    [CompilerGeneratedAttribute]
public void set_File(FormFieldFile value);
}
internal class Microsoft.Playwright.Transport.Protocol.FormFieldFile : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Buffer>k__BackingField;
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("mimeType")]
public string MimeType { get; public set; }
    [JsonPropertyNameAttribute("buffer")]
public Byte[] Buffer { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_MimeType();
    [CompilerGeneratedAttribute]
public void set_MimeType(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Buffer();
    [CompilerGeneratedAttribute]
public void set_Buffer(Byte[] value);
}
internal class Microsoft.Playwright.Transport.Protocol.FrameExpectOptions : object {
    [CompilerGeneratedAttribute]
private object <ExpressionArg>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpectedTextValue[] <ExpectedText>k__BackingField;
    [CompilerGeneratedAttribute]
private float <ExpectedNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ExpectedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseInnerText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNot>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Timeout>k__BackingField;
    public object ExpressionArg { get; public set; }
    public ExpectedTextValue[] ExpectedText { get; public set; }
    public float ExpectedNumber { get; public set; }
    public object ExpectedValue { get; public set; }
    public bool UseInnerText { get; public set; }
    public bool IsNot { get; public set; }
    public Nullable`1<float> Timeout { get; public set; }
    [CompilerGeneratedAttribute]
public object get_ExpressionArg();
    [CompilerGeneratedAttribute]
public void set_ExpressionArg(object value);
    [CompilerGeneratedAttribute]
public ExpectedTextValue[] get_ExpectedText();
    [CompilerGeneratedAttribute]
public void set_ExpectedText(ExpectedTextValue[] value);
    [CompilerGeneratedAttribute]
public float get_ExpectedNumber();
    [CompilerGeneratedAttribute]
public void set_ExpectedNumber(float value);
    [CompilerGeneratedAttribute]
public object get_ExpectedValue();
    [CompilerGeneratedAttribute]
public void set_ExpectedValue(object value);
    [CompilerGeneratedAttribute]
public bool get_UseInnerText();
    [CompilerGeneratedAttribute]
public void set_UseInnerText(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNot();
    [CompilerGeneratedAttribute]
public void set_IsNot(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<float> value);
}
internal class Microsoft.Playwright.Transport.Protocol.FrameExpectResult : object {
    [CompilerGeneratedAttribute]
private bool <Matches>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Received>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Log>k__BackingField;
    public bool Matches { get; public set; }
    public object Received { get; public set; }
    public String[] Log { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Matches();
    [CompilerGeneratedAttribute]
public void set_Matches(bool value);
    [CompilerGeneratedAttribute]
public object get_Received();
    [CompilerGeneratedAttribute]
public void set_Received(object value);
    [CompilerGeneratedAttribute]
public String[] get_Log();
    [CompilerGeneratedAttribute]
public void set_Log(String[] value);
}
internal class Microsoft.Playwright.Transport.Protocol.FrameInitializer : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Frame <ParentFrame>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<WaitUntilState> <LoadStates>k__BackingField;
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("parentFrame")]
public Frame ParentFrame { get; public set; }
    [JsonPropertyNameAttribute("loadStates")]
public List`1<WaitUntilState> LoadStates { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Frame get_ParentFrame();
    [CompilerGeneratedAttribute]
public void set_ParentFrame(Frame value);
    [CompilerGeneratedAttribute]
public List`1<WaitUntilState> get_LoadStates();
    [CompilerGeneratedAttribute]
public void set_LoadStates(List`1<WaitUntilState> value);
}
internal class Microsoft.Playwright.Transport.Protocol.HeaderEntry : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class Microsoft.Playwright.Transport.Protocol.InputFilesList : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Buffer>k__BackingField;
    public string Name { get; public set; }
    public string MimeType { get; public set; }
    public string Buffer { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_MimeType();
    [CompilerGeneratedAttribute]
public void set_MimeType(string value);
    [CompilerGeneratedAttribute]
public string get_Buffer();
    [CompilerGeneratedAttribute]
public void set_Buffer(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.JSHandleInitializer : object {
    [CompilerGeneratedAttribute]
private string <Preview>k__BackingField;
    [JsonPropertyNameAttribute("preview")]
public string Preview { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Preview();
    [CompilerGeneratedAttribute]
public void set_Preview(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.JsonPipeInitializer : object {
}
internal class Microsoft.Playwright.Transport.Protocol.LocalUtilsInitializer : object {
    [CompilerGeneratedAttribute]
private List`1<DeviceDescriptorEntry> <DeviceDescriptors>k__BackingField;
    [JsonPropertyNameAttribute("deviceDescriptors")]
public List`1<DeviceDescriptorEntry> DeviceDescriptors { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<DeviceDescriptorEntry> get_DeviceDescriptors();
    [CompilerGeneratedAttribute]
public void set_DeviceDescriptors(List`1<DeviceDescriptorEntry> value);
}
internal class Microsoft.Playwright.Transport.Protocol.Metadata : object {
    [CompilerGeneratedAttribute]
private MetadataLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Internal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StepId>k__BackingField;
    [JsonPropertyNameAttribute("location")]
public MetadataLocation Location { get; public set; }
    [JsonPropertyNameAttribute("apiName")]
public string ApiName { get; public set; }
    [JsonPropertyNameAttribute("internal")]
public Nullable`1<bool> Internal { get; public set; }
    [JsonPropertyNameAttribute("stepId")]
public string StepId { get; public set; }
    [CompilerGeneratedAttribute]
public MetadataLocation get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(MetadataLocation value);
    [CompilerGeneratedAttribute]
public string get_ApiName();
    [CompilerGeneratedAttribute]
public void set_ApiName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Internal();
    [CompilerGeneratedAttribute]
public void set_Internal(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_StepId();
    [CompilerGeneratedAttribute]
public void set_StepId(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.MetadataLocation : object {
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Column>k__BackingField;
    [JsonPropertyNameAttribute("file")]
public string File { get; public set; }
    [JsonPropertyNameAttribute("line")]
public Nullable`1<int> Line { get; public set; }
    [JsonPropertyNameAttribute("column")]
public Nullable`1<int> Column { get; public set; }
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(Nullable`1<int> value);
}
internal class Microsoft.Playwright.Transport.Protocol.NameValue : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("value")]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.NetworkCookie : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Expires>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Secure>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SameSite>k__BackingField;
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("value")]
public string Value { get; public set; }
    [JsonPropertyNameAttribute("domain")]
public string Domain { get; public set; }
    [JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [JsonPropertyNameAttribute("expires")]
public int Expires { get; public set; }
    [JsonPropertyNameAttribute("httpOnly")]
public bool HttpOnly { get; public set; }
    [JsonPropertyNameAttribute("secure")]
public bool Secure { get; public set; }
    [JsonPropertyNameAttribute("sameSite")]
public string SameSite { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
public void set_Domain(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public int get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(int value);
    [CompilerGeneratedAttribute]
public bool get_HttpOnly();
    [CompilerGeneratedAttribute]
public void set_HttpOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_Secure();
    [CompilerGeneratedAttribute]
public void set_Secure(bool value);
    [CompilerGeneratedAttribute]
public string get_SameSite();
    [CompilerGeneratedAttribute]
public void set_SameSite(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.OriginStorage : object {
    [CompilerGeneratedAttribute]
private string <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NameValue> <LocalStorage>k__BackingField;
    [JsonPropertyNameAttribute("origin")]
public string Origin { get; public set; }
    [JsonPropertyNameAttribute("localStorage")]
public List`1<NameValue> LocalStorage { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Origin();
    [CompilerGeneratedAttribute]
public void set_Origin(string value);
    [CompilerGeneratedAttribute]
public List`1<NameValue> get_LocalStorage();
    [CompilerGeneratedAttribute]
public void set_LocalStorage(List`1<NameValue> value);
}
internal class Microsoft.Playwright.Transport.Protocol.PageInitializer : EventTargetInitializer {
    [CompilerGeneratedAttribute]
private Frame <MainFrame>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewportSize <ViewportSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private Page <Opener>k__BackingField;
    [JsonPropertyNameAttribute("mainFrame")]
public Frame MainFrame { get; public set; }
    [JsonPropertyNameAttribute("viewportSize")]
public ViewportSize ViewportSize { get; public set; }
    [JsonPropertyNameAttribute("isClosed")]
public bool IsClosed { get; public set; }
    [JsonPropertyNameAttribute("opener")]
public Page Opener { get; public set; }
    [CompilerGeneratedAttribute]
public Frame get_MainFrame();
    [CompilerGeneratedAttribute]
public void set_MainFrame(Frame value);
    [CompilerGeneratedAttribute]
public ViewportSize get_ViewportSize();
    [CompilerGeneratedAttribute]
public void set_ViewportSize(ViewportSize value);
    [CompilerGeneratedAttribute]
public bool get_IsClosed();
    [CompilerGeneratedAttribute]
public void set_IsClosed(bool value);
    [CompilerGeneratedAttribute]
public Page get_Opener();
    [CompilerGeneratedAttribute]
public void set_Opener(Page value);
}
internal class Microsoft.Playwright.Transport.Protocol.PlaywrightInitializer : object {
    [CompilerGeneratedAttribute]
private BrowserType <Chromium>k__BackingField;
    [CompilerGeneratedAttribute]
private BrowserType <Bidi>k__BackingField;
    [CompilerGeneratedAttribute]
private BrowserType <Firefox>k__BackingField;
    [CompilerGeneratedAttribute]
private BrowserType <Webkit>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalUtils <Utils>k__BackingField;
    [CompilerGeneratedAttribute]
private Selectors <Selectors>k__BackingField;
    [CompilerGeneratedAttribute]
private Browser <PreLaunchedBrowser>k__BackingField;
    [CompilerGeneratedAttribute]
private AndroidDevice <PreConnectedAndroidDevice>k__BackingField;
    [CompilerGeneratedAttribute]
private SocksSupport <SocksSupport>k__BackingField;
    [JsonPropertyNameAttribute("chromium")]
public BrowserType Chromium { get; public set; }
    [JsonPropertyNameAttribute("bidi")]
public BrowserType Bidi { get; public set; }
    [JsonPropertyNameAttribute("firefox")]
public BrowserType Firefox { get; public set; }
    [JsonPropertyNameAttribute("webkit")]
public BrowserType Webkit { get; public set; }
    [JsonPropertyNameAttribute("utils")]
public LocalUtils Utils { get; public set; }
    [JsonPropertyNameAttribute("selectors")]
public Selectors Selectors { get; public set; }
    [JsonPropertyNameAttribute("preLaunchedBrowser")]
public Browser PreLaunchedBrowser { get; public set; }
    [JsonPropertyNameAttribute("preConnectedAndroidDevice")]
public AndroidDevice PreConnectedAndroidDevice { get; public set; }
    [JsonPropertyNameAttribute("socksSupport")]
public SocksSupport SocksSupport { get; public set; }
    [CompilerGeneratedAttribute]
public BrowserType get_Chromium();
    [CompilerGeneratedAttribute]
public void set_Chromium(BrowserType value);
    [CompilerGeneratedAttribute]
public BrowserType get_Bidi();
    [CompilerGeneratedAttribute]
public void set_Bidi(BrowserType value);
    [CompilerGeneratedAttribute]
public BrowserType get_Firefox();
    [CompilerGeneratedAttribute]
public void set_Firefox(BrowserType value);
    [CompilerGeneratedAttribute]
public BrowserType get_Webkit();
    [CompilerGeneratedAttribute]
public void set_Webkit(BrowserType value);
    [CompilerGeneratedAttribute]
public LocalUtils get_Utils();
    [CompilerGeneratedAttribute]
public void set_Utils(LocalUtils value);
    [CompilerGeneratedAttribute]
public Selectors get_Selectors();
    [CompilerGeneratedAttribute]
public void set_Selectors(Selectors value);
    [CompilerGeneratedAttribute]
public Browser get_PreLaunchedBrowser();
    [CompilerGeneratedAttribute]
public void set_PreLaunchedBrowser(Browser value);
    [CompilerGeneratedAttribute]
public AndroidDevice get_PreConnectedAndroidDevice();
    [CompilerGeneratedAttribute]
public void set_PreConnectedAndroidDevice(AndroidDevice value);
    [CompilerGeneratedAttribute]
public SocksSupport get_SocksSupport();
    [CompilerGeneratedAttribute]
public void set_SocksSupport(SocksSupport value);
}
internal class Microsoft.Playwright.Transport.Protocol.Point : object {
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    [JsonPropertyNameAttribute("x")]
public int X { get; public set; }
    [JsonPropertyNameAttribute("y")]
public int Y { get; public set; }
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public void set_X(int value);
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(int value);
}
internal class Microsoft.Playwright.Transport.Protocol.RecorderSource : object {
    [CompilerGeneratedAttribute]
private bool <IsRecorded>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RecorderSourceHighlight> <Highlight>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RevealLine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Group>k__BackingField;
    [JsonPropertyNameAttribute("isRecorded")]
public bool IsRecorded { get; public set; }
    [JsonPropertyNameAttribute("id")]
public string Id { get; public set; }
    [JsonPropertyNameAttribute("label")]
public string Label { get; public set; }
    [JsonPropertyNameAttribute("text")]
public string Text { get; public set; }
    [JsonPropertyNameAttribute("language")]
public string Language { get; public set; }
    [JsonPropertyNameAttribute("highlight")]
public List`1<RecorderSourceHighlight> Highlight { get; public set; }
    [JsonPropertyNameAttribute("revealLine")]
public Nullable`1<int> RevealLine { get; public set; }
    [JsonPropertyNameAttribute("group")]
public string Group { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsRecorded();
    [CompilerGeneratedAttribute]
public void set_IsRecorded(bool value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public List`1<RecorderSourceHighlight> get_Highlight();
    [CompilerGeneratedAttribute]
public void set_Highlight(List`1<RecorderSourceHighlight> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RevealLine();
    [CompilerGeneratedAttribute]
public void set_RevealLine(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Group();
    [CompilerGeneratedAttribute]
public void set_Group(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.RecorderSourceHighlight : object {
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [JsonPropertyNameAttribute("line")]
public int Line { get; public set; }
    [JsonPropertyNameAttribute("type")]
public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(int value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.RecordHarOptions : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlGlob>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlRegexSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlRegexFlags>k__BackingField;
    [JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [JsonPropertyNameAttribute("content")]
public string Content { get; public set; }
    [JsonPropertyNameAttribute("mode")]
public string Mode { get; public set; }
    [JsonPropertyNameAttribute("urlGlob")]
public string UrlGlob { get; public set; }
    [JsonPropertyNameAttribute("urlRegexSource")]
public string UrlRegexSource { get; public set; }
    [JsonPropertyNameAttribute("urlRegexFlags")]
public string UrlRegexFlags { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(string value);
    [CompilerGeneratedAttribute]
public string get_UrlGlob();
    [CompilerGeneratedAttribute]
public void set_UrlGlob(string value);
    [CompilerGeneratedAttribute]
public string get_UrlRegexSource();
    [CompilerGeneratedAttribute]
public void set_UrlRegexSource(string value);
    [CompilerGeneratedAttribute]
public string get_UrlRegexFlags();
    [CompilerGeneratedAttribute]
public void set_UrlRegexFlags(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.Rect : object {
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [JsonPropertyNameAttribute("x")]
public int X { get; public set; }
    [JsonPropertyNameAttribute("y")]
public int Y { get; public set; }
    [JsonPropertyNameAttribute("width")]
public int Width { get; public set; }
    [JsonPropertyNameAttribute("height")]
public int Height { get; public set; }
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public void set_X(int value);
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(int value);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
}
internal class Microsoft.Playwright.Transport.Protocol.RemoteAddr : object {
    [CompilerGeneratedAttribute]
private string <IpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [JsonPropertyNameAttribute("ipAddress")]
public string IpAddress { get; public set; }
    [JsonPropertyNameAttribute("port")]
public int Port { get; public set; }
    [CompilerGeneratedAttribute]
public string get_IpAddress();
    [CompilerGeneratedAttribute]
public void set_IpAddress(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
}
internal class Microsoft.Playwright.Transport.Protocol.RequestInitializer : object {
    [CompilerGeneratedAttribute]
private Frame <Frame>k__BackingField;
    [CompilerGeneratedAttribute]
private Worker <ServiceWorker>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <PostData>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NameValue> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNavigationRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private Request <RedirectedFrom>k__BackingField;
    [JsonPropertyNameAttribute("frame")]
public Frame Frame { get; public set; }
    [JsonPropertyNameAttribute("serviceWorker")]
public Worker ServiceWorker { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [JsonPropertyNameAttribute("resourceType")]
public string ResourceType { get; public set; }
    [JsonPropertyNameAttribute("method")]
public string Method { get; public set; }
    [JsonPropertyNameAttribute("postData")]
public Byte[] PostData { get; public set; }
    [JsonPropertyNameAttribute("headers")]
public List`1<NameValue> Headers { get; public set; }
    [JsonPropertyNameAttribute("isNavigationRequest")]
public bool IsNavigationRequest { get; public set; }
    [JsonPropertyNameAttribute("redirectedFrom")]
public Request RedirectedFrom { get; public set; }
    [CompilerGeneratedAttribute]
public Frame get_Frame();
    [CompilerGeneratedAttribute]
public void set_Frame(Frame value);
    [CompilerGeneratedAttribute]
public Worker get_ServiceWorker();
    [CompilerGeneratedAttribute]
public void set_ServiceWorker(Worker value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_ResourceType();
    [CompilerGeneratedAttribute]
public void set_ResourceType(string value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_PostData();
    [CompilerGeneratedAttribute]
public void set_PostData(Byte[] value);
    [CompilerGeneratedAttribute]
public List`1<NameValue> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(List`1<NameValue> value);
    [CompilerGeneratedAttribute]
public bool get_IsNavigationRequest();
    [CompilerGeneratedAttribute]
public void set_IsNavigationRequest(bool value);
    [CompilerGeneratedAttribute]
public Request get_RedirectedFrom();
    [CompilerGeneratedAttribute]
public void set_RedirectedFrom(Request value);
}
internal class Microsoft.Playwright.Transport.Protocol.RequestSizes : object {
    [CompilerGeneratedAttribute]
private int <RequestBodySize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequestHeadersSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResponseBodySize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResponseHeadersSize>k__BackingField;
    [JsonPropertyNameAttribute("requestBodySize")]
public int RequestBodySize { get; public set; }
    [JsonPropertyNameAttribute("requestHeadersSize")]
public int RequestHeadersSize { get; public set; }
    [JsonPropertyNameAttribute("responseBodySize")]
public int ResponseBodySize { get; public set; }
    [JsonPropertyNameAttribute("responseHeadersSize")]
public int ResponseHeadersSize { get; public set; }
    [CompilerGeneratedAttribute]
public int get_RequestBodySize();
    [CompilerGeneratedAttribute]
public void set_RequestBodySize(int value);
    [CompilerGeneratedAttribute]
public int get_RequestHeadersSize();
    [CompilerGeneratedAttribute]
public void set_RequestHeadersSize(int value);
    [CompilerGeneratedAttribute]
public int get_ResponseBodySize();
    [CompilerGeneratedAttribute]
public void set_ResponseBodySize(int value);
    [CompilerGeneratedAttribute]
public int get_ResponseHeadersSize();
    [CompilerGeneratedAttribute]
public void set_ResponseHeadersSize(int value);
}
internal class Microsoft.Playwright.Transport.Protocol.ResourceTiming : object {
    [CompilerGeneratedAttribute]
private int <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DomainLookupStart>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DomainLookupEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConnectStart>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SecureConnectionStart>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConnectEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequestStart>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResponseStart>k__BackingField;
    [JsonPropertyNameAttribute("startTime")]
public int StartTime { get; public set; }
    [JsonPropertyNameAttribute("domainLookupStart")]
public int DomainLookupStart { get; public set; }
    [JsonPropertyNameAttribute("domainLookupEnd")]
public int DomainLookupEnd { get; public set; }
    [JsonPropertyNameAttribute("connectStart")]
public int ConnectStart { get; public set; }
    [JsonPropertyNameAttribute("secureConnectionStart")]
public int SecureConnectionStart { get; public set; }
    [JsonPropertyNameAttribute("connectEnd")]
public int ConnectEnd { get; public set; }
    [JsonPropertyNameAttribute("requestStart")]
public int RequestStart { get; public set; }
    [JsonPropertyNameAttribute("responseStart")]
public int ResponseStart { get; public set; }
    [CompilerGeneratedAttribute]
public int get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(int value);
    [CompilerGeneratedAttribute]
public int get_DomainLookupStart();
    [CompilerGeneratedAttribute]
public void set_DomainLookupStart(int value);
    [CompilerGeneratedAttribute]
public int get_DomainLookupEnd();
    [CompilerGeneratedAttribute]
public void set_DomainLookupEnd(int value);
    [CompilerGeneratedAttribute]
public int get_ConnectStart();
    [CompilerGeneratedAttribute]
public void set_ConnectStart(int value);
    [CompilerGeneratedAttribute]
public int get_SecureConnectionStart();
    [CompilerGeneratedAttribute]
public void set_SecureConnectionStart(int value);
    [CompilerGeneratedAttribute]
public int get_ConnectEnd();
    [CompilerGeneratedAttribute]
public void set_ConnectEnd(int value);
    [CompilerGeneratedAttribute]
public int get_RequestStart();
    [CompilerGeneratedAttribute]
public void set_RequestStart(int value);
    [CompilerGeneratedAttribute]
public int get_ResponseStart();
    [CompilerGeneratedAttribute]
public void set_ResponseStart(int value);
}
internal class Microsoft.Playwright.Transport.Protocol.ResponseInitializer : object {
    [CompilerGeneratedAttribute]
private Request <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusText>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NameValue> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestTimingResult <Timing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FromServiceWorker>k__BackingField;
    [JsonPropertyNameAttribute("request")]
public Request Request { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [JsonPropertyNameAttribute("status")]
public int Status { get; public set; }
    [JsonPropertyNameAttribute("statusText")]
public string StatusText { get; public set; }
    [JsonPropertyNameAttribute("headers")]
public List`1<NameValue> Headers { get; public set; }
    [JsonPropertyNameAttribute("timing")]
public RequestTimingResult Timing { get; public set; }
    [JsonPropertyNameAttribute("fromServiceWorker")]
public bool FromServiceWorker { get; public set; }
    [CompilerGeneratedAttribute]
public Request get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(Request value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public int get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(int value);
    [CompilerGeneratedAttribute]
public string get_StatusText();
    [CompilerGeneratedAttribute]
public void set_StatusText(string value);
    [CompilerGeneratedAttribute]
public List`1<NameValue> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(List`1<NameValue> value);
    [CompilerGeneratedAttribute]
public RequestTimingResult get_Timing();
    [CompilerGeneratedAttribute]
public void set_Timing(RequestTimingResult value);
    [CompilerGeneratedAttribute]
public bool get_FromServiceWorker();
    [CompilerGeneratedAttribute]
public void set_FromServiceWorker(bool value);
}
internal class Microsoft.Playwright.Transport.Protocol.RootInitializer : object {
}
internal class Microsoft.Playwright.Transport.Protocol.RouteInitializer : object {
    [CompilerGeneratedAttribute]
private Request <Request>k__BackingField;
    [JsonPropertyNameAttribute("request")]
public Request Request { get; public set; }
    [CompilerGeneratedAttribute]
public Request get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(Request value);
}
internal class Microsoft.Playwright.Transport.Protocol.SecurityDetails : object {
    [CompilerGeneratedAttribute]
private string <Issuer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ValidFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ValidTo>k__BackingField;
    [JsonPropertyNameAttribute("issuer")]
public string Issuer { get; public set; }
    [JsonPropertyNameAttribute("protocol")]
public string Protocol { get; public set; }
    [JsonPropertyNameAttribute("subjectName")]
public string SubjectName { get; public set; }
    [JsonPropertyNameAttribute("validFrom")]
public Nullable`1<int> ValidFrom { get; public set; }
    [JsonPropertyNameAttribute("validTo")]
public Nullable`1<int> ValidTo { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Issuer();
    [CompilerGeneratedAttribute]
public void set_Issuer(string value);
    [CompilerGeneratedAttribute]
public string get_Protocol();
    [CompilerGeneratedAttribute]
public void set_Protocol(string value);
    [CompilerGeneratedAttribute]
public string get_SubjectName();
    [CompilerGeneratedAttribute]
public void set_SubjectName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ValidFrom();
    [CompilerGeneratedAttribute]
public void set_ValidFrom(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ValidTo();
    [CompilerGeneratedAttribute]
public void set_ValidTo(Nullable`1<int> value);
}
internal class Microsoft.Playwright.Transport.Protocol.SelectorsInitializer : object {
}
internal class Microsoft.Playwright.Transport.Protocol.SerializedError : object {
    [CompilerGeneratedAttribute]
private SerializedErrorError <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonElement <Value>k__BackingField;
    [JsonPropertyNameAttribute("error")]
public SerializedErrorError Error { get; public set; }
    [JsonPropertyNameAttribute("value")]
public JsonElement Value { get; public set; }
    [CompilerGeneratedAttribute]
public SerializedErrorError get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(SerializedErrorError value);
    [CompilerGeneratedAttribute]
public JsonElement get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(JsonElement value);
}
internal class Microsoft.Playwright.Transport.Protocol.SerializedErrorError : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stack>k__BackingField;
    [JsonPropertyNameAttribute("message")]
public string Message { get; public set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("stack")]
public string Stack { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Stack();
    [CompilerGeneratedAttribute]
public void set_Stack(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.SerializedValue : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <N>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <B>k__BackingField;
    [CompilerGeneratedAttribute]
private string <S>k__BackingField;
    [CompilerGeneratedAttribute]
private string <V>k__BackingField;
    [CompilerGeneratedAttribute]
private string <D>k__BackingField;
    [CompilerGeneratedAttribute]
private string <U>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Bi>k__BackingField;
    [CompilerGeneratedAttribute]
private SerializedValueE <E>k__BackingField;
    [CompilerGeneratedAttribute]
private SerializedValueR <R>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<JsonElement> <A>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SerializedValueO> <O>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <H>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Ref>k__BackingField;
    [JsonPropertyNameAttribute("n")]
public Nullable`1<int> N { get; public set; }
    [JsonPropertyNameAttribute("b")]
public Nullable`1<bool> B { get; public set; }
    [JsonPropertyNameAttribute("s")]
public string S { get; public set; }
    [JsonPropertyNameAttribute("v")]
public string V { get; public set; }
    [JsonPropertyNameAttribute("d")]
public string D { get; public set; }
    [JsonPropertyNameAttribute("u")]
public string U { get; public set; }
    [JsonPropertyNameAttribute("bi")]
public string Bi { get; public set; }
    [JsonPropertyNameAttribute("e")]
public SerializedValueE E { get; public set; }
    [JsonPropertyNameAttribute("r")]
public SerializedValueR R { get; public set; }
    [JsonPropertyNameAttribute("a")]
public List`1<JsonElement> A { get; public set; }
    [JsonPropertyNameAttribute("o")]
public List`1<SerializedValueO> O { get; public set; }
    [JsonPropertyNameAttribute("h")]
public Nullable`1<int> H { get; public set; }
    [JsonPropertyNameAttribute("id")]
public Nullable`1<int> Id { get; public set; }
    [JsonPropertyNameAttribute("ref")]
public Nullable`1<int> Ref { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_N();
    [CompilerGeneratedAttribute]
public void set_N(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_B();
    [CompilerGeneratedAttribute]
public void set_B(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_S();
    [CompilerGeneratedAttribute]
public void set_S(string value);
    [CompilerGeneratedAttribute]
public string get_V();
    [CompilerGeneratedAttribute]
public void set_V(string value);
    [CompilerGeneratedAttribute]
public string get_D();
    [CompilerGeneratedAttribute]
public void set_D(string value);
    [CompilerGeneratedAttribute]
public string get_U();
    [CompilerGeneratedAttribute]
public void set_U(string value);
    [CompilerGeneratedAttribute]
public string get_Bi();
    [CompilerGeneratedAttribute]
public void set_Bi(string value);
    [CompilerGeneratedAttribute]
public SerializedValueE get_E();
    [CompilerGeneratedAttribute]
public void set_E(SerializedValueE value);
    [CompilerGeneratedAttribute]
public SerializedValueR get_R();
    [CompilerGeneratedAttribute]
public void set_R(SerializedValueR value);
    [CompilerGeneratedAttribute]
public List`1<JsonElement> get_A();
    [CompilerGeneratedAttribute]
public void set_A(List`1<JsonElement> value);
    [CompilerGeneratedAttribute]
public List`1<SerializedValueO> get_O();
    [CompilerGeneratedAttribute]
public void set_O(List`1<SerializedValueO> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_H();
    [CompilerGeneratedAttribute]
public void set_H(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Ref();
    [CompilerGeneratedAttribute]
public void set_Ref(Nullable`1<int> value);
}
internal class Microsoft.Playwright.Transport.Protocol.SerializedValueE : object {
    [CompilerGeneratedAttribute]
private string <M>k__BackingField;
    [CompilerGeneratedAttribute]
private string <N>k__BackingField;
    [CompilerGeneratedAttribute]
private string <S>k__BackingField;
    [JsonPropertyNameAttribute("m")]
public string M { get; public set; }
    [JsonPropertyNameAttribute("n")]
public string N { get; public set; }
    [JsonPropertyNameAttribute("s")]
public string S { get; public set; }
    [CompilerGeneratedAttribute]
public string get_M();
    [CompilerGeneratedAttribute]
public void set_M(string value);
    [CompilerGeneratedAttribute]
public string get_N();
    [CompilerGeneratedAttribute]
public void set_N(string value);
    [CompilerGeneratedAttribute]
public string get_S();
    [CompilerGeneratedAttribute]
public void set_S(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.SerializedValueO : object {
    [CompilerGeneratedAttribute]
private string <K>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonElement <V>k__BackingField;
    [JsonPropertyNameAttribute("k")]
public string K { get; public set; }
    [JsonPropertyNameAttribute("v")]
public JsonElement V { get; public set; }
    [CompilerGeneratedAttribute]
public string get_K();
    [CompilerGeneratedAttribute]
public void set_K(string value);
    [CompilerGeneratedAttribute]
public JsonElement get_V();
    [CompilerGeneratedAttribute]
public void set_V(JsonElement value);
}
internal class Microsoft.Playwright.Transport.Protocol.SerializedValueR : object {
    [CompilerGeneratedAttribute]
private string <P>k__BackingField;
    [CompilerGeneratedAttribute]
private string <F>k__BackingField;
    [JsonPropertyNameAttribute("p")]
public string P { get; public set; }
    [JsonPropertyNameAttribute("f")]
public string F { get; public set; }
    [CompilerGeneratedAttribute]
public string get_P();
    [CompilerGeneratedAttribute]
public void set_P(string value);
    [CompilerGeneratedAttribute]
public string get_F();
    [CompilerGeneratedAttribute]
public void set_F(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.SetInputFilesFiles : object {
    [CompilerGeneratedAttribute]
private InputFilesList[] <Payloads>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LocalPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private WritableStream[] <Streams>k__BackingField;
    [CompilerGeneratedAttribute]
private WritableStream <DirectoryStream>k__BackingField;
    public InputFilesList[] Payloads { get; public set; }
    public String[] LocalPaths { get; public set; }
    public string LocalDirectory { get; public set; }
    public WritableStream[] Streams { get; public set; }
    public WritableStream DirectoryStream { get; public set; }
    [CompilerGeneratedAttribute]
public InputFilesList[] get_Payloads();
    [CompilerGeneratedAttribute]
public void set_Payloads(InputFilesList[] value);
    [CompilerGeneratedAttribute]
public String[] get_LocalPaths();
    [CompilerGeneratedAttribute]
public void set_LocalPaths(String[] value);
    [CompilerGeneratedAttribute]
public string get_LocalDirectory();
    [CompilerGeneratedAttribute]
public void set_LocalDirectory(string value);
    [CompilerGeneratedAttribute]
public WritableStream[] get_Streams();
    [CompilerGeneratedAttribute]
public void set_Streams(WritableStream[] value);
    [CompilerGeneratedAttribute]
public WritableStream get_DirectoryStream();
    [CompilerGeneratedAttribute]
public void set_DirectoryStream(WritableStream value);
}
internal class Microsoft.Playwright.Transport.Protocol.SetNetworkCookie : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Expires>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HttpOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Secure>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SameSite>k__BackingField;
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("value")]
public string Value { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [JsonPropertyNameAttribute("domain")]
public string Domain { get; public set; }
    [JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [JsonPropertyNameAttribute("expires")]
public Nullable`1<int> Expires { get; public set; }
    [JsonPropertyNameAttribute("httpOnly")]
public Nullable`1<bool> HttpOnly { get; public set; }
    [JsonPropertyNameAttribute("secure")]
public Nullable`1<bool> Secure { get; public set; }
    [JsonPropertyNameAttribute("sameSite")]
public string SameSite { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
public void set_Domain(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HttpOnly();
    [CompilerGeneratedAttribute]
public void set_HttpOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Secure();
    [CompilerGeneratedAttribute]
public void set_Secure(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_SameSite();
    [CompilerGeneratedAttribute]
public void set_SameSite(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.SocksSupportInitializer : object {
}
internal class Microsoft.Playwright.Transport.Protocol.StackFrame : object {
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Function>k__BackingField;
    [JsonPropertyNameAttribute("file")]
public string File { get; public set; }
    [JsonPropertyNameAttribute("line")]
public int Line { get; public set; }
    [JsonPropertyNameAttribute("column")]
public int Column { get; public set; }
    [JsonPropertyNameAttribute("function")]
public string Function { get; public set; }
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(int value);
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(int value);
    [CompilerGeneratedAttribute]
public string get_Function();
    [CompilerGeneratedAttribute]
public void set_Function(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.StreamInitializer : object {
}
internal class Microsoft.Playwright.Transport.Protocol.TracingInitializer : object {
}
internal class Microsoft.Playwright.Transport.Protocol.WebSocketInitializer : EventTargetInitializer {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.WorkerInitializer : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
internal class Microsoft.Playwright.Transport.Protocol.WritableStreamInitializer : object {
}
internal class Microsoft.Playwright.Transport.StdIOTransport : object {
    private static int DefaultBufferSize;
    private Process _process;
    private CancellationTokenSource _readerCancellationSource;
    private Task _getResponseTask;
    private List`1<byte> _data;
    private Nullable`1<int> _currentMessageSize;
    [CompilerGeneratedAttribute]
private EventHandler`1<Byte[]> MessageReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<Exception> TransportClosed;
    [CompilerGeneratedAttribute]
private EventHandler`1<string> LogReceived;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    public bool IsClosed { get; private set; }
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public void add_MessageReceived(EventHandler`1<Byte[]> value);
    [CompilerGeneratedAttribute]
public void remove_MessageReceived(EventHandler`1<Byte[]> value);
    [CompilerGeneratedAttribute]
public void add_TransportClosed(EventHandler`1<Exception> value);
    [CompilerGeneratedAttribute]
public void remove_TransportClosed(EventHandler`1<Exception> value);
    [CompilerGeneratedAttribute]
public void add_LogReceived(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public void remove_LogReceived(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_IsClosed();
    [CompilerGeneratedAttribute]
private void set_IsClosed(bool value);
    public sealed virtual void Dispose();
    public void Close(Exception closeReason);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Transport.StdIOTransport/<SendAsync>d__23")]
public Task SendAsync(Byte[] message);
    private static Process GetProcess(string driverArgs);
    private static void StartProcessWithUTF8IOEncoding(Process process);
    private static Task ScheduleTransportTaskAsync(Func`2<CancellationToken, Task> func, CancellationToken cancellationToken);
    private void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Microsoft.Playwright.Transport.StdIOTransport/<GetResponseAsync>d__28")]
private Task GetResponseAsync(CancellationToken token);
    private void ProcessStream(CancellationToken token);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0(object _, EventArgs _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_1(object _, DataReceivedEventArgs error);
}
public enum Microsoft.Playwright.UnrouteBehavior : Enum {
    public int value__;
    [EnumMemberAttribute]
public static UnrouteBehavior Wait;
    [EnumMemberAttribute]
public static UnrouteBehavior IgnoreErrors;
    [EnumMemberAttribute]
public static UnrouteBehavior Default;
}
public class Microsoft.Playwright.ViewportSize : object {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [RequiredAttribute]
[JsonPropertyNameAttribute("width")]
public int Width { get; public set; }
    [RequiredAttribute]
[JsonPropertyNameAttribute("height")]
public int Height { get; public set; }
    public static ViewportSize NoViewport { get; }
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    public static ViewportSize get_NoViewport();
}
public enum Microsoft.Playwright.WaitForSelectorState : Enum {
    public int value__;
    [EnumMemberAttribute]
public static WaitForSelectorState Attached;
    [EnumMemberAttribute]
public static WaitForSelectorState Detached;
    [EnumMemberAttribute]
public static WaitForSelectorState Visible;
    [EnumMemberAttribute]
public static WaitForSelectorState Hidden;
}
public enum Microsoft.Playwright.WaitUntilState : Enum {
    public int value__;
    [EnumMemberAttribute]
public static WaitUntilState Load;
    [EnumMemberAttribute]
public static WaitUntilState DOMContentLoaded;
    [EnumMemberAttribute]
public static WaitUntilState NetworkIdle;
    [EnumMemberAttribute]
public static WaitUntilState Commit;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
