[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.PowerPlatform.Dataverse.Client.AttributeData : object {
    private string attributeLabel;
    private AttributeTypeCode attributeType;
    private string schemaName;
    private string displayValue;
    private object actualValue;
    private bool isUnsupported;
    public object ActualValue { get; public set; }
    public string AttributeLabel { get; public set; }
    public AttributeTypeCode AttributeType { get; public set; }
    public string DisplayValue { get; public set; }
    public bool IsUnsupported { get; public set; }
    public string SchemaName { get; public set; }
    public object get_ActualValue();
    public void set_ActualValue(object value);
    public string get_AttributeLabel();
    public void set_AttributeLabel(string value);
    public AttributeTypeCode get_AttributeType();
    public void set_AttributeType(AttributeTypeCode value);
    public string get_DisplayValue();
    public void set_DisplayValue(string value);
    public bool get_IsUnsupported();
    public void set_IsUnsupported(bool value);
    public string get_SchemaName();
    public void set_SchemaName(string value);
}
public class Microsoft.PowerPlatform.Dataverse.Client.Auth.AuthenticationDetails : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Authority>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Resource>k__BackingField;
    public bool Success { get; internal set; }
    public Uri Authority { get; internal set; }
    public Uri Resource { get; internal set; }
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
internal void set_Success(bool value);
    [CompilerGeneratedAttribute]
public Uri get_Authority();
    [CompilerGeneratedAttribute]
internal void set_Authority(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_Resource();
    [CompilerGeneratedAttribute]
internal void set_Resource(Uri value);
}
public class Microsoft.PowerPlatform.Dataverse.Client.Auth.AuthorityResolver : object {
    private static string AuthenticateHeader;
    private static string Bearer;
    private static string AuthorityKey;
    private static string ResourceKey;
    private HttpClient _httpClient;
    private Action`2<TraceEventType, string> _logger;
    public AuthorityResolver(HttpClient httpClient, Action`2<TraceEventType, string> logger);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Auth.AuthorityResolver/<ProbeForExpectedAuthentication>d__7")]
public Task`1<AuthenticationDetails> ProbeForExpectedAuthentication(Uri endpoint, bool isOnPrem);
    private void LogError(string message);
}
internal class Microsoft.PowerPlatform.Dataverse.Client.Auth.AuthProcessor : object {
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Auth.AuthProcessor/<ExecuteAuthenticateServiceProcessAsync>d__0")]
internal static Task`1<ExecuteAuthenticationResults> ExecuteAuthenticateServiceProcessAsync(Uri serviceUrl, ClientCredentials clientCredentials, X509Certificate2 userCert, string clientId, Uri redirectUri, PromptBehavior promptBehavior, bool isOnPrem, string authority, object msalAuthClient, DataverseTraceLogger logSink, bool useDefaultCreds, SecureString clientSecret, bool addVersionInfoToUri, IAccount user, MemoryBackedTokenCache memoryBackedTokenCache, string tokenCacheStorePath);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Auth.AuthProcessor/<ObtainAccessTokenAsync>d__1")]
internal static Task`1<AuthenticationResult> ObtainAccessTokenAsync(IPublicClientApplication publicAppClient, List`1<string> scopes, IAccount account, PromptBehavior promptBehavior, ClientCredentials clientCredentials, bool useDefaultCreds, DataverseTraceLogger logSink);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Auth.AuthProcessor/<ObtainAccessTokenAsync>d__2")]
internal static Task`1<AuthenticationResult> ObtainAccessTokenAsync(IConfidentialClientApplication confidentialAppClient, List`1<string> scopes, DataverseTraceLogger logSink);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Auth.AuthProcessor/<TryGetAccountFromCache>d__3")]
internal static Task`1<IAccount> TryGetAccountFromCache(IPublicClientApplication publicAppClient, string loginHint);
    internal static UriBuilder GetUriBuilderWithVersion(Uri discoveryServiceUri);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Auth.AuthProcessor/<GetAuthorityFromTargetServiceAsync>d__5")]
private static Task`1<AuthenticationDetails> GetAuthorityFromTargetServiceAsync(IHttpClientFactory clientFactory, Uri targetServiceUrl, DataverseTraceLogger logger, bool isOnPrem);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Auth.AuthProcessor/<ProcessMsalExecptionAsync>d__6")]
private static Task`1<ExecuteAuthenticationResults> ProcessMsalExecptionAsync(Uri serviceUrl, ClientCredentials clientCredentials, X509Certificate2 userCert, string clientId, Uri redirectUri, PromptBehavior promptBehavior, bool isOnPrem, string authority, object msalAuthClient, DataverseTraceLogger logSink, bool useDefaultCreds, MemoryBackedTokenCache memoryBackedTokenCache, string tokenCacheStorePath, MsalException msalEx);
}
internal static class Microsoft.PowerPlatform.Dataverse.Client.Auth.EncodingHelper : object {
    private static int MaxUrlEncodingSize;
    public static string UrlEncode(string message);
    public static string UrlDecode(string message);
    public static void AddKeyValueString(StringBuilder messageBuilder, string key, string value);
    public static Dictionary`2<string, string> ParseKeyValueList(string input, char delimiter, bool urlDecode, bool lowercaseKeys);
    public static Dictionary`2<string, string> ParseKeyValueListStrict(string input, char delimiter, bool urlDecode, bool lowercaseKeys);
    private static Dictionary`2<string, string> ParseKeyValueList(string input, char delimiter, bool urlDecode, bool lowercaseKeys, bool strict);
    public static Dictionary`2<string, string> ParseKeyValueList(string input, char delimiter, bool urlDecode);
    public static Stream GenerateStreamFromString(string s);
    public static T DeserializeResponse(string response);
    internal static string Base64Encode(string input);
    internal static string Base64Decode(string encodedString);
    internal static Char[] UrlEncode(Char[] message);
    internal static List`1<string> SplitWithQuotes(string input, char delimiter);
    internal static void AddKeyValueString(StringBuilder messageBuilder, string key, Char[] value);
    internal static string GetString(Byte[] bytes);
}
internal class Microsoft.PowerPlatform.Dataverse.Client.Auth.ExecuteAuthenticationResults : object {
    [CompilerGeneratedAttribute]
private AuthenticationResult <MsalAuthResult>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <TargetServiceUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private object <MsalAuthClient>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Authority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private IAccount <UserIdent>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryBackedTokenCache <MemTokenCache>k__BackingField;
    public AuthenticationResult MsalAuthResult { get; public set; }
    public Uri TargetServiceUrl { get; public set; }
    public object MsalAuthClient { get; public set; }
    public string Authority { get; public set; }
    public string Resource { get; public set; }
    public IAccount UserIdent { get; public set; }
    public MemoryBackedTokenCache MemTokenCache { get; public set; }
    [CompilerGeneratedAttribute]
public AuthenticationResult get_MsalAuthResult();
    [CompilerGeneratedAttribute]
public void set_MsalAuthResult(AuthenticationResult value);
    [CompilerGeneratedAttribute]
public Uri get_TargetServiceUrl();
    [CompilerGeneratedAttribute]
public void set_TargetServiceUrl(Uri value);
    [CompilerGeneratedAttribute]
public object get_MsalAuthClient();
    [CompilerGeneratedAttribute]
public void set_MsalAuthClient(object value);
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
public void set_Authority(string value);
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
public void set_Resource(string value);
    [CompilerGeneratedAttribute]
public IAccount get_UserIdent();
    [CompilerGeneratedAttribute]
public void set_UserIdent(IAccount value);
    [CompilerGeneratedAttribute]
public MemoryBackedTokenCache get_MemTokenCache();
    [CompilerGeneratedAttribute]
public void set_MemTokenCache(MemoryBackedTokenCache value);
    internal string GetAuthTokenAndProperties(AuthenticationResult& msalAuthResult, Uri& targetServiceUrl, Object& msalAuthClient, String& authority, String& resource, IAccount& userIdent, MemoryBackedTokenCache& memoryBackedTokenCache);
}
internal class Microsoft.PowerPlatform.Dataverse.Client.Auth.MSALHttpClientFactory : object {
    public sealed virtual HttpClient GetHttpClient();
}
internal class Microsoft.PowerPlatform.Dataverse.Client.Auth.MSALHttpRetryHandlerHelper : DelegatingHandler {
    private int MaxRetryCount;
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Auth.MSALHttpRetryHandlerHelper/<SendAsync>d__1")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
internal static class Microsoft.PowerPlatform.Dataverse.Client.Auth.OnPremises_Auth : object {
    internal static object CreateAndAuthenticateProxy(IServiceManagement`1<T> servicecfg, Uri ServiceUri, Uri homeRealm, ClientCredentials userCredentials, string LogString, TimeSpan MaxConnectionTimeout, DataverseTraceLogger logSink);
    private static AuthenticationCredentials ClaimsIFDFailOverAuth(IServiceManagement`1<T> servicecfg, Uri homeRealm, ClientCredentials userCredentials, int depthLevel, bool tryNetworkCred);
}
public enum Microsoft.PowerPlatform.Dataverse.Client.Auth.PromptBehavior : Enum {
    public int value__;
    public static PromptBehavior Auto;
    public static PromptBehavior Always;
    public static PromptBehavior RefreshSession;
    public static PromptBehavior SelectAccount;
    public static PromptBehavior Never;
}
internal class Microsoft.PowerPlatform.Dataverse.Client.Auth.TokenCache.FileBackedTokenCache : object {
    private StorageCreationProperties _storageProps;
    public FileBackedTokenCache(FileBackedTokenCacheHints cacheOptions);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Auth.TokenCache.FileBackedTokenCache/<Initialize>d__2")]
public Task Initialize(ITokenCache tokenCache);
}
internal class Microsoft.PowerPlatform.Dataverse.Client.Auth.TokenCache.FileBackedTokenCacheHints : object {
    [CompilerGeneratedAttribute]
private string <cacheFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <cacheFileDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <linuxSchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <linuxCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <linuxLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyValuePair`2<string, string> <linuxAttr1>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyValuePair`2<string, string> <linuxAttr2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <macKeyChainServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <macKeyChainServiceAccount>k__BackingField;
    public string cacheFileName { get; public set; }
    public string cacheFileDirectory { get; public set; }
    public string linuxSchemaName { get; public set; }
    public string linuxCollection { get; public set; }
    public string linuxLabel { get; public set; }
    public KeyValuePair`2<string, string> linuxAttr1 { get; public set; }
    public KeyValuePair`2<string, string> linuxAttr2 { get; public set; }
    public string macKeyChainServiceName { get; public set; }
    public string macKeyChainServiceAccount { get; public set; }
    public FileBackedTokenCacheHints(string tokenPathAndFileName);
    [CompilerGeneratedAttribute]
public string get_cacheFileName();
    [CompilerGeneratedAttribute]
public void set_cacheFileName(string value);
    [CompilerGeneratedAttribute]
public string get_cacheFileDirectory();
    [CompilerGeneratedAttribute]
public void set_cacheFileDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_linuxSchemaName();
    [CompilerGeneratedAttribute]
public void set_linuxSchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_linuxCollection();
    [CompilerGeneratedAttribute]
public void set_linuxCollection(string value);
    [CompilerGeneratedAttribute]
public string get_linuxLabel();
    [CompilerGeneratedAttribute]
public void set_linuxLabel(string value);
    [CompilerGeneratedAttribute]
public KeyValuePair`2<string, string> get_linuxAttr1();
    [CompilerGeneratedAttribute]
public void set_linuxAttr1(KeyValuePair`2<string, string> value);
    [CompilerGeneratedAttribute]
public KeyValuePair`2<string, string> get_linuxAttr2();
    [CompilerGeneratedAttribute]
public void set_linuxAttr2(KeyValuePair`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_macKeyChainServiceName();
    [CompilerGeneratedAttribute]
public void set_macKeyChainServiceName(string value);
    [CompilerGeneratedAttribute]
public string get_macKeyChainServiceAccount();
    [CompilerGeneratedAttribute]
public void set_macKeyChainServiceAccount(string value);
}
internal class Microsoft.PowerPlatform.Dataverse.Client.Auth.TokenCache.MemoryBackedTokenCache : object {
    private IMemoryCache _memoryCache;
    private MemoryTokenCacheOptions _tokenCacheOptions;
    public MemoryBackedTokenCache(MemoryTokenCacheOptions tokenCacheOptions);
    public void Initialize(ITokenCache tokenCache);
    public void ClearCache();
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Auth.TokenCache.MemoryBackedTokenCache/<OnBeforeAccessAsync>d__5")]
private Task OnBeforeAccessAsync(TokenCacheNotificationArgs args);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Auth.TokenCache.MemoryBackedTokenCache/<OnAfterAccessAsync>d__6")]
private Task OnAfterAccessAsync(TokenCacheNotificationArgs args);
    protected Task RemoveKeyAsync(string cacheKey);
    protected Task`1<Byte[]> ReadCacheBytesAsync(string cacheKey);
    protected Task WriteCacheBytesAsync(string cacheKey, Byte[] bytes, MemoryCacheSerializerHints cacheSerializerHints);
    private static MemoryCacheSerializerHints CreateHintsFromArgs(TokenCacheNotificationArgs args);
}
internal class Microsoft.PowerPlatform.Dataverse.Client.Auth.TokenCache.MemoryCacheSerializerHints : object {
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <SuggestedCacheExpiry>k__BackingField;
    public CancellationToken CancellationToken { get; public set; }
    public Nullable`1<DateTimeOffset> SuggestedCacheExpiry { get; public set; }
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_SuggestedCacheExpiry();
    [CompilerGeneratedAttribute]
public void set_SuggestedCacheExpiry(Nullable`1<DateTimeOffset> value);
}
internal class Microsoft.PowerPlatform.Dataverse.Client.Auth.TokenCache.MemoryTokenCacheOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <AbsoluteExpirationRelativeToNow>k__BackingField;
    public TimeSpan AbsoluteExpirationRelativeToNow { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_AbsoluteExpirationRelativeToNow();
    [CompilerGeneratedAttribute]
public void set_AbsoluteExpirationRelativeToNow(TimeSpan value);
}
public enum Microsoft.PowerPlatform.Dataverse.Client.AuthenticationType : Enum {
    public int value__;
    public static AuthenticationType AD;
    public static AuthenticationType OAuth;
    public static AuthenticationType Certificate;
    public static AuthenticationType ClientSecret;
    public static AuthenticationType ExternalTokenManagement;
    public static AuthenticationType InvalidConnection;
}
public class Microsoft.PowerPlatform.Dataverse.Client.BatchItemOrganizationRequest : object {
    [CompilerGeneratedAttribute]
private OrganizationRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RequestReferenceNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestDebugMessage>k__BackingField;
    public OrganizationRequest Request { get; public set; }
    public Guid RequestReferenceNumber { get; public set; }
    public string RequestDebugMessage { get; public set; }
    [CompilerGeneratedAttribute]
public OrganizationRequest get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(OrganizationRequest value);
    [CompilerGeneratedAttribute]
public Guid get_RequestReferenceNumber();
    [CompilerGeneratedAttribute]
public void set_RequestReferenceNumber(Guid value);
    [CompilerGeneratedAttribute]
public string get_RequestDebugMessage();
    [CompilerGeneratedAttribute]
public void set_RequestDebugMessage(string value);
}
internal class Microsoft.PowerPlatform.Dataverse.Client.BatchManager : object {
    private Dictionary`2<Guid, RequestBatch> RequestBatches;
    private int MaxNumberOfBatches;
    private int MaxNumberOfRequestsInABatch;
    private DataverseTraceLogger logger;
    public BatchManager(DataverseTraceLogger traceLogger, int MaxBatches, int MaxRequestPerBatch, bool IsClonedConnection);
    public Guid CreateNewBatch(string name, bool returnResults, bool continueOnError);
    public RequestBatch GetRequestBatchById(Guid batchId);
    public RequestBatch GetRequestBatchByName(string batchName);
    public bool AddNewRequestToBatch(Guid batchId, OrganizationRequest request, string debugMsg);
    public void RemoveBatch(Guid batchId);
}
public enum Microsoft.PowerPlatform.Dataverse.Client.BatchStatus : Enum {
    public int value__;
    public static BatchStatus Waiting;
    public static BatchStatus Running;
    public static BatchStatus Complete;
}
public class Microsoft.PowerPlatform.Dataverse.Client.BooleanAttributeData : AttributeData {
    [CompilerGeneratedAttribute]
private OptionMetadata[] <BooleanOptions>k__BackingField;
    public OptionMetadata[] BooleanOptions { get; public set; }
    [CompilerGeneratedAttribute]
public OptionMetadata[] get_BooleanOptions();
    [CompilerGeneratedAttribute]
public void set_BooleanOptions(OptionMetadata[] value);
}
public abstract class Microsoft.PowerPlatform.Dataverse.Client.Builder.AbstractClientRequestBuilder`1 : object {
    private IOrganizationServiceAsync2 _client;
    private Nullable`1<Guid> _correlationId;
    private Nullable`1<Guid> _requestId;
    private Dictionary`2<string, string> _headers;
    private Nullable`1<Guid> _aadOidId;
    private Nullable`1<Guid> _crmUserId;
    internal AbstractClientRequestBuilder`1(IOrganizationServiceAsync2 client);
    public T WithRequestId(Guid requestId);
    public T WithCorrelationId(Guid correlationId);
    public T WithHeader(string key, string value);
    public T WithHeaders(IDictionary`2<string, string> headers);
    public T WithUserObjectId(Guid userObjectId);
    public T WithCrmUserId(Guid crmUserId);
    internal OrganizationRequest BuildRequest(OrganizationRequest request);
    private void ClearRequest();
    public sealed virtual Task AssociateAsync(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities, CancellationToken cancellationToken);
    public sealed virtual Task`1<Guid> CreateAsync(Entity entity, CancellationToken cancellationToken);
    public sealed virtual Task`1<Entity> CreateAndReturnAsync(Entity entity, CancellationToken cancellationToken);
    public sealed virtual Task DeleteAsync(string entityName, Guid id, CancellationToken cancellationToken);
    public sealed virtual Task DisassociateAsync(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities, CancellationToken cancellationToken);
    public sealed virtual Task`1<OrganizationResponse> ExecuteAsync(OrganizationRequest request, CancellationToken cancellationToken);
    public sealed virtual Task`1<Entity> RetrieveAsync(string entityName, Guid id, ColumnSet columnSet, CancellationToken cancellationToken);
    public sealed virtual Task`1<EntityCollection> RetrieveMultipleAsync(QueryBase query, CancellationToken cancellationToken);
    public sealed virtual Task UpdateAsync(Entity entity, CancellationToken cancellationToken);
    public sealed virtual Task`1<Guid> CreateAsync(Entity entity);
    public sealed virtual Task`1<Entity> RetrieveAsync(string entityName, Guid id, ColumnSet columnSet);
    public sealed virtual Task UpdateAsync(Entity entity);
    public sealed virtual Task DeleteAsync(string entityName, Guid id);
    public sealed virtual Task`1<OrganizationResponse> ExecuteAsync(OrganizationRequest request);
    public sealed virtual Task AssociateAsync(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    public sealed virtual Task DisassociateAsync(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    public sealed virtual Task`1<EntityCollection> RetrieveMultipleAsync(QueryBase query);
    public sealed virtual Guid Create(Entity entity);
    public sealed virtual Entity Retrieve(string entityName, Guid id, ColumnSet columnSet);
    public sealed virtual void Update(Entity entity);
    public sealed virtual void Delete(string entityName, Guid id);
    public sealed virtual OrganizationResponse Execute(OrganizationRequest request);
    public sealed virtual void Associate(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    public sealed virtual void Disassociate(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    public sealed virtual EntityCollection RetrieveMultiple(QueryBase query);
}
public class Microsoft.PowerPlatform.Dataverse.Client.Builder.ServiceClientRequestBuilder : AbstractClientRequestBuilder`1<ServiceClientRequestBuilder> {
    internal ServiceClientRequestBuilder(IOrganizationServiceAsync2 client);
}
internal class Microsoft.PowerPlatform.Dataverse.Client.ConnectionService : object {
    private OrganizationWebProxyClientAsync _svcWebClientProxy;
    private OrganizationServiceProxyAsync _svcOnPremClientProxy;
    private OrganizationWebProxyClientAsync _externalWebClientProxy;
    private WhoAmIResponse user;
    private string _hostname;
    private string _port;
    private OrganizationDetail _OrgDetail;
    private bool _orgReadingDetails;
    private string _organization;
    private AuthenticationType _eAuthType;
    private NetworkCredential _AccessCred;
    private ClientCredentials _UserClientCred;
    private string _InternetProtocalToUse;
    private Uri _ActualDataverseOrgUri;
    private string _LiveID;
    private SecureString _LivePass;
    private string _DataverseOnlineRegion;
    private string _ServiceCACHEName;
    private static IMemoryCache _clientMemoryCache;
    private PromptBehavior _promptBehavior;
    private string _tokenCachePath;
    private bool _isOnPremOAuth;
    private bool _isCalledbyExecuteRequest;
    private bool _isDefaultCredsLoginForOAuth;
    private IOptions`1<ConfigurationOptions> _configuration;
    private TimeSpan _tokenOffSetTimeSpan;
    internal string _clientId;
    private Uri _redirectUri;
    internal string _resource;
    internal static string _authority;
    private X509Certificate2 _certificateOfConnection;
    private string _certificateThumbprint;
    private StoreName _certificateStoreLocation;
    private Uri _targetInstanceUriToConnectTo;
    private string SoapOrgUriFormat;
    private static string _baseSoapOrgUriFormat;
    private string WebApiUriFormat;
    private static string _baseWebApiUriFormat;
    private static string _baselineGlobalDiscoveryFormater;
    private static string _commercialGlobalDiscoBaseWebAPIUriFormat;
    private static string _globlaDiscoVersion;
    private Guid _OrganizationId;
    private static TimeSpan _MaxConnectionTimeout;
    private Guid _TenantId;
    private string _EnvironmentId;
    private IOrganizationService _testSupportIOrg;
    private TimeSpan _retryPauseTimeRunning;
    private KnownTypesFactory _knownTypesFactory;
    internal object _MsalAuthClient;
    internal AuthenticationResult _authenticationResultContainer;
    internal IAccount _userAccount;
    internal static object lockObject;
    internal MemoryBackedTokenCache _memoryBackedTokenCache;
    [CompilerGeneratedAttribute]
private bool <IsAClone>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <CallerAADObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClient <WebApiHttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <SessionTrackingId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceServerCacheConsistency>k__BackingField;
    internal bool OrgDetailsRead;
    internal bool _isCloning;
    [CompilerGeneratedAttribute]
private DataverseTraceLogger <logEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <isLogEntryCreatedLocally>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ConnectODataBaseUriActual>k__BackingField;
    internal bool UseExternalConnection;
    [CompilerGeneratedAttribute]
private Version <OrganizationVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, Task`1<string>> <GetAccessTokenAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Task`1<Dictionary`2<string, string>>> <RequestAdditionalHeadersAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, string> <CurrentCookieCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RecommendedDegreesOfParallelism>k__BackingField;
    private bool disposedValue;
    internal IMemoryCache LocalMemoryCache { get; }
    internal bool IsAClone { get; internal set; }
    public Nullable`1<Guid> CallerAADObjectId { get; public set; }
    internal HttpClient WebApiHttpClient { get; internal set; }
    internal Nullable`1<Guid> SessionTrackingId { get; internal set; }
    internal bool ForceServerCacheConsistency { get; internal set; }
    internal static string GlobalDiscoveryAllInstancesUri { get; }
    private static string GlobalDiscoveryInstanceUriFormat { get; }
    internal string ServiceCACHEName { get; }
    internal string Authority { get; }
    internal AuthenticationResult AuthContext { get; }
    internal string UserId { get; }
    internal bool CalledbyExecuteRequest { get; internal set; }
    internal DataverseTraceLogger logEntry { get; internal set; }
    public bool isLogEntryCreatedLocally { get; public set; }
    internal NetworkCredential DataverseServiceAccessCredential { get; internal set; }
    internal string InternetProtocolToUse { get; internal set; }
    internal OrganizationDetail ConnectedOrganizationDetail { get; internal set; }
    internal AuthenticationType AuthenticationTypeInUse { get; }
    internal OrganizationWebProxyClientAsync WebClient { get; }
    internal OrganizationServiceProxyAsync OnPremClient { get; }
    internal string CustomerOrganization { get; }
    internal string HostPort { get; internal set; }
    internal string HostName { get; internal set; }
    internal WhoAmIResponse CurrentUser { get; internal set; }
    internal Uri ConnectOrgUriActual { get; }
    internal Uri ConnectODataBaseUriActual { get; internal set; }
    internal string ConnectedOrgFriendlyName { get; }
    internal EndpointCollection ConnectedOrgPublishedEndpoints { get; }
    internal Version OrganizationVersion { get; internal set; }
    internal Guid OrganizationId { get; internal set; }
    internal Guid TenantId { get; internal set; }
    internal string EnvironmentId { get; internal set; }
    internal Func`2<string, Task`1<string>> GetAccessTokenAsync { get; internal set; }
    internal Func`1<Task`1<Dictionary`2<string, string>>> RequestAdditionalHeadersAsync { get; internal set; }
    internal string BaseWebAPIDataFormat { get; }
    internal static TimeSpan MaxConnectionTimeout { get; internal set; }
    internal bool EnableCookieRelay { get; internal set; }
    internal ConcurrentDictionary`2<string, string> CurrentCookieCollection { get; internal set; }
    internal int RecommendedDegreesOfParallelism { get; internal set; }
    internal ConnectionService(IOrganizationService testIOrganziationSvc, string baseConnectUrl, HttpClient mockClient, ILogger logger);
    internal ConnectionService(OrganizationWebProxyClientAsync externalOrgWebProxyClient, AuthenticationType authType, DataverseTraceLogger logSink, bool isClone);
    internal ConnectionService(AuthenticationType authType, string hostName, string port, string orgName, NetworkCredential providedCredential, bool useUniqueCacheName, OrganizationDetail orgDetail, DataverseTraceLogger logSink, Uri instanceToConnectToo, bool isClone);
    internal ConnectionService(AuthenticationType authType, string orgName, string liveUserId, SecureString livePass, string onlineRegion, bool useUniqueCacheName, OrganizationDetail orgDetail, string clientId, Uri redirectUri, PromptBehavior promptBehavior, string hostName, string port, bool onPrem, DataverseTraceLogger logSink, Uri instanceToConnectToo, bool useDefaultCreds, string tokenCacheStorePath, bool isClone);
    internal ConnectionService(AuthenticationType authType, Uri instanceToConnectToo, bool useUniqueCacheName, OrganizationDetail orgDetail, string clientId, Uri redirectUri, string certThumbprint, StoreName certStoreName, X509Certificate2 certifcate, string hostName, string port, bool onPrem, DataverseTraceLogger logSink, string tokenCacheStorePath, bool isClone);
    private static ConnectionService();
    internal IMemoryCache get_LocalMemoryCache();
    [CompilerGeneratedAttribute]
internal bool get_IsAClone();
    [CompilerGeneratedAttribute]
internal void set_IsAClone(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_CallerAADObjectId();
    [CompilerGeneratedAttribute]
public void set_CallerAADObjectId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
internal HttpClient get_WebApiHttpClient();
    [CompilerGeneratedAttribute]
internal void set_WebApiHttpClient(HttpClient value);
    [CompilerGeneratedAttribute]
internal Nullable`1<Guid> get_SessionTrackingId();
    [CompilerGeneratedAttribute]
internal void set_SessionTrackingId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
internal bool get_ForceServerCacheConsistency();
    [CompilerGeneratedAttribute]
internal void set_ForceServerCacheConsistency(bool value);
    internal static string get_GlobalDiscoveryAllInstancesUri();
    private static string get_GlobalDiscoveryInstanceUriFormat();
    internal string get_ServiceCACHEName();
    internal string get_Authority();
    internal AuthenticationResult get_AuthContext();
    internal string get_UserId();
    internal bool get_CalledbyExecuteRequest();
    internal void set_CalledbyExecuteRequest(bool value);
    [CompilerGeneratedAttribute]
internal DataverseTraceLogger get_logEntry();
    [CompilerGeneratedAttribute]
internal void set_logEntry(DataverseTraceLogger value);
    internal IEnumerable`1<Tuple`2<DateTime, string>> GetAllLogs();
    [CompilerGeneratedAttribute]
public bool get_isLogEntryCreatedLocally();
    [CompilerGeneratedAttribute]
public void set_isLogEntryCreatedLocally(bool value);
    internal NetworkCredential get_DataverseServiceAccessCredential();
    internal void set_DataverseServiceAccessCredential(NetworkCredential value);
    internal string get_InternetProtocolToUse();
    internal void set_InternetProtocolToUse(string value);
    internal OrganizationDetail get_ConnectedOrganizationDetail();
    internal void set_ConnectedOrganizationDetail(OrganizationDetail value);
    internal AuthenticationType get_AuthenticationTypeInUse();
    internal OrganizationWebProxyClientAsync get_WebClient();
    internal OrganizationServiceProxyAsync get_OnPremClient();
    internal string get_CustomerOrganization();
    internal string get_HostPort();
    internal void set_HostPort(string value);
    internal string get_HostName();
    internal void set_HostName(string value);
    internal WhoAmIResponse get_CurrentUser();
    internal void set_CurrentUser(WhoAmIResponse value);
    internal Uri get_ConnectOrgUriActual();
    [CompilerGeneratedAttribute]
internal Uri get_ConnectODataBaseUriActual();
    [CompilerGeneratedAttribute]
internal void set_ConnectODataBaseUriActual(Uri value);
    internal string get_ConnectedOrgFriendlyName();
    internal EndpointCollection get_ConnectedOrgPublishedEndpoints();
    [CompilerGeneratedAttribute]
internal Version get_OrganizationVersion();
    [CompilerGeneratedAttribute]
internal void set_OrganizationVersion(Version value);
    internal Guid get_OrganizationId();
    internal void set_OrganizationId(Guid value);
    internal Guid get_TenantId();
    internal void set_TenantId(Guid value);
    internal string get_EnvironmentId();
    internal void set_EnvironmentId(string value);
    [CompilerGeneratedAttribute]
internal Func`2<string, Task`1<string>> get_GetAccessTokenAsync();
    [CompilerGeneratedAttribute]
internal void set_GetAccessTokenAsync(Func`2<string, Task`1<string>> value);
    [CompilerGeneratedAttribute]
internal Func`1<Task`1<Dictionary`2<string, string>>> get_RequestAdditionalHeadersAsync();
    [CompilerGeneratedAttribute]
internal void set_RequestAdditionalHeadersAsync(Func`1<Task`1<Dictionary`2<string, string>>> value);
    internal string get_BaseWebAPIDataFormat();
    internal static TimeSpan get_MaxConnectionTimeout();
    internal static void set_MaxConnectionTimeout(TimeSpan value);
    internal bool get_EnableCookieRelay();
    internal void set_EnableCookieRelay(bool value);
    [CompilerGeneratedAttribute]
internal ConcurrentDictionary`2<string, string> get_CurrentCookieCollection();
    [CompilerGeneratedAttribute]
internal void set_CurrentCookieCollection(ConcurrentDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal int get_RecommendedDegreesOfParallelism();
    [CompilerGeneratedAttribute]
internal void set_RecommendedDegreesOfParallelism(int value);
    public bool DoLogin(ConnectionService& ConnectionObject);
    private void GenerateCacheKeys(bool useUniqueCacheName);
    private bool IntilizeService(ConnectionService& ConnectionObject);
    private IOrganizationService GetCachedService(ConnectionService& ConnectionObject);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ConnectionService/<InitServiceAsync>d__184")]
private Task`1<IOrganizationService> InitServiceAsync();
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ConnectionService/<DoDirectLoginAsync>d__185")]
private Task`1<IOrganizationService> DoDirectLoginAsync(bool IsOnPrem);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ConnectionService/<GetServerVersion>d__186")]
private Task GetServerVersion(IOrganizationService dvService, Uri uriOfInstance);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ConnectionService/<RefreshInstanceDetails>d__187")]
private Task RefreshInstanceDetails(IOrganizationService dvService, Uri uriOfInstance);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ConnectionService/<GetWhoAmIDetails>d__188")]
internal Task`1<WhoAmIResponse> GetWhoAmIDetails(IOrganizationService dvService, Guid trackingID);
    internal void SetClonedProperties(ServiceClient sourceClient);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ConnectionService/<Command_WebAPIProcess_ExecuteAsync>d__190")]
internal Task`1<OrganizationResponse> Command_WebAPIProcess_ExecuteAsync(OrganizationRequest req, string logMessageTag, bool bypassPluginExecution, MetadataUtility metadataUtlity, Guid callerId, bool disableConnectionLocking, int maxRetryCount, TimeSpan retryPauseTime, CancellationToken cancellationToken, Uri uriOfInstance, bool inLoginFlow);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ConnectionService/<Command_WebExecuteAsync>d__191")]
internal Task`1<HttpResponseMessage> Command_WebExecuteAsync(string queryString, string body, HttpMethod method, Dictionary`2<string, List`1<string>> customHeaders, string contentType, string errorStringCheck, Guid callerId, bool disableConnectionLocking, int maxRetryCount, TimeSpan retryPauseTime, Uri uriOfInstance, Guid requestTrackingId, CancellationToken cancellationToken);
    private bool ShouldRetryWebAPI(Exception ex, int retryCount, int maxRetryCount, TimeSpan retryPauseTime, Boolean& isThrottlingRetry);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ConnectionService/<ExecuteHttpRequestAsync>d__193")]
internal static Task`1<HttpResponseMessage> ExecuteHttpRequestAsync(string uri, HttpMethod method, string body, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken, DataverseTraceLogger logSink, Nullable`1<Guid> requestTrackingId, string contentType, Nullable`1<Guid> sessionTrackingId, HttpClient providedHttpClient);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ConnectionService/<DiscoverOrganizationsAsync>d__194")]
internal static Task`1<DiscoverOrganizationsResult> DiscoverOrganizationsAsync(Uri discoveryServiceUri, ClientCredentials clientCredentials, string clientId, Uri redirectUri, PromptBehavior promptBehavior, bool isOnPrem, string authority, DataverseTraceLogger logSink, bool useGlobalDisco, bool useDefaultCreds, string tokenCacheStorePath, ILogger externalLogger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ConnectionService/<DiscoverOrganizationsAsync>d__195")]
internal static Task`1<DiscoverOrganizationsResult> DiscoverOrganizationsAsync(Uri discoveryServiceUri, X509Certificate2 loginCertificate, string clientId, bool isOnPrem, string authority, DataverseTraceLogger logSink, bool useDefaultCreds, string tokenCacheStorePath);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ConnectionService/<DiscoverGlobalOrganizationsAsync>d__196")]
internal static Task`1<OrganizationDetailCollection> DiscoverGlobalOrganizationsAsync(Uri discoveryServiceUri, Func`2<string, Task`1<string>> tokenProviderFunction, DataverseTraceLogger logSink, string tokenCacheStorePath, ILogger externalLogger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ConnectionService/<DiscoverOrganizations_InternalAsync>d__197")]
private static Task`1<DiscoverOrganizationsResult> DiscoverOrganizations_InternalAsync(Uri discoveryServiceUri, ClientCredentials clientCredentials, X509Certificate2 loginCertificate, string clientId, Uri redirectUri, PromptBehavior promptBehavior, bool isOnPrem, string authority, bool useDefaultCreds, string tokenCacheStorePath, DataverseTraceLogger logSink, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ConnectionService/<DiscoverGlobalOrganizationsAsync>d__198")]
private static Task`1<DiscoverOrganizationsResult> DiscoverGlobalOrganizationsAsync(Uri discoveryServiceUri, ClientCredentials clientCredentials, X509Certificate2 loginCertificate, string clientId, Uri redirectUri, PromptBehavior promptBehavior, bool isOnPrem, string authority, DataverseTraceLogger logSink, bool useGlobalDisco, bool useDefaultCreds, string tokenCacheStorePath, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ConnectionService/<QueryGlobalDiscoveryAsync>d__199")]
private static Task`1<OrganizationDetailCollection> QueryGlobalDiscoveryAsync(string authToken, Uri discoveryServiceUri, DataverseTraceLogger logSink, CancellationToken cancellationToken);
    private static string GetErrorCode(XmlNode errorInfo);
    private static ClientCredentials GetClientCredentials(NetworkCredential networkCredential);
    private static X509Certificate2 FindCertificate(string certificateThumbprint, StoreName storeName, DataverseTraceLogger logSink);
    private static bool TryFindCertificatesInStore(string certificateThumbprint, StoreLocation location, StoreName certReproName, X509Certificate2Collection& certificates);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ConnectionService/<ConnectAndInitServiceAsync>d__204")]
private Task`1<IOrganizationService> ConnectAndInitServiceAsync(OrganizationDetail orgdata, bool IsOnPrem, Uri homeRealmUri);
    internal void AttachWebProxyHander(OrganizationWebProxyClientAsync proxy);
    internal void AttachProxyHander(OrganizationServiceProxyAsync proxy);
    private void WebProxyChannelFactory_Opening(object sender, EventArgs e);
    public string EncodeTo64(string strtoEncode);
    public static string DecodeFrom64(string encodedData);
    private Uri BuildOrgConnectUri(OrganizationDetail orgdata);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ConnectionService/<FindDiscoveryServerAsync>d__211")]
private Task`1<OrgList> FindDiscoveryServerAsync(DiscoveryServers onlineServerList);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ConnectionService/<QueryOnlineServersListAsync>d__212")]
private Task`1<bool> QueryOnlineServersListAsync(ObservableCollection`1<DiscoveryServer> svrs, OrgList orgsList, Uri trimToDiscoveryUri, Uri globalDiscoUriToUse);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ConnectionService/<QueryLiveDiscoveryServerAsync>d__213")]
private Task`1<DiscoverOrganizationsResult> QueryLiveDiscoveryServerAsync(Uri discoServer, bool useGlobal);
    private void AddOrgToOrgList(OrganizationDetailCollection organizationDetailList, string discoveryServer, Uri discoveryServerUri, OrgList& orgList);
    private void AddOrgToOrgList(OrganizationDetail organizationDetail, string discoveryServer, OrgList& orgList);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ConnectionService/<RefreshClientTokenAsync>d__216")]
internal Task`1<string> RefreshClientTokenAsync();
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private bool <InitServiceAsync>b__184_0(OrganizationDetail o);
    [CompilerGeneratedAttribute]
private bool <InitServiceAsync>b__184_1(OrganizationDetail o);
}
internal static class Microsoft.PowerPlatform.Dataverse.Client.ConnectionStringConstants : object {
    public static String[] ServiceUri;
    public static String[] UserName;
    public static String[] Password;
    public static String[] Domain;
    public static String[] HomeRealmUri;
    public static String[] AuthType;
    public static String[] RequireNewInstance;
    public static String[] ClientId;
    public static String[] RedirectUri;
    public static String[] TokenCacheStorePath;
    public static String[] LoginPrompt;
    public static String[] CertThumbprint;
    public static String[] CertStoreName;
    public static String[] SkipDiscovery;
    public static String[] IntegratedSecurity;
    public static String[] ClientSecret;
    private static ConnectionStringConstants();
    public static string CreateConnectionStringFromConnectionOptions(ConnectionOptions options);
}
internal class Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.ManagedTokenOrganizationServiceProxy : OrganizationServiceProxyAsync {
    public ManagedTokenOrganizationServiceProxy(IServiceManagement`1<IOrganizationServiceAsync> serviceManagement, ClientCredentials clientCredentials);
    public ManagedTokenOrganizationServiceProxy(IServiceManagement`1<IOrganizationServiceAsync> serviceManagement, SecurityTokenResponse securityTokenResponse, ClientCredentials clientCredentials);
    protected virtual void AuthenticateCore();
    protected virtual void ValidateAuthentication();
}
internal class Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.OrganizationServiceConfigurationAsync : object {
    private static string XrmServicesRoot;
    private ServiceConfiguration`1<IOrganizationServiceAsync> service;
    private object _lockObject;
    public ServiceEndpoint CurrentServiceEndpoint { get; public set; }
    public IssuerEndpoint CurrentIssuer { get; public set; }
    public AuthenticationProviderType AuthenticationType { get; }
    public ServiceEndpointDictionary ServiceEndpoints { get; }
    public IssuerEndpointDictionary IssuerEndpoints { get; }
    public CrossRealmIssuerEndpointCollection CrossRealmIssuerEndpoints { get; }
    public PolicyConfiguration PolicyConfiguration { get; }
    public bool EndpointAutoSwitchEnabled { get; public set; }
    public Uri AlternateEndpoint { get; }
    public Uri PrimaryEndpoint { get; }
    public bool IsPrimaryEndpoint { get; }
    internal OrganizationServiceConfigurationAsync(Uri serviceUri);
    internal OrganizationServiceConfigurationAsync(Uri serviceUri, bool enableProxyTypes, Assembly assembly);
    public void EnableProxyTypes();
    public void EnableProxyTypes(Assembly assembly);
    public sealed virtual ServiceEndpoint get_CurrentServiceEndpoint();
    public sealed virtual void set_CurrentServiceEndpoint(ServiceEndpoint value);
    public sealed virtual IssuerEndpoint get_CurrentIssuer();
    public sealed virtual void set_CurrentIssuer(IssuerEndpoint value);
    public sealed virtual AuthenticationProviderType get_AuthenticationType();
    public sealed virtual ServiceEndpointDictionary get_ServiceEndpoints();
    public sealed virtual IssuerEndpointDictionary get_IssuerEndpoints();
    public sealed virtual CrossRealmIssuerEndpointCollection get_CrossRealmIssuerEndpoints();
    public sealed virtual ChannelFactory`1<IOrganizationServiceAsync> CreateChannelFactory();
    public sealed virtual ChannelFactory`1<IOrganizationServiceAsync> CreateChannelFactory(ClientAuthenticationType clientAuthenticationType);
    public sealed virtual ChannelFactory`1<IOrganizationServiceAsync> CreateChannelFactory(TokenServiceCredentialType endpointType);
    public sealed virtual ChannelFactory`1<IOrganizationServiceAsync> CreateChannelFactory(ClientCredentials clientCredentials);
    public sealed virtual SecurityTokenResponse Authenticate(ClientCredentials clientCredentials);
    public sealed virtual SecurityTokenResponse Authenticate(SecurityToken securityToken);
    public sealed virtual SecurityTokenResponse Authenticate(ClientCredentials clientCredentials, SecurityTokenResponse deviceSecurityTokenResponse);
    public sealed virtual SecurityTokenResponse AuthenticateDevice(ClientCredentials clientCredentials);
    public sealed virtual SecurityTokenResponse AuthenticateCrossRealm(ClientCredentials clientCredentials, string appliesTo, Uri crossRealmSts);
    public sealed virtual SecurityTokenResponse AuthenticateCrossRealm(SecurityToken securityToken, string appliesTo, Uri crossRealmSts);
    public sealed virtual PolicyConfiguration get_PolicyConfiguration();
    public sealed virtual IdentityProvider GetIdentityProvider(string userPrincipalName);
    public sealed virtual SecurityTokenResponse Authenticate(ClientCredentials clientCredentials, Uri uri, string keyType);
    public sealed virtual SecurityTokenResponse Authenticate(SecurityToken securityToken, Uri uri, string keyType);
    private bool AdjustServiceEndpoint(Uri serviceUri);
    private static Uri RemoveOrgName(Uri serviceUri);
    public sealed virtual AuthenticationCredentials Authenticate(AuthenticationCredentials authenticationCredentials);
    public sealed virtual bool get_EndpointAutoSwitchEnabled();
    public sealed virtual void set_EndpointAutoSwitchEnabled(bool value);
    public sealed virtual Uri get_AlternateEndpoint();
    public sealed virtual Uri get_PrimaryEndpoint();
    public sealed virtual void SwitchEndpoint();
    public sealed virtual void add_EndpointSwitched(EventHandler`1<EndpointSwitchEventArgs> value);
    public sealed virtual void remove_EndpointSwitched(EventHandler`1<EndpointSwitchEventArgs> value);
    public sealed virtual void add_EndpointSwitchRequired(EventHandler`1<EndpointSwitchEventArgs> value);
    public sealed virtual void remove_EndpointSwitchRequired(EventHandler`1<EndpointSwitchEventArgs> value);
    public sealed virtual bool HandleEndpointSwitch();
    public sealed virtual bool get_IsPrimaryEndpoint();
    public sealed virtual bool CanSwitch(Uri currentUri);
}
internal class Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.OrganizationServiceProxyAsync : ServiceProxy`1<IOrganizationServiceAsync> {
    [CompilerGeneratedAttribute]
private bool <OfflinePlayback>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CallerId>k__BackingField;
    [CompilerGeneratedAttribute]
private UserType <UserType>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CallerRegardingObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LanguageCodeOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SyncOperationType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientAppName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientAppVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SdkClientVersion>k__BackingField;
    private static string _xrmSdkAssemblyFileVersion;
    internal bool OfflinePlayback { get; internal set; }
    public Guid CallerId { get; public set; }
    public UserType UserType { get; public set; }
    public Guid CallerRegardingObjectId { get; public set; }
    internal int LanguageCodeOverride { get; internal set; }
    public string SyncOperationType { get; public set; }
    internal string ClientAppName { get; internal set; }
    internal string ClientAppVersion { get; internal set; }
    public string SdkClientVersion { get; public set; }
    public OrganizationServiceProxyAsync(Uri uri, Uri homeRealmUri, ClientCredentials clientCredentials, ClientCredentials deviceCredentials);
    public OrganizationServiceProxyAsync(IServiceConfiguration`1<IOrganizationServiceAsync> serviceConfiguration, SecurityTokenResponse securityTokenResponse);
    public OrganizationServiceProxyAsync(IServiceConfiguration`1<IOrganizationServiceAsync> serviceConfiguration, ClientCredentials clientCredentials);
    public OrganizationServiceProxyAsync(IServiceManagement`1<IOrganizationServiceAsync> serviceManagement, SecurityTokenResponse securityTokenResponse);
    public OrganizationServiceProxyAsync(IServiceManagement`1<IOrganizationServiceAsync> serviceManagement, ClientCredentials clientCredentials);
    [CompilerGeneratedAttribute]
internal bool get_OfflinePlayback();
    [CompilerGeneratedAttribute]
internal void set_OfflinePlayback(bool value);
    [CompilerGeneratedAttribute]
public Guid get_CallerId();
    [CompilerGeneratedAttribute]
public void set_CallerId(Guid value);
    [CompilerGeneratedAttribute]
public UserType get_UserType();
    [CompilerGeneratedAttribute]
public void set_UserType(UserType value);
    [CompilerGeneratedAttribute]
public Guid get_CallerRegardingObjectId();
    [CompilerGeneratedAttribute]
public void set_CallerRegardingObjectId(Guid value);
    [CompilerGeneratedAttribute]
internal int get_LanguageCodeOverride();
    [CompilerGeneratedAttribute]
internal void set_LanguageCodeOverride(int value);
    [CompilerGeneratedAttribute]
public string get_SyncOperationType();
    [CompilerGeneratedAttribute]
public void set_SyncOperationType(string value);
    [CompilerGeneratedAttribute]
internal string get_ClientAppName();
    [CompilerGeneratedAttribute]
internal void set_ClientAppName(string value);
    [CompilerGeneratedAttribute]
internal string get_ClientAppVersion();
    [CompilerGeneratedAttribute]
internal void set_ClientAppVersion(string value);
    [CompilerGeneratedAttribute]
public string get_SdkClientVersion();
    [CompilerGeneratedAttribute]
public void set_SdkClientVersion(string value);
    public void EnableProxyTypes();
    public void EnableProxyTypes(Assembly assembly);
    internal static string GetXrmSdkAssemblyFileVersion();
    protected internal virtual Guid CreateCore(Entity entity);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.OrganizationServiceProxyAsync/<CreateAsyncCore>d__47")]
protected internal virtual Task`1<Guid> CreateAsyncCore(Entity entity);
    protected internal virtual Entity RetrieveCore(string entityName, Guid id, ColumnSet columnSet);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.OrganizationServiceProxyAsync/<RetrieveAsyncCore>d__49")]
protected internal virtual Task`1<Entity> RetrieveAsyncCore(string entityName, Guid id, ColumnSet columnSet);
    protected internal virtual void UpdateCore(Entity entity);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.OrganizationServiceProxyAsync/<UpdateAsyncCore>d__51")]
protected internal virtual Task UpdateAsyncCore(Entity entity);
    protected internal virtual void DeleteCore(string entityName, Guid id);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.OrganizationServiceProxyAsync/<DeleteAsyncCore>d__53")]
protected internal virtual Task DeleteAsyncCore(string entityName, Guid id);
    protected internal virtual OrganizationResponse ExecuteCore(OrganizationRequest request);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.OrganizationServiceProxyAsync/<ExecuteAsyncCore>d__55")]
protected internal virtual Task`1<OrganizationResponse> ExecuteAsyncCore(OrganizationRequest request);
    protected internal virtual void AssociateCore(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.OrganizationServiceProxyAsync/<AssociateAsyncCore>d__57")]
protected internal virtual Task AssociateAsyncCore(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    protected internal virtual void DisassociateCore(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.OrganizationServiceProxyAsync/<DisassociateAsyncCore>d__59")]
protected internal virtual Task DisassociateAsyncCore(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    protected internal virtual EntityCollection RetrieveMultipleCore(QueryBase query);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.OrganizationServiceProxyAsync/<RetrieveMultipleAsyncCore>d__61")]
protected internal virtual Task`1<EntityCollection> RetrieveMultipleAsyncCore(QueryBase query);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.OrganizationServiceProxyAsync/<ExecuteOperation>d__62`1")]
protected internal Task`1<T> ExecuteOperation(Func`1<Task> asyncAction);
    public sealed virtual Guid Create(Entity entity);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.OrganizationServiceProxyAsync/<CreateAsync>d__64")]
public sealed virtual Task`1<Guid> CreateAsync(Entity entity);
    public sealed virtual Entity Retrieve(string entityName, Guid id, ColumnSet columnSet);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.OrganizationServiceProxyAsync/<RetrieveAsync>d__66")]
public sealed virtual Task`1<Entity> RetrieveAsync(string entityName, Guid id, ColumnSet columnSet);
    public sealed virtual void Update(Entity entity);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.OrganizationServiceProxyAsync/<UpdateAsync>d__68")]
public sealed virtual Task UpdateAsync(Entity entity);
    public sealed virtual void Delete(string entityName, Guid id);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.OrganizationServiceProxyAsync/<DeleteAsync>d__70")]
public sealed virtual Task DeleteAsync(string entityName, Guid id);
    public sealed virtual OrganizationResponse Execute(OrganizationRequest request);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.OrganizationServiceProxyAsync/<ExecuteAsync>d__72")]
public sealed virtual Task`1<OrganizationResponse> ExecuteAsync(OrganizationRequest request);
    public sealed virtual void Associate(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.OrganizationServiceProxyAsync/<AssociateAsync>d__74")]
public sealed virtual Task AssociateAsync(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    public sealed virtual void Disassociate(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.OrganizationServiceProxyAsync/<DisassociateAsync>d__76")]
public sealed virtual Task DisassociateAsync(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    public sealed virtual EntityCollection RetrieveMultiple(QueryBase query);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.OrganizationServiceProxyAsync/<RetrieveMultipleAsync>d__78")]
public sealed virtual Task`1<EntityCollection> RetrieveMultipleAsync(QueryBase query);
}
internal class Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.OrganizationServiceProxyContextAsyncInitializer : ServiceContextInitializer`1<IOrganizationServiceAsync> {
    private OrganizationServiceProxyAsync OrganizationServiceProxyAsync { get; }
    public OrganizationServiceProxyContextAsyncInitializer(OrganizationServiceProxyAsync proxy);
    private OrganizationServiceProxyAsync get_OrganizationServiceProxyAsync();
    private void Initialize();
}
[SecuritySafeCriticalAttribute]
internal class Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.ServiceConfiguration`1 : object {
    [CompilerGeneratedAttribute]
private bool <EndpointAutoSwitchEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EndpointSwitchEventArgs> EndpointSwitched;
    [CompilerGeneratedAttribute]
private EventHandler`1<EndpointSwitchEventArgs> EndpointSwitchRequired;
    [CompilerGeneratedAttribute]
private string <AlternateEndpointToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <AlternateEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <PrimaryEndpoint>k__BackingField;
    private ServiceEndpoint currentServiceEndpoint;
    [CompilerGeneratedAttribute]
private PolicyConfiguration <PolicyConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceEndpointMetadata <ServiceEndpointMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceEndpointDictionary <ServiceEndpoints>k__BackingField;
    [CompilerGeneratedAttribute]
private IssuerEndpointDictionary <IssuerEndpoints>k__BackingField;
    [CompilerGeneratedAttribute]
private CrossRealmIssuerEndpointCollection <CrossRealmIssuerEndpoints>k__BackingField;
    private TokenServiceCredentialType _tokenEndpointType;
    private static object _lockObject;
    internal static string DefaultRequestType;
    public bool EndpointAutoSwitchEnabled { get; public set; }
    public string AlternateEndpointToken { get; public set; }
    public Uri AlternateEndpoint { get; internal set; }
    public Uri PrimaryEndpoint { get; internal set; }
    public bool IsPrimaryEndpoint { get; }
    public PolicyConfiguration PolicyConfiguration { get; public set; }
    public ServiceEndpointMetadata ServiceEndpointMetadata { get; private set; }
    private bool ClaimsEnabledService { get; }
    public Uri ServiceUri { get; internal set; }
    public ServiceEndpoint CurrentServiceEndpoint { get; public set; }
    public IssuerEndpoint CurrentIssuer { get; public set; }
    public AuthenticationProviderType AuthenticationType { get; }
    public ServiceEndpointDictionary ServiceEndpoints { get; internal set; }
    public IssuerEndpointDictionary IssuerEndpoints { get; internal set; }
    public CrossRealmIssuerEndpointCollection CrossRealmIssuerEndpoints { get; internal set; }
    public ServiceConfiguration`1(Uri serviceUri);
    internal ServiceConfiguration`1(Uri serviceUri, bool checkForSecondary);
    private static ServiceConfiguration`1();
    public AuthenticationCredentials Authenticate(AuthenticationCredentials authenticationCredentials);
    private AuthenticationCredentials AuthenticateFederationInternal(AuthenticationCredentials authenticationCredentials);
    private AuthenticationCredentials AuthenticateFederationTokenInternal(AuthenticationCredentials authenticationCredentials);
    private AuthenticationCredentials AuthenticateOnlineFederationInternal(AuthenticationCredentials authenticationCredentials);
    private AuthenticationCredentials AuthenticateFederatedTokenWithOrgIdForCRM(AuthenticationCredentials authenticationCredentials);
    private AuthenticationCredentials AuthenticateWithADFSForOrgId(AuthenticationCredentials authenticationCredentials, Uri identifier);
    private AuthenticationCredentials AuthenticateTokenWithOrgIdForCrm(AuthenticationCredentials authenticationCredentials);
    private AuthenticationCredentials AuthenticateOnlineFederationTokenInternal(IdentityProviderTrustConfiguration liveTrustConfig, AuthenticationCredentials authenticationCredentials);
    internal IdentityProvider GetIdentityProvider(ClientCredentials clientCredentials);
    private string ExtractUserName(string userName);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EndpointAutoSwitchEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EndpointAutoSwitchEnabled(bool value);
    public string GetAlternateEndpointAddress(string host);
    public void OnEndpointSwitchRequiredEvent();
    public void OnEndpointSwitchedEvent();
    private void HandleEndpointEvent(EventHandler`1<EndpointSwitchEventArgs> tmp, Uri newUrl, Uri previousUrl);
    [CompilerGeneratedAttribute]
public sealed virtual void add_EndpointSwitched(EventHandler`1<EndpointSwitchEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_EndpointSwitched(EventHandler`1<EndpointSwitchEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_EndpointSwitchRequired(EventHandler`1<EndpointSwitchEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_EndpointSwitchRequired(EventHandler`1<EndpointSwitchEventArgs> value);
    [CompilerGeneratedAttribute]
public string get_AlternateEndpointToken();
    [CompilerGeneratedAttribute]
public void set_AlternateEndpointToken(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_AlternateEndpoint();
    [CompilerGeneratedAttribute]
internal void set_AlternateEndpoint(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_PrimaryEndpoint();
    [CompilerGeneratedAttribute]
internal void set_PrimaryEndpoint(Uri value);
    private void SetEndpointSwitchingBehavior();
    public sealed virtual bool get_IsPrimaryEndpoint();
    public sealed virtual bool CanSwitch(Uri currentUri);
    public sealed virtual bool HandleEndpointSwitch();
    public sealed virtual void SwitchEndpoint();
    internal static ServiceUrls CalculateEndpoints(Uri serviceUri);
    [CompilerGeneratedAttribute]
public PolicyConfiguration get_PolicyConfiguration();
    [CompilerGeneratedAttribute]
public void set_PolicyConfiguration(PolicyConfiguration value);
    [CompilerGeneratedAttribute]
public ServiceEndpointMetadata get_ServiceEndpointMetadata();
    [CompilerGeneratedAttribute]
private void set_ServiceEndpointMetadata(ServiceEndpointMetadata value);
    private bool get_ClaimsEnabledService();
    private void SetAuthenticationConfiguration();
    [CompilerGeneratedAttribute]
public Uri get_ServiceUri();
    [CompilerGeneratedAttribute]
internal void set_ServiceUri(Uri value);
    public ServiceEndpoint get_CurrentServiceEndpoint();
    public void set_CurrentServiceEndpoint(ServiceEndpoint value);
    public IssuerEndpoint get_CurrentIssuer();
    public void set_CurrentIssuer(IssuerEndpoint value);
    public AuthenticationProviderType get_AuthenticationType();
    [CompilerGeneratedAttribute]
public ServiceEndpointDictionary get_ServiceEndpoints();
    [CompilerGeneratedAttribute]
internal void set_ServiceEndpoints(ServiceEndpointDictionary value);
    [CompilerGeneratedAttribute]
public IssuerEndpointDictionary get_IssuerEndpoints();
    [CompilerGeneratedAttribute]
internal void set_IssuerEndpoints(IssuerEndpointDictionary value);
    [CompilerGeneratedAttribute]
public CrossRealmIssuerEndpointCollection get_CrossRealmIssuerEndpoints();
    [CompilerGeneratedAttribute]
internal void set_CrossRealmIssuerEndpoints(CrossRealmIssuerEndpointCollection value);
    public ChannelFactory`1<TService> CreateChannelFactory(TokenServiceCredentialType endpointType);
    public ChannelFactory`1<TService> CreateChannelFactory(ClientAuthenticationType clientAuthenticationType);
    public ChannelFactory`1<TService> CreateChannelFactory(ClientCredentials clientCredentials);
    public SecurityTokenResponse AuthenticateCrossRealm(ClientCredentials clientCredentials, string appliesTo, Uri crossRealmSts);
    public SecurityTokenResponse AuthenticateCrossRealm(SecurityToken securityToken, string appliesTo, Uri crossRealmSts);
    private IdentityProviderTrustConfiguration TryGetOnlineTrustConfiguration();
    private IdentityProviderTrustConfiguration GetLiveTrustConfig();
    private IdentityProviderTrustConfiguration GetOnlineTrustConfiguration(Uri crossRealmSts);
    private IdentityProviderTrustConfiguration TryGetOnlineTrustConfiguration(Uri crossRealmSts);
    public SecurityTokenResponse Authenticate(ClientCredentials clientCredentials);
    internal SecurityTokenResponse Authenticate(ClientCredentials clientCredentials, Uri uri, string keyType);
    public SecurityTokenResponse Authenticate(SecurityToken securityToken);
    internal SecurityTokenResponse Authenticate(SecurityToken securityToken, Uri uri, string keyType);
    public SecurityTokenResponse AuthenticateDevice(ClientCredentials clientCredentials);
    public SecurityTokenResponse Authenticate(ClientCredentials clientCredentials, SecurityTokenResponse deviceTokenResponse);
    public SecurityTokenResponse Authenticate(ClientCredentials clientCredentials, SecurityTokenResponse deviceTokenResponse, string keyType);
    public IdentityProvider GetIdentityProvider(string userPrincipalName);
    private SecurityTokenResponse AuthenticateInternal(AuthenticationCredentials authenticationCredentials);
    private SecurityTokenResponse Issue(AuthenticationCredentials authenticationCredentials);
    private void ConfigureCredentials(ChannelFactory channelFactory, ClientCredentials clientCredentials);
    private TokenServiceCredentialType GetCredentialsEndpointType(ClientCredentials clientCredentials);
    private ChannelFactory`1<TService> CreateLocalChannelFactory();
}
internal static class Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.ServiceConfigurationFactoryAsync : object {
    public static IServiceConfiguration`1<TService> CreateConfiguration(Uri serviceUri);
    public static IServiceConfiguration`1<TService> CreateConfiguration(Uri serviceUri, bool enableProxyTypes, Assembly assembly);
    public static IServiceManagement`1<TService> CreateManagement(Uri serviceUri);
    public static IServiceManagement`1<TService> CreateManagement(Uri serviceUri, bool enableProxyTypes, Assembly assembly);
}
internal abstract class Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.ServiceContextInitializer`1 : object {
    private OperationContextScope _operationScope;
    [CompilerGeneratedAttribute]
private ServiceProxy`1<TService> <ServiceProxy>k__BackingField;
    public ServiceProxy`1<TService> ServiceProxy { get; private set; }
    protected ServiceContextInitializer`1(ServiceProxy`1<TService> proxy);
    [CompilerGeneratedAttribute]
public ServiceProxy`1<TService> get_ServiceProxy();
    [CompilerGeneratedAttribute]
private void set_ServiceProxy(ServiceProxy`1<TService> value);
    protected void Initialize(ServiceProxy`1<TService> proxy);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
}
internal static class Microsoft.PowerPlatform.Dataverse.Client.Connector.OnPremises.ServiceMetadataUtility : object {
    public static IssuerEndpointDictionary RetrieveIssuerEndpoints(EndpointAddress issuerMetadataAddress);
    public static IssuerEndpointDictionary RetrieveLiveIdIssuerEndpoints(IdentityProviderTrustConfiguration identityProviderTrustConfiguration);
    public static IssuerEndpointDictionary RetrieveDefaultIssuerEndpoint(AuthenticationProviderType authenticationProviderType, IssuerEndpoint issuer);
    public static IssuerEndpointDictionary RetrieveIssuerEndpoints(AuthenticationProviderType authenticationProviderType, ServiceEndpointDictionary endpoints, bool queryMetadata);
    public static IssuerEndpoint GetIssuer(Binding binding);
    private static IssuedSecurityTokenParameters GetIssuedTokenParameters(SecurityBindingElement securityElement);
    public static CustomBinding SetIssuer(Binding binding, IssuerEndpoint issuerEndpoint);
    private static bool IsEndpointSupported(ServiceEndpoint endpoint);
    internal static ServiceEndpointMetadata RetrieveServiceEndpointMetadata(Type contractType, Uri serviceUri, bool checkForSecondary);
    private static Version GetSDKVersionNumberFromAssembly();
    private static XmlQualifiedName GetPortTypeQName(ContractDescription contract);
    private static Collection`1<ContractDescription> CreateContractCollection(Type contract);
    public static void ReplaceEndpointAddress(ServiceEndpoint endpoint, Uri adddress);
    internal static void AdjustUserNameForWindows(ClientCredentials clientCredentials);
    private static string GetMexDocument(Uri wsdlUri);
    private static StringBuilder ProcessMexBody(string payload, StringBuilder sbMetadataBody);
    private static string GetMexBodyDocument(Uri wsdlUri);
}
internal class Microsoft.PowerPlatform.Dataverse.Client.Connector.OrganizationWebProxyClientAsync : WebProxyClientAsync`1<IOrganizationServiceAsync> {
    [CompilerGeneratedAttribute]
private bool <OfflinePlayback>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SyncOperationType>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CallerId>k__BackingField;
    [CompilerGeneratedAttribute]
private UserType <userType>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CallerRegardingObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LanguageCodeOverride>k__BackingField;
    internal bool OfflinePlayback { get; internal set; }
    public string SyncOperationType { get; public set; }
    public Guid CallerId { get; public set; }
    public UserType userType { get; public set; }
    public Guid CallerRegardingObjectId { get; public set; }
    internal int LanguageCodeOverride { get; internal set; }
    public OrganizationWebProxyClientAsync(Uri serviceUrl, bool useStrongTypes);
    public OrganizationWebProxyClientAsync(Uri serviceUrl, Assembly strongTypeAssembly);
    public OrganizationWebProxyClientAsync(Uri serviceUrl, TimeSpan timeout, bool useStrongTypes);
    public OrganizationWebProxyClientAsync(Uri uri, TimeSpan timeout, Assembly strongTypeAssembly);
    [CompilerGeneratedAttribute]
internal bool get_OfflinePlayback();
    [CompilerGeneratedAttribute]
internal void set_OfflinePlayback(bool value);
    [CompilerGeneratedAttribute]
public string get_SyncOperationType();
    [CompilerGeneratedAttribute]
public void set_SyncOperationType(string value);
    [CompilerGeneratedAttribute]
public Guid get_CallerId();
    [CompilerGeneratedAttribute]
public void set_CallerId(Guid value);
    [CompilerGeneratedAttribute]
public UserType get_userType();
    [CompilerGeneratedAttribute]
public void set_userType(UserType value);
    [CompilerGeneratedAttribute]
public Guid get_CallerRegardingObjectId();
    [CompilerGeneratedAttribute]
public void set_CallerRegardingObjectId(Guid value);
    [CompilerGeneratedAttribute]
internal int get_LanguageCodeOverride();
    [CompilerGeneratedAttribute]
internal void set_LanguageCodeOverride(int value);
    public sealed virtual void Associate(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    public sealed virtual Task AssociateAsync(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    public sealed virtual Guid Create(Entity entity);
    public sealed virtual Task`1<Guid> CreateAsync(Entity entity);
    public sealed virtual void Delete(string entityName, Guid id);
    public sealed virtual Task DeleteAsync(string entityName, Guid id);
    public sealed virtual void Disassociate(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    public sealed virtual Task DisassociateAsync(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    public sealed virtual OrganizationResponse Execute(OrganizationRequest request);
    public sealed virtual Task`1<OrganizationResponse> ExecuteAsync(OrganizationRequest request);
    public sealed virtual Entity Retrieve(string entityName, Guid id, ColumnSet columnSet);
    public sealed virtual Task`1<Entity> RetrieveAsync(string entityName, Guid id, ColumnSet columnSet);
    public sealed virtual EntityCollection RetrieveMultiple(QueryBase query);
    public sealed virtual Task`1<EntityCollection> RetrieveMultipleAsync(QueryBase query);
    public sealed virtual void Update(Entity entity);
    public sealed virtual Task UpdateAsync(Entity entity);
    protected internal virtual Guid CreateCore(Entity entity);
    protected Task`1<Guid> CreateAsyncCore(Entity entity);
    protected internal virtual Entity RetrieveCore(string entityName, Guid id, ColumnSet columnSet);
    protected internal virtual Task`1<Entity> RetrieveAsyncCore(string entityName, Guid id, ColumnSet columnSet);
    protected internal virtual void UpdateCore(Entity entity);
    protected internal virtual Task UpdateAsyncCore(Entity entity);
    protected internal virtual void DeleteCore(string entityName, Guid id);
    protected internal virtual Task DeleteAsyncCore(string entityName, Guid id);
    protected internal virtual OrganizationResponse ExecuteCore(OrganizationRequest request);
    protected internal virtual Task`1<OrganizationResponse> ExecuteAsyncCore(OrganizationRequest request);
    protected internal virtual void AssociateCore(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    protected internal virtual Task AssociateAsyncCore(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    protected internal virtual void DisassociateCore(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    protected internal virtual Task DisassociateAsyncCore(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    protected internal virtual EntityCollection RetrieveMultipleCore(QueryBase query);
    protected internal virtual Task`1<EntityCollection> RetrieveMultipleAsyncCore(QueryBase query);
    protected virtual WebProxyClientContextAsyncInitializer`1<IOrganizationServiceAsync> CreateNewInitializer();
    private void ProcessRequestBinderProperties(OrganizationRequest request);
}
internal class Microsoft.PowerPlatform.Dataverse.Client.Connector.OrganizationWebProxyClientAsyncContextInitializer : WebProxyClientContextAsyncInitializer`1<IOrganizationServiceAsync> {
    private OrganizationWebProxyClientAsync OrganizationWebProxyClient { get; }
    public OrganizationWebProxyClientAsyncContextInitializer(OrganizationWebProxyClientAsync proxy);
    private OrganizationWebProxyClientAsync get_OrganizationWebProxyClient();
    private void Initialize();
}
internal abstract class Microsoft.PowerPlatform.Dataverse.Client.Connector.WebProxyClientAsync`1 : ClientBase`1<TService> {
    private string _xrmSdkAssemblyFileVersion;
    [CompilerGeneratedAttribute]
private string <HeaderToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SdkClientVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientAppName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientAppVersion>k__BackingField;
    public string HeaderToken { get; public set; }
    public string SdkClientVersion { get; public set; }
    internal string ClientAppName { get; internal set; }
    internal string ClientAppVersion { get; internal set; }
    protected WebProxyClientAsync`1(Uri serviceUrl, bool useStrongTypes);
    protected WebProxyClientAsync`1(Uri serviceUrl, Assembly strongTypeAssembly);
    protected WebProxyClientAsync`1(Uri serviceUrl, TimeSpan timeout, bool useStrongTypes);
    protected WebProxyClientAsync`1(Uri serviceUrl, TimeSpan timeout, Assembly strongTypeAssembly);
    [CompilerGeneratedAttribute]
public string get_HeaderToken();
    [CompilerGeneratedAttribute]
public void set_HeaderToken(string value);
    [CompilerGeneratedAttribute]
public string get_SdkClientVersion();
    [CompilerGeneratedAttribute]
public void set_SdkClientVersion(string value);
    [CompilerGeneratedAttribute]
internal string get_ClientAppName();
    [CompilerGeneratedAttribute]
internal void set_ClientAppName(string value);
    [CompilerGeneratedAttribute]
internal string get_ClientAppVersion();
    [CompilerGeneratedAttribute]
internal void set_ClientAppVersion(string value);
    protected abstract virtual WebProxyClientContextAsyncInitializer`1<TService> CreateNewInitializer();
    internal void ExecuteAction(Action action);
    internal TResult ExecuteAction(Func`1<TResult> action);
    protected internal Task`1<T> ExecuteOperation(Func`1<Task`1<T>> asyncAction);
    protected static ServiceEndpoint CreateServiceEndpoint(Uri serviceUrl, bool useStrongTypes, TimeSpan timeout, Assembly strongTypeAssembly);
    private static ServiceEndpoint CreateBaseServiceEndpoint(Uri serviceUrl, TimeSpan timeout);
    protected static Binding GetBinding(Uri serviceUrl, TimeSpan timeout);
    internal string GetXrmSdkAssemblyFileVersion();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal abstract class Microsoft.PowerPlatform.Dataverse.Client.Connector.WebProxyClientContextAsyncInitializer`1 : object {
    private OperationContextScope _operationScope;
    [CompilerGeneratedAttribute]
private WebProxyClientAsync`1<TService> <ServiceProxy>k__BackingField;
    public WebProxyClientAsync`1<TService> ServiceProxy { get; private set; }
    protected WebProxyClientContextAsyncInitializer`1(WebProxyClientAsync`1<TService> proxy);
    [CompilerGeneratedAttribute]
public WebProxyClientAsync`1<TService> get_ServiceProxy();
    [CompilerGeneratedAttribute]
private void set_ServiceProxy(WebProxyClientAsync`1<TService> value);
    protected void AddTokenToHeaders();
    protected void AddCommonHeaders();
    protected void Initialize(ClientBase`1<TService> proxy);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class Microsoft.PowerPlatform.Dataverse.Client.DataverseConnectionStringProcessor : object {
    internal static string sampleClientId;
    internal static string sampleRedirectUrl;
    [CompilerGeneratedAttribute]
private Uri <ServiceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationType <AuthenticationType>k__BackingField;
    [CompilerGeneratedAttribute]
private PromptBehavior <PromptBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <HomeRealmUri>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientCredentials <ClientCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DomainName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertStoreName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertThumbprint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipDiscovery>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Organization>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOnPremOauth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Geo>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <RedirectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenCacheStorePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseUniqueConnectionInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCurrentUser>k__BackingField;
    public Uri ServiceUri { get; internal set; }
    public AuthenticationType AuthenticationType { get; internal set; }
    public PromptBehavior PromptBehavior { get; internal set; }
    public Uri HomeRealmUri { get; internal set; }
    public ClientCredentials ClientCredentials { get; internal set; }
    public string DomainName { get; internal set; }
    public string UserId { get; internal set; }
    internal string Password { get; internal set; }
    internal string CertStoreName { get; internal set; }
    internal string CertThumbprint { get; internal set; }
    internal bool SkipDiscovery { get; internal set; }
    public string ClientId { get; internal set; }
    public string ClientSecret { get; internal set; }
    public string Organization { get; internal set; }
    public bool IsOnPremOauth { get; internal set; }
    public string Geo { get; internal set; }
    public Uri RedirectUri { get; internal set; }
    public string TokenCacheStorePath { get; internal set; }
    public bool UseUniqueConnectionInstance { get; internal set; }
    public bool UseCurrentUser { get; public set; }
    private DataverseConnectionStringProcessor(IDictionary`2<string, string> connection, ILogger logger);
    private DataverseConnectionStringProcessor(string serviceUri, string userName, string password, string domain, string homeRealmUri, string authType, string requireNewInstance, string clientId, string redirectUri, string tokenCacheStorePath, string loginPrompt, string certStoreName, string certThumbprint, string skipDiscovery, string IntegratedSecurity, string clientSecret, ILogger logger);
    private static DataverseConnectionStringProcessor();
    [CompilerGeneratedAttribute]
public Uri get_ServiceUri();
    [CompilerGeneratedAttribute]
internal void set_ServiceUri(Uri value);
    [CompilerGeneratedAttribute]
public AuthenticationType get_AuthenticationType();
    [CompilerGeneratedAttribute]
internal void set_AuthenticationType(AuthenticationType value);
    [CompilerGeneratedAttribute]
public PromptBehavior get_PromptBehavior();
    [CompilerGeneratedAttribute]
internal void set_PromptBehavior(PromptBehavior value);
    [CompilerGeneratedAttribute]
public Uri get_HomeRealmUri();
    [CompilerGeneratedAttribute]
internal void set_HomeRealmUri(Uri value);
    [CompilerGeneratedAttribute]
public ClientCredentials get_ClientCredentials();
    [CompilerGeneratedAttribute]
internal void set_ClientCredentials(ClientCredentials value);
    [CompilerGeneratedAttribute]
public string get_DomainName();
    [CompilerGeneratedAttribute]
internal void set_DomainName(string value);
    [CompilerGeneratedAttribute]
public string get_UserId();
    [CompilerGeneratedAttribute]
internal void set_UserId(string value);
    [CompilerGeneratedAttribute]
internal string get_Password();
    [CompilerGeneratedAttribute]
internal void set_Password(string value);
    [CompilerGeneratedAttribute]
internal string get_CertStoreName();
    [CompilerGeneratedAttribute]
internal void set_CertStoreName(string value);
    [CompilerGeneratedAttribute]
internal string get_CertThumbprint();
    [CompilerGeneratedAttribute]
internal void set_CertThumbprint(string value);
    [CompilerGeneratedAttribute]
internal bool get_SkipDiscovery();
    [CompilerGeneratedAttribute]
internal void set_SkipDiscovery(bool value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
internal void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientSecret();
    [CompilerGeneratedAttribute]
internal void set_ClientSecret(string value);
    [CompilerGeneratedAttribute]
public string get_Organization();
    [CompilerGeneratedAttribute]
internal void set_Organization(string value);
    [CompilerGeneratedAttribute]
public bool get_IsOnPremOauth();
    [CompilerGeneratedAttribute]
internal void set_IsOnPremOauth(bool value);
    [CompilerGeneratedAttribute]
public string get_Geo();
    [CompilerGeneratedAttribute]
internal void set_Geo(string value);
    [CompilerGeneratedAttribute]
public Uri get_RedirectUri();
    [CompilerGeneratedAttribute]
internal void set_RedirectUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_TokenCacheStorePath();
    [CompilerGeneratedAttribute]
internal void set_TokenCacheStorePath(string value);
    [CompilerGeneratedAttribute]
public bool get_UseUniqueConnectionInstance();
    [CompilerGeneratedAttribute]
internal void set_UseUniqueConnectionInstance(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseCurrentUser();
    [CompilerGeneratedAttribute]
public void set_UseCurrentUser(bool value);
    private bool GetValidUri(string uriSource, Uri& validUriResult);
    private void SetOrgnameAndOnlineRegion(Uri serviceUri);
    public static DataverseConnectionStringProcessor Parse(string connectionString, ILogger logger);
}
public class Microsoft.PowerPlatform.Dataverse.Client.DataverseDataTypeWrapper : object {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private DataverseFieldType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferencedEntity>k__BackingField;
    public object Value { get; public set; }
    public DataverseFieldType Type { get; public set; }
    public string ReferencedEntity { get; public set; }
    public DataverseDataTypeWrapper(object data, DataverseFieldType CdsFieldType);
    public DataverseDataTypeWrapper(object data, DataverseFieldType CdsFieldType, string relatedEntityName);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public DataverseFieldType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(DataverseFieldType value);
    [CompilerGeneratedAttribute]
public string get_ReferencedEntity();
    [CompilerGeneratedAttribute]
public void set_ReferencedEntity(string value);
}
public enum Microsoft.PowerPlatform.Dataverse.Client.DataverseFieldType : Enum {
    public int value__;
    public static DataverseFieldType Boolean;
    public static DataverseFieldType DateTime;
    public static DataverseFieldType Decimal;
    public static DataverseFieldType Float;
    public static DataverseFieldType Money;
    public static DataverseFieldType Number;
    public static DataverseFieldType Customer;
    public static DataverseFieldType Key;
    public static DataverseFieldType Lookup;
    public static DataverseFieldType Picklist;
    public static DataverseFieldType String;
    public static DataverseFieldType UniqueIdentifier;
    public static DataverseFieldType Image;
    public static DataverseFieldType File;
    public static DataverseFieldType Raw;
}
public class Microsoft.PowerPlatform.Dataverse.Client.DataverseServiceClientBuilder : object {
    private ConnectionOptions _connectionOptions;
    internal DataverseServiceClientBuilder(ConnectionOptions connectionOptions);
    public static DataverseServiceClientBuilder Create(ConnectionOptions connectionOptions);
}
internal class Microsoft.PowerPlatform.Dataverse.Client.DataverseTelemetryBehaviors : object {
    private ConnectionService _callerCdsConnectionServiceHandler;
    private int _maxFaultSize;
    private int _maxReceivedMessageSize;
    private int _maxBufferPoolSize;
    private string _userAgent;
    private static int MAXBUFFERPOOLDEFAULT;
    private static int MAXFAULTSIZEDEFAULT;
    private static int MAXRECVMESSAGESIZEDEFAULT;
    public DataverseTelemetryBehaviors(ConnectionService cli);
    public sealed virtual void AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    public sealed virtual void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher);
    public sealed virtual void Validate(ServiceEndpoint endpoint);
    public sealed virtual void AfterReceiveReply(Message& reply, object correlationState);
    public sealed virtual object BeforeSendRequest(Message& request, IClientChannel channel);
    private void AddExternalHeaders(HttpRequestMessageProperty httpRequestMessage);
}
[LocalizableAttribute("False")]
internal class Microsoft.PowerPlatform.Dataverse.Client.DataverseTraceLogger : TraceLoggerBase {
    private List`1<Exception> _ActiveExceptionsList;
    internal ILogger _logger;
    [CompilerGeneratedAttribute]
private ConcurrentQueue`1<Tuple`2<DateTime, string>> <Logs>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <LogRetentionDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnabledInMemoryLogCapture>k__BackingField;
    public string LastError { get; }
    public string DefaultTraceSourceName { get; }
    public ConcurrentQueue`1<Tuple`2<DateTime, string>> Logs { get; private set; }
    public TimeSpan LogRetentionDuration { get; public set; }
    public bool EnabledInMemoryLogCapture { get; public set; }
    public DataverseTraceLogger(string traceSourceName);
    public DataverseTraceLogger(ILogger logger);
    public string get_LastError();
    public string get_DefaultTraceSourceName();
    [CompilerGeneratedAttribute]
public ConcurrentQueue`1<Tuple`2<DateTime, string>> get_Logs();
    [CompilerGeneratedAttribute]
private void set_Logs(ConcurrentQueue`1<Tuple`2<DateTime, string>> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_LogRetentionDuration();
    [CompilerGeneratedAttribute]
public void set_LogRetentionDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_EnabledInMemoryLogCapture();
    [CompilerGeneratedAttribute]
public void set_EnabledInMemoryLogCapture(bool value);
    public virtual void ResetLastError();
    public void ClearLogCache();
    public virtual void Log(string message);
    public virtual void Log(string message, TraceEventType eventType);
    public virtual void Log(string message, TraceEventType eventType, Exception exception);
    public virtual void Log(Exception exception);
    public void LogRetry(int retryCount, OrganizationRequest req, TimeSpan retryPauseTimeRunning, bool isTerminalFailure, bool isThrottled, string webUriMessageReq);
    public void LogException(OrganizationRequest req, Exception ex, string errorStringCheck, string webUriMessageReq);
    public void LogFailure(OrganizationRequest req, Guid requestTrackingId, Nullable`1<Guid> sessionTrackingId, bool disableConnectionLocking, TimeSpan LockWait, Stopwatch logDt, Exception ex, string errorStringCheck, bool isTerminalFailure, string webUriMessageReq);
    internal string GetFormatedRequestSessionIdString(Guid requestId, Nullable`1<Guid> sessionId);
    private void TraceEvent(TraceEventType eventType, int id, string message, Exception ex);
    private void GetExceptionDetail(object objException, StringBuilder sw, int level, StringBuilder lastErrorMsg);
    private static string ExtractString(IEnumerable`1<string> enumerable);
    internal static string GetFirstLineFromString(string textBlock);
    private static string GenerateOrgErrorDetailsInfo(ErrorDetailCollection errorDetails);
    private static void FormatExceptionMessage(string source, string targetSite, string message, string helpLink, string stackTrace, StringBuilder sw, int level);
    private static void FormatOrgFaultMessage(string message, string timeOfEvent, string errorCode, string traceText, string helpLink, StringBuilder sw, int level);
    private static void FormatSvcFaultMessage(string message, string source, string errorCode, IDictionary dataItems, string helpLink, StringBuilder sw, int level);
    private static LogLevel TranslateTraceEventType(TraceEventType traceLevel);
}
internal class Microsoft.PowerPlatform.Dataverse.Client.DynamicEntityUtility : object {
    private ServiceClient svcAct;
    private MetadataUtility metadataUtil;
    public DynamicEntityUtility(ServiceClient svcActions, MetadataUtility metaUtility);
    internal List`1<AttributeData> GetAttributeDataByEntity(string entityName, String[] attributes);
    internal List`1<AttributeData> GetAttributeDataByEntity(string entityName, Guid entityId, String[] attributes);
    internal Entity RetrieveByIdAsDynamicEntity(string entityName, Guid entityId, String[] attributes);
}
internal static class Microsoft.PowerPlatform.Dataverse.Client.Environs : object {
    private static object _initLock;
    [CompilerGeneratedAttribute]
private static string <XrmSdkFileVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DvSvcClientFileVersion>k__BackingField;
    public static string XrmSdkFileVersion { get; private set; }
    public static string DvSvcClientFileVersion { get; private set; }
    private static Environs();
    [CompilerGeneratedAttribute]
public static string get_XrmSdkFileVersion();
    [CompilerGeneratedAttribute]
private static void set_XrmSdkFileVersion(string value);
    [CompilerGeneratedAttribute]
public static string get_DvSvcClientFileVersion();
    [CompilerGeneratedAttribute]
private static void set_DvSvcClientFileVersion(string value);
}
internal static class Microsoft.PowerPlatform.Dataverse.Client.ErrorCodes : object {
    public static int ThrottlingTimeExceededError;
    public static int ThrottlingBurstRequestLimitExceededError;
    public static int ThrottlingConcurrencyLimitExceededError;
    public static int DataverseServiceClientNotIntialized;
    public static int SolutionFilePathNull;
    public static int OperationInvalidOnPrem;
}
public class Microsoft.PowerPlatform.Dataverse.Client.Extensions.AsyncStatusResponse : object {
    [CompilerGeneratedAttribute]
private Entity <RetrievedEntity>k__BackingField;
    [CompilerGeneratedAttribute]
private AsyncStatusResponse_statuscode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private AsyncStatusResponse_statecode <State>k__BackingField;
    public Entity RetrievedEntity { get; public set; }
    public Guid AsyncOperationId { get; }
    public string OperationName { get; }
    public string OperationType { get; }
    public string FriendlyMessage { get; }
    public string Message { get; }
    public Guid CorrlationId { get; }
    public AsyncStatusResponse_statuscode StatusCode { get; internal set; }
    public string StatusCode_Localized { get; }
    public AsyncStatusResponse_statecode State { get; internal set; }
    public string State_Localized { get; }
    internal AsyncStatusResponse(EntityCollection asyncOperationResponses);
    [CompilerGeneratedAttribute]
public Entity get_RetrievedEntity();
    [CompilerGeneratedAttribute]
public void set_RetrievedEntity(Entity value);
    public Guid get_AsyncOperationId();
    public string get_OperationName();
    public string get_OperationType();
    public string get_FriendlyMessage();
    public string get_Message();
    public Guid get_CorrlationId();
    [CompilerGeneratedAttribute]
public AsyncStatusResponse_statuscode get_StatusCode();
    [CompilerGeneratedAttribute]
internal void set_StatusCode(AsyncStatusResponse_statuscode value);
    public string get_StatusCode_Localized();
    [CompilerGeneratedAttribute]
public AsyncStatusResponse_statecode get_State();
    [CompilerGeneratedAttribute]
internal void set_State(AsyncStatusResponse_statecode value);
    public string get_State_Localized();
}
[ExtensionAttribute]
public static class Microsoft.PowerPlatform.Dataverse.Client.Extensions.BatchExtensions : object {
    [ExtensionAttribute]
public static Guid CreateBatchOperationRequest(ServiceClient serviceClient, string batchName, bool returnResults, bool continueOnError);
    [ExtensionAttribute]
public static Guid GetBatchOperationIdRequestByName(ServiceClient serviceClient, string batchName);
    [ExtensionAttribute]
public static OrganizationRequest GetBatchRequestAtPosition(ServiceClient serviceClient, Guid batchId, int position);
    [ExtensionAttribute]
public static void ReleaseBatchInfoById(ServiceClient serviceClient, Guid batchId);
    [ExtensionAttribute]
public static RequestBatch GetBatchById(ServiceClient serviceClient, Guid batchId);
    [ExtensionAttribute]
public static List`1<Dictionary`2<string, Dictionary`2<string, object>>> RetrieveBatchResponse(ServiceClient serviceClient, Guid batchId);
    [ExtensionAttribute]
public static ExecuteMultipleResponse ExecuteBatch(ServiceClient serviceClient, Guid batchId);
    [ExtensionAttribute]
internal static bool AddRequestToBatch(ServiceClient serviceClient, Guid batchId, OrganizationRequest req, string batchTagText, string successText, bool bypassPluginExecution);
}
[ExtensionAttribute]
public static class Microsoft.PowerPlatform.Dataverse.Client.Extensions.CRUDExtentions : object {
    [ExtensionAttribute]
public static Guid CreateNewRecord(ServiceClient serviceClient, string entityName, Dictionary`2<string, DataverseDataTypeWrapper> valueArray, string applyToSolution, bool enabledDuplicateDetection, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static bool UpdateEntity(ServiceClient serviceClient, string entityName, string keyFieldName, Guid id, Dictionary`2<string, DataverseDataTypeWrapper> fieldList, string applyToSolution, bool enabledDuplicateDetection, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static bool UpdateStateAndStatusForEntity(ServiceClient serviceClient, string entName, Guid id, string stateCode, string statusCode, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static bool UpdateStateAndStatusForEntity(ServiceClient serviceClient, string entName, Guid id, int stateCode, int statusCode, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static bool DeleteEntity(ServiceClient serviceClient, string entityType, Guid entityId, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static Guid CreateAnnotation(ServiceClient serviceClient, string targetEntityTypeName, Guid targetEntityId, Dictionary`2<string, DataverseDataTypeWrapper> fieldList, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static Guid CreateNewActivityEntry(ServiceClient serviceClient, string activityEntityTypeName, string regardingEntityTypeName, Guid regardingId, string subject, string description, string creatingUserId, Dictionary`2<string, DataverseDataTypeWrapper> fieldList, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static bool CloseActivity(ServiceClient serviceClient, string activityEntityType, Guid activityId, string stateCode, string statusCode, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
private static bool UpdateStateStatusForEntity(ServiceClient serviceClient, string entName, Guid entId, string newState, string newStatus, int newStateid, int newStatusid, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static bool CreateEntityAssociation(ServiceClient serviceClient, string entityName1, Guid entity1Id, string entityName2, Guid entity2Id, string relationshipName, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static bool CreateMultiEntityAssociation(ServiceClient serviceClient, string targetEntity, Guid targetEntity1Id, string sourceEntityName, List`1<Guid> sourceEntitieIds, string relationshipName, Guid batchId, bool bypassPluginExecution, bool isReflexiveRelationship);
    [ExtensionAttribute]
public static bool DeleteEntityAssociation(ServiceClient serviceClient, string entityName1, Guid entity1Id, string entityName2, Guid entity2Id, string relationshipName, Guid batchId, bool bypassPluginExecution);
}
public class Microsoft.PowerPlatform.Dataverse.Client.Extensions.DataverseFilterConditionItem : object {
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FieldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ConditionOperator <FieldOperator>k__BackingField;
    public string FieldName { get; public set; }
    public object FieldValue { get; public set; }
    public ConditionOperator FieldOperator { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public object get_FieldValue();
    [CompilerGeneratedAttribute]
public void set_FieldValue(object value);
    [CompilerGeneratedAttribute]
public ConditionOperator get_FieldOperator();
    [CompilerGeneratedAttribute]
public void set_FieldOperator(ConditionOperator value);
}
public class Microsoft.PowerPlatform.Dataverse.Client.Extensions.DataverseSearchFilter : object {
    [CompilerGeneratedAttribute]
private List`1<DataverseFilterConditionItem> <SearchConditions>k__BackingField;
    [CompilerGeneratedAttribute]
private LogicalOperator <FilterOperator>k__BackingField;
    public List`1<DataverseFilterConditionItem> SearchConditions { get; public set; }
    public LogicalOperator FilterOperator { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<DataverseFilterConditionItem> get_SearchConditions();
    [CompilerGeneratedAttribute]
public void set_SearchConditions(List`1<DataverseFilterConditionItem> value);
    [CompilerGeneratedAttribute]
public LogicalOperator get_FilterOperator();
    [CompilerGeneratedAttribute]
public void set_FilterOperator(LogicalOperator value);
}
[ExtensionAttribute]
public static class Microsoft.PowerPlatform.Dataverse.Client.Extensions.DeploymentExtensions : object {
    [ExtensionAttribute]
public static Guid SubmitImportRequest(ServiceClient serviceClient, ImportRequest importRequest, DateTime delayUntil);
    [ExtensionAttribute]
public static Guid ImportDataMap(ServiceClient serviceClient, string dataMapXml, bool replaceIds, bool dataMapXmlIsFilePath);
    [ExtensionAttribute]
public static Guid ImportSolutionAsync(ServiceClient serviceClient, string solutionPath, Guid& importId, bool activatePlugIns, bool overwriteUnManagedCustomizations, bool skipDependancyOnProductUpdateCheckOnInstall, bool importAsHoldingSolution, bool isInternalUpgrade, Dictionary`2<string, object> extraParameters);
    [ExtensionAttribute]
public static Guid ImportSolutionAsync(ServiceClient serviceClient, Guid StageSolutionUploadId, Guid& importId, bool activatePlugIns, bool overwriteUnManagedCustomizations, bool skipDependancyOnProductUpdateCheckOnInstall, bool importAsHoldingSolution, bool isInternalUpgrade, Dictionary`2<string, object> extraParameters);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Extensions.DeploymentExtensions/<StageSolution>d__4")]
[ExtensionAttribute]
public static Task`1<StageSolutionResults> StageSolution(ServiceClient serviceClient, string solutionPath, MemoryStream solutionStream);
    [ExtensionAttribute]
public static Guid ImportSolution(ServiceClient serviceClient, string solutionPath, Guid& importId, bool activatePlugIns, bool overwriteUnManagedCustomizations, bool skipDependancyOnProductUpdateCheckOnInstall, bool importAsHoldingSolution, bool isInternalUpgrade, Dictionary`2<string, object> extraParameters);
    [ExtensionAttribute]
public static Guid ImportSolution(ServiceClient serviceClient, Guid StageSolutionUploadId, Guid& importId, bool activatePlugIns, bool overwriteUnManagedCustomizations, bool skipDependancyOnProductUpdateCheckOnInstall, bool importAsHoldingSolution, bool isInternalUpgrade, Dictionary`2<string, object> extraParameters);
    [ExtensionAttribute]
public static Guid DeleteAndPromoteSolutionAsync(ServiceClient serviceClient, string uniqueName);
    [ExtensionAttribute]
public static Guid InstallSampleData(ServiceClient serviceClient);
    [ExtensionAttribute]
public static Guid UninstallSampleData(ServiceClient serviceClient);
    [ExtensionAttribute]
public static ImportStatus IsSampleDataInstalled(ServiceClient serviceClient);
    [ExtensionAttribute]
public static SolutionOperationResult RetrieveSolutionImportResultAsync(ServiceClient serviceClient, Guid importJobId, bool includeFormattedResults);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Extensions.DeploymentExtensions/<GetAsyncOperationStatus>d__12")]
[ExtensionAttribute]
public static Task`1<AsyncStatusResponse> GetAsyncOperationStatus(ServiceClient serviceClient, Guid asyncOperationId);
    [ExtensionAttribute]
internal static Guid ImportSolutionToImpl(ServiceClient serviceClient, string solutionPath, Guid stageSolutionUploadId, Guid& importId, bool activatePlugIns, bool overwriteUnManagedCustomizations, bool skipDependancyOnProductUpdateCheckOnInstall, bool importAsHoldingSolution, bool isInternalUpgrade, bool useAsync, Dictionary`2<string, object> extraParameters);
}
public enum Microsoft.PowerPlatform.Dataverse.Client.Extensions.FormTypeId : Enum {
    public int value__;
    public static FormTypeId Dashboard;
    public static FormTypeId AppointmentBook;
    public static FormTypeId Main;
    public static FormTypeId Mobile;
    public static FormTypeId Other;
}
[ExtensionAttribute]
public static class Microsoft.PowerPlatform.Dataverse.Client.Extensions.GeneralExtensions : object {
    [ExtensionAttribute]
public static Guid ExecuteWorkflowOnEntity(ServiceClient serviceClient, string workflowName, Guid id, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static bool AssignEntityToUser(ServiceClient serviceClient, Guid userId, string entityName, Guid entityId, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static bool AddEntityToQueue(ServiceClient serviceClient, Guid entityId, string entityName, string queueName, Guid workingUserId, bool setWorkingByUser, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static bool SendSingleEmail(ServiceClient serviceClient, Guid emailid, string token, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static Guid GetMyUserId(ServiceClient serviceClient);
}
public enum Microsoft.PowerPlatform.Dataverse.Client.Extensions.LogicalSearchOperator : Enum {
    public int value__;
    public static LogicalSearchOperator None;
    public static LogicalSearchOperator Or;
    public static LogicalSearchOperator And;
}
public enum Microsoft.PowerPlatform.Dataverse.Client.Extensions.LogicalSortOrder : Enum {
    public int value__;
    public static LogicalSortOrder Ascending;
    public static LogicalSortOrder Descending;
}
[ExtensionAttribute]
public static class Microsoft.PowerPlatform.Dataverse.Client.Extensions.MetadataExtensions : object {
    [ExtensionAttribute]
public static PickListMetaElement GetPickListElementFromMetadataEntity(ServiceClient serviceClient, string targetEntity, string attribName);
    [ExtensionAttribute]
public static OptionSetMetadata GetGlobalOptionSetMetadata(ServiceClient serviceClient, string globalOptionSetName);
    [ExtensionAttribute]
public static List`1<EntityMetadata> GetAllEntityMetadata(ServiceClient serviceClient, bool onlyPublished, EntityFilters filter);
    [ExtensionAttribute]
public static EntityMetadata GetEntityMetadata(ServiceClient serviceClient, string entityLogicalname, EntityFilters queryFilter);
    [ExtensionAttribute]
public static List`1<EntityReference> GetEntityFormIdListByType(ServiceClient serviceClient, string entityLogicalname, FormTypeId formTypeId);
    [ExtensionAttribute]
public static List`1<AttributeMetadata> GetAllAttributesForEntity(ServiceClient serviceClient, string entityLogicalname);
    [ExtensionAttribute]
public static AttributeMetadata GetEntityAttributeMetadataForAttribute(ServiceClient serviceClient, string entityLogicalname, string attribName);
    [ExtensionAttribute]
public static string GetEntityDisplayName(ServiceClient serviceClient, string entityName, int entityTypeCode);
    [ExtensionAttribute]
public static string GetEntityDisplayNamePlural(ServiceClient serviceClient, string entityName, int entityTypeCode);
    [ExtensionAttribute]
public static void ResetLocalMetadataCache(ServiceClient serviceClient, string entityName);
    [ExtensionAttribute]
private static string GetEntityDisplayNameImpl(ServiceClient serviceClient, string entityName, int entityTypeCode, bool getPlural);
    [ExtensionAttribute]
public static string GetEntityTypeCode(ServiceClient serviceClient, string entityName);
    [ExtensionAttribute]
public static string GetEntityName(ServiceClient serviceClient, int entityTypeCode);
    [ExtensionAttribute]
public static bool CreateOrUpdatePickListElement(ServiceClient serviceClient, string targetEntity, string attribName, List`1<LocalizedLabel> locLabelList, int valueData, bool publishOnComplete);
    [ExtensionAttribute]
public static bool PublishEntity(ServiceClient serviceClient, string entityName);
    [ExtensionAttribute]
internal static bool LoadLCIDs(ServiceClient serviceClient);
    [ExtensionAttribute]
internal static void AddValueToPropertyList(ServiceClient serviceClient, KeyValuePair`2<string, DataverseDataTypeWrapper> Field, AttributeCollection PropertyList);
    private static string GetLocalLabel(Label localLabel);
}
public class Microsoft.PowerPlatform.Dataverse.Client.Extensions.PickListItem : object {
    [CompilerGeneratedAttribute]
private string <DisplayLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PickListItemId>k__BackingField;
    public string DisplayLabel { get; public set; }
    public int PickListItemId { get; public set; }
    public PickListItem(string label, int id);
    [CompilerGeneratedAttribute]
public string get_DisplayLabel();
    [CompilerGeneratedAttribute]
public void set_DisplayLabel(string value);
    [CompilerGeneratedAttribute]
public int get_PickListItemId();
    [CompilerGeneratedAttribute]
public void set_PickListItemId(int value);
}
public class Microsoft.PowerPlatform.Dataverse.Client.Extensions.PickListMetaElement : object {
    [CompilerGeneratedAttribute]
private string <ActualValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PickListLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayValue>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PickListItem> <Items>k__BackingField;
    public string ActualValue { get; public set; }
    public string PickListLabel { get; public set; }
    public string DisplayValue { get; public set; }
    public List`1<PickListItem> Items { get; public set; }
    public PickListMetaElement(string actualValue, string displayValue, string pickListLabel);
    [CompilerGeneratedAttribute]
public string get_ActualValue();
    [CompilerGeneratedAttribute]
public void set_ActualValue(string value);
    [CompilerGeneratedAttribute]
public string get_PickListLabel();
    [CompilerGeneratedAttribute]
public void set_PickListLabel(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayValue();
    [CompilerGeneratedAttribute]
public void set_DisplayValue(string value);
    [CompilerGeneratedAttribute]
public List`1<PickListItem> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<PickListItem> value);
}
[ExtensionAttribute]
public static class Microsoft.PowerPlatform.Dataverse.Client.Extensions.QueryExtensions : object {
    [ExtensionAttribute]
public static Dictionary`2<string, Dictionary`2<string, object>> GetEntityDataBySearchParams(ServiceClient serviceClient, string entityName, Dictionary`2<string, string> searchParameters, LogicalSearchOperator searchOperator, List`1<string> fieldList, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static Dictionary`2<string, Dictionary`2<string, object>> GetEntityDataBySearchParams(ServiceClient serviceClient, string entityName, List`1<DataverseSearchFilter> searchParameters, LogicalSearchOperator searchOperator, List`1<string> fieldList, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static Dictionary`2<string, Dictionary`2<string, object>> GetEntityDataBySearchParams(ServiceClient serviceClient, string entityName, List`1<DataverseSearchFilter> searchParameters, LogicalSearchOperator searchOperator, List`1<string> fieldList, Dictionary`2<string, LogicalSortOrder> sortParameters, int pageCount, int pageNumber, string pageCookie, String& outPageCookie, Boolean& isMoreRecords, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static Dictionary`2<string, Dictionary`2<string, object>> GetEntityDataByFetchSearch(ServiceClient serviceClient, string fetchXml, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static EntityCollection GetEntityDataByFetchSearchEC(ServiceClient serviceClient, string fetchXml, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static Dictionary`2<string, Dictionary`2<string, object>> GetEntityDataByFetchSearch(ServiceClient serviceClient, string fetchXml, int pageCount, int pageNumber, string pageCookie, String& outPageCookie, Boolean& isMoreRecords, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static EntityCollection GetEntityDataByFetchSearchEC(ServiceClient serviceClient, string fetchXml, int pageCount, int pageNumber, string pageCookie, String& outPageCookie, Boolean& isMoreRecords, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static Dictionary`2<string, Dictionary`2<string, object>> GetEntityDataByLinkedSearch(ServiceClient serviceClient, string returnEntityName, Dictionary`2<string, string> primarySearchParameters, string linkedEntityName, Dictionary`2<string, string> linkedSearchParameters, string linkedEntityLinkAttribName, string m2MEntityName, string returnEntityPrimaryId, LogicalSearchOperator searchOperator, List`1<string> fieldList, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static Dictionary`2<string, Dictionary`2<string, object>> GetEntityDataByLinkedSearch(ServiceClient serviceClient, string returnEntityName, List`1<DataverseSearchFilter> primarySearchParameters, string linkedEntityName, List`1<DataverseSearchFilter> linkedSearchParameters, string linkedEntityLinkAttribName, string m2MEntityName, string returnEntityPrimaryId, LogicalSearchOperator searchOperator, List`1<string> fieldList, Guid batchId, bool isReflexiveRelationship, bool bypassPluginExecution);
    [ExtensionAttribute]
public static Dictionary`2<string, object> GetEntityDataById(ServiceClient serviceClient, string searchEntity, Guid entityId, List`1<string> fieldList, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static Dictionary`2<string, Dictionary`2<string, object>> GetActivitiesBy(ServiceClient serviceClient, string searchEntity, Guid entityId, List`1<string> fieldList, LogicalSearchOperator searchOperator, Dictionary`2<string, string> searchParameters, Dictionary`2<string, LogicalSortOrder> sortParameters, int pageCount, int pageNumber, string pageCookie, String& outPageCookie, Boolean& isMoreRecords, Guid batchId);
    [ExtensionAttribute]
public static Dictionary`2<string, Dictionary`2<string, object>> GetActivitiesBy(ServiceClient serviceClient, string searchEntity, Guid entityId, List`1<string> fieldList, LogicalSearchOperator searchOperator, List`1<DataverseSearchFilter> searchParameters, Dictionary`2<string, LogicalSortOrder> sortParameters, int pageCount, int pageNumber, string pageCookie, String& outPageCookie, Boolean& isMoreRecords, Guid batchId);
    [ExtensionAttribute]
public static Dictionary`2<string, Dictionary`2<string, object>> GetEntityDataByRollup(ServiceClient serviceClient, string searchEntity, Guid entityId, string rollupfromEntity, List`1<string> fieldList, LogicalSearchOperator searchOperator, Dictionary`2<string, string> searchParameters, Dictionary`2<string, LogicalSortOrder> sortParameters, Guid batchId);
    [ExtensionAttribute]
public static Dictionary`2<string, Dictionary`2<string, object>> GetEntityDataByRollup(ServiceClient serviceClient, string searchEntity, Guid entityId, string rollupfromEntity, List`1<string> fieldList, LogicalSearchOperator searchOperator, List`1<DataverseSearchFilter> searchParameters, Dictionary`2<string, LogicalSortOrder> sortParameters, int pageCount, int pageNumber, string pageCookie, String& outPageCookie, Boolean& isMoreRecords, Guid batchId, bool bypassPluginExecution);
    [ExtensionAttribute]
public static T GetDataByKeyFromResultsSet(ServiceClient serviceClient, Dictionary`2<string, object> results, string key);
    private static QueryExpression BuildQueryFilter(string entityName, List`1<DataverseSearchFilter> searchParams, List`1<string> fieldList, LogicalSearchOperator searchOperator);
    private static string AddPagingParametersToFetchXml(string fetchXml, int pageCount, int pageNum, string pageCookie);
    [ExtensionAttribute]
private static QueryExpression BuildQueryFilter(ServiceClient serviceClient, string entityName, List`1<DataverseSearchFilter> searchParams, List`1<string> fieldList, LogicalSearchOperator searchOperator);
    [ExtensionAttribute]
private static void BuildSearchFilterListFromSearchTerms(ServiceClient serviceClient, Dictionary`2<string, string> inSearchParams, List`1<DataverseSearchFilter> outSearchList);
    private static List`1<FilterExpression> BuildFilterList(List`1<DataverseSearchFilter> searchParams);
    internal static Dictionary`2<string, Dictionary`2<string, object>> CreateResultDataSet(EntityCollection resp);
    private static void AddDataToResultSet(Dictionary`2& resultSet, Entity dataEntity);
    [ExtensionAttribute]
internal static Guid LookupEntitiyID(ServiceClient serviceClient, string SearchValue, string ent, string IDField, string SearchField);
    [ExtensionAttribute]
internal static Guid GetLookupValueForEntity(ServiceClient serviceClient, string entName, string Value);
}
internal interface Microsoft.PowerPlatform.Dataverse.Client.IConnectionService {
}
public static class Microsoft.PowerPlatform.Dataverse.Client.ImportSolutionProperties : object {
    public static string DESIREDLAYERORDERPARAM;
    public static string ASYNCRIBBONPROCESSING;
    public static string SOLUTIONNAMEPARAM;
    public static string COMPONENTPARAMETERSPARAM;
    public static string CONVERTTOMANAGED;
    public static string TEMPLATESUFFIX;
    public static string ISTEMPLATEMODE;
    public static string USESTAGEANDUPGRADEMODE;
    private static ImportSolutionProperties();
}
[ExtensionAttribute]
internal static class Microsoft.PowerPlatform.Dataverse.Client.InternalExtensions.BaseTypeExtensions : object {
    [ExtensionAttribute]
public static T ToEnum(string enumName);
    [ExtensionAttribute]
public static T ToEnum(int enumValue);
    [ExtensionAttribute]
public static IDictionary`2<string, string> ToDictionary(string connectionString);
    [ExtensionAttribute]
public static string FormatWith(string format, Object[] args);
    [ExtensionAttribute]
public static string FirstNotNullOrEmpty(IDictionary`2<TKey, string> dictionary, TKey[] keys);
}
[ExtensionAttribute]
internal static class Microsoft.PowerPlatform.Dataverse.Client.InternalExtensions.RequestResponseExtenstions : object {
    [ExtensionAttribute]
internal static ExpandoObject ToExpandoObject(OrganizationRequest request);
}
[ExtensionAttribute]
internal static class Microsoft.PowerPlatform.Dataverse.Client.InternalExtensions.SecureStringExtensions : object {
    [ExtensionAttribute]
public static string ToUnsecureString(SecureString value);
}
[ServiceContractAttribute]
[KnownAssemblyAttribute]
public interface Microsoft.PowerPlatform.Dataverse.Client.IOrganizationServiceAsync {
    [OperationContractAttribute]
public abstract virtual Task`1<Guid> CreateAsync(Entity entity);
    [OperationContractAttribute]
public abstract virtual Task`1<Entity> RetrieveAsync(string entityName, Guid id, ColumnSet columnSet);
    [OperationContractAttribute]
public abstract virtual Task UpdateAsync(Entity entity);
    [OperationContractAttribute]
public abstract virtual Task DeleteAsync(string entityName, Guid id);
    [OperationContractAttribute]
public abstract virtual Task`1<OrganizationResponse> ExecuteAsync(OrganizationRequest request);
    [OperationContractAttribute]
public abstract virtual Task AssociateAsync(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    [OperationContractAttribute]
public abstract virtual Task DisassociateAsync(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    [OperationContractAttribute]
public abstract virtual Task`1<EntityCollection> RetrieveMultipleAsync(QueryBase query);
}
[ServiceContractAttribute]
[KnownAssemblyAttribute]
public interface Microsoft.PowerPlatform.Dataverse.Client.IOrganizationServiceAsync2 {
    [OperationContractAttribute]
public abstract virtual Task AssociateAsync(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities, CancellationToken cancellationToken);
    [OperationContractAttribute]
public abstract virtual Task`1<Guid> CreateAsync(Entity entity, CancellationToken cancellationToken);
    public abstract virtual Task`1<Entity> CreateAndReturnAsync(Entity entity, CancellationToken cancellationToken);
    [OperationContractAttribute]
public abstract virtual Task DeleteAsync(string entityName, Guid id, CancellationToken cancellationToken);
    [OperationContractAttribute]
public abstract virtual Task DisassociateAsync(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities, CancellationToken cancellationToken);
    [OperationContractAttribute]
public abstract virtual Task`1<OrganizationResponse> ExecuteAsync(OrganizationRequest request, CancellationToken cancellationToken);
    [OperationContractAttribute]
public abstract virtual Task`1<Entity> RetrieveAsync(string entityName, Guid id, ColumnSet columnSet, CancellationToken cancellationToken);
    [OperationContractAttribute]
public abstract virtual Task`1<EntityCollection> RetrieveMultipleAsync(QueryBase query, CancellationToken cancellationToken);
    [OperationContractAttribute]
public abstract virtual Task UpdateAsync(Entity entity, CancellationToken cancellationToken);
}
internal class Microsoft.PowerPlatform.Dataverse.Client.MetadataUtility : object {
    private ConcurrentDictionary`2<string, EntityMetadata> _entityMetadataCache;
    private ConcurrentDictionary`2<string, AttributeMetadata> _attributeMetadataCache;
    private ConcurrentDictionary`2<string, OptionSetMetadata> _globalOptionMetadataCache;
    private ConcurrentDictionary`2<int, string> _entityNameCache;
    private static object _lockObject;
    private DateTime _metadataLastValidatedAt;
    private ServiceClient svcAct;
    public MetadataUtility(ServiceClient svcActions);
    private static MetadataUtility();
    public void ClearCachedEntityMetadata(string entityName);
    public List`1<EntityMetadata> GetAllEntityMetadata(bool onlyPublished, EntityFilters filter);
    public EntityMetadata GetEntityMetadata(string entityName);
    public EntityMetadata GetEntityMetadata(EntityFilters requestType, string entityName);
    public string GetEntityLogicalName(int entityTypeCode);
    public AttributeMetadata GetAttributeMetadata(string entityName, string attributeName);
    public List`1<AttributeMetadata> GetAllAttributesMetadataByEntity(string entityName);
    public List`1<string> GetRequiredAttributesByEntity(string entityName);
    public OptionSetMetadata GetGlobalOptionSetMetadata(string optionSetName);
    private void ValidateMetadata();
    private void TouchMetadataDate();
}
public class Microsoft.PowerPlatform.Dataverse.Client.Model.ConfigurationOptions : object {
    private int _maxRetryCount;
    private TimeSpan _retryPauseTime;
    private bool _useWebApi;
    private bool _useWebApiLoginFlow;
    private bool _enableAffinityCookie;
    private string _maxFaultSizeOverride;
    private string _maxReceivedMessageSize;
    private string _maxBufferPoolSizeOveride;
    private TimeSpan _msalTimeout;
    private int _msalRetryCount;
    private bool _msalEnablePIIInLog;
    public int MaxRetryCount { get; public set; }
    public TimeSpan RetryPauseTime { get; public set; }
    public bool UseWebApi { get; public set; }
    public bool UseWebApiLoginFlow { get; public set; }
    public bool EnableAffinityCookie { get; public set; }
    public string MaxFaultSizeOverride { get; public set; }
    public string MaxReceivedMessageSizeOverride { get; public set; }
    public string MaxBufferPoolSizeOverride { get; public set; }
    public TimeSpan MSALRequestTimeout { get; public set; }
    public int MSALRetryCount { get; public set; }
    public bool MSALEnabledLogPII { get; public set; }
    public void UpdateOptions(ConfigurationOptions options);
    public int get_MaxRetryCount();
    public void set_MaxRetryCount(int value);
    public TimeSpan get_RetryPauseTime();
    public void set_RetryPauseTime(TimeSpan value);
    public bool get_UseWebApi();
    public void set_UseWebApi(bool value);
    public bool get_UseWebApiLoginFlow();
    public void set_UseWebApiLoginFlow(bool value);
    public bool get_EnableAffinityCookie();
    public void set_EnableAffinityCookie(bool value);
    public string get_MaxFaultSizeOverride();
    public void set_MaxFaultSizeOverride(string value);
    public string get_MaxReceivedMessageSizeOverride();
    public void set_MaxReceivedMessageSizeOverride(string value);
    public string get_MaxBufferPoolSizeOverride();
    public void set_MaxBufferPoolSizeOverride(string value);
    public TimeSpan get_MSALRequestTimeout();
    public void set_MSALRequestTimeout(TimeSpan value);
    public int get_MSALRetryCount();
    public void set_MSALRetryCount(int value);
    public bool get_MSALEnabledLogPII();
    public void set_MSALEnabledLogPII(bool value);
}
public class Microsoft.PowerPlatform.Dataverse.Client.Model.ConnectionOptions : object {
    [CompilerGeneratedAttribute]
private AuthenticationType <AuthenticationType>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private SecureString <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <HomeRealmUri>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireNewInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <RedirectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenCacheStorePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PromptBehavior> <LoginPrompt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificateThumbprint>k__BackingField;
    [CompilerGeneratedAttribute]
private StoreName <CertificateStoreName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipDiscovery>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCurrentUserForLogin>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, Task`1<string>> <AccessTokenProviderFunctionAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Task`1<Dictionary`2<string, string>>> <RequestAdditionalHeadersAsync>k__BackingField;
    public AuthenticationType AuthenticationType { get; public set; }
    public Uri ServiceUri { get; public set; }
    public string UserName { get; public set; }
    public SecureString Password { get; public set; }
    public string Domain { get; public set; }
    public Uri HomeRealmUri { get; public set; }
    public bool RequireNewInstance { get; public set; }
    public string ClientId { get; public set; }
    public string ClientSecret { get; public set; }
    public Uri RedirectUri { get; public set; }
    public string TokenCacheStorePath { get; public set; }
    public Nullable`1<PromptBehavior> LoginPrompt { get; public set; }
    public string CertificateThumbprint { get; public set; }
    public StoreName CertificateStoreName { get; public set; }
    public bool SkipDiscovery { get; public set; }
    public bool UseCurrentUserForLogin { get; public set; }
    public ILogger Logger { get; public set; }
    public Func`2<string, Task`1<string>> AccessTokenProviderFunctionAsync { get; public set; }
    public Func`1<Task`1<Dictionary`2<string, string>>> RequestAdditionalHeadersAsync { get; public set; }
    [CompilerGeneratedAttribute]
public AuthenticationType get_AuthenticationType();
    [CompilerGeneratedAttribute]
public void set_AuthenticationType(AuthenticationType value);
    [CompilerGeneratedAttribute]
public Uri get_ServiceUri();
    [CompilerGeneratedAttribute]
public void set_ServiceUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public SecureString get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(SecureString value);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
public void set_Domain(string value);
    [CompilerGeneratedAttribute]
public Uri get_HomeRealmUri();
    [CompilerGeneratedAttribute]
public void set_HomeRealmUri(Uri value);
    [CompilerGeneratedAttribute]
public bool get_RequireNewInstance();
    [CompilerGeneratedAttribute]
public void set_RequireNewInstance(bool value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientSecret();
    [CompilerGeneratedAttribute]
public void set_ClientSecret(string value);
    [CompilerGeneratedAttribute]
public Uri get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_TokenCacheStorePath();
    [CompilerGeneratedAttribute]
public void set_TokenCacheStorePath(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<PromptBehavior> get_LoginPrompt();
    [CompilerGeneratedAttribute]
public void set_LoginPrompt(Nullable`1<PromptBehavior> value);
    [CompilerGeneratedAttribute]
public string get_CertificateThumbprint();
    [CompilerGeneratedAttribute]
public void set_CertificateThumbprint(string value);
    [CompilerGeneratedAttribute]
public StoreName get_CertificateStoreName();
    [CompilerGeneratedAttribute]
public void set_CertificateStoreName(StoreName value);
    [CompilerGeneratedAttribute]
public bool get_SkipDiscovery();
    [CompilerGeneratedAttribute]
public void set_SkipDiscovery(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseCurrentUserForLogin();
    [CompilerGeneratedAttribute]
public void set_UseCurrentUserForLogin(bool value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public Func`2<string, Task`1<string>> get_AccessTokenProviderFunctionAsync();
    [CompilerGeneratedAttribute]
public void set_AccessTokenProviderFunctionAsync(Func`2<string, Task`1<string>> value);
    [CompilerGeneratedAttribute]
public Func`1<Task`1<Dictionary`2<string, string>>> get_RequestAdditionalHeadersAsync();
    [CompilerGeneratedAttribute]
public void set_RequestAdditionalHeadersAsync(Func`1<Task`1<Dictionary`2<string, string>>> value);
}
public class Microsoft.PowerPlatform.Dataverse.Client.Model.DiscoverOrganizationsResult : object {
    [CompilerGeneratedAttribute]
private OrganizationDetailCollection <OrganizationDetailCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private IAccount <Account>k__BackingField;
    public OrganizationDetailCollection OrganizationDetailCollection { get; private set; }
    public IAccount Account { get; private set; }
    public DiscoverOrganizationsResult(OrganizationDetailCollection organizationDetailCollection, IAccount account);
    [CompilerGeneratedAttribute]
public OrganizationDetailCollection get_OrganizationDetailCollection();
    [CompilerGeneratedAttribute]
private void set_OrganizationDetailCollection(OrganizationDetailCollection value);
    [CompilerGeneratedAttribute]
public IAccount get_Account();
    [CompilerGeneratedAttribute]
private void set_Account(IAccount value);
}
public class Microsoft.PowerPlatform.Dataverse.Client.Model.DiscoveryServer : object {
    private string _DisplayName;
    private string _ShortName;
    private Uri _DiscoveryServer;
    private bool _RequiresRegionalDiscovery;
    private Uri _RegionalGlobalDiscovery;
    private string _GeoCode;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public string DisplayName { get; public set; }
    public string ShortName { get; public set; }
    public Uri DiscoveryServerUri { get; public set; }
    public bool RequiresRegionalDiscovery { get; public set; }
    public Uri RegionalGlobalDiscoveryServer { get; public set; }
    public string GeoCode { get; public set; }
    public DiscoveryServer(ServerInfo serverInfo);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_ShortName();
    public void set_ShortName(string value);
    public Uri get_DiscoveryServerUri();
    public void set_DiscoveryServerUri(Uri value);
    public bool get_RequiresRegionalDiscovery();
    public void set_RequiresRegionalDiscovery(bool value);
    public Uri get_RegionalGlobalDiscoveryServer();
    public void set_RegionalGlobalDiscoveryServer(Uri value);
    public string get_GeoCode();
    public void set_GeoCode(string value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void NotifyPropertyChanged(string info);
}
public class Microsoft.PowerPlatform.Dataverse.Client.Model.DiscoveryServers : object {
    private DataverseTraceLogger logger;
    private ObservableCollection`1<DiscoveryServer> _OSDPServers;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private bool disposedValue;
    public ObservableCollection`1<DiscoveryServer> OSDPServers { get; public set; }
    public ObservableCollection`1<DiscoveryServer> get_OSDPServers();
    public void set_OSDPServers(ObservableCollection`1<DiscoveryServer> value);
    public DiscoveryServer GetServerByOrgUrl(Uri orgUri);
    public DiscoveryServer GetServerByShortName(string shortName);
    public DiscoveryServer GetServerByGeo(string geoCode);
    public string GetServerShortNameByDisplayName(string serverDisplayName);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void NotifyPropertyChanged(string info);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class Microsoft.PowerPlatform.Dataverse.Client.Model.GlobalDiscoveryInstanceModel : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastUpdated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrganizationType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvironmentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TrialExpirationDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Purpose>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaType>k__BackingField;
    [JsonPropertyAttribute]
public Guid Id { get; public set; }
    [JsonPropertyAttribute]
public string UniqueName { get; public set; }
    [JsonPropertyAttribute]
public string UrlName { get; public set; }
    [JsonPropertyAttribute]
public string FriendlyName { get; public set; }
    [JsonPropertyAttribute]
public int State { get; public set; }
    [JsonPropertyAttribute]
public string Version { get; public set; }
    [JsonPropertyAttribute]
public string Url { get; public set; }
    [JsonPropertyAttribute]
public string ApiUrl { get; public set; }
    [JsonPropertyAttribute]
public string LastUpdated { get; public set; }
    [JsonPropertyAttribute]
public string Region { get; public set; }
    [JsonPropertyAttribute]
public string OrganizationType { get; public set; }
    [JsonPropertyAttribute]
public string TenantId { get; public set; }
    [JsonPropertyAttribute]
public string EnvironmentId { get; public set; }
    [JsonPropertyAttribute]
public string StatusMessage { get; public set; }
    [JsonPropertyAttribute]
public DateTime TrialExpirationDate { get; public set; }
    [JsonPropertyAttribute]
public string Purpose { get; public set; }
    [JsonPropertyAttribute]
public string SchemaType { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_UniqueName();
    [CompilerGeneratedAttribute]
public void set_UniqueName(string value);
    [CompilerGeneratedAttribute]
public string get_UrlName();
    [CompilerGeneratedAttribute]
public void set_UrlName(string value);
    [CompilerGeneratedAttribute]
public string get_FriendlyName();
    [CompilerGeneratedAttribute]
public void set_FriendlyName(string value);
    [CompilerGeneratedAttribute]
public int get_State();
    [CompilerGeneratedAttribute]
public void set_State(int value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_ApiUrl();
    [CompilerGeneratedAttribute]
public void set_ApiUrl(string value);
    [CompilerGeneratedAttribute]
public string get_LastUpdated();
    [CompilerGeneratedAttribute]
public void set_LastUpdated(string value);
    [CompilerGeneratedAttribute]
public string get_Region();
    [CompilerGeneratedAttribute]
public void set_Region(string value);
    [CompilerGeneratedAttribute]
public string get_OrganizationType();
    [CompilerGeneratedAttribute]
public void set_OrganizationType(string value);
    [CompilerGeneratedAttribute]
public string get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(string value);
    [CompilerGeneratedAttribute]
public string get_EnvironmentId();
    [CompilerGeneratedAttribute]
public void set_EnvironmentId(string value);
    [CompilerGeneratedAttribute]
public string get_StatusMessage();
    [CompilerGeneratedAttribute]
public void set_StatusMessage(string value);
    [CompilerGeneratedAttribute]
public DateTime get_TrialExpirationDate();
    [CompilerGeneratedAttribute]
public void set_TrialExpirationDate(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Purpose();
    [CompilerGeneratedAttribute]
public void set_Purpose(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaType();
    [CompilerGeneratedAttribute]
public void set_SchemaType(string value);
}
internal class Microsoft.PowerPlatform.Dataverse.Client.Model.GlobalDiscoveryModel : object {
    [CompilerGeneratedAttribute]
private string <context>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<GlobalDiscoveryInstanceModel> <Instances>k__BackingField;
    [JsonPropertyAttribute]
public string context { get; public set; }
    [JsonPropertyAttribute]
public IList`1<GlobalDiscoveryInstanceModel> Instances { get; public set; }
    [CompilerGeneratedAttribute]
public string get_context();
    [CompilerGeneratedAttribute]
public void set_context(string value);
    [CompilerGeneratedAttribute]
public IList`1<GlobalDiscoveryInstanceModel> get_Instances();
    [CompilerGeneratedAttribute]
public void set_Instances(IList`1<GlobalDiscoveryInstanceModel> value);
}
public class Microsoft.PowerPlatform.Dataverse.Client.Model.OrgByServer : object {
    private OrganizationDetail _OrgDetail;
    private string _DiscoveryServerName;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public string FriendlyName { get; }
    public string UniqueOrgName { get; }
    public string UrlHostName { get; }
    public OrganizationDetail OrgDetail { get; public set; }
    public string DiscoveryServerName { get; public set; }
    public Uri DiscoveryServer { get; }
    public string get_FriendlyName();
    public string get_UniqueOrgName();
    public string get_UrlHostName();
    public OrganizationDetail get_OrgDetail();
    public void set_OrgDetail(OrganizationDetail value);
    public string get_DiscoveryServerName();
    public void set_DiscoveryServerName(string value);
    public Uri get_DiscoveryServer();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void NotifyPropertyChanged(string info);
}
public class Microsoft.PowerPlatform.Dataverse.Client.Model.OrgList : object {
    private ObservableCollection`1<OrgByServer> _orgsList;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public ObservableCollection`1<OrgByServer> OrgsList { get; internal set; }
    public ObservableCollection`1<OrgByServer> get_OrgsList();
    internal void set_OrgsList(ObservableCollection`1<OrgByServer> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void NotifyPropertyChanged(string info);
}
public class Microsoft.PowerPlatform.Dataverse.Client.PicklistAttributeData : AttributeData {
    private OptionMetadata[] picklistOptions;
    public OptionMetadata[] PicklistOptions { get; public set; }
    public OptionMetadata[] get_PicklistOptions();
    public void set_PicklistOptions(OptionMetadata[] value);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
internal class Microsoft.PowerPlatform.Dataverse.Client.Properties.Settings : ApplicationSettingsBase {
    private static Settings defaultInstance;
    public static Settings Default { get; }
    private static Settings();
    public static Settings get_Default();
}
public class Microsoft.PowerPlatform.Dataverse.Client.RefreshListenerDelegate : MulticastDelegate {
    public RefreshListenerDelegate(object object, IntPtr method);
    public virtual void Invoke(List`1<TraceSourceSetting> listenerCollection);
    public virtual IAsyncResult BeginInvoke(List`1<TraceSourceSetting> listenerCollection, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.PowerPlatform.Dataverse.Client.RequestBatch : object {
    [CompilerGeneratedAttribute]
private Guid <BatchId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BatchName>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecuteMultipleSettings <BatchRequestSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BatchItemOrganizationRequest> <BatchItems>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecuteMultipleResponse <BatchResults>k__BackingField;
    [CompilerGeneratedAttribute]
private BatchStatus <Status>k__BackingField;
    public Guid BatchId { get; internal set; }
    public string BatchName { get; internal set; }
    public ExecuteMultipleSettings BatchRequestSettings { get; private set; }
    public List`1<BatchItemOrganizationRequest> BatchItems { get; public set; }
    public ExecuteMultipleResponse BatchResults { get; public set; }
    public BatchStatus Status { get; public set; }
    public RequestBatch(string batchName, bool returnResponses, bool continueOnError);
    [CompilerGeneratedAttribute]
public Guid get_BatchId();
    [CompilerGeneratedAttribute]
internal void set_BatchId(Guid value);
    [CompilerGeneratedAttribute]
public string get_BatchName();
    [CompilerGeneratedAttribute]
internal void set_BatchName(string value);
    [CompilerGeneratedAttribute]
public ExecuteMultipleSettings get_BatchRequestSettings();
    [CompilerGeneratedAttribute]
private void set_BatchRequestSettings(ExecuteMultipleSettings value);
    [CompilerGeneratedAttribute]
public List`1<BatchItemOrganizationRequest> get_BatchItems();
    [CompilerGeneratedAttribute]
public void set_BatchItems(List`1<BatchItemOrganizationRequest> value);
    [CompilerGeneratedAttribute]
public ExecuteMultipleResponse get_BatchResults();
    [CompilerGeneratedAttribute]
public void set_BatchResults(ExecuteMultipleResponse value);
    [CompilerGeneratedAttribute]
public BatchStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(BatchStatus value);
}
public class Microsoft.PowerPlatform.Dataverse.Client.ServerInfo : object {
    [CompilerGeneratedAttribute]
private string <DiscoveryServer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresRegionalDiscovery>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <RegionalGlobalDiscoveryUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GeoCode>k__BackingField;
    public string DiscoveryServer { get; public set; }
    public string DisplayName { get; public set; }
    public string ShortName { get; public set; }
    public bool RequiresRegionalDiscovery { get; public set; }
    public Uri RegionalGlobalDiscoveryUri { get; public set; }
    public string GeoCode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DiscoveryServer();
    [CompilerGeneratedAttribute]
public void set_DiscoveryServer(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public bool get_RequiresRegionalDiscovery();
    [CompilerGeneratedAttribute]
public void set_RequiresRegionalDiscovery(bool value);
    [CompilerGeneratedAttribute]
public Uri get_RegionalGlobalDiscoveryUri();
    [CompilerGeneratedAttribute]
public void set_RegionalGlobalDiscoveryUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_GeoCode();
    [CompilerGeneratedAttribute]
public void set_GeoCode(string value);
}
public class Microsoft.PowerPlatform.Dataverse.Client.ServiceClient : object {
    internal Dictionary`2<string, Dictionary`2<string, object>> _CachObject;
    internal List`1<int> _loadedLCIDList;
    internal string _cachObjecName;
    internal DataverseTraceLogger _logEntry;
    internal ConnectionService _connectionSvc;
    internal DynamicEntityUtility _dynamicAppUtility;
    internal IOptions`1<ConfigurationOptions> _configuration;
    internal MetadataUtility _metadataUtlity;
    internal object _lockObject;
    internal object _cloneLockObject;
    internal BatchManager _batchManager;
    private bool _disableConnectionLocking;
    public string _sdkVersionProperty;
    private TimeSpan _retryPauseTimeRunning;
    [CompilerGeneratedAttribute]
private IOrganizationService <_testOrgSvcInterface>k__BackingField;
    private ConnectionOptions _setupConnectionOptions;
    private ConnectionOptions _connectionOptions;
    [CompilerGeneratedAttribute]
private static bool <InMemoryLogCollectionEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <InMemoryLogCollectionTimeOutMinutes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReady>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, Task`1<string>> <GetAccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Task`1<Dictionary`2<string, string>>> <GetCustomHeaders>k__BackingField;
    private bool isDisposed;
    internal IOrganizationService _testOrgSvcInterface { get; internal set; }
    internal OrganizationWebProxyClientAsync OrganizationWebProxyClient { get; }
    internal OrganizationServiceProxyAsync OnPremClient { get; }
    public static bool InMemoryLogCollectionEnabled { get; public set; }
    public static TimeSpan InMemoryLogCollectionTimeOutMinutes { get; public set; }
    public int MaxRetryCount { get; public set; }
    public TimeSpan RetryPauseTime { get; public set; }
    public bool IsReady { get; private set; }
    public bool IsBatchOperationsAvailable { get; }
    public string Authority { get; }
    public string OAuthUserId { get; }
    public static TimeSpan MaxConnectionTimeout { get; public set; }
    public AuthenticationType ActiveAuthenticationType { get; }
    public string CurrentAccessToken { get; }
    public bool EnableAffinityCookie { get; public set; }
    internal IOrganizationService DataverseService { get; }
    internal IOrganizationServiceAsync DataverseServiceAsync { get; }
    internal WhoAmIResponse SystemUser { get; internal set; }
    public string LastError { get; }
    public Exception LastException { get; }
    public Uri ConnectedOrgUriActual { get; }
    public string ConnectedOrgFriendlyName { get; }
    public string ConnectedOrgUniqueName { get; }
    public EndpointCollection ConnectedOrgPublishedEndpoints { get; }
    public OrganizationDetail OrganizationDetail { get; }
    internal object ConnectionLockObject { get; }
    public Version ConnectedOrgVersion { get; }
    public Guid ConnectedOrgId { get; }
    public bool DisableCrossThreadSafeties { get; public set; }
    internal Func`2<string, Task`1<string>> GetAccessToken { get; internal set; }
    internal Func`1<Task`1<Dictionary`2<string, string>>> GetCustomHeaders { get; internal set; }
    public Guid CallerId { get; public set; }
    public Nullable`1<Guid> CallerAADObjectId { get; public set; }
    public Nullable`1<Guid> SessionTrackingId { get; public set; }
    public bool ForceServerMetadataCacheConsistency { get; public set; }
    public string SdkVersionProperty { get; }
    public Guid TenantId { get; }
    public string EnvironmentId { get; }
    public bool UseWebApi { get; public set; }
    public int RecommendedDegreesOfParallelism { get; }
    internal ServiceClient(IOrganizationService orgSvc, HttpClient httpClient, string baseConnectUrl, Version targetVersion, ILogger logger);
    public ServiceClient(string dataverseConnectionString, ILogger logger);
    public ServiceClient(Uri instanceUrl, Func`2<string, Task`1<string>> tokenProviderFunction, bool useUniqueInstance, ILogger logger);
    public ServiceClient(string userId, SecureString password, string regionGeo, string orgName, bool useUniqueInstance, OrganizationDetail orgDetail, string clientId, Uri redirectUri, PromptBehavior promptBehavior, bool useDefaultCreds, string tokenCacheStorePath, ILogger logger);
    public ServiceClient(string userId, SecureString password, Uri hostUri, bool useUniqueInstance, string clientId, Uri redirectUri, PromptBehavior promptBehavior, bool useDefaultCreds, string tokenCacheStorePath, ILogger logger);
    public ServiceClient(string userId, SecureString password, string domain, string hostName, string port, string orgName, bool useSsl, bool useUniqueInstance, OrganizationDetail orgDetail, string clientId, Uri redirectUri, PromptBehavior promptBehavior, string tokenCacheStorePath, ILogger logger);
    public ServiceClient(X509Certificate2 certificate, StoreName certificateStoreName, string certificateThumbPrint, Uri instanceUrl, string orgName, bool useSsl, bool useUniqueInstance, OrganizationDetail orgDetail, string clientId, Uri redirectUri, ILogger logger);
    public ServiceClient(X509Certificate2 certificate, StoreName certificateStoreName, string certificateThumbPrint, Uri instanceUrl, bool useUniqueInstance, OrganizationDetail orgDetail, string clientId, Uri redirectUri, ILogger logger);
    public ServiceClient(Uri instanceUrl, string clientId, string clientSecret, bool useUniqueInstance, ILogger logger);
    public ServiceClient(Uri instanceUrl, string clientId, SecureString clientSecret, bool useUniqueInstance, ILogger logger);
    public ServiceClient(ConnectionOptions connectionOptions, bool deferConnection, ConfigurationOptions serviceClientConfiguration);
    internal ServiceClient(OrganizationWebProxyClientAsync externalOrgWebProxyClient, bool isCloned, AuthenticationType orginalAuthType, Version sourceOrgVersion, ILogger logger);
    private static ServiceClient();
    [CompilerGeneratedAttribute]
internal IOrganizationService get__testOrgSvcInterface();
    [CompilerGeneratedAttribute]
internal void set__testOrgSvcInterface(IOrganizationService value);
    internal OrganizationWebProxyClientAsync get_OrganizationWebProxyClient();
    internal OrganizationServiceProxyAsync get_OnPremClient();
    [CompilerGeneratedAttribute]
public static bool get_InMemoryLogCollectionEnabled();
    [CompilerGeneratedAttribute]
public static void set_InMemoryLogCollectionEnabled(bool value);
    [CompilerGeneratedAttribute]
public static TimeSpan get_InMemoryLogCollectionTimeOutMinutes();
    [CompilerGeneratedAttribute]
public static void set_InMemoryLogCollectionTimeOutMinutes(TimeSpan value);
    public int get_MaxRetryCount();
    public void set_MaxRetryCount(int value);
    public TimeSpan get_RetryPauseTime();
    public void set_RetryPauseTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_IsReady();
    [CompilerGeneratedAttribute]
private void set_IsReady(bool value);
    public bool get_IsBatchOperationsAvailable();
    public string get_Authority();
    public string get_OAuthUserId();
    public static TimeSpan get_MaxConnectionTimeout();
    public static void set_MaxConnectionTimeout(TimeSpan value);
    public AuthenticationType get_ActiveAuthenticationType();
    public string get_CurrentAccessToken();
    public bool get_EnableAffinityCookie();
    public void set_EnableAffinityCookie(bool value);
    internal IOrganizationService get_DataverseService();
    internal IOrganizationServiceAsync get_DataverseServiceAsync();
    internal WhoAmIResponse get_SystemUser();
    internal void set_SystemUser(WhoAmIResponse value);
    public string get_LastError();
    public Exception get_LastException();
    public Uri get_ConnectedOrgUriActual();
    public string get_ConnectedOrgFriendlyName();
    public string get_ConnectedOrgUniqueName();
    public EndpointCollection get_ConnectedOrgPublishedEndpoints();
    public OrganizationDetail get_OrganizationDetail();
    internal object get_ConnectionLockObject();
    public Version get_ConnectedOrgVersion();
    public Guid get_ConnectedOrgId();
    public bool get_DisableCrossThreadSafeties();
    public void set_DisableCrossThreadSafeties(bool value);
    [CompilerGeneratedAttribute]
internal Func`2<string, Task`1<string>> get_GetAccessToken();
    [CompilerGeneratedAttribute]
internal void set_GetAccessToken(Func`2<string, Task`1<string>> value);
    [CompilerGeneratedAttribute]
internal Func`1<Task`1<Dictionary`2<string, string>>> get_GetCustomHeaders();
    [CompilerGeneratedAttribute]
internal void set_GetCustomHeaders(Func`1<Task`1<Dictionary`2<string, string>>> value);
    public Guid get_CallerId();
    public void set_CallerId(Guid value);
    public Nullable`1<Guid> get_CallerAADObjectId();
    public void set_CallerAADObjectId(Nullable`1<Guid> value);
    public Nullable`1<Guid> get_SessionTrackingId();
    public void set_SessionTrackingId(Nullable`1<Guid> value);
    public bool get_ForceServerMetadataCacheConsistency();
    public void set_ForceServerMetadataCacheConsistency(bool value);
    public string get_SdkVersionProperty();
    public Guid get_TenantId();
    public string get_EnvironmentId();
    public bool get_UseWebApi();
    public void set_UseWebApi(bool value);
    public int get_RecommendedDegreesOfParallelism();
    public bool Connect();
    internal void ConnectToService(string connectionString, ILogger logger);
    internal void CreateServiceConnection(object externalOrgServiceProxy, AuthenticationType requestedAuthType, string hostName, string port, string orgName, NetworkCredential credential, string userId, SecureString password, string domain, string Geo, string claimsHomeRealm, bool useSsl, bool useUniqueInstance, OrganizationDetail orgDetail, string clientId, Uri redirectUri, PromptBehavior promptBehavior, OrganizationWebProxyClientAsync externalOrgWebProxyClient, string certificateThumbPrint, StoreName certificateStoreName, X509Certificate2 certificate, Uri instanceUrl, bool isCloned, bool useDefaultCreds, Version incomingOrgVersion, ILogger externalLogger, string tokenCacheStorePath);
    public IEnumerable`1<Tuple`2<DateTime, string>> GetAllLogs();
    public String[] GetAllLogsAsStringList();
    public ServiceClient Clone(ILogger logger);
    public ServiceClient Clone(Assembly strongTypeAsm, ILogger logger);
    public ServiceClientRequestBuilder CreateRequestBuilder();
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<DiscoverOnPremiseOrganizationsAsync>d__140")]
public static Task`1<DiscoverOrganizationsResult> DiscoverOnPremiseOrganizationsAsync(Uri discoveryServiceUri, ClientCredentials clientCredentials, string clientId, Uri redirectUri, string authority, PromptBehavior promptBehavior, bool useDefaultCreds, string tokenCacheStorePath, ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<DiscoverOnlineOrganizationsAsync>d__141")]
public static Task`1<DiscoverOrganizationsResult> DiscoverOnlineOrganizationsAsync(Uri discoveryServiceUri, ClientCredentials clientCredentials, string clientId, Uri redirectUri, bool isOnPrem, string authority, PromptBehavior promptBehavior, bool useDefaultCreds, string tokenCacheStorePath, ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<DiscoverOnlineOrganizationsAsync>d__142")]
public static Task`1<DiscoverOrganizationsResult> DiscoverOnlineOrganizationsAsync(string userId, string password, string clientId, Uri redirectUri, bool isOnPrem, string authority, PromptBehavior promptBehavior, bool useDefaultCreds, DiscoveryServer discoServer, string tokenCacheStorePath, ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<DiscoverOnlineOrganizationsAsync>d__143")]
public static Task`1<OrganizationDetailCollection> DiscoverOnlineOrganizationsAsync(Func`2<string, Task`1<string>> tokenProviderFunction, Uri discoveryServiceUri, string tokenCacheStorePath, ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<DiscoverOnlineOrganizationsAsync>d__144")]
public static Task`1<OrganizationDetailCollection> DiscoverOnlineOrganizationsAsync(Func`2<string, Task`1<string>> tokenProviderFunction, Uri discoveryServiceUri, string tokenCacheStorePath, ILogger logger, CancellationToken cancellationToken);
    public static bool RemoveOAuthTokenCache(string tokenCachePath);
    public HttpResponseMessage ExecuteWebRequest(HttpMethod method, string queryString, string body, Dictionary`2<string, List`1<string>> customHeaders, string contentType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<ExecuteWebRequestAsync>d__147")]
public Task`1<HttpResponseMessage> ExecuteWebRequestAsync(HttpMethod method, string queryString, string body, Dictionary`2<string, List`1<string>> customHeaders, string contentType, CancellationToken cancellationToken);
    public OrganizationResponse ExecuteOrganizationRequest(OrganizationRequest req, string logMessageTag, bool useWebAPI);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<ExecuteOrganizationRequestAsync>d__149")]
public Task`1<OrganizationResponse> ExecuteOrganizationRequestAsync(OrganizationRequest req, string logMessageTag, bool useWebAPI, CancellationToken cancellationToken);
    internal OrganizationResponse ExecuteOrganizationRequestImpl(OrganizationRequest req, string logMessageTag, bool useWebAPI, bool bypassPluginExecution);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<ExecuteOrganizationRequestAsyncImpl>d__151")]
private Task`1<OrganizationResponse> ExecuteOrganizationRequestAsyncImpl(OrganizationRequest req, CancellationToken cancellationToken, string logMessageTag, bool useWebAPI, bool bypassPluginExecution);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<Command_ExecuteAsync>d__152")]
internal Task`1<OrganizationResponse> Command_ExecuteAsync(OrganizationRequest req, string errorStringCheck, CancellationToken cancellationToken, bool bypassPluginExecution);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<Command_ExecuteAsyncImpl>d__153")]
internal Task`1<OrganizationResponse> Command_ExecuteAsyncImpl(OrganizationRequest req, string errorStringCheck, CancellationToken cancellationToken, bool bypassPluginExecution);
    internal OrganizationResponse Command_Execute(OrganizationRequest req, string errorStringCheck, bool bypassPluginExecution);
    private bool ShouldRetry(OrganizationRequest req, Exception ex, int retryCount, Boolean& isThrottlingRetry);
    public static SecureString MakeSecureString(string pass);
    internal void ValidateConnectionLive();
    public sealed virtual void Associate(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    public sealed virtual Guid Create(Entity entity);
    public sealed virtual void Delete(string entityName, Guid id);
    public sealed virtual void Disassociate(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    public sealed virtual OrganizationResponse Execute(OrganizationRequest request);
    public sealed virtual Entity Retrieve(string entityName, Guid id, ColumnSet columnSet);
    public sealed virtual EntityCollection RetrieveMultiple(QueryBase query);
    public sealed virtual void Update(Entity entity);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<AssociateAsync>d__166")]
public sealed virtual Task AssociateAsync(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<CreateAsync>d__167")]
public sealed virtual Task`1<Guid> CreateAsync(Entity entity);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<DeleteAsync>d__168")]
public sealed virtual Task DeleteAsync(string entityName, Guid id);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<DisassociateAsync>d__169")]
public sealed virtual Task DisassociateAsync(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<ExecuteAsync>d__170")]
public sealed virtual Task`1<OrganizationResponse> ExecuteAsync(OrganizationRequest request);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<RetrieveAsync>d__171")]
public sealed virtual Task`1<Entity> RetrieveAsync(string entityName, Guid id, ColumnSet columnSet);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<RetrieveMultipleAsync>d__172")]
public sealed virtual Task`1<EntityCollection> RetrieveMultipleAsync(QueryBase query);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<UpdateAsync>d__173")]
public sealed virtual Task UpdateAsync(Entity entity);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<AssociateAsync>d__174")]
public sealed virtual Task AssociateAsync(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<CreateAsync>d__175")]
public sealed virtual Task`1<Guid> CreateAsync(Entity entity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<CreateAndReturnAsync>d__176")]
public sealed virtual Task`1<Entity> CreateAndReturnAsync(Entity entity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<CreateAndReturnAsync>d__177")]
public Task`1<Entity> CreateAndReturnAsync(Entity entity);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<DeleteAsync>d__178")]
public sealed virtual Task DeleteAsync(string entityName, Guid id, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<DisassociateAsync>d__179")]
public sealed virtual Task DisassociateAsync(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<ExecuteAsync>d__180")]
public sealed virtual Task`1<OrganizationResponse> ExecuteAsync(OrganizationRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<RetrieveAsync>d__181")]
public sealed virtual Task`1<Entity> RetrieveAsync(string entityName, Guid id, ColumnSet columnSet, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<RetrieveMultipleAsync>d__182")]
public sealed virtual Task`1<EntityCollection> RetrieveMultipleAsync(QueryBase query, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<UpdateAsync>d__183")]
public sealed virtual Task UpdateAsync(Entity entity, CancellationToken cancellationToken);
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.ServiceClient/<<get_SystemUser>b__63_0>d")]
[CompilerGeneratedAttribute]
private Task`1<WhoAmIResponse> <get_SystemUser>b__63_0();
}
[ExtensionAttribute]
public static class Microsoft.PowerPlatform.Dataverse.Client.ServiceCollectionExtentions : object {
    [ExtensionAttribute]
public static IServiceCollection AddDataverseServiceClient(IServiceCollection services, Action`1<ConnectionOptions> connectionOptions);
}
public class Microsoft.PowerPlatform.Dataverse.Client.StringAttributeData : AttributeData {
    private int maxLength;
    public int MaxLength { get; public set; }
    public int get_MaxLength();
    public void set_MaxLength(int value);
}
public class Microsoft.PowerPlatform.Dataverse.Client.TestingHelper : object {
    private Dictionary`2<string, string> _servers;
    private Dictionary`2<string, string> _OSDPservers;
    private string _selectedOption;
    private string defaultIssuerUri;
    private static TestingHelper _instance;
    public string SelectedOption { get; public set; }
    public static TestingHelper Instance { get; }
    public string get_SelectedOption();
    public void set_SelectedOption(string value);
    public static TestingHelper get_Instance();
    public bool IsDebugEnvSelected();
    public string GetIssuerUriForSelectedEnv();
    private void Initialize();
}
public class Microsoft.PowerPlatform.Dataverse.Client.TraceControlSettings : object {
    private static string _traceSourceName;
    [CompilerGeneratedAttribute]
private static SourceLevels <TraceLevel>k__BackingField;
    internal static Dictionary`2<string, TraceListener> RegisterdTraceListeners { get; }
    public static SourceLevels TraceLevel { get; public set; }
    private static TraceControlSettings();
    internal static Dictionary`2<string, TraceListener> get_RegisterdTraceListeners();
    [CompilerGeneratedAttribute]
public static SourceLevels get_TraceLevel();
    [CompilerGeneratedAttribute]
public static void set_TraceLevel(SourceLevels value);
    public static void CloseListeners();
    public static bool AddTraceListener(TraceListener listenerToAdd);
}
public class Microsoft.PowerPlatform.Dataverse.Client.TraceListenerBroker : object {
    [CompilerGeneratedAttribute]
private static RefreshListenerDelegate refreshListenerObject;
    private static object logLock;
    private static TraceListenerBroker();
    [CompilerGeneratedAttribute]
private static void add_refreshListenerObject(RefreshListenerDelegate value);
    [CompilerGeneratedAttribute]
private static void remove_refreshListenerObject(RefreshListenerDelegate value);
    public static void RegisterTraceLogger(TraceLoggerBase traceLogger);
    public static void UnRegisterTraceLogger(TraceLoggerBase traceLogger);
    public static void PublishTraceListeners();
}
[LocalizableAttribute("False")]
public abstract class Microsoft.PowerPlatform.Dataverse.Client.TraceLoggerBase : object {
    private string _lastError;
    private string _traceSourceName;
    private Exception _lastException;
    private TraceSource _source;
    protected TraceSource Source { get; private set; }
    protected string TraceSourceName { get; protected set; }
    public string LastError { get; public set; }
    public Exception LastException { get; public set; }
    public SourceLevels CurrentTraceLevel { get; }
    protected TraceSource get_Source();
    private void set_Source(TraceSource value);
    protected string get_TraceSourceName();
    protected void set_TraceSourceName(string value);
    public string get_LastError();
    public void set_LastError(string value);
    public Exception get_LastException();
    public void set_LastException(Exception value);
    public SourceLevels get_CurrentTraceLevel();
    protected void Initialize();
    public abstract virtual void ResetLastError();
    public abstract virtual void Log(string message);
    public abstract virtual void Log(string message, TraceEventType eventType);
    public abstract virtual void Log(string message, TraceEventType eventType, Exception exception);
    public abstract virtual void Log(Exception exception);
    public void RefreshListeners(List`1<TraceSourceSetting> traceSourceSettingCollection);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private bool <RefreshListeners>b__25_0(TraceSourceSetting x);
}
public class Microsoft.PowerPlatform.Dataverse.Client.TraceSourceSetting : object {
    [CompilerGeneratedAttribute]
private string <SourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLevels <TraceLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, TraceListener> <TraceListeners>k__BackingField;
    public string SourceName { get; public set; }
    public SourceLevels TraceLevel { get; public set; }
    public Dictionary`2<string, TraceListener> TraceListeners { get; public set; }
    public TraceSourceSetting(string sourceName, SourceLevels sourceLevels);
    [CompilerGeneratedAttribute]
public string get_SourceName();
    [CompilerGeneratedAttribute]
public void set_SourceName(string value);
    [CompilerGeneratedAttribute]
public SourceLevels get_TraceLevel();
    [CompilerGeneratedAttribute]
public void set_TraceLevel(SourceLevels value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, TraceListener> get_TraceListeners();
    [CompilerGeneratedAttribute]
public void set_TraceListeners(Dictionary`2<string, TraceListener> value);
}
public class Microsoft.PowerPlatform.Dataverse.Client.TraceSourceSettingStore : object {
    [CompilerGeneratedAttribute]
private static List`1<TraceSourceSetting> <TraceSourceSettingsCollection>k__BackingField;
    public static List`1<TraceSourceSetting> TraceSourceSettingsCollection { get; private set; }
    private static TraceSourceSettingStore();
    [CompilerGeneratedAttribute]
public static List`1<TraceSourceSetting> get_TraceSourceSettingsCollection();
    [CompilerGeneratedAttribute]
private static void set_TraceSourceSettingsCollection(List`1<TraceSourceSetting> value);
    public static void AddTraceSettingsToStore(TraceSourceSetting listnerSettings);
    public static TraceSourceSetting GetTraceSourceSettings(string sourceName);
}
internal class Microsoft.PowerPlatform.Dataverse.Client.Utilities : object {
    private static List`1<string> _autoRetryRetrieveEntityList;
    internal static DiscoveryServer GetDiscoveryServerByUri(Uri orgUri);
    public static void GetOrgnameAndOnlineRegionFromServiceUri(Uri serviceUri, String& onlineRegion, String& organizationName, Boolean& isOnPrem);
    public static OrgByServer DeterminOrgDataFromOrgInfo(OrgList orgList, string organizationName);
    public static OrganizationDetail DeterminOrgDataFromOrgInfo(OrganizationDetailCollection orgList, string organizationName);
    public static DiscoveryServer DeterminDiscoveryDataFromOrgDetail(Uri serviceUri, Boolean& isOnPrem, string Geo);
    public static bool IsValidOrganizationUrl(OrganizationDetail orgInfo);
    public static bool IsValidOnlineHost(Uri hostUri);
    internal static bool IsRequestValidForTranslationToWebAPI(OrganizationRequest req, bool inLoginFlow);
    internal static HttpMethod RequestNameToHttpVerb(string requestName);
    internal static string ConstructWebApiRequestUrl(OrganizationRequest request, HttpMethod httpMethod, Entity entity, EntityMetadata entityMetadata);
    [AsyncStateMachineAttribute("Microsoft.PowerPlatform.Dataverse.Client.Utilities/<RetryRequest>d__10")]
internal static Task`1<int> RetryRequest(OrganizationRequest req, Guid requestTrackingId, TimeSpan LockWait, Stopwatch logDt, DataverseTraceLogger logEntry, Nullable`1<Guid> sessionTrackingId, bool disableConnectionLocking, TimeSpan retryPauseTimeRunning, Exception ex, string errorStringCheck, int retryCount, bool isThrottled, string webUriReq);
    internal static ExpandoObject ToExpandoObject(Entity sourceEntity, MetadataUtility mUtil, HttpMethod requestedMethod, DataverseTraceLogger logger);
    private static bool IsAttributeValidForOperation(AttributeMetadata attrib, HttpMethod requestedMethod);
    private static Entity UpdateEntityAttributesForPrimaryId(Entity sourceEntity, MetadataUtility mUtil);
    internal static ExpandoObject ReleatedEntitiesToExpandoObject(ExpandoObject rootExpando, string entityName, RelatedEntityCollection entityCollection, MetadataUtility mUtil, HttpMethod requestedMethod, DataverseTraceLogger logger);
    private static string ExtractKeyNameFromRelationship(string schemaName, string entityName, Boolean& isArrayRequired, EntityMetadata eData);
    internal static string ParseAltKeyCollection(KeyAttributeCollection keyValues);
    internal static bool ShouldAutoRetryRetrieveByEntityName(string queryStringToParse);
    internal static List`1<string> AddScope(string scopeToAdd, List`1<string> currentScopes);
    internal static ConcurrentDictionary`2<string, string> GetAllCookiesFromHeader(string strHeader, ConcurrentDictionary`2<string, string> cookieCollection);
    internal static ConcurrentDictionary`2<string, string> GetAllCookiesFromHeader(String[] strHeaderList, ConcurrentDictionary`2<string, string> cookieCollection);
    internal static string GetCookiesFromCollectionAsString(ConcurrentDictionary`2<string, string> cookieCollection);
    internal static List`1<string> GetCookiesFromCollectionAsArray(ConcurrentDictionary`2<string, string> cookieCollection);
    private static ArrayList ConvertCookieHeaderToArrayList(string strCookHeader);
    private static ArrayList ConvertCookieListToArrayList(String[] potentalCookieList);
    private static ConcurrentDictionary`2<string, string> ConvertCookieArraysToCookieDictionary(ArrayList al, ConcurrentDictionary`2<string, string> cookieCollection);
    internal static void CleanUpHeaderKeys(WebHeaderCollection headerCollection);
    internal static T SeekExceptionOnStack(Exception e);
    internal static string CleanUpPotentialFileName(string potentialFileName);
}
internal static class Microsoft.PowerPlatform.Dataverse.Client.Utils.AppSettingsHelper : object {
    public static T GetAppSetting(string key, T defaultValue, DataverseTraceLogger logSink);
    private static T ConvertFromInvariantString(string value);
    public static TimeSpan GetAppSettingTimeSpan(string key, TimeSpanFromKey format, TimeSpan defaultValue, DataverseTraceLogger logSink);
}
internal static class Microsoft.PowerPlatform.Dataverse.Client.Utils.ClientServiceProviders : object {
    private static IServiceProvider _instance;
    internal static IServiceProvider Instance { get; }
    internal static IServiceProvider get_Instance();
    private static void BindServiceProviders();
}
public class Microsoft.PowerPlatform.Dataverse.Client.Utils.DataverseConnectionException : Exception {
    public DataverseConnectionException(string message);
    public DataverseConnectionException(string message, Exception innerException);
    protected DataverseConnectionException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public DataverseConnectionException(string message, int errorCode, string helpLink, IDictionary`2<string, string> data, HttpOperationException httpOperationException);
    public static DataverseConnectionException GenerateClientConnectionException(HttpOperationException httpOperationException);
}
public class Microsoft.PowerPlatform.Dataverse.Client.Utils.DataverseOperationException : Exception {
    public DataverseOperationException(string message);
    public DataverseOperationException(string message, int errorCode, string helpLink, IDictionary`2<string, string> data, HttpOperationException httpOperationException);
    public DataverseOperationException(string message, Exception innerException);
    protected DataverseOperationException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public static DataverseOperationException GenerateClientOperationException(HttpOperationException httpOperationException);
}
internal class Microsoft.PowerPlatform.Dataverse.Client.Utils.MSALLoggerCallBack : object {
    [CompilerGeneratedAttribute]
private DataverseTraceLogger <LogSink>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnabledPIILogging>k__BackingField;
    public DataverseTraceLogger LogSink { get; public set; }
    public Nullable`1<bool> EnabledPIILogging { get; public set; }
    public MSALLoggerCallBack(DataverseTraceLogger logSink, Nullable`1<bool> enabledPIILogging);
    [CompilerGeneratedAttribute]
public DataverseTraceLogger get_LogSink();
    [CompilerGeneratedAttribute]
public void set_LogSink(DataverseTraceLogger value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnabledPIILogging();
    [CompilerGeneratedAttribute]
public void set_EnabledPIILogging(Nullable`1<bool> value);
    public void Log(LogLevel level, string message, bool containsPii);
}
internal static class Microsoft.PowerPlatform.Dataverse.Client.Utils.PartyListHelper : object {
    internal static Dictionary`2<string, int> PartyListMap;
    private static PartyListHelper();
    internal static int GetParticipationtypeMasks(string partyKeyName);
}
internal static class Microsoft.PowerPlatform.Dataverse.Client.Utils.RequestBinderUtil : object {
    internal static string HEADERLIST;
    private static RequestBinderUtil();
    internal static void ProcessRequestBinderProperties(HttpRequestMessageProperty httpRequestMessageHeaders, OrganizationRequest request);
    internal static void GetAdditionalHeaders(Dictionary`2<string, List`1<string>> customHeaders, OrganizationRequest request);
    private static void AddorUpdateHeaderProperties(Dictionary`2<string, List`1<string>> customHeaders, string hdrKey, string hrdValue);
    private static void AddorUpdateHeaderProperties(HttpRequestMessageProperty httpRequestMessageHeaders, string key, string value);
}
public class Microsoft.PowerPlatform.Dataverse.Client.XmlUtil : object {
    public static XmlReader CreateXmlReader(string xml);
    public static XmlReader CreateXmlReader(string xml, bool preserveWhiteSpace);
    public static XmlReader CreateXmlReader(Stream xmlStream);
    public static XmlDocument CreateXmlDocument();
    public static XmlDocument CreateXmlDocument(XmlReader reader);
    public static XmlDocument CreateXmlDocument(Stream input);
    public static XmlDocument CreateXmlDocument(string xml);
    public static XmlDocument CreateXmlDocument(string xml, bool preserveWhiteSpace);
    public static XmlWriter CreateXmlWriter(TextWriter textWriter, bool indented);
    public static XmlWriter CreateXmlWriter(string fileName, Encoding encoding, bool indented);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
