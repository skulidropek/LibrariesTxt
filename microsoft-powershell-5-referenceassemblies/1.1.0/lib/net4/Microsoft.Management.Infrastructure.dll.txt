public class Microsoft.Management.Infrastructure.CimClass : object {
    public CimReadOnlyKeyedCollection`1<CimMethodDeclaration> CimClassMethods { get; }
    public CimReadOnlyKeyedCollection`1<CimPropertyDeclaration> CimClassProperties { get; }
    public CimReadOnlyKeyedCollection`1<CimQualifier> CimClassQualifiers { get; }
    public CimClass CimSuperClass { get; }
    public string CimSuperClassName { get; }
    public CimSystemProperties CimSystemProperties { get; }
    public string get_CimSuperClassName();
    public CimClass get_CimSuperClass();
    public CimReadOnlyKeyedCollection`1<CimPropertyDeclaration> get_CimClassProperties();
    public CimReadOnlyKeyedCollection`1<CimQualifier> get_CimClassQualifiers();
    public CimReadOnlyKeyedCollection`1<CimMethodDeclaration> get_CimClassMethods();
    public CimSystemProperties get_CimSystemProperties();
    public sealed virtual void Dispose();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
public static class Microsoft.Management.Infrastructure.CimConverter : object {
    public static Type GetDotNetType(CimType cimType);
    public static CimType GetCimType(Type dotNetType);
}
public class Microsoft.Management.Infrastructure.CimException : Exception {
    public CimInstance ErrorData { get; }
    public string ErrorSource { get; }
    public ushort ErrorType { get; }
    public string MessageId { get; }
    public NativeErrorCode NativeErrorCode { get; }
    public UInt32 StatusCode { get; }
    public CimException(CimInstance cimError);
    public CimException(string message);
    public CimException(string message, Exception innerException);
    protected CimException(SerializationInfo info, StreamingContext context);
    public NativeErrorCode get_NativeErrorCode();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public CimInstance get_ErrorData();
    public string get_MessageId();
    public string get_ErrorSource();
    public ushort get_ErrorType();
    public UInt32 get_StatusCode();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[FlagsAttribute]
public enum Microsoft.Management.Infrastructure.CimFlags : Enum {
    public long value__;
    public static CimFlags Abstract;
    public static CimFlags Adopt;
    public static CimFlags Any;
    public static CimFlags Association;
    public static CimFlags Borrow;
    public static CimFlags Class;
    public static CimFlags DisableOverride;
    public static CimFlags EnableOverride;
    public static CimFlags Expensive;
    public static CimFlags In;
    public static CimFlags Indication;
    public static CimFlags Key;
    public static CimFlags Method;
    public static CimFlags None;
    public static CimFlags NotModified;
    public static CimFlags NullValue;
    public static CimFlags Out;
    public static CimFlags Parameter;
    public static CimFlags Property;
    public static CimFlags ReadOnly;
    public static CimFlags Reference;
    public static CimFlags Required;
    public static CimFlags Restricted;
    public static CimFlags Static;
    public static CimFlags Stream;
    public static CimFlags Terminal;
    public static CimFlags ToSubclass;
    public static CimFlags Translatable;
}
public class Microsoft.Management.Infrastructure.CimInstance : object {
    public CimClass CimClass { get; }
    public CimKeyedCollection`1<CimProperty> CimInstanceProperties { get; }
    public CimSystemProperties CimSystemProperties { get; }
    public CimInstance(CimInstance cimInstanceToClone);
    public CimInstance(string className);
    public CimInstance(string className, string namespaceName);
    public CimInstance(CimClass cimClass);
    public CimClass get_CimClass();
    public CimKeyedCollection`1<CimProperty> get_CimInstanceProperties();
    public CimSystemProperties get_CimSystemProperties();
    public sealed virtual void Dispose();
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override object System.ICloneable.Clone();
    public Guid GetCimSessionInstanceId();
    public string GetCimSessionComputerName();
    public virtual string ToString();
}
public abstract class Microsoft.Management.Infrastructure.CimMethodDeclaration : object {
    public string Name { get; }
    public CimReadOnlyKeyedCollection`1<CimMethodParameterDeclaration> Parameters { get; }
    public CimReadOnlyKeyedCollection`1<CimQualifier> Qualifiers { get; }
    public CimType ReturnType { get; }
    public abstract virtual string get_Name();
    public abstract virtual CimType get_ReturnType();
    public abstract virtual CimReadOnlyKeyedCollection`1<CimMethodParameterDeclaration> get_Parameters();
    public abstract virtual CimReadOnlyKeyedCollection`1<CimQualifier> get_Qualifiers();
    public virtual string ToString();
}
public abstract class Microsoft.Management.Infrastructure.CimMethodParameter : object {
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    public string Name { get; }
    public object Value { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual CimType get_CimType();
    public abstract virtual CimFlags get_Flags();
    public static CimMethodParameter Create(string name, object value, CimFlags flags);
    public static CimMethodParameter Create(string name, object value, CimType type, CimFlags flags);
    public virtual string ToString();
}
public abstract class Microsoft.Management.Infrastructure.CimMethodParameterDeclaration : object {
    public CimType CimType { get; }
    public string Name { get; }
    public CimReadOnlyKeyedCollection`1<CimQualifier> Qualifiers { get; }
    public string ReferenceClassName { get; }
    public abstract virtual string get_Name();
    public abstract virtual CimType get_CimType();
    public abstract virtual CimReadOnlyKeyedCollection`1<CimQualifier> get_Qualifiers();
    public abstract virtual string get_ReferenceClassName();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Management.Infrastructure.CimMethodParametersCollection : CimKeyedCollection`1<CimMethodParameter> {
    public int Count { get; }
    public CimMethodParameter Item { get; }
    public virtual void Add(CimMethodParameter newParameter);
    public virtual int get_Count();
    public virtual CimMethodParameter get_Item(string parameterName);
    public virtual IEnumerator`1<CimMethodParameter> GetEnumerator();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.Management.Infrastructure.CimMethodResult : CimMethodResultBase {
    public CimReadOnlyKeyedCollection`1<CimMethodParameter> OutParameters { get; }
    public CimMethodParameter ReturnValue { get; }
    public CimMethodParameter get_ReturnValue();
    public CimReadOnlyKeyedCollection`1<CimMethodParameter> get_OutParameters();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public abstract class Microsoft.Management.Infrastructure.CimMethodResultBase : object {
}
public class Microsoft.Management.Infrastructure.CimMethodStreamedResult : CimMethodResultBase {
    public CimType ItemType { get; }
    public object ItemValue { get; }
    public string ParameterName { get; }
    public string get_ParameterName();
    public object get_ItemValue();
    public CimType get_ItemType();
}
public abstract class Microsoft.Management.Infrastructure.CimProperty : object {
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    public bool IsValueModified { get; public set; }
    public string Name { get; }
    public object Value { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual CimType get_CimType();
    public abstract virtual CimFlags get_Flags();
    public virtual bool get_IsValueModified();
    public virtual void set_IsValueModified(bool value);
    public static CimProperty Create(string name, object value, CimFlags flags);
    public static CimProperty Create(string name, object value, CimType type, CimFlags flags);
    public virtual string ToString();
}
public abstract class Microsoft.Management.Infrastructure.CimPropertyDeclaration : object {
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    public string Name { get; }
    public CimReadOnlyKeyedCollection`1<CimQualifier> Qualifiers { get; }
    public string ReferenceClassName { get; }
    public object Value { get; }
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
    public abstract virtual CimType get_CimType();
    public abstract virtual CimFlags get_Flags();
    public abstract virtual CimReadOnlyKeyedCollection`1<CimQualifier> get_Qualifiers();
    public abstract virtual string get_ReferenceClassName();
    public virtual string ToString();
}
public abstract class Microsoft.Management.Infrastructure.CimQualifier : object {
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    public string Name { get; }
    public object Value { get; }
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
    public abstract virtual CimType get_CimType();
    public abstract virtual CimFlags get_Flags();
    public virtual string ToString();
}
public class Microsoft.Management.Infrastructure.CimSession : object {
    public string ComputerName { get; }
    public Guid InstanceId { get; }
    public string get_ComputerName();
    public Guid get_InstanceId();
    public static CimSession Create(string computerName);
    public static CimSession Create(string computerName, CimSessionOptions sessionOptions);
    public static CimAsyncResult`1<CimSession> CreateAsync(string computerName);
    public static CimAsyncResult`1<CimSession> CreateAsync(string computerName, CimSessionOptions sessionOptions);
    public void Close();
    public CimAsyncStatus CloseAsync();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public CimInstance GetInstance(string namespaceName, CimInstance instanceId);
    public CimInstance GetInstance(string namespaceName, CimInstance instanceId, CimOperationOptions options);
    public CimAsyncResult`1<CimInstance> GetInstanceAsync(string namespaceName, CimInstance instanceId);
    public CimAsyncResult`1<CimInstance> GetInstanceAsync(string namespaceName, CimInstance instanceId, CimOperationOptions options);
    public CimInstance ModifyInstance(CimInstance instance);
    public CimInstance ModifyInstance(string namespaceName, CimInstance instance);
    public CimInstance ModifyInstance(string namespaceName, CimInstance instance, CimOperationOptions options);
    public CimAsyncResult`1<CimInstance> ModifyInstanceAsync(CimInstance instance);
    public CimAsyncResult`1<CimInstance> ModifyInstanceAsync(string namespaceName, CimInstance instance);
    public CimAsyncResult`1<CimInstance> ModifyInstanceAsync(string namespaceName, CimInstance instance, CimOperationOptions options);
    public CimInstance CreateInstance(string namespaceName, CimInstance instance);
    public CimInstance CreateInstance(string namespaceName, CimInstance instance, CimOperationOptions options);
    public CimAsyncResult`1<CimInstance> CreateInstanceAsync(string namespaceName, CimInstance instance);
    public CimAsyncResult`1<CimInstance> CreateInstanceAsync(string namespaceName, CimInstance instance, CimOperationOptions options);
    public void DeleteInstance(CimInstance instance);
    public void DeleteInstance(string namespaceName, CimInstance instance);
    public void DeleteInstance(string namespaceName, CimInstance instance, CimOperationOptions options);
    public CimAsyncStatus DeleteInstanceAsync(CimInstance instance);
    public CimAsyncStatus DeleteInstanceAsync(string namespaceName, CimInstance instance);
    public CimAsyncStatus DeleteInstanceAsync(string namespaceName, CimInstance instance, CimOperationOptions options);
    public IEnumerable`1<CimSubscriptionResult> Subscribe(string namespaceName, string queryDialect, string queryExpression);
    public IEnumerable`1<CimSubscriptionResult> Subscribe(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions operationOptions);
    public IEnumerable`1<CimSubscriptionResult> Subscribe(string namespaceName, string queryDialect, string queryExpression, CimSubscriptionDeliveryOptions options);
    public IEnumerable`1<CimSubscriptionResult> Subscribe(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions operationOptions, CimSubscriptionDeliveryOptions options);
    public CimAsyncMultipleResults`1<CimSubscriptionResult> SubscribeAsync(string namespaceName, string queryDialect, string queryExpression);
    public CimAsyncMultipleResults`1<CimSubscriptionResult> SubscribeAsync(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions operationOptions);
    public CimAsyncMultipleResults`1<CimSubscriptionResult> SubscribeAsync(string namespaceName, string queryDialect, string queryExpression, CimSubscriptionDeliveryOptions options);
    public CimAsyncMultipleResults`1<CimSubscriptionResult> SubscribeAsync(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions operationOptions, CimSubscriptionDeliveryOptions options);
    public IEnumerable`1<CimInstance> EnumerateInstances(string namespaceName, string className);
    public IEnumerable`1<CimInstance> EnumerateInstances(string namespaceName, string className, CimOperationOptions options);
    public CimAsyncMultipleResults`1<CimInstance> EnumerateInstancesAsync(string namespaceName, string className);
    public CimAsyncMultipleResults`1<CimInstance> EnumerateInstancesAsync(string namespaceName, string className, CimOperationOptions options);
    public IEnumerable`1<CimInstance> QueryInstances(string namespaceName, string queryDialect, string queryExpression);
    public IEnumerable`1<CimInstance> QueryInstances(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions options);
    public CimAsyncMultipleResults`1<CimInstance> QueryInstancesAsync(string namespaceName, string queryDialect, string queryExpression);
    public CimAsyncMultipleResults`1<CimInstance> QueryInstancesAsync(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions options);
    public IEnumerable`1<CimInstance> EnumerateAssociatedInstances(string namespaceName, CimInstance sourceInstance, string associationClassName, string resultClassName, string sourceRole, string resultRole);
    public IEnumerable`1<CimInstance> EnumerateAssociatedInstances(string namespaceName, CimInstance sourceInstance, string associationClassName, string resultClassName, string sourceRole, string resultRole, CimOperationOptions options);
    public CimAsyncMultipleResults`1<CimInstance> EnumerateAssociatedInstancesAsync(string namespaceName, CimInstance sourceInstance, string associationClassName, string resultClassName, string sourceRole, string resultRole);
    public CimAsyncMultipleResults`1<CimInstance> EnumerateAssociatedInstancesAsync(string namespaceName, CimInstance sourceInstance, string associationClassName, string resultClassName, string sourceRole, string resultRole, CimOperationOptions options);
    public IEnumerable`1<CimInstance> EnumerateReferencingInstances(string namespaceName, CimInstance sourceInstance, string associationClassName, string sourceRole);
    public IEnumerable`1<CimInstance> EnumerateReferencingInstances(string namespaceName, CimInstance sourceInstance, string associationClassName, string sourceRole, CimOperationOptions options);
    public CimAsyncMultipleResults`1<CimInstance> EnumerateReferencingInstancesAsync(string namespaceName, CimInstance sourceInstance, string associationClassName, string sourceRole);
    public CimAsyncMultipleResults`1<CimInstance> EnumerateReferencingInstancesAsync(string namespaceName, CimInstance sourceInstance, string associationClassName, string sourceRole, CimOperationOptions options);
    public CimMethodResult InvokeMethod(CimInstance instance, string methodName, CimMethodParametersCollection methodParameters);
    public CimMethodResult InvokeMethod(string namespaceName, CimInstance instance, string methodName, CimMethodParametersCollection methodParameters);
    public CimMethodResult InvokeMethod(string namespaceName, CimInstance instance, string methodName, CimMethodParametersCollection methodParameters, CimOperationOptions options);
    public CimAsyncResult`1<CimMethodResult> InvokeMethodAsync(CimInstance instance, string methodName, CimMethodParametersCollection methodParameters);
    public CimAsyncResult`1<CimMethodResult> InvokeMethodAsync(string namespaceName, CimInstance instance, string methodName, CimMethodParametersCollection methodParameters);
    public CimAsyncMultipleResults`1<CimMethodResultBase> InvokeMethodAsync(string namespaceName, CimInstance instance, string methodName, CimMethodParametersCollection methodParameters, CimOperationOptions options);
    public CimMethodResult InvokeMethod(string namespaceName, string className, string methodName, CimMethodParametersCollection methodParameters);
    public CimMethodResult InvokeMethod(string namespaceName, string className, string methodName, CimMethodParametersCollection methodParameters, CimOperationOptions options);
    public CimAsyncResult`1<CimMethodResult> InvokeMethodAsync(string namespaceName, string className, string methodName, CimMethodParametersCollection methodParameters);
    public CimAsyncMultipleResults`1<CimMethodResultBase> InvokeMethodAsync(string namespaceName, string className, string methodName, CimMethodParametersCollection methodParameters, CimOperationOptions options);
    public CimClass GetClass(string namespaceName, string className);
    public CimClass GetClass(string namespaceName, string className, CimOperationOptions options);
    public CimAsyncResult`1<CimClass> GetClassAsync(string namespaceName, string className);
    public CimAsyncResult`1<CimClass> GetClassAsync(string namespaceName, string className, CimOperationOptions options);
    public IEnumerable`1<CimClass> EnumerateClasses(string namespaceName);
    public IEnumerable`1<CimClass> EnumerateClasses(string namespaceName, string className);
    public IEnumerable`1<CimClass> EnumerateClasses(string namespaceName, string className, CimOperationOptions options);
    public CimAsyncMultipleResults`1<CimClass> EnumerateClassesAsync(string namespaceName);
    public CimAsyncMultipleResults`1<CimClass> EnumerateClassesAsync(string namespaceName, string className);
    public CimAsyncMultipleResults`1<CimClass> EnumerateClassesAsync(string namespaceName, string className, CimOperationOptions options);
    public bool TestConnection();
    public bool TestConnection(CimInstance& instance, CimException& exception);
    public CimAsyncResult`1<CimInstance> TestConnectionAsync();
    public virtual string ToString();
}
public enum Microsoft.Management.Infrastructure.CimSubscriptionDeliveryType : Enum {
    public int value__;
    public static CimSubscriptionDeliveryType None;
    public static CimSubscriptionDeliveryType Pull;
    public static CimSubscriptionDeliveryType Push;
}
public class Microsoft.Management.Infrastructure.CimSubscriptionResult : object {
    public string Bookmark { get; }
    public CimInstance Instance { get; }
    public string MachineId { get; }
    public string get_Bookmark();
    public string get_MachineId();
    public CimInstance get_Instance();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.Management.Infrastructure.CimSystemProperties : object {
    public string ClassName { get; }
    public string Namespace { get; }
    public string Path { get; }
    public string ServerName { get; }
    public string get_Namespace();
    public string get_ServerName();
    public string get_ClassName();
    public string get_Path();
}
public enum Microsoft.Management.Infrastructure.CimType : Enum {
    public int value__;
    public static CimType Boolean;
    public static CimType BooleanArray;
    public static CimType Char16;
    public static CimType Char16Array;
    public static CimType DateTime;
    public static CimType DateTimeArray;
    public static CimType Instance;
    public static CimType InstanceArray;
    public static CimType Real32;
    public static CimType Real32Array;
    public static CimType Real64;
    public static CimType Real64Array;
    public static CimType Reference;
    public static CimType ReferenceArray;
    public static CimType SInt16;
    public static CimType SInt16Array;
    public static CimType SInt32;
    public static CimType SInt32Array;
    public static CimType SInt64;
    public static CimType SInt64Array;
    public static CimType SInt8;
    public static CimType SInt8Array;
    public static CimType String;
    public static CimType StringArray;
    public static CimType UInt16;
    public static CimType UInt16Array;
    public static CimType UInt32;
    public static CimType UInt32Array;
    public static CimType UInt64;
    public static CimType UInt64Array;
    public static CimType UInt8;
    public static CimType UInt8Array;
    public static CimType Unknown;
}
public class Microsoft.Management.Infrastructure.Generic.CimAsyncMultipleResults`1 : object {
    public sealed virtual IDisposable Subscribe(IObserver`1<T> observer);
}
public class Microsoft.Management.Infrastructure.Generic.CimAsyncResult`1 : object {
    public sealed virtual IDisposable Subscribe(IObserver`1<T> observer);
}
public class Microsoft.Management.Infrastructure.Generic.CimAsyncStatus : object {
    public sealed virtual IDisposable Subscribe(IObserver`1<object> observer);
}
public abstract class Microsoft.Management.Infrastructure.Generic.CimKeyedCollection`1 : CimReadOnlyKeyedCollection`1<T> {
    public abstract virtual void Add(T newItem);
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.Management.Infrastructure.Generic.CimReadOnlyKeyedCollection`1 : object {
    public int Count { get; }
    public T Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual T get_Item(string itemName);
    public abstract virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum Microsoft.Management.Infrastructure.NativeErrorCode : Enum {
    public int value__;
    public static NativeErrorCode AccessDenied;
    public static NativeErrorCode AlreadyExists;
    public static NativeErrorCode ClassHasChildren;
    public static NativeErrorCode ClassHasInstances;
    public static NativeErrorCode ContinuationOnErrorNotSupported;
    public static NativeErrorCode Failed;
    public static NativeErrorCode FilteredEnumerationNotSupported;
    public static NativeErrorCode InvalidClass;
    public static NativeErrorCode InvalidEnumerationContext;
    public static NativeErrorCode InvalidNamespace;
    public static NativeErrorCode InvalidOperationTimeout;
    public static NativeErrorCode InvalidParameter;
    public static NativeErrorCode InvalidQuery;
    public static NativeErrorCode InvalidSuperClass;
    public static NativeErrorCode MethodNotAvailable;
    public static NativeErrorCode MethodNotFound;
    public static NativeErrorCode NamespaceNotEmpty;
    public static NativeErrorCode NoSuchProperty;
    public static NativeErrorCode NotFound;
    public static NativeErrorCode NotSupported;
    public static NativeErrorCode Ok;
    public static NativeErrorCode PullCannotBeAbandoned;
    public static NativeErrorCode PullHasBeenAbandoned;
    public static NativeErrorCode QueryLanguageNotSupported;
    public static NativeErrorCode ServerIsShuttingDown;
    public static NativeErrorCode ServerLimitsExceeded;
    public static NativeErrorCode TypeMismatch;
}
public enum Microsoft.Management.Infrastructure.Options.CertificateAuthenticationMechanism : Enum {
    public int value__;
    public static CertificateAuthenticationMechanism ClientCertificate;
    public static CertificateAuthenticationMechanism Default;
    public static CertificateAuthenticationMechanism IssuerCertificate;
}
public enum Microsoft.Management.Infrastructure.Options.CimCallbackMode : Enum {
    public int value__;
    public static CimCallbackMode Ignore;
    public static CimCallbackMode Inquire;
    public static CimCallbackMode None;
    public static CimCallbackMode Report;
}
public class Microsoft.Management.Infrastructure.Options.CimCredential : object {
    public CimCredential(string authenticationMechanism, string certificateThumbprint);
    public CimCredential(string authenticationMechanism, string domain, string userName, SecureString password);
    public CimCredential(string authenticationMechanism);
    public CimCredential(CertificateAuthenticationMechanism authenticationMechanism, string certificateThumbprint);
    public CimCredential(PasswordAuthenticationMechanism authenticationMechanism, string domain, string userName, SecureString password);
    public CimCredential(ImpersonatedAuthenticationMechanism authenticationMechanism);
}
[FlagsAttribute]
public enum Microsoft.Management.Infrastructure.Options.CimOperationFlags : Enum {
    public long value__;
    public static CimOperationFlags BasicTypeInformation;
    public static CimOperationFlags ExpensiveProperties;
    public static CimOperationFlags FullTypeInformation;
    public static CimOperationFlags LocalizedQualifiers;
    public static CimOperationFlags NoTypeInformation;
    public static CimOperationFlags None;
    public static CimOperationFlags PolymorphismDeepBasePropsOnly;
    public static CimOperationFlags PolymorphismShallow;
    public static CimOperationFlags ReportOperationStarted;
    public static CimOperationFlags StandardTypeInformation;
}
public class Microsoft.Management.Infrastructure.Options.CimOperationOptions : object {
    public Nullable`1<CancellationToken> CancellationToken { get; public set; }
    public bool ClassNamesOnly { get; public set; }
    public bool EnableMethodResultStreaming { get; public set; }
    public CimOperationFlags Flags { get; public set; }
    public bool IsDisposed { get; }
    public bool KeysOnly { get; public set; }
    unknown PromptUserCallback PromptUser {public set; }
    public CimCallbackMode PromptUserMode { get; public set; }
    public bool ReportOperationStarted { get; }
    public Uri ResourceUri { get; public set; }
    public Uri ResourceUriPrefix { get; public set; }
    public bool ShortenLifetimeOfResults { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public bool UseMachineId { get; public set; }
    unknown WriteErrorCallback WriteError {public set; }
    public CimCallbackMode WriteErrorMode { get; public set; }
    unknown WriteMessageCallback WriteMessage {public set; }
    unknown WriteProgressCallback WriteProgress {public set; }
    public CimOperationOptions(bool mustUnderstand);
    public CimOperationOptions(CimOperationOptions optionsToClone);
    public void set_Timeout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_ResourceUriPrefix(Uri value);
    public Uri get_ResourceUriPrefix();
    public void set_ResourceUri(Uri value);
    public Uri get_ResourceUri();
    public void set_UseMachineId(bool value);
    public bool get_UseMachineId();
    public void SetOption(string optionName, string optionValue);
    public void SetPromptUserRegularMode(CimCallbackMode callbackMode, bool automaticConfirmation);
    public void SetOption(string optionName, UInt32 optionValue);
    public void set_WriteErrorMode(CimCallbackMode value);
    public CimCallbackMode get_WriteErrorMode();
    public void set_PromptUserMode(CimCallbackMode value);
    public CimCallbackMode get_PromptUserMode();
    public void set_WriteMessage(WriteMessageCallback value);
    public void set_WriteProgress(WriteProgressCallback value);
    public void set_WriteError(WriteErrorCallback value);
    public void set_PromptUser(PromptUserCallback value);
    public void EnableChannel(UInt32 channelNumber);
    public void DisableChannel(UInt32 channelNumber);
    public void SetCustomOption(string optionName, bool optionValue, bool mustComply);
    public void SetCustomOption(string optionName, byte optionValue, bool mustComply);
    public void SetCustomOption(string optionName, sbyte optionValue, bool mustComply);
    public void SetCustomOption(string optionName, ushort optionValue, bool mustComply);
    public void SetCustomOption(string optionName, short optionValue, bool mustComply);
    public void SetCustomOption(string optionName, UInt32 optionValue, bool mustComply);
    public void SetCustomOption(string optionName, int optionValue, bool mustComply);
    public void SetCustomOption(string optionName, ulong optionValue, bool mustComply);
    public void SetCustomOption(string optionName, long optionValue, bool mustComply);
    public void SetCustomOption(string optionName, float optionValue, bool mustComply);
    public void SetCustomOption(string optionName, double optionValue, bool mustComply);
    public void SetCustomOption(string optionName, char optionValue, bool mustComply);
    public void SetCustomOption(string optionName, string optionValue, bool mustComply);
    public void SetCustomOption(string optionName, object optionValue, CimType cimType, bool mustComply);
    public Nullable`1<CancellationToken> get_CancellationToken();
    public void set_CancellationToken(Nullable`1<CancellationToken> value);
    public bool get_KeysOnly();
    public void set_KeysOnly(bool value);
    public bool get_ClassNamesOnly();
    public void set_ClassNamesOnly(bool value);
    public CimOperationFlags get_Flags();
    public void set_Flags(CimOperationFlags value);
    public bool get_ReportOperationStarted();
    public bool get_EnableMethodResultStreaming();
    public void set_EnableMethodResultStreaming(bool value);
    public bool get_ShortenLifetimeOfResults();
    public void set_ShortenLifetimeOfResults(bool value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public bool get_IsDisposed();
    private sealed virtual override object System.ICloneable.Clone();
}
public enum Microsoft.Management.Infrastructure.Options.CimPromptType : Enum {
    public int value__;
    public static CimPromptType Critical;
    public static CimPromptType None;
    public static CimPromptType Normal;
}
public enum Microsoft.Management.Infrastructure.Options.CimResponseType : Enum {
    public int value__;
    public static CimResponseType No;
    public static CimResponseType NoToAll;
    public static CimResponseType None;
    public static CimResponseType Yes;
    public static CimResponseType YesToAll;
}
public class Microsoft.Management.Infrastructure.Options.CimSessionOptions : object {
    public CultureInfo Culture { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public CultureInfo UICulture { get; public set; }
    protected CimSessionOptions(string protocol);
    public void SetCustomOption(string optionName, string optionValue);
    public void SetCustomOption(string optionName, UInt32 optionValue);
    public void AddDestinationCredentials(CimCredential credential);
    public void set_Timeout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Culture(CultureInfo value);
    public CultureInfo get_Culture();
    public void set_UICulture(CultureInfo value);
    public CultureInfo get_UICulture();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private sealed virtual override object System.ICloneable.Clone();
}
public class Microsoft.Management.Infrastructure.Options.CimSubscriptionDeliveryOptions : object {
    public CimSubscriptionDeliveryOptions(CimSubscriptionDeliveryType types);
    public CimSubscriptionDeliveryOptions(CimSubscriptionDeliveryOptions optionsToClone);
    public void SetString(string optionName, string optionValue, UInt32 flags);
    public void SetNumber(string optionName, UInt32 optionValue, UInt32 flags);
    public void SetDateTime(string optionName, DateTime optionValue, UInt32 flags);
    public void SetDateTime(string optionName, TimeSpan optionValue, UInt32 flags);
    public void SetInterval(string optionName, TimeSpan optionValue, UInt32 flags);
    public void AddCredentials(string optionName, CimCredential optionValue, UInt32 flags);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private sealed virtual override object System.ICloneable.Clone();
}
public enum Microsoft.Management.Infrastructure.Options.CimWriteMessageChannel : Enum {
    public int value__;
    public static CimWriteMessageChannel Debug;
    public static CimWriteMessageChannel Verbose;
    public static CimWriteMessageChannel Warning;
}
public class Microsoft.Management.Infrastructure.Options.DComSessionOptions : CimSessionOptions {
    public ImpersonationType Impersonation { get; public set; }
    public bool PacketIntegrity { get; public set; }
    public bool PacketPrivacy { get; public set; }
    public DComSessionOptions(DComSessionOptions optionsToClone);
    public void set_PacketPrivacy(bool value);
    public bool get_PacketPrivacy();
    public void set_PacketIntegrity(bool value);
    public bool get_PacketIntegrity();
    public void set_Impersonation(ImpersonationType value);
    public ImpersonationType get_Impersonation();
}
public enum Microsoft.Management.Infrastructure.Options.ImpersonatedAuthenticationMechanism : Enum {
    public int value__;
    public static ImpersonatedAuthenticationMechanism Kerberos;
    public static ImpersonatedAuthenticationMechanism Negotiate;
    public static ImpersonatedAuthenticationMechanism None;
    public static ImpersonatedAuthenticationMechanism NtlmDomain;
}
public enum Microsoft.Management.Infrastructure.Options.ImpersonationType : Enum {
    public int value__;
    public static ImpersonationType Default;
    public static ImpersonationType Delegate;
    public static ImpersonationType Identify;
    public static ImpersonationType Impersonate;
    public static ImpersonationType None;
}
public enum Microsoft.Management.Infrastructure.Options.PacketEncoding : Enum {
    public int value__;
    public static PacketEncoding Default;
    public static PacketEncoding Utf16;
    public static PacketEncoding Utf8;
}
public enum Microsoft.Management.Infrastructure.Options.PasswordAuthenticationMechanism : Enum {
    public int value__;
    public static PasswordAuthenticationMechanism Basic;
    public static PasswordAuthenticationMechanism CredSsp;
    public static PasswordAuthenticationMechanism Default;
    public static PasswordAuthenticationMechanism Digest;
    public static PasswordAuthenticationMechanism Kerberos;
    public static PasswordAuthenticationMechanism Negotiate;
    public static PasswordAuthenticationMechanism NtlmDomain;
}
public class Microsoft.Management.Infrastructure.Options.PromptUserCallback : MulticastDelegate {
    public PromptUserCallback(object object, IntPtr method);
    public virtual CimResponseType Invoke(string message, CimPromptType promptType);
    public virtual IAsyncResult BeginInvoke(string message, CimPromptType promptType, AsyncCallback callback, object object);
    public virtual CimResponseType EndInvoke(IAsyncResult result);
}
public enum Microsoft.Management.Infrastructure.Options.ProxyType : Enum {
    public int value__;
    public static ProxyType Auto;
    public static ProxyType InternetExplorer;
    public static ProxyType None;
    public static ProxyType WinHttp;
}
public class Microsoft.Management.Infrastructure.Options.WriteErrorCallback : MulticastDelegate {
    public WriteErrorCallback(object object, IntPtr method);
    public virtual CimResponseType Invoke(CimInstance cimError);
    public virtual IAsyncResult BeginInvoke(CimInstance cimError, AsyncCallback callback, object object);
    public virtual CimResponseType EndInvoke(IAsyncResult result);
}
public class Microsoft.Management.Infrastructure.Options.WriteMessageCallback : MulticastDelegate {
    public WriteMessageCallback(object object, IntPtr method);
    public virtual void Invoke(UInt32 channel, string message);
    public virtual IAsyncResult BeginInvoke(UInt32 channel, string message, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Management.Infrastructure.Options.WriteProgressCallback : MulticastDelegate {
    public WriteProgressCallback(object object, IntPtr method);
    public virtual void Invoke(string activity, string currentOperation, string statusDescription, UInt32 percentageCompleted, UInt32 secondsRemaining);
    public virtual IAsyncResult BeginInvoke(string activity, string currentOperation, string statusDescription, UInt32 percentageCompleted, UInt32 secondsRemaining, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Management.Infrastructure.Options.WSManSessionOptions : CimSessionOptions {
    public bool CertCACheck { get; public set; }
    public bool CertCNCheck { get; public set; }
    public bool CertRevocationCheck { get; public set; }
    public UInt32 DestinationPort { get; public set; }
    public bool EncodePortInServicePrincipalName { get; public set; }
    public Uri HttpUrlPrefix { get; public set; }
    public UInt32 MaxEnvelopeSize { get; public set; }
    public bool NoEncryption { get; public set; }
    public PacketEncoding PacketEncoding { get; public set; }
    public ProxyType ProxyType { get; public set; }
    public bool UseSsl { get; public set; }
    public WSManSessionOptions(WSManSessionOptions optionsToClone);
    public void set_DestinationPort(UInt32 value);
    public UInt32 get_DestinationPort();
    public void set_MaxEnvelopeSize(UInt32 value);
    public UInt32 get_MaxEnvelopeSize();
    public void set_CertCACheck(bool value);
    public bool get_CertCACheck();
    public void set_CertCNCheck(bool value);
    public bool get_CertCNCheck();
    public void set_CertRevocationCheck(bool value);
    public bool get_CertRevocationCheck();
    public void set_UseSsl(bool value);
    public bool get_UseSsl();
    public void set_ProxyType(ProxyType value);
    public ProxyType get_ProxyType();
    public void set_PacketEncoding(PacketEncoding value);
    public PacketEncoding get_PacketEncoding();
    public void set_NoEncryption(bool value);
    public bool get_NoEncryption();
    public void set_EncodePortInServicePrincipalName(bool value);
    public bool get_EncodePortInServicePrincipalName();
    public void set_HttpUrlPrefix(Uri value);
    public Uri get_HttpUrlPrefix();
    public void AddProxyCredentials(CimCredential credential);
}
public class Microsoft.Management.Infrastructure.Serialization.CimDeserializer : object {
    public static CimDeserializer Create();
    public static CimDeserializer Create(string format, UInt32 flags);
    public CimInstance DeserializeInstance(Byte[] serializedData, UInt32& offset);
    public CimInstance DeserializeInstance(Byte[] serializedData, UInt32& offset, IEnumerable`1<CimClass> cimClasses);
    public CimClass DeserializeClass(Byte[] serializedData, UInt32& offset);
    public CimClass DeserializeClass(Byte[] serializedData, UInt32& offset, CimClass parentClass);
    public CimClass DeserializeClass(Byte[] serializedData, UInt32& offset, CimClass parentClass, string computerName, string namespaceName);
    public sealed virtual void Dispose();
}
public class Microsoft.Management.Infrastructure.Serialization.CimSerializer : object {
    public static CimSerializer Create();
    public static CimSerializer Create(string format, UInt32 flags);
    public bool Serialize(CimInstance cimInstance, InstanceSerializationOptions options, Byte[] buffer, UInt32& offset);
    public bool Serialize(CimClass cimClass, ClassSerializationOptions options, Byte[] buffer, UInt32& offset);
    public Byte[] Serialize(CimInstance cimInstance, InstanceSerializationOptions options);
    public Byte[] Serialize(CimClass cimClass, ClassSerializationOptions options);
    public sealed virtual void Dispose();
}
[FlagsAttribute]
public enum Microsoft.Management.Infrastructure.Serialization.ClassSerializationOptions : Enum {
    public UInt32 value__;
    public static ClassSerializationOptions IncludeParentClasses;
    public static ClassSerializationOptions None;
}
[FlagsAttribute]
public enum Microsoft.Management.Infrastructure.Serialization.InstanceSerializationOptions : Enum {
    public UInt32 value__;
    public static InstanceSerializationOptions IncludeClasses;
    public static InstanceSerializationOptions None;
}
