public class cimcmdlets.Activities.SetCimInstance : GenericCimCmdletActivity {
    [DefaultValueAttribute("")]
public InArgument`1<CimInstance> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Namespace { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<UInt32> OperationTimeoutSec { get; public set; }
    public string PSCommandName { get; }
    protected string PSDefiningModule { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<IDictionary> Property { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Query { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> QueryDialect { get; public set; }
    public Type TypeImplementingCmdlet { get; }
    public virtual string get_PSCommandName();
    public virtual Type get_TypeImplementingCmdlet();
    public InArgument`1<string> get_Namespace();
    public void set_Namespace(InArgument`1<string> value);
    public InArgument`1<UInt32> get_OperationTimeoutSec();
    public void set_OperationTimeoutSec(InArgument`1<UInt32> value);
    public InArgument`1<CimInstance> get_InputObject();
    public void set_InputObject(InArgument`1<CimInstance> value);
    public InArgument`1<string> get_Query();
    public void set_Query(InArgument`1<string> value);
    public InArgument`1<string> get_QueryDialect();
    public void set_QueryDialect(InArgument`1<string> value);
    public InArgument`1<IDictionary> get_Property();
    public void set_Property(InArgument`1<IDictionary> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    protected virtual string get_PSDefiningModule();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public static class Microsoft.PowerShell.Activities.ActivityGenerator : object {
    public static string GenerateFromName(string command, string activityNamespace);
    public static string GenerateFromName(string command, string activityNamespace, bool shouldRunLocally);
    public static string GenerateFromCommandInfo(CommandInfo command, string activityNamespace);
    public static string GenerateFromCommandInfo(CommandInfo command, string activityNamespace, bool shouldRunLocally);
    public static string GenerateFromCommandInfo(CommandInfo command, string activityNamespace, string activityBaseClass, String[] parametersToExclude, string moduleToLoad, string moduleDefinitionText);
    public static String[] GenerateFromModuleInfo(PSModuleInfo moduleToProcess, string activityNamespace);
    public static Assembly GenerateAssemblyFromModuleInfo(PSModuleInfo moduleToProcess, string activityNamespace, string outputAssemblyPath, String[] referenceAssemblies, String& errors);
}
public class Microsoft.PowerShell.Activities.GetCimAssociatedInstance : GenericCimCmdletActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> Association { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<CimInstance> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> KeyOnly { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Namespace { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<UInt32> OperationTimeoutSec { get; public set; }
    public string PSCommandName { get; }
    protected string PSDefiningModule { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ResultClassName { get; public set; }
    public Type TypeImplementingCmdlet { get; }
    public virtual string get_PSCommandName();
    public virtual Type get_TypeImplementingCmdlet();
    public InArgument`1<string> get_Association();
    public void set_Association(InArgument`1<string> value);
    public InArgument`1<string> get_ResultClassName();
    public void set_ResultClassName(InArgument`1<string> value);
    public InArgument`1<CimInstance> get_InputObject();
    public void set_InputObject(InArgument`1<CimInstance> value);
    public InArgument`1<string> get_Namespace();
    public void set_Namespace(InArgument`1<string> value);
    public InArgument`1<UInt32> get_OperationTimeoutSec();
    public void set_OperationTimeoutSec(InArgument`1<UInt32> value);
    public InArgument`1<SwitchParameter> get_KeyOnly();
    public void set_KeyOnly(InArgument`1<SwitchParameter> value);
    protected virtual string get_PSDefiningModule();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Activities.GetCimClass : GenericCimCmdletActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> ClassName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> MethodName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Namespace { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<UInt32> OperationTimeoutSec { get; public set; }
    public string PSCommandName { get; }
    protected string PSDefiningModule { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> PropertyName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> QualifierName { get; public set; }
    public Type TypeImplementingCmdlet { get; }
    public virtual string get_PSCommandName();
    public virtual Type get_TypeImplementingCmdlet();
    public InArgument`1<string> get_ClassName();
    public void set_ClassName(InArgument`1<string> value);
    public InArgument`1<string> get_Namespace();
    public void set_Namespace(InArgument`1<string> value);
    public InArgument`1<UInt32> get_OperationTimeoutSec();
    public void set_OperationTimeoutSec(InArgument`1<UInt32> value);
    public InArgument`1<string> get_MethodName();
    public void set_MethodName(InArgument`1<string> value);
    public InArgument`1<string> get_PropertyName();
    public void set_PropertyName(InArgument`1<string> value);
    public InArgument`1<string> get_QualifierName();
    public void set_QualifierName(InArgument`1<string> value);
    protected virtual string get_PSDefiningModule();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Activities.GetCimInstance : GenericCimCmdletActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> ClassName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<CimInstance> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> KeyOnly { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Namespace { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<UInt32> OperationTimeoutSec { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Property { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Query { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> QueryDialect { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Shallow { get; public set; }
    public Type TypeImplementingCmdlet { get; }
    public virtual string get_PSCommandName();
    public virtual Type get_TypeImplementingCmdlet();
    public InArgument`1<string> get_ClassName();
    public void set_ClassName(InArgument`1<string> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_KeyOnly();
    public void set_KeyOnly(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Namespace();
    public void set_Namespace(InArgument`1<string> value);
    public InArgument`1<UInt32> get_OperationTimeoutSec();
    public void set_OperationTimeoutSec(InArgument`1<UInt32> value);
    public InArgument`1<CimInstance> get_InputObject();
    public void set_InputObject(InArgument`1<CimInstance> value);
    public InArgument`1<string> get_Query();
    public void set_Query(InArgument`1<string> value);
    public InArgument`1<string> get_QueryDialect();
    public void set_QueryDialect(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Shallow();
    public void set_Shallow(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_Property();
    public void set_Property(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Activities.GetPSWorkflowData`1 : NativeActivity`1<T> {
    [DefaultValueAttribute("")]
public InArgument`1<string> OtherVariableName { get; public set; }
    public PSWorkflowRuntimeVariable VariableToRetrieve { get; public set; }
    public PSWorkflowRuntimeVariable get_VariableToRetrieve();
    public void set_VariableToRetrieve(PSWorkflowRuntimeVariable value);
    public InArgument`1<string> get_OtherVariableName();
    public void set_OtherVariableName(InArgument`1<string> value);
    protected virtual void Execute(NativeActivityContext context);
}
public class Microsoft.PowerShell.Activities.GetWmiObject : WmiActivity {
    [DefaultValueAttribute("")]
public bool Amended { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Class { get; public set; }
    [DefaultValueAttribute("")]
public bool DirectRead { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Property { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Query { get; public set; }
    public InArgument`1<string> get_Class();
    public void set_Class(InArgument`1<string> value);
    public InArgument`1<String[]> get_Property();
    public void set_Property(InArgument`1<String[]> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<string> get_Query();
    public void set_Query(InArgument`1<string> value);
    public bool get_Amended();
    public void set_Amended(bool value);
    public bool get_DirectRead();
    public void set_DirectRead(bool value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Activities.InlineScript : PSRemotingActivity {
    [DefaultValueAttribute("")]
public string Command { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> CommandName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Hashtable> Parameters { get; public set; }
    protected bool SupportsCustomRemoting { get; }
    protected bool UpdatePreferenceVariable { get; }
    public string get_Command();
    public void set_Command(string value);
    public InArgument`1<string> get_CommandName();
    public void set_CommandName(InArgument`1<string> value);
    public InArgument`1<Hashtable> get_Parameters();
    public void set_Parameters(InArgument`1<Hashtable> value);
    protected virtual bool get_SupportsCustomRemoting();
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual bool get_UpdatePreferenceVariable();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
    protected virtual void PrepareSession(ActivityImplementationContext implementationContext);
}
public class Microsoft.PowerShell.Activities.InlineScriptContext : object {
    public Dictionary`2<string, object> Variables { get; }
    public InlineScriptContext(InlineScript current);
    public Dictionary`2<string, object> get_Variables();
}
public class Microsoft.PowerShell.Activities.InlineScriptDesigner : ActivityDesigner {
    public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Activities.Internal.IsArgumentSet : CodeActivity`1<bool> {
    [DefaultValueAttribute("")]
public Argument Argument { get; public set; }
    public Argument get_Argument();
    public void set_Argument(Argument value);
    protected virtual bool Execute(CodeActivityContext context);
}
public class Microsoft.PowerShell.Activities.InvokeCimMethod : GenericCimCmdletActivity {
    [DefaultValueAttribute("")]
public InArgument`1<IDictionary> Arguments { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<CimClass> CimClass { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ClassName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<CimInstance> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> MethodName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Namespace { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<UInt32> OperationTimeoutSec { get; public set; }
    public string PSCommandName { get; }
    protected string PSDefiningModule { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Query { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> QueryDialect { get; public set; }
    public Type TypeImplementingCmdlet { get; }
    public virtual string get_PSCommandName();
    public virtual Type get_TypeImplementingCmdlet();
    public InArgument`1<string> get_ClassName();
    public void set_ClassName(InArgument`1<string> value);
    public InArgument`1<CimClass> get_CimClass();
    public void set_CimClass(InArgument`1<CimClass> value);
    public InArgument`1<string> get_Query();
    public void set_Query(InArgument`1<string> value);
    public InArgument`1<string> get_QueryDialect();
    public void set_QueryDialect(InArgument`1<string> value);
    public InArgument`1<CimInstance> get_InputObject();
    public void set_InputObject(InArgument`1<CimInstance> value);
    public InArgument`1<IDictionary> get_Arguments();
    public void set_Arguments(InArgument`1<IDictionary> value);
    public InArgument`1<string> get_MethodName();
    public void set_MethodName(InArgument`1<string> value);
    public InArgument`1<string> get_Namespace();
    public void set_Namespace(InArgument`1<string> value);
    public InArgument`1<UInt32> get_OperationTimeoutSec();
    public void set_OperationTimeoutSec(InArgument`1<UInt32> value);
    protected virtual string get_PSDefiningModule();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Activities.InvokeWmiMethod : WmiActivity {
    public InArgument`1<PSDataCollection`1<PSObject>> ArgumentList { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Class { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Name { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Path { get; public set; }
    public InArgument`1<string> get_Path();
    public void set_Path(InArgument`1<string> value);
    public InArgument`1<string> get_Class();
    public void set_Class(InArgument`1<string> value);
    public InArgument`1<string> get_Name();
    public void set_Name(InArgument`1<string> value);
    public InArgument`1<PSDataCollection`1<PSObject>> get_ArgumentList();
    public void set_ArgumentList(InArgument`1<PSDataCollection`1<PSObject>> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Activities.NewCimInstance : GenericCimCmdletActivity {
    [DefaultValueAttribute("")]
public InArgument`1<CimClass> CimClass { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ClassName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> ClientOnly { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Key { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Namespace { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<UInt32> OperationTimeoutSec { get; public set; }
    public string PSCommandName { get; }
    protected string PSDefiningModule { get; }
    [DefaultValueAttribute("")]
public InArgument`1<IDictionary> Property { get; public set; }
    public Type TypeImplementingCmdlet { get; }
    public virtual string get_PSCommandName();
    public virtual Type get_TypeImplementingCmdlet();
    public InArgument`1<string> get_ClassName();
    public void set_ClassName(InArgument`1<string> value);
    public InArgument`1<String[]> get_Key();
    public void set_Key(InArgument`1<String[]> value);
    public InArgument`1<CimClass> get_CimClass();
    public void set_CimClass(InArgument`1<CimClass> value);
    public InArgument`1<IDictionary> get_Property();
    public void set_Property(InArgument`1<IDictionary> value);
    public InArgument`1<string> get_Namespace();
    public void set_Namespace(InArgument`1<string> value);
    public InArgument`1<UInt32> get_OperationTimeoutSec();
    public void set_OperationTimeoutSec(InArgument`1<UInt32> value);
    public InArgument`1<SwitchParameter> get_ClientOnly();
    public void set_ClientOnly(InArgument`1<SwitchParameter> value);
    protected virtual string get_PSDefiningModule();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Activities.NewCimSession : GenericCimCmdletActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PasswordAuthenticationMechanism> Authentication { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> CertificateThumbprint { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Name { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<UInt32> OperationTimeoutSec { get; public set; }
    public string PSCommandName { get; }
    protected string PSDefiningModule { get; }
    [DefaultValueAttribute("")]
public InArgument`1<UInt32> Port { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<CimSessionOptions> SessionOption { get; public set; }
    public Type TypeImplementingCmdlet { get; }
    public virtual string get_PSCommandName();
    public virtual Type get_TypeImplementingCmdlet();
    public InArgument`1<PasswordAuthenticationMechanism> get_Authentication();
    public void set_Authentication(InArgument`1<PasswordAuthenticationMechanism> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<string> get_CertificateThumbprint();
    public void set_CertificateThumbprint(InArgument`1<string> value);
    public InArgument`1<string> get_Name();
    public void set_Name(InArgument`1<string> value);
    public InArgument`1<UInt32> get_OperationTimeoutSec();
    public void set_OperationTimeoutSec(InArgument`1<UInt32> value);
    public InArgument`1<UInt32> get_Port();
    public void set_Port(InArgument`1<UInt32> value);
    public InArgument`1<CimSessionOptions> get_SessionOption();
    public void set_SessionOption(InArgument`1<CimSessionOptions> value);
    protected virtual string get_PSDefiningModule();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Activities.NewCimSessionOption : GenericCimCmdletActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CertRevocationCheck { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CertificateCACheck { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CertificateCNCheck { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<CultureInfo> Culture { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> EncodePortInServicePrincipalName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PacketEncoding> Encoding { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Uri> HttpPrefix { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ImpersonationType> Impersonation { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<UInt32> MaxEnvelopeSizeKB { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NoEncryption { get; public set; }
    public string PSCommandName { get; }
    protected string PSDefiningModule { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PacketIntegrity { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PacketPrivacy { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ProtocolType> Protocol { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PasswordAuthenticationMechanism> ProxyAuthentication { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ProxyCertificateThumbprint { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> ProxyCredential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ProxyType> ProxyType { get; public set; }
    public Type TypeImplementingCmdlet { get; }
    [DefaultValueAttribute("")]
public InArgument`1<CultureInfo> UICulture { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> UseSsl { get; public set; }
    public virtual string get_PSCommandName();
    public virtual Type get_TypeImplementingCmdlet();
    public InArgument`1<SwitchParameter> get_NoEncryption();
    public void set_NoEncryption(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_CertificateCACheck();
    public void set_CertificateCACheck(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_CertificateCNCheck();
    public void set_CertificateCNCheck(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_CertRevocationCheck();
    public void set_CertRevocationCheck(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_EncodePortInServicePrincipalName();
    public void set_EncodePortInServicePrincipalName(InArgument`1<SwitchParameter> value);
    public InArgument`1<PacketEncoding> get_Encoding();
    public void set_Encoding(InArgument`1<PacketEncoding> value);
    public InArgument`1<Uri> get_HttpPrefix();
    public void set_HttpPrefix(InArgument`1<Uri> value);
    public InArgument`1<UInt32> get_MaxEnvelopeSizeKB();
    public void set_MaxEnvelopeSizeKB(InArgument`1<UInt32> value);
    public InArgument`1<PasswordAuthenticationMechanism> get_ProxyAuthentication();
    public void set_ProxyAuthentication(InArgument`1<PasswordAuthenticationMechanism> value);
    public InArgument`1<string> get_ProxyCertificateThumbprint();
    public void set_ProxyCertificateThumbprint(InArgument`1<string> value);
    public InArgument`1<PSCredential> get_ProxyCredential();
    public void set_ProxyCredential(InArgument`1<PSCredential> value);
    public InArgument`1<ProxyType> get_ProxyType();
    public void set_ProxyType(InArgument`1<ProxyType> value);
    public InArgument`1<SwitchParameter> get_UseSsl();
    public void set_UseSsl(InArgument`1<SwitchParameter> value);
    public InArgument`1<ImpersonationType> get_Impersonation();
    public void set_Impersonation(InArgument`1<ImpersonationType> value);
    public InArgument`1<SwitchParameter> get_PacketIntegrity();
    public void set_PacketIntegrity(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_PacketPrivacy();
    public void set_PacketPrivacy(InArgument`1<SwitchParameter> value);
    public InArgument`1<ProtocolType> get_Protocol();
    public void set_Protocol(InArgument`1<ProtocolType> value);
    public InArgument`1<CultureInfo> get_UICulture();
    public void set_UICulture(InArgument`1<CultureInfo> value);
    public InArgument`1<CultureInfo> get_Culture();
    public void set_Culture(InArgument`1<CultureInfo> value);
    protected virtual string get_PSDefiningModule();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Activities.Pipeline : PipelineEnabledActivity {
    public Collection`1<PipelineEnabledActivity> Activities { get; public set; }
    public Collection`1<PipelineEnabledActivity> get_Activities();
    public void set_Activities(Collection`1<PipelineEnabledActivity> value);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext executionContext);
}
public class Microsoft.PowerShell.Activities.PipelineDesigner : ActivityDesigner {
    public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Activities.PowerShellValue`1 : NativeActivity`1<T> {
    public string Expression { get; public set; }
    [DefaultValueAttribute("False")]
public bool UseDefaultInput { get; public set; }
    public string get_Expression();
    public void set_Expression(string value);
    public bool get_UseDefaultInput();
    public void set_UseDefaultInput(bool value);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    public void ValidateExpressionConstraints(IEnumerable`1<string> allowedCommands, IEnumerable`1<string> allowedVariables, bool allowEnvironmentVariables);
    protected virtual void Execute(NativeActivityContext context);
}
public class Microsoft.PowerShell.Activities.PSPersist : NativeActivity {
    protected bool CanInduceIdle { get; }
    protected virtual bool get_CanInduceIdle();
    protected virtual void Execute(NativeActivityContext context);
}
public enum Microsoft.PowerShell.Activities.PSWorkflowRuntimeVariable : Enum {
    public int value__;
    public static PSWorkflowRuntimeVariable All;
    public static PSWorkflowRuntimeVariable ErrorAction;
    public static PSWorkflowRuntimeVariable InformationAction;
    public static PSWorkflowRuntimeVariable Input;
    public static PSWorkflowRuntimeVariable JobCommandName;
    public static PSWorkflowRuntimeVariable JobId;
    public static PSWorkflowRuntimeVariable JobInstanceId;
    public static PSWorkflowRuntimeVariable JobName;
    public static PSWorkflowRuntimeVariable Other;
    public static PSWorkflowRuntimeVariable PSAllowRedirection;
    public static PSWorkflowRuntimeVariable PSApplicationName;
    public static PSWorkflowRuntimeVariable PSAuthentication;
    public static PSWorkflowRuntimeVariable PSAuthenticationLevel;
    public static PSWorkflowRuntimeVariable PSCertificateThumbprint;
    public static PSWorkflowRuntimeVariable PSComputerName;
    public static PSWorkflowRuntimeVariable PSConfigurationName;
    public static PSWorkflowRuntimeVariable PSConnectionRetryCount;
    public static PSWorkflowRuntimeVariable PSConnectionRetryIntervalSec;
    public static PSWorkflowRuntimeVariable PSConnectionUri;
    public static PSWorkflowRuntimeVariable PSCredential;
    public static PSWorkflowRuntimeVariable PSCulture;
    public static PSWorkflowRuntimeVariable PSElapsedTimeoutSec;
    public static PSWorkflowRuntimeVariable PSPersist;
    public static PSWorkflowRuntimeVariable PSPort;
    public static PSWorkflowRuntimeVariable PSPrivateMetadata;
    public static PSWorkflowRuntimeVariable PSRunningTimeoutSec;
    public static PSWorkflowRuntimeVariable PSSenderInfo;
    public static PSWorkflowRuntimeVariable PSSessionOption;
    public static PSWorkflowRuntimeVariable PSUICulture;
    public static PSWorkflowRuntimeVariable PSUseSsl;
    public static PSWorkflowRuntimeVariable PSVersionTable;
    public static PSWorkflowRuntimeVariable PSWorkflowRoot;
    public static PSWorkflowRuntimeVariable ParentCommandName;
    public static PSWorkflowRuntimeVariable ParentJobId;
    public static PSWorkflowRuntimeVariable ParentJobInstanceId;
    public static PSWorkflowRuntimeVariable ParentJobName;
    public static PSWorkflowRuntimeVariable Verbose;
    public static PSWorkflowRuntimeVariable WarningAction;
    public static PSWorkflowRuntimeVariable WorkflowInstanceId;
}
public class Microsoft.PowerShell.Activities.RemoveCimInstance : GenericCimCmdletActivity {
    [DefaultValueAttribute("")]
public InArgument`1<CimInstance> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Namespace { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<UInt32> OperationTimeoutSec { get; public set; }
    public string PSCommandName { get; }
    protected string PSDefiningModule { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Query { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> QueryDialect { get; public set; }
    public Type TypeImplementingCmdlet { get; }
    public virtual string get_PSCommandName();
    public virtual Type get_TypeImplementingCmdlet();
    public InArgument`1<string> get_Namespace();
    public void set_Namespace(InArgument`1<string> value);
    public InArgument`1<UInt32> get_OperationTimeoutSec();
    public void set_OperationTimeoutSec(InArgument`1<UInt32> value);
    public InArgument`1<CimInstance> get_InputObject();
    public void set_InputObject(InArgument`1<CimInstance> value);
    public InArgument`1<string> get_Query();
    public void set_Query(InArgument`1<string> value);
    public InArgument`1<string> get_QueryDialect();
    public void set_QueryDialect(InArgument`1<string> value);
    protected virtual string get_PSDefiningModule();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Activities.SetPSWorkflowData : NativeActivity {
    [DefaultValueAttribute("")]
public Nullable`1<bool> AppendOutput { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSDataCollection`1<PSObject>> Input { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<bool>> MergeErrorToOutput { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> OtherVariableName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<UInt32>> PSActionRetryCount { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<UInt32>> PSActionRetryIntervalSec { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<UInt32>> PSActionRunningTimeoutSec { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<bool>> PSAllowRedirection { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> PSApplicationName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<AuthenticationMechanism>> PSAuthentication { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<UInt32>> PSBookmarkTimeoutSec { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> PSCertificateThumbprint { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> PSComputerName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> PSConfigurationName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<UInt32>> PSConnectionRetryCount { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<UInt32>> PSConnectionRetryIntervalSec { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> PSConnectionUri { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> PSCredential { get; public set; }
    [DefaultValueAttribute("")]
public InOutArgument`1<PSDataCollection`1<DebugRecord>> PSDebug { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<bool>> PSDisableSerialization { get; public set; }
    [DefaultValueAttribute("")]
public InOutArgument`1<PSDataCollection`1<ErrorRecord>> PSError { get; public set; }
    [DefaultValueAttribute("")]
public InOutArgument`1<PSDataCollection`1<InformationRecord>> PSInformation { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<bool>> PSPersist { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<UInt32>> PSPort { get; public set; }
    [DefaultValueAttribute("")]
public InOutArgument`1<PSDataCollection`1<ProgressRecord>> PSProgress { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public InArgument`1<RemotingBehavior> PSRemotingBehavior { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> PSRequiredModules { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSSessionOption> PSSessionOption { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<bool>> PSUseSsl { get; public set; }
    [DefaultValueAttribute("")]
public InOutArgument`1<PSDataCollection`1<VerboseRecord>> PSVerbose { get; public set; }
    [DefaultValueAttribute("")]
public InOutArgument`1<PSDataCollection`1<WarningRecord>> PSWarning { get; public set; }
    [DefaultValueAttribute("")]
public InOutArgument`1<PSDataCollection`1<PSObject>> Result { get; public set; }
    [DefaultValueAttribute("False")]
public bool UseDefaultInput { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<object> Value { get; public set; }
    public InArgument`1<string> get_OtherVariableName();
    public void set_OtherVariableName(InArgument`1<string> value);
    public InArgument`1<object> get_Value();
    public void set_Value(InArgument`1<object> value);
    public InArgument`1<RemotingBehavior> get_PSRemotingBehavior();
    public void set_PSRemotingBehavior(InArgument`1<RemotingBehavior> value);
    public InArgument`1<Nullable`1<UInt32>> get_PSConnectionRetryCount();
    public void set_PSConnectionRetryCount(InArgument`1<Nullable`1<UInt32>> value);
    public InArgument`1<Nullable`1<UInt32>> get_PSConnectionRetryIntervalSec();
    public void set_PSConnectionRetryIntervalSec(InArgument`1<Nullable`1<UInt32>> value);
    public InArgument`1<PSDataCollection`1<PSObject>> get_Input();
    public void set_Input(InArgument`1<PSDataCollection`1<PSObject>> value);
    public bool get_UseDefaultInput();
    public void set_UseDefaultInput(bool value);
    public InOutArgument`1<PSDataCollection`1<PSObject>> get_Result();
    public void set_Result(InOutArgument`1<PSDataCollection`1<PSObject>> value);
    public Nullable`1<bool> get_AppendOutput();
    public void set_AppendOutput(Nullable`1<bool> value);
    public InOutArgument`1<PSDataCollection`1<ErrorRecord>> get_PSError();
    public void set_PSError(InOutArgument`1<PSDataCollection`1<ErrorRecord>> value);
    public InOutArgument`1<PSDataCollection`1<ProgressRecord>> get_PSProgress();
    public void set_PSProgress(InOutArgument`1<PSDataCollection`1<ProgressRecord>> value);
    public InOutArgument`1<PSDataCollection`1<VerboseRecord>> get_PSVerbose();
    public void set_PSVerbose(InOutArgument`1<PSDataCollection`1<VerboseRecord>> value);
    public InOutArgument`1<PSDataCollection`1<DebugRecord>> get_PSDebug();
    public void set_PSDebug(InOutArgument`1<PSDataCollection`1<DebugRecord>> value);
    public InOutArgument`1<PSDataCollection`1<WarningRecord>> get_PSWarning();
    public void set_PSWarning(InOutArgument`1<PSDataCollection`1<WarningRecord>> value);
    public InOutArgument`1<PSDataCollection`1<InformationRecord>> get_PSInformation();
    public void set_PSInformation(InOutArgument`1<PSDataCollection`1<InformationRecord>> value);
    public InArgument`1<String[]> get_PSComputerName();
    public void set_PSComputerName(InArgument`1<String[]> value);
    public InArgument`1<PSCredential> get_PSCredential();
    public void set_PSCredential(InArgument`1<PSCredential> value);
    public InArgument`1<Nullable`1<bool>> get_PSDisableSerialization();
    public void set_PSDisableSerialization(InArgument`1<Nullable`1<bool>> value);
    public InArgument`1<Nullable`1<bool>> get_PSPersist();
    public void set_PSPersist(InArgument`1<Nullable`1<bool>> value);
    public InArgument`1<Nullable`1<bool>> get_MergeErrorToOutput();
    public void set_MergeErrorToOutput(InArgument`1<Nullable`1<bool>> value);
    public InArgument`1<Nullable`1<UInt32>> get_PSActionRunningTimeoutSec();
    public void set_PSActionRunningTimeoutSec(InArgument`1<Nullable`1<UInt32>> value);
    public InArgument`1<Nullable`1<UInt32>> get_PSBookmarkTimeoutSec();
    public void set_PSBookmarkTimeoutSec(InArgument`1<Nullable`1<UInt32>> value);
    public InArgument`1<String[]> get_PSRequiredModules();
    public void set_PSRequiredModules(InArgument`1<String[]> value);
    public InArgument`1<Nullable`1<UInt32>> get_PSActionRetryCount();
    public void set_PSActionRetryCount(InArgument`1<Nullable`1<UInt32>> value);
    public InArgument`1<Nullable`1<UInt32>> get_PSActionRetryIntervalSec();
    public void set_PSActionRetryIntervalSec(InArgument`1<Nullable`1<UInt32>> value);
    public InArgument`1<Nullable`1<UInt32>> get_PSPort();
    public void set_PSPort(InArgument`1<Nullable`1<UInt32>> value);
    public InArgument`1<Nullable`1<bool>> get_PSUseSsl();
    public void set_PSUseSsl(InArgument`1<Nullable`1<bool>> value);
    public InArgument`1<Nullable`1<bool>> get_PSAllowRedirection();
    public void set_PSAllowRedirection(InArgument`1<Nullable`1<bool>> value);
    public InArgument`1<string> get_PSApplicationName();
    public void set_PSApplicationName(InArgument`1<string> value);
    public InArgument`1<string> get_PSConfigurationName();
    public void set_PSConfigurationName(InArgument`1<string> value);
    public InArgument`1<String[]> get_PSConnectionUri();
    public void set_PSConnectionUri(InArgument`1<String[]> value);
    public InArgument`1<Nullable`1<AuthenticationMechanism>> get_PSAuthentication();
    public void set_PSAuthentication(InArgument`1<Nullable`1<AuthenticationMechanism>> value);
    public InArgument`1<string> get_PSCertificateThumbprint();
    public void set_PSCertificateThumbprint(InArgument`1<string> value);
    public InArgument`1<PSSessionOption> get_PSSessionOption();
    public void set_PSSessionOption(InArgument`1<PSSessionOption> value);
    protected virtual void Execute(NativeActivityContext context);
}
public class Microsoft.PowerShell.Activities.Suspend : NativeActivity {
    protected bool CanInduceIdle { get; }
    public string Label { get; public set; }
    public string get_Label();
    public void set_Label(string value);
    protected virtual bool get_CanInduceIdle();
    protected virtual void Execute(NativeActivityContext context);
}
public class Microsoft.PowerShell.Activities.ThrottledParallelForEach`1 : NativeActivity {
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public ActivityAction`1<T> Body { get; public set; }
    public InArgument`1<int> ThrottleLimit { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<IEnumerable`1<T>> Values { get; public set; }
    public ActivityAction`1<T> get_Body();
    public void set_Body(ActivityAction`1<T> value);
    public InArgument`1<int> get_ThrottleLimit();
    public void set_ThrottleLimit(InArgument`1<int> value);
    public InArgument`1<IEnumerable`1<T>> get_Values();
    public void set_Values(InArgument`1<IEnumerable`1<T>> value);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
public enum Microsoft.PowerShell.Cmdletization.Xml.ConfirmImpact : Enum {
    public int value__;
    public static ConfirmImpact High;
    public static ConfirmImpact Low;
    public static ConfirmImpact Medium;
    public static ConfirmImpact None;
}
public enum Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType : Enum {
    public int value__;
    public static ItemsChoiceType ExcludeQuery;
    public static ItemsChoiceType MaxValueQuery;
    public static ItemsChoiceType MinValueQuery;
    public static ItemsChoiceType RegularQuery;
}
public class Microsoft.PowerShell.Workflow.AstToWorkflowConverter : object {
    public sealed virtual List`1<ParseError> ValidateAst(FunctionDefinitionAst ast);
    public sealed virtual List`1<WorkflowInfo> CompileWorkflows(ScriptBlockAst ast, PSModuleInfo definingModule);
    public sealed virtual List`1<WorkflowInfo> CompileWorkflows(ScriptBlockAst ast, PSModuleInfo definingModule, string rootWorkflowName);
    public sealed virtual List`1<WorkflowInfo> CompileWorkflows(ScriptBlockAst ast, PSModuleInfo definingModule, InitialSessionState initialSessionState, ParseException& parsingErrors);
    public sealed virtual List`1<WorkflowInfo> CompileWorkflows(ScriptBlockAst ast, PSModuleInfo definingModule, InitialSessionState initialSessionState, ParseException& parsingErrors, string rootWorkflowName);
    public sealed virtual WorkflowInfo CompileWorkflow(string name, string definition, InitialSessionState initialSessionState);
    public static Dictionary`2<string, Type> GetActivityParameters(CommandAst commandAst);
}
public class Microsoft.PowerShell.Workflow.AstToXamlConverter : object {
    public static string Convert(FunctionDefinitionAst ast, PSModuleInfo definingModule, List`1<string> referencedAssemblies, Dictionary`2& parameterValidation, WorkflowInfo[]& nestedWorkflows, Dictionary`2& requiredAssemblies, String& workflowAttributes);
    public static string Convert(string name, string definition, InitialSessionState initialSessionState);
    public static List`1<ParseError> Validate(FunctionDefinitionAst ast);
    public virtual string ToString();
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitErrorStatement(ErrorStatementAst errorStatementAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitErrorExpression(ErrorExpressionAst errorExpressionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitScriptBlock(ScriptBlockAst scriptBlockAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitTypeConstraint(TypeConstraintAst typeConstraintAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitAttribute(AttributeAst attributeAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitParameter(ParameterAst parameterAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitTypeExpression(TypeExpressionAst typeExpressionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitFunctionDefinition(FunctionDefinitionAst functionDefinitionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitParamBlock(ParamBlockAst paramBlockAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitNamedBlock(NamedBlockAst namedBlockAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitStatementBlock(StatementBlockAst statementBlockAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitIfStatement(IfStatementAst ifStmtAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitTrap(TrapStatementAst trapStatementAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitAssignmentStatement(AssignmentStatementAst assignmentStatementAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitPipeline(PipelineAst pipelineAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitFileRedirection(FileRedirectionAst fileRedirectionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitMergingRedirection(MergingRedirectionAst mergingRedirectionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitBinaryExpression(BinaryExpressionAst binaryExpressionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitUnaryExpression(UnaryExpressionAst unaryExpressionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitConvertExpression(ConvertExpressionAst convertExpressionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitConstantExpression(ConstantExpressionAst constantExpressionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitStringConstantExpression(StringConstantExpressionAst stringConstantExpressionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitSubExpression(SubExpressionAst subExpressionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitUsingExpression(UsingExpressionAst usingExpressionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitCommand(CommandAst commandAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitCommandExpression(CommandExpressionAst commandExpressionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitCommandParameter(CommandParameterAst commandParameterAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitSwitchStatement(SwitchStatementAst switchStatementAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitDataStatement(DataStatementAst dataStatementAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitForEachStatement(ForEachStatementAst forEachStatementAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitDoWhileStatement(DoWhileStatementAst doWhileStatementAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitForStatement(ForStatementAst forStatementAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitWhileStatement(WhileStatementAst whileStatementAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitCatchClause(CatchClauseAst catchClauseAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitTryStatement(TryStatementAst tryStatementAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitBreakStatement(BreakStatementAst breakStatementAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitContinueStatement(ContinueStatementAst continueStatementAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitReturnStatement(ReturnStatementAst returnStatementAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitExitStatement(ExitStatementAst exitStatementAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitThrowStatement(ThrowStatementAst throwStatementAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitVariableExpression(VariableExpressionAst variableExpressionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitDoUntilStatement(DoUntilStatementAst doUntilStatementAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitMemberExpression(MemberExpressionAst memberExpressionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitInvokeMemberExpression(InvokeMemberExpressionAst invokeMemberExpressionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitArrayExpression(ArrayExpressionAst arrayExpressionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitArrayLiteral(ArrayLiteralAst arrayLiteralAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitHashtable(HashtableAst hashtableAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitScriptBlockExpression(ScriptBlockExpressionAst scriptBlockExpressionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitParenExpression(ParenExpressionAst parenExpressionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitExpandableStringExpression(ExpandableStringExpressionAst expandableStringExpressionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitIndexExpression(IndexExpressionAst indexExpressionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitBlockStatement(BlockStatementAst blockStatementAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitAttributedExpression(AttributedExpressionAst attributedExpressionAst);
    private sealed virtual override object System.Management.Automation.Language.ICustomAstVisitor.VisitNamedAttributeArgument(NamedAttributeArgumentAst namedAttributeArgumentAst);
}
public class Microsoft.PowerShell.Workflow.WorkflowReturnException : WorkflowTerminatedException {
    public WorkflowReturnException(string message);
    public WorkflowReturnException(string message, Exception innerException);
    protected WorkflowReturnException(SerializationInfo info, StreamingContext context);
}
