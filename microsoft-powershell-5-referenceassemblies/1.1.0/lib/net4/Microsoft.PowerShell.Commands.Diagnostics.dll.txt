public class Microsoft.PowerShell.Commands.ExportCounterCommand : PSCmdlet {
    public SwitchParameter Circular { get; public set; }
    public string FileFormat { get; public set; }
    public SwitchParameter Force { get; public set; }
    public PerformanceCounterSampleSet[] InputObject { get; public set; }
    public UInt32 MaxSize { get; public set; }
    public string Path { get; public set; }
    public string get_Path();
    public void set_Path(string value);
    public string get_FileFormat();
    public void set_FileFormat(string value);
    public UInt32 get_MaxSize();
    public void set_MaxSize(UInt32 value);
    public PerformanceCounterSampleSet[] get_InputObject();
    public void set_InputObject(PerformanceCounterSampleSet[] value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_Circular();
    public void set_Circular(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.GetCounter.CounterFileInfo : object {
    public DateTime NewestRecord { get; }
    public DateTime OldestRecord { get; }
    public UInt32 SampleCount { get; }
    public DateTime get_OldestRecord();
    public DateTime get_NewestRecord();
    public UInt32 get_SampleCount();
}
public class Microsoft.PowerShell.Commands.GetCounter.CounterSet : object {
    public string CounterSetName { get; }
    public PerformanceCounterCategoryType CounterSetType { get; }
    public string Description { get; }
    public string MachineName { get; }
    public StringCollection Paths { get; }
    public StringCollection PathsWithInstances { get; }
    public string get_CounterSetName();
    public string get_MachineName();
    public PerformanceCounterCategoryType get_CounterSetType();
    public string get_Description();
    public StringCollection get_Paths();
    public StringCollection get_PathsWithInstances();
}
public class Microsoft.PowerShell.Commands.GetCounter.PerformanceCounterSample : object {
    public double CookedValue { get; public set; }
    public PerformanceCounterType CounterType { get; public set; }
    public UInt32 DefaultScale { get; public set; }
    public string InstanceName { get; public set; }
    public UInt32 MultipleCount { get; public set; }
    public string Path { get; public set; }
    public ulong RawValue { get; public set; }
    public ulong SecondValue { get; public set; }
    public UInt32 Status { get; public set; }
    public ulong TimeBase { get; public set; }
    public DateTime Timestamp { get; public set; }
    public ulong Timestamp100NSec { get; public set; }
    public string get_Path();
    public void set_Path(string value);
    public string get_InstanceName();
    public void set_InstanceName(string value);
    public double get_CookedValue();
    public void set_CookedValue(double value);
    public ulong get_RawValue();
    public void set_RawValue(ulong value);
    public ulong get_SecondValue();
    public void set_SecondValue(ulong value);
    public UInt32 get_MultipleCount();
    public void set_MultipleCount(UInt32 value);
    public PerformanceCounterType get_CounterType();
    public void set_CounterType(PerformanceCounterType value);
    public DateTime get_Timestamp();
    public void set_Timestamp(DateTime value);
    public ulong get_Timestamp100NSec();
    public void set_Timestamp100NSec(ulong value);
    public UInt32 get_Status();
    public void set_Status(UInt32 value);
    public UInt32 get_DefaultScale();
    public void set_DefaultScale(UInt32 value);
    public ulong get_TimeBase();
    public void set_TimeBase(ulong value);
}
public class Microsoft.PowerShell.Commands.GetCounter.PerformanceCounterSampleSet : object {
    public PerformanceCounterSample[] CounterSamples { get; public set; }
    public DateTime Timestamp { get; public set; }
    public DateTime get_Timestamp();
    public void set_Timestamp(DateTime value);
    public PerformanceCounterSample[] get_CounterSamples();
    public void set_CounterSamples(PerformanceCounterSample[] value);
}
public class Microsoft.PowerShell.Commands.GetCounterCommand : PSCmdlet {
    public String[] ComputerName { get; public set; }
    public SwitchParameter Continuous { get; public set; }
    public String[] Counter { get; public set; }
    public String[] ListSet { get; public set; }
    public long MaxSamples { get; public set; }
    public int SampleInterval { get; public set; }
    public String[] get_ListSet();
    public void set_ListSet(String[] value);
    public String[] get_Counter();
    public void set_Counter(String[] value);
    public int get_SampleInterval();
    public void set_SampleInterval(int value);
    public long get_MaxSamples();
    public void set_MaxSamples(long value);
    public SwitchParameter get_Continuous();
    public void set_Continuous(SwitchParameter value);
    public String[] get_ComputerName();
    public void set_ComputerName(String[] value);
    protected virtual void BeginProcessing();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.GetEventPSSnapIn : PSSnapIn {
    public string Description { get; }
    public string DescriptionResource { get; }
    public String[] Formats { get; }
    public string Name { get; }
    public String[] Types { get; }
    public string Vendor { get; }
    public string VendorResource { get; }
    public virtual string get_Name();
    public virtual string get_Vendor();
    public virtual string get_VendorResource();
    public virtual string get_Description();
    public virtual string get_DescriptionResource();
    public virtual String[] get_Types();
    public virtual String[] get_Formats();
}
public class Microsoft.PowerShell.Commands.GetWinEventCommand : PSCmdlet {
    public string ComputerName { get; public set; }
    public PSCredential Credential { get; public set; }
    public Hashtable[] FilterHashtable { get; public set; }
    public string FilterXPath { get; public set; }
    public XmlDocument FilterXml { get; public set; }
    public SwitchParameter Force { get; public set; }
    public String[] ListLog { get; public set; }
    public String[] ListProvider { get; public set; }
    public String[] LogName { get; public set; }
    public long MaxEvents { get; public set; }
    public SwitchParameter Oldest { get; public set; }
    public String[] Path { get; public set; }
    public String[] ProviderName { get; public set; }
    public String[] get_ListLog();
    public void set_ListLog(String[] value);
    public String[] get_LogName();
    public void set_LogName(String[] value);
    public String[] get_ListProvider();
    public void set_ListProvider(String[] value);
    public String[] get_ProviderName();
    public void set_ProviderName(String[] value);
    public String[] get_Path();
    public void set_Path(String[] value);
    public long get_MaxEvents();
    public void set_MaxEvents(long value);
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public PSCredential get_Credential();
    public void set_Credential(PSCredential value);
    public string get_FilterXPath();
    public void set_FilterXPath(string value);
    public XmlDocument get_FilterXml();
    public void set_FilterXml(XmlDocument value);
    public Hashtable[] get_FilterHashtable();
    public void set_FilterHashtable(Hashtable[] value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_Oldest();
    public void set_Oldest(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void EndProcessing();
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.ImportCounterCommand : PSCmdlet {
    public String[] Counter { get; public set; }
    public DateTime EndTime { get; public set; }
    public String[] ListSet { get; public set; }
    public long MaxSamples { get; public set; }
    public String[] Path { get; public set; }
    public DateTime StartTime { get; public set; }
    public SwitchParameter Summary { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_ListSet();
    public void set_ListSet(String[] value);
    public DateTime get_StartTime();
    public void set_StartTime(DateTime value);
    public DateTime get_EndTime();
    public void set_EndTime(DateTime value);
    public String[] get_Counter();
    public void set_Counter(String[] value);
    public SwitchParameter get_Summary();
    public void set_Summary(SwitchParameter value);
    public long get_MaxSamples();
    public void set_MaxSamples(long value);
    protected virtual void BeginProcessing();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.NewWinEventCommand : PSCmdlet {
    public int Id { get; public set; }
    public Object[] Payload { get; public set; }
    public string ProviderName { get; public set; }
    public byte Version { get; public set; }
    public string get_ProviderName();
    public void set_ProviderName(string value);
    public int get_Id();
    public void set_Id(int value);
    public byte get_Version();
    public void set_Version(byte value);
    public Object[] get_Payload();
    public void set_Payload(Object[] value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
