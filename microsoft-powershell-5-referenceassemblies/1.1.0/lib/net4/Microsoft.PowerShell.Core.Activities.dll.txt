public class Microsoft.PowerShell.Core.Activities.DisablePSRemoting : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.DisablePSSessionConfiguration : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NoServiceRestart { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_NoServiceRestart();
    public void set_NoServiceRestart(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.EnablePSRemoting : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> SkipNetworkProfileCheck { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_SkipNetworkProfileCheck();
    public void set_SkipNetworkProfileCheck(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.EnablePSSessionConfiguration : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NoServiceRestart { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> SecurityDescriptorSddl { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> SkipNetworkProfileCheck { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_SecurityDescriptorSddl();
    public void set_SecurityDescriptorSddl(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_SkipNetworkProfileCheck();
    public void set_SkipNetworkProfileCheck(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_NoServiceRestart();
    public void set_NoServiceRestart(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.ForEachObject : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<Object[]> ArgumentList { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ScriptBlock> Begin { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ScriptBlock> End { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> MemberName { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<ScriptBlock[]> Process { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ScriptBlock[]> RemainingScripts { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<ScriptBlock> get_Begin();
    public void set_Begin(InArgument`1<ScriptBlock> value);
    public InArgument`1<ScriptBlock[]> get_Process();
    public void set_Process(InArgument`1<ScriptBlock[]> value);
    public InArgument`1<ScriptBlock> get_End();
    public void set_End(InArgument`1<ScriptBlock> value);
    public InArgument`1<ScriptBlock[]> get_RemainingScripts();
    public void set_RemainingScripts(InArgument`1<ScriptBlock[]> value);
    public InArgument`1<string> get_MemberName();
    public void set_MemberName(InArgument`1<string> value);
    public InArgument`1<Object[]> get_ArgumentList();
    public void set_ArgumentList(InArgument`1<Object[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.GetCommand : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> All { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Object[]> ArgumentList { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<CommandTypes> CommandType { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ModuleSpecification[]> FullyQualifiedModule { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> ListImported { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Module { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Noun { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ParameterName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSTypeName[]> ParameterType { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Syntax { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> TotalCount { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Verb { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Verb();
    public void set_Verb(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Noun();
    public void set_Noun(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Module();
    public void set_Module(InArgument`1<String[]> value);
    public InArgument`1<ModuleSpecification[]> get_FullyQualifiedModule();
    public void set_FullyQualifiedModule(InArgument`1<ModuleSpecification[]> value);
    public InArgument`1<CommandTypes> get_CommandType();
    public void set_CommandType(InArgument`1<CommandTypes> value);
    public InArgument`1<int> get_TotalCount();
    public void set_TotalCount(InArgument`1<int> value);
    public InArgument`1<SwitchParameter> get_Syntax();
    public void set_Syntax(InArgument`1<SwitchParameter> value);
    public InArgument`1<Object[]> get_ArgumentList();
    public void set_ArgumentList(InArgument`1<Object[]> value);
    public InArgument`1<SwitchParameter> get_All();
    public void set_All(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_ListImported();
    public void set_ListImported(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_ParameterName();
    public void set_ParameterName(InArgument`1<String[]> value);
    public InArgument`1<PSTypeName[]> get_ParameterType();
    public void set_ParameterType(InArgument`1<PSTypeName[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.GetHelp : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Category { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Component { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Detailed { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Examples { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Full { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Functionality { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Name { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Online { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Parameter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Role { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> ShowWindow { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Name();
    public void set_Name(InArgument`1<string> value);
    public InArgument`1<string> get_Path();
    public void set_Path(InArgument`1<string> value);
    public InArgument`1<String[]> get_Category();
    public void set_Category(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Component();
    public void set_Component(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Functionality();
    public void set_Functionality(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Role();
    public void set_Role(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Detailed();
    public void set_Detailed(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Full();
    public void set_Full(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Examples();
    public void set_Examples(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Parameter();
    public void set_Parameter(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Online();
    public void set_Online(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_ShowWindow();
    public void set_ShowWindow(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.GetJob : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<DateTime> After { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<DateTime> Before { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<JobState> ChildJobState { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Command { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Hashtable> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<bool> HasMoreData { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> IncludeChildJob { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Guid[]> InstanceId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Int32[]> JobId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Newest { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<JobState> State { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<SwitchParameter> get_IncludeChildJob();
    public void set_IncludeChildJob(InArgument`1<SwitchParameter> value);
    public InArgument`1<JobState> get_ChildJobState();
    public void set_ChildJobState(InArgument`1<JobState> value);
    public InArgument`1<bool> get_HasMoreData();
    public void set_HasMoreData(InArgument`1<bool> value);
    public InArgument`1<DateTime> get_Before();
    public void set_Before(InArgument`1<DateTime> value);
    public InArgument`1<DateTime> get_After();
    public void set_After(InArgument`1<DateTime> value);
    public InArgument`1<int> get_Newest();
    public void set_Newest(InArgument`1<int> value);
    public InArgument`1<Int32[]> get_JobId();
    public void set_JobId(InArgument`1<Int32[]> value);
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<Guid[]> get_InstanceId();
    public void set_InstanceId(InArgument`1<Guid[]> value);
    public InArgument`1<JobState> get_State();
    public void set_State(InArgument`1<JobState> value);
    public InArgument`1<String[]> get_Command();
    public void set_Command(InArgument`1<String[]> value);
    public InArgument`1<Hashtable> get_Filter();
    public void set_Filter(InArgument`1<Hashtable> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.GetModule : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> All { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> CimNamespace { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Uri> CimResourceUri { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<CimSession> CimSession { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ModuleSpecification[]> FullyQualifiedName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> ListAvailable { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<PSSession> PSSession { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Refresh { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<ModuleSpecification[]> get_FullyQualifiedName();
    public void set_FullyQualifiedName(InArgument`1<ModuleSpecification[]> value);
    public InArgument`1<SwitchParameter> get_All();
    public void set_All(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_ListAvailable();
    public void set_ListAvailable(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Refresh();
    public void set_Refresh(InArgument`1<SwitchParameter> value);
    public InArgument`1<PSSession> get_PSSession();
    public void set_PSSession(InArgument`1<PSSession> value);
    public InArgument`1<CimSession> get_CimSession();
    public void set_CimSession(InArgument`1<CimSession> value);
    public InArgument`1<Uri> get_CimResourceUri();
    public void set_CimResourceUri(InArgument`1<Uri> value);
    public InArgument`1<string> get_CimNamespace();
    public void set_CimNamespace(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.GetPSSession : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> AllowRedirection { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ApplicationName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<AuthenticationMechanism> Authentication { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> CertificateThumbprint { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ComputerName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ConfigurationName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Uri[]> ConnectionUri { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Guid[]> InstanceId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Int32[]> PSSessionId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Port { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSSessionOption> SessionOption { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SessionFilterState> State { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> ThrottleLimit { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> UseSSL { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_ComputerName();
    public void set_ComputerName(InArgument`1<String[]> value);
    public InArgument`1<string> get_ApplicationName();
    public void set_ApplicationName(InArgument`1<string> value);
    public InArgument`1<Uri[]> get_ConnectionUri();
    public void set_ConnectionUri(InArgument`1<Uri[]> value);
    public InArgument`1<string> get_ConfigurationName();
    public void set_ConfigurationName(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_AllowRedirection();
    public void set_AllowRedirection(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<Guid[]> get_InstanceId();
    public void set_InstanceId(InArgument`1<Guid[]> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<AuthenticationMechanism> get_Authentication();
    public void set_Authentication(InArgument`1<AuthenticationMechanism> value);
    public InArgument`1<string> get_CertificateThumbprint();
    public void set_CertificateThumbprint(InArgument`1<string> value);
    public InArgument`1<int> get_Port();
    public void set_Port(InArgument`1<int> value);
    public InArgument`1<SwitchParameter> get_UseSSL();
    public void set_UseSSL(InArgument`1<SwitchParameter> value);
    public InArgument`1<int> get_ThrottleLimit();
    public void set_ThrottleLimit(InArgument`1<int> value);
    public InArgument`1<SessionFilterState> get_State();
    public void set_State(InArgument`1<SessionFilterState> value);
    public InArgument`1<PSSessionOption> get_SessionOption();
    public void set_SessionOption(InArgument`1<PSSessionOption> value);
    public InArgument`1<Int32[]> get_PSSessionId();
    public void set_PSSessionId(InArgument`1<Int32[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.GetPSSessionConfiguration : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.NewModuleManifest : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> AliasesToExport { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Author { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Version> ClrVersion { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> CmdletsToExport { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> CompanyName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Copyright { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> DefaultCommandPrefix { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Description { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Version> DotNetFrameworkVersion { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> DscResourcesToExport { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> FileList { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> FormatsToProcess { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> FunctionsToExport { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Guid> Guid { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> HelpInfoUri { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Uri> IconUri { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Uri> LicenseUri { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Object[]> ModuleList { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Version> ModuleVersion { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Object[]> NestedModules { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> PowerShellHostName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Version> PowerShellHostVersion { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Version> PowerShellVersion { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<object> PrivateData { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ProcessorArchitecture> ProcessorArchitecture { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Uri> ProjectUri { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ReleaseNotes { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> RequiredAssemblies { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Object[]> RequiredModules { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> RootModule { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ScriptsToProcess { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Tags { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> TypesToProcess { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> VariablesToExport { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Path();
    public void set_Path(InArgument`1<string> value);
    public InArgument`1<Object[]> get_NestedModules();
    public void set_NestedModules(InArgument`1<Object[]> value);
    public InArgument`1<Guid> get_Guid();
    public void set_Guid(InArgument`1<Guid> value);
    public InArgument`1<string> get_Author();
    public void set_Author(InArgument`1<string> value);
    public InArgument`1<string> get_CompanyName();
    public void set_CompanyName(InArgument`1<string> value);
    public InArgument`1<string> get_Copyright();
    public void set_Copyright(InArgument`1<string> value);
    public InArgument`1<string> get_RootModule();
    public void set_RootModule(InArgument`1<string> value);
    public InArgument`1<Version> get_ModuleVersion();
    public void set_ModuleVersion(InArgument`1<Version> value);
    public InArgument`1<string> get_Description();
    public void set_Description(InArgument`1<string> value);
    public InArgument`1<ProcessorArchitecture> get_ProcessorArchitecture();
    public void set_ProcessorArchitecture(InArgument`1<ProcessorArchitecture> value);
    public InArgument`1<Version> get_PowerShellVersion();
    public void set_PowerShellVersion(InArgument`1<Version> value);
    public InArgument`1<Version> get_ClrVersion();
    public void set_ClrVersion(InArgument`1<Version> value);
    public InArgument`1<Version> get_DotNetFrameworkVersion();
    public void set_DotNetFrameworkVersion(InArgument`1<Version> value);
    public InArgument`1<string> get_PowerShellHostName();
    public void set_PowerShellHostName(InArgument`1<string> value);
    public InArgument`1<Version> get_PowerShellHostVersion();
    public void set_PowerShellHostVersion(InArgument`1<Version> value);
    public InArgument`1<Object[]> get_RequiredModules();
    public void set_RequiredModules(InArgument`1<Object[]> value);
    public InArgument`1<String[]> get_TypesToProcess();
    public void set_TypesToProcess(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_FormatsToProcess();
    public void set_FormatsToProcess(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_ScriptsToProcess();
    public void set_ScriptsToProcess(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_RequiredAssemblies();
    public void set_RequiredAssemblies(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_FileList();
    public void set_FileList(InArgument`1<String[]> value);
    public InArgument`1<Object[]> get_ModuleList();
    public void set_ModuleList(InArgument`1<Object[]> value);
    public InArgument`1<String[]> get_FunctionsToExport();
    public void set_FunctionsToExport(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_AliasesToExport();
    public void set_AliasesToExport(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_VariablesToExport();
    public void set_VariablesToExport(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_CmdletsToExport();
    public void set_CmdletsToExport(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_DscResourcesToExport();
    public void set_DscResourcesToExport(InArgument`1<String[]> value);
    public InArgument`1<object> get_PrivateData();
    public void set_PrivateData(InArgument`1<object> value);
    public InArgument`1<String[]> get_Tags();
    public void set_Tags(InArgument`1<String[]> value);
    public InArgument`1<Uri> get_ProjectUri();
    public void set_ProjectUri(InArgument`1<Uri> value);
    public InArgument`1<Uri> get_LicenseUri();
    public void set_LicenseUri(InArgument`1<Uri> value);
    public InArgument`1<Uri> get_IconUri();
    public void set_IconUri(InArgument`1<Uri> value);
    public InArgument`1<string> get_ReleaseNotes();
    public void set_ReleaseNotes(InArgument`1<string> value);
    public InArgument`1<string> get_HelpInfoUri();
    public void set_HelpInfoUri(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_DefaultCommandPrefix();
    public void set_DefaultCommandPrefix(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.NewPSTransportOption : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<int>> IdleTimeoutSec { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<int>> MaxConcurrentCommandsPerSession { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<int>> MaxConcurrentUsers { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<int>> MaxIdleTimeoutSec { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<int>> MaxMemoryPerSessionMB { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<int>> MaxProcessesPerSession { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<int>> MaxSessions { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<int>> MaxSessionsPerUser { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<OutputBufferingMode>> OutputBufferingMode { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<int>> ProcessIdleTimeoutSec { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<Nullable`1<int>> get_MaxIdleTimeoutSec();
    public void set_MaxIdleTimeoutSec(InArgument`1<Nullable`1<int>> value);
    public InArgument`1<Nullable`1<int>> get_ProcessIdleTimeoutSec();
    public void set_ProcessIdleTimeoutSec(InArgument`1<Nullable`1<int>> value);
    public InArgument`1<Nullable`1<int>> get_MaxSessions();
    public void set_MaxSessions(InArgument`1<Nullable`1<int>> value);
    public InArgument`1<Nullable`1<int>> get_MaxConcurrentCommandsPerSession();
    public void set_MaxConcurrentCommandsPerSession(InArgument`1<Nullable`1<int>> value);
    public InArgument`1<Nullable`1<int>> get_MaxSessionsPerUser();
    public void set_MaxSessionsPerUser(InArgument`1<Nullable`1<int>> value);
    public InArgument`1<Nullable`1<int>> get_MaxMemoryPerSessionMB();
    public void set_MaxMemoryPerSessionMB(InArgument`1<Nullable`1<int>> value);
    public InArgument`1<Nullable`1<int>> get_MaxProcessesPerSession();
    public void set_MaxProcessesPerSession(InArgument`1<Nullable`1<int>> value);
    public InArgument`1<Nullable`1<int>> get_MaxConcurrentUsers();
    public void set_MaxConcurrentUsers(InArgument`1<Nullable`1<int>> value);
    public InArgument`1<Nullable`1<int>> get_IdleTimeoutSec();
    public void set_IdleTimeoutSec(InArgument`1<Nullable`1<int>> value);
    public InArgument`1<Nullable`1<OutputBufferingMode>> get_OutputBufferingMode();
    public void set_OutputBufferingMode(InArgument`1<Nullable`1<OutputBufferingMode>> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.ReceiveJob : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> AutoRemoveJob { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Guid[]> InstanceId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Job[]> Job { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Int32[]> JobId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Keep { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Location { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NoRecurse { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<PSSession[]> Session { get; public set; }
    protected bool SupportsCustomRemoting { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Wait { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> WriteEvents { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> WriteJobInResults { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<Job[]> get_Job();
    public void set_Job(InArgument`1<Job[]> value);
    public InArgument`1<String[]> get_Location();
    public void set_Location(InArgument`1<String[]> value);
    public InArgument`1<PSSession[]> get_Session();
    public void set_Session(InArgument`1<PSSession[]> value);
    public InArgument`1<SwitchParameter> get_Keep();
    public void set_Keep(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_NoRecurse();
    public void set_NoRecurse(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Wait();
    public void set_Wait(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_AutoRemoveJob();
    public void set_AutoRemoveJob(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_WriteEvents();
    public void set_WriteEvents(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_WriteJobInResults();
    public void set_WriteJobInResults(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<Guid[]> get_InstanceId();
    public void set_InstanceId(InArgument`1<Guid[]> value);
    public InArgument`1<Int32[]> get_JobId();
    public void set_JobId(InArgument`1<Int32[]> value);
    protected virtual bool get_SupportsCustomRemoting();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.RegisterPSSessionConfiguration : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSSessionConfigurationAccessMode> AccessMode { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ApplicationBase { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> AssemblyName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ConfigurationTypeName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<double>> MaximumReceivedDataSizePerCommandMB { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<double>> MaximumReceivedObjectSizeMB { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Object[]> ModulesToImport { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Name { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NoServiceRestart { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Version> PSVersion { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ProcessorArchitecture { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> RunAsCredential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> SecurityDescriptorSddl { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSSessionType> SessionType { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSSessionTypeOption> SessionTypeOption { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> ShowSecurityDescriptorUI { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> StartupScript { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ApartmentState> ThreadApartmentState { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSThreadOptions> ThreadOptions { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSTransportOption> TransportOption { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> UseSharedProcess { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_ProcessorArchitecture();
    public void set_ProcessorArchitecture(InArgument`1<string> value);
    public InArgument`1<PSSessionType> get_SessionType();
    public void set_SessionType(InArgument`1<PSSessionType> value);
    public InArgument`1<string> get_Name();
    public void set_Name(InArgument`1<string> value);
    public InArgument`1<string> get_AssemblyName();
    public void set_AssemblyName(InArgument`1<string> value);
    public InArgument`1<string> get_ApplicationBase();
    public void set_ApplicationBase(InArgument`1<string> value);
    public InArgument`1<string> get_ConfigurationTypeName();
    public void set_ConfigurationTypeName(InArgument`1<string> value);
    public InArgument`1<PSCredential> get_RunAsCredential();
    public void set_RunAsCredential(InArgument`1<PSCredential> value);
    public InArgument`1<ApartmentState> get_ThreadApartmentState();
    public void set_ThreadApartmentState(InArgument`1<ApartmentState> value);
    public InArgument`1<PSThreadOptions> get_ThreadOptions();
    public void set_ThreadOptions(InArgument`1<PSThreadOptions> value);
    public InArgument`1<PSSessionConfigurationAccessMode> get_AccessMode();
    public void set_AccessMode(InArgument`1<PSSessionConfigurationAccessMode> value);
    public InArgument`1<SwitchParameter> get_UseSharedProcess();
    public void set_UseSharedProcess(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_StartupScript();
    public void set_StartupScript(InArgument`1<string> value);
    public InArgument`1<Nullable`1<double>> get_MaximumReceivedDataSizePerCommandMB();
    public void set_MaximumReceivedDataSizePerCommandMB(InArgument`1<Nullable`1<double>> value);
    public InArgument`1<Nullable`1<double>> get_MaximumReceivedObjectSizeMB();
    public void set_MaximumReceivedObjectSizeMB(InArgument`1<Nullable`1<double>> value);
    public InArgument`1<string> get_SecurityDescriptorSddl();
    public void set_SecurityDescriptorSddl(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_ShowSecurityDescriptorUI();
    public void set_ShowSecurityDescriptorUI(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_NoServiceRestart();
    public void set_NoServiceRestart(InArgument`1<SwitchParameter> value);
    public InArgument`1<Version> get_PSVersion();
    public void set_PSVersion(InArgument`1<Version> value);
    public InArgument`1<PSSessionTypeOption> get_SessionTypeOption();
    public void set_SessionTypeOption(InArgument`1<PSSessionTypeOption> value);
    public InArgument`1<PSTransportOption> get_TransportOption();
    public void set_TransportOption(InArgument`1<PSTransportOption> value);
    public InArgument`1<Object[]> get_ModulesToImport();
    public void set_ModulesToImport(InArgument`1<Object[]> value);
    public InArgument`1<string> get_Path();
    public void set_Path(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.RemoveJob : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Command { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Hashtable> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Guid[]> InstanceId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Job[]> Job { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Int32[]> JobId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<JobState> State { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<Job[]> get_Job();
    public void set_Job(InArgument`1<Job[]> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<Guid[]> get_InstanceId();
    public void set_InstanceId(InArgument`1<Guid[]> value);
    public InArgument`1<Int32[]> get_JobId();
    public void set_JobId(InArgument`1<Int32[]> value);
    public InArgument`1<JobState> get_State();
    public void set_State(InArgument`1<JobState> value);
    public InArgument`1<String[]> get_Command();
    public void set_Command(InArgument`1<String[]> value);
    public InArgument`1<Hashtable> get_Filter();
    public void set_Filter(InArgument`1<Hashtable> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.RemovePSSession : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ComputerName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Guid[]> InstanceId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Int32[]> PSSessionId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSSession[]> Session { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<PSSession[]> get_Session();
    public void set_Session(InArgument`1<PSSession[]> value);
    public InArgument`1<Guid[]> get_InstanceId();
    public void set_InstanceId(InArgument`1<Guid[]> value);
    public InArgument`1<Int32[]> get_PSSessionId();
    public void set_PSSessionId(InArgument`1<Int32[]> value);
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_ComputerName();
    public void set_ComputerName(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.ResumeJob : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<Hashtable> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Guid[]> InstanceId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Job[]> Job { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Int32[]> JobId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<JobState> State { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Wait { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<Job[]> get_Job();
    public void set_Job(InArgument`1<Job[]> value);
    public InArgument`1<SwitchParameter> get_Wait();
    public void set_Wait(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<Guid[]> get_InstanceId();
    public void set_InstanceId(InArgument`1<Guid[]> value);
    public InArgument`1<Int32[]> get_JobId();
    public void set_JobId(InArgument`1<Int32[]> value);
    public InArgument`1<JobState> get_State();
    public void set_State(InArgument`1<JobState> value);
    public InArgument`1<Hashtable> get_Filter();
    public void set_Filter(InArgument`1<Hashtable> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.SaveHelp : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> DestinationPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ModuleSpecification[]> FullyQualifiedModule { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSModuleInfo[]> Module { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<CultureInfo[]> UICulture { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> UseDefaultCredentials { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_DestinationPath();
    public void set_DestinationPath(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<PSModuleInfo[]> get_Module();
    public void set_Module(InArgument`1<PSModuleInfo[]> value);
    public InArgument`1<ModuleSpecification[]> get_FullyQualifiedModule();
    public void set_FullyQualifiedModule(InArgument`1<ModuleSpecification[]> value);
    public InArgument`1<CultureInfo[]> get_UICulture();
    public void set_UICulture(InArgument`1<CultureInfo[]> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<SwitchParameter> get_UseDefaultCredentials();
    public void set_UseDefaultCredentials(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.SetPSSessionConfiguration : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSSessionConfigurationAccessMode> AccessMode { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ApplicationBase { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> AssemblyName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ConfigurationTypeName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<double>> MaximumReceivedDataSizePerCommandMB { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<double>> MaximumReceivedObjectSizeMB { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Object[]> ModulesToImport { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Name { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NoServiceRestart { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Version> PSVersion { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> RunAsCredential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> SecurityDescriptorSddl { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSSessionTypeOption> SessionTypeOption { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> ShowSecurityDescriptorUI { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> StartupScript { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ApartmentState> ThreadApartmentState { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSThreadOptions> ThreadOptions { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSTransportOption> TransportOption { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> UseSharedProcess { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Name();
    public void set_Name(InArgument`1<string> value);
    public InArgument`1<string> get_AssemblyName();
    public void set_AssemblyName(InArgument`1<string> value);
    public InArgument`1<string> get_ApplicationBase();
    public void set_ApplicationBase(InArgument`1<string> value);
    public InArgument`1<string> get_ConfigurationTypeName();
    public void set_ConfigurationTypeName(InArgument`1<string> value);
    public InArgument`1<PSCredential> get_RunAsCredential();
    public void set_RunAsCredential(InArgument`1<PSCredential> value);
    public InArgument`1<ApartmentState> get_ThreadApartmentState();
    public void set_ThreadApartmentState(InArgument`1<ApartmentState> value);
    public InArgument`1<PSThreadOptions> get_ThreadOptions();
    public void set_ThreadOptions(InArgument`1<PSThreadOptions> value);
    public InArgument`1<PSSessionConfigurationAccessMode> get_AccessMode();
    public void set_AccessMode(InArgument`1<PSSessionConfigurationAccessMode> value);
    public InArgument`1<SwitchParameter> get_UseSharedProcess();
    public void set_UseSharedProcess(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_StartupScript();
    public void set_StartupScript(InArgument`1<string> value);
    public InArgument`1<Nullable`1<double>> get_MaximumReceivedDataSizePerCommandMB();
    public void set_MaximumReceivedDataSizePerCommandMB(InArgument`1<Nullable`1<double>> value);
    public InArgument`1<Nullable`1<double>> get_MaximumReceivedObjectSizeMB();
    public void set_MaximumReceivedObjectSizeMB(InArgument`1<Nullable`1<double>> value);
    public InArgument`1<string> get_SecurityDescriptorSddl();
    public void set_SecurityDescriptorSddl(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_ShowSecurityDescriptorUI();
    public void set_ShowSecurityDescriptorUI(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_NoServiceRestart();
    public void set_NoServiceRestart(InArgument`1<SwitchParameter> value);
    public InArgument`1<Version> get_PSVersion();
    public void set_PSVersion(InArgument`1<Version> value);
    public InArgument`1<PSSessionTypeOption> get_SessionTypeOption();
    public void set_SessionTypeOption(InArgument`1<PSSessionTypeOption> value);
    public InArgument`1<PSTransportOption> get_TransportOption();
    public void set_TransportOption(InArgument`1<PSTransportOption> value);
    public InArgument`1<Object[]> get_ModulesToImport();
    public void set_ModulesToImport(InArgument`1<Object[]> value);
    public InArgument`1<string> get_Path();
    public void set_Path(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.StartJob : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<Object[]> ArgumentList { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<AuthenticationMechanism> Authentication { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> DefinitionName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> DefinitionPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> FilePath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ScriptBlock> InitializationScript { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Version> PSVersion { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> RunAs32 { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ScriptBlock> ScriptBlock { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Type { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_DefinitionName();
    public void set_DefinitionName(InArgument`1<string> value);
    public InArgument`1<string> get_DefinitionPath();
    public void set_DefinitionPath(InArgument`1<string> value);
    public InArgument`1<string> get_Type();
    public void set_Type(InArgument`1<string> value);
    public InArgument`1<string> get_Name();
    public void set_Name(InArgument`1<string> value);
    public InArgument`1<ScriptBlock> get_ScriptBlock();
    public void set_ScriptBlock(InArgument`1<ScriptBlock> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<string> get_FilePath();
    public void set_FilePath(InArgument`1<string> value);
    public InArgument`1<string> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<string> value);
    public InArgument`1<AuthenticationMechanism> get_Authentication();
    public void set_Authentication(InArgument`1<AuthenticationMechanism> value);
    public InArgument`1<ScriptBlock> get_InitializationScript();
    public void set_InitializationScript(InArgument`1<ScriptBlock> value);
    public InArgument`1<SwitchParameter> get_RunAs32();
    public void set_RunAs32(InArgument`1<SwitchParameter> value);
    public InArgument`1<Version> get_PSVersion();
    public void set_PSVersion(InArgument`1<Version> value);
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<Object[]> get_ArgumentList();
    public void set_ArgumentList(InArgument`1<Object[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.StopJob : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<Hashtable> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Guid[]> InstanceId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Job[]> Job { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Int32[]> JobId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<JobState> State { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<Job[]> get_Job();
    public void set_Job(InArgument`1<Job[]> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<Guid[]> get_InstanceId();
    public void set_InstanceId(InArgument`1<Guid[]> value);
    public InArgument`1<Int32[]> get_JobId();
    public void set_JobId(InArgument`1<Int32[]> value);
    public InArgument`1<JobState> get_State();
    public void set_State(InArgument`1<JobState> value);
    public InArgument`1<Hashtable> get_Filter();
    public void set_Filter(InArgument`1<Hashtable> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.SuspendJob : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<Hashtable> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Guid[]> InstanceId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Job[]> Job { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Int32[]> JobId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<JobState> State { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Wait { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<Job[]> get_Job();
    public void set_Job(InArgument`1<Job[]> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Wait();
    public void set_Wait(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<Guid[]> get_InstanceId();
    public void set_InstanceId(InArgument`1<Guid[]> value);
    public InArgument`1<Int32[]> get_JobId();
    public void set_JobId(InArgument`1<Int32[]> value);
    public InArgument`1<JobState> get_State();
    public void set_State(InArgument`1<JobState> value);
    public InArgument`1<Hashtable> get_Filter();
    public void set_Filter(InArgument`1<Hashtable> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.TestModuleManifest : PSRemotingActivity {
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Path { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Path();
    public void set_Path(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.TestPSSessionConfigurationFile : PSRemotingActivity {
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Path { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Path();
    public void set_Path(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.UnregisterPSSessionConfiguration : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Name { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NoServiceRestart { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Name();
    public void set_Name(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_NoServiceRestart();
    public void set_NoServiceRestart(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.UpdateHelp : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ModuleSpecification[]> FullyQualifiedModule { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Module { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Recurse { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> SourcePath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<CultureInfo[]> UICulture { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> UseDefaultCredentials { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Module();
    public void set_Module(InArgument`1<String[]> value);
    public InArgument`1<ModuleSpecification[]> get_FullyQualifiedModule();
    public void set_FullyQualifiedModule(InArgument`1<ModuleSpecification[]> value);
    public InArgument`1<String[]> get_SourcePath();
    public void set_SourcePath(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Recurse();
    public void set_Recurse(InArgument`1<SwitchParameter> value);
    public InArgument`1<CultureInfo[]> get_UICulture();
    public void set_UICulture(InArgument`1<CultureInfo[]> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<SwitchParameter> get_UseDefaultCredentials();
    public void set_UseDefaultCredentials(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.WaitJob : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Any { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Hashtable> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Guid[]> InstanceId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Job[]> Job { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Int32[]> JobId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<JobState> State { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Timeout { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<Job[]> get_Job();
    public void set_Job(InArgument`1<Job[]> value);
    public InArgument`1<SwitchParameter> get_Any();
    public void set_Any(InArgument`1<SwitchParameter> value);
    public InArgument`1<int> get_Timeout();
    public void set_Timeout(InArgument`1<int> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<Guid[]> get_InstanceId();
    public void set_InstanceId(InArgument`1<Guid[]> value);
    public InArgument`1<Int32[]> get_JobId();
    public void set_JobId(InArgument`1<Int32[]> value);
    public InArgument`1<JobState> get_State();
    public void set_State(InArgument`1<JobState> value);
    public InArgument`1<Hashtable> get_Filter();
    public void set_Filter(InArgument`1<Hashtable> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Core.Activities.WhereObject : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CContains { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CEQ { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CGE { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CGT { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CIn { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CLE { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CLT { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CLike { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CMatch { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CNE { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CNotContains { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CNotIn { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CNotLike { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CNotMatch { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Contains { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> EQ { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ScriptBlock> FilterScript { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> GE { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> GT { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> In { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Is { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> IsNot { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> LE { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> LT { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Like { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Match { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NE { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NotContains { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NotIn { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NotLike { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NotMatch { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Property { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<object> Value { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<ScriptBlock> get_FilterScript();
    public void set_FilterScript(InArgument`1<ScriptBlock> value);
    public InArgument`1<string> get_Property();
    public void set_Property(InArgument`1<string> value);
    public InArgument`1<object> get_Value();
    public void set_Value(InArgument`1<object> value);
    public InArgument`1<SwitchParameter> get_EQ();
    public void set_EQ(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_CEQ();
    public void set_CEQ(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_NE();
    public void set_NE(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_CNE();
    public void set_CNE(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_GT();
    public void set_GT(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_CGT();
    public void set_CGT(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_LT();
    public void set_LT(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_CLT();
    public void set_CLT(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_GE();
    public void set_GE(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_CGE();
    public void set_CGE(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_LE();
    public void set_LE(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_CLE();
    public void set_CLE(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Like();
    public void set_Like(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_CLike();
    public void set_CLike(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_NotLike();
    public void set_NotLike(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_CNotLike();
    public void set_CNotLike(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Match();
    public void set_Match(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_CMatch();
    public void set_CMatch(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_NotMatch();
    public void set_NotMatch(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_CNotMatch();
    public void set_CNotMatch(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Contains();
    public void set_Contains(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_CContains();
    public void set_CContains(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_NotContains();
    public void set_NotContains(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_CNotContains();
    public void set_CNotContains(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_In();
    public void set_In(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_CIn();
    public void set_CIn(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_NotIn();
    public void set_NotIn(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_CNotIn();
    public void set_CNotIn(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Is();
    public void set_Is(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_IsNot();
    public void set_IsNot(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
