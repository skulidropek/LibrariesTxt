public class Microsoft.PowerShell.Diagnostics.Activities.ExportCounter : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Circular { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> FileFormat { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PerformanceCounterSampleSet[]> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<UInt32> MaxSize { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Path { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Path();
    public void set_Path(InArgument`1<string> value);
    public InArgument`1<string> get_FileFormat();
    public void set_FileFormat(InArgument`1<string> value);
    public InArgument`1<UInt32> get_MaxSize();
    public void set_MaxSize(InArgument`1<UInt32> value);
    public InArgument`1<PerformanceCounterSampleSet[]> get_InputObject();
    public void set_InputObject(InArgument`1<PerformanceCounterSampleSet[]> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Circular();
    public void set_Circular(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Diagnostics.Activities.GetCounter : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Continuous { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Counter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ListSet { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<long> MaxSamples { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<int> SampleInterval { get; public set; }
    protected bool SupportsCustomRemoting { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_ListSet();
    public void set_ListSet(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Counter();
    public void set_Counter(InArgument`1<String[]> value);
    public InArgument`1<int> get_SampleInterval();
    public void set_SampleInterval(InArgument`1<int> value);
    public InArgument`1<long> get_MaxSamples();
    public void set_MaxSamples(InArgument`1<long> value);
    public InArgument`1<SwitchParameter> get_Continuous();
    public void set_Continuous(InArgument`1<SwitchParameter> value);
    protected virtual bool get_SupportsCustomRemoting();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Diagnostics.Activities.GetWinEvent : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Hashtable[]> FilterHashtable { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> FilterXPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<XmlDocument> FilterXml { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ListLog { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ListProvider { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LogName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<long> MaxEvents { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Oldest { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ProviderName { get; public set; }
    protected bool SupportsCustomRemoting { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_ListLog();
    public void set_ListLog(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LogName();
    public void set_LogName(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_ListProvider();
    public void set_ListProvider(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_ProviderName();
    public void set_ProviderName(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<long> get_MaxEvents();
    public void set_MaxEvents(InArgument`1<long> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<string> get_FilterXPath();
    public void set_FilterXPath(InArgument`1<string> value);
    public InArgument`1<XmlDocument> get_FilterXml();
    public void set_FilterXml(InArgument`1<XmlDocument> value);
    public InArgument`1<Hashtable[]> get_FilterHashtable();
    public void set_FilterHashtable(InArgument`1<Hashtable[]> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Oldest();
    public void set_Oldest(InArgument`1<SwitchParameter> value);
    protected virtual bool get_SupportsCustomRemoting();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Diagnostics.Activities.ImportCounter : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Counter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<DateTime> EndTime { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ListSet { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<long> MaxSamples { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<DateTime> StartTime { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Summary { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_ListSet();
    public void set_ListSet(InArgument`1<String[]> value);
    public InArgument`1<DateTime> get_StartTime();
    public void set_StartTime(InArgument`1<DateTime> value);
    public InArgument`1<DateTime> get_EndTime();
    public void set_EndTime(InArgument`1<DateTime> value);
    public InArgument`1<String[]> get_Counter();
    public void set_Counter(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Summary();
    public void set_Summary(InArgument`1<SwitchParameter> value);
    public InArgument`1<long> get_MaxSamples();
    public void set_MaxSamples(InArgument`1<long> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Diagnostics.Activities.NewWinEvent : PSRemotingActivity {
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Object[]> Payload { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ProviderName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<byte> Version { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> WinEventId { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_ProviderName();
    public void set_ProviderName(InArgument`1<string> value);
    public InArgument`1<int> get_WinEventId();
    public void set_WinEventId(InArgument`1<int> value);
    public InArgument`1<byte> get_Version();
    public void set_Version(InArgument`1<byte> value);
    public InArgument`1<Object[]> get_Payload();
    public void set_Payload(InArgument`1<Object[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
