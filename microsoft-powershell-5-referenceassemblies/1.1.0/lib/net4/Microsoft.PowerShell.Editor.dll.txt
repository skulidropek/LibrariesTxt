public class Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1 : ObservableCollection`1<T> {
    public void AddRange(IEnumerable`1<T> items);
    public void BeginBulkOperation();
    public void EndBulkOperation();
    public ReadOnlyObservableCollection`1<T> AsReadOnly();
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void SetItem(int index, T item);
    protected virtual void InsertItem(int index, T item);
    protected virtual void MoveItem(int oldIndex, int newIndex);
    protected virtual void RemoveItem(int index);
    protected virtual void ClearItems();
}
public class Microsoft.VisualStudio.Language.Intellisense.Completion : object {
    public string Description { get; public set; }
    public string DisplayText { get; public set; }
    public string IconAutomationText { get; public set; }
    public ImageSource IconSource { get; public set; }
    public string InsertionText { get; public set; }
    public PropertyCollection Properties { get; }
    public Completion(string displayText);
    public Completion(string displayText, string insertionText, string description, ImageSource iconSource, string iconAutomationText);
    public virtual string get_DisplayText();
    public virtual void set_DisplayText(string value);
    public virtual string get_InsertionText();
    public virtual void set_InsertionText(string value);
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual ImageSource get_IconSource();
    public virtual void set_IconSource(ImageSource value);
    public virtual string get_IconAutomationText();
    public virtual void set_IconAutomationText(string value);
    public virtual PropertyCollection get_Properties();
}
public enum Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType : Enum {
    public int value__;
    public static CompletionMatchType MatchDisplayText;
    public static CompletionMatchType MatchInsertionText;
}
public class Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle : object {
    public Nullable`1<bool> AreGradientsAllowed { get; protected set; }
    public Brush BackgroundBrush { get; protected set; }
    public Brush BorderBrush { get; protected set; }
    public TextRunProperties CompletionTextRunProperties { get; protected set; }
    public Brush SelectionBackgroundBrush { get; protected set; }
    public Brush SelectionBorderBrush { get; protected set; }
    public TextRunProperties SelectionTextRunProperties { get; protected set; }
    public Brush TabItemHotBackgroundBrush { get; protected set; }
    public Brush TabItemHotBorderBrush { get; protected set; }
    public TextRunProperties TabItemHotTextRunProperties { get; protected set; }
    public Brush TabPanelBackgroundBrush { get; protected set; }
    public Brush TooltipBackgroundBrush { get; protected set; }
    public Brush TooltipBorderBrush { get; protected set; }
    public TextRunProperties TooltipTextRunProperties { get; protected set; }
    public virtual TextRunProperties get_CompletionTextRunProperties();
    protected virtual void set_CompletionTextRunProperties(TextRunProperties value);
    public virtual Brush get_BorderBrush();
    protected virtual void set_BorderBrush(Brush value);
    public virtual Brush get_BackgroundBrush();
    protected virtual void set_BackgroundBrush(Brush value);
    public virtual Brush get_SelectionBorderBrush();
    protected virtual void set_SelectionBorderBrush(Brush value);
    public virtual Brush get_SelectionBackgroundBrush();
    protected virtual void set_SelectionBackgroundBrush(Brush value);
    public virtual TextRunProperties get_SelectionTextRunProperties();
    protected virtual void set_SelectionTextRunProperties(TextRunProperties value);
    public virtual Brush get_TooltipBorderBrush();
    protected virtual void set_TooltipBorderBrush(Brush value);
    public virtual Brush get_TooltipBackgroundBrush();
    protected virtual void set_TooltipBackgroundBrush(Brush value);
    public virtual TextRunProperties get_TooltipTextRunProperties();
    protected virtual void set_TooltipTextRunProperties(TextRunProperties value);
    public virtual Brush get_TabPanelBackgroundBrush();
    protected virtual void set_TabPanelBackgroundBrush(Brush value);
    public virtual Brush get_TabItemHotBorderBrush();
    protected virtual void set_TabItemHotBorderBrush(Brush value);
    public virtual Brush get_TabItemHotBackgroundBrush();
    protected virtual void set_TabItemHotBackgroundBrush(Brush value);
    public virtual TextRunProperties get_TabItemHotTextRunProperties();
    protected virtual void set_TabItemHotTextRunProperties(TextRunProperties value);
    public virtual Nullable`1<bool> get_AreGradientsAllowed();
    protected virtual void set_AreGradientsAllowed(Nullable`1<bool> value);
}
public class Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus : object {
    public Completion Completion { get; }
    public bool IsSelected { get; }
    public bool IsUnique { get; }
    public CompletionSelectionStatus(Completion completion, bool isSelected, bool isUnique);
    public Completion get_Completion();
    public bool get_IsSelected();
    public bool get_IsUnique();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(CompletionSelectionStatus status1, CompletionSelectionStatus status2);
    public static bool op_Inequality(CompletionSelectionStatus status1, CompletionSelectionStatus status2);
}
public class Microsoft.VisualStudio.Language.Intellisense.CompletionSet : object {
    public ITrackingSpan ApplicableTo { get; protected set; }
    public IList`1<Completion> CompletionBuilders { get; }
    public IList`1<Completion> Completions { get; }
    public string DisplayName { get; public set; }
    public string Moniker { get; protected set; }
    public CompletionSelectionStatus SelectionStatus { get; public set; }
    protected BulkObservableCollection`1<Completion> WritableCompletionBuilders { get; }
    protected BulkObservableCollection`1<Completion> WritableCompletions { get; }
    public CompletionSet(string moniker, string displayName, ITrackingSpan applicableTo, IEnumerable`1<Completion> completions, IEnumerable`1<Completion> completionBuilders);
    public virtual string get_Moniker();
    protected virtual void set_Moniker(string value);
    public virtual string get_DisplayName();
    public virtual void set_DisplayName(string value);
    public virtual ITrackingSpan get_ApplicableTo();
    protected virtual void set_ApplicableTo(ITrackingSpan value);
    public virtual IList`1<Completion> get_Completions();
    public virtual IList`1<Completion> get_CompletionBuilders();
    public virtual void SelectBestMatch();
    public virtual void Filter();
    public virtual void Recalculate();
    public CompletionSelectionStatus get_SelectionStatus();
    public void set_SelectionStatus(CompletionSelectionStatus value);
    public void add_SelectionStatusChanged(EventHandler`1<ValueChangedEventArgs`1<CompletionSelectionStatus>> value);
    public void remove_SelectionStatusChanged(EventHandler`1<ValueChangedEventArgs`1<CompletionSelectionStatus>> value);
    protected BulkObservableCollection`1<Completion> get_WritableCompletions();
    protected BulkObservableCollection`1<Completion> get_WritableCompletionBuilders();
    protected void Filter(CompletionMatchType matchType, bool caseSensitive);
    protected void SelectBestMatch(CompletionMatchType matchType, bool caseSensitive);
    protected CompletionMatchResult MatchCompletionList(IList`1<Completion> completionList, CompletionMatchType matchType, bool caseSensitive);
}
public class Microsoft.VisualStudio.Language.Intellisense.CurrentParameterChangedEventArgs : EventArgs {
    public IParameter NewCurrentParameter { get; }
    public IParameter PreviousCurrentParameter { get; }
    public CurrentParameterChangedEventArgs(IParameter previousCurrentParameter, IParameter newCurrentParameter);
    public IParameter get_PreviousCurrentParameter();
    public IParameter get_NewCurrentParameter();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualStudio.Language.Intellisense.FilteredObservableCollection`1 : object {
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public T Item { get; public set; }
    public object SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    public FilteredObservableCollection`1(IList`1<T> underlyingList);
    public sealed virtual int Add(object value);
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual void Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public void Filter(Predicate`1<T> filterPredicate);
    public void StopFiltering();
}
public interface Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker {
    public abstract virtual ICompletionSession TriggerCompletion(ITextView textView);
    public abstract virtual ICompletionSession TriggerCompletion(ITextView textView, ITrackingPoint triggerPoint, bool trackCaret);
    public abstract virtual ICompletionSession CreateCompletionSession(ITextView textView, ITrackingPoint triggerPoint, bool trackCaret);
    public abstract virtual void DismissAllSessions(ITextView textView);
    public abstract virtual bool IsCompletionActive(ITextView textView);
    public abstract virtual ReadOnlyCollection`1<ICompletionSession> GetSessions(ITextView textView);
}
public interface Microsoft.VisualStudio.Language.Intellisense.ICompletionSession {
    public ReadOnlyObservableCollection`1<CompletionSet> CompletionSets { get; }
    public bool IsStarted { get; }
    public CompletionSet SelectedCompletionSet { get; public set; }
    public abstract virtual ReadOnlyObservableCollection`1<CompletionSet> get_CompletionSets();
    public abstract virtual CompletionSet get_SelectedCompletionSet();
    public abstract virtual void set_SelectedCompletionSet(CompletionSet value);
    public abstract virtual void add_SelectedCompletionSetChanged(EventHandler`1<ValueChangedEventArgs`1<CompletionSet>> value);
    public abstract virtual void remove_SelectedCompletionSetChanged(EventHandler`1<ValueChangedEventArgs`1<CompletionSet>> value);
    public abstract virtual void Filter();
    public abstract virtual void Commit();
    public abstract virtual void add_Committed(EventHandler value);
    public abstract virtual void remove_Committed(EventHandler value);
    public abstract virtual bool get_IsStarted();
}
public interface Microsoft.VisualStudio.Language.Intellisense.ICompletionSource {
    public abstract virtual void AugmentCompletionSession(ICompletionSession session, IList`1<CompletionSet> completionSets);
}
public interface Microsoft.VisualStudio.Language.Intellisense.ICompletionSourceProvider {
    public abstract virtual ICompletionSource TryCreateCompletionSource(ITextBuffer textBuffer);
}
public class Microsoft.VisualStudio.Language.Intellisense.IconDescription : object {
    public StandardGlyphGroup Group { get; }
    public StandardGlyphItem Item { get; }
    public IconDescription(StandardGlyphGroup group, StandardGlyphItem item);
    public StandardGlyphGroup get_Group();
    public StandardGlyphItem get_Item();
    public virtual string ToString();
}
public interface Microsoft.VisualStudio.Language.Intellisense.ICustomCommit {
    public abstract virtual void Commit();
}
public interface Microsoft.VisualStudio.Language.Intellisense.ICustomIntellisensePresenter {
    public abstract virtual void Render();
}
public interface Microsoft.VisualStudio.Language.Intellisense.ICustomKeyboardHandler {
    public abstract virtual bool CaptureKeyboard();
    public abstract virtual void ReleaseKeyboard();
}
public interface Microsoft.VisualStudio.Language.Intellisense.IGlyphService {
    public abstract virtual ImageSource GetGlyph(StandardGlyphGroup group, StandardGlyphItem item);
}
public interface Microsoft.VisualStudio.Language.Intellisense.IIntellisenseCommandTarget {
    public abstract virtual bool ExecuteKeyboardCommand(IntellisenseKeyboardCommand command);
}
public interface Microsoft.VisualStudio.Language.Intellisense.IIntellisenseController {
    public abstract virtual void Detach(ITextView textView);
    public abstract virtual void ConnectSubjectBuffer(ITextBuffer subjectBuffer);
    public abstract virtual void DisconnectSubjectBuffer(ITextBuffer subjectBuffer);
}
public interface Microsoft.VisualStudio.Language.Intellisense.IIntellisenseControllerProvider {
    public abstract virtual IIntellisenseController TryCreateIntellisenseController(ITextView textView, IList`1<ITextBuffer> subjectBuffers);
}
public interface Microsoft.VisualStudio.Language.Intellisense.IIntellisensePresenter {
    public IIntellisenseSession Session { get; }
    public abstract virtual IIntellisenseSession get_Session();
}
public interface Microsoft.VisualStudio.Language.Intellisense.IIntellisensePresenterProvider {
    public abstract virtual IIntellisensePresenter TryCreateIntellisensePresenter(IIntellisenseSession session);
}
public interface Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession {
    public bool IsDismissed { get; }
    public IIntellisensePresenter Presenter { get; }
    public ITextView TextView { get; }
    public abstract virtual ITrackingPoint GetTriggerPoint(ITextBuffer textBuffer);
    public abstract virtual Nullable`1<SnapshotPoint> GetTriggerPoint(ITextSnapshot textSnapshot);
    public abstract virtual ITextView get_TextView();
    public abstract virtual IIntellisensePresenter get_Presenter();
    public abstract virtual void add_PresenterChanged(EventHandler value);
    public abstract virtual void remove_PresenterChanged(EventHandler value);
    public abstract virtual void Start();
    public abstract virtual void Dismiss();
    public abstract virtual void add_Dismissed(EventHandler value);
    public abstract virtual void remove_Dismissed(EventHandler value);
    public abstract virtual bool get_IsDismissed();
    public abstract virtual void Recalculate();
    public abstract virtual void add_Recalculated(EventHandler value);
    public abstract virtual void remove_Recalculated(EventHandler value);
    public abstract virtual bool Match();
    public abstract virtual void Collapse();
}
public interface Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack {
    public ReadOnlyObservableCollection`1<IIntellisenseSession> Sessions { get; }
    public IIntellisenseSession TopSession { get; }
    public abstract virtual void PushSession(IIntellisenseSession session);
    public abstract virtual IIntellisenseSession PopSession();
    public abstract virtual void MoveSessionToTop(IIntellisenseSession session);
    public abstract virtual ReadOnlyObservableCollection`1<IIntellisenseSession> get_Sessions();
    public abstract virtual IIntellisenseSession get_TopSession();
    public abstract virtual void CollapseAllSessions();
}
public interface Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStackMapService {
    public abstract virtual IIntellisenseSessionStack GetStackForTextView(ITextView textView);
}
public class Microsoft.VisualStudio.Language.Intellisense.Implementation.SmartTagSurface : Popup {
    public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public enum Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand : Enum {
    public int value__;
    public static IntellisenseKeyboardCommand BottomLine;
    public static IntellisenseKeyboardCommand DecreaseFilterLevel;
    public static IntellisenseKeyboardCommand Down;
    public static IntellisenseKeyboardCommand End;
    public static IntellisenseKeyboardCommand Enter;
    public static IntellisenseKeyboardCommand Escape;
    public static IntellisenseKeyboardCommand Home;
    public static IntellisenseKeyboardCommand IncreaseFilterLevel;
    public static IntellisenseKeyboardCommand PageDown;
    public static IntellisenseKeyboardCommand PageUp;
    public static IntellisenseKeyboardCommand TopLine;
    public static IntellisenseKeyboardCommand Up;
}
public static class Microsoft.VisualStudio.Language.Intellisense.IntellisenseSpaceReservationManagerNames : object {
    public static string CompletionSpaceReservationManagerName;
    public static string QuickInfoSpaceReservationManagerName;
    public static string SignatureHelpSpaceReservationManagerName;
    public static string SmartTagSpaceReservationManagerName;
}
public interface Microsoft.VisualStudio.Language.Intellisense.IParameter {
    public string Documentation { get; }
    public Span Locus { get; }
    public string Name { get; }
    public Span PrettyPrintedLocus { get; }
    public ISignature Signature { get; }
    public abstract virtual ISignature get_Signature();
    public abstract virtual string get_Name();
    public abstract virtual string get_Documentation();
    public abstract virtual Span get_Locus();
    public abstract virtual Span get_PrettyPrintedLocus();
}
public interface Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter {
    public double Opacity { get; public set; }
    public PopupStyles PopupStyles { get; }
    public ITrackingSpan PresentationSpan { get; }
    public string SpaceReservationManagerName { get; }
    public UIElement SurfaceElement { get; }
    public abstract virtual UIElement get_SurfaceElement();
    public abstract virtual void add_SurfaceElementChanged(EventHandler value);
    public abstract virtual void remove_SurfaceElementChanged(EventHandler value);
    public abstract virtual ITrackingSpan get_PresentationSpan();
    public abstract virtual void add_PresentationSpanChanged(EventHandler value);
    public abstract virtual void remove_PresentationSpanChanged(EventHandler value);
    public abstract virtual PopupStyles get_PopupStyles();
    public abstract virtual void add_PopupStylesChanged(EventHandler`1<ValueChangedEventArgs`1<PopupStyles>> value);
    public abstract virtual void remove_PopupStylesChanged(EventHandler`1<ValueChangedEventArgs`1<PopupStyles>> value);
    public abstract virtual string get_SpaceReservationManagerName();
    public abstract virtual double get_Opacity();
    public abstract virtual void set_Opacity(double value);
}
public interface Microsoft.VisualStudio.Language.Intellisense.IQuickInfoBroker {
    public abstract virtual bool IsQuickInfoActive(ITextView textView);
    public abstract virtual IQuickInfoSession TriggerQuickInfo(ITextView textView);
    public abstract virtual IQuickInfoSession TriggerQuickInfo(ITextView textView, ITrackingPoint triggerPoint, bool trackMouse);
    public abstract virtual IQuickInfoSession CreateQuickInfoSession(ITextView textView, ITrackingPoint triggerPoint, bool trackMouse);
    public abstract virtual ReadOnlyCollection`1<IQuickInfoSession> GetSessions(ITextView textView);
}
public interface Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession {
    public ITrackingSpan ApplicableToSpan { get; }
    public BulkObservableCollection`1<object> QuickInfoContent { get; }
    public bool TrackMouse { get; }
    public abstract virtual BulkObservableCollection`1<object> get_QuickInfoContent();
    public abstract virtual ITrackingSpan get_ApplicableToSpan();
    public abstract virtual void add_ApplicableToSpanChanged(EventHandler value);
    public abstract virtual void remove_ApplicableToSpanChanged(EventHandler value);
    public abstract virtual bool get_TrackMouse();
}
public interface Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSource {
    public abstract virtual void AugmentQuickInfoSession(IQuickInfoSession session, IList`1<object> quickInfoContent, ITrackingSpan& applicableToSpan);
}
public interface Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSourceProvider {
    public abstract virtual IQuickInfoSource TryCreateQuickInfoSource(ITextBuffer textBuffer);
}
public interface Microsoft.VisualStudio.Language.Intellisense.ISignature {
    public ITrackingSpan ApplicableToSpan { get; }
    public string Content { get; }
    public IParameter CurrentParameter { get; }
    public string Documentation { get; }
    public ReadOnlyCollection`1<IParameter> Parameters { get; }
    public string PrettyPrintedContent { get; }
    public abstract virtual ITrackingSpan get_ApplicableToSpan();
    public abstract virtual string get_Content();
    public abstract virtual string get_PrettyPrintedContent();
    public abstract virtual string get_Documentation();
    public abstract virtual ReadOnlyCollection`1<IParameter> get_Parameters();
    public abstract virtual IParameter get_CurrentParameter();
    public abstract virtual void add_CurrentParameterChanged(EventHandler`1<CurrentParameterChangedEventArgs> value);
    public abstract virtual void remove_CurrentParameterChanged(EventHandler`1<CurrentParameterChangedEventArgs> value);
}
public interface Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker {
    public abstract virtual ISignatureHelpSession TriggerSignatureHelp(ITextView textView);
    public abstract virtual ISignatureHelpSession TriggerSignatureHelp(ITextView textView, ITrackingPoint triggerPoint, bool trackCaret);
    public abstract virtual ISignatureHelpSession CreateSignatureHelpSession(ITextView textView, ITrackingPoint triggerPoint, bool trackCaret);
    public abstract virtual void DismissAllSessions(ITextView textView);
    public abstract virtual bool IsSignatureHelpActive(ITextView textView);
    public abstract virtual ReadOnlyCollection`1<ISignatureHelpSession> GetSessions(ITextView textView);
}
public interface Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession {
    public ISignature SelectedSignature { get; public set; }
    public ReadOnlyObservableCollection`1<ISignature> Signatures { get; }
    public abstract virtual ReadOnlyObservableCollection`1<ISignature> get_Signatures();
    public abstract virtual ISignature get_SelectedSignature();
    public abstract virtual void set_SelectedSignature(ISignature value);
    public abstract virtual void add_SelectedSignatureChanged(EventHandler`1<SelectedSignatureChangedEventArgs> value);
    public abstract virtual void remove_SelectedSignatureChanged(EventHandler`1<SelectedSignatureChangedEventArgs> value);
}
public interface Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSource {
    public abstract virtual void AugmentSignatureHelpSession(ISignatureHelpSession session, IList`1<ISignature> signatures);
    public abstract virtual ISignature GetBestMatch(ISignatureHelpSession session);
}
public interface Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSourceProvider {
    public abstract virtual ISignatureHelpSource TryCreateSignatureHelpSource(ITextBuffer textBuffer);
}
public interface Microsoft.VisualStudio.Language.Intellisense.ISmartTagAction {
    public ReadOnlyCollection`1<SmartTagActionSet> ActionSets { get; }
    public string DisplayText { get; }
    public ImageSource Icon { get; }
    public bool IsEnabled { get; }
    public abstract virtual ReadOnlyCollection`1<SmartTagActionSet> get_ActionSets();
    public abstract virtual ImageSource get_Icon();
    public abstract virtual string get_DisplayText();
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void Invoke();
}
public interface Microsoft.VisualStudio.Language.Intellisense.ISmartTagBroker {
    public abstract virtual ISmartTagSession CreateSmartTagSession(ITextView textView, SmartTagType type, ITrackingPoint triggerPoint, SmartTagState state);
    public abstract virtual ReadOnlyCollection`1<ISmartTagSession> GetSessions(ITextView textView);
    public abstract virtual bool IsSmartTagActive(ITextView textView);
}
public interface Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession {
    public ReadOnlyObservableCollection`1<SmartTagActionSet> ActionSets { get; }
    public ITrackingSpan ApplicableToSpan { get; public set; }
    public ImageSource IconSource { get; public set; }
    public SmartTagState State { get; public set; }
    public ITrackingSpan TagSpan { get; public set; }
    public string TagText { get; public set; }
    public SmartTagType Type { get; }
    public abstract virtual ITrackingSpan get_ApplicableToSpan();
    public abstract virtual void set_ApplicableToSpan(ITrackingSpan value);
    public abstract virtual void add_ApplicableToSpanChanged(EventHandler value);
    public abstract virtual void remove_ApplicableToSpanChanged(EventHandler value);
    public abstract virtual ITrackingSpan get_TagSpan();
    public abstract virtual void set_TagSpan(ITrackingSpan value);
    public abstract virtual void add_TagSpanChanged(EventHandler value);
    public abstract virtual void remove_TagSpanChanged(EventHandler value);
    public abstract virtual ReadOnlyObservableCollection`1<SmartTagActionSet> get_ActionSets();
    public abstract virtual string get_TagText();
    public abstract virtual void set_TagText(string value);
    public abstract virtual SmartTagType get_Type();
    public abstract virtual SmartTagState get_State();
    public abstract virtual void set_State(SmartTagState value);
    public abstract virtual void add_StateChanged(EventHandler value);
    public abstract virtual void remove_StateChanged(EventHandler value);
    public abstract virtual ImageSource get_IconSource();
    public abstract virtual void set_IconSource(ImageSource value);
    public abstract virtual void add_IconSourceChanged(EventHandler value);
    public abstract virtual void remove_IconSourceChanged(EventHandler value);
}
public interface Microsoft.VisualStudio.Language.Intellisense.ISmartTagSource {
    public abstract virtual void AugmentSmartTagSession(ISmartTagSession session, IList`1<SmartTagActionSet> smartTagActionSets);
}
public interface Microsoft.VisualStudio.Language.Intellisense.ISmartTagSourceProvider {
    public abstract virtual ISmartTagSource TryCreateSmartTagSource(ITextBuffer textBuffer);
}
public interface Microsoft.VisualStudio.Language.Intellisense.ITextFormattable {
    public abstract virtual TextRunProperties GetTextRunProperties(TextRunProperties defaultTextRunProperties);
    public abstract virtual TextRunProperties GetHighlightedTextRunProperties(TextRunProperties defaultHighlightedTextRunProperties);
}
public interface Microsoft.VisualStudio.Language.Intellisense.IUIElementProvider`2 {
    public abstract virtual UIElement GetUIElement(TItem itemToRender, TContext context, UIElementType elementType);
}
public interface Microsoft.VisualStudio.Language.Intellisense.IWpfKeyboardTrackingService {
    public abstract virtual void BeginTrackingKeyboard(IntPtr handle, IList`1<UInt32> messagesToCapture);
    public abstract virtual void EndTrackingKeyboard();
}
public class Microsoft.VisualStudio.Language.Intellisense.QuickInfoPresenterStyle : object {
    public Nullable`1<bool> AreGradientsAllowed { get; protected set; }
    public Brush BackgroundBrush { get; protected set; }
    public Brush BorderBrush { get; protected set; }
    public string QuickInfoAppearanceCategory { get; protected set; }
    public virtual Brush get_BorderBrush();
    protected virtual void set_BorderBrush(Brush value);
    public virtual Brush get_BackgroundBrush();
    protected virtual void set_BackgroundBrush(Brush value);
    public virtual string get_QuickInfoAppearanceCategory();
    protected virtual void set_QuickInfoAppearanceCategory(string value);
    public virtual Nullable`1<bool> get_AreGradientsAllowed();
    protected virtual void set_AreGradientsAllowed(Nullable`1<bool> value);
}
public class Microsoft.VisualStudio.Language.Intellisense.SelectedSignatureChangedEventArgs : EventArgs {
    public ISignature NewSelectedSignature { get; }
    public ISignature PreviousSelectedSignature { get; }
    public SelectedSignatureChangedEventArgs(ISignature previousSelectedSignature, ISignature newSelectedSignature);
    public ISignature get_PreviousSelectedSignature();
    public ISignature get_NewSelectedSignature();
}
public class Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle : object {
    public Nullable`1<bool> AreGradientsAllowed { get; protected set; }
    public Brush BackgroundBrush { get; protected set; }
    public Brush BorderBrush { get; protected set; }
    public TextRunProperties CurrentParameterDocumentationTextRunProperties { get; protected set; }
    public TextRunProperties CurrentParameterNameTextRunProperties { get; protected set; }
    public Brush ForegroundBrush { get; protected set; }
    public string SignatureAppearanceCategory { get; protected set; }
    public TextRunProperties SignatureDocumentationTextRunProperties { get; protected set; }
    public TextRunProperties UpDownSignatureTextRunProperties { get; protected set; }
    public virtual Brush get_ForegroundBrush();
    protected virtual void set_ForegroundBrush(Brush value);
    public virtual Brush get_BorderBrush();
    protected virtual void set_BorderBrush(Brush value);
    public virtual Brush get_BackgroundBrush();
    protected virtual void set_BackgroundBrush(Brush value);
    public virtual string get_SignatureAppearanceCategory();
    protected virtual void set_SignatureAppearanceCategory(string value);
    public virtual TextRunProperties get_UpDownSignatureTextRunProperties();
    protected virtual void set_UpDownSignatureTextRunProperties(TextRunProperties value);
    public virtual TextRunProperties get_SignatureDocumentationTextRunProperties();
    protected virtual void set_SignatureDocumentationTextRunProperties(TextRunProperties value);
    public virtual TextRunProperties get_CurrentParameterNameTextRunProperties();
    protected virtual void set_CurrentParameterNameTextRunProperties(TextRunProperties value);
    public virtual TextRunProperties get_CurrentParameterDocumentationTextRunProperties();
    protected virtual void set_CurrentParameterDocumentationTextRunProperties(TextRunProperties value);
    public virtual Nullable`1<bool> get_AreGradientsAllowed();
    protected virtual void set_AreGradientsAllowed(Nullable`1<bool> value);
}
public class Microsoft.VisualStudio.Language.Intellisense.SmartTag : object {
    public ReadOnlyCollection`1<SmartTagActionSet> ActionSets { get; }
    public SmartTagType SmartTagType { get; }
    public SmartTag(SmartTagType smartTagType, ReadOnlyCollection`1<SmartTagActionSet> actionSets);
    public SmartTagType get_SmartTagType();
    public ReadOnlyCollection`1<SmartTagActionSet> get_ActionSets();
}
public class Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet : object {
    public ReadOnlyCollection`1<ISmartTagAction> Actions { get; }
    public SmartTagActionSet(ReadOnlyCollection`1<ISmartTagAction> actions);
    public ReadOnlyCollection`1<ISmartTagAction> get_Actions();
}
public enum Microsoft.VisualStudio.Language.Intellisense.SmartTagState : Enum {
    public int value__;
    public static SmartTagState Collapsed;
    public static SmartTagState Expanded;
    public static SmartTagState Intermediate;
}
public enum Microsoft.VisualStudio.Language.Intellisense.SmartTagType : Enum {
    public int value__;
    public static SmartTagType Ephemeral;
    public static SmartTagType Factoid;
}
public enum Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup : Enum {
    public int value__;
    public static StandardGlyphGroup GlyphArrow;
    public static StandardGlyphGroup GlyphAssembly;
    public static StandardGlyphGroup GlyphBscFile;
    public static StandardGlyphGroup GlyphCSharpExpansion;
    public static StandardGlyphGroup GlyphCSharpFile;
    public static StandardGlyphGroup GlyphCallGraph;
    public static StandardGlyphGroup GlyphCallersGraph;
    public static StandardGlyphGroup GlyphClosedFolder;
    public static StandardGlyphGroup GlyphCoolProject;
    public static StandardGlyphGroup GlyphCppProject;
    public static StandardGlyphGroup GlyphDialogId;
    public static StandardGlyphGroup GlyphExtensionMethod;
    public static StandardGlyphGroup GlyphExtensionMethodFriend;
    public static StandardGlyphGroup GlyphExtensionMethodInternal;
    public static StandardGlyphGroup GlyphExtensionMethodPrivate;
    public static StandardGlyphGroup GlyphExtensionMethodProtected;
    public static StandardGlyphGroup GlyphExtensionMethodShortcut;
    public static StandardGlyphGroup GlyphForwardType;
    public static StandardGlyphGroup GlyphGroupClass;
    public static StandardGlyphGroup GlyphGroupConstant;
    public static StandardGlyphGroup GlyphGroupDelegate;
    public static StandardGlyphGroup GlyphGroupEnum;
    public static StandardGlyphGroup GlyphGroupEnumMember;
    public static StandardGlyphGroup GlyphGroupError;
    public static StandardGlyphGroup GlyphGroupEvent;
    public static StandardGlyphGroup GlyphGroupException;
    public static StandardGlyphGroup GlyphGroupField;
    public static StandardGlyphGroup GlyphGroupInterface;
    public static StandardGlyphGroup GlyphGroupIntrinsic;
    public static StandardGlyphGroup GlyphGroupJSharpClass;
    public static StandardGlyphGroup GlyphGroupJSharpField;
    public static StandardGlyphGroup GlyphGroupJSharpInterface;
    public static StandardGlyphGroup GlyphGroupJSharpMethod;
    public static StandardGlyphGroup GlyphGroupJSharpNamespace;
    public static StandardGlyphGroup GlyphGroupMacro;
    public static StandardGlyphGroup GlyphGroupMap;
    public static StandardGlyphGroup GlyphGroupMapItem;
    public static StandardGlyphGroup GlyphGroupMethod;
    public static StandardGlyphGroup GlyphGroupModule;
    public static StandardGlyphGroup GlyphGroupNamespace;
    public static StandardGlyphGroup GlyphGroupOperator;
    public static StandardGlyphGroup GlyphGroupOverload;
    public static StandardGlyphGroup GlyphGroupProperty;
    public static StandardGlyphGroup GlyphGroupStruct;
    public static StandardGlyphGroup GlyphGroupTemplate;
    public static StandardGlyphGroup GlyphGroupType;
    public static StandardGlyphGroup GlyphGroupTypedef;
    public static StandardGlyphGroup GlyphGroupUnion;
    public static StandardGlyphGroup GlyphGroupUnknown;
    public static StandardGlyphGroup GlyphGroupValueType;
    public static StandardGlyphGroup GlyphGroupVariable;
    public static StandardGlyphGroup GlyphInformation;
    public static StandardGlyphGroup GlyphJSharpDocument;
    public static StandardGlyphGroup GlyphJSharpProject;
    public static StandardGlyphGroup GlyphKeyword;
    public static StandardGlyphGroup GlyphLibrary;
    public static StandardGlyphGroup GlyphMaybeCall;
    public static StandardGlyphGroup GlyphMaybeCaller;
    public static StandardGlyphGroup GlyphMaybeReference;
    public static StandardGlyphGroup GlyphOpenFolder;
    public static StandardGlyphGroup GlyphRecursion;
    public static StandardGlyphGroup GlyphReference;
    public static StandardGlyphGroup GlyphVBProject;
    public static StandardGlyphGroup GlyphWarning;
    public static StandardGlyphGroup GlyphXmlAttribute;
    public static StandardGlyphGroup GlyphXmlAttributeCheck;
    public static StandardGlyphGroup GlyphXmlAttributeQuestion;
    public static StandardGlyphGroup GlyphXmlChild;
    public static StandardGlyphGroup GlyphXmlChildCheck;
    public static StandardGlyphGroup GlyphXmlChildQuestion;
    public static StandardGlyphGroup GlyphXmlDescendant;
    public static StandardGlyphGroup GlyphXmlDescendantCheck;
    public static StandardGlyphGroup GlyphXmlDescendantQuestion;
    public static StandardGlyphGroup GlyphXmlItem;
    public static StandardGlyphGroup GlyphXmlNamespace;
}
public enum Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem : Enum {
    public int value__;
    public static StandardGlyphItem GlyphItemFriend;
    public static StandardGlyphItem GlyphItemInternal;
    public static StandardGlyphItem GlyphItemPrivate;
    public static StandardGlyphItem GlyphItemProtected;
    public static StandardGlyphItem GlyphItemPublic;
    public static StandardGlyphItem GlyphItemShortcut;
    public static StandardGlyphItem TotalGlyphItems;
}
public enum Microsoft.VisualStudio.Language.Intellisense.UIElementType : Enum {
    public int value__;
    public static UIElementType Large;
    public static UIElementType Small;
    public static UIElementType Tooltip;
}
public class Microsoft.VisualStudio.Language.Intellisense.ValueChangedEventArgs`1 : EventArgs {
    public TValue NewValue { get; }
    public TValue OldValue { get; }
    public ValueChangedEventArgs`1(TValue oldValue, TValue newValue);
    public TValue get_OldValue();
    public TValue get_NewValue();
}
public interface Microsoft.VisualStudio.Language.StandardClassification.IStandardClassificationService {
    public IClassificationType CharacterLiteral { get; }
    public IClassificationType Comment { get; }
    public IClassificationType ExcludedCode { get; }
    public IClassificationType FormalLanguage { get; }
    public IClassificationType Identifier { get; }
    public IClassificationType Keyword { get; }
    public IClassificationType Literal { get; }
    public IClassificationType NaturalLanguage { get; }
    public IClassificationType NumberLiteral { get; }
    public IClassificationType Operator { get; }
    public IClassificationType Other { get; }
    public IClassificationType PreprocessorKeyword { get; }
    public IClassificationType StringLiteral { get; }
    public IClassificationType SymbolDefinition { get; }
    public IClassificationType SymbolReference { get; }
    public IClassificationType WhiteSpace { get; }
    public abstract virtual IClassificationType get_NaturalLanguage();
    public abstract virtual IClassificationType get_FormalLanguage();
    public abstract virtual IClassificationType get_Comment();
    public abstract virtual IClassificationType get_Identifier();
    public abstract virtual IClassificationType get_Keyword();
    public abstract virtual IClassificationType get_WhiteSpace();
    public abstract virtual IClassificationType get_Operator();
    public abstract virtual IClassificationType get_Literal();
    public abstract virtual IClassificationType get_NumberLiteral();
    public abstract virtual IClassificationType get_StringLiteral();
    public abstract virtual IClassificationType get_CharacterLiteral();
    public abstract virtual IClassificationType get_Other();
    public abstract virtual IClassificationType get_ExcludedCode();
    public abstract virtual IClassificationType get_PreprocessorKeyword();
    public abstract virtual IClassificationType get_SymbolDefinition();
    public abstract virtual IClassificationType get_SymbolReference();
}
public static class Microsoft.VisualStudio.Language.StandardClassification.LanguagePriority : object {
    public static string FormalLanguage;
    public static string NaturalLanguage;
}
public static class Microsoft.VisualStudio.Language.StandardClassification.PredefinedClassificationTypeNames : object {
    public static string Character;
    public static string Comment;
    public static string ExcludedCode;
    public static string FormalLanguage;
    public static string Identifier;
    public static string Keyword;
    public static string Literal;
    public static string NaturalLanguage;
    public static string Number;
    public static string Operator;
    public static string Other;
    public static string PreprocessorKeyword;
    public static string String;
    public static string SymbolDefinition;
    public static string SymbolReference;
    public static string WhiteSpace;
}
public interface Microsoft.VisualStudio.Text.AdornmentLibrary.Squiggles.Implementation.IErrorTypeMetadata {
    public string DisplayName { get; }
    public abstract virtual string get_DisplayName();
}
public class Microsoft.VisualStudio.Text.Adornments.ErrorTypeDefinition : object {
}
public interface Microsoft.VisualStudio.Text.Adornments.IErrorProviderFactory {
    public abstract virtual SimpleTagger`1<ErrorTag> GetErrorTagger(ITextBuffer textBuffer);
}
public interface Microsoft.VisualStudio.Text.Adornments.ITextMarkerProviderFactory {
    public abstract virtual SimpleTagger`1<TextMarkerTag> GetTextMarkerTagger(ITextBuffer textBuffer);
}
public interface Microsoft.VisualStudio.Text.Adornments.IToolTipProvider {
    public abstract virtual void ShowToolTip(ITrackingSpan span, object toolTipContent);
    public abstract virtual void ShowToolTip(ITrackingSpan span, object toolTipContent, PopupStyles style);
    public abstract virtual void ClearToolTip();
}
public interface Microsoft.VisualStudio.Text.Adornments.IToolTipProviderFactory {
    public abstract virtual IToolTipProvider GetToolTipProvider(ITextView textView);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Text.Adornments.PopupStyles : Enum {
    public int value__;
    public static PopupStyles DismissOnMouseLeaveText;
    public static PopupStyles DismissOnMouseLeaveTextOrContent;
    public static PopupStyles None;
    public static PopupStyles PositionClosest;
    public static PopupStyles PositionLeftOrRight;
    public static PopupStyles PreferLeftOrTopPosition;
    public static PopupStyles RightOrBottomJustify;
}
public static class Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames : object {
    public static string CompilerError;
    public static string OtherError;
    public static string SyntaxError;
    public static string Warning;
}
public class Microsoft.VisualStudio.Text.Classification.ClassificationChangedEventArgs : EventArgs {
    public SnapshotSpan ChangeSpan { get; }
    public ClassificationChangedEventArgs(SnapshotSpan changeSpan);
    public SnapshotSpan get_ChangeSpan();
}
public abstract class Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition : EditorFormatDefinition {
    public static string BackgroundOpacityId;
    public static string CultureInfoId;
    public static double DefaultBackgroundOpacity;
    public static string FontHintingSizeId;
    public static string FontRenderingSizeId;
    public static string ForegroundOpacityId;
    public static string IsBoldId;
    public static string IsItalicId;
    public static string TextDecorationsId;
    public static string TextEffectsId;
    public static string TypefaceId;
    public Nullable`1<double> BackgroundOpacity { get; protected set; }
    public CultureInfo CultureInfo { get; protected set; }
    public Nullable`1<double> FontHintingSize { get; protected set; }
    public Nullable`1<double> FontRenderingSize { get; protected set; }
    public Typeface FontTypeface { get; protected set; }
    public Nullable`1<double> ForegroundOpacity { get; protected set; }
    public Nullable`1<bool> IsBold { get; protected set; }
    public Nullable`1<bool> IsItalic { get; protected set; }
    public TextDecorationCollection TextDecorations { get; protected set; }
    public TextEffectCollection TextEffects { get; protected set; }
    public CultureInfo get_CultureInfo();
    protected void set_CultureInfo(CultureInfo value);
    public Nullable`1<double> get_FontHintingSize();
    protected void set_FontHintingSize(Nullable`1<double> value);
    public Nullable`1<double> get_FontRenderingSize();
    protected void set_FontRenderingSize(Nullable`1<double> value);
    public TextEffectCollection get_TextEffects();
    protected void set_TextEffects(TextEffectCollection value);
    public TextDecorationCollection get_TextDecorations();
    protected void set_TextDecorations(TextDecorationCollection value);
    public Typeface get_FontTypeface();
    protected void set_FontTypeface(Typeface value);
    public Nullable`1<double> get_ForegroundOpacity();
    protected void set_ForegroundOpacity(Nullable`1<double> value);
    public Nullable`1<double> get_BackgroundOpacity();
    protected void set_BackgroundOpacity(Nullable`1<double> value);
    public Nullable`1<bool> get_IsBold();
    protected void set_IsBold(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsItalic();
    protected void set_IsItalic(Nullable`1<bool> value);
    protected virtual ResourceDictionary CreateResourceDictionaryFromDefinition();
}
public class Microsoft.VisualStudio.Text.Classification.ClassificationSpan : object {
    public IClassificationType ClassificationType { get; }
    public SnapshotSpan Span { get; }
    public ClassificationSpan(SnapshotSpan span, IClassificationType classification);
    public IClassificationType get_ClassificationType();
    public SnapshotSpan get_Span();
}
public class Microsoft.VisualStudio.Text.Classification.ClassificationTypeAttribute : MultipleBaseMetadataAttribute {
    public string ClassificationTypeNames { get; public set; }
    public string get_ClassificationTypeNames();
    public void set_ClassificationTypeNames(string value);
}
public class Microsoft.VisualStudio.Text.Classification.ClassificationTypeDefinition : object {
}
public abstract class Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition : object {
    public static string BackgroundBrushId;
    public static string BackgroundColorId;
    public static string ForegroundBrushId;
    public static string ForegroundColorId;
    public Brush BackgroundBrush { get; protected set; }
    public Nullable`1<Color> BackgroundColor { get; protected set; }
    public Nullable`1<bool> BackgroundCustomizable { get; protected set; }
    public string DisplayName { get; protected set; }
    public Brush ForegroundBrush { get; protected set; }
    public Nullable`1<Color> ForegroundColor { get; protected set; }
    public Nullable`1<bool> ForegroundCustomizable { get; protected set; }
    public Nullable`1<Color> get_ForegroundColor();
    protected void set_ForegroundColor(Nullable`1<Color> value);
    public Nullable`1<Color> get_BackgroundColor();
    protected void set_BackgroundColor(Nullable`1<Color> value);
    public Brush get_BackgroundBrush();
    protected void set_BackgroundBrush(Brush value);
    public Brush get_ForegroundBrush();
    protected void set_ForegroundBrush(Brush value);
    public Nullable`1<bool> get_ForegroundCustomizable();
    protected void set_ForegroundCustomizable(Nullable`1<bool> value);
    public Nullable`1<bool> get_BackgroundCustomizable();
    protected void set_BackgroundCustomizable(Nullable`1<bool> value);
    public string get_DisplayName();
    protected void set_DisplayName(string value);
    public ResourceDictionary CreateResourceDictionary();
    protected virtual ResourceDictionary CreateResourceDictionaryFromDefinition();
}
public class Microsoft.VisualStudio.Text.Classification.FormatItemsEventArgs : EventArgs {
    public ReadOnlyCollection`1<string> ChangedItems { get; }
    public FormatItemsEventArgs(ReadOnlyCollection`1<string> items);
    public ReadOnlyCollection`1<string> get_ChangedItems();
}
public interface Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap {
    public ReadOnlyCollection`1<IClassificationType> CurrentPriorityOrder { get; }
    public TextFormattingRunProperties DefaultTextProperties { get; public set; }
    public bool IsInBatchUpdate { get; }
    public abstract virtual TextFormattingRunProperties GetTextProperties(IClassificationType classificationType);
    public abstract virtual TextFormattingRunProperties GetExplicitTextProperties(IClassificationType classificationType);
    public abstract virtual string GetEditorFormatMapKey(IClassificationType classificationType);
    public abstract virtual void AddExplicitTextProperties(IClassificationType classificationType, TextFormattingRunProperties properties);
    public abstract virtual void AddExplicitTextProperties(IClassificationType classificationType, TextFormattingRunProperties properties, IClassificationType priority);
    public abstract virtual void SetTextProperties(IClassificationType classificationType, TextFormattingRunProperties properties);
    public abstract virtual void SetExplicitTextProperties(IClassificationType classificationType, TextFormattingRunProperties properties);
    public abstract virtual ReadOnlyCollection`1<IClassificationType> get_CurrentPriorityOrder();
    public abstract virtual TextFormattingRunProperties get_DefaultTextProperties();
    public abstract virtual void set_DefaultTextProperties(TextFormattingRunProperties value);
    public abstract virtual void SwapPriorities(IClassificationType firstType, IClassificationType secondType);
    public abstract virtual void BeginBatchUpdate();
    public abstract virtual void EndBatchUpdate();
    public abstract virtual bool get_IsInBatchUpdate();
    public abstract virtual void add_ClassificationFormatMappingChanged(EventHandler`1<EventArgs> value);
    public abstract virtual void remove_ClassificationFormatMappingChanged(EventHandler`1<EventArgs> value);
}
public interface Microsoft.VisualStudio.Text.Classification.IClassificationFormatMapService {
    public abstract virtual IClassificationFormatMap GetClassificationFormatMap(ITextView textView);
    public abstract virtual IClassificationFormatMap GetClassificationFormatMap(string category);
}
public interface Microsoft.VisualStudio.Text.Classification.IClassificationFormatMetadata {
    public IEnumerable`1<string> ClassificationTypeNames { get; }
    public abstract virtual IEnumerable`1<string> get_ClassificationTypeNames();
}
public interface Microsoft.VisualStudio.Text.Classification.IClassificationType {
    public IEnumerable`1<IClassificationType> BaseTypes { get; }
    public string Classification { get; }
    public abstract virtual string get_Classification();
    public abstract virtual bool IsOfType(string type);
    public abstract virtual IEnumerable`1<IClassificationType> get_BaseTypes();
}
public interface Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService {
    public abstract virtual IClassificationType GetClassificationType(string type);
    public abstract virtual IClassificationType CreateClassificationType(string type, IEnumerable`1<IClassificationType> baseTypes);
    public abstract virtual IClassificationType CreateTransientClassificationType(IEnumerable`1<IClassificationType> baseTypes);
    public abstract virtual IClassificationType CreateTransientClassificationType(IClassificationType[] baseTypes);
}
public interface Microsoft.VisualStudio.Text.Classification.IClassifier {
    public abstract virtual IList`1<ClassificationSpan> GetClassificationSpans(SnapshotSpan span);
    public abstract virtual void add_ClassificationChanged(EventHandler`1<ClassificationChangedEventArgs> value);
    public abstract virtual void remove_ClassificationChanged(EventHandler`1<ClassificationChangedEventArgs> value);
}
public interface Microsoft.VisualStudio.Text.Classification.IClassifierAggregatorService {
    public abstract virtual IClassifier GetClassifier(ITextBuffer textBuffer);
}
public interface Microsoft.VisualStudio.Text.Classification.IClassifierProvider {
    public abstract virtual IClassifier GetClassifier(ITextBuffer textBuffer);
}
public interface Microsoft.VisualStudio.Text.Classification.IEditorFormatMap {
    public bool IsInBatchUpdate { get; }
    public abstract virtual ResourceDictionary GetProperties(string key);
    public abstract virtual void AddProperties(string key, ResourceDictionary properties);
    public abstract virtual void SetProperties(string key, ResourceDictionary properties);
    public abstract virtual void BeginBatchUpdate();
    public abstract virtual void EndBatchUpdate();
    public abstract virtual bool get_IsInBatchUpdate();
    public abstract virtual void add_FormatMappingChanged(EventHandler`1<FormatItemsEventArgs> value);
    public abstract virtual void remove_FormatMappingChanged(EventHandler`1<FormatItemsEventArgs> value);
}
public interface Microsoft.VisualStudio.Text.Classification.IEditorFormatMapService {
    public abstract virtual IEditorFormatMap GetEditorFormatMap(ITextView view);
    public abstract virtual IEditorFormatMap GetEditorFormatMap(string category);
}
public interface Microsoft.VisualStudio.Text.Classification.IEditorFormatMetadata {
    public string Name { get; }
    [DefaultValueAttribute("False")]
public bool UserVisible { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_UserVisible();
}
public interface Microsoft.VisualStudio.Text.Classification.Implementation.IClassificationTypeDefinitionMetadata {
    [DefaultValueAttribute("")]
public IEnumerable`1<string> BaseDefinition { get; }
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual IEnumerable`1<string> get_BaseDefinition();
}
public interface Microsoft.VisualStudio.Text.Classification.IViewClassifierAggregatorService {
    public abstract virtual IClassifier GetClassifier(ITextView textView);
}
public abstract class Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition : EditorFormatDefinition {
    public static string BorderId;
    public static string FillId;
    public static string ZOrderId;
    protected Pen Border { get; protected set; }
    protected Brush Fill { get; protected set; }
    protected int ZOrder { get; protected set; }
    protected int get_ZOrder();
    protected void set_ZOrder(int value);
    protected Brush get_Fill();
    protected void set_Fill(Brush value);
    protected Pen get_Border();
    protected void set_Border(Pen value);
    protected virtual ResourceDictionary CreateResourceDictionaryFromDefinition();
}
public static class Microsoft.VisualStudio.Text.Classification.Priority : object {
    public static string Default;
    public static string High;
    public static string Low;
}
public class Microsoft.VisualStudio.Text.Classification.UserVisibleAttribute : SingletonBaseMetadataAttribute {
    public bool UserVisible { get; }
    public UserVisibleAttribute(bool userVisible);
    public bool get_UserVisible();
}
public class Microsoft.VisualStudio.Text.ContentTypeChangedEventArgs : TextSnapshotChangedEventArgs {
    public IContentType AfterContentType { get; }
    public IContentType BeforeContentType { get; }
    public ContentTypeChangedEventArgs(ITextSnapshot beforeSnapshot, ITextSnapshot afterSnapshot, IContentType beforeContentType, IContentType afterContentType, object editTag);
    public IContentType get_BeforeContentType();
    public IContentType get_AfterContentType();
}
public class Microsoft.VisualStudio.Text.CustomTrackToVersion : MulticastDelegate {
    public CustomTrackToVersion(object object, IntPtr method);
    public virtual Span Invoke(ITrackingSpan customSpan, ITextVersion currentVersion, ITextVersion targetVersion, Span currentSpan, object customState);
    public virtual IAsyncResult BeginInvoke(ITrackingSpan customSpan, ITextVersion currentVersion, ITextVersion targetVersion, Span currentSpan, object customState, AsyncCallback callback, object object);
    public virtual Span EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.Text.Differencing.ContinueProcessingPredicate`1 : MulticastDelegate {
    public ContinueProcessingPredicate`1(object object, IntPtr method);
    public virtual bool Invoke(int leftIndex, IList`1<T> leftSequence, int longestMatchSoFar);
    public virtual IAsyncResult BeginInvoke(int leftIndex, IList`1<T> leftSequence, int longestMatchSoFar, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.Text.Differencing.DetermineLocalityCallback : MulticastDelegate {
    public DetermineLocalityCallback(object object, IntPtr method);
    public virtual Nullable`1<int> Invoke(StringDifferenceTypes differenceType, IList`1<string> leftStrings, IList`1<string> rightStrings);
    public virtual IAsyncResult BeginInvoke(StringDifferenceTypes differenceType, IList`1<string> leftStrings, IList`1<string> rightStrings, AsyncCallback callback, object object);
    public virtual Nullable`1<int> EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.Text.Differencing.Difference : object {
    public Match After { get; }
    public Match Before { get; }
    public DifferenceType DifferenceType { get; }
    public Span Left { get; }
    public Span Right { get; }
    public Difference(Span left, Span right, Match before, Match after);
    public Span get_Left();
    public Span get_Right();
    public Match get_Before();
    public Match get_After();
    public DifferenceType get_DifferenceType();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Microsoft.VisualStudio.Text.Differencing.DifferenceType : Enum {
    public int value__;
    public static DifferenceType Add;
    public static DifferenceType Change;
    public static DifferenceType Remove;
}
public interface Microsoft.VisualStudio.Text.Differencing.IDifferenceCollection`1 {
    public IList`1<Difference> Differences { get; }
    public IList`1<T> LeftSequence { get; }
    public IEnumerable`1<Tuple`2<int, int>> MatchSequence { get; }
    public IList`1<T> RightSequence { get; }
    public abstract virtual IEnumerable`1<Tuple`2<int, int>> get_MatchSequence();
    public abstract virtual IList`1<T> get_LeftSequence();
    public abstract virtual IList`1<T> get_RightSequence();
    public abstract virtual IList`1<Difference> get_Differences();
}
public interface Microsoft.VisualStudio.Text.Differencing.IDifferenceService {
    public abstract virtual IDifferenceCollection`1<T> DifferenceSequences(IList`1<T> left, IList`1<T> right);
    public abstract virtual IDifferenceCollection`1<T> DifferenceSequences(IList`1<T> left, IList`1<T> right, ContinueProcessingPredicate`1<T> continueProcessingPredicate);
}
public interface Microsoft.VisualStudio.Text.Differencing.IHierarchicalDifferenceCollection {
    public ITokenizedStringList LeftDecomposition { get; }
    public ITokenizedStringList RightDecomposition { get; }
    public abstract virtual ITokenizedStringList get_LeftDecomposition();
    public abstract virtual ITokenizedStringList get_RightDecomposition();
    public abstract virtual IHierarchicalDifferenceCollection GetContainedDifferences(int index);
    public abstract virtual bool HasContainedDifferences(int index);
}
public interface Microsoft.VisualStudio.Text.Differencing.IHierarchicalStringDifferenceService {
    public abstract virtual IHierarchicalDifferenceCollection DiffStrings(string left, string right, StringDifferenceOptions differenceOptions);
    public abstract virtual IHierarchicalDifferenceCollection DiffSnapshotSpans(SnapshotSpan left, SnapshotSpan right, StringDifferenceOptions differenceOptions);
}
public interface Microsoft.VisualStudio.Text.Differencing.ITokenizedStringList {
    public string Original { get; }
    public abstract virtual string get_Original();
    public abstract virtual Span GetElementInOriginal(int index);
    public abstract virtual Span GetSpanInOriginal(Span span);
}
public class Microsoft.VisualStudio.Text.Differencing.Match : object {
    public Span Left { get; }
    public int Length { get; }
    public Span Right { get; }
    public Match(Span left, Span right);
    public Span get_Left();
    public Span get_Right();
    public int get_Length();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual IEnumerator`1<Tuple`2<int, int>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions : ValueType {
    private int __Asmmeta_Private_Field;
    public ContinueProcessingPredicate`1<string> ContinueProcessingPredicate { get; public set; }
    public DetermineLocalityCallback DetermineLocalityCallback { get; public set; }
    public StringDifferenceTypes DifferenceType { get; public set; }
    public bool IgnoreTrimWhiteSpace { get; public set; }
    public int Locality { get; public set; }
    public WordSplitBehavior WordSplitBehavior { get; public set; }
    public StringDifferenceOptions(StringDifferenceTypes differenceType, int locality, bool ignoreTrimWhiteSpace);
    public StringDifferenceOptions(StringDifferenceOptions other);
    public StringDifferenceTypes get_DifferenceType();
    public void set_DifferenceType(StringDifferenceTypes value);
    public int get_Locality();
    public void set_Locality(int value);
    public bool get_IgnoreTrimWhiteSpace();
    public void set_IgnoreTrimWhiteSpace(bool value);
    public WordSplitBehavior get_WordSplitBehavior();
    public void set_WordSplitBehavior(WordSplitBehavior value);
    public DetermineLocalityCallback get_DetermineLocalityCallback();
    public void set_DetermineLocalityCallback(DetermineLocalityCallback value);
    public ContinueProcessingPredicate`1<string> get_ContinueProcessingPredicate();
    public void set_ContinueProcessingPredicate(ContinueProcessingPredicate`1<string> value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(StringDifferenceOptions left, StringDifferenceOptions right);
    public static bool op_Inequality(StringDifferenceOptions left, StringDifferenceOptions right);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Text.Differencing.StringDifferenceTypes : Enum {
    public int value__;
    public static StringDifferenceTypes Character;
    public static StringDifferenceTypes Line;
    public static StringDifferenceTypes Word;
}
public enum Microsoft.VisualStudio.Text.Differencing.WordSplitBehavior : Enum {
    public int value__;
    public static WordSplitBehavior CharacterClass;
    public static WordSplitBehavior Default;
    public static WordSplitBehavior WhiteSpace;
    public static WordSplitBehavior WhiteSpaceAndPunctuation;
}
public class Microsoft.VisualStudio.Text.Document.ChangeTag : object {
    public ChangeTypes ChangeTypes { get; }
    public ChangeTag(ChangeTypes type);
    public ChangeTypes get_ChangeTypes();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Text.Document.ChangeTypes : Enum {
    public int value__;
    public static ChangeTypes ChangedSinceOpened;
    public static ChangeTypes ChangedSinceSaved;
    public static ChangeTypes None;
}
public class Microsoft.VisualStudio.Text.DynamicReadOnlyRegionQuery : MulticastDelegate {
    public DynamicReadOnlyRegionQuery(object object, IntPtr method);
    public virtual bool Invoke(bool isEdit);
    public virtual IAsyncResult BeginInvoke(bool isEdit, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public enum Microsoft.VisualStudio.Text.EdgeInsertionMode : Enum {
    public int value__;
    public static EdgeInsertionMode Allow;
    public static EdgeInsertionMode Deny;
}
public class Microsoft.VisualStudio.Text.EditOptions : ValueType {
    public static EditOptions None;
    public static EditOptions DefaultMinimalChange;
    private int __Asmmeta_Private_Field;
    public bool ComputeMinimalChange { get; }
    public StringDifferenceOptions DifferenceOptions { get; }
    public EditOptions(StringDifferenceOptions differenceOptions);
    public EditOptions(bool computeMinimalChange, StringDifferenceOptions differenceOptions);
    public bool get_ComputeMinimalChange();
    public StringDifferenceOptions get_DifferenceOptions();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(EditOptions left, EditOptions right);
    public static bool op_Inequality(EditOptions left, EditOptions right);
}
public class Microsoft.VisualStudio.Text.Editor.AdornmentLayerDefinition : object {
}
public enum Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior : Enum {
    public int value__;
    public static AdornmentPositioningBehavior OwnerControlled;
    public static AdornmentPositioningBehavior TextRelative;
    public static AdornmentPositioningBehavior ViewportRelative;
}
public class Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback : MulticastDelegate {
    public AdornmentRemovedCallback(object object, IntPtr method);
    public virtual void Invoke(object tag, UIElement element);
    public virtual IAsyncResult BeginInvoke(object tag, UIElement element, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.Text.Editor.AppearanceCategoryOption : WpfViewOptionDefinition`1<string> {
    public string Default { get; }
    public EditorOptionKey`1<string> Key { get; }
    public virtual string get_Default();
    public virtual EditorOptionKey`1<string> get_Key();
}
public class Microsoft.VisualStudio.Text.Editor.AutoScrollEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public class Microsoft.VisualStudio.Text.Editor.BackgroundBrushChangedEventArgs : EventArgs {
    public Brush NewBackgroundBrush { get; }
    public BackgroundBrushChangedEventArgs(Brush newBackgroundBrush);
    public Brush get_NewBackgroundBrush();
}
public abstract class Microsoft.VisualStudio.Text.Editor.Caret : DisplayTextPoint {
    [EditorBrowsableAttribute("2")]
public ITextCaret AdvancedCaret { get; }
    public abstract virtual void MoveToNextCharacter(bool extendSelection);
    public abstract virtual void MoveToPreviousCharacter(bool extendSelection);
    public abstract virtual void MoveToBeginningOfPreviousLine(bool extendSelection);
    public abstract virtual void MoveToBeginningOfNextLine(bool extendSelection);
    public abstract virtual void MoveToBeginningOfPreviousViewLine(bool extendSelection);
    public abstract virtual void MoveToBeginningOfNextViewLine(bool extendSelection);
    public abstract virtual void MoveToPreviousLine(bool extendSelection);
    public abstract virtual void MoveToNextLine(bool extendSelection);
    public abstract virtual void MovePageUp();
    public abstract virtual void MovePageDown();
    public abstract virtual void MovePageUp(bool extendSelection);
    public abstract virtual void MovePageDown(bool extendSelection);
    public abstract virtual void MoveToEndOfLine(bool extendSelection);
    public abstract virtual void MoveToStartOfLine(bool extendSelection);
    public abstract virtual void MoveToEndOfViewLine(bool extendSelection);
    public abstract virtual void MoveToStartOfViewLine(bool extendSelection);
    public abstract virtual void MoveTo(int position, bool extendSelection);
    public abstract virtual void MoveToLine(int lineNumber, bool extendSelection);
    public abstract virtual void MoveToLine(int lineNumber, int offset, bool extendSelection);
    public abstract virtual void MoveToStartOfDocument(bool extendSelection);
    public abstract virtual void MoveToEndOfDocument(bool extendSelection);
    public abstract virtual void MoveToNextWord(bool extendSelection);
    public abstract virtual void MoveToPreviousWord(bool extendSelection);
    public abstract virtual void EnsureVisible();
    public abstract virtual ITextCaret get_AdvancedCaret();
}
public class Microsoft.VisualStudio.Text.Editor.CaretPosition : ValueType {
    private int __Asmmeta_Private_Field;
    public PositionAffinity Affinity { get; }
    public SnapshotPoint BufferPosition { get; }
    public IMappingPoint Point { get; }
    public VirtualSnapshotPoint VirtualBufferPosition { get; }
    public int VirtualSpaces { get; }
    public CaretPosition(VirtualSnapshotPoint bufferPosition, IMappingPoint mappingPoint, PositionAffinity caretAffinity);
    public SnapshotPoint get_BufferPosition();
    public IMappingPoint get_Point();
    public PositionAffinity get_Affinity();
    public VirtualSnapshotPoint get_VirtualBufferPosition();
    public int get_VirtualSpaces();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(CaretPosition caretPosition1, CaretPosition caretPosition2);
    public static bool op_Inequality(CaretPosition caretPosition1, CaretPosition caretPosition2);
}
public class Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs : EventArgs {
    public CaretPosition NewPosition { get; }
    public CaretPosition OldPosition { get; }
    public ITextView TextView { get; }
    public CaretPositionChangedEventArgs(ITextView textView, CaretPosition oldPosition, CaretPosition newPosition);
    public ITextView get_TextView();
    public CaretPosition get_OldPosition();
    public CaretPosition get_NewPosition();
}
public class Microsoft.VisualStudio.Text.Editor.ChangeTrackingMarginEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public abstract class Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl : Control {
    public static DependencyProperty IsHighlightedProperty;
    public bool IsHighlighted { get; public set; }
    public static void SetIsHighlighted(CollapseHintAdornmentControl control, bool isExpanded);
    public static bool GetIsHighlighted(CollapseHintAdornmentControl control);
    public bool get_IsHighlighted();
    public void set_IsHighlighted(bool value);
}
public enum Microsoft.VisualStudio.Text.Editor.ConnectionReason : Enum {
    public int value__;
    public static ConnectionReason BufferGraphChange;
    public static ConnectionReason ContentTypeChange;
    public static ConnectionReason TextViewLifetime;
}
public class Microsoft.VisualStudio.Text.Editor.ConvertTabsToSpaces : EditorOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public class Microsoft.VisualStudio.Text.Editor.CutOrCopyBlankLineIfNoSelection : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public static class Microsoft.VisualStudio.Text.Editor.DefaultOptions : object {
    public static EditorOptionKey`1<bool> ConvertTabsToSpacesOptionId;
    public static EditorOptionKey`1<int> IndentSizeOptionId;
    public static EditorOptionKey`1<string> NewLineCharacterOptionId;
    public static EditorOptionKey`1<bool> ReplicateNewLineCharacterOptionId;
    public static EditorOptionKey`1<int> TabSizeOptionId;
}
public static class Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions : object {
    public static EditorOptionKey`1<bool> ChangeTrackingId;
    public static EditorOptionKey`1<bool> GlyphMarginId;
    public static EditorOptionKey`1<bool> HorizontalScrollBarId;
    public static EditorOptionKey`1<bool> LineNumberMarginId;
    public static EditorOptionKey`1<bool> OutliningMarginId;
    public static EditorOptionKey`1<bool> SelectionMarginId;
    public static EditorOptionKey`1<bool> VerticalScrollBarId;
    public static EditorOptionKey`1<bool> ZoomControlId;
}
public static class Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions : object {
    public static EditorOptionKey`1<bool> AutoScrollId;
    public static EditorOptionKey`1<bool> CutOrCopyBlankLineIfNoSelectionId;
    public static EditorOptionKey`1<bool> DisplayUrlsAsHyperlinksId;
    public static EditorOptionKey`1<bool> DragDropEditingId;
    public static EditorOptionKey`1<bool> IsViewportLeftClippedId;
    public static EditorOptionKey`1<bool> OutliningUndoOptionId;
    public static EditorOptionKey`1<bool> OverwriteModeId;
    public static EditorOptionKey`1<bool> ProduceScreenReaderFriendlyTextId;
    public static EditorOptionKey`1<bool> UseVirtualSpaceId;
    public static EditorOptionKey`1<bool> UseVisibleWhitespaceId;
    public static EditorOptionKey`1<bool> ViewProhibitUserInputId;
    public static EditorOptionKey`1<WordWrapStyles> WordWrapStyleId;
}
public static class Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions : object {
    public static EditorOptionKey`1<string> AppearanceCategory;
    public static EditorOptionKey`1<bool> EnableHighlightCurrentLineId;
    public static EditorOptionKey`1<bool> EnableMouseWheelZoomId;
    public static EditorOptionKey`1<bool> EnableSimpleGraphicsId;
}
public abstract class Microsoft.VisualStudio.Text.Editor.DisplayTextPoint : TextPoint {
    public ITextViewLine AdvancedTextViewLine { get; }
    public int DisplayColumn { get; }
    public int EndOfViewLine { get; }
    public bool IsVisible { get; }
    public int StartOfViewLine { get; }
    public TextView TextView { get; }
    public abstract virtual TextView get_TextView();
    public abstract virtual ITextViewLine get_AdvancedTextViewLine();
    public abstract virtual int get_StartOfViewLine();
    public abstract virtual int get_EndOfViewLine();
    public abstract virtual void MoveToEndOfViewLine();
    public abstract virtual void MoveToStartOfViewLine();
    public abstract virtual void MoveToBeginningOfNextViewLine();
    public abstract virtual void MoveToBeginningOfPreviousViewLine();
    [EditorBrowsableAttribute("2")]
public abstract virtual DisplayTextPoint GetFirstNonWhiteSpaceCharacterOnViewLine();
    public abstract virtual int get_DisplayColumn();
    public abstract virtual bool get_IsVisible();
    public DisplayTextPoint Clone();
    public abstract virtual DisplayTextRange GetDisplayTextRange(DisplayTextPoint otherPoint);
    public abstract virtual DisplayTextRange GetDisplayTextRange(int otherPosition);
    protected sealed virtual TextPoint CloneInternal();
    protected abstract virtual DisplayTextPoint CloneDisplayTextPointInternal();
}
public abstract class Microsoft.VisualStudio.Text.Editor.DisplayTextRange : TextRange {
    public TextView TextView { get; }
    public VisibilityState Visibility { get; }
    public abstract virtual TextView get_TextView();
    public DisplayTextRange Clone();
    public abstract virtual DisplayTextPoint GetDisplayStartPoint();
    public abstract virtual DisplayTextPoint GetDisplayEndPoint();
    public abstract virtual VisibilityState get_Visibility();
    protected virtual TextRange CloneInternal();
    protected abstract virtual DisplayTextRange CloneDisplayTextRangeInternal();
    protected abstract virtual IEnumerator`1<DisplayTextPoint> GetDisplayPointEnumeratorInternal();
    public sealed virtual IEnumerator`1<DisplayTextPoint> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.VisualStudio.Text.Editor.DisplayUrlsAsHyperlinks : EditorOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public class Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo : object {
    public DragDropEffects AllowedEffects { get; }
    public IDataObject Data { get; }
    public bool IsInternal { get; }
    public DragDropKeyStates KeyStates { get; }
    public Point Location { get; }
    public object Source { get; }
    public VirtualSnapshotPoint VirtualBufferPosition { get; }
    public DragDropInfo(Point location, DragDropKeyStates keyStates, IDataObject data, bool isInternal, object source, DragDropEffects allowedEffects, VirtualSnapshotPoint bufferPosition);
    public Point get_Location();
    public DragDropKeyStates get_KeyStates();
    public IDataObject get_Data();
    public bool get_IsInternal();
    public object get_Source();
    public VirtualSnapshotPoint get_VirtualBufferPosition();
    public DragDropEffects get_AllowedEffects();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(DragDropInfo first, DragDropInfo second);
    public static bool op_Inequality(DragDropInfo first, DragDropInfo second);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects : Enum {
    public int value__;
    public static DragDropPointerEffects All;
    public static DragDropPointerEffects Copy;
    public static DragDropPointerEffects Link;
    public static DragDropPointerEffects Move;
    public static DragDropPointerEffects None;
    public static DragDropPointerEffects Scroll;
    public static DragDropPointerEffects Track;
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute : Attribute {
    public string DropFormats { get; }
    public DropFormatAttribute(string dropFormat);
    public string get_DropFormats();
}
public abstract class Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase : object {
    protected IEditorOperations EditorOperations { get; }
    protected IWpfTextView TextView { get; }
    protected DropHandlerBase(IWpfTextView wpfTextView, IEditorOperations editorOperations);
    public virtual DragDropPointerEffects HandleDragStarted(DragDropInfo dragDropInfo);
    public virtual DragDropPointerEffects HandleDraggingOver(DragDropInfo dragDropInfo);
    public virtual DragDropPointerEffects HandleDataDropped(DragDropInfo dragDropInfo);
    public virtual void HandleDragCanceled();
    public virtual bool IsDropEnabled(DragDropInfo dragDropInfo);
    protected IWpfTextView get_TextView();
    protected IEditorOperations get_EditorOperations();
    protected abstract virtual string ExtractText(DragDropInfo dragDropInfo);
    protected abstract virtual void PerformPreEditActions(DragDropInfo dragDropInfo);
    protected abstract virtual void PerformPostEditActions(DragDropInfo dragDropInfo, bool successfulEdit);
    protected virtual void SelectText(SnapshotPoint insertionPoint, int dataLength, DragDropInfo dragDropInfo, bool reverse);
    protected virtual DragDropPointerEffects GetDragDropEffect(DragDropInfo dragDropInfo);
    protected virtual bool InsertText(VirtualSnapshotPoint position, string data);
    protected virtual bool MoveText(VirtualSnapshotPoint position, IList`1<ITrackingSpan> selectionSpans, string data);
    protected bool DeleteSpans(IList`1<ITrackingSpan> spans);
}
public interface Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler {
    public abstract virtual DragDropPointerEffects HandleDragStarted(DragDropInfo dragDropInfo);
    public abstract virtual DragDropPointerEffects HandleDraggingOver(DragDropInfo dragDropInfo);
    public abstract virtual DragDropPointerEffects HandleDataDropped(DragDropInfo dragDropInfo);
    public abstract virtual bool IsDropEnabled(DragDropInfo dragDropInfo);
    public abstract virtual void HandleDragCanceled();
}
public interface Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandlerProvider {
    public abstract virtual IDropHandler GetAssociatedDropHandler(IWpfTextView wpfTextView);
}
public interface Microsoft.VisualStudio.Text.Editor.DragDrop.Implementation.IDropHandlerMetadata {
    public IEnumerable`1<string> DropFormats { get; }
    public abstract virtual IEnumerable`1<string> get_DropFormats();
}
public class Microsoft.VisualStudio.Text.Editor.DragDropEditing : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public class Microsoft.VisualStudio.Text.Editor.EditorOptionChangedEventArgs : EventArgs {
    public string OptionId { get; }
    public EditorOptionChangedEventArgs(string optionId);
    public string get_OptionId();
}
public abstract class Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition : object {
    public object DefaultValue { get; }
    public string Name { get; }
    public Type ValueType { get; }
    public abstract virtual object get_DefaultValue();
    public abstract virtual Type get_ValueType();
    public abstract virtual string get_Name();
    public virtual bool IsApplicableToScope(IPropertyOwner scope);
    public virtual bool IsValid(Object& proposedValue);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition`1 : EditorOptionDefinition {
    public T Default { get; }
    public object DefaultValue { get; }
    public EditorOptionKey`1<T> Key { get; }
    public string Name { get; }
    public Type ValueType { get; }
    public sealed virtual Type get_ValueType();
    public sealed virtual string get_Name();
    public sealed virtual object get_DefaultValue();
    public sealed virtual bool IsValid(Object& proposedValue);
    public abstract virtual EditorOptionKey`1<T> get_Key();
    public virtual T get_Default();
    public virtual bool IsValid(T& proposedValue);
}
public class Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1 : ValueType {
    private int __Asmmeta_Private_Field;
    public string Name { get; }
    public EditorOptionKey`1(string name);
    public string get_Name();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(EditorOptionKey`1<T> left, EditorOptionKey`1<T> right);
    public static bool op_Inequality(EditorOptionKey`1<T> left, EditorOptionKey`1<T> right);
}
public static class Microsoft.VisualStudio.Text.Editor.EditorPrimitiveIds : object {
    public static string BufferPrimitiveId;
    public static string CaretPrimitiveId;
    public static string SelectionPrimitiveId;
    public static string ViewPrimitiveId;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions : Enum {
    public int value__;
    public static EnsureSpanVisibleOptions AlwaysCenter;
    public static EnsureSpanVisibleOptions MinimumScroll;
    public static EnsureSpanVisibleOptions None;
    public static EnsureSpanVisibleOptions ShowStart;
}
public class Microsoft.VisualStudio.Text.Editor.GlyphMarginEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[AttributeUsageAttribute("452")]
public class Microsoft.VisualStudio.Text.Editor.GridCellLengthAttribute : SingletonBaseMetadataAttribute {
    public double GridCellLength { get; }
    public GridCellLengthAttribute(double cellLength);
    public double get_GridCellLength();
}
[AttributeUsageAttribute("452")]
public class Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute : SingletonBaseMetadataAttribute {
    public GridUnitType GridUnitType { get; }
    public GridUnitTypeAttribute(GridUnitType gridUnitType);
    public GridUnitType get_GridUnitType();
}
public class Microsoft.VisualStudio.Text.Editor.HighlightCurrentLineOption : WpfViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public class Microsoft.VisualStudio.Text.Editor.HorizontalScrollBarEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public enum Microsoft.VisualStudio.Text.Editor.HowToShow : Enum {
    public int value__;
    public static HowToShow AsIs;
    public static HowToShow Centered;
    public static HowToShow OnFirstLineOfView;
}
public interface Microsoft.VisualStudio.Text.Editor.IAdornmentLayer {
    public ReadOnlyCollection`1<IAdornmentLayerElement> Elements { get; }
    public bool IsEmpty { get; }
    public double Opacity { get; public set; }
    public IWpfTextView TextView { get; }
    public abstract virtual IWpfTextView get_TextView();
    public abstract virtual bool AddAdornment(AdornmentPositioningBehavior behavior, Nullable`1<SnapshotSpan> visualSpan, object tag, UIElement adornment, AdornmentRemovedCallback removedCallback);
    public abstract virtual bool AddAdornment(SnapshotSpan visualSpan, object tag, UIElement adornment);
    public abstract virtual void RemoveAdornment(UIElement adornment);
    public abstract virtual void RemoveAdornmentsByTag(object tag);
    public abstract virtual void RemoveAdornmentsByVisualSpan(SnapshotSpan visualSpan);
    public abstract virtual void RemoveMatchingAdornments(Predicate`1<IAdornmentLayerElement> match);
    public abstract virtual void RemoveMatchingAdornments(SnapshotSpan visualSpan, Predicate`1<IAdornmentLayerElement> match);
    public abstract virtual void RemoveAllAdornments();
    public abstract virtual bool get_IsEmpty();
    public abstract virtual double get_Opacity();
    public abstract virtual void set_Opacity(double value);
    public abstract virtual ReadOnlyCollection`1<IAdornmentLayerElement> get_Elements();
}
public interface Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement {
    public UIElement Adornment { get; }
    public AdornmentPositioningBehavior Behavior { get; }
    public AdornmentRemovedCallback RemovedCallback { get; }
    public object Tag { get; }
    public Nullable`1<SnapshotSpan> VisualSpan { get; }
    public abstract virtual Nullable`1<SnapshotSpan> get_VisualSpan();
    public abstract virtual AdornmentPositioningBehavior get_Behavior();
    public abstract virtual UIElement get_Adornment();
    public abstract virtual object get_Tag();
    public abstract virtual AdornmentRemovedCallback get_RemovedCallback();
}
public interface Microsoft.VisualStudio.Text.Editor.IBufferPrimitives {
    public TextBuffer Buffer { get; }
    public abstract virtual TextBuffer get_Buffer();
}
public interface Microsoft.VisualStudio.Text.Editor.IBufferPrimitivesFactoryService {
    public abstract virtual TextBuffer CreateTextBuffer(ITextBuffer textBuffer);
    public abstract virtual TextPoint CreateTextPoint(TextBuffer textBuffer, int position);
    public abstract virtual TextRange CreateTextRange(TextBuffer textBuffer, TextPoint startPoint, TextPoint endPoint);
}
public interface Microsoft.VisualStudio.Text.Editor.IEditorOptions {
    public IEditorOptions GlobalOptions { get; }
    public IEditorOptions Parent { get; public set; }
    public IEnumerable`1<EditorOptionDefinition> SupportedOptions { get; }
    public abstract virtual T GetOptionValue(string optionId);
    public abstract virtual T GetOptionValue(EditorOptionKey`1<T> key);
    public abstract virtual object GetOptionValue(string optionId);
    public abstract virtual void SetOptionValue(string optionId, object value);
    public abstract virtual void SetOptionValue(EditorOptionKey`1<T> key, T value);
    public abstract virtual bool IsOptionDefined(string optionId, bool localScopeOnly);
    public abstract virtual bool IsOptionDefined(EditorOptionKey`1<T> key, bool localScopeOnly);
    public abstract virtual bool ClearOptionValue(string optionId);
    public abstract virtual bool ClearOptionValue(EditorOptionKey`1<T> key);
    public abstract virtual IEnumerable`1<EditorOptionDefinition> get_SupportedOptions();
    public abstract virtual IEditorOptions get_GlobalOptions();
    public abstract virtual IEditorOptions get_Parent();
    public abstract virtual void set_Parent(IEditorOptions value);
    public abstract virtual void add_OptionChanged(EventHandler`1<EditorOptionChangedEventArgs> value);
    public abstract virtual void remove_OptionChanged(EventHandler`1<EditorOptionChangedEventArgs> value);
}
public interface Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService {
    public IEditorOptions GlobalOptions { get; }
    public abstract virtual IEditorOptions GetOptions(IPropertyOwner scope);
    public abstract virtual IEditorOptions CreateOptions();
    public abstract virtual IEditorOptions get_GlobalOptions();
}
public interface Microsoft.VisualStudio.Text.Editor.IEditorPrimitivesFactoryService {
    public abstract virtual IViewPrimitives GetViewPrimitives(ITextView textView);
    public abstract virtual IBufferPrimitives GetBufferPrimitives(ITextBuffer textBuffer);
}
public interface Microsoft.VisualStudio.Text.Editor.IGlyphFactory {
    public abstract virtual UIElement GenerateGlyph(IWpfTextViewLine line, IGlyphTag tag);
}
public interface Microsoft.VisualStudio.Text.Editor.IGlyphFactoryProvider {
    public abstract virtual IGlyphFactory GetGlyphFactory(IWpfTextView view, IWpfTextViewMargin margin);
}
public interface Microsoft.VisualStudio.Text.Editor.IGlyphMouseProcessorProvider {
    public abstract virtual IMouseProcessor GetAssociatedMouseProcessor(IWpfTextViewHost wpfTextViewHost, IWpfTextViewMargin margin);
}
public interface Microsoft.VisualStudio.Text.Editor.IGlyphTag {
}
public interface Microsoft.VisualStudio.Text.Editor.IKeyProcessorProvider {
    public abstract virtual KeyProcessor GetAssociatedProcessor(IWpfTextView wpfTextView);
}
public class Microsoft.VisualStudio.Text.Editor.ImeTextComposition : TextComposition {
    public ImeTextComposition(InputManager inputManager, IInputElement source, string resultText);
}
public interface Microsoft.VisualStudio.Text.Editor.IMouseProcessor {
    public abstract virtual void PreprocessMouseLeftButtonDown(MouseButtonEventArgs e);
    public abstract virtual void PostprocessMouseLeftButtonDown(MouseButtonEventArgs e);
    public abstract virtual void PreprocessMouseRightButtonDown(MouseButtonEventArgs e);
    public abstract virtual void PostprocessMouseRightButtonDown(MouseButtonEventArgs e);
    public abstract virtual void PreprocessMouseLeftButtonUp(MouseButtonEventArgs e);
    public abstract virtual void PostprocessMouseLeftButtonUp(MouseButtonEventArgs e);
    public abstract virtual void PreprocessMouseRightButtonUp(MouseButtonEventArgs e);
    public abstract virtual void PostprocessMouseRightButtonUp(MouseButtonEventArgs e);
    public abstract virtual void PreprocessMouseUp(MouseButtonEventArgs e);
    public abstract virtual void PostprocessMouseUp(MouseButtonEventArgs e);
    public abstract virtual void PreprocessMouseDown(MouseButtonEventArgs e);
    public abstract virtual void PostprocessMouseDown(MouseButtonEventArgs e);
    public abstract virtual void PreprocessMouseMove(MouseEventArgs e);
    public abstract virtual void PostprocessMouseMove(MouseEventArgs e);
    public abstract virtual void PreprocessMouseWheel(MouseWheelEventArgs e);
    public abstract virtual void PostprocessMouseWheel(MouseWheelEventArgs e);
    public abstract virtual void PreprocessMouseEnter(MouseEventArgs e);
    public abstract virtual void PostprocessMouseEnter(MouseEventArgs e);
    public abstract virtual void PreprocessMouseLeave(MouseEventArgs e);
    public abstract virtual void PostprocessMouseLeave(MouseEventArgs e);
    public abstract virtual void PreprocessDragLeave(DragEventArgs e);
    public abstract virtual void PostprocessDragLeave(DragEventArgs e);
    public abstract virtual void PreprocessDragOver(DragEventArgs e);
    public abstract virtual void PostprocessDragOver(DragEventArgs e);
    public abstract virtual void PreprocessDragEnter(DragEventArgs e);
    public abstract virtual void PostprocessDragEnter(DragEventArgs e);
    public abstract virtual void PreprocessDrop(DragEventArgs e);
    public abstract virtual void PostprocessDrop(DragEventArgs e);
    public abstract virtual void PreprocessQueryContinueDrag(QueryContinueDragEventArgs e);
    public abstract virtual void PostprocessQueryContinueDrag(QueryContinueDragEventArgs e);
    public abstract virtual void PreprocessGiveFeedback(GiveFeedbackEventArgs e);
    public abstract virtual void PostprocessGiveFeedback(GiveFeedbackEventArgs e);
}
public interface Microsoft.VisualStudio.Text.Editor.IMouseProcessorProvider {
    public abstract virtual IMouseProcessor GetAssociatedProcessor(IWpfTextView wpfTextView);
}
public class Microsoft.VisualStudio.Text.Editor.Implementation.HighlightCurrentLineBrush : WpfViewOptionDefinition`1<Brush> {
    public Brush Default { get; }
    public EditorOptionKey`1<Brush> Key { get; }
    public virtual Brush get_Default();
    public virtual EditorOptionKey`1<Brush> get_Key();
    public virtual bool IsValid(Brush& proposedValue);
}
public interface Microsoft.VisualStudio.Text.Editor.Implementation.IGlyphMetadata {
}
public class Microsoft.VisualStudio.Text.Editor.Implementation.ImeCompositionWindowBottomOffset : EditorOptionDefinition`1<double> {
    public static EditorOptionKey`1<double> KeyId;
    public double Default { get; }
    public EditorOptionKey`1<double> Key { get; }
    public virtual double get_Default();
    public virtual EditorOptionKey`1<double> get_Key();
}
public class Microsoft.VisualStudio.Text.Editor.Implementation.ImeCompositionWindowFont : EditorOptionDefinition`1<string> {
    public static EditorOptionKey`1<string> KeyId;
    public string Default { get; }
    public EditorOptionKey`1<string> Key { get; }
    public virtual string get_Default();
    public virtual EditorOptionKey`1<string> get_Key();
}
public class Microsoft.VisualStudio.Text.Editor.Implementation.ImeCompositionWindowHeightOffset : EditorOptionDefinition`1<double> {
    public static EditorOptionKey`1<double> KeyId;
    public double Default { get; }
    public EditorOptionKey`1<double> Key { get; }
    public virtual double get_Default();
    public virtual EditorOptionKey`1<double> get_Key();
}
public class Microsoft.VisualStudio.Text.Editor.Implementation.ImeCompositionWindowTopOffset : EditorOptionDefinition`1<double> {
    public static EditorOptionKey`1<double> KeyId;
    public double Default { get; }
    public EditorOptionKey`1<double> Key { get; }
    public virtual double get_Default();
    public virtual EditorOptionKey`1<double> get_Key();
}
public interface Microsoft.VisualStudio.Text.Editor.Implementation.ISelectionPainter {
    public abstract virtual void Clear();
    public abstract virtual void Activate();
    public abstract virtual void Update(bool selectionChanged);
}
public interface Microsoft.VisualStudio.Text.Editor.Implementation.IThumbnailSupport {
    public bool RemoveVisualsWhenHidden { get; public set; }
    public abstract virtual bool get_RemoveVisualsWhenHidden();
    public abstract virtual void set_RemoveVisualsWhenHidden(bool value);
}
public class Microsoft.VisualStudio.Text.Editor.Implementation.SelectionAdornment : FrameworkElement {
    protected int VisualChildrenCount { get; }
    public SelectionAdornment(Pen borderPen, Brush fillBrush, Geometry drawingPath);
    protected virtual Visual GetVisualChild(int index);
    protected virtual int get_VisualChildrenCount();
}
public class Microsoft.VisualStudio.Text.Editor.Implementation.TextViewLineCollection : object {
    public int Count { get; }
    public SnapshotSpan FormattedSpan { get; }
    public bool IsReadOnly { get; }
    public bool IsValid { get; }
    private ITextViewLine Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.FirstVisibleLine { get; }
    private ITextViewLine Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.LastVisibleLine { get; }
    private IWpfTextViewLine Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.FirstVisibleLine { get; }
    private IWpfTextViewLine Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.Item { get; }
    private IWpfTextViewLine Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.LastVisibleLine { get; }
    private ITextViewLine System.Collections.Generic.IList<Microsoft.VisualStudio.Text.Formatting.ITextViewLine>.Item { get; private set; }
    public ReadOnlyCollection`1<IWpfTextViewLine> WpfTextViewLines { get; }
    public TextViewLineCollection(ITextView textView, IList`1<IFormattedLine> textLines);
    public void Invalidate();
    public sealed virtual ReadOnlyCollection`1<IWpfTextViewLine> get_WpfTextViewLines();
    private sealed virtual override IWpfTextViewLine Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.get_FirstVisibleLine();
    private sealed virtual override IWpfTextViewLine Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.get_LastVisibleLine();
    public sealed virtual Geometry GetTextMarkerGeometry(SnapshotSpan bufferSpan, bool clipToBounds, Thickness padding);
    public sealed virtual Geometry GetTextMarkerGeometry(SnapshotSpan bufferSpan);
    public sealed virtual Geometry GetLineMarkerGeometry(SnapshotSpan bufferSpan, bool clipToBounds, Thickness padding);
    public sealed virtual Geometry GetLineMarkerGeometry(SnapshotSpan bufferSpan);
    public sealed virtual Geometry GetMarkerGeometry(SnapshotSpan bufferSpan);
    public sealed virtual Geometry GetMarkerGeometry(SnapshotSpan bufferSpan, bool clipToBounds, Thickness padding);
    private sealed virtual override IWpfTextViewLine Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.get_Item(int index);
    public sealed virtual bool ContainsBufferPosition(SnapshotPoint bufferPosition);
    public sealed virtual bool IntersectsBufferSpan(SnapshotSpan bufferSpan);
    private sealed virtual override ITextViewLine Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.get_FirstVisibleLine();
    public sealed virtual TextBounds GetCharacterBounds(SnapshotPoint bufferPosition);
    public sealed virtual int GetIndexOfTextLine(ITextViewLine textLine);
    public sealed virtual Collection`1<TextBounds> GetNormalizedTextBounds(SnapshotSpan bufferSpan);
    public sealed virtual SnapshotSpan GetTextElementSpan(SnapshotPoint bufferPosition);
    public sealed virtual ITextViewLine GetTextViewLineContainingBufferPosition(SnapshotPoint bufferPosition);
    private sealed virtual override IWpfTextViewLine Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetTextViewLineContainingBufferPosition(SnapshotPoint bufferPosition);
    public sealed virtual ITextViewLine GetTextViewLineContainingYCoordinate(double y);
    public sealed virtual Collection`1<ITextViewLine> GetTextViewLinesIntersectingSpan(SnapshotSpan bufferSpan);
    public sealed virtual bool get_IsValid();
    private sealed virtual override ITextViewLine Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.get_LastVisibleLine();
    public sealed virtual SnapshotSpan get_FormattedSpan();
    public sealed virtual int IndexOf(ITextViewLine item);
    public sealed virtual void Insert(int index, ITextViewLine item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override ITextViewLine System.Collections.Generic.IList<Microsoft.VisualStudio.Text.Formatting.ITextViewLine>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.VisualStudio.Text.Formatting.ITextViewLine>.set_Item(int index, ITextViewLine value);
    public sealed virtual void Add(ITextViewLine item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ITextViewLine item);
    public sealed virtual void CopyTo(ITextViewLine[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(ITextViewLine item);
    public sealed virtual IEnumerator`1<ITextViewLine> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.VisualStudio.Text.Editor.IndentSize : EditorOptionDefinition`1<int> {
    public int Default { get; }
    public EditorOptionKey`1<int> Key { get; }
    public virtual int get_Default();
    public virtual EditorOptionKey`1<int> get_Key();
    public virtual bool IsValid(Int32& proposedValue);
}
public static class Microsoft.VisualStudio.Text.Editor.IntraTextAdornment : object {
    public static DependencyProperty IsSelected;
    public static void SetIsSelected(UIElement element, bool isSelected);
    public static bool GetIsSelected(UIElement element);
}
public class Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag : object {
    public UIElement Adornment { get; }
    public Nullable`1<PositionAffinity> Affinity { get; }
    public Nullable`1<double> Baseline { get; }
    public Nullable`1<double> BottomSpace { get; }
    public AdornmentRemovedCallback RemovalCallback { get; }
    public Nullable`1<double> TextHeight { get; }
    public Nullable`1<double> TopSpace { get; }
    public IntraTextAdornmentTag(UIElement adornment, AdornmentRemovedCallback removalCallback, Nullable`1<double> topSpace, Nullable`1<double> baseline, Nullable`1<double> textHeight, Nullable`1<double> bottomSpace, Nullable`1<PositionAffinity> affinity);
    public IntraTextAdornmentTag(UIElement adornment, AdornmentRemovedCallback removalCallback, Nullable`1<PositionAffinity> affinity);
    public IntraTextAdornmentTag(UIElement adornment, AdornmentRemovedCallback removalCallback);
    public UIElement get_Adornment();
    public AdornmentRemovedCallback get_RemovalCallback();
    public Nullable`1<double> get_TopSpace();
    public Nullable`1<double> get_Baseline();
    public Nullable`1<double> get_TextHeight();
    public Nullable`1<double> get_BottomSpace();
    public Nullable`1<PositionAffinity> get_Affinity();
}
public interface Microsoft.VisualStudio.Text.Editor.IScrollMap {
    public bool AreElisionsExpanded { get; }
    public double End { get; }
    public double Start { get; }
    public double ThumbSize { get; }
    public abstract virtual double GetCoordinateAtBufferPosition(SnapshotPoint bufferPosition);
    public abstract virtual bool get_AreElisionsExpanded();
    public abstract virtual SnapshotPoint GetBufferPositionAtCoordinate(double coordinate);
    public abstract virtual double get_Start();
    public abstract virtual double get_End();
    public abstract virtual double get_ThumbSize();
}
public interface Microsoft.VisualStudio.Text.Editor.IScrollMapFactoryService {
    public abstract virtual IScrollMap Create(ITextView textView);
    public abstract virtual IScrollMap Create(ITextView textView, bool areElisionsExpanded);
}
public interface Microsoft.VisualStudio.Text.Editor.ISmartIndent {
    public abstract virtual Nullable`1<int> GetDesiredIndentation(ITextSnapshotLine line);
}
public interface Microsoft.VisualStudio.Text.Editor.ISmartIndentationService {
    public abstract virtual Nullable`1<int> GetDesiredIndentation(ITextView textView, ITextSnapshotLine line);
}
public interface Microsoft.VisualStudio.Text.Editor.ISmartIndentProvider {
    public abstract virtual ISmartIndent CreateSmartIndent(ITextView textView);
}
public interface Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent {
    public bool HasFocus { get; }
    public bool IsMouseOver { get; }
    public abstract virtual Geometry PositionAndDisplay(Geometry reservedSpace);
    public abstract virtual void Hide();
    public abstract virtual bool get_IsMouseOver();
    public abstract virtual bool get_HasFocus();
    public abstract virtual void add_LostFocus(EventHandler value);
    public abstract virtual void remove_LostFocus(EventHandler value);
    public abstract virtual void add_GotFocus(EventHandler value);
    public abstract virtual void remove_GotFocus(EventHandler value);
}
public interface Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager {
    public ReadOnlyCollection`1<ISpaceReservationAgent> Agents { get; }
    public bool HasAggregateFocus { get; }
    public bool IsMouseOver { get; }
    public abstract virtual ISpaceReservationAgent CreatePopupAgent(ITrackingSpan visualSpan, PopupStyles style, UIElement content);
    public abstract virtual void UpdatePopupAgent(ISpaceReservationAgent agent, ITrackingSpan visualSpan, PopupStyles styles);
    public abstract virtual void AddAgent(ISpaceReservationAgent agent);
    public abstract virtual bool RemoveAgent(ISpaceReservationAgent agent);
    public abstract virtual ReadOnlyCollection`1<ISpaceReservationAgent> get_Agents();
    public abstract virtual void add_AgentChanged(EventHandler`1<SpaceReservationAgentChangedEventArgs> value);
    public abstract virtual void remove_AgentChanged(EventHandler`1<SpaceReservationAgentChangedEventArgs> value);
    public abstract virtual bool get_IsMouseOver();
    public abstract virtual bool get_HasAggregateFocus();
    public abstract virtual void add_LostAggregateFocus(EventHandler value);
    public abstract virtual void remove_LostAggregateFocus(EventHandler value);
    public abstract virtual void add_GotAggregateFocus(EventHandler value);
    public abstract virtual void remove_GotAggregateFocus(EventHandler value);
}
public class Microsoft.VisualStudio.Text.Editor.IsViewportLeftClipped : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public interface Microsoft.VisualStudio.Text.Editor.ITextCaret {
    public double Bottom { get; }
    public ITextViewLine ContainingTextViewLine { get; }
    public double Height { get; }
    public bool InVirtualSpace { get; }
    public bool IsHidden { get; public set; }
    public double Left { get; }
    public bool OverwriteMode { get; }
    public CaretPosition Position { get; }
    public double Right { get; }
    public double Top { get; }
    public double Width { get; }
    public abstract virtual void EnsureVisible();
    public abstract virtual CaretPosition MoveTo(ITextViewLine textLine, double xCoordinate);
    public abstract virtual CaretPosition MoveTo(ITextViewLine textLine, double xCoordinate, bool captureHorizontalPosition);
    public abstract virtual CaretPosition MoveTo(ITextViewLine textLine);
    public abstract virtual CaretPosition MoveTo(SnapshotPoint bufferPosition);
    public abstract virtual CaretPosition MoveTo(SnapshotPoint bufferPosition, PositionAffinity caretAffinity);
    public abstract virtual CaretPosition MoveTo(SnapshotPoint bufferPosition, PositionAffinity caretAffinity, bool captureHorizontalPosition);
    public abstract virtual CaretPosition MoveTo(VirtualSnapshotPoint bufferPosition);
    public abstract virtual CaretPosition MoveTo(VirtualSnapshotPoint bufferPosition, PositionAffinity caretAffinity);
    public abstract virtual CaretPosition MoveTo(VirtualSnapshotPoint bufferPosition, PositionAffinity caretAffinity, bool captureHorizontalPosition);
    public abstract virtual CaretPosition MoveToPreferredCoordinates();
    public abstract virtual CaretPosition MoveToNextCaretPosition();
    public abstract virtual CaretPosition MoveToPreviousCaretPosition();
    public abstract virtual ITextViewLine get_ContainingTextViewLine();
    public abstract virtual double get_Left();
    public abstract virtual double get_Width();
    public abstract virtual double get_Right();
    public abstract virtual double get_Top();
    public abstract virtual double get_Height();
    public abstract virtual double get_Bottom();
    public abstract virtual CaretPosition get_Position();
    public abstract virtual bool get_OverwriteMode();
    public abstract virtual bool get_InVirtualSpace();
    public abstract virtual bool get_IsHidden();
    public abstract virtual void set_IsHidden(bool value);
    public abstract virtual void add_PositionChanged(EventHandler`1<CaretPositionChangedEventArgs> value);
    public abstract virtual void remove_PositionChanged(EventHandler`1<CaretPositionChangedEventArgs> value);
}
public interface Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService {
    public ITextViewRoleSet AllPredefinedRoles { get; }
    public ITextViewRoleSet DefaultRoles { get; }
    public ITextViewRoleSet NoRoles { get; }
    public abstract virtual IWpfTextView CreateTextView(ITextViewModel viewModel, ITextViewRoleSet roles, IEditorOptions parentOptions);
    public abstract virtual IWpfTextView CreateTextView(ITextDataModel dataModel, ITextViewRoleSet roles, IEditorOptions parentOptions);
    public abstract virtual IWpfTextView CreateTextView(ITextBuffer textBuffer, ITextViewRoleSet roles, IEditorOptions parentOptions);
    public abstract virtual IWpfTextView CreateTextView(ITextBuffer textBuffer, ITextViewRoleSet roles);
    public abstract virtual IWpfTextView CreateTextView(ITextBuffer textBuffer);
    public abstract virtual IWpfTextView CreateTextView();
    public abstract virtual IWpfTextViewHost CreateTextViewHost(IWpfTextView wpfTextView, bool setFocus);
    public abstract virtual ITextViewRoleSet get_NoRoles();
    public abstract virtual ITextViewRoleSet get_AllPredefinedRoles();
    public abstract virtual ITextViewRoleSet get_DefaultRoles();
    public abstract virtual ITextViewRoleSet CreateTextViewRoleSet(IEnumerable`1<string> roles);
    public abstract virtual ITextViewRoleSet CreateTextViewRoleSet(String[] roles);
    public abstract virtual void add_TextViewCreated(EventHandler`1<TextViewCreatedEventArgs> value);
    public abstract virtual void remove_TextViewCreated(EventHandler`1<TextViewCreatedEventArgs> value);
}
public interface Microsoft.VisualStudio.Text.Editor.ITextSelection {
    public bool ActivationTracksFocus { get; public set; }
    public VirtualSnapshotPoint ActivePoint { get; }
    public VirtualSnapshotPoint AnchorPoint { get; }
    public VirtualSnapshotPoint End { get; }
    public bool IsActive { get; public set; }
    public bool IsEmpty { get; }
    public bool IsReversed { get; }
    public TextSelectionMode Mode { get; public set; }
    public NormalizedSnapshotSpanCollection SelectedSpans { get; }
    public VirtualSnapshotPoint Start { get; }
    public VirtualSnapshotSpan StreamSelectionSpan { get; }
    public ITextView TextView { get; }
    public ReadOnlyCollection`1<VirtualSnapshotSpan> VirtualSelectedSpans { get; }
    public abstract virtual ITextView get_TextView();
    public abstract virtual void Select(SnapshotSpan selectionSpan, bool isReversed);
    public abstract virtual void Select(VirtualSnapshotPoint anchorPoint, VirtualSnapshotPoint activePoint);
    public abstract virtual NormalizedSnapshotSpanCollection get_SelectedSpans();
    public abstract virtual ReadOnlyCollection`1<VirtualSnapshotSpan> get_VirtualSelectedSpans();
    public abstract virtual Nullable`1<VirtualSnapshotSpan> GetSelectionOnTextViewLine(ITextViewLine line);
    public abstract virtual VirtualSnapshotSpan get_StreamSelectionSpan();
    public abstract virtual TextSelectionMode get_Mode();
    public abstract virtual void set_Mode(TextSelectionMode value);
    public abstract virtual bool get_IsReversed();
    public abstract virtual void Clear();
    public abstract virtual bool get_IsEmpty();
    public abstract virtual bool get_IsActive();
    public abstract virtual void set_IsActive(bool value);
    public abstract virtual bool get_ActivationTracksFocus();
    public abstract virtual void set_ActivationTracksFocus(bool value);
    public abstract virtual void add_SelectionChanged(EventHandler value);
    public abstract virtual void remove_SelectionChanged(EventHandler value);
    public abstract virtual VirtualSnapshotPoint get_ActivePoint();
    public abstract virtual VirtualSnapshotPoint get_AnchorPoint();
    public abstract virtual VirtualSnapshotPoint get_Start();
    public abstract virtual VirtualSnapshotPoint get_End();
}
public interface Microsoft.VisualStudio.Text.Editor.ITextView {
    public IBufferGraph BufferGraph { get; }
    public ITextCaret Caret { get; }
    public bool HasAggregateFocus { get; }
    public bool InLayout { get; }
    public bool IsClosed { get; }
    public bool IsMouseOverViewOrAdornments { get; }
    public double LineHeight { get; }
    public double MaxTextRightCoordinate { get; }
    public IEditorOptions Options { get; }
    public ITrackingSpan ProvisionalTextHighlight { get; public set; }
    public ITextViewRoleSet Roles { get; }
    public ITextSelection Selection { get; }
    public ITextBuffer TextBuffer { get; }
    public ITextDataModel TextDataModel { get; }
    public ITextSnapshot TextSnapshot { get; }
    public ITextViewLineCollection TextViewLines { get; }
    public ITextViewModel TextViewModel { get; }
    public IViewScroller ViewScroller { get; }
    public double ViewportBottom { get; }
    public double ViewportHeight { get; }
    public double ViewportLeft { get; public set; }
    public double ViewportRight { get; }
    public double ViewportTop { get; }
    public double ViewportWidth { get; }
    public ITextSnapshot VisualSnapshot { get; }
    public abstract virtual void DisplayTextLineContainingBufferPosition(SnapshotPoint bufferPosition, double verticalDistance, ViewRelativePosition relativeTo);
    public abstract virtual void DisplayTextLineContainingBufferPosition(SnapshotPoint bufferPosition, double verticalDistance, ViewRelativePosition relativeTo, Nullable`1<double> viewportWidthOverride, Nullable`1<double> viewportHeightOverride);
    public abstract virtual SnapshotSpan GetTextElementSpan(SnapshotPoint point);
    public abstract virtual void Close();
    public abstract virtual void QueueSpaceReservationStackRefresh();
    public abstract virtual bool get_InLayout();
    public abstract virtual IViewScroller get_ViewScroller();
    public abstract virtual ITextViewLineCollection get_TextViewLines();
    public abstract virtual ITextViewLine GetTextViewLineContainingBufferPosition(SnapshotPoint bufferPosition);
    public abstract virtual ITextCaret get_Caret();
    public abstract virtual ITextSelection get_Selection();
    public abstract virtual ITrackingSpan get_ProvisionalTextHighlight();
    public abstract virtual void set_ProvisionalTextHighlight(ITrackingSpan value);
    public abstract virtual ITextViewRoleSet get_Roles();
    public abstract virtual ITextBuffer get_TextBuffer();
    public abstract virtual IBufferGraph get_BufferGraph();
    public abstract virtual ITextSnapshot get_TextSnapshot();
    public abstract virtual ITextSnapshot get_VisualSnapshot();
    public abstract virtual ITextViewModel get_TextViewModel();
    public abstract virtual ITextDataModel get_TextDataModel();
    public abstract virtual double get_MaxTextRightCoordinate();
    public abstract virtual double get_ViewportLeft();
    public abstract virtual void set_ViewportLeft(double value);
    public abstract virtual double get_ViewportTop();
    public abstract virtual double get_ViewportRight();
    public abstract virtual double get_ViewportBottom();
    public abstract virtual double get_ViewportWidth();
    public abstract virtual double get_ViewportHeight();
    public abstract virtual double get_LineHeight();
    public abstract virtual bool get_IsClosed();
    public abstract virtual IEditorOptions get_Options();
    public abstract virtual bool get_IsMouseOverViewOrAdornments();
    public abstract virtual bool get_HasAggregateFocus();
    public abstract virtual void add_LayoutChanged(EventHandler`1<TextViewLayoutChangedEventArgs> value);
    public abstract virtual void remove_LayoutChanged(EventHandler`1<TextViewLayoutChangedEventArgs> value);
    public abstract virtual void add_ViewportLeftChanged(EventHandler value);
    public abstract virtual void remove_ViewportLeftChanged(EventHandler value);
    public abstract virtual void add_ViewportHeightChanged(EventHandler value);
    public abstract virtual void remove_ViewportHeightChanged(EventHandler value);
    public abstract virtual void add_ViewportWidthChanged(EventHandler value);
    public abstract virtual void remove_ViewportWidthChanged(EventHandler value);
    public abstract virtual void add_MouseHover(EventHandler`1<MouseHoverEventArgs> value);
    public abstract virtual void remove_MouseHover(EventHandler`1<MouseHoverEventArgs> value);
    public abstract virtual void add_Closed(EventHandler value);
    public abstract virtual void remove_Closed(EventHandler value);
    public abstract virtual void add_LostAggregateFocus(EventHandler value);
    public abstract virtual void remove_LostAggregateFocus(EventHandler value);
    public abstract virtual void add_GotAggregateFocus(EventHandler value);
    public abstract virtual void remove_GotAggregateFocus(EventHandler value);
}
public interface Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection {
    public ITextViewLine FirstVisibleLine { get; }
    public SnapshotSpan FormattedSpan { get; }
    public bool IsValid { get; }
    public ITextViewLine LastVisibleLine { get; }
    public abstract virtual bool ContainsBufferPosition(SnapshotPoint bufferPosition);
    public abstract virtual bool IntersectsBufferSpan(SnapshotSpan bufferSpan);
    public abstract virtual ITextViewLine GetTextViewLineContainingBufferPosition(SnapshotPoint bufferPosition);
    public abstract virtual ITextViewLine GetTextViewLineContainingYCoordinate(double y);
    public abstract virtual Collection`1<ITextViewLine> GetTextViewLinesIntersectingSpan(SnapshotSpan bufferSpan);
    public abstract virtual SnapshotSpan GetTextElementSpan(SnapshotPoint bufferPosition);
    public abstract virtual TextBounds GetCharacterBounds(SnapshotPoint bufferPosition);
    public abstract virtual Collection`1<TextBounds> GetNormalizedTextBounds(SnapshotSpan bufferSpan);
    public abstract virtual int GetIndexOfTextLine(ITextViewLine textLine);
    public abstract virtual ITextViewLine get_FirstVisibleLine();
    public abstract virtual ITextViewLine get_LastVisibleLine();
    public abstract virtual SnapshotSpan get_FormattedSpan();
    public abstract virtual bool get_IsValid();
}
public interface Microsoft.VisualStudio.Text.Editor.ITextViewMargin {
    public bool Enabled { get; }
    public double MarginSize { get; }
    public abstract virtual double get_MarginSize();
    public abstract virtual bool get_Enabled();
    public abstract virtual ITextViewMargin GetTextViewMargin(string marginName);
}
public interface Microsoft.VisualStudio.Text.Editor.ITextViewModel {
    public ITextBuffer DataBuffer { get; }
    public ITextDataModel DataModel { get; }
    public ITextBuffer EditBuffer { get; }
    public ITextBuffer VisualBuffer { get; }
    public abstract virtual ITextDataModel get_DataModel();
    public abstract virtual ITextBuffer get_DataBuffer();
    public abstract virtual ITextBuffer get_EditBuffer();
    public abstract virtual ITextBuffer get_VisualBuffer();
    public abstract virtual bool IsPointInVisualBuffer(SnapshotPoint editBufferPoint, PositionAffinity affinity);
    public abstract virtual SnapshotPoint GetNearestPointInVisualBuffer(SnapshotPoint editBufferPoint);
    public abstract virtual SnapshotPoint GetNearestPointInVisualSnapshot(SnapshotPoint editBufferPoint, ITextSnapshot targetVisualSnapshot, PointTrackingMode trackingMode);
}
public interface Microsoft.VisualStudio.Text.Editor.ITextViewModelProvider {
    public abstract virtual ITextViewModel CreateTextViewModel(ITextDataModel dataModel, ITextViewRoleSet roles);
}
public interface Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet {
    public abstract virtual bool Contains(string textViewRole);
    public abstract virtual bool ContainsAll(IEnumerable`1<string> textViewRoles);
    public abstract virtual bool ContainsAny(IEnumerable`1<string> textViewRoles);
    public abstract virtual ITextViewRoleSet UnionWith(ITextViewRoleSet roleSet);
}
public interface Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap {
    public ITextView TextView { get; }
    public abstract virtual ITextView get_TextView();
    public abstract virtual double GetFractionAtBufferPosition(SnapshotPoint bufferPosition);
    public abstract virtual SnapshotPoint GetBufferPositionAtFraction(double fraction);
    public abstract virtual void add_MappingChanged(EventHandler value);
    public abstract virtual void remove_MappingChanged(EventHandler value);
}
public interface Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar {
    public IScrollMap Map { get; }
    public double ThumbHeight { get; }
    public double TrackSpanBottom { get; }
    public double TrackSpanHeight { get; }
    public double TrackSpanTop { get; }
    public abstract virtual IScrollMap get_Map();
    public abstract virtual double GetYCoordinateOfBufferPosition(SnapshotPoint bufferPosition);
    public abstract virtual double GetYCoordinateOfScrollMapPosition(double scrollMapPosition);
    public abstract virtual SnapshotPoint GetBufferPositionOfYCoordinate(double y);
    public abstract virtual double get_ThumbHeight();
    public abstract virtual double get_TrackSpanTop();
    public abstract virtual double get_TrackSpanBottom();
    public abstract virtual double get_TrackSpanHeight();
    public abstract virtual void add_TrackSpanChanged(EventHandler value);
    public abstract virtual void remove_TrackSpanChanged(EventHandler value);
}
public interface Microsoft.VisualStudio.Text.Editor.IViewPrimitives {
    public Caret Caret { get; }
    public Selection Selection { get; }
    public TextView View { get; }
    public abstract virtual TextView get_View();
    public abstract virtual Selection get_Selection();
    public abstract virtual Caret get_Caret();
}
public interface Microsoft.VisualStudio.Text.Editor.IViewPrimitivesFactoryService {
    public abstract virtual TextView CreateTextView(ITextView textView);
    public abstract virtual DisplayTextPoint CreateDisplayTextPoint(TextView textView, int position);
    public abstract virtual DisplayTextRange CreateDisplayTextRange(TextView textView, TextRange textRange);
    public abstract virtual Selection CreateSelection(TextView textView);
    public abstract virtual Caret CreateCaret(TextView textView);
}
public interface Microsoft.VisualStudio.Text.Editor.IViewScroller {
    public abstract virtual void ScrollViewportVerticallyByPixels(double distanceToScroll);
    public abstract virtual void ScrollViewportVerticallyByLine(ScrollDirection direction);
    public abstract virtual void ScrollViewportVerticallyByLines(ScrollDirection direction, int count);
    public abstract virtual bool ScrollViewportVerticallyByPage(ScrollDirection direction);
    public abstract virtual void ScrollViewportHorizontallyByPixels(double distanceToScroll);
    public abstract virtual void EnsureSpanVisible(SnapshotSpan span);
    public abstract virtual void EnsureSpanVisible(SnapshotSpan span, EnsureSpanVisibleOptions options);
    public abstract virtual void EnsureSpanVisible(VirtualSnapshotSpan span, EnsureSpanVisibleOptions options);
}
public interface Microsoft.VisualStudio.Text.Editor.IWpfTextView {
    public Brush Background { get; public set; }
    public IFormattedLineSource FormattedLineSource { get; }
    public ILineTransformSource LineTransformSource { get; }
    public IWpfTextViewLineCollection TextViewLines { get; }
    public FrameworkElement VisualElement { get; }
    public double ZoomLevel { get; public set; }
    public abstract virtual IAdornmentLayer GetAdornmentLayer(string name);
    public abstract virtual ISpaceReservationManager GetSpaceReservationManager(string name);
    public abstract virtual FrameworkElement get_VisualElement();
    public abstract virtual Brush get_Background();
    public abstract virtual void set_Background(Brush value);
    public abstract virtual IWpfTextViewLineCollection get_TextViewLines();
    public abstract virtual void add_BackgroundBrushChanged(EventHandler`1<BackgroundBrushChangedEventArgs> value);
    public abstract virtual void remove_BackgroundBrushChanged(EventHandler`1<BackgroundBrushChangedEventArgs> value);
    public abstract virtual IWpfTextViewLine GetTextViewLineContainingBufferPosition(SnapshotPoint bufferPosition);
    public abstract virtual IFormattedLineSource get_FormattedLineSource();
    public abstract virtual ILineTransformSource get_LineTransformSource();
    public abstract virtual double get_ZoomLevel();
    public abstract virtual void set_ZoomLevel(double value);
    public abstract virtual void add_ZoomLevelChanged(EventHandler`1<ZoomLevelChangedEventArgs> value);
    public abstract virtual void remove_ZoomLevelChanged(EventHandler`1<ZoomLevelChangedEventArgs> value);
}
public interface Microsoft.VisualStudio.Text.Editor.IWpfTextViewConnectionListener {
    public abstract virtual void SubjectBuffersConnected(IWpfTextView textView, ConnectionReason reason, Collection`1<ITextBuffer> subjectBuffers);
    public abstract virtual void SubjectBuffersDisconnected(IWpfTextView textView, ConnectionReason reason, Collection`1<ITextBuffer> subjectBuffers);
}
public interface Microsoft.VisualStudio.Text.Editor.IWpfTextViewCreationListener {
    public abstract virtual void TextViewCreated(IWpfTextView textView);
}
public interface Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost {
    public Control HostControl { get; }
    public bool IsClosed { get; }
    public IWpfTextView TextView { get; }
    public abstract virtual void Close();
    public abstract virtual bool get_IsClosed();
    public abstract virtual void add_Closed(EventHandler value);
    public abstract virtual void remove_Closed(EventHandler value);
    public abstract virtual IWpfTextViewMargin GetTextViewMargin(string marginName);
    public abstract virtual IWpfTextView get_TextView();
    public abstract virtual Control get_HostControl();
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection {
    public IWpfTextViewLine FirstVisibleLine { get; }
    public IWpfTextViewLine Item { get; }
    public IWpfTextViewLine LastVisibleLine { get; }
    public ReadOnlyCollection`1<IWpfTextViewLine> WpfTextViewLines { get; }
    public abstract virtual ReadOnlyCollection`1<IWpfTextViewLine> get_WpfTextViewLines();
    public abstract virtual Geometry GetTextMarkerGeometry(SnapshotSpan bufferSpan);
    public abstract virtual Geometry GetTextMarkerGeometry(SnapshotSpan bufferSpan, bool clipToViewport, Thickness padding);
    public abstract virtual Geometry GetLineMarkerGeometry(SnapshotSpan bufferSpan);
    public abstract virtual Geometry GetLineMarkerGeometry(SnapshotSpan bufferSpan, bool clipToViewport, Thickness padding);
    public abstract virtual Geometry GetMarkerGeometry(SnapshotSpan bufferSpan, bool clipToViewport, Thickness padding);
    public abstract virtual Geometry GetMarkerGeometry(SnapshotSpan bufferSpan);
    public abstract virtual IWpfTextViewLine GetTextViewLineContainingBufferPosition(SnapshotPoint bufferPosition);
    public abstract virtual IWpfTextViewLine get_Item(int index);
    public abstract virtual IWpfTextViewLine get_FirstVisibleLine();
    public abstract virtual IWpfTextViewLine get_LastVisibleLine();
}
public interface Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin {
    public FrameworkElement VisualElement { get; }
    public abstract virtual FrameworkElement get_VisualElement();
}
public interface Microsoft.VisualStudio.Text.Editor.IWpfTextViewMarginProvider {
    public abstract virtual IWpfTextViewMargin CreateMargin(IWpfTextViewHost wpfTextViewHost, IWpfTextViewMargin marginContainer);
}
public abstract class Microsoft.VisualStudio.Text.Editor.KeyProcessor : object {
    public bool IsInterestedInHandledEvents { get; }
    public virtual bool get_IsInterestedInHandledEvents();
    public virtual void PreviewKeyDown(KeyEventArgs args);
    public virtual void KeyDown(KeyEventArgs args);
    public virtual void PreviewKeyUp(KeyEventArgs args);
    public virtual void KeyUp(KeyEventArgs args);
    public virtual void PreviewTextInputStart(TextCompositionEventArgs args);
    public virtual void TextInputStart(TextCompositionEventArgs args);
    public virtual void PreviewTextInput(TextCompositionEventArgs args);
    public virtual void TextInput(TextCompositionEventArgs args);
    public virtual void PreviewTextInputUpdate(TextCompositionEventArgs args);
    public virtual void TextInputUpdate(TextCompositionEventArgs args);
}
public class Microsoft.VisualStudio.Text.Editor.LineNumberMarginEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[AttributeUsageAttribute("452")]
public class Microsoft.VisualStudio.Text.Editor.MarginContainerAttribute : SingletonBaseMetadataAttribute {
    public string MarginContainer { get; }
    public MarginContainerAttribute(string marginContainer);
    public string get_MarginContainer();
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute : Attribute {
    public int Delay { get; }
    public MouseHoverAttribute(int delay);
    public int get_Delay();
}
public class Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs : EventArgs {
    public int Position { get; }
    public IMappingPoint TextPosition { get; }
    public ITextView View { get; }
    public MouseHoverEventArgs(ITextView view, int position, IMappingPoint textPosition);
    public ITextView get_View();
    public int get_Position();
    public IMappingPoint get_TextPosition();
}
public abstract class Microsoft.VisualStudio.Text.Editor.MouseProcessorBase : object {
    public virtual void PreprocessMouseLeftButtonDown(MouseButtonEventArgs e);
    public virtual void PostprocessMouseLeftButtonDown(MouseButtonEventArgs e);
    public virtual void PreprocessMouseRightButtonDown(MouseButtonEventArgs e);
    public virtual void PostprocessMouseRightButtonDown(MouseButtonEventArgs e);
    public virtual void PreprocessMouseLeftButtonUp(MouseButtonEventArgs e);
    public virtual void PostprocessMouseLeftButtonUp(MouseButtonEventArgs e);
    public virtual void PreprocessMouseRightButtonUp(MouseButtonEventArgs e);
    public virtual void PostprocessMouseRightButtonUp(MouseButtonEventArgs e);
    public virtual void PreprocessMouseUp(MouseButtonEventArgs e);
    public virtual void PostprocessMouseUp(MouseButtonEventArgs e);
    public virtual void PreprocessMouseDown(MouseButtonEventArgs e);
    public virtual void PostprocessMouseDown(MouseButtonEventArgs e);
    public virtual void PreprocessMouseMove(MouseEventArgs e);
    public virtual void PostprocessMouseMove(MouseEventArgs e);
    public virtual void PreprocessMouseWheel(MouseWheelEventArgs e);
    public virtual void PostprocessMouseWheel(MouseWheelEventArgs e);
    public virtual void PreprocessMouseEnter(MouseEventArgs e);
    public virtual void PostprocessMouseEnter(MouseEventArgs e);
    public virtual void PreprocessMouseLeave(MouseEventArgs e);
    public virtual void PostprocessMouseLeave(MouseEventArgs e);
    public virtual void PreprocessDragLeave(DragEventArgs e);
    public virtual void PostprocessDragLeave(DragEventArgs e);
    public virtual void PreprocessDragOver(DragEventArgs e);
    public virtual void PostprocessDragOver(DragEventArgs e);
    public virtual void PreprocessDragEnter(DragEventArgs e);
    public virtual void PostprocessDragEnter(DragEventArgs e);
    public virtual void PreprocessDrop(DragEventArgs e);
    public virtual void PostprocessDrop(DragEventArgs e);
    public virtual void PreprocessQueryContinueDrag(QueryContinueDragEventArgs e);
    public virtual void PostprocessQueryContinueDrag(QueryContinueDragEventArgs e);
    public virtual void PreprocessGiveFeedback(GiveFeedbackEventArgs e);
    public virtual void PostprocessGiveFeedback(GiveFeedbackEventArgs e);
}
public class Microsoft.VisualStudio.Text.Editor.MouseWheelZoomEnabled : WpfViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public class Microsoft.VisualStudio.Text.Editor.NewLineCharacter : EditorOptionDefinition`1<string> {
    public string Default { get; }
    public EditorOptionKey`1<string> Key { get; }
    public virtual string get_Default();
    public virtual EditorOptionKey`1<string> get_Key();
}
public static class Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.DefaultOptionExtensions : object {
    public static bool IsConvertTabsToSpacesEnabled(IEditorOptions options);
    public static int GetTabSize(IEditorOptions options);
    public static int GetIndentSize(IEditorOptions options);
    public static bool GetReplicateNewLineCharacter(IEditorOptions options);
    public static string GetNewLineCharacter(IEditorOptions options);
}
public static class Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions : object {
    public static bool IsVerticalScrollBarEnabled(IEditorOptions options);
    public static bool IsHorizontalScrollBarEnabled(IEditorOptions options);
    public static bool IsGlyphMarginEnabled(IEditorOptions options);
    public static bool IsSelectionMarginEnabled(IEditorOptions options);
    public static bool IsLineNumberMarginEnabled(IEditorOptions options);
    public static bool IsChangeTrackingEnabled(IEditorOptions options);
    public static bool IsOutliningMarginEnabled(IEditorOptions options);
    public static bool IsZoomControlEnabled(IEditorOptions options);
}
public static class Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions : object {
    public static bool IsVirtualSpaceEnabled(IEditorOptions options);
    public static bool IsOverwriteModeEnabled(IEditorOptions options);
    public static bool IsAutoScrollEnabled(IEditorOptions options);
    public static WordWrapStyles WordWrapStyle(IEditorOptions options);
    public static bool IsVisibleWhitespaceEnabled(IEditorOptions options);
    public static bool DoesViewProhibitUserInput(IEditorOptions options);
    public static bool IsOutliningUndoEnabled(IEditorOptions options);
    public static bool IsDragDropEditingEnabled(IEditorOptions options);
    public static bool IsViewportLeftClipped(IEditorOptions options);
}
public static class Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.WpfViewOptionExtensions : object {
    public static bool IsHighlightCurrentLineEnabled(IEditorOptions options);
    public static bool IsSimpleGraphicsEnabled(IEditorOptions options);
    public static bool IsMouseWheelZoomEnabled(IEditorOptions options);
    public static string AppearanceCategory(IEditorOptions options);
}
public abstract class Microsoft.VisualStudio.Text.Editor.OutliningCollapsedAdornmentControl : ContentControl {
}
public abstract class Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl : Control {
    public static DependencyProperty FirstLineOffsetProperty;
    public static DependencyProperty IsHighlightedProperty;
    public double FirstLineOffset { get; public set; }
    public bool IsHighlighted { get; public set; }
    public static void SetIsHighlighted(OutliningMarginBracketControl control, bool isExpanded);
    public static bool GetIsHighlighted(OutliningMarginBracketControl control);
    public bool get_IsHighlighted();
    public void set_IsHighlighted(bool value);
    protected virtual void OnIsHighlightedChanged(bool newValue);
    public static void SetFirstLineOffset(OutliningMarginBracketControl control, double firstLineOffset);
    public static double GetFirstLineOffset(OutliningMarginBracketControl control);
    public double get_FirstLineOffset();
    public void set_FirstLineOffset(double value);
}
public abstract class Microsoft.VisualStudio.Text.Editor.OutliningMarginControl : ContentControl {
}
public class Microsoft.VisualStudio.Text.Editor.OutliningMarginEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public abstract class Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl : Control {
    public static DependencyProperty IsExpandedProperty;
    public static DependencyProperty IsHighlightedProperty;
    public bool IsExpanded { get; public set; }
    public bool IsHighlighted { get; public set; }
    public static void SetIsExpanded(OutliningMarginHeaderControl control, bool isExpanded);
    public static bool GetIsExpanded(OutliningMarginHeaderControl control);
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public static void SetIsHighlighted(OutliningMarginHeaderControl control, bool isExpanded);
    public static bool GetIsHighlighted(OutliningMarginHeaderControl control);
    public bool get_IsHighlighted();
    public void set_IsHighlighted(bool value);
}
public class Microsoft.VisualStudio.Text.Editor.OutliningUndoEnabled : EditorOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public class Microsoft.VisualStudio.Text.Editor.OverwriteMode : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public static class Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers : object {
    public static string Caret;
    public static string Outlining;
    public static string Selection;
    public static string Squiggle;
    public static string Text;
    public static string TextMarker;
}
public static class Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames : object {
    public static string Bottom;
    public static string BottomControl;
    public static string Glyph;
    public static string HorizontalScrollBar;
    public static string HorizontalScrollBarContainer;
    public static string Left;
    public static string LeftSelection;
    public static string LineNumber;
    public static string Outlining;
    public static string Right;
    public static string RightControl;
    public static string Spacer;
    public static string Top;
    public static string VerticalScrollBar;
    public static string VerticalScrollBarContainer;
    public static string ZoomControl;
}
public static class Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles : object {
    public static string Analyzable;
    public static string Debuggable;
    public static string Document;
    public static string Editable;
    public static string Interactive;
    public static string PrimaryDocument;
    public static string Structured;
    public static string Zoomable;
}
public class Microsoft.VisualStudio.Text.Editor.ProduceScreenReaderFriendlyText : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public class Microsoft.VisualStudio.Text.Editor.ReplicateNewLineCharacter : EditorOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public enum Microsoft.VisualStudio.Text.Editor.ScrollDirection : Enum {
    public int value__;
    public static ScrollDirection Down;
    public static ScrollDirection Up;
}
public abstract class Microsoft.VisualStudio.Text.Editor.Selection : DisplayTextRange {
    [EditorBrowsableAttribute("2")]
public ITextSelection AdvancedSelection { get; }
    public bool IsReversed { get; public set; }
    public abstract virtual void SelectRange(TextRange textRange);
    public abstract virtual void SelectRange(TextPoint selectionStart, TextPoint selectionEnd);
    public abstract virtual void SelectAll();
    public abstract virtual void ExtendSelection(TextPoint newEnd);
    public abstract virtual void Clear();
    public abstract virtual ITextSelection get_AdvancedSelection();
    public abstract virtual bool get_IsReversed();
    public abstract virtual void set_IsReversed(bool value);
}
public class Microsoft.VisualStudio.Text.Editor.SelectionMarginEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public class Microsoft.VisualStudio.Text.Editor.SimpleGraphicsOption : WpfViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public class Microsoft.VisualStudio.Text.Editor.SpaceReservationAgentChangedEventArgs : EventArgs {
    public ISpaceReservationAgent NewAgent { get; }
    public ISpaceReservationAgent OldAgent { get; }
    public SpaceReservationAgentChangedEventArgs(ISpaceReservationAgent oldAgent, ISpaceReservationAgent newAgent);
    public ISpaceReservationAgent get_OldAgent();
    public ISpaceReservationAgent get_NewAgent();
}
public class Microsoft.VisualStudio.Text.Editor.SpaceReservationManagerDefinition : object {
}
public class Microsoft.VisualStudio.Text.Editor.TabSize : EditorOptionDefinition`1<int> {
    public int Default { get; }
    public EditorOptionKey`1<int> Key { get; }
    public virtual int get_Default();
    public virtual EditorOptionKey`1<int> get_Key();
    public virtual bool IsValid(Int32& proposedValue);
}
public abstract class Microsoft.VisualStudio.Text.Editor.TextBuffer : object {
    [EditorBrowsableAttribute("2")]
public ITextBuffer AdvancedTextBuffer { get; }
    public IEnumerable`1<TextRange> Lines { get; }
    public abstract virtual TextPoint GetTextPoint(int position);
    public abstract virtual TextPoint GetTextPoint(int line, int column);
    public abstract virtual TextRange GetLine(int line);
    public abstract virtual TextRange GetTextRange(TextPoint startPoint, TextPoint endPoint);
    public abstract virtual TextRange GetTextRange(int startPosition, int endPosition);
    public abstract virtual ITextBuffer get_AdvancedTextBuffer();
    public abstract virtual TextPoint GetStartPoint();
    public abstract virtual TextPoint GetEndPoint();
    public abstract virtual IEnumerable`1<TextRange> get_Lines();
}
public abstract class Microsoft.VisualStudio.Text.Editor.TextPoint : object {
    [EditorBrowsableAttribute("2")]
public SnapshotPoint AdvancedTextPoint { get; }
    public int Column { get; }
    public int CurrentPosition { get; }
    public int EndOfLine { get; }
    public int LineNumber { get; }
    public int StartOfLine { get; }
    public TextBuffer TextBuffer { get; }
    public abstract virtual TextBuffer get_TextBuffer();
    public abstract virtual int get_CurrentPosition();
    public abstract virtual int get_Column();
    public abstract virtual bool DeleteNext();
    public abstract virtual bool DeletePrevious();
    [EditorBrowsableAttribute("2")]
public abstract virtual TextPoint GetFirstNonWhiteSpaceCharacterOnLine();
    public abstract virtual TextRange GetCurrentWord();
    public abstract virtual TextRange GetNextWord();
    public abstract virtual TextRange GetPreviousWord();
    public abstract virtual TextRange GetTextRange(TextPoint otherPoint);
    public abstract virtual TextRange GetTextRange(int otherPosition);
    public abstract virtual bool InsertNewLine();
    public abstract virtual bool InsertIndent();
    public abstract virtual bool InsertText(string text);
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_StartOfLine();
    public abstract virtual int get_EndOfLine();
    public abstract virtual bool RemovePreviousIndent();
    public abstract virtual bool TransposeCharacter();
    public abstract virtual bool TransposeLine();
    public abstract virtual bool TransposeLine(int lineNumber);
    public abstract virtual SnapshotPoint get_AdvancedTextPoint();
    public abstract virtual string GetNextCharacter();
    public abstract virtual string GetPreviousCharacter();
    public abstract virtual TextRange Find(string pattern, FindOptions findOptions, TextPoint endPoint);
    public abstract virtual TextRange Find(string pattern, TextPoint endPoint);
    public abstract virtual TextRange Find(string pattern, FindOptions findOptions);
    public abstract virtual TextRange Find(string pattern);
    public abstract virtual Collection`1<TextRange> FindAll(string pattern, TextPoint endPoint);
    public abstract virtual Collection`1<TextRange> FindAll(string pattern, FindOptions findOptions, TextPoint endPoint);
    public abstract virtual Collection`1<TextRange> FindAll(string pattern);
    public abstract virtual Collection`1<TextRange> FindAll(string pattern, FindOptions findOptions);
    public abstract virtual void MoveTo(int position);
    public abstract virtual void MoveToNextCharacter();
    public abstract virtual void MoveToPreviousCharacter();
    public TextPoint Clone();
    protected abstract virtual TextPoint CloneInternal();
    public abstract virtual void MoveToLine(int lineNumber);
    public abstract virtual void MoveToEndOfLine();
    public abstract virtual void MoveToStartOfLine();
    public abstract virtual void MoveToEndOfDocument();
    public abstract virtual void MoveToStartOfDocument();
    public abstract virtual void MoveToBeginningOfNextLine();
    public abstract virtual void MoveToBeginningOfPreviousLine();
    public abstract virtual void MoveToNextWord();
    public abstract virtual void MoveToPreviousWord();
}
public abstract class Microsoft.VisualStudio.Text.Editor.TextRange : object {
    [EditorBrowsableAttribute("2")]
public SnapshotSpan AdvancedTextRange { get; }
    public bool IsEmpty { get; }
    public TextBuffer TextBuffer { get; }
    public abstract virtual TextPoint GetStartPoint();
    public abstract virtual TextPoint GetEndPoint();
    public abstract virtual TextBuffer get_TextBuffer();
    public abstract virtual SnapshotSpan get_AdvancedTextRange();
    public abstract virtual bool MakeUppercase();
    public abstract virtual bool MakeLowercase();
    public abstract virtual bool Capitalize();
    public abstract virtual bool ToggleCase();
    public abstract virtual bool Delete();
    public abstract virtual bool Indent();
    public abstract virtual bool Unindent();
    public abstract virtual bool get_IsEmpty();
    public abstract virtual TextRange Find(string pattern);
    public abstract virtual TextRange Find(string pattern, FindOptions findOptions);
    public abstract virtual Collection`1<TextRange> FindAll(string pattern);
    public abstract virtual Collection`1<TextRange> FindAll(string pattern, FindOptions findOptions);
    public abstract virtual bool ReplaceText(string newText);
    public abstract virtual string GetText();
    public TextRange Clone();
    protected abstract virtual TextRange CloneInternal();
    public abstract virtual void SetStart(TextPoint startPoint);
    public abstract virtual void SetEnd(TextPoint endPoint);
    public abstract virtual void MoveTo(TextRange newRange);
    protected abstract virtual IEnumerator`1<TextPoint> GetEnumeratorInternal();
    public sealed virtual IEnumerator`1<TextPoint> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum Microsoft.VisualStudio.Text.Editor.TextSelectionMode : Enum {
    public int value__;
    public static TextSelectionMode Box;
    public static TextSelectionMode Stream;
}
public abstract class Microsoft.VisualStudio.Text.Editor.TextView : object {
    [EditorBrowsableAttribute("2")]
public ITextView AdvancedTextView { get; }
    public Caret Caret { get; }
    public Selection Selection { get; }
    public TextBuffer TextBuffer { get; }
    public DisplayTextRange VisibleSpan { get; }
    public abstract virtual void MoveLineToTop(int lineNumber);
    public abstract virtual void MoveLineToBottom(int lineNumber);
    public abstract virtual void ScrollUp(int lines);
    public abstract virtual void ScrollDown(int lines);
    public abstract virtual void ScrollPageDown();
    public abstract virtual void ScrollPageUp();
    public abstract virtual bool Show(DisplayTextPoint point, HowToShow howToShow);
    public abstract virtual VisibilityState Show(DisplayTextRange textRange, HowToShow howToShow);
    public abstract virtual DisplayTextPoint GetTextPoint(int position);
    public abstract virtual DisplayTextPoint GetTextPoint(TextPoint textPoint);
    public abstract virtual DisplayTextPoint GetTextPoint(int line, int column);
    public abstract virtual DisplayTextRange GetTextRange(TextPoint startPoint, TextPoint endPoint);
    public abstract virtual DisplayTextRange GetTextRange(TextRange textRange);
    public abstract virtual DisplayTextRange GetTextRange(int startPosition, int endPosition);
    public abstract virtual DisplayTextRange get_VisibleSpan();
    public abstract virtual ITextView get_AdvancedTextView();
    public abstract virtual Caret get_Caret();
    public abstract virtual Selection get_Selection();
    public abstract virtual TextBuffer get_TextBuffer();
}
public class Microsoft.VisualStudio.Text.Editor.TextViewCreatedEventArgs : EventArgs {
    public ITextView TextView { get; }
    public TextViewCreatedEventArgs(ITextView textView);
    public ITextView get_TextView();
}
public class Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs : EventArgs {
    public bool HorizontalTranslation { get; }
    public ReadOnlyCollection`1<ITextViewLine> NewOrReformattedLines { get; }
    public NormalizedSnapshotSpanCollection NewOrReformattedSpans { get; }
    public ITextSnapshot NewSnapshot { get; }
    public ViewState NewViewState { get; }
    public ITextSnapshot OldSnapshot { get; }
    public ViewState OldViewState { get; }
    public ReadOnlyCollection`1<ITextViewLine> TranslatedLines { get; }
    public NormalizedSnapshotSpanCollection TranslatedSpans { get; }
    public bool VerticalTranslation { get; }
    public TextViewLayoutChangedEventArgs(ViewState oldState, ViewState newState, IList`1<ITextViewLine> newOrReformattedLines, IList`1<ITextViewLine> translatedLines);
    public ViewState get_OldViewState();
    public ViewState get_NewViewState();
    public bool get_HorizontalTranslation();
    public bool get_VerticalTranslation();
    public ITextSnapshot get_OldSnapshot();
    public ITextSnapshot get_NewSnapshot();
    public ReadOnlyCollection`1<ITextViewLine> get_NewOrReformattedLines();
    public ReadOnlyCollection`1<ITextViewLine> get_TranslatedLines();
    public NormalizedSnapshotSpanCollection get_NewOrReformattedSpans();
    public NormalizedSnapshotSpanCollection get_TranslatedSpans();
}
public class Microsoft.VisualStudio.Text.Editor.TextViewRoleAttribute : MultipleBaseMetadataAttribute {
    public string TextViewRoles { get; }
    public TextViewRoleAttribute(string role);
    public string get_TextViewRoles();
}
public class Microsoft.VisualStudio.Text.Editor.UseVirtualSpace : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public class Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespace : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public class Microsoft.VisualStudio.Text.Editor.VerticalScrollBarEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public abstract class Microsoft.VisualStudio.Text.Editor.ViewOptionDefinition`1 : EditorOptionDefinition`1<T> {
    public virtual bool IsApplicableToScope(IPropertyOwner scope);
}
public class Microsoft.VisualStudio.Text.Editor.ViewProhibitUserInput : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public enum Microsoft.VisualStudio.Text.Editor.ViewRelativePosition : Enum {
    public int value__;
    public static ViewRelativePosition Bottom;
    public static ViewRelativePosition Top;
}
public class Microsoft.VisualStudio.Text.Editor.ViewState : object {
    public ITextSnapshot EditSnapshot { get; }
    public double ViewportBottom { get; }
    public double ViewportHeight { get; }
    public double ViewportLeft { get; }
    public double ViewportRight { get; }
    public double ViewportTop { get; }
    public double ViewportWidth { get; }
    public ITextSnapshot VisualSnapshot { get; }
    public ViewState(ITextView view, double effectiveViewportWidth, double effectiveViewportHeight);
    public ViewState(ITextView view);
    public double get_ViewportLeft();
    public double get_ViewportTop();
    public double get_ViewportWidth();
    public double get_ViewportHeight();
    public double get_ViewportRight();
    public double get_ViewportBottom();
    public ITextSnapshot get_VisualSnapshot();
    public ITextSnapshot get_EditSnapshot();
}
public class Microsoft.VisualStudio.Text.Editor.WordWrapStyle : ViewOptionDefinition`1<WordWrapStyles> {
    public WordWrapStyles Default { get; }
    public EditorOptionKey`1<WordWrapStyles> Key { get; }
    public virtual WordWrapStyles get_Default();
    public virtual EditorOptionKey`1<WordWrapStyles> get_Key();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Text.Editor.WordWrapStyles : Enum {
    public int value__;
    public static WordWrapStyles AutoIndent;
    public static WordWrapStyles None;
    public static WordWrapStyles VisibleGlyphs;
    public static WordWrapStyles WordWrap;
}
public static class Microsoft.VisualStudio.Text.Editor.WpfTextViewKeyboardFilterName : object {
    public static string KeyboardFilterOrderingName;
}
public abstract class Microsoft.VisualStudio.Text.Editor.WpfViewOptionDefinition`1 : EditorOptionDefinition`1<T> {
    public virtual bool IsApplicableToScope(IPropertyOwner scope);
}
public static class Microsoft.VisualStudio.Text.Editor.ZoomConstants : object {
    public static double DefaultZoom;
    public static double MaxZoom;
    public static double MinZoom;
    public static double ScalingFactor;
}
public abstract class Microsoft.VisualStudio.Text.Editor.ZoomControl : ComboBox {
    public static DependencyProperty SelectedZoomLevelProperty;
    public double SelectedZoomLevel { get; public set; }
    public static void SetSelectedZoomLevel(DependencyObject control, double value);
    public static double GetSelectedZoomLevel(DependencyObject control);
    public double get_SelectedZoomLevel();
    public void set_SelectedZoomLevel(double value);
}
public class Microsoft.VisualStudio.Text.Editor.ZoomControlEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public class Microsoft.VisualStudio.Text.Editor.ZoomLevelChangedEventArgs : EventArgs {
    public double NewZoomLevel { get; }
    public Transform ZoomTransform { get; }
    public ZoomLevelChangedEventArgs(double newZoomLevel, Transform transform);
    public double get_NewZoomLevel();
    public Transform get_ZoomTransform();
}
public class Microsoft.VisualStudio.Text.Editor.ZoomLevelConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Microsoft.VisualStudio.Text.EncodingChangedEventArgs : EventArgs {
    public Encoding NewEncoding { get; }
    public Encoding OldEncoding { get; }
    public EncodingChangedEventArgs(Encoding oldEncoding, Encoding newEncoding);
    public Encoding get_OldEncoding();
    public Encoding get_NewEncoding();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Text.FileActionTypes : Enum {
    public int value__;
    public static FileActionTypes ContentLoadedFromDisk;
    public static FileActionTypes ContentSavedToDisk;
    public static FileActionTypes DocumentRenamed;
}
public interface Microsoft.VisualStudio.Text.Formatting.IAdornmentElement {
    public PositionAffinity Affinity { get; }
    public double Baseline { get; }
    public double BottomSpace { get; }
    public object IdentityTag { get; }
    public object ProviderTag { get; }
    public double TextHeight { get; }
    public double TopSpace { get; }
    public double Width { get; }
    public abstract virtual double get_Width();
    public abstract virtual double get_TopSpace();
    public abstract virtual double get_Baseline();
    public abstract virtual double get_TextHeight();
    public abstract virtual double get_BottomSpace();
    public abstract virtual object get_IdentityTag();
    public abstract virtual object get_ProviderTag();
    public abstract virtual PositionAffinity get_Affinity();
}
public interface Microsoft.VisualStudio.Text.Formatting.IFormattedLine {
    public abstract virtual void SetSnapshot(ITextSnapshot visualSnapshot, ITextSnapshot editSnapshot);
    public abstract virtual void SetLineTransform(LineTransform transform);
    public abstract virtual void SetTop(double top);
    public abstract virtual void SetDeltaY(double deltaY);
    public abstract virtual void SetChange(TextViewLineChange change);
    public abstract virtual void SetVisibleArea(Rect visibleArea);
    public abstract virtual Visual GetOrCreateVisual();
    public abstract virtual void RemoveVisual();
}
public interface Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource {
    public double BaseIndentation { get; }
    public double ColumnWidth { get; }
    public TextRunProperties DefaultTextProperties { get; }
    public double LineHeight { get; }
    public double MaxAutoIndent { get; }
    public ITextSnapshot SourceTextSnapshot { get; }
    public int TabSize { get; }
    public ITextAndAdornmentSequencer TextAndAdornmentSequencer { get; }
    public double TextHeightAboveBaseline { get; }
    public double TextHeightBelowBaseline { get; }
    public ITextSnapshot TopTextSnapshot { get; }
    public bool UseDisplayMode { get; }
    public double WordWrapWidth { get; }
    public abstract virtual ITextSnapshot get_TopTextSnapshot();
    public abstract virtual ITextSnapshot get_SourceTextSnapshot();
    public abstract virtual ITextAndAdornmentSequencer get_TextAndAdornmentSequencer();
    public abstract virtual int get_TabSize();
    public abstract virtual double get_ColumnWidth();
    public abstract virtual double get_LineHeight();
    public abstract virtual double get_TextHeightAboveBaseline();
    public abstract virtual double get_TextHeightBelowBaseline();
    public abstract virtual double get_BaseIndentation();
    public abstract virtual double get_WordWrapWidth();
    public abstract virtual double get_MaxAutoIndent();
    public abstract virtual bool get_UseDisplayMode();
    public abstract virtual TextRunProperties get_DefaultTextProperties();
    public abstract virtual Collection`1<IFormattedLine> FormatLineInVisualBuffer(ITextSnapshotLine visualLine);
}
public interface Microsoft.VisualStudio.Text.Formatting.IFormattedTextSourceFactoryService {
    public abstract virtual IFormattedLineSource Create(ITextSnapshot sourceTextSnapshot, ITextSnapshot visualBufferSnapshot, int tabSize, double baseIndent, double wordWrapWidth, double maxAutoIndent, bool useDisplayMode, IClassifier aggregateClassifier, ITextAndAdornmentSequencer sequencer, IClassificationFormatMap classificationFormatMap);
    public abstract virtual IFormattedLineSource Create(ITextSnapshot sourceTextSnapshot, ITextSnapshot visualBufferSnapshot, int tabSize, double baseIndent, double wordWrapWidth, double maxAutoIndent, bool useDisplayMode, IClassifier aggregateClassifier, ITextAndAdornmentSequencer sequencer, IClassificationFormatMap classificationFormatMap, bool isViewWrapEnabled);
    public abstract virtual IFormattedLineSource Create(ITextSnapshot sourceTextSnapshot, ITextSnapshot visualBufferSnapshot, int tabSize, double baseIndent, double wordWrapWidth, double maxAutoIndent, bool useDisplayMode, ITextAndAdornmentSequencer sequencer, IClassificationFormatMap classificationFormatMap);
}
public interface Microsoft.VisualStudio.Text.Formatting.ILineTransformSource {
    public abstract virtual LineTransform GetLineTransform(ITextViewLine line, double yPosition, ViewRelativePosition placement);
}
public interface Microsoft.VisualStudio.Text.Formatting.ILineTransformSourceProvider {
    public abstract virtual ILineTransformSource Create(IWpfTextView textView);
}
public interface Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService {
    public abstract virtual string GenerateRtf(NormalizedSnapshotSpanCollection spans, string delimiter);
    public abstract virtual string GenerateRtf(NormalizedSnapshotSpanCollection spans);
    public abstract virtual string GenerateRtf(NormalizedSnapshotSpanCollection spans, ITextView textView, string delimiter);
    public abstract virtual string GenerateRtf(NormalizedSnapshotSpanCollection spans, ITextView textView);
}
public interface Microsoft.VisualStudio.Text.Formatting.ISequenceElement {
    public bool ShouldRenderText { get; }
    public IMappingSpan Span { get; }
    public abstract virtual IMappingSpan get_Span();
    public abstract virtual bool get_ShouldRenderText();
}
public interface Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentCollection {
    public ITextAndAdornmentSequencer Sequencer { get; }
    public abstract virtual ITextAndAdornmentSequencer get_Sequencer();
}
public interface Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer {
    public IBufferGraph BufferGraph { get; }
    public ITextBuffer SourceBuffer { get; }
    public ITextBuffer TopBuffer { get; }
    public abstract virtual IBufferGraph get_BufferGraph();
    public abstract virtual ITextBuffer get_TopBuffer();
    public abstract virtual ITextBuffer get_SourceBuffer();
    public abstract virtual ITextAndAdornmentCollection CreateTextAndAdornmentCollection(ITextSnapshotLine topLine, ITextSnapshot sourceTextSnapshot);
    public abstract virtual ITextAndAdornmentCollection CreateTextAndAdornmentCollection(SnapshotSpan topSpan, ITextSnapshot sourceTextSnapshot);
    public abstract virtual void add_SequenceChanged(EventHandler`1<TextAndAdornmentSequenceChangedEventArgs> value);
    public abstract virtual void remove_SequenceChanged(EventHandler`1<TextAndAdornmentSequenceChangedEventArgs> value);
}
public interface Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencerFactoryService {
    public abstract virtual ITextAndAdornmentSequencer Create(ITextView view);
}
public interface Microsoft.VisualStudio.Text.Formatting.ITextParagraphPropertiesFactoryService {
    public abstract virtual TextParagraphProperties Create(IFormattedLineSource formattedLineSource, TextFormattingRunProperties textProperties, IMappingSpan line, IMappingPoint lineStart, int lineSegment);
}
public interface Microsoft.VisualStudio.Text.Formatting.ITextViewLine {
    public double Baseline { get; }
    public double Bottom { get; }
    public TextViewLineChange Change { get; }
    public LineTransform DefaultLineTransform { get; }
    public double DeltaY { get; }
    public SnapshotPoint End { get; }
    public SnapshotPoint EndIncludingLineBreak { get; }
    public double EndOfLineWidth { get; }
    public SnapshotSpan Extent { get; }
    public IMappingSpan ExtentAsMappingSpan { get; }
    public SnapshotSpan ExtentIncludingLineBreak { get; }
    public IMappingSpan ExtentIncludingLineBreakAsMappingSpan { get; }
    public double Height { get; }
    public object IdentityTag { get; }
    public bool IsFirstTextViewLineForSnapshotLine { get; }
    public bool IsLastTextViewLineForSnapshotLine { get; }
    public bool IsValid { get; }
    public double Left { get; }
    public int Length { get; }
    public int LengthIncludingLineBreak { get; }
    public int LineBreakLength { get; }
    public LineTransform LineTransform { get; }
    public double Right { get; }
    public ITextSnapshot Snapshot { get; }
    public SnapshotPoint Start { get; }
    public double TextBottom { get; }
    public double TextHeight { get; }
    public double TextLeft { get; }
    public double TextRight { get; }
    public double TextTop { get; }
    public double TextWidth { get; }
    public double Top { get; }
    public double VirtualSpaceWidth { get; }
    public VisibilityState VisibilityState { get; }
    public double Width { get; }
    public abstract virtual Nullable`1<SnapshotPoint> GetBufferPositionFromXCoordinate(double xCoordinate, bool textOnly);
    public abstract virtual Nullable`1<SnapshotPoint> GetBufferPositionFromXCoordinate(double xCoordinate);
    public abstract virtual VirtualSnapshotPoint GetVirtualBufferPositionFromXCoordinate(double xCoordinate);
    public abstract virtual VirtualSnapshotPoint GetInsertionBufferPositionFromXCoordinate(double xCoordinate);
    public abstract virtual bool ContainsBufferPosition(SnapshotPoint bufferPosition);
    public abstract virtual SnapshotSpan GetTextElementSpan(SnapshotPoint bufferPosition);
    public abstract virtual TextBounds GetCharacterBounds(SnapshotPoint bufferPosition);
    public abstract virtual TextBounds GetCharacterBounds(VirtualSnapshotPoint bufferPosition);
    public abstract virtual TextBounds GetExtendedCharacterBounds(SnapshotPoint bufferPosition);
    public abstract virtual TextBounds GetExtendedCharacterBounds(VirtualSnapshotPoint bufferPosition);
    public abstract virtual Nullable`1<TextBounds> GetAdornmentBounds(object identityTag);
    public abstract virtual Collection`1<TextBounds> GetNormalizedTextBounds(SnapshotSpan bufferSpan);
    public abstract virtual object get_IdentityTag();
    public abstract virtual bool IntersectsBufferSpan(SnapshotSpan bufferSpan);
    public abstract virtual ReadOnlyCollection`1<object> GetAdornmentTags(object providerTag);
    public abstract virtual ITextSnapshot get_Snapshot();
    public abstract virtual bool get_IsFirstTextViewLineForSnapshotLine();
    public abstract virtual bool get_IsLastTextViewLineForSnapshotLine();
    public abstract virtual double get_Baseline();
    public abstract virtual SnapshotSpan get_Extent();
    public abstract virtual IMappingSpan get_ExtentAsMappingSpan();
    public abstract virtual SnapshotSpan get_ExtentIncludingLineBreak();
    public abstract virtual IMappingSpan get_ExtentIncludingLineBreakAsMappingSpan();
    public abstract virtual SnapshotPoint get_Start();
    public abstract virtual int get_Length();
    public abstract virtual int get_LengthIncludingLineBreak();
    public abstract virtual SnapshotPoint get_End();
    public abstract virtual SnapshotPoint get_EndIncludingLineBreak();
    public abstract virtual int get_LineBreakLength();
    public abstract virtual double get_Left();
    public abstract virtual double get_Top();
    public abstract virtual double get_Height();
    public abstract virtual double get_TextTop();
    public abstract virtual double get_TextBottom();
    public abstract virtual double get_TextHeight();
    public abstract virtual double get_TextLeft();
    public abstract virtual double get_TextRight();
    public abstract virtual double get_TextWidth();
    public abstract virtual double get_Width();
    public abstract virtual double get_Bottom();
    public abstract virtual double get_Right();
    public abstract virtual double get_EndOfLineWidth();
    public abstract virtual double get_VirtualSpaceWidth();
    public abstract virtual bool get_IsValid();
    public abstract virtual LineTransform get_LineTransform();
    public abstract virtual LineTransform get_DefaultLineTransform();
    public abstract virtual VisibilityState get_VisibilityState();
    public abstract virtual double get_DeltaY();
    public abstract virtual TextViewLineChange get_Change();
}
public interface Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine {
    public ReadOnlyCollection`1<TextLine> TextLines { get; }
    public Rect VisibleArea { get; }
    public abstract virtual Rect get_VisibleArea();
    public abstract virtual TextRunProperties GetCharacterFormatting(SnapshotPoint bufferPosition);
    public abstract virtual ReadOnlyCollection`1<TextLine> get_TextLines();
}
public class Microsoft.VisualStudio.Text.Formatting.LineTransform : ValueType {
    private int __Asmmeta_Private_Field;
    public double BottomSpace { get; }
    public double Right { get; }
    public double TopSpace { get; }
    public double VerticalScale { get; }
    public LineTransform(double verticalScale);
    public LineTransform(double topSpace, double bottomSpace, double verticalScale);
    public LineTransform(double topSpace, double bottomSpace, double verticalScale, double right);
    public double get_TopSpace();
    public double get_BottomSpace();
    public double get_VerticalScale();
    public double get_Right();
    public static LineTransform Combine(LineTransform transform1, LineTransform transform2);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(LineTransform transform1, LineTransform transform2);
    public static bool op_Inequality(LineTransform transform1, LineTransform transform2);
}
public class Microsoft.VisualStudio.Text.Formatting.TextAndAdornmentSequenceChangedEventArgs : EventArgs {
    public IMappingSpan Span { get; }
    public TextAndAdornmentSequenceChangedEventArgs(IMappingSpan span);
    public IMappingSpan get_Span();
}
public class Microsoft.VisualStudio.Text.Formatting.TextBounds : ValueType {
    private int __Asmmeta_Private_Field;
    public double Bottom { get; }
    public double Height { get; }
    public bool IsRightToLeft { get; }
    public double Leading { get; }
    public double Left { get; }
    public double Right { get; }
    public double TextBottom { get; }
    public double TextHeight { get; }
    public double TextTop { get; }
    public double Top { get; }
    public double Trailing { get; }
    public double Width { get; }
    public TextBounds(double leading, double top, double bidiWidth, double height, double textTop, double textHeight);
    public double get_Leading();
    public double get_Top();
    public double get_TextTop();
    public double get_Width();
    public double get_Height();
    public double get_TextHeight();
    public double get_Trailing();
    public double get_Bottom();
    public double get_TextBottom();
    public double get_Left();
    public double get_Right();
    public bool get_IsRightToLeft();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(TextBounds bounds1, TextBounds bounds2);
    public static bool op_Inequality(TextBounds bounds1, TextBounds bounds2);
}
public class Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties : TextParagraphProperties {
    public double DefaultIncrementalTab { get; }
    public TextRunProperties DefaultTextRunProperties { get; }
    public bool FirstLineInParagraph { get; }
    public FlowDirection FlowDirection { get; }
    public double Indent { get; }
    public double LineHeight { get; }
    public TextAlignment TextAlignment { get; }
    public TextMarkerProperties TextMarkerProperties { get; }
    public TextWrapping TextWrapping { get; }
    public TextFormattingParagraphProperties(TextFormattingRunProperties defaultTextRunProperties);
    public TextFormattingParagraphProperties(TextFormattingRunProperties defaultTextRunProperties, double defaultTabSize);
    public virtual double get_DefaultIncrementalTab();
    public virtual TextRunProperties get_DefaultTextRunProperties();
    public virtual bool get_FirstLineInParagraph();
    public virtual FlowDirection get_FlowDirection();
    public virtual TextAlignment get_TextAlignment();
    public virtual double get_Indent();
    public sealed virtual double get_LineHeight();
    public virtual TextMarkerProperties get_TextMarkerProperties();
    public sealed virtual TextWrapping get_TextWrapping();
}
public class Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties : TextRunProperties {
    public Brush BackgroundBrush { get; }
    public bool BackgroundBrushEmpty { get; }
    public double BackgroundOpacity { get; }
    public bool BackgroundOpacityEmpty { get; }
    public bool Bold { get; }
    public bool BoldEmpty { get; }
    public CultureInfo CultureInfo { get; }
    public bool CultureInfoEmpty { get; }
    public double FontHintingEmSize { get; }
    public bool FontHintingEmSizeEmpty { get; }
    public double FontRenderingEmSize { get; }
    public bool FontRenderingEmSizeEmpty { get; }
    public Brush ForegroundBrush { get; }
    public bool ForegroundBrushEmpty { get; }
    public double ForegroundOpacity { get; }
    public bool ForegroundOpacityEmpty { get; }
    public bool Italic { get; }
    public bool ItalicEmpty { get; }
    public TextDecorationCollection TextDecorations { get; }
    public bool TextDecorationsEmpty { get; }
    public TextEffectCollection TextEffects { get; }
    public bool TextEffectsEmpty { get; }
    public Typeface Typeface { get; }
    public bool TypefaceEmpty { get; }
    [EditorBrowsableAttribute("0")]
public static TextFormattingRunProperties CreateTextFormattingRunProperties();
    [EditorBrowsableAttribute("0")]
public static TextFormattingRunProperties CreateTextFormattingRunProperties(Typeface typeface, double size, Color foreground);
    [EditorBrowsableAttribute("2")]
public static TextFormattingRunProperties CreateTextFormattingRunProperties(Brush foreground, Brush background, Typeface typeface, Nullable`1<double> size, Nullable`1<double> hintingSize, TextDecorationCollection textDecorations, TextEffectCollection textEffects, CultureInfo cultureInfo);
    public virtual Brush get_BackgroundBrush();
    public virtual CultureInfo get_CultureInfo();
    public virtual double get_FontHintingEmSize();
    public virtual double get_FontRenderingEmSize();
    public virtual Brush get_ForegroundBrush();
    public bool get_Italic();
    public bool get_Bold();
    public double get_ForegroundOpacity();
    public double get_BackgroundOpacity();
    public virtual TextDecorationCollection get_TextDecorations();
    public virtual TextEffectCollection get_TextEffects();
    public virtual Typeface get_Typeface();
    public bool get_BackgroundBrushEmpty();
    public bool get_BackgroundOpacityEmpty();
    public bool get_ForegroundOpacityEmpty();
    public bool get_BoldEmpty();
    public bool get_ItalicEmpty();
    public bool get_CultureInfoEmpty();
    public bool get_FontHintingEmSizeEmpty();
    public bool get_FontRenderingEmSizeEmpty();
    public bool get_ForegroundBrushEmpty();
    public bool get_TextDecorationsEmpty();
    public bool get_TextEffectsEmpty();
    public bool get_TypefaceEmpty();
    public TextFormattingRunProperties ClearBold();
    public TextFormattingRunProperties ClearItalic();
    public TextFormattingRunProperties ClearForegroundOpacity();
    public TextFormattingRunProperties ClearBackgroundOpacity();
    public TextFormattingRunProperties ClearBackgroundBrush();
    public TextFormattingRunProperties ClearCultureInfo();
    public TextFormattingRunProperties ClearFontHintingEmSize();
    public TextFormattingRunProperties ClearFontRenderingEmSize();
    public TextFormattingRunProperties ClearForegroundBrush();
    public TextFormattingRunProperties ClearTextDecorations();
    public TextFormattingRunProperties ClearTextEffects();
    public TextFormattingRunProperties ClearTypeface();
    public TextFormattingRunProperties SetBackgroundBrush(Brush brush);
    public TextFormattingRunProperties SetBackground(Color background);
    public TextFormattingRunProperties SetCultureInfo(CultureInfo cultureInfo);
    public TextFormattingRunProperties SetFontHintingEmSize(double hintingSize);
    public TextFormattingRunProperties SetFontRenderingEmSize(double renderingSize);
    public TextFormattingRunProperties SetForegroundBrush(Brush brush);
    public TextFormattingRunProperties SetForeground(Color foreground);
    public TextFormattingRunProperties SetTextDecorations(TextDecorationCollection textDecorations);
    public TextFormattingRunProperties SetTextEffects(TextEffectCollection textEffects);
    public TextFormattingRunProperties SetTypeface(Typeface typeface);
    public TextFormattingRunProperties SetForegroundOpacity(double opacity);
    public TextFormattingRunProperties SetBackgroundOpacity(double opacity);
    public TextFormattingRunProperties SetBold(bool isBold);
    public TextFormattingRunProperties SetItalic(bool isItalic);
    public bool ForegroundBrushSame(Brush brush);
    public bool BackgroundBrushSame(Brush brush);
    public bool SameSize(TextFormattingRunProperties other);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual object GetRealObject(StreamingContext context);
}
public enum Microsoft.VisualStudio.Text.Formatting.TextViewLineChange : Enum {
    public int value__;
    public static TextViewLineChange NewOrReformatted;
    public static TextViewLineChange None;
    public static TextViewLineChange Translated;
}
public enum Microsoft.VisualStudio.Text.Formatting.VisibilityState : Enum {
    public int value__;
    public static VisibilityState FullyVisible;
    public static VisibilityState Hidden;
    public static VisibilityState PartiallyVisible;
    public static VisibilityState Unattached;
}
public interface Microsoft.VisualStudio.Text.IEncodingDetector {
    public abstract virtual Encoding GetStreamEncoding(Stream stream);
}
public interface Microsoft.VisualStudio.Text.IExtensionErrorHandler {
    public abstract virtual void HandleError(object sender, Exception exception);
}
public interface Microsoft.VisualStudio.Text.IMappingPoint {
    public ITextBuffer AnchorBuffer { get; }
    public IBufferGraph BufferGraph { get; }
    public abstract virtual Nullable`1<SnapshotPoint> GetPoint(ITextBuffer targetBuffer, PositionAffinity affinity);
    public abstract virtual Nullable`1<SnapshotPoint> GetPoint(ITextSnapshot targetSnapshot, PositionAffinity affinity);
    public abstract virtual Nullable`1<SnapshotPoint> GetPoint(Predicate`1<ITextBuffer> match, PositionAffinity affinity);
    public abstract virtual Nullable`1<SnapshotPoint> GetInsertionPoint(Predicate`1<ITextBuffer> match);
    public abstract virtual ITextBuffer get_AnchorBuffer();
    public abstract virtual IBufferGraph get_BufferGraph();
}
public interface Microsoft.VisualStudio.Text.IMappingSpan {
    public ITextBuffer AnchorBuffer { get; }
    public IBufferGraph BufferGraph { get; }
    public IMappingPoint End { get; }
    public IMappingPoint Start { get; }
    public abstract virtual NormalizedSnapshotSpanCollection GetSpans(ITextBuffer targetBuffer);
    public abstract virtual NormalizedSnapshotSpanCollection GetSpans(ITextSnapshot targetSnapshot);
    public abstract virtual NormalizedSnapshotSpanCollection GetSpans(Predicate`1<ITextBuffer> match);
    public abstract virtual IMappingPoint get_Start();
    public abstract virtual IMappingPoint get_End();
    public abstract virtual ITextBuffer get_AnchorBuffer();
    public abstract virtual IBufferGraph get_BufferGraph();
}
public interface Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch {
    public bool IsActive { get; }
    public IncrementalSearchDirection SearchDirection { get; public set; }
    public string SearchString { get; public set; }
    public ITextView TextView { get; }
    public abstract virtual void Start();
    public abstract virtual void Dismiss();
    public abstract virtual IncrementalSearchResult AppendCharAndSearch(char toAppend);
    public abstract virtual IncrementalSearchResult DeleteCharAndSearch();
    public abstract virtual IncrementalSearchResult SelectNextResult();
    public abstract virtual void Clear();
    public abstract virtual string get_SearchString();
    public abstract virtual void set_SearchString(string value);
    public abstract virtual bool get_IsActive();
    public abstract virtual IncrementalSearchDirection get_SearchDirection();
    public abstract virtual void set_SearchDirection(IncrementalSearchDirection value);
    public abstract virtual ITextView get_TextView();
}
public interface Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearchFactoryService {
    public abstract virtual IIncrementalSearch GetIncrementalSearch(ITextView textView);
}
public enum Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchDirection : Enum {
    public int value__;
    public static IncrementalSearchDirection Backward;
    public static IncrementalSearchDirection Forward;
}
public class Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult : ValueType {
    private int __Asmmeta_Private_Field;
    public bool PassedEndOfBuffer { get; }
    public bool PassedStartOfBuffer { get; }
    public bool PassedStartOfSearch { get; }
    public bool ResultFound { get; }
    public IncrementalSearchResult(bool passedEndOfBuffer, bool passedStartOfBuffer, bool passedStartOfSearch, bool resultFound);
    public bool get_PassedStartOfBuffer();
    public bool get_PassedEndOfBuffer();
    public bool get_PassedStartOfSearch();
    public bool get_ResultFound();
    public virtual bool Equals(object obj);
    public static bool op_Equality(IncrementalSearchResult first, IncrementalSearchResult second);
    public static bool op_Inequality(IncrementalSearchResult first, IncrementalSearchResult second);
    public virtual int GetHashCode();
}
public interface Microsoft.VisualStudio.Text.INormalizedTextChangeCollection {
    public bool IncludesLineChanges { get; }
    public abstract virtual bool get_IncludesLineChanges();
}
public interface Microsoft.VisualStudio.Text.IReadOnlyRegion {
    public EdgeInsertionMode EdgeInsertionMode { get; }
    public DynamicReadOnlyRegionQuery QueryCallback { get; }
    public ITrackingSpan Span { get; }
    public abstract virtual EdgeInsertionMode get_EdgeInsertionMode();
    public abstract virtual ITrackingSpan get_Span();
    public abstract virtual DynamicReadOnlyRegionQuery get_QueryCallback();
}
public interface Microsoft.VisualStudio.Text.IReadOnlyRegionEdit {
    public abstract virtual IReadOnlyRegion CreateReadOnlyRegion(Span span);
    public abstract virtual IReadOnlyRegion CreateReadOnlyRegion(Span span, SpanTrackingMode trackingMode, EdgeInsertionMode edgeInsertionMode);
    public abstract virtual IReadOnlyRegion CreateDynamicReadOnlyRegion(Span span, SpanTrackingMode trackingMode, EdgeInsertionMode edgeInsertionMode, DynamicReadOnlyRegionQuery callback);
    public abstract virtual void RemoveReadOnlyRegion(IReadOnlyRegion readOnlyRegion);
}
public interface Microsoft.VisualStudio.Text.ITextBuffer {
    public IContentType ContentType { get; }
    public ITextSnapshot CurrentSnapshot { get; }
    public bool EditInProgress { get; }
    public abstract virtual IContentType get_ContentType();
    public abstract virtual ITextSnapshot get_CurrentSnapshot();
    public abstract virtual ITextEdit CreateEdit(EditOptions options, Nullable`1<int> reiteratedVersionNumber, object editTag);
    public abstract virtual ITextEdit CreateEdit();
    public abstract virtual IReadOnlyRegionEdit CreateReadOnlyRegionEdit();
    public abstract virtual bool get_EditInProgress();
    public abstract virtual void TakeThreadOwnership();
    public abstract virtual bool CheckEditAccess();
    public abstract virtual void add_ReadOnlyRegionsChanged(EventHandler`1<SnapshotSpanEventArgs> value);
    public abstract virtual void remove_ReadOnlyRegionsChanged(EventHandler`1<SnapshotSpanEventArgs> value);
    public abstract virtual void add_Changed(EventHandler`1<TextContentChangedEventArgs> value);
    public abstract virtual void remove_Changed(EventHandler`1<TextContentChangedEventArgs> value);
    public abstract virtual void add_ChangedLowPriority(EventHandler`1<TextContentChangedEventArgs> value);
    public abstract virtual void remove_ChangedLowPriority(EventHandler`1<TextContentChangedEventArgs> value);
    public abstract virtual void add_ChangedHighPriority(EventHandler`1<TextContentChangedEventArgs> value);
    public abstract virtual void remove_ChangedHighPriority(EventHandler`1<TextContentChangedEventArgs> value);
    public abstract virtual void add_Changing(EventHandler`1<TextContentChangingEventArgs> value);
    public abstract virtual void remove_Changing(EventHandler`1<TextContentChangingEventArgs> value);
    public abstract virtual void add_PostChanged(EventHandler value);
    public abstract virtual void remove_PostChanged(EventHandler value);
    public abstract virtual void add_ContentTypeChanged(EventHandler`1<ContentTypeChangedEventArgs> value);
    public abstract virtual void remove_ContentTypeChanged(EventHandler`1<ContentTypeChangedEventArgs> value);
    public abstract virtual void ChangeContentType(IContentType newContentType, object editTag);
    public abstract virtual ITextSnapshot Insert(int position, string text);
    public abstract virtual ITextSnapshot Delete(Span deleteSpan);
    public abstract virtual ITextSnapshot Replace(Span replaceSpan, string replaceWith);
    public abstract virtual bool IsReadOnly(int position);
    public abstract virtual bool IsReadOnly(int position, bool isEdit);
    public abstract virtual bool IsReadOnly(Span span);
    public abstract virtual bool IsReadOnly(Span span, bool isEdit);
    public abstract virtual NormalizedSpanCollection GetReadOnlyExtents(Span span);
}
public interface Microsoft.VisualStudio.Text.ITextBufferEdit {
    public bool Canceled { get; }
    public ITextSnapshot Snapshot { get; }
    public abstract virtual ITextSnapshot get_Snapshot();
    public abstract virtual ITextSnapshot Apply();
    public abstract virtual void Cancel();
    public abstract virtual bool get_Canceled();
}
public interface Microsoft.VisualStudio.Text.ITextBufferFactoryService {
    public IContentType InertContentType { get; }
    public IContentType PlaintextContentType { get; }
    public IContentType TextContentType { get; }
    public abstract virtual IContentType get_TextContentType();
    public abstract virtual IContentType get_PlaintextContentType();
    public abstract virtual IContentType get_InertContentType();
    public abstract virtual ITextBuffer CreateTextBuffer();
    public abstract virtual ITextBuffer CreateTextBuffer(IContentType contentType);
    public abstract virtual ITextBuffer CreateTextBuffer(string text, IContentType contentType);
    public abstract virtual ITextBuffer CreateTextBuffer(TextReader reader, IContentType contentType);
    public abstract virtual void add_TextBufferCreated(EventHandler`1<TextBufferCreatedEventArgs> value);
    public abstract virtual void remove_TextBufferCreated(EventHandler`1<TextBufferCreatedEventArgs> value);
}
public interface Microsoft.VisualStudio.Text.ITextChange {
    public int Delta { get; }
    public int LineCountDelta { get; }
    public int NewEnd { get; }
    public int NewLength { get; }
    public int NewPosition { get; }
    public Span NewSpan { get; }
    public string NewText { get; }
    public int OldEnd { get; }
    public int OldLength { get; }
    public int OldPosition { get; }
    public Span OldSpan { get; }
    public string OldText { get; }
    public abstract virtual Span get_OldSpan();
    public abstract virtual Span get_NewSpan();
    public abstract virtual int get_OldPosition();
    public abstract virtual int get_NewPosition();
    public abstract virtual int get_Delta();
    public abstract virtual int get_OldEnd();
    public abstract virtual int get_NewEnd();
    public abstract virtual string get_OldText();
    public abstract virtual string get_NewText();
    public abstract virtual int get_OldLength();
    public abstract virtual int get_NewLength();
    public abstract virtual int get_LineCountDelta();
}
public interface Microsoft.VisualStudio.Text.ITextDataModel {
    public IContentType ContentType { get; }
    public ITextBuffer DataBuffer { get; }
    public ITextBuffer DocumentBuffer { get; }
    public abstract virtual IContentType get_ContentType();
    public abstract virtual void add_ContentTypeChanged(EventHandler`1<TextDataModelContentTypeChangedEventArgs> value);
    public abstract virtual void remove_ContentTypeChanged(EventHandler`1<TextDataModelContentTypeChangedEventArgs> value);
    public abstract virtual ITextBuffer get_DocumentBuffer();
    public abstract virtual ITextBuffer get_DataBuffer();
}
public interface Microsoft.VisualStudio.Text.ITextDocument {
    public Encoding Encoding { get; public set; }
    public string FilePath { get; }
    public bool IsDirty { get; }
    public bool IsReloading { get; }
    public DateTime LastContentModifiedTime { get; }
    public DateTime LastSavedTime { get; }
    public ITextBuffer TextBuffer { get; }
    public abstract virtual string get_FilePath();
    public abstract virtual ITextBuffer get_TextBuffer();
    public abstract virtual bool get_IsDirty();
    public abstract virtual DateTime get_LastSavedTime();
    public abstract virtual DateTime get_LastContentModifiedTime();
    public abstract virtual Encoding get_Encoding();
    public abstract virtual void set_Encoding(Encoding value);
    public abstract virtual void SetEncoderFallback(EncoderFallback fallback);
    public abstract virtual void add_EncodingChanged(EventHandler`1<EncodingChangedEventArgs> value);
    public abstract virtual void remove_EncodingChanged(EventHandler`1<EncodingChangedEventArgs> value);
    public abstract virtual void add_FileActionOccurred(EventHandler`1<TextDocumentFileActionEventArgs> value);
    public abstract virtual void remove_FileActionOccurred(EventHandler`1<TextDocumentFileActionEventArgs> value);
    public abstract virtual void add_DirtyStateChanged(EventHandler value);
    public abstract virtual void remove_DirtyStateChanged(EventHandler value);
    public abstract virtual void Rename(string newFilePath);
    public abstract virtual ReloadResult Reload();
    public abstract virtual ReloadResult Reload(EditOptions options);
    public abstract virtual bool get_IsReloading();
    public abstract virtual void Save();
    public abstract virtual void SaveAs(string filePath, bool overwrite);
    public abstract virtual void SaveAs(string filePath, bool overwrite, bool createFolder);
    public abstract virtual void SaveAs(string filePath, bool overwrite, IContentType newContentType);
    public abstract virtual void SaveAs(string filePath, bool overwrite, bool createFolder, IContentType newContentType);
    public abstract virtual void SaveCopy(string filePath, bool overwrite);
    public abstract virtual void SaveCopy(string filePath, bool overwrite, bool createFolder);
    public abstract virtual void UpdateDirtyState(bool isDirty, DateTime lastContentModifiedTime);
}
public interface Microsoft.VisualStudio.Text.ITextDocumentFactoryService {
    public abstract virtual ITextDocument CreateAndLoadTextDocument(string filePath, IContentType contentType);
    public abstract virtual ITextDocument CreateAndLoadTextDocument(string filePath, IContentType contentType, Encoding encoding, Boolean& characterSubstitutionsOccurred);
    public abstract virtual ITextDocument CreateAndLoadTextDocument(string filePath, IContentType contentType, bool attemptUtf8Detection, Boolean& characterSubstitutionsOccurred);
    public abstract virtual ITextDocument CreateTextDocument(ITextBuffer textBuffer, string filePath);
    public abstract virtual bool TryGetTextDocument(ITextBuffer textBuffer, ITextDocument& textDocument);
    public abstract virtual void add_TextDocumentCreated(EventHandler`1<TextDocumentEventArgs> value);
    public abstract virtual void remove_TextDocumentCreated(EventHandler`1<TextDocumentEventArgs> value);
    public abstract virtual void add_TextDocumentDisposed(EventHandler`1<TextDocumentEventArgs> value);
    public abstract virtual void remove_TextDocumentDisposed(EventHandler`1<TextDocumentEventArgs> value);
}
public interface Microsoft.VisualStudio.Text.ITextEdit {
    public bool HasEffectiveChanges { get; }
    public bool HasFailedChanges { get; }
    public abstract virtual bool Insert(int position, string text);
    public abstract virtual bool Insert(int position, Char[] characterBuffer, int startIndex, int length);
    public abstract virtual bool Delete(Span deleteSpan);
    public abstract virtual bool Delete(int startPosition, int charsToDelete);
    public abstract virtual bool Replace(Span replaceSpan, string replaceWith);
    public abstract virtual bool Replace(int startPosition, int charsToReplace, string replaceWith);
    public abstract virtual bool get_HasEffectiveChanges();
    public abstract virtual bool get_HasFailedChanges();
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.VisualStudio.Text.ITextSnapshot {
    public IContentType ContentType { get; }
    public char Item { get; }
    public int Length { get; }
    public int LineCount { get; }
    public IEnumerable`1<ITextSnapshotLine> Lines { get; }
    public ITextBuffer TextBuffer { get; }
    public ITextVersion Version { get; }
    public abstract virtual ITextBuffer get_TextBuffer();
    public abstract virtual IContentType get_ContentType();
    public abstract virtual ITextVersion get_Version();
    public abstract virtual int get_Length();
    public abstract virtual int get_LineCount();
    public abstract virtual string GetText(Span span);
    public abstract virtual string GetText(int startIndex, int length);
    public abstract virtual string GetText();
    public abstract virtual Char[] ToCharArray(int startIndex, int length);
    public abstract virtual void CopyTo(int sourceIndex, Char[] destination, int destinationIndex, int count);
    public abstract virtual char get_Item(int position);
    public abstract virtual ITrackingPoint CreateTrackingPoint(int position, PointTrackingMode trackingMode);
    public abstract virtual ITrackingPoint CreateTrackingPoint(int position, PointTrackingMode trackingMode, TrackingFidelityMode trackingFidelity);
    public abstract virtual ITrackingSpan CreateTrackingSpan(Span span, SpanTrackingMode trackingMode);
    public abstract virtual ITrackingSpan CreateTrackingSpan(Span span, SpanTrackingMode trackingMode, TrackingFidelityMode trackingFidelity);
    public abstract virtual ITrackingSpan CreateTrackingSpan(int start, int length, SpanTrackingMode trackingMode);
    public abstract virtual ITrackingSpan CreateTrackingSpan(int start, int length, SpanTrackingMode trackingMode, TrackingFidelityMode trackingFidelity);
    public abstract virtual ITextSnapshotLine GetLineFromLineNumber(int lineNumber);
    public abstract virtual ITextSnapshotLine GetLineFromPosition(int position);
    public abstract virtual int GetLineNumberFromPosition(int position);
    public abstract virtual IEnumerable`1<ITextSnapshotLine> get_Lines();
    public abstract virtual void Write(TextWriter writer, Span span);
    public abstract virtual void Write(TextWriter writer);
}
public interface Microsoft.VisualStudio.Text.ITextSnapshotLine {
    public SnapshotPoint End { get; }
    public SnapshotPoint EndIncludingLineBreak { get; }
    public SnapshotSpan Extent { get; }
    public SnapshotSpan ExtentIncludingLineBreak { get; }
    public int Length { get; }
    public int LengthIncludingLineBreak { get; }
    public int LineBreakLength { get; }
    public int LineNumber { get; }
    public ITextSnapshot Snapshot { get; }
    public SnapshotPoint Start { get; }
    public abstract virtual ITextSnapshot get_Snapshot();
    public abstract virtual SnapshotSpan get_Extent();
    public abstract virtual SnapshotSpan get_ExtentIncludingLineBreak();
    public abstract virtual int get_LineNumber();
    public abstract virtual SnapshotPoint get_Start();
    public abstract virtual int get_Length();
    public abstract virtual int get_LengthIncludingLineBreak();
    public abstract virtual SnapshotPoint get_End();
    public abstract virtual SnapshotPoint get_EndIncludingLineBreak();
    public abstract virtual int get_LineBreakLength();
    public abstract virtual string GetText();
    public abstract virtual string GetTextIncludingLineBreak();
    public abstract virtual string GetLineBreakText();
}
public interface Microsoft.VisualStudio.Text.ITextVersion {
    public INormalizedTextChangeCollection Changes { get; }
    public int Length { get; }
    public ITextVersion Next { get; }
    public int ReiteratedVersionNumber { get; }
    public ITextBuffer TextBuffer { get; }
    public int VersionNumber { get; }
    public abstract virtual ITextVersion get_Next();
    public abstract virtual int get_Length();
    public abstract virtual INormalizedTextChangeCollection get_Changes();
    public abstract virtual ITrackingPoint CreateTrackingPoint(int position, PointTrackingMode trackingMode);
    public abstract virtual ITrackingPoint CreateTrackingPoint(int position, PointTrackingMode trackingMode, TrackingFidelityMode trackingFidelity);
    public abstract virtual ITrackingSpan CreateTrackingSpan(Span span, SpanTrackingMode trackingMode);
    public abstract virtual ITrackingSpan CreateTrackingSpan(Span span, SpanTrackingMode trackingMode, TrackingFidelityMode trackingFidelity);
    public abstract virtual ITrackingSpan CreateTrackingSpan(int start, int length, SpanTrackingMode trackingMode);
    public abstract virtual ITrackingSpan CreateTrackingSpan(int start, int length, SpanTrackingMode trackingMode, TrackingFidelityMode trackingFidelity);
    public abstract virtual ITrackingSpan CreateCustomTrackingSpan(Span span, TrackingFidelityMode trackingFidelity, object customState, CustomTrackToVersion behavior);
    public abstract virtual ITextBuffer get_TextBuffer();
    public abstract virtual int get_VersionNumber();
    public abstract virtual int get_ReiteratedVersionNumber();
}
public interface Microsoft.VisualStudio.Text.ITrackingPoint {
    public ITextBuffer TextBuffer { get; }
    public TrackingFidelityMode TrackingFidelity { get; }
    public PointTrackingMode TrackingMode { get; }
    public abstract virtual ITextBuffer get_TextBuffer();
    public abstract virtual PointTrackingMode get_TrackingMode();
    public abstract virtual TrackingFidelityMode get_TrackingFidelity();
    public abstract virtual SnapshotPoint GetPoint(ITextSnapshot snapshot);
    public abstract virtual int GetPosition(ITextSnapshot snapshot);
    public abstract virtual int GetPosition(ITextVersion version);
    public abstract virtual char GetCharacter(ITextSnapshot snapshot);
}
public interface Microsoft.VisualStudio.Text.ITrackingSpan {
    public ITextBuffer TextBuffer { get; }
    public TrackingFidelityMode TrackingFidelity { get; }
    public SpanTrackingMode TrackingMode { get; }
    public abstract virtual ITextBuffer get_TextBuffer();
    public abstract virtual SpanTrackingMode get_TrackingMode();
    public abstract virtual TrackingFidelityMode get_TrackingFidelity();
    public abstract virtual SnapshotSpan GetSpan(ITextSnapshot snapshot);
    public abstract virtual Span GetSpan(ITextVersion version);
    public abstract virtual string GetText(ITextSnapshot snapshot);
    public abstract virtual SnapshotPoint GetStartPoint(ITextSnapshot snapshot);
    public abstract virtual SnapshotPoint GetEndPoint(ITextSnapshot snapshot);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection : object {
    public int Count { get; }
    public SnapshotSpan Item { get; public set; }
    private bool System.Collections.Generic.ICollection<Microsoft.VisualStudio.Text.SnapshotSpan>.IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public NormalizedSnapshotSpanCollection(SnapshotSpan span);
    public NormalizedSnapshotSpanCollection(ITextSnapshot snapshot, NormalizedSpanCollection spans);
    public NormalizedSnapshotSpanCollection(ITextSnapshot snapshot, IEnumerable`1<Span> spans);
    public NormalizedSnapshotSpanCollection(IEnumerable`1<SnapshotSpan> snapshotSpans);
    public static NormalizedSpanCollection op_Implicit(NormalizedSnapshotSpanCollection spans);
    public static NormalizedSnapshotSpanCollection Union(NormalizedSnapshotSpanCollection left, NormalizedSnapshotSpanCollection right);
    public static NormalizedSnapshotSpanCollection Overlap(NormalizedSnapshotSpanCollection left, NormalizedSnapshotSpanCollection right);
    public static NormalizedSnapshotSpanCollection Intersection(NormalizedSnapshotSpanCollection left, NormalizedSnapshotSpanCollection right);
    public static NormalizedSnapshotSpanCollection Difference(NormalizedSnapshotSpanCollection left, NormalizedSnapshotSpanCollection right);
    public bool OverlapsWith(NormalizedSnapshotSpanCollection set);
    public bool IntersectsWith(NormalizedSnapshotSpanCollection set);
    public sealed virtual int IndexOf(SnapshotSpan item);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.VisualStudio.Text.SnapshotSpan>.Insert(int index, SnapshotSpan item);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.VisualStudio.Text.SnapshotSpan>.RemoveAt(int index);
    public sealed virtual SnapshotSpan get_Item(int index);
    public sealed virtual void set_Item(int index, SnapshotSpan value);
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.VisualStudio.Text.SnapshotSpan>.Add(SnapshotSpan item);
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.VisualStudio.Text.SnapshotSpan>.Clear();
    public sealed virtual bool Contains(SnapshotSpan item);
    public sealed virtual void CopyTo(SnapshotSpan[] array, int arrayIndex);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<Microsoft.VisualStudio.Text.SnapshotSpan>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<Microsoft.VisualStudio.Text.SnapshotSpan>.Remove(SnapshotSpan item);
    public sealed virtual IEnumerator`1<SnapshotSpan> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public static bool op_Equality(NormalizedSnapshotSpanCollection left, NormalizedSnapshotSpanCollection right);
    public static bool op_Inequality(NormalizedSnapshotSpanCollection left, NormalizedSnapshotSpanCollection right);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
public class Microsoft.VisualStudio.Text.NormalizedSpanCollection : ReadOnlyCollection`1<Span> {
    public NormalizedSpanCollection(Span span);
    public NormalizedSpanCollection(IEnumerable`1<Span> spans);
    public static NormalizedSpanCollection Union(NormalizedSpanCollection left, NormalizedSpanCollection right);
    public static NormalizedSpanCollection Overlap(NormalizedSpanCollection left, NormalizedSpanCollection right);
    public static NormalizedSpanCollection Intersection(NormalizedSpanCollection left, NormalizedSpanCollection right);
    public static NormalizedSpanCollection Difference(NormalizedSpanCollection left, NormalizedSpanCollection right);
    public static bool op_Equality(NormalizedSpanCollection left, NormalizedSpanCollection right);
    public static bool op_Inequality(NormalizedSpanCollection left, NormalizedSpanCollection right);
    public bool OverlapsWith(NormalizedSpanCollection set);
    public bool IntersectsWith(NormalizedSpanCollection set);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
public class Microsoft.VisualStudio.Text.Operations.FindData : ValueType {
    private int __Asmmeta_Private_Field;
    public FindOptions FindOptions { get; public set; }
    public string SearchString { get; public set; }
    public ITextSnapshot TextSnapshotToSearch { get; public set; }
    public ITextStructureNavigator TextStructureNavigator { get; public set; }
    public FindData(string searchPattern, ITextSnapshot textSnapshot, FindOptions findOptions, ITextStructureNavigator textStructureNavigator);
    public FindData(string searchPattern, ITextSnapshot textSnapshot);
    public string get_SearchString();
    public void set_SearchString(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(FindData data1, FindData data2);
    public static bool op_Inequality(FindData data1, FindData data2);
    public FindOptions get_FindOptions();
    public void set_FindOptions(FindOptions value);
    public ITextSnapshot get_TextSnapshotToSearch();
    public void set_TextSnapshotToSearch(ITextSnapshot value);
    public ITextStructureNavigator get_TextStructureNavigator();
    public void set_TextStructureNavigator(ITextStructureNavigator value);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Text.Operations.FindOptions : Enum {
    public int value__;
    public static FindOptions MatchCase;
    public static FindOptions None;
    public static FindOptions SearchReverse;
    public static FindOptions UseRegularExpressions;
    public static FindOptions WholeWord;
}
public interface Microsoft.VisualStudio.Text.Operations.IEditorOperations {
    public bool CanCut { get; }
    public bool CanDelete { get; }
    public bool CanPaste { get; }
    public IEditorOptions Options { get; }
    public ITrackingSpan ProvisionalCompositionSpan { get; }
    public string SelectedText { get; }
    public ITextView TextView { get; }
    public abstract virtual void SelectAndMoveCaret(VirtualSnapshotPoint anchorPoint, VirtualSnapshotPoint activePoint);
    public abstract virtual void SelectAndMoveCaret(VirtualSnapshotPoint anchorPoint, VirtualSnapshotPoint activePoint, TextSelectionMode selectionMode);
    public abstract virtual void SelectAndMoveCaret(VirtualSnapshotPoint anchorPoint, VirtualSnapshotPoint activePoint, TextSelectionMode selectionMode, Nullable`1<EnsureSpanVisibleOptions> scrollOptions);
    public abstract virtual void MoveToNextCharacter(bool extendSelection);
    public abstract virtual void MoveToPreviousCharacter(bool extendSelection);
    public abstract virtual void MoveToNextWord(bool extendSelection);
    public abstract virtual void MoveToPreviousWord(bool extendSelection);
    public abstract virtual void MoveLineUp(bool extendSelection);
    public abstract virtual void MoveLineDown(bool extendSelection);
    public abstract virtual void PageUp(bool extendSelection);
    public abstract virtual void PageDown(bool extendSelection);
    public abstract virtual void MoveToEndOfLine(bool extendSelection);
    public abstract virtual void MoveToStartOfLine(bool extendSelection);
    public abstract virtual void MoveToHome(bool extendSelection);
    public abstract virtual void GotoLine(int lineNumber);
    public abstract virtual void MoveToStartOfDocument(bool extendSelection);
    public abstract virtual void MoveToEndOfDocument(bool extendSelection);
    public abstract virtual void MoveCurrentLineToTop();
    public abstract virtual void MoveCurrentLineToBottom();
    public abstract virtual void MoveToStartOfLineAfterWhiteSpace(bool extendSelection);
    public abstract virtual void MoveToStartOfNextLineAfterWhiteSpace(bool extendSelection);
    public abstract virtual void MoveToStartOfPreviousLineAfterWhiteSpace(bool extendSelection);
    public abstract virtual void MoveToLastNonWhiteSpaceCharacter(bool extendSelection);
    public abstract virtual void MoveToTopOfView(bool extendSelection);
    public abstract virtual void MoveToBottomOfView(bool extendSelection);
    public abstract virtual void SwapCaretAndAnchor();
    public abstract virtual bool Backspace();
    public abstract virtual bool DeleteWordToRight();
    public abstract virtual bool DeleteWordToLeft();
    public abstract virtual bool DeleteToEndOfLine();
    public abstract virtual bool DeleteToBeginningOfLine();
    public abstract virtual bool DeleteBlankLines();
    public abstract virtual bool DeleteHorizontalWhiteSpace();
    public abstract virtual bool InsertNewLine();
    public abstract virtual bool OpenLineAbove();
    public abstract virtual bool OpenLineBelow();
    public abstract virtual bool Indent();
    public abstract virtual bool Unindent();
    public abstract virtual bool IncreaseLineIndent();
    public abstract virtual bool DecreaseLineIndent();
    public abstract virtual bool InsertText(string text);
    public abstract virtual bool InsertTextAsBox(string text, VirtualSnapshotPoint& boxStart, VirtualSnapshotPoint& boxEnd);
    public abstract virtual bool InsertProvisionalText(string text);
    public abstract virtual bool Delete();
    public abstract virtual bool DeleteFullLine();
    public abstract virtual bool ReplaceSelection(string text);
    public abstract virtual bool TransposeCharacter();
    public abstract virtual bool TransposeLine();
    public abstract virtual bool TransposeWord();
    public abstract virtual bool MakeLowercase();
    public abstract virtual bool MakeUppercase();
    public abstract virtual bool ToggleCase();
    public abstract virtual bool Capitalize();
    public abstract virtual bool ReplaceText(Span replaceSpan, string text);
    public abstract virtual int ReplaceAllMatches(string searchText, string replaceText, bool matchCase, bool matchWholeWord, bool useRegularExpressions);
    public abstract virtual bool InsertFile(string filePath);
    public abstract virtual bool Tabify();
    public abstract virtual bool Untabify();
    public abstract virtual bool ConvertSpacesToTabs();
    public abstract virtual bool ConvertTabsToSpaces();
    public abstract virtual bool NormalizeLineEndings(string replacement);
    public abstract virtual void SelectCurrentWord();
    public abstract virtual void SelectEnclosing();
    public abstract virtual void SelectFirstChild();
    public abstract virtual void SelectNextSibling(bool extendSelection);
    public abstract virtual void SelectPreviousSibling(bool extendSelection);
    public abstract virtual void SelectLine(ITextViewLine viewLine, bool extendSelection);
    public abstract virtual void SelectAll();
    public abstract virtual void ExtendSelection(int newEnd);
    public abstract virtual void MoveCaret(ITextViewLine textLine, double horizontalOffset, bool extendSelection);
    public abstract virtual void ResetSelection();
    public abstract virtual bool CopySelection();
    public abstract virtual bool CutSelection();
    public abstract virtual bool Paste();
    public abstract virtual bool CutFullLine();
    public abstract virtual bool get_CanPaste();
    public abstract virtual bool get_CanDelete();
    public abstract virtual bool get_CanCut();
    public abstract virtual void ScrollUpAndMoveCaretIfNecessary();
    public abstract virtual void ScrollDownAndMoveCaretIfNecessary();
    public abstract virtual void ScrollPageUp();
    public abstract virtual void ScrollPageDown();
    public abstract virtual void ScrollColumnLeft();
    public abstract virtual void ScrollColumnRight();
    public abstract virtual void ScrollLineBottom();
    public abstract virtual void ScrollLineTop();
    public abstract virtual void ScrollLineCenter();
    public abstract virtual void AddBeforeTextBufferChangePrimitive();
    public abstract virtual void AddAfterTextBufferChangePrimitive();
    public abstract virtual void ZoomIn();
    public abstract virtual void ZoomOut();
    public abstract virtual void ZoomTo(double zoomLevel);
    public abstract virtual string GetWhitespaceForVirtualSpace(VirtualSnapshotPoint point);
    public abstract virtual ITextView get_TextView();
    public abstract virtual IEditorOptions get_Options();
    public abstract virtual ITrackingSpan get_ProvisionalCompositionSpan();
    public abstract virtual string get_SelectedText();
}
public interface Microsoft.VisualStudio.Text.Operations.IEditorOperationsFactoryService {
    public abstract virtual IEditorOperations GetEditorOperations(ITextView textView);
}
public interface Microsoft.VisualStudio.Text.Operations.IMergeTextUndoTransactionPolicy {
    public abstract virtual bool TestCompatiblePolicy(IMergeTextUndoTransactionPolicy other);
    public abstract virtual bool CanMerge(ITextUndoTransaction newerTransaction, ITextUndoTransaction olderTransaction);
    public abstract virtual void PerformTransactionMerge(ITextUndoTransaction existingTransaction, ITextUndoTransaction newTransaction);
}
public interface Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager {
    public ITextBuffer TextBuffer { get; }
    public ITextUndoHistory TextBufferUndoHistory { get; }
    public abstract virtual ITextBuffer get_TextBuffer();
    public abstract virtual ITextUndoHistory get_TextBufferUndoHistory();
    public abstract virtual void UnregisterUndoHistory();
}
public interface Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManagerProvider {
    public abstract virtual ITextBufferUndoManager GetTextBufferUndoManager(ITextBuffer textBuffer);
    public abstract virtual void RemoveTextBufferUndoManager(ITextBuffer textBuffer);
}
public interface Microsoft.VisualStudio.Text.Operations.ITextSearchService {
    public abstract virtual Nullable`1<SnapshotSpan> FindNext(int startIndex, bool wraparound, FindData findData);
    public abstract virtual Collection`1<SnapshotSpan> FindAll(FindData findData);
}
public interface Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator {
    public IContentType ContentType { get; }
    public abstract virtual TextExtent GetExtentOfWord(SnapshotPoint currentPosition);
    public abstract virtual SnapshotSpan GetSpanOfEnclosing(SnapshotSpan activeSpan);
    public abstract virtual SnapshotSpan GetSpanOfFirstChild(SnapshotSpan activeSpan);
    public abstract virtual SnapshotSpan GetSpanOfNextSibling(SnapshotSpan activeSpan);
    public abstract virtual SnapshotSpan GetSpanOfPreviousSibling(SnapshotSpan activeSpan);
    public abstract virtual IContentType get_ContentType();
}
public interface Microsoft.VisualStudio.Text.Operations.ITextStructureNavigatorProvider {
    public abstract virtual ITextStructureNavigator CreateTextStructureNavigator(ITextBuffer textBuffer);
}
public interface Microsoft.VisualStudio.Text.Operations.ITextStructureNavigatorSelectorService {
    public abstract virtual ITextStructureNavigator GetTextStructureNavigator(ITextBuffer textBuffer);
    public abstract virtual ITextStructureNavigator CreateTextStructureNavigator(ITextBuffer textBuffer, IContentType contentType);
}
public interface Microsoft.VisualStudio.Text.Operations.ITextUndoHistory {
    public bool CanRedo { get; }
    public bool CanUndo { get; }
    public ITextUndoTransaction CurrentTransaction { get; }
    public ITextUndoTransaction LastRedoTransaction { get; }
    public ITextUndoTransaction LastUndoTransaction { get; }
    public string RedoDescription { get; }
    public IEnumerable`1<ITextUndoTransaction> RedoStack { get; }
    public TextUndoHistoryState State { get; }
    public string UndoDescription { get; }
    public IEnumerable`1<ITextUndoTransaction> UndoStack { get; }
    public abstract virtual IEnumerable`1<ITextUndoTransaction> get_UndoStack();
    public abstract virtual IEnumerable`1<ITextUndoTransaction> get_RedoStack();
    public abstract virtual ITextUndoTransaction get_LastUndoTransaction();
    public abstract virtual ITextUndoTransaction get_LastRedoTransaction();
    public abstract virtual bool get_CanUndo();
    public abstract virtual bool get_CanRedo();
    public abstract virtual string get_UndoDescription();
    public abstract virtual string get_RedoDescription();
    public abstract virtual ITextUndoTransaction get_CurrentTransaction();
    public abstract virtual TextUndoHistoryState get_State();
    public abstract virtual ITextUndoTransaction CreateTransaction(string description);
    public abstract virtual void Undo(int count);
    public abstract virtual void Redo(int count);
    public abstract virtual void add_UndoRedoHappened(EventHandler`1<TextUndoRedoEventArgs> value);
    public abstract virtual void remove_UndoRedoHappened(EventHandler`1<TextUndoRedoEventArgs> value);
    public abstract virtual void add_UndoTransactionCompleted(EventHandler`1<TextUndoTransactionCompletedEventArgs> value);
    public abstract virtual void remove_UndoTransactionCompleted(EventHandler`1<TextUndoTransactionCompletedEventArgs> value);
}
public interface Microsoft.VisualStudio.Text.Operations.ITextUndoHistoryRegistry {
    public abstract virtual ITextUndoHistory RegisterHistory(object context);
    public abstract virtual ITextUndoHistory GetHistory(object context);
    public abstract virtual bool TryGetHistory(object context, ITextUndoHistory& history);
    public abstract virtual void AttachHistory(object context, ITextUndoHistory history);
    public abstract virtual void RemoveHistory(ITextUndoHistory history);
}
public interface Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive {
    public bool CanRedo { get; }
    public bool CanUndo { get; }
    public ITextUndoTransaction Parent { get; public set; }
    public abstract virtual ITextUndoTransaction get_Parent();
    public abstract virtual void set_Parent(ITextUndoTransaction value);
    public abstract virtual bool get_CanRedo();
    public abstract virtual bool get_CanUndo();
    public abstract virtual void Do();
    public abstract virtual void Undo();
    public abstract virtual bool CanMerge(ITextUndoPrimitive older);
    public abstract virtual ITextUndoPrimitive Merge(ITextUndoPrimitive older);
}
public interface Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction {
    public bool CanRedo { get; }
    public bool CanUndo { get; }
    public string Description { get; public set; }
    public ITextUndoHistory History { get; }
    public IMergeTextUndoTransactionPolicy MergePolicy { get; public set; }
    public ITextUndoTransaction Parent { get; }
    public UndoTransactionState State { get; }
    public IList`1<ITextUndoPrimitive> UndoPrimitives { get; }
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual UndoTransactionState get_State();
    public abstract virtual ITextUndoHistory get_History();
    public abstract virtual IList`1<ITextUndoPrimitive> get_UndoPrimitives();
    public abstract virtual void Complete();
    public abstract virtual void Cancel();
    public abstract virtual void AddUndo(ITextUndoPrimitive undo);
    public abstract virtual ITextUndoTransaction get_Parent();
    public abstract virtual bool get_CanRedo();
    public abstract virtual bool get_CanUndo();
    public abstract virtual void Do();
    public abstract virtual void Undo();
    public abstract virtual IMergeTextUndoTransactionPolicy get_MergePolicy();
    public abstract virtual void set_MergePolicy(IMergeTextUndoTransactionPolicy value);
}
public class Microsoft.VisualStudio.Text.Operations.Standalone.NullMergeUndoTransactionPolicy : object {
    public static IMergeTextUndoTransactionPolicy Instance { get; }
    public static IMergeTextUndoTransactionPolicy get_Instance();
    public sealed virtual bool TestCompatiblePolicy(IMergeTextUndoTransactionPolicy other);
    public sealed virtual bool CanMerge(ITextUndoTransaction newerTransaction, ITextUndoTransaction olderTransaction);
    public sealed virtual void PerformTransactionMerge(ITextUndoTransaction existingTransaction, ITextUndoTransaction newTransaction);
}
public class Microsoft.VisualStudio.Text.Operations.TextExtent : ValueType {
    private int __Asmmeta_Private_Field;
    public bool IsSignificant { get; }
    public SnapshotSpan Span { get; }
    public TextExtent(SnapshotSpan span, bool isSignificant);
    public TextExtent(TextExtent textExtent);
    public SnapshotSpan get_Span();
    public bool get_IsSignificant();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(TextExtent extent1, TextExtent extent2);
    public static bool op_Inequality(TextExtent extent1, TextExtent extent2);
}
public enum Microsoft.VisualStudio.Text.Operations.TextUndoHistoryState : Enum {
    public int value__;
    public static TextUndoHistoryState Idle;
    public static TextUndoHistoryState Redoing;
    public static TextUndoHistoryState Undoing;
}
public class Microsoft.VisualStudio.Text.Operations.TextUndoRedoEventArgs : EventArgs {
    public TextUndoHistoryState State { get; }
    public ITextUndoTransaction Transaction { get; }
    public TextUndoRedoEventArgs(TextUndoHistoryState state, ITextUndoTransaction transaction);
    public ITextUndoTransaction get_Transaction();
    public TextUndoHistoryState get_State();
}
public class Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletedEventArgs : EventArgs {
    public TextUndoTransactionCompletionResult Result { get; }
    public ITextUndoTransaction Transaction { get; }
    public TextUndoTransactionCompletedEventArgs(ITextUndoTransaction transaction, TextUndoTransactionCompletionResult result);
    public ITextUndoTransaction get_Transaction();
    public TextUndoTransactionCompletionResult get_Result();
}
public enum Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletionResult : Enum {
    public int value__;
    public static TextUndoTransactionCompletionResult TransactionAdded;
    public static TextUndoTransactionCompletionResult TransactionMerged;
}
public enum Microsoft.VisualStudio.Text.Operations.UndoTransactionState : Enum {
    public int value__;
    public static UndoTransactionState Canceled;
    public static UndoTransactionState Completed;
    public static UndoTransactionState Invalid;
    public static UndoTransactionState Open;
    public static UndoTransactionState Redoing;
    public static UndoTransactionState Undoing;
    public static UndoTransactionState Undone;
}
public interface Microsoft.VisualStudio.Text.Outlining.ICollapsed {
    public IEnumerable`1<ICollapsed> CollapsedChildren { get; }
    public abstract virtual IEnumerable`1<ICollapsed> get_CollapsedChildren();
}
public interface Microsoft.VisualStudio.Text.Outlining.ICollapsible {
    public object CollapsedForm { get; }
    public object CollapsedHintForm { get; }
    public ITrackingSpan Extent { get; }
    public bool IsCollapsed { get; }
    public bool IsCollapsible { get; }
    public IOutliningRegionTag Tag { get; }
    public abstract virtual ITrackingSpan get_Extent();
    public abstract virtual bool get_IsCollapsed();
    public abstract virtual bool get_IsCollapsible();
    public abstract virtual object get_CollapsedForm();
    public abstract virtual object get_CollapsedHintForm();
    public abstract virtual IOutliningRegionTag get_Tag();
}
public interface Microsoft.VisualStudio.Text.Outlining.IOutliningManager {
    public bool Enabled { get; public set; }
    public abstract virtual IEnumerable`1<ICollapsed> GetCollapsedRegions(SnapshotSpan span);
    public abstract virtual IEnumerable`1<ICollapsed> GetCollapsedRegions(SnapshotSpan span, bool exposedRegionsOnly);
    public abstract virtual IEnumerable`1<ICollapsed> GetCollapsedRegions(NormalizedSnapshotSpanCollection spans);
    public abstract virtual IEnumerable`1<ICollapsed> GetCollapsedRegions(NormalizedSnapshotSpanCollection spans, bool exposedRegionsOnly);
    public abstract virtual IEnumerable`1<ICollapsible> GetAllRegions(SnapshotSpan span);
    public abstract virtual IEnumerable`1<ICollapsible> GetAllRegions(SnapshotSpan span, bool exposedRegionsOnly);
    public abstract virtual IEnumerable`1<ICollapsible> GetAllRegions(NormalizedSnapshotSpanCollection spans);
    public abstract virtual IEnumerable`1<ICollapsible> GetAllRegions(NormalizedSnapshotSpanCollection spans, bool exposedRegionsOnly);
    public abstract virtual void add_RegionsChanged(EventHandler`1<RegionsChangedEventArgs> value);
    public abstract virtual void remove_RegionsChanged(EventHandler`1<RegionsChangedEventArgs> value);
    public abstract virtual void add_RegionsExpanded(EventHandler`1<RegionsExpandedEventArgs> value);
    public abstract virtual void remove_RegionsExpanded(EventHandler`1<RegionsExpandedEventArgs> value);
    public abstract virtual void add_RegionsCollapsed(EventHandler`1<RegionsCollapsedEventArgs> value);
    public abstract virtual void remove_RegionsCollapsed(EventHandler`1<RegionsCollapsedEventArgs> value);
    public abstract virtual void add_OutliningEnabledChanged(EventHandler`1<OutliningEnabledEventArgs> value);
    public abstract virtual void remove_OutliningEnabledChanged(EventHandler`1<OutliningEnabledEventArgs> value);
    public abstract virtual ICollapsible Expand(ICollapsed collapsible);
    public abstract virtual ICollapsed TryCollapse(ICollapsible collapsible);
    public abstract virtual IEnumerable`1<ICollapsed> CollapseAll(SnapshotSpan span, Predicate`1<ICollapsible> match);
    public abstract virtual IEnumerable`1<ICollapsible> ExpandAll(SnapshotSpan span, Predicate`1<ICollapsed> match);
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
}
public interface Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService {
    public abstract virtual IOutliningManager GetOutliningManager(ITextView textView);
}
public class Microsoft.VisualStudio.Text.Outlining.OutliningEnabledEventArgs : EventArgs {
    public bool Enabled { get; }
    public OutliningEnabledEventArgs(bool enabled);
    public bool get_Enabled();
}
public class Microsoft.VisualStudio.Text.Outlining.RegionsChangedEventArgs : EventArgs {
    public SnapshotSpan AffectedSpan { get; }
    public RegionsChangedEventArgs(SnapshotSpan affectedSpan);
    public SnapshotSpan get_AffectedSpan();
}
public class Microsoft.VisualStudio.Text.Outlining.RegionsCollapsedEventArgs : EventArgs {
    public IEnumerable`1<ICollapsed> CollapsedRegions { get; }
    public RegionsCollapsedEventArgs(IEnumerable`1<ICollapsed> collapsedRegions);
    public IEnumerable`1<ICollapsed> get_CollapsedRegions();
}
public class Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs : EventArgs {
    public IEnumerable`1<ICollapsible> ExpandedRegions { get; }
    public bool RemovalPending { get; }
    public RegionsExpandedEventArgs(IEnumerable`1<ICollapsible> expandedRegions);
    public RegionsExpandedEventArgs(IEnumerable`1<ICollapsible> expandedRegions, bool removalPending);
    public IEnumerable`1<ICollapsible> get_ExpandedRegions();
    public bool get_RemovalPending();
}
public enum Microsoft.VisualStudio.Text.PointTrackingMode : Enum {
    public int value__;
    public static PointTrackingMode Negative;
    public static PointTrackingMode Positive;
}
public enum Microsoft.VisualStudio.Text.PositionAffinity : Enum {
    public int value__;
    public static PositionAffinity Predecessor;
    public static PositionAffinity Successor;
}
public class Microsoft.VisualStudio.Text.PreContentChangedEventArgs : EventArgs {
    public ITextSnapshot BeforeSnapshot { get; }
    public INormalizedTextChangeCollection Changes { get; }
    public PreContentChangedEventArgs(ITextSnapshot beforeSnapshot, INormalizedTextChangeCollection changes);
    public ITextSnapshot get_BeforeSnapshot();
    public INormalizedTextChangeCollection get_Changes();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Text.Projection.ElisionBufferOptions : Enum {
    public int value__;
    public static ElisionBufferOptions FillInMappingMode;
    public static ElisionBufferOptions None;
}
public class Microsoft.VisualStudio.Text.Projection.ElisionSourceSpansChangedEventArgs : TextContentChangedEventArgs {
    public IProjectionSnapshot After { get; }
    public IProjectionSnapshot Before { get; }
    public NormalizedSpanCollection ElidedSpans { get; }
    public NormalizedSpanCollection ExpandedSpans { get; }
    public ElisionSourceSpansChangedEventArgs(IProjectionSnapshot beforeSnapshot, IProjectionSnapshot afterSnapshot, NormalizedSpanCollection elidedSpans, NormalizedSpanCollection expandedSpans, object sourceToken);
    public NormalizedSpanCollection get_ElidedSpans();
    public NormalizedSpanCollection get_ExpandedSpans();
    public IProjectionSnapshot get_Before();
    public IProjectionSnapshot get_After();
}
public class Microsoft.VisualStudio.Text.Projection.GraphBufferContentTypeChangedEventArgs : EventArgs {
    public IContentType AfterContentType { get; }
    public IContentType BeforeContentType { get; }
    public ITextBuffer TextBuffer { get; }
    public GraphBufferContentTypeChangedEventArgs(ITextBuffer textBuffer, IContentType beforeContentType, IContentType afterContentType);
    public ITextBuffer get_TextBuffer();
    public IContentType get_BeforeContentType();
    public IContentType get_AfterContentType();
}
public class Microsoft.VisualStudio.Text.Projection.GraphBuffersChangedEventArgs : EventArgs {
    public ReadOnlyCollection`1<ITextBuffer> AddedBuffers { get; }
    public ReadOnlyCollection`1<ITextBuffer> RemovedBuffers { get; }
    public GraphBuffersChangedEventArgs(IList`1<ITextBuffer> addedBuffers, IList`1<ITextBuffer> removedBuffers);
    public ReadOnlyCollection`1<ITextBuffer> get_AddedBuffers();
    public ReadOnlyCollection`1<ITextBuffer> get_RemovedBuffers();
}
public interface Microsoft.VisualStudio.Text.Projection.IBufferGraph {
    public ITextBuffer TopBuffer { get; }
    public abstract virtual ITextBuffer get_TopBuffer();
    public abstract virtual Collection`1<ITextBuffer> GetTextBuffers(Predicate`1<ITextBuffer> match);
    public abstract virtual IMappingPoint CreateMappingPoint(SnapshotPoint point, PointTrackingMode trackingMode);
    public abstract virtual IMappingSpan CreateMappingSpan(SnapshotSpan span, SpanTrackingMode trackingMode);
    public abstract virtual Nullable`1<SnapshotPoint> MapDownToBuffer(SnapshotPoint position, PointTrackingMode trackingMode, ITextBuffer targetBuffer, PositionAffinity affinity);
    public abstract virtual Nullable`1<SnapshotPoint> MapDownToSnapshot(SnapshotPoint position, PointTrackingMode trackingMode, ITextSnapshot targetSnapshot, PositionAffinity affinity);
    public abstract virtual Nullable`1<SnapshotPoint> MapDownToFirstMatch(SnapshotPoint position, PointTrackingMode trackingMode, Predicate`1<ITextSnapshot> match, PositionAffinity affinity);
    public abstract virtual Nullable`1<SnapshotPoint> MapDownToInsertionPoint(SnapshotPoint position, PointTrackingMode trackingMode, Predicate`1<ITextSnapshot> match);
    public abstract virtual NormalizedSnapshotSpanCollection MapDownToBuffer(SnapshotSpan span, SpanTrackingMode trackingMode, ITextBuffer targetBuffer);
    public abstract virtual NormalizedSnapshotSpanCollection MapDownToSnapshot(SnapshotSpan span, SpanTrackingMode trackingMode, ITextSnapshot targetSnapshot);
    public abstract virtual NormalizedSnapshotSpanCollection MapDownToFirstMatch(SnapshotSpan span, SpanTrackingMode trackingMode, Predicate`1<ITextSnapshot> match);
    public abstract virtual Nullable`1<SnapshotPoint> MapUpToBuffer(SnapshotPoint point, PointTrackingMode trackingMode, PositionAffinity affinity, ITextBuffer targetBuffer);
    public abstract virtual Nullable`1<SnapshotPoint> MapUpToSnapshot(SnapshotPoint point, PointTrackingMode trackingMode, PositionAffinity affinity, ITextSnapshot targetSnapshot);
    public abstract virtual Nullable`1<SnapshotPoint> MapUpToFirstMatch(SnapshotPoint point, PointTrackingMode trackingMode, Predicate`1<ITextSnapshot> match, PositionAffinity affinity);
    public abstract virtual NormalizedSnapshotSpanCollection MapUpToBuffer(SnapshotSpan span, SpanTrackingMode trackingMode, ITextBuffer targetBuffer);
    public abstract virtual NormalizedSnapshotSpanCollection MapUpToSnapshot(SnapshotSpan span, SpanTrackingMode trackingMode, ITextSnapshot targetSnapshot);
    public abstract virtual NormalizedSnapshotSpanCollection MapUpToFirstMatch(SnapshotSpan span, SpanTrackingMode trackingMode, Predicate`1<ITextSnapshot> match);
    public abstract virtual void add_GraphBuffersChanged(EventHandler`1<GraphBuffersChangedEventArgs> value);
    public abstract virtual void remove_GraphBuffersChanged(EventHandler`1<GraphBuffersChangedEventArgs> value);
    public abstract virtual void add_GraphBufferContentTypeChanged(EventHandler`1<GraphBufferContentTypeChangedEventArgs> value);
    public abstract virtual void remove_GraphBufferContentTypeChanged(EventHandler`1<GraphBufferContentTypeChangedEventArgs> value);
}
public interface Microsoft.VisualStudio.Text.Projection.IBufferGraphFactoryService {
    public abstract virtual IBufferGraph CreateBufferGraph(ITextBuffer textBuffer);
}
public interface Microsoft.VisualStudio.Text.Projection.IElisionBuffer {
    public IElisionSnapshot CurrentSnapshot { get; }
    public ElisionBufferOptions Options { get; }
    public ITextBuffer SourceBuffer { get; }
    public abstract virtual ITextBuffer get_SourceBuffer();
    public abstract virtual IElisionSnapshot get_CurrentSnapshot();
    public abstract virtual IProjectionSnapshot ElideSpans(NormalizedSpanCollection spansToElide);
    public abstract virtual IProjectionSnapshot ExpandSpans(NormalizedSpanCollection spansToExpand);
    public abstract virtual IProjectionSnapshot ModifySpans(NormalizedSpanCollection spansToElide, NormalizedSpanCollection spansToExpand);
    public abstract virtual ElisionBufferOptions get_Options();
    public abstract virtual void add_SourceSpansChanged(EventHandler`1<ElisionSourceSpansChangedEventArgs> value);
    public abstract virtual void remove_SourceSpansChanged(EventHandler`1<ElisionSourceSpansChangedEventArgs> value);
}
public interface Microsoft.VisualStudio.Text.Projection.IElisionSnapshot {
    public ITextSnapshot SourceSnapshot { get; }
    public IElisionBuffer TextBuffer { get; }
    public abstract virtual IElisionBuffer get_TextBuffer();
    public abstract virtual ITextSnapshot get_SourceSnapshot();
    public abstract virtual SnapshotPoint MapFromSourceSnapshotToNearest(SnapshotPoint point);
}
public interface Microsoft.VisualStudio.Text.Projection.IProjectionBuffer {
    public abstract virtual IProjectionSnapshot InsertSpan(int position, ITrackingSpan spanToInsert);
    public abstract virtual IProjectionSnapshot InsertSpan(int position, string literalSpanToInsert);
    public abstract virtual IProjectionSnapshot InsertSpans(int position, IList`1<object> spansToInsert);
    public abstract virtual IProjectionSnapshot DeleteSpans(int position, int spansToDelete);
    public abstract virtual IProjectionSnapshot ReplaceSpans(int position, int spansToReplace, IList`1<object> spansToInsert, EditOptions options, object editTag);
    public abstract virtual void add_SourceSpansChanged(EventHandler`1<ProjectionSourceSpansChangedEventArgs> value);
    public abstract virtual void remove_SourceSpansChanged(EventHandler`1<ProjectionSourceSpansChangedEventArgs> value);
    public abstract virtual void add_SourceBuffersChanged(EventHandler`1<ProjectionSourceBuffersChangedEventArgs> value);
    public abstract virtual void remove_SourceBuffersChanged(EventHandler`1<ProjectionSourceBuffersChangedEventArgs> value);
}
public interface Microsoft.VisualStudio.Text.Projection.IProjectionBufferBase {
    public IProjectionSnapshot CurrentSnapshot { get; }
    public IList`1<ITextBuffer> SourceBuffers { get; }
    public abstract virtual IProjectionSnapshot get_CurrentSnapshot();
    public abstract virtual IList`1<ITextBuffer> get_SourceBuffers();
    public abstract virtual IProjectionSnapshot Insert(int position, string text);
    public abstract virtual IProjectionSnapshot Delete(Span deleteSpan);
    public abstract virtual IProjectionSnapshot Replace(Span replaceSpan, string replaceWith);
}
public interface Microsoft.VisualStudio.Text.Projection.IProjectionBufferFactoryService {
    public IContentType ProjectionContentType { get; }
    public abstract virtual IContentType get_ProjectionContentType();
    public abstract virtual IProjectionBuffer CreateProjectionBuffer(IProjectionEditResolver projectionEditResolver, IList`1<object> sourceSpans, ProjectionBufferOptions options, IContentType contentType);
    public abstract virtual IProjectionBuffer CreateProjectionBuffer(IProjectionEditResolver projectionEditResolver, IList`1<object> sourceSpans, ProjectionBufferOptions options);
    public abstract virtual IElisionBuffer CreateElisionBuffer(IProjectionEditResolver projectionEditResolver, NormalizedSnapshotSpanCollection exposedSpans, ElisionBufferOptions options, IContentType contentType);
    public abstract virtual IElisionBuffer CreateElisionBuffer(IProjectionEditResolver projectionEditResolver, NormalizedSnapshotSpanCollection exposedSpans, ElisionBufferOptions options);
    public abstract virtual void add_ProjectionBufferCreated(EventHandler`1<TextBufferCreatedEventArgs> value);
    public abstract virtual void remove_ProjectionBufferCreated(EventHandler`1<TextBufferCreatedEventArgs> value);
}
public interface Microsoft.VisualStudio.Text.Projection.IProjectionEditResolver {
    public abstract virtual void FillInInsertionSizes(SnapshotPoint projectionInsertionPoint, ReadOnlyCollection`1<SnapshotPoint> sourceInsertionPoints, string insertionText, IList`1<int> insertionSizes);
    public abstract virtual void FillInReplacementSizes(SnapshotSpan projectionReplacementSpan, ReadOnlyCollection`1<SnapshotSpan> sourceReplacementSpans, string insertionText, IList`1<int> insertionSizes);
    public abstract virtual int GetTypicalInsertionPosition(SnapshotPoint projectionInsertionPoint, ReadOnlyCollection`1<SnapshotPoint> sourceInsertionPoints);
}
public interface Microsoft.VisualStudio.Text.Projection.IProjectionSnapshot {
    public ReadOnlyCollection`1<ITextSnapshot> SourceSnapshots { get; }
    public int SpanCount { get; }
    public IProjectionBufferBase TextBuffer { get; }
    public abstract virtual IProjectionBufferBase get_TextBuffer();
    public abstract virtual int get_SpanCount();
    public abstract virtual ReadOnlyCollection`1<ITextSnapshot> get_SourceSnapshots();
    public abstract virtual ITextSnapshot GetMatchingSnapshot(ITextBuffer textBuffer);
    public abstract virtual ReadOnlyCollection`1<SnapshotSpan> GetSourceSpans(int startSpanIndex, int count);
    public abstract virtual ReadOnlyCollection`1<SnapshotSpan> GetSourceSpans();
    public abstract virtual SnapshotPoint MapToSourceSnapshot(int position, PositionAffinity affinity);
    public abstract virtual ReadOnlyCollection`1<SnapshotPoint> MapToSourceSnapshots(int position);
    public abstract virtual SnapshotPoint MapToSourceSnapshot(int position);
    public abstract virtual Nullable`1<SnapshotPoint> MapFromSourceSnapshot(SnapshotPoint point, PositionAffinity affinity);
    public abstract virtual ReadOnlyCollection`1<SnapshotSpan> MapToSourceSnapshots(Span span);
    public abstract virtual ReadOnlyCollection`1<Span> MapFromSourceSnapshot(SnapshotSpan span);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Text.Projection.ProjectionBufferOptions : Enum {
    public int value__;
    public static ProjectionBufferOptions None;
    public static ProjectionBufferOptions PermissiveEdgeInclusiveSourceSpans;
    public static ProjectionBufferOptions WritableLiteralSpans;
}
public class Microsoft.VisualStudio.Text.Projection.ProjectionSourceBuffersChangedEventArgs : ProjectionSourceSpansChangedEventArgs {
    public ReadOnlyCollection`1<ITextBuffer> AddedBuffers { get; }
    public ReadOnlyCollection`1<ITextBuffer> RemovedBuffers { get; }
    public ProjectionSourceBuffersChangedEventArgs(IProjectionSnapshot beforeSnapshot, IProjectionSnapshot afterSnapshot, IList`1<ITrackingSpan> insertedSpans, IList`1<ITrackingSpan> deletedSpans, int spanPosition, IList`1<ITextBuffer> addedBuffers, IList`1<ITextBuffer> removedBuffers, EditOptions options, object editTag);
    public ReadOnlyCollection`1<ITextBuffer> get_AddedBuffers();
    public ReadOnlyCollection`1<ITextBuffer> get_RemovedBuffers();
}
public class Microsoft.VisualStudio.Text.Projection.ProjectionSourceSpansChangedEventArgs : TextContentChangedEventArgs {
    public IProjectionSnapshot After { get; }
    public IProjectionSnapshot Before { get; }
    public ReadOnlyCollection`1<ITrackingSpan> DeletedSpans { get; }
    public ReadOnlyCollection`1<ITrackingSpan> InsertedSpans { get; }
    public int SpanPosition { get; }
    public ProjectionSourceSpansChangedEventArgs(IProjectionSnapshot beforeSnapshot, IProjectionSnapshot afterSnapshot, IList`1<ITrackingSpan> insertedSpans, IList`1<ITrackingSpan> deletedSpans, int spanPosition, EditOptions options, object editTag);
    public int get_SpanPosition();
    public ReadOnlyCollection`1<ITrackingSpan> get_InsertedSpans();
    public ReadOnlyCollection`1<ITrackingSpan> get_DeletedSpans();
    public IProjectionSnapshot get_Before();
    public IProjectionSnapshot get_After();
}
public enum Microsoft.VisualStudio.Text.ReloadResult : Enum {
    public int value__;
    public static ReloadResult Aborted;
    public static ReloadResult Succeeded;
    public static ReloadResult SucceededWithCharacterSubstitutions;
}
public class Microsoft.VisualStudio.Text.SnapshotPoint : ValueType {
    private int __Asmmeta_Private_Field;
    public int Position { get; }
    public ITextSnapshot Snapshot { get; }
    public SnapshotPoint(ITextSnapshot snapshot, int position);
    public int get_Position();
    public ITextSnapshot get_Snapshot();
    public static int op_Implicit(SnapshotPoint snapshotPoint);
    public ITextSnapshotLine GetContainingLine();
    public char GetChar();
    public SnapshotPoint TranslateTo(ITextSnapshot targetSnapshot, PointTrackingMode trackingMode);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public SnapshotPoint Add(int offset);
    public SnapshotPoint Subtract(int offset);
    public int Difference(SnapshotPoint other);
    public static SnapshotPoint op_Subtraction(SnapshotPoint point, int offset);
    public static int op_Subtraction(SnapshotPoint start, SnapshotPoint other);
    public static bool op_Equality(SnapshotPoint left, SnapshotPoint right);
    public static bool op_Inequality(SnapshotPoint left, SnapshotPoint right);
    public static SnapshotPoint op_Addition(SnapshotPoint point, int offset);
    public static bool op_GreaterThan(SnapshotPoint left, SnapshotPoint right);
    public static bool op_LessThan(SnapshotPoint left, SnapshotPoint right);
    public sealed virtual int CompareTo(SnapshotPoint other);
}
public class Microsoft.VisualStudio.Text.SnapshotSpan : ValueType {
    private int __Asmmeta_Private_Field;
    public SnapshotPoint End { get; }
    public bool IsEmpty { get; }
    public int Length { get; }
    public ITextSnapshot Snapshot { get; }
    public Span Span { get; }
    public SnapshotPoint Start { get; }
    public SnapshotSpan(ITextSnapshot snapshot, Span span);
    public SnapshotSpan(ITextSnapshot snapshot, int start, int length);
    public SnapshotSpan(SnapshotPoint start, SnapshotPoint end);
    public SnapshotSpan(SnapshotPoint start, int length);
    public static Span op_Implicit(SnapshotSpan snapshotSpan);
    public ITextSnapshot get_Snapshot();
    public string GetText();
    public SnapshotSpan TranslateTo(ITextSnapshot targetSnapshot, SpanTrackingMode spanTrackingMode);
    public Span get_Span();
    public SnapshotPoint get_Start();
    public SnapshotPoint get_End();
    public int get_Length();
    public bool get_IsEmpty();
    public bool Contains(int position);
    public bool Contains(SnapshotPoint point);
    public bool Contains(Span simpleSpan);
    public bool Contains(SnapshotSpan snapshotSpan);
    public bool OverlapsWith(Span simpleSpan);
    public bool OverlapsWith(SnapshotSpan snapshotSpan);
    public Nullable`1<SnapshotSpan> Overlap(Span simpleSpan);
    public Nullable`1<SnapshotSpan> Overlap(SnapshotSpan snapshotSpan);
    public bool IntersectsWith(Span simpleSpan);
    public bool IntersectsWith(SnapshotSpan snapshotSpan);
    public Nullable`1<SnapshotSpan> Intersection(Span simpleSpan);
    public Nullable`1<SnapshotSpan> Intersection(SnapshotSpan snapshotSpan);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public static bool op_Equality(SnapshotSpan left, SnapshotSpan right);
    public static bool op_Inequality(SnapshotSpan left, SnapshotSpan right);
}
public class Microsoft.VisualStudio.Text.SnapshotSpanEventArgs : EventArgs {
    public SnapshotSpan Span { get; }
    public SnapshotSpanEventArgs(SnapshotSpan span);
    public SnapshotSpan get_Span();
}
public class Microsoft.VisualStudio.Text.Span : ValueType {
    private int __Asmmeta_Private_Field;
    public int End { get; }
    public bool IsEmpty { get; }
    public int Length { get; }
    public int Start { get; }
    public Span(int start, int length);
    public static Span FromBounds(int start, int end);
    public int get_Start();
    public int get_End();
    public int get_Length();
    public bool get_IsEmpty();
    public bool Contains(int position);
    public bool Contains(Span span);
    public bool OverlapsWith(Span span);
    public Nullable`1<Span> Overlap(Span span);
    public bool IntersectsWith(Span span);
    public Nullable`1<Span> Intersection(Span span);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(Span left, Span right);
    public static bool op_Inequality(Span left, Span right);
}
public enum Microsoft.VisualStudio.Text.SpanTrackingMode : Enum {
    public int value__;
    public static SpanTrackingMode Custom;
    public static SpanTrackingMode EdgeExclusive;
    public static SpanTrackingMode EdgeInclusive;
    public static SpanTrackingMode EdgeNegative;
    public static SpanTrackingMode EdgePositive;
}
public interface Microsoft.VisualStudio.Text.Storage.IDataStorage {
    public abstract virtual bool TryGetItemValue(string itemKey, ResourceDictionary& itemValue);
}
public interface Microsoft.VisualStudio.Text.Storage.IDataStorageService {
    public abstract virtual IDataStorage GetDataStorage(string storageKey);
}
public class Microsoft.VisualStudio.Text.Tagging.BatchedTagsChangedEventArgs : EventArgs {
    public ReadOnlyCollection`1<IMappingSpan> Spans { get; }
    public BatchedTagsChangedEventArgs(IList`1<IMappingSpan> spans);
    public ReadOnlyCollection`1<IMappingSpan> get_Spans();
}
public class Microsoft.VisualStudio.Text.Tagging.ClassificationTag : object {
    public IClassificationType ClassificationType { get; }
    public ClassificationTag(IClassificationType type);
    public sealed virtual IClassificationType get_ClassificationType();
}
public class Microsoft.VisualStudio.Text.Tagging.ErrorTag : object {
    public string ErrorType { get; }
    public object ToolTipContent { get; }
    public ErrorTag(string errorType, object toolTipContent);
    public ErrorTag(string errorType);
    public sealed virtual string get_ErrorType();
    public sealed virtual object get_ToolTipContent();
}
public interface Microsoft.VisualStudio.Text.Tagging.IBufferTagAggregatorFactoryService {
    public abstract virtual ITagAggregator`1<T> CreateTagAggregator(ITextBuffer textBuffer);
    public abstract virtual ITagAggregator`1<T> CreateTagAggregator(ITextBuffer textBuffer, TagAggregatorOptions options);
}
public interface Microsoft.VisualStudio.Text.Tagging.IClassificationTag {
    public IClassificationType ClassificationType { get; }
    public abstract virtual IClassificationType get_ClassificationType();
}
public interface Microsoft.VisualStudio.Text.Tagging.IElisionTag {
}
public interface Microsoft.VisualStudio.Text.Tagging.IErrorTag {
    public string ErrorType { get; }
    public object ToolTipContent { get; }
    public abstract virtual string get_ErrorType();
    public abstract virtual object get_ToolTipContent();
}
public interface Microsoft.VisualStudio.Text.Tagging.IMappingTagSpan`1 {
    public IMappingSpan Span { get; }
    public T Tag { get; }
    public abstract virtual T get_Tag();
    public abstract virtual IMappingSpan get_Span();
}
public interface Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag {
    public object CollapsedForm { get; }
    public object CollapsedHintForm { get; }
    public bool IsDefaultCollapsed { get; }
    public bool IsImplementation { get; }
    public abstract virtual bool get_IsDefaultCollapsed();
    public abstract virtual bool get_IsImplementation();
    public abstract virtual object get_CollapsedForm();
    public abstract virtual object get_CollapsedHintForm();
}
public interface Microsoft.VisualStudio.Text.Tagging.ITag {
}
public interface Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1 {
    public IBufferGraph BufferGraph { get; }
    public abstract virtual IEnumerable`1<IMappingTagSpan`1<T>> GetTags(SnapshotSpan span);
    public abstract virtual IEnumerable`1<IMappingTagSpan`1<T>> GetTags(IMappingSpan span);
    public abstract virtual IEnumerable`1<IMappingTagSpan`1<T>> GetTags(NormalizedSnapshotSpanCollection snapshotSpans);
    public abstract virtual void add_TagsChanged(EventHandler`1<TagsChangedEventArgs> value);
    public abstract virtual void remove_TagsChanged(EventHandler`1<TagsChangedEventArgs> value);
    public abstract virtual void add_BatchedTagsChanged(EventHandler`1<BatchedTagsChangedEventArgs> value);
    public abstract virtual void remove_BatchedTagsChanged(EventHandler`1<BatchedTagsChangedEventArgs> value);
    public abstract virtual IBufferGraph get_BufferGraph();
}
public interface Microsoft.VisualStudio.Text.Tagging.ITagger`1 {
    public abstract virtual IEnumerable`1<ITagSpan`1<T>> GetTags(NormalizedSnapshotSpanCollection spans);
    public abstract virtual void add_TagsChanged(EventHandler`1<SnapshotSpanEventArgs> value);
    public abstract virtual void remove_TagsChanged(EventHandler`1<SnapshotSpanEventArgs> value);
}
public interface Microsoft.VisualStudio.Text.Tagging.ITaggerMetadata {
    public IEnumerable`1<string> ContentTypes { get; }
    public IEnumerable`1<Type> TagTypes { get; }
    public abstract virtual IEnumerable`1<string> get_ContentTypes();
    public abstract virtual IEnumerable`1<Type> get_TagTypes();
}
public interface Microsoft.VisualStudio.Text.Tagging.ITaggerProvider {
    public abstract virtual ITagger`1<T> CreateTagger(ITextBuffer buffer);
}
public interface Microsoft.VisualStudio.Text.Tagging.ITagSpan`1 {
    public SnapshotSpan Span { get; }
    public T Tag { get; }
    public abstract virtual T get_Tag();
    public abstract virtual SnapshotSpan get_Span();
}
public interface Microsoft.VisualStudio.Text.Tagging.ITextMarkerTag {
    public string Type { get; }
    public abstract virtual string get_Type();
}
public interface Microsoft.VisualStudio.Text.Tagging.IUrlTag {
    public Uri Url { get; }
    public abstract virtual Uri get_Url();
}
public interface Microsoft.VisualStudio.Text.Tagging.IViewTagAggregatorFactoryService {
    public abstract virtual ITagAggregator`1<T> CreateTagAggregator(ITextView textView);
    public abstract virtual ITagAggregator`1<T> CreateTagAggregator(ITextView textView, TagAggregatorOptions options);
}
public interface Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider {
    public abstract virtual ITagger`1<T> CreateTagger(ITextView textView, ITextBuffer buffer);
}
public class Microsoft.VisualStudio.Text.Tagging.MappingTagSpan`1 : object {
    public IMappingSpan Span { get; }
    public T Tag { get; }
    public MappingTagSpan`1(IMappingSpan span, T tag);
    public sealed virtual T get_Tag();
    public sealed virtual IMappingSpan get_Span();
}
public class Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag : object {
    public object CollapsedForm { get; }
    public object CollapsedHintForm { get; }
    public bool IsDefaultCollapsed { get; }
    public bool IsImplementation { get; }
    public OutliningRegionTag(object collapsedForm, object collapsedHintForm);
    public OutliningRegionTag(bool isDefaultCollapsed, bool isImplementation, object collapsedForm, object collapsedHintForm);
    public sealed virtual bool get_IsDefaultCollapsed();
    public sealed virtual bool get_IsImplementation();
    public sealed virtual object get_CollapsedForm();
    public sealed virtual object get_CollapsedHintForm();
}
public class Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1 : object {
    public SimpleTagger`1(ITextBuffer buffer);
    public TrackingTagSpan`1<T> CreateTagSpan(ITrackingSpan span, T tag);
    public bool RemoveTagSpan(TrackingTagSpan`1<T> tagSpan);
    public int RemoveTagSpans(Predicate`1<TrackingTagSpan`1<T>> match);
    public IEnumerable`1<TrackingTagSpan`1<T>> GetTaggedSpans(SnapshotSpan span);
    public IDisposable Update();
    public sealed virtual IEnumerable`1<ITagSpan`1<T>> GetTags(NormalizedSnapshotSpanCollection spans);
    public sealed virtual void add_TagsChanged(EventHandler`1<SnapshotSpanEventArgs> value);
    public sealed virtual void remove_TagsChanged(EventHandler`1<SnapshotSpanEventArgs> value);
}
public class Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag : object {
    public PositionAffinity Affinity { get; }
    public double Baseline { get; }
    public double BottomSpace { get; }
    public object IdentityTag { get; }
    public object ProviderTag { get; }
    public double TextHeight { get; }
    public double TopSpace { get; }
    public double Width { get; }
    public SpaceNegotiatingAdornmentTag(double width, double topSpace, double baseline, double textHeight, double bottomSpace, PositionAffinity affinity, object identityTag, object providerTag);
    public double get_Width();
    public double get_TopSpace();
    public double get_Baseline();
    public double get_TextHeight();
    public double get_BottomSpace();
    public PositionAffinity get_Affinity();
    public object get_IdentityTag();
    public object get_ProviderTag();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions : Enum {
    public int value__;
    public static TagAggregatorOptions MapByContentType;
    public static TagAggregatorOptions None;
}
public class Microsoft.VisualStudio.Text.Tagging.TagsChangedEventArgs : EventArgs {
    public IMappingSpan Span { get; }
    public TagsChangedEventArgs(IMappingSpan span);
    public IMappingSpan get_Span();
}
public class Microsoft.VisualStudio.Text.Tagging.TagSpan`1 : object {
    public SnapshotSpan Span { get; }
    public T Tag { get; }
    public TagSpan`1(SnapshotSpan span, T tag);
    public sealed virtual T get_Tag();
    public sealed virtual SnapshotSpan get_Span();
}
public class Microsoft.VisualStudio.Text.Tagging.TagTypeAttribute : MultipleBaseMetadataAttribute {
    public Type TagTypes { get; }
    public TagTypeAttribute(Type tagType);
    public Type get_TagTypes();
}
public class Microsoft.VisualStudio.Text.Tagging.TextMarkerTag : object {
    public string Type { get; }
    public TextMarkerTag(string type);
    public sealed virtual string get_Type();
}
public class Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan`1 : object {
    public ITrackingSpan Span { get; }
    public T Tag { get; }
    public TrackingTagSpan`1(ITrackingSpan span, T tag);
    public T get_Tag();
    public ITrackingSpan get_Span();
}
public class Microsoft.VisualStudio.Text.Tagging.UrlTag : object {
    public Uri Url { get; }
    public UrlTag(Uri url);
    public sealed virtual Uri get_Url();
}
public class Microsoft.VisualStudio.Text.TextBufferCreatedEventArgs : EventArgs {
    public ITextBuffer TextBuffer { get; }
    public TextBufferCreatedEventArgs(ITextBuffer textBuffer);
    public ITextBuffer get_TextBuffer();
}
public class Microsoft.VisualStudio.Text.TextContentChangedEventArgs : TextSnapshotChangedEventArgs {
    public INormalizedTextChangeCollection Changes { get; }
    public EditOptions Options { get; }
    public TextContentChangedEventArgs(ITextSnapshot beforeSnapshot, ITextSnapshot afterSnapshot, EditOptions options, object editTag);
    public INormalizedTextChangeCollection get_Changes();
    public EditOptions get_Options();
}
public class Microsoft.VisualStudio.Text.TextContentChangingEventArgs : EventArgs {
    public ITextSnapshot Before { get; }
    public ITextVersion BeforeVersion { get; }
    public bool Canceled { get; }
    public object EditTag { get; }
    public TextContentChangingEventArgs(ITextSnapshot beforeSnapshot, object editTag, Action`1<TextContentChangingEventArgs> cancelAction);
    public bool get_Canceled();
    public ITextSnapshot get_Before();
    public object get_EditTag();
    public void Cancel();
    public ITextVersion get_BeforeVersion();
}
public class Microsoft.VisualStudio.Text.TextDataModelContentTypeChangedEventArgs : EventArgs {
    public IContentType AfterContentType { get; }
    public IContentType BeforeContentType { get; }
    public TextDataModelContentTypeChangedEventArgs(IContentType beforeContentType, IContentType afterContentType);
    public IContentType get_BeforeContentType();
    public IContentType get_AfterContentType();
}
public class Microsoft.VisualStudio.Text.TextDocumentEventArgs : EventArgs {
    public ITextDocument TextDocument { get; }
    public TextDocumentEventArgs(ITextDocument textDocument);
    public ITextDocument get_TextDocument();
}
public class Microsoft.VisualStudio.Text.TextDocumentFileActionEventArgs : EventArgs {
    public FileActionTypes FileActionType { get; }
    public string FilePath { get; }
    public DateTime Time { get; }
    public TextDocumentFileActionEventArgs(string filePath, DateTime time, FileActionTypes fileActionType);
    public string get_FilePath();
    public DateTime get_Time();
    public FileActionTypes get_FileActionType();
}
public abstract class Microsoft.VisualStudio.Text.TextSnapshotChangedEventArgs : EventArgs {
    public ITextSnapshot After { get; }
    public ITextVersion AfterVersion { get; }
    public ITextSnapshot Before { get; }
    public ITextVersion BeforeVersion { get; }
    public object EditTag { get; }
    protected TextSnapshotChangedEventArgs(ITextSnapshot beforeSnapshot, ITextSnapshot afterSnapshot, object editTag);
    public ITextSnapshot get_Before();
    public ITextSnapshot get_After();
    public ITextVersion get_BeforeVersion();
    public ITextVersion get_AfterVersion();
    public object get_EditTag();
}
public class Microsoft.VisualStudio.Text.TextSnapshotToTextReader : TextReader {
    public TextSnapshotToTextReader(ITextSnapshot textSnapshot);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual int Peek();
    public virtual int Read();
    public virtual int Read(Char[] buffer, int index, int count);
    public virtual int ReadBlock(Char[] buffer, int index, int count);
    public virtual string ReadLine();
    public virtual string ReadToEnd();
}
public enum Microsoft.VisualStudio.Text.TrackingFidelityMode : Enum {
    public int value__;
    public static TrackingFidelityMode Backward;
    public static TrackingFidelityMode Forward;
    public static TrackingFidelityMode UndoRedo;
}
public class Microsoft.VisualStudio.Text.Utilities.Automation.AutomationProperties : object {
    public string AutomationId { get; public set; }
    public string ClassName { get; public set; }
    public AutomationControlType ControlType { get; }
    public string HelpText { get; public set; }
    public string Name { get; public set; }
    public IWpfTextView TextView { get; }
    public AutomationProperties(string className, string automationId, string name, string helpText, AutomationControlType controlType, IWpfTextView wpfTextView);
    public AutomationProperties(string className, string automationId, string name, string helpText, IWpfTextView wpfTextView);
    public void AddPattern(PatternInterface patternInterface, object patternHandler);
    public object GetPatternProvider(PatternInterface patternInterface);
    public string get_AutomationId();
    public void set_AutomationId(string value);
    public string get_ClassName();
    public void set_ClassName(string value);
    public string get_HelpText();
    public void set_HelpText(string value);
    public string get_Name();
    public void set_Name(string value);
    public AutomationControlType get_ControlType();
    public IWpfTextView get_TextView();
}
public class Microsoft.VisualStudio.Text.Utilities.Automation.CustomAutomationAdapter`1 : AutomationPeer {
    public AutomationPeer AutomationPeer { get; }
    public AutomationProperties AutomationProperties { get; }
    public IRawElementProviderSimple AutomationProvider { get; }
    public T CoreElement { get; }
    public CustomAutomationAdapter`1(T coreElement, AutomationProperties properties);
    public sealed virtual T get_CoreElement();
    public sealed virtual IRawElementProviderSimple GetAutomationProviderForChild(AutomationPeer child);
    public sealed virtual AutomationPeer get_AutomationPeer();
    public sealed virtual IRawElementProviderSimple get_AutomationProvider();
    public sealed virtual AutomationProperties get_AutomationProperties();
    protected sealed virtual string GetClassNameCore();
    protected sealed virtual string GetNameCore();
    protected sealed virtual AutomationControlType GetAutomationControlTypeCore();
    protected sealed virtual string GetAutomationIdCore();
    public sealed virtual object GetPattern(PatternInterface patternInterface);
    protected virtual Rect GetBoundingRectangleCore();
    protected sealed virtual string GetHelpTextCore();
    protected virtual bool HasKeyboardFocusCore();
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
    protected virtual bool IsEnabledCore();
    protected virtual bool IsKeyboardFocusableCore();
    protected virtual bool IsOffscreenCore();
    protected virtual bool IsPasswordCore();
    protected virtual bool IsRequiredForFormCore();
    protected virtual void SetFocusCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual Point GetClickablePointCore();
    protected virtual string GetItemStatusCore();
    protected virtual string GetItemTypeCore();
    protected virtual AutomationPeer GetLabeledByCore();
    protected virtual AutomationOrientation GetOrientationCore();
    protected virtual string GetAcceleratorKeyCore();
    protected virtual string GetAccessKeyCore();
}
public class Microsoft.VisualStudio.Text.Utilities.Automation.CustomReadOnlyValueProvider : MulticastDelegate {
    public CustomReadOnlyValueProvider(object object, IntPtr method);
    public virtual string Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public interface Microsoft.VisualStudio.Text.Utilities.Automation.IAutomatedElement {
    public IAutomationAdapter AutomationAdapter { get; }
    public abstract virtual IAutomationAdapter get_AutomationAdapter();
}
public interface Microsoft.VisualStudio.Text.Utilities.Automation.IAutomationAdapter {
    public AutomationPeer AutomationPeer { get; }
    public AutomationProperties AutomationProperties { get; }
    public IRawElementProviderSimple AutomationProvider { get; }
    public abstract virtual IRawElementProviderSimple GetAutomationProviderForChild(AutomationPeer child);
    public abstract virtual AutomationPeer get_AutomationPeer();
    public abstract virtual IRawElementProviderSimple get_AutomationProvider();
    public abstract virtual AutomationProperties get_AutomationProperties();
}
public interface Microsoft.VisualStudio.Text.Utilities.Automation.IAutomationAdapter`1 {
    public T CoreElement { get; }
    public abstract virtual T get_CoreElement();
}
public abstract class Microsoft.VisualStudio.Text.Utilities.Automation.PatternProvider : object {
    protected IWpfTextView TextView { get; }
    protected IWpfTextView get_TextView();
}
public class Microsoft.VisualStudio.Text.Utilities.Automation.ReadOnlyValuePatternProvider : object {
    public bool IsReadOnly { get; }
    public string Value { get; }
    public ReadOnlyValuePatternProvider(CustomReadOnlyValueProvider customValueProvider);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void SetValue(string value);
    public sealed virtual string get_Value();
}
public class Microsoft.VisualStudio.Text.Utilities.Automation.SelectionValuePatternProvider : PatternProvider {
    public bool IsReadOnly { get; }
    public string Value { get; }
    public SelectionValuePatternProvider(IWpfTextView wpfTextView);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void SetValue(string value);
    public sealed virtual string get_Value();
}
public class Microsoft.VisualStudio.Text.Utilities.Automation.TextPatternProvider : PatternProvider {
    public ITextRangeProvider DocumentRange { get; }
    public SupportedTextSelection SupportedTextSelection { get; }
    public TextPatternProvider(IWpfTextView textView, IAutomatedElement automatedView, IViewPrimitivesFactoryService viewPrimitivesFactoryService);
    public sealed virtual ITextRangeProvider[] GetSelection();
    public sealed virtual ITextRangeProvider[] GetVisibleRanges();
    public sealed virtual ITextRangeProvider RangeFromChild(IRawElementProviderSimple childElement);
    public sealed virtual ITextRangeProvider RangeFromPoint(Point screenLocation);
    public sealed virtual SupportedTextSelection get_SupportedTextSelection();
    public sealed virtual ITextRangeProvider get_DocumentRange();
}
public class Microsoft.VisualStudio.Text.Utilities.Automation.TextRangePatternProvider : PatternProvider {
    public TextRangePatternProvider(IWpfTextView textView, IAutomatedElement automatedView, ITrackingPoint start, ITrackingPoint end, IViewPrimitivesFactoryService viewPrimitiveFactoryService);
    public TextRangePatternProvider(IWpfTextView textView, IAutomatedElement automatedView, Span span, TextView viewPrimitive);
    public TextRangePatternProvider(IWpfTextView textView, IAutomatedElement automatedView, Span span, IViewPrimitivesFactoryService viewPrimitivesFactoryService);
    public TextRangePatternProvider(IWpfTextView textView, IAutomatedElement automatedView, ITrackingPoint start, ITrackingPoint end, TextView viewPrimitive);
    public void CommonInitializationWithTextView(ITextView textView, IAutomatedElement automatedView, ITrackingPoint start, ITrackingPoint end, TextView viewPrimitive);
    public sealed virtual IRawElementProviderSimple[] GetChildren();
    public sealed virtual ITextRangeProvider Clone();
    public sealed virtual bool Compare(ITextRangeProvider range);
    public sealed virtual int CompareEndpoints(TextPatternRangeEndpoint endpoint, ITextRangeProvider targetRange, TextPatternRangeEndpoint targetEndpoint);
    public sealed virtual void ExpandToEnclosingUnit(TextUnit unit);
    public sealed virtual ITextRangeProvider FindAttribute(int attribute, object value, bool backward);
    public sealed virtual ITextRangeProvider FindText(string text, bool backward, bool ignoreCase);
    public sealed virtual object GetAttributeValue(int attribute);
    public sealed virtual Double[] GetBoundingRectangles();
    public sealed virtual IRawElementProviderSimple GetEnclosingElement();
    public sealed virtual string GetText(int maxLength);
    public sealed virtual int Move(TextUnit unit, int count);
    public sealed virtual void MoveEndpointByRange(TextPatternRangeEndpoint endpoint, ITextRangeProvider targetRange, TextPatternRangeEndpoint targetEndpoint);
    public sealed virtual int MoveEndpointByUnit(TextPatternRangeEndpoint endpoint, TextUnit unit, int count);
    public sealed virtual void ScrollIntoView(bool alignToTop);
    public sealed virtual void Select();
    public sealed virtual void AddToSelection();
    public sealed virtual void RemoveFromSelection();
}
public class Microsoft.VisualStudio.Text.Utilities.Automation.ViewValuePatternProvider : PatternProvider {
    public bool IsReadOnly { get; }
    public string Value { get; }
    public ViewValuePatternProvider(IWpfTextView wpfTextView);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void SetValue(string value);
    public sealed virtual string get_Value();
}
public class Microsoft.VisualStudio.Text.Utilities.Automation.WpfAutomationAdapter`1 : UIElementAutomationPeer {
    public AutomationPeer AutomationPeer { get; }
    public AutomationProperties AutomationProperties { get; }
    public IRawElementProviderSimple AutomationProvider { get; }
    public T CoreElement { get; }
    public WpfAutomationAdapter`1(T coreElement, AutomationProperties properties);
    public sealed virtual T get_CoreElement();
    public sealed virtual IRawElementProviderSimple GetAutomationProviderForChild(AutomationPeer child);
    public sealed virtual AutomationPeer get_AutomationPeer();
    public sealed virtual IRawElementProviderSimple get_AutomationProvider();
    public sealed virtual AutomationProperties get_AutomationProperties();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetAutomationIdCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual Rect GetBoundingRectangleCore();
    protected virtual string GetHelpTextCore();
}
public class Microsoft.VisualStudio.Text.Utilities.GeometryAdornment : UIElement {
    protected int VisualChildrenCount { get; }
    public GeometryAdornment(Pen borderPen, Brush fillBrush, Geometry geometry);
    protected virtual Visual GetVisualChild(int index);
    protected virtual int get_VisualChildrenCount();
}
public interface Microsoft.VisualStudio.Text.Utilities.IContentTypeAndTextViewRoleMetadata {
}
public interface Microsoft.VisualStudio.Text.Utilities.IContentTypeMetadata {
    public IEnumerable`1<string> ContentTypes { get; }
    public abstract virtual IEnumerable`1<string> get_ContentTypes();
}
public interface Microsoft.VisualStudio.Text.Utilities.IEncodingDetectorMetadata {
}
public interface Microsoft.VisualStudio.Text.Utilities.IOrderableContentTypeAndTextViewRoleMetadata {
}
public interface Microsoft.VisualStudio.Text.Utilities.IOrderableContentTypeMetadata {
}
public interface Microsoft.VisualStudio.Text.Utilities.ITextViewRoleMetadata {
    public IEnumerable`1<string> TextViewRoles { get; }
    public abstract virtual IEnumerable`1<string> get_TextViewRoles();
}
public interface Microsoft.VisualStudio.Text.Utilities.IWpfTextViewMarginMetadata {
    [DefaultValueAttribute("1")]
public double GridCellLength { get; }
    [DefaultValueAttribute]
public GridUnitType GridUnitType { get; }
    public string MarginContainer { get; }
    public abstract virtual string get_MarginContainer();
    public abstract virtual GridUnitType get_GridUnitType();
    public abstract virtual double get_GridCellLength();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2 : object {
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public TWrapper Item { get; public set; }
    public object SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    public LazyObservableCollection`2(TData underlyingDataObject, int dataObjectCount, WrapperCreator`2<TData, TWrapper> wrapperCreator);
    public sealed virtual int IndexOf(TWrapper item);
    public sealed virtual void Insert(int index, TWrapper item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual TWrapper get_Item(int index);
    public sealed virtual void set_Item(int index, TWrapper value);
    public sealed virtual int Add(object value);
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual void Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void Add(TWrapper item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TWrapper item);
    public sealed virtual void CopyTo(TWrapper[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(TWrapper item);
    public sealed virtual IEnumerator`1<TWrapper> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposeManaged);
    public TWrapper GetWrapper(int index);
    public void SetUnderlyingDataObject(TData newDataObject, int count);
    public void NotifyUnderlyingObjectChanged();
}
public class Microsoft.VisualStudio.Text.Utilities.ProjectionSpanDifference : object {
    public ReadOnlyCollection`1<SnapshotSpan> DeletedSpans { get; }
    public IDifferenceCollection`1<SnapshotSpan> DifferenceCollection { get; }
    public ReadOnlyCollection`1<SnapshotSpan> InsertedSpans { get; }
    public ProjectionSpanDifference(IDifferenceCollection`1<SnapshotSpan> differenceCollection, ReadOnlyCollection`1<SnapshotSpan> insertedSpans, ReadOnlyCollection`1<SnapshotSpan> deletedSpans);
    public IDifferenceCollection`1<SnapshotSpan> get_DifferenceCollection();
    public ReadOnlyCollection`1<SnapshotSpan> get_InsertedSpans();
    public ReadOnlyCollection`1<SnapshotSpan> get_DeletedSpans();
}
public class Microsoft.VisualStudio.Text.Utilities.Strings : object {
    public static string Backslash { get; }
    public static string Capital { get; }
    public static string ChildElementsNotSupported { get; }
    public static string Colon { get; }
    public static string Comma { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string DoubleQuote { get; }
    public static string InvalidTextMovementUnit { get; }
    public static string LeftAngledBracket { get; }
    public static string LeftCurlyBrace { get; }
    public static string LeftParenthesis { get; }
    public static string LeftSquareBracket { get; }
    public static string Period { get; }
    public static string QuestionMark { get; }
    public static string RangeNotValid { get; }
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    public static string RightAngledBracket { get; }
    public static string RightCurlyBrace { get; }
    public static string RightParenthesis { get; }
    public static string RightSquareBracket { get; }
    public static string Semicolon { get; }
    public static string SingleQuote { get; }
    public static string Slash { get; }
    public static string TargetRangeNotValid { get; }
    public static string UnsupportedSearchBasedOnTextFormatted { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_Backslash();
    public static string get_Capital();
    public static string get_ChildElementsNotSupported();
    public static string get_Colon();
    public static string get_Comma();
    public static string get_DoubleQuote();
    public static string get_InvalidTextMovementUnit();
    public static string get_LeftAngledBracket();
    public static string get_LeftCurlyBrace();
    public static string get_LeftParenthesis();
    public static string get_LeftSquareBracket();
    public static string get_Period();
    public static string get_QuestionMark();
    public static string get_RangeNotValid();
    public static string get_RightAngledBracket();
    public static string get_RightCurlyBrace();
    public static string get_RightParenthesis();
    public static string get_RightSquareBracket();
    public static string get_Semicolon();
    public static string get_SingleQuote();
    public static string get_Slash();
    public static string get_TargetRangeNotValid();
    public static string get_UnsupportedSearchBasedOnTextFormatted();
}
public class Microsoft.VisualStudio.Text.Utilities.TrackingSpanNode`1 : object {
    public List`1<TrackingSpanNode`1<T>> Children { get; }
    public T Item { get; }
    public ITrackingSpan TrackingSpan { get; }
    public TrackingSpanNode`1(T item, ITrackingSpan trackingSpan);
    public TrackingSpanNode`1(T item, ITrackingSpan trackingSpan, List`1<TrackingSpanNode`1<T>> children);
    public T get_Item();
    public ITrackingSpan get_TrackingSpan();
    public List`1<TrackingSpanNode`1<T>> get_Children();
}
public class Microsoft.VisualStudio.Text.Utilities.TrackingSpanTree`1 : object {
    public ITextBuffer Buffer { get; }
    public int Count { get; }
    public TrackingSpanNode`1<T> Root { get; }
    public TrackingSpanTree`1(ITextBuffer buffer, bool keepTrackingCurrent);
    public TrackingSpanNode`1<T> get_Root();
    public ITextBuffer get_Buffer();
    public int get_Count();
    public TrackingSpanNode`1<T> TryAddItem(T item, ITrackingSpan trackingSpan);
    public bool RemoveItem(T item, ITrackingSpan trackingSpan);
    public void Clear();
    public IEnumerable`1<TrackingSpanNode`1<T>> FindNodesIntersecting(SnapshotSpan span);
    public IEnumerable`1<TrackingSpanNode`1<T>> FindNodesIntersecting(NormalizedSnapshotSpanCollection spans);
    public IEnumerable`1<TrackingSpanNode`1<T>> FindTopLevelNodesIntersecting(SnapshotSpan span);
    public IEnumerable`1<TrackingSpanNode`1<T>> FindTopLevelNodesIntersecting(NormalizedSnapshotSpanCollection spans);
    public IEnumerable`1<TrackingSpanNode`1<T>> FindNodesContainedBy(SnapshotSpan span);
    public IEnumerable`1<TrackingSpanNode`1<T>> FindNodesContainedBy(NormalizedSnapshotSpanCollection spans);
    public IEnumerable`1<TrackingSpanNode`1<T>> FindTopLevelNodesContainedBy(SnapshotSpan span);
    public IEnumerable`1<TrackingSpanNode`1<T>> FindTopLevelNodesContainedBy(NormalizedSnapshotSpanCollection spans);
    public bool IsPointContainedInANode(SnapshotPoint point);
    public bool IsNodeTopLevel(TrackingSpanNode`1<T> node);
    public void Advance(ITextVersion toVersion);
}
public class Microsoft.VisualStudio.Text.Utilities.WeakReferenceForDictionaryKey : WeakReference {
    public WeakReferenceForDictionaryKey(object target);
    protected WeakReferenceForDictionaryKey(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public static class Microsoft.VisualStudio.Text.Utilities.WpfHelper : object {
    public static double DeviceScaleX;
    public static double DeviceScaleY;
    public static int GCS_COMPSTR;
    public static int GCS_RESULTSTR;
    public static int IMR_CONFIRMRECONVERTSTRING;
    public static int IMR_RECONVERTSTRING;
    public static int LCID_KOREAN;
    public static int VK_HANJA;
    public static int WM_IME_CHAR;
    public static int WM_IME_COMPOSITION;
    public static int WM_IME_COMPOSITIONFULL;
    public static int WM_IME_CONTROL;
    public static int WM_IME_ENDCOMPOSITION;
    public static int WM_IME_KEYDOWN;
    public static int WM_IME_NOTIFY;
    public static int WM_IME_REQUEST;
    public static int WM_IME_SELECT;
    public static int WM_IME_SETCONTEXT;
    public static int WM_IME_STARTCOMPOSITION;
    public static int WM_KEYDOWN;
    public static Rect GetScreenRect(Point screenCoordinates);
    public static Visual GetRootVisual(Visual visual);
    public static bool BrushesEqual(Brush brush, Brush other);
    public static bool TypefacesEqual(Typeface typeface, Typeface other);
    public static string GetImmCompositionString(IntPtr immContext, int dwIndex);
    public static void FlushImmCompositionString(IntPtr immContext);
    public static bool ImmNotifyIME(IntPtr immContext, int dwAction, int dwIndex, int dwValue);
    public static bool HanjaConversion(IntPtr context, IntPtr keyboardLayout, char selection);
    public static void SetNoTopmost(Visual visual);
    public static IntPtr ReconvertString(IntPtr lParam, SnapshotSpan selection);
    public static SnapshotSpan ConfirmReconvertString(IntPtr lParam, SnapshotSpan selection);
    public static bool SetCompositionPositionAndHeight(HwndSource source, IntPtr immContext, string baseFont, string compositionFont, double topPaddingOverride, double bottomPaddingOverride, double heightPaddingOverride, Point compositionTopLeft, double textHeight, Visual relativeTo, Point viewTopLeft, Point viewBottomRight);
    public static IntPtr GetDefaultIMEWnd();
    public static IntPtr GetImmContext(IntPtr hwnd);
    public static bool ReleaseContext(IntPtr hwnd, IntPtr immContext);
    public static IntPtr AttachContext(HwndSource hwndSource, IntPtr imeContext);
    public static void EnableImmComposition();
    public static IntPtr GetKeyboardLayout();
    public static bool ImmIsIME(IntPtr hkl);
}
public class Microsoft.VisualStudio.Text.Utilities.WrapperCreator`2 : MulticastDelegate {
    public WrapperCreator`2(object object, IntPtr method);
    public virtual TWrapper Invoke(TData underlyingData, int index);
    public virtual IAsyncResult BeginInvoke(TData underlyingData, int index, AsyncCallback callback, object object);
    public virtual TWrapper EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.Text.VirtualSnapshotPoint : ValueType {
    private int __Asmmeta_Private_Field;
    public bool IsInVirtualSpace { get; }
    public SnapshotPoint Position { get; }
    public int VirtualSpaces { get; }
    public VirtualSnapshotPoint(SnapshotPoint position);
    public VirtualSnapshotPoint(ITextSnapshot snapshot, int position);
    public VirtualSnapshotPoint(SnapshotPoint position, int virtualSpaces);
    public VirtualSnapshotPoint(ITextSnapshotLine line, int offset);
    public SnapshotPoint get_Position();
    public int get_VirtualSpaces();
    public bool get_IsInVirtualSpace();
    public virtual int GetHashCode();
    public VirtualSnapshotPoint TranslateTo(ITextSnapshot snapshot);
    public VirtualSnapshotPoint TranslateTo(ITextSnapshot snapshot, PointTrackingMode trackingMode);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public static bool op_Equality(VirtualSnapshotPoint left, VirtualSnapshotPoint right);
    public static bool op_Inequality(VirtualSnapshotPoint left, VirtualSnapshotPoint right);
    public static bool op_GreaterThan(VirtualSnapshotPoint left, VirtualSnapshotPoint right);
    public static bool op_GreaterThanOrEqual(VirtualSnapshotPoint left, VirtualSnapshotPoint right);
    public static bool op_LessThan(VirtualSnapshotPoint left, VirtualSnapshotPoint right);
    public static bool op_LessThanOrEqual(VirtualSnapshotPoint left, VirtualSnapshotPoint right);
    public sealed virtual int CompareTo(VirtualSnapshotPoint other);
}
public class Microsoft.VisualStudio.Text.VirtualSnapshotSpan : ValueType {
    private int __Asmmeta_Private_Field;
    public VirtualSnapshotPoint End { get; }
    public bool IsEmpty { get; }
    public bool IsInVirtualSpace { get; }
    public int Length { get; }
    public ITextSnapshot Snapshot { get; }
    public SnapshotSpan SnapshotSpan { get; }
    public VirtualSnapshotPoint Start { get; }
    public VirtualSnapshotSpan(SnapshotSpan snapshotSpan);
    public VirtualSnapshotSpan(VirtualSnapshotPoint start, VirtualSnapshotPoint end);
    public VirtualSnapshotPoint get_Start();
    public VirtualSnapshotPoint get_End();
    public ITextSnapshot get_Snapshot();
    public int get_Length();
    public string GetText();
    public SnapshotSpan get_SnapshotSpan();
    public bool get_IsInVirtualSpace();
    public bool get_IsEmpty();
    public bool Contains(VirtualSnapshotPoint virtualPoint);
    public bool Contains(VirtualSnapshotSpan virtualSpan);
    public bool OverlapsWith(VirtualSnapshotSpan virtualSpan);
    public Nullable`1<VirtualSnapshotSpan> Overlap(VirtualSnapshotSpan virtualSpan);
    public bool IntersectsWith(VirtualSnapshotSpan virtualSpan);
    public Nullable`1<VirtualSnapshotSpan> Intersection(VirtualSnapshotSpan virtualSpan);
    public virtual int GetHashCode();
    public VirtualSnapshotSpan TranslateTo(ITextSnapshot snapshot);
    public VirtualSnapshotSpan TranslateTo(ITextSnapshot snapshot, SpanTrackingMode trackingMode);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public static bool op_Equality(VirtualSnapshotSpan left, VirtualSnapshotSpan right);
    public static bool op_Inequality(VirtualSnapshotSpan left, VirtualSnapshotSpan right);
}
public class Microsoft.VisualStudio.Utilities.BaseDefinitionAttribute : MultipleBaseMetadataAttribute {
    public string BaseDefinition { get; }
    public BaseDefinitionAttribute(string name);
    public string get_BaseDefinition();
}
public class Microsoft.VisualStudio.Utilities.ContentTypeAttribute : MultipleBaseMetadataAttribute {
    public string ContentTypes { get; }
    public ContentTypeAttribute(string name);
    public string get_ContentTypes();
}
public class Microsoft.VisualStudio.Utilities.ContentTypeDefinition : object {
}
public class Microsoft.VisualStudio.Utilities.DisplayNameAttribute : SingletonBaseMetadataAttribute {
    public string DisplayName { get; }
    public DisplayNameAttribute(string displayName);
    public string get_DisplayName();
}
public class Microsoft.VisualStudio.Utilities.FileExtensionAttribute : SingletonBaseMetadataAttribute {
    public string FileExtension { get; }
    public FileExtensionAttribute(string fileExtension);
    public string get_FileExtension();
}
public class Microsoft.VisualStudio.Utilities.FileExtensionToContentTypeDefinition : object {
}
public interface Microsoft.VisualStudio.Utilities.IContentType {
    public IEnumerable`1<IContentType> BaseTypes { get; }
    public string DisplayName { get; }
    public string TypeName { get; }
    public abstract virtual string get_TypeName();
    public abstract virtual string get_DisplayName();
    public abstract virtual bool IsOfType(string type);
    public abstract virtual IEnumerable`1<IContentType> get_BaseTypes();
}
public interface Microsoft.VisualStudio.Utilities.IContentTypeDefinition {
    public IEnumerable`1<string> BaseDefinitions { get; }
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual IEnumerable`1<string> get_BaseDefinitions();
}
public interface Microsoft.VisualStudio.Utilities.IContentTypeDefinitionSource {
    public IEnumerable`1<IContentTypeDefinition> Definitions { get; }
    public abstract virtual IEnumerable`1<IContentTypeDefinition> get_Definitions();
}
public interface Microsoft.VisualStudio.Utilities.IContentTypeRegistryService {
    public IEnumerable`1<IContentType> ContentTypes { get; }
    public IContentType UnknownContentType { get; }
    public abstract virtual IContentType GetContentType(string typeName);
    public abstract virtual IContentType AddContentType(string typeName, IEnumerable`1<string> baseTypeNames);
    public abstract virtual void RemoveContentType(string typeName);
    public abstract virtual IContentType get_UnknownContentType();
    public abstract virtual IEnumerable`1<IContentType> get_ContentTypes();
}
public interface Microsoft.VisualStudio.Utilities.IFileExtensionRegistryService {
    public abstract virtual IContentType GetContentTypeForExtension(string extension);
    public abstract virtual IEnumerable`1<string> GetExtensionsForContentType(IContentType contentType);
    public abstract virtual void AddFileExtension(string extension, IContentType contentType);
    public abstract virtual void RemoveFileExtension(string extension);
}
public interface Microsoft.VisualStudio.Utilities.Implementation.IContentTypeDefinitionMetadata {
    [DefaultValueAttribute("")]
public IEnumerable`1<string> BaseDefinition { get; }
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual IEnumerable`1<string> get_BaseDefinition();
}
public interface Microsoft.VisualStudio.Utilities.Implementation.IFileExtensionToContentTypeMetadata {
    public IEnumerable`1<string> ContentTypes { get; }
    public string FileExtension { get; }
    public abstract virtual string get_FileExtension();
    public abstract virtual IEnumerable`1<string> get_ContentTypes();
}
public interface Microsoft.VisualStudio.Utilities.IObjectTracker {
    public abstract virtual void TrackObject(object value, string bucketName);
}
public interface Microsoft.VisualStudio.Utilities.IOrderable {
    [DefaultValueAttribute("")]
public IEnumerable`1<string> After { get; }
    [DefaultValueAttribute("")]
public IEnumerable`1<string> Before { get; }
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual IEnumerable`1<string> get_Before();
    public abstract virtual IEnumerable`1<string> get_After();
}
public interface Microsoft.VisualStudio.Utilities.IPropertyOwner {
    public PropertyCollection Properties { get; }
    public abstract virtual PropertyCollection get_Properties();
}
[AttributeUsageAttribute("452")]
public abstract class Microsoft.VisualStudio.Utilities.MultipleBaseMetadataAttribute : Attribute {
}
public class Microsoft.VisualStudio.Utilities.NameAttribute : SingletonBaseMetadataAttribute {
    public string Name { get; }
    public NameAttribute(string name);
    public string get_Name();
}
public class Microsoft.VisualStudio.Utilities.OrderAttribute : MultipleBaseMetadataAttribute {
    public string After { get; public set; }
    public string Before { get; public set; }
    public string get_Before();
    public void set_Before(string value);
    public string get_After();
    public void set_After(string value);
}
public static class Microsoft.VisualStudio.Utilities.Orderer : object {
    public static IList`1<Lazy`2<TValue, TMetadata>> Order(IEnumerable`1<Lazy`2<TValue, TMetadata>> itemsToOrder);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualStudio.Utilities.PropertyCollection : object {
    public object Item { get; public set; }
    public ReadOnlyCollection`1<KeyValuePair`2<object, object>> PropertyList { get; }
    public void AddProperty(object key, object property);
    public bool RemoveProperty(object key);
    public T GetOrCreateSingletonProperty(object key, Func`1<T> creator);
    public T GetOrCreateSingletonProperty(Func`1<T> creator);
    public TProperty GetProperty(object key);
    public object GetProperty(object key);
    public bool TryGetProperty(object key, TProperty& property);
    public bool ContainsProperty(object key);
    public object get_Item(object key);
    public void set_Item(object key, object value);
    public ReadOnlyCollection`1<KeyValuePair`2<object, object>> get_PropertyList();
}
[AttributeUsageAttribute("452")]
public abstract class Microsoft.VisualStudio.Utilities.SingletonBaseMetadataAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
public class XamlGeneratedNamespace.GeneratedInternalTypeHelper : InternalTypeHelper {
    protected virtual object CreateInstance(Type type, CultureInfo culture);
    protected virtual object GetPropertyValue(PropertyInfo propertyInfo, object target, CultureInfo culture);
    protected virtual void SetPropertyValue(PropertyInfo propertyInfo, object target, object value, CultureInfo culture);
    protected virtual Delegate CreateDelegate(Type delegateType, object target, string handler);
    protected virtual void AddEventHandler(EventInfo eventInfo, object target, Delegate handler);
}
