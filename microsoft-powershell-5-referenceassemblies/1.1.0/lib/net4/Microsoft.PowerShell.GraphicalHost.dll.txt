public class Microsoft.Management.UI.HelpWindow : Window {
    public static double MaximumZoom;
    public static double MinimumZoom;
    public static double ZoomInterval;
    public HelpWindow(PSObject helpObject);
    protected virtual void OnPreviewMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.Management.UI.Internal.AddFilterRulePicker : Control {
    public static DependencyProperty AddFilterRulesCommandProperty;
    public static DependencyProperty AddFilterRulesCommandTargetProperty;
    public static RoutedCommand CancelAddFilterRulesCommand;
    public static DependencyProperty IsOpenProperty;
    public static RoutedCommand OkAddFilterRulesCommand;
    [DescriptionAttribute("Gets or sets the command used to communicate that the action has occurred.")]
[BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
public ICommand AddFilterRulesCommand { get; public set; }
    [DescriptionAttribute("Gets or sets a target of the Command.")]
[BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
public IInputElement AddFilterRulesCommandTarget { get; public set; }
    public ObservableCollection`1<AddFilterRulePickerItem> ColumnFilterRules { get; }
    [DescriptionAttribute("Gets or sets a value indicating whether the Popup is visible.")]
[BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
public bool IsOpen { get; public set; }
    public ObservableCollection`1<AddFilterRulePickerItem> ShortcutFilterRules { get; }
    public ObservableCollection`1<AddFilterRulePickerItem> get_ShortcutFilterRules();
    public ObservableCollection`1<AddFilterRulePickerItem> get_ColumnFilterRules();
    protected virtual void OnCancelAddFilterRulesExecuted(ExecutedRoutedEventArgs e);
    protected virtual void OnOkAddFilterRulesCanExecute(CanExecuteRoutedEventArgs e);
    protected virtual void OnOkAddFilterRulesExecuted(ExecutedRoutedEventArgs e);
    public ICommand get_AddFilterRulesCommand();
    public void set_AddFilterRulesCommand(ICommand value);
    public void add_AddFilterRulesCommandChanged(EventHandler`1<PropertyChangedEventArgs`1<ICommand>> value);
    public void remove_AddFilterRulesCommandChanged(EventHandler`1<PropertyChangedEventArgs`1<ICommand>> value);
    protected virtual void OnAddFilterRulesCommandChanged(PropertyChangedEventArgs`1<ICommand> e);
    public IInputElement get_AddFilterRulesCommandTarget();
    public void set_AddFilterRulesCommandTarget(IInputElement value);
    public void add_AddFilterRulesCommandTargetChanged(EventHandler`1<PropertyChangedEventArgs`1<IInputElement>> value);
    public void remove_AddFilterRulesCommandTargetChanged(EventHandler`1<PropertyChangedEventArgs`1<IInputElement>> value);
    protected virtual void OnAddFilterRulesCommandTargetChanged(PropertyChangedEventArgs`1<IInputElement> e);
    public bool get_IsOpen();
    public void set_IsOpen(bool value);
    public void add_IsOpenChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    public void remove_IsOpenChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnIsOpenChanged(PropertyChangedEventArgs`1<bool> e);
}
public class Microsoft.Management.UI.Internal.AddFilterRulePickerItem : object {
    public FilterRulePanelItem FilterRule { get; }
    public bool IsChecked { get; public set; }
    public AddFilterRulePickerItem(FilterRulePanelItem filterRule);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    public FilterRulePanelItem get_FilterRule();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void NotifyPropertyChanged(string propertyName);
}
public class Microsoft.Management.UI.Internal.AutomationGroup : ContentControl {
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[DescriptionAttribute("Provides a System.Windows.Controls.TextBlock control that is always visible in the automation tree.")]
public class Microsoft.Management.UI.Internal.AutomationTextBlock : TextBlock {
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
public class Microsoft.Management.UI.Internal.ColumnPicker : Window {
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public abstract class Microsoft.Management.UI.Internal.ComparableValueFilterRule`1 : FilterRule {
    protected bool DefaultNullValueEvaluation { get; protected set; }
    protected bool get_DefaultNullValueEvaluation();
    protected void set_DefaultNullValueEvaluation(bool value);
    public virtual bool Evaluate(object item);
    protected abstract virtual bool Evaluate(T data);
}
public enum Microsoft.Management.UI.Internal.ControlState : Enum {
    public int value__;
    public static ControlState Error;
    public static ControlState Ready;
    public static ControlState Refreshing;
}
public static class Microsoft.Management.UI.Internal.CustomTypeComparer : object {
    public static int Compare(T value1, T value2);
}
public class Microsoft.Management.UI.Internal.DataErrorInfoValidationResult : ValidationResult {
    public string ErrorMessage { get; }
    public bool IsUserVisible { get; }
    public static DataErrorInfoValidationResult ValidResult { get; }
    public DataErrorInfoValidationResult(bool isValid, object errorContent, string errorMessage);
    public bool get_IsUserVisible();
    public string get_ErrorMessage();
    public static DataErrorInfoValidationResult get_ValidResult();
}
public abstract class Microsoft.Management.UI.Internal.DataErrorInfoValidationRule : object {
    public abstract virtual DataErrorInfoValidationResult Validate(object value, CultureInfo cultureInfo);
}
public class Microsoft.Management.UI.Internal.DataRoutedEventArgs`1 : RoutedEventArgs {
    public T Data { get; }
    public DataRoutedEventArgs`1(T data, RoutedEvent routedEvent);
    public T get_Data();
}
public class Microsoft.Management.UI.Internal.DateTimeApproximationComparer : object {
    public sealed virtual int Compare(DateTime value1, DateTime value2);
}
public class Microsoft.Management.UI.Internal.DefaultFilterRuleCustomizationFactory : FilterRuleCustomizationFactory {
    public IPropertyValueGetter PropertyValueGetter { get; public set; }
    public virtual IPropertyValueGetter get_PropertyValueGetter();
    public virtual void set_PropertyValueGetter(IPropertyValueGetter value);
    public virtual ICollection`1<FilterRule> CreateDefaultFilterRulesForPropertyValueSelectorFilterRule();
    public virtual void TransferValues(FilterRule oldRule, FilterRule newRule);
    public virtual void ClearValues(FilterRule rule);
    public virtual string GetErrorMessageForInvalidValue(string value, Type typeToParseTo);
}
public class Microsoft.Management.UI.Internal.DefaultStringConverter : object {
    public string DefaultValue { get; public set; }
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class Microsoft.Management.UI.Internal.DismissiblePopup : Popup {
    public static DependencyProperty CloseOnEscapeProperty;
    public static RoutedCommand DismissPopupCommand;
    public static DependencyProperty FocusChildOnOpenProperty;
    public static DependencyProperty SetFocusOnCloseElementProperty;
    public static DependencyProperty SetFocusOnCloseProperty;
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value indicating whether the popup closes when ESC is pressed.")]
public bool CloseOnEscape { get; public set; }
    [DescriptionAttribute("Gets or sets a value indicating whether focus should be set on the child when the popup opens.")]
[BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
public bool FocusChildOnOpen { get; public set; }
    [DescriptionAttribute("Indicates whether the focus returns to either a defined by the FocusOnCloseTarget dependency property UIElement or PlacementTarget or not.")]
[CategoryAttribute("Common Properties")]
[BindableAttribute("True")]
public bool SetFocusOnClose { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("If the SetFocusOnClose property is set True and this property is set to a valid UIElement, focus returns to this UIElement after the DismissiblePopup is closed.")]
public UIElement SetFocusOnCloseElement { get; public set; }
    protected virtual void OnOpened(EventArgs e);
    protected virtual void OnClosed(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnDismissPopupExecuted(ExecutedRoutedEventArgs e);
    public bool get_CloseOnEscape();
    public void set_CloseOnEscape(bool value);
    public void add_CloseOnEscapeChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    public void remove_CloseOnEscapeChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnCloseOnEscapeChanged(PropertyChangedEventArgs`1<bool> e);
    public bool get_FocusChildOnOpen();
    public void set_FocusChildOnOpen(bool value);
    public void add_FocusChildOnOpenChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    public void remove_FocusChildOnOpenChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnFocusChildOnOpenChanged(PropertyChangedEventArgs`1<bool> e);
    public bool get_SetFocusOnClose();
    public void set_SetFocusOnClose(bool value);
    public void add_SetFocusOnCloseChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    public void remove_SetFocusOnCloseChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnSetFocusOnCloseChanged(PropertyChangedEventArgs`1<bool> e);
    public UIElement get_SetFocusOnCloseElement();
    public void set_SetFocusOnCloseElement(UIElement value);
    public void add_SetFocusOnCloseElementChanged(EventHandler`1<PropertyChangedEventArgs`1<UIElement>> value);
    public void remove_SetFocusOnCloseElementChanged(EventHandler`1<PropertyChangedEventArgs`1<UIElement>> value);
    protected virtual void OnSetFocusOnCloseElementChanged(PropertyChangedEventArgs`1<UIElement> e);
}
public class Microsoft.Management.UI.Internal.DoesNotEqualFilterRule`1 : EqualsFilterRule`1<T> {
    protected virtual bool Evaluate(T data);
}
public class Microsoft.Management.UI.Internal.EqualsFilterRule`1 : SingleValueComparableValueFilterRule`1<T> {
    protected virtual bool Evaluate(T data);
}
public class Microsoft.Management.UI.Internal.ExpanderButton : ToggleButton {
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    protected void OnIsCheckedChanged(DependencyPropertyChangedEventArgs args);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
public class Microsoft.Management.UI.Internal.ExpanderButtonAutomationPeer : ToggleButtonAutomationPeer {
    private ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState { get; }
    public ExpanderButtonAutomationPeer(ExpanderButton owner);
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.get_ExpandCollapseState();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Expand();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse();
}
public class Microsoft.Management.UI.Internal.ExtendedFrameworkElementAutomationPeer : FrameworkElementAutomationPeer {
    public ExtendedFrameworkElementAutomationPeer(FrameworkElement owner);
    public ExtendedFrameworkElementAutomationPeer(FrameworkElement owner, AutomationControlType controlType);
    public ExtendedFrameworkElementAutomationPeer(FrameworkElement owner, AutomationControlType controlType, bool isControlElement);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsControlElementCore();
}
public abstract class Microsoft.Management.UI.Internal.FilterEvaluator : object {
    public FilterExpressionNode FilterExpression { get; }
    public ReadOnlyCollection`1<IFilterExpressionProvider> FilterExpressionProviders { get; }
    public FilterStatus FilterStatus { get; protected set; }
    public bool HasFilterExpression { get; protected set; }
    public bool StartFilterOnExpressionChanged { get; public set; }
    public ReadOnlyCollection`1<IFilterExpressionProvider> get_FilterExpressionProviders();
    public FilterStatus get_FilterStatus();
    protected void set_FilterStatus(FilterStatus value);
    public bool get_StartFilterOnExpressionChanged();
    public void set_StartFilterOnExpressionChanged(bool value);
    public sealed virtual bool get_HasFilterExpression();
    protected void set_HasFilterExpression(bool value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public abstract virtual void StartFilter();
    public abstract virtual void StopFilter();
    public sealed virtual FilterExpressionNode get_FilterExpression();
    public void AddFilterExpressionProvider(IFilterExpressionProvider provider);
    public void RemoveFilterExpressionProvider(IFilterExpressionProvider provider);
    protected void NotifyPropertyChanged(string propertyName);
    public sealed virtual void add_FilterExpressionChanged(EventHandler value);
    public sealed virtual void remove_FilterExpressionChanged(EventHandler value);
    protected virtual void NotifyFilterExpressionChanged();
}
public class Microsoft.Management.UI.Internal.FilterExceptionEventArgs : EventArgs {
    public Exception Exception { get; }
    public FilterExceptionEventArgs(Exception exception);
    public Exception get_Exception();
}
public class Microsoft.Management.UI.Internal.FilterExpressionAndOperatorNode : FilterExpressionNode {
    public ICollection`1<FilterExpressionNode> Children { get; }
    public FilterExpressionAndOperatorNode(IEnumerable`1<FilterExpressionNode> children);
    public ICollection`1<FilterExpressionNode> get_Children();
    public virtual bool Evaluate(object item);
}
public abstract class Microsoft.Management.UI.Internal.FilterExpressionNode : object {
    public abstract virtual bool Evaluate(object item);
    public ICollection`1<T> FindAll();
}
public class Microsoft.Management.UI.Internal.FilterExpressionOperandNode : FilterExpressionNode {
    public FilterRule Rule { get; protected set; }
    public FilterExpressionOperandNode(FilterRule rule);
    public FilterRule get_Rule();
    protected void set_Rule(FilterRule value);
    public virtual bool Evaluate(object item);
}
public class Microsoft.Management.UI.Internal.FilterExpressionOrOperatorNode : FilterExpressionNode {
    public ICollection`1<FilterExpressionNode> Children { get; }
    public FilterExpressionOrOperatorNode(IEnumerable`1<FilterExpressionNode> children);
    public ICollection`1<FilterExpressionNode> get_Children();
    public virtual bool Evaluate(object item);
}
public abstract class Microsoft.Management.UI.Internal.FilterRule : object {
    public string DisplayName { get; protected set; }
    public bool IsValid { get; }
    public virtual bool get_IsValid();
    public string get_DisplayName();
    protected void set_DisplayName(string value);
    public abstract virtual bool Evaluate(object item);
    public void add_EvaluationResultInvalidated(EventHandler value);
    public void remove_EvaluationResultInvalidated(EventHandler value);
    protected void NotifyEvaluationResultInvalidated();
}
public abstract class Microsoft.Management.UI.Internal.FilterRuleCustomizationFactory : object {
    public static FilterRuleCustomizationFactory FactoryInstance { get; public set; }
    public IPropertyValueGetter PropertyValueGetter { get; public set; }
    public static FilterRuleCustomizationFactory get_FactoryInstance();
    public static void set_FactoryInstance(FilterRuleCustomizationFactory value);
    public abstract virtual IPropertyValueGetter get_PropertyValueGetter();
    public abstract virtual void set_PropertyValueGetter(IPropertyValueGetter value);
    public abstract virtual ICollection`1<FilterRule> CreateDefaultFilterRulesForPropertyValueSelectorFilterRule();
    public abstract virtual void TransferValues(FilterRule oldRule, FilterRule newRule);
    public abstract virtual void ClearValues(FilterRule rule);
    public abstract virtual string GetErrorMessageForInvalidValue(string value, Type typeToParseTo);
}
public static class Microsoft.Management.UI.Internal.FilterRuleExtensions : object {
    public static FilterRule DeepCopy(FilterRule rule);
}
public class Microsoft.Management.UI.Internal.FilterRulePanel : Control {
    public static RoutedCommand AddRulesCommand;
    public static RoutedCommand RemoveRuleCommand;
    public FilterRulePanelController Controller { get; }
    public FilterExpressionNode FilterExpression { get; }
    public ReadOnlyCollection`1<FilterRulePanelItem> FilterRulePanelItems { get; }
    public DataTemplateSelector FilterRuleTemplateSelector { get; }
    public bool HasFilterExpression { get; }
    public ReadOnlyCollection`1<FilterRulePanelItem> get_FilterRulePanelItems();
    public sealed virtual FilterExpressionNode get_FilterExpression();
    public FilterRulePanelController get_Controller();
    public DataTemplateSelector get_FilterRuleTemplateSelector();
    public sealed virtual bool get_HasFilterExpression();
    public sealed virtual void add_FilterExpressionChanged(EventHandler value);
    public sealed virtual void remove_FilterExpressionChanged(EventHandler value);
    public void AddFilterRulePanelItemContentTemplate(Type type, DataTemplate dataTemplate);
    public void RemoveFilterRulePanelItemContentTemplate(Type type);
    public bool TryGetContentTemplate(Type type, DataTemplate& dataTemplate);
    public void ClearContentTemplates();
    protected virtual void NotifyFilterExpressionChanged();
    protected virtual void OnAddRulesExecuted(ExecutedRoutedEventArgs e);
    protected virtual void OnRemoveRuleExecuted(ExecutedRoutedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
public class Microsoft.Management.UI.Internal.FilterRulePanelContentPresenter : ContentPresenter {
    public IValueConverter ContentConverter { get; public set; }
    public IValueConverter get_ContentConverter();
    public void set_ContentConverter(IValueConverter value);
    protected virtual DataTemplate ChooseTemplate();
}
public class Microsoft.Management.UI.Internal.FilterRulePanelController : object {
    public FilterExpressionNode FilterExpression { get; }
    public ReadOnlyCollection`1<FilterRulePanelItem> FilterRulePanelItems { get; }
    public bool HasFilterExpression { get; }
    public ReadOnlyCollection`1<FilterRulePanelItem> get_FilterRulePanelItems();
    public sealed virtual FilterExpressionNode get_FilterExpression();
    public sealed virtual bool get_HasFilterExpression();
    public sealed virtual void add_FilterExpressionChanged(EventHandler value);
    public sealed virtual void remove_FilterExpressionChanged(EventHandler value);
    public void AddFilterRulePanelItem(FilterRulePanelItem item);
    public void RemoveFilterRulePanelItem(FilterRulePanelItem item);
    public void ClearFilterRulePanelItems();
    protected virtual void NotifyFilterExpressionChanged();
}
public class Microsoft.Management.UI.Internal.FilterRulePanelItem : object {
    public string GroupId { get; }
    public FilterRulePanelItemType ItemType { get; protected internal set; }
    public FilterRule Rule { get; }
    public FilterRulePanelItem(FilterRule rule, string groupId);
    public FilterRule get_Rule();
    public string get_GroupId();
    public FilterRulePanelItemType get_ItemType();
    protected internal void set_ItemType(FilterRulePanelItemType value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void NotifyPropertyChanged(string propertyName);
}
public enum Microsoft.Management.UI.Internal.FilterRulePanelItemType : Enum {
    public int value__;
    public static FilterRulePanelItemType FirstHeader;
    public static FilterRulePanelItemType Header;
    public static FilterRulePanelItemType Item;
}
public class Microsoft.Management.UI.Internal.FilterRuleTemplateSelector : DataTemplateSelector {
    public IDictionary`2<Type, DataTemplate> TemplateDictionary { get; }
    public IDictionary`2<Type, DataTemplate> get_TemplateDictionary();
    public virtual DataTemplate SelectTemplate(object item, DependencyObject container);
}
public class Microsoft.Management.UI.Internal.FilterRuleToDisplayNameConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public enum Microsoft.Management.UI.Internal.FilterStatus : Enum {
    public int value__;
    public static FilterStatus Applied;
    public static FilterStatus InProgress;
    public static FilterStatus NotApplied;
}
public class Microsoft.Management.UI.Internal.HelpWindowResources : object {
    public static string CancelText { get; }
    public static string CaseSensitiveTitle { get; }
    public static string CommonParameters { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string DescriptionTitle { get; }
    public static string ExamplesTitle { get; }
    public static string FindText { get; }
    public static string HelpSectionsTitle { get; }
    public static string HelpTitleFormat { get; }
    public static string InputsTitle { get; }
    public static string LinkTextFormat { get; }
    public static string MethodsTitle { get; }
    public static string NextText { get; }
    public static string NoMatches { get; }
    public static string NotesTitle { get; }
    public static string OKText { get; }
    public static string OneMatch { get; }
    public static string OutputsTitle { get; }
    public static string ParameterAcceptWildcard { get; }
    public static string ParameterDefautValue { get; }
    public static string ParameterPipelineInput { get; }
    public static string ParameterPosition { get; }
    public static string ParameterRequired { get; }
    public static string ParametersTitle { get; }
    public static string PreviousText { get; }
    public static string PropertiesTitle { get; }
    public static string RelatedLinksTitle { get; }
    public static string RemarksTitle { get; }
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    public static string SearchOptionsTitle { get; }
    public static string SettingsText { get; }
    public static string SomeMatchesFormat { get; }
    public static string SynopsisTitle { get; }
    public static string SyntaxTitle { get; }
    public static string Title { get; }
    public static string WholeWordTitle { get; }
    public static string ZoomLabelTextFormat { get; }
    public static string ZoomSlider { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_CancelText();
    public static string get_CaseSensitiveTitle();
    public static string get_CommonParameters();
    public static string get_DescriptionTitle();
    public static string get_ExamplesTitle();
    public static string get_FindText();
    public static string get_HelpSectionsTitle();
    public static string get_HelpTitleFormat();
    public static string get_InputsTitle();
    public static string get_LinkTextFormat();
    public static string get_MethodsTitle();
    public static string get_NextText();
    public static string get_NoMatches();
    public static string get_NotesTitle();
    public static string get_OKText();
    public static string get_OneMatch();
    public static string get_OutputsTitle();
    public static string get_ParameterAcceptWildcard();
    public static string get_ParameterDefautValue();
    public static string get_ParameterPipelineInput();
    public static string get_ParameterPosition();
    public static string get_ParameterRequired();
    public static string get_ParametersTitle();
    public static string get_PreviousText();
    public static string get_PropertiesTitle();
    public static string get_RelatedLinksTitle();
    public static string get_RemarksTitle();
    public static string get_SearchOptionsTitle();
    public static string get_SettingsText();
    public static string get_SomeMatchesFormat();
    public static string get_SynopsisTitle();
    public static string get_SyntaxTitle();
    public static string get_Title();
    public static string get_WholeWordTitle();
    public static string get_ZoomLabelTextFormat();
    public static string get_ZoomSlider();
}
public interface Microsoft.Management.UI.Internal.IAsyncProgress {
    public Exception OperationError { get; }
    public bool OperationInProgress { get; }
    public abstract virtual bool get_OperationInProgress();
    public abstract virtual Exception get_OperationError();
}
public interface Microsoft.Management.UI.Internal.IEvaluate {
    public abstract virtual bool Evaluate(object item);
}
public interface Microsoft.Management.UI.Internal.IFilterExpressionProvider {
    public FilterExpressionNode FilterExpression { get; }
    public bool HasFilterExpression { get; }
    public abstract virtual FilterExpressionNode get_FilterExpression();
    public abstract virtual bool get_HasFilterExpression();
    public abstract virtual void add_FilterExpressionChanged(EventHandler value);
    public abstract virtual void remove_FilterExpressionChanged(EventHandler value);
}
public class Microsoft.Management.UI.Internal.InnerList : ListView {
    public static DependencyProperty AutoGenerateColumnsProperty;
    public static DependencyProperty IsGroupsExpandedProperty;
    public static DependencyProperty IsPrimarySortColumnProperty;
    [DescriptionAttribute("Gets or sets a value indicating whether this list's columns should be automatically generated based on its data.")]
[CategoryAttribute("Common Properties")]
[BindableAttribute("True")]
public bool AutoGenerateColumns { get; public set; }
    public ObservableCollection`1<InnerListColumn> Columns { get; }
    public InnerListGridView InnerGrid { get; protected set; }
    [DescriptionAttribute("Gets or sets a value indicating whether is groups expanded or not.")]
[CategoryAttribute("Common Properties")]
[BindableAttribute("True")]
public bool IsGroupsExpanded { get; public set; }
    [BrowsableAttribute("False")]
public ItemCollection Items { get; }
    public InnerListColumn SortedColumn { get; }
    public void add_ItemSourcesPropertyChanged(PropertyChangedEventHandler value);
    public void remove_ItemSourcesPropertyChanged(PropertyChangedEventHandler value);
    public ItemCollection get_Items();
    public InnerListColumn get_SortedColumn();
    public InnerListGridView get_InnerGrid();
    protected void set_InnerGrid(InnerListGridView value);
    public ObservableCollection`1<InnerListColumn> get_Columns();
    public void ScrollIntoView(object item);
    public void ScrollIntoViewFromTop(object item);
    public void RefreshColumns();
    public void ApplySort(InnerListColumn column, bool shouldScrollIntoView);
    public void ClearSort();
    protected virtual void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected internal string GetClipboardTextForSelectedItems();
    protected virtual void OnCopyCanExecute(CanExecuteRoutedEventArgs e);
    protected virtual void OnCopyExecuted(ExecutedRoutedEventArgs e);
    public bool get_AutoGenerateColumns();
    public void set_AutoGenerateColumns(bool value);
    public void add_AutoGenerateColumnsChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    public void remove_AutoGenerateColumnsChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnAutoGenerateColumnsChanged(PropertyChangedEventArgs`1<bool> e);
    public bool get_IsGroupsExpanded();
    public void set_IsGroupsExpanded(bool value);
    public void add_IsGroupsExpandedChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    public void remove_IsGroupsExpandedChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnIsGroupsExpandedChanged(PropertyChangedEventArgs`1<bool> e);
    public static bool GetIsPrimarySortColumn(DependencyObject element);
}
public class Microsoft.Management.UI.Internal.InnerListColumn : GridViewColumn {
    public static DependencyProperty DataDescriptionProperty;
    public static DependencyProperty MinWidthProperty;
    public static DependencyProperty RequiredProperty;
    public static DependencyProperty VisibleProperty;
    [CategoryAttribute("Common Properties")]
[BindableAttribute("True")]
[DescriptionAttribute("Gets or sets the data description.")]
public UIPropertyGroupDescription DataDescription { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value that dictates the minimum allowable width of the column.")]
public double MinWidth { get; public set; }
    [DescriptionAttribute("Gets or sets a value indicating whether the column may not be removed.")]
[BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
public bool Required { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value indicating whether the columns we want to have available in the list.")]
public bool Visible { get; public set; }
    public InnerListColumn(UIPropertyGroupDescription dataDescription);
    public InnerListColumn(UIPropertyGroupDescription dataDescription, bool isVisible);
    public InnerListColumn(UIPropertyGroupDescription dataDescription, bool isVisible, bool createDefaultBinding);
    public virtual string ToString();
    public UIPropertyGroupDescription get_DataDescription();
    public void set_DataDescription(UIPropertyGroupDescription value);
    protected virtual void OnDataDescriptionChanged(PropertyChangedEventArgs`1<UIPropertyGroupDescription> e);
    public double get_MinWidth();
    public void set_MinWidth(double value);
    protected virtual void OnMinWidthChanged(PropertyChangedEventArgs`1<double> e);
    public bool get_Required();
    public void set_Required(bool value);
    protected virtual void OnRequiredChanged(PropertyChangedEventArgs`1<bool> e);
    public bool get_Visible();
    public void set_Visible(bool value);
    protected virtual void OnVisibleChanged(PropertyChangedEventArgs`1<bool> e);
}
public class Microsoft.Management.UI.Internal.InnerListGridView : GridView {
    public void ReleaseReferences();
}
public class Microsoft.Management.UI.Internal.InputFieldBackgroundTextConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Microsoft.Management.UI.Internal.IntegralConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class Microsoft.Management.UI.Internal.InverseBooleanConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public interface Microsoft.Management.UI.Internal.IPropertyValueGetter {
    public abstract virtual bool TryGetPropertyValue(string propertyName, object value, Object& propertyValue);
    public abstract virtual bool TryGetPropertyValue(string propertyName, object value, T& propertyValue);
}
public class Microsoft.Management.UI.Internal.IsBetweenFilterRule`1 : ComparableValueFilterRule`1<T> {
    public ValidatingValue`1<T> EndValue { get; protected set; }
    public bool IsValid { get; }
    public ValidatingValue`1<T> StartValue { get; protected set; }
    public virtual bool get_IsValid();
    public ValidatingValue`1<T> get_StartValue();
    protected void set_StartValue(ValidatingValue`1<T> value);
    public ValidatingValue`1<T> get_EndValue();
    protected void set_EndValue(ValidatingValue`1<T> value);
    protected virtual bool Evaluate(T data);
}
public class Microsoft.Management.UI.Internal.IsEmptyFilterRule : FilterRule {
    public virtual bool Evaluate(object item);
}
public class Microsoft.Management.UI.Internal.IsEqualConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class Microsoft.Management.UI.Internal.IsGreaterThanFilterRule`1 : SingleValueComparableValueFilterRule`1<T> {
    protected virtual bool Evaluate(T data);
}
public class Microsoft.Management.UI.Internal.IsLessThanFilterRule`1 : SingleValueComparableValueFilterRule`1<T> {
    protected virtual bool Evaluate(T item);
}
public class Microsoft.Management.UI.Internal.IsNotEmptyFilterRule : IsEmptyFilterRule {
    public virtual bool Evaluate(object item);
}
public class Microsoft.Management.UI.Internal.IsNotEmptyValidationRule : DataErrorInfoValidationRule {
    public virtual DataErrorInfoValidationResult Validate(object value, CultureInfo cultureInfo);
}
public class Microsoft.Management.UI.Internal.IsNotNullConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public interface Microsoft.Management.UI.Internal.IStateDescriptorFactory`1 {
    public abstract virtual StateDescriptor`1<T> Create();
}
public class Microsoft.Management.UI.Internal.IsValidatingValueValidConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Microsoft.Management.UI.Internal.ItemsControlFilterEvaluator : FilterEvaluator {
    public ItemsControl FilterTarget { get; public set; }
    public ItemsControl get_FilterTarget();
    public void set_FilterTarget(ItemsControl value);
    public void add_FilterExceptionOccurred(EventHandler`1<FilterExceptionEventArgs> value);
    public void remove_FilterExceptionOccurred(EventHandler`1<FilterExceptionEventArgs> value);
    public virtual void StartFilter();
    public virtual void StopFilter();
}
public class Microsoft.Management.UI.Internal.ListOrganizer : ContentControl {
    public static RoutedCommand DeleteItemCommand;
    public static DependencyProperty DropDownButtonTemplateProperty;
    public static DependencyProperty DropDownStyleProperty;
    public static DependencyProperty HighlightedItemProperty;
    public static RoutedEvent ItemDeletedEvent;
    public static RoutedEvent ItemSelectedEvent;
    public static DependencyProperty ItemsSourceProperty;
    public static DependencyProperty NoItemsTextProperty;
    public static RoutedCommand SelectItemCommand;
    public static DependencyProperty TextContentPropertyNameProperty;
    [DescriptionAttribute("Gets or sets a value that controls the visual tree of the DropDown button.")]
[BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
public ControlTemplate DropDownButtonTemplate { get; public set; }
    [CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the style of the drop-down.")]
[BindableAttribute("True")]
public Style DropDownStyle { get; public set; }
    [BindableAttribute("True")]
[DescriptionAttribute("Gets or sets a value that controls the highlighted item in the list.")]
[CategoryAttribute("Common Properties")]
public object HighlightedItem { get; public set; }
    [CategoryAttribute("Common Properties")]
[BindableAttribute("True")]
[DescriptionAttribute("Gets or sets a value that controls the items in the list.")]
public IEnumerable ItemsSource { get; public set; }
    [DescriptionAttribute("Gets or sets a value that appears to inform the user that there are no items in the list.")]
[BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
public string NoItemsText { get; public set; }
    [DescriptionAttribute("Gets or sets a value which dictates what binding is used to provide content for the items in the list.")]
[CategoryAttribute("Common Properties")]
[BindableAttribute("True")]
public string TextContentPropertyName { get; public set; }
    protected virtual void OnKeyDown(KeyEventArgs e);
    public void add_ItemDeleted(EventHandler`1<DataRoutedEventArgs`1<object>> value);
    public void remove_ItemDeleted(EventHandler`1<DataRoutedEventArgs`1<object>> value);
    public void add_ItemSelected(EventHandler`1<DataRoutedEventArgs`1<object>> value);
    public void remove_ItemSelected(EventHandler`1<DataRoutedEventArgs`1<object>> value);
    protected virtual void OnDeleteItemExecuted(ExecutedRoutedEventArgs e);
    protected virtual void OnSelectItemExecuted(ExecutedRoutedEventArgs e);
    public ControlTemplate get_DropDownButtonTemplate();
    public void set_DropDownButtonTemplate(ControlTemplate value);
    public void add_DropDownButtonTemplateChanged(EventHandler`1<PropertyChangedEventArgs`1<ControlTemplate>> value);
    public void remove_DropDownButtonTemplateChanged(EventHandler`1<PropertyChangedEventArgs`1<ControlTemplate>> value);
    protected virtual void OnDropDownButtonTemplateChanged(PropertyChangedEventArgs`1<ControlTemplate> e);
    public Style get_DropDownStyle();
    public void set_DropDownStyle(Style value);
    public void add_DropDownStyleChanged(EventHandler`1<PropertyChangedEventArgs`1<Style>> value);
    public void remove_DropDownStyleChanged(EventHandler`1<PropertyChangedEventArgs`1<Style>> value);
    protected virtual void OnDropDownStyleChanged(PropertyChangedEventArgs`1<Style> e);
    public object get_HighlightedItem();
    public void set_HighlightedItem(object value);
    public void add_HighlightedItemChanged(EventHandler`1<PropertyChangedEventArgs`1<object>> value);
    public void remove_HighlightedItemChanged(EventHandler`1<PropertyChangedEventArgs`1<object>> value);
    protected virtual void OnHighlightedItemChanged(PropertyChangedEventArgs`1<object> e);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public void add_ItemsSourceChanged(EventHandler`1<PropertyChangedEventArgs`1<IEnumerable>> value);
    public void remove_ItemsSourceChanged(EventHandler`1<PropertyChangedEventArgs`1<IEnumerable>> value);
    protected virtual void OnItemsSourceChanged(PropertyChangedEventArgs`1<IEnumerable> e);
    public string get_NoItemsText();
    public void set_NoItemsText(string value);
    public void add_NoItemsTextChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    public void remove_NoItemsTextChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    protected virtual void OnNoItemsTextChanged(PropertyChangedEventArgs`1<string> e);
    public string get_TextContentPropertyName();
    public void set_TextContentPropertyName(string value);
    public void add_TextContentPropertyNameChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    public void remove_TextContentPropertyNameChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    protected virtual void OnTextContentPropertyNameChanged(PropertyChangedEventArgs`1<string> e);
    public virtual void OnApplyTemplate();
}
public class Microsoft.Management.UI.Internal.ListOrganizerItem : Control {
    public static DependencyProperty TextContentPropertyNameProperty;
    public bool IsInEditMode { get; }
    [CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value which dictates what binding is used to provide content for the items in the list.")]
[BindableAttribute("True")]
public string TextContentPropertyName { get; public set; }
    public bool get_IsInEditMode();
    public void Select();
    public void Rename();
    public void Delete();
    protected virtual void OnKeyDown(KeyEventArgs e);
    public string get_TextContentPropertyName();
    public void set_TextContentPropertyName(string value);
    public void add_TextContentPropertyNameChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    public void remove_TextContentPropertyNameChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    protected virtual void OnTextContentPropertyNameChanged(PropertyChangedEventArgs`1<string> e);
    public virtual void OnApplyTemplate();
}
public class Microsoft.Management.UI.Internal.ManagementList : Control {
    public static DependencyProperty AddFilterRulePickerProperty;
    public static RoutedCommand ClearFilterCommand;
    public static DependencyProperty CurrentViewProperty;
    public static DependencyProperty EvaluatorProperty;
    public static DependencyProperty FilterRulePanelProperty;
    public static DependencyProperty IsFilterShownProperty;
    public static DependencyProperty IsLoadingItemsProperty;
    public static DependencyProperty IsSearchShownProperty;
    public static DependencyProperty ListProperty;
    public static RoutedCommand SaveViewCommand;
    public static DependencyProperty SearchBoxProperty;
    public static RoutedCommand StartFilterCommand;
    public static RoutedCommand StopFilterCommand;
    public static DependencyProperty ViewManagerUserActionStateProperty;
    public static DependencyProperty ViewSaverUserActionStateProperty;
    public static RoutedEvent ViewsChangedEvent;
    [CategoryAttribute("Common Properties")]
[BindableAttribute("True")]
[DescriptionAttribute("Gets the filter rule picker.")]
public AddFilterRulePicker AddFilterRulePicker { get; }
    [CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets current view.")]
[BindableAttribute("True")]
public StateDescriptor`1<ManagementList> CurrentView { get; }
    [DescriptionAttribute("Gets or sets the FilterEvaluator.")]
[BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
public ItemsControlFilterEvaluator Evaluator { get; public set; }
    [DescriptionAttribute("Gets the filter rule panel.")]
[CategoryAttribute("Common Properties")]
[BindableAttribute("True")]
public FilterRulePanel FilterRulePanel { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value indicating whether the filter is shown.")]
public bool IsFilterShown { get; public set; }
    [BindableAttribute("True")]
[DescriptionAttribute("Gets or sets a value indicating whether items are loading.")]
[CategoryAttribute("Common Properties")]
public bool IsLoadingItems { get; public set; }
    [BindableAttribute("True")]
[DescriptionAttribute("Gets or sets a value indicating whether the search box is shown.")]
[CategoryAttribute("Common Properties")]
public bool IsSearchShown { get; public set; }
    [DescriptionAttribute("Gets the list.")]
[BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
public InnerList List { get; }
    protected IEnumerator LogicalChildren { get; }
    public IStateDescriptorFactory`1<ManagementList> SavedViewFactory { get; public set; }
    [BindableAttribute("True")]
[DescriptionAttribute("Gets the search box.")]
[CategoryAttribute("Common Properties")]
public SearchBox SearchBox { get; }
    [DescriptionAttribute("Gets or sets the user interaction state of the view manager.")]
[BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
public UserActionState ViewManagerUserActionState { get; public set; }
    [BindableAttribute("True")]
[DescriptionAttribute("Gets or sets the user interaction state of the view saver.")]
[CategoryAttribute("Common Properties")]
public UserActionState ViewSaverUserActionState { get; public set; }
    public ObservableCollection`1<StateDescriptor`1<ManagementList>> Views { get; }
    public ObservableCollection`1<StateDescriptor`1<ManagementList>> get_Views();
    public IStateDescriptorFactory`1<ManagementList> get_SavedViewFactory();
    public void set_SavedViewFactory(IStateDescriptorFactory`1<ManagementList> value);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual IEnumerator get_LogicalChildren();
    public void AddColumn(InnerListColumn column);
    public void AddColumn(InnerListColumn column, bool addDefaultFilterRules);
    public void AddRule(FilterRule rule);
    public void ResetView();
    public void add_ViewsChanged(RoutedEventHandler value);
    public void remove_ViewsChanged(RoutedEventHandler value);
    protected virtual void OnClearFilterCanExecute(CanExecuteRoutedEventArgs e);
    protected virtual void OnClearFilterExecuted(ExecutedRoutedEventArgs e);
    protected virtual void OnSaveViewCanExecute(CanExecuteRoutedEventArgs e);
    protected virtual void OnSaveViewExecuted(ExecutedRoutedEventArgs e);
    protected virtual void OnStartFilterCanExecute(CanExecuteRoutedEventArgs e);
    protected virtual void OnStartFilterExecuted(ExecutedRoutedEventArgs e);
    protected virtual void OnStopFilterCanExecute(CanExecuteRoutedEventArgs e);
    protected virtual void OnStopFilterExecuted(ExecutedRoutedEventArgs e);
    public AddFilterRulePicker get_AddFilterRulePicker();
    public void add_AddFilterRulePickerChanged(EventHandler`1<PropertyChangedEventArgs`1<AddFilterRulePicker>> value);
    public void remove_AddFilterRulePickerChanged(EventHandler`1<PropertyChangedEventArgs`1<AddFilterRulePicker>> value);
    protected virtual void OnAddFilterRulePickerChanged(PropertyChangedEventArgs`1<AddFilterRulePicker> e);
    public StateDescriptor`1<ManagementList> get_CurrentView();
    public void add_CurrentViewChanged(EventHandler`1<PropertyChangedEventArgs`1<StateDescriptor`1<ManagementList>>> value);
    public void remove_CurrentViewChanged(EventHandler`1<PropertyChangedEventArgs`1<StateDescriptor`1<ManagementList>>> value);
    protected virtual void OnCurrentViewChanged(PropertyChangedEventArgs`1<StateDescriptor`1<ManagementList>> e);
    public ItemsControlFilterEvaluator get_Evaluator();
    public void set_Evaluator(ItemsControlFilterEvaluator value);
    public void add_EvaluatorChanged(EventHandler`1<PropertyChangedEventArgs`1<ItemsControlFilterEvaluator>> value);
    public void remove_EvaluatorChanged(EventHandler`1<PropertyChangedEventArgs`1<ItemsControlFilterEvaluator>> value);
    protected virtual void OnEvaluatorChanged(PropertyChangedEventArgs`1<ItemsControlFilterEvaluator> e);
    public FilterRulePanel get_FilterRulePanel();
    public void add_FilterRulePanelChanged(EventHandler`1<PropertyChangedEventArgs`1<FilterRulePanel>> value);
    public void remove_FilterRulePanelChanged(EventHandler`1<PropertyChangedEventArgs`1<FilterRulePanel>> value);
    protected virtual void OnFilterRulePanelChanged(PropertyChangedEventArgs`1<FilterRulePanel> e);
    public bool get_IsFilterShown();
    public void set_IsFilterShown(bool value);
    public void add_IsFilterShownChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    public void remove_IsFilterShownChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnIsFilterShownChanged(PropertyChangedEventArgs`1<bool> e);
    public bool get_IsLoadingItems();
    public void set_IsLoadingItems(bool value);
    public void add_IsLoadingItemsChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    public void remove_IsLoadingItemsChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnIsLoadingItemsChanged(PropertyChangedEventArgs`1<bool> e);
    public bool get_IsSearchShown();
    public void set_IsSearchShown(bool value);
    public void add_IsSearchShownChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    public void remove_IsSearchShownChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnIsSearchShownChanged(PropertyChangedEventArgs`1<bool> e);
    public InnerList get_List();
    public void add_ListChanged(EventHandler`1<PropertyChangedEventArgs`1<InnerList>> value);
    public void remove_ListChanged(EventHandler`1<PropertyChangedEventArgs`1<InnerList>> value);
    protected virtual void OnListChanged(PropertyChangedEventArgs`1<InnerList> e);
    public SearchBox get_SearchBox();
    public void add_SearchBoxChanged(EventHandler`1<PropertyChangedEventArgs`1<SearchBox>> value);
    public void remove_SearchBoxChanged(EventHandler`1<PropertyChangedEventArgs`1<SearchBox>> value);
    protected virtual void OnSearchBoxChanged(PropertyChangedEventArgs`1<SearchBox> e);
    public UserActionState get_ViewManagerUserActionState();
    public void set_ViewManagerUserActionState(UserActionState value);
    public void add_ViewManagerUserActionStateChanged(EventHandler`1<PropertyChangedEventArgs`1<UserActionState>> value);
    public void remove_ViewManagerUserActionStateChanged(EventHandler`1<PropertyChangedEventArgs`1<UserActionState>> value);
    protected virtual void OnViewManagerUserActionStateChanged(PropertyChangedEventArgs`1<UserActionState> e);
    public UserActionState get_ViewSaverUserActionState();
    public void set_ViewSaverUserActionState(UserActionState value);
    public void add_ViewSaverUserActionStateChanged(EventHandler`1<PropertyChangedEventArgs`1<UserActionState>> value);
    public void remove_ViewSaverUserActionStateChanged(EventHandler`1<PropertyChangedEventArgs`1<UserActionState>> value);
    protected virtual void OnViewSaverUserActionStateChanged(PropertyChangedEventArgs`1<UserActionState> e);
    public virtual void OnApplyTemplate();
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
public class Microsoft.Management.UI.Internal.ManagementListStateDescriptor : StateDescriptor`1<ManagementList> {
    public ManagementListStateDescriptor(string name);
    public virtual void SaveState(ManagementList subject);
    public virtual void RestoreState(ManagementList subject);
    public void RestoreState(ManagementList subject, bool applyRestoredFilter);
    public virtual string ToString();
}
public class Microsoft.Management.UI.Internal.ManagementListStateDescriptorFactory : object {
    public sealed virtual StateDescriptor`1<ManagementList> Create();
}
public class Microsoft.Management.UI.Internal.ManagementListTitle : Control {
    public static DependencyProperty ListProperty;
    public static DependencyProperty ListStatusProperty;
    public static DependencyProperty TitleProperty;
    public static DependencyProperty TotalItemCountProperty;
    [BindableAttribute("True")]
[DescriptionAttribute("Gets or sets the list this title is for. This is a dependency property.")]
[CategoryAttribute("Common Properties")]
public ManagementList List { get; public set; }
    [DescriptionAttribute("Gets the status of the list. This is a dependency property.")]
[BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
public string ListStatus { get; public set; }
    [DescriptionAttribute("Gets or sets the title. This is a dependency property.")]
[BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
public string Title { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the number of items in the list before filtering is applied. This is a dependency property.")]
public int TotalItemCount { get; public set; }
    public ManagementList get_List();
    public void set_List(ManagementList value);
    public void add_ListChanged(EventHandler`1<PropertyChangedEventArgs`1<ManagementList>> value);
    public void remove_ListChanged(EventHandler`1<PropertyChangedEventArgs`1<ManagementList>> value);
    protected virtual void OnListChanged(PropertyChangedEventArgs`1<ManagementList> e);
    public string get_ListStatus();
    public void set_ListStatus(string value);
    public void add_ListStatusChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    public void remove_ListStatusChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    protected virtual void OnListStatusChanged(PropertyChangedEventArgs`1<string> e);
    public string get_Title();
    public void set_Title(string value);
    public void add_TitleChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    public void remove_TitleChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    protected virtual void OnTitleChanged(PropertyChangedEventArgs`1<string> e);
    public int get_TotalItemCount();
    public void set_TotalItemCount(int value);
    public void add_TotalItemCountChanged(EventHandler`1<PropertyChangedEventArgs`1<int>> value);
    public void remove_TotalItemCountChanged(EventHandler`1<PropertyChangedEventArgs`1<int>> value);
    protected virtual void OnTotalItemCountChanged(PropertyChangedEventArgs`1<int> e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
public class Microsoft.Management.UI.Internal.MessageTextBox : TextBox {
    public static DependencyProperty BackgroundTextProperty;
    public static DependencyProperty IsBackgroundTextShownProperty;
    [BindableAttribute("True")]
[DescriptionAttribute("Gets or sets a value for text presented to user when TextBox is empty.")]
[CategoryAttribute("Common Properties")]
public string BackgroundText { get; public set; }
    [BindableAttribute("True")]
[DescriptionAttribute("Gets a value indicating if the background text is being shown.")]
[CategoryAttribute("Common Properties")]
public bool IsBackgroundTextShown { get; }
    public string get_BackgroundText();
    public void set_BackgroundText(string value);
    public void add_BackgroundTextChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    public void remove_BackgroundTextChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    protected virtual void OnBackgroundTextChanged(PropertyChangedEventArgs`1<string> e);
    public bool get_IsBackgroundTextShown();
    public void add_IsBackgroundTextShownChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    public void remove_IsBackgroundTextShownChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnIsBackgroundTextShownChanged(PropertyChangedEventArgs`1<bool> e);
}
public class Microsoft.Management.UI.Internal.PickerBase : HeaderedContentControl {
    public static RoutedCommand CloseDropDownCommand;
    public static DependencyProperty DropDownButtonTemplateProperty;
    public static DependencyProperty DropDownStyleProperty;
    public static DependencyProperty IsOpenProperty;
    [DescriptionAttribute("Gets or sets a value that controls the visual tree of the DropDown button.")]
[BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
public ControlTemplate DropDownButtonTemplate { get; public set; }
    [BindableAttribute("True")]
[DescriptionAttribute("Gets or sets the style of the drop-down.")]
[CategoryAttribute("Common Properties")]
public Style DropDownStyle { get; public set; }
    [BindableAttribute("True")]
[DescriptionAttribute("Gets or sets a value indicating whether the Popup is visible.")]
[CategoryAttribute("Common Properties")]
public bool IsOpen { get; public set; }
    protected virtual void OnCloseDropDownExecuted(ExecutedRoutedEventArgs e);
    public ControlTemplate get_DropDownButtonTemplate();
    public void set_DropDownButtonTemplate(ControlTemplate value);
    public void add_DropDownButtonTemplateChanged(EventHandler`1<PropertyChangedEventArgs`1<ControlTemplate>> value);
    public void remove_DropDownButtonTemplateChanged(EventHandler`1<PropertyChangedEventArgs`1<ControlTemplate>> value);
    protected virtual void OnDropDownButtonTemplateChanged(PropertyChangedEventArgs`1<ControlTemplate> e);
    public Style get_DropDownStyle();
    public void set_DropDownStyle(Style value);
    public void add_DropDownStyleChanged(EventHandler`1<PropertyChangedEventArgs`1<Style>> value);
    public void remove_DropDownStyleChanged(EventHandler`1<PropertyChangedEventArgs`1<Style>> value);
    protected virtual void OnDropDownStyleChanged(PropertyChangedEventArgs`1<Style> e);
    public bool get_IsOpen();
    public void set_IsOpen(bool value);
    public void add_IsOpenChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    public void remove_IsOpenChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnIsOpenChanged(PropertyChangedEventArgs`1<bool> e);
    public virtual void OnApplyTemplate();
}
public class Microsoft.Management.UI.Internal.PopupControlButton : ExpanderButton {
    public static DependencyProperty IsPopupOpenProperty;
    [DescriptionAttribute("Gets or sets a value indicating whether the popup is open or not.")]
[BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
public bool IsPopupOpen { get; public set; }
    protected virtual void OnChecked(RoutedEventArgs e);
    protected virtual void OnUnchecked(RoutedEventArgs e);
    protected virtual void OnPreviewMouseLeftButtonUp(MouseButtonEventArgs e);
    public bool get_IsPopupOpen();
    public void set_IsPopupOpen(bool value);
    public void add_IsPopupOpenChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    public void remove_IsPopupOpenChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnIsPopupOpenChanged(PropertyChangedEventArgs`1<bool> e);
}
public class Microsoft.Management.UI.Internal.PropertiesTextContainsFilterRule : TextFilterRule {
    public ICollection`1<string> PropertyNames { get; }
    public ICollection`1<string> get_PropertyNames();
    public virtual bool Evaluate(object item);
    protected virtual bool Evaluate(string data);
    protected virtual void OnEvaluationResultInvalidated();
}
public class Microsoft.Management.UI.Internal.PropertyChangedEventArgs`1 : EventArgs {
    public T NewValue { get; }
    public T OldValue { get; }
    public PropertyChangedEventArgs`1(T oldValue, T newValue);
    public T get_OldValue();
    public T get_NewValue();
}
public class Microsoft.Management.UI.Internal.PropertyValueGetter : object {
    public virtual bool TryGetPropertyValue(string propertyName, object value, Object& propertyValue);
    public virtual bool TryGetPropertyValue(string propertyName, object value, T& propertyValue);
}
public class Microsoft.Management.UI.Internal.PropertyValueSelectorFilterRule`1 : SelectorFilterRule {
    public string PropertyName { get; protected set; }
    public PropertyValueSelectorFilterRule`1(string propertyName, string propertyDisplayName);
    public PropertyValueSelectorFilterRule`1(string propertyName, string propertyDisplayName, IEnumerable`1<FilterRule> rules);
    public string get_PropertyName();
    protected void set_PropertyName(string value);
    public virtual bool Evaluate(object item);
}
public class Microsoft.Management.UI.Internal.ReadOnlyObservableAsyncCollection`1 : ReadOnlyCollection`1<T> {
    public Exception OperationError { get; }
    public bool OperationInProgress { get; }
    public ReadOnlyObservableAsyncCollection`1(IList`1<T> list);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual bool get_OperationInProgress();
    public sealed virtual Exception get_OperationError();
}
public enum Microsoft.Management.UI.Internal.ResizeGripLocation : Enum {
    public int value__;
    public static ResizeGripLocation Left;
    public static ResizeGripLocation Right;
}
public class Microsoft.Management.UI.Internal.Resizer : ContentControl {
    public static DependencyProperty DraggingTemplateProperty;
    public static DependencyProperty GripBrushProperty;
    public static DependencyProperty GripLocationProperty;
    public static DependencyProperty GripWidthProperty;
    public static DependencyProperty ResizeWhileDraggingProperty;
    public static DependencyProperty ThumbGripLocationProperty;
    public static DependencyProperty VisibleGripWidthProperty;
    [BindableAttribute("True")]
[DescriptionAttribute("Gets or sets the template used for the dragging indicator when ResizeWhileDragging is false.")]
[CategoryAttribute("Common Properties")]
public DataTemplate DraggingTemplate { get; public set; }
    [DescriptionAttribute("Gets or sets the color of the resize grips.")]
[BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
public Brush GripBrush { get; public set; }
    [BindableAttribute("True")]
[DescriptionAttribute("Gets or sets a value of what grips.")]
[CategoryAttribute("Common Properties")]
public ResizeGripLocation GripLocation { get; public set; }
    [DescriptionAttribute("Gets or sets the width of the grips.")]
[BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
public double GripWidth { get; public set; }
    [CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets a value indicating if resizing occurs while dragging.")]
[BindableAttribute("True")]
public bool ResizeWhileDragging { get; public set; }
    [DescriptionAttribute("Gets or sets the visible width of the grips.")]
[BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
public double VisibleGripWidth { get; public set; }
    public DataTemplate get_DraggingTemplate();
    public void set_DraggingTemplate(DataTemplate value);
    public void add_DraggingTemplateChanged(EventHandler`1<PropertyChangedEventArgs`1<DataTemplate>> value);
    public void remove_DraggingTemplateChanged(EventHandler`1<PropertyChangedEventArgs`1<DataTemplate>> value);
    protected virtual void OnDraggingTemplateChanged(PropertyChangedEventArgs`1<DataTemplate> e);
    public Brush get_GripBrush();
    public void set_GripBrush(Brush value);
    public void add_GripBrushChanged(EventHandler`1<PropertyChangedEventArgs`1<Brush>> value);
    public void remove_GripBrushChanged(EventHandler`1<PropertyChangedEventArgs`1<Brush>> value);
    protected virtual void OnGripBrushChanged(PropertyChangedEventArgs`1<Brush> e);
    public ResizeGripLocation get_GripLocation();
    public void set_GripLocation(ResizeGripLocation value);
    public void add_GripLocationChanged(EventHandler`1<PropertyChangedEventArgs`1<ResizeGripLocation>> value);
    public void remove_GripLocationChanged(EventHandler`1<PropertyChangedEventArgs`1<ResizeGripLocation>> value);
    protected virtual void OnGripLocationChanged(PropertyChangedEventArgs`1<ResizeGripLocation> e);
    public double get_GripWidth();
    public void set_GripWidth(double value);
    public void add_GripWidthChanged(EventHandler`1<PropertyChangedEventArgs`1<double>> value);
    public void remove_GripWidthChanged(EventHandler`1<PropertyChangedEventArgs`1<double>> value);
    protected virtual void OnGripWidthChanged(PropertyChangedEventArgs`1<double> e);
    public bool get_ResizeWhileDragging();
    public void set_ResizeWhileDragging(bool value);
    public void add_ResizeWhileDraggingChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    public void remove_ResizeWhileDraggingChanged(EventHandler`1<PropertyChangedEventArgs`1<bool>> value);
    protected virtual void OnResizeWhileDraggingChanged(PropertyChangedEventArgs`1<bool> e);
    public static ResizeGripLocation GetThumbGripLocation(DependencyObject element);
    public static void SetThumbGripLocation(DependencyObject element, ResizeGripLocation value);
    public double get_VisibleGripWidth();
    public void set_VisibleGripWidth(double value);
    public void add_VisibleGripWidthChanged(EventHandler`1<PropertyChangedEventArgs`1<double>> value);
    public void remove_VisibleGripWidthChanged(EventHandler`1<PropertyChangedEventArgs`1<double>> value);
    protected virtual void OnVisibleGripWidthChanged(PropertyChangedEventArgs`1<double> e);
    public virtual void OnApplyTemplate();
}
public class Microsoft.Management.UI.Internal.ResizerGripThicknessConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class Microsoft.Management.UI.Internal.ScalableImage : FrameworkElement {
    public static DependencyProperty SourceProperty;
    [BindableAttribute("True")]
[DescriptionAttribute("Gets or sets the ScalableImageSource used to render the image. This is a dependency property.")]
[CategoryAttribute("Common Properties")]
public ScalableImageSource Source { get; public set; }
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void OnRender(DrawingContext drawingContext);
    protected virtual Geometry GetLayoutClip(Size layoutSlotSize);
    public ScalableImageSource get_Source();
    public void set_Source(ScalableImageSource value);
    public void add_SourceChanged(EventHandler`1<PropertyChangedEventArgs`1<ScalableImageSource>> value);
    public void remove_SourceChanged(EventHandler`1<PropertyChangedEventArgs`1<ScalableImageSource>> value);
    protected virtual void OnSourceChanged(PropertyChangedEventArgs`1<ScalableImageSource> e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
public class Microsoft.Management.UI.Internal.ScalableImageSource : Freezable {
    public static DependencyProperty AccessibleNameProperty;
    public static DependencyProperty BrushProperty;
    public static DependencyProperty ImageProperty;
    public static DependencyProperty SizeProperty;
    [DescriptionAttribute("Gets or sets the accessible name of the image.  This is used by accessibility clients to describe the image, and must be localized.")]
[BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
public string AccessibleName { get; public set; }
    [BindableAttribute("True")]
[DescriptionAttribute("Gets or sets the source used to render the image as a vector.If this is set, the Image property will be ignored.")]
[CategoryAttribute("Common Properties")]
public Brush Brush { get; public set; }
    [DescriptionAttribute("Gets or sets the source used to render the image as a bitmap. If the Brush property is set, this will be ignored.")]
[BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
public ImageSource Image { get; public set; }
    [BindableAttribute("True")]
[DescriptionAttribute("Gets or sets the suggested size of the image.")]
[CategoryAttribute("Common Properties")]
public Size Size { get; public set; }
    protected virtual Freezable CreateInstanceCore();
    public string get_AccessibleName();
    public void set_AccessibleName(string value);
    public void add_AccessibleNameChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    public void remove_AccessibleNameChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    protected virtual void OnAccessibleNameChanged(PropertyChangedEventArgs`1<string> e);
    public Brush get_Brush();
    public void set_Brush(Brush value);
    public void add_BrushChanged(EventHandler`1<PropertyChangedEventArgs`1<Brush>> value);
    public void remove_BrushChanged(EventHandler`1<PropertyChangedEventArgs`1<Brush>> value);
    protected virtual void OnBrushChanged(PropertyChangedEventArgs`1<Brush> e);
    public ImageSource get_Image();
    public void set_Image(ImageSource value);
    public void add_ImageChanged(EventHandler`1<PropertyChangedEventArgs`1<ImageSource>> value);
    public void remove_ImageChanged(EventHandler`1<PropertyChangedEventArgs`1<ImageSource>> value);
    protected virtual void OnImageChanged(PropertyChangedEventArgs`1<ImageSource> e);
    public Size get_Size();
    public void set_Size(Size value);
    public void add_SizeChanged(EventHandler`1<PropertyChangedEventArgs`1<Size>> value);
    public void remove_SizeChanged(EventHandler`1<PropertyChangedEventArgs`1<Size>> value);
    protected virtual void OnSizeChanged(PropertyChangedEventArgs`1<Size> e);
}
public class Microsoft.Management.UI.Internal.SearchBox : Control {
    public static DependencyProperty BackgroundTextProperty;
    public static RoutedCommand ClearTextCommand;
    public static DependencyProperty TextProperty;
    [DescriptionAttribute("Gets or sets the background text of the search box.")]
[BindableAttribute("True")]
[CategoryAttribute("Common Properties")]
public string BackgroundText { get; public set; }
    public FilterExpressionNode FilterExpression { get; }
    public bool HasFilterExpression { get; }
    public SearchTextParser Parser { get; public set; }
    [BindableAttribute("True")]
[DescriptionAttribute("Gets or sets the text contents of the search box.")]
[CategoryAttribute("Common Properties")]
public string Text { get; public set; }
    public sealed virtual FilterExpressionNode get_FilterExpression();
    public sealed virtual bool get_HasFilterExpression();
    public sealed virtual void add_FilterExpressionChanged(EventHandler value);
    public sealed virtual void remove_FilterExpressionChanged(EventHandler value);
    protected virtual void NotifyFilterExpressionChanged();
    public SearchTextParser get_Parser();
    public void set_Parser(SearchTextParser value);
    protected static FilterExpressionNode ConvertToFilterExpression(ICollection`1<SearchTextParseResult> searchBoxItems);
    protected virtual void OnClearTextCanExecute(CanExecuteRoutedEventArgs e);
    protected virtual void OnClearTextExecuted(ExecutedRoutedEventArgs e);
    public string get_BackgroundText();
    public void set_BackgroundText(string value);
    public void add_BackgroundTextChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    public void remove_BackgroundTextChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    protected virtual void OnBackgroundTextChanged(PropertyChangedEventArgs`1<string> e);
    public string get_Text();
    public void set_Text(string value);
    public void add_TextChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    public void remove_TextChanged(EventHandler`1<PropertyChangedEventArgs`1<string>> value);
    protected virtual void OnTextChanged(PropertyChangedEventArgs`1<string> e);
}
public class Microsoft.Management.UI.Internal.SearchTextParser : object {
    protected static string FullTextRuleGroupName;
    protected static string ValueGroupName;
    protected static string ValuePattern;
    public TextFilterRule FullTextRule { get; public set; }
    protected List`1<SearchableRule> SearchableRules { get; }
    public TextFilterRule get_FullTextRule();
    public void set_FullTextRule(TextFilterRule value);
    public bool TryAddSearchableRule(SelectorFilterRule selectorRule);
    public void ClearSearchableRules();
    public virtual ReadOnlyCollection`1<SearchTextParseResult> Parse(string text);
    protected virtual string GetPattern();
    protected List`1<SearchableRule> get_SearchableRules();
}
public class Microsoft.Management.UI.Internal.SearchTextParseResult : object {
    public FilterRule FilterRule { get; }
    public SearchTextParseResult(FilterRule rule);
    public FilterRule get_FilterRule();
}
public class Microsoft.Management.UI.Internal.SelectorFilterRule : FilterRule {
    public ValidatingSelectorValue`1<FilterRule> AvailableRules { get; protected set; }
    public bool IsValid { get; }
    public virtual bool get_IsValid();
    public ValidatingSelectorValue`1<FilterRule> get_AvailableRules();
    protected void set_AvailableRules(ValidatingSelectorValue`1<FilterRule> value);
    public virtual bool Evaluate(object item);
    protected void OnSelectedValueChanged(FilterRule oldValue, FilterRule newValue);
}
public class Microsoft.Management.UI.Internal.ShowCommandResources : object {
    public static string ActionButtons_Button_Cancel { get; }
    public static string ActionButtons_Button_Copy { get; }
    public static string ActionButtons_Button_Ok { get; }
    public static string ActionButtons_Button_Run { get; }
    public static string All { get; }
    public static string AllModulesControl_Label_Modules { get; }
    public static string CanReceiveValueFromPipeline { get; }
    public static string CmdletControl_Button_GetHelp { get; }
    public static string CmdletControl_Button_ToolTip_Help { get; }
    public static string CmdletControl_Header_CommonParameters { get; }
    public static string CmdletControl_Header_Errors { get; }
    public static string CmdletTooltipFormat { get; }
    public static string CommandNameAutomationName { get; }
    public static string CommonToAllParameterSets { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string DetailsParameterTitleFormat { get; }
    public static string EndProcessingErrorMessage { get; }
    public static string ImportModuleButtonText { get; }
    public static string ImportModuleFailedFormat { get; }
    public static string Imported { get; }
    public static string Mandatory { get; }
    public static string MandatoryLabelSegment { get; }
    public static string MandatoryNameLabelFormat { get; }
    public static string ModulesAutomationName { get; }
    public static string MultiParameter_Button_Browse { get; }
    public static string NameLabelFormat { get; }
    public static string NoModuleName { get; }
    public static string NoParameters { get; }
    public static string NotImported { get; }
    public static string NotImportedFormat { get; }
    public static string Optional { get; }
    public static string PleaseWaitMessage { get; }
    public static string PositionFormat { get; }
    public static string RefreshShowCommandTooltipFormat { get; }
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    public static string SelectMultipleValuesForParameterFormat { get; }
    public static string ShowCommandError { get; }
    public static string ShowModuleControl_Label_Name { get; }
    public static string ShowModuleControl_RefreshButton { get; }
    public static string TypeFormat { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_ActionButtons_Button_Cancel();
    public static string get_ActionButtons_Button_Copy();
    public static string get_ActionButtons_Button_Ok();
    public static string get_ActionButtons_Button_Run();
    public static string get_All();
    public static string get_AllModulesControl_Label_Modules();
    public static string get_CanReceiveValueFromPipeline();
    public static string get_CmdletControl_Button_GetHelp();
    public static string get_CmdletControl_Button_ToolTip_Help();
    public static string get_CmdletControl_Header_CommonParameters();
    public static string get_CmdletControl_Header_Errors();
    public static string get_CmdletTooltipFormat();
    public static string get_CommandNameAutomationName();
    public static string get_CommonToAllParameterSets();
    public static string get_DetailsParameterTitleFormat();
    public static string get_EndProcessingErrorMessage();
    public static string get_Imported();
    public static string get_ImportModuleButtonText();
    public static string get_ImportModuleFailedFormat();
    public static string get_Mandatory();
    public static string get_MandatoryLabelSegment();
    public static string get_MandatoryNameLabelFormat();
    public static string get_ModulesAutomationName();
    public static string get_MultiParameter_Button_Browse();
    public static string get_NameLabelFormat();
    public static string get_NoModuleName();
    public static string get_NoParameters();
    public static string get_NotImported();
    public static string get_NotImportedFormat();
    public static string get_Optional();
    public static string get_PleaseWaitMessage();
    public static string get_PositionFormat();
    public static string get_RefreshShowCommandTooltipFormat();
    public static string get_SelectMultipleValuesForParameterFormat();
    public static string get_ShowCommandError();
    public static string get_ShowModuleControl_Label_Name();
    public static string get_ShowModuleControl_RefreshButton();
    public static string get_TypeFormat();
}
public abstract class Microsoft.Management.UI.Internal.SingleValueComparableValueFilterRule`1 : ComparableValueFilterRule`1<T> {
    public bool IsValid { get; }
    public ValidatingValue`1<T> Value { get; protected set; }
    public ValidatingValue`1<T> get_Value();
    protected void set_Value(ValidatingValue`1<T> value);
    public virtual bool get_IsValid();
}
public abstract class Microsoft.Management.UI.Internal.StateDescriptor`1 : object {
    public Guid Id { get; protected set; }
    public string Name { get; public set; }
    protected StateDescriptor`1(string name);
    public Guid get_Id();
    protected void set_Id(Guid value);
    public string get_Name();
    public void set_Name(string value);
    public abstract virtual void SaveState(T subject);
    public abstract virtual void RestoreState(T subject);
}
public class Microsoft.Management.UI.Internal.StringFormatConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public static class Microsoft.Management.UI.Internal.TextBlockService : object {
    public static DependencyProperty IsTextTrimmedExternallyProperty;
    public static DependencyProperty IsTextTrimmedMonitoringEnabledProperty;
    public static DependencyProperty IsTextTrimmedProperty;
    public static DependencyProperty UntrimmedTextProperty;
    public static bool GetIsTextTrimmed(DependencyObject element);
    public static bool GetIsTextTrimmedExternally(DependencyObject element);
    public static void SetIsTextTrimmedExternally(DependencyObject element, bool value);
    public static bool GetIsTextTrimmedMonitoringEnabled(DependencyObject element);
    public static void SetIsTextTrimmedMonitoringEnabled(DependencyObject element, bool value);
    public static string GetUntrimmedText(DependencyObject element);
    public static void SetUntrimmedText(DependencyObject element, string value);
}
public class Microsoft.Management.UI.Internal.TextContainsFilterRule : TextFilterRule {
    protected virtual bool Evaluate(string data);
}
public class Microsoft.Management.UI.Internal.TextDoesNotContainFilterRule : TextContainsFilterRule {
    protected virtual bool Evaluate(string data);
}
public class Microsoft.Management.UI.Internal.TextDoesNotEqualFilterRule : TextEqualsFilterRule {
    protected virtual bool Evaluate(string data);
}
public class Microsoft.Management.UI.Internal.TextEndsWithFilterRule : TextFilterRule {
    protected virtual bool Evaluate(string data);
}
public class Microsoft.Management.UI.Internal.TextEqualsFilterRule : TextFilterRule {
    protected virtual bool Evaluate(string data);
}
public abstract class Microsoft.Management.UI.Internal.TextFilterRule : SingleValueComparableValueFilterRule`1<string> {
    protected static string WordBoundaryRegexPattern;
    public bool CultureInvariant { get; public set; }
    public bool IgnoreCase { get; public set; }
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    public bool get_CultureInvariant();
    public void set_CultureInvariant(bool value);
    protected internal string GetParsedValue(Boolean& evaluateAsExactMatch);
    protected internal string GetRegexPattern(string pattern, string exactMatchPattern);
    protected internal RegexOptions GetRegexOptions();
    protected internal bool ExactMatchEvaluate(string data, string pattern, string exactMatchPattern);
}
public class Microsoft.Management.UI.Internal.TextStartsWithFilterRule : TextFilterRule {
    protected virtual bool Evaluate(string data);
}
public class Microsoft.Management.UI.Internal.TextTrimConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Microsoft.Management.UI.Internal.UIPropertyGroupDescription : PropertyGroupDescription {
    public Type DataType { get; public set; }
    public object DisplayContent { get; public set; }
    public string DisplayName { get; public set; }
    public ListSortDirection SortDirection { get; public set; }
    public UIPropertyGroupDescription(string propertyName, string displayName);
    public UIPropertyGroupDescription(string propertyName, string displayName, Type dataType);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public object get_DisplayContent();
    public void set_DisplayContent(object value);
    public ListSortDirection get_SortDirection();
    public void set_SortDirection(ListSortDirection value);
    public Type get_DataType();
    public void set_DataType(Type value);
    public ListSortDirection ReverseSortDirection();
    public virtual string ToString();
}
public enum Microsoft.Management.UI.Internal.UserActionState : Enum {
    public int value__;
    public static UserActionState Disabled;
    public static UserActionState Enabled;
    public static UserActionState Hidden;
}
public static class Microsoft.Management.UI.Internal.Utilities : object {
    public static bool AreAllItemsOfType(IEnumerable items);
    public static T Find(IEnumerable items);
    public static string NullCheckTrim(string value);
    public static void ResortObservableCollection(ObservableCollection`1<T> modify, IEnumerable sorted);
}
public class Microsoft.Management.UI.Internal.ValidatingSelectorValue`1 : ValidatingValueBase {
    public IList`1<T> AvailableValues { get; }
    public IValueConverter DisplayNameConverter { get; public set; }
    public int SelectedIndex { get; public set; }
    public T SelectedValue { get; }
    public IList`1<T> get_AvailableValues();
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public T get_SelectedValue();
    public IValueConverter get_DisplayNameConverter();
    public void set_DisplayNameConverter(IValueConverter value);
    public void add_SelectedValueChanged(EventHandler`1<PropertyChangedEventArgs`1<T>> value);
    public void remove_SelectedValueChanged(EventHandler`1<PropertyChangedEventArgs`1<T>> value);
    protected virtual DataErrorInfoValidationResult Validate();
    protected virtual DataErrorInfoValidationResult Validate(string columnName);
    protected void NotifySelectedValueChanged(T oldValue, T newValue);
}
public class Microsoft.Management.UI.Internal.ValidatingSelectorValueToDisplayNameConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class Microsoft.Management.UI.Internal.ValidatingValue`1 : ValidatingValueBase {
    public object Value { get; public set; }
    public object get_Value();
    public void set_Value(object value);
    public T GetCastValue();
    public void ForceValidationUpdate();
    protected virtual DataErrorInfoValidationResult Validate();
    protected virtual DataErrorInfoValidationResult Validate(string columnName);
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.Management.UI.Internal.ValidatingValueBase : object {
    public string Error { get; }
    public bool IsValid { get; }
    public string Item { get; }
    public ReadOnlyCollection`1<DataErrorInfoValidationRule> ValidationRules { get; }
    public ReadOnlyCollection`1<DataErrorInfoValidationRule> get_ValidationRules();
    public bool get_IsValid();
    public sealed virtual string get_Item(string columnName);
    public sealed virtual string get_Error();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public void AddValidationRule(DataErrorInfoValidationRule rule);
    public void RemoveValidationRule(DataErrorInfoValidationRule rule);
    public void ClearValidationRules();
    protected abstract virtual DataErrorInfoValidationResult Validate();
    protected abstract virtual DataErrorInfoValidationResult Validate(string propertyName);
    protected void InvalidateValidationResult();
    protected void NotifyPropertyChanged(string propertyName);
}
public class Microsoft.Management.UI.Internal.ValidatingValueToGenericParameterTypeConverter : object {
    public static ValidatingValueToGenericParameterTypeConverter Instance { get; }
    public static ValidatingValueToGenericParameterTypeConverter get_Instance();
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Microsoft.Management.UI.Internal.VisualToAncestorDataConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Microsoft.Management.UI.Internal.WaitRing : Control {
}
public class Microsoft.Management.UI.Internal.XamlLocalizableResources : object {
    public static string AutoResXGen_AddFilterRulePicker_AutomationPropertiesName_157 { get; }
    public static string AutoResXGen_AddFilterRulePicker_AutomationPropertiesName_180 { get; }
    public static string AutoResXGen_AddFilterRulePicker_AutomationPropertiesName_293 { get; }
    public static string AutoResXGen_AddFilterRulePicker_Content_214 { get; }
    public static string AutoResXGen_AddFilterRulePicker_Content_223 { get; }
    public static string AutoResXGen_BackForwardHistory_AutomationPropertiesName_613 { get; }
    public static string AutoResXGen_BackForwardHistory_AutomationPropertiesName_619 { get; }
    public static string AutoResXGen_BreadcrumbItem_AutomationPropertiesName_142 { get; }
    public static string AutoResXGen_BreadcrumbItem_Text_144 { get; }
    public static string AutoResXGen_ColumnPicker_AutomationPropertiesName_104 { get; }
    public static string AutoResXGen_ColumnPicker_AutomationPropertiesName_49 { get; }
    public static string AutoResXGen_ColumnPicker_AutomationPropertiesName_75 { get; }
    public static string AutoResXGen_ColumnPicker_AutomationPropertiesName_86 { get; }
    public static string AutoResXGen_ColumnPicker_Content_127 { get; }
    public static string AutoResXGen_ColumnPicker_Content_134 { get; }
    public static string AutoResXGen_ColumnPicker_Content_189 { get; }
    public static string AutoResXGen_ColumnPicker_Content_199 { get; }
    public static string AutoResXGen_ColumnPicker_Content_42 { get; }
    public static string AutoResXGen_ColumnPicker_Content_5 { get; }
    public static string AutoResXGen_ColumnPicker_Content_73 { get; }
    public static string AutoResXGen_ColumnPicker_Content_84 { get; }
    public static string AutoResXGen_ColumnPicker_Content_93 { get; }
    public static string AutoResXGen_ColumnPicker_Text_142 { get; }
    public static string AutoResXGen_ColumnPicker_Text_152 { get; }
    public static string AutoResXGen_ColumnPicker_Tooltip_76 { get; }
    public static string AutoResXGen_ColumnPicker_Tooltip_84 { get; }
    public static string AutoResXGen_DesignerStyleResources_ToolTip_119 { get; }
    public static string AutoResXGen_DesignerStyleResources_ToolTip_160 { get; }
    public static string AutoResXGen_DesignerStyleResources_ToolTip_97 { get; }
    public static string AutoResXGen_DesignerStyleResources_Tooltip_148 { get; }
    public static string AutoResXGen_FilterRulePanel_AutomationPropertiesName_199 { get; }
    public static string AutoResXGen_FilterRulePanel_AutomationPropertiesName_257 { get; }
    public static string AutoResXGen_FilterRulePanel_BackgroundText_200 { get; }
    public static string AutoResXGen_ListOrganizer_AutomationPropertiesName_47 { get; }
    public static string AutoResXGen_ListOrganizer_AutomationPropertiesName_72 { get; }
    public static string AutoResXGen_ListOrganizer_AutomationPropertiesName_95 { get; }
    public static string AutoResXGen_ManagementList2_AutomationPropertiesName_314 { get; }
    public static string AutoResXGen_ManagementList2_AutomationPropertiesName_52 { get; }
    public static string AutoResXGen_ManagementList2_Content_186 { get; }
    public static string AutoResXGen_ManagementList2_Content_19 { get; }
    public static string AutoResXGen_ManagementList2_Content_196 { get; }
    public static string AutoResXGen_ManagementList2_Content_33 { get; }
    public static string AutoResXGen_ManagementList2_NoItemsText_50 { get; }
    public static string AutoResXGen_ManagementList2_Text_124 { get; }
    public static string AutoResXGen_ManagementList2_Text_166 { get; }
    public static string AutoResXGen_ManagementList2_ToolTip_104 { get; }
    public static string AutoResXGen_ManagementList2_ToolTip_132 { get; }
    public static string AutoResXGen_ManagementList2_ToolTip_32 { get; }
    public static string AutoResXGen_ManagementList_AutomationPropertiesName_302 { get; }
    public static string AutoResXGen_ManagementList_AutomationPropertiesName_395 { get; }
    public static string AutoResXGen_ManagementList_TextBlock_106 { get; }
    public static string AutoResXGen_ManagementList_TextBlock_129 { get; }
    public static string AutoResXGen_ManagementList_TextBlock_83 { get; }
    public static string AutoResXGen_ManagementList_Text_392 { get; }
    public static string AutoResXGen_ManagementList_Text_602 { get; }
    public static string AutoResXGen_ManagementList_ToolTip_314 { get; }
    public static string AutoResXGen_SearchBox_AutomationPropertiesName_75 { get; }
    public static string AutoResXGen_SearchBox_AutomationPropertiesName_85 { get; }
    public static string AutoResXGen_TaskPane_AutomationPropertiesName_133 { get; }
    public static string AutoResXGen_TaskPane_Text_74 { get; }
    public static string AutoResXGen_Tile_AutomationPropertiesName_674 { get; }
    public static string AutoResXGen_WaitingRing_AutomationPropertiesName_74 { get; }
    public static string CollapsingTabControl_CollapseButton_AutomationName { get; }
    public static string CollapsingTabControl_CollapseButton_ToolTip { get; }
    public static string CollapsingTabControl_ExpandButton_AutomationName { get; }
    public static string CollapsingTabControl_ExpandButton_ToolTip { get; }
    public static string ColumnsExplorer_Column_FindTextBox_AutomationName { get; }
    public static string ColumnsExplorer_Column_FindTextBox_BackgroundText { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string FilterRulePanel_LogicalOperatorText_FirstHeader { get; }
    public static string FilterRulePanel_LogicalOperatorText_Header { get; }
    public static string FilterRulePanel_LogicalOperatorText_Item { get; }
    public static string FilterRule_AccessibleName { get; }
    public static string InnerList_GridViewColumnHeader_ItemStatus_Ascending { get; }
    public static string InnerList_GridViewColumnHeader_ItemStatus_Descending { get; }
    public static string ManagementListTitle_ListStatus_FilterApplied { get; }
    public static string ManagementListTitle_ListStatus_FilterInProgress { get; }
    public static string ManagementListTitle_ListStatus_FilterNotApplied { get; }
    public static string ManagementListTitle_Title_WithViewName { get; }
    public static string ManagementList_NoMatchesFound_Message { get; }
    public static string ManagementList_SearchBox_BackgroundText_Live { get; }
    public static string ManagementList_SortGlyph_Ascending_AutomationName { get; }
    public static string ManagementList_SortGlyph_Descending_AutomationName { get; }
    public static string ManagementList_StartFilterButton_AutomationName { get; }
    public static string ManagementList_StopFilterButton_AutomationName { get; }
    public static string ManagementList_ToggleFilterPanelButton_AutomationName { get; }
    public static string NavigationList_ShownChildrenButton_AutomationName { get; }
    public static string NavigationList_ShownChildrenButton_ToolTip { get; }
    public static string OutGridView_Button_Cancel { get; }
    public static string OutGridView_Button_OK { get; }
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_AutoResXGen_AddFilterRulePicker_AutomationPropertiesName_157();
    public static string get_AutoResXGen_AddFilterRulePicker_AutomationPropertiesName_180();
    public static string get_AutoResXGen_AddFilterRulePicker_AutomationPropertiesName_293();
    public static string get_AutoResXGen_AddFilterRulePicker_Content_214();
    public static string get_AutoResXGen_AddFilterRulePicker_Content_223();
    public static string get_AutoResXGen_BackForwardHistory_AutomationPropertiesName_613();
    public static string get_AutoResXGen_BackForwardHistory_AutomationPropertiesName_619();
    public static string get_AutoResXGen_BreadcrumbItem_AutomationPropertiesName_142();
    public static string get_AutoResXGen_BreadcrumbItem_Text_144();
    public static string get_AutoResXGen_ColumnPicker_AutomationPropertiesName_104();
    public static string get_AutoResXGen_ColumnPicker_AutomationPropertiesName_49();
    public static string get_AutoResXGen_ColumnPicker_AutomationPropertiesName_75();
    public static string get_AutoResXGen_ColumnPicker_AutomationPropertiesName_86();
    public static string get_AutoResXGen_ColumnPicker_Content_127();
    public static string get_AutoResXGen_ColumnPicker_Content_134();
    public static string get_AutoResXGen_ColumnPicker_Content_189();
    public static string get_AutoResXGen_ColumnPicker_Content_199();
    public static string get_AutoResXGen_ColumnPicker_Content_42();
    public static string get_AutoResXGen_ColumnPicker_Content_5();
    public static string get_AutoResXGen_ColumnPicker_Content_73();
    public static string get_AutoResXGen_ColumnPicker_Content_84();
    public static string get_AutoResXGen_ColumnPicker_Content_93();
    public static string get_AutoResXGen_ColumnPicker_Text_142();
    public static string get_AutoResXGen_ColumnPicker_Text_152();
    public static string get_AutoResXGen_ColumnPicker_Tooltip_76();
    public static string get_AutoResXGen_ColumnPicker_Tooltip_84();
    public static string get_AutoResXGen_DesignerStyleResources_ToolTip_119();
    public static string get_AutoResXGen_DesignerStyleResources_Tooltip_148();
    public static string get_AutoResXGen_DesignerStyleResources_ToolTip_160();
    public static string get_AutoResXGen_DesignerStyleResources_ToolTip_97();
    public static string get_AutoResXGen_FilterRulePanel_AutomationPropertiesName_199();
    public static string get_AutoResXGen_FilterRulePanel_AutomationPropertiesName_257();
    public static string get_AutoResXGen_FilterRulePanel_BackgroundText_200();
    public static string get_AutoResXGen_ListOrganizer_AutomationPropertiesName_47();
    public static string get_AutoResXGen_ListOrganizer_AutomationPropertiesName_72();
    public static string get_AutoResXGen_ListOrganizer_AutomationPropertiesName_95();
    public static string get_AutoResXGen_ManagementList_AutomationPropertiesName_302();
    public static string get_AutoResXGen_ManagementList_AutomationPropertiesName_395();
    public static string get_AutoResXGen_ManagementList_Text_392();
    public static string get_AutoResXGen_ManagementList_Text_602();
    public static string get_AutoResXGen_ManagementList_TextBlock_106();
    public static string get_AutoResXGen_ManagementList_TextBlock_129();
    public static string get_AutoResXGen_ManagementList_TextBlock_83();
    public static string get_AutoResXGen_ManagementList_ToolTip_314();
    public static string get_AutoResXGen_ManagementList2_AutomationPropertiesName_314();
    public static string get_AutoResXGen_ManagementList2_AutomationPropertiesName_52();
    public static string get_AutoResXGen_ManagementList2_Content_186();
    public static string get_AutoResXGen_ManagementList2_Content_19();
    public static string get_AutoResXGen_ManagementList2_Content_196();
    public static string get_AutoResXGen_ManagementList2_Content_33();
    public static string get_AutoResXGen_ManagementList2_NoItemsText_50();
    public static string get_AutoResXGen_ManagementList2_Text_124();
    public static string get_AutoResXGen_ManagementList2_Text_166();
    public static string get_AutoResXGen_ManagementList2_ToolTip_104();
    public static string get_AutoResXGen_ManagementList2_ToolTip_132();
    public static string get_AutoResXGen_ManagementList2_ToolTip_32();
    public static string get_AutoResXGen_SearchBox_AutomationPropertiesName_75();
    public static string get_AutoResXGen_SearchBox_AutomationPropertiesName_85();
    public static string get_AutoResXGen_TaskPane_AutomationPropertiesName_133();
    public static string get_AutoResXGen_TaskPane_Text_74();
    public static string get_AutoResXGen_Tile_AutomationPropertiesName_674();
    public static string get_AutoResXGen_WaitingRing_AutomationPropertiesName_74();
    public static string get_CollapsingTabControl_CollapseButton_AutomationName();
    public static string get_CollapsingTabControl_CollapseButton_ToolTip();
    public static string get_CollapsingTabControl_ExpandButton_AutomationName();
    public static string get_CollapsingTabControl_ExpandButton_ToolTip();
    public static string get_ColumnsExplorer_Column_FindTextBox_AutomationName();
    public static string get_ColumnsExplorer_Column_FindTextBox_BackgroundText();
    public static string get_FilterRule_AccessibleName();
    public static string get_FilterRulePanel_LogicalOperatorText_FirstHeader();
    public static string get_FilterRulePanel_LogicalOperatorText_Header();
    public static string get_FilterRulePanel_LogicalOperatorText_Item();
    public static string get_InnerList_GridViewColumnHeader_ItemStatus_Ascending();
    public static string get_InnerList_GridViewColumnHeader_ItemStatus_Descending();
    public static string get_ManagementList_NoMatchesFound_Message();
    public static string get_ManagementList_SearchBox_BackgroundText_Live();
    public static string get_ManagementList_SortGlyph_Ascending_AutomationName();
    public static string get_ManagementList_SortGlyph_Descending_AutomationName();
    public static string get_ManagementList_StartFilterButton_AutomationName();
    public static string get_ManagementList_StopFilterButton_AutomationName();
    public static string get_ManagementList_ToggleFilterPanelButton_AutomationName();
    public static string get_ManagementListTitle_ListStatus_FilterApplied();
    public static string get_ManagementListTitle_ListStatus_FilterInProgress();
    public static string get_ManagementListTitle_ListStatus_FilterNotApplied();
    public static string get_ManagementListTitle_Title_WithViewName();
    public static string get_NavigationList_ShownChildrenButton_AutomationName();
    public static string get_NavigationList_ShownChildrenButton_ToolTip();
    public static string get_OutGridView_Button_Cancel();
    public static string get_OutGridView_Button_OK();
}
public class Microsoft.Management.UI.SettingsDialog : Window {
    public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesControl : UserControl {
    public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel : object {
    public bool CanCopy { get; }
    public bool CanRun { get; }
    public string CommandNameFilter { get; public set; }
    public object ExtraViewModel { get; public set; }
    public bool MainGridDisplayed { get; }
    public Visibility MainGridVisibility { get; }
    public List`1<ModuleViewModel> Modules { get; }
    public bool NoCommonParameter { get; }
    public static string RefreshTooltip { get; }
    public Visibility RefreshVisibility { get; public set; }
    public ModuleViewModel SelectedModule { get; public set; }
    public bool WaitMessageDisplayed { get; public set; }
    public Visibility WaitMessageVisibility { get; }
    public double ZoomLevel { get; public set; }
    public AllModulesViewModel(Dictionary`2<string, ShowCommandModuleInfo> importedModules, IEnumerable`1<ShowCommandCommandInfo> commands);
    public AllModulesViewModel(Dictionary`2<string, ShowCommandModuleInfo> importedModules, IEnumerable`1<ShowCommandCommandInfo> commands, bool noCommonParameter);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public void add_SelectedCommandInSelectedModuleNeedsHelp(EventHandler`1<HelpNeededEventArgs> value);
    public void remove_SelectedCommandInSelectedModuleNeedsHelp(EventHandler`1<HelpNeededEventArgs> value);
    public void add_SelectedCommandInSelectedModuleNeedsImportModule(EventHandler`1<ImportModuleEventArgs> value);
    public void remove_SelectedCommandInSelectedModuleNeedsImportModule(EventHandler`1<ImportModuleEventArgs> value);
    public void add_RunSelectedCommandInSelectedModule(EventHandler`1<CommandEventArgs> value);
    public void remove_RunSelectedCommandInSelectedModule(EventHandler`1<CommandEventArgs> value);
    public void add_Refresh(EventHandler`1<EventArgs> value);
    public void remove_Refresh(EventHandler`1<EventArgs> value);
    public double get_ZoomLevel();
    public void set_ZoomLevel(double value);
    public static string get_RefreshTooltip();
    public Visibility get_RefreshVisibility();
    public void set_RefreshVisibility(Visibility value);
    public bool get_NoCommonParameter();
    public string get_CommandNameFilter();
    public void set_CommandNameFilter(string value);
    public ModuleViewModel get_SelectedModule();
    public void set_SelectedModule(ModuleViewModel value);
    public bool get_CanRun();
    public bool get_CanCopy();
    public List`1<ModuleViewModel> get_Modules();
    public Visibility get_WaitMessageVisibility();
    public Visibility get_MainGridVisibility();
    public bool get_MainGridDisplayed();
    public bool get_WaitMessageDisplayed();
    public void set_WaitMessageDisplayed(bool value);
    public object get_ExtraViewModel();
    public void set_ExtraViewModel(object value);
    public string GetScript();
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.CmdletControl : UserControl {
    public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.CommandEventArgs : EventArgs {
    public CommandViewModel Command { get; }
    public CommandEventArgs(CommandViewModel command);
    public CommandViewModel get_Command();
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel : object {
    public bool AreCommonParametersExpanded { get; public set; }
    public Visibility CommonParameterVisibility { get; }
    public ParameterSetViewModel CommonParameters { get; }
    public GridLength CommonParametersHeight { get; public set; }
    public string DetailsTitle { get; }
    public string ImportModuleMessage { get; }
    public bool IsImported { get; }
    public string ModuleName { get; }
    public bool ModuleQualifyCommandName { get; public set; }
    public string Name { get; }
    public Visibility NoParameterVisibility { get; }
    public Visibility NotImportedVisibility { get; }
    public Visibility ParameterSetTabControlVisibility { get; }
    public List`1<ParameterSetViewModel> ParameterSets { get; }
    public ModuleViewModel ParentModule { get; }
    public ParameterSetViewModel SelectedParameterSet { get; public set; }
    public bool SelectedParameterSetAllMandatoryParametersHaveValues { get; public set; }
    public Visibility SingleParameterSetControlVisibility { get; }
    public string ToolTip { get; }
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public void add_HelpNeeded(EventHandler`1<HelpNeededEventArgs> value);
    public void remove_HelpNeeded(EventHandler`1<HelpNeededEventArgs> value);
    public void add_ImportModule(EventHandler`1<EventArgs> value);
    public void remove_ImportModule(EventHandler`1<EventArgs> value);
    public bool get_ModuleQualifyCommandName();
    public void set_ModuleQualifyCommandName(bool value);
    public bool get_AreCommonParametersExpanded();
    public void set_AreCommonParametersExpanded(bool value);
    public ParameterSetViewModel get_SelectedParameterSet();
    public void set_SelectedParameterSet(ParameterSetViewModel value);
    public bool get_SelectedParameterSetAllMandatoryParametersHaveValues();
    public void set_SelectedParameterSetAllMandatoryParametersHaveValues(bool value);
    public List`1<ParameterSetViewModel> get_ParameterSets();
    public Visibility get_ParameterSetTabControlVisibility();
    public Visibility get_SingleParameterSetControlVisibility();
    public ParameterSetViewModel get_CommonParameters();
    public Visibility get_CommonParameterVisibility();
    public GridLength get_CommonParametersHeight();
    public void set_CommonParametersHeight(GridLength value);
    public Visibility get_NotImportedVisibility();
    public Visibility get_NoParameterVisibility();
    public bool get_IsImported();
    public string get_Name();
    public string get_ModuleName();
    public ModuleViewModel get_ParentModule();
    public string get_ToolTip();
    public string get_ImportModuleMessage();
    public string get_DetailsTitle();
    public string GetScript();
    public void OpenHelpWindow();
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.HelpNeededEventArgs : EventArgs {
    public string CommandName { get; }
    public HelpNeededEventArgs(string commandName);
    public string get_CommandName();
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ImageButton : ImageButtonBase {
    public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ImageButtonBase : Grid {
    public static DependencyProperty CommandProperty;
    public static DependencyProperty DisabledImageSourceProperty;
    public static DependencyProperty EnabledImageSourceProperty;
    public RoutedUICommand Command { get; public set; }
    public ImageSource DisabledImageSource { get; public set; }
    public ImageSource EnabledImageSource { get; public set; }
    public ImageSource get_EnabledImageSource();
    public void set_EnabledImageSource(ImageSource value);
    public ImageSource get_DisabledImageSource();
    public void set_DisabledImageSource(ImageSource value);
    public RoutedUICommand get_Command();
    public void set_Command(RoutedUICommand value);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ImageButtonToolTipConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ImageToggleButton : ImageButtonBase {
    public static DependencyProperty IsCheckedProperty;
    public bool IsChecked { get; public set; }
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ImportModuleEventArgs : EventArgs {
    public string CommandName { get; }
    public string ParentModuleName { get; }
    public string SelectedModuleName { get; }
    public ImportModuleEventArgs(string commandName, string parentModuleName, string selectedModuleName);
    public string get_CommandName();
    public string get_ParentModuleName();
    public string get_SelectedModuleName();
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel : object {
    public AllModulesViewModel AllModules { get; }
    public Visibility CommandControlVisibility { get; }
    public GridLength CommandRowHeight { get; }
    public List`1<CommandViewModel> Commands { get; }
    public string DisplayName { get; }
    public ObservableCollection`1<CommandViewModel> FilteredCommands { get; }
    public bool IsThereASelectedCommand { get; public set; }
    public bool IsThereASelectedImportedCommandWhereAllMandatoryParametersHaveValues { get; public set; }
    public string Name { get; }
    public CommandViewModel SelectedCommand { get; public set; }
    public ModuleViewModel(string name, Dictionary`2<string, ShowCommandModuleInfo> importedModules);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public void add_SelectedCommandNeedsHelp(EventHandler`1<HelpNeededEventArgs> value);
    public void remove_SelectedCommandNeedsHelp(EventHandler`1<HelpNeededEventArgs> value);
    public void add_SelectedCommandNeedsImportModule(EventHandler`1<ImportModuleEventArgs> value);
    public void remove_SelectedCommandNeedsImportModule(EventHandler`1<ImportModuleEventArgs> value);
    public void add_RunSelectedCommand(EventHandler`1<CommandEventArgs> value);
    public void remove_RunSelectedCommand(EventHandler`1<CommandEventArgs> value);
    public string get_Name();
    public string get_DisplayName();
    public Visibility get_CommandControlVisibility();
    public GridLength get_CommandRowHeight();
    public List`1<CommandViewModel> get_Commands();
    public ObservableCollection`1<CommandViewModel> get_FilteredCommands();
    public CommandViewModel get_SelectedCommand();
    public void set_SelectedCommand(CommandViewModel value);
    public bool get_IsThereASelectedCommand();
    public void set_IsThereASelectedCommand(bool value);
    public bool get_IsThereASelectedImportedCommandWhereAllMandatoryParametersHaveValues();
    public void set_IsThereASelectedImportedCommandWhereAllMandatoryParametersHaveValues(bool value);
    public AllModulesViewModel get_AllModules();
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.MultipleSelectionControl : UserControl {
    public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.MultipleSelectionDialog : Window {
    public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.NotImportedCmdletControl : UserControl {
    public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetControl : UserControl {
    public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel : object {
    public bool AllMandatoryParametersHaveValues { get; public set; }
    public string Name { get; }
    public List`1<ParameterViewModel> Parameters { get; }
    public ParameterSetViewModel(string name, List`1<ParameterViewModel> parameters);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public string get_Name();
    public List`1<ParameterViewModel> get_Parameters();
    public bool get_AllMandatoryParametersHaveValues();
    public void set_AllMandatoryParametersHaveValues(bool value);
    public string GetScript();
    public int GetIndividualParameterCount();
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel : object {
    public bool HasValue { get; }
    public bool IsInSharedParameterSet { get; }
    public bool IsMandatory { get; }
    public string Name { get; }
    public string NameCheckLabel { get; }
    public string NameTextLabel { get; }
    public ShowCommandParameterInfo Parameter { get; }
    public string ParameterSetName { get; }
    public string ToolTip { get; }
    public object Value { get; public set; }
    public ParameterViewModel(ShowCommandParameterInfo parameter, string parameterSetName);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public ShowCommandParameterInfo get_Parameter();
    public object get_Value();
    public void set_Value(object value);
    public string get_Name();
    public string get_ParameterSetName();
    public bool get_IsInSharedParameterSet();
    public string get_NameTextLabel();
    public string get_NameCheckLabel();
    public string get_ToolTip();
    public bool get_IsMandatory();
    public bool get_HasValue();
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ShowAllModulesWindow : Window {
    protected virtual void OnClosed(EventArgs e);
    public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandWindow : Window {
    protected virtual void OnClosed(EventArgs e);
    public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.PowerShell.Commands.ShowCommandInternal.ShowModuleControl : UserControl {
    public Window Owner { get; public set; }
    public Window get_Owner();
    public void set_Owner(Window value);
    public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
