public class Microsoft.PowerShell.Management.Activities.AddComputer : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> DomainName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> LocalCredential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> NewName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> OUPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<JoinOptions> Options { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Restart { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Server { get; public set; }
    protected bool SupportsCustomRemoting { get; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> UnjoinDomainCredential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Unsecure { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> WorkgroupName { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<PSCredential> get_LocalCredential();
    public void set_LocalCredential(InArgument`1<PSCredential> value);
    public InArgument`1<PSCredential> get_UnjoinDomainCredential();
    public void set_UnjoinDomainCredential(InArgument`1<PSCredential> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<string> get_DomainName();
    public void set_DomainName(InArgument`1<string> value);
    public InArgument`1<string> get_OUPath();
    public void set_OUPath(InArgument`1<string> value);
    public InArgument`1<string> get_Server();
    public void set_Server(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Unsecure();
    public void set_Unsecure(InArgument`1<SwitchParameter> value);
    public InArgument`1<JoinOptions> get_Options();
    public void set_Options(InArgument`1<JoinOptions> value);
    public InArgument`1<string> get_WorkgroupName();
    public void set_WorkgroupName(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Restart();
    public void set_Restart(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_NewName();
    public void set_NewName(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    protected virtual bool get_SupportsCustomRemoting();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.AddContent : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<FileSystemCmdletProviderEncoding> Encoding { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Stream { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Object[]> Value { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<Object[]> get_Value();
    public void set_Value(InArgument`1<Object[]> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<FileSystemCmdletProviderEncoding> get_Encoding();
    public void set_Encoding(InArgument`1<FileSystemCmdletProviderEncoding> value);
    public InArgument`1<string> get_Stream();
    public void set_Stream(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.CheckpointComputer : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> Description { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> RestorePointType { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Description();
    public void set_Description(InArgument`1<string> value);
    public InArgument`1<string> get_RestorePointType();
    public void set_RestorePointType(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.ClearContent : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Stream { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<string> get_Stream();
    public void set_Stream(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.ClearEventLog : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LogName { get; public set; }
    public string PSCommandName { get; }
    protected bool SupportsCustomRemoting { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_LogName();
    public void set_LogName(InArgument`1<String[]> value);
    protected virtual bool get_SupportsCustomRemoting();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.ClearItem : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.ClearItemProperty : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<string> get_Name();
    public void set_Name(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.ClearRecycleBin : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> DriveLetter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_DriveLetter();
    public void set_DriveLetter(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.ConvertPath : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.CopyItem : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Container { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Destination { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Recurse { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<string> get_Destination();
    public void set_Destination(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Container();
    public void set_Container(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Recurse();
    public void set_Recurse(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.CopyItemProperty : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Destination { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<string> get_Name();
    public void set_Name(InArgument`1<string> value);
    public InArgument`1<string> get_Destination();
    public void set_Destination(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.DisableComputerRestore : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Drive { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Drive();
    public void set_Drive(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.EnableComputerRestore : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Drive { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Drive();
    public void set_Drive(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.GetChildItem : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<FlagsExpression`1<FileAttributes>> Attributes { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Directory { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> File { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Hidden { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> ReadOnly { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Recurse { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> System { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Recurse();
    public void set_Recurse(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Name();
    public void set_Name(InArgument`1<SwitchParameter> value);
    public InArgument`1<FlagsExpression`1<FileAttributes>> get_Attributes();
    public void set_Attributes(InArgument`1<FlagsExpression`1<FileAttributes>> value);
    public InArgument`1<SwitchParameter> get_Directory();
    public void set_Directory(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_File();
    public void set_File(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Hidden();
    public void set_Hidden(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_ReadOnly();
    public void set_ReadOnly(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_System();
    public void set_System(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.GetComputerRestorePoint : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> LastStatus { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Int32[]> RestorePoint { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<Int32[]> get_RestorePoint();
    public void set_RestorePoint(InArgument`1<Int32[]> value);
    public InArgument`1<SwitchParameter> get_LastStatus();
    public void set_LastStatus(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.GetContent : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Delimiter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<FileSystemCmdletProviderEncoding> Encoding { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Raw { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<long> ReadCount { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Stream { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Tail { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<long> TotalCount { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Wait { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<long> get_ReadCount();
    public void set_ReadCount(InArgument`1<long> value);
    public InArgument`1<long> get_TotalCount();
    public void set_TotalCount(InArgument`1<long> value);
    public InArgument`1<int> get_Tail();
    public void set_Tail(InArgument`1<int> value);
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<string> get_Delimiter();
    public void set_Delimiter(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Wait();
    public void set_Wait(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Raw();
    public void set_Raw(InArgument`1<SwitchParameter> value);
    public InArgument`1<FileSystemCmdletProviderEncoding> get_Encoding();
    public void set_Encoding(InArgument`1<FileSystemCmdletProviderEncoding> value);
    public InArgument`1<string> get_Stream();
    public void set_Stream(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.GetEventLog : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<DateTime> After { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> AsBaseObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> AsString { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<DateTime> Before { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> EntryType { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Int32[]> Index { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Int64[]> InstanceId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> List { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> LogName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Message { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Newest { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Source { get; public set; }
    protected bool SupportsCustomRemoting { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> UserName { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_LogName();
    public void set_LogName(InArgument`1<string> value);
    public InArgument`1<int> get_Newest();
    public void set_Newest(InArgument`1<int> value);
    public InArgument`1<DateTime> get_After();
    public void set_After(InArgument`1<DateTime> value);
    public InArgument`1<DateTime> get_Before();
    public void set_Before(InArgument`1<DateTime> value);
    public InArgument`1<String[]> get_UserName();
    public void set_UserName(InArgument`1<String[]> value);
    public InArgument`1<Int64[]> get_InstanceId();
    public void set_InstanceId(InArgument`1<Int64[]> value);
    public InArgument`1<Int32[]> get_Index();
    public void set_Index(InArgument`1<Int32[]> value);
    public InArgument`1<String[]> get_EntryType();
    public void set_EntryType(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Source();
    public void set_Source(InArgument`1<String[]> value);
    public InArgument`1<string> get_Message();
    public void set_Message(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_AsBaseObject();
    public void set_AsBaseObject(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_List();
    public void set_List(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_AsString();
    public void set_AsString(InArgument`1<SwitchParameter> value);
    protected virtual bool get_SupportsCustomRemoting();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.GetHotFix : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Description { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> HotFixId { get; public set; }
    public string PSCommandName { get; }
    protected bool SupportsCustomRemoting { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_HotFixId();
    public void set_HotFixId(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Description();
    public void set_Description(InArgument`1<String[]> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual bool get_SupportsCustomRemoting();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.GetItem : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Stream { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<String[]> get_Stream();
    public void set_Stream(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.GetItemProperty : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.GetItemPropertyValue : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.GetLocation : PSRemotingActivity {
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> PSDrive { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> PSProvider { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Stack { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> StackName { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_PSProvider();
    public void set_PSProvider(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_PSDrive();
    public void set_PSDrive(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Stack();
    public void set_Stack(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_StackName();
    public void set_StackName(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.GetProcess : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> FileVersionInfo { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> IncludeUserName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Process[]> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Module { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Int32[]> ProcessId { get; public set; }
    protected bool SupportsCustomRemoting { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<Int32[]> get_ProcessId();
    public void set_ProcessId(InArgument`1<Int32[]> value);
    public InArgument`1<Process[]> get_InputObject();
    public void set_InputObject(InArgument`1<Process[]> value);
    public InArgument`1<SwitchParameter> get_IncludeUserName();
    public void set_IncludeUserName(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Module();
    public void set_Module(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_FileVersionInfo();
    public void set_FileVersionInfo(InArgument`1<SwitchParameter> value);
    protected virtual bool get_SupportsCustomRemoting();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.GetPSDrive : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> PSProvider { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Scope { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralName();
    public void set_LiteralName(InArgument`1<String[]> value);
    public InArgument`1<string> get_Scope();
    public void set_Scope(InArgument`1<string> value);
    public InArgument`1<String[]> get_PSProvider();
    public void set_PSProvider(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.GetPSProvider : PSRemotingActivity {
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> PSProvider { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_PSProvider();
    public void set_PSProvider(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.GetService : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> DependentServices { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ServiceController[]> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> RequiredServices { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ServiceDisplayName { get; public set; }
    protected bool SupportsCustomRemoting { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_DependentServices();
    public void set_DependentServices(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_RequiredServices();
    public void set_RequiredServices(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_ServiceDisplayName();
    public void set_ServiceDisplayName(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<ServiceController[]> get_InputObject();
    public void set_InputObject(InArgument`1<ServiceController[]> value);
    protected virtual bool get_SupportsCustomRemoting();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.InvokeItem : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.JoinPath : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> ChildPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Resolve { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<string> get_ChildPath();
    public void set_ChildPath(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Resolve();
    public void set_Resolve(InArgument`1<SwitchParameter> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.LimitEventLog : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LogName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<long> MaximumSize { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<OverflowAction> OverflowAction { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<int> RetentionDays { get; public set; }
    protected bool SupportsCustomRemoting { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_LogName();
    public void set_LogName(InArgument`1<String[]> value);
    public InArgument`1<int> get_RetentionDays();
    public void set_RetentionDays(InArgument`1<int> value);
    public InArgument`1<OverflowAction> get_OverflowAction();
    public void set_OverflowAction(InArgument`1<OverflowAction> value);
    public InArgument`1<long> get_MaximumSize();
    public void set_MaximumSize(InArgument`1<long> value);
    protected virtual bool get_SupportsCustomRemoting();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.MoveItem : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Destination { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<string> get_Destination();
    public void set_Destination(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.MoveItemProperty : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Destination { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<string> get_Destination();
    public void set_Destination(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.NewEventLog : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> CategoryResourceFile { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> LogName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> MessageResourceFile { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ParameterResourceFile { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Source { get; public set; }
    protected bool SupportsCustomRemoting { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_CategoryResourceFile();
    public void set_CategoryResourceFile(InArgument`1<string> value);
    public InArgument`1<string> get_LogName();
    public void set_LogName(InArgument`1<string> value);
    public InArgument`1<string> get_MessageResourceFile();
    public void set_MessageResourceFile(InArgument`1<string> value);
    public InArgument`1<string> get_ParameterResourceFile();
    public void set_ParameterResourceFile(InArgument`1<string> value);
    public InArgument`1<String[]> get_Source();
    public void set_Source(InArgument`1<String[]> value);
    protected virtual bool get_SupportsCustomRemoting();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.NewItem : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ItemType { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<object> Value { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<string> get_Name();
    public void set_Name(InArgument`1<string> value);
    public InArgument`1<string> get_ItemType();
    public void set_ItemType(InArgument`1<string> value);
    public InArgument`1<object> get_Value();
    public void set_Value(InArgument`1<object> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.NewItemProperty : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> PropertyType { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<object> Value { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<string> get_Name();
    public void set_Name(InArgument`1<string> value);
    public InArgument`1<string> get_PropertyType();
    public void set_PropertyType(InArgument`1<string> value);
    public InArgument`1<object> get_Value();
    public void set_Value(InArgument`1<object> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.NewService : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> BinaryPathName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> DependsOn { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Description { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ServiceDisplayName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ServiceStartMode> StartupType { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Name();
    public void set_Name(InArgument`1<string> value);
    public InArgument`1<string> get_BinaryPathName();
    public void set_BinaryPathName(InArgument`1<string> value);
    public InArgument`1<string> get_ServiceDisplayName();
    public void set_ServiceDisplayName(InArgument`1<string> value);
    public InArgument`1<string> get_Description();
    public void set_Description(InArgument`1<string> value);
    public InArgument`1<ServiceStartMode> get_StartupType();
    public void set_StartupType(InArgument`1<ServiceStartMode> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<String[]> get_DependsOn();
    public void set_DependsOn(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.NewWebServiceProxy : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> Class { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Namespace { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Uri> Uri { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> UseDefaultCredential { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<Uri> get_Uri();
    public void set_Uri(InArgument`1<Uri> value);
    public InArgument`1<string> get_Class();
    public void set_Class(InArgument`1<string> value);
    public InArgument`1<string> get_Namespace();
    public void set_Namespace(InArgument`1<string> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<SwitchParameter> get_UseDefaultCredential();
    public void set_UseDefaultCredential(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.RegisterWmiEvent : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<ScriptBlock> Action { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Class { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ComputerName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Forward { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> MaxTriggerCount { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> MessageData { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Namespace { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Query { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> SourceIdentifier { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> SupportEvent { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<long> Timeout { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Namespace();
    public void set_Namespace(InArgument`1<string> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<string> get_ComputerName();
    public void set_ComputerName(InArgument`1<string> value);
    public InArgument`1<string> get_Class();
    public void set_Class(InArgument`1<string> value);
    public InArgument`1<string> get_Query();
    public void set_Query(InArgument`1<string> value);
    public InArgument`1<long> get_Timeout();
    public void set_Timeout(InArgument`1<long> value);
    public InArgument`1<string> get_SourceIdentifier();
    public void set_SourceIdentifier(InArgument`1<string> value);
    public InArgument`1<ScriptBlock> get_Action();
    public void set_Action(InArgument`1<ScriptBlock> value);
    public InArgument`1<PSObject> get_MessageData();
    public void set_MessageData(InArgument`1<PSObject> value);
    public InArgument`1<SwitchParameter> get_SupportEvent();
    public void set_SupportEvent(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Forward();
    public void set_Forward(InArgument`1<SwitchParameter> value);
    public InArgument`1<int> get_MaxTriggerCount();
    public void set_MaxTriggerCount(InArgument`1<int> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.RemoveComputer : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> LocalCredential { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Restart { get; public set; }
    protected bool SupportsCustomRemoting { get; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> UnjoinDomainCredential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> WorkgroupName { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<PSCredential> get_UnjoinDomainCredential();
    public void set_UnjoinDomainCredential(InArgument`1<PSCredential> value);
    public InArgument`1<PSCredential> get_LocalCredential();
    public void set_LocalCredential(InArgument`1<PSCredential> value);
    public InArgument`1<SwitchParameter> get_Restart();
    public void set_Restart(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_WorkgroupName();
    public void set_WorkgroupName(InArgument`1<string> value);
    protected virtual bool get_SupportsCustomRemoting();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.RemoveEventLog : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LogName { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Source { get; public set; }
    protected bool SupportsCustomRemoting { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_LogName();
    public void set_LogName(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Source();
    public void set_Source(InArgument`1<String[]> value);
    protected virtual bool get_SupportsCustomRemoting();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.RemoveItem : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Recurse { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Stream { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Recurse();
    public void set_Recurse(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<String[]> get_Stream();
    public void set_Stream(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.RemoveItemProperty : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.RemoveWmiObject : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> AsJob { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<AuthenticationLevel> Authentication { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Authority { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Class { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ComputerName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> EnableAllPrivileges { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ImpersonationLevel> Impersonation { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ManagementObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Locale { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Namespace { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> ThrottleLimit { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<ManagementObject> get_InputObject();
    public void set_InputObject(InArgument`1<ManagementObject> value);
    public InArgument`1<string> get_Path();
    public void set_Path(InArgument`1<string> value);
    public InArgument`1<string> get_Class();
    public void set_Class(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_AsJob();
    public void set_AsJob(InArgument`1<SwitchParameter> value);
    public InArgument`1<ImpersonationLevel> get_Impersonation();
    public void set_Impersonation(InArgument`1<ImpersonationLevel> value);
    public InArgument`1<AuthenticationLevel> get_Authentication();
    public void set_Authentication(InArgument`1<AuthenticationLevel> value);
    public InArgument`1<string> get_Locale();
    public void set_Locale(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_EnableAllPrivileges();
    public void set_EnableAllPrivileges(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Authority();
    public void set_Authority(InArgument`1<string> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<int> get_ThrottleLimit();
    public void set_ThrottleLimit(InArgument`1<int> value);
    public InArgument`1<String[]> get_ComputerName();
    public void set_ComputerName(InArgument`1<String[]> value);
    public InArgument`1<string> get_Namespace();
    public void set_Namespace(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.RenameComputer : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> DomainCredential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> LocalCredential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> NewName { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Restart { get; public set; }
    protected bool SupportsCustomRemoting { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<PSCredential> get_DomainCredential();
    public void set_DomainCredential(InArgument`1<PSCredential> value);
    public InArgument`1<PSCredential> get_LocalCredential();
    public void set_LocalCredential(InArgument`1<PSCredential> value);
    public InArgument`1<string> get_NewName();
    public void set_NewName(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Restart();
    public void set_Restart(InArgument`1<SwitchParameter> value);
    protected virtual bool get_SupportsCustomRemoting();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.RenameItem : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> NewName { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Path { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Path();
    public void set_Path(InArgument`1<string> value);
    public InArgument`1<string> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<string> value);
    public InArgument`1<string> get_NewName();
    public void set_NewName(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.RenameItemProperty : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Name { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> NewName { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Path { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Path();
    public void set_Path(InArgument`1<string> value);
    public InArgument`1<string> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<string> value);
    public InArgument`1<string> get_Name();
    public void set_Name(InArgument`1<string> value);
    public InArgument`1<string> get_NewName();
    public void set_NewName(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.ResetComputerMachinePassword : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Server { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Server();
    public void set_Server(InArgument`1<string> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.ResolvePath : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Relative { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Relative();
    public void set_Relative(InArgument`1<SwitchParameter> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.RestartActivityContext : object {
}
public class Microsoft.PowerShell.Management.Activities.RestartComputer : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<AuthenticationLevel> DcomAuthentication { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<short> Delay { get; public set; }
    [DefaultValueAttribute("")]
public static bool DisableSelfRestart { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<WaitForServiceTypes> For { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ImpersonationLevel> Impersonation { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> PSComputerName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> PSCredential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Protocol { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> ThrottleLimit { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Timeout { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Wait { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> WsmanAuthentication { get; public set; }
    public static bool get_DisableSelfRestart();
    public static void set_DisableSelfRestart(bool value);
    public virtual string get_PSCommandName();
    public InArgument`1<AuthenticationLevel> get_DcomAuthentication();
    public void set_DcomAuthentication(InArgument`1<AuthenticationLevel> value);
    public InArgument`1<ImpersonationLevel> get_Impersonation();
    public void set_Impersonation(InArgument`1<ImpersonationLevel> value);
    public InArgument`1<string> get_WsmanAuthentication();
    public void set_WsmanAuthentication(InArgument`1<string> value);
    public InArgument`1<string> get_Protocol();
    public void set_Protocol(InArgument`1<string> value);
    public InArgument`1<String[]> get_PSComputerName();
    public void set_PSComputerName(InArgument`1<String[]> value);
    public InArgument`1<PSCredential> get_PSCredential();
    public void set_PSCredential(InArgument`1<PSCredential> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<int> get_ThrottleLimit();
    public void set_ThrottleLimit(InArgument`1<int> value);
    public InArgument`1<SwitchParameter> get_Wait();
    public void set_Wait(InArgument`1<SwitchParameter> value);
    public InArgument`1<int> get_Timeout();
    public void set_Timeout(InArgument`1<int> value);
    public InArgument`1<WaitForServiceTypes> get_For();
    public void set_For(InArgument`1<WaitForServiceTypes> value);
    public InArgument`1<short> get_Delay();
    public void set_Delay(InArgument`1<short> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
    protected virtual void Execute(NativeActivityContext context);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
}
public class Microsoft.PowerShell.Management.Activities.RestartService : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ServiceController[]> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ServiceDisplayName { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<ServiceController[]> get_InputObject();
    public void set_InputObject(InArgument`1<ServiceController[]> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_ServiceDisplayName();
    public void set_ServiceDisplayName(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.RestoreComputer : PSRemotingActivity {
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<int> RestorePoint { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<int> get_RestorePoint();
    public void set_RestorePoint(InArgument`1<int> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.ResumeService : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ServiceController[]> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ServiceDisplayName { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<ServiceController[]> get_InputObject();
    public void set_InputObject(InArgument`1<ServiceController[]> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_ServiceDisplayName();
    public void set_ServiceDisplayName(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.SetContent : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<FileSystemCmdletProviderEncoding> Encoding { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Stream { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Object[]> Value { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<Object[]> get_Value();
    public void set_Value(InArgument`1<Object[]> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<FileSystemCmdletProviderEncoding> get_Encoding();
    public void set_Encoding(InArgument`1<FileSystemCmdletProviderEncoding> value);
    public InArgument`1<string> get_Stream();
    public void set_Stream(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.SetItem : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<object> Value { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<object> get_Value();
    public void set_Value(InArgument`1<object> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.SetItemProperty : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<object> Value { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<string> get_Name();
    public void set_Name(InArgument`1<string> value);
    public InArgument`1<object> get_Value();
    public void set_Value(InArgument`1<object> value);
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.SetService : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> Description { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ServiceController> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ServiceDisplayName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ServiceStartMode> StartupType { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Status { get; public set; }
    protected bool SupportsCustomRemoting { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Name();
    public void set_Name(InArgument`1<string> value);
    public InArgument`1<string> get_ServiceDisplayName();
    public void set_ServiceDisplayName(InArgument`1<string> value);
    public InArgument`1<string> get_Description();
    public void set_Description(InArgument`1<string> value);
    public InArgument`1<ServiceStartMode> get_StartupType();
    public void set_StartupType(InArgument`1<ServiceStartMode> value);
    public InArgument`1<string> get_Status();
    public void set_Status(InArgument`1<string> value);
    public InArgument`1<ServiceController> get_InputObject();
    public void set_InputObject(InArgument`1<ServiceController> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    protected virtual bool get_SupportsCustomRemoting();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.SetWmiInstance : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<Hashtable> Arguments { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> AsJob { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<AuthenticationLevel> Authentication { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Authority { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Class { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ComputerName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> EnableAllPrivileges { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ImpersonationLevel> Impersonation { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ManagementObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Locale { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Namespace { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PutType> PutType { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> ThrottleLimit { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<ManagementObject> get_InputObject();
    public void set_InputObject(InArgument`1<ManagementObject> value);
    public InArgument`1<string> get_Path();
    public void set_Path(InArgument`1<string> value);
    public InArgument`1<string> get_Class();
    public void set_Class(InArgument`1<string> value);
    public InArgument`1<Hashtable> get_Arguments();
    public void set_Arguments(InArgument`1<Hashtable> value);
    public InArgument`1<PutType> get_PutType();
    public void set_PutType(InArgument`1<PutType> value);
    public InArgument`1<SwitchParameter> get_AsJob();
    public void set_AsJob(InArgument`1<SwitchParameter> value);
    public InArgument`1<ImpersonationLevel> get_Impersonation();
    public void set_Impersonation(InArgument`1<ImpersonationLevel> value);
    public InArgument`1<AuthenticationLevel> get_Authentication();
    public void set_Authentication(InArgument`1<AuthenticationLevel> value);
    public InArgument`1<string> get_Locale();
    public void set_Locale(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_EnableAllPrivileges();
    public void set_EnableAllPrivileges(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Authority();
    public void set_Authority(InArgument`1<string> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<int> get_ThrottleLimit();
    public void set_ThrottleLimit(InArgument`1<int> value);
    public InArgument`1<String[]> get_ComputerName();
    public void set_ComputerName(InArgument`1<String[]> value);
    public InArgument`1<string> get_Namespace();
    public void set_Namespace(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.SplitPath : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> IsAbsolute { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Leaf { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NoQualifier { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Parent { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Qualifier { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Resolve { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Qualifier();
    public void set_Qualifier(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_NoQualifier();
    public void set_NoQualifier(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Parent();
    public void set_Parent(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Leaf();
    public void set_Leaf(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Resolve();
    public void set_Resolve(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_IsAbsolute();
    public void set_IsAbsolute(InArgument`1<SwitchParameter> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.StartProcess : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ArgumentList { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> FilePath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> LoadUserProfile { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NoNewWindow { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> RedirectStandardError { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> RedirectStandardInput { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> RedirectStandardOutput { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> UseNewEnvironment { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Verb { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Wait { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ProcessWindowStyle> WindowStyle { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> WorkingDirectory { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_FilePath();
    public void set_FilePath(InArgument`1<string> value);
    public InArgument`1<String[]> get_ArgumentList();
    public void set_ArgumentList(InArgument`1<String[]> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<string> get_WorkingDirectory();
    public void set_WorkingDirectory(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_LoadUserProfile();
    public void set_LoadUserProfile(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_NoNewWindow();
    public void set_NoNewWindow(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_RedirectStandardError();
    public void set_RedirectStandardError(InArgument`1<string> value);
    public InArgument`1<string> get_RedirectStandardInput();
    public void set_RedirectStandardInput(InArgument`1<string> value);
    public InArgument`1<string> get_RedirectStandardOutput();
    public void set_RedirectStandardOutput(InArgument`1<string> value);
    public InArgument`1<string> get_Verb();
    public void set_Verb(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Wait();
    public void set_Wait(InArgument`1<SwitchParameter> value);
    public InArgument`1<ProcessWindowStyle> get_WindowStyle();
    public void set_WindowStyle(InArgument`1<ProcessWindowStyle> value);
    public InArgument`1<SwitchParameter> get_UseNewEnvironment();
    public void set_UseNewEnvironment(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.StartService : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ServiceController[]> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ServiceDisplayName { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<ServiceController[]> get_InputObject();
    public void set_InputObject(InArgument`1<ServiceController[]> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_ServiceDisplayName();
    public void set_ServiceDisplayName(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.StopComputer : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> AsJob { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<AuthenticationLevel> Authentication { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ImpersonationLevel> Impersonation { get; public set; }
    public string PSCommandName { get; }
    protected bool SupportsCustomRemoting { get; }
    [DefaultValueAttribute("")]
public InArgument`1<int> ThrottleLimit { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<SwitchParameter> get_AsJob();
    public void set_AsJob(InArgument`1<SwitchParameter> value);
    public InArgument`1<AuthenticationLevel> get_Authentication();
    public void set_Authentication(InArgument`1<AuthenticationLevel> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<ImpersonationLevel> get_Impersonation();
    public void set_Impersonation(InArgument`1<ImpersonationLevel> value);
    public InArgument`1<int> get_ThrottleLimit();
    public void set_ThrottleLimit(InArgument`1<int> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    protected virtual bool get_SupportsCustomRemoting();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.StopProcess : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Process[]> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Int32[]> ProcessId { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<Int32[]> get_ProcessId();
    public void set_ProcessId(InArgument`1<Int32[]> value);
    public InArgument`1<Process[]> get_InputObject();
    public void set_InputObject(InArgument`1<Process[]> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.StopService : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ServiceController[]> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NoWait { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ServiceDisplayName { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_NoWait();
    public void set_NoWait(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<ServiceController[]> get_InputObject();
    public void set_InputObject(InArgument`1<ServiceController[]> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_ServiceDisplayName();
    public void set_ServiceDisplayName(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.SuspendService : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ServiceController[]> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ServiceDisplayName { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<ServiceController[]> get_InputObject();
    public void set_InputObject(InArgument`1<ServiceController[]> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_ServiceDisplayName();
    public void set_ServiceDisplayName(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.TestComputerSecureChannel : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Repair { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Server { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<SwitchParameter> get_Repair();
    public void set_Repair(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Server();
    public void set_Server(InArgument`1<string> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.TestConnection : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> AsJob { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<AuthenticationLevel> Authentication { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> BufferSize { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ComputerName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Count { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Delay { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ImpersonationLevel> Impersonation { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Quiet { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Source { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> ThrottleLimit { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> TimeToLive { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<SwitchParameter> get_AsJob();
    public void set_AsJob(InArgument`1<SwitchParameter> value);
    public InArgument`1<AuthenticationLevel> get_Authentication();
    public void set_Authentication(InArgument`1<AuthenticationLevel> value);
    public InArgument`1<int> get_BufferSize();
    public void set_BufferSize(InArgument`1<int> value);
    public InArgument`1<String[]> get_ComputerName();
    public void set_ComputerName(InArgument`1<String[]> value);
    public InArgument`1<int> get_Count();
    public void set_Count(InArgument`1<int> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<String[]> get_Source();
    public void set_Source(InArgument`1<String[]> value);
    public InArgument`1<ImpersonationLevel> get_Impersonation();
    public void set_Impersonation(InArgument`1<ImpersonationLevel> value);
    public InArgument`1<int> get_ThrottleLimit();
    public void set_ThrottleLimit(InArgument`1<int> value);
    public InArgument`1<int> get_TimeToLive();
    public void set_TimeToLive(InArgument`1<int> value);
    public InArgument`1<int> get_Delay();
    public void set_Delay(InArgument`1<int> value);
    public InArgument`1<SwitchParameter> get_Quiet();
    public void set_Quiet(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.TestPath : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> IsValid { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<DateTime>> NewerThan { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<DateTime>> OlderThan { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<TestPathType> PathType { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<TestPathType> get_PathType();
    public void set_PathType(InArgument`1<TestPathType> value);
    public InArgument`1<SwitchParameter> get_IsValid();
    public void set_IsValid(InArgument`1<SwitchParameter> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<Nullable`1<DateTime>> get_OlderThan();
    public void set_OlderThan(InArgument`1<Nullable`1<DateTime>> value);
    public InArgument`1<Nullable`1<DateTime>> get_NewerThan();
    public void set_NewerThan(InArgument`1<Nullable`1<DateTime>> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.WaitProcess : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<Process[]> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Int32[]> ProcessId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Timeout { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<Int32[]> get_ProcessId();
    public void set_ProcessId(InArgument`1<Int32[]> value);
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<int> get_Timeout();
    public void set_Timeout(InArgument`1<int> value);
    public InArgument`1<Process[]> get_InputObject();
    public void set_InputObject(InArgument`1<Process[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Management.Activities.WriteEventLog : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<short> Category { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<EventLogEntryType> EntryType { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> EventId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> LogName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Message { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Byte[]> RawData { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Source { get; public set; }
    protected bool SupportsCustomRemoting { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_LogName();
    public void set_LogName(InArgument`1<string> value);
    public InArgument`1<string> get_Source();
    public void set_Source(InArgument`1<string> value);
    public InArgument`1<EventLogEntryType> get_EntryType();
    public void set_EntryType(InArgument`1<EventLogEntryType> value);
    public InArgument`1<short> get_Category();
    public void set_Category(InArgument`1<short> value);
    public InArgument`1<int> get_EventId();
    public void set_EventId(InArgument`1<int> value);
    public InArgument`1<string> get_Message();
    public void set_Message(InArgument`1<string> value);
    public InArgument`1<Byte[]> get_RawData();
    public void set_RawData(InArgument`1<Byte[]> value);
    protected virtual bool get_SupportsCustomRemoting();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
