public enum Microsoft.PowerShell.BellStyle : Enum {
    public int value__;
    public static BellStyle Audible;
    public static BellStyle None;
    public static BellStyle Visual;
}
public static class Microsoft.PowerShell.ConsoleKeyChordConverter : object {
    public static ConsoleKeyInfo[] Convert(string chord);
}
public enum Microsoft.PowerShell.EditMode : Enum {
    public int value__;
    public static EditMode Emacs;
    public static EditMode Windows;
}
public class Microsoft.PowerShell.GetKeyHandlerCommand : PSCmdlet {
    public SwitchParameter Bound { get; public set; }
    public SwitchParameter Unbound { get; public set; }
    public SwitchParameter get_Bound();
    public void set_Bound(SwitchParameter value);
    public SwitchParameter get_Unbound();
    public void set_Unbound(SwitchParameter value);
    protected virtual void EndProcessing();
}
public class Microsoft.PowerShell.GetPSReadlineOption : PSCmdlet {
    protected virtual void EndProcessing();
}
public enum Microsoft.PowerShell.HistorySaveStyle : Enum {
    public int value__;
    public static HistorySaveStyle SaveAtExit;
    public static HistorySaveStyle SaveIncrementally;
    public static HistorySaveStyle SaveNothing;
}
public interface Microsoft.PowerShell.Internal.IPSConsoleReadLineMockableMethods {
    public abstract virtual ConsoleKeyInfo ReadKey();
    public abstract virtual bool KeyAvailable();
    public abstract virtual void Ding();
    public abstract virtual CommandCompletion CompleteInput(string input, int cursorIndex, Hashtable options, PowerShell powershell);
    public abstract virtual bool RunspaceIsRemote(Runspace runspace);
}
public class Microsoft.PowerShell.KeyHandler : object {
    public string Description { get; public set; }
    public string Function { get; public set; }
    public string Key { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    public string get_Function();
    public void set_Function(string value);
    public string get_Description();
    public void set_Description(string value);
}
public class Microsoft.PowerShell.PSConsoleReadLine : object {
    public static void SelfInsert(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void RevertLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void CancelLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ForwardDeleteLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void BackwardDeleteLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void BackwardDeleteChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void DeleteChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void DeleteCharOrExit(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void AcceptLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ValidateAndAcceptLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void AcceptAndGetNext(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void AddLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    private sealed virtual override CommandCompletion Microsoft.PowerShell.Internal.IPSConsoleReadLineMockableMethods.CompleteInput(string input, int cursorIndex, Hashtable options, PowerShell powershell);
    public static void TabCompleteNext(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void TabCompletePrevious(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void Complete(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void MenuComplete(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void PossibleCompletions(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void AddToHistory(string command);
    public static void ClearHistory(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void PreviousHistory(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void NextHistory(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void BeginningOfHistory(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void EndOfHistory(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void HistorySearchBackward(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void HistorySearchForward(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ForwardSearchHistory(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ReverseSearchHistory(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ShowKeyBindings(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void WhatIsKey(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SetMark(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ExchangePointAndMark(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ClearKillRing();
    public static void KillLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void BackwardKillLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void KillWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ShellKillWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void BackwardKillWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void UnixWordRubout(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ShellBackwardKillWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void KillRegion(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void Yank(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void YankPop(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void YankNthArg(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void YankLastArg(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectBackwardChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectForwardChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectBackwardWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectNextWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectForwardWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectShellForwardWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectShellNextWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectShellBackwardWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectAll(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SelectBackwardsLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void Paste(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void Copy(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void CopyOrCancelLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void Cut(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void EndOfLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void BeginningOfLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ForwardChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void BackwardChar(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void PreviousLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void NextLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void NextWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ShellNextWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ForwardWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ShellForwardWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void BackwardWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ShellBackwardWord(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void GotoBrace(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ClearScreen(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void CharacterSearch(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void CharacterSearchBackward(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void SetOptions(SetPSReadlineOption options);
    public static PSConsoleReadlineOptions GetOptions();
    public static void SetKeyHandler(String[] key, ScriptBlock scriptBlock, string briefDescription, string longDescription);
    public static void SetKeyHandler(String[] key, Action`2<Nullable`1<ConsoleKeyInfo>, object> handler, string briefDescription, string longDescription);
    public static void RemoveKeyHandler(String[] key);
    public static IEnumerable`1<KeyHandler> GetKeyHandlers(bool includeBound, bool includeUnbound);
    public static void Insert(char c);
    public static void Insert(string s);
    public static void Delete(int start, int length);
    public static void Replace(int start, int length, string replacement);
    public static void GetBufferState(String& input, Int32& cursor);
    public static void GetBufferState(Ast& ast, Token[]& tokens, ParseError[]& parseErrors, Int32& cursor);
    public static void GetSelectionState(Int32& start, Int32& length);
    public static void SetCursorPosition(int cursor);
    public static bool TryGetArgAsInt(object arg, Int32& numericArg, int defaultNumericArg);
    private sealed virtual override ConsoleKeyInfo Microsoft.PowerShell.Internal.IPSConsoleReadLineMockableMethods.ReadKey();
    private sealed virtual override bool Microsoft.PowerShell.Internal.IPSConsoleReadLineMockableMethods.KeyAvailable();
    private sealed virtual override bool Microsoft.PowerShell.Internal.IPSConsoleReadLineMockableMethods.RunspaceIsRemote(Runspace runspace);
    public static string ReadLine(Runspace runspace, EngineIntrinsics engineIntrinsics);
    public static void Abort(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void DigitArgument(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void InvokePrompt(Nullable`1<ConsoleKeyInfo> key, object arg);
    private sealed virtual override void Microsoft.PowerShell.Internal.IPSConsoleReadLineMockableMethods.Ding();
    public static void Ding();
    public static void ScrollDisplayUp(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ScrollDisplayUpLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ScrollDisplayDown(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ScrollDisplayDownLine(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ScrollDisplayTop(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void ScrollDisplayToCursor(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void CaptureScreen(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void Undo(Nullable`1<ConsoleKeyInfo> key, object arg);
    public static void Redo(Nullable`1<ConsoleKeyInfo> key, object arg);
}
public class Microsoft.PowerShell.PSConsoleReadlineOptions : object {
    public static BellStyle DefaultBellStyle;
    public static ConsoleColor DefaultCommandForegroundColor;
    public static ConsoleColor DefaultCommentForegroundColor;
    public static int DefaultCompletionQueryItems;
    public static string DefaultContinuationPrompt;
    public static int DefaultDingDuration;
    public static int DefaultDingTone;
    public static EditMode DefaultEditMode;
    public static ConsoleColor DefaultEmphasisForegroundColor;
    public static ConsoleColor DefaultErrorForegroundColor;
    public static int DefaultExtraPromptLineCount;
    public static bool DefaultHistoryNoDuplicates;
    public static HistorySaveStyle DefaultHistorySaveStyle;
    public static bool DefaultHistorySearchCaseSensitive;
    public static bool DefaultHistorySearchCursorMovesToEnd;
    public static ConsoleColor DefaultKeywordForegroundColor;
    public static int DefaultMaximumHistoryCount;
    public static int DefaultMaximumKillRingCount;
    public static ConsoleColor DefaultMemberForegroundColor;
    public static ConsoleColor DefaultNumberForegroundColor;
    public static ConsoleColor DefaultOperatorForegroundColor;
    public static ConsoleColor DefaultParameterForegroundColor;
    public static bool DefaultShowToolTips;
    public static ConsoleColor DefaultStringForegroundColor;
    public static ConsoleColor DefaultTypeForegroundColor;
    public static ConsoleColor DefaultVariableForegroundColor;
    public static string DefaultWordDelimiters;
    public Func`2<string, bool> AddToHistoryHandler { get; public set; }
    public BellStyle BellStyle { get; public set; }
    public ConsoleColor CommandBackgroundColor { get; public set; }
    public ConsoleColor CommandForegroundColor { get; public set; }
    public Action`1<CommandAst> CommandValidationHandler { get; public set; }
    public HashSet`1<string> CommandsToValidateScriptBlockArguments { get; public set; }
    public ConsoleColor CommentBackgroundColor { get; public set; }
    public ConsoleColor CommentForegroundColor { get; public set; }
    public int CompletionQueryItems { get; public set; }
    public string ContinuationPrompt { get; public set; }
    public ConsoleColor ContinuationPromptBackgroundColor { get; public set; }
    public ConsoleColor ContinuationPromptForegroundColor { get; public set; }
    public ConsoleColor DefaultTokenBackgroundColor { get; public set; }
    public ConsoleColor DefaultTokenForegroundColor { get; public set; }
    public int DingDuration { get; public set; }
    public int DingTone { get; public set; }
    public EditMode EditMode { get; public set; }
    public ConsoleColor EmphasisBackgroundColor { get; public set; }
    public ConsoleColor EmphasisForegroundColor { get; public set; }
    public ConsoleColor ErrorBackgroundColor { get; public set; }
    public ConsoleColor ErrorForegroundColor { get; public set; }
    public int ExtraPromptLineCount { get; public set; }
    public bool HistoryNoDuplicates { get; public set; }
    public string HistorySavePath { get; public set; }
    public HistorySaveStyle HistorySaveStyle { get; public set; }
    public bool HistorySearchCaseSensitive { get; public set; }
    public bool HistorySearchCursorMovesToEnd { get; public set; }
    public ConsoleColor KeywordBackgroundColor { get; public set; }
    public ConsoleColor KeywordForegroundColor { get; public set; }
    public int MaximumHistoryCount { get; public set; }
    public int MaximumKillRingCount { get; public set; }
    public ConsoleColor MemberBackgroundColor { get; public set; }
    public ConsoleColor MemberForegroundColor { get; public set; }
    public ConsoleColor NumberBackgroundColor { get; public set; }
    public ConsoleColor NumberForegroundColor { get; public set; }
    public ConsoleColor OperatorBackgroundColor { get; public set; }
    public ConsoleColor OperatorForegroundColor { get; public set; }
    public ConsoleColor ParameterBackgroundColor { get; public set; }
    public ConsoleColor ParameterForegroundColor { get; public set; }
    public bool ShowToolTips { get; public set; }
    public ConsoleColor StringBackgroundColor { get; public set; }
    public ConsoleColor StringForegroundColor { get; public set; }
    public ConsoleColor TypeBackgroundColor { get; public set; }
    public ConsoleColor TypeForegroundColor { get; public set; }
    public ConsoleColor VariableBackgroundColor { get; public set; }
    public ConsoleColor VariableForegroundColor { get; public set; }
    public string WordDelimiters { get; public set; }
    public PSConsoleReadlineOptions(string hostName);
    public EditMode get_EditMode();
    public void set_EditMode(EditMode value);
    public string get_ContinuationPrompt();
    public void set_ContinuationPrompt(string value);
    public ConsoleColor get_ContinuationPromptForegroundColor();
    public void set_ContinuationPromptForegroundColor(ConsoleColor value);
    public ConsoleColor get_ContinuationPromptBackgroundColor();
    public void set_ContinuationPromptBackgroundColor(ConsoleColor value);
    public int get_ExtraPromptLineCount();
    public void set_ExtraPromptLineCount(int value);
    public Func`2<string, bool> get_AddToHistoryHandler();
    public void set_AddToHistoryHandler(Func`2<string, bool> value);
    public Action`1<CommandAst> get_CommandValidationHandler();
    public void set_CommandValidationHandler(Action`1<CommandAst> value);
    public HashSet`1<string> get_CommandsToValidateScriptBlockArguments();
    public void set_CommandsToValidateScriptBlockArguments(HashSet`1<string> value);
    public bool get_HistoryNoDuplicates();
    public void set_HistoryNoDuplicates(bool value);
    public int get_MaximumHistoryCount();
    public void set_MaximumHistoryCount(int value);
    public int get_MaximumKillRingCount();
    public void set_MaximumKillRingCount(int value);
    public bool get_HistorySearchCursorMovesToEnd();
    public void set_HistorySearchCursorMovesToEnd(bool value);
    public bool get_ShowToolTips();
    public void set_ShowToolTips(bool value);
    public int get_DingTone();
    public void set_DingTone(int value);
    public int get_CompletionQueryItems();
    public void set_CompletionQueryItems(int value);
    public string get_WordDelimiters();
    public void set_WordDelimiters(string value);
    public int get_DingDuration();
    public void set_DingDuration(int value);
    public BellStyle get_BellStyle();
    public void set_BellStyle(BellStyle value);
    public bool get_HistorySearchCaseSensitive();
    public void set_HistorySearchCaseSensitive(bool value);
    public string get_HistorySavePath();
    public void set_HistorySavePath(string value);
    public HistorySaveStyle get_HistorySaveStyle();
    public void set_HistorySaveStyle(HistorySaveStyle value);
    public ConsoleColor get_DefaultTokenForegroundColor();
    public void set_DefaultTokenForegroundColor(ConsoleColor value);
    public ConsoleColor get_CommentForegroundColor();
    public void set_CommentForegroundColor(ConsoleColor value);
    public ConsoleColor get_KeywordForegroundColor();
    public void set_KeywordForegroundColor(ConsoleColor value);
    public ConsoleColor get_StringForegroundColor();
    public void set_StringForegroundColor(ConsoleColor value);
    public ConsoleColor get_OperatorForegroundColor();
    public void set_OperatorForegroundColor(ConsoleColor value);
    public ConsoleColor get_VariableForegroundColor();
    public void set_VariableForegroundColor(ConsoleColor value);
    public ConsoleColor get_CommandForegroundColor();
    public void set_CommandForegroundColor(ConsoleColor value);
    public ConsoleColor get_ParameterForegroundColor();
    public void set_ParameterForegroundColor(ConsoleColor value);
    public ConsoleColor get_TypeForegroundColor();
    public void set_TypeForegroundColor(ConsoleColor value);
    public ConsoleColor get_NumberForegroundColor();
    public void set_NumberForegroundColor(ConsoleColor value);
    public ConsoleColor get_MemberForegroundColor();
    public void set_MemberForegroundColor(ConsoleColor value);
    public ConsoleColor get_DefaultTokenBackgroundColor();
    public void set_DefaultTokenBackgroundColor(ConsoleColor value);
    public ConsoleColor get_CommentBackgroundColor();
    public void set_CommentBackgroundColor(ConsoleColor value);
    public ConsoleColor get_KeywordBackgroundColor();
    public void set_KeywordBackgroundColor(ConsoleColor value);
    public ConsoleColor get_StringBackgroundColor();
    public void set_StringBackgroundColor(ConsoleColor value);
    public ConsoleColor get_OperatorBackgroundColor();
    public void set_OperatorBackgroundColor(ConsoleColor value);
    public ConsoleColor get_VariableBackgroundColor();
    public void set_VariableBackgroundColor(ConsoleColor value);
    public ConsoleColor get_CommandBackgroundColor();
    public void set_CommandBackgroundColor(ConsoleColor value);
    public ConsoleColor get_ParameterBackgroundColor();
    public void set_ParameterBackgroundColor(ConsoleColor value);
    public ConsoleColor get_TypeBackgroundColor();
    public void set_TypeBackgroundColor(ConsoleColor value);
    public ConsoleColor get_NumberBackgroundColor();
    public void set_NumberBackgroundColor(ConsoleColor value);
    public ConsoleColor get_MemberBackgroundColor();
    public void set_MemberBackgroundColor(ConsoleColor value);
    public ConsoleColor get_EmphasisForegroundColor();
    public void set_EmphasisForegroundColor(ConsoleColor value);
    public ConsoleColor get_EmphasisBackgroundColor();
    public void set_EmphasisBackgroundColor(ConsoleColor value);
    public ConsoleColor get_ErrorForegroundColor();
    public void set_ErrorForegroundColor(ConsoleColor value);
    public ConsoleColor get_ErrorBackgroundColor();
    public void set_ErrorBackgroundColor(ConsoleColor value);
}
public class Microsoft.PowerShell.RemoveKeyHandlerCommand : PSCmdlet {
    public String[] Chord { get; public set; }
    public String[] get_Chord();
    public void set_Chord(String[] value);
    protected virtual void EndProcessing();
}
public class Microsoft.PowerShell.SetPSReadlineKeyHandlerCommand : PSCmdlet {
    public string BriefDescription { get; public set; }
    public String[] Chord { get; public set; }
    public string Description { get; public set; }
    public ScriptBlock ScriptBlock { get; public set; }
    public String[] get_Chord();
    public void set_Chord(String[] value);
    public ScriptBlock get_ScriptBlock();
    public void set_ScriptBlock(ScriptBlock value);
    public string get_BriefDescription();
    public void set_BriefDescription(string value);
    public string get_Description();
    public void set_Description(string value);
    protected virtual void EndProcessing();
    public sealed virtual object GetDynamicParameters();
}
public class Microsoft.PowerShell.SetPSReadlineOption : PSCmdlet {
    public Func`2<string, bool> AddToHistoryHandler { get; public set; }
    public ConsoleColor BackgroundColor { get; public set; }
    public BellStyle BellStyle { get; public set; }
    public Action`1<CommandAst> CommandValidationHandler { get; public set; }
    public int CompletionQueryItems { get; public set; }
    public string ContinuationPrompt { get; public set; }
    public ConsoleColor ContinuationPromptBackgroundColor { get; public set; }
    public ConsoleColor ContinuationPromptForegroundColor { get; public set; }
    public int DingDuration { get; public set; }
    public int DingTone { get; public set; }
    public EditMode EditMode { get; public set; }
    public ConsoleColor EmphasisBackgroundColor { get; public set; }
    public ConsoleColor EmphasisForegroundColor { get; public set; }
    public ConsoleColor ErrorBackgroundColor { get; public set; }
    public ConsoleColor ErrorForegroundColor { get; public set; }
    public int ExtraPromptLineCount { get; public set; }
    public ConsoleColor ForegroundColor { get; public set; }
    public SwitchParameter HistoryNoDuplicates { get; public set; }
    public string HistorySavePath { get; public set; }
    public HistorySaveStyle HistorySaveStyle { get; public set; }
    public SwitchParameter HistorySearchCaseSensitive { get; public set; }
    public SwitchParameter HistorySearchCursorMovesToEnd { get; public set; }
    public int MaximumHistoryCount { get; public set; }
    public int MaximumKillRingCount { get; public set; }
    public SwitchParameter ResetTokenColors { get; public set; }
    public SwitchParameter ShowToolTips { get; public set; }
    public TokenClassification TokenKind { get; public set; }
    public string WordDelimiters { get; public set; }
    public EditMode get_EditMode();
    public void set_EditMode(EditMode value);
    public string get_ContinuationPrompt();
    public void set_ContinuationPrompt(string value);
    public ConsoleColor get_ContinuationPromptForegroundColor();
    public void set_ContinuationPromptForegroundColor(ConsoleColor value);
    public ConsoleColor get_ContinuationPromptBackgroundColor();
    public void set_ContinuationPromptBackgroundColor(ConsoleColor value);
    public ConsoleColor get_EmphasisForegroundColor();
    public void set_EmphasisForegroundColor(ConsoleColor value);
    public ConsoleColor get_EmphasisBackgroundColor();
    public void set_EmphasisBackgroundColor(ConsoleColor value);
    public ConsoleColor get_ErrorForegroundColor();
    public void set_ErrorForegroundColor(ConsoleColor value);
    public ConsoleColor get_ErrorBackgroundColor();
    public void set_ErrorBackgroundColor(ConsoleColor value);
    public SwitchParameter get_HistoryNoDuplicates();
    public void set_HistoryNoDuplicates(SwitchParameter value);
    public Func`2<string, bool> get_AddToHistoryHandler();
    public void set_AddToHistoryHandler(Func`2<string, bool> value);
    public Action`1<CommandAst> get_CommandValidationHandler();
    public void set_CommandValidationHandler(Action`1<CommandAst> value);
    public SwitchParameter get_HistorySearchCursorMovesToEnd();
    public void set_HistorySearchCursorMovesToEnd(SwitchParameter value);
    public int get_MaximumHistoryCount();
    public void set_MaximumHistoryCount(int value);
    public int get_MaximumKillRingCount();
    public void set_MaximumKillRingCount(int value);
    public SwitchParameter get_ResetTokenColors();
    public void set_ResetTokenColors(SwitchParameter value);
    public SwitchParameter get_ShowToolTips();
    public void set_ShowToolTips(SwitchParameter value);
    public int get_ExtraPromptLineCount();
    public void set_ExtraPromptLineCount(int value);
    public int get_DingTone();
    public void set_DingTone(int value);
    public int get_DingDuration();
    public void set_DingDuration(int value);
    public BellStyle get_BellStyle();
    public void set_BellStyle(BellStyle value);
    public int get_CompletionQueryItems();
    public void set_CompletionQueryItems(int value);
    public string get_WordDelimiters();
    public void set_WordDelimiters(string value);
    public SwitchParameter get_HistorySearchCaseSensitive();
    public void set_HistorySearchCaseSensitive(SwitchParameter value);
    public HistorySaveStyle get_HistorySaveStyle();
    public void set_HistorySaveStyle(HistorySaveStyle value);
    public string get_HistorySavePath();
    public void set_HistorySavePath(string value);
    public TokenClassification get_TokenKind();
    public void set_TokenKind(TokenClassification value);
    public ConsoleColor get_ForegroundColor();
    public void set_ForegroundColor(ConsoleColor value);
    public ConsoleColor get_BackgroundColor();
    public void set_BackgroundColor(ConsoleColor value);
    protected virtual void EndProcessing();
}
public enum Microsoft.PowerShell.TokenClassification : Enum {
    public int value__;
    public static TokenClassification Command;
    public static TokenClassification Comment;
    public static TokenClassification Keyword;
    public static TokenClassification Member;
    public static TokenClassification None;
    public static TokenClassification Number;
    public static TokenClassification Operator;
    public static TokenClassification Parameter;
    public static TokenClassification String;
    public static TokenClassification Type;
    public static TokenClassification Variable;
}
