public abstract class Microsoft.PowerShell.PackageManagement.Cmdlets.AsyncCmdlet : PSCmdlet {
    protected CancellationTokenSource CancellationEvent;
    protected AsyncCmdletState CmdletState;
    protected bool ErrorState;
    protected bool Confirm { get; }
    public RuntimeDefinedParameterDictionary DynamicParameterDictionary { get; }
    protected bool HasErrors { get; }
    protected bool IsAfterProcessing { get; }
    protected bool IsBeforeProcessing { get; }
    public bool IsCanceled { get; }
    protected static bool IsInitialized { get; protected set; }
    protected bool IsInvocation { get; }
    protected bool IsProcessing { get; }
    protected bool IsReentrantLocked { get; protected set; }
    protected Dictionary`2<string, object> UnboundArguments { get; }
    public bool WhatIf { get; }
    protected bool get_IsReentrantLocked();
    protected void set_IsReentrantLocked(bool value);
    protected bool get_Confirm();
    public bool get_WhatIf();
    protected static bool get_IsInitialized();
    protected static void set_IsInitialized(bool value);
    protected bool get_IsInvocation();
    public sealed virtual bool get_IsCanceled();
    protected bool get_HasErrors();
    protected Dictionary`2<string, object> get_UnboundArguments();
    public sealed virtual void Dispose();
    public virtual bool BeginProcessingAsync();
    public virtual bool EndProcessingAsync();
    public virtual bool StopProcessingAsync();
    public virtual bool ProcessRecordAsync();
    public string ResolveExistingFilePath(string filePath);
    public string ResolveExistingFolderPath(string folderPath);
    public string ResolvePath(string path);
    public string DropMsgPrefix(string messageText);
    public sealed virtual bool Warning(string messageText);
    public bool Warning(string messageText, Object[] args);
    public sealed virtual bool Error(string id, string category, string targetObjectValue, string messageText);
    public bool Error(string id, string category, string targetObjectValue, string messageText, Object[] args);
    public bool NonTerminatingError(string id, string category, string targetObjectValue, string messageText);
    public bool NonTerminatingError(string id, string category, string targetObjectValue, string messageText, Object[] args);
    public sealed virtual bool Message(string messageText);
    public bool Message(string messageText, Object[] args);
    public sealed virtual bool Verbose(string messageText);
    public bool Verbose(string messageText, Object[] args);
    public sealed virtual bool Debug(string messageText);
    public bool Debug(string messageText, Object[] args);
    public sealed virtual int StartProgress(int parentActivityId, string message);
    public int StartProgress(int parentActivityId, string message, Object[] args);
    public sealed virtual bool Progress(int activityId, int progressPercentage, string messageText);
    public bool Progress(int activityId, int progressPercentage, string messageText, Object[] args);
    public sealed virtual bool CompleteProgress(int activityId, bool isSuccessful);
    public virtual string GetMessageString(string messageText, string defaultText);
    public string FormatMessageString(string messageText, Object[] args);
    protected virtual void Init();
    protected virtual void Dispose(bool disposing);
    public virtual RuntimeDefinedParameterDictionary get_DynamicParameterDictionary();
    public sealed virtual object GetDynamicParameters();
    protected T GetDynamicParameterValue(string parameterName);
    public virtual bool GenerateDynamicParameters();
    public virtual bool ConsumeDynamicParameters();
    protected sealed virtual void BeginProcessing();
    protected sealed virtual void ProcessRecord();
    protected sealed virtual void EndProcessing();
    protected sealed virtual void StopProcessing();
    public void Cancel();
    public Task`1<bool> WriteProgress(ProgressRecord progressRecord);
    public Task`1<bool> AllProgressComplete();
    protected bool get_IsProcessing();
    protected bool get_IsBeforeProcessing();
    protected bool get_IsAfterProcessing();
    protected void QueueHeldMessage(Func`1<bool> action);
    public Task`1<bool> ExecuteOnMainThread(Func`1<bool> onMainThreadDelegate);
    public Task`1<bool> WriteObject(object obj);
    public Task`1<bool> WriteObject(object sendToPipeline, bool enumerateCollection);
    public Task`1<bool> WriteWarning(string text);
    public Task`1<bool> WriteDebug(string text);
    public Task`1<bool> WriteError(ErrorRecord errorRecord);
    public Task`1<bool> WriteVerbose(string text);
    public Task`1<bool> ShouldContinue(string query, string caption);
    public Task`1<bool> ShouldProcess(string target);
    public Task`1<bool> ShouldProcess(string target, string action);
    public Task`1<bool> ShouldProcess(string verboseDescription, string verboseWarning, string caption);
    public Task`1<bool> ShouldProcess(string verboseDescription, string verboseWarning, string caption, ShouldProcessReason& shouldProcessReason);
    protected object TryGetProperty(object instance, string fieldName);
    protected bool TrySetProperty(object instance, string fieldName, object value);
}
public abstract class Microsoft.PowerShell.PackageManagement.Cmdlets.CmdletBase : AsyncCmdlet {
    public SwitchParameter Force;
    public SwitchParameter ForceBootstrap;
    public int CallCount { get; }
    public SecureString CredentialPassword { get; }
    public string CredentialUsername { get; }
    public Hashtable DynamicOptions { get; }
    public bool IsInteractive { get; }
    protected bool IsPackageByObject { get; }
    protected bool IsPackageBySearch { get; }
    protected bool IsSourceByObject { get; }
    public GetMessageString MessageResolver { get; }
    public IEnumerable`1<string> OptionKeys { get; }
    protected internal IPackageManagementService PackageManagementService { get; }
    protected IEnumerable`1<string> ParameterSets { get; }
    protected int Responsiveness { get; }
    public IEnumerable`1<string> Sources { get; public set; }
    protected int TimeOut { get; }
    protected bool WaitForActivity(IEnumerable`1<IAsyncEnumerable`1<T>> enumerables);
    protected abstract virtual IEnumerable`1<string> get_ParameterSets();
    protected bool get_IsPackageBySearch();
    protected bool get_IsPackageByObject();
    protected bool get_IsSourceByObject();
    protected internal IPackageManagementService get_PackageManagementService();
    protected int get_TimeOut();
    protected int get_Responsiveness();
    public GetMessageString get_MessageResolver();
    public Hashtable get_DynamicOptions();
    public virtual IEnumerable`1<string> get_Sources();
    public virtual void set_Sources(IEnumerable`1<string> value);
    public virtual IEnumerable`1<string> get_OptionKeys();
    protected bool GenerateCommonDynamicParameters();
    public virtual string GetMessageString(string messageText, string defaultText);
    public virtual bool AskPermission(string permission);
    public virtual IEnumerable`1<string> GetOptionValues(string key);
    public virtual string get_CredentialUsername();
    public virtual SecureString get_CredentialPassword();
    public virtual bool ShouldContinueWithUntrustedPackageSource(string package, string packageSource);
    public virtual bool ShouldBootstrapProvider(string requestor, string providerName, string providerVersion, string providerType, string location, string destination);
    public virtual bool get_IsInteractive();
    public virtual int get_CallCount();
    protected virtual void Init();
    protected IEnumerable`1<PackageProvider> SelectProviders(String[] names);
    protected IEnumerable`1<PackageProvider> SelectProviders(string name);
    public virtual bool ConsumeDynamicParameters();
}
public abstract class Microsoft.PowerShell.PackageManagement.Cmdlets.CmdletWithProvider : CmdletBase {
    protected bool IsFailingEarly;
    protected DynamicOption[] CachedDynamicOptions { get; }
    protected PackageProvider[] CachedSelectedProviders { get; }
    protected Dictionary`2<string, ParameterMetadata> CachedStaticParameters { get; }
    public String[] ProviderName { get; public set; }
    protected IEnumerable`1<PackageProvider> SelectedProviders { get; }
    protected CmdletWithProvider(OptionCategory[] categories);
    public String[] get_ProviderName();
    public void set_ProviderName(String[] value);
    protected virtual IEnumerable`1<PackageProvider> get_SelectedProviders();
    protected virtual void GenerateCmdletSpecificParameters(Dictionary`2<string, object> unboundArguments);
    protected bool ActualGenerateDynamicParameters(Dictionary`2<string, object> unboundArguments);
    protected PackageProvider[] get_CachedSelectedProviders();
    protected DynamicOption[] get_CachedDynamicOptions();
    protected Dictionary`2<string, ParameterMetadata> get_CachedStaticParameters();
    public virtual bool GenerateDynamicParameters();
}
public abstract class Microsoft.PowerShell.PackageManagement.Cmdlets.CmdletWithSearch : CmdletWithProvider {
    public string MaximumVersion { get; public set; }
    public string MinimumVersion { get; public set; }
    public String[] Name { get; public set; }
    protected IEnumerable`1<string> ParameterSets { get; }
    public string RequiredVersion { get; public set; }
    protected CmdletWithSearch(OptionCategory[] categories);
    protected virtual IEnumerable`1<string> get_ParameterSets();
    public virtual String[] get_Name();
    public virtual void set_Name(String[] value);
    public virtual string get_RequiredVersion();
    public virtual void set_RequiredVersion(string value);
    public virtual string get_MinimumVersion();
    public virtual void set_MinimumVersion(string value);
    public virtual string get_MaximumVersion();
    public virtual void set_MaximumVersion(string value);
}
public abstract class Microsoft.PowerShell.PackageManagement.Cmdlets.CmdletWithSearchAndSource : CmdletWithSearch {
    protected List`2<string, string> _filesWithoutMatches;
    protected List`1<PackageProvider> _providersNotFindingAnything;
    public SwitchParameter AllVersions { get; public set; }
    public PSCredential Credential { get; public set; }
    public SecureString CredentialPassword { get; }
    public string CredentialUsername { get; }
    public String[] Source { get; public set; }
    public IEnumerable`1<string> Sources { get; }
    protected bool SpecifiedMinimumOrMaximum { get; }
    protected CmdletWithSearchAndSource(OptionCategory[] categories);
    public virtual SwitchParameter get_AllVersions();
    public virtual void set_AllVersions(SwitchParameter value);
    public virtual String[] get_Source();
    public virtual void set_Source(String[] value);
    public virtual PSCredential get_Credential();
    public virtual void set_Credential(PSCredential value);
    public virtual IEnumerable`1<string> get_Sources();
    public virtual string get_CredentialUsername();
    public virtual SecureString get_CredentialPassword();
    public virtual bool ProcessRecordAsync();
    protected bool get_SpecifiedMinimumOrMaximum();
    protected void SearchForPackages();
    protected virtual void ProcessPackage(PackageProvider provider, IEnumerable`1<string> searchKey, SoftwareIdentity package);
    protected bool CheckUnmatchedPackages();
    protected bool CheckMatchedDuplicates();
}
public abstract class Microsoft.PowerShell.PackageManagement.Cmdlets.CmdletWithSource : CmdletWithProvider {
    public PSCredential Credential { get; public set; }
    public SecureString CredentialPassword { get; }
    public string CredentialUsername { get; }
    public PackageSource[] InputObject { get; public set; }
    protected CmdletWithSource(OptionCategory[] categories);
    public PackageSource[] get_InputObject();
    public void set_InputObject(PackageSource[] value);
    public PSCredential get_Credential();
    public void set_Credential(PSCredential value);
    public virtual string get_CredentialUsername();
    public virtual SecureString get_CredentialPassword();
}
public class Microsoft.PowerShell.PackageManagement.Cmdlets.FindPackage : CmdletWithSearchAndSource {
    public SwitchParameter AllVersions { get; public set; }
    public SwitchParameter IncludeDependencies { get; public set; }
    protected IEnumerable`1<string> ParameterSets { get; }
    protected virtual IEnumerable`1<string> get_ParameterSets();
    public SwitchParameter get_IncludeDependencies();
    public void set_IncludeDependencies(SwitchParameter value);
    public virtual SwitchParameter get_AllVersions();
    public virtual void set_AllVersions(SwitchParameter value);
    public virtual bool BeginProcessingAsync();
    protected virtual void ProcessPackage(PackageProvider provider, IEnumerable`1<string> searchKey, SoftwareIdentity package);
    public virtual bool EndProcessingAsync();
}
public class Microsoft.PowerShell.PackageManagement.Cmdlets.GetMessageString : MulticastDelegate {
    public GetMessageString(object object, IntPtr method);
    public virtual string Invoke(string messageId, string defaultText);
    public virtual IAsyncResult BeginInvoke(string messageId, string defaultText, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class Microsoft.PowerShell.PackageManagement.Cmdlets.GetPackage : CmdletWithSearch {
    protected IEnumerable`1<string> ParameterSets { get; }
    protected IEnumerable`1<string> UnprocessedNames { get; }
    protected virtual IEnumerable`1<string> get_ParameterSets();
    protected IEnumerable`1<string> get_UnprocessedNames();
    protected bool IsPackageInVersionRange(SoftwareIdentity pkg);
    protected bool IsDuplicate(SoftwareIdentity package);
    public virtual bool ProcessRecordAsync();
    protected virtual void ProcessPackage(string query, SoftwareIdentity package);
    public virtual bool EndProcessingAsync();
}
public class Microsoft.PowerShell.PackageManagement.Cmdlets.GetPackageProvider : CmdletBase {
    public String[] Name { get; public set; }
    protected IEnumerable`1<string> ParameterSets { get; }
    protected virtual IEnumerable`1<string> get_ParameterSets();
    public String[] get_Name();
    public void set_Name(String[] value);
    public virtual bool ProcessRecordAsync();
}
public class Microsoft.PowerShell.PackageManagement.Cmdlets.GetPackageSource : CmdletWithProvider {
    public string Location { get; public set; }
    public string Name { get; public set; }
    protected IEnumerable`1<string> ParameterSets { get; }
    public IEnumerable`1<string> Sources { get; }
    protected virtual IEnumerable`1<string> get_ParameterSets();
    public string get_Name();
    public void set_Name(string value);
    public string get_Location();
    public void set_Location(string value);
    public virtual IEnumerable`1<string> get_Sources();
    public virtual bool ProcessRecordAsync();
    public virtual bool EndProcessingAsync();
}
public class Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage : CmdletWithSearchAndSource {
    public SoftwareIdentity[] InputObject { get; public set; }
    public string MaximumVersion { get; public set; }
    public string MinimumVersion { get; public set; }
    public String[] Name { get; public set; }
    protected IEnumerable`1<string> ParameterSets { get; }
    public string RequiredVersion { get; public set; }
    public String[] Source { get; public set; }
    protected virtual IEnumerable`1<string> get_ParameterSets();
    public SoftwareIdentity[] get_InputObject();
    public void set_InputObject(SoftwareIdentity[] value);
    public virtual String[] get_Name();
    public virtual void set_Name(String[] value);
    public virtual string get_RequiredVersion();
    public virtual void set_RequiredVersion(string value);
    public virtual string get_MinimumVersion();
    public virtual void set_MinimumVersion(string value);
    public virtual string get_MaximumVersion();
    public virtual void set_MaximumVersion(string value);
    public virtual String[] get_Source();
    public virtual void set_Source(String[] value);
    protected virtual void GenerateCmdletSpecificParameters(Dictionary`2<string, object> unboundArguments);
    public virtual bool BeginProcessingAsync();
    public virtual bool ProcessRecordAsync();
    public virtual bool EndProcessingAsync();
    protected virtual void ProcessPackage(PackageProvider provider, IEnumerable`1<string> searchKey, SoftwareIdentity package);
    public bool ShouldProcessPackageInstall(string packageName, string version, string source);
    public virtual bool ShouldContinueWithUntrustedPackageSource(string package, string packageSource);
}
public class Microsoft.PowerShell.PackageManagement.Cmdlets.OnMainThread : MulticastDelegate {
    public OnMainThread(object object, IntPtr method);
    public virtual bool Invoke(Func`1<bool> onMainThreadDelegate);
    public virtual IAsyncResult BeginInvoke(Func`1<bool> onMainThreadDelegate, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Microsoft.PowerShell.PackageManagement.Cmdlets.RegisterPackageSource : CmdletWithProvider {
    public PSCredential Credential { get; public set; }
    public string Location { get; public set; }
    public string Name { get; public set; }
    protected IEnumerable`1<string> ParameterSets { get; }
    public SwitchParameter Trusted { get; public set; }
    protected virtual IEnumerable`1<string> get_ParameterSets();
    protected virtual void GenerateCmdletSpecificParameters(Dictionary`2<string, object> unboundArguments);
    public string get_Name();
    public void set_Name(string value);
    public string get_Location();
    public void set_Location(string value);
    public PSCredential get_Credential();
    public void set_Credential(PSCredential value);
    public SwitchParameter get_Trusted();
    public void set_Trusted(SwitchParameter value);
    public virtual bool ProcessRecordAsync();
}
public class Microsoft.PowerShell.PackageManagement.Cmdlets.SavePackage : CmdletWithSearchAndSource {
    public SoftwareIdentity InputObject { get; public set; }
    public string LiteralPath { get; public set; }
    public string MaximumVersion { get; public set; }
    public string MinimumVersion { get; public set; }
    public String[] Name { get; public set; }
    protected IEnumerable`1<string> ParameterSets { get; }
    public string Path { get; public set; }
    public string RequiredVersion { get; public set; }
    public String[] Source { get; public set; }
    protected virtual IEnumerable`1<string> get_ParameterSets();
    public virtual String[] get_Name();
    public virtual void set_Name(String[] value);
    public virtual string get_RequiredVersion();
    public virtual void set_RequiredVersion(string value);
    public virtual string get_MinimumVersion();
    public virtual void set_MinimumVersion(string value);
    public virtual string get_MaximumVersion();
    public virtual void set_MaximumVersion(string value);
    public virtual String[] get_Source();
    public virtual void set_Source(String[] value);
    protected virtual void GenerateCmdletSpecificParameters(Dictionary`2<string, object> unboundArguments);
    public string get_Path();
    public void set_Path(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    public SoftwareIdentity get_InputObject();
    public void set_InputObject(SoftwareIdentity value);
    public virtual bool ProcessRecordAsync();
    protected virtual void ProcessPackage(PackageProvider provider, IEnumerable`1<string> searchKey, SoftwareIdentity package);
    public virtual bool EndProcessingAsync();
}
public class Microsoft.PowerShell.PackageManagement.Cmdlets.SetPackageSource : CmdletWithProvider {
    public PackageSource InputObject;
    public PSCredential Credential { get; public set; }
    public string Location { get; public set; }
    public string Name { get; public set; }
    public string NewLocation { get; public set; }
    public string NewName { get; public set; }
    protected IEnumerable`1<string> ParameterSets { get; }
    public IEnumerable`1<string> Sources { get; }
    public SwitchParameter Trusted { get; public set; }
    public PSCredential get_Credential();
    public void set_Credential(PSCredential value);
    protected virtual IEnumerable`1<string> get_ParameterSets();
    protected virtual void GenerateCmdletSpecificParameters(Dictionary`2<string, object> unboundArguments);
    public string get_Name();
    public void set_Name(string value);
    public string get_Location();
    public void set_Location(string value);
    public string get_NewLocation();
    public void set_NewLocation(string value);
    public string get_NewName();
    public void set_NewName(string value);
    public SwitchParameter get_Trusted();
    public void set_Trusted(SwitchParameter value);
    public virtual IEnumerable`1<string> get_Sources();
    public virtual bool ProcessRecordAsync();
}
public class Microsoft.PowerShell.PackageManagement.Cmdlets.UninstallPackage : GetPackage {
    public SoftwareIdentity[] InputObject { get; public set; }
    public string MaximumVersion { get; public set; }
    public string MinimumVersion { get; public set; }
    public String[] Name { get; public set; }
    protected IEnumerable`1<string> ParameterSets { get; }
    public string RequiredVersion { get; public set; }
    protected virtual IEnumerable`1<string> get_ParameterSets();
    public SoftwareIdentity[] get_InputObject();
    public void set_InputObject(SoftwareIdentity[] value);
    public virtual String[] get_Name();
    public virtual void set_Name(String[] value);
    public virtual string get_RequiredVersion();
    public virtual void set_RequiredVersion(string value);
    public virtual string get_MinimumVersion();
    public virtual void set_MinimumVersion(string value);
    public virtual string get_MaximumVersion();
    public virtual void set_MaximumVersion(string value);
    protected virtual void GenerateCmdletSpecificParameters(Dictionary`2<string, object> unboundArguments);
    public virtual bool ProcessRecordAsync();
    protected virtual void ProcessPackage(string query, SoftwareIdentity package);
    public virtual bool EndProcessingAsync();
    public bool ShouldProcessPackageUninstall(string packageName, string version);
}
public class Microsoft.PowerShell.PackageManagement.Cmdlets.UnregisterPackageSource : CmdletWithSource {
    public string Location { get; public set; }
    protected IEnumerable`1<string> ParameterSets { get; }
    public string Source { get; public set; }
    public IEnumerable`1<string> Sources { get; }
    protected virtual IEnumerable`1<string> get_ParameterSets();
    protected virtual void GenerateCmdletSpecificParameters(Dictionary`2<string, object> unboundArguments);
    public string get_Source();
    public void set_Source(string value);
    public string get_Location();
    public void set_Location(string value);
    public virtual IEnumerable`1<string> get_Sources();
    public virtual bool ProcessRecordAsync();
    public bool Unregister(PackageSource source);
}
