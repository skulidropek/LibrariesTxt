public class Microsoft.PowerShell.Security.Activities.ConvertFromSecureString : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<Byte[]> Key { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SecureString> SecureKey { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SecureString> SecureString { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<SecureString> get_SecureString();
    public void set_SecureString(InArgument`1<SecureString> value);
    public InArgument`1<SecureString> get_SecureKey();
    public void set_SecureKey(InArgument`1<SecureString> value);
    public InArgument`1<Byte[]> get_Key();
    public void set_Key(InArgument`1<Byte[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Security.Activities.ConvertToSecureString : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> AsPlainText { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Byte[]> Key { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SecureString> SecureKey { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> String { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_String();
    public void set_String(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_AsPlainText();
    public void set_AsPlainText(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SecureString> get_SecureKey();
    public void set_SecureKey(InArgument`1<SecureString> value);
    public InArgument`1<Byte[]> get_Key();
    public void set_Key(InArgument`1<Byte[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Security.Activities.GetAcl : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> AllCentralAccessPolicies { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Audit { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Audit();
    public void set_Audit(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_AllCentralAccessPolicies();
    public void set_AllCentralAccessPolicies(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Security.Activities.GetAuthenticodeSignature : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> FilePath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_FilePath();
    public void set_FilePath(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Security.Activities.GetCmsMessage : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> Content { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Path { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Content();
    public void set_Content(InArgument`1<string> value);
    public InArgument`1<string> get_Path();
    public void set_Path(InArgument`1<string> value);
    public InArgument`1<string> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Security.Activities.GetExecutionPolicy : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> List { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<ExecutionPolicyScope> Scope { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<ExecutionPolicyScope> get_Scope();
    public void set_Scope(InArgument`1<ExecutionPolicyScope> value);
    public InArgument`1<SwitchParameter> get_List();
    public void set_List(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Security.Activities.GetPfxCertificate : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> FilePath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_FilePath();
    public void set_FilePath(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Security.Activities.ProtectCmsMessage : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> Content { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> OutFile { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<CmsMessageRecipient[]> To { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<CmsMessageRecipient[]> get_To();
    public void set_To(InArgument`1<CmsMessageRecipient[]> value);
    public InArgument`1<PSObject> get_Content();
    public void set_Content(InArgument`1<PSObject> value);
    public InArgument`1<string> get_Path();
    public void set_Path(InArgument`1<string> value);
    public InArgument`1<string> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<string> value);
    public InArgument`1<string> get_OutFile();
    public void set_OutFile(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Security.Activities.SetAcl : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<object> AclObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> CentralAccessPolicy { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> ClearCentralAccessPolicy { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Filter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Passthru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<CommonSecurityDescriptor> SecurityDescriptor { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<object> get_AclObject();
    public void set_AclObject(InArgument`1<object> value);
    public InArgument`1<CommonSecurityDescriptor> get_SecurityDescriptor();
    public void set_SecurityDescriptor(InArgument`1<CommonSecurityDescriptor> value);
    public InArgument`1<string> get_CentralAccessPolicy();
    public void set_CentralAccessPolicy(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_ClearCentralAccessPolicy();
    public void set_ClearCentralAccessPolicy(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Passthru();
    public void set_Passthru(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Filter();
    public void set_Filter(InArgument`1<string> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Security.Activities.SetAuthenticodeSignature : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<X509Certificate2> Certificate { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> FilePath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> HashAlgorithm { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> IncludeChain { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> TimestampServer { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<X509Certificate2> get_Certificate();
    public void set_Certificate(InArgument`1<X509Certificate2> value);
    public InArgument`1<string> get_IncludeChain();
    public void set_IncludeChain(InArgument`1<string> value);
    public InArgument`1<string> get_TimestampServer();
    public void set_TimestampServer(InArgument`1<string> value);
    public InArgument`1<string> get_HashAlgorithm();
    public void set_HashAlgorithm(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_FilePath();
    public void set_FilePath(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Security.Activities.SetExecutionPolicy : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<ExecutionPolicy> ExecutionPolicy { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<ExecutionPolicyScope> Scope { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<ExecutionPolicy> get_ExecutionPolicy();
    public void set_ExecutionPolicy(InArgument`1<ExecutionPolicy> value);
    public InArgument`1<ExecutionPolicyScope> get_Scope();
    public void set_Scope(InArgument`1<ExecutionPolicyScope> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Security.Activities.UnprotectCmsMessage : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> Content { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> EventLogRecord { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> IncludeContext { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<CmsMessageRecipient[]> To { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Content();
    public void set_Content(InArgument`1<string> value);
    public InArgument`1<PSObject> get_EventLogRecord();
    public void set_EventLogRecord(InArgument`1<PSObject> value);
    public InArgument`1<string> get_Path();
    public void set_Path(InArgument`1<string> value);
    public InArgument`1<string> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_IncludeContext();
    public void set_IncludeContext(InArgument`1<SwitchParameter> value);
    public InArgument`1<CmsMessageRecipient[]> get_To();
    public void set_To(InArgument`1<CmsMessageRecipient[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
