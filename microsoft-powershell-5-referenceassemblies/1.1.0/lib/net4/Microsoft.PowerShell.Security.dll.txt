public class Microsoft.PowerShell.Commands.CertificateNotFoundException : CertificateProviderItemNotFoundException {
    public CertificateNotFoundException(string message);
    public CertificateNotFoundException(string message, Exception innerException);
    protected CertificateNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.PowerShell.Commands.CertificateProvider : NavigationCmdletProvider {
    protected virtual void RemoveItem(string path, bool recurse);
    protected virtual object RemoveItemDynamicParameters(string path, bool recurse);
    protected virtual void MoveItem(string path, string destination);
    protected virtual void NewItem(string path, string type, object value);
    protected virtual Collection`1<PSDriveInfo> InitializeDefaultDrives();
    protected virtual bool HasChildItems(string path);
    protected virtual bool IsValidPath(string path);
    protected virtual bool ItemExists(string path);
    protected virtual void GetItem(string path);
    protected virtual string GetParentPath(string path, string root);
    protected virtual string GetChildName(string path);
    protected virtual void InvokeDefaultAction(string path);
    protected virtual void GetChildItems(string path, bool recurse);
    protected virtual void GetChildNames(string path, ReturnContainers returnContainers);
    protected virtual bool IsItemContainer(string path);
    protected virtual object GetItemDynamicParameters(string path);
    protected virtual object GetChildItemsDynamicParameters(string path, bool recurse);
    private sealed virtual override string System.Management.Automation.Provider.ICmdletProviderSupportsHelp.GetHelpMaml(string helpItemName, string path);
}
public class Microsoft.PowerShell.Commands.CertificateProviderItemNotFoundException : SystemException {
    public CertificateProviderItemNotFoundException(string message);
    public CertificateProviderItemNotFoundException(string message, Exception innerException);
    protected CertificateProviderItemNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.PowerShell.Commands.CertificateStoreLocationNotFoundException : CertificateProviderItemNotFoundException {
    public CertificateStoreLocationNotFoundException(string message);
    public CertificateStoreLocationNotFoundException(string message, Exception innerException);
    protected CertificateStoreLocationNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.PowerShell.Commands.CertificateStoreNotFoundException : CertificateProviderItemNotFoundException {
    public CertificateStoreNotFoundException(string message);
    public CertificateStoreNotFoundException(string message, Exception innerException);
    protected CertificateStoreNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.PowerShell.Commands.ConvertFromSecureStringCommand : ConvertFromToSecureStringCommandBase {
    public SecureString SecureString { get; public set; }
    public SecureString get_SecureString();
    public void set_SecureString(SecureString value);
    protected virtual void ProcessRecord();
}
public abstract class Microsoft.PowerShell.Commands.ConvertFromToSecureStringCommandBase : SecureStringCommandBase {
    public Byte[] Key { get; public set; }
    public SecureString SecureKey { get; public set; }
    protected ConvertFromToSecureStringCommandBase(string name);
    public SecureString get_SecureKey();
    public void set_SecureKey(SecureString value);
    public Byte[] get_Key();
    public void set_Key(Byte[] value);
}
public class Microsoft.PowerShell.Commands.ConvertToSecureStringCommand : ConvertFromToSecureStringCommandBase {
    public SwitchParameter AsPlainText { get; public set; }
    public SwitchParameter Force { get; public set; }
    public string String { get; public set; }
    public string get_String();
    public void set_String(string value);
    public SwitchParameter get_AsPlainText();
    public void set_AsPlainText(SwitchParameter value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.DnsNameProperty : object {
    public List`1<DnsNameRepresentation> DnsNameList { get; }
    public DnsNameProperty(X509Certificate2 cert);
    public List`1<DnsNameRepresentation> get_DnsNameList();
}
public class Microsoft.PowerShell.Commands.DnsNameRepresentation : ValueType {
    private int __Asmmeta_Private_Field;
    public string Punycode { get; }
    public string Unicode { get; }
    public DnsNameRepresentation(string inputDnsName);
    public DnsNameRepresentation(string inputPunycodeName, string inputUnicodeName);
    public bool Equals(DnsNameRepresentation dnsName);
    public string get_Punycode();
    public string get_Unicode();
    public virtual string ToString();
}
public class Microsoft.PowerShell.Commands.EnhancedKeyUsageProperty : object {
    public List`1<EnhancedKeyUsageRepresentation> EnhancedKeyUsageList { get; }
    public EnhancedKeyUsageProperty(X509Certificate2 cert);
    public List`1<EnhancedKeyUsageRepresentation> get_EnhancedKeyUsageList();
}
public class Microsoft.PowerShell.Commands.EnhancedKeyUsageRepresentation : ValueType {
    private int __Asmmeta_Private_Field;
    public string FriendlyName { get; }
    public string ObjectId { get; }
    public EnhancedKeyUsageRepresentation(string inputFriendlyName, string inputOid);
    public bool Equals(EnhancedKeyUsageRepresentation keyUsage);
    public string get_FriendlyName();
    public string get_ObjectId();
    public virtual string ToString();
}
public class Microsoft.PowerShell.Commands.GetAclCommand : SecurityDescriptorCommandsBase {
    public SwitchParameter AllCentralAccessPolicies { get; public set; }
    public SwitchParameter Audit { get; public set; }
    public PSObject InputObject { get; public set; }
    public String[] LiteralPath { get; public set; }
    public String[] Path { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public PSObject get_InputObject();
    public void set_InputObject(PSObject value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public SwitchParameter get_Audit();
    public void set_Audit(SwitchParameter value);
    public SwitchParameter get_AllCentralAccessPolicies();
    public void set_AllCentralAccessPolicies(SwitchParameter value);
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.GetAuthenticodeSignatureCommand : SignatureCommandsBase {
    protected virtual Signature PerformAction(string filePath);
}
public class Microsoft.PowerShell.Commands.GetCmsMessageCommand : PSCmdlet {
    public string Content { get; public set; }
    public string LiteralPath { get; public set; }
    public string Path { get; public set; }
    public string get_Content();
    public void set_Content(string value);
    public string get_Path();
    public void set_Path(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
public class Microsoft.PowerShell.Commands.GetCredentialCommand : PSCmdlet {
    public PSCredential Credential { get; public set; }
    public string Message { get; public set; }
    public string UserName { get; public set; }
    public PSCredential get_Credential();
    public void set_Credential(PSCredential value);
    public string get_Message();
    public void set_Message(string value);
    public string get_UserName();
    public void set_UserName(string value);
    protected virtual void BeginProcessing();
}
public class Microsoft.PowerShell.Commands.GetExecutionPolicyCommand : PSCmdlet {
    public SwitchParameter List { get; public set; }
    public ExecutionPolicyScope Scope { get; public set; }
    public ExecutionPolicyScope get_Scope();
    public void set_Scope(ExecutionPolicyScope value);
    public SwitchParameter get_List();
    public void set_List(SwitchParameter value);
    protected virtual void BeginProcessing();
}
public class Microsoft.PowerShell.Commands.GetPfxCertificateCommand : PSCmdlet {
    public String[] FilePath { get; public set; }
    public String[] LiteralPath { get; public set; }
    public String[] get_FilePath();
    public void set_FilePath(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.ProtectCmsMessageCommand : PSCmdlet {
    public PSObject Content { get; public set; }
    public string LiteralPath { get; public set; }
    public string OutFile { get; public set; }
    public string Path { get; public set; }
    public CmsMessageRecipient[] To { get; public set; }
    public CmsMessageRecipient[] get_To();
    public void set_To(CmsMessageRecipient[] value);
    public PSObject get_Content();
    public void set_Content(PSObject value);
    public string get_Path();
    public void set_Path(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    public string get_OutFile();
    public void set_OutFile(string value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
public abstract class Microsoft.PowerShell.Commands.SecureStringCommandBase : PSCmdlet {
    protected SecureString SecureStringData { get; protected set; }
    protected SecureStringCommandBase(string name);
    protected SecureString get_SecureStringData();
    protected void set_SecureStringData(SecureString value);
}
public abstract class Microsoft.PowerShell.Commands.SecurityDescriptorCommandsBase : PSCmdlet {
    public String[] Exclude { get; public set; }
    public string Filter { get; public set; }
    public String[] Include { get; public set; }
    public string get_Filter();
    public void set_Filter(string value);
    public String[] get_Include();
    public void set_Include(String[] value);
    public String[] get_Exclude();
    public void set_Exclude(String[] value);
    public static string GetPath(PSObject instance);
    public static string GetOwner(PSObject instance);
    public static string GetGroup(PSObject instance);
    public static AuthorizationRuleCollection GetAccess(PSObject instance);
    public static AuthorizationRuleCollection GetAudit(PSObject instance);
    public static SecurityIdentifier GetCentralAccessPolicyId(PSObject instance);
    public static string GetCentralAccessPolicyName(PSObject instance);
    public static String[] GetAllCentralAccessPolicies(PSObject instance);
    public static string GetSddl(PSObject instance);
}
public class Microsoft.PowerShell.Commands.SendAsTrustedIssuerProperty : object {
    public static bool ReadSendAsTrustedIssuerProperty(X509Certificate2 cert);
    public static void WriteSendAsTrustedIssuerProperty(X509Certificate2 cert, string certPath, bool addProperty);
}
public class Microsoft.PowerShell.Commands.SetAclCommand : SecurityDescriptorCommandsBase {
    public object AclObject { get; public set; }
    public string CentralAccessPolicy { get; public set; }
    public SwitchParameter ClearCentralAccessPolicy { get; public set; }
    public PSObject InputObject { get; public set; }
    public String[] LiteralPath { get; public set; }
    public SwitchParameter Passthru { get; public set; }
    public String[] Path { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public PSObject get_InputObject();
    public void set_InputObject(PSObject value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public object get_AclObject();
    public void set_AclObject(object value);
    public string get_CentralAccessPolicy();
    public void set_CentralAccessPolicy(string value);
    public SwitchParameter get_ClearCentralAccessPolicy();
    public void set_ClearCentralAccessPolicy(SwitchParameter value);
    public SwitchParameter get_Passthru();
    public void set_Passthru(SwitchParameter value);
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.SetAuthenticodeSignatureCommand : SignatureCommandsBase {
    public X509Certificate2 Certificate { get; public set; }
    public SwitchParameter Force { get; public set; }
    public string HashAlgorithm { get; public set; }
    public string IncludeChain { get; public set; }
    public string TimestampServer { get; public set; }
    public X509Certificate2 get_Certificate();
    public void set_Certificate(X509Certificate2 value);
    public string get_IncludeChain();
    public void set_IncludeChain(string value);
    public string get_TimestampServer();
    public void set_TimestampServer(string value);
    public string get_HashAlgorithm();
    public void set_HashAlgorithm(string value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    protected virtual Signature PerformAction(string filePath);
}
public class Microsoft.PowerShell.Commands.SetExecutionPolicyCommand : PSCmdlet {
    public ExecutionPolicy ExecutionPolicy { get; public set; }
    public SwitchParameter Force { get; public set; }
    public ExecutionPolicyScope Scope { get; public set; }
    public ExecutionPolicy get_ExecutionPolicy();
    public void set_ExecutionPolicy(ExecutionPolicy value);
    public ExecutionPolicyScope get_Scope();
    public void set_Scope(ExecutionPolicyScope value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
public abstract class Microsoft.PowerShell.Commands.SignatureCommandsBase : PSCmdlet {
    public String[] FilePath { get; public set; }
    public String[] LiteralPath { get; public set; }
    protected Signature Signature { get; protected set; }
    protected SignatureCommandsBase(string name);
    public String[] get_FilePath();
    public void set_FilePath(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    protected Signature get_Signature();
    protected void set_Signature(Signature value);
    protected virtual void ProcessRecord();
    protected abstract virtual Signature PerformAction(string filePath);
}
public class Microsoft.PowerShell.Commands.UnprotectCmsMessageCommand : PSCmdlet {
    public string Content { get; public set; }
    public PSObject EventLogRecord { get; public set; }
    public SwitchParameter IncludeContext { get; public set; }
    public string LiteralPath { get; public set; }
    public string Path { get; public set; }
    public CmsMessageRecipient[] To { get; public set; }
    public string get_Content();
    public void set_Content(string value);
    public PSObject get_EventLogRecord();
    public void set_EventLogRecord(PSObject value);
    public string get_Path();
    public void set_Path(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    public SwitchParameter get_IncludeContext();
    public void set_IncludeContext(SwitchParameter value);
    public CmsMessageRecipient[] get_To();
    public void set_To(CmsMessageRecipient[] value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
public class Microsoft.PowerShell.Commands.X509StoreLocation : object {
    public StoreLocation Location { get; public set; }
    public string LocationName { get; }
    public Hashtable StoreNames { get; }
    public X509StoreLocation(StoreLocation location);
    public string get_LocationName();
    public StoreLocation get_Location();
    public void set_Location(StoreLocation value);
    public Hashtable get_StoreNames();
}
public class Microsoft.PowerShell.PSSecurityPSSnapIn : PSSnapIn {
    public string Description { get; }
    public string DescriptionResource { get; }
    public string Name { get; }
    public string Vendor { get; }
    public string VendorResource { get; }
    public virtual string get_Name();
    public virtual string get_Vendor();
    public virtual string get_VendorResource();
    public virtual string get_Description();
    public virtual string get_DescriptionResource();
}
