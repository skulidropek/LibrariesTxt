public class Microsoft.PowerShell.Utility.Activities.AddMember : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSMemberTypes> MemberType { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Name { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<IDictionary> NotePropertyMembers { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> NotePropertyName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<object> NotePropertyValue { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<object> SecondValue { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> TypeName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<object> Value { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<PSMemberTypes> get_MemberType();
    public void set_MemberType(InArgument`1<PSMemberTypes> value);
    public InArgument`1<string> get_Name();
    public void set_Name(InArgument`1<string> value);
    public InArgument`1<object> get_Value();
    public void set_Value(InArgument`1<object> value);
    public InArgument`1<object> get_SecondValue();
    public void set_SecondValue(InArgument`1<object> value);
    public InArgument`1<string> get_TypeName();
    public void set_TypeName(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_NotePropertyName();
    public void set_NotePropertyName(InArgument`1<string> value);
    public InArgument`1<object> get_NotePropertyValue();
    public void set_NotePropertyValue(InArgument`1<object> value);
    public InArgument`1<IDictionary> get_NotePropertyMembers();
    public void set_NotePropertyMembers(InArgument`1<IDictionary> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.AddType : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> AssemblyName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<CodeDomProvider> CodeDomProvider { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<CompilerParameters> CompilerParameters { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> IgnoreWarnings { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Language> Language { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> MemberDefinition { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Name { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Namespace { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> OutputAssembly { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<OutputAssemblyType> OutputType { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ReferencedAssemblies { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> TypeDefinition { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> UsingNamespace { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_TypeDefinition();
    public void set_TypeDefinition(InArgument`1<string> value);
    public InArgument`1<string> get_Name();
    public void set_Name(InArgument`1<string> value);
    public InArgument`1<String[]> get_MemberDefinition();
    public void set_MemberDefinition(InArgument`1<String[]> value);
    public InArgument`1<string> get_Namespace();
    public void set_Namespace(InArgument`1<string> value);
    public InArgument`1<String[]> get_UsingNamespace();
    public void set_UsingNamespace(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_AssemblyName();
    public void set_AssemblyName(InArgument`1<String[]> value);
    public InArgument`1<Language> get_Language();
    public void set_Language(InArgument`1<Language> value);
    public InArgument`1<String[]> get_ReferencedAssemblies();
    public void set_ReferencedAssemblies(InArgument`1<String[]> value);
    public InArgument`1<CodeDomProvider> get_CodeDomProvider();
    public void set_CodeDomProvider(InArgument`1<CodeDomProvider> value);
    public InArgument`1<CompilerParameters> get_CompilerParameters();
    public void set_CompilerParameters(InArgument`1<CompilerParameters> value);
    public InArgument`1<string> get_OutputAssembly();
    public void set_OutputAssembly(InArgument`1<string> value);
    public InArgument`1<OutputAssemblyType> get_OutputType();
    public void set_OutputType(InArgument`1<OutputAssemblyType> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_IgnoreWarnings();
    public void set_IgnoreWarnings(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.CompareObject : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CaseSensitive { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Culture { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject[]> DifferenceObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> ExcludeDifferent { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> IncludeEqual { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Object[]> Property { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject[]> ReferenceObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> SyncWindow { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<PSObject[]> get_ReferenceObject();
    public void set_ReferenceObject(InArgument`1<PSObject[]> value);
    public InArgument`1<PSObject[]> get_DifferenceObject();
    public void set_DifferenceObject(InArgument`1<PSObject[]> value);
    public InArgument`1<int> get_SyncWindow();
    public void set_SyncWindow(InArgument`1<int> value);
    public InArgument`1<Object[]> get_Property();
    public void set_Property(InArgument`1<Object[]> value);
    public InArgument`1<SwitchParameter> get_ExcludeDifferent();
    public void set_ExcludeDifferent(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_IncludeEqual();
    public void set_IncludeEqual(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Culture();
    public void set_Culture(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_CaseSensitive();
    public void set_CaseSensitive(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.ConvertFromCsv : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<char> Delimiter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Header { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject[]> InputObject { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> UseCulture { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<char> get_Delimiter();
    public void set_Delimiter(InArgument`1<char> value);
    public InArgument`1<SwitchParameter> get_UseCulture();
    public void set_UseCulture(InArgument`1<SwitchParameter> value);
    public InArgument`1<PSObject[]> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject[]> value);
    public InArgument`1<String[]> get_Header();
    public void set_Header(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.ConvertFromJson : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> InputObject { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_InputObject();
    public void set_InputObject(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.ConvertFromString : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> Delimiter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> InputObject { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> PropertyNames { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> TemplateContent { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> TemplateFile { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Delimiter();
    public void set_Delimiter(InArgument`1<string> value);
    public InArgument`1<String[]> get_PropertyNames();
    public void set_PropertyNames(InArgument`1<String[]> value);
    public InArgument`1<string> get_TemplateFile();
    public void set_TemplateFile(InArgument`1<string> value);
    public InArgument`1<string> get_TemplateContent();
    public void set_TemplateContent(InArgument`1<string> value);
    public InArgument`1<string> get_InputObject();
    public void set_InputObject(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.ConvertFromStringData : PSActivity {
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> StringData { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_StringData();
    public void set_StringData(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.ConvertToCsv : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<char> Delimiter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NoTypeInformation { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> UseCulture { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<char> get_Delimiter();
    public void set_Delimiter(InArgument`1<char> value);
    public InArgument`1<SwitchParameter> get_UseCulture();
    public void set_UseCulture(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_NoTypeInformation();
    public void set_NoTypeInformation(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.ConvertToHtml : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> As { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Body { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Uri> CssUri { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Fragment { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Head { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> PostContent { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> PreContent { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Object[]> Property { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Title { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<Object[]> get_Property();
    public void set_Property(InArgument`1<Object[]> value);
    public InArgument`1<String[]> get_Body();
    public void set_Body(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Head();
    public void set_Head(InArgument`1<String[]> value);
    public InArgument`1<string> get_Title();
    public void set_Title(InArgument`1<string> value);
    public InArgument`1<string> get_As();
    public void set_As(InArgument`1<string> value);
    public InArgument`1<Uri> get_CssUri();
    public void set_CssUri(InArgument`1<Uri> value);
    public InArgument`1<SwitchParameter> get_Fragment();
    public void set_Fragment(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_PostContent();
    public void set_PostContent(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_PreContent();
    public void set_PreContent(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.ConvertToJson : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Compress { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Depth { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<object> InputObject { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<object> get_InputObject();
    public void set_InputObject(InArgument`1<object> value);
    public InArgument`1<int> get_Depth();
    public void set_Depth(InArgument`1<int> value);
    public InArgument`1<SwitchParameter> get_Compress();
    public void set_Compress(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.ConvertToXml : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> As { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Depth { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NoTypeInformation { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<int> get_Depth();
    public void set_Depth(InArgument`1<int> value);
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<SwitchParameter> get_NoTypeInformation();
    public void set_NoTypeInformation(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_As();
    public void set_As(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.ExportClixml : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<int> Depth { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Encoding { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NoClobber { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Path { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<int> get_Depth();
    public void set_Depth(InArgument`1<int> value);
    public InArgument`1<string> get_Path();
    public void set_Path(InArgument`1<string> value);
    public InArgument`1<string> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<string> value);
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_NoClobber();
    public void set_NoClobber(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Encoding();
    public void set_Encoding(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.ExportCsv : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Append { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<char> Delimiter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Encoding { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NoClobber { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NoTypeInformation { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> UseCulture { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<string> get_Path();
    public void set_Path(InArgument`1<string> value);
    public InArgument`1<string> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_NoClobber();
    public void set_NoClobber(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Encoding();
    public void set_Encoding(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Append();
    public void set_Append(InArgument`1<SwitchParameter> value);
    public InArgument`1<char> get_Delimiter();
    public void set_Delimiter(InArgument`1<char> value);
    public InArgument`1<SwitchParameter> get_UseCulture();
    public void set_UseCulture(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_NoTypeInformation();
    public void set_NoTypeInformation(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.ExportFormatData : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> IncludeScriptBlock { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ExtendedTypeDefinition[]> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NoClobber { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Path { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<ExtendedTypeDefinition[]> get_InputObject();
    public void set_InputObject(InArgument`1<ExtendedTypeDefinition[]> value);
    public InArgument`1<string> get_Path();
    public void set_Path(InArgument`1<string> value);
    public InArgument`1<string> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_NoClobber();
    public void set_NoClobber(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_IncludeScriptBlock();
    public void set_IncludeScriptBlock(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.GetCulture : PSRemotingActivity {
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.GetDate : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<DateTime> Date { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Day { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<DisplayHintType> DisplayHint { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Format { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Hour { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Millisecond { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Minute { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Month { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Second { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> UFormat { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Year { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<DateTime> get_Date();
    public void set_Date(InArgument`1<DateTime> value);
    public InArgument`1<int> get_Year();
    public void set_Year(InArgument`1<int> value);
    public InArgument`1<int> get_Month();
    public void set_Month(InArgument`1<int> value);
    public InArgument`1<int> get_Day();
    public void set_Day(InArgument`1<int> value);
    public InArgument`1<int> get_Hour();
    public void set_Hour(InArgument`1<int> value);
    public InArgument`1<int> get_Minute();
    public void set_Minute(InArgument`1<int> value);
    public InArgument`1<int> get_Second();
    public void set_Second(InArgument`1<int> value);
    public InArgument`1<int> get_Millisecond();
    public void set_Millisecond(InArgument`1<int> value);
    public InArgument`1<DisplayHintType> get_DisplayHint();
    public void set_DisplayHint(InArgument`1<DisplayHintType> value);
    public InArgument`1<string> get_UFormat();
    public void set_UFormat(InArgument`1<string> value);
    public InArgument`1<string> get_Format();
    public void set_Format(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.GetEvent : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<int> EventIdentifier { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> SourceIdentifier { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_SourceIdentifier();
    public void set_SourceIdentifier(InArgument`1<string> value);
    public InArgument`1<int> get_EventIdentifier();
    public void set_EventIdentifier(InArgument`1<int> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.GetEventSubscriber : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> SourceIdentifier { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> SubscriptionId { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_SourceIdentifier();
    public void set_SourceIdentifier(InArgument`1<string> value);
    public InArgument`1<int> get_SubscriptionId();
    public void set_SubscriptionId(InArgument`1<int> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.GetHost : PSActivity {
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.GetMember : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSMemberTypes> MemberType { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Static { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSMemberViewTypes> View { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<PSMemberTypes> get_MemberType();
    public void set_MemberType(InArgument`1<PSMemberTypes> value);
    public InArgument`1<PSMemberViewTypes> get_View();
    public void set_View(InArgument`1<PSMemberViewTypes> value);
    public InArgument`1<SwitchParameter> get_Static();
    public void set_Static(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.GetRandom : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<int> Count { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Object[]> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<object> Maximum { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<object> Minimum { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<int>> SetSeed { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<Nullable`1<int>> get_SetSeed();
    public void set_SetSeed(InArgument`1<Nullable`1<int>> value);
    public InArgument`1<object> get_Maximum();
    public void set_Maximum(InArgument`1<object> value);
    public InArgument`1<object> get_Minimum();
    public void set_Minimum(InArgument`1<object> value);
    public InArgument`1<Object[]> get_InputObject();
    public void set_InputObject(InArgument`1<Object[]> value);
    public InArgument`1<int> get_Count();
    public void set_Count(InArgument`1<int> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.GetTraceSource : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.GetTypeData : PSRemotingActivity {
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> TypeName { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_TypeName();
    public void set_TypeName(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.GetUICulture : PSRemotingActivity {
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.GetUnique : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> AsString { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> OnType { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<SwitchParameter> get_AsString();
    public void set_AsString(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_OnType();
    public void set_OnType(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.GroupObject : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> AsHashTable { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> AsString { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CaseSensitive { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Culture { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NoElement { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Object[]> Property { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<SwitchParameter> get_NoElement();
    public void set_NoElement(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_AsHashTable();
    public void set_AsHashTable(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_AsString();
    public void set_AsString(InArgument`1<SwitchParameter> value);
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<Object[]> get_Property();
    public void set_Property(InArgument`1<Object[]> value);
    public InArgument`1<string> get_Culture();
    public void set_Culture(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_CaseSensitive();
    public void set_CaseSensitive(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.ImportClixml : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<ulong> First { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> IncludeTotalCount { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ulong> Skip { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_IncludeTotalCount();
    public void set_IncludeTotalCount(InArgument`1<SwitchParameter> value);
    public InArgument`1<ulong> get_Skip();
    public void set_Skip(InArgument`1<ulong> value);
    public InArgument`1<ulong> get_First();
    public void set_First(InArgument`1<ulong> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.ImportCsv : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<char> Delimiter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Encoding { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Header { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> UseCulture { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<char> get_Delimiter();
    public void set_Delimiter(InArgument`1<char> value);
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_UseCulture();
    public void set_UseCulture(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_Header();
    public void set_Header(InArgument`1<String[]> value);
    public InArgument`1<string> get_Encoding();
    public void set_Encoding(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.ImportLocalizedData : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> BaseDirectory { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> FileName { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> SupportedCommand { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> UICulture { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_UICulture();
    public void set_UICulture(InArgument`1<string> value);
    public InArgument`1<string> get_BaseDirectory();
    public void set_BaseDirectory(InArgument`1<string> value);
    public InArgument`1<string> get_FileName();
    public void set_FileName(InArgument`1<string> value);
    public InArgument`1<String[]> get_SupportedCommand();
    public void set_SupportedCommand(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.InvokeExpression : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> Command { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Command();
    public void set_Command(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.InvokeRestMethod : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<object> Body { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<X509Certificate> Certificate { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> CertificateThumbprint { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ContentType { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> DisableKeepAlive { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<IDictionary> Headers { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> InFile { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> MaximumRedirection { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<WebRequestMethod> Method { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> OutFile { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Uri> Proxy { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> ProxyCredential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> ProxyUseDefaultCredentials { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> SessionVariable { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> TimeoutSec { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> TransferEncoding { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Uri> Uri { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> UseDefaultCredentials { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> UserAgent { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<WebRequestSession> WebSession { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<WebRequestMethod> get_Method();
    public void set_Method(InArgument`1<WebRequestMethod> value);
    public InArgument`1<Uri> get_Uri();
    public void set_Uri(InArgument`1<Uri> value);
    public InArgument`1<WebRequestSession> get_WebSession();
    public void set_WebSession(InArgument`1<WebRequestSession> value);
    public InArgument`1<string> get_SessionVariable();
    public void set_SessionVariable(InArgument`1<string> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<SwitchParameter> get_UseDefaultCredentials();
    public void set_UseDefaultCredentials(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_CertificateThumbprint();
    public void set_CertificateThumbprint(InArgument`1<string> value);
    public InArgument`1<X509Certificate> get_Certificate();
    public void set_Certificate(InArgument`1<X509Certificate> value);
    public InArgument`1<string> get_UserAgent();
    public void set_UserAgent(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_DisableKeepAlive();
    public void set_DisableKeepAlive(InArgument`1<SwitchParameter> value);
    public InArgument`1<int> get_TimeoutSec();
    public void set_TimeoutSec(InArgument`1<int> value);
    public InArgument`1<IDictionary> get_Headers();
    public void set_Headers(InArgument`1<IDictionary> value);
    public InArgument`1<int> get_MaximumRedirection();
    public void set_MaximumRedirection(InArgument`1<int> value);
    public InArgument`1<Uri> get_Proxy();
    public void set_Proxy(InArgument`1<Uri> value);
    public InArgument`1<PSCredential> get_ProxyCredential();
    public void set_ProxyCredential(InArgument`1<PSCredential> value);
    public InArgument`1<SwitchParameter> get_ProxyUseDefaultCredentials();
    public void set_ProxyUseDefaultCredentials(InArgument`1<SwitchParameter> value);
    public InArgument`1<object> get_Body();
    public void set_Body(InArgument`1<object> value);
    public InArgument`1<string> get_ContentType();
    public void set_ContentType(InArgument`1<string> value);
    public InArgument`1<string> get_TransferEncoding();
    public void set_TransferEncoding(InArgument`1<string> value);
    public InArgument`1<string> get_InFile();
    public void set_InFile(InArgument`1<string> value);
    public InArgument`1<string> get_OutFile();
    public void set_OutFile(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.InvokeWebRequest : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<object> Body { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<X509Certificate> Certificate { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> CertificateThumbprint { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ContentType { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> DisableKeepAlive { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<IDictionary> Headers { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> InFile { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> MaximumRedirection { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<WebRequestMethod> Method { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> OutFile { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Uri> Proxy { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> ProxyCredential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> ProxyUseDefaultCredentials { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> SessionVariable { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> TimeoutSec { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> TransferEncoding { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Uri> Uri { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> UseBasicParsing { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> UseDefaultCredentials { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> UserAgent { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<WebRequestSession> WebSession { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<SwitchParameter> get_UseBasicParsing();
    public void set_UseBasicParsing(InArgument`1<SwitchParameter> value);
    public InArgument`1<Uri> get_Uri();
    public void set_Uri(InArgument`1<Uri> value);
    public InArgument`1<WebRequestSession> get_WebSession();
    public void set_WebSession(InArgument`1<WebRequestSession> value);
    public InArgument`1<string> get_SessionVariable();
    public void set_SessionVariable(InArgument`1<string> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<SwitchParameter> get_UseDefaultCredentials();
    public void set_UseDefaultCredentials(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_CertificateThumbprint();
    public void set_CertificateThumbprint(InArgument`1<string> value);
    public InArgument`1<X509Certificate> get_Certificate();
    public void set_Certificate(InArgument`1<X509Certificate> value);
    public InArgument`1<string> get_UserAgent();
    public void set_UserAgent(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_DisableKeepAlive();
    public void set_DisableKeepAlive(InArgument`1<SwitchParameter> value);
    public InArgument`1<int> get_TimeoutSec();
    public void set_TimeoutSec(InArgument`1<int> value);
    public InArgument`1<IDictionary> get_Headers();
    public void set_Headers(InArgument`1<IDictionary> value);
    public InArgument`1<int> get_MaximumRedirection();
    public void set_MaximumRedirection(InArgument`1<int> value);
    public InArgument`1<WebRequestMethod> get_Method();
    public void set_Method(InArgument`1<WebRequestMethod> value);
    public InArgument`1<Uri> get_Proxy();
    public void set_Proxy(InArgument`1<Uri> value);
    public InArgument`1<PSCredential> get_ProxyCredential();
    public void set_ProxyCredential(InArgument`1<PSCredential> value);
    public InArgument`1<SwitchParameter> get_ProxyUseDefaultCredentials();
    public void set_ProxyUseDefaultCredentials(InArgument`1<SwitchParameter> value);
    public InArgument`1<object> get_Body();
    public void set_Body(InArgument`1<object> value);
    public InArgument`1<string> get_ContentType();
    public void set_ContentType(InArgument`1<string> value);
    public InArgument`1<string> get_TransferEncoding();
    public void set_TransferEncoding(InArgument`1<string> value);
    public InArgument`1<string> get_InFile();
    public void set_InFile(InArgument`1<string> value);
    public InArgument`1<string> get_OutFile();
    public void set_OutFile(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.MeasureCommand : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<ScriptBlock> Expression { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<ScriptBlock> get_Expression();
    public void set_Expression(InArgument`1<ScriptBlock> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.MeasureObject : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Average { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Character { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> IgnoreWhiteSpace { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Line { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Maximum { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Minimum { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Property { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Sum { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Word { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<String[]> get_Property();
    public void set_Property(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_Sum();
    public void set_Sum(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Average();
    public void set_Average(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Maximum();
    public void set_Maximum(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Minimum();
    public void set_Minimum(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Line();
    public void set_Line(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Word();
    public void set_Word(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Character();
    public void set_Character(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_IgnoreWhiteSpace();
    public void set_IgnoreWhiteSpace(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.NewEvent : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSObject[]> EventArguments { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> MessageData { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> Sender { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> SourceIdentifier { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_SourceIdentifier();
    public void set_SourceIdentifier(InArgument`1<string> value);
    public InArgument`1<PSObject> get_Sender();
    public void set_Sender(InArgument`1<PSObject> value);
    public InArgument`1<PSObject[]> get_EventArguments();
    public void set_EventArguments(InArgument`1<PSObject[]> value);
    public InArgument`1<PSObject> get_MessageData();
    public void set_MessageData(InArgument`1<PSObject> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.NewTimeSpan : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<int> Days { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<DateTime> End { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Hours { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Minutes { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Seconds { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<DateTime> Start { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<DateTime> get_Start();
    public void set_Start(InArgument`1<DateTime> value);
    public InArgument`1<DateTime> get_End();
    public void set_End(InArgument`1<DateTime> value);
    public InArgument`1<int> get_Days();
    public void set_Days(InArgument`1<int> value);
    public InArgument`1<int> get_Hours();
    public void set_Hours(InArgument`1<int> value);
    public InArgument`1<int> get_Minutes();
    public void set_Minutes(InArgument`1<int> value);
    public InArgument`1<int> get_Seconds();
    public void set_Seconds(InArgument`1<int> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.OutFile : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Append { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Encoding { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> FilePath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NoClobber { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Width { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_FilePath();
    public void set_FilePath(InArgument`1<string> value);
    public InArgument`1<string> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<string> value);
    public InArgument`1<string> get_Encoding();
    public void set_Encoding(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Append();
    public void set_Append(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_NoClobber();
    public void set_NoClobber(InArgument`1<SwitchParameter> value);
    public InArgument`1<int> get_Width();
    public void set_Width(InArgument`1<int> value);
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.OutPrinter : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Name { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Name();
    public void set_Name(InArgument`1<string> value);
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.OutString : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Stream { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Width { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<SwitchParameter> get_Stream();
    public void set_Stream(InArgument`1<SwitchParameter> value);
    public InArgument`1<int> get_Width();
    public void set_Width(InArgument`1<int> value);
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.RegisterEngineEvent : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<ScriptBlock> Action { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Forward { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> MaxTriggerCount { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> MessageData { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> SourceIdentifier { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> SupportEvent { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_SourceIdentifier();
    public void set_SourceIdentifier(InArgument`1<string> value);
    public InArgument`1<ScriptBlock> get_Action();
    public void set_Action(InArgument`1<ScriptBlock> value);
    public InArgument`1<PSObject> get_MessageData();
    public void set_MessageData(InArgument`1<PSObject> value);
    public InArgument`1<SwitchParameter> get_SupportEvent();
    public void set_SupportEvent(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Forward();
    public void set_Forward(InArgument`1<SwitchParameter> value);
    public InArgument`1<int> get_MaxTriggerCount();
    public void set_MaxTriggerCount(InArgument`1<int> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.RegisterObjectEvent : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<ScriptBlock> Action { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> EventName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Forward { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> MaxTriggerCount { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> MessageData { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> SourceIdentifier { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> SupportEvent { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<string> get_EventName();
    public void set_EventName(InArgument`1<string> value);
    public InArgument`1<string> get_SourceIdentifier();
    public void set_SourceIdentifier(InArgument`1<string> value);
    public InArgument`1<ScriptBlock> get_Action();
    public void set_Action(InArgument`1<ScriptBlock> value);
    public InArgument`1<PSObject> get_MessageData();
    public void set_MessageData(InArgument`1<PSObject> value);
    public InArgument`1<SwitchParameter> get_SupportEvent();
    public void set_SupportEvent(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Forward();
    public void set_Forward(InArgument`1<SwitchParameter> value);
    public InArgument`1<int> get_MaxTriggerCount();
    public void set_MaxTriggerCount(InArgument`1<int> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.RemoveEvent : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<int> EventIdentifier { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> SourceIdentifier { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_SourceIdentifier();
    public void set_SourceIdentifier(InArgument`1<string> value);
    public InArgument`1<int> get_EventIdentifier();
    public void set_EventIdentifier(InArgument`1<int> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.SelectObject : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> ExcludeProperty { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ExpandProperty { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> First { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Int32[]> Index { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Last { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Object[]> Property { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Skip { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> SkipLast { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Unique { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Wait { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<Object[]> get_Property();
    public void set_Property(InArgument`1<Object[]> value);
    public InArgument`1<String[]> get_ExcludeProperty();
    public void set_ExcludeProperty(InArgument`1<String[]> value);
    public InArgument`1<string> get_ExpandProperty();
    public void set_ExpandProperty(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Unique();
    public void set_Unique(InArgument`1<SwitchParameter> value);
    public InArgument`1<int> get_Last();
    public void set_Last(InArgument`1<int> value);
    public InArgument`1<int> get_First();
    public void set_First(InArgument`1<int> value);
    public InArgument`1<int> get_Skip();
    public void set_Skip(InArgument`1<int> value);
    public InArgument`1<int> get_SkipLast();
    public void set_SkipLast(InArgument`1<int> value);
    public InArgument`1<SwitchParameter> get_Wait();
    public void set_Wait(InArgument`1<SwitchParameter> value);
    public InArgument`1<Int32[]> get_Index();
    public void set_Index(InArgument`1<Int32[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.SelectString : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> AllMatches { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CaseSensitive { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Int32[]> Context { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Encoding { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Exclude { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Include { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> List { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NotMatch { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Pattern { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Quiet { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> SimpleMatch { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<String[]> get_Pattern();
    public void set_Pattern(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_SimpleMatch();
    public void set_SimpleMatch(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_CaseSensitive();
    public void set_CaseSensitive(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Quiet();
    public void set_Quiet(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_List();
    public void set_List(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_Include();
    public void set_Include(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Exclude();
    public void set_Exclude(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_NotMatch();
    public void set_NotMatch(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_AllMatches();
    public void set_AllMatches(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Encoding();
    public void set_Encoding(InArgument`1<string> value);
    public InArgument`1<Int32[]> get_Context();
    public void set_Context(InArgument`1<Int32[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.SelectXml : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Content { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Hashtable> Namespace { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> XPath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<XmlNode[]> Xml { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    public InArgument`1<XmlNode[]> get_Xml();
    public void set_Xml(InArgument`1<XmlNode[]> value);
    public InArgument`1<String[]> get_Content();
    public void set_Content(InArgument`1<String[]> value);
    public InArgument`1<string> get_XPath();
    public void set_XPath(InArgument`1<string> value);
    public InArgument`1<Hashtable> get_Namespace();
    public void set_Namespace(InArgument`1<Hashtable> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.SendMailMessage : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Attachments { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Bcc { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Body { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> BodyAsHtml { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Cc { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> Credential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<DeliveryNotificationOptions> DeliveryNotificationOption { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Encoding> Encoding { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> From { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Port { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<MailPriority> Priority { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> SmtpServer { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Subject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> To { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> UseSsl { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Attachments();
    public void set_Attachments(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_Bcc();
    public void set_Bcc(InArgument`1<String[]> value);
    public InArgument`1<string> get_Body();
    public void set_Body(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_BodyAsHtml();
    public void set_BodyAsHtml(InArgument`1<SwitchParameter> value);
    public InArgument`1<Encoding> get_Encoding();
    public void set_Encoding(InArgument`1<Encoding> value);
    public InArgument`1<String[]> get_Cc();
    public void set_Cc(InArgument`1<String[]> value);
    public InArgument`1<DeliveryNotificationOptions> get_DeliveryNotificationOption();
    public void set_DeliveryNotificationOption(InArgument`1<DeliveryNotificationOptions> value);
    public InArgument`1<string> get_From();
    public void set_From(InArgument`1<string> value);
    public InArgument`1<string> get_SmtpServer();
    public void set_SmtpServer(InArgument`1<string> value);
    public InArgument`1<MailPriority> get_Priority();
    public void set_Priority(InArgument`1<MailPriority> value);
    public InArgument`1<string> get_Subject();
    public void set_Subject(InArgument`1<string> value);
    public InArgument`1<String[]> get_To();
    public void set_To(InArgument`1<String[]> value);
    public InArgument`1<PSCredential> get_Credential();
    public void set_Credential(InArgument`1<PSCredential> value);
    public InArgument`1<SwitchParameter> get_UseSsl();
    public void set_UseSsl(InArgument`1<SwitchParameter> value);
    public InArgument`1<int> get_Port();
    public void set_Port(InArgument`1<int> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.SetDate : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<TimeSpan> Adjust { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<DateTime> Date { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<DisplayHintType> DisplayHint { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<DateTime> get_Date();
    public void set_Date(InArgument`1<DateTime> value);
    public InArgument`1<TimeSpan> get_Adjust();
    public void set_Adjust(InArgument`1<TimeSpan> value);
    public InArgument`1<DisplayHintType> get_DisplayHint();
    public void set_DisplayHint(InArgument`1<DisplayHintType> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.SetTraceSource : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Debugger { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> FilePath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<TraceOptions> ListenerOption { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Name { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSTraceSourceOptions> Option { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PSHost { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> PassThru { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> RemoveFileListener { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> RemoveListener { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Name();
    public void set_Name(InArgument`1<String[]> value);
    public InArgument`1<PSTraceSourceOptions> get_Option();
    public void set_Option(InArgument`1<PSTraceSourceOptions> value);
    public InArgument`1<TraceOptions> get_ListenerOption();
    public void set_ListenerOption(InArgument`1<TraceOptions> value);
    public InArgument`1<string> get_FilePath();
    public void set_FilePath(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Debugger();
    public void set_Debugger(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_PSHost();
    public void set_PSHost(InArgument`1<SwitchParameter> value);
    public InArgument`1<String[]> get_RemoveListener();
    public void set_RemoveListener(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_RemoveFileListener();
    public void set_RemoveFileListener(InArgument`1<String[]> value);
    public InArgument`1<SwitchParameter> get_PassThru();
    public void set_PassThru(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.SortObject : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> CaseSensitive { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Culture { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Descending { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Object[]> Property { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Unique { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<SwitchParameter> get_Descending();
    public void set_Descending(InArgument`1<SwitchParameter> value);
    public InArgument`1<SwitchParameter> get_Unique();
    public void set_Unique(InArgument`1<SwitchParameter> value);
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<Object[]> get_Property();
    public void set_Property(InArgument`1<Object[]> value);
    public InArgument`1<string> get_Culture();
    public void set_Culture(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_CaseSensitive();
    public void set_CaseSensitive(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.StartSleep : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<int> Milliseconds { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Seconds { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<int> get_Seconds();
    public void set_Seconds(InArgument`1<int> value);
    public InArgument`1<int> get_Milliseconds();
    public void set_Milliseconds(InArgument`1<int> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.TeeObject : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Append { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> FilePath { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Variable { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<string> get_FilePath();
    public void set_FilePath(InArgument`1<string> value);
    public InArgument`1<string> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<string> value);
    public InArgument`1<SwitchParameter> get_Append();
    public void set_Append(InArgument`1<SwitchParameter> value);
    public InArgument`1<string> get_Variable();
    public void set_Variable(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.UnblockFile : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<String[]> LiteralPath { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Path { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<String[]> get_Path();
    public void set_Path(InArgument`1<String[]> value);
    public InArgument`1<String[]> get_LiteralPath();
    public void set_LiteralPath(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.UnregisterEvent : PSRemotingActivity {
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Force { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> SourceIdentifier { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> SubscriptionId { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_SourceIdentifier();
    public void set_SourceIdentifier(InArgument`1<string> value);
    public InArgument`1<int> get_SubscriptionId();
    public void set_SubscriptionId(InArgument`1<int> value);
    public InArgument`1<SwitchParameter> get_Force();
    public void set_Force(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.UpdateList : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<Object[]> Add { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSObject> InputObject { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Property { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Object[]> Remove { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Object[]> Replace { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<Object[]> get_Add();
    public void set_Add(InArgument`1<Object[]> value);
    public InArgument`1<Object[]> get_Remove();
    public void set_Remove(InArgument`1<Object[]> value);
    public InArgument`1<Object[]> get_Replace();
    public void set_Replace(InArgument`1<Object[]> value);
    public InArgument`1<PSObject> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject> value);
    public InArgument`1<string> get_Property();
    public void set_Property(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.WaitEvent : PSRemotingActivity {
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> SourceIdentifier { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> Timeout { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_SourceIdentifier();
    public void set_SourceIdentifier(InArgument`1<string> value);
    public InArgument`1<int> get_Timeout();
    public void set_Timeout(InArgument`1<int> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.WriteDebug : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> Message { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Message();
    public void set_Message(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.WriteError : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<ErrorCategory> Category { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> CategoryActivity { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> CategoryReason { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> CategoryTargetName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> CategoryTargetType { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> ErrorId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<ErrorRecord> ErrorRecord { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Exception> Exception { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Message { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<string> RecommendedAction { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<object> TargetObject { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<Exception> get_Exception();
    public void set_Exception(InArgument`1<Exception> value);
    public InArgument`1<string> get_Message();
    public void set_Message(InArgument`1<string> value);
    public InArgument`1<ErrorRecord> get_ErrorRecord();
    public void set_ErrorRecord(InArgument`1<ErrorRecord> value);
    public InArgument`1<ErrorCategory> get_Category();
    public void set_Category(InArgument`1<ErrorCategory> value);
    public InArgument`1<string> get_ErrorId();
    public void set_ErrorId(InArgument`1<string> value);
    public InArgument`1<object> get_TargetObject();
    public void set_TargetObject(InArgument`1<object> value);
    public InArgument`1<string> get_RecommendedAction();
    public void set_RecommendedAction(InArgument`1<string> value);
    public InArgument`1<string> get_CategoryActivity();
    public void set_CategoryActivity(InArgument`1<string> value);
    public InArgument`1<string> get_CategoryReason();
    public void set_CategoryReason(InArgument`1<string> value);
    public InArgument`1<string> get_CategoryTargetName();
    public void set_CategoryTargetName(InArgument`1<string> value);
    public InArgument`1<string> get_CategoryTargetType();
    public void set_CategoryTargetType(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.WriteInformation : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<object> MessageData { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> Tags { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<object> get_MessageData();
    public void set_MessageData(InArgument`1<object> value);
    public InArgument`1<String[]> get_Tags();
    public void set_Tags(InArgument`1<String[]> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.WriteOutput : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<PSObject[]> InputObject { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> NoEnumerate { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<PSObject[]> get_InputObject();
    public void set_InputObject(InArgument`1<PSObject[]> value);
    public InArgument`1<SwitchParameter> get_NoEnumerate();
    public void set_NoEnumerate(InArgument`1<SwitchParameter> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.WriteProgress : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> Activity { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<SwitchParameter> Completed { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> CurrentOperation { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InArgument`1<int> ParentId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> PercentComplete { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> ProgressId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> SecondsRemaining { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<int> SourceId { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Status { get; public set; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Activity();
    public void set_Activity(InArgument`1<string> value);
    public InArgument`1<string> get_Status();
    public void set_Status(InArgument`1<string> value);
    public InArgument`1<int> get_ProgressId();
    public void set_ProgressId(InArgument`1<int> value);
    public InArgument`1<int> get_PercentComplete();
    public void set_PercentComplete(InArgument`1<int> value);
    public InArgument`1<int> get_SecondsRemaining();
    public void set_SecondsRemaining(InArgument`1<int> value);
    public InArgument`1<string> get_CurrentOperation();
    public void set_CurrentOperation(InArgument`1<string> value);
    public InArgument`1<int> get_ParentId();
    public void set_ParentId(InArgument`1<int> value);
    public InArgument`1<SwitchParameter> get_Completed();
    public void set_Completed(InArgument`1<SwitchParameter> value);
    public InArgument`1<int> get_SourceId();
    public void set_SourceId(InArgument`1<int> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.WriteVerbose : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> Message { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Message();
    public void set_Message(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public class Microsoft.PowerShell.Utility.Activities.WriteWarning : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> Message { get; public set; }
    public string PSCommandName { get; }
    public virtual string get_PSCommandName();
    public InArgument`1<string> get_Message();
    public void set_Message(InArgument`1<string> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
