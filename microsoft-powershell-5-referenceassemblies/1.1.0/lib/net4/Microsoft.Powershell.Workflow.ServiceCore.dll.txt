public class Microsoft.PowerShell.Activities.ActivityImplementationContext : object {
    public Nullable`1<bool> AppendOutput { get; public set; }
    public string Authority { get; public set; }
    public CimSession[] CimSession { get; public set; }
    public WSManConnectionInfo ConnectionInfo { get; public set; }
    public Nullable`1<bool> Debug { get; public set; }
    public bool EnableAllPrivileges { get; public set; }
    public Nullable`1<ActionPreference> ErrorAction { get; public set; }
    public ImpersonationLevel Impersonation { get; public set; }
    public Nullable`1<ActionPreference> InformationAction { get; public set; }
    public PSDataCollection`1<PSObject> Input { get; public set; }
    public string Locale { get; public set; }
    public Nullable`1<bool> MergeErrorToOutput { get; public set; }
    public string Namespace { get; public set; }
    public Nullable`1<UInt32> PSActionRetryCount { get; public set; }
    public Nullable`1<UInt32> PSActionRetryIntervalSec { get; public set; }
    public Nullable`1<UInt32> PSActionRunningTimeoutSec { get; public set; }
    public PSActivityEnvironment PSActivityEnvironment { get; public set; }
    public Nullable`1<bool> PSAllowRedirection { get; public set; }
    public string PSApplicationName { get; public set; }
    public Nullable`1<AuthenticationMechanism> PSAuthentication { get; public set; }
    public AuthenticationLevel PSAuthenticationLevel { get; public set; }
    public string PSCertificateThumbprint { get; public set; }
    public String[] PSComputerName { get; public set; }
    public string PSConfigurationName { get; public set; }
    public Nullable`1<UInt32> PSConnectionRetryCount { get; public set; }
    public Nullable`1<UInt32> PSConnectionRetryIntervalSec { get; public set; }
    public String[] PSConnectionUri { get; public set; }
    public PSCredential PSCredential { get; public set; }
    public PSDataCollection`1<DebugRecord> PSDebug { get; public set; }
    public Nullable`1<bool> PSDisableSerialization { get; public set; }
    public PSDataCollection`1<ErrorRecord> PSError { get; public set; }
    public PSDataCollection`1<InformationRecord> PSInformation { get; public set; }
    public Nullable`1<bool> PSPersist { get; public set; }
    public Nullable`1<UInt32> PSPort { get; public set; }
    public PSDataCollection`1<ProgressRecord> PSProgress { get; public set; }
    public string PSProgressMessage { get; public set; }
    public RemotingBehavior PSRemotingBehavior { get; public set; }
    public String[] PSRequiredModules { get; public set; }
    public PSSessionOption PSSessionOption { get; public set; }
    public Nullable`1<bool> PSUseSsl { get; public set; }
    public PSDataCollection`1<VerboseRecord> PSVerbose { get; public set; }
    public PSDataCollection`1<WarningRecord> PSWarning { get; public set; }
    public string PSWorkflowPath { get; public set; }
    public PowerShell PowerShellInstance { get; public set; }
    public PSDataCollection`1<PSObject> Result { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public Nullable`1<ActionPreference> WarningAction { get; public set; }
    public Nullable`1<bool> WhatIf { get; public set; }
    public object WorkflowContext { get; public set; }
    public PowerShell get_PowerShellInstance();
    public void set_PowerShellInstance(PowerShell value);
    public object get_WorkflowContext();
    public void set_WorkflowContext(object value);
    public PSDataCollection`1<PSObject> get_Input();
    public void set_Input(PSDataCollection`1<PSObject> value);
    public PSDataCollection`1<PSObject> get_Result();
    public void set_Result(PSDataCollection`1<PSObject> value);
    public PSDataCollection`1<ErrorRecord> get_PSError();
    public void set_PSError(PSDataCollection`1<ErrorRecord> value);
    public PSDataCollection`1<ProgressRecord> get_PSProgress();
    public void set_PSProgress(PSDataCollection`1<ProgressRecord> value);
    public PSDataCollection`1<VerboseRecord> get_PSVerbose();
    public void set_PSVerbose(PSDataCollection`1<VerboseRecord> value);
    public PSDataCollection`1<DebugRecord> get_PSDebug();
    public void set_PSDebug(PSDataCollection`1<DebugRecord> value);
    public PSDataCollection`1<WarningRecord> get_PSWarning();
    public void set_PSWarning(PSDataCollection`1<WarningRecord> value);
    public PSDataCollection`1<InformationRecord> get_PSInformation();
    public void set_PSInformation(PSDataCollection`1<InformationRecord> value);
    public String[] get_PSComputerName();
    public void set_PSComputerName(String[] value);
    public PSCredential get_PSCredential();
    public void set_PSCredential(PSCredential value);
    public RemotingBehavior get_PSRemotingBehavior();
    public void set_PSRemotingBehavior(RemotingBehavior value);
    public Nullable`1<UInt32> get_PSConnectionRetryCount();
    public void set_PSConnectionRetryCount(Nullable`1<UInt32> value);
    public Nullable`1<UInt32> get_PSPort();
    public void set_PSPort(Nullable`1<UInt32> value);
    public Nullable`1<bool> get_PSUseSsl();
    public void set_PSUseSsl(Nullable`1<bool> value);
    public Nullable`1<bool> get_PSAllowRedirection();
    public void set_PSAllowRedirection(Nullable`1<bool> value);
    public string get_PSApplicationName();
    public void set_PSApplicationName(string value);
    public string get_PSConfigurationName();
    public void set_PSConfigurationName(string value);
    public String[] get_PSConnectionUri();
    public void set_PSConnectionUri(String[] value);
    public Nullable`1<AuthenticationMechanism> get_PSAuthentication();
    public void set_PSAuthentication(Nullable`1<AuthenticationMechanism> value);
    public string get_PSCertificateThumbprint();
    public void set_PSCertificateThumbprint(string value);
    public PSSessionOption get_PSSessionOption();
    public void set_PSSessionOption(PSSessionOption value);
    public Nullable`1<bool> get_PSDisableSerialization();
    public void set_PSDisableSerialization(Nullable`1<bool> value);
    public Nullable`1<bool> get_PSPersist();
    public void set_PSPersist(Nullable`1<bool> value);
    public Nullable`1<bool> get_AppendOutput();
    public void set_AppendOutput(Nullable`1<bool> value);
    public Nullable`1<bool> get_MergeErrorToOutput();
    public void set_MergeErrorToOutput(Nullable`1<bool> value);
    public Nullable`1<UInt32> get_PSActionRunningTimeoutSec();
    public void set_PSActionRunningTimeoutSec(Nullable`1<UInt32> value);
    public Nullable`1<UInt32> get_PSConnectionRetryIntervalSec();
    public void set_PSConnectionRetryIntervalSec(Nullable`1<UInt32> value);
    public Nullable`1<UInt32> get_PSActionRetryCount();
    public void set_PSActionRetryCount(Nullable`1<UInt32> value);
    public Nullable`1<UInt32> get_PSActionRetryIntervalSec();
    public void set_PSActionRetryIntervalSec(Nullable`1<UInt32> value);
    public string get_PSProgressMessage();
    public void set_PSProgressMessage(string value);
    public WSManConnectionInfo get_ConnectionInfo();
    public void set_ConnectionInfo(WSManConnectionInfo value);
    public String[] get_PSRequiredModules();
    public void set_PSRequiredModules(String[] value);
    public string get_PSWorkflowPath();
    public void set_PSWorkflowPath(string value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
    public Nullable`1<bool> get_Debug();
    public void set_Debug(Nullable`1<bool> value);
    public Nullable`1<bool> get_WhatIf();
    public void set_WhatIf(Nullable`1<bool> value);
    public Nullable`1<ActionPreference> get_ErrorAction();
    public void set_ErrorAction(Nullable`1<ActionPreference> value);
    public Nullable`1<ActionPreference> get_WarningAction();
    public void set_WarningAction(Nullable`1<ActionPreference> value);
    public Nullable`1<ActionPreference> get_InformationAction();
    public void set_InformationAction(Nullable`1<ActionPreference> value);
    public PSActivityEnvironment get_PSActivityEnvironment();
    public void set_PSActivityEnvironment(PSActivityEnvironment value);
    public AuthenticationLevel get_PSAuthenticationLevel();
    public void set_PSAuthenticationLevel(AuthenticationLevel value);
    public ImpersonationLevel get_Impersonation();
    public void set_Impersonation(ImpersonationLevel value);
    public bool get_EnableAllPrivileges();
    public void set_EnableAllPrivileges(bool value);
    public string get_Authority();
    public void set_Authority(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_Locale();
    public void set_Locale(string value);
    public CimSession[] get_CimSession();
    public void set_CimSession(CimSession[] value);
    public virtual void CleanUp();
}
public enum Microsoft.PowerShell.Activities.ActivityOnResumeAction : Enum {
    public int value__;
    public static ActivityOnResumeAction Restart;
    public static ActivityOnResumeAction Resume;
}
[AttributeUsageAttribute("32767")]
public class Microsoft.PowerShell.Activities.BehaviorCategoryAttribute : CategoryAttribute {
    protected virtual string GetLocalizedString(string value);
}
public class Microsoft.PowerShell.Activities.CimActivityImplementationContext : ActivityImplementationContext {
    public string ComputerName { get; public set; }
    public string ModuleDefinition { get; }
    public ScriptBlock ModuleScriptBlock { get; }
    public Uri ResourceUri { get; public set; }
    public CimSession Session { get; public set; }
    public CimSessionOptions SessionOptions { get; public set; }
    public CimActivityImplementationContext(ActivityImplementationContext activityImplementationContext, string computerName, PSCredential credential, string certificateThumbprint, Nullable`1<AuthenticationMechanism> authenticationMechanism, bool useSsl, UInt32 port, PSSessionOption sessionOption, CimSession session, CimSessionOptions cimSessionOptions, string moduleDefinition, Uri resourceUri);
    public ScriptBlock get_ModuleScriptBlock();
    public Uri get_ResourceUri();
    public void set_ResourceUri(Uri value);
    public CimSession get_Session();
    public void set_Session(CimSession value);
    public CimSessionOptions get_SessionOptions();
    public void set_SessionOptions(CimSessionOptions value);
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public string get_ModuleDefinition();
    public virtual void CleanUp();
}
[AttributeUsageAttribute("32767")]
public class Microsoft.PowerShell.Activities.ConnectivityCategoryAttribute : CategoryAttribute {
    protected virtual string GetLocalizedString(string value);
}
public class Microsoft.PowerShell.Activities.DisablePSWorkflowConnection : PSCleanupActivity {
    public InArgument`1<int> TimeoutSec { get; public set; }
    public InArgument`1<int> get_TimeoutSec();
    public void set_TimeoutSec(InArgument`1<int> value);
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public abstract class Microsoft.PowerShell.Activities.GenericCimCmdletActivity : PSGeneratedCIMActivity {
    protected string ModuleDefinition { get; }
    public Type TypeImplementingCmdlet { get; }
    protected virtual string get_ModuleDefinition();
    public abstract virtual Type get_TypeImplementingCmdlet();
}
public class Microsoft.PowerShell.Activities.HostParameterDefaults : object {
    public Action`1<object> ActivateDelegate { get; public set; }
    public Dictionary`2<string, PSActivityContext> AsyncExecutionCollection { get; public set; }
    public HostSettingCommandMetadata HostCommandMetadata { get; public set; }
    public Func`1<bool> HostPersistenceDelegate { get; public set; }
    public Guid JobInstanceId { get; public set; }
    public Dictionary`2<string, object> Parameters { get; public set; }
    public PSWorkflowRemoteActivityState RemoteActivityState { get; public set; }
    public PSWorkflowHost Runtime { get; public set; }
    public Dictionary`2<string, object> get_Parameters();
    public void set_Parameters(Dictionary`2<string, object> value);
    public HostSettingCommandMetadata get_HostCommandMetadata();
    public void set_HostCommandMetadata(HostSettingCommandMetadata value);
    public Guid get_JobInstanceId();
    public void set_JobInstanceId(Guid value);
    public PSWorkflowHost get_Runtime();
    public void set_Runtime(PSWorkflowHost value);
    public Func`1<bool> get_HostPersistenceDelegate();
    public void set_HostPersistenceDelegate(Func`1<bool> value);
    public Action`1<object> get_ActivateDelegate();
    public void set_ActivateDelegate(Action`1<object> value);
    public Dictionary`2<string, PSActivityContext> get_AsyncExecutionCollection();
    public void set_AsyncExecutionCollection(Dictionary`2<string, PSActivityContext> value);
    public PSWorkflowRemoteActivityState get_RemoteActivityState();
    public void set_RemoteActivityState(PSWorkflowRemoteActivityState value);
    public sealed virtual void Dispose();
}
public class Microsoft.PowerShell.Activities.HostSettingCommandMetadata : object {
    public string CommandName { get; public set; }
    public int EndColumnNumber { get; public set; }
    public int EndLineNumber { get; public set; }
    public int StartColumnNumber { get; public set; }
    public int StartLineNumber { get; public set; }
    public string get_CommandName();
    public void set_CommandName(string value);
    public int get_StartLineNumber();
    public void set_StartLineNumber(int value);
    public int get_StartColumnNumber();
    public void set_StartColumnNumber(int value);
    public int get_EndLineNumber();
    public void set_EndLineNumber(int value);
    public int get_EndColumnNumber();
    public void set_EndColumnNumber(int value);
}
public interface Microsoft.PowerShell.Activities.IImplementsConnectionRetry {
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<UInt32>> PSConnectionRetryCount { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<UInt32>> PSConnectionRetryIntervalSec { get; public set; }
    public abstract virtual InArgument`1<Nullable`1<UInt32>> get_PSConnectionRetryCount();
    public abstract virtual void set_PSConnectionRetryCount(InArgument`1<Nullable`1<UInt32>> value);
    public abstract virtual InArgument`1<Nullable`1<UInt32>> get_PSConnectionRetryIntervalSec();
    public abstract virtual void set_PSConnectionRetryIntervalSec(InArgument`1<Nullable`1<UInt32>> value);
}
[AttributeUsageAttribute("32767")]
public class Microsoft.PowerShell.Activities.InputAndOutputCategoryAttribute : CategoryAttribute {
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
public class Microsoft.PowerShell.Activities.ParameterSpecificCategoryAttribute : CategoryAttribute {
    protected virtual string GetLocalizedString(string value);
}
public abstract class Microsoft.PowerShell.Activities.PipelineEnabledActivity : NativeActivity {
    [DefaultValueAttribute("")]
public Nullable`1<bool> AppendOutput { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSDataCollection`1<PSObject>> Input { get; public set; }
    [DefaultValueAttribute("")]
public InOutArgument`1<PSDataCollection`1<PSObject>> Result { get; public set; }
    [DefaultValueAttribute("False")]
public bool UseDefaultInput { get; public set; }
    public InArgument`1<PSDataCollection`1<PSObject>> get_Input();
    public void set_Input(InArgument`1<PSDataCollection`1<PSObject>> value);
    public bool get_UseDefaultInput();
    public void set_UseDefaultInput(bool value);
    public InOutArgument`1<PSDataCollection`1<PSObject>> get_Result();
    public void set_Result(InOutArgument`1<PSDataCollection`1<PSObject>> value);
    public Nullable`1<bool> get_AppendOutput();
    public void set_AppendOutput(Nullable`1<bool> value);
}
public abstract class Microsoft.PowerShell.Activities.PSActivity : PipelineEnabledActivity {
    public static string PSBookmarkPrefix;
    public static string PSPersistBookmarkPrefix;
    public static string PSSuspendBookmarkPrefix;
    protected bool CanInduceIdle { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<bool>> Debug { get; public set; }
    protected string DefiningModule { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<ActionPreference>> ErrorAction { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<ActionPreference>> InformationAction { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<bool>> MergeErrorToOutput { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<UInt32>> PSActionRetryCount { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<UInt32>> PSActionRetryIntervalSec { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<UInt32>> PSActionRunningTimeoutSec { get; public set; }
    public string PSCommandName { get; }
    [DefaultValueAttribute("")]
public InOutArgument`1<PSDataCollection`1<DebugRecord>> PSDebug { get; public set; }
    protected string PSDefiningModule { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<bool>> PSDisableSerialization { get; public set; }
    [DefaultValueAttribute("")]
public InOutArgument`1<PSDataCollection`1<ErrorRecord>> PSError { get; public set; }
    [DefaultValueAttribute("")]
public InOutArgument`1<PSDataCollection`1<InformationRecord>> PSInformation { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<bool>> PSPersist { get; public set; }
    [DefaultValueAttribute("")]
public InOutArgument`1<PSDataCollection`1<ProgressRecord>> PSProgress { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> PSProgressMessage { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> PSRequiredModules { get; public set; }
    [DefaultValueAttribute("")]
public InOutArgument`1<PSDataCollection`1<VerboseRecord>> PSVerbose { get; public set; }
    [DefaultValueAttribute("")]
public InOutArgument`1<PSDataCollection`1<WarningRecord>> PSWarning { get; public set; }
    protected Variable`1<Dictionary`2<string, object>> ParameterDefaults { get; protected set; }
    protected PowerShellTraceSource Tracer { get; }
    protected bool UpdatePreferenceVariable { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<bool>> Verbose { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<ActionPreference>> WarningAction { get; public set; }
    public virtual string get_PSCommandName();
    protected virtual string get_PSDefiningModule();
    protected PowerShellTraceSource get_Tracer();
    public InArgument`1<string> get_PSProgressMessage();
    public void set_PSProgressMessage(InArgument`1<string> value);
    public InOutArgument`1<PSDataCollection`1<ErrorRecord>> get_PSError();
    public void set_PSError(InOutArgument`1<PSDataCollection`1<ErrorRecord>> value);
    public InOutArgument`1<PSDataCollection`1<ProgressRecord>> get_PSProgress();
    public void set_PSProgress(InOutArgument`1<PSDataCollection`1<ProgressRecord>> value);
    public InOutArgument`1<PSDataCollection`1<VerboseRecord>> get_PSVerbose();
    public void set_PSVerbose(InOutArgument`1<PSDataCollection`1<VerboseRecord>> value);
    public InOutArgument`1<PSDataCollection`1<DebugRecord>> get_PSDebug();
    public void set_PSDebug(InOutArgument`1<PSDataCollection`1<DebugRecord>> value);
    public InOutArgument`1<PSDataCollection`1<WarningRecord>> get_PSWarning();
    public void set_PSWarning(InOutArgument`1<PSDataCollection`1<WarningRecord>> value);
    public InOutArgument`1<PSDataCollection`1<InformationRecord>> get_PSInformation();
    public void set_PSInformation(InOutArgument`1<PSDataCollection`1<InformationRecord>> value);
    public InArgument`1<Nullable`1<bool>> get_PSDisableSerialization();
    public void set_PSDisableSerialization(InArgument`1<Nullable`1<bool>> value);
    public InArgument`1<Nullable`1<bool>> get_PSPersist();
    public void set_PSPersist(InArgument`1<Nullable`1<bool>> value);
    public InArgument`1<Nullable`1<bool>> get_MergeErrorToOutput();
    public void set_MergeErrorToOutput(InArgument`1<Nullable`1<bool>> value);
    public InArgument`1<Nullable`1<UInt32>> get_PSActionRunningTimeoutSec();
    public void set_PSActionRunningTimeoutSec(InArgument`1<Nullable`1<UInt32>> value);
    public InArgument`1<String[]> get_PSRequiredModules();
    public void set_PSRequiredModules(InArgument`1<String[]> value);
    public InArgument`1<Nullable`1<UInt32>> get_PSActionRetryCount();
    public void set_PSActionRetryCount(InArgument`1<Nullable`1<UInt32>> value);
    public InArgument`1<Nullable`1<UInt32>> get_PSActionRetryIntervalSec();
    public void set_PSActionRetryIntervalSec(InArgument`1<Nullable`1<UInt32>> value);
    public InArgument`1<Nullable`1<bool>> get_Verbose();
    public void set_Verbose(InArgument`1<Nullable`1<bool>> value);
    public InArgument`1<Nullable`1<bool>> get_Debug();
    public void set_Debug(InArgument`1<Nullable`1<bool>> value);
    public InArgument`1<Nullable`1<ActionPreference>> get_ErrorAction();
    public void set_ErrorAction(InArgument`1<Nullable`1<ActionPreference>> value);
    public InArgument`1<Nullable`1<ActionPreference>> get_WarningAction();
    public void set_WarningAction(InArgument`1<Nullable`1<ActionPreference>> value);
    public InArgument`1<Nullable`1<ActionPreference>> get_InformationAction();
    public void set_InformationAction(InArgument`1<Nullable`1<ActionPreference>> value);
    protected Variable`1<Dictionary`2<string, object>> get_ParameterDefaults();
    protected void set_ParameterDefaults(Variable`1<Dictionary`2<string, object>> value);
    protected virtual bool get_CanInduceIdle();
    protected virtual void Execute(NativeActivityContext context);
    protected void WriteProgressRecord(NativeActivityContext context, PSDataCollection`1<ProgressRecord> progress, string statusDescription, ProgressRecordType type);
    protected virtual void ActivityEndPersistence(NativeActivityContext context);
    protected virtual List`1<ActivityImplementationContext> GetImplementation(NativeActivityContext context);
    protected internal void UpdateImplementationContextForLocalExecution(ActivityImplementationContext implementationContext, ActivityContext context);
    protected abstract virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
    protected virtual void PrepareSession(ActivityImplementationContext implementationContext);
    protected string get_DefiningModule();
    protected IEnumerable`1<PSActivityArgumentInfo> GetActivityArguments();
    protected virtual bool get_UpdatePreferenceVariable();
    protected virtual void Cancel(NativeActivityContext context);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected bool GetRunInProc(ActivityContext context);
}
public class Microsoft.PowerShell.Activities.PSActivityArgumentInfo : object {
    public string Name { get; public set; }
    public Argument Value { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public Argument get_Value();
    public void set_Value(Argument value);
}
public class Microsoft.PowerShell.Activities.PSActivityContext : object {
    public bool IsCanceled { get; public set; }
    public bool get_IsCanceled();
    public void set_IsCanceled(bool value);
    public void Cancel();
    public bool Execute();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.PowerShell.Activities.PSActivityEnvironment : object {
    public Collection`1<string> Modules { get; }
    public Dictionary`2<string, object> Variables { get; }
    public Collection`1<string> get_Modules();
    public Dictionary`2<string, object> get_Variables();
}
public abstract class Microsoft.PowerShell.Activities.PSActivityHostController : object {
    protected PSActivityHostController(PSWorkflowRuntime runtime);
    public virtual bool RunInActivityController(Activity activity);
}
public abstract class Microsoft.PowerShell.Activities.PSCleanupActivity : PSRemotingActivity {
    protected virtual ActivityImplementationContext GetPowerShell(NativeActivityContext context);
}
public abstract class Microsoft.PowerShell.Activities.PSGeneratedCIMActivity : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<CimSession[]> CimSession { get; public set; }
    protected string ModuleDefinition { get; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<AuthenticationMechanism>> PSAuthentication { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> PSCertificateThumbprint { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> PSComputerName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<UInt32>> PSConnectionRetryCount { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<UInt32>> PSConnectionRetryIntervalSec { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> PSCredential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<UInt32>> PSPort { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSSessionOption> PSSessionOption { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<bool>> PSUseSsl { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Uri> ResourceUri { get; public set; }
    public InArgument`1<String[]> get_PSComputerName();
    public void set_PSComputerName(InArgument`1<String[]> value);
    public InArgument`1<PSCredential> get_PSCredential();
    public void set_PSCredential(InArgument`1<PSCredential> value);
    public InArgument`1<Nullable`1<AuthenticationMechanism>> get_PSAuthentication();
    public void set_PSAuthentication(InArgument`1<Nullable`1<AuthenticationMechanism>> value);
    public InArgument`1<string> get_PSCertificateThumbprint();
    public void set_PSCertificateThumbprint(InArgument`1<string> value);
    public sealed virtual InArgument`1<Nullable`1<UInt32>> get_PSConnectionRetryCount();
    public sealed virtual void set_PSConnectionRetryCount(InArgument`1<Nullable`1<UInt32>> value);
    public sealed virtual InArgument`1<Nullable`1<UInt32>> get_PSConnectionRetryIntervalSec();
    public sealed virtual void set_PSConnectionRetryIntervalSec(InArgument`1<Nullable`1<UInt32>> value);
    public InArgument`1<Uri> get_ResourceUri();
    public void set_ResourceUri(InArgument`1<Uri> value);
    public InArgument`1<Nullable`1<UInt32>> get_PSPort();
    public void set_PSPort(InArgument`1<Nullable`1<UInt32>> value);
    public InArgument`1<Nullable`1<bool>> get_PSUseSsl();
    public void set_PSUseSsl(InArgument`1<Nullable`1<bool>> value);
    public InArgument`1<PSSessionOption> get_PSSessionOption();
    public void set_PSSessionOption(InArgument`1<PSSessionOption> value);
    public InArgument`1<CimSession[]> get_CimSession();
    public void set_CimSession(InArgument`1<CimSession[]> value);
    protected abstract virtual string get_ModuleDefinition();
    protected bool GetIsComputerNameSpecified(ActivityContext context);
    protected virtual List`1<ActivityImplementationContext> GetImplementation(NativeActivityContext context);
}
public abstract class Microsoft.PowerShell.Activities.PSRemotingActivity : PSActivity {
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<bool>> PSAllowRedirection { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> PSApplicationName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<AuthenticationMechanism>> PSAuthentication { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> PSCertificateThumbprint { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> PSComputerName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> PSConfigurationName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<UInt32>> PSConnectionRetryCount { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<UInt32>> PSConnectionRetryIntervalSec { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> PSConnectionUri { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> PSCredential { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<UInt32>> PSPort { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<RemotingBehavior> PSRemotingBehavior { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSSessionOption> PSSessionOption { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Nullable`1<bool>> PSUseSsl { get; public set; }
    protected bool SupportsCustomRemoting { get; }
    public InArgument`1<String[]> get_PSComputerName();
    public void set_PSComputerName(InArgument`1<String[]> value);
    public InArgument`1<PSCredential> get_PSCredential();
    public void set_PSCredential(InArgument`1<PSCredential> value);
    public InArgument`1<RemotingBehavior> get_PSRemotingBehavior();
    public void set_PSRemotingBehavior(InArgument`1<RemotingBehavior> value);
    public sealed virtual InArgument`1<Nullable`1<UInt32>> get_PSConnectionRetryCount();
    public sealed virtual void set_PSConnectionRetryCount(InArgument`1<Nullable`1<UInt32>> value);
    public sealed virtual InArgument`1<Nullable`1<UInt32>> get_PSConnectionRetryIntervalSec();
    public sealed virtual void set_PSConnectionRetryIntervalSec(InArgument`1<Nullable`1<UInt32>> value);
    public InArgument`1<Nullable`1<UInt32>> get_PSPort();
    public void set_PSPort(InArgument`1<Nullable`1<UInt32>> value);
    public InArgument`1<Nullable`1<bool>> get_PSUseSsl();
    public void set_PSUseSsl(InArgument`1<Nullable`1<bool>> value);
    public InArgument`1<Nullable`1<bool>> get_PSAllowRedirection();
    public void set_PSAllowRedirection(InArgument`1<Nullable`1<bool>> value);
    public InArgument`1<string> get_PSApplicationName();
    public void set_PSApplicationName(InArgument`1<string> value);
    public InArgument`1<string> get_PSConfigurationName();
    public void set_PSConfigurationName(InArgument`1<string> value);
    public InArgument`1<String[]> get_PSConnectionUri();
    public void set_PSConnectionUri(InArgument`1<String[]> value);
    public InArgument`1<Nullable`1<AuthenticationMechanism>> get_PSAuthentication();
    public void set_PSAuthentication(InArgument`1<Nullable`1<AuthenticationMechanism>> value);
    public InArgument`1<string> get_PSCertificateThumbprint();
    public void set_PSCertificateThumbprint(InArgument`1<string> value);
    public InArgument`1<PSSessionOption> get_PSSessionOption();
    public void set_PSSessionOption(InArgument`1<PSSessionOption> value);
    protected virtual bool get_SupportsCustomRemoting();
    protected bool GetIsComputerNameSpecified(ActivityContext context);
    protected virtual List`1<ActivityImplementationContext> GetImplementation(NativeActivityContext context);
}
public abstract class Microsoft.PowerShell.Activities.PSResumableActivityHostController : PSActivityHostController {
    public bool SupportDisconnectedPSStreams { get; }
    protected PSResumableActivityHostController(PSWorkflowRuntime runtime);
    public virtual void StartResumablePSCommand(Guid jobInstanceId, Bookmark bookmark, PowerShell command, PowerShellStreams`2<PSObject, PSObject> streams, PSActivityEnvironment environment, PSActivity activityInstance);
    public virtual void StopAllResumablePSCommands(Guid jobInstanceId);
    public virtual bool get_SupportDisconnectedPSStreams();
}
public abstract class Microsoft.PowerShell.Activities.PSWorkflowHost : object {
    public RunspaceProvider LocalRunspaceProvider { get; }
    public PSActivityHostController PSActivityHostController { get; }
    public RunspaceProvider RemoteRunspaceProvider { get; }
    public RunspaceProvider UnboundedLocalRunspaceProvider { get; }
    public virtual PSActivityHostController get_PSActivityHostController();
    public virtual RunspaceProvider get_RemoteRunspaceProvider();
    public virtual RunspaceProvider get_LocalRunspaceProvider();
    public virtual RunspaceProvider get_UnboundedLocalRunspaceProvider();
}
public class Microsoft.PowerShell.Activities.PSWorkflowInstanceExtension : object {
    public sealed virtual IEnumerable`1<object> GetAdditionalExtensions();
    public sealed virtual void SetInstance(WorkflowInstanceProxy instance);
    public IAsyncResult BeginResumeBookmark(Bookmark bookmark, object value, AsyncCallback callback, object state);
    public BookmarkResumptionResult EndResumeBookmark(IAsyncResult asyncResult);
}
public abstract class Microsoft.PowerShell.Activities.RunspaceProvider : object {
    public virtual IAsyncResult BeginGetRunspace(WSManConnectionInfo connectionInfo, UInt32 retryCount, UInt32 retryInterval, AsyncCallback callback, object state);
    public virtual Runspace EndGetRunspace(IAsyncResult asyncResult);
    public virtual Runspace GetRunspace(WSManConnectionInfo connectionInfo, UInt32 retryCount, UInt32 retryInterval);
    public virtual void ReleaseRunspace(Runspace runspace);
    public virtual void ReadyForDisconnect(Runspace runspace);
    public virtual void RequestCleanup(WSManConnectionInfo connectionInfo, WaitCallback callback, object state);
    public virtual bool IsDisconnectedByRunspaceProvider(Runspace runspace);
}
public abstract class Microsoft.PowerShell.Activities.WmiActivity : PSActivity {
    [DefaultValueAttribute("")]
public string Authority { get; public set; }
    [DefaultValueAttribute("")]
public bool EnableAllPrivileges { get; public set; }
    [DefaultValueAttribute("")]
public ImpersonationLevel Impersonation { get; public set; }
    [DefaultValueAttribute("")]
public string Locale { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Namespace { get; public set; }
    [DefaultValueAttribute("")]
public AuthenticationLevel PSAuthenticationLevel { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<String[]> PSComputerName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<PSCredential> PSCredential { get; public set; }
    public InArgument`1<String[]> get_PSComputerName();
    public void set_PSComputerName(InArgument`1<String[]> value);
    public InArgument`1<PSCredential> get_PSCredential();
    public void set_PSCredential(InArgument`1<PSCredential> value);
    public AuthenticationLevel get_PSAuthenticationLevel();
    public void set_PSAuthenticationLevel(AuthenticationLevel value);
    public ImpersonationLevel get_Impersonation();
    public void set_Impersonation(ImpersonationLevel value);
    public bool get_EnableAllPrivileges();
    public void set_EnableAllPrivileges(bool value);
    public string get_Authority();
    public void set_Authority(string value);
    public InArgument`1<string> get_Namespace();
    public void set_Namespace(InArgument`1<string> value);
    public string get_Locale();
    public void set_Locale(string value);
    protected T GetUbiquitousParameter(string parameterName, Dictionary`2<string, object> parameterDefaults);
    protected PowerShell GetWmiCommandCore(NativeActivityContext context, string name);
    protected virtual List`1<ActivityImplementationContext> GetImplementation(NativeActivityContext context);
}
public static class Microsoft.PowerShell.Activities.WorkflowPreferenceVariables : object {
    public static string PSParentActivityId;
    public static string PSPersistPreference;
    public static string PSRunInProcessPreference;
}
public class Microsoft.PowerShell.Commands.ImportWorkflowCommand : PSCmdlet {
    public String[] DependentAssemblies { get; public set; }
    public String[] DependentWorkflow { get; public set; }
    public SwitchParameter Force { get; public set; }
    public static string InvalidPSParameterCollectionAdditionalErrorMessage { get; }
    public static string InvalidPSParameterCollectionEntryErrorMessage { get; }
    public static string ParameterErrorMessage { get; }
    public String[] Path { get; public set; }
    public static string UnableToStartWorkflowMessageMessage { get; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_DependentWorkflow();
    public void set_DependentWorkflow(String[] value);
    public String[] get_DependentAssemblies();
    public void set_DependentAssemblies(String[] value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    protected virtual void ProcessRecord();
    public static ContainerParentJob StartWorkflowApplication(PSCmdlet command, string jobName, string workflowGuid, bool startAsync, bool parameterCollectionProcessed, Hashtable[] parameters);
    public static ContainerParentJob StartWorkflowApplication(PSCmdlet command, string jobName, string workflowGuid, bool startAsync, bool parameterCollectionProcessed, Hashtable[] parameters, bool debuggerActive);
    public static string get_ParameterErrorMessage();
    public static string get_InvalidPSParameterCollectionEntryErrorMessage();
    public static string get_InvalidPSParameterCollectionAdditionalErrorMessage();
    public static string get_UnableToStartWorkflowMessageMessage();
    public static string CreateFunctionFromXaml(string name, string xaml, Dictionary`2<string, string> requiredAssemblies, String[] dependentWorkflows, string dependentAssemblyPath, Dictionary`2<string, ParameterAst> parameterValidation, string modulePath, bool scriptWorkflow, string workflowAttributes);
    public static string CreateFunctionFromXaml(string name, string xaml, Dictionary`2<string, string> requiredAssemblies, String[] dependentWorkflows, string dependentAssemblyPath, Dictionary`2<string, ParameterAst> parameterValidation, string modulePath, bool scriptWorkflow, string workflowAttributes, string scriptContent);
    public static string CreateFunctionFromXaml(string name, string xaml, Dictionary`2<string, string> requiredAssemblies, String[] dependentWorkflows, string dependentAssemblyPath, Dictionary`2<string, ParameterAst> parameterValidation, string modulePath, bool scriptWorkflow, string workflowAttributes, string scriptContent, string fullScript);
    public static string CreateFunctionFromXaml(string name, string xaml, Dictionary`2<string, string> requiredAssemblies, String[] dependentWorkflows, string dependentAssemblyPath, Dictionary`2<string, ParameterAst> parameterValidation, string modulePath, bool scriptWorkflow, string workflowAttributes, string scriptContent, string fullScript, string rootWorkflowName);
    public static Hashtable[] MergeParameterCollection(Hashtable[] parameterCollection, Hashtable defaultsParameterCollection);
}
public class Microsoft.PowerShell.Commands.NewPSWorkflowExecutionOptionCommand : PSCmdlet {
    public int ActivityProcessIdleTimeoutSec { get; public set; }
    public String[] AllowedActivity { get; public set; }
    public SwitchParameter EnableValidation { get; public set; }
    public int MaxActivityProcesses { get; public set; }
    public int MaxConnectedSessions { get; public set; }
    public int MaxDisconnectedSessions { get; public set; }
    public long MaxPersistenceStoreSizeGB { get; public set; }
    public int MaxRunningWorkflows { get; public set; }
    public int MaxSessionsPerRemoteNode { get; public set; }
    public int MaxSessionsPerWorkflow { get; public set; }
    public String[] OutOfProcessActivity { get; public set; }
    public SwitchParameter PersistWithEncryption { get; public set; }
    public string PersistencePath { get; public set; }
    public int RemoteNodeSessionIdleTimeoutSec { get; public set; }
    public int SessionThrottleLimit { get; public set; }
    public int WorkflowShutdownTimeoutMSec { get; public set; }
    public string get_PersistencePath();
    public void set_PersistencePath(string value);
    public long get_MaxPersistenceStoreSizeGB();
    public void set_MaxPersistenceStoreSizeGB(long value);
    public SwitchParameter get_PersistWithEncryption();
    public void set_PersistWithEncryption(SwitchParameter value);
    public int get_MaxRunningWorkflows();
    public void set_MaxRunningWorkflows(int value);
    public String[] get_AllowedActivity();
    public void set_AllowedActivity(String[] value);
    public String[] get_OutOfProcessActivity();
    public void set_OutOfProcessActivity(String[] value);
    public SwitchParameter get_EnableValidation();
    public void set_EnableValidation(SwitchParameter value);
    public int get_MaxDisconnectedSessions();
    public void set_MaxDisconnectedSessions(int value);
    public int get_MaxConnectedSessions();
    public void set_MaxConnectedSessions(int value);
    public int get_MaxSessionsPerWorkflow();
    public void set_MaxSessionsPerWorkflow(int value);
    public int get_MaxSessionsPerRemoteNode();
    public void set_MaxSessionsPerRemoteNode(int value);
    public int get_MaxActivityProcesses();
    public void set_MaxActivityProcesses(int value);
    public int get_ActivityProcessIdleTimeoutSec();
    public void set_ActivityProcessIdleTimeoutSec(int value);
    public int get_RemoteNodeSessionIdleTimeoutSec();
    public void set_RemoteNodeSessionIdleTimeoutSec(int value);
    public int get_SessionThrottleLimit();
    public void set_SessionThrottleLimit(int value);
    public int get_WorkflowShutdownTimeoutMSec();
    public void set_WorkflowShutdownTimeoutMSec(int value);
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.PSWorkflowExecutionOption : PSSessionTypeOption {
    public int ActivityProcessIdleTimeoutSec { get; public set; }
    public String[] AllowedActivity { get; public set; }
    public bool EnableValidation { get; public set; }
    public int MaxActivityProcesses { get; public set; }
    public int MaxConnectedSessions { get; public set; }
    public int MaxDisconnectedSessions { get; public set; }
    public long MaxPersistenceStoreSizeGB { get; public set; }
    public int MaxRunningWorkflows { get; public set; }
    public int MaxSessionsPerRemoteNode { get; public set; }
    public int MaxSessionsPerWorkflow { get; public set; }
    public String[] OutOfProcessActivity { get; public set; }
    public bool PersistWithEncryption { get; public set; }
    public string PersistencePath { get; public set; }
    public int RemoteNodeSessionIdleTimeoutSec { get; public set; }
    public int SessionThrottleLimit { get; public set; }
    public int WorkflowShutdownTimeoutMSec { get; public set; }
    public int get_SessionThrottleLimit();
    public void set_SessionThrottleLimit(int value);
    public string get_PersistencePath();
    public void set_PersistencePath(string value);
    public long get_MaxPersistenceStoreSizeGB();
    public void set_MaxPersistenceStoreSizeGB(long value);
    public bool get_PersistWithEncryption();
    public void set_PersistWithEncryption(bool value);
    public int get_MaxRunningWorkflows();
    public void set_MaxRunningWorkflows(int value);
    public String[] get_AllowedActivity();
    public void set_AllowedActivity(String[] value);
    public String[] get_OutOfProcessActivity();
    public void set_OutOfProcessActivity(String[] value);
    public bool get_EnableValidation();
    public void set_EnableValidation(bool value);
    public int get_MaxDisconnectedSessions();
    public void set_MaxDisconnectedSessions(int value);
    public int get_MaxConnectedSessions();
    public void set_MaxConnectedSessions(int value);
    public int get_MaxSessionsPerWorkflow();
    public void set_MaxSessionsPerWorkflow(int value);
    public int get_MaxSessionsPerRemoteNode();
    public void set_MaxSessionsPerRemoteNode(int value);
    public int get_MaxActivityProcesses();
    public void set_MaxActivityProcesses(int value);
    public int get_ActivityProcessIdleTimeoutSec();
    public void set_ActivityProcessIdleTimeoutSec(int value);
    public int get_RemoteNodeSessionIdleTimeoutSec();
    public void set_RemoteNodeSessionIdleTimeoutSec(int value);
    public int get_WorkflowShutdownTimeoutMSec();
    public void set_WorkflowShutdownTimeoutMSec(int value);
    protected virtual void CopyUpdatedValuesFrom(PSSessionTypeOption updated);
    protected virtual PSSessionTypeOption ConstructObjectFromPrivateData(string privateData);
    protected virtual string ConstructPrivateData();
}
public enum Microsoft.PowerShell.Workflow.ActivityRunMode : Enum {
    public int value__;
    public static ActivityRunMode InProcess;
    public static ActivityRunMode OutOfProcess;
}
public enum Microsoft.PowerShell.Workflow.PSPersistableIdleAction : Enum {
    public int value__;
    public static PSPersistableIdleAction None;
    public static PSPersistableIdleAction NotDefined;
    public static PSPersistableIdleAction Persist;
    public static PSPersistableIdleAction Suspend;
    public static PSPersistableIdleAction Unload;
}
public class Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider : object {
    public int ActivitiesCacheCleanupIntervalMSec { get; }
    public int ActivityProcessIdleTimeoutSec { get; }
    public IEnumerable`1<string> AllowedActivity { get; }
    public bool EnableValidation { get; }
    public Nullable`1<PSLanguageMode> LanguageMode { get; }
    public int MaxActivityProcesses { get; }
    public int MaxConnectedSessions { get; }
    public int MaxDisconnectedSessions { get; }
    public int MaxInProcRunspaces { get; }
    public int MaxRunningWorkflows { get; }
    public int MaxSessionsPerRemoteNode { get; }
    public IEnumerable`1<string> OutOfProcessActivity { get; }
    public int PSWorkflowApplicationPersistUnloadTimeoutSec { get; }
    public int RemoteNodeSessionIdleTimeoutSec { get; }
    public PSWorkflowRuntime Runtime { get; }
    public int SessionThrottleLimit { get; }
    public int WSManPluginReportCompletionOnZeroActiveSessionsWaitIntervalMSec { get; }
    public PSWorkflowConfigurationProvider(string applicationPrivateData, string configProviderId);
    public PSWorkflowRuntime get_Runtime();
    public void Populate(string applicationPrivateData, string configProviderId);
    public virtual PSActivityHostController CreatePSActivityHostController();
    public virtual PSWorkflowInstance CreatePSWorkflowInstance(PSWorkflowDefinition definition, PSWorkflowContext metadata, PSDataCollection`1<PSObject> pipelineInput, PSWorkflowJob job);
    public virtual PSWorkflowInstance CreatePSWorkflowInstance(PSWorkflowId instanceId);
    public virtual PSWorkflowInstanceStore CreatePSWorkflowInstanceStore(PSWorkflowInstance workflowInstance);
    public virtual IEnumerable`1<object> CreateWorkflowExtensions();
    public virtual IEnumerable`1<Func`1<T>> CreateWorkflowExtensionCreationFunctions();
    public virtual RunspaceProvider CreateRemoteRunspaceProvider();
    public virtual RunspaceProvider CreateLocalRunspaceProvider(bool isUnbounded);
    public virtual int get_MaxRunningWorkflows();
    public virtual IEnumerable`1<string> get_AllowedActivity();
    public virtual IEnumerable`1<string> get_OutOfProcessActivity();
    public virtual bool get_EnableValidation();
    public virtual int get_MaxDisconnectedSessions();
    public virtual int get_MaxConnectedSessions();
    public virtual int get_MaxSessionsPerRemoteNode();
    public virtual int get_MaxActivityProcesses();
    public virtual int get_PSWorkflowApplicationPersistUnloadTimeoutSec();
    public virtual int get_WSManPluginReportCompletionOnZeroActiveSessionsWaitIntervalMSec();
    public virtual int get_ActivitiesCacheCleanupIntervalMSec();
    public virtual Nullable`1<PSLanguageMode> get_LanguageMode();
    public virtual int get_ActivityProcessIdleTimeoutSec();
    public virtual int get_RemoteNodeSessionIdleTimeoutSec();
    public virtual int get_SessionThrottleLimit();
    public virtual int get_MaxInProcRunspaces();
    public virtual ActivityRunMode GetActivityRunMode(Activity activity);
}
public class Microsoft.PowerShell.Workflow.PSWorkflowContext : object {
    public Dictionary`2<string, object> JobMetadata { get; public set; }
    public Dictionary`2<string, object> PSWorkflowCommonParameters { get; public set; }
    public Dictionary`2<string, object> PrivateMetadata { get; public set; }
    public Dictionary`2<string, object> WorkflowParameters { get; public set; }
    public PSWorkflowContext(Dictionary`2<string, object> workflowParameters, Dictionary`2<string, object> workflowCommonParameters, Dictionary`2<string, object> jobMetadata, Dictionary`2<string, object> privateMetadata);
    public Dictionary`2<string, object> get_WorkflowParameters();
    public void set_WorkflowParameters(Dictionary`2<string, object> value);
    public Dictionary`2<string, object> get_PSWorkflowCommonParameters();
    public void set_PSWorkflowCommonParameters(Dictionary`2<string, object> value);
    public Dictionary`2<string, object> get_JobMetadata();
    public void set_JobMetadata(Dictionary`2<string, object> value);
    public Dictionary`2<string, object> get_PrivateMetadata();
    public void set_PrivateMetadata(Dictionary`2<string, object> value);
}
public class Microsoft.PowerShell.Workflow.PSWorkflowDefinition : object {
    public Dictionary`2<string, string> RequiredAssemblies { get; }
    public string RuntimeAssemblyPath { get; public set; }
    public Activity Workflow { get; public set; }
    public string WorkflowXaml { get; public set; }
    public PSWorkflowDefinition(Activity workflow, string workflowXaml, string runtimeAssemblyPath, Dictionary`2<string, string> requiredAssemblies);
    public PSWorkflowDefinition(Activity workflow, string workflowXaml, string runtimeAssemblyPath);
    public Activity get_Workflow();
    public void set_Workflow(Activity value);
    public string get_WorkflowXaml();
    public void set_WorkflowXaml(string value);
    public string get_RuntimeAssemblyPath();
    public void set_RuntimeAssemblyPath(string value);
    public Dictionary`2<string, string> get_RequiredAssemblies();
}
public static class Microsoft.PowerShell.Workflow.PSWorkflowExtensions : object {
    public static Func`1<IEnumerable`1<object>> CustomHandler { get; public set; }
    public static Func`1<IEnumerable`1<object>> get_CustomHandler();
    public static void set_CustomHandler(Func`1<IEnumerable`1<object>> value);
}
public class Microsoft.PowerShell.Workflow.PSWorkflowFileInstanceStore : PSWorkflowInstanceStore {
    public PSWorkflowFileInstanceStore(PSWorkflowConfigurationProvider configuration, PSWorkflowInstance instance);
    public static IEnumerable`1<PSWorkflowId> GetAllWorkflowInstanceIds();
    public virtual InstanceStore CreateInstanceStore();
    public virtual PersistenceIOParticipant CreatePersistenceIOParticipant();
    protected virtual void DoSave(IEnumerable`1<object> components);
    protected virtual void DoDelete();
    protected virtual IEnumerable`1<object> DoLoad(IEnumerable`1<Type> componentTypes);
    protected internal virtual ArraySegment`1<byte> Encrypt(ArraySegment`1<byte> source);
    protected internal virtual ArraySegment`1<byte> Decrypt(ArraySegment`1<byte> source);
}
public class Microsoft.PowerShell.Workflow.PSWorkflowId : object {
    public Guid Guid { get; }
    public PSWorkflowId(Guid value);
    public static PSWorkflowId NewWorkflowGuid();
    public Guid get_Guid();
}
public abstract class Microsoft.PowerShell.Workflow.PSWorkflowInstance : object {
    public Dictionary`2<string, object> CreationContext { get; }
    protected bool Disposed { get; protected set; }
    public Exception Error { get; public set; }
    public PSWorkflowId InstanceId { get; }
    public PSWorkflowInstanceStore InstanceStore { get; }
    protected Action`2<Exception, object> OnAborted { get; }
    protected Action`1<object> OnCompleted { get; }
    protected Action`2<Exception, object> OnFaulted { get; }
    protected Action`2<ReadOnlyCollection`1<BookmarkInfo>, object> OnIdle { get; }
    protected Func`4<ReadOnlyCollection`1<BookmarkInfo>, bool, object, PSPersistableIdleAction> OnPersistableIdleAction { get; }
    protected Action`1<object> OnStopped { get; }
    protected Action`1<object> OnSuspended { get; }
    protected Action`1<object> OnUnloaded { get; }
    public PSWorkflowContext PSWorkflowContext { get; public set; }
    public PSWorkflowDefinition PSWorkflowDefinition { get; public set; }
    public PSWorkflowJob PSWorkflowJob { get; protected internal set; }
    public PSWorkflowRemoteActivityState RemoteActivityState { get; public set; }
    public JobState State { get; public set; }
    public PowerShellStreams`2<PSObject, PSObject> Streams { get; public set; }
    protected object SyncLock { get; }
    public PSWorkflowTimer Timer { get; public set; }
    protected void set_Disposed(bool value);
    protected bool get_Disposed();
    protected object get_SyncLock();
    protected virtual void DoStopInstance();
    protected virtual void DoAbortInstance(string reason);
    protected virtual void DoTerminateInstance(string reason);
    protected virtual void DoTerminateInstance(string reason, bool suppressError);
    protected virtual void DoResumeInstance(string label);
    protected virtual void DoSuspendInstance(bool notStarted);
    protected virtual void DoExecuteInstance();
    protected virtual void DoResumeBookmark(Bookmark bookmark, object state);
    protected virtual void DoCreateInstance();
    protected virtual void DoRemoveInstance();
    protected virtual void DoPersistInstance();
    protected virtual PSPersistableIdleAction DoGetPersistableIdleAction(ReadOnlyCollection`1<BookmarkInfo> bookmarks, bool externalSuspendRequest);
    protected virtual void Dispose(bool disposing);
    protected Action`1<object> get_OnCompleted();
    protected Action`2<Exception, object> get_OnFaulted();
    protected Action`1<object> get_OnStopped();
    protected Action`2<Exception, object> get_OnAborted();
    protected Action`1<object> get_OnSuspended();
    protected Action`2<ReadOnlyCollection`1<BookmarkInfo>, object> get_OnIdle();
    protected Func`4<ReadOnlyCollection`1<BookmarkInfo>, bool, object, PSPersistableIdleAction> get_OnPersistableIdleAction();
    protected Action`1<object> get_OnUnloaded();
    public virtual PSWorkflowJob get_PSWorkflowJob();
    protected internal virtual void set_PSWorkflowJob(PSWorkflowJob value);
    public virtual PSWorkflowId get_InstanceId();
    public virtual Dictionary`2<string, object> get_CreationContext();
    public virtual JobState get_State();
    public virtual void set_State(JobState value);
    public virtual PSWorkflowInstanceStore get_InstanceStore();
    public virtual PSWorkflowDefinition get_PSWorkflowDefinition();
    public virtual void set_PSWorkflowDefinition(PSWorkflowDefinition value);
    public virtual PowerShellStreams`2<PSObject, PSObject> get_Streams();
    public virtual void set_Streams(PowerShellStreams`2<PSObject, PSObject> value);
    public virtual PSWorkflowRemoteActivityState get_RemoteActivityState();
    public virtual void set_RemoteActivityState(PSWorkflowRemoteActivityState value);
    public virtual Exception get_Error();
    public virtual void set_Error(Exception value);
    public virtual PSWorkflowTimer get_Timer();
    public virtual void set_Timer(PSWorkflowTimer value);
    public virtual PSWorkflowContext get_PSWorkflowContext();
    public virtual void set_PSWorkflowContext(PSWorkflowContext value);
    public sealed virtual void Dispose();
    public virtual void DisposeStreams();
}
public abstract class Microsoft.PowerShell.Workflow.PSWorkflowInstanceStore : object {
    public PSWorkflowInstance PSWorkflowInstance { get; }
    protected PSWorkflowInstanceStore(PSWorkflowInstance workflowInstance);
    public PSWorkflowInstance get_PSWorkflowInstance();
    public abstract virtual PersistenceIOParticipant CreatePersistenceIOParticipant();
    public abstract virtual InstanceStore CreateInstanceStore();
    public void Save(WorkflowStoreComponents components);
    protected abstract virtual void DoSave(IEnumerable`1<object> components);
    public void Load(WorkflowStoreComponents components);
    protected abstract virtual IEnumerable`1<object> DoLoad(IEnumerable`1<Type> componentTypes);
    public void Delete();
    protected abstract virtual void DoDelete();
}
public class Microsoft.PowerShell.Workflow.PSWorkflowJob : Job2 {
    public Debugger Debugger { get; }
    public bool HasMoreData { get; }
    public bool IsAsync { get; public set; }
    public string Location { get; }
    public Action`2<PSWorkflowJob, ReadOnlyCollection`1<BookmarkInfo>> OnIdle { get; public set; }
    public Func`4<PSWorkflowJob, ReadOnlyCollection`1<BookmarkInfo>, bool, PSPersistableIdleAction> OnPersistableIdleAction { get; public set; }
    public Action`1<PSWorkflowJob> OnUnloaded { get; public set; }
    public Debugger PSWorkflowDebugger { get; }
    public PSWorkflowInstance PSWorkflowInstance { get; }
    public string StatusMessage { get; }
    public Action`2<PSWorkflowJob, ReadOnlyCollection`1<BookmarkInfo>> get_OnIdle();
    public void set_OnIdle(Action`2<PSWorkflowJob, ReadOnlyCollection`1<BookmarkInfo>> value);
    public Func`4<PSWorkflowJob, ReadOnlyCollection`1<BookmarkInfo>, bool, PSPersistableIdleAction> get_OnPersistableIdleAction();
    public void set_OnPersistableIdleAction(Func`4<PSWorkflowJob, ReadOnlyCollection`1<BookmarkInfo>, bool, PSPersistableIdleAction> value);
    public Action`1<PSWorkflowJob> get_OnUnloaded();
    public void set_OnUnloaded(Action`1<PSWorkflowJob> value);
    public PSWorkflowInstance get_PSWorkflowInstance();
    public Debugger get_PSWorkflowDebugger();
    protected virtual void DoResumeBookmark(Bookmark bookmark, object state);
    public virtual void StopJob();
    public virtual string get_StatusMessage();
    public virtual bool get_HasMoreData();
    public virtual string get_Location();
    protected virtual void DoLoadJobStreams();
    protected virtual void DoUnloadJobStreams();
    public virtual void StartJob();
    public virtual void StartJobAsync();
    public virtual void StopJobAsync();
    public virtual void SuspendJob();
    public virtual void SuspendJobAsync();
    public virtual void StopJob(bool force, string reason);
    public void StopJob(bool force, string reason, bool suppressError);
    public virtual void StopJobAsync(bool force, string reason);
    public void StopJobAsync(bool force, string reason, bool suppressError);
    public virtual void SuspendJob(bool force, string reason);
    public virtual void SuspendJobAsync(bool force, string reason);
    public virtual void ResumeJob();
    public virtual void ResumeJob(string label);
    public void ResumeBookmark(Bookmark bookmark, object state);
    public void ResumeBookmark(Bookmark bookmark, bool supportDisconnectedStreams, PowerShellStreams`2<PSObject, PSObject> streams);
    public void ResumeBookmark(Bookmark bookmark, bool supportDisconnectedStreams, PowerShellStreams`2<PSObject, PSObject> streams, Exception exception);
    public PSPersistableIdleAction GetPersistableIdleAction(ReadOnlyCollection`1<BookmarkInfo> bookmarks, bool externalSuspendRequest);
    public virtual void ResumeJobAsync();
    public virtual void ResumeJobAsync(string label);
    public virtual void UnblockJob();
    public virtual void UnblockJobAsync();
    protected virtual void Dispose(bool disposing);
    public sealed virtual Debugger get_Debugger();
    public sealed virtual bool get_IsAsync();
    public sealed virtual void set_IsAsync(bool value);
}
public class Microsoft.PowerShell.Workflow.PSWorkflowJobManager : object {
    public PSWorkflowJobManager(PSWorkflowRuntime runtime, int throttleLimit);
    public sealed virtual void Dispose();
    public PSWorkflowJob LoadJob(PSWorkflowId storedInstanceId);
    public PSWorkflowJob CreateJob(Guid jobInstanceId, Activity workflow, string command, string name, Dictionary`2<string, object> parameters);
    public PSWorkflowJob CreateJob(Guid jobInstanceId, string workflowXaml, string command, string name, Dictionary`2<string, object> parameters);
    public PSWorkflowJob CreateJob(Guid jobInstanceId, Activity workflow, string command, string name, Dictionary`2<string, object> parameters, Dictionary`2<string, object> creationContext);
    public PSWorkflowJob CreateJob(Guid jobInstanceId, string workflowXaml, string command, string name, Dictionary`2<string, object> parameters, Dictionary`2<string, object> creationContext);
    public void ShutdownWorkflowManager(int timeout);
    public PSWorkflowJob GetJob(Guid instanceId);
    public IEnumerable`1<PSWorkflowJob> GetJobs();
    public void RemoveJob(Guid instanceId);
    public void UnloadJob(Guid instanceId);
    public void UnloadAllJobs();
}
public class Microsoft.PowerShell.Workflow.PSWorkflowRemoteActivityState : object {
    public PSWorkflowRemoteActivityState(PSWorkflowInstanceStore store, Dictionary`2<string, Dictionary`2<int, Tuple`2<object, string>>> deserializedRemoteActivityState);
    public Dictionary`2<string, Dictionary`2<int, Tuple`2<object, string>>> GetSerializedData();
}
public class Microsoft.PowerShell.Workflow.PSWorkflowRuntime : PSWorkflowHost {
    public PSWorkflowConfigurationProvider Configuration { get; }
    public PSWorkflowJobManager JobManager { get; }
    public RunspaceProvider LocalRunspaceProvider { get; }
    public PSActivityHostController PSActivityHostController { get; }
    public RunspaceProvider RemoteRunspaceProvider { get; }
    public RunspaceProvider UnboundedLocalRunspaceProvider { get; }
    public PSWorkflowRuntime(PSWorkflowConfigurationProvider configuration);
    public sealed virtual void Dispose();
    public virtual PSWorkflowConfigurationProvider get_Configuration();
    public virtual PSWorkflowJobManager get_JobManager();
    public virtual PSActivityHostController get_PSActivityHostController();
    public virtual RunspaceProvider get_RemoteRunspaceProvider();
    public virtual RunspaceProvider get_LocalRunspaceProvider();
    public virtual RunspaceProvider get_UnboundedLocalRunspaceProvider();
}
public class Microsoft.PowerShell.Workflow.PSWorkflowSessionConfiguration : PSSessionConfiguration {
    public virtual InitialSessionState GetInitialSessionState(PSSenderInfo senderInfo);
    public virtual InitialSessionState GetInitialSessionState(PSSessionConfigurationData sessionConfigurationData, PSSenderInfo senderInfo, string configProviderId);
}
public class Microsoft.PowerShell.Workflow.PSWorkflowTimer : object {
    public PSWorkflowTimer(PSWorkflowInstance instance, object deserializedTimers);
    public object GetSerializedData();
    public sealed virtual void Dispose();
}
public class Microsoft.PowerShell.Workflow.PSWorkflowValidator : object {
    public PSWorkflowValidator(PSWorkflowConfigurationProvider configuration);
    public ValidationResults ValidateWorkflow(Activity workflow, string runtimeAssembly);
}
public static class Microsoft.PowerShell.Workflow.Validation : object {
    public static Func`2<Activity, bool> CustomHandler { get; public set; }
    public static Func`2<Activity, bool> get_CustomHandler();
    public static void set_CustomHandler(Func`2<Activity, bool> value);
}
public class Microsoft.PowerShell.Workflow.WorkflowJobSourceAdapter : JobSourceAdapter {
    public static WorkflowJobSourceAdapter GetInstance();
    public PSWorkflowJobManager GetJobManager();
    public PSWorkflowRuntime GetPSWorkflowRuntime();
    public virtual Job2 NewJob(JobInvocationInfo specification);
    public virtual IList`1<Job2> GetJobs();
    public virtual IList`1<Job2> GetJobsByName(string name, bool recurse);
    public virtual IList`1<Job2> GetJobsByCommand(string command, bool recurse);
    public virtual Job2 GetJobByInstanceId(Guid instanceId, bool recurse);
    public virtual Job2 GetJobBySessionId(int id, bool recurse);
    public virtual IList`1<Job2> GetJobsByState(JobState state, bool recurse);
    public virtual IList`1<Job2> GetJobsByFilter(Dictionary`2<string, object> filter, bool recurse);
    public virtual void RemoveJob(Job2 job);
}
[FlagsAttribute]
public enum Microsoft.PowerShell.Workflow.WorkflowStoreComponents : Enum {
    public int value__;
    public static WorkflowStoreComponents ActivityState;
    public static WorkflowStoreComponents Definition;
    public static WorkflowStoreComponents JobState;
    public static WorkflowStoreComponents Metadata;
    public static WorkflowStoreComponents Streams;
    public static WorkflowStoreComponents TerminatingError;
    public static WorkflowStoreComponents Timer;
}
public enum Microsoft.PowerShell.Workflow.WorkflowUnhandledErrorAction : Enum {
    public int value__;
    public static WorkflowUnhandledErrorAction Stop;
    public static WorkflowUnhandledErrorAction Suspend;
    public static WorkflowUnhandledErrorAction Terminate;
}
